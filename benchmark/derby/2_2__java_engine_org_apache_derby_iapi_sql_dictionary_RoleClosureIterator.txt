1:fe8c4c2: /*
5:fe8c4c2: 
1:fe8c4c2:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoleClosureIterator
1:fe8c4c2: 
1:fe8c4c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:fe8c4c2:    contributor license agreements.  See the NOTICE file distributed with
1:fe8c4c2:    this work for additional information regarding copyright ownership.
1:fe8c4c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:fe8c4c2:    (the "License"); you may not use this file except in compliance with
1:fe8c4c2:    the License.  You may obtain a copy of the License at
1:fe8c4c2: 
1:fe8c4c2:       http://www.apache.org/licenses/LICENSE-2.0
1:fe8c4c2: 
1:fe8c4c2:    Unless required by applicable law or agreed to in writing, software
1:fe8c4c2:    distributed under the License is distributed on an "AS IS" BASIS,
1:fe8c4c2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fe8c4c2:    See the License for the specific language governing permissions and
1:fe8c4c2:    limitations under the License.
1:fe8c4c2: 
2:fe8c4c2:  */
1:fe8c4c2: package org.apache.derby.iapi.sql.dictionary;
1:fe8c4c2: 
1:fe8c4c2: import org.apache.derby.iapi.error.StandardException;
1:fe8c4c2: 
2:fe8c4c2: /**
1:fe8c4c2:  * Allows iterator over the role grant closure defined by the relation
1:fe8c4c2:  * GRANT role-a TO role-b, or its inverse.
1:fe8c4c2:  * @see DataDictionary#createRoleClosureIterator
1:fe8c4c2:  * @see org.apache.derby.impl.sql.catalog.RoleClosureIteratorImpl
1:fe8c4c2:  */
1:fe8c4c2: public interface RoleClosureIterator
1:fe8c4c2: {
1:fe8c4c2: 
1:fe8c4c2:     /**
1:0674d16:      * Returns the next (as yet unreturned) role in the transitive closure of
1:0674d16:      * the grant or grant<sup>-1</sup> relation.
2:fe8c4c2:      *
1:fe8c4c2:      * The grant relation forms a DAG (directed acyclic graph).
1:fe8c4c2:      * <pre>
1:fe8c4c2:      * Example:
1:fe8c4c2:      *      Assume a set of created roles forming nodes:
1:fe8c4c2:      *            {a1, a2, a3, b, c, d, e, f, h, j}
1:fe8c4c2:      *
1:fe8c4c2:      *      Assume a set of GRANT statements forming arcs:
1:fe8c4c2:      *
1:fe8c4c2:      *      GRANT a1 TO b;   GRANT b TO e;  GRANT e TO h;
1:fe8c4c2:      *      GRANT a1 TO c;                  GRANT e TO f;
1:fe8c4c2:      *      GRANT a2 TO c;   GRANT c TO f;  GRANT f TO h;
1:fe8c4c2:      *      GRANT a3 TO d;   GRANT d TO f;  GRANT a1 to j;
1:fe8c4c2:      *
1:fe8c4c2:      *
1:fe8c4c2:      *          a1            a2         a3
1:fe8c4c2:      *         / | \           |          |
1:dbed020:      *        /  b  +--------&gt; c          d
1:fe8c4c2:      *       j   |              \        /
1:fe8c4c2:      *           e---+           \      /
1:fe8c4c2:      *            \   \           \    /
1:fe8c4c2:      *             \   \---------+ \  /
1:fe8c4c2:      *              \             \_ f
1:fe8c4c2:      *               \             /
1:fe8c4c2:      *                \           /
1:fe8c4c2:      *                 \         /
1:fe8c4c2:      *                  \       /
1:fe8c4c2:      *                   \     /
1:fe8c4c2:      *                    \   /
1:fe8c4c2:      *                      h
1:fe8c4c2:      * </pre>
1:fe8c4c2:      * An iterator on the inverse relation starting at h for the above
1:fe8c4c2:      * grant graph will return:
1:fe8c4c2:      * <pre>
1:0674d16:      *       closure(h, grant-inv) = {h, e, b, a1, f, c, a2, d, a3}
1:fe8c4c2:      * </pre>
1:fe8c4c2:      * <p>
1:fe8c4c2:      * An iterator on normal (not inverse) relation starting at a1 for
1:fe8c4c2:      * the above grant graph will return:
1:fe8c4c2:      * <pre>
1:0674d16:      *       closure(a1, grant)    = {a1, b, j, e, h, f, c}
1:fe8c4c2:      * </pre>
1:fe8c4c2:      *
1:0674d16:      * @return a role name identifying a yet unseen node, or null if the
1:0674d16:      *         closure is exhausted.  The order in which the nodes are returned
1:0674d16:      *         is not defined, except that the root is always returned first (h
1:0674d16:      *         and a1 in the above examples).
1:fe8c4c2:      */
1:0674d16:     public String next() throws StandardException;
1:fe8c4c2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      *        /  b  +--------&gt; c          d
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:12988c7
/////////////////////////////////////////////////////////////////////////
commit:0674d16
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Returns the next (as yet unreturned) role in the transitive closure of
1:      * the grant or grant<sup>-1</sup> relation.
/////////////////////////////////////////////////////////////////////////
1:      *       closure(h, grant-inv) = {h, e, b, a1, f, c, a2, d, a3}
1:      *       closure(a1, grant)    = {a1, b, j, e, h, f, c}
1:      * @return a role name identifying a yet unseen node, or null if the
1:      *         closure is exhausted.  The order in which the nodes are returned
1:      *         is not defined, except that the root is always returned first (h
1:      *         and a1 in the above examples).
1:     public String next() throws StandardException;
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoleClosureIterator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.error.StandardException;
0: import java.util.HashMap;
1: 
1: /**
1:  * Allows iterator over the role grant closure defined by the relation
1:  * GRANT role-a TO role-b, or its inverse.
1:  * @see DataDictionary#createRoleClosureIterator
1:  * @see org.apache.derby.impl.sql.catalog.RoleClosureIteratorImpl
1:  */
1: public interface RoleClosureIterator
1: {
1: 
1:     /**
0:      * Returns the next (as yet unseen) role in the closure of the
0:      * grant or grant<sup>-1</sup> relation. 
1:      *
1:      * The grant relation forms a DAG (directed acyclic graph).
1:      * <pre>
1:      * Example:
1:      *      Assume a set of created roles forming nodes:
1:      *            {a1, a2, a3, b, c, d, e, f, h, j}
1:      *
1:      *      Assume a set of GRANT statements forming arcs:
1:      *
1:      *      GRANT a1 TO b;   GRANT b TO e;  GRANT e TO h;
1:      *      GRANT a1 TO c;                  GRANT e TO f;
1:      *      GRANT a2 TO c;   GRANT c TO f;  GRANT f TO h;
1:      *      GRANT a3 TO d;   GRANT d TO f;  GRANT a1 to j;
1:      *
1:      *
1:      *          a1            a2         a3
1:      *         / | \           |          |
0:      *        /  b  +--------> c          d
1:      *       j   |              \        /
1:      *           e---+           \      /
1:      *            \   \           \    /
1:      *             \   \---------+ \  /
1:      *              \             \_ f
1:      *               \             /
1:      *                \           /
1:      *                 \         /
1:      *                  \       /
1:      *                   \     /
1:      *                    \   /
1:      *                      h
1:      * </pre>
1:      * An iterator on the inverse relation starting at h for the above
1:      * grant graph will return:
1:      * <pre>
0:      *       closure(h, grant-inv) = {e, b, a1, f, c, a2, d, a3}
1:      * </pre>
1:      * <p>
1:      * An iterator on normal (not inverse) relation starting at a1 for
1:      * the above grant graph will return:
1:      * <pre>
0:      *       closure(a1, grant)    = {b, j, e, h, f, c}
1:      * </pre>
1:      *
0:      * @return a role name identifying a yet unseen node, or null if
0:      *         the closure is exhausted.  The order in which the nodes
0:      *         are returned is not defined.
1:      */
0:     public String next();
1: 
1: 
1:     /**
0:      * This method should be called after the iteration is completed.
1:      *
0:      * @throws StandardException
1:      */
0:     public void close() throws StandardException;
1: 
1: 
1: }
============================================================================