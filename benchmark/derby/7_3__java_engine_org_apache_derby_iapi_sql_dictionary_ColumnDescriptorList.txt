1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.ArrayList;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This represents a list of column descriptors. 
1:eac0369:  */
1:eac0369: 
1:89f21fb: public class ColumnDescriptorList extends ArrayList<ColumnDescriptor>
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Add the column.  Currently, the table id is ignored.
1:eac0369: 	 *
1:6b50965: 	 * @param tableID the table id (ignored)
1:eac0369: 	 * @param column the column to add
1:eac0369: 	 */	
1:eac0369: 	public void add(UUID tableID, ColumnDescriptor column)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** RESOLVE: The interface includes tableID because presumably
1:eac0369: 		** the primary key for the columns table will be tableID +
1:eac0369: 		** columnID (or possibly tableID + column name - both column
1:eac0369: 		** name and ID must be unique within a table).  However, the
1:eac0369: 		** ColumnDescriptor contains a reference to a tableID, so it
1:eac0369: 		** seems like we don't need the parameter here.  I am going
1:eac0369: 		** to leave it here just in case we decide we need it later.
1:eac0369: 		*/
1:eac0369: 		add(column);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column descriptor
1:eac0369: 	 *
1:6b50965: 	 * @param tableID the table id (ignored)
1:eac0369: 	 * @param columnName the column get
1:eac0369: 	 *
1:eac0369: 	 * @return the column descriptor if found
1:eac0369: 	 */	
1:eac0369: 	public ColumnDescriptor getColumnDescriptor(UUID tableID,
1:eac0369: 							String columnName)
1:eac0369: 	{
1:eac0369: 		ColumnDescriptor	returnValue = null;
1:eac0369: 
1:89f21fb:         for (ColumnDescriptor columnDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if ( columnName.equals( columnDescriptor.getColumnName() ) &&
1:eac0369: 			    tableID.equals( columnDescriptor.getReferencingUUID() ) )
1:eac0369: 			{
1:eac0369: 				returnValue = columnDescriptor;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return returnValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column descriptor
1:eac0369: 	 *
1:6b50965: 	 * @param tableID the table id (ignored)
1:6b50965: 	 * @param columnID the column id
1:eac0369: 	 *
1:eac0369: 	 * @return the column descriptor if found
1:eac0369: 	 */	
1:eac0369: 	public ColumnDescriptor getColumnDescriptor(UUID tableID, int columnID)
1:eac0369: 	{
1:eac0369: 		ColumnDescriptor	returnValue = null;
1:eac0369: 
1:89f21fb:         for (ColumnDescriptor columnDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if ( ( columnID == columnDescriptor.getPosition() ) &&
1:eac0369: 				tableID.equals( columnDescriptor.getReferencingUUID() ) )
1:eac0369: 			{
1:eac0369: 				returnValue = columnDescriptor;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return returnValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the nth (0-based) element in the list.
1:eac0369: 	 *
1:eac0369: 	 * @param n	Which element to return.
1:eac0369: 	 *
1:eac0369: 	 * @return The nth element in the list.
1:eac0369: 	 */
1:eac0369: 	public ColumnDescriptor elementAt(int n)
1:eac0369: 	{
1:89f21fb:         return get(n);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get an array of strings for all the columns
1:eac0369: 	 * in this CDL.
1:eac0369: 	 *
1:eac0369: 	 * @return the array of strings
1:eac0369: 	 */
1:eac0369: 	public String[] getColumnNames()
1:eac0369: 	{
1:eac0369: 		String strings[] = new String[size()];
1:eac0369: 
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:89f21fb:             ColumnDescriptor columnDescriptor = elementAt(index);
1:eac0369: 			strings[index] = columnDescriptor.getColumnName();
1:eac0369: 		}
1:eac0369: 		return strings;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:89f21fb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class ColumnDescriptorList extends ArrayList<ColumnDescriptor>
/////////////////////////////////////////////////////////////////////////
1:         for (ColumnDescriptor columnDescriptor : this)
/////////////////////////////////////////////////////////////////////////
1:         for (ColumnDescriptor columnDescriptor : this)
/////////////////////////////////////////////////////////////////////////
1:         return get(n);
/////////////////////////////////////////////////////////////////////////
1:             ColumnDescriptor columnDescriptor = elementAt(index);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
0: public class ColumnDescriptorList extends ArrayList<TupleDescriptor>
/////////////////////////////////////////////////////////////////////////
0: 		for (Iterator<TupleDescriptor> iterator = iterator(); iterator.hasNext(); )
/////////////////////////////////////////////////////////////////////////
0: 		for (Iterator<TupleDescriptor> iterator = iterator(); iterator.hasNext(); )
/////////////////////////////////////////////////////////////////////////
0: 			ColumnDescriptor columnDescriptor = (ColumnDescriptor) elementAt(index);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param tableID the table id (ignored)
/////////////////////////////////////////////////////////////////////////
1: 	 * @param tableID the table id (ignored)
/////////////////////////////////////////////////////////////////////////
1: 	 * @param tableID the table id (ignored)
1: 	 * @param columnID the column id
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
1: /**
1:  * This represents a list of column descriptors. 
1:  */
1: 
0: public class ColumnDescriptorList extends ArrayList
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Add the column.  Currently, the table id is ignored.
1: 	 *
0: 	 * @param tableId the table id (ignored)
1: 	 * @param column the column to add
1: 	 */	
1: 	public void add(UUID tableID, ColumnDescriptor column)
1: 	{
1: 		/*
1: 		** RESOLVE: The interface includes tableID because presumably
1: 		** the primary key for the columns table will be tableID +
1: 		** columnID (or possibly tableID + column name - both column
1: 		** name and ID must be unique within a table).  However, the
1: 		** ColumnDescriptor contains a reference to a tableID, so it
1: 		** seems like we don't need the parameter here.  I am going
1: 		** to leave it here just in case we decide we need it later.
1: 		*/
1: 		add(column);
1: 	}
1: 
1: 	/**
1: 	 * Get the column descriptor
1: 	 *
0: 	 * @param tableId the table id (ignored)
1: 	 * @param columnName the column get
1: 	 *
1: 	 * @return the column descriptor if found
1: 	 */	
1: 	public ColumnDescriptor getColumnDescriptor(UUID tableID,
1: 							String columnName)
1: 	{
1: 		ColumnDescriptor	returnValue = null;
1: 
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
1: 		{
0: 			ColumnDescriptor columnDescriptor = (ColumnDescriptor) iterator.next();
1: 
1: 			if ( columnName.equals( columnDescriptor.getColumnName() ) &&
1: 			    tableID.equals( columnDescriptor.getReferencingUUID() ) )
1: 			{
1: 				returnValue = columnDescriptor;
1: 				break;
1: 			}
1: 		}
1: 
1: 		return returnValue;
1: 	}
1: 
1: 	/**
1: 	 * Get the column descriptor
1: 	 *
0: 	 * @param tableId the table id (ignored)
0: 	 * @param columnId the column id
1: 	 *
1: 	 * @return the column descriptor if found
1: 	 */	
1: 	public ColumnDescriptor getColumnDescriptor(UUID tableID, int columnID)
1: 	{
1: 		ColumnDescriptor	returnValue = null;
1: 
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
1: 		{
0: 			ColumnDescriptor columnDescriptor = (ColumnDescriptor) iterator.next();
1: 			if ( ( columnID == columnDescriptor.getPosition() ) &&
1: 				tableID.equals( columnDescriptor.getReferencingUUID() ) )
1: 			{
1: 				returnValue = columnDescriptor;
1: 				break;
1: 			}
1: 		}
1: 
1: 		return returnValue;
1: 	}
1: 
1: 	/**
1: 	 * Return the nth (0-based) element in the list.
1: 	 *
1: 	 * @param n	Which element to return.
1: 	 *
1: 	 * @return The nth element in the list.
1: 	 */
1: 	public ColumnDescriptor elementAt(int n)
1: 	{
0: 		return (ColumnDescriptor) get(n);
1: 	}
1: 
1: 	/**
1: 	 * Get an array of strings for all the columns
1: 	 * in this CDL.
1: 	 *
1: 	 * @return the array of strings
1: 	 */
1: 	public String[] getColumnNames()
1: 	{
1: 		String strings[] = new String[size()];
1: 
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
0: 			ColumnDescriptor columnDescriptor = elementAt(index);
1: 			strings[index] = columnDescriptor.getColumnName();
1: 		}
1: 		return strings;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: /**
0:  * This represents a list of column descriptors. 
0:  */
0: 
0: public class ColumnDescriptorList extends ArrayList
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Add the column.  Currently, the table id is ignored.
0: 	 *
0: 	 * @param tableId the table id (ignored)
0: 	 * @param column the column to add
0: 	 */	
0: 	public void add(UUID tableID, ColumnDescriptor column)
0: 	{
0: 		/*
0: 		** RESOLVE: The interface includes tableID because presumably
0: 		** the primary key for the columns table will be tableID +
0: 		** columnID (or possibly tableID + column name - both column
0: 		** name and ID must be unique within a table).  However, the
0: 		** ColumnDescriptor contains a reference to a tableID, so it
0: 		** seems like we don't need the parameter here.  I am going
0: 		** to leave it here just in case we decide we need it later.
0: 		*/
0: 		add(column);
0: 	}
0: 
0: 	/**
0: 	 * Get the column descriptor
0: 	 *
0: 	 * @param tableId the table id (ignored)
0: 	 * @param columnName the column get
0: 	 *
0: 	 * @return the column descriptor if found
0: 	 */	
0: 	public ColumnDescriptor getColumnDescriptor(UUID tableID,
0: 							String columnName)
0: 	{
0: 		ColumnDescriptor	returnValue = null;
0: 
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
0: 		{
0: 			ColumnDescriptor columnDescriptor = (ColumnDescriptor) iterator.next();
0: 
0: 			if ( columnName.equals( columnDescriptor.getColumnName() ) &&
0: 			    tableID.equals( columnDescriptor.getReferencingUUID() ) )
0: 			{
0: 				returnValue = columnDescriptor;
0: 				break;
0: 			}
0: 		}
0: 
0: 		return returnValue;
0: 	}
0: 
0: 	/**
0: 	 * Get the column descriptor
0: 	 *
0: 	 * @param tableId the table id (ignored)
0: 	 * @param columnId the column id
0: 	 *
0: 	 * @return the column descriptor if found
0: 	 */	
0: 	public ColumnDescriptor getColumnDescriptor(UUID tableID, int columnID)
0: 	{
0: 		ColumnDescriptor	returnValue = null;
0: 
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
0: 		{
0: 			ColumnDescriptor columnDescriptor = (ColumnDescriptor) iterator.next();
0: 			if ( ( columnID == columnDescriptor.getPosition() ) &&
0: 				tableID.equals( columnDescriptor.getReferencingUUID() ) )
0: 			{
0: 				returnValue = columnDescriptor;
0: 				break;
0: 			}
0: 		}
0: 
0: 		return returnValue;
0: 	}
0: 
0: 	/**
0: 	 * Return the nth (0-based) element in the list.
0: 	 *
0: 	 * @param n	Which element to return.
0: 	 *
0: 	 * @return The nth element in the list.
0: 	 */
0: 	public ColumnDescriptor elementAt(int n)
0: 	{
0: 		return (ColumnDescriptor) get(n);
0: 	}
0: 
0: 	/**
0: 	 * Get an array of strings for all the columns
0: 	 * in this CDL.
0: 	 *
0: 	 * @return the array of strings
0: 	 */
0: 	public String[] getColumnNames()
0: 	{
0: 		String strings[] = new String[size()];
0: 
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			ColumnDescriptor columnDescriptor = elementAt(index);
0: 			strings[index] = columnDescriptor.getColumnName();
0: 		}
0: 		return strings;
0: 	}
0: }
============================================================================