1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BetweenOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * A BetweenOperatorNode represents a BETWEEN clause. The between values are
1:eac0369:  * represented as a 2 element list in order to take advantage of code reuse.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class BetweenOperatorNode extends BinaryListOperatorNode
2:eac0369: {
1:3bb140c:     /**
1:3bb140c:      * @param leftOperand The left operand of the node
1:3bb140c:      * @param betweenValues The between values in list form
1:3bb140c:      * @param cm
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     BetweenOperatorNode(ValueNode leftOperand,
1:3bb140c:             ValueNodeList betweenValues,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(leftOperand, vetValues(betweenValues), "BETWEEN", null, cm);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     private static ValueNodeList vetValues(ValueNodeList betweenValues) {
1:3bb140c:         if (SanityManager.DEBUG)
1:eac0369: 		{
1:3bb140c:             ValueNodeList betweenVals = betweenValues;
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(betweenVals.size() == 2,
1:eac0369: 				"betweenValues.size() (" +
1:eac0369: 				betweenVals.size()	+
1:eac0369: 				") is expected to be 2");
2:eac0369: 		}
1:3bb140c:         return betweenValues;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1:eac0369: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1:eac0369: 	 * ComparisonOperators and boolean expressions.  We invert 
1:eac0369: 	 * ComparisonOperators and replace boolean expressions with 
1:eac0369: 	 * boolean expression = false.
1:eac0369: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1:eac0369: 	 * still could be NotNodes left in the tree.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		BinaryComparisonOperatorNode leftBCO;
1:eac0369: 		BinaryComparisonOperatorNode rightBCO;
1:eac0369: 		OrNode						 newOr;
1:eac0369: 
2:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(rightOperandList.size() == 2,
1:eac0369: 			"rightOperandList.size() (" +
1:eac0369: 			rightOperandList.size()	+
1:eac0369: 			") is expected to be 2");
1:eac0369: 
1:eac0369: 		if (! underNotNode)
1:eac0369: 		{
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* we want to convert the BETWEEN  * into < OR > 
1:eac0369: 		   as described below.
1:eac0369: 		*/		
1:eac0369: 
1:eac0369: 		/* Convert:
1:eac0369: 		 *		leftO between rightOList.elementAt(0) and rightOList.elementAt(1)
1:eac0369: 		 * to:
1:eac0369: 		 *		leftO < rightOList.elementAt(0) or leftO > rightOList.elementAt(1)
1:eac0369: 		 * NOTE - We do the conversion here since ORs will eventually be
1:eac0369: 		 * optimizable and there's no benefit for the optimizer to see NOT BETWEEN
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		ContextManager cm = getContextManager();
1:eac0369: 
1:eac0369: 		/* leftO < rightOList.elementAt(0) */
1:3bb140c:         leftBCO = new BinaryRelationalOperatorNode(
1:2706d1f:                 BinaryRelationalOperatorNode.K_LESS_THAN,
1:2706d1f:                 leftOperand,
1:2706d1f:                 rightOperandList.elementAt(0),
1:2706d1f:                 false,
1:2706d1f:                 cm);
1:eac0369: 		/* Set type info for the operator node */
1:eac0369: 		leftBCO.bindComparisonOperator();
1:eac0369: 
1:f8d48a3:         // DERBY-4388: If leftOperand is a ColumnReference, it may be remapped
1:f8d48a3:         // during optimization, and that requires the less-than node and the
1:f8d48a3:         // greater-than node to have separate objects.
1:f8d48a3:         ValueNode leftClone = (leftOperand instanceof ColumnReference) ?
1:f8d48a3:             leftOperand.getClone() : leftOperand;
1:f8d48a3: 
1:eac0369: 		/* leftO > rightOList.elementAt(1) */
1:3bb140c:         rightBCO = new BinaryRelationalOperatorNode(
1:2706d1f:                 BinaryRelationalOperatorNode.K_GREATER_THAN,
1:2706d1f:                 leftClone,
1:2706d1f:                 rightOperandList.elementAt(1),
1:2706d1f:                 false,
1:2706d1f:                 cm);
1:eac0369: 		/* Set type info for the operator node */
1:eac0369: 		rightBCO.bindComparisonOperator();
1:eac0369: 
1:eac0369: 		/* Create and return the OR */
1:3bb140c:         newOr = new OrNode(leftBCO, rightBCO, cm);
1:eac0369: 		newOr.postBindFixup();
1:eac0369: 
1:eac0369: 		/* Tell optimizer to use the between selectivity instead of >= * <= selectivities */
1:eac0369: 		leftBCO.setBetweenSelectivity();
1:eac0369: 		rightBCO.setBetweenSelectivity();
1:eac0369: 
1:eac0369: 		return newOr;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Preprocess an expression tree.  We do a number of transformations
1:eac0369: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1:eac0369: 	 * subquery flattening.
1:eac0369: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1:eac0369: 	 *
1:eac0369: 	 * @param	numTables			Number of tables in the DML Statement
1:eac0369: 	 * @param	outerFromList		FromList from outer query block
1:eac0369: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1:eac0369: 	 * @param	outerPredicateList	PredicateList from outer query block
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode preprocess(int numTables,
1:eac0369: 								FromList outerFromList,
1:eac0369: 								SubqueryList outerSubqueryList,
1:eac0369: 								PredicateList outerPredicateList) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		ValueNode	leftClone1;
1:eac0369: 		ValueNode	rightOperand;
1:eac0369: 
1:eac0369: 		/* We must 1st preprocess the component parts */
1:eac0369: 		super.preprocess(numTables,
1:eac0369: 						 outerFromList, outerSubqueryList,
1:eac0369: 						 outerPredicateList);
1:eac0369: 
1:eac0369: 		/* This is where we do the transformation for BETWEEN to make it optimizable.
1:eac0369: 		 * c1 BETWEEN value1 AND value2 -> c1 >= value1 AND c1 <= value2
1:eac0369: 		 * This transformation is only done if the leftOperand is a ColumnReference.
1:eac0369: 		 */
1:eac0369: 		if (!(leftOperand instanceof ColumnReference))
1:eac0369: 		{
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* For some unknown reason we need to clone the leftOperand if it is
1:eac0369: 		 * a ColumnReference because reusing them in Qualifiers for a scan
1:eac0369: 		 * does not work.  
1:eac0369: 		 */
1:eac0369: 		leftClone1 = leftOperand.getClone();
1:eac0369: 
1:eac0369: 		/* The transformed tree has to be normalized:
1:eac0369: 		 *				AND
1:eac0369: 		 *			   /   \
1:eac0369: 		 *			  >=    AND
1:eac0369: 		 *				   /   \
1:eac0369: 		 *				  <=    TRUE
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		ContextManager cm = getContextManager();
1:eac0369: 
1:3bb140c:         BooleanConstantNode trueNode = new BooleanConstantNode(true, cm);
1:eac0369: 
1:eac0369: 		/* Create the AND <= */
1:eac0369: 		BinaryComparisonOperatorNode lessEqual = 
1:3bb140c:             new BinaryRelationalOperatorNode(
1:2706d1f:                 BinaryRelationalOperatorNode.K_LESS_EQUALS,
1:2706d1f:                 leftClone1,
1:2706d1f:                 rightOperandList.elementAt(1),
1:2706d1f:                 false,
1:2706d1f:                 cm);
1:eac0369: 
1:eac0369: 		/* Set type info for the operator node */
1:eac0369: 		lessEqual.bindComparisonOperator();
1:eac0369: 
1:eac0369: 		/* Create the AND */
1:3bb140c:        AndNode newAnd = new AndNode(lessEqual, trueNode, cm);
1:eac0369: 		newAnd.postBindFixup();
1:eac0369: 
1:eac0369: 		/* Create the AND >= */
1:eac0369: 		BinaryComparisonOperatorNode greaterEqual = 
1:3bb140c:             new BinaryRelationalOperatorNode(
1:2706d1f:                 BinaryRelationalOperatorNode.K_GREATER_EQUALS,
1:2706d1f:                 leftOperand,
1:2706d1f:                 rightOperandList.elementAt(0),
1:2706d1f:                 false,
1:2706d1f:                 cm);
1:eac0369: 
1:eac0369: 		/* Set type info for the operator node */
1:eac0369: 		greaterEqual.bindComparisonOperator();
1:eac0369: 
1:eac0369: 		/* Create the AND */
1:3bb140c:        newAnd = new AndNode(greaterEqual, newAnd, cm);
1:eac0369: 		newAnd.postBindFixup();
1:eac0369: 
1:eac0369: 		/* Tell optimizer to use the between selectivity instead of >= * <= selectivities */
1:eac0369: 		lessEqual.setBetweenSelectivity();
1:eac0369: 		greaterEqual.setBetweenSelectivity();
1:eac0369: 
1:eac0369: 		return newAnd;
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Do code generation for this BETWEEN operator.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		AndNode						 newAnd;
1:eac0369: 		BinaryComparisonOperatorNode leftBCO;
1:eac0369: 		BinaryComparisonOperatorNode rightBCO;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(rightOperandList.size() == 2,
1:eac0369: 			"rightOperandList.size() (" +
1:eac0369: 			rightOperandList.size()	+
1:eac0369: 			") is expected to be 2");
1:eac0369: 
1:eac0369: 		/* Convert:
1:eac0369: 		 *		leftO between rightOList.elementAt(0) and rightOList.elementAt(1)
1:eac0369: 		 * to:
1:eac0369: 		 *		leftO >= rightOList.elementAt(0) and leftO <= rightOList.elementAt(1) 
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		ContextManager cm = getContextManager();
1:eac0369: 
1:eac0369: 		/* leftO >= rightOList.elementAt(0) */
1:3bb140c:         leftBCO = new BinaryRelationalOperatorNode(
1:2706d1f:                 BinaryRelationalOperatorNode.K_GREATER_EQUALS,
1:2706d1f:                 leftOperand,
1:2706d1f:                 rightOperandList.elementAt(0),
1:2706d1f:                 false,
1:2706d1f:                 cm);
1:eac0369: 		/* Set type info for the operator node */
1:eac0369: 		leftBCO.bindComparisonOperator();
1:eac0369: 
1:eac0369: 		/* leftO <= rightOList.elementAt(1) */
1:3bb140c:         rightBCO = new BinaryRelationalOperatorNode(
1:2706d1f:                 BinaryRelationalOperatorNode.K_LESS_EQUALS,
1:2706d1f:                 leftOperand,
1:2706d1f:                 rightOperandList.elementAt(1),
1:2706d1f:                 false,
1:2706d1f:                 cm);
1:eac0369: 		/* Set type info for the operator node */
1:eac0369: 		rightBCO.bindComparisonOperator();
1:eac0369: 
1:eac0369: 		/* Create and return the AND */
1:3bb140c:         newAnd = new AndNode(leftBCO, rightBCO, cm);
1:eac0369: 		newAnd.postBindFixup();
1:eac0369: 		newAnd.generateExpression(acb, mb);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 BinaryRelationalOperatorNode.K_LESS_THAN,
1:                 leftOperand,
1:                 rightOperandList.elementAt(0),
1:                 false,
1:                 cm);
/////////////////////////////////////////////////////////////////////////
1:                 BinaryRelationalOperatorNode.K_GREATER_THAN,
1:                 leftClone,
1:                 rightOperandList.elementAt(1),
1:                 false,
1:                 cm);
/////////////////////////////////////////////////////////////////////////
1:                 BinaryRelationalOperatorNode.K_LESS_EQUALS,
1:                 leftClone1,
1:                 rightOperandList.elementAt(1),
1:                 false,
1:                 cm);
/////////////////////////////////////////////////////////////////////////
1:                 BinaryRelationalOperatorNode.K_GREATER_EQUALS,
1:                 leftOperand,
1:                 rightOperandList.elementAt(0),
1:                 false,
1:                 cm);
/////////////////////////////////////////////////////////////////////////
1:                 BinaryRelationalOperatorNode.K_GREATER_EQUALS,
1:                 leftOperand,
1:                 rightOperandList.elementAt(0),
1:                 false,
1:                 cm);
1:                 BinaryRelationalOperatorNode.K_LESS_EQUALS,
1:                 leftOperand,
1:                 rightOperandList.elementAt(1),
1:                 false,
1:                 cm);
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
0:                                     rightOperandList.elementAt(0),
/////////////////////////////////////////////////////////////////////////
0:                                 rightOperandList.elementAt(1),
/////////////////////////////////////////////////////////////////////////
0:                         rightOperandList.elementAt(1),
/////////////////////////////////////////////////////////////////////////
0:                     rightOperandList.elementAt(0),
/////////////////////////////////////////////////////////////////////////
0:                             rightOperandList.elementAt(0),
/////////////////////////////////////////////////////////////////////////
0:                         rightOperandList.elementAt(1),
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class BetweenOperatorNode extends BinaryListOperatorNode
1:     /**
1:      * @param leftOperand The left operand of the node
1:      * @param betweenValues The between values in list form
1:      * @param cm
1:      * @throws StandardException
1:      */
1:     BetweenOperatorNode(ValueNode leftOperand,
1:             ValueNodeList betweenValues,
1:             ContextManager cm) throws StandardException {
1:         super(leftOperand, vetValues(betweenValues), "BETWEEN", null, cm);
0:         setNodeType(C_NodeTypes.BETWEEN_OPERATOR_NODE);
1:     }
1:     private static ValueNodeList vetValues(ValueNodeList betweenValues) {
1:         if (SanityManager.DEBUG)
1:             ValueNodeList betweenVals = betweenValues;
1:         return betweenValues;
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         leftBCO = new BinaryRelationalOperatorNode(
0:                                     (ValueNode)rightOperandList.elementAt(0),
0:                                     false,
/////////////////////////////////////////////////////////////////////////
1:         rightBCO = new BinaryRelationalOperatorNode(
0:                                 (ValueNode)rightOperandList.elementAt(1),
0:                                 false,
1:         newOr = new OrNode(leftBCO, rightBCO, cm);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:         BooleanConstantNode trueNode = new BooleanConstantNode(true, cm);
1:             new BinaryRelationalOperatorNode(
0:                         (ValueNode)rightOperandList.elementAt(1),
0:                         false,
1:        AndNode newAnd = new AndNode(lessEqual, trueNode, cm);
1:             new BinaryRelationalOperatorNode(
0:                     (ValueNode)rightOperandList.elementAt(0),
0:                     false,
1:        newAnd = new AndNode(greaterEqual, newAnd, cm);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         leftBCO = new BinaryRelationalOperatorNode(
0:                             (ValueNode)rightOperandList.elementAt(0),
0:                             false,
1:         rightBCO = new BinaryRelationalOperatorNode(
0:                         (ValueNode)rightOperandList.elementAt(1),
0:                         false,
1:         newAnd = new AndNode(leftBCO, rightBCO, cm);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:e6a9998
/////////////////////////////////////////////////////////////////////////
0:         QueryTreeNode trueNode = (QueryTreeNode) nodeFactory.getNode(
commit:f8d48a3
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-4388: If leftOperand is a ColumnReference, it may be remapped
1:         // during optimization, and that requires the less-than node and the
1:         // greater-than node to have separate objects.
1:         ValueNode leftClone = (leftOperand instanceof ColumnReference) ?
1:             leftOperand.getClone() : leftOperand;
1: 
0: 								leftClone,
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:8c15184
/////////////////////////////////////////////////////////////////////////
0: 								 	Boolean.FALSE,
/////////////////////////////////////////////////////////////////////////
0: 							 	Boolean.FALSE,
/////////////////////////////////////////////////////////////////////////
0: 					 	Boolean.FALSE,
/////////////////////////////////////////////////////////////////////////
0: 				 	Boolean.FALSE,
/////////////////////////////////////////////////////////////////////////
0: 						 	Boolean.FALSE,
/////////////////////////////////////////////////////////////////////////
0: 					 	Boolean.FALSE,
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BetweenOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: /**
1:  * A BetweenOperatorNode represents a BETWEEN clause. The between values are
1:  * represented as a 2 element list in order to take advantage of code reuse.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class BetweenOperatorNode extends BinaryListOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
0: 	 * Initializer for a BetweenOperatorNode
1: 	 *
0: 	 * @param leftOperand		The left operand of the node
0: 	 * @param betweenValues		The between values in list form
1: 	 */
1: 
0: 	public void init(Object leftOperand, Object betweenValues)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			ValueNodeList betweenVals = (ValueNodeList) betweenValues;
1: 
1: 			SanityManager.ASSERT(betweenVals.size() == 2,
1: 				"betweenValues.size() (" +
1: 				betweenVals.size()	+
1: 				") is expected to be 2");
1: 		}
1: 
0: 		super.init(leftOperand, betweenValues, "BETWEEN", null);
1: 	}
1: 
1: 	/**
1: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1: 	 * ComparisonOperators and boolean expressions.  We invert 
1: 	 * ComparisonOperators and replace boolean expressions with 
1: 	 * boolean expression = false.
1: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1: 	 * still could be NotNodes left in the tree.
1: 	 *
1: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 					throws StandardException
1: 	{
1: 		BinaryComparisonOperatorNode leftBCO;
1: 		BinaryComparisonOperatorNode rightBCO;
1: 		OrNode						 newOr;
1: 
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(rightOperandList.size() == 2,
1: 			"rightOperandList.size() (" +
1: 			rightOperandList.size()	+
1: 			") is expected to be 2");
1: 
1: 		if (! underNotNode)
1: 		{
1: 			return this;
1: 		}
1: 
1: 		/* we want to convert the BETWEEN  * into < OR > 
1: 		   as described below.
1: 		*/		
1: 
1: 		/* Convert:
1: 		 *		leftO between rightOList.elementAt(0) and rightOList.elementAt(1)
1: 		 * to:
1: 		 *		leftO < rightOList.elementAt(0) or leftO > rightOList.elementAt(1)
1: 		 * NOTE - We do the conversion here since ORs will eventually be
1: 		 * optimizable and there's no benefit for the optimizer to see NOT BETWEEN
1: 		 */
1: 
0: 		NodeFactory nodeFactory = getNodeFactory();
1: 		ContextManager cm = getContextManager();
1: 
1: 		/* leftO < rightOList.elementAt(0) */
0: 		leftBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 									C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
0: 									leftOperand, 
0: 								 	rightOperandList.elementAt(0),
0: 									cm);
1: 		/* Set type info for the operator node */
1: 		leftBCO.bindComparisonOperator();
1: 
1: 		/* leftO > rightOList.elementAt(1) */
0: 		rightBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
0: 								leftOperand, 
0: 								rightOperandList.elementAt(1),
0: 								cm);
1: 		/* Set type info for the operator node */
1: 		rightBCO.bindComparisonOperator();
1: 
1: 		/* Create and return the OR */
0: 		newOr = (OrNode) nodeFactory.getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												leftBCO,
0: 												rightBCO,
0: 												cm);
1: 		newOr.postBindFixup();
1: 
1: 		/* Tell optimizer to use the between selectivity instead of >= * <= selectivities */
1: 		leftBCO.setBetweenSelectivity();
1: 		rightBCO.setBetweenSelectivity();
1: 
1: 		return newOr;
1: 	}
1: 
1: 	/**
1: 	 * Preprocess an expression tree.  We do a number of transformations
1: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1: 	 * subquery flattening.
1: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1: 	 *
0: 	 * @param	dataDictionary		DataDictionary to use.
1: 	 * @param	numTables			Number of tables in the DML Statement
1: 	 * @param	outerFromList		FromList from outer query block
1: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode preprocess(int numTables,
1: 								FromList outerFromList,
1: 								SubqueryList outerSubqueryList,
1: 								PredicateList outerPredicateList) 
1: 					throws StandardException
1: 	{
1: 		ValueNode	leftClone1;
1: 		ValueNode	rightOperand;
1: 
1: 		/* We must 1st preprocess the component parts */
1: 		super.preprocess(numTables,
1: 						 outerFromList, outerSubqueryList,
1: 						 outerPredicateList);
1: 
1: 		/* This is where we do the transformation for BETWEEN to make it optimizable.
1: 		 * c1 BETWEEN value1 AND value2 -> c1 >= value1 AND c1 <= value2
1: 		 * This transformation is only done if the leftOperand is a ColumnReference.
1: 		 */
1: 		if (!(leftOperand instanceof ColumnReference))
1: 		{
1: 			return this;
1: 		}
1: 
1: 		/* For some unknown reason we need to clone the leftOperand if it is
1: 		 * a ColumnReference because reusing them in Qualifiers for a scan
1: 		 * does not work.  
1: 		 */
1: 		leftClone1 = leftOperand.getClone();
1: 
1: 		/* The transformed tree has to be normalized:
1: 		 *				AND
1: 		 *			   /   \
1: 		 *			  >=    AND
1: 		 *				   /   \
1: 		 *				  <=    TRUE
1: 		 */
1: 
0: 		NodeFactory nodeFactory = getNodeFactory();
1: 		ContextManager cm = getContextManager();
1: 
0:         QueryTreeNode trueNode = nodeFactory.getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.TRUE,
0: 											cm);
1: 
1: 		/* Create the AND <= */
1: 		BinaryComparisonOperatorNode lessEqual = 
0: 			(BinaryComparisonOperatorNode) nodeFactory.getNode(
0: 						C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
0: 						leftClone1, 
0: 						rightOperandList.elementAt(1),
0: 						cm);
1: 
1: 		/* Set type info for the operator node */
1: 		lessEqual.bindComparisonOperator();
1: 
1: 		/* Create the AND */
0: 		AndNode newAnd = (AndNode) nodeFactory.getNode(
0: 												C_NodeTypes.AND_NODE,
0: 												lessEqual,
0: 												trueNode,
0: 												cm);
1: 		newAnd.postBindFixup();
1: 
1: 		/* Create the AND >= */
1: 		BinaryComparisonOperatorNode greaterEqual = 
0: 			(BinaryComparisonOperatorNode) nodeFactory.getNode(
0: 					C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
0: 					leftOperand, 
0: 					rightOperandList.elementAt(0),
0: 					cm);
1: 
1: 		/* Set type info for the operator node */
1: 		greaterEqual.bindComparisonOperator();
1: 
1: 		/* Create the AND */
0: 		newAnd = (AndNode) nodeFactory.getNode(
0: 												C_NodeTypes.AND_NODE,
0: 												greaterEqual,
0: 												newAnd,
0: 												cm);
1: 		newAnd.postBindFixup();
1: 
1: 		/* Tell optimizer to use the between selectivity instead of >= * <= selectivities */
1: 		lessEqual.setBetweenSelectivity();
1: 		greaterEqual.setBetweenSelectivity();
1: 
1: 		return newAnd;
1: 	}
1:  
1: 	/**
1: 	 * Do code generation for this BETWEEN operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the code to place the code
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 		throws StandardException
1: 	{
1: 		AndNode						 newAnd;
1: 		BinaryComparisonOperatorNode leftBCO;
1: 		BinaryComparisonOperatorNode rightBCO;
1: 
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(rightOperandList.size() == 2,
1: 			"rightOperandList.size() (" +
1: 			rightOperandList.size()	+
1: 			") is expected to be 2");
1: 
1: 		/* Convert:
1: 		 *		leftO between rightOList.elementAt(0) and rightOList.elementAt(1)
1: 		 * to:
1: 		 *		leftO >= rightOList.elementAt(0) and leftO <= rightOList.elementAt(1) 
1: 		 */
1: 
0: 		NodeFactory nodeFactory = getNodeFactory();
1: 		ContextManager cm = getContextManager();
1: 
1: 		/* leftO >= rightOList.elementAt(0) */
0: 		leftBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 							C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
0: 							leftOperand, 
0: 							rightOperandList.elementAt(0),
0: 							cm);
1: 		/* Set type info for the operator node */
1: 		leftBCO.bindComparisonOperator();
1: 
1: 		/* leftO <= rightOList.elementAt(1) */
0: 		rightBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 						C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
0: 						leftOperand, 
0: 						rightOperandList.elementAt(1),
0: 						cm);
1: 		/* Set type info for the operator node */
1: 		rightBCO.bindComparisonOperator();
1: 
1: 		/* Create and return the AND */
0: 		newAnd = (AndNode) nodeFactory.getNode(
0: 												C_NodeTypes.AND_NODE,
0: 												leftBCO,
0: 												rightBCO,
0: 												cm);
1: 		newAnd.postBindFixup();
1: 		newAnd.generateExpression(acb, mb);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: /**
0:  * A BetweenOperatorNode represents a BETWEEN clause. The between values are
0:  * represented as a 2 element list in order to take advantage of code reuse.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class BetweenOperatorNode extends BinaryListOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a BetweenOperatorNode
0: 	 *
0: 	 * @param leftOperand		The left operand of the node
0: 	 * @param betweenValues		The between values in list form
0: 	 */
0: 
0: 	public void init(Object leftOperand, Object betweenValues)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			ValueNodeList betweenVals = (ValueNodeList) betweenValues;
0: 
0: 			SanityManager.ASSERT(betweenVals.size() == 2,
0: 				"betweenValues.size() (" +
0: 				betweenVals.size()	+
0: 				") is expected to be 2");
0: 		}
0: 
0: 		super.init(leftOperand, betweenValues, "BETWEEN", null);
0: 	}
0: 
0: 	/**
0: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
0: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
0: 	 * ComparisonOperators and boolean expressions.  We invert 
0: 	 * ComparisonOperators and replace boolean expressions with 
0: 	 * boolean expression = false.
0: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
0: 	 * still could be NotNodes left in the tree.
0: 	 *
0: 	 * @param	underNotNode		Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 					throws StandardException
0: 	{
0: 		BinaryComparisonOperatorNode leftBCO;
0: 		BinaryComparisonOperatorNode rightBCO;
0: 		OrNode						 newOr;
0: 
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(rightOperandList.size() == 2,
0: 			"rightOperandList.size() (" +
0: 			rightOperandList.size()	+
0: 			") is expected to be 2");
0: 
0: 		if (! underNotNode)
0: 		{
0: 			return this;
0: 		}
0: 
0: 		/* we want to convert the BETWEEN  * into < OR > 
0: 		   as described below.
0: 		*/		
0: 
0: 		/* Convert:
0: 		 *		leftO between rightOList.elementAt(0) and rightOList.elementAt(1)
0: 		 * to:
0: 		 *		leftO < rightOList.elementAt(0) or leftO > rightOList.elementAt(1)
0: 		 * NOTE - We do the conversion here since ORs will eventually be
0: 		 * optimizable and there's no benefit for the optimizer to see NOT BETWEEN
0: 		 */
0: 
0: 		NodeFactory nodeFactory = getNodeFactory();
0: 		ContextManager cm = getContextManager();
0: 
0: 		/* leftO < rightOList.elementAt(0) */
0: 		leftBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 									C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
0: 									leftOperand, 
0: 								 	rightOperandList.elementAt(0),
0: 									cm);
0: 		/* Set type info for the operator node */
0: 		leftBCO.bindComparisonOperator();
0: 
0: 		/* leftO > rightOList.elementAt(1) */
0: 		rightBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
0: 								leftOperand, 
0: 								rightOperandList.elementAt(1),
0: 								cm);
0: 		/* Set type info for the operator node */
0: 		rightBCO.bindComparisonOperator();
0: 
0: 		/* Create and return the OR */
0: 		newOr = (OrNode) nodeFactory.getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												leftBCO,
0: 												rightBCO,
0: 												cm);
0: 		newOr.postBindFixup();
0: 
0: 		/* Tell optimizer to use the between selectivity instead of >= * <= selectivities */
0: 		leftBCO.setBetweenSelectivity();
0: 		rightBCO.setBetweenSelectivity();
0: 
0: 		return newOr;
0: 	}
0: 
0: 	/**
0: 	 * Preprocess an expression tree.  We do a number of transformations
0: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
0: 	 * subquery flattening.
0: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
0: 	 *
0: 	 * @param	dataDictionary		DataDictionary to use.
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode preprocess(int numTables,
0: 								FromList outerFromList,
0: 								SubqueryList outerSubqueryList,
0: 								PredicateList outerPredicateList) 
0: 					throws StandardException
0: 	{
0: 		ValueNode	leftClone1;
0: 		ValueNode	rightOperand;
0: 
0: 		/* We must 1st preprocess the component parts */
0: 		super.preprocess(numTables,
0: 						 outerFromList, outerSubqueryList,
0: 						 outerPredicateList);
0: 
0: 		/* This is where we do the transformation for BETWEEN to make it optimizable.
0: 		 * c1 BETWEEN value1 AND value2 -> c1 >= value1 AND c1 <= value2
0: 		 * This transformation is only done if the leftOperand is a ColumnReference.
0: 		 */
0: 		if (!(leftOperand instanceof ColumnReference))
0: 		{
0: 			return this;
0: 		}
0: 
0: 		/* For some unknown reason we need to clone the leftOperand if it is
0: 		 * a ColumnReference because reusing them in Qualifiers for a scan
0: 		 * does not work.  
0: 		 */
0: 		leftClone1 = leftOperand.getClone();
0: 
0: 		/* The transformed tree has to be normalized:
0: 		 *				AND
0: 		 *			   /   \
0: 		 *			  >=    AND
0: 		 *				   /   \
0: 		 *				  <=    TRUE
0: 		 */
0: 
0: 		NodeFactory nodeFactory = getNodeFactory();
0: 		ContextManager cm = getContextManager();
0: 
0:         QueryTreeNode trueNode = nodeFactory.getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.TRUE,
0: 											cm);
0: 
0: 		/* Create the AND <= */
0: 		BinaryComparisonOperatorNode lessEqual = 
0: 			(BinaryComparisonOperatorNode) nodeFactory.getNode(
0: 						C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
0: 						leftClone1, 
0: 						rightOperandList.elementAt(1),
0: 						cm);
0: 
0: 		/* Set type info for the operator node */
0: 		lessEqual.bindComparisonOperator();
0: 
0: 		/* Create the AND */
0: 		AndNode newAnd = (AndNode) nodeFactory.getNode(
0: 												C_NodeTypes.AND_NODE,
0: 												lessEqual,
0: 												trueNode,
0: 												cm);
0: 		newAnd.postBindFixup();
0: 
0: 		/* Create the AND >= */
0: 		BinaryComparisonOperatorNode greaterEqual = 
0: 			(BinaryComparisonOperatorNode) nodeFactory.getNode(
0: 					C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
0: 					leftOperand, 
0: 					rightOperandList.elementAt(0),
0: 					cm);
0: 
0: 		/* Set type info for the operator node */
0: 		greaterEqual.bindComparisonOperator();
0: 
0: 		/* Create the AND */
0: 		newAnd = (AndNode) nodeFactory.getNode(
0: 												C_NodeTypes.AND_NODE,
0: 												greaterEqual,
0: 												newAnd,
0: 												cm);
0: 		newAnd.postBindFixup();
0: 
0: 		/* Tell optimizer to use the between selectivity instead of >= * <= selectivities */
0: 		lessEqual.setBetweenSelectivity();
0: 		greaterEqual.setBetweenSelectivity();
0: 
0: 		return newAnd;
0: 	}
0:  
0: 	/**
0: 	 * Do code generation for this BETWEEN operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 		throws StandardException
0: 	{
0: 		AndNode						 newAnd;
0: 		BinaryComparisonOperatorNode leftBCO;
0: 		BinaryComparisonOperatorNode rightBCO;
0: 
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(rightOperandList.size() == 2,
0: 			"rightOperandList.size() (" +
0: 			rightOperandList.size()	+
0: 			") is expected to be 2");
0: 
0: 		/* Convert:
0: 		 *		leftO between rightOList.elementAt(0) and rightOList.elementAt(1)
0: 		 * to:
0: 		 *		leftO >= rightOList.elementAt(0) and leftO <= rightOList.elementAt(1) 
0: 		 */
0: 
0: 		NodeFactory nodeFactory = getNodeFactory();
0: 		ContextManager cm = getContextManager();
0: 
0: 		/* leftO >= rightOList.elementAt(0) */
0: 		leftBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 							C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
0: 							leftOperand, 
0: 							rightOperandList.elementAt(0),
0: 							cm);
0: 		/* Set type info for the operator node */
0: 		leftBCO.bindComparisonOperator();
0: 
0: 		/* leftO <= rightOList.elementAt(1) */
0: 		rightBCO = (BinaryComparisonOperatorNode) 
0: 					nodeFactory.getNode(
0: 						C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
0: 						leftOperand, 
0: 						rightOperandList.elementAt(1),
0: 						cm);
0: 		/* Set type info for the operator node */
0: 		rightBCO.bindComparisonOperator();
0: 
0: 		/* Create and return the AND */
0: 		newAnd = (AndNode) nodeFactory.getNode(
0: 												C_NodeTypes.AND_NODE,
0: 												leftBCO,
0: 												rightBCO,
0: 												cm);
0: 		newAnd.postBindFixup();
0: 		newAnd.generateExpression(acb, mb);
0: 	}
0: }
============================================================================