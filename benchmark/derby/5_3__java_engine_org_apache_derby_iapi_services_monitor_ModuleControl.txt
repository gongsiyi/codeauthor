1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.monitor.ModuleControl
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.monitor;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	ModuleControl is <B>optionally</B> implemented by a module's factory class.
1:eac0369: */
1:eac0369: 
1:5d24b1a: public interface ModuleControl {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Boot this module with the given properties. Creates a module instance
1:eac0369: 		that can be found using the findModule() methods of Monitor.
1:eac0369: 		The module can only be found using one of these findModule() methods
1:eac0369: 		once this method has returned.
1:eac0369: 		<P>
1:eac0369: 		An implementation's boot method can throw StandardException. If it
1:eac0369: 		is thrown the module is not registered by the monitor and therefore cannot
1:eac0369: 		be found through a findModule(). In this case the module's stop() method
1:eac0369: 		is not called, thus throwing this exception must free up any
1:eac0369: 		resources.
1:eac0369: 		<P>
1:eac0369: 		When create is true the contents of the properties object
1:eac0369: 		will be written to the service.properties of the persistent
1:eac0369: 		service. Thus any code that requires an entry in service.properties
1:eac0369: 		must <B>explicitly</B> place the value in this properties set
1:eac0369: 		using the put method.
1:eac0369: 		<BR>
1:eac0369: 		Typically the properties object contains one or more default
1:eac0369: 		properties sets, which are not written out to service.properties.
1:eac0369: 		These default sets are how callers modify the create process. In a
1:eac0369: 		JDBC connection database create the first set of defaults is a properties
1:eac0369: 		object that contains the attributes that were set on the jdbc:derby: URL.
1:eac0369: 		This attributes properties set has the second default properties set as
1:eac0369: 		its default. This set (which could be null) contains the properties
1:eac0369: 		that the user set on their DriverManager.getConnection() call, and are thus
1:3fd26f3: 		not owned by Derby code, and thus must not be modified by Derby 
1:eac0369: 		code.
1:eac0369: 		<P>
1:eac0369: 		When create is false the properties object contains all the properties
1:eac0369: 		set in the service.properties file plus a <B>limited</B> number of
1:eac0369: 		attributes from the JDBC URL attributes or connection properties set.
1:eac0369: 		This avoids properties set by the user compromising the boot process.
1:eac0369: 		An example of a property passed in from the JDBC world is the bootPassword
1:eac0369: 		for encrypted databases.
1:eac0369: 
1:eac0369: 		<P>
1:eac0369: 		Code should not hold onto the passed in properties reference after boot time
1:eac0369: 		as its contents may change underneath it. At least after the complete boot
1:eac0369: 		is completed, the links to all the default sets will be removed.
1:eac0369: 
1:eac0369: 		@exception StandardException Module cannot be started.
1:eac0369: 
1:eac0369: 		@see Monitor
1:eac0369: 		@see ModuleFactory
1:eac0369: 		
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public void boot(boolean create, Properties properties)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Stop the module.
1:eac0369: 
1:eac0369: 		The module may be found via a findModule() method until some time after
1:eac0369: 		this method returns. Therefore the factory must be prepared to reject requests
1:eac0369: 		to it once it has been stopped. In addition other modules may cache a reference
1:eac0369: 		to the module and make requests of it after it has been stopped, these requests
1:eac0369: 		should be rejected as well.
1:eac0369: 
1:eac0369: 		@see Monitor
1:eac0369: 		@see ModuleFactory
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public void stop();
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		not owned by Derby code, and thus must not be modified by Derby 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.monitor.ModuleControl
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface ModuleControl {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.monitor;
1: 
1: import java.util.Properties;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	ModuleControl is <B>optionally</B> implemented by a module's factory class.
1: */
1: 
0: public interface ModuleControl { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Boot this module with the given properties. Creates a module instance
1: 		that can be found using the findModule() methods of Monitor.
1: 		The module can only be found using one of these findModule() methods
1: 		once this method has returned.
1: 		<P>
1: 		An implementation's boot method can throw StandardException. If it
1: 		is thrown the module is not registered by the monitor and therefore cannot
1: 		be found through a findModule(). In this case the module's stop() method
1: 		is not called, thus throwing this exception must free up any
1: 		resources.
1: 		<P>
1: 		When create is true the contents of the properties object
1: 		will be written to the service.properties of the persistent
1: 		service. Thus any code that requires an entry in service.properties
1: 		must <B>explicitly</B> place the value in this properties set
1: 		using the put method.
1: 		<BR>
1: 		Typically the properties object contains one or more default
1: 		properties sets, which are not written out to service.properties.
1: 		These default sets are how callers modify the create process. In a
1: 		JDBC connection database create the first set of defaults is a properties
1: 		object that contains the attributes that were set on the jdbc:derby: URL.
1: 		This attributes properties set has the second default properties set as
1: 		its default. This set (which could be null) contains the properties
1: 		that the user set on their DriverManager.getConnection() call, and are thus
0: 		not owned by cloudscape code, and thus must not be modified by cloudscape
1: 		code.
1: 		<P>
1: 		When create is false the properties object contains all the properties
1: 		set in the service.properties file plus a <B>limited</B> number of
1: 		attributes from the JDBC URL attributes or connection properties set.
1: 		This avoids properties set by the user compromising the boot process.
1: 		An example of a property passed in from the JDBC world is the bootPassword
1: 		for encrypted databases.
1: 
1: 		<P>
1: 		Code should not hold onto the passed in properties reference after boot time
1: 		as its contents may change underneath it. At least after the complete boot
1: 		is completed, the links to all the default sets will be removed.
1: 
1: 		@exception StandardException Module cannot be started.
1: 
1: 		@see Monitor
1: 		@see ModuleFactory
1: 		
1: 	*/
1: 
1: 	public void boot(boolean create, Properties properties)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Stop the module.
1: 
1: 		The module may be found via a findModule() method until some time after
1: 		this method returns. Therefore the factory must be prepared to reject requests
1: 		to it once it has been stopped. In addition other modules may cache a reference
1: 		to the module and make requests of it after it has been stopped, these requests
1: 		should be rejected as well.
1: 
1: 		@see Monitor
1: 		@see ModuleFactory
1: 	*/
1: 
1: 	public void stop();
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.monitor;
0: 
0: import java.util.Properties;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	ModuleControl is <B>optionally</B> implemented by a module's factory class.
0: */
0: 
0: public interface ModuleControl { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Boot this module with the given properties. Creates a module instance
0: 		that can be found using the findModule() methods of Monitor.
0: 		The module can only be found using one of these findModule() methods
0: 		once this method has returned.
0: 		<P>
0: 		An implementation's boot method can throw StandardException. If it
0: 		is thrown the module is not registered by the monitor and therefore cannot
0: 		be found through a findModule(). In this case the module's stop() method
0: 		is not called, thus throwing this exception must free up any
0: 		resources.
0: 		<P>
0: 		When create is true the contents of the properties object
0: 		will be written to the service.properties of the persistent
0: 		service. Thus any code that requires an entry in service.properties
0: 		must <B>explicitly</B> place the value in this properties set
0: 		using the put method.
0: 		<BR>
0: 		Typically the properties object contains one or more default
0: 		properties sets, which are not written out to service.properties.
0: 		These default sets are how callers modify the create process. In a
0: 		JDBC connection database create the first set of defaults is a properties
0: 		object that contains the attributes that were set on the jdbc:derby: URL.
0: 		This attributes properties set has the second default properties set as
0: 		its default. This set (which could be null) contains the properties
0: 		that the user set on their DriverManager.getConnection() call, and are thus
0: 		not owned by cloudscape code, and thus must not be modified by cloudscape
0: 		code.
0: 		<P>
0: 		When create is false the properties object contains all the properties
0: 		set in the service.properties file plus a <B>limited</B> number of
0: 		attributes from the JDBC URL attributes or connection properties set.
0: 		This avoids properties set by the user compromising the boot process.
0: 		An example of a property passed in from the JDBC world is the bootPassword
0: 		for encrypted databases.
0: 
0: 		<P>
0: 		Code should not hold onto the passed in properties reference after boot time
0: 		as its contents may change underneath it. At least after the complete boot
0: 		is completed, the links to all the default sets will be removed.
0: 
0: 		@exception StandardException Module cannot be started.
0: 
0: 		@see Monitor
0: 		@see ModuleFactory
0: 		
0: 	*/
0: 
0: 	public void boot(boolean create, Properties properties)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Stop the module.
0: 
0: 		The module may be found via a findModule() method until some time after
0: 		this method returns. Therefore the factory must be prepared to reject requests
0: 		to it once it has been stopped. In addition other modules may cache a reference
0: 		to the module and make requests of it after it has been stopped, these requests
0: 		should be rejected as well.
0: 
0: 		@see Monitor
0: 		@see ModuleFactory
0: 	*/
0: 
0: 	public void stop();
0: 
0: 
0: }
============================================================================