1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BaseJoinStrategy
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:eac0369: import org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface;
1:eac0369: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizable;
1:eac0369: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:c7248d5: import org.apache.derby.iapi.util.PropertyUtil;
1:eac0369: 
1:93ff8cc: abstract class BaseJoinStrategy implements JoinStrategy {
1:93ff8cc: 	BaseJoinStrategy() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see JoinStrategy#bulkFetchOK */
1:eac0369: 	public boolean bulkFetchOK() {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see JoinStrategy#ignoreBulkFetch */
1:eac0369: 	public boolean ignoreBulkFetch() {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:93ff8cc: 	/**
1:93ff8cc: 	 * Push the first set of common arguments for obtaining a scan ResultSet from
1:93ff8cc: 	 * ResultSetFactory.
1:93ff8cc: 	 * The first 11 arguments are common for these ResultSet getters
1:93ff8cc: 	 * <UL>
1:93ff8cc: 	 * <LI> ResultSetFactory.getBulkTableScanResultSet
1:93ff8cc: 	 * <LI> ResultSetFactory.getHashScanResultSet
1:93ff8cc: 	 * <LI> ResultSetFactory.getTableScanResultSet
1:93ff8cc: 	 * <LI> ResultSetFactory.getRaDependentTableScanResultSet
1:93ff8cc: 	 * </UL>
1:93ff8cc: 	 * @param tc
1:93ff8cc: 	 * @param mb
1:93ff8cc: 	 * @param innerTable
1:93ff8cc: 	 * @param predList
1:93ff8cc: 	 * @param acbi
1:93ff8cc: 	 * @throws StandardException
1:93ff8cc: 	 */
1:93ff8cc: 	void fillInScanArgs1(
1:eac0369: 								TransactionController tc,
1:eac0369: 								MethodBuilder mb,
1:eac0369: 								Optimizable innerTable,
1:eac0369: 								OptimizablePredicateList predList,
1:eac0369: 								ExpressionClassBuilderInterface acbi,
1:959fef2: 								int resultRowTemplate
1:eac0369: 								)
1:eac0369: 					throws StandardException {
1:eac0369: 		boolean				   sameStartStopPosition = predList.sameStartStopPosition();
1:eac0369: 		ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
1:eac0369: 		long				   conglomNumber = 
1:eac0369: 								innerTable.getTrulyTheBestAccessPath().
1:eac0369: 									getConglomerateDescriptor().
1:eac0369: 										getConglomerateNumber();
1:eac0369: 		StaticCompiledOpenConglomInfo scoci = tc.getStaticCompiledConglomInfo(conglomNumber);
1:eac0369: 		
1:93ff8cc: 		acb.pushThisAsActivation(mb);
1:eac0369: 		mb.push(conglomNumber);
1:eac0369: 		mb.push(acb.addItem(scoci));
1:eac0369: 
1:959fef2:         mb.push(resultRowTemplate);
1:eac0369: 		mb.push(innerTable.getResultSetNumber());
1:eac0369: 
1:eac0369: 		predList.generateStartKey(acb, mb, innerTable);
1:eac0369: 		mb.push(predList.startOperator(innerTable));
1:eac0369: 
1:eac0369: 		if (! sameStartStopPosition) {
1:eac0369: 			predList.generateStopKey(acb, mb, innerTable);
1:eac0369: 		} else {
1:eac0369: 			mb.pushNull(ClassName.GeneratedMethod);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		mb.push(predList.stopOperator(innerTable));
1:eac0369: 		mb.push(sameStartStopPosition);
1:eac0369: 
1:eac0369: 		predList.generateQualifiers(acb, mb, innerTable, true);
1:eac0369: 		mb.upCast(ClassName.Qualifier + "[][]");
1:eac0369: 	}
1:eac0369: 
1:93ff8cc: 	final void fillInScanArgs2(MethodBuilder mb,
1:eac0369: 								Optimizable innerTable,
1:eac0369: 								int bulkFetch,
1:eac0369: 								int colRefItem,
1:eac0369: 								int indexColItem,
1:eac0369: 								int lockMode,
1:eac0369: 								boolean tableLocked,
1:eac0369: 								int isolationLevel) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		mb.push(innerTable.getBaseTableName());
1:c7248d5: 		//User may have supplied optimizer overrides in the sql
1:c7248d5: 		//Pass them onto execute phase so it can be shown in 
1:c7248d5: 		//run time statistics.
1:c7248d5: 		if (innerTable.getProperties() != null)
1:c7248d5: 			mb.push(PropertyUtil.sortProperties(innerTable.getProperties()));
1:c7248d5: 		else
1:c7248d5: 			mb.pushNull("java.lang.String");
1:eac0369: 
1:eac0369: 		ConglomerateDescriptor cd =
1:eac0369: 			innerTable.getTrulyTheBestAccessPath().getConglomerateDescriptor();
1:eac0369: 		if (cd.isConstraint())
1:eac0369: 		{
1:eac0369: 			DataDictionary dd = innerTable.getDataDictionary();
1:eac0369: 			TableDescriptor td = innerTable.getTableDescriptor();
1:eac0369: 			ConstraintDescriptor constraintDesc = dd.getConstraintDescriptor(
1:eac0369: 														td, cd.getUUID());
1:eac0369: 			mb.push(constraintDesc.getConstraintName());
1:eac0369: 		} else if (cd.isIndex())  {
1:eac0369: 			mb.push(cd.getConglomerateName());
1:eac0369: 		} else {
1:eac0369: 			mb.pushNull("java.lang.String");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Whether or not the conglomerate is the backing index for a constraint
1:eac0369: 		mb.push(cd.isConstraint());
1:eac0369: 
1:eac0369: 		// tell it whether it's to open for update, which we should do if
1:eac0369: 		// it's an update or delete statement, or if it's the target
1:eac0369: 		// table of an updatable cursor.
1:eac0369: 		mb.push(innerTable.forUpdate());
1:eac0369: 
1:eac0369: 		mb.push(colRefItem);
1:eac0369: 
1:eac0369: 		mb.push(indexColItem);
1:eac0369: 
1:eac0369: 		mb.push(lockMode);
1:eac0369: 
1:eac0369: 		mb.push(tableLocked);
1:eac0369: 
1:eac0369: 		mb.push(isolationLevel);
1:eac0369: 
1:eac0369: 		if (bulkFetch > 0) {
1:eac0369: 			mb.push(bulkFetch);
1:ec6fcf1:             // If the table references LOBs, we want to disable bulk fetching
1:ec6fcf1:             // when the cursor is holdable. Otherwise, a commit could close
1:ec6fcf1:             // LOBs before they have been returned to the user.
1:ec6fcf1:             mb.push(innerTable.hasLargeObjectColumns());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 1 row scans (avoiding 2nd next()) are
1:eac0369:  		 * only meaningful for some join strategies.
1:eac0369: 		 * (Only an issue for outer table, which currently
1:eac0369: 		 * can only be nested loop, as avoidance of 2nd next
1:eac0369: 		 * on inner table already factored in to join node.)
1:eac0369: 		 */
1:eac0369: 		if (validForOutermostTable())
1:eac0369: 		{
1:eac0369: 			mb.push(innerTable.isOneRowScan());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		mb.push(
1:eac0369: 				innerTable.getTrulyTheBestAccessPath().
1:eac0369: 												getCostEstimate().rowCount());
1:eac0369: 
1:eac0369: 		mb.push(
1:eac0369: 						innerTable.getTrulyTheBestAccessPath().
1:eac0369: 										getCostEstimate().getEstimatedCost());
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * @see JoinStrategy#isHashJoin
1:eac0369: 	 */
1:eac0369: 	public boolean isHashJoin()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Can this join strategy be used on the
1:eac0369: 	 * outermost table of a join.
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not this join strategy
1:3bb140c:      * can be used on the outermost table of a join.
1:eac0369: 	 */
1:eac0369: 	protected boolean validForOutermostTable()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
/////////////////////////////////////////////////////////////////////////
1:      * can be used on the outermost table of a join.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:959fef2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 								int resultRowTemplate
/////////////////////////////////////////////////////////////////////////
1:         mb.push(resultRowTemplate);
commit:ec6fcf1
/////////////////////////////////////////////////////////////////////////
1:             // If the table references LOBs, we want to disable bulk fetching
1:             // when the cursor is holdable. Otherwise, a commit could close
1:             // LOBs before they have been returned to the user.
1:             mb.push(innerTable.hasLargeObjectColumns());
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:93ff8cc
/////////////////////////////////////////////////////////////////////////
1: abstract class BaseJoinStrategy implements JoinStrategy {
1: 	BaseJoinStrategy() {
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Push the first set of common arguments for obtaining a scan ResultSet from
1: 	 * ResultSetFactory.
1: 	 * The first 11 arguments are common for these ResultSet getters
1: 	 * <UL>
1: 	 * <LI> ResultSetFactory.getBulkTableScanResultSet
1: 	 * <LI> ResultSetFactory.getHashScanResultSet
1: 	 * <LI> ResultSetFactory.getTableScanResultSet
1: 	 * <LI> ResultSetFactory.getRaDependentTableScanResultSet
1: 	 * </UL>
1: 	 * @param tc
1: 	 * @param mb
1: 	 * @param innerTable
1: 	 * @param predList
1: 	 * @param acbi
0: 	 * @param resultRowAllocator
1: 	 * @throws StandardException
1: 	 */
1: 	void fillInScanArgs1(
/////////////////////////////////////////////////////////////////////////
1: 		acb.pushThisAsActivation(mb);
/////////////////////////////////////////////////////////////////////////
1: 	final void fillInScanArgs2(MethodBuilder mb,
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BaseJoinStrategy
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
1: import org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface;
1: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1: import org.apache.derby.iapi.sql.compile.Optimizable;
1: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: abstract public class BaseJoinStrategy implements JoinStrategy {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	public BaseJoinStrategy() {
1: 	}
1: 
1: 	/** @see JoinStrategy#bulkFetchOK */
1: 	public boolean bulkFetchOK() {
1: 		return true;
1: 	}
1: 
1: 	/** @see JoinStrategy#ignoreBulkFetch */
1: 	public boolean ignoreBulkFetch() {
1: 		return false;
1: 	}
1: 
0: 	protected void fillInScanArgs1(
1: 								TransactionController tc,
1: 								MethodBuilder mb,
1: 								Optimizable innerTable,
1: 								OptimizablePredicateList predList,
1: 								ExpressionClassBuilderInterface acbi,
0: 								MethodBuilder resultRowAllocator
1: 								)
1: 					throws StandardException {
1: 		boolean				   sameStartStopPosition = predList.sameStartStopPosition();
1: 		ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
1: 		long				   conglomNumber = 
1: 								innerTable.getTrulyTheBestAccessPath().
1: 									getConglomerateDescriptor().
1: 										getConglomerateNumber();
1: 		StaticCompiledOpenConglomInfo scoci = tc.getStaticCompiledConglomInfo(conglomNumber);
1: 		
1: 		mb.push(conglomNumber);
1: 		mb.push(acb.addItem(scoci));
0: 		acb.pushThisAsActivation(mb);
1: 
0: 		acb.pushMethodReference(mb, resultRowAllocator);
1: 		mb.push(innerTable.getResultSetNumber());
1: 
1: 		predList.generateStartKey(acb, mb, innerTable);
1: 		mb.push(predList.startOperator(innerTable));
1: 
1: 		if (! sameStartStopPosition) {
1: 			predList.generateStopKey(acb, mb, innerTable);
1: 		} else {
1: 			mb.pushNull(ClassName.GeneratedMethod);
1: 		}
1: 
1: 		mb.push(predList.stopOperator(innerTable));
1: 		mb.push(sameStartStopPosition);
1: 
1: 		predList.generateQualifiers(acb, mb, innerTable, true);
1: 		mb.upCast(ClassName.Qualifier + "[][]");
1: 	}
1: 
0: 	protected void fillInScanArgs2(MethodBuilder mb,
1: 								Optimizable innerTable,
1: 								int bulkFetch,
1: 								int colRefItem,
1: 								int indexColItem,
1: 								int lockMode,
1: 								boolean tableLocked,
1: 								int isolationLevel) 
1: 		throws StandardException
1: 	{
1: 		mb.push(innerTable.getBaseTableName());
1: 
1: 		ConglomerateDescriptor cd =
1: 			innerTable.getTrulyTheBestAccessPath().getConglomerateDescriptor();
1: 		if (cd.isConstraint())
1: 		{
1: 			DataDictionary dd = innerTable.getDataDictionary();
1: 			TableDescriptor td = innerTable.getTableDescriptor();
1: 			ConstraintDescriptor constraintDesc = dd.getConstraintDescriptor(
1: 														td, cd.getUUID());
1: 			mb.push(constraintDesc.getConstraintName());
1: 		} else if (cd.isIndex())  {
1: 			mb.push(cd.getConglomerateName());
1: 		} else {
1: 			mb.pushNull("java.lang.String");
1: 		}
1: 
1: 		// Whether or not the conglomerate is the backing index for a constraint
1: 		mb.push(cd.isConstraint());
1: 
1: 		// tell it whether it's to open for update, which we should do if
1: 		// it's an update or delete statement, or if it's the target
1: 		// table of an updatable cursor.
1: 		mb.push(innerTable.forUpdate());
1: 
1: 		mb.push(colRefItem);
1: 
1: 		mb.push(indexColItem);
1: 
1: 		mb.push(lockMode);
1: 
1: 		mb.push(tableLocked);
1: 
1: 		mb.push(isolationLevel);
1: 
1: 		if (bulkFetch > 0) {
1: 			mb.push(bulkFetch);
1: 		}
1: 
1: 		/* 1 row scans (avoiding 2nd next()) are
1:  		 * only meaningful for some join strategies.
1: 		 * (Only an issue for outer table, which currently
1: 		 * can only be nested loop, as avoidance of 2nd next
1: 		 * on inner table already factored in to join node.)
1: 		 */
1: 		if (validForOutermostTable())
1: 		{
1: 			mb.push(innerTable.isOneRowScan());
1: 		}
1: 
1: 		mb.push(
1: 				innerTable.getTrulyTheBestAccessPath().
1: 												getCostEstimate().rowCount());
1: 
1: 		mb.push(
1: 						innerTable.getTrulyTheBestAccessPath().
1: 										getCostEstimate().getEstimatedCost());
1: 	}
1: 
1: 	/**
1: 	 * @see JoinStrategy#isHashJoin
1: 	 */
1: 	public boolean isHashJoin()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Can this join strategy be used on the
1: 	 * outermost table of a join.
1: 	 *
1: 	 * @return Whether or not this join strategy
0: 	 * can be used on the outermose table of a join.
1: 	 */
1: 	protected boolean validForOutermostTable()
1: 	{
1: 		return false;
1: 	}
1: }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.PropertyUtil;
0: 
/////////////////////////////////////////////////////////////////////////
1: 		//User may have supplied optimizer overrides in the sql
1: 		//Pass them onto execute phase so it can be shown in 
1: 		//run time statistics.
1: 		if (innerTable.getProperties() != null)
1: 			mb.push(PropertyUtil.sortProperties(innerTable.getProperties()));
1: 		else
1: 			mb.pushNull("java.lang.String");
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface;
0: import org.apache.derby.iapi.sql.compile.JoinStrategy;
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: abstract public class BaseJoinStrategy implements JoinStrategy {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	public BaseJoinStrategy() {
0: 	}
0: 
0: 	/** @see JoinStrategy#bulkFetchOK */
0: 	public boolean bulkFetchOK() {
0: 		return true;
0: 	}
0: 
0: 	/** @see JoinStrategy#ignoreBulkFetch */
0: 	public boolean ignoreBulkFetch() {
0: 		return false;
0: 	}
0: 
0: 	protected void fillInScanArgs1(
0: 								TransactionController tc,
0: 								MethodBuilder mb,
0: 								Optimizable innerTable,
0: 								OptimizablePredicateList predList,
0: 								ExpressionClassBuilderInterface acbi,
0: 								MethodBuilder resultRowAllocator
0: 								)
0: 					throws StandardException {
0: 		boolean				   sameStartStopPosition = predList.sameStartStopPosition();
0: 		ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
0: 		long				   conglomNumber = 
0: 								innerTable.getTrulyTheBestAccessPath().
0: 									getConglomerateDescriptor().
0: 										getConglomerateNumber();
0: 		StaticCompiledOpenConglomInfo scoci = tc.getStaticCompiledConglomInfo(conglomNumber);
0: 		
0: 		mb.push(conglomNumber);
0: 		mb.push(acb.addItem(scoci));
0: 		acb.pushThisAsActivation(mb);
0: 
0: 		acb.pushMethodReference(mb, resultRowAllocator);
0: 		mb.push(innerTable.getResultSetNumber());
0: 
0: 		predList.generateStartKey(acb, mb, innerTable);
0: 		mb.push(predList.startOperator(innerTable));
0: 
0: 		if (! sameStartStopPosition) {
0: 			predList.generateStopKey(acb, mb, innerTable);
0: 		} else {
0: 			mb.pushNull(ClassName.GeneratedMethod);
0: 		}
0: 
0: 		mb.push(predList.stopOperator(innerTable));
0: 		mb.push(sameStartStopPosition);
0: 
0: 		predList.generateQualifiers(acb, mb, innerTable, true);
0: 		mb.upCast(ClassName.Qualifier + "[][]");
0: 	}
0: 
0: 	protected void fillInScanArgs2(MethodBuilder mb,
0: 								Optimizable innerTable,
0: 								int bulkFetch,
0: 								int colRefItem,
0: 								int indexColItem,
0: 								int lockMode,
0: 								boolean tableLocked,
0: 								int isolationLevel) 
0: 		throws StandardException
0: 	{
0: 		mb.push(innerTable.getBaseTableName());
0: 
0: 		ConglomerateDescriptor cd =
0: 			innerTable.getTrulyTheBestAccessPath().getConglomerateDescriptor();
0: 		if (cd.isConstraint())
0: 		{
0: 			DataDictionary dd = innerTable.getDataDictionary();
0: 			TableDescriptor td = innerTable.getTableDescriptor();
0: 			ConstraintDescriptor constraintDesc = dd.getConstraintDescriptor(
0: 														td, cd.getUUID());
0: 			mb.push(constraintDesc.getConstraintName());
0: 		} else if (cd.isIndex())  {
0: 			mb.push(cd.getConglomerateName());
0: 		} else {
0: 			mb.pushNull("java.lang.String");
0: 		}
0: 
0: 		// Whether or not the conglomerate is the backing index for a constraint
0: 		mb.push(cd.isConstraint());
0: 
0: 		// tell it whether it's to open for update, which we should do if
0: 		// it's an update or delete statement, or if it's the target
0: 		// table of an updatable cursor.
0: 		mb.push(innerTable.forUpdate());
0: 
0: 		mb.push(colRefItem);
0: 
0: 		mb.push(indexColItem);
0: 
0: 		mb.push(lockMode);
0: 
0: 		mb.push(tableLocked);
0: 
0: 		mb.push(isolationLevel);
0: 
0: 		if (bulkFetch > 0) {
0: 			mb.push(bulkFetch);
0: 		}
0: 
0: 		/* 1 row scans (avoiding 2nd next()) are
0:  		 * only meaningful for some join strategies.
0: 		 * (Only an issue for outer table, which currently
0: 		 * can only be nested loop, as avoidance of 2nd next
0: 		 * on inner table already factored in to join node.)
0: 		 */
0: 		if (validForOutermostTable())
0: 		{
0: 			mb.push(innerTable.isOneRowScan());
0: 		}
0: 
0: 		mb.push(
0: 				innerTable.getTrulyTheBestAccessPath().
0: 												getCostEstimate().rowCount());
0: 
0: 		mb.push(
0: 						innerTable.getTrulyTheBestAccessPath().
0: 										getCostEstimate().getEstimatedCost());
0: 	}
0: 
0: 	/**
0: 	 * @see JoinStrategy#isHashJoin
0: 	 */
0: 	public boolean isHashJoin()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Can this join strategy be used on the
0: 	 * outermost table of a join.
0: 	 *
0: 	 * @return Whether or not this join strategy
0: 	 * can be used on the outermose table of a join.
0: 	 */
0: 	protected boolean validForOutermostTable()
0: 	{
0: 		return false;
0: 	}
0: }
============================================================================