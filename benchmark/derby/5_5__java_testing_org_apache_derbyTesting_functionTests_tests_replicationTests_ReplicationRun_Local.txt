1:db8dae7: /*
3:db8dae7:  
1:9c2b1f3: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:9e93a53: import java.sql.SQLException;
1:db8dae7: import junit.framework.Test;
1:9e93a53: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a40bc13: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:40a554b: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:db8dae7: 
1:db8dae7: 
1:db8dae7: /**
1:db8dae7:  * Run a replication test on localhost
1:db8dae7:  * by using default values for master and slave hosts,
1:db8dae7:  * and master and slave ports.
1:db8dae7:  * 
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: public class ReplicationRun_Local extends ReplicationRun
3:db8dae7: {
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      * Creates a new instance of ReplicationRun_Local
1:db8dae7:      * @param testcaseName Identifying the test.
1:db8dae7:      */
1:db8dae7:     public ReplicationRun_Local(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
3:db8dae7:     }
1:db8dae7:     
1:61b02b7:     /**
1:61b02b7:      * Creates a new instance of ReplicationRun_Local running with authentication.
1:61b02b7:      */
1:61b02b7:     public ReplicationRun_Local(String testcaseName, String user, String password )
1:61b02b7:     {
1:61b02b7:         super( testcaseName, user, password );
1:61b02b7:     }
1:61b02b7:     
1:db8dae7:     public static Test suite()
1:db8dae7:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("ReplicationRun_Local Suite");
1:db8dae7:         
1:db8dae7:         suite.addTestSuite( ReplicationRun_Local.class );
1:db8dae7:         
1:40a554b:         return SecurityManagerSetup.noSecurityManager(suite);
1:40a554b: 
1:db8dae7:     }
1:db8dae7:     
1:61b02b7:     public static Test localAuthenticationSuite()
1:61b02b7:     {
1:61b02b7:         String      user = "KIWI";
1:61b02b7:         String      password = "KIWI_password";
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(
1:1ae02c9:             "ReplicationRun_Local Suite Local Authentication Suite");
1:61b02b7: 
1:61b02b7:         suite.addTest( new ReplicationRun_Local( "testReplication_Local_TestStraightReplication", user, password ) );
1:61b02b7:         suite.addTest( new ReplicationRun_Local( "testReplication_Local_LogFilesSynched", user, password ) );
1:61b02b7: 
1:61b02b7:         return SecurityManagerSetup.noSecurityManager( suite );
1:61b02b7:     }
1:61b02b7:     
1:db8dae7:     //////////////////////////////////////////////////////////////
1:db8dae7:     ////
1:db8dae7:     //// The replication test framework (testReplication()):
1:db8dae7:     //// a) "clean" replication run starting master and slave servers,
1:db8dae7:     ////     preparing master and slave databases,
1:db8dae7:     ////     starting and stopping replication and doing
1:db8dae7:     ////     failover for a "normal"/"failure free" replication
1:db8dae7:     ////     test run.
1:db8dae7:     ////
1:db8dae7:     //////////////////////////////////////////////////////////////
1:db8dae7:     
1:c5935ad:     /**
1:c5935ad:      * Test the "normal" replication scenario:
1:c5935ad:      * Load on the master db while replicating to slave db,
1:c5935ad:      * then verify that slave db is correct after failover.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:c5935ad:     public void testReplication_Local_TestStraightReplication()
1:db8dae7:     throws Exception
1:db8dae7:     {
1:db8dae7:         cleanAllTestHosts();
1:db8dae7:         
1:db8dae7:         initEnvironment();
1:db8dae7:         
1:db8dae7:         initMaster(masterServerHost,
1:db8dae7:                 replicatedDb);
1:db8dae7:         
1:a40bc13:         NetworkServerTestSetup.waitForAvailablePort(masterServerPort);
1:a40bc13:         NetworkServerTestSetup.waitForAvailablePort(slaveServerPort);
1:a40bc13:         NetworkServerTestSetup.waitForAvailablePort(slaveReplPort);
1:a40bc13: 
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:db8dae7:                 masterServerHost,
1:db8dae7:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:db8dae7:                 masterServerPort,
1:dbe5dc3:                 masterDbSubPath); // Distinguishing master/slave
1:db8dae7:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:db8dae7:                 slaveServerHost,
1:db8dae7:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:db8dae7:                 slaveServerPort,
1:dbe5dc3:                 slaveDbSubPath); // Distinguishing master/slave
1:db8dae7:         
1:db8dae7:         startServerMonitor(slaveServerHost);
1:db8dae7:         
1:db8dae7:         bootMasterDatabase(jvmVersion,
1:db8dae7:                 masterDatabasePath +FS+ masterDbSubPath,
1:db8dae7:                 replicatedDb,
1:db8dae7:                 masterServerHost, // Where the startreplication command must be given
1:db8dae7:                 masterServerPort, // master server interface accepting client requests
1:db8dae7:                 null // bootLoad, // The "test" to start when booting db.
1:db8dae7:                 );
1:db8dae7:         
1:db8dae7:         initSlave(slaveServerHost,
1:db8dae7:                 jvmVersion,
1:db8dae7:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:db8dae7:         
1:db8dae7:         startSlave(jvmVersion, replicatedDb,
1:db8dae7:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:db8dae7:                 slaveServerPort,
1:db8dae7:                 slaveServerHost, // for slaveReplInterface
1:db8dae7:                 slaveReplPort,
1:db8dae7:                 testClientHost);
1:db8dae7:         
1:db8dae7:         startMaster(jvmVersion, replicatedDb,
1:db8dae7:                 masterServerHost, // Where the startMaster command must be given
1:db8dae7:                 masterServerPort, // master server interface accepting client requests
1:db8dae7:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:db8dae7:                 slaveServerPort, // Not used since slave don't allow clients.
1:db8dae7:                 slaveServerHost, // for slaveReplInterface
1:db8dae7:                 slaveReplPort);
1:db8dae7:         
1:db8dae7:         
1:db8dae7:         // Used to run positive tests.
1:db8dae7:         // Handle negative testing in State.testPostStartedMasterAndSlave().
1:db8dae7:         // Observe that it will not be meaningful to do runTest if State.XXXX()
1:db8dae7:         // has led to incorrect replication state wrt. replicationTest.
1:db8dae7:         
1:db8dae7:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:db8dae7:         util.DEBUG("replicationTest: " + replicationTest);
1:db8dae7:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:db8dae7:         util.DEBUG("replicationVerify: " + replicationVerify);
1:db8dae7: 
1:db8dae7:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:db8dae7:                 jvmVersion,
1:db8dae7:                 testClientHost,
1:db8dae7:                 masterServerHost, masterServerPort,
1:db8dae7:                 replicatedDb);
1:db8dae7:         
1:db8dae7:         failOver(jvmVersion,
1:db8dae7:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:db8dae7:                 masterServerHost,  // Where the master db is run.
1:db8dae7:                 masterServerPort,
1:db8dae7:                 testClientHost);
1:db8dae7:         
1:db8dae7:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:db8dae7:                 slaveServerHost,slaveServerPort,
1:db8dae7:                 testClientHost);
1:db8dae7:         
1:db8dae7:         verifySlave();
1:db8dae7:         
1:db8dae7:         // We should verify the master as well, at least to see that we still can connect.
1:db8dae7:         verifyMaster();
1:db8dae7:         
1:db8dae7:         stopServer(jvmVersion, derbyVersion,
1:db8dae7:                 slaveServerHost, slaveServerPort);
1:db8dae7:         
1:db8dae7:         stopServer(jvmVersion, derbyVersion,
1:db8dae7:                 masterServerHost, masterServerPort);
1:db8dae7:         // As of 2008-02-06 master does not accept shutdown after replication, so:
1:db8dae7:         // do a 'kill pid' after ending the test run
1:9e93a53:         
1:db8dae7:     }
1:db8dae7: 
1:9e93a53:     /**
1:9e93a53:      * DERBY-3382: Test that start replication fails if master db is updated
1:9e93a53:      * after copying the db to the slave location
1:9e93a53:      * @throws java.lang.Exception on test errors.
1:9e93a53:      */
1:f41a8a7:     public void testReplication_Local_LogFilesSynched() throws Exception {
1:9e93a53: 
1:9e93a53:         cleanAllTestHosts();
1:9e93a53:         initEnvironment();
1:9e93a53:         initMaster(masterServerHost, replicatedDb);
1:9e93a53: 
1:136610d:         startServer(masterJvmVersion,
1:9e93a53:                                    derbyMasterVersion,
1:9e93a53:                                    masterServerHost,
1:9e93a53:                                    ALL_INTERFACES,
1:9e93a53:                                    masterServerPort,
1:9e93a53:                                    masterDbSubPath);
1:136610d:         startServer(slaveJvmVersion,
1:9e93a53:                                   derbySlaveVersion,
1:9e93a53:                                   slaveServerHost,
1:9e93a53:                                   ALL_INTERFACES,
1:9e93a53:                                   slaveServerPort,
1:9e93a53:                                   slaveDbSubPath);
1:9e93a53: 
1:9e93a53:         startServerMonitor(slaveServerHost);
1:9e93a53: 
1:9e93a53:         bootMasterDatabase(jvmVersion,
1:9e93a53:                            masterDatabasePath + FS + masterDbSubPath,
1:9e93a53:                            replicatedDb,
1:9e93a53:                            masterServerHost,
1:9e93a53:                            masterServerPort,
1:9e93a53:                            null);
1:9e93a53: 
1:9e93a53:         // copy db to slave
1:9e93a53:         initSlave(slaveServerHost,
1:9e93a53:                   jvmVersion,
1:9e93a53:                   replicatedDb);
1:9e93a53: 
1:9e93a53:         // database has now been copied to slave. Updating the master
1:9e93a53:         // database at this point will cause unsynced log files
1:9e93a53:         executeOnMaster("call syscs_util.syscs_unfreeze_database()");
1:9e93a53:         executeOnMaster("create table breakLogSynch (v varchar(20))");
1:9e93a53:         executeOnMaster("drop table breakLogSynch");
1:9e93a53: 
1:9e93a53:         // startSlave is supposed do fail. We check the sql state in
1:9e93a53:         // assertSqlStateSlaveConn below
1:9e93a53:         startSlave(jvmVersion, replicatedDb,
1:9e93a53:                    slaveServerHost,
1:9e93a53:                    slaveServerPort,
1:9e93a53:                    slaveServerHost,
1:9e93a53:                    slaveReplPort,
1:9e93a53:                    testClientHost);
1:9e93a53: 
1:9e93a53:         SQLException sqlexception = null;
1:9e93a53:         try {
1:9e93a53:             startMaster(jvmVersion, replicatedDb,
1:9e93a53:                         masterServerHost,
1:9e93a53:                         masterServerPort,
1:9e93a53:                         masterServerHost,
1:9e93a53:                         slaveServerPort,
1:9e93a53:                         slaveServerHost,
1:9e93a53:                         slaveReplPort);
1:9e93a53:         } catch (SQLException sqle) {
1:9e93a53:             sqlexception = sqle;
1:9e93a53:         }
1:9e93a53:         // the startMaster connection attempt should fail with exception XRE05
1:9e93a53:         if (sqlexception == null) {
1:9e93a53:             fail("Start master did not get the expected SQL Exception XRE05");
1:9e93a53:         } else {
1:9e93a53:             BaseJDBCTestCase.assertSQLState("Unexpected SQL state.",
1:9e93a53:                                             "XRE05",
1:9e93a53:                                             sqlexception);
1:9e93a53:         }
1:9e93a53: 
1:9e93a53:         // The startSlave connection attempt should fail with exception XJ040
1:9e93a53:         assertSqlStateSlaveConn("XJ040");
1:9e93a53: 
1:9e93a53:         stopServer(jvmVersion, derbyVersion,
1:9e93a53:                    masterServerHost, masterServerPort);
1:9e93a53:         stopServer(jvmVersion, derbyVersion,
1:9e93a53:                    slaveServerHost, slaveServerPort);
1:9e93a53: 
1:9e93a53:     }
1:9e93a53: 
1:db8dae7:     
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("ReplicationRun_Local Suite");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(
1:             "ReplicationRun_Local Suite Local Authentication Suite");
commit:a40bc13
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerTestSetup.waitForAvailablePort(masterServerPort);
1:         NetworkServerTestSetup.waitForAvailablePort(slaveServerPort);
1:         NetworkServerTestSetup.waitForAvailablePort(slaveReplPort);
1: 
commit:9c2b1f3
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion,
1:         startServer(slaveJvmVersion,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:61b02b7
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Creates a new instance of ReplicationRun_Local running with authentication.
1:      */
1:     public ReplicationRun_Local(String testcaseName, String user, String password )
1:     {
1:         super( testcaseName, user, password );
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public static Test localAuthenticationSuite()
1:     {
1:         String      user = "KIWI";
1:         String      password = "KIWI_password";
0:         TestSuite suite = new TestSuite("ReplicationRun_Local Suite Local Authentication Suite");
1: 
1:         suite.addTest( new ReplicationRun_Local( "testReplication_Local_TestStraightReplication", user, password ) );
1:         suite.addTest( new ReplicationRun_Local( "testReplication_Local_LogFilesSynched", user, password ) );
1: 
1:         return SecurityManagerSetup.noSecurityManager( suite );
1:     }
1:     
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test the "normal" replication scenario:
1:      * Load on the master db while replicating to slave db,
1:      * then verify that slave db is correct after failover.
1:      * @throws java.lang.Exception
1:      */
1:     public void testReplication_Local_TestStraightReplication()
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
0:     public void testReplication_Local_existingTestsAsReplLoad()
/////////////////////////////////////////////////////////////////////////
1:     public void testReplication_Local_LogFilesSynched() throws Exception {
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:9e93a53
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * DERBY-3382: Test that start replication fails if master db is updated
1:      * after copying the db to the slave location
1:      * @throws java.lang.Exception on test errors.
1:      */
0:     public void testLogFilesSynched() throws Exception {
1: 
1:         cleanAllTestHosts();
1:         initEnvironment();
1:         initMaster(masterServerHost, replicatedDb);
1: 
0:         masterServer = startServer(masterJvmVersion,
1:                                    derbyMasterVersion,
1:                                    masterServerHost,
1:                                    ALL_INTERFACES,
1:                                    masterServerPort,
1:                                    masterDbSubPath);
0:         slaveServer = startServer(slaveJvmVersion,
1:                                   derbySlaveVersion,
1:                                   slaveServerHost,
1:                                   ALL_INTERFACES,
1:                                   slaveServerPort,
1:                                   slaveDbSubPath);
1: 
1:         startServerMonitor(slaveServerHost);
1: 
1:         bootMasterDatabase(jvmVersion,
1:                            masterDatabasePath + FS + masterDbSubPath,
1:                            replicatedDb,
1:                            masterServerHost,
1:                            masterServerPort,
1:                            null);
1: 
1:         // copy db to slave
1:         initSlave(slaveServerHost,
1:                   jvmVersion,
1:                   replicatedDb);
1: 
1:         // database has now been copied to slave. Updating the master
1:         // database at this point will cause unsynced log files
1:         executeOnMaster("call syscs_util.syscs_unfreeze_database()");
1:         executeOnMaster("create table breakLogSynch (v varchar(20))");
1:         executeOnMaster("drop table breakLogSynch");
1: 
1:         // startSlave is supposed do fail. We check the sql state in
1:         // assertSqlStateSlaveConn below
1:         startSlave(jvmVersion, replicatedDb,
1:                    slaveServerHost,
1:                    slaveServerPort,
1:                    slaveServerHost,
1:                    slaveReplPort,
1:                    testClientHost);
1: 
1:         SQLException sqlexception = null;
1:         try {
1:             startMaster(jvmVersion, replicatedDb,
1:                         masterServerHost,
1:                         masterServerPort,
1:                         masterServerHost,
1:                         slaveServerPort,
1:                         slaveServerHost,
1:                         slaveReplPort);
1:         } catch (SQLException sqle) {
1:             sqlexception = sqle;
1:         }
1:         // the startMaster connection attempt should fail with exception XRE05
1:         if (sqlexception == null) {
1:             fail("Start master did not get the expected SQL Exception XRE05");
1:         } else {
1:             BaseJDBCTestCase.assertSQLState("Unexpected SQL state.",
1:                                             "XRE05",
1:                                             sqlexception);
1:         }
1: 
1:         // The startSlave connection attempt should fail with exception XJ040
1:         assertSqlStateSlaveConn("XJ040");
1: 
1:         stopServer(jvmVersion, derbyVersion,
1:                    masterServerHost, masterServerPort);
1:         stopServer(jvmVersion, derbyVersion,
1:                    slaveServerHost, slaveServerPort);
1: 
1:     }
1: 
commit:dbe5dc3
/////////////////////////////////////////////////////////////////////////
1:                 masterDbSubPath); // Distinguishing master/slave
1:                 slaveDbSubPath); // Distinguishing master/slave
commit:40a554b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
/////////////////////////////////////////////////////////////////////////
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void testReplication_Local()
commit:5d24c78
/////////////////////////////////////////////////////////////////////////
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
0:     protected void setUp() throws Exception
1:     {
0:         super.setUp();
1:     }
1:     
0:     protected void tearDown() throws Exception
1:     {
0:         super.tearDown();
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local.class );
1:         
0:         return suite;
1:     }
1:     
1:     //////////////////////////////////////////////////////////////
1:     ////
1:     //// The replication test framework (testReplication()):
1:     //// a) "clean" replication run starting master and slave servers,
1:     ////     preparing master and slave databases,
1:     ////     starting and stopping replication and doing
1:     ////     failover for a "normal"/"failure free" replication
1:     ////     test run.
1:     ////
1:     //////////////////////////////////////////////////////////////
1:     
0:     public void testReplication()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:                 masterServerPort,
0:                 masterDatabasePath +FS+ masterDbSubPath); // Distinguishing master/slave
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:                 slaveServerPort,
0:                 slaveDatabasePath +FS+ slaveDbSubPath); // Distinguishing master/slave
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath,
1:                 replicatedDb,
1:                 masterServerHost, // Where the startreplication command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:                 slaveServerPort,
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, // Where the startMaster command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:                 slaveServerPort, // Not used since slave don't allow clients.
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort);
1:         
1:         
1:         // Used to run positive tests.
1:         // Handle negative testing in State.testPostStartedMasterAndSlave().
1:         // Observe that it will not be meaningful to do runTest if State.XXXX()
1:         // has led to incorrect replication state wrt. replicationTest.
1:         
1:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:         util.DEBUG("replicationTest: " + replicationTest);
1:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
0:         // replicationVerify = "/home/os136789/Replication/testing/verify_ReplicationTestRun.sql";
1:         util.DEBUG("replicationVerify: " + replicationVerify);
1: 
1:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:                 jvmVersion,
1:                 testClientHost,
1:                 masterServerHost, masterServerPort,
1:                 replicatedDb);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         verifySlave();
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         verifyMaster();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         // As of 2008-02-06 master does not accept shutdown after replication, so:
1:         // do a 'kill pid' after ending the test run
1:         
1:     }
1:     
1: }
============================================================================