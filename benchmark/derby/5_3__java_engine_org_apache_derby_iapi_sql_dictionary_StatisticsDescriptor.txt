1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.Statistics;
1:eac0369: import org.apache.derby.catalog.UUID;
1:bc2c59e: import org.apache.derby.iapi.types.DataTypeUtilities;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import java.sql.Timestamp;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Implementation of StatisticsDescriptor.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class StatisticsDescriptor extends TupleDescriptor
1:eac0369: {
1:eac0369: 	private UUID statID; 		// my UUID 
1:eac0369: 	private UUID statRefID;  	// UUID of object for which I'm a statistic 
1:eac0369: 	private UUID statTableID;  	// UUID of table for which I'm a stat 
1:eac0369: 	private Timestamp statUpdateTime; 	// when was I last modified 
1:eac0369: 
1:eac0369: 	/* I for Index, T for table and such; even though right now all 
1:eac0369: 	   our statistics are 'I' but who knows what we'll need later.
1:eac0369: 	*/
1:eac0369: 	private String statType;  							
1:eac0369: 	private boolean statValid = true;	// am I valid? 
1:eac0369: 	private Statistics statStat; // the real enchilada.
1:eac0369: 	private int statColumnCount; // for how many columns??
1:eac0369: 	
1:eac0369: 	public StatisticsDescriptor(DataDictionary dd,
1:eac0369: 							 UUID newUUID,
1:eac0369: 							 UUID objectUUID,
1:eac0369: 							 UUID tableUUID,
1:eac0369: 							 String type,
1:eac0369: 							 Statistics stat,
1:eac0369: 							 int colCount)
1:eac0369: 	{
1:eac0369: 		super (dd);
1:eac0369: 		this.statID = newUUID;
1:eac0369: 		this.statRefID = objectUUID;
1:eac0369: 		this.statTableID = tableUUID;
1:eac0369: 		this.statUpdateTime = new Timestamp(System.currentTimeMillis());	
1:eac0369: 		this.statType = "I";	// for now only index.
1:eac0369: 		this.statStat = stat;
1:eac0369: 		this.statColumnCount = colCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public UUID getUUID()
1:eac0369: 	{
1:eac0369: 		return statID;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/*----- getter functions for rowfactory ------*/
1:eac0369: 	public UUID getTableUUID() { return statTableID;}
1:eac0369: 	public UUID getReferenceID() { return statRefID; }
1:bc2c59e: 	public Timestamp getUpdateTimestamp() { return DataTypeUtilities.clone( statUpdateTime ); }
1:eac0369: 	public String getStatType() { return statType; }
1:eac0369: 	public boolean isValid() { return statValid; }
1:eac0369: 	public Statistics getStatistic() { return statStat; }
1:eac0369: 	public int getColumnCount() { return statColumnCount; }
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return "statistics: table=" + getTableUUID().toString() + 
1:eac0369: 			",conglomerate=" + getReferenceID() +
1:eac0369: 			",colCount=" + getColumnCount() +
1:eac0369: 			",stat=" + getStatistic();
1:eac0369: 	}		
1:eac0369: }	
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bc2c59e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeUtilities;
/////////////////////////////////////////////////////////////////////////
1: 	public Timestamp getUpdateTimestamp() { return DataTypeUtilities.clone( statUpdateTime ); }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.catalog.Statistics;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import java.sql.Timestamp;
1: 
1: /**
1:  * Implementation of StatisticsDescriptor.
1:  *
1:  */
1: public class StatisticsDescriptor extends TupleDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	private UUID statID; 		// my UUID 
1: 	private UUID statRefID;  	// UUID of object for which I'm a statistic 
1: 	private UUID statTableID;  	// UUID of table for which I'm a stat 
1: 	private Timestamp statUpdateTime; 	// when was I last modified 
1: 
1: 	/* I for Index, T for table and such; even though right now all 
1: 	   our statistics are 'I' but who knows what we'll need later.
1: 	*/
1: 	private String statType;  							
1: 	private boolean statValid = true;	// am I valid? 
1: 	private Statistics statStat; // the real enchilada.
1: 	private int statColumnCount; // for how many columns??
1: 	
1: 	public StatisticsDescriptor(DataDictionary dd,
1: 							 UUID newUUID,
1: 							 UUID objectUUID,
1: 							 UUID tableUUID,
1: 							 String type,
1: 							 Statistics stat,
1: 							 int colCount)
1: 	{
1: 		super (dd);
1: 		this.statID = newUUID;
1: 		this.statRefID = objectUUID;
1: 		this.statTableID = tableUUID;
1: 		this.statUpdateTime = new Timestamp(System.currentTimeMillis());	
1: 		this.statType = "I";	// for now only index.
1: 		this.statStat = stat;
1: 		this.statColumnCount = colCount;
1: 	}
1: 
1: 	public UUID getUUID()
1: 	{
1: 		return statID;
1: 	}
1: 	
1: 	/*----- getter functions for rowfactory ------*/
1: 	public UUID getTableUUID() { return statTableID;}
1: 	public UUID getReferenceID() { return statRefID; }
0: 	public Timestamp getUpdateTimestamp() { return statUpdateTime; }
1: 	public String getStatType() { return statType; }
1: 	public boolean isValid() { return statValid; }
1: 	public Statistics getStatistic() { return statStat; }
1: 	public int getColumnCount() { return statColumnCount; }
1: 
1: 	public String toString()
1: 	{
1: 		return "statistics: table=" + getTableUUID().toString() + 
1: 			",conglomerate=" + getReferenceID() +
1: 			",colCount=" + getColumnCount() +
1: 			",stat=" + getStatistic();
1: 	}		
1: }	
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.catalog.Statistics;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import java.sql.Timestamp;
0: 
0: /**
0:  * Implementation of StatisticsDescriptor.
0:  *
0:  */
0: public class StatisticsDescriptor extends TupleDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	private UUID statID; 		// my UUID 
0: 	private UUID statRefID;  	// UUID of object for which I'm a statistic 
0: 	private UUID statTableID;  	// UUID of table for which I'm a stat 
0: 	private Timestamp statUpdateTime; 	// when was I last modified 
0: 
0: 	/* I for Index, T for table and such; even though right now all 
0: 	   our statistics are 'I' but who knows what we'll need later.
0: 	*/
0: 	private String statType;  							
0: 	private boolean statValid = true;	// am I valid? 
0: 	private Statistics statStat; // the real enchilada.
0: 	private int statColumnCount; // for how many columns??
0: 	
0: 	public StatisticsDescriptor(DataDictionary dd,
0: 							 UUID newUUID,
0: 							 UUID objectUUID,
0: 							 UUID tableUUID,
0: 							 String type,
0: 							 Statistics stat,
0: 							 int colCount)
0: 	{
0: 		super (dd);
0: 		this.statID = newUUID;
0: 		this.statRefID = objectUUID;
0: 		this.statTableID = tableUUID;
0: 		this.statUpdateTime = new Timestamp(System.currentTimeMillis());	
0: 		this.statType = "I";	// for now only index.
0: 		this.statStat = stat;
0: 		this.statColumnCount = colCount;
0: 	}
0: 
0: 	public UUID getUUID()
0: 	{
0: 		return statID;
0: 	}
0: 	
0: 	/*----- getter functions for rowfactory ------*/
0: 	public UUID getTableUUID() { return statTableID;}
0: 	public UUID getReferenceID() { return statRefID; }
0: 	public Timestamp getUpdateTimestamp() { return statUpdateTime; }
0: 	public String getStatType() { return statType; }
0: 	public boolean isValid() { return statValid; }
0: 	public Statistics getStatistic() { return statStat; }
0: 	public int getColumnCount() { return statColumnCount; }
0: 
0: 	public String toString()
0: 	{
0: 		return "statistics: table=" + getTableUUID().toString() + 
0: 			",conglomerate=" + getReferenceID() +
0: 			",colCount=" + getColumnCount() +
0: 			",stat=" + getStatistic();
0: 	}		
0: }	
0: 
0: 
0: 
0: 
============================================================================