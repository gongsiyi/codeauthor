1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecutionContext
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
14:eac0369: 
10:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.Context;
1:eac0369: 
1:53ce71e: /**
1:eac0369:  * ExecutionContext stores the factories that are to be used by
1:eac0369:  * the current connection. It also provides execution services
1:eac0369:  * for statement atomicity.
11:eac0369:  *
1:53ce71e:  */
1:76addbc: public interface ExecutionContext extends Context {
1:eac0369: 
1:53ce71e: 	/**
1:eac0369: 	 * this is the ID we expect execution contexts
1:eac0369: 	 * to be stored into a context manager under.
1:53ce71e: 	 */
1:eac0369: 	String CONTEXT_ID = "ExecutionContext";
1:eac0369: 	
1:eac0369: 	
10:eac0369: 	/**
1:eac0369: 	 * Get the ExecutionFactory from this ExecutionContext.
1:eac0369: 	 *
1:eac0369: 	 * @return	The Execution factory associated with this
3:eac0369: 	 *		ExecutionContext
1:eac0369: 	 */
1:eac0369: 	ExecutionFactory getExecutionFactory();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:38f02ec
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:53ce71e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Map from Derby transaction isolation constants to
0:      * JDBC constants.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Map from Derby transaction isolation constants to
0:      * text values used in SQL. Note that the text
0:      * "REPEATABLE READ" or "RR" maps to SERIALIZABLE_ISOLATION_LEVEL
0:      * as a hang over from DB2 compatibility and now to preserve
0:      * backwards compatability.
1:      */
/////////////////////////////////////////////////////////////////////////
commit:6c000e8
/////////////////////////////////////////////////////////////////////////
commit:4119c42
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecutionContext
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface ExecutionContext extends Context {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.services.context.Context;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
1: /**
1:  * ExecutionContext stores the factories that are to be used by
1:  * the current connection. It also provides execution services
1:  * for statement atomicity.
1:  *
0:  * @author ames
1:  */
0: public interface ExecutionContext extends Context { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * this is the ID we expect execution contexts
1: 	 * to be stored into a context manager under.
1: 	 */
1: 	String CONTEXT_ID = "ExecutionContext";
1: 	
1: 	
0: 	/* Constants for scan isolation levels. */
0: 	public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
0: 	public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
0: 	public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
0: 	public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
0: 	public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
1: 
0: 	public static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
0: 		java.sql.Connection.TRANSACTION_NONE,				// UNSPECIFIED_ISOLATION_LEVEL
0: 		java.sql.Connection.TRANSACTION_READ_UNCOMMITTED,	// READ_UNCOMMITTED_ISOLATION_LEVEL
0: 		java.sql.Connection.TRANSACTION_READ_COMMITTED,		// READ_COMMITTED_ISOLATION_LEVEL
0: 		java.sql.Connection.TRANSACTION_REPEATABLE_READ,	// REPEATABLE_READ_ISOLATION_LEVEL		
0: 		java.sql.Connection.TRANSACTION_SERIALIZABLE		// SERIALIZABLE_ISOLATION_LEVEL
0: 	};
1: 
0: 	public static final String[][] CS_TO_SQL_ISOLATION_MAP = {
0: 		{ "  "},					// UNSPECIFIED_ISOLATION_LEVEL
0: 		{ "UR", "DIRTY READ", "READ UNCOMMITTED"},
0: 		{ "CS", "CURSOR STABILITY", "READ COMMITTED"},
0: 		{ "RS"},		// read stability	
0: 		{ "RR", "REPEATABLE READ", "SERIALIZABLE"}
0: 	};
1: 
1: 	/**
0: 	 * Get the ResultSetFactory from this ExecutionContext.
1: 	 *
0: 	 * @return	The result set factory associated with this
1: 	 *		ExecutionContext
1: 	 */
0: 	ResultSetFactory getResultSetFactory();
1: 
1: 	/**
0: 	 * Get the ResultSetStatisticsFactory from this ExecutionContext.
1: 	 *
0: 	 * @return	The result set statistics factory associated with this
1: 	 *		ExecutionContext
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	ResultSetStatisticsFactory getResultSetStatisticsFactory()
0: 								throws StandardException;
1: 
1: 	/**
1: 	 * Get the ExecutionFactory from this ExecutionContext.
1: 	 *
1: 	 * @return	The Execution factory associated with this
1: 	 *		ExecutionContext
1: 	 */
1: 	ExecutionFactory getExecutionFactory();
1: 
1: 	/**
0: 	 * Mark the beginning of a statement (INSERT, UPDATE, DELETE)
1: 	 *
0: 	 * @param sourceRS	Source ResultSet for the statement.
0: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	void beginStatement(ResultSet sourceRS) throws StandardException;
1: 
1: 	/**
0: 	 * The end of a statement (INSERT, UPDATE, DELETE)
0: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	void endStatement() throws StandardException;
1: 
1: 	/**
0: 	  *	Sifts the array of foreign key constraints for the ones
0: 	  *	which apply in the current context. In certain contexts
0: 	  *	(e.g., when applying the COPY file or when tearing-off
0: 	  *	a new table during REFRESH), we don't want to not bother
0: 	  *	enforcing some foreign keys.
1: 	  *
0: 	  *	@param	fullList	the full list of foreign keys that
0: 	  *						apply for the current statement
1: 	  *
0: 	  *	@return	a pruned back list, which we will actually bother
0: 	  *			enforcing.
1: 	  *
0: 	  * @exception StandardException Thrown on error
1: 	  */
0: 	public	Object[]	siftForeignKeys( Object[] fullList ) throws StandardException;
1: 
1: 	/**
0: 	 * Sifts the triggers for the ones which apply in the current context. 
0: 	 * In certain contexts (e.g., when applying the COPY file or 
0: 	 * when tearing-off a new table during REFRESH), we don't want to 
0: 	 * not bother firing triggers.
1: 	 * 
0: 	 *	@param	triggerInfo	the original trigger info
1: 	 *
0: 	 *	@return	a pruned back triggerInfo, which we will actually bother
0: 	 *			enforcing.
1: 	 *
0: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	public Object siftTriggers(Object triggerInfo) throws StandardException;
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.services.context.Context;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: /**
0:  * ExecutionContext stores the factories that are to be used by
0:  * the current connection. It also provides execution services
0:  * for statement atomicity.
0:  *
0:  * @author ames
0:  */
0: public interface ExecutionContext extends Context { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * this is the ID we expect execution contexts
0: 	 * to be stored into a context manager under.
0: 	 */
0: 	String CONTEXT_ID = "ExecutionContext";
0: 	
0: 	
0: 	/* Constants for scan isolation levels. */
0: 	public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
0: 	public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
0: 	public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
0: 	public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
0: 	public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
0: 
0: 	public static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
0: 		java.sql.Connection.TRANSACTION_NONE,				// UNSPECIFIED_ISOLATION_LEVEL
0: 		java.sql.Connection.TRANSACTION_READ_UNCOMMITTED,	// READ_UNCOMMITTED_ISOLATION_LEVEL
0: 		java.sql.Connection.TRANSACTION_READ_COMMITTED,		// READ_COMMITTED_ISOLATION_LEVEL
0: 		java.sql.Connection.TRANSACTION_REPEATABLE_READ,	// REPEATABLE_READ_ISOLATION_LEVEL		
0: 		java.sql.Connection.TRANSACTION_SERIALIZABLE		// SERIALIZABLE_ISOLATION_LEVEL
0: 	};
0: 
0: 	public static final String[][] CS_TO_SQL_ISOLATION_MAP = {
0: 		{ "  "},					// UNSPECIFIED_ISOLATION_LEVEL
0: 		{ "UR", "DIRTY READ", "READ UNCOMMITTED"},
0: 		{ "CS", "CURSOR STABILITY", "READ COMMITTED"},
0: 		{ "RS"},		// read stability	
0: 		{ "RR", "REPEATABLE READ", "SERIALIZABLE"}
0: 	};
0: 
0: 	/**
0: 	 * Get the ResultSetFactory from this ExecutionContext.
0: 	 *
0: 	 * @return	The result set factory associated with this
0: 	 *		ExecutionContext
0: 	 */
0: 	ResultSetFactory getResultSetFactory();
0: 
0: 	/**
0: 	 * Get the ResultSetStatisticsFactory from this ExecutionContext.
0: 	 *
0: 	 * @return	The result set statistics factory associated with this
0: 	 *		ExecutionContext
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ResultSetStatisticsFactory getResultSetStatisticsFactory()
0: 								throws StandardException;
0: 
0: 	/**
0: 	 * Get the ExecutionFactory from this ExecutionContext.
0: 	 *
0: 	 * @return	The Execution factory associated with this
0: 	 *		ExecutionContext
0: 	 */
0: 	ExecutionFactory getExecutionFactory();
0: 
0: 	/**
0: 	 * Mark the beginning of a statement (INSERT, UPDATE, DELETE)
0: 	 *
0: 	 * @param sourceRS	Source ResultSet for the statement.
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	void beginStatement(ResultSet sourceRS) throws StandardException;
0: 
0: 	/**
0: 	 * The end of a statement (INSERT, UPDATE, DELETE)
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	void endStatement() throws StandardException;
0: 
0: 	/**
0: 	  *	Sifts the array of foreign key constraints for the ones
0: 	  *	which apply in the current context. In certain contexts
0: 	  *	(e.g., when applying the COPY file or when tearing-off
0: 	  *	a new table during REFRESH), we don't want to not bother
0: 	  *	enforcing some foreign keys.
0: 	  *
0: 	  *	@param	fullList	the full list of foreign keys that
0: 	  *						apply for the current statement
0: 	  *
0: 	  *	@return	a pruned back list, which we will actually bother
0: 	  *			enforcing.
0: 	  *
0: 	  * @exception StandardException Thrown on error
0: 	  */
0: 	public	Object[]	siftForeignKeys( Object[] fullList ) throws StandardException;
0: 
0: 	/**
0: 	 * Sifts the triggers for the ones which apply in the current context. 
0: 	 * In certain contexts (e.g., when applying the COPY file or 
0: 	 * when tearing-off a new table during REFRESH), we don't want to 
0: 	 * not bother firing triggers.
0: 	 * 
0: 	 *	@param	triggerInfo	the original trigger info
0: 	 *
0: 	 *	@return	a pruned back triggerInfo, which we will actually bother
0: 	 *			enforcing.
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public Object siftTriggers(Object triggerInfo) throws StandardException;
0: }
============================================================================