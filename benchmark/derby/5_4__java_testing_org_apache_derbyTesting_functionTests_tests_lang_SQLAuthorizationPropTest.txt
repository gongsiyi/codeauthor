1:f05a2f8: /*
1:f05a2f8: *
1:31bea46: * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest
1:f05a2f8: *
1:f05a2f8: * Licensed to the Apache Software Foundation (ASF) under one or more
1:f05a2f8: * contributor license agreements.  See the NOTICE file distributed with
1:f05a2f8: * this work for additional information regarding copyright ownership.
1:f05a2f8: * The ASF licenses this file to You under the Apache License, Version 2.0
1:f05a2f8: * (the "License"); you may not use this file except in compliance with
1:f05a2f8: * the License.  You may obtain a copy of the License at
1:f05a2f8: *
1:f05a2f8: *    http://www.apache.org/licenses/LICENSE-2.0
1:f05a2f8: *
1:f05a2f8: * Unless required by applicable law or agreed to in writing, 
1:f05a2f8: * software distributed under the License is distributed on an 
1:f05a2f8: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:f05a2f8: * either express or implied. See the License for the specific 
1:f05a2f8: * language governing permissions and limitations under the License.
1:f05a2f8: */
3:f05a2f8: 
1:f05a2f8: package org.apache.derbyTesting.functionTests.tests.lang;
1:f05a2f8: 
1:f05a2f8: import java.sql.CallableStatement;
1:f05a2f8: import java.sql.Connection;
1:f05a2f8: import java.sql.SQLException;
1:f05a2f8: import java.sql.Statement;
1:f05a2f8: import java.util.Properties;
1:f05a2f8: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1:f05a2f8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f05a2f8: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:b83e61a: import org.apache.derbyTesting.junit.TestConfiguration;
1:f05a2f8: 
1:f05a2f8: public class SQLAuthorizationPropTest extends BaseJDBCTestCase {
1:f05a2f8: 
1:f05a2f8: 	public SQLAuthorizationPropTest(String name) {
1:f05a2f8: 		super(name);
2:f05a2f8: 	}
1:31bea46: 
1:f05a2f8: 	public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(
1:1ae02c9:             SQLAuthorizationPropTest.class, "SQLAuthorizationPropTest");
1:f05a2f8: 		
1:f05a2f8: 		// Use DatabasePropertyTestSetup decorator to set the property
1:9528482: 		// required by this test (and shutdown the database for the
1:9528482:         // property to take effect.
1:f05a2f8: 		Properties props = new Properties();
1:f05a2f8: 	    props.setProperty("derby.database.sqlAuthorization", "true");
1:f05a2f8: 	    Test test = new SQLAuthorizationPropTest("grantRevokeAfterSettingSQLAuthProperty");
1:9528482: 	    suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:f05a2f8: 	    
1:f05a2f8: 	    // This test has to be run after SQL authorization property has been 
1:f05a2f8: 	    // set to true. 
1:f05a2f8: 	    suite.addTest(new SQLAuthorizationPropTest("resetSQLAuthProperty"));
1:f05a2f8: 	    
1:b83e61a:         // This test needs to run in a new single use database as upon entry
1:b83e61a:         // the test expects SQL authorization to be off and then sets it
1:b83e61a:         // which cannot be undone.
1:b83e61a: 	    return TestConfiguration.singleUseDatabaseDecorator(suite);
1:f05a2f8: 	}
1:f05a2f8: 	
1:31bea46:     /**
1:f05a2f8:      * Create a table to test grant/revoke statements
1:f05a2f8:      */
1:f05a2f8:     protected void setUp() throws SQLException {
1:f05a2f8:         Statement stmt = createStatement();
1:f05a2f8:         stmt.execute("create table GR_TAB (id int)");
1:f05a2f8:         stmt.close();
1:f05a2f8:     }
1:f05a2f8: 
1:f05a2f8:     /**
1:f05a2f8:      * Drop the table created during setup.
1:f05a2f8:      * @throws Exception 
1:f05a2f8:      */
1:f05a2f8:     protected void tearDown()
1:f05a2f8:         throws Exception {
1:f05a2f8:         Statement stmt = createStatement();
1:f05a2f8:         stmt.execute("drop table GR_TAB");
1:f05a2f8:         stmt.close();
1:f05a2f8:         super.tearDown();
1:f05a2f8:     }
1:f05a2f8:     
1:f05a2f8: 	/**
1:f05a2f8: 	 * This method tests that grant/revoke is not available if 
1:f05a2f8: 	 * derby.database.sqlAuthorization property is not set.
1:f05a2f8: 	 * 
1:f05a2f8: 	 * @throws SQLException
1:f05a2f8: 	 */
1:f05a2f8: 	public void testGrantRevokeWithoutSQLAuthProperty() throws SQLException{
1:f05a2f8: 		Statement stmt = createStatement();
1:f05a2f8: 		
1:f05a2f8:     	try {
1:f05a2f8:     		stmt.execute("grant select on GR_TAB to some_user");
1:f05a2f8:     		fail("FAIL: Grant statement should have failed when SQL authorization is not set");
1:f05a2f8:     	} catch(SQLException sqle) {
1:f05a2f8:     		assertSQLState(SQLStateConstants.LANG_GRANT_REVOKE_WITH_LEGACY_ACCESS, sqle);
1:f05a2f8:     	}
1:f05a2f8:     	
1:f05a2f8:     	try {
1:f05a2f8:     		stmt.execute("revoke select on GR_TAB from some_user");
1:f05a2f8:     		fail("FAIL: Revoke statement should have failed when SQL authorization is not set");
1:f05a2f8:     	} catch(SQLException sqle) {
1:f05a2f8:     		assertSQLState(SQLStateConstants.LANG_GRANT_REVOKE_WITH_LEGACY_ACCESS, sqle);
1:f05a2f8:     	}
1:f05a2f8:     	stmt.close();
1:f05a2f8: 	}
1:f05a2f8: 	
1:f05a2f8: 	/**
1:f05a2f8: 	 * This method tests that grant/revoke is available 
1:f05a2f8: 	 * once derby.database.sqlAuthorization property is set to true.
1:f05a2f8: 	 * 
1:f05a2f8: 	 * @throws SQLException
1:f05a2f8: 	 */
1:f05a2f8: 	public void grantRevokeAfterSettingSQLAuthProperty() throws SQLException{
1:f05a2f8: 		
1:f05a2f8: 		Statement stmt = createStatement();
1:f05a2f8: 		stmt.execute("grant select on GR_TAB to some_user");
1:f05a2f8:     	stmt.execute("revoke select on GR_TAB from some_user");
1:f05a2f8:     	stmt.close();
1:f05a2f8: 	}
1:f05a2f8: 	
1:f05a2f8: 	/**
1:f05a2f8: 	 * This method tests that once derby.database.sqlAuthorization property 
1:f05a2f8: 	 * has been set to true, it cannot be reset to any other value. For the 
1:f05a2f8: 	 * test to be valid, it must follow the test method which sets 
1:f05a2f8: 	 * derby.database.sqlAuthorization property to true.
1:f05a2f8: 	 * 
1:f05a2f8: 	 * @throws SQLException
1:f05a2f8: 	 */
1:f05a2f8: 	public void resetSQLAuthProperty() throws SQLException {
1:f05a2f8: 		Connection conn = getConnection();
1:f05a2f8:         conn.setAutoCommit(false);
1:f05a2f8:         
1:f05a2f8:         CallableStatement setDBP =  conn.prepareCall(
1:f05a2f8:             "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:f05a2f8:         setDBP.setString(1, "derby.database.sqlAuthorization");
1:f05a2f8:         // Resetting to any value other than true should fail
1:f05a2f8:         testPropertyReset(setDBP, "false");
1:f05a2f8:         testPropertyReset(setDBP, null);
1:f05a2f8:         testPropertyReset(setDBP, "some_value");
1:f05a2f8:         // This should work
1:f05a2f8:         testPropertyReset(setDBP, "true");
1:b83e61a:         
1:b83e61a:         setDBP.close();
1:f05a2f8: 	}
1:f05a2f8: 	
1:f05a2f8: 	/**
1:f05a2f8: 	 * This method executes a callable statement to set the database property
1:f05a2f8: 	 * to a given value. It checks that reset to any value other than "true" 
1:f05a2f8: 	 * fails.
1:f05a2f8: 	 * 
1:f05a2f8: 	 * @param cs CallableStatement object used to set database property
1:f05a2f8: 	 * @param value value of database property
1:f05a2f8: 	 * @throws SQLException
1:f05a2f8: 	 */
1:b83e61a: 	private void testPropertyReset(CallableStatement cs, String value) throws SQLException {
1:f05a2f8: 
1:f05a2f8: 		cs.setString(2, value);
1:f05a2f8:         
1:f05a2f8: 		try {
1:f05a2f8:         	cs.executeUpdate();
1:f05a2f8:         	if(value.compareToIgnoreCase("true") != 0)
1:f05a2f8:         		fail("FAIL: Should not be possible to reset sql authorization once it has been turned on");
2:f05a2f8:         } catch (SQLException sqle) {
1:f05a2f8:         	assertSQLState(SQLStateConstants.PROPERTY_UNSUPPORTED_CHANGE, sqle);
1:f05a2f8:         }
1:f05a2f8:         
1:f05a2f8: 	}
1:f05a2f8: 
1:f05a2f8: 	/**
1:31bea46: 	 * Verify that you can't make the database unbootable by changing
1:31bea46:      * the database version. See DERBY-5838.
1:31bea46: 	 */
1:31bea46: 	public void test_5838() throws Exception
1:31bea46:     {
1:31bea46:         Statement stmt = createStatement();
1:31bea46: 
1:31bea46:         assertStatementError
1:31bea46:             (
1:31bea46:              "XCY02",
1:31bea46:              stmt,
1:31bea46:              "call syscs_util.syscs_set_database_property( 'DataDictionaryVersion', 'foobar' )"
1:31bea46:              );
1:31bea46:     }
1:31bea46:     
1:f05a2f8: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(
1:             SQLAuthorizationPropTest.class, "SQLAuthorizationPropTest");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:31bea46
/////////////////////////////////////////////////////////////////////////
1: * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Verify that you can't make the database unbootable by changing
1:      * the database version. See DERBY-5838.
1: 	 */
1: 	public void test_5838() throws Exception
1:     {
1:         Statement stmt = createStatement();
1: 
1:         assertStatementError
1:             (
1:              "XCY02",
1:              stmt,
1:              "call syscs_util.syscs_set_database_property( 'DataDictionaryVersion', 'foobar' )"
1:              );
1:     }
1:     
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9528482
/////////////////////////////////////////////////////////////////////////
1: 		// required by this test (and shutdown the database for the
1:         // property to take effect.
1: 	    suite.addTest(new DatabasePropertyTestSetup (test, props, true));
/////////////////////////////////////////////////////////////////////////
commit:b83e61a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
0: 		TestSuite suite = new TestSuite(SQLAuthorizationPropTest.class,
0:                 "SQLAuthorizationPropTest");
/////////////////////////////////////////////////////////////////////////
1:         // This test needs to run in a new single use database as upon entry
1:         // the test expects SQL authorization to be off and then sets it
1:         // which cannot be undone.
1: 	    return TestConfiguration.singleUseDatabaseDecorator(suite);
/////////////////////////////////////////////////////////////////////////
1:         
1:         setDBP.close();
/////////////////////////////////////////////////////////////////////////
1: 	private void testPropertyReset(CallableStatement cs, String value) throws SQLException {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a997e8f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			getDefaultConnection("shutdown=true");
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f05a2f8
/////////////////////////////////////////////////////////////////////////
1: /*
1: *
0: * Derby - Class org.apache.derbyTesting.functionTests.lang.SQLAuthorizationPropTest
1: *
1: * Licensed to the Apache Software Foundation (ASF) under one or more
1: * contributor license agreements.  See the NOTICE file distributed with
1: * this work for additional information regarding copyright ownership.
1: * The ASF licenses this file to You under the Apache License, Version 2.0
1: * (the "License"); you may not use this file except in compliance with
1: * the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing, 
1: * software distributed under the License is distributed on an 
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1: * either express or implied. See the License for the specific 
1: * language governing permissions and limitations under the License.
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.io.IOException;
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
0: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
1: public class SQLAuthorizationPropTest extends BaseJDBCTestCase {
1: 
1: 	public SQLAuthorizationPropTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 	public static Test suite() {
0: 		TestSuite suite = new TestSuite();
0: 		suite.addTestSuite(SQLAuthorizationPropTest.class);
1: 		
1: 		// Use DatabasePropertyTestSetup decorator to set the property
0: 		// required by this test. 
1: 		Properties props = new Properties();
1: 	    props.setProperty("derby.database.sqlAuthorization", "true");
1: 	    Test test = new SQLAuthorizationPropTest("grantRevokeAfterSettingSQLAuthProperty");
0: 	    suite.addTest(new DatabasePropertyTestSetup (test, props));
1: 	    
1: 	    // This test has to be run after SQL authorization property has been 
1: 	    // set to true. 
1: 	    suite.addTest(new SQLAuthorizationPropTest("resetSQLAuthProperty"));
1: 	    
0: 	    return suite;
1: 	}
1: 	
1:     /**
1:      * Create a table to test grant/revoke statements
1:      */
1:     protected void setUp() throws SQLException {
1:         Statement stmt = createStatement();
1:         stmt.execute("create table GR_TAB (id int)");
1:         stmt.close();
1:     }
1: 
1:     /**
1:      * Drop the table created during setup.
1:      * @throws Exception 
1:      */
1:     protected void tearDown()
1:         throws Exception {
1:         Statement stmt = createStatement();
1:         stmt.execute("drop table GR_TAB");
1:         stmt.close();
1:         super.tearDown();
1:     }
1:     
1: 	/**
1: 	 * This method tests that grant/revoke is not available if 
1: 	 * derby.database.sqlAuthorization property is not set.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testGrantRevokeWithoutSQLAuthProperty() throws SQLException{
1: 		Statement stmt = createStatement();
1: 		
1:     	try {
1:     		stmt.execute("grant select on GR_TAB to some_user");
1:     		fail("FAIL: Grant statement should have failed when SQL authorization is not set");
1:     	} catch(SQLException sqle) {
1:     		assertSQLState(SQLStateConstants.LANG_GRANT_REVOKE_WITH_LEGACY_ACCESS, sqle);
1:     	}
1:     	
1:     	try {
1:     		stmt.execute("revoke select on GR_TAB from some_user");
1:     		fail("FAIL: Revoke statement should have failed when SQL authorization is not set");
1:     	} catch(SQLException sqle) {
1:     		assertSQLState(SQLStateConstants.LANG_GRANT_REVOKE_WITH_LEGACY_ACCESS, sqle);
1:     	}
1:     	stmt.close();
1: 	}
1: 	
1: 	/**
1: 	 * This method tests that grant/revoke is available 
1: 	 * once derby.database.sqlAuthorization property is set to true.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void grantRevokeAfterSettingSQLAuthProperty() throws SQLException{
0: 		// Shutdown the database for derby.database.sqlAuthorization property 
0: 		// to take effect. This was set by DatabasePropertyTestSetup decorator.
0: 		try{ 
0: 			TestUtil.getConnection("wombat", "shutdown=true");
0: 			fail("FAIL: Failed to shutdown database");
1: 		} catch (SQLException sqle) {
0: 			assertSQLState(SQLStateConstants.SHUTDOWN_DATABASE, sqle);
1: 		}
1: 		
1: 		Statement stmt = createStatement();
1: 		stmt.execute("grant select on GR_TAB to some_user");
1:     	stmt.execute("revoke select on GR_TAB from some_user");
1:     	stmt.close();
1: 	}
1: 	
1: 	/**
1: 	 * This method tests that once derby.database.sqlAuthorization property 
1: 	 * has been set to true, it cannot be reset to any other value. For the 
1: 	 * test to be valid, it must follow the test method which sets 
1: 	 * derby.database.sqlAuthorization property to true.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void resetSQLAuthProperty() throws SQLException {
1: 		Connection conn = getConnection();
1:         conn.setAutoCommit(false);
1:         
1:         CallableStatement setDBP =  conn.prepareCall(
1:             "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:         setDBP.setString(1, "derby.database.sqlAuthorization");
1:         // Resetting to any value other than true should fail
1:         testPropertyReset(setDBP, "false");
1:         testPropertyReset(setDBP, null);
1:         testPropertyReset(setDBP, "some_value");
1:         // This should work
1:         testPropertyReset(setDBP, "true");
1: 	}
1: 	
1: 	/**
1: 	 * This method executes a callable statement to set the database property
1: 	 * to a given value. It checks that reset to any value other than "true" 
1: 	 * fails.
1: 	 * 
1: 	 * @param cs CallableStatement object used to set database property
1: 	 * @param value value of database property
1: 	 * @throws SQLException
1: 	 */
0: 	public void testPropertyReset(CallableStatement cs, String value) throws SQLException {
1: 
1: 		cs.setString(2, value);
1:         
1: 		try {
1:         	cs.executeUpdate();
1:         	if(value.compareToIgnoreCase("true") != 0)
1:         		fail("FAIL: Should not be possible to reset sql authorization once it has been turned on");
1:         } catch (SQLException sqle) {
1:         	assertSQLState(SQLStateConstants.PROPERTY_UNSUPPORTED_CHANGE, sqle);
1:         }
1:         
1: 	}
1: }
============================================================================