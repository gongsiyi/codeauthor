1:660d738: /*
1:09869c6: 
1:660d738:    Derby - Class org.apache.derby.jdbc.EmbeddedDataSource40
1:2913612: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:2913612: 
1:660d738:       http://www.apache.org/licenses/LICENSE-2.0
1:09869c6: 
1:660d738:    Unless required by applicable law or agreed to in writing, software
1:660d738:    distributed under the License is distributed on an "AS IS" BASIS,
1:660d738:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:660d738:    See the License for the specific language governing permissions and
1:660d738:    limitations under the License.
22:b33b410: 
1:8a44c0f:  */
1:8a44c0f: 
1:660d738: package org.apache.derby.jdbc;
1:b33b410: 
1:8a44c0f: /** 
1:78bdf36:    <P>
1:78bdf36:    This is a vacuous, deprecated class. At one time, it had real behavior and helped us support
1:a086620:    separate data sources for Java 5 and Java 6.
1:78bdf36:    Now that we no longer support Java 5, all functionality has migrated into the superclass, EmbeddedDataSource.
1:fd584b0:    This class is preserved for backward compatibility reasons.
1:78bdf36:    </P>
1:c712a5b:    @deprecated Use {@link EmbeddedDataSource} instead.
1:b33b410: */
1:eea0d50: public class EmbeddedDataSource40 extends EmbeddedDataSource
1:eea0d50:     implements javax.sql.DataSource /* compile-time check for 4.1 extension */
1:eea0d50: {
1:eea0d50:    private static final long serialVersionUID = 4472591890758954803L;
1:09869c6:     
1:660d738:     public EmbeddedDataSource40() {
1:09869c6:     }
1:46e89a9: 
1:8a44c0f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a086620
/////////////////////////////////////////////////////////////////////////
1:    separate data sources for Java 5 and Java 6.
commit:a24588c
/////////////////////////////////////////////////////////////////////////
0:       <li>Java SE 7 (JDBC 4.1) and
0:       <li>full Java SE 8 (JDBC 4.2).
commit:cb88209
/////////////////////////////////////////////////////////////////////////
0:     running on the following platforms:
0:     <p>
0:     <ul>
0:       <li>JDBC 4.1 - Java SE 7
0:       <li>JDBC 4.2 - full Java SE 8
0:     </ul>
0:     <p>
0:     Use BasicEmbeddedDataSource40 if your application runs on Java 8
0:     Compact Profile 2.
0:     <p>
0:     Use EmbeddedDataSource if your application runs on the following
0:     platforms:
0:     <p>
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:     This datasource is suitable for an application using embedded Derby,
0:     running on full Java SE 7, corresponding to JDBC 4.1.
0:     <p/>
1: 
0:     Use EmbeddedDataSource if your application is runs in one of the
0:     following older environments:
1: 
0:     <ul>
0:       <li> JDBC 3.0 - J2SE 5.0 </li>
0:       <li> JDBC 4.0 - Java SE 6 </li>
0:     </ul>
0:     <p>
0:     EmbeddedDataSource40 is a DataSource implementation.
0:    The following is a list of properties that can be set on a Derby
commit:eea0d50
/////////////////////////////////////////////////////////////////////////
1: public class EmbeddedDataSource40 extends EmbeddedDataSource
1:     implements javax.sql.DataSource /* compile-time check for 4.1 extension */
1: {
1:    private static final long serialVersionUID = 4472591890758954803L;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c712a5b
/////////////////////////////////////////////////////////////////////////
1:    @deprecated Use {@link EmbeddedDataSource} instead.
commit:46e89a9
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedDataSource40 is Derby's DataSource implementation for JDBC 4.1.
0:     Use EmbeddedDataSource40 if your application runs at JDBC level 4.1
0:     (or higher).
0:     <LI> JDBC 3.0 - J2SE 5.0 </LI>
0:     <LI> JDBC 4.0 - Java SE 6 </LI>
/////////////////////////////////////////////////////////////////////////
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fd584b0
/////////////////////////////////////////////////////////////////////////
1:    This class is preserved for backward compatibility reasons.
commit:78bdf36
/////////////////////////////////////////////////////////////////////////
1:    <P>
1:    This is a vacuous, deprecated class. At one time, it had real behavior and helped us support
0:    separate datasources for Java 5 and Java 6.
1:    Now that we no longer support Java 5, all functionality has migrated into the superclass, EmbeddedDataSource.
1:    </P>
/////////////////////////////////////////////////////////////////////////
commit:0ede6f3
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedDataSource40 is Derby's DataSource implementation for JDBC 4.0 (and higher).
0: 	Use EmbeddedDataSource40 if your application runs at JDBC level 4.0 (or higher).
0: 	Use EmbeddedDataSource
0: 	if your application is runs in one of the following older
commit:09869c6
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLFeatureNotSupportedException;
0: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:     
0:     ////////////////////////////////////////////////////////////////////
0:     //
0:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
0:     //
0:     ////////////////////////////////////////////////////////////////////
1: 
0:     public  Logger getParentLogger()
0:         throws SQLFeatureNotSupportedException
0:     {
0:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:     }
1: 
commit:d6e7d39
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8a44c0f
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.DataSource;
0: import org.apache.derby.impl.jdbc.Util;
/////////////////////////////////////////////////////////////////////////
0:      * This method forwards all the calls to default query object provided by 
0:      * the jdk.
0:      * @param ifc interface to generated concreate class
0:      * @param dataSource DataSource to use when invoking methods that access the Data Source
0:      * @return concrete class generated by default qury object generator
1:      */
0:     public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
0:                                                     throws SQLException {
0:         return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
1:     }   
1: 
1:     /**
commit:b33b410
/////////////////////////////////////////////////////////////////////////
0: /** 
1: 	
1: 
0: 	EmbeddedDataSource40 is Derby's DataSource implementation for JDBC4.0.
1: 	
1: 
0: 	<P>A DataSource  is a factory for Connection objects. An object that
0: 	implements the DataSource interface will typically be registered with a
0: 	JNDI service provider.
0: 	<P>
0: 	EmbeddedDataSource40 supports the JDBC 4.0 specification
0: 	for the J2SE 6.0 Java Virtual Machine environment. Use EmbeddedDataSource
0: 	if your application is running in one of the following older
0: 	environments:
0: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0: 	</UL>	
1: 
0: 	<P>The following is a list of properties that can be set on a Derby
0: 	DataSource object:
0: 	<P><B>Standard DataSource properties</B> (from JDBC 3.0 specification).
1: 
0: 	<UL><LI><B><code>databaseName</code></B> (String): <I>Mandatory</I>
0: 	<BR>This property must be set and it
0: 	identifies which database to access.  If a database named wombat located at
0: 	g:/db/wombat is to be accessed, then one should call
0: 	<code>setDatabaseName("g:/db/wombat")</code> on the data source object.</LI>
1: 
0: 	<LI><B><code>dataSourceName</code></B> (String): <I>Optional</I>
0: 	<BR> Name for DataSource.  Not used by the data source object.  Used for
0: 	informational purpose only.</LI>
1: 
0: 	<LI><B><code>description</code></B> (String): <I>Optional</I>
0: 	<BR>Description of the data source.  Not
0: 	used by the data source object.  Used for informational purpose only.</LI> 
1: 
0: 	<LI><B><code>password</code></B> (String): <I>Optional</I>
0: 	<BR>Database password for the no argument <code>DataSource.getConnection()</code>,
0: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
0: 	and <code>XADataSource.getXAConnection()</code> methods.
1: 
0: 	<LI><B><code>user</code></B> (String): <I>Optional</I>
0: 	<BR>Database user for the no argument <code>DataSource.getConnection()</code>,
0: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
0: 	and <code>XADataSource.getXAConnection()</code> methods.
0: 	</UL>
1: 
0: 	<BR><B>Derby specific DataSource properties.</B>
1: 
0:   <UL>
1: 
0:   <LI><B><code>attributesAsPassword</code></B> (Boolean): <I>Optional</I>
0: 	<BR>If true, treat the password value in a
0: 	<code>DataSource.getConnection(String user, String password)</code>,
0: 	<code>ConnectionPoolDataSource.getPooledConnection(String user, String password)</code>
0: 	or <code>XADataSource.getXAConnection(String user, String password)</code> as a set
0: 	of connection attributes. The format of the attributes is the same as the format
0: 	of the attributes in the property connectionAttributes. If false the password value
0: 	is treated normally as the password for the given user.
0: 	Setting this property to true allows a connection request from an application to
0: 	provide more authentication information that just a password, for example the request
0: 	can include the user's password and an encrypted database's boot password.</LI>
1: 
0:   <LI><B><code>connectionAttributes</code></B> (String): <I>Optional</I>
0:   <BR>Defines a set of Derby connection attributes for use in all connection requests.
0:   The format of the String matches the format of the connection attributes in a Derby JDBC URL.
0:   That is a list of attributes in the form <code><I>attribute</I>=<I>value</I></code>, each separated by semi-colon (';').
0:   E.g. <code>setConnectionAttributes("bootPassword=erd3234dggd3kazkj3000");</code>.
0:   <BR>The database name must be set by the DataSource property <code>databaseName</code> and not by setting the <code>databaseName</code>
0:   connection attribute in the <code>connectionAttributes</code> property.
0: 	<BR>
0:    Any attributes that can be set using a property of this DataSource implementation
0:    (e.g user, password) should not be set in connectionAttributes. Conflicting
0:    settings in connectionAttributes and properties of the DataSource will lead to
0:    unexpected behaviour. 
0:   <BR>Please see the Derby documentation for a complete list of connection attributes. </LI>
1: 
0:   <LI><B><code>createDatabase</code></B> (String): <I>Optional</I>
0: 	<BR>If set to the string "create", this will
0: 	cause a new database of <code>databaseName</code> if that database does not already
0: 	exist.  The database is created when a connection object is obtained from
0: 	the data source. </LI> 
1: 
0: 	<LI><B><code>shutdownDatabase</code></B> (String): <I>Optional</I>
0: 	<BR>If set to the string "shutdown",
0: 	this will cause the database to shutdown when a java.sql.Connection object
0: 	is obtained from the data source.  E.g., If the data source is an
0: 	XADataSource, a getXAConnection().getConnection() is necessary to cause the
0: 	database to shutdown.
1: 
0: 	</UL>
1: 
0: 	<P><B>Examples.</B>
1: 
0: 	<P>This is an example of setting a property directly using Derby's
0: 	EmbeddedDataSource40 object.  This code is typically written by a system integrator :
0: 	<PRE> 
0: 	*
0: 	* import org.apache.derby.jdbc.*;
0: 	*
0: 	* // dbname is the database name
0: 	* // if create is true, create the database if necessary
0: 	* javax.sql.DataSource makeDataSource (String dbname, boolean create)
0: 	*	throws Throwable 
0: 	* { 
0: 	*	EmbeddedDataSource40 ds = new EmbeddedDataSource40(); 
0: 	*	ds.setDatabaseName(dbname);
0: 	*
0: 	*	if (create)
0: 	*		ds.setCreateDatabase("create");
0:     *   
0: 	*	return ds;
0: 	* }
0: 	</PRE>
1: 
0: 	<P>Example of setting properties thru reflection.  This code is typically
0: 	generated by tools or written by a system integrator: <PRE>
0: 	*	
0: 	* javax.sql.DataSource makeDataSource(String dbname) 
0: 	*	throws Throwable 
0: 	* {
0: 	*	Class[] parameter = new Class[1];
0: 	*	parameter[0] = dbname.getClass();
0: 	*	DataSource ds =  new EmbeddedDataSource40();
0: 	*	Class cl = ds.getClass();
0: 	*
0: 	*	Method setName = cl.getMethod("setDatabaseName", parameter);
0: 	*	Object[] arg = new Object[1];
0: 	*	arg[0] = dbname;
0: 	*	setName.invoke(ds, arg);
0: 	*
0: 	*	return ds;
0: 	* }
0: 	</PRE>
1: 
0: 	<P>Example on how to register a data source object with a JNDI naming
0: 	service.
0: 	<PRE>
0: 	* DataSource ds = makeDataSource("mydb");
0: 	* Context ctx = new InitialContext();
0: 	* ctx.bind("jdbc/MyDB", ds);
0: 	</PRE>
1: 
0: 	<P>Example on how to retrieve a data source object from a JNDI naming
0: 	service. 
0: 	<PRE>
0: 	* Context ctx = new InitialContext();
0: 	* DataSource ds = (DataSource)ctx.lookup("jdbc/MyDB");
0: 	</PRE>
1: 
1: */
commit:3bfb5f0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.SQLState;
0: 
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
0:      * Returns false unless <code>interfaces</code> is implemented 
0:      * 
0:      * @param  interfaces             a Class defining an interface.
0:      * @return true                   if this implements the interface or 
0:      *                                directly or indirectly wraps an object 
0:      *                                that does.
0:      * @throws java.sql.SQLException  if an error occurs while determining 
0:      *                                whether this is a wrapper for an object 
0:      *                                with the given interface.
0:      */
0:     public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
0:         return interfaces.isInstance(this);
0:     }
0:     
0:     /**
0:      * Returns <code>this</code> if this class implements the interface
0:      *
0:      * @param  interfaces a Class defining an interface
0:      * @return an object that implements the interface
0:      * @throws java.sql.SQLExption if no object if found that implements the 
0:      * interface
0:      */
0:     public <T> T unwrap(java.lang.Class<T> interfaces) 
0:                             throws SQLException{
0:         //Derby does not implement non-standard methods on 
0:         //JDBC objects
0:         //hence return this if this class implements the interface 
0:         //or throw an SQLException
0:         try {
0:             return interfaces.cast(this);
0:         } catch (ClassCastException cce) {
0:             throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
0:                     interfaces);
0:         }
0:     }
commit:527d377
/////////////////////////////////////////////////////////////////////////
0: import java.sql.BaseQuery;
0: import java.sql.QueryObjectFactory;
0: import java.sql.QueryObjectGenerator;
/////////////////////////////////////////////////////////////////////////
0:        
0:     /**
0:      * returns null indicating that no driver specific implementation for 
0:      * QueryObjectGenerator available
0:      * @return null
0:      */
0:     public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
0:         return null;
0:     /**
0:      * This method forwards all the calls to default query object provided by 
0:      * the jdk.
0:      * @param ifc interface to generated concreate class
0:      * @return concreat class generated by default qury object generator
0:      */
0:     public <T extends BaseQuery> T createQueryObject(Class<T> ifc) 
0:                                                     throws SQLException {
0:         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
0:     }        
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fb8cf6e
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:660d738
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1:    Derby - Class org.apache.derby.jdbc.EmbeddedDataSource40
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1:       http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
0:  */
0: 
1: package org.apache.derby.jdbc;
0: 
0: import org.apache.derby.impl.jdbc.Util;
0: import java.sql.SQLException;
0: 
0: public class EmbeddedDataSource40 extends EmbeddedDataSource {
0:     
1:     public EmbeddedDataSource40() {
0:     }
0:     
0:     public <T> T createQueryObject(Class<T> ifc) throws SQLException {
0:         throw Util.notImplemented();
0:     }
0:     
0:     
0: }
============================================================================