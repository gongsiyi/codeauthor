1:33776ff: /*
22:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.Version
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:70f7692: 
1:69e3d06: import java.io.PrintWriter;
1:69e3d06: import java.net.InetAddress;
1:69e3d06: import java.net.UnknownHostException;
1:5d2e2bd: import org.apache.derby.shared.common.i18n.MessageUtil;
1:47509e8: import org.apache.derby.shared.common.reference.MessageId;
1:5d2e2bd: 
1:70f7692: 
1:70f7692: 
1:70f7692: public abstract class Version {
1:0326967:     private static final MessageUtil msgutil = SqlException.getMessageUtil();
1:5d2e2bd:     
1:70f7692:     // for DatabaseMetaData.getDriverVersion()
1:70f7692:     public static String getDriverVersion() {
1:23ecfcf:         return Configuration.getProductVersionHolder().getVersionBuildString(true);
1:70f7692:     }
1:5d2e2bd: 
1:70f7692: 
1:70f7692:     // Same as java.sql.Driver.getMajorVersion(), getMinorVersion()
1:70f7692:     public static int getMajorVersion() {
1:70f7692:         return Configuration.getProductVersionHolder().getMajorVersion();
1:70f7692:     }
1:70f7692: 
1:70f7692:     public static int getMinorVersion() {
1:70f7692:         return Configuration.getProductVersionHolder().getMinorVersion();
1:70f7692:     }
1:70f7692: 
1:70f7692:     public static int getProtocolMaintVersion() {
1:70f7692:         return Configuration.getProductVersionHolder().getDrdaMaintVersion();
1:70f7692:     }
1:70f7692: 
1:70f7692:     // Not an external, just a helper method
1:70f7692:     private static String getDriverNameAndVersion() {
1:70f7692:         return Configuration.dncDriverName + " " +
1:23ecfcf:                 Configuration.getProductVersionHolder().getVersionBuildString(true);
1:70f7692:     }
1:70f7692: 
1:70f7692:     // -------------------------- configuration print stream ---------------------
1:70f7692: 
1:0326967:     static void writeDriverConfiguration(PrintWriter printWriter) {
1:70f7692:         String header = "[derby] ";
1:70f7692:         synchronized (printWriter) {
1:70f7692:             printWriter.println(header + "BEGIN TRACE_DRIVER_CONFIGURATION");
1:70f7692:             printWriter.println(header + "Driver: " + getDriverNameAndVersion());
1:70f7692: 
1:70f7692:             printWriter.print(header + "Compatible JRE versions: { ");
1:43fb59e:             String [] cv = Configuration.getDncCompatibleJREVersions();
1:43fb59e:             for (int i = 0; i < cv.length; i++) {
1:43fb59e:                 printWriter.print(cv[i]);
1:43fb59e:                 if (i != cv.length - 1) {
1:70f7692:                     printWriter.print(", ");
1:70f7692:                 }
1:70f7692:             }
1:70f7692:             printWriter.println(" }");
1:70f7692: 
1:70f7692:             printWriter.println(header + "Range checking enabled: " + Configuration.rangeCheckCrossConverters);
1:70f7692:             printWriter.println(header + "Bug check level: 0x" + Integer.toHexString(Configuration.bugCheckLevel));
1:70f7692:             printWriter.println(header + "Default fetch size: " + Configuration.defaultFetchSize);
1:70f7692:             printWriter.println(header + "Default isolation: " + Configuration.defaultIsolation);
1:70f7692: 
1:69e3d06:             SecurityManager security = System.getSecurityManager();
1:70f7692:             if (security == null) {
1:70f7692:                 printWriter.println(header + "No security manager detected.");
1:70f7692:             } else {
1:70f7692:                 printWriter.println(header + "Security manager detected.");
1:70f7692:             }
1:70f7692: 
1:69e3d06:             detectLocalHost(System.getSecurityManager(), printWriter);
1:70f7692: 
1:70f7692:             printSystemProperty(security, "JDBC 1 system property jdbc.drivers = ", "jdbc.drivers", printWriter);
1:70f7692: 
1:70f7692:             printSystemProperty(security, "Java Runtime Environment version ", "java.version", printWriter);
1:70f7692:             printSystemProperty(security, "Java Runtime Environment vendor = ", "java.vendor", printWriter);
1:70f7692:             printSystemProperty(security, "Java vendor URL = ", "java.vendor.url", printWriter);
1:70f7692:             printSystemProperty(security, "Java installation directory = ", "java.home", printWriter);
1:70f7692:             printSystemProperty(security, "Java Virtual Machine specification version = ", "java.vm.specification.version", printWriter);
1:70f7692:             printSystemProperty(security, "Java Virtual Machine specification vendor = ", "java.vm.specification.vendor", printWriter);
1:70f7692:             printSystemProperty(security, "Java Virtual Machine specification name = ", "java.vm.specification.name", printWriter);
1:70f7692:             printSystemProperty(security, "Java Virtual Machine implementation version = ", "java.vm.version", printWriter);
1:70f7692:             printSystemProperty(security, "Java Virtual Machine implementation vendor = ", "java.vm.vendor", printWriter);
1:70f7692:             printSystemProperty(security, "Java Virtual Machine implementation name = ", "java.vm.name", printWriter);
1:70f7692:             printSystemProperty(security, "Java Runtime Environment specification version = ", "java.specification.version", printWriter);
1:70f7692:             printSystemProperty(security, "Java Runtime Environment specification vendor = ", "java.specification.vendor", printWriter);
1:70f7692:             printSystemProperty(security, "Java Runtime Environment specification name = ", "java.specification.name", printWriter);
1:70f7692:             printSystemProperty(security, "Java class format version number = ", "java.class.version", printWriter);
1:70f7692:             printSystemProperty(security, "Java class path = ", "java.class.path", printWriter);
1:70f7692:             printSystemProperty(security, "Java native library path = ", "java.library.path", printWriter);
1:70f7692:             printSystemProperty(security, "Path of extension directory or directories = ", "java.ext.dirs", printWriter);
1:70f7692:             printSystemProperty(security, "Operating system name = ", "os.name", printWriter);
1:70f7692:             printSystemProperty(security, "Operating system architecture = ", "os.arch", printWriter);
1:70f7692:             printSystemProperty(security, "Operating system version = ", "os.version", printWriter);
1:70f7692:             printSystemProperty(security, "File separator (\"/\" on UNIX) = ", "file.separator", printWriter);
1:70f7692:             printSystemProperty(security, "Path separator (\":\" on UNIX) = ", "path.separator", printWriter);
1:70f7692:             printSystemProperty(security, "User's account name = ", "user.name", printWriter);
1:70f7692:             printSystemProperty(security, "User's home directory = ", "user.home", printWriter);
1:70f7692:             printSystemProperty(security, "User's current working directory = ", "user.dir", printWriter);
1:70f7692:             printWriter.println(header + "END TRACE_DRIVER_CONFIGURATION");
1:70f7692:             printWriter.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:69e3d06:     private static void printSystemProperty(SecurityManager security,
1:70f7692:                                             String prefix,
1:70f7692:                                             String property,
1:69e3d06:                                             PrintWriter printWriter) {
1:70f7692:         String header = "[derby] ";
1:70f7692:         synchronized (printWriter) {
1:70f7692:             try {
1:70f7692:                 if (security != null) {
1:70f7692:                     security.checkPropertyAccess(property);
1:70f7692:                 }
1:70f7692:                 String result = System.getProperty(property);
1:70f7692:                 printWriter.println(header + prefix + result);
1:70f7692:                 printWriter.flush();
1:70f7692:             } catch (SecurityException e) {
1:5d2e2bd:                 printWriter.println(header + 
1:47509e8:                     msgutil.getTextMessage(MessageId.SECURITY_MANAGER_NO_ACCESS_ID, property));
1:70f7692:                 printWriter.flush();
1:70f7692:             }
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     // printWriter synchronized by caller
1:69e3d06:     private static void detectLocalHost(
1:69e3d06:             SecurityManager security,
1:69e3d06:             PrintWriter printWriter) {
1:69e3d06: 
1:70f7692:         String header = "[derby] ";
1:70f7692:         // getLocalHost() will hang the HotJava 1.0 browser with a high security manager.
1:70f7692:         if (security == null) {
1:70f7692:             try {
1:70f7692:                 printWriter.print(header + "Detected local client host: ");
1:69e3d06:                 printWriter.println(InetAddress.getLocalHost().toString());
1:70f7692:                 printWriter.flush();
1:69e3d06:             } catch (UnknownHostException e) {
1:5d2e2bd:                 printWriter.println(header + 
1:47509e8:                     msgutil.getTextMessage(MessageId.UNKNOWN_HOST_ID, e.getMessage()));
1:70f7692:                 printWriter.flush();
1:70f7692:             }
1:70f7692:         }
1:70f7692:     }
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     private static final MessageUtil msgutil = SqlException.getMessageUtil();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static void writeDriverConfiguration(PrintWriter printWriter) {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
/////////////////////////////////////////////////////////////////////////
0:     public static void writeDriverConfiguration(PrintWriter printWriter) {
/////////////////////////////////////////////////////////////////////////
1:             SecurityManager security = System.getSecurityManager();
1:             detectLocalHost(System.getSecurityManager(), printWriter);
/////////////////////////////////////////////////////////////////////////
1:     private static void printSystemProperty(SecurityManager security,
1:                                             PrintWriter printWriter) {
/////////////////////////////////////////////////////////////////////////
1:     private static void detectLocalHost(
1:             SecurityManager security,
1:             PrintWriter printWriter) {
1: 
1:                 printWriter.println(InetAddress.getLocalHost().toString());
1:             } catch (UnknownHostException e) {
commit:43fb59e
/////////////////////////////////////////////////////////////////////////
1:             String [] cv = Configuration.getDncCompatibleJREVersions();
1:             for (int i = 0; i < cv.length; i++) {
1:                 printWriter.print(cv[i]);
1:                 if (i != cv.length - 1) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:23ecfcf
/////////////////////////////////////////////////////////////////////////
0:     static final MessageUtil msgutil = SqlException.getMessageUtil();
/////////////////////////////////////////////////////////////////////////
1:         return Configuration.getProductVersionHolder().getVersionBuildString(true);
/////////////////////////////////////////////////////////////////////////
1:                 Configuration.getProductVersionHolder().getVersionBuildString(true);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:47509e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:                     msgutil.getTextMessage(MessageId.SECURITY_MANAGER_NO_ACCESS_ID, property));
/////////////////////////////////////////////////////////////////////////
1:                     msgutil.getTextMessage(MessageId.UNKNOWN_HOST_ID, e.getMessage()));
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:218884d
/////////////////////////////////////////////////////////////////////////
0:         return Configuration.dncProductVersionHolder__.getVersionBuildString(true);
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f271471
/////////////////////////////////////////////////////////////////////////
0:     static MessageUtil msgutil = SqlException.getMessageUtil();
commit:5d2e2bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.i18n.MessageUtil;
1: 
0:     static MessageUtil msgutil = 
0:         new MessageUtil(SqlException.CLIENT_MESSAGE_RESOURCE_NAME);
1:     
0:     // Constants for internationalized message ids
0:     private static String SECURITY_MANAGER_NO_ACCESS_ID             = "J108";
0:     private static String UNKNOWN_HOST_ID                           = "J109";
1:     
/////////////////////////////////////////////////////////////////////////
1:                 printWriter.println(header + 
0:                     msgutil.getTextMessage(SECURITY_MANAGER_NO_ACCESS_ID, property));
/////////////////////////////////////////////////////////////////////////
1:                 printWriter.println(header + 
0:                     msgutil.getTextMessage(UNKNOWN_HOST_ID, e.getMessage()));
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: public abstract class Version {
0:     // Same as java.sql.DatabaseMetaData.getDriverName()
0:     public static String getDriverName() {
0:         return Configuration.dncDriverName;
1:     // for DatabaseMetaData.getDriverVersion()
1:     public static String getDriverVersion() {
0:         return Configuration.dncProductVersionHolder__.getVersionBuildString(false);
1: 
1:     // Same as java.sql.Driver.getMajorVersion(), getMinorVersion()
1:     public static int getMajorVersion() {
1:         return Configuration.getProductVersionHolder().getMajorVersion();
1: 
1:     public static int getMinorVersion() {
1:         return Configuration.getProductVersionHolder().getMinorVersion();
1:     }
1: 
0:     public static int getBuildNumber() {
0:         return Configuration.getProductVersionHolder().getBuildNumberAsInt();
1:     }
1: 
1:     public static int getProtocolMaintVersion() {
1:         return Configuration.getProductVersionHolder().getDrdaMaintVersion();
1:     }
1: 
0:     public static boolean isAlpha() {
0:         return Configuration.getProductVersionHolder().isAlpha();
1:     }
1: 
0:     public static boolean isBeta() {
0:         return Configuration.getProductVersionHolder().isBeta();
1:     }
1: 
1:     // Not an external, just a helper method
1:     private static String getDriverNameAndVersion() {
1:         return Configuration.dncDriverName + " " +
0:                 Configuration.dncProductVersionHolder__.getVersionBuildString(true);
1:     }
1: 
1:     // -------------------------- configuration print stream ---------------------
1: 
0:     public static void writeDriverConfiguration(java.io.PrintWriter printWriter) {
1:         String header = "[derby] ";
1:         synchronized (printWriter) {
1:             printWriter.println(header + "BEGIN TRACE_DRIVER_CONFIGURATION");
1:             printWriter.println(header + "Driver: " + getDriverNameAndVersion());
1: 
1:             printWriter.print(header + "Compatible JRE versions: { ");
0:             for (int i = 0; i < Configuration.dncCompatibleJREVersions.length; i++) {
0:                 printWriter.print(Configuration.dncCompatibleJREVersions[i]);
0:                 if (i != Configuration.dncCompatibleJREVersions.length - 1) {
1:                     printWriter.print(", ");
1:                 }
1:             }
1:             printWriter.println(" }");
1: 
1:             printWriter.println(header + "Range checking enabled: " + Configuration.rangeCheckCrossConverters);
1:             printWriter.println(header + "Bug check level: 0x" + Integer.toHexString(Configuration.bugCheckLevel));
1:             printWriter.println(header + "Default fetch size: " + Configuration.defaultFetchSize);
1:             printWriter.println(header + "Default isolation: " + Configuration.defaultIsolation);
1: 
0:             java.lang.SecurityManager security = java.lang.System.getSecurityManager();
1:             if (security == null) {
1:                 printWriter.println(header + "No security manager detected.");
1:             } else {
1:                 printWriter.println(header + "Security manager detected.");
1:             }
1: 
0:             detectLocalHost(java.lang.System.getSecurityManager(), printWriter);
1: 
1:             printSystemProperty(security, "JDBC 1 system property jdbc.drivers = ", "jdbc.drivers", printWriter);
1: 
1:             printSystemProperty(security, "Java Runtime Environment version ", "java.version", printWriter);
1:             printSystemProperty(security, "Java Runtime Environment vendor = ", "java.vendor", printWriter);
1:             printSystemProperty(security, "Java vendor URL = ", "java.vendor.url", printWriter);
1:             printSystemProperty(security, "Java installation directory = ", "java.home", printWriter);
1:             printSystemProperty(security, "Java Virtual Machine specification version = ", "java.vm.specification.version", printWriter);
1:             printSystemProperty(security, "Java Virtual Machine specification vendor = ", "java.vm.specification.vendor", printWriter);
1:             printSystemProperty(security, "Java Virtual Machine specification name = ", "java.vm.specification.name", printWriter);
1:             printSystemProperty(security, "Java Virtual Machine implementation version = ", "java.vm.version", printWriter);
1:             printSystemProperty(security, "Java Virtual Machine implementation vendor = ", "java.vm.vendor", printWriter);
1:             printSystemProperty(security, "Java Virtual Machine implementation name = ", "java.vm.name", printWriter);
1:             printSystemProperty(security, "Java Runtime Environment specification version = ", "java.specification.version", printWriter);
1:             printSystemProperty(security, "Java Runtime Environment specification vendor = ", "java.specification.vendor", printWriter);
1:             printSystemProperty(security, "Java Runtime Environment specification name = ", "java.specification.name", printWriter);
1:             printSystemProperty(security, "Java class format version number = ", "java.class.version", printWriter);
1:             printSystemProperty(security, "Java class path = ", "java.class.path", printWriter);
1:             printSystemProperty(security, "Java native library path = ", "java.library.path", printWriter);
1:             printSystemProperty(security, "Path of extension directory or directories = ", "java.ext.dirs", printWriter);
1:             printSystemProperty(security, "Operating system name = ", "os.name", printWriter);
1:             printSystemProperty(security, "Operating system architecture = ", "os.arch", printWriter);
1:             printSystemProperty(security, "Operating system version = ", "os.version", printWriter);
1:             printSystemProperty(security, "File separator (\"/\" on UNIX) = ", "file.separator", printWriter);
1:             printSystemProperty(security, "Path separator (\":\" on UNIX) = ", "path.separator", printWriter);
1:             printSystemProperty(security, "User's account name = ", "user.name", printWriter);
1:             printSystemProperty(security, "User's home directory = ", "user.home", printWriter);
1:             printSystemProperty(security, "User's current working directory = ", "user.dir", printWriter);
1:             printWriter.println(header + "END TRACE_DRIVER_CONFIGURATION");
1:             printWriter.flush();
1:         }
1:     }
1: 
0:     private static void printSystemProperty(java.lang.SecurityManager security,
1:                                             String prefix,
1:                                             String property,
0:                                             java.io.PrintWriter printWriter) {
1:         String header = "[derby] ";
1:         synchronized (printWriter) {
1:             try {
1:                 if (security != null) {
1:                     security.checkPropertyAccess(property);
1:                 }
1:                 String result = System.getProperty(property);
1:                 printWriter.println(header + prefix + result);
1:                 printWriter.flush();
1:             } catch (SecurityException e) {
0:                 printWriter.println(header + "Security manager does not permit access to system property " + property);
1:                 printWriter.flush();
1:             }
1:         }
1:     }
1: 
1:     // printWriter synchronized by caller
0:     private static void detectLocalHost(java.lang.SecurityManager security, java.io.PrintWriter printWriter) {
1:         String header = "[derby] ";
1:         // getLocalHost() will hang the HotJava 1.0 browser with a high security manager.
1:         if (security == null) {
1:             try {
1:                 printWriter.print(header + "Detected local client host: ");
0:                 printWriter.println(java.net.InetAddress.getLocalHost().toString());
1:                 printWriter.flush();
0:             } catch (java.net.UnknownHostException e) {
0:                 printWriter.print(header + "Detected an improper TCP/IP client configuration.");
0:                 printWriter.print(header + "Unable to determine the IP address of your local host: ");
0:                 printWriter.print(e.getMessage());
0:                 printWriter.println(header + "Make sure your client machine has a properly configured IP address.");
1:                 printWriter.flush();
1:             }
1:         }
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.Version
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
0: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1: 
0: public abstract class Version
0: {
0:   // Same as java.sql.DatabaseMetaData.getDriverName()
0:   public static String getDriverName ()
0:   { return Configuration.dncDriverName; }
1: 
0:   // for DatabaseMetaData.getDriverVersion()
0:   public static String getDriverVersion()
0:   {
0: 	return Configuration.dncProductVersionHolder__.getVersionBuildString(false);
0:   }
1: 
1: 
0:   // Same as java.sql.Driver.getMajorVersion(), getMinorVersion()
0:   public static int getMajorVersion()
0:   {
0: 	return Configuration.getProductVersionHolder().getMajorVersion();
0:   }
1: 
0:   public static int getMinorVersion()
0:   {
0: 	return Configuration.getProductVersionHolder().getMinorVersion();
0:   }
1: 
0:   public static int getBuildNumber()
0:   {
0: 	return Configuration.getProductVersionHolder().getBuildNumberAsInt();
0:   }
1: 
0:   public static int getProtocolMaintVersion()
0:   {
0: 	return Configuration.getProductVersionHolder().getDrdaMaintVersion();
0:   }
1:   
0:   public static boolean isAlpha()
0:   {
0: 	return Configuration.getProductVersionHolder().isAlpha();
0:   }
1: 
0:   public static boolean isBeta()
0:   {
0: 	return Configuration.getProductVersionHolder().isBeta();
0:   }
1: 
0:   // Not an external, just a helper method
0:   private  static String getDriverNameAndVersion ()
0:   {
0: 	  return Configuration.dncDriverName + " " + 
0: 		  Configuration.dncProductVersionHolder__.getVersionBuildString(true);
0:   }
1: 
0:   // -------------------------- configuration print stream ---------------------
1: 
0:   public static void writeDriverConfiguration (java.io.PrintWriter printWriter)
0:   {
0:     String header = "[derby] ";
0:     synchronized (printWriter) {
0:       printWriter.println (header + "BEGIN TRACE_DRIVER_CONFIGURATION");
0:       printWriter.println (header + "Driver: " + getDriverNameAndVersion ());
1: 
0:       printWriter.print (header + "Compatible JRE versions: { ");
0:       for (int i=0; i < Configuration.dncCompatibleJREVersions.length; i++) {
0:         printWriter.print (Configuration.dncCompatibleJREVersions[i]);
0:         if (i != Configuration.dncCompatibleJREVersions.length - 1)
0:           printWriter.print (", ");
0:       }
0:       printWriter.println (" }");
1: 
0:       printWriter.println (header + "Range checking enabled: " + Configuration.rangeCheckCrossConverters);
0:       printWriter.println (header + "Bug check level: 0x" + Integer.toHexString (Configuration.bugCheckLevel));
0:       printWriter.println (header + "Default fetch size: " + Configuration.defaultFetchSize);
0:       printWriter.println (header + "Default isolation: " + Configuration.defaultIsolation);
1: 
0:       java.lang.SecurityManager security = java.lang.System.getSecurityManager ();
0:       if (security == null)
0:         printWriter.println (header + "No security manager detected.");
0:       else
0:         printWriter.println (header + "Security manager detected.");
1: 
0:       detectLocalHost (java.lang.System.getSecurityManager (), printWriter);
1: 
0:       printSystemProperty (security, "JDBC 1 system property jdbc.drivers = ", "jdbc.drivers", printWriter);
1: 
0:       printSystemProperty (security, "Java Runtime Environment version ", "java.version", printWriter);
0:       printSystemProperty (security, "Java Runtime Environment vendor = ", "java.vendor", printWriter);
0:       printSystemProperty (security, "Java vendor URL = ", "java.vendor.url", printWriter);
0:       printSystemProperty (security, "Java installation directory = ", "java.home", printWriter);
0:       printSystemProperty (security, "Java Virtual Machine specification version = ", "java.vm.specification.version", printWriter);
0:       printSystemProperty (security, "Java Virtual Machine specification vendor = ", "java.vm.specification.vendor", printWriter);
0:       printSystemProperty (security, "Java Virtual Machine specification name = ", "java.vm.specification.name", printWriter);
0:       printSystemProperty (security, "Java Virtual Machine implementation version = ", "java.vm.version", printWriter);
0:       printSystemProperty (security, "Java Virtual Machine implementation vendor = ", "java.vm.vendor", printWriter);
0:       printSystemProperty (security, "Java Virtual Machine implementation name = ", "java.vm.name", printWriter);
0:       printSystemProperty (security, "Java Runtime Environment specification version = ", "java.specification.version", printWriter);
0:       printSystemProperty (security, "Java Runtime Environment specification vendor = ", "java.specification.vendor", printWriter);
0:       printSystemProperty (security, "Java Runtime Environment specification name = ", "java.specification.name", printWriter);
0:       printSystemProperty (security, "Java class format version number = ", "java.class.version", printWriter);
0:       printSystemProperty (security, "Java class path = ", "java.class.path", printWriter);
0:       printSystemProperty (security, "Java native library path = ", "java.library.path", printWriter);
0:       printSystemProperty (security, "Path of extension directory or directories = ", "java.ext.dirs", printWriter);
0:       printSystemProperty (security, "Operating system name = ", "os.name", printWriter);
0:       printSystemProperty (security, "Operating system architecture = ", "os.arch", printWriter);
0:       printSystemProperty (security, "Operating system version = ", "os.version", printWriter);
0:       printSystemProperty (security, "File separator (\"/\" on UNIX) = ", "file.separator", printWriter);
0:       printSystemProperty (security, "Path separator (\":\" on UNIX) = ", "path.separator", printWriter);
0:       printSystemProperty (security, "User's account name = ", "user.name", printWriter);
0:       printSystemProperty (security, "User's home directory = ", "user.home", printWriter);
0:       printSystemProperty (security, "User's current working directory = ", "user.dir", printWriter);
0:       printWriter.println (header + "END TRACE_DRIVER_CONFIGURATION");
0:       printWriter.flush();
0:     }
0:   }
1: 
0:   private static void printSystemProperty (java.lang.SecurityManager security,
0:                                     String prefix,
0:                                     String property,
0:                                     java.io.PrintWriter printWriter)
0:   {
0:     String header = "[derby] ";
0:     synchronized (printWriter) {
0:       try {
0:         if (security != null)
0:           security.checkPropertyAccess (property);
0:         String result = System.getProperty (property);
0:         printWriter.println (header + prefix + result);
0:         printWriter.flush();
0:       }
0:       catch (SecurityException e) {
0:         printWriter.println (header + "Security manager does not permit access to system property " + property);
0:         printWriter.flush();
0:       }
0:     }
0:   }
1: 
0:   // printWriter synchronized by caller
0:   private static void detectLocalHost (java.lang.SecurityManager security, java.io.PrintWriter printWriter)
0:   {
0:     String header = "[derby] ";
0:     // getLocalHost() will hang the HotJava 1.0 browser with a high security manager.
0:     if (security == null) {
0:       try {
0:         printWriter.print (header + "Detected local client host: ");
0:         printWriter.println (java.net.InetAddress.getLocalHost().toString ());
0:         printWriter.flush();
0:       }
0:       catch (java.net.UnknownHostException e) {
0:         printWriter.print (header + "Detected an improper TCP/IP client configuration.");
0:         printWriter.print (header + "Unable to determine the IP address of your local host: ");
0:         printWriter.print (e.getMessage ());
0:         printWriter.println (header + "Make sure your client machine has a properly configured IP address.");
0:         printWriter.flush();
0:       }
0:     }
0:   }
0: }
============================================================================