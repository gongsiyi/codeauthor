1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.RowCountable
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
2:eac0369: /**
1:47eac7d:  * Allows clients to read and write row count estimates for conglomerates.
1:47eac7d:  *
1:47eac7d:  * @see ScanController
1:47eac7d:  * @see StoreCostController
1:47eac7d:  */
1:eac0369: public interface RowCountable
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Get the total estimated number of rows in the container.
1:eac0369:      * <p>
1:eac0369:      * The number is a rough estimate and may be grossly off.  In general
1:eac0369:      * the server will cache the row count and then occasionally write
1:eac0369:      * the count unlogged to a backing store.  If the system happens to 
1:eac0369:      * shutdown before the store gets a chance to update the row count it
1:eac0369:      * may wander from reality.
1:eac0369:      * <p>
1:eac0369:      * For btree conglomerates this call will return the count of both
1:eac0369:      * user rows and internal implementaation rows.  The "BTREE" implementation
1:eac0369:      * generates 1 internal implementation row for each page in the btree, and 
1:eac0369:      * it generates 1 internal implementation row for each branch row.  For
1:eac0369:      * this reason it is recommended that clients if possible use the count
1:eac0369:      * of rows in the heap table to estimate the number of rows in the index
1:eac0369:      * rather than use the index estimated row count.
2:eac0369:      *
1:47eac7d:      * @return The total estimated number of rows in the conglomerate.
1:eac0369:      *
1:47eac7d:      * @throws  StandardException  Standard exception policy.
1:47eac7d:      */
1:eac0369:     public long getEstimatedRowCount()
1:47eac7d:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Set the total estimated number of rows in the container.
1:eac0369:      * <p>
1:eac0369:      * Often, after a scan, the client of RawStore has a much better estimate
1:47eac7d:      * of the number of rows in the container than what store has. Currently,
1:47eac7d:      * a scan, followed by an update of the estimate, will be performed when:
1:47eac7d:      * <ul>
1:47eac7d:      *      <li>running SYSCS_UTIL.SYSCS_UPDATE_STATISTICS</li>
1:47eac7d:      *      <li>the automatic update of index statistics kicks in
1:47eac7d:      *          (see {@code IndexStatisticsDaemon})</li>
1:47eac7d:      *      <li>performing table scans</li>
1:47eac7d:      *      <li>creating an index on a populated table</li>
1:47eac7d:      * </ul>
1:47eac7d:      * This interface allows the client to set the estimated row count for the
1:47eac7d:      * container, and store will use that number for all future references.
1:eac0369:      * <p>
1:eac0369:      * This routine can also be used to set the estimated row count in the
1:eac0369:      * index to the number of rows in the base table, another workaround for
1:eac0369:      * the problem that index estimated row count includes non-user rows.
1:eac0369:      *
1:eac0369:      * @param count the estimated number of rows in the container.
1:eac0369:      *
1:47eac7d:      * @throws  StandardException  Standard exception policy.
1:47eac7d:      */
1:eac0369:     public void setEstimatedRowCount(long count)
1:47eac7d:         throws StandardException;
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:47eac7d
/////////////////////////////////////////////////////////////////////////
1:  * Allows clients to read and write row count estimates for conglomerates.
1:  *
1:  * @see ScanController
1:  * @see StoreCostController
1:  */
/////////////////////////////////////////////////////////////////////////
1:      * @return The total estimated number of rows in the conglomerate.
1:      * @throws  StandardException  Standard exception policy.
1:      */
1:         throws StandardException;
1:      * of the number of rows in the container than what store has. Currently,
1:      * a scan, followed by an update of the estimate, will be performed when:
1:      * <ul>
1:      *      <li>running SYSCS_UTIL.SYSCS_UPDATE_STATISTICS</li>
1:      *      <li>the automatic update of index statistics kicks in
1:      *          (see {@code IndexStatisticsDaemon})</li>
1:      *      <li>performing table scans</li>
1:      *      <li>creating an index on a populated table</li>
1:      * </ul>
1:      * This interface allows the client to set the estimated row count for the
1:      * container, and store will use that number for all future references.
/////////////////////////////////////////////////////////////////////////
1:      * @throws  StandardException  Standard exception policy.
1:      */
1:         throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.RowCountable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: /**
1: 
0: RowCountable provides the interfaces to read and write row counts in
0: tables.
0: <p>
0: @see ScanController
0: @see StoreCostController
1: 
0: **/
1: 
1: public interface RowCountable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**
1:      * Get the total estimated number of rows in the container.
1:      * <p>
1:      * The number is a rough estimate and may be grossly off.  In general
1:      * the server will cache the row count and then occasionally write
1:      * the count unlogged to a backing store.  If the system happens to 
1:      * shutdown before the store gets a chance to update the row count it
1:      * may wander from reality.
1:      * <p>
1:      * For btree conglomerates this call will return the count of both
1:      * user rows and internal implementaation rows.  The "BTREE" implementation
1:      * generates 1 internal implementation row for each page in the btree, and 
1:      * it generates 1 internal implementation row for each branch row.  For
1:      * this reason it is recommended that clients if possible use the count
1:      * of rows in the heap table to estimate the number of rows in the index
1:      * rather than use the index estimated row count.
1:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
1:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
1:     public long getEstimatedRowCount()
0: 		throws StandardException;
1: 
1:     /**
1:      * Set the total estimated number of rows in the container.
1:      * <p>
1:      * Often, after a scan, the client of RawStore has a much better estimate
0:      * of the number of rows in the container than what store has.  For 
0:      * instance if we implement some sort of update statistics command, or
0:      * just after a create index a complete scan will have been done of the
0:      * table.  In this case this interface allows the client to set the
0:      * estimated row count for the container, and store will use that number
0:      * for all future references.
1:      * <p>
1:      * This routine can also be used to set the estimated row count in the
1:      * index to the number of rows in the base table, another workaround for
1:      * the problem that index estimated row count includes non-user rows.
1:      *
1:      * @param count the estimated number of rows in the container.
1:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
1:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
1:     public void setEstimatedRowCount(long count)
0: 		throws StandardException;
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: /**
0: 
0: RowCountable provides the interfaces to read and write row counts in
0: tables.
0: <p>
0: @see ScanController
0: @see StoreCostController
0: 
0: **/
0: 
0: public interface RowCountable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**
0:      * Get the total estimated number of rows in the container.
0:      * <p>
0:      * The number is a rough estimate and may be grossly off.  In general
0:      * the server will cache the row count and then occasionally write
0:      * the count unlogged to a backing store.  If the system happens to 
0:      * shutdown before the store gets a chance to update the row count it
0:      * may wander from reality.
0:      * <p>
0:      * For btree conglomerates this call will return the count of both
0:      * user rows and internal implementaation rows.  The "BTREE" implementation
0:      * generates 1 internal implementation row for each page in the btree, and 
0:      * it generates 1 internal implementation row for each branch row.  For
0:      * this reason it is recommended that clients if possible use the count
0:      * of rows in the heap table to estimate the number of rows in the index
0:      * rather than use the index estimated row count.
0:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public long getEstimatedRowCount()
0: 		throws StandardException;
0: 
0:     /**
0:      * Set the total estimated number of rows in the container.
0:      * <p>
0:      * Often, after a scan, the client of RawStore has a much better estimate
0:      * of the number of rows in the container than what store has.  For 
0:      * instance if we implement some sort of update statistics command, or
0:      * just after a create index a complete scan will have been done of the
0:      * table.  In this case this interface allows the client to set the
0:      * estimated row count for the container, and store will use that number
0:      * for all future references.
0:      * <p>
0:      * This routine can also be used to set the estimated row count in the
0:      * index to the number of rows in the base table, another workaround for
0:      * the problem that index estimated row count includes non-user rows.
0:      *
0:      * @param count the estimated number of rows in the container.
0:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void setEstimatedRowCount(long count)
0: 		throws StandardException;
0: 
0: }
============================================================================