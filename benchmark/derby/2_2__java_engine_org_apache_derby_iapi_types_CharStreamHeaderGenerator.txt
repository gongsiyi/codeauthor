1:dfdebd5: /*
1:dfdebd5: 
1:dfdebd5:    Derby - Class org.apache.derby.iapi.types.CharStreamHeaderGenerator
1:dfdebd5: 
1:dfdebd5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dfdebd5:    contributor license agreements.  See the NOTICE file distributed with
1:dfdebd5:    this work for additional information regarding copyright ownership.
1:dfdebd5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dfdebd5:    (the "License"); you may not use this file except in compliance with
1:dfdebd5:    the License.  You may obtain a copy of the License at
1:dfdebd5: 
1:dfdebd5:       http://www.apache.org/licenses/LICENSE-2.0
1:dfdebd5: 
1:dfdebd5:    Unless required by applicable law or agreed to in writing, software
1:dfdebd5:    distributed under the License is distributed on an "AS IS" BASIS,
1:dfdebd5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dfdebd5:    See the License for the specific language governing permissions and
1:dfdebd5:    limitations under the License.
1:dfdebd5: 
1:dfdebd5: */
1:dfdebd5: package org.apache.derby.iapi.types;
1:dfdebd5: 
1:dfdebd5: import java.io.IOException;
1:dfdebd5: import java.io.ObjectOutput;
1:dfdebd5: 
1:dfdebd5: /**
1:dfdebd5:  * Generates stream headers for non-Clob string data types.
1:dfdebd5:  * <p>
1:dfdebd5:  * The stream header encodes the byte length of the stream. Since two bytes
1:dfdebd5:  * are used for the header, the maximum encodable length is 65535 bytes. There
1:dfdebd5:  * are three special cases, all handled by encoding zero into the header and
1:dfdebd5:  * possibly appending an EOF-marker to the stream:
1:dfdebd5:  * <ul> <li>Unknown length - with EOF marker</li>
1:dfdebd5:  *      <li>Length longer than maximum encodable length - with EOF marker</li>
1:dfdebd5:  *      <li>Length of zero - no EOF marker</li>
1:dfdebd5:  * </ul>
1:dfdebd5:  * The length is encoded like this:
1:dfdebd5:  * <pre>
1:dbed020:             out.writeByte((byte)(byteLength &gt;&gt;&gt; 8));
1:dbed020:             out.writeByte((byte)(byteLength &gt;&gt;&gt; 0));
1:dfdebd5:  * </pre>
1:dfdebd5:  */
1:dfdebd5: //@Immutable
1:dfdebd5: public final class CharStreamHeaderGenerator
1:dfdebd5:     implements StreamHeaderGenerator {
1:dfdebd5: 
1:9e74139:     /** The Derby-specific end-of-stream marker. */
1:9e74139:     private static  final   byte[] DERBY_EOF_MARKER = new byte[] {(byte)0xE0, 0x00, 0x00};
1:9e74139: 
1:dfdebd5:     /** The maximum length that can be encoded by the header. */
1:dfdebd5:     private static final int MAX_ENCODABLE_LENGTH = 65535;
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * A byte count is expected.
1:dfdebd5:      *
1:dfdebd5:      * @return {@code false}.
1:dfdebd5:      */
1:dfdebd5:     public boolean expectsCharCount() {
1:dfdebd5:         return false;
1:dfdebd5:     }
1:dfdebd5: 
1:9e74139:     /** Write the EOF marker to a byte array and return the EOF marker's length */
1:9e74139:     public  static  int  writeEOFMarker( byte[] buffer, int offset )
1:9e74139:     {
1:9e74139:         System.arraycopy( DERBY_EOF_MARKER, 0, buffer, offset, DERBY_EOF_MARKER.length );
1:9e74139:         return DERBY_EOF_MARKER.length;
1:9e74139:     }
1:9e74139: 
1:9e74139:     /** Write the EOF marker to an Object stream  and return the EOF marker's length */
1:9e74139:     public  static  int  writeEOFMarker( ObjectOutput out ) throws IOException
1:9e74139:     {
1:9e74139:         out.write( DERBY_EOF_MARKER );
1:9e74139:         return DERBY_EOF_MARKER.length;
1:9e74139:     }
1:9e74139: 
1:dfdebd5:     /**
1:dfdebd5:      * Generates the header for the specified length and writes it into the
1:dfdebd5:      * provided buffer, starting at the specified offset.
1:dfdebd5:      *
1:dfdebd5:      * @param buffer the buffer to write into
1:dfdebd5:      * @param offset starting offset in the buffer
1:dfdebd5:      * @param byteLength the length to encode in the header
1:dfdebd5:      * @return The number of bytes written into the buffer.
1:dfdebd5:      */
1:dfdebd5:     public int generateInto(byte[] buffer, int offset, long byteLength) {
1:dfdebd5:         if (byteLength > 0 && byteLength <= MAX_ENCODABLE_LENGTH) {
1:dfdebd5:             buffer[offset] = (byte)(byteLength >>> 8);
1:dfdebd5:             buffer[offset +1] = (byte)(byteLength >>> 0);
1:dfdebd5:         } else {
1:dfdebd5:             // Byte length is zero, unknown or too large to encode.
1:dfdebd5:             buffer[offset] = 0x00;
1:dfdebd5:             buffer[offset +1] = 0x00;
1:dfdebd5:         }
1:dfdebd5:         return 2;
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Generates the header for the specified length.
1:dfdebd5:      *
1:dfdebd5:      * @param out the destination stream
1:dfdebd5:      * @param byteLength the byte length to encode in the header
1:dfdebd5:      * @return The number of bytes written to the destination stream.
1:dfdebd5:      * @throws IOException if writing to the destination stream fails
1:dfdebd5:      */
1:dfdebd5:     public int generateInto(ObjectOutput out, long byteLength)
1:dfdebd5:             throws IOException {
1:dfdebd5:         if (byteLength > 0 && byteLength <= MAX_ENCODABLE_LENGTH) {
2:dfdebd5:             out.writeByte((byte)(byteLength >>> 8));
2:dfdebd5:             out.writeByte((byte)(byteLength >>> 0));
1:dfdebd5:         } else {
1:dfdebd5:             // Byte length is zero, unknown or too large to encode.
1:dfdebd5:             out.writeByte(0x00);
1:dfdebd5:             out.writeByte(0x00);
1:dfdebd5:         }
1:dfdebd5:         return 2;
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Writes a Derby-specific end-of-stream marker to the buffer for a stream
1:dfdebd5:      * of the specified byte length, if required.
1:dfdebd5:      *
1:dfdebd5:      * @param buffer the buffer to write into
1:dfdebd5:      * @param offset starting offset in the buffer
1:dfdebd5:      * @param byteLength the byte length of the stream
1:dfdebd5:      * @return Number of bytes written (zero or more).
1:dfdebd5:      */
1:dfdebd5:     public int writeEOF(byte[] buffer, int offset, long byteLength) {
1:dfdebd5:         if (byteLength < 0 || byteLength > MAX_ENCODABLE_LENGTH) {
1:dfdebd5:             System.arraycopy(DERBY_EOF_MARKER, 0,
1:dfdebd5:                              buffer, offset, DERBY_EOF_MARKER.length);
1:dfdebd5:             return DERBY_EOF_MARKER.length;
1:dfdebd5:         } else {
1:dfdebd5:             return 0;
1:dfdebd5:         }
1:dfdebd5:     }
1:85de1e4: 
1:85de1e4:     /**
1:dfdebd5:      * Writes a Derby-specific end-of-stream marker to the destination stream
1:dfdebd5:      * for the specified byte length, if required.
1:dfdebd5:      *
1:dfdebd5:      * @param out the destination stream
1:dfdebd5:      * @param byteLength the length of the stream
1:dfdebd5:      * @return Number of bytes written (zero or more).
1:dfdebd5:      */
1:dfdebd5:     public int writeEOF(ObjectOutput out, long byteLength)
1:dfdebd5:             throws IOException {
1:dfdebd5:         if (byteLength < 0 || byteLength > MAX_ENCODABLE_LENGTH) {
1:dfdebd5:             out.write(DERBY_EOF_MARKER);
1:dfdebd5:             return DERBY_EOF_MARKER.length;
1:dfdebd5:         } else {
1:dfdebd5:             return 0;
1:dfdebd5:         }
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:85de1e4:      * Returns the maximum header length.
1:85de1e4:      *
1:85de1e4:      * @return Maximum header length in bytes.
1:85de1e4:      */
1:85de1e4:     public int getMaxHeaderLength() {
1:85de1e4:         return 2;
1:85de1e4:     }
1:dfdebd5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:             out.writeByte((byte)(byteLength &gt;&gt;&gt; 8));
1:             out.writeByte((byte)(byteLength &gt;&gt;&gt; 0));
commit:9e74139
/////////////////////////////////////////////////////////////////////////
1:     /** The Derby-specific end-of-stream marker. */
1:     private static  final   byte[] DERBY_EOF_MARKER = new byte[] {(byte)0xE0, 0x00, 0x00};
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** Write the EOF marker to a byte array and return the EOF marker's length */
1:     public  static  int  writeEOFMarker( byte[] buffer, int offset )
1:     {
1:         System.arraycopy( DERBY_EOF_MARKER, 0, buffer, offset, DERBY_EOF_MARKER.length );
1:         return DERBY_EOF_MARKER.length;
1:     }
1: 
1:     /** Write the EOF marker to an Object stream  and return the EOF marker's length */
1:     public  static  int  writeEOFMarker( ObjectOutput out ) throws IOException
1:     {
1:         out.write( DERBY_EOF_MARKER );
1:         return DERBY_EOF_MARKER.length;
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:85de1e4
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the maximum header length.
1:      *
1:      * @return Maximum header length in bytes.
1:      */
1:     public int getMaxHeaderLength() {
1:         return 2;
1:     }
commit:dfdebd5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.CharStreamHeaderGenerator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.iapi.types;
1: 
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * Generates stream headers for non-Clob string data types.
1:  * <p>
1:  * The stream header encodes the byte length of the stream. Since two bytes
1:  * are used for the header, the maximum encodable length is 65535 bytes. There
1:  * are three special cases, all handled by encoding zero into the header and
1:  * possibly appending an EOF-marker to the stream:
1:  * <ul> <li>Unknown length - with EOF marker</li>
1:  *      <li>Length longer than maximum encodable length - with EOF marker</li>
1:  *      <li>Length of zero - no EOF marker</li>
1:  * </ul>
1:  * The length is encoded like this:
1:  * <pre>
1:             out.writeByte((byte)(byteLength >>> 8));
1:             out.writeByte((byte)(byteLength >>> 0));
1:  * </pre>
1:  */
1: //@Immutable
1: public final class CharStreamHeaderGenerator
1:     implements StreamHeaderGenerator {
1: 
1:     /** The maximum length that can be encoded by the header. */
1:     private static final int MAX_ENCODABLE_LENGTH = 65535;
1: 
1:     /**
1:      * A byte count is expected.
1:      *
1:      * @return {@code false}.
1:      */
1:     public boolean expectsCharCount() {
1:         return false;
1:     }
1: 
1:     /**
1:      * Generates the header for the specified length and writes it into the
1:      * provided buffer, starting at the specified offset.
1:      *
1:      * @param buffer the buffer to write into
1:      * @param offset starting offset in the buffer
1:      * @param byteLength the length to encode in the header
1:      * @return The number of bytes written into the buffer.
1:      */
1:     public int generateInto(byte[] buffer, int offset, long byteLength) {
1:         if (byteLength > 0 && byteLength <= MAX_ENCODABLE_LENGTH) {
1:             buffer[offset] = (byte)(byteLength >>> 8);
1:             buffer[offset +1] = (byte)(byteLength >>> 0);
1:         } else {
1:             // Byte length is zero, unknown or too large to encode.
1:             buffer[offset] = 0x00;
1:             buffer[offset +1] = 0x00;
1:         }
1:         return 2;
1:     }
1: 
1:     /**
1:      * Generates the header for the specified length.
1:      *
1:      * @param out the destination stream
1:      * @param byteLength the byte length to encode in the header
1:      * @return The number of bytes written to the destination stream.
1:      * @throws IOException if writing to the destination stream fails
1:      */
1:     public int generateInto(ObjectOutput out, long byteLength)
1:             throws IOException {
1:         if (byteLength > 0 && byteLength <= MAX_ENCODABLE_LENGTH) {
1:             out.writeByte((byte)(byteLength >>> 8));
1:             out.writeByte((byte)(byteLength >>> 0));
1:         } else {
1:             // Byte length is zero, unknown or too large to encode.
1:             out.writeByte(0x00);
1:             out.writeByte(0x00);
1:         }
1:         return 2;
1:     }
1: 
1:     /**
1:      * Writes a Derby-specific end-of-stream marker to the buffer for a stream
1:      * of the specified byte length, if required.
1:      *
1:      * @param buffer the buffer to write into
1:      * @param offset starting offset in the buffer
1:      * @param byteLength the byte length of the stream
1:      * @return Number of bytes written (zero or more).
1:      */
1:     public int writeEOF(byte[] buffer, int offset, long byteLength) {
1:         if (byteLength < 0 || byteLength > MAX_ENCODABLE_LENGTH) {
1:             System.arraycopy(DERBY_EOF_MARKER, 0,
1:                              buffer, offset, DERBY_EOF_MARKER.length);
1:             return DERBY_EOF_MARKER.length;
1:         } else {
1:             return 0;
1:         }
1:     }
1: 
1:     /**
1:      * Writes a Derby-specific end-of-stream marker to the destination stream
1:      * for the specified byte length, if required.
1:      *
1:      * @param out the destination stream
1:      * @param byteLength the length of the stream
1:      * @return Number of bytes written (zero or more).
1:      */
1:     public int writeEOF(ObjectOutput out, long byteLength)
1:             throws IOException {
1:         if (byteLength < 0 || byteLength > MAX_ENCODABLE_LENGTH) {
1:             out.write(DERBY_EOF_MARKER);
1:             return DERBY_EOF_MARKER.length;
1:         } else {
1:             return 0;
1:         }
1:     }
1: }
============================================================================