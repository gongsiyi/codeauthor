1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.AutoincrementCounter
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import	org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:  * AutoincrementCounter is a not so general counter for the specific purposes
1:eac0369:  * of autoincrement columns. It can be thought of as an in-memory autoincrement
1:eac0369:  * column.
1:eac0369:  * The counting or incrementing is done in fashion identical to the
1:eac0369:  * AUTOINCREMENTVALUE in SYSCOLUMNS.
1:eac0369:  * <p>
1:eac0369:  * To create a counter, the user must call the constructor with a start value,
1:eac0369:  * increment and optionally a final value. In addition the caller must specify
1:eac0369:  * the schema name, table name and column name uniquely identifying the
1:eac0369:  * counter. 
1:eac0369:  * <p>
1:eac0369:  * When a counter is created it is in an invalid state-- to initialize it, the
1:eac0369:  * user must call either  <i>update</i> or <i>reset(false)</i>. The value of a
1:eac0369:  * counter can be changed by either calling reset or update. 
1:eac0369: 
1:eac0369:  */
1:eac0369: public class AutoincrementCounter 
1:eac0369: {
1:eac0369: 
1:eac0369: 	private Long start;
1:eac0369: 	private long increment;
1:eac0369: 	private String identity;
1:eac0369: 	private long finalValue;
1:eac0369: 	private String schemaName;
1:eac0369: 	private String tableName;
1:eac0369: 	private String columnName;
1:eac0369: 	// maintains state.
1:eac0369: 	private long counter;
1:eac0369: 	private int columnPosition;
1:eac0369: 	private boolean initialized = false;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * constructor 
1:eac0369: 	 * @param 	start		The start value of the counter; is a java object as
1:eac0369: 	 * 			it can also be null.
1:eac0369: 	 * @param   increment	how much to increment the counter by.
1:eac0369: 	 * @param	finalValue	the finalvalue of the counter. used by reset
1:eac0369: 	 * @param 	s
1:eac0369: 	 * @param   t
1:eac0369: 	 * @param	c
1:eac0369: 	 */
1:eac0369: 	public AutoincrementCounter(Long start, long increment, long finalValue,
1:eac0369: 								String s, String t, String c, int position)
1:eac0369: 	{
1:eac0369: 		this.increment = increment;
1:eac0369: 		this.start = start;
1:eac0369: 		this.initialized = false;
1:eac0369: 		this.identity = makeIdentity(s,t,c);
1:eac0369: 		this.finalValue = finalValue;
1:eac0369: 		this.schemaName = s;
1:eac0369: 		this.tableName = t;
1:eac0369: 		this.columnName = c;
1:eac0369: 		this.columnPosition = position;
1:eac0369: 		//		System.out.println("aic created with " + this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * make a unique key for the counter.
1:eac0369: 	 */
1:eac0369: 	public static String makeIdentity(String s, String t, String c)
1:eac0369: 	{
1:eac0369: 		return s + "." + t + "." + c;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * make a unique key for the counter.
1:eac0369: 	 */
1:eac0369: 	public static String makeIdentity(TableDescriptor td, ColumnDescriptor cd)
1:eac0369: 	{
1:eac0369: 		return td.getSchemaName() + "." + td.getName() + 
1:eac0369: 				"." + cd.getColumnName();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * reset to the counter to the beginning or the end.
1:eac0369: 	 * 
1:eac0369: 	 * @param 	begin	if TRUE reset to beginning and mark it uninitialized.
1:eac0369: 	 */
1:eac0369: 	public void reset(boolean begin)
1:eac0369: 	{
1:eac0369: 		if (begin == true)
1:eac0369: 			initialized = false;
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			counter = finalValue;
1:eac0369: 			initialized = true;
1:eac0369: 		}
1:eac0369: 		//		System.out.println("counter reset to " + this);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * update the counter.
1:eac0369: 	 * 
1:eac0369: 	 * @param 	t		update the counter to this value.
1:eac0369: 	 */
1:eac0369: 	public long update(long t)
1:eac0369: 	{
1:eac0369: 		counter = t;
1:eac0369: 		//		System.out.println("counter updated to " + this);
1:eac0369: 		initialized = true;
1:eac0369: 		return counter;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * update the counter to its next value.
1:eac0369: 	 * 
1:eac0369: 	 * @exception	StandardException	if the counter has not yet been
1:eac0369: 	 * initialized and the Start value is NULL.
1:eac0369: 	 */
1:eac0369: 	public long update() throws StandardException
1:eac0369: 	{
1:eac0369: 		long counterVal;
1:eac0369: 
1:eac0369: 		if (initialized == false)
1:eac0369: 		{
1:eac0369: 			// The first time around, counter simply gets the start
1:eac0369: 			// value. 
1:eac0369: 			initialized = true;
1:eac0369: 			
1:eac0369: 			if (start == null)
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(
1:eac0369: 											SQLState.LANG_AI_COUNTER_ERROR);
1:eac0369: 			}
1:eac0369: 			counter = start.longValue();			
1:eac0369: 		}	
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			counter = counter + increment;
1:eac0369: 		}
1:eac0369: 		//		System.out.println("counter updated to " + this);
1:eac0369: 		return counter;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * get the current value of the counter. An uninitialized counter means the
1:eac0369: 	 * current value is NULL.
1:eac0369: 	 */
1:eac0369: 	public Long getCurrentValue()
1:eac0369: 	{
1:eac0369: 		if (initialized == false)
1:eac0369: 			return null;
1:ce40a31: 		return counter;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * return the identity of the counter.
1:eac0369: 	 */
1:eac0369: 	public String getIdentity()
1:eac0369: 	{
1:eac0369: 		return identity;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * flush a counter to disk; i.e write the current value of the counter into
1:eac0369: 	 * the row in SYSCOLUMNS.
1:eac0369: 	 * 
1:eac0369: 	 * @param	tc			TransactionController to use
1:eac0369: 	 * @param	dd			DataDictionary to use.
1:eac0369: 	 * @param	tableUUID	I might have the table name but I need more
1:eac0369: 	 * information 
1:94f158a: 	 * @exception	StandardException standard Derby exception.
1:eac0369: 	 */
1:eac0369: 	public void flushToDisk(TransactionController tc, DataDictionary dd,
1:eac0369: 							UUID tableUUID)
1:eac0369: 	       throws StandardException
1:eac0369: 	{
1:eac0369: 		dd.setAutoincrementValue(tc, tableUUID, columnName, counter, true);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * get the column position in the table for which this counter has been
1:eac0369: 	 * created. 
1:eac0369: 	 * @return the position of the corresponding column in the table (1-based)
1:eac0369: 	 */
1:eac0369: 	public int getColumnPosition()
1:eac0369: 	{
1:eac0369: 		return columnPosition;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * get the start value
1:eac0369: 	 * @return the initial value of the counter
1:eac0369: 	 */
1:eac0369: 	public Long getStartValue()
1:eac0369: 	{
1:eac0369: 		return start;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return "counter: " + identity + " current: " + counter 
1:eac0369: 			+ " start: " + start + 
1:eac0369: 			" increment: " + increment + " final: " + finalValue;
1:eac0369: 	}	
1:eac0369: }	
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 		return counter;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception	StandardException standard Derby exception.
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.AutoincrementCounter
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import	org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: 
1: /**
1:  * AutoincrementCounter is a not so general counter for the specific purposes
1:  * of autoincrement columns. It can be thought of as an in-memory autoincrement
1:  * column.
1:  * The counting or incrementing is done in fashion identical to the
1:  * AUTOINCREMENTVALUE in SYSCOLUMNS.
1:  * <p>
1:  * To create a counter, the user must call the constructor with a start value,
1:  * increment and optionally a final value. In addition the caller must specify
1:  * the schema name, table name and column name uniquely identifying the
1:  * counter. 
1:  * <p>
1:  * When a counter is created it is in an invalid state-- to initialize it, the
1:  * user must call either  <i>update</i> or <i>reset(false)</i>. The value of a
1:  * counter can be changed by either calling reset or update. 
1: 
0:  * @author manish
1:  */
1: public class AutoincrementCounter 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	private Long start;
1: 	private long increment;
1: 	private String identity;
1: 	private long finalValue;
1: 	private String schemaName;
1: 	private String tableName;
1: 	private String columnName;
1: 	// maintains state.
1: 	private long counter;
1: 	private int columnPosition;
1: 	private boolean initialized = false;
1: 
1: 	/**
1: 	 * constructor 
1: 	 * @param 	start		The start value of the counter; is a java object as
1: 	 * 			it can also be null.
1: 	 * @param   increment	how much to increment the counter by.
1: 	 * @param	finalValue	the finalvalue of the counter. used by reset
1: 	 * @param 	s
1: 	 * @param   t
1: 	 * @param	c
1: 	 */
1: 	public AutoincrementCounter(Long start, long increment, long finalValue,
1: 								String s, String t, String c, int position)
1: 	{
1: 		this.increment = increment;
1: 		this.start = start;
1: 		this.initialized = false;
1: 		this.identity = makeIdentity(s,t,c);
1: 		this.finalValue = finalValue;
1: 		this.schemaName = s;
1: 		this.tableName = t;
1: 		this.columnName = c;
1: 		this.columnPosition = position;
1: 		//		System.out.println("aic created with " + this);
1: 	}
1: 
1: 	/**
1: 	 * make a unique key for the counter.
1: 	 */
1: 	public static String makeIdentity(String s, String t, String c)
1: 	{
1: 		return s + "." + t + "." + c;
1: 	}
1: 
1: 	/**
1: 	 * make a unique key for the counter.
1: 	 */
1: 	public static String makeIdentity(TableDescriptor td, ColumnDescriptor cd)
1: 	{
1: 		return td.getSchemaName() + "." + td.getName() + 
1: 				"." + cd.getColumnName();
1: 	}
1: 
1: 	/**
1: 	 * reset to the counter to the beginning or the end.
1: 	 * 
1: 	 * @param 	begin	if TRUE reset to beginning and mark it uninitialized.
1: 	 */
1: 	public void reset(boolean begin)
1: 	{
1: 		if (begin == true)
1: 			initialized = false;
1: 		else
1: 		{
1: 			counter = finalValue;
1: 			initialized = true;
1: 		}
1: 		//		System.out.println("counter reset to " + this);
1: 
1: 	}
1: 
1: 	/**
1: 	 * update the counter.
1: 	 * 
1: 	 * @param 	t		update the counter to this value.
1: 	 */
1: 	public long update(long t)
1: 	{
1: 		counter = t;
1: 		//		System.out.println("counter updated to " + this);
1: 		initialized = true;
1: 		return counter;
1: 	}
1: 
1: 	/**
1: 	 * update the counter to its next value.
1: 	 * 
1: 	 * @exception	StandardException	if the counter has not yet been
1: 	 * initialized and the Start value is NULL.
1: 	 */
1: 	public long update() throws StandardException
1: 	{
1: 		long counterVal;
1: 
1: 		if (initialized == false)
1: 		{
1: 			// The first time around, counter simply gets the start
1: 			// value. 
1: 			initialized = true;
1: 			
1: 			if (start == null)
1: 			{
1: 				throw StandardException.newException(
1: 											SQLState.LANG_AI_COUNTER_ERROR);
1: 			}
1: 			counter = start.longValue();			
1: 		}	
1: 		else
1: 		{
1: 			counter = counter + increment;
1: 		}
1: 		//		System.out.println("counter updated to " + this);
1: 		return counter;
1: 	}
1: 
1: 	/**
1: 	 * get the current value of the counter. An uninitialized counter means the
1: 	 * current value is NULL.
1: 	 */
1: 	public Long getCurrentValue()
1: 	{
1: 		if (initialized == false)
1: 			return null;
0: 		return new Long(counter);
1: 	}
1: 	
1: 	/**
1: 	 * return the identity of the counter.
1: 	 */
1: 	public String getIdentity()
1: 	{
1: 		return identity;
1: 	}
1: 
1: 	/**
1: 	 * flush a counter to disk; i.e write the current value of the counter into
1: 	 * the row in SYSCOLUMNS.
1: 	 * 
1: 	 * @param	tc			TransactionController to use
1: 	 * @param	dd			DataDictionary to use.
1: 	 * @param	tableUUID	I might have the table name but I need more
1: 	 * information 
0: 	 * @exception	StandardException standard cloudscape exception.
1: 	 */
1: 	public void flushToDisk(TransactionController tc, DataDictionary dd,
1: 							UUID tableUUID)
1: 	       throws StandardException
1: 	{
1: 		dd.setAutoincrementValue(tc, tableUUID, columnName, counter, true);
1: 	}
1: 
1: 	/**
1: 	 * get the column position in the table for which this counter has been
1: 	 * created. 
1: 	 * @return the position of the corresponding column in the table (1-based)
1: 	 */
1: 	public int getColumnPosition()
1: 	{
1: 		return columnPosition;
1: 	}
1: 
1: 	/**
1: 	 * get the start value
1: 	 * @return the initial value of the counter
1: 	 */
1: 	public Long getStartValue()
1: 	{
1: 		return start;
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		return "counter: " + identity + " current: " + counter 
1: 			+ " start: " + start + 
1: 			" increment: " + increment + " final: " + finalValue;
1: 	}	
1: }	
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import	org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: 
0: /**
0:  * AutoincrementCounter is a not so general counter for the specific purposes
0:  * of autoincrement columns. It can be thought of as an in-memory autoincrement
0:  * column.
0:  * The counting or incrementing is done in fashion identical to the
0:  * AUTOINCREMENTVALUE in SYSCOLUMNS.
0:  * <p>
0:  * To create a counter, the user must call the constructor with a start value,
0:  * increment and optionally a final value. In addition the caller must specify
0:  * the schema name, table name and column name uniquely identifying the
0:  * counter. 
0:  * <p>
0:  * When a counter is created it is in an invalid state-- to initialize it, the
0:  * user must call either  <i>update</i> or <i>reset(false)</i>. The value of a
0:  * counter can be changed by either calling reset or update. 
0: 
0:  * @author manish
0:  */
0: public class AutoincrementCounter 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	private Long start;
0: 	private long increment;
0: 	private String identity;
0: 	private long finalValue;
0: 	private String schemaName;
0: 	private String tableName;
0: 	private String columnName;
0: 	// maintains state.
0: 	private long counter;
0: 	private int columnPosition;
0: 	private boolean initialized = false;
0: 
0: 	/**
0: 	 * constructor 
0: 	 * @param 	start		The start value of the counter; is a java object as
0: 	 * 			it can also be null.
0: 	 * @param   increment	how much to increment the counter by.
0: 	 * @param	finalValue	the finalvalue of the counter. used by reset
0: 	 * @param 	s
0: 	 * @param   t
0: 	 * @param	c
0: 	 */
0: 	public AutoincrementCounter(Long start, long increment, long finalValue,
0: 								String s, String t, String c, int position)
0: 	{
0: 		this.increment = increment;
0: 		this.start = start;
0: 		this.initialized = false;
0: 		this.identity = makeIdentity(s,t,c);
0: 		this.finalValue = finalValue;
0: 		this.schemaName = s;
0: 		this.tableName = t;
0: 		this.columnName = c;
0: 		this.columnPosition = position;
0: 		//		System.out.println("aic created with " + this);
0: 	}
0: 
0: 	/**
0: 	 * make a unique key for the counter.
0: 	 */
0: 	public static String makeIdentity(String s, String t, String c)
0: 	{
0: 		return s + "." + t + "." + c;
0: 	}
0: 
0: 	/**
0: 	 * make a unique key for the counter.
0: 	 */
0: 	public static String makeIdentity(TableDescriptor td, ColumnDescriptor cd)
0: 	{
0: 		return td.getSchemaName() + "." + td.getName() + 
0: 				"." + cd.getColumnName();
0: 	}
0: 
0: 	/**
0: 	 * reset to the counter to the beginning or the end.
0: 	 * 
0: 	 * @param 	begin	if TRUE reset to beginning and mark it uninitialized.
0: 	 */
0: 	public void reset(boolean begin)
0: 	{
0: 		if (begin == true)
0: 			initialized = false;
0: 		else
0: 		{
0: 			counter = finalValue;
0: 			initialized = true;
0: 		}
0: 		//		System.out.println("counter reset to " + this);
0: 
0: 	}
0: 
0: 	/**
0: 	 * update the counter.
0: 	 * 
0: 	 * @param 	t		update the counter to this value.
0: 	 */
0: 	public long update(long t)
0: 	{
0: 		counter = t;
0: 		//		System.out.println("counter updated to " + this);
0: 		initialized = true;
0: 		return counter;
0: 	}
0: 
0: 	/**
0: 	 * update the counter to its next value.
0: 	 * 
0: 	 * @exception	StandardException	if the counter has not yet been
0: 	 * initialized and the Start value is NULL.
0: 	 */
0: 	public long update() throws StandardException
0: 	{
0: 		long counterVal;
0: 
0: 		if (initialized == false)
0: 		{
0: 			// The first time around, counter simply gets the start
0: 			// value. 
0: 			initialized = true;
0: 			
0: 			if (start == null)
0: 			{
0: 				throw StandardException.newException(
0: 											SQLState.LANG_AI_COUNTER_ERROR);
0: 			}
0: 			counter = start.longValue();			
0: 		}	
0: 		else
0: 		{
0: 			counter = counter + increment;
0: 		}
0: 		//		System.out.println("counter updated to " + this);
0: 		return counter;
0: 	}
0: 
0: 	/**
0: 	 * get the current value of the counter. An uninitialized counter means the
0: 	 * current value is NULL.
0: 	 */
0: 	public Long getCurrentValue()
0: 	{
0: 		if (initialized == false)
0: 			return null;
0: 		return new Long(counter);
0: 	}
0: 	
0: 	/**
0: 	 * return the identity of the counter.
0: 	 */
0: 	public String getIdentity()
0: 	{
0: 		return identity;
0: 	}
0: 
0: 	/**
0: 	 * flush a counter to disk; i.e write the current value of the counter into
0: 	 * the row in SYSCOLUMNS.
0: 	 * 
0: 	 * @param	tc			TransactionController to use
0: 	 * @param	dd			DataDictionary to use.
0: 	 * @param	tableUUID	I might have the table name but I need more
0: 	 * information 
0: 	 * @exception	StandardException standard cloudscape exception.
0: 	 */
0: 	public void flushToDisk(TransactionController tc, DataDictionary dd,
0: 							UUID tableUUID)
0: 	       throws StandardException
0: 	{
0: 		dd.setAutoincrementValue(tc, tableUUID, columnName, counter, true);
0: 	}
0: 
0: 	/**
0: 	 * get the column position in the table for which this counter has been
0: 	 * created. 
0: 	 * @return the position of the corresponding column in the table (1-based)
0: 	 */
0: 	public int getColumnPosition()
0: 	{
0: 		return columnPosition;
0: 	}
0: 
0: 	/**
0: 	 * get the start value
0: 	 * @return the initial value of the counter
0: 	 */
0: 	public Long getStartValue()
0: 	{
0: 		return start;
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		return "counter: " + identity + " current: " + counter 
0: 			+ " start: " + start + 
0: 			" increment: " + increment + " final: " + finalValue;
0: 	}	
0: }	
0: 
0: 
============================================================================