1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.ExtractOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.sql.Types;
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.DateTimeDataValue;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This node represents a unary extract operator, used to extract
1:eac0369:  * a field from a date/time. The field value is returned as an integer.
2:eac0369:  *
1:eac0369:  */
1:3bb140c: class ExtractOperatorNode extends UnaryOperatorNode {
1:eac0369: 
1:3bb140c: static private final String fieldName[] = {
1:eac0369: 		"YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND"
1:eac0369: 	};
1:eac0369: 	static private final String fieldMethod[] = {
1:eac0369: 		"getYear","getMonth","getDate","getHours","getMinutes","getSeconds"
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	private int extractField;
1:eac0369: 
1:3bb140c:     ExtractOperatorNode(int field, ValueNode operand, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(operand,
1:3bb140c:                 "EXTRACT " + fieldName[field],
1:3bb140c:                 fieldMethod[field],
1:3bb140c:                 cm);
1:3bb140c:         this.extractField = field;
1:3bb140c:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this operator
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException 
1:eac0369: 	{
1:eac0369: 		int	operandType;
1:eac0369: 		TypeId opTypeId;
1:eac0369: 
1:09c2697:         bindOperand(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		opTypeId = operand.getTypeId();
1:eac0369: 		operandType = opTypeId.getJDBCTypeId();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Cast the operand, if necessary, - this function is allowed only on
1:eac0369: 		** date/time types.  By default, we cast to DATE if extracting
1:eac0369: 		** YEAR, MONTH or DAY and to TIME if extracting HOUR, MINUTE or
1:eac0369: 		** SECOND.
1:eac0369: 		*/
1:eac0369: 		if (opTypeId.isStringTypeId())
1:eac0369: 		{
1:c7a1d17:             TypeCompiler tc = operand.getTypeCompiler();
1:eac0369: 			int castType = (extractField < 3) ? Types.DATE : Types.TIME;
1:3bb140c:             operand = new CastNode(
1:eac0369: 					operand, 
1:eac0369: 					DataTypeDescriptor.getBuiltInDataTypeDescriptor(castType, true, 
1:eac0369: 										tc.getCastToCharWidth(
1:eac0369: 												operand.getTypeServices())),
1:eac0369: 					getContextManager());
1:eac0369: 			((CastNode) operand).bindCastNodeOnly();
1:eac0369: 
1:eac0369: 			opTypeId = operand.getTypeId();
1:eac0369: 			operandType = opTypeId.getJDBCTypeId();
2:eac0369: 		}
1:eac0369: 
1:eac0369: 		if ( ! ( ( operandType == Types.DATE )
1:eac0369: 			   || ( operandType == Types.TIME ) 
1:eac0369: 			   || ( operandType == Types.TIMESTAMP ) 
1:eac0369: 			)	) {
1:eac0369: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
2:eac0369: 						"EXTRACT "+fieldName[extractField],
1:eac0369: 						opTypeId.getSQLTypeName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			If the type is DATE, ensure the field is okay.
1:eac0369: 		 */
1:eac0369: 		if ( (operandType == Types.DATE) 
1:eac0369: 			 && (extractField > DateTimeDataValue.DAY_FIELD) ) {
1:eac0369: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1:eac0369: 						"EXTRACT "+fieldName[extractField],
1:eac0369: 						opTypeId.getSQLTypeName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			If the type is TIME, ensure the field is okay.
1:eac0369: 		 */
1:eac0369: 		if ( (operandType == Types.TIME) 
1:eac0369: 			 && (extractField < DateTimeDataValue.HOUR_FIELD) ) {
1:eac0369: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1:eac0369: 						"EXTRACT "+fieldName[extractField],
1:eac0369: 						opTypeId.getSQLTypeName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** The result type of extract is int,
1:eac0369: 		** unless it is TIMESTAMP and SECOND, in which case
1:eac0369: 		** for now it is DOUBLE but eventually it will need to
1:eac0369: 		** be DECIMAL(11,9).
1:eac0369: 		*/
1:eac0369: 		if ( (operandType == Types.TIMESTAMP)
1:eac0369: 			 && (extractField == DateTimeDataValue.SECOND_FIELD) ) {
1:eac0369: 			setType(new DataTypeDescriptor(
1:eac0369: 							TypeId.getBuiltInTypeId(Types.DOUBLE),
1:eac0369: 							operand.getTypeServices().isNullable()
1:eac0369: 						)
1:eac0369: 				);
1:eac0369: 		} else {
1:eac0369: 			setType(new DataTypeDescriptor(
1:eac0369: 							TypeId.INTEGER_ID,
1:eac0369: 							operand.getTypeServices().isNullable()
1:eac0369: 						)
1:eac0369: 				);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     @Override
1:eac0369: 	public String toString() {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:c9a1206: 			return "fieldName: " + fieldName[extractField] + "\n" +
1:c9a1206: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DateTimeDataValue;
1: import org.apache.derby.iapi.types.TypeId;
1: class ExtractOperatorNode extends UnaryOperatorNode {
1: static private final String fieldName[] = {
/////////////////////////////////////////////////////////////////////////
1:     ExtractOperatorNode(int field, ValueNode operand, ContextManager cm)
1:             throws StandardException {
1:         super(operand,
1:                 "EXTRACT " + fieldName[field],
1:                 fieldMethod[field],
1:                 cm);
0:         setNodeType(C_NodeTypes.EXTRACT_OPERATOR_NODE);
1:         this.extractField = field;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             operand = new CastNode(
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1: 			return "fieldName: " + fieldName[extractField] + "\n" +
1: 				super.toString();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
commit:c7a1d17
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             TypeCompiler tc = operand.getTypeCompiler();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 		bindOperand(fromList, subqueryList,
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.ExtractOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node represents a unary extract operator, used to extract
1:  * a field from a date/time. The field value is returned as an integer.
1:  *
0:  * @author ames
1:  */
0: public class ExtractOperatorNode extends UnaryOperatorNode {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
0: 	static private final String fieldName[] = {
1: 		"YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND"
1: 	};
1: 	static private final String fieldMethod[] = {
1: 		"getYear","getMonth","getDate","getHours","getMinutes","getSeconds"
1: 	};
1: 
1: 	private int extractField;
1: 
1: 	/**
0: 	 * Initializer for a ExtractOperatorNode
1: 	 *
0: 	 * @param field		The field to extract
0: 	 * @param operand	The operand
1: 	 */
0: 	public void init(Object field, Object operand) {
0: 		extractField = ((Integer) field).intValue();
0: 		super.init( operand,
1: 					"EXTRACT "+fieldName[extractField],
0: 					fieldMethod[extractField] );
1: 	}
1: 
1: 	/**
1: 	 * Bind this operator
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList		fromList, 
0: 		SubqueryList	subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException 
1: 	{
1: 		int	operandType;
1: 		TypeId opTypeId;
1: 
0: 		super.bindExpression(fromList, subqueryList,
0: 				aggregateVector);
1: 
1: 		opTypeId = operand.getTypeId();
1: 		operandType = opTypeId.getJDBCTypeId();
0: 		TypeCompiler tc = operand.getTypeCompiler();
1: 
1: 		/*
1: 		** Cast the operand, if necessary, - this function is allowed only on
1: 		** date/time types.  By default, we cast to DATE if extracting
1: 		** YEAR, MONTH or DAY and to TIME if extracting HOUR, MINUTE or
1: 		** SECOND.
1: 		*/
1: 		if (opTypeId.isStringTypeId())
1: 		{
1: 			int castType = (extractField < 3) ? Types.DATE : Types.TIME;
0: 			operand =  (ValueNode)
0: 				getNodeFactory().getNode(
0: 					C_NodeTypes.CAST_NODE,
1: 					operand, 
1: 					DataTypeDescriptor.getBuiltInDataTypeDescriptor(castType, true, 
1: 										tc.getCastToCharWidth(
1: 												operand.getTypeServices())),
1: 					getContextManager());
1: 			((CastNode) operand).bindCastNodeOnly();
1: 
1: 			opTypeId = operand.getTypeId();
1: 			operandType = opTypeId.getJDBCTypeId();
1: 		}
1: 
1: 		if ( ! ( ( operandType == Types.DATE )
1: 			   || ( operandType == Types.TIME ) 
1: 			   || ( operandType == Types.TIMESTAMP ) 
1: 			)	) {
1: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1: 						"EXTRACT "+fieldName[extractField],
1: 						opTypeId.getSQLTypeName());
1: 		}
1: 
1: 		/*
1: 			If the type is DATE, ensure the field is okay.
1: 		 */
1: 		if ( (operandType == Types.DATE) 
1: 			 && (extractField > DateTimeDataValue.DAY_FIELD) ) {
1: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1: 						"EXTRACT "+fieldName[extractField],
1: 						opTypeId.getSQLTypeName());
1: 		}
1: 
1: 		/*
1: 			If the type is TIME, ensure the field is okay.
1: 		 */
1: 		if ( (operandType == Types.TIME) 
1: 			 && (extractField < DateTimeDataValue.HOUR_FIELD) ) {
1: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1: 						"EXTRACT "+fieldName[extractField],
1: 						opTypeId.getSQLTypeName());
1: 		}
1: 
1: 		/*
1: 		** The result type of extract is int,
1: 		** unless it is TIMESTAMP and SECOND, in which case
1: 		** for now it is DOUBLE but eventually it will need to
1: 		** be DECIMAL(11,9).
1: 		*/
1: 		if ( (operandType == Types.TIMESTAMP)
1: 			 && (extractField == DateTimeDataValue.SECOND_FIELD) ) {
1: 			setType(new DataTypeDescriptor(
1: 							TypeId.getBuiltInTypeId(Types.DOUBLE),
1: 							operand.getTypeServices().isNullable()
1: 						)
1: 				);
1: 		} else {
1: 			setType(new DataTypeDescriptor(
1: 							TypeId.INTEGER_ID,
1: 							operand.getTypeServices().isNullable()
1: 						)
1: 				);
1: 		}
1: 
1: 		return this;
1: 	}
1: 
1: 	public String toString() {
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			return super.toString() + "field is "+fieldName[extractField]+"\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node represents a unary extract operator, used to extract
0:  * a field from a date/time. The field value is returned as an integer.
0:  *
0:  * @author ames
0:  */
0: public class ExtractOperatorNode extends UnaryOperatorNode {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	static private final String fieldName[] = {
0: 		"YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND"
0: 	};
0: 	static private final String fieldMethod[] = {
0: 		"getYear","getMonth","getDate","getHours","getMinutes","getSeconds"
0: 	};
0: 
0: 	private int extractField;
0: 
0: 	/**
0: 	 * Initializer for a ExtractOperatorNode
0: 	 *
0: 	 * @param field		The field to extract
0: 	 * @param operand	The operand
0: 	 */
0: 	public void init(Object field, Object operand) {
0: 		extractField = ((Integer) field).intValue();
0: 		super.init( operand,
0: 					"EXTRACT "+fieldName[extractField],
0: 					fieldMethod[extractField] );
0: 	}
0: 
0: 	/**
0: 	 * Bind this operator
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList		fromList, 
0: 		SubqueryList	subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException 
0: 	{
0: 		int	operandType;
0: 		TypeId opTypeId;
0: 
0: 		super.bindExpression(fromList, subqueryList,
0: 				aggregateVector);
0: 
0: 		opTypeId = operand.getTypeId();
0: 		operandType = opTypeId.getJDBCTypeId();
0: 		TypeCompiler tc = operand.getTypeCompiler();
0: 
0: 		/*
0: 		** Cast the operand, if necessary, - this function is allowed only on
0: 		** date/time types.  By default, we cast to DATE if extracting
0: 		** YEAR, MONTH or DAY and to TIME if extracting HOUR, MINUTE or
0: 		** SECOND.
0: 		*/
0: 		if (opTypeId.isStringTypeId())
0: 		{
0: 			int castType = (extractField < 3) ? Types.DATE : Types.TIME;
0: 			operand =  (ValueNode)
0: 				getNodeFactory().getNode(
0: 					C_NodeTypes.CAST_NODE,
0: 					operand, 
0: 					DataTypeDescriptor.getBuiltInDataTypeDescriptor(castType, true, 
0: 										tc.getCastToCharWidth(
0: 												operand.getTypeServices())),
0: 					getContextManager());
0: 			((CastNode) operand).bindCastNodeOnly();
0: 
0: 			opTypeId = operand.getTypeId();
0: 			operandType = opTypeId.getJDBCTypeId();
0: 		}
0: 
0: 		if ( ! ( ( operandType == Types.DATE )
0: 			   || ( operandType == Types.TIME ) 
0: 			   || ( operandType == Types.TIMESTAMP ) 
0: 			)	) {
0: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
0: 						"EXTRACT "+fieldName[extractField],
0: 						opTypeId.getSQLTypeName());
0: 		}
0: 
0: 		/*
0: 			If the type is DATE, ensure the field is okay.
0: 		 */
0: 		if ( (operandType == Types.DATE) 
0: 			 && (extractField > DateTimeDataValue.DAY_FIELD) ) {
0: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
0: 						"EXTRACT "+fieldName[extractField],
0: 						opTypeId.getSQLTypeName());
0: 		}
0: 
0: 		/*
0: 			If the type is TIME, ensure the field is okay.
0: 		 */
0: 		if ( (operandType == Types.TIME) 
0: 			 && (extractField < DateTimeDataValue.HOUR_FIELD) ) {
0: 			throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
0: 						"EXTRACT "+fieldName[extractField],
0: 						opTypeId.getSQLTypeName());
0: 		}
0: 
0: 		/*
0: 		** The result type of extract is int,
0: 		** unless it is TIMESTAMP and SECOND, in which case
0: 		** for now it is DOUBLE but eventually it will need to
0: 		** be DECIMAL(11,9).
0: 		*/
0: 		if ( (operandType == Types.TIMESTAMP)
0: 			 && (extractField == DateTimeDataValue.SECOND_FIELD) ) {
0: 			setType(new DataTypeDescriptor(
0: 							TypeId.getBuiltInTypeId(Types.DOUBLE),
0: 							operand.getTypeServices().isNullable()
0: 						)
0: 				);
0: 		} else {
0: 			setType(new DataTypeDescriptor(
0: 							TypeId.INTEGER_ID,
0: 							operand.getTypeServices().isNullable()
0: 						)
0: 				);
0: 		}
0: 
0: 		return this;
0: 	}
0: 
0: 	public String toString() {
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() + "field is "+fieldName[extractField]+"\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================