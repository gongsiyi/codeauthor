1:7a2d290: /*
1:7a2d290: 
1:7a2d290:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray
1:7a2d290: 
1:7a2d290:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a2d290:    contributor license agreements.  See the NOTICE file distributed with
1:7a2d290:    this work for additional information regarding copyright ownership.
1:7a2d290:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a2d290:    (the "License"); you may not use this file except in compliance with
1:7a2d290:    the License.  You may obtain a copy of the License at
1:7a2d290: 
1:7a2d290:      http://www.apache.org/licenses/LICENSE-2.0
1:7a2d290: 
1:7a2d290:    Unless required by applicable law or agreed to in writing, software
1:7a2d290:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a2d290:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a2d290:    See the License for the specific language governing permissions and
1:7a2d290:    limitations under the License.
1:7a2d290: 
1:7a2d290:  */
1:7a2d290: 
1:7a2d290: /**
1:7a2d290:  * A UDT which can serialize a lot of bytes.
1:7a2d290:  */
1:7a2d290: package org.apache.derbyTesting.functionTests.tests.lang;
1:7a2d290: 
1:7a2d290: import java.io.Externalizable;
1:7a2d290: import java.io.IOException;
1:7a2d290: import java.io.ObjectOutput;
1:7a2d290: import java.io.ObjectInput;
1:7a2d290: 
1:7a2d290: public class FakeByteArray implements Externalizable
1:7a2d290: {
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // CONSTANTS
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // STATE
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     private int _length;
1:7a2d290:     private byte _fill;
1:7a2d290:     
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // CONSTRUCTOR
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public FakeByteArray() {}
1:7a2d290: 
1:7a2d290:     public FakeByteArray( int length, int fill )
1:7a2d290:     {
1:7a2d290:         _length = length;
1:7a2d290:         _fill = (byte) fill;
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // FUNCTIONS
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public static FakeByteArray makeFakeByteArray( int length, int biggestByte )
1:7a2d290:     {
1:7a2d290:         return new FakeByteArray( length, biggestByte );
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     public static String toString( FakeByteArray data ) { return data.toString(); }
1:7a2d290:     
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // Externalizable BEHAVIOR
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public void writeExternal( ObjectOutput out ) throws IOException
1:7a2d290:     {
1:7a2d290:         out.writeInt( _length );
1:7a2d290: 
1:7a2d290:         for ( int i = 0; i < _length; i++ ) { out.write( _fill ); }
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     public void readExternal( ObjectInput in ) throws IOException
1:7a2d290:     {
1:7a2d290:         _length = in.readInt();
1:7a2d290: 
1:7a2d290:         for ( int i = 0; i < _length; i++ ) { _fill = (byte) in.read(); }
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // OTHER Object OVERRIDES
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public String toString()
1:7a2d290:     {
1:7a2d290:         return "[ " + _length + ", " + _fill + " ]";
1:7a2d290:     }
1:7a2d290: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7a2d290
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: /**
1:  * A UDT which can serialize a lot of bytes.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: 
1: public class FakeByteArray implements Externalizable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private int _length;
1:     private byte _fill;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public FakeByteArray() {}
1: 
1:     public FakeByteArray( int length, int fill )
1:     {
1:         _length = length;
1:         _fill = (byte) fill;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FUNCTIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public static FakeByteArray makeFakeByteArray( int length, int biggestByte )
1:     {
1:         return new FakeByteArray( length, biggestByte );
1:     }
1: 
1:     public static String toString( FakeByteArray data ) { return data.toString(); }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Externalizable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public void writeExternal( ObjectOutput out ) throws IOException
1:     {
1:         out.writeInt( _length );
1: 
1:         for ( int i = 0; i < _length; i++ ) { out.write( _fill ); }
1:     }
1: 
1:     public void readExternal( ObjectInput in ) throws IOException
1:     {
1:         _length = in.readInt();
1: 
1:         for ( int i = 0; i < _length; i++ ) { _fill = (byte) in.read(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER Object OVERRIDES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
1:         return "[ " + _length + ", " + _fill + " ]";
1:     }
1: }
============================================================================