1:db8dae7: /*
1:db8dae7:  
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.KillMaster
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.IOException;
1:db8dae7: import java.sql.Connection;
1:db8dae7: import java.sql.PreparedStatement;
1:db8dae7: import java.sql.ResultSet;
1:db8dae7: import java.sql.SQLException;
1:db8dae7: import java.sql.Statement;
1:db8dae7: import junit.framework.Test;
1:db8dae7: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:db8dae7: import org.apache.derbyTesting.junit.TestConfiguration;
1:db8dae7: 
1:db8dae7: public class KillMaster extends BaseJDBCTestCase
1:db8dae7: {
1:db8dae7:     
1:db8dae7:     public KillMaster(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     /* */
1:db8dae7:     private static String masterJvmVersion = null;
1:db8dae7:     private static String derbyMasterVersion = null;
1:db8dae7:     private static String masterServerHost = null;
1:db8dae7:     private static int masterServerPort = -1;
1:db8dae7:     private static ReplicationRun repRun = new ReplicationRun("KillMaster");
1:db8dae7:     /* */
1:db8dae7:     
1:db8dae7:     public static Test suite()
1:db8dae7:         throws Exception
1:db8dae7:     {
1:db8dae7:         System.out.println("**** KillMaster.suite()");
1:db8dae7:         System.out.println("'KillMaster' can not be run outside the 'ReplicationRun' framework.");
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("KillMaster");
1:db8dae7:          
1:db8dae7:         String masterHostName = System.getProperty("test.serverHost", "localhost");
1:db8dae7:         int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:db8dae7: 
1:db8dae7:         masterServerHost = masterHostName;
1:db8dae7:         masterServerPort = masterPortNo;
1:db8dae7:         
1:db8dae7:         repRun.initEnvironment();
1:db8dae7:         masterJvmVersion = ReplicationRun.masterJvmVersion;
1:db8dae7:         derbyMasterVersion = ReplicationRun.derbyMasterVersion;
1:db8dae7:         
1:db8dae7:         suite.addTest(KillMaster.suite(masterHostName,masterPortNo));
1:db8dae7:         return (Test)suite;
1:db8dae7:  }
1:db8dae7:     /**
1:db8dae7:      * Adds this class to the *existing server* suite.
1:db8dae7:      */
1:db8dae7:     public static Test suite(String serverHost, int serverPort)
1:db8dae7:         throws IOException
1:db8dae7:     {
1:db8dae7:         System.out.println("*** KillMaster.replSuite(serverHost,serverPort)");
1:db8dae7:         
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(KillMaster.class,false,serverHost,serverPort);
1:db8dae7:         System.out.println("*** Done TestConfiguration.defaultExistingServerSuite(KillMaster.class,false,serverHost,serverPort)");
1:db8dae7:         return t;
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      * Test killing master during replication.
1:db8dae7:      *
1:db8dae7:      * @throws Exception
1:db8dae7:      */
1:db8dae7:     public void testKillMaster() 
1:db8dae7:         throws Exception
1:db8dae7:     {
1:db8dae7:         System.out.println("**** KillMaster.testKillMaster() "+
1:db8dae7:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:db8dae7:         
1:db8dae7:         Connection conn = getConnection();
1:db8dae7:         Statement s = conn.createStatement();
1:db8dae7:         s.executeUpdate("create table t (i integer primary key, vc varchar(20))");
1:db8dae7:         
1:db8dae7:         PreparedStatement pSt = prepareStatement("insert into t values (?,?)");
1:db8dae7:         int i=0;
1:db8dae7:         try{
1:db8dae7:             for (;i<1000;i++)
1:db8dae7:             {
1:db8dae7:                 pSt.setInt(1, i);
1:db8dae7:                 pSt.setString(2, "i"+i);
1:db8dae7:                 pSt.execute();
1:db8dae7:                 System.out.println("i: "+i);
1:db8dae7:                 if ( i == 500 )
1:db8dae7:                 {
1:db8dae7:                     /*
1:db8dae7:                     ReplicationRun.stopServer(masterJvmVersion, derbyMasterVersion,
1:db8dae7:                         masterServerHost, masterServerPort);
1:db8dae7:                      */
1:db8dae7:                     repRun.killMaster(masterServerHost, masterServerPort);
1:db8dae7:                 }
1:db8dae7:             }
1:db8dae7:         }catch (SQLException se) {
1:db8dae7:             System.out.println("SQLException @ i="+i+" ("+se.getMessage()+")");
1:db8dae7:             if ( i <=500)
1:db8dae7:             {
1:db8dae7:                 fail("**** Unexpected SQLException @ i="+i+" ("+se.getMessage()+")");
1:db8dae7:             }
1:db8dae7:         }
1:db8dae7:         /* Master not available any more. VerificationClient should check both Master and Slave db!
1:db8dae7:          */
1:db8dae7:         conn.close();
1:db8dae7:         
1:db8dae7:         Thread.sleep(5000L); // Better sleep a little until master is totally gone?
1:db8dae7:         repRun.startServer(masterJvmVersion, derbyMasterVersion,
1:db8dae7:                 masterServerHost,
1:db8dae7:                 ReplicationRun.ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:db8dae7:                 masterServerPort,
1:dbe5dc3:                 ReplicationRun.masterDbSubPath); // Distinguishing master/slave
1:db8dae7:                                                   // Will only work if default/initial values are used!
1:db8dae7:                                                   // MUST BE FULL PATH!!!
1:db8dae7:                 
1:db8dae7:         /* */
1:db8dae7:         conn = getConnection();
1:db8dae7:         s = conn.createStatement();
1:db8dae7:         ResultSet rs = s.executeQuery("select count(*) from t");
1:db8dae7:         rs.next();
1:db8dae7:         int count = rs.getInt(1);
1:db8dae7:         System.out.println("count: "+count);
1:db8dae7:         // s.executeUpdate("drop table t");
1:db8dae7:         /* */
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("KillMaster");
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:dbe5dc3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 ReplicationRun.masterDbSubPath); // Distinguishing master/slave
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.KillMaster
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
0: import java.io.File;
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class KillMaster extends BaseJDBCTestCase
1: {
1:     
1:     public KillMaster(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     /* */
1:     private static String masterJvmVersion = null;
1:     private static String derbyMasterVersion = null;
1:     private static String masterServerHost = null;
1:     private static int masterServerPort = -1;
1:     private static ReplicationRun repRun = new ReplicationRun("KillMaster");
1:     /* */
1:     
1:     public static Test suite()
1:         throws Exception
1:     {
1:         System.out.println("**** KillMaster.suite()");
1:         System.out.println("'KillMaster' can not be run outside the 'ReplicationRun' framework.");
0:         TestSuite suite = new TestSuite("KillMaster");
1:          
1:         String masterHostName = System.getProperty("test.serverHost", "localhost");
1:         int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1: 
1:         masterServerHost = masterHostName;
1:         masterServerPort = masterPortNo;
1:         
1:         repRun.initEnvironment();
1:         masterJvmVersion = ReplicationRun.masterJvmVersion;
1:         derbyMasterVersion = ReplicationRun.derbyMasterVersion;
1:         
1:         suite.addTest(KillMaster.suite(masterHostName,masterPortNo));
1:         return (Test)suite;
1:  }
1:     /**
1:      * Adds this class to the *existing server* suite.
1:      */
1:     public static Test suite(String serverHost, int serverPort)
1:         throws IOException
1:     {
1:         System.out.println("*** KillMaster.replSuite(serverHost,serverPort)");
1:         
1:         Test t = TestConfiguration.existingServerSuite(KillMaster.class,false,serverHost,serverPort);
1:         System.out.println("*** Done TestConfiguration.defaultExistingServerSuite(KillMaster.class,false,serverHost,serverPort)");
1:         return t;
1:     }
1:     
1:     /**
1:      * Test killing master during replication.
1:      *
1:      * @throws Exception
1:      */
1:     public void testKillMaster() 
1:         throws Exception
1:     {
1:         System.out.println("**** KillMaster.testKillMaster() "+
1:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:         
1:         Connection conn = getConnection();
1:         Statement s = conn.createStatement();
1:         s.executeUpdate("create table t (i integer primary key, vc varchar(20))");
1:         
1:         PreparedStatement pSt = prepareStatement("insert into t values (?,?)");
1:         int i=0;
1:         try{
1:             for (;i<1000;i++)
1:             {
1:                 pSt.setInt(1, i);
1:                 pSt.setString(2, "i"+i);
1:                 pSt.execute();
1:                 System.out.println("i: "+i);
1:                 if ( i == 500 )
1:                 {
1:                     /*
1:                     ReplicationRun.stopServer(masterJvmVersion, derbyMasterVersion,
1:                         masterServerHost, masterServerPort);
1:                      */
1:                     repRun.killMaster(masterServerHost, masterServerPort);
1:                 }
1:             }
1:         }catch (SQLException se) {
1:             System.out.println("SQLException @ i="+i+" ("+se.getMessage()+")");
1:             if ( i <=500)
1:             {
1:                 fail("**** Unexpected SQLException @ i="+i+" ("+se.getMessage()+")");
1:             }
1:         }
1:         /* Master not available any more. VerificationClient should check both Master and Slave db!
1:          */
1:         conn.close();
1:         
1:         Thread.sleep(5000L); // Better sleep a little until master is totally gone?
1:         repRun.startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ReplicationRun.ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:                 masterServerPort,
0:                 ReplicationRun.masterDatabasePath +File.separator+ ReplicationRun.masterDbSubPath); // Distinguishing master/slave
1:                                                   // Will only work if default/initial values are used!
1:                                                   // MUST BE FULL PATH!!!
1:                 
1:         /* */
1:         conn = getConnection();
1:         s = conn.createStatement();
1:         ResultSet rs = s.executeQuery("select count(*) from t");
1:         rs.next();
1:         int count = rs.getInt(1);
1:         System.out.println("count: "+count);
1:         // s.executeUpdate("drop table t");
1:         /* */
1:     }
1: }
============================================================================