1:a69fa12: /*
1:a69fa12: 
1:a69fa12:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob
1:a69fa12: 
1:a69fa12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a69fa12:    contributor license agreements.  See the NOTICE file distributed with
1:a69fa12:    this work for additional information regarding copyright ownership.
1:a69fa12:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a69fa12:    (the "License"); you may not use this file except in compliance with
1:a69fa12:    the License.  You may obtain a copy of the License at
1:a69fa12: 
1:a69fa12:       http://www.apache.org/licenses/LICENSE-2.0
1:a69fa12: 
1:a69fa12:    Unless required by applicable law or agreed to in writing, software
1:a69fa12:    distributed under the License is distributed on an "AS IS" BASIS,
1:a69fa12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a69fa12:    See the License for the specific language governing permissions and
1:a69fa12:    limitations under the License.
1:a69fa12: 
1:a69fa12:  */
1:a69fa12: package org.apache.derbyTesting.functionTests.tests.compatibility.helpers;
1:a69fa12: 
1:a69fa12: import java.io.ByteArrayInputStream;
1:a69fa12: import java.io.InputStream;
1:a69fa12: import java.io.OutputStream;
1:a69fa12: import java.sql.Blob;
1:a69fa12: import java.sql.SQLException;
1:a69fa12: 
1:a69fa12: /**
1:a69fa12:  * A crude Blob implementation for datatype testing.
1:a69fa12:  */
1:a69fa12: public class DummyBlob
1:a69fa12:         implements Blob {
1:a69fa12:     private	byte[]	_bytes;
1:a69fa12: 
1:a69fa12:     public	DummyBlob( byte[] bytes )
1:a69fa12:     {
1:a69fa12:         _bytes = bytes;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public	InputStream	getBinaryStream()
1:a69fa12:     {
1:a69fa12:         return new ByteArrayInputStream( _bytes );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public	byte[]	getBytes( long position, int length ) { return _bytes; }
1:a69fa12: 
1:a69fa12:     public	long	length() { return (long) _bytes.length; }
1:a69fa12: 
1:a69fa12:     public	long	position( Blob pattern, long start ) { return 0L; }
1:a69fa12:     public	long	position( byte[] pattern, long start ) { return 0L; }
1:a69fa12: 
1:a69fa12:     public	boolean	equals( Object other )
1:a69fa12:     {
1:a69fa12:         if ( other == null ) { return false; }
1:a69fa12:         if ( !( other instanceof Blob ) ) { return false; }
1:a69fa12: 
1:a69fa12:         Blob	that = (Blob) other;
1:a69fa12: 
1:a69fa12:         try {
1:a69fa12:             if ( this.length() != that.length() ) { return false; }
1:a69fa12: 
1:a69fa12:             InputStream	thisStream = this.getBinaryStream();
1:a69fa12:             InputStream	thatStream = that.getBinaryStream();
1:a69fa12: 
1:a69fa12:             while( true )
1:a69fa12:             {
1:a69fa12:                 int		nextByte = thisStream.read();
1:a69fa12: 
1:a69fa12:                 if ( nextByte < 0 ) { break; }
1:a69fa12:                 if ( nextByte != thatStream.read() ) { return false; }
1:a69fa12:             }
1:a69fa12:         }
1:a69fa12:         catch (Exception e)
1:a69fa12:         {
1:a69fa12:             System.err.println( e.getMessage() );
1:a69fa12:             e.printStackTrace(System.err);
1:a69fa12:             return false;
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         return true;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public int setBytes(long arg0, byte[] arg1) throws SQLException {
1:a69fa12:         throw new SQLException("not implemented for this test");
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public int setBytes(long arg0, byte[] arg1, int arg2, int arg3)
1:a69fa12:             throws SQLException {
1:a69fa12:         throw new SQLException("not implemented for this test");
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public OutputStream setBinaryStream(long arg0) throws SQLException {
1:a69fa12:         throw new SQLException("not implemented for this test");
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public void truncate(long arg0) throws SQLException {
1:a69fa12:         throw new SQLException("not implemented for this test");
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public void free() throws SQLException {
1:a69fa12:         _bytes = null;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public InputStream getBinaryStream(long pos, long length)
1:a69fa12:             throws SQLException {
1:a69fa12:         return new ByteArrayInputStream(_bytes, (int)pos -1, (int)length);
1:a69fa12:     }
1:a69fa12: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:a69fa12
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.compatibility.helpers;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.sql.Blob;
1: import java.sql.SQLException;
1: 
1: /**
1:  * A crude Blob implementation for datatype testing.
1:  */
1: public class DummyBlob
1:         implements Blob {
1:     private	byte[]	_bytes;
1: 
1:     public	DummyBlob( byte[] bytes )
1:     {
1:         _bytes = bytes;
1:     }
1: 
1:     public	InputStream	getBinaryStream()
1:     {
1:         return new ByteArrayInputStream( _bytes );
1:     }
1: 
1:     public	byte[]	getBytes( long position, int length ) { return _bytes; }
1: 
1:     public	long	length() { return (long) _bytes.length; }
1: 
1:     public	long	position( Blob pattern, long start ) { return 0L; }
1:     public	long	position( byte[] pattern, long start ) { return 0L; }
1: 
1:     public	boolean	equals( Object other )
1:     {
1:         if ( other == null ) { return false; }
1:         if ( !( other instanceof Blob ) ) { return false; }
1: 
1:         Blob	that = (Blob) other;
1: 
1:         try {
1:             if ( this.length() != that.length() ) { return false; }
1: 
1:             InputStream	thisStream = this.getBinaryStream();
1:             InputStream	thatStream = that.getBinaryStream();
1: 
1:             while( true )
1:             {
1:                 int		nextByte = thisStream.read();
1: 
1:                 if ( nextByte < 0 ) { break; }
1:                 if ( nextByte != thatStream.read() ) { return false; }
1:             }
1:         }
1:         catch (Exception e)
1:         {
1:             System.err.println( e.getMessage() );
1:             e.printStackTrace(System.err);
1:             return false;
1:         }
1: 
1:         return true;
1:     }
1: 
1:     public int setBytes(long arg0, byte[] arg1) throws SQLException {
1:         throw new SQLException("not implemented for this test");
1:     }
1: 
1:     public int setBytes(long arg0, byte[] arg1, int arg2, int arg3)
1:             throws SQLException {
1:         throw new SQLException("not implemented for this test");
1:     }
1: 
1:     public OutputStream setBinaryStream(long arg0) throws SQLException {
1:         throw new SQLException("not implemented for this test");
1:     }
1: 
1:     public void truncate(long arg0) throws SQLException {
1:         throw new SQLException("not implemented for this test");
1:     }
1: 
1:     public void free() throws SQLException {
1:         _bytes = null;
1:     }
1: 
1:     public InputStream getBinaryStream(long pos, long length)
1:             throws SQLException {
1:         return new ByteArrayInputStream(_bytes, (int)pos -1, (int)length);
1:     }
1: }
============================================================================