1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLocking3Escalate
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A locking policy that implements row level locking with isolation degree 3.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1:eac0369: */
1:eac0369: public class RowLocking3Escalate extends ContainerLocking3 
1:eac0369: {
1:eac0369: 	protected RowLocking3Escalate(LockFactory lf) 
1:eac0369:     {
1:eac0369: 		super(lf);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Escalates Row Locking 3 to Container Locking 3.
1:eac0369:      * <p>
1:eac0369:      * This call is made by code which tracks the number of locks on a 
1:eac0369:      * container. When the number of locks exceeds the escalate threshold
1:eac0369:      * the caller creates this new locking policy, calls lockContainer(), 
1:eac0369:      * and substitues it for the old locking policy.  The lockContainer call
1:eac0369:      * determines which table lock to get (S or X), gets that table lock, and
1:eac0369:      * then releases the row locks on the table.
1:eac0369:      *
1:eac0369:      * It is assumed that this is called on a open container for lock only.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param t            Transaction to associate lock with.
1:eac0369:      * @param container    Container to lock.
1:eac0369:      * @param waitForLock  Ignored - will never wait for a lock.
1:eac0369:      * @param forUpdate    Ignored, mode determined from current lock state.
1:eac0369:      *
1:eac0369:      * @return true if the lock was obtained, false if it wasn't. 
1:eac0369:      *   False should only be returned if the waitForLock policy was set to
1:eac0369:      *  "false," and the lock was unavailable.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	public boolean lockContainer(
1:eac0369:     Transaction         t, 
1:eac0369:     ContainerHandle     container, 
1:eac0369:     boolean             waitForLock,
1:eac0369:     boolean             forUpdate)
1:eac0369: 		throws StandardException 
1:eac0369:     {
1:eac0369: 		forUpdate = false;
1:eac0369: 
1:eac0369:         // If an IX lock exists then escalate to X table lock, else escalate
1:eac0369:         // to S table lock.
1:eac0369: 		if (lf.isLockHeld(
1:eac0369:                 t.getCompatibilitySpace(), t, 
1:eac0369:                 container.getId(), ContainerLock.CIX))
1:eac0369:         {
1:eac0369: 			forUpdate = true;
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Get the new X or S table lock.
1:eac0369: 		boolean gotLock = 
1:eac0369:             super.lockContainer(t, container, waitForLock, forUpdate);
1:eac0369: 
1:eac0369: 		if (!gotLock)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369:         // now remove all matching ROW locks, this is done using the special
1:eac0369:         // EscalateContainerKey() class which through the Matchable interface
1:eac0369:         // only matches row locks of this container.
1:eac0369: 		lf.unlockGroup(
1:eac0369:             t.getCompatibilitySpace(), t, 
1:eac0369:             new EscalateContainerKey(container.getId()));
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 lf.isLockHeld(
1:eac0369:                     t.getCompatibilitySpace(), t, 
1:eac0369:                     container.getId(), 
1:eac0369:                     (forUpdate ? ContainerLock.CX : ContainerLock.CS)),
1:eac0369:                 "Covering table lock (" +
1:eac0369:                 (forUpdate ? ContainerLock.CX : ContainerLock.CS) +
1:eac0369:                 " is not held after lock escalation.");
1:eac0369:         }
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLocking3Escalate
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 	A locking policy that implements row level locking with isolation degree 3.
1: 
1: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1: */
1: public class RowLocking3Escalate extends ContainerLocking3 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	protected RowLocking3Escalate(LockFactory lf) 
1:     {
1: 		super(lf);
1: 	}
1: 
1:     /**
1:      * Escalates Row Locking 3 to Container Locking 3.
1:      * <p>
1:      * This call is made by code which tracks the number of locks on a 
1:      * container. When the number of locks exceeds the escalate threshold
1:      * the caller creates this new locking policy, calls lockContainer(), 
1:      * and substitues it for the old locking policy.  The lockContainer call
1:      * determines which table lock to get (S or X), gets that table lock, and
1:      * then releases the row locks on the table.
1:      *
1:      * It is assumed that this is called on a open container for lock only.
1:      * <p>
1:      *
1:      * @param t            Transaction to associate lock with.
1:      * @param container    Container to lock.
1:      * @param waitForLock  Ignored - will never wait for a lock.
1:      * @param forUpdate    Ignored, mode determined from current lock state.
1:      *
1:      * @return true if the lock was obtained, false if it wasn't. 
1:      *   False should only be returned if the waitForLock policy was set to
1:      *  "false," and the lock was unavailable.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public boolean lockContainer(
1:     Transaction         t, 
1:     ContainerHandle     container, 
1:     boolean             waitForLock,
1:     boolean             forUpdate)
1: 		throws StandardException 
1:     {
1: 		forUpdate = false;
1: 
1:         // If an IX lock exists then escalate to X table lock, else escalate
1:         // to S table lock.
1: 		if (lf.isLockHeld(
1:                 t.getCompatibilitySpace(), t, 
1:                 container.getId(), ContainerLock.CIX))
1:         {
1: 			forUpdate = true;
1:         }
1: 
1:         // Get the new X or S table lock.
1: 		boolean gotLock = 
1:             super.lockContainer(t, container, waitForLock, forUpdate);
1: 
1: 		if (!gotLock)
1: 			return false;
1: 
1:         // now remove all matching ROW locks, this is done using the special
1:         // EscalateContainerKey() class which through the Matchable interface
1:         // only matches row locks of this container.
1: 		lf.unlockGroup(
1:             t.getCompatibilitySpace(), t, 
1:             new EscalateContainerKey(container.getId()));
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(
1:                 lf.isLockHeld(
1:                     t.getCompatibilitySpace(), t, 
1:                     container.getId(), 
1:                     (forUpdate ? ContainerLock.CX : ContainerLock.CS)),
1:                 "Covering table lock (" +
1:                 (forUpdate ? ContainerLock.CX : ContainerLock.CS) +
1:                 " is not held after lock escalation.");
1:         }
1: 
1: 		return true;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 	A locking policy that implements row level locking with isolation degree 3.
0: 
0: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
0: */
0: public class RowLocking3Escalate extends ContainerLocking3 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	protected RowLocking3Escalate(LockFactory lf) 
0:     {
0: 		super(lf);
0: 	}
0: 
0:     /**
0:      * Escalates Row Locking 3 to Container Locking 3.
0:      * <p>
0:      * This call is made by code which tracks the number of locks on a 
0:      * container. When the number of locks exceeds the escalate threshold
0:      * the caller creates this new locking policy, calls lockContainer(), 
0:      * and substitues it for the old locking policy.  The lockContainer call
0:      * determines which table lock to get (S or X), gets that table lock, and
0:      * then releases the row locks on the table.
0:      *
0:      * It is assumed that this is called on a open container for lock only.
0:      * <p>
0:      *
0:      * @param t            Transaction to associate lock with.
0:      * @param container    Container to lock.
0:      * @param waitForLock  Ignored - will never wait for a lock.
0:      * @param forUpdate    Ignored, mode determined from current lock state.
0:      *
0:      * @return true if the lock was obtained, false if it wasn't. 
0:      *   False should only be returned if the waitForLock policy was set to
0:      *  "false," and the lock was unavailable.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public boolean lockContainer(
0:     Transaction         t, 
0:     ContainerHandle     container, 
0:     boolean             waitForLock,
0:     boolean             forUpdate)
0: 		throws StandardException 
0:     {
0: 		forUpdate = false;
0: 
0:         // If an IX lock exists then escalate to X table lock, else escalate
0:         // to S table lock.
0: 		if (lf.isLockHeld(
0:                 t.getCompatibilitySpace(), t, 
0:                 container.getId(), ContainerLock.CIX))
0:         {
0: 			forUpdate = true;
0:         }
0: 
0:         // Get the new X or S table lock.
0: 		boolean gotLock = 
0:             super.lockContainer(t, container, waitForLock, forUpdate);
0: 
0: 		if (!gotLock)
0: 			return false;
0: 
0:         // now remove all matching ROW locks, this is done using the special
0:         // EscalateContainerKey() class which through the Matchable interface
0:         // only matches row locks of this container.
0: 		lf.unlockGroup(
0:             t.getCompatibilitySpace(), t, 
0:             new EscalateContainerKey(container.getId()));
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(
0:                 lf.isLockHeld(
0:                     t.getCompatibilitySpace(), t, 
0:                     container.getId(), 
0:                     (forUpdate ? ContainerLock.CX : ContainerLock.CS)),
0:                 "Covering table lock (" +
0:                 (forUpdate ? ContainerLock.CX : ContainerLock.CS) +
0:                 " is not held after lock escalation.");
0:         }
0: 
0: 		return true;
0: 	}
0: }
============================================================================