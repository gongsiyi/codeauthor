1:b2b30ec: /*
3:b2b30ec: 
1:b2b30ec:    Derby - Class org.apache.derby.impl.jdbc.LOBOutputStream
1:b2b30ec: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:b2b30ec: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:b2b30ec: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:b2b30ec: 
2:b2b30ec:  */
1:b2b30ec: package org.apache.derby.impl.jdbc;
1:b2b30ec: 
1:b2b30ec: import java.io.IOException;
1:b2b30ec: import java.io.OutputStream;
1:2333262: import org.apache.derby.iapi.error.StandardException;
1:2d1bc8f: import org.apache.derby.iapi.reference.MessageId;
1:b2b30ec: import org.apache.derby.iapi.reference.SQLState;
1:b2b30ec: import org.apache.derby.iapi.services.i18n.MessageService;
1:b175fd2: import org.apache.derby.iapi.error.ExceptionUtil;
1:b2b30ec: 
2:b2b30ec: /**
1:b2b30ec:  * This is an output stream built on top of LOBStreamControl.
1:b2b30ec:  * All the write methods are routed to LOBStreamControl.
1:b2b30ec:  */
1:b2b30ec: 
1:b2b30ec: public class LOBOutputStream extends OutputStream {
1:b2b30ec:     private boolean closed;
1:5d54436:     private final LOBStreamControl control;
1:b2b30ec:     private long pos;
1:b2b30ec: 
1:b2b30ec:     LOBOutputStream(LOBStreamControl control, long position) {
1:b2b30ec:         closed = false;
1:b2b30ec:         this.control = control;
1:b2b30ec:         pos = position;
3:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Writes the specified byte to this output stream. The general
1:b2b30ec:      * contract for <code>write</code> is that one byte is written
1:b2b30ec:      * to the output stream. The byte to be written is the eight
1:b2b30ec:      * low-order bits of the argument <code>b</code>. The 24
1:b2b30ec:      * high-order bits of <code>b</code> are ignored.
1:b2b30ec:      * <p>
1:b2b30ec:      * Subclasses of <code>OutputStream</code> must provide an
1:b2b30ec:      * implementation for this method.
2:b2b30ec:      *
1:b2b30ec:      * @param b   the <code>byte</code>.
1:b2b30ec:      * @exception IOException  if an I/O error occurs. In particular,
1:b2b30ec:      *             an <code>IOException</code> may be thrown if the
1:b2b30ec:      *             output stream has been closed.
1:b2b30ec:      */
1:b2b30ec:     public void write(int b) throws IOException {
2:b2b30ec:         if (closed)
2:b2b30ec:             throw new IOException (
1:2d1bc8f:                     MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
2:b2b30ec:         try {
2:b2b30ec:             pos = control.write(b, pos);
1:2333262:         } catch (StandardException se) {
1:ed0be21:             throw Util.newIOException(se);
1:b2b30ec:         }
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Writes <code>len</code> bytes from the specified byte array
1:b2b30ec:      * starting at offset <code>off</code> to this output stream.
1:b2b30ec:      * The general contract for <code>write(b, off, len)</code> is that
1:b2b30ec:      * some of the bytes in the array <code>b</code> are written to the
1:b2b30ec:      * output stream in order; element <code>b[off]</code> is the first
1:b2b30ec:      * byte written and <code>b[off+len-1]</code> is the last byte written
1:b2b30ec:      * by this operation.
1:b2b30ec:      * <p>
1:b2b30ec:      * The <code>write</code> method of <code>OutputStream</code> calls
1:b2b30ec:      * the write method of one argument on each of the bytes to be
1:b2b30ec:      * written out. Subclasses are encouraged to override this method and
1:b2b30ec:      * provide a more efficient implementation.
1:b2b30ec:      * <p>
1:b2b30ec:      * If <code>b</code> is <code>null</code>, a
1:b2b30ec:      * <code>NullPointerException</code> is thrown.
1:b2b30ec:      * <p>
1:b2b30ec:      * If <code>off</code> is negative, or <code>len</code> is negative, or
1:b2b30ec:      * <code>off+len</code> is greater than the length of the array
1:b2b30ec:      * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.
1:b2b30ec:      *
1:b2b30ec:      * @param b     the data.
1:b2b30ec:      * @param off   the start offset in the data.
1:b2b30ec:      * @param len   the number of bytes to write.
1:b2b30ec:      * @exception IOException  if an I/O error occurs. In particular,
1:b2b30ec:      *             an <code>IOException</code> is thrown if the output
1:b2b30ec:      *             stream is closed.
1:b2b30ec:      */
1:b2b30ec:     public void write(byte[] b, int off, int len) throws IOException {
1:b2b30ec:         if (closed)
1:b2b30ec:             throw new IOException (
1:2d1bc8f:                     MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
1:b2b30ec:         try {
1:b2b30ec:             pos = control.write(b, off, len, pos);
1:2333262:         } catch (StandardException se) {
1:1c589af:             if (se.getSQLState().equals(
1:1c589af:                     ExceptionUtil.getSQLStateFromIdentifier(
1:1c589af:                                             SQLState.BLOB_INVALID_OFFSET))) {
1:1c589af:                 throw new ArrayIndexOutOfBoundsException(se.getMessage());
1:1c589af:             }
1:ed0be21:             throw Util.newIOException(se);
1:b2b30ec:         }
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Closes this output stream and releases any system resources
1:b2b30ec:      * associated with this stream. The general contract of <code>close</code>
1:b2b30ec:      * is that it closes the output stream. A closed stream cannot perform
1:b2b30ec:      * output operations and cannot be reopened.
1:b2b30ec:      * <p>
1:b2b30ec:      * The <code>close</code> method of <code>OutputStream</code> does nothing.
1:b2b30ec:      *
2:b2b30ec:      * @exception IOException  if an I/O error occurs.
1:b2b30ec:      */
1:b2b30ec:     public void close() throws IOException {
1:b2b30ec:         closed = true;
1:b2b30ec:     }
1:b2b30ec: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:2d1bc8f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:                     MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
/////////////////////////////////////////////////////////////////////////
1:                     MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
commit:1c589af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (se.getSQLState().equals(
1:                     ExceptionUtil.getSQLStateFromIdentifier(
1:                                             SQLState.BLOB_INVALID_OFFSET))) {
1:                 throw new ArrayIndexOutOfBoundsException(se.getMessage());
1:             }
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1:      http://www.apache.org/licenses/LICENSE-2.0
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
commit:ffb9317
/////////////////////////////////////////////////////////////////////////
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.LOBOutputStream
1: 
0:    Copyright (c) 2006 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
0:       http://www.apache.org/licenses/LICENSE-2.0
1: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.jdbc;
1: 
0: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
0: import java.sql.SQLException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.shared.common.error.ExceptionUtil;
1: 
1: /**
1:  * This is an output stream built on top of LOBStreamControl.
1:  * All the write methods are routed to LOBStreamControl.
1:  */
1: 
1: public class LOBOutputStream extends OutputStream {
1:     private boolean closed;
0:     private LOBStreamControl control;
1:     private long pos;
1: 
1:     LOBOutputStream(LOBStreamControl control, long position) {
1:         closed = false;
1:         this.control = control;
1:         pos = position;
1:     }
1: 
1:     /**
1:      * Writes the specified byte to this output stream. The general
1:      * contract for <code>write</code> is that one byte is written
1:      * to the output stream. The byte to be written is the eight
1:      * low-order bits of the argument <code>b</code>. The 24
1:      * high-order bits of <code>b</code> are ignored.
1:      * <p>
1:      * Subclasses of <code>OutputStream</code> must provide an
1:      * implementation for this method.
1:      *
1:      * @param b   the <code>byte</code>.
1:      * @exception IOException  if an I/O error occurs. In particular,
1:      *             an <code>IOException</code> may be thrown if the
1:      *             output stream has been closed.
1:      */
1:     public void write(int b) throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                     MessageService.getTextMessage(
0:                         SQLState.LANG_STREAM_CLOSED));
1:         try {
1:             pos = control.write(b, pos);
0:         } catch (SQLException e) {
0:             throw  new IOException(e.getMessage());
1:         }
1:     }
1: 
1:     /**
1:      * Writes <code>len</code> bytes from the specified byte array
1:      * starting at offset <code>off</code> to this output stream.
1:      * The general contract for <code>write(b, off, len)</code> is that
1:      * some of the bytes in the array <code>b</code> are written to the
1:      * output stream in order; element <code>b[off]</code> is the first
1:      * byte written and <code>b[off+len-1]</code> is the last byte written
1:      * by this operation.
1:      * <p>
1:      * The <code>write</code> method of <code>OutputStream</code> calls
1:      * the write method of one argument on each of the bytes to be
1:      * written out. Subclasses are encouraged to override this method and
1:      * provide a more efficient implementation.
1:      * <p>
1:      * If <code>b</code> is <code>null</code>, a
1:      * <code>NullPointerException</code> is thrown.
1:      * <p>
1:      * If <code>off</code> is negative, or <code>len</code> is negative, or
1:      * <code>off+len</code> is greater than the length of the array
1:      * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.
1:      *
1:      * @param b     the data.
1:      * @param off   the start offset in the data.
1:      * @param len   the number of bytes to write.
1:      * @exception IOException  if an I/O error occurs. In particular,
1:      *             an <code>IOException</code> is thrown if the output
1:      *             stream is closed.
1:      */
1:     public void write(byte[] b, int off, int len) throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                     MessageService.getTextMessage(
0:                         SQLState.LANG_STREAM_CLOSED));
1:         try {
1:             pos = control.write(b, off, len, pos);
0:         } catch (SQLException e) {
0:              if (e.getSQLState().equals(
0:                     ExceptionUtil.getSQLStateFromIdentifier(
0:                                   SQLState.BLOB_INVALID_OFFSET)))
0:                     throw new ArrayIndexOutOfBoundsException (e.getMessage());
0:             throw new IOException(e.getMessage());
1:         }
1:     }
1: 
1:     /**
0:      * Writes <code>b.length</code> bytes from the specified byte array
0:      * to this output stream. The general contract for <code>write(b)</code>
0:      * is that it should have exactly the same effect as the call
0:      * <code>write(b, 0, b.length)</code>.
1:      *
0:      * @param b   the data.
1:      * @exception IOException  if an I/O error occurs.
0:      * @see java.io.OutputStream#write(byte[], int, int)
1:      */
0:     public void write(byte[] b) throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                     MessageService.getTextMessage(
0:                         SQLState.LANG_STREAM_CLOSED));
1:         try {
1:             pos = control.write(b, pos);
0:         } catch (SQLException e) {
0:             throw new IOException(e.getMessage());
1:         }
1:     }
1: 
1:     /**
1:      * Closes this output stream and releases any system resources
1:      * associated with this stream. The general contract of <code>close</code>
1:      * is that it closes the output stream. A closed stream cannot perform
1:      * output operations and cannot be reopened.
1:      * <p>
1:      * The <code>close</code> method of <code>OutputStream</code> does nothing.
1:      *
1:      * @exception IOException  if an I/O error occurs.
1:      */
1:     public void close() throws IOException {
1:         closed = true;
1:     }
1: }
author:Lily Wei
-------------------------------------------------------------------------------
commit:b175fd2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.ExceptionUtil;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ed0be21
/////////////////////////////////////////////////////////////////////////
1:             throw Util.newIOException(se);
/////////////////////////////////////////////////////////////////////////
1:             throw Util.newIOException(se);
commit:5d54436
/////////////////////////////////////////////////////////////////////////
1:     private final LOBStreamControl control;
commit:2333262
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:         } catch (StandardException se) {
0:             throw new IOException (se.getMessage());
/////////////////////////////////////////////////////////////////////////
1:         } catch (StandardException se) {
0:             throw new IOException (se.getMessage());
commit:2420903
/////////////////////////////////////////////////////////////////////////
============================================================================