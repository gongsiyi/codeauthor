1:3455c75: /*
1:3455c75: 
1:3455c75:    Derby - Class org.apache.derbyBuild.JiraConnector
1:3455c75: 
1:3455c75:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3455c75:    contributor license agreements.  See the NOTICE file distributed with
1:3455c75:    this work for additional information regarding copyright ownership.
1:3455c75:    The ASF licenses this file to You under the Apache License, Version 2.0
1:3455c75:    (the "License"); you may not use this file except in compliance with
1:3455c75:    the License.  You may obtain a copy of the License at
1:3455c75: 
1:3455c75:      http://www.apache.org/licenses/LICENSE-2.0
1:3455c75: 
1:3455c75:   Unless required by applicable law or agreed to in writing, software
1:3455c75:   distributed under the License is distributed on an "AS IS" BASIS,
1:3455c75:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3455c75:   See the License for the specific language governing permissions and
1:3455c75:   limitations under the License.
1:3455c75: 
1:3455c75:  */
1:3455c75: 
1:3455c75: package org.apache.derbyBuild;
1:3455c75: 
1:3455c75: /*
1:3455c75:  * class that will build an xml file based on the xml jira reports. 
1:3455c75:  */
1:3455c75: 
1:3455c75: import java.io.BufferedReader;
1:3455c75: import java.io.File;
1:3455c75: import java.io.FileInputStream;
1:3455c75: import java.io.FileWriter;
1:3455c75: import java.io.IOException;
1:3455c75: import java.io.InputStream;
1:3455c75: import java.io.InputStreamReader;
1:3455c75: import java.net.MalformedURLException;
1:3455c75: import java.net.URL;
1:3455c75: import java.net.URLConnection;
1:3455c75: 
1:3455c75: public class JiraConnector {
1:3455c75: 	static String filePath=null;
1:3455c75: 	// filenames of files to be created.
1:3455c75: 	static String fixedBugsListFileName="fixedBugsList.xml";
1:3455c75: 	static String releaseNotesListFileName="ReleaseNotesList.xml";
1:e474d73: 	static String allJiraListFileName="all_JIRA_ISSUES.xml";
1:e474d73: 
1:3455c75:     
1:3455c75: 	public static String jira_releaseNotesSource =
1:3455c75: 		"http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss" +
1:3455c75: 		"&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=50" +
1:3455c75: 		"&reset=true&decorator=none&customfield_12310090=" +
1:3455c75: 		"Existing+Application+Impact&customfield_12310090=Release+Note+Needed";
1:3455c75: 
1:3455c75: 	public static String jira_fixedBugsSource =
1:3455c75: 		"http://issues.apache.org/jira/sr/jira.issueviews:" +
1:3455c75: 		"searchrequest-xml/temp/SearchRequest.xml?&pid=10594&resolution=1&" +
1:3455c75: 		"fixVersion=10.3.0.0&sorter/field=issuekey&sorter/order=DESC&" +
1:3455c75: 		"tempMax=1000&reset=true&decorator=none";
1:e474d73: 
1:3c41a44: 	public static String jira_allBugsSource= "https://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=6000&reset=true&decorator=none";
1:3455c75: 
1:3455c75: 	// other urls to some cute jira reports in xml.
1:3455c75: 	// all 
1:3455c75: 	//  (warning: avoid using this - it's tough on apache infrastructure.
1:3455c75: 	//  public static String jira_report="http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=5000&reset=true&decorator=none";
1:3455c75: 	// all open bugs
1:3455c75: 	//  public static String jira_BUG_OPEN="http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&types=1&statusIds=1&sorter/field=issuekey&sorter/order=DESC&tempMax=1000&reset=true&decorator=none";
1:3455c75: 	// one bug - the following two would be joined with in the middle a string like 
1:3455c75: 	// 'DERBY-225' to make the http to get xml for 1 bug.
1:3455c75: 	//  public static String onejirabegin="http://issues.apache.org/jira/browse/"; // 
1:3455c75: 	//  public static String onejiraend="?decorator=none&view=rss";
1:3455c75: 
1:3455c75: 	public static void main(String[] args) {
1:3455c75: 		try{
1:e474d73: 			if (args.length > 0 && args[0].equals("all"))
1:e474d73: 				// don't use this too often it is hard on Apache infrastructure.
1:e474d73: 				refreshJiraIssues(allJiraListFileName, jira_allBugsSource);
1:e474d73: 			else {
1:e474d73: 				refreshJiraIssues(fixedBugsListFileName, jira_fixedBugsSource);
1:e474d73: 				refreshJiraIssues(releaseNotesListFileName, jira_releaseNotesSource);
1:e474d73: 			}
1:3455c75: 		}catch(IOException ex){
1:3455c75: 			ex.printStackTrace();
1:3455c75: 		}catch(Exception exe){
1:3455c75: 			exe.printStackTrace();
1:3455c75: 		}
1:3455c75: 	}
1:3455c75: 
1:3455c75: 	public static void refreshJiraIssues(String fileName, String stream) throws Exception {
1:3455c75: 		String sep = System.getProperty("file.separator");
1:3455c75: 		filePath = System.getProperty("user.dir") + sep + fileName; 
1:3455c75: 		getXMLStreamAndFile(fileName, stream);
1:3455c75: 	}
1:3455c75: 
1:3455c75: 	private static void getXMLStreamAndFile(String fileName, String stream) throws IOException {
1:3455c75: 		FileInputStream fins=null;
1:3455c75: 		String XMLurl = stream;
1:3455c75: 		try{
1:3455c75: 			BufferedReader in = 
1:3455c75: 				new BufferedReader( new InputStreamReader(getXMLStream(XMLurl)));
1:3455c75: 			String inputLine;
1:3455c75: 			File file=new File(filePath);
1:3455c75: 			FileWriter fw=new FileWriter(file);
1:3455c75: 			while ((inputLine = in.readLine()) != null)
1:3455c75: 			{
1:3455c75: 				fw.write(inputLine);
1:3455c75: 			}
1:3455c75: 			in.close();
1:3455c75: 			fw.close();
1:3455c75: 			System.out.println("A new Jira XML File created: "+file);
1:3455c75: 		}catch(IOException e){
1:3455c75: 			//e.printStackTrace();
1:3455c75: 			throw e;
1:3455c75: 		}
1:3455c75: 	}
1:3455c75: 
1:3455c75: 	public static InputStream getXMLStream(String XMLurl) throws MalformedURLException, IOException {
1:3455c75: 		URL url= new URL(XMLurl);
1:3455c75: 		System.out.println("Accessing url: " + XMLurl);
1:3455c75: 		URLConnection jiraSite = url.openConnection();
1:3455c75: 		return jiraSite.getInputStream();
1:3455c75: 	}
1:3455c75: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:3c41a44
/////////////////////////////////////////////////////////////////////////
1: 	public static String jira_allBugsSource= "https://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=6000&reset=true&decorator=none";
commit:e474d73
/////////////////////////////////////////////////////////////////////////
1: 	static String allJiraListFileName="all_JIRA_ISSUES.xml";
1:     
/////////////////////////////////////////////////////////////////////////
0: 	public static String jira_allBugsSource= "http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=6000&reset=true&decorator=none";
1: 
/////////////////////////////////////////////////////////////////////////
1: 			if (args.length > 0 && args[0].equals("all"))
1: 				// don't use this too often it is hard on Apache infrastructure.
1: 				refreshJiraIssues(allJiraListFileName, jira_allBugsSource);
1: 			else {
1: 				refreshJiraIssues(fixedBugsListFileName, jira_fixedBugsSource);
1: 				refreshJiraIssues(releaseNotesListFileName, jira_releaseNotesSource);
1: 			}
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:3455c75
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.JiraConnector
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:   Unless required by applicable law or agreed to in writing, software
1:   distributed under the License is distributed on an "AS IS" BASIS,
1:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:   See the License for the specific language governing permissions and
1:   limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyBuild;
1: 
1: /*
1:  * class that will build an xml file based on the xml jira reports. 
1:  */
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.net.URLConnection;
1: 
1: public class JiraConnector {
1: 	static String filePath=null;
1: 	// filenames of files to be created.
1: 	static String fixedBugsListFileName="fixedBugsList.xml";
1: 	static String releaseNotesListFileName="ReleaseNotesList.xml";
1: 
1: 	public static String jira_releaseNotesSource =
1: 		"http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss" +
1: 		"&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=50" +
1: 		"&reset=true&decorator=none&customfield_12310090=" +
1: 		"Existing+Application+Impact&customfield_12310090=Release+Note+Needed";
1: 
1: 	public static String jira_fixedBugsSource =
1: 		"http://issues.apache.org/jira/sr/jira.issueviews:" +
1: 		"searchrequest-xml/temp/SearchRequest.xml?&pid=10594&resolution=1&" +
1: 		"fixVersion=10.3.0.0&sorter/field=issuekey&sorter/order=DESC&" +
1: 		"tempMax=1000&reset=true&decorator=none";
1: 
1: 	// other urls to some cute jira reports in xml.
1: 	// all 
1: 	//  (warning: avoid using this - it's tough on apache infrastructure.
1: 	//  public static String jira_report="http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&sorter/field=issuekey&sorter/order=DESC&tempMax=5000&reset=true&decorator=none";
1: 	// all open bugs
1: 	//  public static String jira_BUG_OPEN="http://issues.apache.org/jira/secure/IssueNavigator.jspa?view=rss&pid=10594&types=1&statusIds=1&sorter/field=issuekey&sorter/order=DESC&tempMax=1000&reset=true&decorator=none";
1: 	// one bug - the following two would be joined with in the middle a string like 
1: 	// 'DERBY-225' to make the http to get xml for 1 bug.
1: 	//  public static String onejirabegin="http://issues.apache.org/jira/browse/"; // 
1: 	//  public static String onejiraend="?decorator=none&view=rss";
1: 
1: 	public static void main(String[] args) {
1: 		try{
0: 			refreshJiraIssues(fixedBugsListFileName, jira_fixedBugsSource);
0: 			refreshJiraIssues(releaseNotesListFileName, jira_releaseNotesSource);
1: 		}catch(IOException ex){
1: 			ex.printStackTrace();
1: 		}catch(Exception exe){
1: 			exe.printStackTrace();
1: 		}
1: 	}
1: 
1: 	public static void refreshJiraIssues(String fileName, String stream) throws Exception {
1: 		String sep = System.getProperty("file.separator");
1: 		filePath = System.getProperty("user.dir") + sep + fileName; 
1: 		getXMLStreamAndFile(fileName, stream);
1: 	}
1: 
1: 	private static void getXMLStreamAndFile(String fileName, String stream) throws IOException {
1: 		FileInputStream fins=null;
1: 		String XMLurl = stream;
1: 		try{
1: 			BufferedReader in = 
1: 				new BufferedReader( new InputStreamReader(getXMLStream(XMLurl)));
1: 			String inputLine;
1: 			File file=new File(filePath);
1: 			FileWriter fw=new FileWriter(file);
1: 			while ((inputLine = in.readLine()) != null)
1: 			{
1: 				fw.write(inputLine);
1: 			}
1: 			in.close();
1: 			fw.close();
1: 			System.out.println("A new Jira XML File created: "+file);
1: 		}catch(IOException e){
1: 			//e.printStackTrace();
1: 			throw e;
1: 		}
1: 	}
1: 
1: 	public static InputStream getXMLStream(String XMLurl) throws MalformedURLException, IOException {
1: 		URL url= new URL(XMLurl);
1: 		System.out.println("Accessing url: " + XMLurl);
1: 		URLConnection jiraSite = url.openConnection();
1: 		return jiraSite.getInputStream();
1: 	}
1: }
============================================================================