1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
17:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.StatementType;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:3bb140c: import org.apache.derby.iapi.sql.conn.Authorizer;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:c45f5b1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.impl.sql.execute.ConstraintInfo;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A FKConstraintDefintionNode represents table constraint definitions.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class FKConstraintDefinitionNode extends ConstraintDefinitionNode
1:eac0369: {
1:eac0369: 	TableName 			refTableName;
1:eac0369: 	ResultColumnList	refRcl;
1:eac0369: 	SchemaDescriptor	refTableSd;
1:eac0369: 	int                 refActionDeleteRule;  // referential action on  delete
1:eac0369: 	int                 refActionUpdateRule;  // referential action on update
1:eac0369: 
1:3bb140c:     FKConstraintDefinitionNode(
1:3bb140c:         TableName           constraintName,
1:3bb140c:         TableName           refTableName,
1:3bb140c:         ResultColumnList    fkRcl,
1:3bb140c:         ResultColumnList    refRcl,
1:3bb140c:         int[]               refActions,
1:3bb140c:         ContextManager      cm)
1:3bb140c: 	{
1:3bb140c:         super(constraintName,
1:3bb140c:               DataDictionary.FOREIGNKEY_CONSTRAINT,
1:3bb140c:               fkRcl,
1:3bb140c:               null,
1:3bb140c:               null,
1:3bb140c:               null,
1:3bb140c:               StatementType.DROP_DEFAULT,
1:3bb140c:               DataDictionary.DROP_CONSTRAINT,
1:3bb140c:               cm);
1:3bb140c: 
1:3bb140c:         this.refRcl = refRcl;
1:3bb140c:         this.refTableName = refTableName;
1:3bb140c: 
1:3bb140c:         this.refActionDeleteRule = refActions[0];
1:3bb140c:         this.refActionUpdateRule = refActions[1];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this constraint definition.  Figure out some
1:eac0369: 	 * information about the table we are binding against.
1:eac0369: 	 *
1:6b50965: 	 * @param dd DataDictionary
1:eac0369: 	 * 
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:9f2ed7d:     void bind(DDLStatementNode ddlNode, DataDictionary dd) throws StandardException
1:eac0369: 	{
1:eac0369: 		super.bind(ddlNode, dd);
1:eac0369: 
1:eac0369: 		refTableSd = getSchemaDescriptor(refTableName.getSchemaName());
1:eac0369: 
1:eac0369: 		if (refTableSd.isSystemSchema())
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_NO_FK_ON_SYSTEM_SCHEMA);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// check the referenced table, unless this is a self-referencing constraint
1:c45f5b1: 		if (refTableName.equals(ddlNode.getObjectName()))
1:c45f5b1: 			return;
1:eac0369: 
1:c45f5b1: 		// error when the referenced table does not exist
1:c45f5b1: 		TableDescriptor td = getTableDescriptor(refTableName.getTableName(), refTableSd);
1:c45f5b1: 		if (td == null)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_INVALID_FK_NO_REF_TAB, 
1:eac0369: 												getConstraintMoniker(), 
1:eac0369: 												refTableName.getTableName());
1:eac0369: 
1:c45f5b1: 		// Verify if REFERENCES_PRIV is granted to columns referenced
1:c45f5b1: 		getCompilerContext().pushCurrentPrivType(getPrivType());
1:eac0369: 
1:3038d98: 		// Indicate that this statement has a dependency on the
1:3038d98: 		// table which is referenced by this foreign key:
1:3038d98: 		getCompilerContext().createDependency(td);
1:3038d98: 
1:c45f5b1: 		// If references clause doesn't have columnlist, get primary key info
1:c45f5b1: 		if (refRcl.size()==0 && (td.getPrimaryKey() != null))
1:eac0369: 		{
1:c45f5b1: 			// Get the primary key columns
1:c45f5b1: 			int[] refCols = td.getPrimaryKey().getReferencedColumns();
1:c45f5b1: 			for (int i=0; i<refCols.length; i++)
1:eac0369: 			{
1:c45f5b1: 				ColumnDescriptor cd = td.getColumnDescriptor(refCols[i]);
1:c45f5b1: 				// Set tableDescriptor for this column descriptor. Needed for adding required table
1:c45f5b1: 				// access permission. Column descriptors may not have this set already.
1:c45f5b1: 				cd.setTableDescriptor(td);
1:2d2e717: 				if (isPrivilegeCollectionRequired())
1:2d2e717: 					getCompilerContext().addRequiredColumnPriv(cd);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		}
1:c45f5b1: 		else
1:c45f5b1: 		{
1:e1f49ca:             for (ResultColumn rc : refRcl)
1:c45f5b1: 			{
1:c45f5b1: 				ColumnDescriptor cd = td.getColumnDescriptor(rc.getName());
1:c45f5b1: 				if (cd != null)
1:c45f5b1: 				{
1:c45f5b1: 					// Set tableDescriptor for this column descriptor. Needed for adding required table
1:c45f5b1: 					// access permission. Column descriptors may not have this set already.
1:c45f5b1: 					cd.setTableDescriptor(td);
1:2d2e717: 					if (isPrivilegeCollectionRequired())
1:2d2e717: 						getCompilerContext().addRequiredColumnPriv(cd);
1:c45f5b1: 				}
1:c45f5b1: 			}
1:c45f5b1: 		}
1:c45f5b1: 		getCompilerContext().popCurrentPrivType();
1:c45f5b1: 	}
1:eac0369: 
1:3bb140c:     ConstraintInfo getReferencedConstraintInfo()
1:c45f5b1: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(refTableSd != null, 
1:eac0369: 					"You must call bind() before calling getConstraintInfo");
1:eac0369: 		}
1:eac0369: 		return new ConstraintInfo(refTableName.getTableName(), refTableSd,
1:eac0369: 								  refRcl.getColumnNames(), refActionDeleteRule,
1:eac0369: 								  refActionUpdateRule);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public	TableName	getRefTableName() { return refTableName; }
1:eac0369: 
1:c45f5b1: 	int getPrivType()
1:c45f5b1: 	{
1:c45f5b1: 		return Authorizer.REFERENCES_PRIV;
1:eac0369: 	}
1:69f8afa: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (refTableName != null) {
1:69f8afa:             refTableName = (TableName) refTableName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:c45f5b1: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (refTableName != null) {
1:             refTableName = (TableName) refTableName.accept(v);
1:         }
1:     }
commit:9f2ed7d
/////////////////////////////////////////////////////////////////////////
1:     void bind(DDLStatementNode ddlNode, DataDictionary dd) throws StandardException
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:3038d98
/////////////////////////////////////////////////////////////////////////
1: 		// Indicate that this statement has a dependency on the
1: 		// table which is referenced by this foreign key:
1: 		getCompilerContext().createDependency(td);
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:             for (ResultColumn rc : refRcl)
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     FKConstraintDefinitionNode(
1:         TableName           constraintName,
1:         TableName           refTableName,
1:         ResultColumnList    fkRcl,
1:         ResultColumnList    refRcl,
1:         int[]               refActions,
1:         ContextManager      cm)
1: 	{
1:         super(constraintName,
1:               DataDictionary.FOREIGNKEY_CONSTRAINT,
1:               fkRcl,
1:               null,
1:               null,
1:               null,
1:               StatementType.DROP_DEFAULT,
1:               DataDictionary.DROP_CONSTRAINT,
1:               cm);
0:         setNodeType(C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE);
1: 
1:         this.refRcl = refRcl;
1:         this.refTableName = refTableName;
1: 
1:         this.refActionDeleteRule = refActions[0];
1:         this.refActionUpdateRule = refActions[1];
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     ConstraintInfo getReferencedConstraintInfo()
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param dd DataDictionary
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 				if (isPrivilegeCollectionRequired())
1: 					getCompilerContext().addRequiredColumnPriv(cd);
/////////////////////////////////////////////////////////////////////////
1: 					if (isPrivilegeCollectionRequired())
1: 						getCompilerContext().addRequiredColumnPriv(cd);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: import org.apache.derby.impl.sql.execute.ConstraintInfo;
1: 
0: import org.apache.derby.iapi.util.JBitSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
0: import org.apache.derby.iapi.sql.dictionary.DDUtils;
1: 
1: /**
1:  * A FKConstraintDefintionNode represents table constraint definitions.
1:  *
0:  * @author jamie
1:  */
1: 
1: public final class FKConstraintDefinitionNode extends ConstraintDefinitionNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	TableName 			refTableName;
1: 	ResultColumnList	refRcl;
1: 	SchemaDescriptor	refTableSd;
1: 	int                 refActionDeleteRule;  // referential action on  delete
1: 	int                 refActionUpdateRule;  // referential action on update
0: 	public void init(
0: 						Object 			constraintName, 
0: 						Object 			refTableName, 
0: 						Object			fkRcl,
0: 						Object			refRcl,
0: 						Object          refActions)
1: 	{
0: 		super.init(
0: 				constraintName,
0: 				ReuseFactory.getInteger(DataDictionary.FOREIGNKEY_CONSTRAINT),
0: 				fkRcl, 
0: 				null,
0: 				null,
0: 				null);
0: 		this.refRcl = (ResultColumnList) refRcl;
0: 		this.refTableName = (TableName) refTableName;
1: 
0: 		this.refActionDeleteRule = ((int[]) refActions)[0];
0: 		this.refActionUpdateRule = ((int[]) refActions)[1];
1: 	}
1: 
1: 	/**
1: 	 * Bind this constraint definition.  Figure out some
1: 	 * information about the table we are binding against.
1: 	 *
0: 	 * @param DataDictionary the dd
1: 	 * 
1: 	 * @exception StandardException on error
1: 	 */
0: 	protected void bind(DDLStatementNode ddlNode, DataDictionary dd)	throws StandardException
1: 	{
1: 
1: 		super.bind(ddlNode, dd);
1: 
1: 		refTableSd = getSchemaDescriptor(refTableName.getSchemaName());
1: 
1: 		if (refTableSd.isSystemSchema())
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_NO_FK_ON_SYSTEM_SCHEMA);
1: 		}
1: 
1: 		// check the referenced table, unless this is a self-referencing constraint
0: 		if (!refTableName.equals(ddlNode.getObjectName())) {
1: 
0: 			// clear error when the referenced table does not exist
0: 			if (getTableDescriptor(refTableName.getTableName(), refTableSd) == null)
1: 				throw StandardException.newException(SQLState.LANG_INVALID_FK_NO_REF_TAB, 
1: 												getConstraintMoniker(), 
1: 												refTableName.getTableName());
1: 			
0: 			// now check any other limitations
0: 			ddlNode.getTableDescriptor(refTableName);
1: 		}
1: 	}
1: 
0: 	public ConstraintInfo getReferencedConstraintInfo()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(refTableSd != null, 
1: 					"You must call bind() before calling getConstraintInfo");
1: 		}
1: 		return new ConstraintInfo(refTableName.getTableName(), refTableSd,
1: 								  refRcl.getColumnNames(), refActionDeleteRule,
1: 								  refActionUpdateRule);
1: 	}
1: 
1: 	public	TableName	getRefTableName() { return refTableName; }
1: 
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.conn.Authorizer;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		if (refTableName.equals(ddlNode.getObjectName()))
1: 			return;
1: 		// error when the referenced table does not exist
1: 		TableDescriptor td = getTableDescriptor(refTableName.getTableName(), refTableSd);
1: 		if (td == null)
0: 			throw StandardException.newException(SQLState.LANG_INVALID_FK_NO_REF_TAB, 
0: 
1: 		// Verify if REFERENCES_PRIV is granted to columns referenced
1: 		getCompilerContext().pushCurrentPrivType(getPrivType());
0: 
1: 		// If references clause doesn't have columnlist, get primary key info
1: 		if (refRcl.size()==0 && (td.getPrimaryKey() != null))
1: 		{
1: 			// Get the primary key columns
1: 			int[] refCols = td.getPrimaryKey().getReferencedColumns();
1: 			for (int i=0; i<refCols.length; i++)
1: 			{
1: 				ColumnDescriptor cd = td.getColumnDescriptor(refCols[i]);
1: 				// Set tableDescriptor for this column descriptor. Needed for adding required table
1: 				// access permission. Column descriptors may not have this set already.
1: 				cd.setTableDescriptor(td);
0: 				getCompilerContext().addRequiredColumnPriv(cd);
1: 			}
0: 
1: 		else
1: 		{
0: 			for (int i=0; i<refRcl.size(); i++)
1: 			{
0: 				ResultColumn rc = (ResultColumn) refRcl.elementAt(i);
1: 				ColumnDescriptor cd = td.getColumnDescriptor(rc.getName());
1: 				if (cd != null)
1: 				{
1: 					// Set tableDescriptor for this column descriptor. Needed for adding required table
1: 					// access permission. Column descriptors may not have this set already.
1: 					cd.setTableDescriptor(td);
0: 					getCompilerContext().addRequiredColumnPriv(cd);
1: 				}
1: 			}
1: 		}
1: 		getCompilerContext().popCurrentPrivType();
/////////////////////////////////////////////////////////////////////////
1: 	int getPrivType()
0: 	{
1: 		return Authorizer.REFERENCES_PRIV;
1: 	}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.ConstraintInfo;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
0: import org.apache.derby.iapi.sql.dictionary.DDUtils;
0: 
0: /**
0:  * A FKConstraintDefintionNode represents table constraint definitions.
0:  *
0:  * @author jamie
0:  */
0: 
0: public final class FKConstraintDefinitionNode extends ConstraintDefinitionNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	TableName 			refTableName;
0: 	ResultColumnList	refRcl;
0: 	SchemaDescriptor	refTableSd;
0: 	int                 refActionDeleteRule;  // referential action on  delete
0: 	int                 refActionUpdateRule;  // referential action on update
0: 	public void init(
0: 						Object 			constraintName, 
0: 						Object 			refTableName, 
0: 						Object			fkRcl,
0: 						Object			refRcl,
0: 						Object          refActions)
0: 	{
0: 		super.init(
0: 				constraintName,
0: 				ReuseFactory.getInteger(DataDictionary.FOREIGNKEY_CONSTRAINT),
0: 				fkRcl, 
0: 				null,
0: 				null,
0: 				null);
0: 		this.refRcl = (ResultColumnList) refRcl;
0: 		this.refTableName = (TableName) refTableName;
0: 
0: 		this.refActionDeleteRule = ((int[]) refActions)[0];
0: 		this.refActionUpdateRule = ((int[]) refActions)[1];
0: 	}
0: 
0: 	/**
0: 	 * Bind this constraint definition.  Figure out some
0: 	 * information about the table we are binding against.
0: 	 *
0: 	 * @param DataDictionary the dd
0: 	 * 
0: 	 * @exception StandardException on error
0: 	 */
0: 	protected void bind(DDLStatementNode ddlNode, DataDictionary dd)	throws StandardException
0: 	{
0: 
0: 		super.bind(ddlNode, dd);
0: 
0: 		refTableSd = getSchemaDescriptor(refTableName.getSchemaName());
0: 
0: 		if (refTableSd.isSystemSchema())
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_NO_FK_ON_SYSTEM_SCHEMA);
0: 		}
0: 
0: 		// check the referenced table, unless this is a self-referencing constraint
0: 		if (!refTableName.equals(ddlNode.getObjectName())) {
0: 
0: 			// clear error when the referenced table does not exist
0: 			if (getTableDescriptor(refTableName.getTableName(), refTableSd) == null)
0: 				throw StandardException.newException(SQLState.LANG_INVALID_FK_NO_REF_TAB, 
0: 												getConstraintMoniker(), 
0: 												refTableName.getTableName());
0: 			
0: 			// now check any other limitations
0: 			ddlNode.getTableDescriptor(refTableName);
0: 		}
0: 	}
0: 
0: 	public ConstraintInfo getReferencedConstraintInfo()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(refTableSd != null, 
0: 					"You must call bind() before calling getConstraintInfo");
0: 		}
0: 		return new ConstraintInfo(refTableName.getTableName(), refTableSd,
0: 								  refRcl.getColumnNames(), refActionDeleteRule,
0: 								  refActionUpdateRule);
0: 	}
0: 
0: 	public	TableName	getRefTableName() { return refTableName; }
0: 
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================