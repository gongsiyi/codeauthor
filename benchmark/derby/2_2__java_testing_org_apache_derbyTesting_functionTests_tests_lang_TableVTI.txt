1:33521af: /*
1:33521af: 
1:33521af: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.TableVTI
1:33521af: 
1:33521af: Licensed to the Apache Software Foundation (ASF) under one or more
1:33521af: contributor license agreements.  See the NOTICE file distributed with
1:33521af: this work for additional information regarding copyright ownership.
1:33521af: The ASF licenses this file to You under the Apache License, Version 2.0
1:33521af: (the "License"); you may not use this file except in compliance with
1:33521af: the License.  You may obtain a copy of the License at
1:33521af: 
1:33521af:    http://www.apache.org/licenses/LICENSE-2.0
1:33521af: 
1:33521af: Unless required by applicable law or agreed to in writing, software
1:33521af: distributed under the License is distributed on an "AS IS" BASIS,
1:33521af: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33521af: See the License for the specific language governing permissions and
1:33521af: limitations under the License.
1:33521af: 
1:33521af: */
1:33521af: 
1:33521af: package org.apache.derbyTesting.functionTests.tests.lang;
1:33521af: 
1:890e5d2: import java.io.InputStream;
1:890e5d2: import java.io.Reader;
1:33521af: import java.sql.Connection;
1:33521af: import java.sql.Statement;
1:33521af: import java.sql.ResultSet;
1:33521af: import java.sql.ResultSetMetaData;
1:33521af: import java.sql.SQLException;
1:33521af: import java.sql.SQLWarning;
1:33521af: import java.math.BigDecimal;
1:33521af: import java.sql.DriverManager;
1:33521af: import java.net.URL;
1:33521af: import java.util.Calendar;
1:33521af: import java.sql.Ref;
1:33521af: import java.sql.Blob;
1:33521af: import java.sql.Clob;
1:33521af: import java.sql.Array;
1:890e5d2: import java.sql.NClob;
1:890e5d2: import java.sql.RowId;
1:890e5d2: import java.sql.SQLXML;
1:5b90cf1: import org.apache.derbyTesting.junit.JDBC;
1:33521af: 
1:33521af: /**
1:33521af:     This class has been adapted from org.apache.derby.vti.VTITemplate 
1:33521af:     because we do not want a test to depend on an engine class.
1:33521af:    
1:33521af:     This class implements most of the methods of the JDBC 1.2 interface java.sql.ResultSet,
1:33521af:     each one throwing a  SQLException with the name of the method. 
1:33521af:     A concrete subclass can then just implement the methods not implemented here 
1:33521af:     and override any methods it needs to implement for correct functionality.
1:33521af:     <P>
1:33521af:     The methods not implemented here are
1:33521af:     <UL>
1:33521af:     <LI>next()
1:33521af:     <LI>close()
1:33521af:     <LI>getMetaData()
1:33521af:     </UL>
1:33521af:     <P>
1:33521af: 
1:33521af:     For virtual tables the database engine only calls methods defined
1:33521af:     in the JDBC 1.2 definition of java.sql.ResultSet.
1:33521af:     <BR>
1:33521af:     Classes that implement a JDBC 2.0 conformant java.sql.ResultSet can be used
1:33521af:     as virtual tables.
1:33521af: */
1:33521af: public abstract class TableVTI implements ResultSet {
1:33521af:     
1:33521af:     private String tableName;
1:33521af:     private ResultSetMetaData rsmd ;
1:33521af:     private int[] map;
1:33521af:     public TableVTI(String tableName) throws SQLException {
1:33521af:         this.tableName = tableName;
1:33521af:         init();
1:33521af:     }
1:33521af:     
1:33521af:     protected void init() throws SQLException {
1:33521af:         Connection conn = DriverManager
1:33521af:         .getConnection("jdbc:default:connection");
1:33521af:         Statement s = conn.createStatement();
1:5b90cf1:         ResultSet rs = s.executeQuery("select * from " + JDBC.escape(tableName)
1:33521af:                 + " where 1 = 0 ");
1:33521af:         rsmd = rs.getMetaData();
1:33521af:         rs.close();
1:33521af:         s.close();
1:33521af:         
1:33521af:         map = getColumnMap(getVTIColumnNames());
1:33521af:     }
1:33521af:     
1:33521af:     public final ResultSetMetaData getMetaData() {
1:33521af:         return rsmd;
1:33521af:     }
1:33521af:     
1:33521af:     public final void close() {
1:33521af:     }
1:33521af:     
1:33521af:     protected int[] getColumnMap(String[] vtiNames) throws SQLException {
1:33521af:         
1:33521af:         if (vtiNames == null)
1:33521af:             return null;
1:33521af:         
1:33521af:         int[] map = new int[vtiNames.length];
1:33521af:         int count = rsmd.getColumnCount();
1:33521af:         
1:33521af:         outer: for (int i = 0; i < vtiNames.length; i++) {
1:33521af:             
1:33521af:             String vtiCol = vtiNames[i];
1:33521af:             if (vtiCol == null)
1:33521af:                 continue outer;
1:33521af:             ;
1:33521af:             
1:33521af:             for (int j = 1; j <= count; j++) {
1:33521af:                 if (vtiCol.equalsIgnoreCase(rsmd.getColumnName(j))) {
1:33521af:                     map[i] = j;
1:33521af:                     continue outer;
1:33521af:                 }
1:33521af:             }
1:33521af:         }
1:33521af:         
1:33521af:         return map;
1:33521af:     }
1:33521af:     
1:33521af:     protected String[] getVTIColumnNames() {
1:33521af:         return null;
1:33521af:     }
1:33521af:     
1:33521af:     //
1:33521af:     // java.sql.ResultSet calls, passed through to our result set.
1:33521af:     //
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean wasNull() throws SQLException {
1:33521af:         throw new SQLException("wasNull");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public String getString(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getString");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean getBoolean(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getBoolean");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public byte getByte(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getByte");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public short getShort(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getShort");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getInt(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getInt");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public long getLong(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getLong");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public float getFloat(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getFloat");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public double getDouble(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getDouble");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:2510115:     @Deprecated
1:33521af:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
1:33521af:         throw new SQLException("getBigDecimal");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public byte[] getBytes(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getBytes");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Date getDate(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getDate");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Time getTime(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getTime");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getTimestamp");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getAsciiStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:2510115:     @Deprecated
1:33521af:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getUnicodeStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.io.InputStream getBinaryStream(int columnIndex)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getBinaryStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public String getString(String columnName) throws SQLException {
1:33521af:         return getString(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean getBoolean(String columnName) throws SQLException {
1:33521af:         return getBoolean(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public byte getByte(String columnName) throws SQLException {
1:33521af:         return getByte(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public short getShort(String columnName) throws SQLException {
1:33521af:         return getShort(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getInt(String columnName) throws SQLException {
1:33521af:         return getInt(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public long getLong(String columnName) throws SQLException {
1:33521af:         return getLong(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public float getFloat(String columnName) throws SQLException {
1:33521af:         return getFloat(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public double getDouble(String columnName) throws SQLException {
1:33521af:         return getDouble(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:2510115:     @Deprecated
1:33521af:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
1:33521af:         return getBigDecimal(findColumn(columnName), scale);
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public byte[] getBytes(String columnName) throws SQLException {
1:33521af:         return getBytes(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Date getDate(String columnName) throws SQLException {
1:33521af:         return getDate(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Time getTime(String columnName) throws SQLException {
1:33521af:         return getTime(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
1:33521af:         return getTimestamp(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
1:33521af:         throw new SQLException("getAsciiStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:2510115:     @Deprecated
1:33521af:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
1:33521af:         throw new SQLException("getUnicodeStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.io.InputStream getBinaryStream(String columnName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getBinaryStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @exception    SQLException if there is an error
1:33521af:      */
1:33521af:     public SQLWarning getWarnings() throws SQLException {
1:33521af:         return null;
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @exception    SQLException if there is an error
1:33521af:      */
1:33521af:     public void clearWarnings() throws SQLException {
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public String getCursorName() throws SQLException {
1:33521af:         throw new SQLException("getCursorName");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Object getObject(int columnIndex) throws SQLException {
1:33521af:         throw new SQLException("getObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Object getObject(String columnName) throws SQLException {
1:33521af:         return getObject(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int findColumn(String columnName) throws SQLException {
1:33521af:         throw new SQLException("findColumn");
1:33521af:     }
1:33521af:     
1:33521af:     /*
1:33521af:      ** JDBC 2.0 methods
1:33521af:      */
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.io.Reader getCharacterStream(int columnIndex)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getCharacterStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.io.Reader getCharacterStream(String columnName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getCharacterStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public BigDecimal getBigDecimal(int columnIndex)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getBigDecimal");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public BigDecimal getBigDecimal(String columnName)
1:33521af:     throws SQLException {
1:33521af:         return getBigDecimal(findColumn(columnName));
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean isBeforeFirst()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("isBeforeFirst");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean isAfterLast()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("isAfterLast");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean isFirst()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("isFirst");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean isLast()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("isLast");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void beforeFirst()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("beforeFirst");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void afterLast()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("afterLast");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean first()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("first");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean last()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("last");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean absolute(int row)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("absolute");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean relative(int rows)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("relative");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean previous()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("previous");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void setFetchDirection(int direction)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("setFetchDirection");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getFetchDirection()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getFetchDirection");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void setFetchSize(int rows)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("setFetchSize");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getFetchSize()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getFetchSize");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getType()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getType");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public int getConcurrency()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getConcurrency");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean rowUpdated()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("rowUpdated");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean rowInserted()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("rowInserted");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public boolean rowDeleted()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("rowDeleted");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateNull(int columnIndex)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateNull");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBoolean(int columnIndex, boolean x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBoolean");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateByte(int columnIndex, byte x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateByte");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateShort(int columnIndex, short x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateShort");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateInt(int columnIndex, int x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateInt");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateLong(int columnIndex, long x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateLong");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateFloat(int columnIndex, float x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateFloat");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateDouble(int columnIndex, double x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateDouble");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBigDecimal(int columnIndex, BigDecimal x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBigDecimal");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateString(int columnIndex, String x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateString");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBytes(int columnIndex, byte[] x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBytes");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateDate(int columnIndex, java.sql.Date x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateDate");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateTime(int columnIndex, java.sql.Time x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateTime");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateTimestamp(int columnIndex, java.sql.Timestamp x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateTimestamp");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateAsciiStream(int columnIndex,
1:33521af:             java.io.InputStream x,
1:33521af:             int length)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateAsciiStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBinaryStream(int columnIndex,
1:33521af:             java.io.InputStream x,
1:33521af:             int length)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBinaryStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateCharacterStream(int columnIndex,
1:33521af:             java.io.Reader x,
1:33521af:             int length)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateCharacterStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateObject(int columnIndex,
1:33521af:             Object x,
1:33521af:             int scale)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateObject(int columnIndex, Object x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateNull(String columnName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateNull");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBoolean(String columnName, boolean x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBoolean");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateByte(String columnName, byte x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateByte");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateShort(String columnName, short x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateShort");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateInt(String columnName, int x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateInt");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateLong(String columnName, long x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateLong");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateFloat(String columnName, float x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateFloat");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateDouble(String columnName, double x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateDouble");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBigDecimal(String columnName, BigDecimal x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBigDecimal");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateString(String columnName, String x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateString");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBytes(String columnName, byte[] x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBytes");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateDate(String columnName, java.sql.Date x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateDate");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateTime(String columnName, java.sql.Time x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateTime");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateTimestamp(String columnName, java.sql.Timestamp x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateTimestamp");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateAsciiStream(String columnName,
1:33521af:             java.io.InputStream x,
1:33521af:             int length)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateAsciiStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBinaryStream(String columnName,
1:33521af:             java.io.InputStream x,
1:33521af:             int length)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBinaryStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateCharacterStream(String columnName,
1:33521af:             java.io.Reader x,
1:33521af:             int length)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateCharacterStream");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateObject(String columnName,
1:33521af:             Object x,
1:33521af:             int scale)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateObject(String columnName, Object x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void insertRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("insertRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void deleteRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("deleteRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void refreshRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("refreshRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void cancelRowUpdates()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("cancelRowUpdates");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void moveToInsertRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("moveToInsertRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void moveToCurrentRow()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("moveToCurrentRow");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Statement getStatement()
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getStatement");
1:33521af:     }
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Date getDate(int columnIndex, Calendar cal)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getDate");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Date getDate(String columnName, Calendar cal)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getDate");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Time getTime(int columnIndex, Calendar cal)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getTime");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Time getTime(String columnName, Calendar cal)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getTime");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getTimestamp");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public java.sql.Timestamp getTimestamp(String columnName, Calendar cal)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getTimestamp");
1:33521af:     }
1:33521af:     /*
1:33521af:      ** JDBC 3.0 methods
1:33521af:      */
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public URL getURL(int columnIndex)
1:33521af:     throws SQLException
1:33521af:     {
1:33521af:         throw new SQLException("getURL");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public URL getURL(String columnName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getURL");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Object getObject(int i, java.util.Map map)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Ref getRef(int i)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getRef");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Blob getBlob(int i)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getBlob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Clob getClob(int i)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getClob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Array getArray(int i)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getArray");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Object getObject(String colName, java.util.Map map)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getObject");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Ref getRef(String colName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getRef");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Blob getBlob(String colName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getBlob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Clob getClob(String colName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getClob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public Array getArray(String colName)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("getArray");
1:33521af:     }
1:33521af:     
1:33521af:     
1:33521af:     // JDBC 3.0 methods - not implemented
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateRef(int columnIndex, Ref x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateRef");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateRef(String columnName, Ref x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateRef");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBlob(int columnIndex, Blob x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBlob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateBlob(String columnName, Blob x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateBlob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateClob(int columnIndex, Clob x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateClob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateClob(String columnName, Clob x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateClob");
1:33521af:     }
1:33521af:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateArray(int columnIndex, Array x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateArray");
1:33521af:     }
1:890e5d2:     
1:33521af:     /**
1:33521af:      * @see java.sql.ResultSet
1:33521af:      *
1:33521af:      * @exception SQLException on unexpected JDBC error
1:33521af:      */
1:33521af:     public void updateArray(String columnName, Array x)
1:33521af:     throws SQLException {
1:33521af:         throw new SQLException("updateArray");
1:33521af:     }
1:33521af: 
1:890e5d2:     public RowId getRowId(int columnIndex) throws SQLException {
1:890e5d2:         throw new SQLException("getRowId");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public RowId getRowId(String columnLabel) throws SQLException {
1:890e5d2:         throw new SQLException("getRowId");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateRowId(int columnIndex, RowId x) throws SQLException {
1:890e5d2:         throw new SQLException("updateRowId");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateRowId(String columnLabel, RowId x) throws SQLException {
1:890e5d2:         throw new SQLException("updateRowId");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public int getHoldability() throws SQLException {
1:890e5d2:         throw new SQLException("getHoldability");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public boolean isClosed() throws SQLException {
1:890e5d2:         throw new SQLException("isClosed");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNString(int columnIndex, String nString) throws SQLException {
1:890e5d2:         throw new SQLException("updateNString");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNString(String columnLabel, String nString) throws SQLException {
1:890e5d2:         throw new SQLException("updateNString");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNClob(int columnIndex, NClob nClob) throws SQLException {
1:890e5d2:         throw new SQLException("updateNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNClob(String columnLabel, NClob nClob) throws SQLException {
1:890e5d2:         throw new SQLException("updateNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public NClob getNClob(int columnIndex) throws SQLException {
1:890e5d2:         throw new SQLException("getNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public NClob getNClob(String columnLabel) throws SQLException {
1:890e5d2:         throw new SQLException("getNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public SQLXML getSQLXML(int columnIndex) throws SQLException {
1:890e5d2:         throw new SQLException("getSQLXML");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public SQLXML getSQLXML(String columnLabel) throws SQLException {
1:890e5d2:         throw new SQLException("getSQLXML");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException {
1:890e5d2:         throw new SQLException("updateSQLXML");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException {
1:890e5d2:         throw new SQLException("updateSQLXML");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public String getNString(int columnIndex) throws SQLException {
1:890e5d2:         throw new SQLException("getNString");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public String getNString(String columnLabel) throws SQLException {
1:890e5d2:         throw new SQLException("getNString");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public Reader getNCharacterStream(int columnIndex) throws SQLException {
1:890e5d2:         throw new SQLException("getNCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public Reader getNCharacterStream(String columnLabel) throws SQLException {
1:890e5d2:         throw new SQLException("getNCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateNCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateNCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateAsciiStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateBinaryStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateAsciiStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateBinaryStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateBlob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateBlob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
1:890e5d2:         throw new SQLException("updateNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {
1:890e5d2:         throw new SQLException("updateNCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:890e5d2:         throw new SQLException("updateNCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {
1:890e5d2:         throw new SQLException("updateAsciiStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {
1:890e5d2:         throw new SQLException("updateBinaryStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {
1:890e5d2:         throw new SQLException("updateCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {
1:890e5d2:         throw new SQLException("updateAsciiStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {
1:890e5d2:         throw new SQLException("updateBinaryStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:890e5d2:         throw new SQLException("updateCharacterStream");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
1:890e5d2:         throw new SQLException("updateBlob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
1:890e5d2:         throw new SQLException("updateBlob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateClob(int columnIndex, Reader reader) throws SQLException {
1:890e5d2:         throw new SQLException("updateClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateClob(String columnLabel, Reader reader) throws SQLException {
1:890e5d2:         throw new SQLException("updateClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNClob(int columnIndex, Reader reader) throws SQLException {
1:890e5d2:         throw new SQLException("updateNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public void updateNClob(String columnLabel, Reader reader) throws SQLException {
1:890e5d2:         throw new SQLException("updateNClob");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
1:890e5d2:         throw new SQLException("getObject");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
1:890e5d2:         throw new SQLException("getObject");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:890e5d2:         throw new SQLException("unwrap");
1:890e5d2:     }
1:890e5d2: 
1:890e5d2:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:890e5d2:         throw new SQLException("isWrapperFor");
1:890e5d2:     }
1:33521af: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2510115
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
commit:890e5d2
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.Reader;
/////////////////////////////////////////////////////////////////////////
1: import java.sql.NClob;
1: import java.sql.RowId;
1: import java.sql.SQLXML;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public RowId getRowId(int columnIndex) throws SQLException {
1:         throw new SQLException("getRowId");
1:     }
1: 
1:     public RowId getRowId(String columnLabel) throws SQLException {
1:         throw new SQLException("getRowId");
1:     }
1: 
1:     public void updateRowId(int columnIndex, RowId x) throws SQLException {
1:         throw new SQLException("updateRowId");
1:     }
1: 
1:     public void updateRowId(String columnLabel, RowId x) throws SQLException {
1:         throw new SQLException("updateRowId");
1:     }
1: 
1:     public int getHoldability() throws SQLException {
1:         throw new SQLException("getHoldability");
1:     }
1: 
1:     public boolean isClosed() throws SQLException {
1:         throw new SQLException("isClosed");
1:     }
1: 
1:     public void updateNString(int columnIndex, String nString) throws SQLException {
1:         throw new SQLException("updateNString");
1:     }
1: 
1:     public void updateNString(String columnLabel, String nString) throws SQLException {
1:         throw new SQLException("updateNString");
1:     }
1: 
1:     public void updateNClob(int columnIndex, NClob nClob) throws SQLException {
1:         throw new SQLException("updateNClob");
1:     }
1: 
1:     public void updateNClob(String columnLabel, NClob nClob) throws SQLException {
1:         throw new SQLException("updateNClob");
1:     }
1: 
1:     public NClob getNClob(int columnIndex) throws SQLException {
1:         throw new SQLException("getNClob");
1:     }
1: 
1:     public NClob getNClob(String columnLabel) throws SQLException {
1:         throw new SQLException("getNClob");
1:     }
1: 
1:     public SQLXML getSQLXML(int columnIndex) throws SQLException {
1:         throw new SQLException("getSQLXML");
1:     }
1: 
1:     public SQLXML getSQLXML(String columnLabel) throws SQLException {
1:         throw new SQLException("getSQLXML");
1:     }
1: 
1:     public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException {
1:         throw new SQLException("updateSQLXML");
1:     }
1: 
1:     public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException {
1:         throw new SQLException("updateSQLXML");
1:     }
1: 
1:     public String getNString(int columnIndex) throws SQLException {
1:         throw new SQLException("getNString");
1:     }
1: 
1:     public String getNString(String columnLabel) throws SQLException {
1:         throw new SQLException("getNString");
1:     }
1: 
1:     public Reader getNCharacterStream(int columnIndex) throws SQLException {
1:         throw new SQLException("getNCharacterStream");
1:     }
1: 
1:     public Reader getNCharacterStream(String columnLabel) throws SQLException {
1:         throw new SQLException("getNCharacterStream");
1:     }
1: 
1:     public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:         throw new SQLException("updateNCharacterStream");
1:     }
1: 
1:     public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new SQLException("updateNCharacterStream");
1:     }
1: 
1:     public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {
1:         throw new SQLException("updateAsciiStream");
1:     }
1: 
1:     public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {
1:         throw new SQLException("updateBinaryStream");
1:     }
1: 
1:     public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:         throw new SQLException("updateCharacterStream");
1:     }
1: 
1:     public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {
1:         throw new SQLException("updateAsciiStream");
1:     }
1: 
1:     public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {
1:         throw new SQLException("updateBinaryStream");
1:     }
1: 
1:     public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new SQLException("updateCharacterStream");
1:     }
1: 
1:     public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
1:         throw new SQLException("updateBlob");
1:     }
1: 
1:     public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
1:         throw new SQLException("updateBlob");
1:     }
1: 
1:     public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
1:         throw new SQLException("updateClob");
1:     }
1: 
1:     public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new SQLException("updateClob");
1:     }
1: 
1:     public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
1:         throw new SQLException("updateNClob");
1:     }
1: 
1:     public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new SQLException("updateNClob");
1:     }
1: 
1:     public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {
1:         throw new SQLException("updateNCharacterStream");
1:     }
1: 
1:     public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:         throw new SQLException("updateNCharacterStream");
1:     }
1: 
1:     public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {
1:         throw new SQLException("updateAsciiStream");
1:     }
1: 
1:     public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {
1:         throw new SQLException("updateBinaryStream");
1:     }
1: 
1:     public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {
1:         throw new SQLException("updateCharacterStream");
1:     }
1: 
1:     public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {
1:         throw new SQLException("updateAsciiStream");
1:     }
1: 
1:     public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {
1:         throw new SQLException("updateBinaryStream");
1:     }
1: 
1:     public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:         throw new SQLException("updateCharacterStream");
1:     }
1: 
1:     public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
1:         throw new SQLException("updateBlob");
1:     }
1: 
1:     public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
1:         throw new SQLException("updateBlob");
1:     }
1: 
1:     public void updateClob(int columnIndex, Reader reader) throws SQLException {
1:         throw new SQLException("updateClob");
1:     }
1: 
1:     public void updateClob(String columnLabel, Reader reader) throws SQLException {
1:         throw new SQLException("updateClob");
1:     }
1: 
1:     public void updateNClob(int columnIndex, Reader reader) throws SQLException {
1:         throw new SQLException("updateNClob");
1:     }
1: 
1:     public void updateNClob(String columnLabel, Reader reader) throws SQLException {
1:         throw new SQLException("updateNClob");
1:     }
1: 
1:     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
1:         throw new SQLException("getObject");
1:     }
1: 
1:     public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
1:         throw new SQLException("getObject");
1:     }
1: 
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:         throw new SQLException("unwrap");
1:     }
1: 
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:         throw new SQLException("isWrapperFor");
1:     }
commit:5b90cf1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         ResultSet rs = s.executeQuery("select * from " + JDBC.escape(tableName)
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:33521af
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.TableVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.math.BigDecimal;
1: import java.sql.DriverManager;
1: import java.net.URL;
1: import java.util.Calendar;
1: import java.sql.Ref;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Array;
1: 
1: /**
1:     This class has been adapted from org.apache.derby.vti.VTITemplate 
1:     because we do not want a test to depend on an engine class.
1:    
1:     This class implements most of the methods of the JDBC 1.2 interface java.sql.ResultSet,
1:     each one throwing a  SQLException with the name of the method. 
1:     A concrete subclass can then just implement the methods not implemented here 
1:     and override any methods it needs to implement for correct functionality.
1:     <P>
1:     The methods not implemented here are
1:     <UL>
1:     <LI>next()
1:     <LI>close()
1:     <LI>getMetaData()
1:     </UL>
1:     <P>
1: 
1:     For virtual tables the database engine only calls methods defined
1:     in the JDBC 1.2 definition of java.sql.ResultSet.
1:     <BR>
1:     Classes that implement a JDBC 2.0 conformant java.sql.ResultSet can be used
1:     as virtual tables.
1: */
1: public abstract class TableVTI implements ResultSet {
1:     
1:     private String tableName;
1:     private ResultSetMetaData rsmd ;
1:     private int[] map;
1:     public TableVTI(String tableName) throws SQLException {
1:         this.tableName = tableName;
1:         init();
1:     }
1:     
1:     protected void init() throws SQLException {
1:         Connection conn = DriverManager
1:         .getConnection("jdbc:default:connection");
1:         Statement s = conn.createStatement();
0:         ResultSet rs = s.executeQuery("select * from " + tableName
1:                 + " where 1 = 0 ");
1:         rsmd = rs.getMetaData();
1:         rs.close();
1:         s.close();
1:         
1:         map = getColumnMap(getVTIColumnNames());
1:     }
1:     
1:     public final ResultSetMetaData getMetaData() {
1:         return rsmd;
1:     }
1:     
1:     public final void close() {
1:     }
1:     
1:     protected int[] getColumnMap(String[] vtiNames) throws SQLException {
1:         
1:         if (vtiNames == null)
1:             return null;
1:         
1:         int[] map = new int[vtiNames.length];
1:         int count = rsmd.getColumnCount();
1:         
1:         outer: for (int i = 0; i < vtiNames.length; i++) {
1:             
1:             String vtiCol = vtiNames[i];
1:             if (vtiCol == null)
1:                 continue outer;
1:             ;
1:             
1:             for (int j = 1; j <= count; j++) {
1:                 if (vtiCol.equalsIgnoreCase(rsmd.getColumnName(j))) {
1:                     map[i] = j;
1:                     continue outer;
1:                 }
1:             }
1:         }
1:         
1:         return map;
1:     }
1:     
1:     protected String[] getVTIColumnNames() {
1:         return null;
1:     }
1:     
1:     //
1:     // java.sql.ResultSet calls, passed through to our result set.
1:     //
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean wasNull() throws SQLException {
1:         throw new SQLException("wasNull");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public String getString(int columnIndex) throws SQLException {
1:         throw new SQLException("getString");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean getBoolean(int columnIndex) throws SQLException {
1:         throw new SQLException("getBoolean");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public byte getByte(int columnIndex) throws SQLException {
1:         throw new SQLException("getByte");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public short getShort(int columnIndex) throws SQLException {
1:         throw new SQLException("getShort");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getInt(int columnIndex) throws SQLException {
1:         throw new SQLException("getInt");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public long getLong(int columnIndex) throws SQLException {
1:         throw new SQLException("getLong");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public float getFloat(int columnIndex) throws SQLException {
1:         throw new SQLException("getFloat");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public double getDouble(int columnIndex) throws SQLException {
1:         throw new SQLException("getDouble");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
1:         throw new SQLException("getBigDecimal");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public byte[] getBytes(int columnIndex) throws SQLException {
1:         throw new SQLException("getBytes");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Date getDate(int columnIndex) throws SQLException {
1:         throw new SQLException("getDate");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Time getTime(int columnIndex) throws SQLException {
1:         throw new SQLException("getTime");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
1:         throw new SQLException("getTimestamp");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
1:         throw new SQLException("getAsciiStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
1:         throw new SQLException("getUnicodeStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.InputStream getBinaryStream(int columnIndex)
1:     throws SQLException {
1:         throw new SQLException("getBinaryStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public String getString(String columnName) throws SQLException {
1:         return getString(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean getBoolean(String columnName) throws SQLException {
1:         return getBoolean(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public byte getByte(String columnName) throws SQLException {
1:         return getByte(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public short getShort(String columnName) throws SQLException {
1:         return getShort(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getInt(String columnName) throws SQLException {
1:         return getInt(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public long getLong(String columnName) throws SQLException {
1:         return getLong(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public float getFloat(String columnName) throws SQLException {
1:         return getFloat(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public double getDouble(String columnName) throws SQLException {
1:         return getDouble(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
1:         return getBigDecimal(findColumn(columnName), scale);
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public byte[] getBytes(String columnName) throws SQLException {
1:         return getBytes(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Date getDate(String columnName) throws SQLException {
1:         return getDate(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Time getTime(String columnName) throws SQLException {
1:         return getTime(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
1:         return getTimestamp(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
1:         throw new SQLException("getAsciiStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
1:         throw new SQLException("getUnicodeStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.InputStream getBinaryStream(String columnName)
1:     throws SQLException {
1:         throw new SQLException("getBinaryStream");
1:     }
1:     
1:     /**
1:      * @exception    SQLException if there is an error
1:      */
1:     public SQLWarning getWarnings() throws SQLException {
1:         return null;
1:     }
1:     
1:     /**
1:      * @exception    SQLException if there is an error
1:      */
1:     public void clearWarnings() throws SQLException {
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public String getCursorName() throws SQLException {
1:         throw new SQLException("getCursorName");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Object getObject(int columnIndex) throws SQLException {
1:         throw new SQLException("getObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Object getObject(String columnName) throws SQLException {
1:         return getObject(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int findColumn(String columnName) throws SQLException {
1:         throw new SQLException("findColumn");
1:     }
1:     
1:     /*
1:      ** JDBC 2.0 methods
1:      */
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.Reader getCharacterStream(int columnIndex)
1:     throws SQLException {
1:         throw new SQLException("getCharacterStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.io.Reader getCharacterStream(String columnName)
1:     throws SQLException {
1:         throw new SQLException("getCharacterStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public BigDecimal getBigDecimal(int columnIndex)
1:     throws SQLException {
1:         throw new SQLException("getBigDecimal");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public BigDecimal getBigDecimal(String columnName)
1:     throws SQLException {
1:         return getBigDecimal(findColumn(columnName));
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean isBeforeFirst()
1:     throws SQLException {
1:         throw new SQLException("isBeforeFirst");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean isAfterLast()
1:     throws SQLException {
1:         throw new SQLException("isAfterLast");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean isFirst()
1:     throws SQLException {
1:         throw new SQLException("isFirst");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean isLast()
1:     throws SQLException {
1:         throw new SQLException("isLast");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void beforeFirst()
1:     throws SQLException {
1:         throw new SQLException("beforeFirst");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void afterLast()
1:     throws SQLException {
1:         throw new SQLException("afterLast");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean first()
1:     throws SQLException {
1:         throw new SQLException("first");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean last()
1:     throws SQLException {
1:         throw new SQLException("last");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getRow()
1:     throws SQLException {
1:         throw new SQLException("getRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean absolute(int row)
1:     throws SQLException {
1:         throw new SQLException("absolute");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean relative(int rows)
1:     throws SQLException {
1:         throw new SQLException("relative");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean previous()
1:     throws SQLException {
1:         throw new SQLException("previous");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void setFetchDirection(int direction)
1:     throws SQLException {
1:         throw new SQLException("setFetchDirection");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getFetchDirection()
1:     throws SQLException {
1:         throw new SQLException("getFetchDirection");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void setFetchSize(int rows)
1:     throws SQLException {
1:         throw new SQLException("setFetchSize");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getFetchSize()
1:     throws SQLException {
1:         throw new SQLException("getFetchSize");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getType()
1:     throws SQLException {
1:         throw new SQLException("getType");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public int getConcurrency()
1:     throws SQLException {
1:         throw new SQLException("getConcurrency");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean rowUpdated()
1:     throws SQLException {
1:         throw new SQLException("rowUpdated");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean rowInserted()
1:     throws SQLException {
1:         throw new SQLException("rowInserted");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public boolean rowDeleted()
1:     throws SQLException {
1:         throw new SQLException("rowDeleted");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateNull(int columnIndex)
1:     throws SQLException {
1:         throw new SQLException("updateNull");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBoolean(int columnIndex, boolean x)
1:     throws SQLException {
1:         throw new SQLException("updateBoolean");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateByte(int columnIndex, byte x)
1:     throws SQLException {
1:         throw new SQLException("updateByte");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateShort(int columnIndex, short x)
1:     throws SQLException {
1:         throw new SQLException("updateShort");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateInt(int columnIndex, int x)
1:     throws SQLException {
1:         throw new SQLException("updateInt");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateLong(int columnIndex, long x)
1:     throws SQLException {
1:         throw new SQLException("updateLong");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateFloat(int columnIndex, float x)
1:     throws SQLException {
1:         throw new SQLException("updateFloat");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateDouble(int columnIndex, double x)
1:     throws SQLException {
1:         throw new SQLException("updateDouble");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBigDecimal(int columnIndex, BigDecimal x)
1:     throws SQLException {
1:         throw new SQLException("updateBigDecimal");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateString(int columnIndex, String x)
1:     throws SQLException {
1:         throw new SQLException("updateString");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBytes(int columnIndex, byte[] x)
1:     throws SQLException {
1:         throw new SQLException("updateBytes");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateDate(int columnIndex, java.sql.Date x)
1:     throws SQLException {
1:         throw new SQLException("updateDate");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateTime(int columnIndex, java.sql.Time x)
1:     throws SQLException {
1:         throw new SQLException("updateTime");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateTimestamp(int columnIndex, java.sql.Timestamp x)
1:     throws SQLException {
1:         throw new SQLException("updateTimestamp");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateAsciiStream(int columnIndex,
1:             java.io.InputStream x,
1:             int length)
1:     throws SQLException {
1:         throw new SQLException("updateAsciiStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBinaryStream(int columnIndex,
1:             java.io.InputStream x,
1:             int length)
1:     throws SQLException {
1:         throw new SQLException("updateBinaryStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateCharacterStream(int columnIndex,
1:             java.io.Reader x,
1:             int length)
1:     throws SQLException {
1:         throw new SQLException("updateCharacterStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateObject(int columnIndex,
1:             Object x,
1:             int scale)
1:     throws SQLException {
1:         throw new SQLException("updateObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateObject(int columnIndex, Object x)
1:     throws SQLException {
1:         throw new SQLException("updateObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateNull(String columnName)
1:     throws SQLException {
1:         throw new SQLException("updateNull");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBoolean(String columnName, boolean x)
1:     throws SQLException {
1:         throw new SQLException("updateBoolean");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateByte(String columnName, byte x)
1:     throws SQLException {
1:         throw new SQLException("updateByte");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateShort(String columnName, short x)
1:     throws SQLException {
1:         throw new SQLException("updateShort");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateInt(String columnName, int x)
1:     throws SQLException {
1:         throw new SQLException("updateInt");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateLong(String columnName, long x)
1:     throws SQLException {
1:         throw new SQLException("updateLong");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateFloat(String columnName, float x)
1:     throws SQLException {
1:         throw new SQLException("updateFloat");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateDouble(String columnName, double x)
1:     throws SQLException {
1:         throw new SQLException("updateDouble");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBigDecimal(String columnName, BigDecimal x)
1:     throws SQLException {
1:         throw new SQLException("updateBigDecimal");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateString(String columnName, String x)
1:     throws SQLException {
1:         throw new SQLException("updateString");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBytes(String columnName, byte[] x)
1:     throws SQLException {
1:         throw new SQLException("updateBytes");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateDate(String columnName, java.sql.Date x)
1:     throws SQLException {
1:         throw new SQLException("updateDate");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateTime(String columnName, java.sql.Time x)
1:     throws SQLException {
1:         throw new SQLException("updateTime");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateTimestamp(String columnName, java.sql.Timestamp x)
1:     throws SQLException {
1:         throw new SQLException("updateTimestamp");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateAsciiStream(String columnName,
1:             java.io.InputStream x,
1:             int length)
1:     throws SQLException {
1:         throw new SQLException("updateAsciiStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBinaryStream(String columnName,
1:             java.io.InputStream x,
1:             int length)
1:     throws SQLException {
1:         throw new SQLException("updateBinaryStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateCharacterStream(String columnName,
1:             java.io.Reader x,
1:             int length)
1:     throws SQLException {
1:         throw new SQLException("updateCharacterStream");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateObject(String columnName,
1:             Object x,
1:             int scale)
1:     throws SQLException {
1:         throw new SQLException("updateObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateObject(String columnName, Object x)
1:     throws SQLException {
1:         throw new SQLException("updateObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void insertRow()
1:     throws SQLException {
1:         throw new SQLException("insertRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateRow()
1:     throws SQLException {
1:         throw new SQLException("updateRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void deleteRow()
1:     throws SQLException {
1:         throw new SQLException("deleteRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void refreshRow()
1:     throws SQLException {
1:         throw new SQLException("refreshRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void cancelRowUpdates()
1:     throws SQLException {
1:         throw new SQLException("cancelRowUpdates");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void moveToInsertRow()
1:     throws SQLException {
1:         throw new SQLException("moveToInsertRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void moveToCurrentRow()
1:     throws SQLException {
1:         throw new SQLException("moveToCurrentRow");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Statement getStatement()
1:     throws SQLException {
1:         throw new SQLException("getStatement");
1:     }
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Date getDate(int columnIndex, Calendar cal)
1:     throws SQLException {
1:         throw new SQLException("getDate");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Date getDate(String columnName, Calendar cal)
1:     throws SQLException {
1:         throw new SQLException("getDate");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Time getTime(int columnIndex, Calendar cal)
1:     throws SQLException {
1:         throw new SQLException("getTime");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Time getTime(String columnName, Calendar cal)
1:     throws SQLException {
1:         throw new SQLException("getTime");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal)
1:     throws SQLException {
1:         throw new SQLException("getTimestamp");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public java.sql.Timestamp getTimestamp(String columnName, Calendar cal)
1:     throws SQLException {
1:         throw new SQLException("getTimestamp");
1:     }
1:     /*
1:      ** JDBC 3.0 methods
1:      */
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public URL getURL(int columnIndex)
1:     throws SQLException
1:     {
1:         throw new SQLException("getURL");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public URL getURL(String columnName)
1:     throws SQLException {
1:         throw new SQLException("getURL");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Object getObject(int i, java.util.Map map)
1:     throws SQLException {
1:         throw new SQLException("getObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Ref getRef(int i)
1:     throws SQLException {
1:         throw new SQLException("getRef");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Blob getBlob(int i)
1:     throws SQLException {
1:         throw new SQLException("getBlob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Clob getClob(int i)
1:     throws SQLException {
1:         throw new SQLException("getClob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Array getArray(int i)
1:     throws SQLException {
1:         throw new SQLException("getArray");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Object getObject(String colName, java.util.Map map)
1:     throws SQLException {
1:         throw new SQLException("getObject");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Ref getRef(String colName)
1:     throws SQLException {
1:         throw new SQLException("getRef");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Blob getBlob(String colName)
1:     throws SQLException {
1:         throw new SQLException("getBlob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Clob getClob(String colName)
1:     throws SQLException {
1:         throw new SQLException("getClob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public Array getArray(String colName)
1:     throws SQLException {
1:         throw new SQLException("getArray");
1:     }
1:     
1:     
1:     // JDBC 3.0 methods - not implemented
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateRef(int columnIndex, Ref x)
1:     throws SQLException {
1:         throw new SQLException("updateRef");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateRef(String columnName, Ref x)
1:     throws SQLException {
1:         throw new SQLException("updateRef");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBlob(int columnIndex, Blob x)
1:     throws SQLException {
1:         throw new SQLException("updateBlob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateBlob(String columnName, Blob x)
1:     throws SQLException {
1:         throw new SQLException("updateBlob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateClob(int columnIndex, Clob x)
1:     throws SQLException {
1:         throw new SQLException("updateClob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateClob(String columnName, Clob x)
1:     throws SQLException {
1:         throw new SQLException("updateClob");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateArray(int columnIndex, Array x)
1:     throws SQLException {
1:         throw new SQLException("updateArray");
1:     }
1:     
1:     /**
1:      * @see java.sql.ResultSet
1:      *
1:      * @exception SQLException on unexpected JDBC error
1:      */
1:     public void updateArray(String columnName, Array x)
1:     throws SQLException {
1:         throw new SQLException("updateArray");
1:     }
1: }
============================================================================