1:311ee54: /*
1:311ee54: 
1:311ee54:    Derby - Class org.apache.derby.impl.sql.catalog.SequenceRange
1:311ee54: 
1:311ee54:    Licensed to the Apache Software Foundation (ASF) under one or more
1:311ee54:    contributor license agreements.  See the NOTICE file distributed with
1:311ee54:    this work for additional information regarding copyright ownership.
1:311ee54:    The ASF licenses this file to you under the Apache License, Version 2.0
1:311ee54:    (the "License"); you may not use this file except in compliance with
1:311ee54:    the License.  You may obtain a copy of the License at
1:311ee54: 
1:311ee54:       http://www.apache.org/licenses/LICENSE-2.0
1:311ee54: 
1:311ee54:    Unless required by applicable law or agreed to in writing, software
1:311ee54:    distributed under the License is distributed on an "AS IS" BASIS,
1:311ee54:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:311ee54:    See the License for the specific language governing permissions and
1:311ee54:    limitations under the License.
1:311ee54: 
1:311ee54:  */
1:311ee54: 
1:311ee54: package org.apache.derby.impl.sql.catalog;
1:311ee54: 
1:311ee54: import org.apache.derby.catalog.SequencePreallocator;
1:311ee54: 
1:311ee54: /**
1:311ee54:  * <p>
1:311ee54:  * Default Derby logic for determining how many values to pre-allocate for an
1:311ee54:  * identity column or sequence.
1:311ee54:  * </p>
1:311ee54:  */
1:311ee54: public  class   SequenceRange   implements  SequencePreallocator
1:311ee54: {
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54:     //
1:311ee54:     // CONSTANTS
1:311ee54:     //
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54: 
1:311ee54:     /**
1:810f2b9:      * Default number of values to pre-allocate. Other databases use a preallocation size
1:810f2b9:      * of 20 (see DERBY-4437). We boosted this to 100 in order to get better concurrency,
1:810f2b9:      * after fixing correctness problems in pre-allocation (see DERBY-5493).
1:311ee54:      */
1:810f2b9:     private static final int DEFAULT_PREALLOCATION_COUNT = 100;
1:311ee54: 
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54:     //
1:311ee54:     // STATE
1:311ee54:     //
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54: 
1:365a750:     private int _rangeSize;
1:365a750: 
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54:     //
1:311ee54:     // CONSTRUCTOR
1:311ee54:     //
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54: 
1:311ee54:     /** <p>0-arg constructore needed to satisfy the SequencePreallocator contract.</p> */
1:365a750:     public  SequenceRange()
1:365a750:     {
1:365a750:         this( DEFAULT_PREALLOCATION_COUNT );
1:365a750:     }
1:365a750: 
1:365a750:     public  SequenceRange( int rangeSize )
1:365a750:     {
1:365a750:         if ( rangeSize <= 0 ) { rangeSize = DEFAULT_PREALLOCATION_COUNT; }
1:365a750:         
1:365a750:         _rangeSize = rangeSize;
1:365a750:     }
1:311ee54: 
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54:     //
1:311ee54:     // SequencePreallocator BEHAVIOR
1:311ee54:     //
1:311ee54:     ///////////////////////////////////////////////////////////////////////////////////
1:311ee54: 
1:311ee54:     public  int nextRangeSize
1:311ee54:         (
1:311ee54:          String schemaName,
1:311ee54:          String sequenceName
1:311ee54:          )
1:311ee54:     {
1:365a750:         return _rangeSize;
1:311ee54:     }
1:311ee54: 
1:311ee54: 
1:311ee54: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:810f2b9
/////////////////////////////////////////////////////////////////////////
1:      * Default number of values to pre-allocate. Other databases use a preallocation size
1:      * of 20 (see DERBY-4437). We boosted this to 100 in order to get better concurrency,
1:      * after fixing correctness problems in pre-allocation (see DERBY-5493).
1:     private static final int DEFAULT_PREALLOCATION_COUNT = 100;
commit:365a750
/////////////////////////////////////////////////////////////////////////
0:      * Default number of values to pre-allocate. This is the size of the preallocation range
0:      * used by other databases. See DERBY-4437.
0:     private static final int DEFAULT_PREALLOCATION_COUNT = 20;
/////////////////////////////////////////////////////////////////////////
1:     private int _rangeSize;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public  SequenceRange()
1:     {
1:         this( DEFAULT_PREALLOCATION_COUNT );
1:     }
1: 
1:     public  SequenceRange( int rangeSize )
1:     {
1:         if ( rangeSize <= 0 ) { rangeSize = DEFAULT_PREALLOCATION_COUNT; }
1:         
1:         _rangeSize = rangeSize;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         return _rangeSize;
commit:311ee54
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SequenceRange
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.catalog.SequencePreallocator;
1: 
1: /**
1:  * <p>
1:  * Default Derby logic for determining how many values to pre-allocate for an
1:  * identity column or sequence.
1:  * </p>
1:  */
1: public  class   SequenceRange   implements  SequencePreallocator
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Default number of values to pre-allocate. In the future, we may want to provide
0:      * something more sophisticated. For instance, we might want to make Derby tune
0:      * this number per sequence generator or give the user the power to override Derby's
0:      * decision.
1:      */
0:     private static final int DEFAULT_PREALLOCATION_COUNT = 5;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** <p>0-arg constructore needed to satisfy the SequencePreallocator contract.</p> */
0:     public  SequenceRange() {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // SequencePreallocator BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  int nextRangeSize
1:         (
1:          String schemaName,
1:          String sequenceName
1:          )
1:     {
0:         return DEFAULT_PREALLOCATION_COUNT;
1:     }
1: 
1: 
1: }
============================================================================