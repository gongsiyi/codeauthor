1:b7730e4: /*
7:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory
1:b7730e4: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4:       http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
2:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.impl.sql.catalog;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecRow;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:b7730e4: import org.apache.derby.iapi.types.DataValueFactory;
1:b7730e4: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:b7730e4: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:b7730e4: import org.apache.derby.catalog.UUID;
1:b7730e4: 
2:b7730e4: /**
1:b7730e4:  * Factory for creating a SYSROUTINEPERMS row.
1:b7730e4:  *
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: public class SYSROUTINEPERMSRowFactory extends PermissionsCatalogRowFactory
5:b7730e4: {
1:b7730e4: 	static final String TABLENAME_STRING = "SYSROUTINEPERMS";
1:b7730e4: 
1:b7730e4:     // Column numbers for the SYSROUTINEPERMS table. 1 based
1:1a6e9de:     private static final int ROUTINEPERMSID_COL_NUM = 1;
1:2d2e717:     private static final int GRANTEE_COL_NUM = 2;
1:2d2e717:     private static final int GRANTOR_COL_NUM = 3;
1:2d2e717:     private static final int ALIASID_COL_NUM = 4;
1:2d2e717:     private static final int GRANTOPTION_COL_NUM = 5;
1:2d2e717:     private static final int COLUMN_COUNT = 5;
1:b7730e4: 
1:b7730e4:     static final int GRANTEE_ALIAS_GRANTOR_INDEX_NUM = 0;
1:ac100d6:     public static final int ROUTINEPERMSID_INDEX_NUM = 1;
1:b7e13a9:     public static final int ALIASID_INDEX_NUM = 2;
1:b7e13a9: 
1:b7730e4: 	private static final int[][] indexColumnPositions = 
1:b7730e4: 	{ 
1:ac100d6: 		{ GRANTEE_COL_NUM, ALIASID_COL_NUM, GRANTOR_COL_NUM},
1:b7e13a9: 		{ ROUTINEPERMSID_COL_NUM },
1:b7e13a9: 		{ ALIASID_COL_NUM }
2:b7730e4: 	};
1:c2ff613: 
1:ee59de8:     public static final int GRANTEE_COL_NUM_IN_GRANTEE_ALIAS_GRANTOR_INDEX = 1;
1:ee59de8: 
1:b7e13a9:     private static final boolean[] indexUniqueness = { true, true, false };
1:b7730e4: 
1:b7730e4:     private	static final String[] uuids =
1:b7730e4:     {
1:b7730e4:         "2057c01b-0103-0e39-b8e7-00000010f010" // catalog UUID
1:b7730e4: 		,"185e801c-0103-0e39-b8e7-00000010f010"	// heap UUID
1:ac100d6: 		,"c065801d-0103-0e39-b8e7-00000010f010"	// index1
1:ac100d6: 		,"40f70088-010c-4c2f-c8de-0000000f43a0" // index2
1:b7e13a9: 		,"08264012-010c-bc85-060d-000000109ab8" // index3
1:b7730e4:     };
1:b7730e4: 
1:6870e87:     SYSROUTINEPERMSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:b7730e4: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:c2ff613: 		initInfo( COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexUniqueness, uuids);
3:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent) throws StandardException
1:b7730e4: 	{
1:2d2e717: 		UUID oid;
1:2d2e717:         String routinePermID = null;
1:b7730e4:         DataValueDescriptor grantee = null;
1:b7730e4:         DataValueDescriptor grantor = null;
1:b7730e4:         String routineID = null;
1:b7730e4:         
1:b7730e4:         if( td == null)
1:b7730e4:         {
1:b7730e4:             grantee = getNullAuthorizationID();
1:b7730e4:             grantor = getNullAuthorizationID();
1:b7730e4:         }
1:b7730e4:         else
1:b7730e4:         {
1:b7730e4:             RoutinePermsDescriptor rpd = (RoutinePermsDescriptor) td;
1:2d2e717:             oid = rpd.getUUID();
1:2d2e717:             if ( oid == null )
1:2d2e717:             {
1:2d2e717: 				oid = getUUIDFactory().createUUID();
1:2d2e717: 				rpd.setUUID(oid);
1:2d2e717:             }
1:2d2e717:             routinePermID = oid.toString();
1:b7730e4:             grantee = getAuthorizationID( rpd.getGrantee());
1:b7730e4:             grantor = getAuthorizationID( rpd.getGrantor());
1:b7730e4:             if( rpd.getRoutineUUID() != null)
1:b7730e4:                 routineID = rpd.getRoutineUUID().toString();
1:b7730e4:         }
1:b7730e4: 		ExecRow row = getExecutionFactory().getValueRow( COLUMN_COUNT);
1:eb47bdb: 		row.setColumn( ROUTINEPERMSID_COL_NUM, new SQLChar(routinePermID));
1:b7730e4:         row.setColumn( GRANTEE_COL_NUM, grantee);
1:b7730e4:         row.setColumn( GRANTOR_COL_NUM, grantor);
1:eb47bdb:         row.setColumn( ALIASID_COL_NUM, new SQLChar(routineID));
1:eb47bdb:         row.setColumn( GRANTOPTION_COL_NUM, new SQLChar("N"));
2:b7730e4:         return row;
1:b7730e4:     } // end of makeRow
1:b7730e4:             
1:b7730e4: 	/** builds a tuple descriptor from a row */
1:b7730e4: 	public TupleDescriptor buildDescriptor(ExecRow row,
1:b7730e4:                                            TupleDescriptor parentTuple,
1:b7730e4:                                            DataDictionary	dataDictionary)
2:b7730e4: 		throws StandardException
1:b7730e4:     {
1:b7730e4:         if( SanityManager.DEBUG)
1:b7730e4:             SanityManager.ASSERT( row.nColumns() == COLUMN_COUNT,
1:b7730e4:                                   "Wrong size row passed to SYSROUTINEPERMSRowFactory.buildDescriptor");
1:b7730e4: 
1:1a6e9de:         String routinePermsUUIDString = row.getColumn(ROUTINEPERMSID_COL_NUM).getString();
1:2d2e717:         UUID routinePermsUUID = getUUIDFactory().recreateUUID(routinePermsUUIDString);
1:b7730e4:         String aliasUUIDString = row.getColumn( ALIASID_COL_NUM).getString();
1:b7730e4:         UUID aliasUUID = getUUIDFactory().recreateUUID(aliasUUIDString);
1:b7730e4: 
1:2d2e717:         RoutinePermsDescriptor routinePermsDesc =
1:2d2e717: 	        new RoutinePermsDescriptor( dataDictionary,
1:2d2e717:                     getAuthorizationID( row, GRANTEE_COL_NUM),
1:2d2e717:                     getAuthorizationID( row, GRANTOR_COL_NUM),
1:2d2e717:                     aliasUUID);
1:2d2e717:         routinePermsDesc.setUUID(routinePermsUUID);
1:2d2e717: 			return routinePermsDesc;
1:b7730e4:     } // end of buildDescriptor
1:b7730e4: 
1:b7730e4: 	/** builds a column list for the catalog */
1:b7730e4: 	public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:b7730e4:     {
1:082459a:          return new SystemColumn[] {
1:082459a:              SystemColumnImpl.getUUIDColumn("ROUTINEPERMSID", false),
1:082459a:              SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:082459a:              SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:082459a:              SystemColumnImpl.getUUIDColumn("ALIASID", false),
1:082459a:              SystemColumnImpl.getIndicatorColumn("GRANTOPTION")
1:082459a:          };
1:082459a:     }
1:b7730e4: 
1:b7730e4: 	/**
1:b7730e4: 	 * builds an index key row given for a given index number.
1:b7730e4: 	 */
1:b7730e4:   	public ExecIndexRow buildIndexKeyRow( int indexNumber,
1:b7730e4:                                           PermissionsDescriptor perm) 
1:b7730e4:   		throws StandardException
1:b7730e4:     {
1:b7730e4:         ExecIndexRow row = null;
1:b7730e4:         
2:b7730e4:         switch( indexNumber)
1:b7730e4:         {
2:b7730e4:         case GRANTEE_ALIAS_GRANTOR_INDEX_NUM:
1:b7730e4:             // RESOLVE We do not support the FOR GRANT OPTION, so rougine permission rows are unique on the
1:b7730e4:             // grantee and alias UUID columns. The grantor column will always have the name of the owner of the
1:b7730e4:             // routine. So the index key, used for searching the index, only has grantee and alias UUID columns.
1:b7730e4:             // It does not have a grantor column.
1:b7730e4:             //
1:b7730e4:             // If we support FOR GRANT OPTION then there may be multiple routine permissions rows for a
1:b7730e4:             // (grantee, aliasID) combination. Since there is only one kind of routine permission (execute)
1:b7730e4:             // execute permission checking need not worry about multiple routine permission rows for a
1:b7730e4:             // (grantee, aliasID) combination, it only cares whether there are any. Grant and revoke must
1:b7730e4:             // look through multiple rows to see if the current user has grant/revoke permission and use
1:b7730e4:             // the full key in checking for the pre-existence of the permission being granted or revoked.
1:b7730e4:             row = getExecutionFactory().getIndexableRow( 2);
1:b7730e4:             row.setColumn(1, getAuthorizationID( perm.getGrantee()));
1:b7730e4:             String routineUUIDStr = ((RoutinePermsDescriptor) perm).getRoutineUUID().toString();
1:eb47bdb:             row.setColumn(2, new SQLChar(routineUUIDStr));
1:b7e13a9:             break;
1:ac100d6:         case ROUTINEPERMSID_INDEX_NUM:
1:ac100d6:             row = getExecutionFactory().getIndexableRow( 1);
1:ac100d6:             String routinePermsUUIDStr = perm.getObjectID().toString();
1:eb47bdb:             row.setColumn(1, new SQLChar(routinePermsUUIDStr));
1:ac100d6:             break;
1:b7e13a9:         case ALIASID_INDEX_NUM:
1:b7e13a9:             row = getExecutionFactory().getIndexableRow( 1);
1:b7e13a9:             routineUUIDStr = ((RoutinePermsDescriptor) perm).getRoutineUUID().toString();
1:eb47bdb:             row.setColumn(1, new SQLChar(routineUUIDStr));
1:ac100d6:             break;
1:b7730e4:         }
1:b7730e4:         return row;
1:b7730e4:     } // end of buildIndexKeyRow
1:b7730e4:     
1:55f1cc9:     public int getPrimaryKeyIndexNumber()
1:b7730e4:     {
1:b7730e4:         return GRANTEE_ALIAS_GRANTOR_INDEX_NUM;
1:b7730e4:     }
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * Or a set of permissions in with a row from this catalog table
1:b7730e4:      *
1:b7730e4:      * @param row an existing row
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      * @param colsChanged An array with one element for each column in row. It is updated to
1:b7730e4:      *                    indicate which columns in row were changed
1:b7730e4:      *
1:b7730e4:      * @return The number of columns that were changed.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:b7730e4:     public int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         // There is only one kind of routine permission: execute or not. So the row would not exist
1:b7730e4:         // unless execute permission is there.
1:b7730e4:         // This changes if we implement WITH GRANT OPTION.
1:b7730e4:         return 0;
1:b7730e4:     }
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * Remove a set of permissions from a row from this catalog table
1:b7730e4:      *
1:b7730e4:      * @param row an existing row
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      * @param colsChanged An array with one element for each column in row. It is updated to
1:b7730e4:      *                    indicate which columns in row were changed
1:b7730e4:      *
1:b7730e4:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:b7730e4:     public int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         return -1; // There is only one kind of routine privilege so delete the whole row.
1:b7730e4:     } // end of removePermissions
1:7a1a699:     
1:7a1a699: 	/** 
1:7a1a699: 	 * @see PermissionsCatalogRowFactory#setUUIDOfThePassedDescriptor
1:7a1a699: 	 */
1:7a1a699:     public void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm)
1:7a1a699:     throws StandardException
1:7a1a699:     {
1:7a1a699:         DataValueDescriptor existingPermDVD = row.getColumn(ROUTINEPERMSID_COL_NUM);
1:7a1a699:         perm.setUUID(getUUIDFactory().recreateUUID(existingPermDVD.getString()));
1:7a1a699:     }
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e33b8d8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1:     public static final int GRANTEE_COL_NUM_IN_GRANTEE_ALIAS_GRANTOR_INDEX = 1;
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSROUTINEPERMSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:082459a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.JDBC30Translation;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:          return new SystemColumn[] {
1:              SystemColumnImpl.getUUIDColumn("ROUTINEPERMSID", false),
1:              SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:              SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:              SystemColumnImpl.getUUIDColumn("ALIASID", false),
1:              SystemColumnImpl.getIndicatorColumn("GRANTOPTION")
1:          };
1:     }
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn( ROUTINEPERMSID_COL_NUM, new SQLChar(routinePermID));
1:         row.setColumn( ALIASID_COL_NUM, new SQLChar(routineID));
1:         row.setColumn( GRANTOPTION_COL_NUM, new SQLChar("N"));
/////////////////////////////////////////////////////////////////////////
1:             row.setColumn(2, new SQLChar(routineUUIDStr));
1:             row.setColumn(1, new SQLChar(routinePermsUUIDStr));
1:             row.setColumn(1, new SQLChar(routineUUIDStr));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 		initInfo( COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexUniqueness, uuids);
commit:55f1cc9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public int getPrimaryKeyIndexNumber()
commit:7a1a699
/////////////////////////////////////////////////////////////////////////
1:     
1: 	/** 
1: 	 * @see PermissionsCatalogRowFactory#setUUIDOfThePassedDescriptor
1: 	 */
1:     public void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm)
1:     throws StandardException
1:     {
1:         DataValueDescriptor existingPermDVD = row.getColumn(ROUTINEPERMSID_COL_NUM);
1:         perm.setUUID(getUUIDFactory().recreateUUID(existingPermDVD.getString()));
1:     }
commit:1a6e9de
/////////////////////////////////////////////////////////////////////////
1:     private static final int ROUTINEPERMSID_COL_NUM = 1;
/////////////////////////////////////////////////////////////////////////
0: 		{ ROUTINEPERMSID_COL_NUM }
/////////////////////////////////////////////////////////////////////////
0: 		row.setColumn( ROUTINEPERMSID_COL_NUM, dvf.getCharDataValue(routinePermID));
/////////////////////////////////////////////////////////////////////////
1:         String routinePermsUUIDString = row.getColumn(ROUTINEPERMSID_COL_NUM).getString();
/////////////////////////////////////////////////////////////////////////
0:             columnList[ ROUTINEPERMSID_COL_NUM - 1] =
0:                                       ROUTINEPERMSID_COL_NUM,
commit:ac100d6
/////////////////////////////////////////////////////////////////////////
0:     private static final int ROUTINPERMSID_COL_NUM = 1;
/////////////////////////////////////////////////////////////////////////
1:     public static final int ROUTINEPERMSID_INDEX_NUM = 1;
1: 		{ GRANTEE_COL_NUM, ALIASID_COL_NUM, GRANTOR_COL_NUM},
0: 		{ ROUTINPERMSID_COL_NUM }
0: 		{"GRANTEE", "ALIASID", "GRANTOR"},
0: 		{"ROUTINEPERMSID"}
0:     private static final boolean[] indexUniqueness = { true, true };
1: 		,"c065801d-0103-0e39-b8e7-00000010f010"	// index1
1: 		,"40f70088-010c-4c2f-c8de-0000000f43a0" // index2
/////////////////////////////////////////////////////////////////////////
0: 		row.setColumn( ROUTINPERMSID_COL_NUM, dvf.getCharDataValue(routinePermID));
/////////////////////////////////////////////////////////////////////////
0:         String routinePermsUUIDString = row.getColumn(ROUTINPERMSID_COL_NUM).getString();
/////////////////////////////////////////////////////////////////////////
0:             columnList[ ROUTINPERMSID_COL_NUM - 1] =
0:                                       ROUTINPERMSID_COL_NUM,
/////////////////////////////////////////////////////////////////////////
1:         case ROUTINEPERMSID_INDEX_NUM:
0:             row.setColumn(1, getDataValueFactory().getNullChar( (StringDataValue) null)); // ROUTINEPERMSID
1:             break;
/////////////////////////////////////////////////////////////////////////
0:         case ROUTINEPERMSID_INDEX_NUM:
1:             row = getExecutionFactory().getIndexableRow( 1);
1:             String routinePermsUUIDStr = perm.getObjectID().toString();
0:             row.setColumn(1, getDataValueFactory().getCharDataValue( routinePermsUUIDStr));
1:             break;
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final int SYSROUTINEPERMS_ROUTINPERMSID = 1;
1:     private static final int GRANTEE_COL_NUM = 2;
1:     private static final int GRANTOR_COL_NUM = 3;
1:     private static final int ALIASID_COL_NUM = 4;
1:     private static final int GRANTOPTION_COL_NUM = 5;
1:     private static final int COLUMN_COUNT = 5;
/////////////////////////////////////////////////////////////////////////
1: 		UUID oid;
1:         String routinePermID = null;
/////////////////////////////////////////////////////////////////////////
1:             oid = rpd.getUUID();
1:             if ( oid == null )
1:             {
1: 				oid = getUUIDFactory().createUUID();
1: 				rpd.setUUID(oid);
1:             }
1:             routinePermID = oid.toString();
0: 		row.setColumn( SYSROUTINEPERMS_ROUTINPERMSID, dvf.getCharDataValue(routinePermID));
/////////////////////////////////////////////////////////////////////////
0:         String routinePermsUUIDString = row.getColumn(SYSROUTINEPERMS_ROUTINPERMSID).getString();
1:         UUID routinePermsUUID = getUUIDFactory().recreateUUID(routinePermsUUIDString);
1:         RoutinePermsDescriptor routinePermsDesc =
1: 	        new RoutinePermsDescriptor( dataDictionary,
1:                     getAuthorizationID( row, GRANTEE_COL_NUM),
1:                     getAuthorizationID( row, GRANTOR_COL_NUM),
1:                     aliasUUID);
1:         routinePermsDesc.setUUID(routinePermsUUID);
1: 			return routinePermsDesc;
/////////////////////////////////////////////////////////////////////////
0:             columnList[ SYSROUTINEPERMS_ROUTINPERMSID - 1] =
0:                 new SystemColumnImpl( convertIdCase( "ROUTINEPERMSID"),
0:                                       SYSROUTINEPERMS_ROUTINPERMSID,
0:                                       0, // precision
0:                                       0, // scale
0:                                       false, // nullability
0:                                       "CHAR",
0:                                       true,
0:                                       36);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b7e13a9
/////////////////////////////////////////////////////////////////////////
1:     public static final int ALIASID_INDEX_NUM = 2;
1: 
1: 		{ ROUTINEPERMSID_COL_NUM },
1: 		{ ALIASID_COL_NUM }
0: 		{"ROUTINEPERMSID"},
0: 		{"ALIASID"}
1:     private static final boolean[] indexUniqueness = { true, true, false };
/////////////////////////////////////////////////////////////////////////
1: 		,"08264012-010c-bc85-060d-000000109ab8" // index3
/////////////////////////////////////////////////////////////////////////
1:         case ALIASID_INDEX_NUM:
0:             row.setColumn(1, getDataValueFactory().getNullChar( (StringDataValue) null)); // ROUTINEPERMSID
1:             break;
/////////////////////////////////////////////////////////////////////////
0:         case ALIASID_INDEX_NUM:
1:             row = getExecutionFactory().getIndexableRow( 1);
1:             routineUUIDStr = ((RoutinePermsDescriptor) perm).getRoutineUUID().toString();
0:             row.setColumn(1, getDataValueFactory().getCharDataValue( routineUUIDStr));
0:             break;
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.PermissionsCatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.catalog.Statistics;
1: 
0: import java.sql.Timestamp;
1: 
1: /**
1:  * Factory for creating a SYSROUTINEPERMS row.
1:  *
1:  */
1: 
1: public class SYSROUTINEPERMSRowFactory extends PermissionsCatalogRowFactory
1: {
1: 	static final String TABLENAME_STRING = "SYSROUTINEPERMS";
1: 
1:     // Column numbers for the SYSROUTINEPERMS table. 1 based
0:     private static final int GRANTEE_COL_NUM = 1;
0:     private static final int GRANTOR_COL_NUM = 2;
0:     private static final int ALIASID_COL_NUM = 3;
0:     private static final int GRANTOPTION_COL_NUM = 4;
0:     private static final int COLUMN_COUNT = 4;
1: 
1:     static final int GRANTEE_ALIAS_GRANTOR_INDEX_NUM = 0;
1: 	private static final int[][] indexColumnPositions = 
1: 	{ 
0: 		{ GRANTEE_COL_NUM, ALIASID_COL_NUM, GRANTOR_COL_NUM}
1: 	};
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"GRANTEE", "ALIASID", "GRANTOR"}
1: 	};
0:     private static final boolean[] indexUniqueness = { true};
1: 
1:     private	static final String[] uuids =
1:     {
1:         "2057c01b-0103-0e39-b8e7-00000010f010" // catalog UUID
1: 		,"185e801c-0103-0e39-b8e7-00000010f010"	// heap UUID
0: 		,"c065801d-0103-0e39-b8e7-00000010f010"	// index
1:     };
1: 
0:     private SystemColumn[] columnList;
1: 
0:     public SYSROUTINEPERMSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                      boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo( COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexColumnNames, indexUniqueness, uuids);
1: 	}
1: 
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent) throws StandardException
1: 	{
1:         DataValueDescriptor grantee = null;
1:         DataValueDescriptor grantor = null;
1:         String routineID = null;
1:         
1:         if( td == null)
1:         {
1:             grantee = getNullAuthorizationID();
1:             grantor = getNullAuthorizationID();
1:         }
1:         else
1:         {
1:             RoutinePermsDescriptor rpd = (RoutinePermsDescriptor) td;
1:             grantee = getAuthorizationID( rpd.getGrantee());
1:             grantor = getAuthorizationID( rpd.getGrantor());
1:             if( rpd.getRoutineUUID() != null)
1:                 routineID = rpd.getRoutineUUID().toString();
1:         }
1: 		ExecRow row = getExecutionFactory().getValueRow( COLUMN_COUNT);
1:         row.setColumn( GRANTEE_COL_NUM, grantee);
1:         row.setColumn( GRANTOR_COL_NUM, grantor);
0:         row.setColumn( ALIASID_COL_NUM, dvf.getCharDataValue( routineID));
0:         row.setColumn( GRANTOPTION_COL_NUM, dvf.getCharDataValue( "N"));
1:         return row;
1:     } // end of makeRow
1:             
1: 	/** builds a tuple descriptor from a row */
1: 	public TupleDescriptor buildDescriptor(ExecRow row,
1:                                            TupleDescriptor parentTuple,
1:                                            DataDictionary	dataDictionary)
1: 		throws StandardException
1:     {
1:         if( SanityManager.DEBUG)
1:             SanityManager.ASSERT( row.nColumns() == COLUMN_COUNT,
1:                                   "Wrong size row passed to SYSROUTINEPERMSRowFactory.buildDescriptor");
1: 
1:         String aliasUUIDString = row.getColumn( ALIASID_COL_NUM).getString();
1:         UUID aliasUUID = getUUIDFactory().recreateUUID(aliasUUIDString);
1: 
0:         return new RoutinePermsDescriptor( dataDictionary,
0:                                            getAuthorizationID( row, GRANTEE_COL_NUM),
0:                                            getAuthorizationID( row, GRANTOR_COL_NUM),
0:                                            aliasUUID);
1:     } // end of buildDescriptor
1: 
1: 	/** builds a column list for the catalog */
1: 	public SystemColumn[] buildColumnList()
1:     {
0: 		if (columnList == null)
1:         {
0:             columnList = new SystemColumn[ COLUMN_COUNT];
1: 
0:             columnList[ GRANTEE_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "GRANTEE"),
0:                                     GRANTEE_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     AUTHORIZATION_ID_TYPE,
0:                                     AUTHORIZATION_ID_IS_BUILTIN_TYPE,
0:                                     AUTHORIZATION_ID_LENGTH);
0:             columnList[ GRANTOR_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "GRANTOR"),
0:                                     GRANTOR_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     AUTHORIZATION_ID_TYPE,
0:                                     AUTHORIZATION_ID_IS_BUILTIN_TYPE,
0:                                     AUTHORIZATION_ID_LENGTH);
0:             columnList[ ALIASID_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "ALIASID"),
0:                                     ALIASID_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     36);
0:             columnList[ GRANTOPTION_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "GRANTOPTION"),
0:                                     GRANTOPTION_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
1:         }
0: 		return columnList;
0:     } // end of buildColumnList
1: 
1: 	/**
0: 	 * builds an empty row given for a given index number.
1: 	 */
0:   	public ExecIndexRow buildEmptyIndexRow(int indexNumber,
0:                                            RowLocation rowLocation)
1:   		throws StandardException
1:     {
0:         ExecIndexRow row = getExecutionFactory().getIndexableRow( indexColumnPositions[indexNumber].length + 1);
0:         row.setColumn( row.nColumns(), rowLocation);
1:         
1:         switch( indexNumber)
1:         {
1:         case GRANTEE_ALIAS_GRANTOR_INDEX_NUM:
0:             row.setColumn(1, getNullAuthorizationID()); // grantee
0:             row.setColumn(2, getDataValueFactory().getNullChar( (StringDataValue) null)); // table UUID
0:             row.setColumn(3, getNullAuthorizationID()); // grantor
0:             break;
1:         }
1:         return row;
0:     } // end of buildEmptyIndexRow
1: 
1: 	/**
1: 	 * builds an index key row given for a given index number.
1: 	 */
1:   	public ExecIndexRow buildIndexKeyRow( int indexNumber,
1:                                           PermissionsDescriptor perm) 
1:   		throws StandardException
1:     {
1:         ExecIndexRow row = null;
1:         
1:         switch( indexNumber)
1:         {
1:         case GRANTEE_ALIAS_GRANTOR_INDEX_NUM:
1:             // RESOLVE We do not support the FOR GRANT OPTION, so rougine permission rows are unique on the
1:             // grantee and alias UUID columns. The grantor column will always have the name of the owner of the
1:             // routine. So the index key, used for searching the index, only has grantee and alias UUID columns.
1:             // It does not have a grantor column.
1:             //
1:             // If we support FOR GRANT OPTION then there may be multiple routine permissions rows for a
1:             // (grantee, aliasID) combination. Since there is only one kind of routine permission (execute)
1:             // execute permission checking need not worry about multiple routine permission rows for a
1:             // (grantee, aliasID) combination, it only cares whether there are any. Grant and revoke must
1:             // look through multiple rows to see if the current user has grant/revoke permission and use
1:             // the full key in checking for the pre-existence of the permission being granted or revoked.
1:             row = getExecutionFactory().getIndexableRow( 2);
1:             row.setColumn(1, getAuthorizationID( perm.getGrantee()));
1:             String routineUUIDStr = ((RoutinePermsDescriptor) perm).getRoutineUUID().toString();
0:             row.setColumn(2, getDataValueFactory().getCharDataValue( routineUUIDStr));
0:             break;
1:         }
1:         return row;
1:     } // end of buildIndexKeyRow
1:     
0:     public int getPrimaryIndexNumber()
1:     {
1:         return GRANTEE_ALIAS_GRANTOR_INDEX_NUM;
1:     }
1: 
1:     /**
1:      * Or a set of permissions in with a row from this catalog table
1:      *
1:      * @param row an existing row
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      *
1:      * @return The number of columns that were changed.
1:      *
1:      * @exception StandardException standard error policy
1:      */
1:     public int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:         throws StandardException
1:     {
1:         // There is only one kind of routine permission: execute or not. So the row would not exist
1:         // unless execute permission is there.
1:         // This changes if we implement WITH GRANT OPTION.
1:         return 0;
1:     }
1: 
1:     /**
1:      * Remove a set of permissions from a row from this catalog table
1:      *
1:      * @param row an existing row
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      *
1:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:      *
1:      * @exception StandardException standard error policy
1:      */
1:     public int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:         throws StandardException
1:     {
1:         return -1; // There is only one kind of routine privilege so delete the whole row.
1:     } // end of removePermissions
1: }
============================================================================