1:3174d2a: /*
1:3174d2a: 
1:103248e:    Derby - Class org.apache.derbyTesting.unitTests.junit.DerbyVersionTest
1:3174d2a: 
1:3174d2a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3174d2a:    contributor license agreements.  See the NOTICE file distributed with
1:3174d2a:    this work for additional information regarding copyright ownership.
1:3174d2a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:3174d2a:    (the "License"); you may not use this file except in compliance with
1:3174d2a:    the License.  You may obtain a copy of the License at
1:3174d2a: 
1:3174d2a:       http://www.apache.org/licenses/LICENSE-2.0
1:3174d2a: 
1:3174d2a:    Unless required by applicable law or agreed to in writing, software
1:3174d2a:    distributed under the License is distributed on an "AS IS" BASIS,
1:3174d2a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3174d2a:    See the License for the specific language governing permissions and
1:3174d2a:    limitations under the License.
1:3174d2a: 
1:3174d2a: */
1:3174d2a: 
1:3174d2a: package org.apache.derbyTesting.unitTests.junit;
1:3174d2a: 
1:3174d2a: import junit.framework.Test;
1:3174d2a: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:3174d2a: import org.apache.derbyTesting.junit.DerbyVersion;
1:3174d2a: 
1:3174d2a: /**
1:3174d2a:  * Tests the functionality of {@code DerbyVersion}.
1:3174d2a:  */
1:3174d2a: public class DerbyVersionTest
1:3174d2a:         extends BaseTestCase {
1:3174d2a: 
1:3174d2a:     private static final DerbyVersion _10_2     = new DerbyVersion(10,2,0,0);
1:3174d2a:     private static final DerbyVersion _10_2_2_0 = new DerbyVersion(10,2,2,2);
1:3174d2a:     private static final DerbyVersion _10_3     = new DerbyVersion(10,3,0,0);
1:3174d2a:     private static final DerbyVersion _10_4     = new DerbyVersion(10,4,0,0);
1:3174d2a:     private static final DerbyVersion _10_5     = new DerbyVersion(10,5,0,0);
1:3174d2a:     private static final DerbyVersion _10_5_1_1 = new DerbyVersion(10,5,1,1);
1:3174d2a:     private static final DerbyVersion _10_5_2_0 = new DerbyVersion(10,5,2,0);
1:3174d2a:     private static final DerbyVersion _10_5_3_0 = new DerbyVersion(10,5,3,0);
1:3174d2a:     private static final DerbyVersion _10_6     = new DerbyVersion(10,6,0,0);
1:3174d2a:     private static final DerbyVersion _10_7     = new DerbyVersion(10,7,0,0);
1:3174d2a:     private static final DerbyVersion _10_8     = new DerbyVersion(10,8,0,0);
1:3174d2a:     private static final DerbyVersion _10_8_1_2 = new DerbyVersion(10,8,1,2);
1:3174d2a:     private static final DerbyVersion _10_9     = new DerbyVersion(10,9,0,0);
1:3174d2a: 
1:3174d2a:     private static final DerbyVersion _11_0 = new DerbyVersion(11,0,0,0);
1:3174d2a:     private static final DerbyVersion _11_9 = new DerbyVersion(11,9,9,9);
1:3174d2a: 
1:3174d2a: 
1:3174d2a:     public DerbyVersionTest(String name) {
1:3174d2a:         super(name);
1:3174d2a:     }
1:3174d2a:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(
1:1ae02c9:             DerbyVersionTest.class, "DerbyVersionTest tests");
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testLessThan() {
1:3174d2a:         assertTrue(_10_2.lessThan(_10_2_2_0));
1:3174d2a:         assertTrue(_10_2.lessThan(_10_3));
1:3174d2a:         assertTrue(_10_5.lessThan(_10_5_1_1));
1:3174d2a:         assertTrue(_10_5_1_1.lessThan(_10_5_2_0));
1:3174d2a:         assertTrue(_10_5_2_0.lessThan(_10_5_3_0));
1:3174d2a:         assertTrue(_10_8_1_2.lessThan(_11_0));
1:3174d2a:         assertTrue(_10_8_1_2.lessThan(_11_9));
1:3174d2a: 
1:3174d2a:         assertFalse(_10_5.lessThan(_10_4));
1:3174d2a:         assertFalse(_10_5.lessThan(_10_5));
1:3174d2a:         assertFalse(_11_0.lessThan(_10_8));
1:3174d2a:         assertFalse(_11_9.lessThan(_10_7));
1:3174d2a:     }
1:3174d2a: 
1:e8c9fe3:     public void testAtLeast() {
1:e8c9fe3:         assertTrue(_10_4.atLeast(_10_4));
1:e8c9fe3:         assertTrue(_10_4.atLeast(_10_3));
1:e8c9fe3:         assertTrue(_10_5_2_0.atLeast(_10_5_1_1));
1:3174d2a: 
1:e8c9fe3:         assertFalse(_10_2.atLeast(_10_4));
1:e8c9fe3:         assertFalse(_10_2.atLeast(_11_0));
1:e8c9fe3:         assertFalse(_10_5_1_1.atLeast(_10_5_3_0));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testGreaterThan() {
1:3174d2a:         assertTrue(_10_5_3_0.greaterThan(_10_5_2_0));
1:3174d2a:         assertTrue(_10_5_3_0.greaterThan(_10_5_1_1));
1:3174d2a:         assertTrue(_10_5_3_0.greaterThan(_10_2));
1:3174d2a: 
1:3174d2a:         assertFalse(_10_2.greaterThan(_10_3));
1:3174d2a:         assertFalse(_10_8.greaterThan(_11_0));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a: 
1:e8c9fe3:     public void testAtMost() {
1:e8c9fe3:         assertTrue(_10_4.atMost(_10_5));
1:e8c9fe3:         assertTrue(_10_8.atMost(_11_9));
1:3174d2a: 
1:e8c9fe3:         assertFalse(_10_7.atMost(_10_2));
1:e8c9fe3:         assertFalse(_11_0.atMost(_10_5_3_0));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testAtMajorMinor() {
1:3174d2a:         assertTrue(_10_4.atMajorMinor(10, 4));
1:3174d2a: 
1:3174d2a:         assertFalse(_10_2.atMajorMinor(10, 1));
1:3174d2a:         assertFalse(_10_2.atMajorMinor(10, 3));
1:3174d2a:         assertFalse(_10_2.atMajorMinor(11, 2));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testAtMajorMinorOf() {
1:3174d2a:         assertTrue(_10_5.atMajorMinorOf(_10_5_1_1));
1:3174d2a:         assertTrue(_10_5.atMajorMinorOf(_10_5_2_0));
1:3174d2a:         assertTrue(_10_5.atMajorMinorOf(_10_5_3_0));
1:3174d2a:         assertTrue(_10_5_3_0.atMajorMinorOf(_10_5_3_0));
1:3174d2a:         assertTrue(_10_5_3_0.atMajorMinorOf(_10_5_1_1));
1:3174d2a: 
1:3174d2a:         assertFalse(_10_5_2_0.atMajorMinorOf(_10_3));
1:3174d2a:         assertFalse(_10_5_2_0.atMajorMinorOf(_11_9));
1:3174d2a:         assertFalse(_10_5_2_0.atMajorMinorOf(_10_2));
1:3174d2a:         assertFalse(_10_5_2_0.atMajorMinorOf(_10_2_2_0));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testGetMajor() {
1:3174d2a:         assertEquals(10, _10_5_1_1.getMajor());
1:3174d2a:         assertEquals(10, _10_8.getMajor());
1:3174d2a:         assertEquals(11, _11_9.getMajor());
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testGetMinor() {
1:3174d2a:         assertEquals(5, _10_5_1_1.getMinor());
1:3174d2a:         assertEquals(8, _10_8.getMinor());
1:3174d2a:         assertEquals(9, _11_9.getMinor());
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testGetFixpack() {
1:3174d2a:         assertEquals(1, _10_5_1_1.getFixpack());
1:3174d2a:         assertEquals(0, _10_8.getFixpack());
1:3174d2a:         assertEquals(9, _11_9.getFixpack());
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testGetPoint() {
1:3174d2a:         assertEquals(1, _10_5_1_1.getPoint());
1:3174d2a:         assertEquals(0, _10_8.getPoint());
1:3174d2a:         assertEquals(9, _11_9.getPoint());
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testCreateGet() {
1:3174d2a:         DerbyVersion v = new DerbyVersion(1, 2, 3, 4);
1:3174d2a:         assertEquals(1, v.getMajor());
1:3174d2a:         assertEquals(2, v.getMinor());
1:3174d2a:         assertEquals(3, v.getFixpack());
1:3174d2a:         assertEquals(4, v.getPoint());
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testCompareTo() {
1:3174d2a:         assertTrue(_10_5_1_1.compareTo(_10_2) > 0);
1:3174d2a:         assertTrue(_10_5_1_1.compareTo(_10_8) < 0);
1:3174d2a:         assertTrue(_11_0.compareTo(_11_9) < 0);
1:3174d2a: 
1:3174d2a:         assertEquals(0, _11_0.compareTo(_11_0));
1:3174d2a:         assertEquals(0, _10_2.compareTo(_10_2));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testEquals() {
1:3174d2a:         assertTrue(_10_6.equals(_10_6));
1:3174d2a: 
1:3174d2a:         assertFalse(_10_2.equals(this));
1:3174d2a:         assertFalse(_10_2.equals(null));
1:3174d2a:         assertFalse(_11_0.equals(_10_8));
1:3174d2a:         assertFalse(_10_5_2_0.equals(_10_5_3_0));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public void testParseString() {
1:3174d2a:         DerbyVersion dv = DerbyVersion.parseVersionString(
1:3174d2a:                 "10.9.0.0 alpha - (1180861M)");
1:3174d2a:         assertTrue(dv.equals(_10_9));
1:3174d2a:         assertEquals(0, dv.compareTo(_10_9));
1:3174d2a: 
1:3174d2a:         dv = DerbyVersion.parseVersionString("10.8.1.2");
1:3174d2a:         assertTrue(dv.equals(_10_8_1_2));
1:3174d2a:         assertEquals(0, dv.compareTo(_10_8_1_2));
1:3174d2a:         
1:3174d2a:         dv = DerbyVersion.parseVersionString("   10.8.1.2   ");
1:3174d2a:         assertTrue(dv.equals(_10_8_1_2));
1:3174d2a:         assertEquals(0, dv.compareTo(_10_8_1_2));
1:3174d2a: 
1:3174d2a:         try {
1:3174d2a:             dv = DerbyVersion.parseVersionString("10.8.1");
1:3174d2a:             fail("should have failed");
1:3174d2a:         } catch (IllegalArgumentException iae) {
1:3174d2a:             // As expected.
1:3174d2a:         }
1:3174d2a: 
1:3174d2a:         try {
1:3174d2a:             dv = DerbyVersion.parseVersionString("10.8.1.");
1:3174d2a:             fail("should have failed");
1:3174d2a:         } catch (IllegalArgumentException iae) {
1:3174d2a:             // As expected.
1:3174d2a:         }
1:3174d2a: 
1:3174d2a:         try {
1:3174d2a:             dv = DerbyVersion.parseVersionString("10.8.1.two");
1:3174d2a:             fail("should have failed");
1:3174d2a:         } catch (IllegalArgumentException iae) {
1:3174d2a:             // As expected.
1:3174d2a:         }
1:3174d2a:     }
1:3174d2a: }
1:3174d2a: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(
1:             DerbyVersionTest.class, "DerbyVersionTest tests");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:e8c9fe3
/////////////////////////////////////////////////////////////////////////
1:     public void testAtLeast() {
1:         assertTrue(_10_4.atLeast(_10_4));
1:         assertTrue(_10_4.atLeast(_10_3));
1:         assertTrue(_10_5_2_0.atLeast(_10_5_1_1));
1:         assertFalse(_10_2.atLeast(_10_4));
1:         assertFalse(_10_2.atLeast(_11_0));
1:         assertFalse(_10_5_1_1.atLeast(_10_5_3_0));
/////////////////////////////////////////////////////////////////////////
1:     public void testAtMost() {
1:         assertTrue(_10_4.atMost(_10_5));
1:         assertTrue(_10_8.atMost(_11_9));
1:         assertFalse(_10_7.atMost(_10_2));
1:         assertFalse(_11_0.atMost(_10_5_3_0));
commit:103248e
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.DerbyVersionTest
commit:3174d2a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.unitTests.junit.InputStreamUtilTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.DerbyVersion;
1: 
1: /**
1:  * Tests the functionality of {@code DerbyVersion}.
1:  */
1: public class DerbyVersionTest
1:         extends BaseTestCase {
1: 
1:     private static final DerbyVersion _10_2     = new DerbyVersion(10,2,0,0);
1:     private static final DerbyVersion _10_2_2_0 = new DerbyVersion(10,2,2,2);
1:     private static final DerbyVersion _10_3     = new DerbyVersion(10,3,0,0);
1:     private static final DerbyVersion _10_4     = new DerbyVersion(10,4,0,0);
1:     private static final DerbyVersion _10_5     = new DerbyVersion(10,5,0,0);
1:     private static final DerbyVersion _10_5_1_1 = new DerbyVersion(10,5,1,1);
1:     private static final DerbyVersion _10_5_2_0 = new DerbyVersion(10,5,2,0);
1:     private static final DerbyVersion _10_5_3_0 = new DerbyVersion(10,5,3,0);
1:     private static final DerbyVersion _10_6     = new DerbyVersion(10,6,0,0);
1:     private static final DerbyVersion _10_7     = new DerbyVersion(10,7,0,0);
1:     private static final DerbyVersion _10_8     = new DerbyVersion(10,8,0,0);
1:     private static final DerbyVersion _10_8_1_2 = new DerbyVersion(10,8,1,2);
1:     private static final DerbyVersion _10_9     = new DerbyVersion(10,9,0,0);
1: 
1:     private static final DerbyVersion _11_0 = new DerbyVersion(11,0,0,0);
1:     private static final DerbyVersion _11_9 = new DerbyVersion(11,9,9,9);
1: 
1: 
1:     public DerbyVersionTest(String name) {
1:         super(name);
1:     }
1:     public static Test suite() {
0:         return new TestSuite(DerbyVersionTest.class, "DerbyVersionTest tests");
1:     }
1: 
1:     public void testLessThan() {
1:         assertTrue(_10_2.lessThan(_10_2_2_0));
1:         assertTrue(_10_2.lessThan(_10_3));
1:         assertTrue(_10_5.lessThan(_10_5_1_1));
1:         assertTrue(_10_5_1_1.lessThan(_10_5_2_0));
1:         assertTrue(_10_5_2_0.lessThan(_10_5_3_0));
1:         assertTrue(_10_8_1_2.lessThan(_11_0));
1:         assertTrue(_10_8_1_2.lessThan(_11_9));
1: 
1:         assertFalse(_10_5.lessThan(_10_4));
1:         assertFalse(_10_5.lessThan(_10_5));
1:         assertFalse(_11_0.lessThan(_10_8));
1:         assertFalse(_11_9.lessThan(_10_7));
1:     }
1: 
0:     public void testAtLeastAs() {
0:         assertTrue(_10_4.atLeastAs(_10_4));
0:         assertTrue(_10_4.atLeastAs(_10_3));
0:         assertTrue(_10_5_2_0.atLeastAs(_10_5_1_1));
1: 
0:         assertFalse(_10_2.atLeastAs(_10_4));
0:         assertFalse(_10_2.atLeastAs(_11_0));
0:         assertFalse(_10_5_1_1.atLeastAs(_10_5_3_0));
1:     }
1: 
1:     public void testGreaterThan() {
1:         assertTrue(_10_5_3_0.greaterThan(_10_5_2_0));
1:         assertTrue(_10_5_3_0.greaterThan(_10_5_1_1));
1:         assertTrue(_10_5_3_0.greaterThan(_10_2));
1: 
1:         assertFalse(_10_2.greaterThan(_10_3));
1:         assertFalse(_10_8.greaterThan(_11_0));
1:     }
1: 
1: 
0:     public void testAtMostAs() {
0:         assertTrue(_10_4.atMostAs(_10_5));
0:         assertTrue(_10_8.atMostAs(_11_9));
1: 
0:         assertFalse(_10_7.atMostAs(_10_2));
0:         assertFalse(_11_0.atMostAs(_10_5_3_0));
1:     }
1: 
1:     public void testAtMajorMinor() {
1:         assertTrue(_10_4.atMajorMinor(10, 4));
1: 
1:         assertFalse(_10_2.atMajorMinor(10, 1));
1:         assertFalse(_10_2.atMajorMinor(10, 3));
1:         assertFalse(_10_2.atMajorMinor(11, 2));
1:     }
1: 
1:     public void testAtMajorMinorOf() {
1:         assertTrue(_10_5.atMajorMinorOf(_10_5_1_1));
1:         assertTrue(_10_5.atMajorMinorOf(_10_5_2_0));
1:         assertTrue(_10_5.atMajorMinorOf(_10_5_3_0));
1:         assertTrue(_10_5_3_0.atMajorMinorOf(_10_5_3_0));
1:         assertTrue(_10_5_3_0.atMajorMinorOf(_10_5_1_1));
1: 
1:         assertFalse(_10_5_2_0.atMajorMinorOf(_10_3));
1:         assertFalse(_10_5_2_0.atMajorMinorOf(_11_9));
1:         assertFalse(_10_5_2_0.atMajorMinorOf(_10_2));
1:         assertFalse(_10_5_2_0.atMajorMinorOf(_10_2_2_0));
1:     }
1: 
1:     public void testGetMajor() {
1:         assertEquals(10, _10_5_1_1.getMajor());
1:         assertEquals(10, _10_8.getMajor());
1:         assertEquals(11, _11_9.getMajor());
1:     }
1: 
1:     public void testGetMinor() {
1:         assertEquals(5, _10_5_1_1.getMinor());
1:         assertEquals(8, _10_8.getMinor());
1:         assertEquals(9, _11_9.getMinor());
1:     }
1: 
1:     public void testGetFixpack() {
1:         assertEquals(1, _10_5_1_1.getFixpack());
1:         assertEquals(0, _10_8.getFixpack());
1:         assertEquals(9, _11_9.getFixpack());
1:     }
1: 
1:     public void testGetPoint() {
1:         assertEquals(1, _10_5_1_1.getPoint());
1:         assertEquals(0, _10_8.getPoint());
1:         assertEquals(9, _11_9.getPoint());
1:     }
1: 
1:     public void testCreateGet() {
1:         DerbyVersion v = new DerbyVersion(1, 2, 3, 4);
1:         assertEquals(1, v.getMajor());
1:         assertEquals(2, v.getMinor());
1:         assertEquals(3, v.getFixpack());
1:         assertEquals(4, v.getPoint());
1:     }
1: 
1:     public void testCompareTo() {
1:         assertTrue(_10_5_1_1.compareTo(_10_2) > 0);
1:         assertTrue(_10_5_1_1.compareTo(_10_8) < 0);
1:         assertTrue(_11_0.compareTo(_11_9) < 0);
1: 
1:         assertEquals(0, _11_0.compareTo(_11_0));
1:         assertEquals(0, _10_2.compareTo(_10_2));
1:     }
1: 
1:     public void testEquals() {
1:         assertTrue(_10_6.equals(_10_6));
1: 
1:         assertFalse(_10_2.equals(this));
1:         assertFalse(_10_2.equals(null));
1:         assertFalse(_11_0.equals(_10_8));
1:         assertFalse(_10_5_2_0.equals(_10_5_3_0));
1:     }
1: 
1:     public void testParseString() {
1:         DerbyVersion dv = DerbyVersion.parseVersionString(
1:                 "10.9.0.0 alpha - (1180861M)");
1:         assertTrue(dv.equals(_10_9));
1:         assertEquals(0, dv.compareTo(_10_9));
1: 
1:         dv = DerbyVersion.parseVersionString("10.8.1.2");
1:         assertTrue(dv.equals(_10_8_1_2));
1:         assertEquals(0, dv.compareTo(_10_8_1_2));
1:         
1:         dv = DerbyVersion.parseVersionString("   10.8.1.2   ");
1:         assertTrue(dv.equals(_10_8_1_2));
1:         assertEquals(0, dv.compareTo(_10_8_1_2));
1: 
1:         try {
1:             dv = DerbyVersion.parseVersionString("10.8.1");
1:             fail("should have failed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected.
1:         }
1: 
1:         try {
1:             dv = DerbyVersion.parseVersionString("10.8.1.");
1:             fail("should have failed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected.
1:         }
1: 
1:         try {
1:             dv = DerbyVersion.parseVersionString("10.8.1.two");
1:             fail("should have failed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected.
1:         }
1:     }
1: }
1: 
============================================================================