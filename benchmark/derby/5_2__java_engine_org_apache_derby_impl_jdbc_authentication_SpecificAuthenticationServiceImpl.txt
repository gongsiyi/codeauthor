1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc.authentication;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.jdbc.AuthenticationService;
1:eac0369: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: import org.apache.derby.authentication.UserAuthenticator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This authentication service is a specific/user defined User authentication
1:eac0369:  * level support.
1:eac0369:  * <p>
1:eac0369:  * It calls the specific User authentication scheme defined by the user/
1:eac0369:  * administrator.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class SpecificAuthenticationServiceImpl
1:eac0369: 	extends AuthenticationServiceBase {
1:eac0369: 
1:eac0369: 	private String specificAuthenticationScheme;
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ModuleControl implementation (overriden)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *  Check if we should activate this authentication service.
1:eac0369: 	 */
1:eac0369: 	public boolean canSupport(Properties properties) {
1:eac0369: 
1:eac0369: 		//
1:eac0369: 		// we check 2 things:
1:eac0369: 		// - if derby.connection.requireAuthentication system
1:eac0369: 		//   property is set to true.
1:eac0369: 		// - if derby.authentication.provider is set and is not equal
1:eac0369: 		//	 to LDAP or BUILTIN.
1:eac0369: 		//
1:eac0369: 		// and in that case we are the authentication service that should
1:eac0369: 		// be run.
1:eac0369: 		//
1:eac0369: 		if (!requireAuthentication(properties))
1:eac0369: 			return false;
1:eac0369: 
1:5107349:         //
1:5107349:         // Don't treat the NATIVE authentication specification as a user-supplied
1:5107349:         // class which should be instantiated.
1:5107349:         //
1:5107349:         if (  PropertyUtil.nativeAuthenticationEnabled( properties ) ) { return false; }
1:5107349: 
1:eac0369: 		specificAuthenticationScheme = PropertyUtil.getPropertyFromSet(
1:eac0369: 					properties,
1:eac0369: 					org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);
1:eac0369: 		if (
1:eac0369: 			 ((specificAuthenticationScheme != null) &&
1:eac0369: 			  (specificAuthenticationScheme.length() != 0) &&
1:eac0369: 
1:eac0369: 			  (!((StringUtil.SQLEqualsIgnoreCase(specificAuthenticationScheme,
1:eac0369: 					  org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_BUILTIN)) ||
1:eac0369: 			  (specificAuthenticationScheme.equalsIgnoreCase(
1:5107349:                                                              org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP))  ))))
1:eac0369: 			return true;
1:eac0369: 		else
1:eac0369: 			return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1:eac0369: 	 * @exception StandardException upon failure to load/boot the expected
1:eac0369: 	 * authentication service.
1:eac0369: 	 */
1:eac0369: 	public void boot(boolean create, Properties properties)
1:eac0369: 	  throws StandardException {
1:eac0369: 
1:eac0369: 		// We need authentication
1:eac0369: 		// setAuthentication(true);
1:eac0369: 
1:eac0369: 		// we call the super in case there is anything to get initialized.
1:eac0369: 		super.boot(create, properties);
1:eac0369: 
1:eac0369: 		// We must retrieve and load the authentication scheme that we were
1:eac0369: 		// told to. The class loader will report an exception if it could not
1:eac0369: 		// find the class in the classpath.
1:eac0369: 		//
1:eac0369: 		// We must then make sure that the ImplementationScheme loaded,
1:eac0369: 		// implements the published UserAuthenticator interface we
1:eac0369: 		// provide.
1:eac0369: 		//
1:eac0369: 
1:eac0369: 		Throwable t;
1:eac0369: 		try {
1:eac0369: 
1:4469400: 			Class<?> sasClass = Class.forName(specificAuthenticationScheme);
1:eac0369: 			if (!UserAuthenticator.class.isAssignableFrom(sasClass)) {
1:eac0369: 				throw StandardException.newException(SQLState.AUTHENTICATION_NOT_IMPLEMENTED,
1:eac0369: 					specificAuthenticationScheme, "org.apache.derby.authentication.UserAuthenticator");
1:eac0369: 			}
1:eac0369: 
1:4469400: 			UserAuthenticator aScheme = (UserAuthenticator) sasClass.getConstructor().newInstance();
1:eac0369: 
1:eac0369: 			// Set ourselves as being ready and loading the proper
1:eac0369: 			// authentication scheme for this service
1:eac0369: 			//
1:eac0369: 			this.setAuthenticationService(aScheme);
1:eac0369: 
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		} catch (ClassNotFoundException cnfe) {
1:eac0369: 			t = cnfe;
1:eac0369: 		} catch (InstantiationException ie) {
1:eac0369: 			t = ie;
1:eac0369: 		} catch (IllegalAccessException iae) {
1:eac0369: 			t = iae;
1:4469400: 		} catch (NoSuchMethodException nsme) {
1:4469400: 			t = nsme;
1:4469400: 		} catch (java.lang.reflect.InvocationTargetException ite) {
1:4469400: 			t = ite;
1:eac0369: 		}
1:33605bd:         
1:33605bd:         String  detail = t.getClass().getName() + ": " + t.getMessage();
1:33605bd: 		throw StandardException.newException
1:33605bd:             ( SQLState.AUTHENTICATION_SCHEME_ERROR, specificAuthenticationScheme, detail );
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: 			Class<?> sasClass = Class.forName(specificAuthenticationScheme);
1: 			UserAuthenticator aScheme = (UserAuthenticator) sasClass.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1: 		} catch (NoSuchMethodException nsme) {
1: 			t = nsme;
1: 		} catch (java.lang.reflect.InvocationTargetException ite) {
1: 			t = ite;
commit:33605bd
/////////////////////////////////////////////////////////////////////////
1:         
1:         String  detail = t.getClass().getName() + ": " + t.getMessage();
1: 		throw StandardException.newException
1:             ( SQLState.AUTHENTICATION_SCHEME_ERROR, specificAuthenticationScheme, detail );
commit:5107349
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // Don't treat the NATIVE authentication specification as a user-supplied
1:         // class which should be instantiated.
1:         //
1:         if (  PropertyUtil.nativeAuthenticationEnabled( properties ) ) { return false; }
1: 
/////////////////////////////////////////////////////////////////////////
1:                                                              org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP))  ))))
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc.authentication;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.jdbc.AuthenticationService;
1: import org.apache.derby.iapi.util.StringUtil;
1: import org.apache.derby.authentication.UserAuthenticator;
1: 
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * This authentication service is a specific/user defined User authentication
1:  * level support.
1:  * <p>
1:  * It calls the specific User authentication scheme defined by the user/
1:  * administrator.
1:  *
0:  * @author Francois
1:  */
1: public class SpecificAuthenticationServiceImpl
1: 	extends AuthenticationServiceBase {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private String specificAuthenticationScheme;
1: 
1: 	//
1: 	// ModuleControl implementation (overriden)
1: 	//
1: 
1: 	/**
1: 	 *  Check if we should activate this authentication service.
1: 	 */
1: 	public boolean canSupport(Properties properties) {
1: 
1: 		//
1: 		// we check 2 things:
1: 		// - if derby.connection.requireAuthentication system
1: 		//   property is set to true.
1: 		// - if derby.authentication.provider is set and is not equal
1: 		//	 to LDAP or BUILTIN.
1: 		//
1: 		// and in that case we are the authentication service that should
1: 		// be run.
1: 		//
1: 		if (!requireAuthentication(properties))
1: 			return false;
1: 
1: 		specificAuthenticationScheme = PropertyUtil.getPropertyFromSet(
1: 					properties,
1: 					org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);
1: 		if (
1: 			 ((specificAuthenticationScheme != null) &&
1: 			  (specificAuthenticationScheme.length() != 0) &&
1: 
1: 			  (!((StringUtil.SQLEqualsIgnoreCase(specificAuthenticationScheme,
1: 					  org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_BUILTIN)) ||
1: 			  (specificAuthenticationScheme.equalsIgnoreCase(
0: 					  org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP))  ))))
1: 			return true;
1: 		else
1: 			return false;
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1: 	 * @exception StandardException upon failure to load/boot the expected
1: 	 * authentication service.
1: 	 */
1: 	public void boot(boolean create, Properties properties)
1: 	  throws StandardException {
1: 
1: 		// We need authentication
1: 		// setAuthentication(true);
1: 
1: 		// we call the super in case there is anything to get initialized.
1: 		super.boot(create, properties);
1: 
1: 		// We must retrieve and load the authentication scheme that we were
1: 		// told to. The class loader will report an exception if it could not
1: 		// find the class in the classpath.
1: 		//
1: 		// We must then make sure that the ImplementationScheme loaded,
1: 		// implements the published UserAuthenticator interface we
1: 		// provide.
1: 		//
1: 
1: 		Throwable t;
1: 		try {
1: 
0: 			Class sasClass = Class.forName(specificAuthenticationScheme);
1: 			if (!UserAuthenticator.class.isAssignableFrom(sasClass)) {
1: 				throw StandardException.newException(SQLState.AUTHENTICATION_NOT_IMPLEMENTED,
1: 					specificAuthenticationScheme, "org.apache.derby.authentication.UserAuthenticator");
1: 			}
1: 
0: 			UserAuthenticator aScheme = (UserAuthenticator) sasClass.newInstance();
1: 
1: 			// Set ourselves as being ready and loading the proper
1: 			// authentication scheme for this service
1: 			//
1: 			this.setAuthenticationService(aScheme);
1: 
1: 			return;
1: 
1: 		} catch (ClassNotFoundException cnfe) {
1: 			t = cnfe;
1: 		} catch (InstantiationException ie) {
1: 			t = ie;
1: 		} catch (IllegalAccessException iae) {
1: 			t = iae;
1: 		}
0: 		throw StandardException.newException(SQLState.AUTHENTICATION_SCHEME_ERROR, t,
0: 					specificAuthenticationScheme);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc.authentication;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.iapi.util.StringUtil;
0: import org.apache.derby.authentication.UserAuthenticator;
0: 
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * This authentication service is a specific/user defined User authentication
0:  * level support.
0:  * <p>
0:  * It calls the specific User authentication scheme defined by the user/
0:  * administrator.
0:  *
0:  * @author Francois
0:  */
0: public class SpecificAuthenticationServiceImpl
0: 	extends AuthenticationServiceBase {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private String specificAuthenticationScheme;
0: 
0: 	//
0: 	// ModuleControl implementation (overriden)
0: 	//
0: 
0: 	/**
0: 	 *  Check if we should activate this authentication service.
0: 	 */
0: 	public boolean canSupport(Properties properties) {
0: 
0: 		//
0: 		// we check 2 things:
0: 		// - if derby.connection.requireAuthentication system
0: 		//   property is set to true.
0: 		// - if derby.authentication.provider is set and is not equal
0: 		//	 to LDAP or BUILTIN.
0: 		//
0: 		// and in that case we are the authentication service that should
0: 		// be run.
0: 		//
0: 		if (!requireAuthentication(properties))
0: 			return false;
0: 
0: 		specificAuthenticationScheme = PropertyUtil.getPropertyFromSet(
0: 					properties,
0: 					org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);
0: 		if (
0: 			 ((specificAuthenticationScheme != null) &&
0: 			  (specificAuthenticationScheme.length() != 0) &&
0: 
0: 			  (!((StringUtil.SQLEqualsIgnoreCase(specificAuthenticationScheme,
0: 					  org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_BUILTIN)) ||
0: 			  (specificAuthenticationScheme.equalsIgnoreCase(
0: 					  org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP))  ))))
0: 			return true;
0: 		else
0: 			return false;
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
0: 	 * @exception StandardException upon failure to load/boot the expected
0: 	 * authentication service.
0: 	 */
0: 	public void boot(boolean create, Properties properties)
0: 	  throws StandardException {
0: 
0: 		// We need authentication
0: 		// setAuthentication(true);
0: 
0: 		// we call the super in case there is anything to get initialized.
0: 		super.boot(create, properties);
0: 
0: 		// We must retrieve and load the authentication scheme that we were
0: 		// told to. The class loader will report an exception if it could not
0: 		// find the class in the classpath.
0: 		//
0: 		// We must then make sure that the ImplementationScheme loaded,
0: 		// implements the published UserAuthenticator interface we
0: 		// provide.
0: 		//
0: 
0: 		Throwable t;
0: 		try {
0: 
0: 			Class sasClass = Class.forName(specificAuthenticationScheme);
0: 			if (!UserAuthenticator.class.isAssignableFrom(sasClass)) {
0: 				throw StandardException.newException(SQLState.AUTHENTICATION_NOT_IMPLEMENTED,
0: 					specificAuthenticationScheme, "org.apache.derby.authentication.UserAuthenticator");
0: 			}
0: 
0: 			UserAuthenticator aScheme = (UserAuthenticator) sasClass.newInstance();
0: 
0: 			// Set ourselves as being ready and loading the proper
0: 			// authentication scheme for this service
0: 			//
0: 			this.setAuthenticationService(aScheme);
0: 
0: 			return;
0: 
0: 		} catch (ClassNotFoundException cnfe) {
0: 			t = cnfe;
0: 		} catch (InstantiationException ie) {
0: 			t = ie;
0: 		} catch (IllegalAccessException iae) {
0: 			t = iae;
0: 		}
0: 		throw StandardException.newException(SQLState.AUTHENTICATION_SCHEME_ERROR, t,
0: 					specificAuthenticationScheme);
0: 	}
0: }
============================================================================