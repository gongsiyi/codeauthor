1:502ed2e: /*
3:502ed2e: 
1:502ed2e:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneBackupTest
1:502ed2e: 
1:502ed2e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:502ed2e:    contributor license agreements.  See the NOTICE file distributed with
1:502ed2e:    this work for additional information regarding copyright ownership.
1:502ed2e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:502ed2e:    (the "License"); you may not use this file except in compliance with
1:502ed2e:    the License.  You may obtain a copy of the License at
1:502ed2e: 
1:502ed2e:      http://www.apache.org/licenses/LICENSE-2.0
1:502ed2e: 
1:502ed2e:    Unless required by applicable law or agreed to in writing, software
1:502ed2e:    distributed under the License is distributed on an "AS IS" BASIS,
1:502ed2e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:502ed2e:    See the License for the specific language governing permissions and
1:502ed2e:    limitations under the License.
1:502ed2e: 
1:502ed2e:  */
1:502ed2e: 
1:502ed2e: package org.apache.derbyTesting.functionTests.tests.lang;
1:502ed2e: 
1:502ed2e: import java.io.File;
1:502ed2e: import java.sql.Connection;
1:502ed2e: import java.sql.DriverManager;
1:502ed2e: import java.sql.SQLException;
1:502ed2e: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:502ed2e: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:502ed2e: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:502ed2e: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:502ed2e: 
1:502ed2e: /**
1:502ed2e:  * <p>
1:502ed2e:  * Test backup and restore of databases with Lucene indexes.
1:502ed2e:  * </p>
1:502ed2e:  */
1:502ed2e: public class LuceneBackupTest extends GeneratedColumnsHelper
1:502ed2e: {
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e:     //
1:502ed2e:     // CONSTANTS
1:502ed2e:     //
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e: 
1:502ed2e:     private static  final   String      DB_NAME = "lucenebackupdb";
1:502ed2e:     private static  final   String      BACKUP_DIR = "extinout/backupdir";
1:502ed2e:     private static  final   String      BACKUP_DIR2 = "extinout/backupdir2";
1:502ed2e: 
1:502ed2e:     private static  final   String      TEST_DBO = "TEST_DBO";
1:502ed2e:     private static  final   String      RUTH = "RUTH";
1:502ed2e:     private static  final   String      ALICE = "ALICE";
1:502ed2e:     private static  final   String      FRANK = "FRANK";
1:502ed2e:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1:502ed2e: 
1:502ed2e:     private static  final   String      POLICY_FILE = "org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy";
1:502ed2e: 
1:502ed2e:     private static  final   String      ENGLISH_ANALYZER =
1:502ed2e:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getEnglishAnalyzer";
1:502ed2e: 
1:502ed2e:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:502ed2e:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:502ed2e:     private static  final   String      INDEX_POEMS =
1:502ed2e:         "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', '" + ENGLISH_ANALYZER + "' )";
1:502ed2e:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'poems', 'poemText' )";
1:502ed2e: 
1:502ed2e:     private static  final   String      READ_POEMS_INDEX =
1:502ed2e:         "select p.originalAuthor, i.score\n" +
1:a4e6298:         "from ruth.poems p, table ( ruth.poems__poemText( 'star', 1000, null ) ) i\n" +
1:502ed2e:         "where p.poemID = i.poemID and p.versionStamp = i.versionStamp\n" +
1:502ed2e:         "order by i.score desc\n";
1:502ed2e:     private static  final   String[][]  DEFAULT_POEMS_RESULT =
1:502ed2e:         new String[][]
1:502ed2e:         {
1:502ed2e:             { "Walt Whitman", "0.26756266" },
1:502ed2e:             { "Lord Byron", "0.22933942" },
1:502ed2e:             { "John Milton", "0.22933942" },
1:502ed2e:         };
1:502ed2e: 
1:502ed2e:     private static  final   String  GOOD_SHUTDOWN = "08006";
1:502ed2e: 
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e:     //
1:502ed2e:     // STATE
1:502ed2e:     //
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e: 
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e:     //
1:502ed2e:     // CONSTRUCTOR
1:502ed2e:     //
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e: 
1:502ed2e:     /**
1:502ed2e:      * Create a new instance.
1:502ed2e:      */
1:502ed2e: 
1:502ed2e:     public LuceneBackupTest( String name )
1:502ed2e:     {
1:502ed2e:         super( name );
1:502ed2e:     }
1:502ed2e: 
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e:     //
1:502ed2e:     // JUnit BEHAVIOR
1:502ed2e:     //
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e: 
1:502ed2e: 
1:502ed2e:     /**
1:502ed2e:      * Construct top level suite in this JUnit test
1:502ed2e:      */
1:502ed2e:     public static Test suite()
1:502ed2e:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             LuceneBackupTest.class );
1:502ed2e: 
1:502ed2e:         Test        secureTest = new SecurityManagerSetup( suite, POLICY_FILE );
1:502ed2e:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:502ed2e:             ( secureTest, LEGAL_USERS, "LuceneBackupPermissions" );
1:502ed2e:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, true );
1:502ed2e:         Test        supportFilesTest = new SupportFilesSetup( authorizedTest );
1:502ed2e: 
1:502ed2e:         return supportFilesTest;
1:502ed2e:     }
1:502ed2e: 
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e:     //
1:502ed2e:     // TESTS
1:502ed2e:     //
1:502ed2e:     ///////////////////////////////////////////////////////////////////////////////////
1:502ed2e: 
1:502ed2e:     /**
1:502ed2e:      * <p>
1:502ed2e:      * Test basic functionality of backup/restore.
1:502ed2e:      * </p>
1:502ed2e:      */
1:502ed2e:     public  void    test_001_basic()
1:502ed2e:         throws Exception
1:502ed2e:     {
1:502ed2e:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:502ed2e:         Connection  ruthConnection = openUserConnection( RUTH );
1:502ed2e: 
1:502ed2e:         LuceneCoarseAuthorizationTest.createSchema( ruthConnection );
1:502ed2e: 
1:502ed2e:         goodStatement( dboConnection, LOAD_TOOL );
1:502ed2e:         goodStatement( ruthConnection, INDEX_POEMS );
1:502ed2e: 
1:502ed2e:         // verify that everything looks good
1:502ed2e:         assertResults
1:502ed2e:             (
1:502ed2e:              ruthConnection,
1:502ed2e:              READ_POEMS_INDEX,
1:502ed2e:              DEFAULT_POEMS_RESULT,
1:502ed2e:              false
1:502ed2e:              );
1:502ed2e: 
1:502ed2e:         // now backup the database from disk to disk
1:502ed2e:         goodStatement( dboConnection, "call syscs_util.syscs_backup_database( '" + BACKUP_DIR + "' )" );
1:502ed2e: 
1:502ed2e:         goodStatement( ruthConnection, DROP_POEMS_INDEX );
1:502ed2e:         goodStatement( dboConnection, UNLOAD_TOOL );
1:502ed2e: 
1:502ed2e:         LuceneCoarseAuthorizationTest.dropSchema( ruthConnection );
1:502ed2e: 
1:502ed2e:         //
1:502ed2e:         // Now restore the database and verify it.
1:502ed2e:         //
1:502ed2e:         String  source = BACKUP_DIR + File.separator + DB_NAME;
1:502ed2e:         String  dboPassword = getTestConfiguration().getPassword( TEST_DBO );
1:502ed2e:         String  ruthPassword = getTestConfiguration().getPassword( RUTH );
1:502ed2e:         dboConnection = DriverManager.getConnection
1:502ed2e:             ( "jdbc:derby:memory:lbt1;user=" + TEST_DBO + ";password=" + dboPassword + ";restoreFrom=" + source );
1:502ed2e:         ruthConnection = DriverManager.getConnection
1:502ed2e:             ( "jdbc:derby:memory:lbt1;user=" + RUTH + ";password=" + ruthPassword );
1:502ed2e:         assertResults
1:502ed2e:             (
1:502ed2e:              ruthConnection,
1:502ed2e:              READ_POEMS_INDEX,
1:502ed2e:              DEFAULT_POEMS_RESULT,
1:502ed2e:              false
1:502ed2e:              );
1:502ed2e: 
1:502ed2e:         // backup the in-memory database
1:502ed2e:         goodStatement( dboConnection, "call syscs_util.syscs_backup_database( '" + BACKUP_DIR2 + "' )" );
1:502ed2e: 
1:502ed2e:         // free up the memory consumed by the in-memory database
1:502ed2e:         try {
1:502ed2e:             dboConnection = DriverManager.getConnection
1:502ed2e:                 ( "jdbc:derby:memory:lbt1;user=" + TEST_DBO + ";password=" + dboPassword + ";drop=true" );
1:502ed2e:             fail( "Expected to get an exception!" );
1:502ed2e:         }
1:502ed2e:         catch (SQLException se)
1:502ed2e:         {
1:502ed2e:             assertEquals( GOOD_SHUTDOWN, se.getSQLState() );
1:502ed2e:         }
1:502ed2e: 
1:502ed2e:         //
1:502ed2e:         // Now restore the second backup and verify it
1:502ed2e:         //
1:502ed2e:         source = BACKUP_DIR2 + File.separator + "lbt1";
1:502ed2e:         dboConnection = DriverManager.getConnection
1:502ed2e:             ( "jdbc:derby:memory:lbt2;user=" + TEST_DBO + ";password=" + dboPassword + ";restoreFrom=" + source );
1:502ed2e:         ruthConnection = DriverManager.getConnection
1:502ed2e:             ( "jdbc:derby:memory:lbt2;user=" + RUTH + ";password=" + ruthPassword );
1:502ed2e:         assertResults
1:502ed2e:             (
1:502ed2e:              ruthConnection,
1:502ed2e:              READ_POEMS_INDEX,
1:502ed2e:              DEFAULT_POEMS_RESULT,
1:502ed2e:              false
1:502ed2e:              );
1:502ed2e:         
1:502ed2e:         // free up the memory consumed by the in-memory database
1:502ed2e:         try {
1:502ed2e:             dboConnection = DriverManager.getConnection
1:502ed2e:                 ( "jdbc:derby:memory:lbt2;user=" + TEST_DBO + ";password=" + dboPassword + ";drop=true" );
1:502ed2e:             fail( "Expected to get an exception!" );
1:502ed2e:         }
1:502ed2e:         catch (SQLException se)
1:502ed2e:         {
1:502ed2e:             assertEquals( GOOD_SHUTDOWN, se.getSQLState() );
1:502ed2e:         }
1:502ed2e:     }
1:502ed2e: 
1:502ed2e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             LuceneBackupTest.class );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1:         "from ruth.poems p, table ( ruth.poems__poemText( 'star', 1000, null ) ) i\n" +
commit:4cedf31
/////////////////////////////////////////////////////////////////////////
0:         "from ruth.poems p, table ( ruth.poems__poemText( 'star', null, 1000, null ) ) i\n" +
commit:502ed2e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneBackupTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.LocaleTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * <p>
1:  * Test backup and restore of databases with Lucene indexes.
1:  * </p>
1:  */
1: public class LuceneBackupTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      DB_NAME = "lucenebackupdb";
1:     private static  final   String      BACKUP_DIR = "extinout/backupdir";
1:     private static  final   String      BACKUP_DIR2 = "extinout/backupdir2";
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      RUTH = "RUTH";
1:     private static  final   String      ALICE = "ALICE";
1:     private static  final   String      FRANK = "FRANK";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1: 
1:     private static  final   String      POLICY_FILE = "org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy";
1: 
1:     private static  final   String      ENGLISH_ANALYZER =
1:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getEnglishAnalyzer";
1: 
1:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:     private static  final   String      INDEX_POEMS =
1:         "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', '" + ENGLISH_ANALYZER + "' )";
1:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'poems', 'poemText' )";
1: 
1:     private static  final   String      READ_POEMS_INDEX =
1:         "select p.originalAuthor, i.score\n" +
0:         "from ruth.poems p, table ( ruth.poems__poemText( 'star', null, 1000, 0 ) ) i\n" +
1:         "where p.poemID = i.poemID and p.versionStamp = i.versionStamp\n" +
1:         "order by i.score desc\n";
1:     private static  final   String[][]  DEFAULT_POEMS_RESULT =
1:         new String[][]
1:         {
1:             { "Walt Whitman", "0.26756266" },
1:             { "Lord Byron", "0.22933942" },
1:             { "John Milton", "0.22933942" },
1:         };
1: 
1:     private static  final   String  GOOD_SHUTDOWN = "08006";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public LuceneBackupTest( String name )
1:     {
1:         super( name );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite( LuceneBackupTest.class );
1: 
1:         Test        secureTest = new SecurityManagerSetup( suite, POLICY_FILE );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( secureTest, LEGAL_USERS, "LuceneBackupPermissions" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, true );
1:         Test        supportFilesTest = new SupportFilesSetup( authorizedTest );
1: 
1:         return supportFilesTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test basic functionality of backup/restore.
1:      * </p>
1:      */
1:     public  void    test_001_basic()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  ruthConnection = openUserConnection( RUTH );
1: 
1:         LuceneCoarseAuthorizationTest.createSchema( ruthConnection );
1: 
1:         goodStatement( dboConnection, LOAD_TOOL );
1:         goodStatement( ruthConnection, INDEX_POEMS );
1: 
1:         // verify that everything looks good
1:         assertResults
1:             (
1:              ruthConnection,
1:              READ_POEMS_INDEX,
1:              DEFAULT_POEMS_RESULT,
1:              false
1:              );
1: 
1:         // now backup the database from disk to disk
1:         goodStatement( dboConnection, "call syscs_util.syscs_backup_database( '" + BACKUP_DIR + "' )" );
1: 
1:         goodStatement( ruthConnection, DROP_POEMS_INDEX );
1:         goodStatement( dboConnection, UNLOAD_TOOL );
1: 
1:         LuceneCoarseAuthorizationTest.dropSchema( ruthConnection );
1: 
1:         //
1:         // Now restore the database and verify it.
1:         //
1:         String  source = BACKUP_DIR + File.separator + DB_NAME;
1:         String  dboPassword = getTestConfiguration().getPassword( TEST_DBO );
1:         String  ruthPassword = getTestConfiguration().getPassword( RUTH );
1:         dboConnection = DriverManager.getConnection
1:             ( "jdbc:derby:memory:lbt1;user=" + TEST_DBO + ";password=" + dboPassword + ";restoreFrom=" + source );
1:         ruthConnection = DriverManager.getConnection
1:             ( "jdbc:derby:memory:lbt1;user=" + RUTH + ";password=" + ruthPassword );
1:         assertResults
1:             (
1:              ruthConnection,
1:              READ_POEMS_INDEX,
1:              DEFAULT_POEMS_RESULT,
1:              false
1:              );
1: 
1:         // backup the in-memory database
1:         goodStatement( dboConnection, "call syscs_util.syscs_backup_database( '" + BACKUP_DIR2 + "' )" );
1: 
1:         // free up the memory consumed by the in-memory database
1:         try {
1:             dboConnection = DriverManager.getConnection
1:                 ( "jdbc:derby:memory:lbt1;user=" + TEST_DBO + ";password=" + dboPassword + ";drop=true" );
1:             fail( "Expected to get an exception!" );
1:         }
1:         catch (SQLException se)
1:         {
1:             assertEquals( GOOD_SHUTDOWN, se.getSQLState() );
1:         }
1: 
1:         //
1:         // Now restore the second backup and verify it
1:         //
1:         source = BACKUP_DIR2 + File.separator + "lbt1";
1:         dboConnection = DriverManager.getConnection
1:             ( "jdbc:derby:memory:lbt2;user=" + TEST_DBO + ";password=" + dboPassword + ";restoreFrom=" + source );
1:         ruthConnection = DriverManager.getConnection
1:             ( "jdbc:derby:memory:lbt2;user=" + RUTH + ";password=" + ruthPassword );
1:         assertResults
1:             (
1:              ruthConnection,
1:              READ_POEMS_INDEX,
1:              DEFAULT_POEMS_RESULT,
1:              false
1:              );
1:         
1:         // free up the memory consumed by the in-memory database
1:         try {
1:             dboConnection = DriverManager.getConnection
1:                 ( "jdbc:derby:memory:lbt2;user=" + TEST_DBO + ";password=" + dboPassword + ";drop=true" );
1:             fail( "Expected to get an exception!" );
1:         }
1:         catch (SQLException se)
1:         {
1:             assertEquals( GOOD_SHUTDOWN, se.getSQLState() );
1:         }
1:     }
1: 
1: }
============================================================================