1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DMLVTIResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: 
4:eac0369: /**
1:dbed020:  * Base class for Insert, Delete and UpdateVTIResultSet
1:eac0369:  */
1:eac0369: abstract class DMLVTIResultSet extends DMLWriteResultSet
3:eac0369: {
1:eac0369: 
1:eac0369: 	// passed in at construction time
1:eac0369: 
1:6bc9897: 	NoPutResultSet sourceResultSet;
1:6bc9897: 	NoPutResultSet savedSource;
1:6bc9897: 	UpdatableVTIConstantAction	constants;
1:6bc9897: 	TransactionController 	tc;
1:eac0369: 
1:eac0369: 	private int						numOpens;
1:6bc9897: 	boolean				firstExecute;
1:eac0369: 
1:c69c8b0:     /**
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:c69c8b0:      */
1:6bc9897:     DMLVTIResultSet(NoPutResultSet source, 
1:eac0369: 						   Activation activation)
1:eac0369: 		throws StandardException
1:c69c8b0:     {
1:eac0369: 		super(activation);
1:eac0369: 		sourceResultSet = source;
1:eac0369: 		constants = (UpdatableVTIConstantAction) constantAction;
1:eac0369: 
1:eac0369:         tc = activation.getTransactionController();
1:c69c8b0: 
1:c69c8b0:         resultDescription = sourceResultSet.getResultDescription();
1:c69c8b0: 	}
1:c69c8b0: 	
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void open() throws StandardException
1:eac0369: 	{
1:6369b54: 		setup();
1:eac0369: 		// Remember if this is the 1st execution
1:eac0369: 		firstExecute = (numOpens == 0);
1:eac0369: 
1:eac0369: 		rowCount = 0;
1:eac0369: 
1:eac0369: 		if (numOpens++ == 0)
1:eac0369: 		{
1:eac0369: 			sourceResultSet.openCore();
3:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			sourceResultSet.reopenCore();
1:eac0369: 		}
1:eac0369: 
1:eac0369:         openCore();
1:6bc9897:        
1:eac0369: 		/* Cache query plan text for source, before it gets blown away */
1:eac0369: 		if (lcc.getRunTimeStatisticsMode())
1:eac0369: 		{
1:eac0369: 			/* savedSource nulled after run time statistics generation */
1:eac0369: 			savedSource = sourceResultSet;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		cleanUp();
1:eac0369: 
1:eac0369: 		endTime = getCurrentTimeMillis();
1:eac0369: 	} // end of open()
1:eac0369: 
1:eac0369:     protected abstract void openCore() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	cleanUp() throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Close down the source ResultSet tree */
1:eac0369:         if( null != sourceResultSet)
1:eac0369:             sourceResultSet.close();
1:eac0369: 		numOpens = 0;
1:01632c2: 		close( false );
1:eac0369: 	} // end of cleanUp
1:eac0369: 
1:eac0369: 	public void finish() throws StandardException
1:eac0369:     {
1:eac0369: 
1:eac0369: 		sourceResultSet.finish();
1:eac0369: 		super.finish();
1:eac0369: 	} // end of finish
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * Base class for Insert, Delete and UpdateVTIResultSet
commit:6ab1083
/////////////////////////////////////////////////////////////////////////
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1: 		close( false );
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
0:     ResultDescription 		resultDescription;
1: 	/**
0:      * Returns the description of the inserted rows.
0:      * REVISIT: Do we want this to return NULL instead?
1: 	 */
0: 	public ResultDescription getResultDescription()
1: 	{
0: 	    return resultDescription;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         resultDescription = sourceResultSet.getResultDescription();
commit:6369b54
/////////////////////////////////////////////////////////////////////////
1: 		setup();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:24e3f7e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6bc9897
/////////////////////////////////////////////////////////////////////////
1: 	NoPutResultSet sourceResultSet;
1: 	NoPutResultSet savedSource;
1: 	UpdatableVTIConstantAction	constants;
1: 	TransactionController 	tc;
0:     ResultDescription 		resultDescription;
1: 	boolean				firstExecute;
/////////////////////////////////////////////////////////////////////////
1:     DMLVTIResultSet(NoPutResultSet source, 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:        
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DMLVTIResultSet
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: /**
0:  * Base class for Insert, Delete & UpdateVTIResultSet
1:  */
1: abstract class DMLVTIResultSet extends DMLWriteResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	// passed in at construction time
1: 
0: 	protected NoPutResultSet sourceResultSet;
0: 	public  NoPutResultSet savedSource;
0: 	public	UpdatableVTIConstantAction	constants;
0: 	public	TransactionController 	tc;
0: 	public	LanguageConnectionContext			lcc;
1: 
0:     public	ResultDescription 		resultDescription;
1: 	private int						numOpens;
0: 	protected boolean				firstExecute;
1: 
0: 	public	ExecRow					row;
1: 
1: 	/**
0:      * Returns the description of the inserted rows.
0:      * REVISIT: Do we want this to return NULL instead?
1: 	 */
0: 	public ResultDescription getResultDescription()
1: 	{
0: 	    return resultDescription;
1: 	}
1: 
1:     /**
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1:      */
0:     public DMLVTIResultSet(NoPutResultSet source, 
1: 						   Activation activation)
1: 		throws StandardException
1:     {
1: 		super(activation);
1: 		sourceResultSet = source;
1: 		constants = (UpdatableVTIConstantAction) constantAction;
1: 
0: 		lcc = activation.getLanguageConnectionContext();
1:         tc = activation.getTransactionController();
1: 
0:         resultDescription = sourceResultSet.getResultDescription();
1: 	}
1: 	
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void open() throws StandardException
1: 	{
1: 		// Remember if this is the 1st execution
1: 		firstExecute = (numOpens == 0);
1: 
1: 		rowCount = 0;
1: 
1: 		if (numOpens++ == 0)
1: 		{
1: 			sourceResultSet.openCore();
1: 		}
1: 		else
1: 		{
1: 			sourceResultSet.reopenCore();
1: 		}
1: 
1:         openCore();
1: 
0:         row = null;
1:         
1: 		/* Cache query plan text for source, before it gets blown away */
1: 		if (lcc.getRunTimeStatisticsMode())
1: 		{
1: 			/* savedSource nulled after run time statistics generation */
1: 			savedSource = sourceResultSet;
1: 		}
1: 
1: 		cleanUp();
1: 
1: 		endTime = getCurrentTimeMillis();
1: 	} // end of open()
1: 
1:     protected abstract void openCore() throws StandardException;
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void	cleanUp() throws StandardException
1: 	{
1: 		/* Close down the source ResultSet tree */
1:         if( null != sourceResultSet)
1:             sourceResultSet.close();
1: 		numOpens = 0;
0: 		super.close();
1: 	} // end of cleanUp
1: 
1: 	public void finish() throws StandardException
1:     {
1: 
1: 		sourceResultSet.finish();
1: 		super.finish();
1: 	} // end of finish
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: 
0: /**
0:  * Base class for Insert, Delete & UpdateVTIResultSet
0:  */
0: abstract class DMLVTIResultSet extends DMLWriteResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	// passed in at construction time
0: 
0: 	protected NoPutResultSet sourceResultSet;
0: 	public  NoPutResultSet savedSource;
0: 	public	UpdatableVTIConstantAction	constants;
0: 	public	TransactionController 	tc;
0: 	public	LanguageConnectionContext			lcc;
0: 
0:     public	ResultDescription 		resultDescription;
0: 	private int						numOpens;
0: 	protected boolean				firstExecute;
0: 
0: 	public	ExecRow					row;
0: 
0: 	/**
0:      * Returns the description of the inserted rows.
0:      * REVISIT: Do we want this to return NULL instead?
0: 	 */
0: 	public ResultDescription getResultDescription()
0: 	{
0: 	    return resultDescription;
0: 	}
0: 
0:     /**
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0:      */
0:     public DMLVTIResultSet(NoPutResultSet source, 
0: 						   Activation activation)
0: 		throws StandardException
0:     {
0: 		super(activation);
0: 		sourceResultSet = source;
0: 		constants = (UpdatableVTIConstantAction) constantAction;
0: 
0: 		lcc = activation.getLanguageConnectionContext();
0:         tc = activation.getTransactionController();
0: 
0:         resultDescription = sourceResultSet.getResultDescription();
0: 	}
0: 	
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void open() throws StandardException
0: 	{
0: 		// Remember if this is the 1st execution
0: 		firstExecute = (numOpens == 0);
0: 
0: 		rowCount = 0;
0: 
0: 		if (numOpens++ == 0)
0: 		{
0: 			sourceResultSet.openCore();
0: 		}
0: 		else
0: 		{
0: 			sourceResultSet.reopenCore();
0: 		}
0: 
0:         openCore();
0: 
0:         row = null;
0:         
0: 		/* Cache query plan text for source, before it gets blown away */
0: 		if (lcc.getRunTimeStatisticsMode())
0: 		{
0: 			/* savedSource nulled after run time statistics generation */
0: 			savedSource = sourceResultSet;
0: 		}
0: 
0: 		cleanUp();
0: 
0: 		endTime = getCurrentTimeMillis();
0: 	} // end of open()
0: 
0:     protected abstract void openCore() throws StandardException;
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void	cleanUp() throws StandardException
0: 	{
0: 		/* Close down the source ResultSet tree */
0:         if( null != sourceResultSet)
0:             sourceResultSet.close();
0: 		numOpens = 0;
0: 		super.close();
0: 	} // end of cleanUp
0: 
0: 	public void finish() throws StandardException
0:     {
0: 
0: 		sourceResultSet.finish();
0: 		super.finish();
0: 	} // end of finish
0: }
============================================================================