1:ee59de8: /*
4:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.compile.SetRoleNode
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package     org.apache.derby.impl.sql.compile;
1:ee59de8: 
1:38b5979: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.reference.ClassName;
1:ee59de8: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:ee59de8: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ee59de8: import org.apache.derby.iapi.sql.StatementType;
1:3bb140c: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  * A SetRoleNode is the root of a QueryTree that represents a SET ROLE
1:ee59de8:  * statement.
1:ee59de8:  */
1:ee59de8: 
1:3bb140c: class SetRoleNode extends MiscellaneousStatementNode
2:ee59de8: {
1:ee59de8:     private String      name;
1:ee59de8:     private int         type;
1:ee59de8: 
1:ee59de8:     /**
2:ee59de8:      *
1:3bb140c:      * @param roleName The name of the new role, null if NONE specified
1:3bb140c:      * @param type Type of role name could be USER or dynamic parameter
1:3bb140c:      * @param cm Context manager
1:3bb140c:      * @throws StandardException
1:ee59de8:      */
1:3bb140c:     SetRoleNode(
1:3bb140c:             String roleName,
1:3bb140c:             int type,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(cm);
1:3bb140c:         this.name = roleName;
1:3bb140c:         this.type = type;
2:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:ee59de8:      * for how this should be done for tree printing.
1:ee59de8:      *
1:ee59de8:      * @return  This object as a String
1:ee59de8:      */
1:3bb140c:     @Override
1:ee59de8:     public String toString()
1:ee59de8:     {
1:ee59de8:         if (SanityManager.DEBUG) {
1:ee59de8:             return super.toString() +
1:ee59de8:                 (type == StatementType.SET_ROLE_DYNAMIC ?
1:ee59de8:                  "roleName: ?\n" :
1:ee59de8:                  "rolename: " + name + "\n");
1:ee59de8:         } else {
1:ee59de8:             return "";
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public String statementToString()
1:ee59de8:     {
1:ee59de8:         return "SET ROLE";
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Create the Constant information that will drive the guts of
1:ee59de8:      * Execution.
1:ee59de8:      *
1:ee59de8:      * @exception StandardException         Thrown on failure
1:ee59de8:      */
1:3bb140c:     @Override
1:ee59de8:     public ConstantAction   makeConstantAction() throws StandardException
1:ee59de8:     {
1:ee59de8:         return getGenericConstantActionFactory().
1:ee59de8: 			getSetRoleConstantAction(name, type);
1:ee59de8:     }
1:ee59de8:     /**
1:ee59de8:      * Override: Generate code, need to push parameters
1:ee59de8:      *
1:ee59de8:      * @param acb   The ActivationClassBuilder for the class being built
1:ee59de8:      * @param mb the method  for the execute() method to be built
1:ee59de8:      *
1:ee59de8:      * @exception StandardException         Thrown on error
1:ee59de8:      */
1:3bb140c:     @Override
1:8fe3166:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
1:ee59de8:             throws StandardException
1:ee59de8:     {
1:ee59de8:         //generate the parameters for the DYNAMIC SET ROLE
1:ee59de8:         if (type == StatementType.SET_ROLE_DYNAMIC) {
1:ee59de8:             generateParameterValueSet(acb);
1:ee59de8:         }
1:ee59de8:         // The generated java is the expression:
1:ee59de8:         // return ResultSetFactory.getMiscResultSet(this )
1:ee59de8: 
1:ee59de8:         acb.pushGetResultSetFactoryExpression(mb);
1:ee59de8: 
1:ee59de8:         acb.pushThisAsActivation(mb); // first arg
1:ee59de8: 
1:ee59de8:         mb.callMethod(VMOpcode.INVOKEINTERFACE, (String)null,
1:ee59de8: 					  "getMiscResultSet", ClassName.ResultSet, 1);
1:ee59de8:     }
1:ee59de8:     /**
1:ee59de8:      * Generate the code to create the ParameterValueSet, if necessary,
1:ee59de8:      * when constructing the activation.  Also generate the code to call
1:ee59de8:      * a method that will throw an exception if we try to execute without
1:ee59de8:      * all the parameters being set.
1:ee59de8:      *
1:ee59de8:      * @param acb   The ActivationClassBuilder for the class we're building
1:ee59de8:      *
1:ee59de8:      * @exception StandardException         Thrown on error
1:ee59de8:      */
1:ee59de8: 
1:ee59de8:     private void generateParameterValueSet(ActivationClassBuilder acb)
1:ee59de8:         throws StandardException
1:ee59de8:     {
1:3bb140c:         List<ParameterNode>
1:3bb140c:             parameterList = getCompilerContext().getParameterList();
1:ee59de8:         // parameter list size should be 1
1:ee59de8:         if (SanityManager.DEBUG) {
1:ee59de8:             SanityManager.ASSERT(parameterList != null &&
1:ee59de8: 								 parameterList.size() == 1);
1:ee59de8:         }
1:ee59de8:         ParameterNode.generateParameterValueSet (acb, 1, parameterList);
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Override: Returns the type of activation this class
1:ee59de8:      * generates.
1:ee59de8:      *
1:ee59de8:      * @return  NEED_PARAM_ACTIVATION or
1:ee59de8:      *          NEED_NOTHING_ACTIVATION depending on params
1:ee59de8:      *
1:ee59de8:      */
1:3bb140c:     @Override
1:ee59de8:     int activationKind()
1:ee59de8:     {
1:ee59de8:         /*
1:ee59de8:         ** We need parameters only for those that have parameters.
1:ee59de8:         */
1:ee59de8:         if (type == StatementType.SET_ROLE_DYNAMIC) {
1:ee59de8:             return StatementNode.NEED_PARAM_ACTIVATION;
1:ee59de8:         } else {
1:ee59de8:             return StatementNode.NEED_NOTHING_ACTIVATION;
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:ee59de8: 
1:ee59de8: 	/**
1:ee59de8: 	 * Override to allow committing of reading SYSROLES,
1:ee59de8: 	 * cf. SetRoleConstantAction's call to userCommit to retain idle
1:ee59de8: 	 * state. If atomic, that commit will fail.
1:ee59de8: 	 *
1:ee59de8: 	 * @return false
1:ee59de8: 	 */
1:3bb140c:     @Override
1:ee59de8: 	public boolean isAtomic()
1:ee59de8: 	{
1:ee59de8: 		return false;
1:ee59de8: 	}
1:ee59de8: 
1:ee59de8: 
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: class SetRoleNode extends MiscellaneousStatementNode
1:      * @param roleName The name of the new role, null if NONE specified
1:      * @param type Type of role name could be USER or dynamic parameter
1:      * @param cm Context manager
1:      * @throws StandardException
1:     SetRoleNode(
1:             String roleName,
1:             int type,
1:             ContextManager cm) throws StandardException {
1:         super(cm);
1:         this.name = roleName;
1:         this.type = type;
0:         setNodeType(C_NodeTypes.SET_ROLE_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         List<ParameterNode>
1:             parameterList = getCompilerContext().getParameterList();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.SetRoleNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package     org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.StatementType;
0: import java.util.Vector;
1: 
1: 
1: /**
1:  * A SetRoleNode is the root of a QueryTree that represents a SET ROLE
1:  * statement.
1:  */
1: 
0: public class SetRoleNode extends MiscellaneousStatementNode
1: {
1:     private String      name;
1:     private int         type;
1: 
1:     /**
0:      * Initializer for a SetRoleNode
1:      *
0:      * @param roleName  The name of the new role, null if NONE specified
0:      * @param type      Type of role name could be USER or dynamic parameter
1:      *
1:      */
0:     public void init(Object roleName, Object type)
1:     {
0:         this.name = (String) roleName;
0:         if (type != null) {
0:             this.type = ((Integer)type).intValue();
1:         }
1:     }
1: 
1:     /**
1:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:      * for how this should be done for tree printing.
1:      *
1:      * @return  This object as a String
1:      */
1: 
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG) {
1:             return super.toString() +
1:                 (type == StatementType.SET_ROLE_DYNAMIC ?
1:                  "roleName: ?\n" :
1:                  "rolename: " + name + "\n");
1:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     public String statementToString()
1:     {
1:         return "SET ROLE";
1:     }
1: 
1:     /**
1:      * Create the Constant information that will drive the guts of
1:      * Execution.
1:      *
1:      * @exception StandardException         Thrown on failure
1:      */
1:     public ConstantAction   makeConstantAction() throws StandardException
1:     {
1:         return getGenericConstantActionFactory().
1: 			getSetRoleConstantAction(name, type);
1:     }
1:     /**
1:      * Override: Generate code, need to push parameters
1:      *
1:      * @param acb   The ActivationClassBuilder for the class being built
1:      * @param mb the method  for the execute() method to be built
1:      *
1:      * @exception StandardException         Thrown on error
1:      */
1: 
0:     public void generate(ActivationClassBuilder acb,
0:                          MethodBuilder mb)
1:             throws StandardException
1:     {
1:         //generate the parameters for the DYNAMIC SET ROLE
1:         if (type == StatementType.SET_ROLE_DYNAMIC) {
1:             generateParameterValueSet(acb);
1:         }
1:         // The generated java is the expression:
1:         // return ResultSetFactory.getMiscResultSet(this )
1: 
1:         acb.pushGetResultSetFactoryExpression(mb);
1: 
1:         acb.pushThisAsActivation(mb); // first arg
1: 
1:         mb.callMethod(VMOpcode.INVOKEINTERFACE, (String)null,
1: 					  "getMiscResultSet", ClassName.ResultSet, 1);
1:     }
1:     /**
1:      * Generate the code to create the ParameterValueSet, if necessary,
1:      * when constructing the activation.  Also generate the code to call
1:      * a method that will throw an exception if we try to execute without
1:      * all the parameters being set.
1:      *
1:      * @param acb   The ActivationClassBuilder for the class we're building
1:      *
1:      * @exception StandardException         Thrown on error
1:      */
1: 
1:     private void generateParameterValueSet(ActivationClassBuilder acb)
1:         throws StandardException
1:     {
0:         Vector parameterList = getCompilerContext().getParameterList();
1:         // parameter list size should be 1
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(parameterList != null &&
1: 								 parameterList.size() == 1);
1:         }
1:         ParameterNode.generateParameterValueSet (acb, 1, parameterList);
1:     }
1: 
1:     /**
1:      * Override: Returns the type of activation this class
1:      * generates.
1:      *
1:      * @return  NEED_PARAM_ACTIVATION or
1:      *          NEED_NOTHING_ACTIVATION depending on params
1:      *
1:      */
1:     int activationKind()
1:     {
0:         Vector parameterList = getCompilerContext().getParameterList();
1:         /*
1:         ** We need parameters only for those that have parameters.
1:         */
1:         if (type == StatementType.SET_ROLE_DYNAMIC) {
1:             return StatementNode.NEED_PARAM_ACTIVATION;
1:         } else {
1:             return StatementNode.NEED_NOTHING_ACTIVATION;
1:         }
1:     }
1: 
1: 
1: 	/**
1: 	 * Override to allow committing of reading SYSROLES,
1: 	 * cf. SetRoleConstantAction's call to userCommit to retain idle
1: 	 * state. If atomic, that commit will fail.
1: 	 *
1: 	 * @return false
1: 	 */
1: 	public boolean isAtomic()
1: 	{
1: 		return false;
1: 	}
1: 
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
commit:38b5979
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         List parameterList = getCompilerContext().getParameterList();
/////////////////////////////////////////////////////////////////////////
============================================================================