1:7cfb7e6: /*
1:7cfb7e6: 
1:7cfb7e6:    Derby - Class org.apache.derby.client.am.LogicalPreparedStatement42
1:7cfb7e6: 
1:7cfb7e6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7cfb7e6:    contributor license agreements.  See the NOTICE file distributed with
1:7cfb7e6:    this work for additional information regarding copyright ownership.
1:7cfb7e6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:7cfb7e6:    (the "License"); you may not use this file except in compliance with
1:7cfb7e6:    the License.  You may obtain a copy of the License at
1:7cfb7e6: 
1:7cfb7e6:       http://www.apache.org/licenses/LICENSE-2.0
1:7cfb7e6: 
1:7cfb7e6:    Unless required by applicable law or agreed to in writing, software
1:7cfb7e6:    distributed under the License is distributed on an "AS IS" BASIS,
1:7cfb7e6:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7cfb7e6:    See the License for the specific language governing permissions and
1:7cfb7e6:    limitations under the License.
1:7cfb7e6: 
1:7cfb7e6:  */
1:7cfb7e6: package org.apache.derby.client.am;
1:7cfb7e6: 
1:69e3d06: import java.sql.PreparedStatement;
1:7cfb7e6: import java.sql.SQLException;
1:7cfb7e6: import java.sql.SQLType;
1:7cfb7e6: 
1:7cfb7e6: import org.apache.derby.client.am.stmtcache.StatementKey;
1:7cfb7e6: 
1:7cfb7e6: /**
1:7cfb7e6:  * JDBC 4.2 specific wrapper class for a Derby physical prepared statement.
1:7cfb7e6:  */
1:9a0cdf1: public class LogicalPreparedStatement42 extends LogicalPreparedStatement
2:7cfb7e6: {
1:7cfb7e6:     /**
1:7cfb7e6:      * Creates a new logical prepared statement.
1:7cfb7e6:      *
1:7cfb7e6:      * @param physicalPs underlying physical statement
1:7cfb7e6:      * @param stmtKey key for the physical statement
1:7cfb7e6:      * @param cacheInteractor creating statement cache interactor
1:7cfb7e6:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:7cfb7e6:      */
1:69e3d06:     public LogicalPreparedStatement42 (
1:69e3d06:             PreparedStatement physicalPs,
1:69e3d06:             StatementKey stmtKey,
1:69e3d06:             StatementCacheInteractor cacheInteractor ) {
1:69e3d06: 
1:7cfb7e6:         super(physicalPs, stmtKey, cacheInteractor);
1:7cfb7e6:     }
1:7cfb7e6: 
1:7cfb7e6:     public  void setObject
1:69e3d06:         ( int parameterIndex, Object x, SQLType targetSqlType )
1:7cfb7e6:         throws SQLException
1:7cfb7e6:     {
1:7cfb7e6:         getPhysPs().setObject( parameterIndex, x, targetSqlType );
1:7cfb7e6:     }
1:7cfb7e6:     
1:7cfb7e6:     public void setObject
1:7cfb7e6:         (
1:69e3d06:          int parameterIndex, Object x,
1:7cfb7e6:          SQLType targetSqlType, int scaleOrLength
1:7cfb7e6:          )  throws SQLException
1:7cfb7e6:     {
1:7cfb7e6:         getPhysPs().setObject( parameterIndex, x, targetSqlType, scaleOrLength );
1:7cfb7e6:     }
1:7cfb7e6: 
1:7cfb7e6: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: public class LogicalPreparedStatement42 extends LogicalPreparedStatement
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1:     public LogicalPreparedStatement42 (
1:             PreparedStatement physicalPs,
1:             StatementKey stmtKey,
1:             StatementCacheInteractor cacheInteractor ) {
1: 
1:         ( int parameterIndex, Object x, SQLType targetSqlType )
/////////////////////////////////////////////////////////////////////////
1:          int parameterIndex, Object x,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7cfb7e6
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalPreparedStatement42
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
1: import java.sql.SQLException;
1: import java.sql.SQLType;
1: 
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: 
1: /**
1:  * JDBC 4.2 specific wrapper class for a Derby physical prepared statement.
1:  */
0: public class LogicalPreparedStatement42
0:     extends LogicalPreparedStatement40
1: {
1:     /**
1:      * Creates a new logical prepared statement.
1:      *
1:      * @param physicalPs underlying physical statement
1:      * @param stmtKey key for the physical statement
1:      * @param cacheInteractor creating statement cache interactor
1:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:      */
0:     public LogicalPreparedStatement42
0:         ( java.sql.PreparedStatement physicalPs, StatementKey stmtKey, StatementCacheInteractor cacheInteractor )
1:     {
1:         super(physicalPs, stmtKey, cacheInteractor);
1:     }
1: 
1:     public  void setObject
0:         ( int parameterIndex, java.lang.Object x, SQLType targetSqlType )
1:         throws SQLException
1:     {
1:         getPhysPs().setObject( parameterIndex, x, targetSqlType );
1:     }
1:     
1:     public void setObject
1:         (
0:          int parameterIndex, java.lang.Object x,
1:          SQLType targetSqlType, int scaleOrLength
1:          )  throws SQLException
1:     {
1:         getPhysPs().setObject( parameterIndex, x, targetSqlType, scaleOrLength );
1:     }
1: 
1: }
============================================================================