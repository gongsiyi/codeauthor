1:aaea357: /*
2:aaea357:  
1:aaea357:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptionTest
1:aaea357:  
1:dff95a1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  this work for additional information regarding copyright ownership.
1:dff95a1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  (the "License"); you may not use this file except in compliance with
1:dff95a1:  the License.  You may obtain a copy of the License at
1:aaea357:  
1:aaea357:  http://www.apache.org/licenses/LICENSE-2.0
1:aaea357:  
1:aaea357:  Unless required by applicable law or agreed to in writing, software
1:aaea357:  distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:  See the License for the specific language governing permissions and
1:aaea357:  limitations under the License.
1:aaea357:  
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.tests.store;
1:aaea357: 
1:aaea357: import java.sql.Connection;
1:aaea357: import java.sql.Statement;
1:aaea357: import java.sql.PreparedStatement;
1:aaea357: import java.sql.DriverManager;
1:aaea357: import java.util.Properties;
1:aaea357: import java.io.*;
1:aaea357: 
1:aaea357: /**
1:aaea357:  * check if bootpassword is not written out in plain text into service.properties
1:aaea357:  * for an encrypted database run within the test harness.
1:aaea357:  * In future encryption related testcases can be added to this test
1:aaea357:  */
1:aaea357: public class EncryptionTest {
1:aaea357:     public static void main(String[] args) {
1:aaea357:         Connection conn = null;
1:aaea357:         try {
1:aaea357:             // use the ij utility to read the property file and
1:aaea357:             // make the initial connection.
1:aaea357:             org.apache.derby.tools.ij.getPropertyArg(args);
1:aaea357:             conn = org.apache.derby.tools.ij.startJBMS();
1:aaea357: 
1:aaea357:             // Test 1
1:aaea357:             // Derby 236 - boot password should not be written out
1:aaea357:             // into service.properties
1:aaea357:             String derbyHome = System.getProperty("derby.system.home");
1:aaea357: 
1:aaea357:             // read in the properties in the service.properties file of the db
1:aaea357:             Properties serviceProperties = new Properties();
1:aaea357:             File f = new File(derbyHome + "/wombat/service.properties");
1:aaea357:             serviceProperties.load(new FileInputStream(f.getAbsolutePath()));
1:aaea357:             if (serviceProperties.getProperty("bootPassword") == null)
1:aaea357:                 report("TEST PASSED");
1:aaea357:             else
1:aaea357:                 report("FAIL -- bootPassword should not be written out into service.properties");
1:aaea357:             
1:aaea357:             conn.close();
1:aaea357:         } catch (Throwable e) {
1:aaea357:             report("FAIL -- unexpected exception: " + e);
1:aaea357:             e.printStackTrace();
1:aaea357:         }
1:aaea357: 
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * print message
1:aaea357:      * @param msg to print out 
1:aaea357:      */
1:aaea357:     public static void report(String msg) {
1:aaea357:         System.out.println(msg);
1:aaea357:     }
1:aaea357: 
1:aaea357: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptionTest
1:  
0:  Copyright 2002, 2005 The Apache Software Foundation or its licensors, as applicable.
1:  
0:  Licensed under the Apache License, Version 2.0 (the "License");
0:  you may not use this file except in compliance with the License.
0:  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.DriverManager;
1: import java.util.Properties;
1: import java.io.*;
1: 
1: /**
1:  * check if bootpassword is not written out in plain text into service.properties
1:  * for an encrypted database run within the test harness.
1:  * In future encryption related testcases can be added to this test
1:  */
1: public class EncryptionTest {
1:     public static void main(String[] args) {
1:         Connection conn = null;
1:         try {
1:             // use the ij utility to read the property file and
1:             // make the initial connection.
1:             org.apache.derby.tools.ij.getPropertyArg(args);
1:             conn = org.apache.derby.tools.ij.startJBMS();
1: 
1:             // Test 1
1:             // Derby 236 - boot password should not be written out
1:             // into service.properties
1:             String derbyHome = System.getProperty("derby.system.home");
1: 
1:             // read in the properties in the service.properties file of the db
1:             Properties serviceProperties = new Properties();
1:             File f = new File(derbyHome + "/wombat/service.properties");
1:             serviceProperties.load(new FileInputStream(f.getAbsolutePath()));
1:             if (serviceProperties.getProperty("bootPassword") == null)
1:                 report("TEST PASSED");
1:             else
1:                 report("FAIL -- bootPassword should not be written out into service.properties");
1:             
1:             conn.close();
1:         } catch (Throwable e) {
1:             report("FAIL -- unexpected exception: " + e);
1:             e.printStackTrace();
1:         }
1: 
1:     }
1: 
1:     /**
1:      * print message
1:      * @param msg to print out 
1:      */
1:     public static void report(String msg) {
1:         System.out.println(msg);
1:     }
1: 
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:5436674
/////////////////////////////////////////////////////////////////////////
0: /*
0:  
0:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptionTest
0:  
0:  Copyright 2002, 2005 The Apache Software Foundation or its licensors, as applicable.
0:  
0:  Licensed under the Apache License, Version 2.0 (the "License");
0:  you may not use this file except in compliance with the License.
0:  You may obtain a copy of the License at
0:  
0:  http://www.apache.org/licenses/LICENSE-2.0
0:  
0:  Unless required by applicable law or agreed to in writing, software
0:  distributed under the License is distributed on an "AS IS" BASIS,
0:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  See the License for the specific language governing permissions and
0:  limitations under the License.
0:  
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.DriverManager;
0: import java.util.Properties;
0: import java.io.*;
0: 
0: /**
0:  * check if bootpassword is not written out in plain text into service.properties
0:  * for an encrypted database run within the test harness.
0:  * In future encryption related testcases can be added to this test
0:  */
0: public class EncryptionTest {
0:     public static void main(String[] args) {
0:         Connection conn = null;
0:         try {
0:             // use the ij utility to read the property file and
0:             // make the initial connection.
0:             org.apache.derby.tools.ij.getPropertyArg(args);
0:             conn = org.apache.derby.tools.ij.startJBMS();
0: 
0:             // Test 1
0:             // Derby 236 - boot password should not be written out
0:             // into service.properties
0:             String derbyHome = System.getProperty("derby.system.home");
0: 
0:             // read in the properties in the service.properties file of the db
0:             Properties serviceProperties = new Properties();
0:             File f = new File(derbyHome + "/wombat/service.properties");
0:             serviceProperties.load(new FileInputStream(f.getAbsolutePath()));
0:             if (serviceProperties.getProperty("bootPassword") == null)
0:                 report("TEST PASSED");
0:             else
0:                 report("FAIL -- bootPassword should not be written out into service.properties");
0:             
0:             conn.close();
0:         } catch (Throwable e) {
0:             report("FAIL -- unexpected exception: " + e);
0:             e.printStackTrace();
0:         }
0: 
0:     }
0: 
0:     /**
0:      * print message
0:      * @param msg to print out 
0:      */
0:     public static void report(String msg) {
0:         System.out.println(msg);
0:     }
0: 
0: }
============================================================================