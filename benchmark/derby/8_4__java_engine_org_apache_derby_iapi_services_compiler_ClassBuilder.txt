1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.compiler.ClassBuilder
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.compiler;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedClass;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * ClassBuilder is used to construct a java class's byte array
1:eac0369:  * representation.
1:eac0369:  *
1:eac0369:  * Limitations:
1:eac0369:  *   No checking for language use violations such as invalid modifiers
1:eac0369:  *	or duplicate field names.
1:eac0369:  *   All classes must have a superclass; java.lang.Object must be
1:eac0369:  *      supplied if there is no superclass.
1:eac0369:  *
2:eac0369:  * <p>
1:eac0369:  * When a class is first created, it has:
1:eac0369:  * <ul>
1:eac0369:  * <li> a superclass
1:eac0369:  * <li> modifiers
1:eac0369:  * <li> a name
1:eac0369:  * <li> a package
1:eac0369:  * <li> no superinterfaces, methods, fields, or constructors
1:eac0369:  * <li> an empty static initializer
1:eac0369:  * </ul>
1:eac0369:  * <p>
1:eac0369:  * MethodBuilder implementations are required to get code out of the
1:eac0369:  * constructs within their bodies in some manner. 
1:eac0369:  * Most typically, they may have a stream to which the statement and 
1:eac0369:  * expression constructs write the code that they represent,
1:eac0369:  * and they walk over the statements and expressions in the appropriate order.
1:eac0369:  *
1:eac0369:  */
1:5d24b1a: public interface ClassBuilder {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * add a field to this class. Fields cannot
1:eac0369: 	 * be initialized here, they must be initialized
1:eac0369: 	 * in the static initializer code (static fields)
1:eac0369: 	 * or in the constructors.
1:eac0369: 	 * <p>
1:eac0369: 	 * Methods are added when they are created with the JavaFactory.
1:eac0369: 	 * @param type	The type of the field in java language.
1:eac0369: 	 * @param name	The name of the field.
1:eac0369: 	 * @param modifiers	The | of the modifier values such as
1:eac0369: 	 *					public, static, etc.
1:eac0369: 	 * @see ClassBuilder#newMethodBuilder
1:eac0369: 	 * @see #newConstructorBuilder
1:eac0369: 	 */
1:eac0369: 	LocalField addField(String type, String name, int modifiers);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Fully create the bytecode and load the
1:eac0369: 		class using the ClassBuilder's ClassFactory.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby policy
1:eac0369: 	*/
1:eac0369: 	GeneratedClass getGeneratedClass() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * At the time the class is completed and bytecode
1:eac0369: 	 * generated, if there are no constructors then
1:eac0369: 	 * the default no-arg constructor will be defined.
1:eac0369: 	 */
1:a9b4b8d: 	ByteArray getClassBytecode() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * the class's unqualified name
1:eac0369: 	 */
1:eac0369: 	String getName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * the class's qualified name
1:eac0369: 	 */
1:eac0369: 	String getFullName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * a method. Once it is created, parameters, thrown
1:eac0369: 	 * exceptions, statements, and local variable declarations
1:eac0369: 	 * must be added to it. It is put into its defining class
1:eac0369: 	 * when it is created.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: #modifiers #returnType #methodName() {}
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369:        </verbatim>
1:eac0369: 	   <p>
1:eac0369: 	 * This is used to start a constructor as well; pass in
1:eac0369: 	 * null for the returnType when used in that manner.
1:eac0369: 	 *
1:eac0369: 	 * @param modifiers the | of the Modifier
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 * @param returnType the return type of the method as its
1:eac0369: 	 *	Java language type name.
1:eac0369: 	 * @param methodName the name of the method.
1:eac0369: 	 *
1:eac0369: 	 * @return the method builder.
1:eac0369: 	 * @see java.lang.reflect.Modifier
1:eac0369: 	 */
1:eac0369: 	MethodBuilder newMethodBuilder(int modifiers, String returnType,
1:eac0369: 		String methodName);
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * a method with parameters. Once it is created, thrown
1:eac0369: 	 * exceptions, statements, and local variable declarations
1:eac0369: 	 * must be added to it. It is put into its defining class
1:eac0369: 	 * when it is created.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: #modifiers #returnType #methodName() {}
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369:        </verbatim>
1:eac0369: 	   <p>
1:eac0369: 	 * This is used to start a constructor as well; pass in
1:eac0369: 	 * null for the returnType when used in that manner.
1:eac0369: 	 *
1:eac0369: 	 * @param modifiers the | of the Modifier
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 * @param returnType the return type of the method as its
1:eac0369: 	 *	Java language type name.
1:eac0369: 	 * @param methodName the name of the method.
1:eac0369: 	 * @param parms	an array of String representing the
1:eac0369: 	 *				method's parameter types
1:eac0369: 	 *
1:eac0369: 	 * @return the method builder.
1:eac0369: 	 * @see java.lang.reflect.Modifier
1:eac0369: 	 */
1:eac0369: 	MethodBuilder newMethodBuilder(int modifiers, String returnType,
1:eac0369: 		String methodName, String[] parms);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * a constructor. Once it is created, parameters, thrown
1:eac0369: 	 * exceptions, statements, and local variable declarations
1:eac0369: 	 * must be added to it. It is put into its defining class
1:eac0369: 	 * when it is created.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: #modifiers #className() {}
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369: 	  		// className is taken from definingClass.name()
1:eac0369:        </verbatim>
1:0393775: 	 * <p>
1:eac0369: 	 * This is used to start a constructor as well; pass in
1:eac0369: 	 * null for the returnType when used in that manner.
1:0393775:      * <p>
1:eac0369: 	 *
1:eac0369: 	 * @param modifiers the | of the Modifier
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 *
1:eac0369: 	 * @return the method builder for the constructor.
1:eac0369: 	 * @see java.lang.reflect.Modifier
1:eac0369: 	 */
1:eac0369: 	MethodBuilder newConstructorBuilder(int modifiers);
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f542632
/////////////////////////////////////////////////////////////////////////
commit:0393775
/////////////////////////////////////////////////////////////////////////
1:      * <p>
0:      * If the modifiers include static, the returned method builder is for
0:      * a class or interface initialization method. Otherwise, the builder is
0:      * for an instance initialization method.
1:      * <p>
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 		@param getter getter for field
0: 		@param setter setter for field
0: 		@param staticField true if the field is static
0: 	void newFieldWithAccessors(String getter, String setter, int methodModifier,
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a9b4b8d
/////////////////////////////////////////////////////////////////////////
1: 	ByteArray getClassBytecode() throws StandardException;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.compiler.ClassBuilder
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface ClassBuilder {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.compiler
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.compiler;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedClass;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: /**
1:  * ClassBuilder is used to construct a java class's byte array
1:  * representation.
1:  *
1:  * Limitations:
1:  *   No checking for language use violations such as invalid modifiers
1:  *	or duplicate field names.
1:  *   All classes must have a superclass; java.lang.Object must be
1:  *      supplied if there is no superclass.
1:  *
1:  * <p>
1:  * When a class is first created, it has:
1:  * <ul>
1:  * <li> a superclass
1:  * <li> modifiers
1:  * <li> a name
1:  * <li> a package
1:  * <li> no superinterfaces, methods, fields, or constructors
1:  * <li> an empty static initializer
1:  * </ul>
1:  * <p>
1:  * MethodBuilder implementations are required to get code out of the
1:  * constructs within their bodies in some manner. 
1:  * Most typically, they may have a stream to which the statement and 
1:  * expression constructs write the code that they represent,
1:  * and they walk over the statements and expressions in the appropriate order.
1:  *
0:  * @author ames
1:  */
0: public interface ClassBuilder { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * add a field to this class. Fields cannot
1: 	 * be initialized here, they must be initialized
1: 	 * in the static initializer code (static fields)
1: 	 * or in the constructors.
1: 	 * <p>
1: 	 * Methods are added when they are created with the JavaFactory.
1: 	 * @param type	The type of the field in java language.
1: 	 * @param name	The name of the field.
1: 	 * @param modifiers	The | of the modifier values such as
1: 	 *					public, static, etc.
1: 	 * @see ClassBuilder#newMethodBuilder
1: 	 * @see #newConstructorBuilder
1: 	 */
1: 	LocalField addField(String type, String name, int modifiers);
1: 
1: 	/**
1: 		Fully create the bytecode and load the
1: 		class using the ClassBuilder's ClassFactory.
1: 
0: 		@exception StandardException Standard Cloudscape policy
1: 	*/
1: 	GeneratedClass getGeneratedClass() throws StandardException;
1: 
1: 	/**
1: 	 * At the time the class is completed and bytecode
1: 	 * generated, if there are no constructors then
1: 	 * the default no-arg constructor will be defined.
1: 	 */
0: 	ByteArray getClassBytecode();
1: 
1: 	/**
1: 	 * the class's unqualified name
1: 	 */
1: 	String getName();
1: 
1: 	/**
1: 	 * the class's qualified name
1: 	 */
1: 	String getFullName();
1: 
1: 	/**
1: 	 * a method. Once it is created, parameters, thrown
1: 	 * exceptions, statements, and local variable declarations
1: 	 * must be added to it. It is put into its defining class
1: 	 * when it is created.
1: 	 * <verbatim>
1: 	   Java: #modifiers #returnType #methodName() {}
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1:        </verbatim>
1: 	   <p>
1: 	 * This is used to start a constructor as well; pass in
1: 	 * null for the returnType when used in that manner.
1: 	 *
1: 	 * @param modifiers the | of the Modifier
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 * @param returnType the return type of the method as its
1: 	 *	Java language type name.
1: 	 * @param methodName the name of the method.
1: 	 *
1: 	 * @return the method builder.
1: 	 * @see java.lang.reflect.Modifier
1: 	 */
1: 	MethodBuilder newMethodBuilder(int modifiers, String returnType,
1: 		String methodName);
1: 	
1: 	/**
1: 	 * a method with parameters. Once it is created, thrown
1: 	 * exceptions, statements, and local variable declarations
1: 	 * must be added to it. It is put into its defining class
1: 	 * when it is created.
1: 	 * <verbatim>
1: 	   Java: #modifiers #returnType #methodName() {}
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1:        </verbatim>
1: 	   <p>
1: 	 * This is used to start a constructor as well; pass in
1: 	 * null for the returnType when used in that manner.
1: 	 *
1: 	 * @param modifiers the | of the Modifier
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 * @param returnType the return type of the method as its
1: 	 *	Java language type name.
1: 	 * @param methodName the name of the method.
1: 	 * @param parms	an array of String representing the
1: 	 *				method's parameter types
1: 	 *
1: 	 * @return the method builder.
1: 	 * @see java.lang.reflect.Modifier
1: 	 */
1: 	MethodBuilder newMethodBuilder(int modifiers, String returnType,
1: 		String methodName, String[] parms);
1: 
1: 	/**
1: 	 * a constructor. Once it is created, parameters, thrown
1: 	 * exceptions, statements, and local variable declarations
1: 	 * must be added to it. It is put into its defining class
1: 	 * when it is created.
1: 	 * <verbatim>
1: 	   Java: #modifiers #className() {}
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1: 	  		// className is taken from definingClass.name()
1:        </verbatim>
1: 	 * <p>
1: 	 * This is used to start a constructor as well; pass in
1: 	 * null for the returnType when used in that manner.
1: 	 *
1: 	 * @param modifiers the | of the Modifier
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 *
1: 	 * @return the method builder for the constructor.
1: 	 * @see java.lang.reflect.Modifier
1: 	 */
1: 	MethodBuilder newConstructorBuilder(int modifiers);
1: 
1: 	/**
0: 		Create a new private field and its getter and setter methods.
1: 
0: 		@param name basename for the methods, methods will have 'set' or 'get' prepended.
0: 		@param methodModifier modifier for method
0: 		@param boolean staticField true if the field is static
0: 		@param type type of the field, return type of the get method and
0: 		parameter type of the set method.
1: 
1: 	*/
0: 	void newFieldWithAccessors(String getter, String setter, int methodModifer,
0: 		boolean staticField, String type);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.compiler
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.compiler;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedClass;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: /**
0:  * ClassBuilder is used to construct a java class's byte array
0:  * representation.
0:  *
0:  * Limitations:
0:  *   No checking for language use violations such as invalid modifiers
0:  *	or duplicate field names.
0:  *   All classes must have a superclass; java.lang.Object must be
0:  *      supplied if there is no superclass.
0:  *
0:  * <p>
0:  * When a class is first created, it has:
0:  * <ul>
0:  * <li> a superclass
0:  * <li> modifiers
0:  * <li> a name
0:  * <li> a package
0:  * <li> no superinterfaces, methods, fields, or constructors
0:  * <li> an empty static initializer
0:  * </ul>
0:  * <p>
0:  * MethodBuilder implementations are required to get code out of the
0:  * constructs within their bodies in some manner. 
0:  * Most typically, they may have a stream to which the statement and 
0:  * expression constructs write the code that they represent,
0:  * and they walk over the statements and expressions in the appropriate order.
0:  *
0:  * @author ames
0:  */
0: public interface ClassBuilder { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * add a field to this class. Fields cannot
0: 	 * be initialized here, they must be initialized
0: 	 * in the static initializer code (static fields)
0: 	 * or in the constructors.
0: 	 * <p>
0: 	 * Methods are added when they are created with the JavaFactory.
0: 	 * @param type	The type of the field in java language.
0: 	 * @param name	The name of the field.
0: 	 * @param modifiers	The | of the modifier values such as
0: 	 *					public, static, etc.
0: 	 * @see ClassBuilder#newMethodBuilder
0: 	 * @see #newConstructorBuilder
0: 	 */
0: 	LocalField addField(String type, String name, int modifiers);
0: 
0: 	/**
0: 		Fully create the bytecode and load the
0: 		class using the ClassBuilder's ClassFactory.
0: 
0: 		@exception StandardException Standard Cloudscape policy
0: 	*/
0: 	GeneratedClass getGeneratedClass() throws StandardException;
0: 
0: 	/**
0: 	 * At the time the class is completed and bytecode
0: 	 * generated, if there are no constructors then
0: 	 * the default no-arg constructor will be defined.
0: 	 */
0: 	ByteArray getClassBytecode();
0: 
0: 	/**
0: 	 * the class's unqualified name
0: 	 */
0: 	String getName();
0: 
0: 	/**
0: 	 * the class's qualified name
0: 	 */
0: 	String getFullName();
0: 
0: 	/**
0: 	 * a method. Once it is created, parameters, thrown
0: 	 * exceptions, statements, and local variable declarations
0: 	 * must be added to it. It is put into its defining class
0: 	 * when it is created.
0: 	 * <verbatim>
0: 	   Java: #modifiers #returnType #methodName() {}
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0:        </verbatim>
0: 	   <p>
0: 	 * This is used to start a constructor as well; pass in
0: 	 * null for the returnType when used in that manner.
0: 	 *
0: 	 * @param modifiers the | of the Modifier
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 * @param returnType the return type of the method as its
0: 	 *	Java language type name.
0: 	 * @param methodName the name of the method.
0: 	 *
0: 	 * @return the method builder.
0: 	 * @see java.lang.reflect.Modifier
0: 	 */
0: 	MethodBuilder newMethodBuilder(int modifiers, String returnType,
0: 		String methodName);
0: 	
0: 	/**
0: 	 * a method with parameters. Once it is created, thrown
0: 	 * exceptions, statements, and local variable declarations
0: 	 * must be added to it. It is put into its defining class
0: 	 * when it is created.
0: 	 * <verbatim>
0: 	   Java: #modifiers #returnType #methodName() {}
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0:        </verbatim>
0: 	   <p>
0: 	 * This is used to start a constructor as well; pass in
0: 	 * null for the returnType when used in that manner.
0: 	 *
0: 	 * @param modifiers the | of the Modifier
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 * @param returnType the return type of the method as its
0: 	 *	Java language type name.
0: 	 * @param methodName the name of the method.
0: 	 * @param parms	an array of String representing the
0: 	 *				method's parameter types
0: 	 *
0: 	 * @return the method builder.
0: 	 * @see java.lang.reflect.Modifier
0: 	 */
0: 	MethodBuilder newMethodBuilder(int modifiers, String returnType,
0: 		String methodName, String[] parms);
0: 
0: 	/**
0: 	 * a constructor. Once it is created, parameters, thrown
0: 	 * exceptions, statements, and local variable declarations
0: 	 * must be added to it. It is put into its defining class
0: 	 * when it is created.
0: 	 * <verbatim>
0: 	   Java: #modifiers #className() {}
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0: 	  		// className is taken from definingClass.name()
0:        </verbatim>
0: 	 * <p>
0: 	 * This is used to start a constructor as well; pass in
0: 	 * null for the returnType when used in that manner.
0: 	 *
0: 	 * @param modifiers the | of the Modifier
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 *
0: 	 * @return the method builder for the constructor.
0: 	 * @see java.lang.reflect.Modifier
0: 	 */
0: 	MethodBuilder newConstructorBuilder(int modifiers);
0: 
0: 	/**
0: 		Create a new private field and its getter and setter methods.
0: 
0: 		@param name basename for the methods, methods will have 'set' or 'get' prepended.
0: 		@param methodModifier modifier for method
0: 		@param boolean staticField true if the field is static
0: 		@param type type of the field, return type of the get method and
0: 		parameter type of the set method.
0: 
0: 	*/
0: 	void newFieldWithAccessors(String getter, String setter, int methodModifer,
0: 		boolean staticField, String type);
0: }
============================================================================