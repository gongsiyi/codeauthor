1:2dd0b6f: /*
13:2dd0b6f: 
1:2dd0b6f:    Derby - Class org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode
1:2dd0b6f: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:2dd0b6f: 
1:2dd0b6f:       http://www.apache.org/licenses/LICENSE-2.0
1:2dd0b6f: 
1:2dd0b6f:    Unless required by applicable law or agreed to in writing, software
1:2dd0b6f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2dd0b6f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2dd0b6f:    See the License for the specific language governing permissions and
1:2dd0b6f:    limitations under the License.
1:2dd0b6f: 
2:2dd0b6f:  */
1:2dd0b6f: 
1:2dd0b6f: package	org.apache.derby.impl.sql.compile;
1:2dd0b6f: 
1:3bb140c: import java.sql.Types;
1:3bb140c: import java.util.List;
1:2dd0b6f: import org.apache.derby.iapi.error.StandardException;
1:2dd0b6f: import org.apache.derby.iapi.reference.ClassName;
1:2dd0b6f: import org.apache.derby.iapi.reference.SQLState;
1:2dd0b6f: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.DataValueDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.DataValueFactory;
1:3bb140c: import org.apache.derby.iapi.types.DateTimeDataValue;
1:2dd0b6f: 
1:2dd0b6f: /**
1:2dd0b6f:  * This class implements the timestamp( x) and date(x) functions.
2:2dd0b6f:  *
1:2dd0b6f:  * These two functions implement a few special cases of string conversions beyond the normal string to
1:2dd0b6f:  * date/timestamp casts.
1:2dd0b6f:  */
1:3bb140c: class UnaryDateTimestampOperatorNode extends UnaryOperatorNode
3:2dd0b6f: {
1:2dd0b6f:     private static final String TIMESTAMP_METHOD_NAME = "getTimestamp";
1:2dd0b6f:     private static final String DATE_METHOD_NAME = "getDate";
1:3bb140c:     
1:2706d1f:     // Allowed kinds
1:2706d1f:     final static int K_DATE = 0;
1:2706d1f:     final static int K_TIMESTAMP = 1;
1:2706d1f: 
1:2706d1f:     /**
1:2706d1f:      * This class is used to hold logically different objects for
1:2706d1f:      * space efficiency. {@code kind} represents the logical object
1:2706d1f:      * type. See also {@link ValueNode#isSameNodeKind}.
1:2706d1f:      */
1:2706d1f:     final int kind;
1:2dd0b6f: 
1:2dd0b6f:     /**
1:2dd0b6f:      * @param operand The operand of the function
1:2706d1f:      * @param kind The kind of the result, Date or Timestamp.
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     UnaryDateTimestampOperatorNode(
1:3bb140c:             ValueNode operand,
1:2706d1f:             int kind,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(operand,
1:2706d1f:                 kind == K_DATE ? "date" : "timestamp",
1:2706d1f:                 kind == K_DATE ? DATE_METHOD_NAME : TIMESTAMP_METHOD_NAME,
1:3bb140c:                 cm);
1:2706d1f:         this.kind = kind;
1:3bb140c:         setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(
1:2706d1f:                 kind == K_DATE ? Types.DATE : Types.TIMESTAMP));
2:2dd0b6f:     }
1:3bb140c: 
1:2dd0b6f:     /**
1:2dd0b6f:      * Called by UnaryOperatorNode.bindExpression.
1:2dd0b6f:      *
1:2dd0b6f:      * If the operand is a constant then evaluate the function at compile time. Otherwise,
1:2dd0b6f:      * if the operand input type is the same as the output type then discard this node altogether.
1:2dd0b6f:      * If the function is "date" and the input is a timestamp then change this node to a cast.
1:2dd0b6f:      *
1:2dd0b6f: 	 * @param fromList		The FROM list for the query this
1:2dd0b6f: 	 *				expression is in, for binding columns.
1:2dd0b6f: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:2dd0b6f: 	 *
1:2dd0b6f: 	 * @return	The new top of the expression tree.
1:2dd0b6f: 	 *
2:2dd0b6f: 	 * @exception StandardException		Thrown on error
1:2dd0b6f: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression (
1:71c8e86:                     FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
2:2dd0b6f: 				throws StandardException
1:2dd0b6f: 	{
1:2dd0b6f:         boolean isIdentity = false; // Is this function the identity operator?
1:2dd0b6f:         boolean operandIsNumber = false;
1:2dd0b6f:         
1:09c2697:         bindOperand( fromList, subqueryList, aggregates);
1:2dd0b6f:         DataTypeDescriptor operandType = operand.getTypeServices();
1:2dd0b6f:         switch( operandType.getJDBCTypeId())
1:2dd0b6f:         {
1:2dd0b6f:         case Types.BIGINT:
1:2dd0b6f:         case Types.INTEGER:
1:2dd0b6f:         case Types.SMALLINT:
1:2dd0b6f:         case Types.TINYINT:
1:2dd0b6f:         case Types.DECIMAL:
1:2dd0b6f:         case Types.NUMERIC:
1:2dd0b6f:         case Types.DOUBLE:
1:2dd0b6f:         case Types.FLOAT:
1:2dd0b6f:             if( TIMESTAMP_METHOD_NAME.equals( methodName))
1:2dd0b6f:                 invalidOperandType();
1:2dd0b6f:             operandIsNumber = true;
3:2dd0b6f:             break;
1:2dd0b6f:             
1:2dd0b6f:         case Types.CHAR:
1:2dd0b6f:         case Types.VARCHAR:
1:2dd0b6f:             break;
1:2dd0b6f: 
2:2dd0b6f:         case Types.DATE:
1:2dd0b6f:             if( TIMESTAMP_METHOD_NAME.equals( methodName))
1:2dd0b6f:                 invalidOperandType();
1:2dd0b6f:             isIdentity = true;
1:2dd0b6f:             break;
1:2dd0b6f:             
1:2dd0b6f:         case Types.NULL:
1:2dd0b6f:             break;
1:2dd0b6f:            
2:2dd0b6f:         case Types.TIMESTAMP:
1:2dd0b6f:             if( TIMESTAMP_METHOD_NAME.equals( methodName))
1:2dd0b6f:                 isIdentity = true;
1:2dd0b6f:             break;
1:2dd0b6f: 
2:2dd0b6f:         default:
1:2dd0b6f:             invalidOperandType();
1:2dd0b6f:         }
1:2dd0b6f:        
1:2dd0b6f:         if( operand instanceof ConstantNode)
1:2dd0b6f:         {
1:2dd0b6f:             DataValueFactory dvf = getLanguageConnectionContext().getDataValueFactory();
1:2dd0b6f:             DataValueDescriptor sourceValue = ((ConstantNode) operand).getValue();
1:3bb140c:             DataValueDescriptor destValue;
1:2dd0b6f:             if( sourceValue.isNull())
1:2dd0b6f:             {
1:2dd0b6f:                 destValue = (TIMESTAMP_METHOD_NAME.equals( methodName))
1:2dd0b6f:                 ? dvf.getNullTimestamp( (DateTimeDataValue) null)
1:2dd0b6f:                 : dvf.getNullDate( (DateTimeDataValue) null);
1:2dd0b6f:             }
1:2dd0b6f:             else
1:2dd0b6f:             {
1:2dd0b6f:                 destValue = (TIMESTAMP_METHOD_NAME.equals( methodName))
1:2dd0b6f:                   ? dvf.getTimestamp( sourceValue) : dvf.getDate( sourceValue);
1:2dd0b6f:             }
1:3bb140c: 
1:3bb140c:             return new UserTypeConstantNode(destValue, getContextManager());
1:2dd0b6f:         }
1:2dd0b6f: 
1:2dd0b6f:         if( isIdentity)
1:2dd0b6f:             return operand;
1:2dd0b6f:         return this;
1:2dd0b6f:     } // end of bindUnaryOperator
1:2dd0b6f: 
1:2dd0b6f:     private void invalidOperandType() throws StandardException
1:2dd0b6f:     {
1:2dd0b6f:         throw StandardException.newException( SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
1:2dd0b6f:                                               getOperatorString(), getOperand().getTypeServices().getSQLstring());
1:2dd0b6f:     }
1:2dd0b6f: 
1:2dd0b6f: 	/**
1:2dd0b6f: 	 * Do code generation for this unary operator.
1:2dd0b6f: 	 *
1:2dd0b6f: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:2dd0b6f: 	 * @param mb	The method the expression will go into
1:2dd0b6f: 	 *
1:2dd0b6f: 	 *
1:2dd0b6f: 	 * @exception StandardException		Thrown on error
1:2dd0b6f: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression( ExpressionClassBuilder acb, MethodBuilder mb)
1:2dd0b6f:         throws StandardException
1:2dd0b6f: 	{
1:2dd0b6f:         acb.pushDataValueFactory( mb);
1:2dd0b6f:         operand.generateExpression( acb, mb);
1:2dd0b6f:         mb.cast( ClassName.DataValueDescriptor);
1:2dd0b6f:         mb.callMethod( VMOpcode.INVOKEINTERFACE, (String) null, methodName, getTypeCompiler().interfaceName(), 1);
1:2dd0b6f:     } // end of generateExpression
1:2706d1f: 
1:2706d1f:     @Override
1:2706d1f:     boolean isSameNodeKind(ValueNode o) {
1:2706d1f:         return super.isSameNodeKind(o) &&
1:2706d1f:                 ((UnaryDateTimestampOperatorNode)o).kind == kind;
1:2706d1f:     }
1:2dd0b6f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // Allowed kinds
1:     final static int K_DATE = 0;
1:     final static int K_TIMESTAMP = 1;
1: 
1:     /**
1:      * This class is used to hold logically different objects for
1:      * space efficiency. {@code kind} represents the logical object
1:      * type. See also {@link ValueNode#isSameNodeKind}.
1:      */
1:     final int kind;
1:      * @param kind The kind of the result, Date or Timestamp.
1:             int kind,
1:                 kind == K_DATE ? "date" : "timestamp",
1:                 kind == K_DATE ? DATE_METHOD_NAME : TIMESTAMP_METHOD_NAME,
1:         this.kind = kind;
1:                 kind == K_DATE ? Types.DATE : Types.TIMESTAMP));
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     boolean isSameNodeKind(ValueNode o) {
1:         return super.isSameNodeKind(o) &&
1:                 ((UnaryDateTimestampOperatorNode)o).kind == kind;
1:     }
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: import java.util.List;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.DateTimeDataValue;
/////////////////////////////////////////////////////////////////////////
1: class UnaryDateTimestampOperatorNode extends UnaryOperatorNode
0:     enum OperatorType {DATE, TIMESTAMP};
1: 
0:      * @param type The type of the result, Date or Timestamp.
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     UnaryDateTimestampOperatorNode(
1:             ValueNode operand,
0:             OperatorType type,
1:             ContextManager cm) throws StandardException {
1:         super(operand,
0:                 type == OperatorType.DATE ? "date" : "timestamp",
0:                 type == OperatorType.DATE ?
0:                     DATE_METHOD_NAME : TIMESTAMP_METHOD_NAME,
1:                 cm);
0:         setNodeType(C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE);
1:         setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(
0:                 type == OperatorType.DATE ? Types.DATE : Types.TIMESTAMP));
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             DataValueDescriptor destValue;
/////////////////////////////////////////////////////////////////////////
1: 
1:             return new UserTypeConstantNode(destValue, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:                     FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression( ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression (
0:                     FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand( fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 					List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 	public ValueNode bindExpression (
/////////////////////////////////////////////////////////////////////////
0:         bindOperand( fromList, subqueryList, aggregateVector);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:2dd0b6f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This class implements the timestamp( x) and date(x) functions.
1:  *
1:  * These two functions implement a few special cases of string conversions beyond the normal string to
1:  * date/timestamp casts.
1:  */
0: public class UnaryDateTimestampOperatorNode extends UnaryOperatorNode
1: {
1:     private static final String TIMESTAMP_METHOD_NAME = "getTimestamp";
1:     private static final String DATE_METHOD_NAME = "getDate";
1:     
1:     /**
1:      * @param operand The operand of the function
0:      * @param targetType The type of the result. Timestamp or Date.
1:      *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void init( Object operand, Object targetType)
1: 		throws StandardException
1: 	{
0: 		setType( (DataTypeDescriptor) targetType);
0:         switch( getTypeServices().getJDBCTypeId())
1:         {
1:         case Types.DATE:
0:             super.init( operand, "date", DATE_METHOD_NAME);
1:             break;
1: 
1:         case Types.TIMESTAMP:
0:             super.init( operand, "timestamp", TIMESTAMP_METHOD_NAME);
1:             break;
1: 
1:         default:
0:             if( SanityManager.DEBUG)
0:                 SanityManager.NOTREACHED();
0:             super.init( operand);
1:         }
1:     }
1:     
1:     /**
1:      * Called by UnaryOperatorNode.bindExpression.
1:      *
1:      * If the operand is a constant then evaluate the function at compile time. Otherwise,
1:      * if the operand input type is the same as the output type then discard this node altogether.
1:      * If the function is "date" and the input is a timestamp then change this node to a cast.
1:      *
1: 	 * @param fromList		The FROM list for the query this
1: 	 *				expression is in, for binding columns.
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	protected ValueNode bindUnaryOperator(
0: 					FromList fromList, SubqueryList subqueryList,
0: 					Vector aggregateVector)
1: 				throws StandardException
1: 	{
1:         boolean isIdentity = false; // Is this function the identity operator?
1:         boolean operandIsNumber = false;
1:         
0:         super.bindUnaryOperator( fromList, subqueryList, aggregateVector);
1:         DataTypeDescriptor operandType = operand.getTypeServices();
1:         switch( operandType.getJDBCTypeId())
1:         {
1:         case Types.BIGINT:
1:         case Types.INTEGER:
1:         case Types.SMALLINT:
1:         case Types.TINYINT:
1:         case Types.DECIMAL:
1:         case Types.NUMERIC:
1:         case Types.DOUBLE:
1:         case Types.FLOAT:
1:             if( TIMESTAMP_METHOD_NAME.equals( methodName))
1:                 invalidOperandType();
1:             operandIsNumber = true;
1:             break;
1:             
1:         case Types.CHAR:
1:         case Types.VARCHAR:
1:             break;
1: 
1:         case Types.DATE:
1:             if( TIMESTAMP_METHOD_NAME.equals( methodName))
1:                 invalidOperandType();
1:             isIdentity = true;
1:             break;
1:             
1:         case Types.NULL:
1:             break;
1:            
1:         case Types.TIMESTAMP:
1:             if( TIMESTAMP_METHOD_NAME.equals( methodName))
1:                 isIdentity = true;
1:             break;
1: 
1:         default:
1:             invalidOperandType();
1:         }
1:        
1:         if( operand instanceof ConstantNode)
1:         {
1:             DataValueFactory dvf = getLanguageConnectionContext().getDataValueFactory();
1:             DataValueDescriptor sourceValue = ((ConstantNode) operand).getValue();
0:             DataValueDescriptor destValue = null;
1:             if( sourceValue.isNull())
1:             {
1:                 destValue = (TIMESTAMP_METHOD_NAME.equals( methodName))
1:                 ? dvf.getNullTimestamp( (DateTimeDataValue) null)
1:                 : dvf.getNullDate( (DateTimeDataValue) null);
1:             }
1:             else
1:             {
1:                 destValue = (TIMESTAMP_METHOD_NAME.equals( methodName))
1:                   ? dvf.getTimestamp( sourceValue) : dvf.getDate( sourceValue);
1:             }
0:             return (ValueNode) getNodeFactory().getNode( C_NodeTypes.USERTYPE_CONSTANT_NODE,
0:                                                          destValue, getContextManager());
1:         }
1: 
1:         if( isIdentity)
1:             return operand;
1:         return this;
1:     } // end of bindUnaryOperator
1: 
1:     private void invalidOperandType() throws StandardException
1:     {
1:         throw StandardException.newException( SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
1:                                               getOperatorString(), getOperand().getTypeServices().getSQLstring());
1:     }
1: 
1: 	/**
1: 	 * Do code generation for this unary operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the expression will go into
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression( ExpressionClassBuilder acb,
0:                                     MethodBuilder mb)
1:         throws StandardException
1: 	{
1:         acb.pushDataValueFactory( mb);
1:         operand.generateExpression( acb, mb);
1:         mb.cast( ClassName.DataValueDescriptor);
1:         mb.callMethod( VMOpcode.INVOKEINTERFACE, (String) null, methodName, getTypeCompiler().interfaceName(), 1);
1:     } // end of generateExpression
1: }
============================================================================