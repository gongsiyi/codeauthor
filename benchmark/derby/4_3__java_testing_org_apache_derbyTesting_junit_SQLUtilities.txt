1:dbdd270: /*
1:dbdd270: * Licensed to the Apache Software Foundation (ASF) under one or more
1:dbdd270: * contributor license agreements.  See the NOTICE file distributed with
1:dbdd270: * this work for additional information regarding copyright ownership.
1:dbdd270: * The ASF licenses this file to you under the Apache License, Version 2.0
1:dbdd270: * (the "License"); you may not use this file except in compliance with
1:dbdd270: * the License.  You may obtain a copy of the License at
1:dbdd270: *
1:dbdd270: *     http://www.apache.org/licenses/LICENSE-2.0
1:dbdd270: *
1:dbdd270: * Unless required by applicable law or agreed to in writing, software
1:dbdd270: * distributed under the License is distributed on an "AS IS" BASIS,
1:dbdd270: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dbdd270: * See the License for the specific language governing permissions and
1:dbdd270: * limitations under the License.
1:dbdd270: */
1:9f0e445: package org.apache.derbyTesting.junit;
2:9f0e445: 
1:9f0e445: import java.sql.CallableStatement;
1:9f0e445: import java.sql.Connection;
1:9f0e445: import java.sql.ResultSet;
1:9f0e445: import java.sql.SQLException;
1:9f0e445: import java.sql.Statement;
1:9f0e445: 
1:9f0e445: 
1:9f0e445: public class SQLUtilities {
1:9f0e445: 
1:9f0e445:     public static String VALID_DATE_STRING = "'2000-01-01'";
1:9f0e445:     public static String VALID_TIME_STRING = "'15:30:20'";
1:9f0e445:     public static String VALID_TIMESTAMP_STRING = "'2000-01-01 15:30:20'";
1:9f0e445:     public static String NULL_VALUE="NULL";
1:9f0e445: 
1:9f0e445:     public static String[] allDataTypesColumnNames =
1:9f0e445:     {
1:9f0e445:             "SMALLINTCOL",
1:9f0e445:             "INTEGERCOL",
1:9f0e445:             "BIGINTCOL",
1:9f0e445:             "DECIMALCOL",
1:9f0e445:             "REALCOL",
1:9f0e445:             "DOUBLECOL",
1:9f0e445:             "CHARCOL",
1:9f0e445:             "VARCHARCOL",
1:9f0e445:             "LONGVARCHARCOL",
1:9f0e445:             "CHARFORBITCOL",
1:9f0e445:             "VARCHARFORBITCOL",
1:9f0e445:             "LVARCHARFORBITCOL",
1:9f0e445:             "CLOBCOL",
1:9f0e445:             "DATECOL",
1:9f0e445:             "TIMECOL",
1:9f0e445:             "TIMESTAMPCOL",
1:9f0e445:             "BLOBCOL",
1:9f0e445: 
1:9f0e445:     };
1:9f0e445: 
1:9f0e445:     private static String[][]allDataTypesSQLData =
1:9f0e445:     {
1:9f0e445:             {NULL_VALUE, "0","1","2"},       // SMALLINT
1:9f0e445:             {NULL_VALUE,"0","1","21"},       // INTEGER
1:9f0e445:             {NULL_VALUE,"0","1","22"},       // BIGINT
1:9f0e445:             {NULL_VALUE,"0.0","1.0","23.0"},      // DECIMAL(10,5)
1:9f0e445:             {NULL_VALUE,"0.0","1.0","24.0"},      // REAL,
1:9f0e445:             {NULL_VALUE,"0.0","1.0","25.0"},      // DOUBLE
1:9f0e445:             {NULL_VALUE,"'0'","'aa'","'2.0'"},      // CHAR(60)
1:9f0e445:             {NULL_VALUE,"'0'","'aa'",VALID_TIME_STRING},      //VARCHAR(60)",
1:9f0e445:             {NULL_VALUE,"'0'","'aa'",VALID_TIMESTAMP_STRING},      // LONG VARCHAR
1:9f0e445:             {NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaaa'"},  // CHAR(60)  FOR BIT DATA
1:9f0e445:             {NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaba'"},  // VARCHAR(60) FOR BIT DATA
1:9f0e445:             {NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaca'"},  //LONG VARCHAR FOR BIT DATA
1:9f0e445:             {NULL_VALUE,"'13'","'14'",NULL_VALUE},     //CLOB(1k)
1:9f0e445:             {NULL_VALUE,SQLUtilities.VALID_DATE_STRING,SQLUtilities.VALID_DATE_STRING,NULL_VALUE},        // DATE
1:9f0e445:             {NULL_VALUE,VALID_TIME_STRING,VALID_TIME_STRING,VALID_TIME_STRING},        // TIME
1:9f0e445:             {NULL_VALUE,VALID_TIMESTAMP_STRING,VALID_TIMESTAMP_STRING,VALID_TIMESTAMP_STRING},   // TIMESTAMP
1:9f0e445:             {NULL_VALUE,NULL_VALUE,NULL_VALUE,NULL_VALUE}                 // BLOB
1:9f0e445:     };
1:9f0e445: 
1:9f0e445:     /**
1:9f0e445:      * Create a table AllDataTypesTable and populate with data
1:9f0e445:      * @param s
1:9f0e445:      * @throws SQLException
1:9f0e445:      */
1:9f0e445:     public  static void createAndPopulateAllDataTypesTable(Statement s) throws SQLException {
1:9f0e445:         try {
1:9f0e445:             s.executeUpdate("DROP TABLE AllDataTypesTable");
1:9f0e445:         } catch (SQLException se) {
1:9f0e445:         }
1:9f0e445: 
1:9f0e445:         StringBuffer createSQL = new StringBuffer(
1:9f0e445:                 "create table AllDataTypesTable (");
1:1cf00e6:         for (int type = 0; type < SQLUtilities.SQLTypes.length - 1; type++) {
1:1cf00e6:             createSQL.append(allDataTypesColumnNames[type] + " " + SQLUtilities.SQLTypes[type]
1:9f0e445:                     + ",");
1:9f0e445:         }
1:1cf00e6:         createSQL.append(allDataTypesColumnNames[SQLUtilities.SQLTypes.length - 1] + " "
1:1cf00e6:                 + SQLUtilities.SQLTypes[SQLUtilities.SQLTypes.length - 1] + ")");
1:9f0e445:         s.executeUpdate(createSQL.toString());
1:9f0e445: 
1:9f0e445:         for (int row = 0; row < allDataTypesSQLData[0].length; row++) {
1:9f0e445:             createSQL = new StringBuffer(
1:9f0e445:                     "insert into AllDataTypesTable values(");
1:1cf00e6:             for (int type = 0; type < SQLUtilities.SQLTypes.length - 1; type++) {
1:9f0e445:                 createSQL.append(allDataTypesSQLData[type][row] + ",");
1:9f0e445:             }
1:1cf00e6:             createSQL.append(allDataTypesSQLData[SQLUtilities.SQLTypes.length - 1][row] + ")");
1:1cf00e6:             
1:9f0e445:             s.executeUpdate(createSQL.toString());
1:9f0e445:         }
1:9f0e445:     }
1:1cf00e6: 
1:9f0e445:     
1:9f0e445:     
1:9f0e445:     /**
1:9f0e445:      * 
1:9f0e445:      * Assumes user previously executed 
1:9f0e445:      * "call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)";
1:9f0e445:      * @param s Statement to use for calling runtime statistics function
1:9f0e445:      * @return a runtime statistics parser  
1:9f0e445:      * @throws SQLException
1:9f0e445:      */
1:9f0e445:     public static RuntimeStatisticsParser  getRuntimeStatisticsParser(Statement s) throws SQLException
1:9f0e445:     {
1:9f0e445:         ResultSet rs = s.executeQuery("values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()");
1:9f0e445:         rs.next();
1:9f0e445:         String rts = rs.getString(1);
1:36ee5b2:         rs.close();
1:9f0e445:         return new RuntimeStatisticsParser(rts);
1:9f0e445:     }
1:9f0e445: 
1:9f0e445:     public static RuntimeStatisticsParser executeAndGetRuntimeStatistics(Connection conn, String sql ) throws SQLException
1:9f0e445:     {
1:9f0e445:         Statement s = conn.createStatement();
1:9f0e445:         Statement s2 = conn.createStatement();
1:9f0e445:         CallableStatement cs = conn.prepareCall("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:9f0e445:         cs.execute();
1:9f0e445:         cs.close();
1:9f0e445:         s.execute(sql);
1:9f0e445:         ResultSet rs = s.getResultSet();
1:9f0e445:         if (rs != null)
1:9f0e445:             JDBC.assertDrainResults(rs);
1:36ee5b2:         RuntimeStatisticsParser parser = getRuntimeStatisticsParser(s2);
1:9f0e445:         s.close();
1:36ee5b2:         s2.close();
1:36ee5b2:         return parser;
1:9f0e445:     }
1:1cf00e6: 
1:1cf00e6: 	// Note: This array is accessed in lang.NullIfTest
1:1cf00e6: 	public static String[] SQLTypes =
1:1cf00e6: 	{
1:1cf00e6: 	        "SMALLINT",
1:1cf00e6: 	        "INTEGER",
1:1cf00e6: 	        "BIGINT",
1:1cf00e6: 	        "DECIMAL(10,5)",
1:1cf00e6: 	        "REAL",
1:1cf00e6: 	        "DOUBLE",
1:1cf00e6: 	        "CHAR(60)",
1:1cf00e6: 	        "VARCHAR(60)",
1:1cf00e6: 	        "LONG VARCHAR",
1:1cf00e6: 	        "CHAR(60) FOR BIT DATA",
1:1cf00e6: 	        "VARCHAR(60) FOR BIT DATA",
1:1cf00e6: 	        "LONG VARCHAR FOR BIT DATA",
1:1cf00e6: 	        "CLOB(1k)",
1:1cf00e6: 	        "DATE",
1:1cf00e6: 	        "TIME",
1:1cf00e6: 	        "TIMESTAMP",
1:1cf00e6: 	        "BLOB(1k)",
1:1cf00e6: 	};
1:9f0e445:     
1:9f0e445: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1cf00e6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (int type = 0; type < SQLUtilities.SQLTypes.length - 1; type++) {
1:             createSQL.append(allDataTypesColumnNames[type] + " " + SQLUtilities.SQLTypes[type]
1:         createSQL.append(allDataTypesColumnNames[SQLUtilities.SQLTypes.length - 1] + " "
1:                 + SQLUtilities.SQLTypes[SQLUtilities.SQLTypes.length - 1] + ")");
1:             for (int type = 0; type < SQLUtilities.SQLTypes.length - 1; type++) {
1:             createSQL.append(allDataTypesSQLData[SQLUtilities.SQLTypes.length - 1][row] + ")");
1: 
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1: 	// Note: This array is accessed in lang.NullIfTest
1: 	public static String[] SQLTypes =
1: 	{
1: 	        "SMALLINT",
1: 	        "INTEGER",
1: 	        "BIGINT",
1: 	        "DECIMAL(10,5)",
1: 	        "REAL",
1: 	        "DOUBLE",
1: 	        "CHAR(60)",
1: 	        "VARCHAR(60)",
1: 	        "LONG VARCHAR",
1: 	        "CHAR(60) FOR BIT DATA",
1: 	        "VARCHAR(60) FOR BIT DATA",
1: 	        "LONG VARCHAR FOR BIT DATA",
1: 	        "CLOB(1k)",
1: 	        "DATE",
1: 	        "TIME",
1: 	        "TIMESTAMP",
1: 	        "BLOB(1k)",
1: 	};
commit:9f0e445
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.junit;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
0: import org.apache.derbyTesting.functionTests.tests.lang.CastingTest;
1: 
1: public class SQLUtilities {
1: 
1:     public static String VALID_DATE_STRING = "'2000-01-01'";
1:     public static String VALID_TIME_STRING = "'15:30:20'";
1:     public static String VALID_TIMESTAMP_STRING = "'2000-01-01 15:30:20'";
1:     public static String NULL_VALUE="NULL";
1: 
1:     public static String[] allDataTypesColumnNames =
1:     {
1:             "SMALLINTCOL",
1:             "INTEGERCOL",
1:             "BIGINTCOL",
1:             "DECIMALCOL",
1:             "REALCOL",
1:             "DOUBLECOL",
1:             "CHARCOL",
1:             "VARCHARCOL",
1:             "LONGVARCHARCOL",
1:             "CHARFORBITCOL",
1:             "VARCHARFORBITCOL",
1:             "LVARCHARFORBITCOL",
1:             "CLOBCOL",
1:             "DATECOL",
1:             "TIMECOL",
1:             "TIMESTAMPCOL",
1:             "BLOBCOL",
1: 
1:     };
1: 
1:     private static String[][]allDataTypesSQLData =
1:     {
1:             {NULL_VALUE, "0","1","2"},       // SMALLINT
1:             {NULL_VALUE,"0","1","21"},       // INTEGER
1:             {NULL_VALUE,"0","1","22"},       // BIGINT
1:             {NULL_VALUE,"0.0","1.0","23.0"},      // DECIMAL(10,5)
1:             {NULL_VALUE,"0.0","1.0","24.0"},      // REAL,
1:             {NULL_VALUE,"0.0","1.0","25.0"},      // DOUBLE
1:             {NULL_VALUE,"'0'","'aa'","'2.0'"},      // CHAR(60)
1:             {NULL_VALUE,"'0'","'aa'",VALID_TIME_STRING},      //VARCHAR(60)",
1:             {NULL_VALUE,"'0'","'aa'",VALID_TIMESTAMP_STRING},      // LONG VARCHAR
1:             {NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaaa'"},  // CHAR(60)  FOR BIT DATA
1:             {NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaba'"},  // VARCHAR(60) FOR BIT DATA
1:             {NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaca'"},  //LONG VARCHAR FOR BIT DATA
1:             {NULL_VALUE,"'13'","'14'",NULL_VALUE},     //CLOB(1k)
1:             {NULL_VALUE,SQLUtilities.VALID_DATE_STRING,SQLUtilities.VALID_DATE_STRING,NULL_VALUE},        // DATE
1:             {NULL_VALUE,VALID_TIME_STRING,VALID_TIME_STRING,VALID_TIME_STRING},        // TIME
1:             {NULL_VALUE,VALID_TIMESTAMP_STRING,VALID_TIMESTAMP_STRING,VALID_TIMESTAMP_STRING},   // TIMESTAMP
1:             {NULL_VALUE,NULL_VALUE,NULL_VALUE,NULL_VALUE}                 // BLOB
1:     };
1: 
1:     /**
1:      * Create a table AllDataTypesTable and populate with data
1:      * @param s
1:      * @throws SQLException
1:      */
1:     public  static void createAndPopulateAllDataTypesTable(Statement s) throws SQLException {
1:         try {
1:             s.executeUpdate("DROP TABLE AllDataTypesTable");
1:         } catch (SQLException se) {
1:         }
1: 
1:         StringBuffer createSQL = new StringBuffer(
1:                 "create table AllDataTypesTable (");
0:         for (int type = 0; type < CastingTest.SQLTypes.length - 1; type++) {
0:             createSQL.append(allDataTypesColumnNames[type] + " " + CastingTest.SQLTypes[type]
1:                     + ",");
1:         }
0:         createSQL.append(allDataTypesColumnNames[CastingTest.SQLTypes.length - 1] + " "
0:                 + CastingTest.SQLTypes[CastingTest.SQLTypes.length - 1] + ")");
1:         s.executeUpdate(createSQL.toString());
1: 
1:         for (int row = 0; row < allDataTypesSQLData[0].length; row++) {
1:             createSQL = new StringBuffer(
1:                     "insert into AllDataTypesTable values(");
0:             for (int type = 0; type < CastingTest.SQLTypes.length - 1; type++) {
1:                 createSQL.append(allDataTypesSQLData[type][row] + ",");
1:             }
0:             createSQL.append(allDataTypesSQLData[CastingTest.SQLTypes.length - 1][row] + ")");
1:             
1:             s.executeUpdate(createSQL.toString());
1:         }
1: 
1:         s.close();
1:     }
1:     
1:     /**
1:      * 
1:      * Assumes user previously executed 
1:      * "call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)";
1:      * @param s Statement to use for calling runtime statistics function
1:      * @return a runtime statistics parser  
1:      * @throws SQLException
1:      */
1:     public static RuntimeStatisticsParser  getRuntimeStatisticsParser(Statement s) throws SQLException
1:     {
1:         ResultSet rs = s.executeQuery("values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()");
1:         rs.next();
1:         String rts = rs.getString(1);
1:         return new RuntimeStatisticsParser(rts);
1:     }
1: 
1:     public static RuntimeStatisticsParser executeAndGetRuntimeStatistics(Connection conn, String sql ) throws SQLException
1:     {
1:         Statement s = conn.createStatement();
1:         Statement s2 = conn.createStatement();
1:         CallableStatement cs = conn.prepareCall("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:         cs.execute();
1:         cs.close();
1:         s.execute(sql);
1:         ResultSet rs = s.getResultSet();
1:         if (rs != null)
1:             JDBC.assertDrainResults(rs);
0:         return SQLUtilities.getRuntimeStatisticsParser(s2);
1:     }
1:     
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0c33e95
/////////////////////////////////////////////////////////////////////////
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:dbdd270
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one or more
1: * contributor license agreements.  See the NOTICE file distributed with
1: * this work for additional information regarding copyright ownership.
1: * The ASF licenses this file to you under the Apache License, Version 2.0
1: * (the "License"); you may not use this file except in compliance with
1: * the License.  You may obtain a copy of the License at
1: *
1: *     http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing, software
1: * distributed under the License is distributed on an "AS IS" BASIS,
1: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: * See the License for the specific language governing permissions and
1: * limitations under the License.
1: */
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:36ee5b2
/////////////////////////////////////////////////////////////////////////
1:         rs.close();
/////////////////////////////////////////////////////////////////////////
1:         RuntimeStatisticsParser parser = getRuntimeStatisticsParser(s2);
0:         s.close();
1:         s2.close();
1:         return parser;
============================================================================