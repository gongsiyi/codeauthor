1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.services.reflect.ReflectClassesJava2
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.reflect;
1:edcd511: 
1:edcd511: import org.apache.derby.iapi.sql.compile.CodeGeneration;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
2:eac0369: /**
1:edcd511: 	Reflect loader with Privileged block for Java 2 security. 
1:eac0369: */
1:eac0369: 
1:c8603c4: public class ReflectClassesJava2 extends DatabaseClasses
1:a15a470: 	implements java.security.PrivilegedAction<Object>
1:eac0369: {
1:eac0369: 
1:a15a470: 	private java.util.HashMap<String,ReflectGeneratedClass> preCompiled;
1:eac0369: 
1:2542f1d: 	private int action = -1;
1:eac0369: 
1:7a92d1f: 	synchronized LoadedGeneratedClass loadGeneratedClassFromData(String fullyQualifiedName, ByteArray classDump) {
1:eac0369: 
1:eac0369: 		if (classDump == null || classDump.getArray() == null) {
1:eac0369: 
1:eac0369: 			if (preCompiled == null)
1:a15a470: 				preCompiled = new java.util.HashMap<String,ReflectGeneratedClass>();
1:eac0369: 			else
1:eac0369: 			{
1:a15a470: 				ReflectGeneratedClass gc = preCompiled.get(fullyQualifiedName);
1:eac0369: 				if (gc != null)
1:eac0369: 					return gc;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// not a generated class, just load the class directly.
1:eac0369: 			try {
1:eac0369: 				Class jvmClass = Class.forName(fullyQualifiedName);
1:6790718: 				ReflectGeneratedClass gc = new ReflectGeneratedClass(this, jvmClass);
1:eac0369: 				preCompiled.put(fullyQualifiedName, gc);
1:eac0369: 				return gc;
1:eac0369: 			} catch (ClassNotFoundException cnfe) {
1:eac0369: 				throw new NoClassDefFoundError(cnfe.toString());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:edcd511:         // Generated class. Make sure that it lives in the org.apache.derby.exe package
1:edcd511:         int     lastDot = fullyQualifiedName.lastIndexOf( "." );
1:edcd511:         String  actualPackage;
1:edcd511:         if ( lastDot < 0 ) { actualPackage = ""; }
1:edcd511:         else
1:edcd511:         {
1:edcd511:             actualPackage = fullyQualifiedName.substring( 0, lastDot + 1 );
1:edcd511:         }
1:edcd511: 
1:edcd511:         if ( !CodeGeneration.GENERATED_PACKAGE_PREFIX.equals( actualPackage ) )
1:edcd511:         {
1:edcd511:             throw new IllegalArgumentException( fullyQualifiedName );
1:edcd511:         }
1:edcd511:         
1:eac0369: 		action = 1;
1:eac0369: 		return ((ReflectLoaderJava2) java.security.AccessController.doPrivileged(this)).loadGeneratedClass(fullyQualifiedName, classDump);
1:eac0369: 	}
1:eac0369: 
1:7a92d1f: 	public final Object run() {
1:2542f1d: 
1:2542f1d: 		try {
1:2542f1d: 			// SECURITY PERMISSION - MP2
1:2542f1d: 			switch (action) {
1:2542f1d: 			case 1:
1:2542f1d: 				return new ReflectLoaderJava2(getClass().getClassLoader(), this);
1:2542f1d: 			case 2:
1:2542f1d: 				return Thread.currentThread().getContextClassLoader();
1:2542f1d: 			default:
1:2542f1d: 				return null;
1:2542f1d: 			}
1:2542f1d: 		} finally {
1:2542f1d: 			action = -1;
1:eac0369: 		}
1:2542f1d: 		
1:eac0369: 	}
1:eac0369: 
1:2542f1d: 	Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
1:eac0369: 		
1:eac0369: 		Class foundClass = null;
1:2542f1d: 		
1:eac0369: 	    // We may have two problems with calling  getContextClassLoader()
1:eac0369: 	    // when trying to find our own classes for aggregates.
1:eac0369: 	    // 1) If using the URLClassLoader a ClassNotFoundException may be 
1:eac0369: 	    //    thrown (Beetle 5002).
1:94f158a: 	    // 2) If Derby is loaded with JNI, getContextClassLoader()
1:eac0369: 	    //    may return null. (Beetle 5171)
1:eac0369: 	    //
1:eac0369: 	    // If this happens we need to user the class loader of this object
1:94f158a: 	    // (the classLoader that loaded Derby). 
1:eac0369: 	    // So we call Class.forName to ensure that we find the class.
1:eac0369:         try {
1:2542f1d:         	ClassLoader cl;
1:2542f1d:         	synchronized(this) {
1:2542f1d:         	  action = 2;
1:2542f1d:               cl = ((ClassLoader)
1:eac0369: 			      java.security.AccessController.doPrivileged(this));
1:2542f1d:         	}
1:eac0369: 			
1:eac0369: 			foundClass = (cl != null) ?  cl.loadClass(name) 
1:eac0369: 				      :Class.forName(name);
1:eac0369:         } catch (ClassNotFoundException cnfe) {
1:eac0369:             foundClass = Class.forName(name);
1:eac0369:         }
1:eac0369: 		return foundClass;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:edcd511
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.derby.iapi.sql.compile.CodeGeneration;
1: 	Reflect loader with Privileged block for Java 2 security. 
/////////////////////////////////////////////////////////////////////////
1:         // Generated class. Make sure that it lives in the org.apache.derby.exe package
1:         int     lastDot = fullyQualifiedName.lastIndexOf( "." );
1:         String  actualPackage;
1:         if ( lastDot < 0 ) { actualPackage = ""; }
1:         else
1:         {
1:             actualPackage = fullyQualifiedName.substring( 0, lastDot + 1 );
1:         }
1: 
1:         if ( !CodeGeneration.GENERATED_PACKAGE_PREFIX.equals( actualPackage ) )
1:         {
1:             throw new IllegalArgumentException( fullyQualifiedName );
1:         }
1:         
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1: 	implements java.security.PrivilegedAction<Object>
1: 	private java.util.HashMap<String,ReflectGeneratedClass> preCompiled;
/////////////////////////////////////////////////////////////////////////
1: 				preCompiled = new java.util.HashMap<String,ReflectGeneratedClass>();
1: 				ReflectGeneratedClass gc = preCompiled.get(fullyQualifiedName);
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: public class ReflectClassesJava2 extends DatabaseClasses
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6790718
/////////////////////////////////////////////////////////////////////////
1: 				ReflectGeneratedClass gc = new ReflectGeneratedClass(this, jvmClass);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	    // 2) If Derby is loaded with JNI, getContextClassLoader()
1: 	    // (the classLoader that loaded Derby). 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2542f1d
/////////////////////////////////////////////////////////////////////////
1: 	private int action = -1;
/////////////////////////////////////////////////////////////////////////
1: 
1: 		try {
1: 			// SECURITY PERMISSION - MP2
1: 			switch (action) {
1: 			case 1:
1: 				return new ReflectLoaderJava2(getClass().getClassLoader(), this);
1: 			case 2:
1: 				return Thread.currentThread().getContextClassLoader();
1: 			default:
1: 				return null;
1: 			}
1: 		} finally {
1: 			action = -1;
1: 		
1: 	Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
1: 		
/////////////////////////////////////////////////////////////////////////
1:         	ClassLoader cl;
1:         	synchronized(this) {
1:         	  action = 2;
1:               cl = ((ClassLoader)
1:         	}
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1: 	synchronized LoadedGeneratedClass loadGeneratedClassFromData(String fullyQualifiedName, ByteArray classDump) {
/////////////////////////////////////////////////////////////////////////
1: 	public final Object run() {
/////////////////////////////////////////////////////////////////////////
0: 	synchronized Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.reflect.ReflectClassesJava2
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.reflect;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: /**
0: 	Relfect loader with Privileged block for Java 2 security. 
1: */
1: 
0: public final class ReflectClassesJava2 extends DatabaseClasses
0: 	implements java.security.PrivilegedAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
0: 	private java.util.HashMap preCompiled;
1: 
0: 	private int action;
1: 
0: 	protected synchronized LoadedGeneratedClass loadGeneratedClassFromData(String fullyQualifiedName, ByteArray classDump) {
1: 
1: 		if (classDump == null || classDump.getArray() == null) {
1: 
1: 			if (preCompiled == null)
0: 				preCompiled = new java.util.HashMap();
1: 			else
1: 			{
0: 				ReflectGeneratedClass gc = (ReflectGeneratedClass) preCompiled.get(fullyQualifiedName);
1: 				if (gc != null)
1: 					return gc;
1: 			}
1: 
1: 			// not a generated class, just load the class directly.
1: 			try {
1: 				Class jvmClass = Class.forName(fullyQualifiedName);
0: 				ReflectGeneratedClass gc = new ReflectGeneratedClass(this, jvmClass, null);
1: 				preCompiled.put(fullyQualifiedName, gc);
1: 				return gc;
1: 			} catch (ClassNotFoundException cnfe) {
1: 				throw new NoClassDefFoundError(cnfe.toString());
1: 			}
1: 		}
1: 
1: 		action = 1;
1: 		return ((ReflectLoaderJava2) java.security.AccessController.doPrivileged(this)).loadGeneratedClass(fullyQualifiedName, classDump);
1: 	}
1: 
0: 	public Object run() {
0: 		// SECURITY PERMISSION - MP2
0: 		switch (action) {
0: 		case 1:
0: 			return new ReflectLoaderJava2(getClass().getClassLoader(), this);
0: 		case 2:
0: 			return Thread.currentThread().getContextClassLoader();
0: 		default:
0: 			return null;
1: 		}
1: 	}
1: 
0: 	protected synchronized Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
1: 		
1: 		Class foundClass = null;
0: 		action = 2;
1: 	    // We may have two problems with calling  getContextClassLoader()
1: 	    // when trying to find our own classes for aggregates.
1: 	    // 1) If using the URLClassLoader a ClassNotFoundException may be 
1: 	    //    thrown (Beetle 5002).
0: 	    // 2) If cloudscape is loaded with JNI, getContextClassLoader()
1: 	    //    may return null. (Beetle 5171)
1: 	    //
1: 	    // If this happens we need to user the class loader of this object
0: 	    // (the classLoader that loaded Cloudscape). 
1: 	    // So we call Class.forName to ensure that we find the class.
1:         try {
0:             ClassLoader cl = ((ClassLoader)
1: 			      java.security.AccessController.doPrivileged(this));
1: 			
1: 			foundClass = (cl != null) ?  cl.loadClass(name) 
1: 				      :Class.forName(name);
1:         } catch (ClassNotFoundException cnfe) {
1:             foundClass = Class.forName(name);
1:         }
1: 		return foundClass;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.reflect;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: /**
0: 	Relfect loader with Privileged block for Java 2 security. 
0: */
0: 
0: public final class ReflectClassesJava2 extends DatabaseClasses
0: 	implements java.security.PrivilegedAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	private java.util.HashMap preCompiled;
0: 
0: 	private int action;
0: 
0: 	protected synchronized LoadedGeneratedClass loadGeneratedClassFromData(String fullyQualifiedName, ByteArray classDump) {
0: 
0: 		if (classDump == null || classDump.getArray() == null) {
0: 
0: 			if (preCompiled == null)
0: 				preCompiled = new java.util.HashMap();
0: 			else
0: 			{
0: 				ReflectGeneratedClass gc = (ReflectGeneratedClass) preCompiled.get(fullyQualifiedName);
0: 				if (gc != null)
0: 					return gc;
0: 			}
0: 
0: 			// not a generated class, just load the class directly.
0: 			try {
0: 				Class jvmClass = Class.forName(fullyQualifiedName);
0: 				ReflectGeneratedClass gc = new ReflectGeneratedClass(this, jvmClass, null);
0: 				preCompiled.put(fullyQualifiedName, gc);
0: 				return gc;
0: 			} catch (ClassNotFoundException cnfe) {
0: 				throw new NoClassDefFoundError(cnfe.toString());
0: 			}
0: 		}
0: 
0: 		action = 1;
0: 		return ((ReflectLoaderJava2) java.security.AccessController.doPrivileged(this)).loadGeneratedClass(fullyQualifiedName, classDump);
0: 	}
0: 
0: 	public Object run() {
0: 		// SECURITY PERMISSION - MP2
0: 		switch (action) {
0: 		case 1:
0: 			return new ReflectLoaderJava2(getClass().getClassLoader(), this);
0: 		case 2:
0: 			return Thread.currentThread().getContextClassLoader();
0: 		default:
0: 			return null;
0: 		}
0: 	}
0: 
0: 	protected synchronized Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
0: 		
0: 		Class foundClass = null;
0: 		action = 2;
0: 	    // We may have two problems with calling  getContextClassLoader()
0: 	    // when trying to find our own classes for aggregates.
0: 	    // 1) If using the URLClassLoader a ClassNotFoundException may be 
0: 	    //    thrown (Beetle 5002).
0: 	    // 2) If cloudscape is loaded with JNI, getContextClassLoader()
0: 	    //    may return null. (Beetle 5171)
0: 	    //
0: 	    // If this happens we need to user the class loader of this object
0: 	    // (the classLoader that loaded Cloudscape). 
0: 	    // So we call Class.forName to ensure that we find the class.
0:         try {
0:             ClassLoader cl = ((ClassLoader)
0: 			      java.security.AccessController.doPrivileged(this));
0: 			
0: 			foundClass = (cl != null) ?  cl.loadClass(name) 
0: 				      :Class.forName(name);
0:         } catch (ClassNotFoundException cnfe) {
0:             foundClass = Class.forName(name);
0:         }
0: 		return foundClass;
0: 	}
0: }
============================================================================