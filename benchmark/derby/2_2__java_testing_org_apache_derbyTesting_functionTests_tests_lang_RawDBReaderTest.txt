1:28c4dc4: /*
7:28c4dc4: 
1:28c4dc4:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.RawDBReaderTest
1:28c4dc4: 
1:28c4dc4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:28c4dc4:    contributor license agreements.  See the NOTICE file distributed with
1:28c4dc4:    this work for additional information regarding copyright ownership.
1:28c4dc4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:28c4dc4:    (the "License"); you may not use this file except in compliance with
1:28c4dc4:    the License.  You may obtain a copy of the License at
1:28c4dc4: 
1:28c4dc4:      http://www.apache.org/licenses/LICENSE-2.0
1:28c4dc4: 
1:28c4dc4:    Unless required by applicable law or agreed to in writing, software
1:28c4dc4:    distributed under the License is distributed on an "AS IS" BASIS,
1:28c4dc4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:28c4dc4:    See the License for the specific language governing permissions and
1:28c4dc4:    limitations under the License.
1:28c4dc4: 
1:28c4dc4:  */
1:28c4dc4: 
1:28c4dc4: package org.apache.derbyTesting.functionTests.tests.lang;
1:28c4dc4: 
1:3602a8c: import java.io.BufferedReader;
1:28c4dc4: import java.io.File;
1:28c4dc4: import java.io.FileReader;
1:28c4dc4: import java.sql.Connection;
1:28c4dc4: import java.sql.DriverManager;
1:28c4dc4: import java.sql.SQLException;
1:28c4dc4: import junit.framework.Test;
1:28c4dc4: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:28c4dc4: import org.apache.derbyTesting.junit.Decorator;
1:28c4dc4: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:28c4dc4: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:28c4dc4: import org.apache.derbyTesting.junit.TestConfiguration;
1:28c4dc4: 
1:28c4dc4: /**
1:28c4dc4:  * <p>
1:28c4dc4:  * Test reading of corrupt databases.
1:28c4dc4:  * </p>
1:28c4dc4:  */
1:28c4dc4: public class RawDBReaderTest extends GeneratedColumnsHelper
3:28c4dc4: {
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4:     //
1:28c4dc4:     // CONSTANTS
1:28c4dc4:     //
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4: 
1:28c4dc4:     private static  final   String      TEST_DBO = "TEST_DBO";
1:28c4dc4:     private static  final   String[]    LEGAL_USERS = { TEST_DBO  };
1:28c4dc4:     private static  final   String      MEMORY_DB = "jdbc:derby:memory:rrt";
1:28c4dc4:     private static  final   String      RECOVERY_SCRIPT = "extinout/recovery.sql";
1:28c4dc4:     private static  final   String      BOOT_PASSWORD = "fooBarWibble";
1:28c4dc4: 
1:5e33d79:     private static  final   String      LIST_USER_SCHEMAS =
1:5e33d79:         "select schemaname from sys.sysschemas\n" +
1:5e33d79:         "where schemaname not like 'SYS%'\n" +
1:5e33d79:         "and schemaname != 'APP'\n" +
1:5e33d79:         "and schemaname != 'NULLID'\n" +
1:5e33d79:         "and schemaname != 'SQLJ'\n" +
1:5e33d79:         "order by schemaname\n";
1:5e33d79:     private static  final   String      LIST_USER_TABLES =
1:5e33d79:         "select tablename from sys.systables\n" +
1:5e33d79:         "where tablename not like 'SYS%'\n" +
1:5e33d79:         "order by tablename\n";
1:5e33d79:     private static  final   String[][]  NO_ROWS = {};
1:5e33d79:     private static  final   String[][]  EXPECTED_SCHEMAS =
1:5e33d79:     {
1:5e33d79:         { "CONTROL11" },
1:5e33d79:         { "RAW11_APP" },
1:5e33d79:         { "RAW11_SCHEMA1" },
1:5e33d79:         { "RAW11_SCHEMA2" },
1:5e33d79:     };
1:5e33d79:     private static  final   String[][]  EXPECTED_TABLES =
1:5e33d79:     {
1:5e33d79:         { "T1" },
1:5e33d79:         { "T1" },
1:5e33d79:         { "T2" },
1:5e33d79:         { "T2" },
1:5e33d79:     };
1:5e33d79: 
1:5e33d79:         
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4:     //
1:28c4dc4:     // STATE
1:28c4dc4:     //
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4: 
1:28c4dc4:     // location of corrupt database
1:28c4dc4:     private File    _dbDir;
1:28c4dc4: 
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4:     //
1:28c4dc4:     // CONSTRUCTOR
1:28c4dc4:     //
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4: 
1:28c4dc4:     /**
1:28c4dc4:      * Create a new instance.
1:28c4dc4:      */
1:28c4dc4: 
1:28c4dc4:     public RawDBReaderTest( String name )
1:28c4dc4:     {
1:28c4dc4:         super( name );
3:28c4dc4:     }
1:28c4dc4: 
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4:     //
1:28c4dc4:     // JUnit BEHAVIOR
1:28c4dc4:     //
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4: 
1:28c4dc4: 
1:28c4dc4:     /**
1:28c4dc4:      * Construct top level suite in this JUnit test
1:28c4dc4:      */
1:28c4dc4:     public static Test suite()
1:28c4dc4:     {
1:5a3453d:         Test baseTest = TestConfiguration.embeddedSuite(RawDBReaderTest.class);
1:28c4dc4: 
1:28c4dc4:         // We don't expect that users of this tool will run with a security
1:28c4dc4:         // manager. The tool is run standalone behind a firewall.
1:28c4dc4:         Test        wideOpenTest = SecurityManagerSetup.noSecurityManager( baseTest );
1:28c4dc4: 
1:28c4dc4:         // don't teardown the corrupt database. instead, just delete it in our
1:28c4dc4:         // own tearDown() method. this is to prevent the corrupt database from
1:28c4dc4:         // interfering with later tests which want to use a database with sql
1:28c4dc4:         // authorization turned on.
1:28c4dc4:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthenticationNoTeardown
1:28c4dc4:             ( wideOpenTest, LEGAL_USERS, "RRT" );
1:28c4dc4:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1:28c4dc4:         Test        encryptedTest = Decorator.encryptedDatabaseBpw
1:28c4dc4:             (
1:28c4dc4:               authorizedTest,
1:28c4dc4:               "DES/CBC/NoPadding",
1:28c4dc4:               BOOT_PASSWORD
1:28c4dc4:              );
1:28c4dc4:         Test        supportFilesTest = new SupportFilesSetup( encryptedTest );
1:28c4dc4: 
1:28c4dc4:         return supportFilesTest;
1:28c4dc4:     }
1:28c4dc4: 
1:28c4dc4:     protected void tearDown() throws Exception
1:28c4dc4:     {
1:28c4dc4:         super.tearDown();
1:5eb3cdf: 
1:28c4dc4:         if ( _dbDir != null )
1:28c4dc4:         {
1:28c4dc4:             // delete the corrupt database so that later tests,
1:28c4dc4:             // which require sql authorization, won't bomb because
1:28c4dc4:             // they can't open the encrypted database
1:5eb3cdf:             assertDirectoryDeleted(_dbDir);
1:28c4dc4:             _dbDir = null;
1:28c4dc4:         }
1:28c4dc4:     }
1:28c4dc4:     
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4:     //
1:28c4dc4:     // TESTS
1:28c4dc4:     //
1:28c4dc4:     ///////////////////////////////////////////////////////////////////////////////////
1:28c4dc4: 
1:28c4dc4:     /**
1:28c4dc4:      * <p>
1:28c4dc4:      * Test the 
1:28c4dc4:      * </p>
1:28c4dc4:      */
1:28c4dc4:     public  void    test_001_rawDBReader()
1:28c4dc4:         throws Exception
1:28c4dc4:     {
1:28c4dc4:         // create and populate the corrupt database
1:28c4dc4:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:28c4dc4:         populateCorruptDB( dboConnection );
1:28c4dc4: 
1:28c4dc4:         TestConfiguration   tc = getTestConfiguration();
1:28c4dc4: 
1:28c4dc4:         // shutdown the database
1:28c4dc4:         tc.shutdownDatabase();
1:28c4dc4:         
1:28c4dc4:         String  dbName = tc.getDefaultDatabaseName();
1:28c4dc4:         File    systemDir = new File( "system" );
1:28c4dc4:         _dbDir = new File( systemDir, dbName );
1:28c4dc4:         String  databaseName = _dbDir.getPath();
1:28c4dc4: 
1:28c4dc4:         Connection  newDBConn = DriverManager.getConnection( MEMORY_DB + ";create=true" );
1:28c4dc4: 
1:5e33d79:         // verify that the tool hasn't created any schema objects
1:5e33d79:         vetUnloaded( newDBConn );
1:5e33d79:         
1:28c4dc4:         // load the tool to recover the corrupt database
1:28c4dc4:         String      dboPassword = tc.getPassword( TEST_DBO );
1:28c4dc4:         goodStatement
1:28c4dc4:             (
1:28c4dc4:              newDBConn,
1:28c4dc4:              "call syscs_util.syscs_register_tool\n" +
1:28c4dc4:              "(\n" +
1:28c4dc4:              "  'rawDBReader',\n" +
1:28c4dc4:              "  true,\n" +
1:28c4dc4:              "  '" + RECOVERY_SCRIPT + "',\n" +
1:28c4dc4:              "  'CONTROL11',\n" +
1:28c4dc4:              "  'RAW11_',\n" +
1:28c4dc4:              "  '" + databaseName + "',\n" +
1:28c4dc4:              "  'bootPassword=" + BOOT_PASSWORD + "',\n" +
1:28c4dc4:              "  '" + TEST_DBO + "',\n" +
1:28c4dc4:              "  '" + dboPassword + "'\n" +
1:28c4dc4:              ")\n"
1:28c4dc4:              );
1:28c4dc4: 
1:5e33d79:         // verify that the expected schema objects have been created
1:5e33d79:         vetLoaded( newDBConn );
1:5e33d79: 
1:28c4dc4:         runRecoveryScript( newDBConn );
1:28c4dc4: 
1:28c4dc4:         // now verify that we siphoned the data out of the corrupt database
1:28c4dc4:         vetSiphoning( newDBConn );
1:28c4dc4: 
1:5e33d79:         // drop the tables holding the data we siphoned out of the corrupt database
1:5e33d79:         dropSiphonedData( newDBConn );
1:5e33d79:         // unload the tool
1:5e33d79:         goodStatement
1:5e33d79:             (
1:5e33d79:              newDBConn,
1:5e33d79:              "call syscs_util.syscs_register_tool\n" +
1:5e33d79:              "(\n" +
1:5e33d79:              "  'rawDBReader',\n" +
1:5e33d79:              "  false,\n" +
1:5e33d79:              "  'CONTROL11',\n" +
1:5e33d79:              "  'RAW11_'\n" +
1:5e33d79:              ")\n"
1:5e33d79:              );
1:5e33d79:         vetUnloaded( newDBConn );
1:5e33d79: 
1:28c4dc4:         shutdownInMemoryDB();
1:28c4dc4:     }
1:28c4dc4: 
1:28c4dc4:     private  void    populateCorruptDB( Connection dboConnection )
1:28c4dc4:         throws Exception
1:28c4dc4:     {
1:28c4dc4:         goodStatement( dboConnection, "create schema schema1" );
1:28c4dc4:         goodStatement( dboConnection, "create schema schema2" );
1:28c4dc4: 
1:28c4dc4:         goodStatement( dboConnection, "create table schema1.t1( id int, tag varchar( 20 ) )" );
1:28c4dc4:         goodStatement
1:28c4dc4:             ( dboConnection,
1:28c4dc4:               "insert into schema1.t1 values ( 1, 'schema1.t1:1' ), ( 2, 'schema1.t1:2' )" );
1:28c4dc4: 
1:28c4dc4:         goodStatement( dboConnection, "create table schema1.t2( id int, tag varchar( 20 ) )" );
1:28c4dc4:         goodStatement
1:28c4dc4:             ( dboConnection,
1:28c4dc4:               "insert into schema1.t2 values ( 1, 'schema1.t2:1' ), ( 2, 'schema1.t2:2' )" );
1:28c4dc4: 
1:28c4dc4:         goodStatement( dboConnection, "create table schema2.t1( id int, tag varchar( 20 ) )" );
1:28c4dc4:         goodStatement
1:28c4dc4:             ( dboConnection,
1:28c4dc4:               "insert into schema2.t1 values ( 1, 'schema2.t1:1' ), ( 2, 'schema2.t1:2' )" );
1:28c4dc4: 
1:28c4dc4:         goodStatement( dboConnection, "create table schema2.t2( id int, tag varchar( 20 ) )" );
1:28c4dc4:         goodStatement
1:28c4dc4:             ( dboConnection,
1:28c4dc4:               "insert into schema2.t2 values ( 1, 'schema2.t2:1' ), ( 2, 'schema2.t2:2' )" );
1:28c4dc4:     }
1:28c4dc4: 
1:28c4dc4:     private void  shutdownInMemoryDB() throws Exception
1:28c4dc4:     {
1:28c4dc4:         // shutdown and delete the in-memory db
1:28c4dc4:         try {
1:28c4dc4:             DriverManager.getConnection( MEMORY_DB + ";shutdown=true" );
1:28c4dc4:         } catch (SQLException se)
1:28c4dc4:         {
1:28c4dc4:             assertSQLState( "08006", se );
1:28c4dc4:         }
1:28c4dc4:         try {
1:28c4dc4:             DriverManager.getConnection( MEMORY_DB + ";drop=true" );
1:28c4dc4:         } catch (SQLException se)
1:28c4dc4:         {
1:28c4dc4:             assertSQLState( "08006", se );
1:28c4dc4:         }
1:28c4dc4:     }
1:28c4dc4: 
1:28c4dc4:     private void    runRecoveryScript( Connection conn ) throws Exception
1:28c4dc4:     {
1:3602a8c:         try (BufferedReader reader =
1:3602a8c:                 new BufferedReader(new FileReader(RECOVERY_SCRIPT)))
1:28c4dc4:         {
1:3602a8c:             while ( true )
1:3602a8c:             {
1:3602a8c:                 String  line = reader.readLine();
1:3602a8c:                 if ( line == null ) { break; }
1:28c4dc4: 
1:3602a8c:                 // skip the initial connection statement
1:3602a8c:                 // as well as comments and blank lines
1:3602a8c:                 if ( line.length() == 0 ) { continue; }
1:3602a8c:                 if ( line.startsWith( "connect" ) ) { continue; }
1:3602a8c:                 if ( line.startsWith( "--" ) ) { continue; }
1:28c4dc4: 
1:3602a8c:                 // strip off the trailing semi-colon
1:3602a8c:                 line = line.substring( 0, line.indexOf( ';' ) );
1:28c4dc4: 
1:3602a8c:                 goodStatement( conn, line );
1:3602a8c:             }
1:28c4dc4:         }
1:28c4dc4:     }
1:28c4dc4: 
1:28c4dc4:     private void    vetSiphoning( Connection conn ) throws Exception
1:28c4dc4:     {
1:28c4dc4:         assertResults
1:28c4dc4:             (
1:28c4dc4:              conn,
1:28c4dc4:              "select * from schema1.t1 order by id",
1:28c4dc4:              new String[][]
1:28c4dc4:              {
1:28c4dc4:                  { "1", "schema1.t1:1" },
1:28c4dc4:                  { "2", "schema1.t1:2" },
1:28c4dc4:              },
1:28c4dc4:              false
1:28c4dc4:              );
1:28c4dc4:         assertResults
1:28c4dc4:             (
1:28c4dc4:              conn,
1:28c4dc4:              "select * from schema1.t2 order by id",
1:28c4dc4:              new String[][]
1:28c4dc4:              {
1:28c4dc4:                  { "1", "schema1.t2:1" },
1:28c4dc4:                  { "2", "schema1.t2:2" },
1:28c4dc4:              },
1:28c4dc4:              false
1:28c4dc4:              );
1:28c4dc4:         assertResults
1:28c4dc4:             (
1:28c4dc4:              conn,
1:28c4dc4:              "select * from schema2.t1 order by id",
1:28c4dc4:              new String[][]
1:28c4dc4:              {
1:28c4dc4:                  { "1", "schema2.t1:1" },
1:28c4dc4:                  { "2", "schema2.t1:2" },
1:28c4dc4:              },
1:28c4dc4:              false
1:28c4dc4:              );
1:28c4dc4:         assertResults
1:28c4dc4:             (
1:28c4dc4:              conn,
1:28c4dc4:              "select * from schema2.t2 order by id",
1:28c4dc4:              new String[][]
1:28c4dc4:              {
1:28c4dc4:                  { "1", "schema2.t2:1" },
1:28c4dc4:                  { "2", "schema2.t2:2" },
1:28c4dc4:              },
1:28c4dc4:              false
1:28c4dc4:              );
1:28c4dc4:     }
1:5e33d79: 
1:5e33d79:     private void    vetUnloaded( Connection conn ) throws Exception
1:5e33d79:     {
1:5e33d79:         assertResults( conn, LIST_USER_SCHEMAS, NO_ROWS, false );
1:5e33d79:         assertResults( conn, LIST_USER_TABLES, NO_ROWS, false );
1:5e33d79:     }
1:5e33d79:     
1:5e33d79:     private void    vetLoaded( Connection conn ) throws Exception
1:5e33d79:     {
1:5e33d79:         assertResults( conn, LIST_USER_SCHEMAS, EXPECTED_SCHEMAS, false );
1:5e33d79:         assertResults( conn, LIST_USER_TABLES, EXPECTED_TABLES, false );
1:5e33d79:     }
1:5e33d79: 
1:5e33d79:     private void    dropSiphonedData( Connection conn ) throws Exception
1:5e33d79:     {
1:5e33d79:         goodStatement( conn, "drop table schema1.t1" );
1:5e33d79:         goodStatement( conn, "drop table schema1.t2" );
1:5e33d79:         goodStatement( conn, "drop table schema2.t1" );
1:5e33d79:         goodStatement( conn, "drop table schema2.t2" );
1:5e33d79:         goodStatement( conn, "drop schema schema1 restrict" );
1:5e33d79:         goodStatement( conn, "drop schema schema2 restrict" );
1:5e33d79:     }
1:28c4dc4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5a3453d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Test baseTest = TestConfiguration.embeddedSuite(RawDBReaderTest.class);
commit:5eb3cdf
/////////////////////////////////////////////////////////////////////////
1: 
1:             assertDirectoryDeleted(_dbDir);
/////////////////////////////////////////////////////////////////////////
commit:3602a8c
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
/////////////////////////////////////////////////////////////////////////
1:         try (BufferedReader reader =
1:                 new BufferedReader(new FileReader(RECOVERY_SCRIPT)))
1:             while ( true )
1:             {
1:                 String  line = reader.readLine();
1:                 if ( line == null ) { break; }
1:                 // skip the initial connection statement
1:                 // as well as comments and blank lines
1:                 if ( line.length() == 0 ) { continue; }
1:                 if ( line.startsWith( "connect" ) ) { continue; }
1:                 if ( line.startsWith( "--" ) ) { continue; }
1:                 // strip off the trailing semi-colon
1:                 line = line.substring( 0, line.indexOf( ';' ) );
1:                 goodStatement( conn, line );
1:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5e33d79
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      LIST_USER_SCHEMAS =
1:         "select schemaname from sys.sysschemas\n" +
1:         "where schemaname not like 'SYS%'\n" +
1:         "and schemaname != 'APP'\n" +
1:         "and schemaname != 'NULLID'\n" +
1:         "and schemaname != 'SQLJ'\n" +
1:         "order by schemaname\n";
1:     private static  final   String      LIST_USER_TABLES =
1:         "select tablename from sys.systables\n" +
1:         "where tablename not like 'SYS%'\n" +
1:         "order by tablename\n";
1:     private static  final   String[][]  NO_ROWS = {};
1:     private static  final   String[][]  EXPECTED_SCHEMAS =
1:     {
1:         { "CONTROL11" },
1:         { "RAW11_APP" },
1:         { "RAW11_SCHEMA1" },
1:         { "RAW11_SCHEMA2" },
1:     };
1:     private static  final   String[][]  EXPECTED_TABLES =
1:     {
1:         { "T1" },
1:         { "T1" },
1:         { "T2" },
1:         { "T2" },
1:     };
1: 
1:         
/////////////////////////////////////////////////////////////////////////
1:         // verify that the tool hasn't created any schema objects
1:         vetUnloaded( newDBConn );
1:         
/////////////////////////////////////////////////////////////////////////
1:         // verify that the expected schema objects have been created
1:         vetLoaded( newDBConn );
1: 
1:         // drop the tables holding the data we siphoned out of the corrupt database
1:         dropSiphonedData( newDBConn );
1:         // unload the tool
1:         goodStatement
1:             (
1:              newDBConn,
1:              "call syscs_util.syscs_register_tool\n" +
1:              "(\n" +
1:              "  'rawDBReader',\n" +
1:              "  false,\n" +
1:              "  'CONTROL11',\n" +
1:              "  'RAW11_'\n" +
1:              ")\n"
1:              );
1:         vetUnloaded( newDBConn );
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void    vetUnloaded( Connection conn ) throws Exception
1:     {
1:         assertResults( conn, LIST_USER_SCHEMAS, NO_ROWS, false );
1:         assertResults( conn, LIST_USER_TABLES, NO_ROWS, false );
1:     }
1:     
1:     private void    vetLoaded( Connection conn ) throws Exception
1:     {
1:         assertResults( conn, LIST_USER_SCHEMAS, EXPECTED_SCHEMAS, false );
1:         assertResults( conn, LIST_USER_TABLES, EXPECTED_TABLES, false );
1:     }
1: 
1:     private void    dropSiphonedData( Connection conn ) throws Exception
1:     {
1:         goodStatement( conn, "drop table schema1.t1" );
1:         goodStatement( conn, "drop table schema1.t2" );
1:         goodStatement( conn, "drop table schema2.t1" );
1:         goodStatement( conn, "drop table schema2.t2" );
1:         goodStatement( conn, "drop schema schema1 restrict" );
1:         goodStatement( conn, "drop schema schema2 restrict" );
1:     }
commit:28c4dc4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.RawDBReaderTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.io.FileReader;
0: import java.io.LineNumberReader;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import junit.framework.Test;
0: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * <p>
1:  * Test reading of corrupt databases.
1:  * </p>
1:  */
1: public class RawDBReaderTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO  };
1:     private static  final   String      MEMORY_DB = "jdbc:derby:memory:rrt";
1:     private static  final   String      RECOVERY_SCRIPT = "extinout/recovery.sql";
1:     private static  final   String      BOOT_PASSWORD = "fooBarWibble";
0:     private static  final   String      CORRUPT_DATABASE = "rrtCorruptDatabase";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     // location of corrupt database
1:     private File    _dbDir;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public RawDBReaderTest( String name )
1:     {
1:         super( name );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         BaseTestSuite baseTest = (BaseTestSuite)TestConfiguration.embeddedSuite(
0:             RawDBReaderTest.class );
1: 
1:         // We don't expect that users of this tool will run with a security
1:         // manager. The tool is run standalone behind a firewall.
1:         Test        wideOpenTest = SecurityManagerSetup.noSecurityManager( baseTest );
1: 
1:         // don't teardown the corrupt database. instead, just delete it in our
1:         // own tearDown() method. this is to prevent the corrupt database from
1:         // interfering with later tests which want to use a database with sql
1:         // authorization turned on.
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthenticationNoTeardown
1:             ( wideOpenTest, LEGAL_USERS, "RRT" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1:         Test        encryptedTest = Decorator.encryptedDatabaseBpw
1:             (
1:               authorizedTest,
1:               "DES/CBC/NoPadding",
1:               BOOT_PASSWORD
1:              );
1:         Test        supportFilesTest = new SupportFilesSetup( encryptedTest );
1: 
1:         return supportFilesTest;
1:     }
1: 
1:     protected void tearDown() throws Exception
1:     {
1:         super.tearDown();
1:         
1:         if ( _dbDir != null )
1:         {
1:             // delete the corrupt database so that later tests,
1:             // which require sql authorization, won't bomb because
1:             // they can't open the encrypted database
0:             assertTrue( deleteFile( _dbDir ) );
1:             _dbDir = null;
1:         }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test the 
1:      * </p>
1:      */
1:     public  void    test_001_rawDBReader()
1:         throws Exception
1:     {
1:         // create and populate the corrupt database
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         populateCorruptDB( dboConnection );
1: 
1:         TestConfiguration   tc = getTestConfiguration();
1: 
1:         // shutdown the database
1:         tc.shutdownDatabase();
1:         
1:         String  dbName = tc.getDefaultDatabaseName();
1:         File    systemDir = new File( "system" );
1:         _dbDir = new File( systemDir, dbName );
1:         String  databaseName = _dbDir.getPath();
1: 
1:         Connection  newDBConn = DriverManager.getConnection( MEMORY_DB + ";create=true" );
1: 
1:         // load the tool to recover the corrupt database
1:         String      dboPassword = tc.getPassword( TEST_DBO );
1:         goodStatement
1:             (
1:              newDBConn,
1:              "call syscs_util.syscs_register_tool\n" +
1:              "(\n" +
1:              "  'rawDBReader',\n" +
1:              "  true,\n" +
1:              "  '" + RECOVERY_SCRIPT + "',\n" +
1:              "  'CONTROL11',\n" +
1:              "  'RAW11_',\n" +
1:              "  '" + databaseName + "',\n" +
1:              "  'bootPassword=" + BOOT_PASSWORD + "',\n" +
1:              "  '" + TEST_DBO + "',\n" +
1:              "  '" + dboPassword + "'\n" +
1:              ")\n"
1:              );
1: 
1:         runRecoveryScript( newDBConn );
1: 
1:         // now verify that we siphoned the data out of the corrupt database
1:         vetSiphoning( newDBConn );
1: 
1:         shutdownInMemoryDB();
1:     }
1: 
1:     private  void    populateCorruptDB( Connection dboConnection )
1:         throws Exception
1:     {
1:         goodStatement( dboConnection, "create schema schema1" );
1:         goodStatement( dboConnection, "create schema schema2" );
1: 
1:         goodStatement( dboConnection, "create table schema1.t1( id int, tag varchar( 20 ) )" );
1:         goodStatement
1:             ( dboConnection,
1:               "insert into schema1.t1 values ( 1, 'schema1.t1:1' ), ( 2, 'schema1.t1:2' )" );
1: 
1:         goodStatement( dboConnection, "create table schema1.t2( id int, tag varchar( 20 ) )" );
1:         goodStatement
1:             ( dboConnection,
1:               "insert into schema1.t2 values ( 1, 'schema1.t2:1' ), ( 2, 'schema1.t2:2' )" );
1: 
1:         goodStatement( dboConnection, "create table schema2.t1( id int, tag varchar( 20 ) )" );
1:         goodStatement
1:             ( dboConnection,
1:               "insert into schema2.t1 values ( 1, 'schema2.t1:1' ), ( 2, 'schema2.t1:2' )" );
1: 
1:         goodStatement( dboConnection, "create table schema2.t2( id int, tag varchar( 20 ) )" );
1:         goodStatement
1:             ( dboConnection,
1:               "insert into schema2.t2 values ( 1, 'schema2.t2:1' ), ( 2, 'schema2.t2:2' )" );
1:     }
1: 
1:     private void  shutdownInMemoryDB() throws Exception
1:     {
1:         // shutdown and delete the in-memory db
1:         try {
1:             DriverManager.getConnection( MEMORY_DB + ";shutdown=true" );
1:         } catch (SQLException se)
1:         {
1:             assertSQLState( "08006", se );
1:         }
1:         try {
1:             DriverManager.getConnection( MEMORY_DB + ";drop=true" );
1:         } catch (SQLException se)
1:         {
1:             assertSQLState( "08006", se );
1:         }
1:     }
1: 
1:     private void    runRecoveryScript( Connection conn ) throws Exception
1:     {
0:         File                script = new File( RECOVERY_SCRIPT );
0:         LineNumberReader    reader = new LineNumberReader( new FileReader( script ) );
1: 
0:         while ( true )
1:         {
0:             String  line = reader.readLine();
0:             if ( line == null ) { break; }
1: 
0:             // skip the initial connection statement
0:             // as well as comments and blank lines
0:             if ( line.length() == 0 ) { continue; }
0:             if ( line.startsWith( "connect" ) ) { continue; }
0:             if ( line.startsWith( "--" ) ) { continue; }
1: 
0:             // strip off the trailing semi-colon
0:             line = line.substring( 0, line.indexOf( ';' ) );
1: 
0:             goodStatement( conn, line );
1:         }
1:     }
1: 
1:     private void    vetSiphoning( Connection conn ) throws Exception
1:     {
1:         assertResults
1:             (
1:              conn,
1:              "select * from schema1.t1 order by id",
1:              new String[][]
1:              {
1:                  { "1", "schema1.t1:1" },
1:                  { "2", "schema1.t1:2" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "select * from schema1.t2 order by id",
1:              new String[][]
1:              {
1:                  { "1", "schema1.t2:1" },
1:                  { "2", "schema1.t2:2" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "select * from schema2.t1 order by id",
1:              new String[][]
1:              {
1:                  { "1", "schema2.t1:1" },
1:                  { "2", "schema2.t1:2" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "select * from schema2.t2 order by id",
1:              new String[][]
1:              {
1:                  { "1", "schema2.t2:1" },
1:                  { "2", "schema2.t2:2" },
1:              },
1:              false
1:              );
1:     }
1:     
0:     private  boolean deleteFile( File file ) throws Exception
1:     {
0:         boolean retval = true;
1:         
0:         if ( file.isDirectory() )
1:         {
0:             for ( File child : file.listFiles() ) { retval = retval && deleteFile( child ); }
1:         }
1: 
0:         return retval && file.delete();
1:     }
1: 
1: }
============================================================================