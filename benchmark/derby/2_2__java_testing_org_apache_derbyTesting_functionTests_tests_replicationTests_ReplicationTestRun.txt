1:db8dae7: /*
1:db8dae7: 
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun
1:db8dae7: 
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7: 
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7: 
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7: 
1:db8dae7: */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import junit.framework.Test;
1:db8dae7: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:db8dae7: 
1:db8dae7: public class ReplicationTestRun extends BaseJDBCTestCase
1:db8dae7: {
1:db8dae7:     
1:db8dae7:     /** Creates a new instance of ReplicationTestRun */
1:db8dae7:     public ReplicationTestRun(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public static Test suite()
1:db8dae7:         throws Exception
1:db8dae7:     {
1:db8dae7:         System.out.println("*** ReplicationTestRun.suite()");
1:db8dae7:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("ReplicationTestRun");
1:1ae02c9:         System.out.println("*** Done new BaseTestSuite()");
1:db8dae7:         
1:db8dae7:         String masterHostName = System.getProperty("test.serverHost", "localhost");
1:db8dae7:         int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:db8dae7:         
1:db8dae7:         suite.addTest(StandardTests.simpleTest(masterHostName, masterPortNo));
1:db8dae7:         System.out.println("*** Done suite.addTest(StandardTests.simpleTest())");
1:db8dae7:         
1:db8dae7:         suite.addTest(StandardTests.prepareStatementTest(masterHostName, masterPortNo)); 
1:db8dae7:         System.out.println("*** Done suite.addTest(StandardTests.prepareStatementTest())");
1:db8dae7:         
1:db8dae7:         suite.addTest(StandardTests.ansiTrimTest(masterHostName, masterPortNo)); // Something wrong with the instants!
1:db8dae7:         System.out.println("*** Done suite.addTest(StandardTests.ansiTrimTest())");
1:db8dae7:         
1:db8dae7:         suite.addTest(StandardTests.createTableFromQueryTest(masterHostName, masterPortNo));
1:db8dae7:         System.out.println("*** Done suite.addTest(StandardTests.createTableFromQueryTest())");
1:db8dae7:         
1:5d24c78:         /* Need decoration?
1:5d24c78:         suite.addTest(StandardTests.databaseClassLoadingTest(masterHostName, masterPortNo));
1:5d24c78:         System.out.println("*** Done suite.addTest(StandardTests.databaseClassLoadingTest())"); */
1:5d24c78:         
1:5d24c78:         /* Need decoration!
1:5d24c78:         suite.addTest(StandardTests.dynamicLikeOptimizationTest(masterHostName, masterPortNo));
1:5d24c78:         System.out.println("*** Done suite.addTest(StandardTests.dynamicLikeOptimizationTest())"); */
1:5d24c78: 
1:5d24c78:         // suite.addTest(ExistsWithSetOpsTest.suite()); GONE!
1:5d24c78:         
1:5d24c78:         /* Need decoration!
1:5d24c78:         suite.addTest(StandardTests.grantRevokeTest(masterHostName, masterPortNo));
1:5d24c78:         System.out.println("*** Done suite.addTest(StandardTests.grantRevokeTest())"); */
1:5d24c78:         
1:5d24c78:         /* Need decoration!
1:5d24c78:         suite.addTest(StandardTests.groupByExpressionTest(masterHostName, masterPortNo));
1:5d24c78:         System.out.println("*** Done suite.addTest(StandardTests.groupByExpressionTest())"); */
1:5d24c78:       
1:5d24c78:         /* Need decoration?
1:5d24c78:         suite.addTest(StandardTests.langScripts(masterHostName, masterPortNo));
1:5d24c78:         System.out.println("*** Done suite.addTest(StandardTests.langScripts())"); */
1:5d24c78:         
1:db8dae7:         /*
1:db8dae7:         suite.addTest(MathTrigFunctionsTest.suite());
1:db8dae7:         suite.addTest(PrepareExecuteDDL.suite());
1:db8dae7:         suite.addTest(RoutineSecurityTest.suite());
1:db8dae7:         suite.addTest(RoutineTest.suite());
1:db8dae7:         suite.addTest(SQLAuthorizationPropTest.suite());
1:db8dae7:         suite.addTest(StatementPlanCacheTest.suite());
1:db8dae7:         suite.addTest(StreamsTest.suite());
1:db8dae7:         suite.addTest(TimeHandlingTest.suite());
1:db8dae7:         suite.addTest(TriggerTest.suite());
1:db8dae7:         suite.addTest(VTITest.suite());
1:db8dae7:          */
1:db8dae7:         /* 
1:db8dae7:         suite.addTest(org.apache.derbyTesting.functionTests.suites.All.replSuite());
1:db8dae7:          */
1:db8dae7:         
1:db8dae7:         return (Test)suite;
1:db8dae7:     }
1:db8dae7:     
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("ReplicationTestRun");
1:         System.out.println("*** Done new BaseTestSuite()");
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:5d24c78
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         /* Need decoration?
1:         suite.addTest(StandardTests.databaseClassLoadingTest(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.databaseClassLoadingTest())"); */
1:         
1:         /* Need decoration!
1:         suite.addTest(StandardTests.dynamicLikeOptimizationTest(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.dynamicLikeOptimizationTest())"); */
1: 
1:         // suite.addTest(ExistsWithSetOpsTest.suite()); GONE!
1:         
1:         /* Need decoration!
1:         suite.addTest(StandardTests.grantRevokeTest(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.grantRevokeTest())"); */
1:         
1:         /* Need decoration!
1:         suite.addTest(StandardTests.groupByExpressionTest(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.groupByExpressionTest())"); */
1:       
1:         /* Need decoration?
1:         suite.addTest(StandardTests.langScripts(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.langScripts())"); */
1:         
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest;
0: import org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest;
0: import org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest;
0: import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBCClient;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class ReplicationTestRun extends BaseJDBCTestCase
1: {
1:     
1:     /** Creates a new instance of ReplicationTestRun */
1:     public ReplicationTestRun(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:         throws Exception
1:     {
1:         System.out.println("*** ReplicationTestRun.suite()");
1:         
0:         TestSuite suite = new TestSuite("ReplicationTestRun");
0:         System.out.println("*** Done new TestSuite()");
1:         
1:         String masterHostName = System.getProperty("test.serverHost", "localhost");
1:         int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:         
1:         suite.addTest(StandardTests.simpleTest(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.simpleTest())");
1:         
0:         /* PoC: Gives 'Something wrong with the instants!' Seems to be volume related? * /
1:         suite.addTest(StandardTests.prepareStatementTest(masterHostName, masterPortNo)); 
1:         System.out.println("*** Done suite.addTest(StandardTests.prepareStatementTest())");
0:         / * */
1:         
1:         suite.addTest(StandardTests.ansiTrimTest(masterHostName, masterPortNo)); // Something wrong with the instants!
1:         System.out.println("*** Done suite.addTest(StandardTests.ansiTrimTest())");
1:         
1:         suite.addTest(StandardTests.createTableFromQueryTest(masterHostName, masterPortNo));
1:         System.out.println("*** Done suite.addTest(StandardTests.createTableFromQueryTest())");
1:         
1:         /*
0:         suite.addTest(DatabaseClassLoadingTest.suite());
0:         suite.addTest(DynamicLikeOptimizationTest.suite());
0:         suite.addTest(ExistsWithSetOpsTest.suite());
0:         suite.addTest(GrantRevokeTest.suite());
0:         suite.addTest(GroupByExpressionTest.suite());
0: 		suite.addTest(LangScripts.suite());
1:         suite.addTest(MathTrigFunctionsTest.suite());
1:         suite.addTest(PrepareExecuteDDL.suite());
1:         suite.addTest(RoutineSecurityTest.suite());
1:         suite.addTest(RoutineTest.suite());
1:         suite.addTest(SQLAuthorizationPropTest.suite());
1:         suite.addTest(StatementPlanCacheTest.suite());
1:         suite.addTest(StreamsTest.suite());
1:         suite.addTest(TimeHandlingTest.suite());
1:         suite.addTest(TriggerTest.suite());
1:         suite.addTest(VTITest.suite());
1:          */
1:         /* 
1:         suite.addTest(org.apache.derbyTesting.functionTests.suites.All.replSuite());
1:          */
1:         
1:         return (Test)suite;
1:     }
1:     
1: }
============================================================================