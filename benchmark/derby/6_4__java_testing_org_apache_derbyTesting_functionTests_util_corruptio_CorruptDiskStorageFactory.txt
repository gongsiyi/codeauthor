1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptDiskStorageFactory
1:aaea357: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.util.corruptio;
1:aaea357: import org.apache.derby.io.WritableStorageFactory;
1:aaea357: import org.apache.derby.io.StorageFactory;
1:aaea357: import org.apache.derby.iapi.services.info.JVMInfo;
1:aaea357: 
1:aaea357: /**
1:aaea357:  * This class provides proxy implementation of the StorageFactory
1:aaea357:  * interface for testing. 
1:aaea357:  *
1:aaea357:  * Storage Factory is used by the database engine to access 
1:aaea357:  * persistent data and transaction logs. By default all the method calls
1:aaea357:  * delegate the work to the real disk storage factory
1:aaea357:  * (org.apache.derby.impl.io.DirStorageFactory)
1:aaea357:  * based on the classes in the java.io packgs. In some cases this  factory
1:aaea357:  * instruments some methods to corrupt the io to simulate disk corruptions for
1:aaea357:  * testing. For example to simulate out of order partial writes to disk before
1:aaea357:  * the crash. 
1:aaea357:  * 
1:aaea357:  * Derby by default uses the storage factory implementation in 
1:aaea357:  * DirStorageFactory/DirStorageFactory4 when a database is accessed with 
1:aaea357:  * "jdbc:derby:<databaseName>". This factory can be specified instead using 
1:aaea357:  * derby.subSubProtocol.<sub protocol name>  For example:
1:aaea357:  *
1:aaea357:  *  derby.subSubProtocol.csf=org.apache.derbyTesting.functionTests.
1:aaea357:  *             util.corruptio.CorruptDiskStorageFactory
1:aaea357:  *  database need to be accessed by specifying the subporotocol name like
1:aaea357:  *  'jdbc:derby:csf:wombat'.
1:aaea357:  *
1:aaea357:  * Interaction between the tests that requires instrumenting the i/o and 
1:aaea357:  * this factory is through the flags in CorruptibleIo class. Tests should not 
1:aaea357:  * call the methods in this factory directly. Database engine invokes the 
1:aaea357:  * methods in this factory, so they can instrumented to do whatever is 
1:aaea357:  * required for testing.
1:aaea357:  * 
1:aaea357:  * @version 1.0
1:aaea357:  * @see CorruptibleIo
1:aaea357:  * @see WritableStorageFactory
1:aaea357:  * @see StorageFactory
1:aaea357:  * 
1:aaea357:  */
1:aaea357: 
1:aaea357: public class CorruptDiskStorageFactory extends CorruptBaseStorageFactory
3:aaea357: {
1:aaea357: 	/*
1:aaea357: 	 * returns the real storage factory to which all the call should be 
1:aaea357: 	 * delegated from the proxy methods.  
1:aaea357: 	 */
1:aaea357: 	WritableStorageFactory getRealStorageFactory()
1:aaea357: 	{
1:4e1ac79: 		String dirStorageFactoryClass =
1:38c638d:                 "org.apache.derby.impl.io.DirStorageFactory";
1:aaea357: 		
1:aaea357: 		WritableStorageFactory storageFactory = null;
1:aaea357: 		try{
1:4469400: 			Class<?> storageFactoryClass = Class.forName(dirStorageFactoryClass);
1:aaea357: 			storageFactory = 
1:4469400:                 (WritableStorageFactory) storageFactoryClass.getConstructor().newInstance();
1:aaea357: 		}catch(Exception e)
1:aaea357: 		{
1:aaea357: 			System.out.println(
1:aaea357:                 "Failed to instantiate the disk storeage classes");
1:aaea357: 			e.printStackTrace();
3:aaea357: 		}
1:aaea357: 		
1:aaea357: 		return  storageFactory;
1:aaea357: 	}
1:aaea357: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: 			Class<?> storageFactoryClass = Class.forName(dirStorageFactoryClass);
1:                 (WritableStorageFactory) storageFactoryClass.getConstructor().newInstance();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:38c638d
/////////////////////////////////////////////////////////////////////////
1:                 "org.apache.derby.impl.io.DirStorageFactory";
commit:4e1ac79
/////////////////////////////////////////////////////////////////////////
1: 		String dirStorageFactoryClass =
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptDiskStorageFactory
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.corruptio;
1: import org.apache.derby.io.WritableStorageFactory;
1: import org.apache.derby.io.StorageFactory;
1: import org.apache.derby.iapi.services.info.JVMInfo;
1: 
1: /**
1:  * This class provides proxy implementation of the StorageFactory
1:  * interface for testing. 
1:  *
1:  * Storage Factory is used by the database engine to access 
1:  * persistent data and transaction logs. By default all the method calls
1:  * delegate the work to the real disk storage factory
1:  * (org.apache.derby.impl.io.DirStorageFactory)
1:  * based on the classes in the java.io packgs. In some cases this  factory
1:  * instruments some methods to corrupt the io to simulate disk corruptions for
1:  * testing. For example to simulate out of order partial writes to disk before
1:  * the crash. 
1:  * 
1:  * Derby by default uses the storage factory implementation in 
1:  * DirStorageFactory/DirStorageFactory4 when a database is accessed with 
1:  * "jdbc:derby:<databaseName>". This factory can be specified instead using 
1:  * derby.subSubProtocol.<sub protocol name>  For example:
1:  *
1:  *  derby.subSubProtocol.csf=org.apache.derbyTesting.functionTests.
1:  *             util.corruptio.CorruptDiskStorageFactory
1:  *  database need to be accessed by specifying the subporotocol name like
1:  *  'jdbc:derby:csf:wombat'.
1:  *
1:  * Interaction between the tests that requires instrumenting the i/o and 
1:  * this factory is through the flags in CorruptibleIo class. Tests should not 
1:  * call the methods in this factory directly. Database engine invokes the 
1:  * methods in this factory, so they can instrumented to do whatever is 
1:  * required for testing.
1:  * 
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  * @see CorruptibleIo
1:  * @see WritableStorageFactory
1:  * @see StorageFactory
1:  * 
1:  */
1: 
1: public class CorruptDiskStorageFactory extends CorruptBaseStorageFactory
1: {
1: 	/*
1: 	 * returns the real storage factory to which all the call should be 
1: 	 * delegated from the proxy methods.  
1: 	 */
1: 	WritableStorageFactory getRealStorageFactory()
1: 	{
0: 		String dirStorageFactoryClass;
0: 		if( JVMInfo.JDK_ID >= JVMInfo.J2SE_14)
1:         {
0:             dirStorageFactoryClass = 
0:                 "org.apache.derby.impl.io.DirStorageFactory4";
1:         }
0:         else
1:         {
0:             dirStorageFactoryClass = 
0:                 "org.apache.derby.impl.io.DirStorageFactory";
1:         }
1: 		
1: 		WritableStorageFactory storageFactory = null;
1: 		try{
0: 			Class storageFactoryClass = Class.forName(dirStorageFactoryClass);
1: 			storageFactory = 
0:                 (WritableStorageFactory) storageFactoryClass.newInstance();
1: 		}catch(Exception e)
1: 		{
1: 			System.out.println(
1:                 "Failed to instantiate the disk storeage classes");
1: 			e.printStackTrace();
1: 		}
1: 		
1: 		return  storageFactory;
1: 	}
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3755119
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptDiskStorageFactory
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.util.corruptio;
0: import org.apache.derby.io.WritableStorageFactory;
0: import org.apache.derby.io.StorageFactory;
0: import org.apache.derby.iapi.services.info.JVMInfo;
0: 
0: /**
0:  * This class provides proxy implementation of the StorageFactory
0:  * interface for testing. 
0:  *
0:  * Storage Factory is used by the database engine to access 
0:  * persistent data and transaction logs. By default all the method calls
0:  * delegate the work to the real disk storage factory
0:  * (org.apache.derby.impl.io.DirStorageFactory)
0:  * based on the classes in the java.io packgs. In some cases this  factory
0:  * instruments some methods to corrupt the io to simulate disk corruptions for
0:  * testing. For example to simulate out of order partial writes to disk before
0:  * the crash. 
0:  * 
0:  * Derby by default uses the storage factory implementation in 
0:  * DirStorageFactory/DirStorageFactory4 when a database is accessed with 
0:  * "jdbc:derby:<databaseName>". This factory can be specified instead using 
0:  * derby.subSubProtocol.<sub protocol name>  For example:
0:  *
0:  *  derby.subSubProtocol.csf=org.apache.derbyTesting.functionTests.
0:  *             util.corruptio.CorruptDiskStorageFactory
0:  *  database need to be accessed by specifying the subporotocol name like
0:  *  'jdbc:derby:csf:wombat'.
0:  *
0:  * Interaction between the tests that requires instrumenting the i/o and 
0:  * this factory is through the flags in CorruptibleIo class. Tests should not 
0:  * call the methods in this factory directly. Database engine invokes the 
0:  * methods in this factory, so they can instrumented to do whatever is 
0:  * required for testing.
0:  * 
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  * @see CorruptibleIo
0:  * @see WritableStorageFactory
0:  * @see StorageFactory
0:  * 
0:  */
0: 
0: public class CorruptDiskStorageFactory extends CorruptBaseStorageFactory
0: {
0: 	/*
0: 	 * returns the real storage factory to which all the call should be 
0: 	 * delegated from the proxy methods.  
0: 	 */
0: 	WritableStorageFactory getRealStorageFactory()
0: 	{
0: 		String dirStorageFactoryClass;
0: 		if( JVMInfo.JDK_ID >= JVMInfo.J2SE_14)
0:         {
0:             dirStorageFactoryClass = 
0:                 "org.apache.derby.impl.io.DirStorageFactory4";
0:         }
0:         else
0:         {
0:             dirStorageFactoryClass = 
0:                 "org.apache.derby.impl.io.DirStorageFactory";
0:         }
0: 		
0: 		WritableStorageFactory storageFactory = null;
0: 		try{
0: 			Class storageFactoryClass = Class.forName(dirStorageFactoryClass);
0: 			storageFactory = 
0:                 (WritableStorageFactory) storageFactoryClass.newInstance();
0: 		}catch(Exception e)
0: 		{
0: 			System.out.println(
0:                 "Failed to instantiate the disk storeage classes");
0: 			e.printStackTrace();
0: 		}
0: 		
0: 		return  storageFactory;
0: 	}
0: }
============================================================================