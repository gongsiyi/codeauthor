1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecIndexRow
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is an extension of ExecRow for use
1:eac0369:  * with indexes and sorting.
2:eac0369:  *
1:eac0369:  */
1:76addbc: public interface ExecIndexRow extends ExecRow  {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * These two methods are a sort of a hack.  The store implements ordered
1:eac0369: 	 * null semantics for start and stop positioning, which is correct for
1:eac0369: 	 * IS NULL and incorrect for everything else.  To work around this,
1:eac0369: 	 * TableScanResultSet will check whether the start and stop positions
1:eac0369: 	 * have NULL in any column position other than for an IS NULL check.
1:eac0369: 	 * If so, it won't do the scan (that is, it will return no rows).
1:eac0369: 	 *
1:eac0369: 	 * This method is to inform this ExecIndexRow (which can be used for
1:eac0369: 	 * start and stop positioning) that the given column uses ordered null
1:eac0369: 	 * semantics.
1:eac0369: 	 *
1:eac0369: 	 * @param columnPosition	The position of the column that uses ordered
1:eac0369: 	 *							null semantics (zero-based).
1:eac0369: 	 */
1:eac0369: 	void orderedNulls(int columnPosition);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return true if orderedNulls was called on this ExecIndexRow for
1:eac0369: 	 * the given column position.
1:eac0369: 	 *
1:eac0369: 	 * @param columnPosition	The position of the column (zero-based) for
1:eac0369: 	 *							which we want to check if ordered null semantics
1:eac0369: 	 *							are used.
1:eac0369: 	 *
1:eac0369: 	 * @return	true if we are to use ordered null semantics on the given column
1:eac0369: 	 */
1:eac0369: 	boolean areNullsOrdered(int columnPosition);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Turn the ExecRow into an ExecIndexRow.
1:eac0369: 	 */
1:eac0369: 	public void execRowToExecIndexRow(ExecRow valueRow);
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecIndexRow
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface ExecIndexRow extends ExecRow  {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: /**
1:  * This is an extension of ExecRow for use
1:  * with indexes and sorting.
1:  *
0:  * @author jeff after ames
1:  */
0: public interface ExecIndexRow extends ExecRow  { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * These two methods are a sort of a hack.  The store implements ordered
1: 	 * null semantics for start and stop positioning, which is correct for
1: 	 * IS NULL and incorrect for everything else.  To work around this,
1: 	 * TableScanResultSet will check whether the start and stop positions
1: 	 * have NULL in any column position other than for an IS NULL check.
1: 	 * If so, it won't do the scan (that is, it will return no rows).
1: 	 *
1: 	 * This method is to inform this ExecIndexRow (which can be used for
1: 	 * start and stop positioning) that the given column uses ordered null
1: 	 * semantics.
1: 	 *
1: 	 * @param columnPosition	The position of the column that uses ordered
1: 	 *							null semantics (zero-based).
1: 	 */
1: 	void orderedNulls(int columnPosition);
1: 
1: 	/**
1: 	 * Return true if orderedNulls was called on this ExecIndexRow for
1: 	 * the given column position.
1: 	 *
1: 	 * @param columnPosition	The position of the column (zero-based) for
1: 	 *							which we want to check if ordered null semantics
1: 	 *							are used.
1: 	 *
1: 	 * @return	true if we are to use ordered null semantics on the given column
1: 	 */
1: 	boolean areNullsOrdered(int columnPosition);
1: 
1: 	/**
1: 	 * Turn the ExecRow into an ExecIndexRow.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void execRowToExecIndexRow(ExecRow valueRow);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: /**
0:  * This is an extension of ExecRow for use
0:  * with indexes and sorting.
0:  *
0:  * @author jeff after ames
0:  */
0: public interface ExecIndexRow extends ExecRow  { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * These two methods are a sort of a hack.  The store implements ordered
0: 	 * null semantics for start and stop positioning, which is correct for
0: 	 * IS NULL and incorrect for everything else.  To work around this,
0: 	 * TableScanResultSet will check whether the start and stop positions
0: 	 * have NULL in any column position other than for an IS NULL check.
0: 	 * If so, it won't do the scan (that is, it will return no rows).
0: 	 *
0: 	 * This method is to inform this ExecIndexRow (which can be used for
0: 	 * start and stop positioning) that the given column uses ordered null
0: 	 * semantics.
0: 	 *
0: 	 * @param columnPosition	The position of the column that uses ordered
0: 	 *							null semantics (zero-based).
0: 	 */
0: 	void orderedNulls(int columnPosition);
0: 
0: 	/**
0: 	 * Return true if orderedNulls was called on this ExecIndexRow for
0: 	 * the given column position.
0: 	 *
0: 	 * @param columnPosition	The position of the column (zero-based) for
0: 	 *							which we want to check if ordered null semantics
0: 	 *							are used.
0: 	 *
0: 	 * @return	true if we are to use ordered null semantics on the given column
0: 	 */
0: 	boolean areNullsOrdered(int columnPosition);
0: 
0: 	/**
0: 	 * Turn the ExecRow into an ExecIndexRow.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void execRowToExecIndexRow(ExecRow valueRow);
0: }
============================================================================