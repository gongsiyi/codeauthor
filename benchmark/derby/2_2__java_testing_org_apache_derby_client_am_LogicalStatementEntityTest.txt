1:1beab6c: /*
2:1beab6c: 
1:1beab6c:    Derby - Class org.apache.derby.client.am.LogicalStatementEntityTest
1:1beab6c: 
1:1beab6c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1beab6c:    contributor license agreements.  See the NOTICE file distributed with
1:1beab6c:    this work for additional information regarding copyright ownership.
1:1beab6c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1beab6c:    (the "License"); you may not use this file except in compliance with
1:1beab6c:    the License.  You may obtain a copy of the License at
1:1beab6c: 
1:1beab6c:       http://www.apache.org/licenses/LICENSE-2.0
1:1beab6c: 
1:1beab6c:    Unless required by applicable law or agreed to in writing, software
1:1beab6c:    distributed under the License is distributed on an "AS IS" BASIS,
1:1beab6c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1beab6c:    See the License for the specific language governing permissions and
1:1beab6c:    limitations under the License.
1:1beab6c: 
2:1beab6c:  */
1:1beab6c: package org.apache.derby.client.am;
1:1beab6c: 
1:1beab6c: import java.sql.SQLException;
1:1beab6c: 
1:1beab6c: import junit.framework.Test;
1:1beab6c: 
1:1beab6c: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKey;
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKeyFactory;
1:1beab6c: 
1:1beab6c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1beab6c: import org.apache.derbyTesting.junit.JDBC;
1:1beab6c: import org.apache.derbyTesting.junit.TestConfiguration;
1:1beab6c: 
2:1beab6c: /**
1:d6cf884:  * Tests for the handling of logical statements.
1:1beab6c:  */
1:1beab6c: public class LogicalStatementEntityTest
1:1beab6c:     extends BaseJDBCTestCase {
1:1beab6c: 
1:1beab6c:     public LogicalStatementEntityTest(String name) {
1:1beab6c:         super(name);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Verifies that the logical statement representing a prepared statement
1:1beab6c:      * behaves correctly when it has been closed.
2:1beab6c:      *
1:1beab6c:      * @throws SQLException if a JDBC operation fails
1:1beab6c:      */
1:1beab6c:     public void testCloseBehaviorExternalPs()
1:1beab6c:             throws SQLException {
1:1beab6c:         final String sql = "values 7";
1:1beab6c:         java.sql.PreparedStatement ps = prepareStatement(sql);
1:1beab6c:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:d6cf884:         insertStatementIntoCache(cache, ps, sql);
1:1beab6c:         LogicalStatementEntity logic =
1:d6cf884:                 createLogicalStatementEntity(sql, false, cache);
1:1beab6c:         assertSame(ps, logic.getPhysPs());
1:1beab6c:         assertFalse(logic.isLogicalEntityClosed());
1:1beab6c:         logic.close();
1:1beab6c:         assertTrue(logic.isLogicalEntityClosed());
1:1beab6c:         logic.close();
1:1beab6c:         logic.close();
1:1beab6c:         assertTrue(logic.isLogicalEntityClosed());
1:1beab6c:         try {
1:1beab6c:             logic.getPhysPs();
1:1beab6c:             fail("Should have thrown exception");
1:1beab6c:         } catch (SQLException sqle) {
1:1beab6c:             assertSQLState("XJ012", sqle);
1:1beab6c:         }
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Verifies that the logical statement representing a callable statement
1:1beab6c:      * behaves correctly when it has been closed.
1:1beab6c:      *
1:1beab6c:      * @throws SQLException if a JDBC operation fails
1:1beab6c:      */
1:1beab6c:     public void testCloseBehaviorExternalCs()
1:1beab6c:             throws SQLException {
1:1beab6c:         final String sql = "values 3";
1:1beab6c:         java.sql.CallableStatement cs = prepareCall(sql);
1:1beab6c:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:d6cf884:         insertStatementIntoCache(cache, cs, sql);
1:1beab6c:         LogicalStatementEntity logic =
1:d6cf884:                 createLogicalStatementEntity(sql, true, cache);
1:1beab6c:         assertSame(cs, logic.getPhysCs());
1:1beab6c:         assertFalse(logic.isLogicalEntityClosed());
1:1beab6c:         logic.close();
1:1beab6c:         assertTrue(logic.isLogicalEntityClosed());
1:1beab6c:         logic.close();
1:1beab6c:         logic.close();
1:1beab6c:         assertTrue(logic.isLogicalEntityClosed());
1:1beab6c:         try {
1:1beab6c:             logic.getPhysCs();
1:1beab6c:             fail("Should have thrown exception");
1:1beab6c:         } catch (SQLException sqle) {
1:1beab6c:             assertSQLState("XJ012", sqle);
1:1beab6c:         }
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Tests that a statement equal to one in the cache is not cached when
1:1beab6c:      * closing the logical statement, and that the physical statement is closed.
1:1beab6c:      *
1:1beab6c:      * @throws SQLException if a JDBC operation fails
1:1beab6c:      */
1:1beab6c:     public void testCloseOnDuplicateStatement()
1:1beab6c:             throws SQLException {
1:1beab6c:         // Initial setup.
1:1beab6c:         final String sql = "values 7";
1:1beab6c:         java.sql.PreparedStatement ps = prepareStatement(sql);
1:1beab6c:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:d6cf884:         StatementKey stmtKey = insertStatementIntoCache(cache, ps, sql);
1:1beab6c:         LogicalStatementEntity logic =
1:d6cf884:                 createLogicalStatementEntity(sql, false, cache);
1:1beab6c:         assertSame(ps, logic.getPhysPs());
1:1beab6c:         assertFalse(logic.isLogicalEntityClosed());
1:1beab6c: 
1:1beab6c:         // Put a statement into the cache.
1:d6cf884:         //assertTrue(cache.cacheStatement(stmtKey, ps));
1:1beab6c:         // Create a second statement, equal to the first.
1:1beab6c:         java.sql.PreparedStatement psDupe = prepareStatement(sql);
1:d6cf884:         insertStatementIntoCache(cache, psDupe, sql);
1:1beab6c:         LogicalStatementEntity logicDupe =
1:d6cf884:                 createLogicalStatementEntity(sql, false, cache);
1:d6cf884:         // Close the first logical entry, to put the physical statement back
1:d6cf884:         // into the cache.
1:d6cf884:         logic.close();
1:1beab6c:         // When we ask the logical entity to close the statement now, the
1:1beab6c:         // underlying physical prepared statement should actually be closed.
1:1beab6c:         logicDupe.close();
1:1beab6c:         assertTrue(logicDupe.isLogicalEntityClosed());
1:d6cf884:         // Since we are possibly running in a pre-JDBC 4 environment, try do do
1:d6cf884:         // something to provoke an exception.
1:1beab6c:         try {
1:1beab6c:             psDupe.execute();
1:1beab6c:             fail("Statement should have been closed and throw an exception");
1:1beab6c:         } catch (SQLException sqle) {
1:1beab6c:             assertSQLState("XJ012", sqle);
1:1beab6c:         }
1:1beab6c: 
1:1beab6c:         // The cached statement should still be open.
1:1beab6c:         java.sql.PreparedStatement psCached = cache.getCached(stmtKey);
1:1beab6c:         assertSame(ps, psCached);
1:1beab6c:         java.sql.ResultSet rs = psCached.executeQuery();
1:1beab6c:         JDBC.assertSingleValueResultSet(rs, "7");
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Asserts that closing the logical statement and caching the physical one
1:1beab6c:      * does close the logical one but not the physical one.
1:1beab6c:      *
1:1beab6c:      * @throws SQLException if a JDBC operation fails
1:1beab6c:      */
1:1beab6c:     public void testCloseWhenStatementShallBeCached()
1:1beab6c:             throws SQLException {
1:1beab6c:         // Initial setup.
1:1beab6c:         final String sql = "values 9";
1:1beab6c:         java.sql.PreparedStatement ps = prepareStatement(sql);
1:1beab6c:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:d6cf884:         StatementKey stmtKey = insertStatementIntoCache(cache, ps, sql);
1:1beab6c:         LogicalStatementEntity logic =
1:d6cf884:                 createLogicalStatementEntity(sql, false, cache);
1:1beab6c:         assertSame(ps, logic.getPhysPs());
1:1beab6c:         assertFalse(logic.isLogicalEntityClosed());
1:1beab6c: 
1:1beab6c:         // Close the statement, it should go into the cache.
1:1beab6c:         logic.close();
1:1beab6c:         assertTrue(logic.isLogicalEntityClosed());
1:1beab6c:         // Use the physical statement.
1:1beab6c:         java.sql.ResultSet rs = ps.executeQuery();
1:1beab6c:         JDBC.assertSingleValueResultSet(rs, "9");
1:1beab6c:         // Get the statement from the cache.
1:1beab6c:         assertSame(ps, cache.getCached(stmtKey));
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Tries to execute a method on a logical statement when the underlying
1:1beab6c:      * physical statement has been closed without the logical connection
1:1beab6c:      * knowing.
1:1beab6c:      *
1:1beab6c:      * @throws SQLException if something goes wrong...
1:1beab6c:      */
1:1beab6c:     public void testClosedUnderlyingStatement()
1:1beab6c:             throws SQLException {
1:1beab6c:         // Initial setup.
1:1beab6c:         final String sql = "values 19";
1:1beab6c:         java.sql.PreparedStatement ps = prepareStatement(sql);
1:1beab6c:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:d6cf884:         insertStatementIntoCache(cache, ps, sql);
1:1beab6c:         LogicalStatementEntity logic =
1:d6cf884:                 createLogicalStatementEntity(sql, false, cache);
1:1beab6c:         assertSame(ps, logic.getPhysPs());
1:1beab6c:         assertFalse(logic.isLogicalEntityClosed());
1:d6cf884:         java.sql.PreparedStatement logicalPs =
1:d6cf884:                 (java.sql.PreparedStatement)logic;
1:1beab6c:         assertNotNull(logicalPs.getMetaData());
1:1beab6c:         ps.close();
1:1beab6c:         try {
1:1beab6c:             logicalPs.getMetaData();
1:1beab6c:             fail("Getting meta data on a closed connection should fail");
1:1beab6c:         } catch (SQLException sqle) {
1:1beab6c:             assertSQLState("XJ012", sqle);
1:1beab6c:         }
1:1beab6c:         logicalPs.close();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Tests that the cache throws out the least frequently used statement when
1:1beab6c:      * it reaches its maximum capacity, and that the thrown out statement is
1:1beab6c:      * closed in the process.
1:1beab6c:      * <p>
1:1beab6c:      * Note: This test assumes things about the replacement policy.
1:1beab6c:      *
1:1beab6c:      * @throws SQLException if a JDBC operation fails
1:1beab6c:      */
1:1beab6c:     public void testEvictionFromCache()
1:1beab6c:             throws SQLException {
1:1beab6c:         // Initial setup.
1:1beab6c:         JDBCStatementCache cache = new JDBCStatementCache(2);
1:d6cf884:         final String sql1 = "values 1";
1:d6cf884:         final String sql2 = "values 2";
1:d6cf884:         final String sql3 = "values 3";
1:d6cf884:         // Create three physical prepares statements.
1:d6cf884:         java.sql.PreparedStatement ps1 = prepareStatement(sql1);
1:d6cf884:         java.sql.PreparedStatement ps2 = prepareStatement(sql2);
1:d6cf884:         java.sql.PreparedStatement ps3 = prepareStatement(sql3);
1:d6cf884:         // Insert the two first physical statements, the get logical wrappers.
1:d6cf884:         StatementKey stmtKey1 = insertStatementIntoCache(cache, ps1, sql1);
1:d6cf884:         StatementKey stmtKey2 = insertStatementIntoCache(cache, ps2, sql2);
1:1beab6c:         LogicalStatementEntity logic1 =
1:d6cf884:                 createLogicalStatementEntity(sql1, false, cache);
1:1beab6c:         LogicalStatementEntity logic2 =
1:d6cf884:                 createLogicalStatementEntity(sql2, false, cache);
1:d6cf884:         // Insert the last physical statement and get the logical wrapper.
1:d6cf884:         StatementKey stmtKey3 = insertStatementIntoCache(cache, ps3, sql3);
1:1beab6c:         LogicalStatementEntity logic3 =
1:d6cf884:                 createLogicalStatementEntity(sql3, false, cache);
1:d6cf884:         assertSame(ps1, logic1.getPhysPs());
1:d6cf884:         assertSame(ps2, logic2.getPhysPs());
1:d6cf884:         assertSame(ps3, logic3.getPhysPs());
1:1beab6c: 
1:d6cf884:         // Close two first logical statements, putting them back into the cache.
1:1beab6c:         logic1.close();
1:1beab6c:         logic2.close();
1:1beab6c:         // Assert both of the statements are open.
1:1beab6c:         JDBC.assertSingleValueResultSet(ps1.executeQuery(), "1");
1:1beab6c:         JDBC.assertSingleValueResultSet(ps2.executeQuery(), "2");
1:1beab6c:         // Close the third statement. It should be cached, but since the cache
1:1beab6c:         // will exceed its maximum capacity, the first statement will be thrown
1:1beab6c:         // out and it should be closed in the process.
1:1beab6c:         logic3.close();
1:1beab6c:         JDBC.assertSingleValueResultSet(ps3.executeQuery(), "3");
1:1beab6c:         assertNull("ps1 still in the cache", cache.getCached(stmtKey1));
1:1beab6c:         try {
1:1beab6c:             ps1.executeQuery();
1:1beab6c:             fail("ps1 should have been closed by the cache");
1:1beab6c:         } catch (SQLException sqle) {
1:1beab6c:             assertSQLState("XJ012", sqle);
1:1beab6c:         }
1:1beab6c:         // Make sure the right statements are returned from the cache.
1:1beab6c:         assertSame(ps2, cache.getCached(stmtKey2));
1:1beab6c:         assertSame(ps3, cache.getCached(stmtKey3));
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Returns a suite of tests running in a client-server environment.
1:1beab6c:      *
1:1beab6c:      * @return A test suite.
1:1beab6c:      */
1:1beab6c:     public static Test suite() {
1:1beab6c:         return TestConfiguration.clientServerSuite(
1:1beab6c:                 LogicalStatementEntityTest.class);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:d6cf884:      * Creates a logical statement entity.
1:d6cf884:      * <p>
1:d6cf884:      * The entity represents a prepared statement.
1:d6cf884:      *
1:d6cf884:      * @param sql the SQL text
1:d6cf884:      * @param isCallable whether the entity is a callable statement or not
1:d6cf884:      * @param cache the statement cache to interact with.
1:d6cf884:      * @return A logical statement entity.
1:d6cf884:      * @throws SQLException if creating the entity fails
1:1beab6c:      */
1:d6cf884:     private LogicalStatementEntity createLogicalStatementEntity(
1:d6cf884:                                         String sql,
1:d6cf884:                                         boolean isCallable,
1:d6cf884:                                         JDBCStatementCache cache)
1:d6cf884:             throws SQLException {
1:d6cf884:         StatementCacheInteractor cacheInteractor =
1:69e3d06:             new StatementCacheInteractor(
1:69e3d06:                 cache,
1:69e3d06:                 ((org.apache.derby.client.am.ClientConnection)getConnection()));
1:d6cf884:         LogicalStatementEntity entity;
1:d6cf884:         if (isCallable) {
1:d6cf884:             entity = (LogicalStatementEntity)cacheInteractor.prepareCall(sql);
1:d6cf884:         } else {
1:d6cf884:             entity =(LogicalStatementEntity)
1:d6cf884:                     cacheInteractor.prepareStatement(sql);
1:1beab6c:         }
1:d6cf884:         return entity;
1:d6cf884:     }
1:d6cf884: 
1:d6cf884:     /**
1:d6cf884:      * Insers the statement into the cache.
1:d6cf884:      *
1:d6cf884:      * @param cache the to insert into
1:d6cf884:      * @param ps the statement to insert
1:d6cf884:      * @param sql the SQL text of the statement
1:d6cf884:      * @return The key the statement was inserted with.
1:d6cf884:      *
1:d6cf884:      * @throws SQLException if getting the connection holdability fails
1:d6cf884:      */
1:d6cf884:     private StatementKey insertStatementIntoCache(
1:d6cf884:                             JDBCStatementCache cache,
1:d6cf884:                             java.sql.PreparedStatement ps,
1:d6cf884:                             String sql) throws SQLException {
1:d6cf884:         StatementKey key;
1:d6cf884:         if (ps instanceof java.sql.CallableStatement) {
1:d6cf884:             key = StatementKeyFactory.newCallable(sql, "APP",
1:d6cf884:                     getConnection().getHoldability());
1:d6cf884:         } else {
1:d6cf884:             key = StatementKeyFactory.newPrepared(sql, "APP",
1:d6cf884:                     getConnection().getHoldability());
1:d6cf884:         }
1:d6cf884:         assertTrue(cache.cacheStatement(key, ps));
1:d6cf884:         return key;
1:1beab6c:     }
1:1beab6c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1:             new StatementCacheInteractor(
1:                 cache,
1:                 ((org.apache.derby.client.am.ClientConnection)getConnection()));
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d6cf884
/////////////////////////////////////////////////////////////////////////
1:  * Tests for the handling of logical statements.
/////////////////////////////////////////////////////////////////////////
1:         insertStatementIntoCache(cache, ps, sql);
1:                 createLogicalStatementEntity(sql, false, cache);
/////////////////////////////////////////////////////////////////////////
1:         insertStatementIntoCache(cache, cs, sql);
1:                 createLogicalStatementEntity(sql, true, cache);
/////////////////////////////////////////////////////////////////////////
1:         StatementKey stmtKey = insertStatementIntoCache(cache, ps, sql);
1:                 createLogicalStatementEntity(sql, false, cache);
1:         //assertTrue(cache.cacheStatement(stmtKey, ps));
1:         insertStatementIntoCache(cache, psDupe, sql);
1:                 createLogicalStatementEntity(sql, false, cache);
1:         // Close the first logical entry, to put the physical statement back
1:         // into the cache.
1:         logic.close();
1:         // Since we are possibly running in a pre-JDBC 4 environment, try do do
1:         // something to provoke an exception.
/////////////////////////////////////////////////////////////////////////
1:         StatementKey stmtKey = insertStatementIntoCache(cache, ps, sql);
1:                 createLogicalStatementEntity(sql, false, cache);
/////////////////////////////////////////////////////////////////////////
1:         insertStatementIntoCache(cache, ps, sql);
1:                 createLogicalStatementEntity(sql, false, cache);
1:         java.sql.PreparedStatement logicalPs =
1:                 (java.sql.PreparedStatement)logic;
/////////////////////////////////////////////////////////////////////////
1:         final String sql1 = "values 1";
1:         final String sql2 = "values 2";
1:         final String sql3 = "values 3";
1:         // Create three physical prepares statements.
1:         java.sql.PreparedStatement ps1 = prepareStatement(sql1);
1:         java.sql.PreparedStatement ps2 = prepareStatement(sql2);
1:         java.sql.PreparedStatement ps3 = prepareStatement(sql3);
1:         // Insert the two first physical statements, the get logical wrappers.
1:         StatementKey stmtKey1 = insertStatementIntoCache(cache, ps1, sql1);
1:         StatementKey stmtKey2 = insertStatementIntoCache(cache, ps2, sql2);
1:                 createLogicalStatementEntity(sql1, false, cache);
1:                 createLogicalStatementEntity(sql2, false, cache);
1:         // Insert the last physical statement and get the logical wrapper.
1:         StatementKey stmtKey3 = insertStatementIntoCache(cache, ps3, sql3);
1:                 createLogicalStatementEntity(sql3, false, cache);
1:         assertSame(ps1, logic1.getPhysPs());
1:         assertSame(ps2, logic2.getPhysPs());
1:         assertSame(ps3, logic3.getPhysPs());
1:         // Close two first logical statements, putting them back into the cache.
/////////////////////////////////////////////////////////////////////////
1:      * Creates a logical statement entity.
1:      * <p>
1:      * The entity represents a prepared statement.
1:      *
1:      * @param sql the SQL text
1:      * @param isCallable whether the entity is a callable statement or not
1:      * @param cache the statement cache to interact with.
1:      * @return A logical statement entity.
1:      * @throws SQLException if creating the entity fails
1:     private LogicalStatementEntity createLogicalStatementEntity(
1:                                         String sql,
1:                                         boolean isCallable,
1:                                         JDBCStatementCache cache)
1:             throws SQLException {
1:         StatementCacheInteractor cacheInteractor =
0:                 new StatementCacheInteractor(
0:                     cache,
0:                     ((org.apache.derby.client.am.Connection)getConnection()));
1:         LogicalStatementEntity entity;
1:         if (isCallable) {
1:             entity = (LogicalStatementEntity)cacheInteractor.prepareCall(sql);
1:         } else {
1:             entity =(LogicalStatementEntity)
1:                     cacheInteractor.prepareStatement(sql);
1:         return entity;
1:     }
1: 
1:     /**
1:      * Insers the statement into the cache.
1:      *
1:      * @param cache the to insert into
1:      * @param ps the statement to insert
1:      * @param sql the SQL text of the statement
1:      * @return The key the statement was inserted with.
1:      *
1:      * @throws SQLException if getting the connection holdability fails
1:      */
1:     private StatementKey insertStatementIntoCache(
1:                             JDBCStatementCache cache,
1:                             java.sql.PreparedStatement ps,
1:                             String sql) throws SQLException {
1:         StatementKey key;
1:         if (ps instanceof java.sql.CallableStatement) {
1:             key = StatementKeyFactory.newCallable(sql, "APP",
1:                     getConnection().getHoldability());
1:         } else {
1:             key = StatementKeyFactory.newPrepared(sql, "APP",
1:                     getConnection().getHoldability());
1:         }
1:         assertTrue(cache.cacheStatement(key, ps));
1:         return key;
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalStatementEntityTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
1: import java.sql.SQLException;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: import org.apache.derby.client.am.stmtcache.StatementKeyFactory;
1: 
0: import org.apache.derby.jdbc.ClientDriver;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
0:  * Tests for the handling of logical prepared statements.
1:  */
1: public class LogicalStatementEntityTest
1:     extends BaseJDBCTestCase {
1: 
1:     public LogicalStatementEntityTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Verifies that the logical statement representing a prepared statement
1:      * behaves correctly when it has been closed.
1:      *
1:      * @throws SQLException if a JDBC operation fails
1:      */
1:     public void testCloseBehaviorExternalPs()
1:             throws SQLException {
1:         final String sql = "values 7";
0:         final String schema = "APP";
1:         java.sql.PreparedStatement ps = prepareStatement(sql);
0:         StatementKey stmtKey = StatementKeyFactory.newPrepared(
0:                 sql, schema, getConnection().getHoldability());
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         LogicalStatementEntity logic =
0:                 new LogicalStatementEntityClass(ps, stmtKey, cache);
1:         assertSame(ps, logic.getPhysPs());
1:         assertFalse(logic.isLogicalEntityClosed());
1:         logic.close();
1:         assertTrue(logic.isLogicalEntityClosed());
1:         logic.close();
1:         logic.close();
1:         assertTrue(logic.isLogicalEntityClosed());
1:         try {
1:             logic.getPhysPs();
1:             fail("Should have thrown exception");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ012", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Verifies that the logical statement representing a callable statement
1:      * behaves correctly when it has been closed.
1:      *
1:      * @throws SQLException if a JDBC operation fails
1:      */
1:     public void testCloseBehaviorExternalCs()
1:             throws SQLException {
1:         final String sql = "values 3";
0:         final String schema = "APP";
1:         java.sql.CallableStatement cs = prepareCall(sql);
0:         StatementKey stmtKey = StatementKeyFactory.newCallable(
0:                 sql, schema, getConnection().getHoldability());
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         LogicalStatementEntity logic =
0:                 new LogicalStatementEntityClass(cs, stmtKey, cache);
1:         assertSame(cs, logic.getPhysCs());
1:         assertFalse(logic.isLogicalEntityClosed());
1:         logic.close();
1:         assertTrue(logic.isLogicalEntityClosed());
1:         logic.close();
1:         logic.close();
1:         assertTrue(logic.isLogicalEntityClosed());
1:         try {
1:             logic.getPhysCs();
1:             fail("Should have thrown exception");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ012", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Tests that a statement equal to one in the cache is not cached when
1:      * closing the logical statement, and that the physical statement is closed.
1:      *
1:      * @throws SQLException if a JDBC operation fails
1:      */
1:     public void testCloseOnDuplicateStatement()
1:             throws SQLException {
1:         // Initial setup.
1:         final String sql = "values 7";
0:         final String schema = "APP";
1:         java.sql.PreparedStatement ps = prepareStatement(sql);
0:         StatementKey stmtKey = StatementKeyFactory.newPrepared(
0:                 sql, schema, getConnection().getHoldability());
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         LogicalStatementEntity logic =
0:                 new LogicalStatementEntityClass(ps, stmtKey, cache);
1:         assertSame(ps, logic.getPhysPs());
1:         assertFalse(logic.isLogicalEntityClosed());
1: 
1:         // Put a statement into the cache.
0:         assertTrue(cache.cacheStatement(stmtKey, ps));
1:         // Create a second statement, equal to the first.
1:         java.sql.PreparedStatement psDupe = prepareStatement(sql);
1:         LogicalStatementEntity logicDupe =
0:                 new LogicalStatementEntityClass(psDupe, stmtKey, cache);
1:         // When we ask the logical entity to close the statement now, the
1:         // underlying physical prepared statement should actually be closed.
1:         logicDupe.close();
1:         assertTrue(logicDupe.isLogicalEntityClosed());
0:         // Since we are possibly running in pre-JDBC 4, try do do something to
0:         // provoke exception.
1:         try {
1:             psDupe.execute();
1:             fail("Statement should have been closed and throw an exception");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ012", sqle);
1:         }
1: 
1:         // The cached statement should still be open.
1:         java.sql.PreparedStatement psCached = cache.getCached(stmtKey);
1:         assertSame(ps, psCached);
1:         java.sql.ResultSet rs = psCached.executeQuery();
1:         JDBC.assertSingleValueResultSet(rs, "7");
1:     }
1: 
1:     /**
1:      * Asserts that closing the logical statement and caching the physical one
1:      * does close the logical one but not the physical one.
1:      *
1:      * @throws SQLException if a JDBC operation fails
1:      */
1:     public void testCloseWhenStatementShallBeCached()
1:             throws SQLException {
1:         // Initial setup.
1:         final String sql = "values 9";
0:         final String schema = "APP";
1:         java.sql.PreparedStatement ps = prepareStatement(sql);
0:         StatementKey stmtKey = StatementKeyFactory.newPrepared(
0:                 sql, schema, getConnection().getHoldability());
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         LogicalStatementEntity logic =
0:                 new LogicalStatementEntityClass(ps, stmtKey, cache);
1:         assertSame(ps, logic.getPhysPs());
1:         assertFalse(logic.isLogicalEntityClosed());
1: 
1:         // Close the statement, it should go into the cache.
1:         logic.close();
1:         assertTrue(logic.isLogicalEntityClosed());
1:         // Use the physical statement.
1:         java.sql.ResultSet rs = ps.executeQuery();
1:         JDBC.assertSingleValueResultSet(rs, "9");
1:         // Get the statement from the cache.
1:         assertSame(ps, cache.getCached(stmtKey));
1:     }
1: 
1:     /**
1:      * Tries to execute a method on a logical statement when the underlying
1:      * physical statement has been closed without the logical connection
1:      * knowing.
1:      *
1:      * @throws SQLException if something goes wrong...
1:      */
1:     public void testClosedUnderlyingStatement()
1:             throws SQLException {
1:         // Initial setup.
1:         final String sql = "values 19";
0:         final String schema = "APP";
1:         java.sql.PreparedStatement ps = prepareStatement(sql);
0:         StatementKey stmtKey = StatementKeyFactory.newPrepared(
0:                 sql, schema, getConnection().getHoldability());
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         LogicalStatementEntity logic =
0:                 new LogicalStatementEntityClass(ps, stmtKey, cache);
1:         assertSame(ps, logic.getPhysPs());
1:         assertFalse(logic.isLogicalEntityClosed());
0:         java.sql.PreparedStatement logicalPs = ClientDriver.getFactory().
0:                 newLogicalPreparedStatement(ps, stmtKey, cache);
1:         assertNotNull(logicalPs.getMetaData());
1:         ps.close();
1:         try {
1:             logicalPs.getMetaData();
1:             fail("Getting meta data on a closed connection should fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ012", sqle);
1:         }
1:         logicalPs.close();
1:     }
1: 
1:     /**
1:      * Tests that the cache throws out the least frequently used statement when
1:      * it reaches its maximum capacity, and that the thrown out statement is
1:      * closed in the process.
1:      * <p>
1:      * Note: This test assumes things about the replacement policy.
1:      *
1:      * @throws SQLException if a JDBC operation fails
1:      */
1:     public void testEvictionFromCache()
1:             throws SQLException {
1:         // Initial setup.
1:         JDBCStatementCache cache = new JDBCStatementCache(2);
0:         final String schema = "APP";
0:         java.sql.PreparedStatement ps1 = prepareStatement("values 1");
0:         java.sql.PreparedStatement ps2 = prepareStatement("values 2");
0:         java.sql.PreparedStatement ps3 = prepareStatement("values 3");
0:         StatementKey stmtKey1 = StatementKeyFactory.newPrepared(
0:                 "values 1", schema, getConnection().getHoldability());
0:         StatementKey stmtKey2 = StatementKeyFactory.newPrepared(
0:                 "values 2", schema, getConnection().getHoldability());
0:         StatementKey stmtKey3 = StatementKeyFactory.newPrepared(
0:                 "values 3", schema, getConnection().getHoldability());
1:         LogicalStatementEntity logic1 =
0:                 new LogicalStatementEntityClass(ps1, stmtKey1, cache);
1:         LogicalStatementEntity logic2 =
0:                 new LogicalStatementEntityClass(ps2, stmtKey2, cache);
1:         LogicalStatementEntity logic3 =
0:                 new LogicalStatementEntityClass(ps3, stmtKey3, cache);
1: 
0:         // Close the two first logical statements, putting them into the cache.
1:         logic1.close();
1:         logic2.close();
1:         // Assert both of the statements are open.
1:         JDBC.assertSingleValueResultSet(ps1.executeQuery(), "1");
1:         JDBC.assertSingleValueResultSet(ps2.executeQuery(), "2");
1:         // Close the third statement. It should be cached, but since the cache
1:         // will exceed its maximum capacity, the first statement will be thrown
1:         // out and it should be closed in the process.
1:         logic3.close();
1:         JDBC.assertSingleValueResultSet(ps3.executeQuery(), "3");
1:         assertNull("ps1 still in the cache", cache.getCached(stmtKey1));
1:         try {
1:             ps1.executeQuery();
1:             fail("ps1 should have been closed by the cache");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ012", sqle);
1:         }
1:         // Make sure the right statements are returned from the cache.
1:         assertSame(ps2, cache.getCached(stmtKey2));
1:         assertSame(ps3, cache.getCached(stmtKey3));
1:     }
1: 
1:     /**
1:      * Returns a suite of tests running in a client-server environment.
1:      *
1:      * @return A test suite.
1:      */
1:     public static Test suite() {
1:         return TestConfiguration.clientServerSuite(
1:                 LogicalStatementEntityTest.class);
1:     }
1: 
1:     /**
0:      * Class used to represent a logical statement.
1:      */
0:     private static class LogicalStatementEntityClass
0:             extends LogicalStatementEntity {
1: 
1:         /**
0:          * Constructor creating an object handling closing of a logical
0:          * prepared / callable statement.
1:          *
0:          * @param ps underlying physical prepared / callable statement
1:          */
0:         public LogicalStatementEntityClass(java.sql.PreparedStatement ps,
0:                                            StatementKey key,
0:                                            JDBCStatementCache cache) {
0:             super(ps, key, cache);
1:         }
1:     }
1: }
============================================================================