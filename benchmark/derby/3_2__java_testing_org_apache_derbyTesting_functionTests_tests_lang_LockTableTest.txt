1:96c1585: /*
1:96c1585: 
1:96c1585:  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LockTableTest
1:96c1585: 
1:96c1585:  Licensed to the Apache Software Foundation (ASF) under one or more
1:96c1585:  contributor license agreements.  See the NOTICE file distributed with
1:96c1585:  this work for additional information regarding copyright ownership.
1:96c1585:  The ASF licenses this file to You under the Apache License, Version 2.0
1:96c1585:  (the "License"); you may not use this file except in compliance with
1:96c1585:  the License.  You may obtain a copy of the License at
1:96c1585: 
1:96c1585:  http://www.apache.org/licenses/LICENSE-2.0
1:96c1585: 
1:96c1585:  Unless required by applicable law or agreed to in writing, software
1:96c1585:  distributed under the License is distributed on an "AS IS" BASIS,
1:96c1585:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96c1585:  See the License for the specific language governing permissions and
1:96c1585:  limitations under the License.
1:96c1585: 
1:96c1585:  */
1:96c1585: // Note: This test could be refined by modifying the BaseJDBCTestCase
1:96c1585: //       method assertStatementError(new String[],Statement,String)
1:96c1585: //       and all methods down that chain to search for the variable
1:96c1585: //       values in the SQL error messages as well, in this case, in this
1:96c1585: //       case, to check for 'exclusive' or 'share' in error X0202.
1:96c1585: 
1:96c1585: package org.apache.derbyTesting.functionTests.tests.lang;
1:96c1585: 
1:96c1585: import java.sql.ResultSet;
1:96c1585: import java.sql.SQLException;
1:96c1585: import java.sql.Statement;
1:96c1585: import java.sql.Connection;
1:96c1585: import java.util.Properties;
1:96c1585: 
1:96c1585: import junit.framework.Test;
1:96c1585: 
1:96c1585: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:96c1585: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:96c1585: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:96c1585: import org.apache.derbyTesting.junit.JDBC;
1:96c1585: import org.apache.derbyTesting.junit.TestConfiguration;
1:96c1585: 
1:96c1585: /**
1:96c1585:  * Tests the LOCK TABLE in various modes.
1:96c1585:  */
1:96c1585: public class LockTableTest extends BaseJDBCTestCase {
1:96c1585: 
1:96c1585:     public LockTableTest(String name) {
1:96c1585:         super(name);
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * Construct top level suite in this JUnit test
1:96c1585:      * The suite is wrapped in a DatabasePropertyTestSetup to
1:96c1585:      * lower the locking times.
2:96c1585:      *
1:96c1585:      * @return A suite containing embedded fixtures
1:96c1585:      */
1:96c1585:     public static Test suite() {
1:96c1585:         Properties properties = new Properties();
1:96c1585:         properties.setProperty("derby.storage.rowLocking", "false");
1:96c1585:         properties.setProperty("derby.locks.waitTimeout", "7");
1:96c1585:         properties.setProperty("derby.locks.deadlockTimeout", "5");
1:96c1585: 
1:96c1585:         Test suite = TestConfiguration.embeddedSuite (LockTableTest.class);
1:96c1585:         suite = new DatabasePropertyTestSetup(suite, properties, true);
1:96c1585:         return new CleanDatabaseTestSetup(suite) {
1:96c1585:             /**
1:96c1585:              * Creates the schemas and table used in the test cases.
1:96c1585:              *
1:96c1585:              * @throws SQLException
1:96c1585:              */
1:96c1585:             protected void decorateSQL(Statement s) throws SQLException {
1:96c1585:                 Connection conn = getConnection();
1:96c1585:                 conn.setAutoCommit(false);
1:96c1585:                 s.executeUpdate("create schema u1");
1:96c1585:                 s.executeUpdate("create schema u2");
1:96c1585:                 conn.commit();
1:96c1585:             }
1:96c1585:         };
1:96c1585:     }
1:96c1585: 
1:96c1585:     protected void setUp() throws Exception {
1:96c1585:         super.setUp();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * Tear-down the fixture by removing the tables and schemas
1:96c1585:      * @throws Exception
1:96c1585:      */
1:96c1585:     protected void tearDown() throws Exception {
1:96c1585:         // first drop t2 only - it is only used in one fixture.
1:96c1585:         // if doing this in the other block, the schemas might not
1:96c1585:         // get dropped.
1:96c1585:         Statement s = createStatement();
1:96c1585: /*        try {
1:96c1585:             s.executeUpdate("drop table u1.t2");
1:96c1585:         } catch(SQLException sqe) {
1:96c1585:             if (!(sqe.getSQLState().equalsIgnoreCase("42X05") 
1:96c1585:                     || sqe.getSQLState().equalsIgnoreCase("42Y55")))
1:96c1585:             {
1:96c1585:                 fail("oops in teardown, encountered some other error than " +
1:96c1585:                 		"'object does not exist' or " +
1:96c1585:                 		"'cannot drop object because it doesn't exist'");
1:96c1585:                 sqe.printStackTrace();
1:96c1585:             }
1:96c1585:         }
1:96c1585:         finally {
1:96c1585:             s.close();
1:96c1585:         }*/
1:96c1585:         try {
1:96c1585:             s = createStatement();
1:96c1585:             s.executeUpdate("drop table u1.t1");
1:96c1585:             s.executeUpdate("drop schema u1 restrict");
1:96c1585:             s.executeUpdate("drop schema u2 restrict");
1:96c1585:         } catch(SQLException sqe) {
1:96c1585:             if (!(sqe.getSQLState().equalsIgnoreCase("42X05") 
1:96c1585:                     || sqe.getSQLState().equalsIgnoreCase("42Y55")))
1:96c1585:             {
1:96c1585:                 fail("oops in teardown, encountered some other error than " +
1:96c1585:                 		"'object does not exist' or " +
1:96c1585:                 		"'cannot drop object because it doesn't exist'");
1:96c1585:                 sqe.printStackTrace();
1:96c1585:             }
1:96c1585:         }
1:96c1585:         finally {
1:96c1585:             s.close();
1:96c1585:         }
1:96c1585:         super.tearDown();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /** sets up the connection for a user
1:96c1585:      * 
1:96c1585:      * @return A connection with autocommit set to false
2:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     private Connection setConnection(String userString) throws SQLException {
1:96c1585:         Connection c1 = openUserConnection(userString);
1:96c1585:         c1.setAutoCommit(false);
1:96c1585:         return c1;
1:96c1585:     }
1:96c1585: 
1:96c1585:     /* create table t1, used in most of the fixtures
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     private void setupTable(Statement s) throws SQLException {
1:96c1585:         s.executeUpdate("create table t1(c1 int)");
1:96c1585:         s.executeUpdate("insert into t1 values 1");
1:96c1585:     }
1:96c1585: 
1:96c1585:     /* get the query to get the locks
1:96c1585:      * 
1:96c1585:      * @return String with the query
1:96c1585:      */
1:0c5bc3a:     public static String getSelectLocksString() {
1:96c1585:         String sql = 
1:96c1585:                 "select " + 
1:96c1585:                         "cast(username as char(8)) as username, " +
1:96c1585:                         "cast(t.type as char(15)) as trantype, " +
1:96c1585:                         "cast(l.type as char(8)) as type, " +
1:96c1585:                         "cast(lockcount as char(3)) as cnt, " +
1:96c1585:                         "mode, " +
1:96c1585:                         "cast(tablename as char(12)) as tabname, " +
1:96c1585:                         "cast(lockname as char(10)) as lockname, " +
1:96c1585:                         "state, " +
1:96c1585:                         "status " +
1:96c1585:                         "from syscs_diag.lock_table l " +
1:96c1585:                         "right outer join syscs_diag.transaction_table t " +
1:96c1585:                         "on l.xid = t.xid where l.tableType <> 'S' " +
1:96c1585:                         "order by " +
1:96c1585:                         "tabname, type desc, mode, cnt, lockname";
1:96c1585:         return sql;
1:96c1585:     }
1:96c1585:     
1:96c1585:     /**
1:96c1585:      * Tests that LOCK TABLE is not allowed on system tables.
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     public void testSystemTable() throws SQLException {
1:96c1585:         Statement s = createStatement();
1:96c1585:         assertStatementError("42X62", s,
1:96c1585:                 "lock table sys.systables in share mode");
1:96c1585:         s.close();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * Tests LOCK TABLE command - exclusive vs exclusive mode
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     public void testTXvsTXLocks() throws SQLException {
1:96c1585:         //set up the connections;
1:96c1585:         Connection c1 = setConnection("U1");
1:96c1585:         Statement s1 = c1.createStatement();
1:96c1585:         Connection c2 = setConnection("U2");
1:96c1585:         Statement s2 = c2.createStatement();
1:96c1585: 
1:96c1585:         setupTable(s1);
1:96c1585:         c1.commit();
1:96c1585: 
1:96c1585:         s1.executeUpdate("lock table u1.t1 in exclusive mode");
1:96c1585:         // We expect X0X02 (Table cannot be locked 'EXCLUSIVE' mode) 
1:96c1585:         // and 40XL1 (A lock could not be obtained within the time requested).
1:96c1585:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:96c1585:                 "lock table u1.t1 in exclusive mode");
1:96c1585:         // verify we still have the lock
1:96c1585:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:96c1585:         JDBC.assertFullResultSet(rs, new String[][]{
1:96c1585:                 {"U1", "UserTransaction", "TABLE", "1",
1:96c1585:                     "X", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:96c1585:         });
1:96c1585:         // verify user 1 can insert into the table
1:96c1585:         s1.executeUpdate("insert into t1 values 2");
1:96c1585:         rs = s1.executeQuery("select count(*) from t1");
1:96c1585:         JDBC.assertSingleValueResultSet(rs, "2");
1:96c1585:         // But user 2 should not be able to insert
1:96c1585:         assertStatementError("40XL1", s2, "insert into u1.t1 values 9");
1:96c1585:         rs = s1.executeQuery("select count(*) from t1");
1:96c1585:         JDBC.assertSingleValueResultSet(rs, "2");
1:96c1585:         // but select should be ok
1:96c1585:         rs = s1.executeQuery("select count(*) from u1.t1");
1:96c1585:         JDBC.assertSingleValueResultSet(rs, "2");
1:96c1585:         rs.close();
1:96c1585:         c1.commit();
1:96c1585:         s1.executeUpdate("drop table U1.t1");
1:96c1585:         c1.commit();
1:96c1585:         s1.close();
1:96c1585:         s2.close();
1:96c1585:         c1.close();
1:96c1585:         c2.rollback();
1:96c1585:         c2.close();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * Tests LOCK TABLE command - exclusive vs shared mode
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     public void testTXvsTSLocks() throws SQLException {
1:96c1585:         Connection c1 = setConnection("U1");
1:96c1585:         Statement s1 = c1.createStatement();
1:96c1585:         Connection c2 = setConnection("U2");
1:96c1585:         Statement s2 = c2.createStatement();
1:96c1585: 
1:96c1585:         setupTable(s1);
1:96c1585:         c1.commit();
1:96c1585: 
1:96c1585:         // - test TX vs TS locks
1:96c1585:         s1.executeUpdate("lock table t1 in exclusive mode");
1:96c1585:         // We expect X0X02 (Table cannot be locked in 'SHARE' mode) 
1:96c1585:         // and 40XL1 (A lock could not be obtained within the time requested).
1:96c1585:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:96c1585:                 "lock table u1.t1 in share mode");
1:96c1585:         // verify we still have the lock
1:96c1585:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:96c1585:         JDBC.assertFullResultSet(rs, new String[][]{
1:96c1585:                 {"U1", "UserTransaction", "TABLE", "1",
1:96c1585:                     "X", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:96c1585:         });
1:96c1585:         // verify we can still insert into the table
1:96c1585:         s1.executeUpdate("insert into t1 values 3");
1:96c1585:         rs = s1.executeQuery("select count(*) from t1");
1:96c1585:         JDBC.assertSingleValueResultSet(rs, "2");
1:96c1585:         s1.executeUpdate("drop table U1.t1");
1:96c1585:         c1.commit();
1:96c1585:         s1.close();
1:96c1585:         s2.close();
1:96c1585:         c1.close();
1:96c1585:         c2.rollback();
1:96c1585:         c2.close();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * Tests LOCK TABLE command - shared vs exclusive mode
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     public void testTSvsTXLocks() throws SQLException {
1:96c1585:         Connection c1 = setConnection("U1");
1:96c1585:         Statement s1 = c1.createStatement();
1:96c1585:         Connection c2 = setConnection("U2");
1:96c1585:         Statement s2 = c2.createStatement();
1:96c1585: 
1:96c1585:         setupTable(s1);
1:96c1585:         c1.commit();
1:96c1585: 
1:96c1585:         // -- test TS vs TX locks
1:96c1585:         s1.executeUpdate("lock table t1 in share mode");
1:96c1585:         // We expect X0X02 (Table cannot be locked in 'EXLUSIVE' mode) 
1:96c1585:         // and 40XL1 (A lock could not be obtained within the time requested).
1:96c1585:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:96c1585:                 "lock table u1.t1 in exclusive mode");
1:96c1585:         // verify we still have the lock
1:96c1585:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:96c1585:         JDBC.assertFullResultSet(rs, new String[][]{
1:96c1585:                 {"U1", "UserTransaction", "TABLE", "1",
1:96c1585:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:96c1585:         });
1:96c1585:         // verify insert
1:96c1585:         s1.executeUpdate("insert into t1 values 4");
1:96c1585:         rs = s1.executeQuery("select count(*) from t1");
1:96c1585:         JDBC.assertSingleValueResultSet(rs, "2");
1:96c1585:         s1.executeUpdate("drop table U1.t1");
1:96c1585:         c1.commit();
1:96c1585:         s1.close();
1:96c1585:         s2.close();
1:96c1585:         c1.close();
1:96c1585:         c2.rollback();
1:96c1585:         c2.close();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * Tests LOCK TABLE command - shared vs shared mode
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     public void testTSvsTSLocks() throws SQLException {
1:96c1585:         Connection c1 = setConnection("U1");
1:96c1585:         Statement s1 = c1.createStatement();
1:96c1585:         Connection c2 = setConnection("U2");
1:96c1585:         Statement s2 = c2.createStatement();
1:96c1585: 
1:96c1585:         setupTable(s1);
1:96c1585:         c1.commit();
1:96c1585: 
1:96c1585:         // -- test TS vs TS locks
1:96c1585:         s1.executeUpdate("lock table t1 in share mode");
1:96c1585:         // expect success on lock, but now user 1 may not update.
1:96c1585:         assertUpdateCount(s2, 0, "lock table u1.t1 in share mode");
1:96c1585:         // verify we have two locks
1:96c1585:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:96c1585:         JDBC.assertFullResultSet(rs, new String[][]{
1:96c1585:                 {"U2", "UserTransaction", "TABLE", "1",
1:96c1585:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"},
1:96c1585:                 {"U1", "UserTransaction", "TABLE", "1",
1:96c1585:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:96c1585:         });
1:96c1585:         // verify that with a share lock for user 2 place, user 1 cannot insert
1:96c1585:         assertStatementError("40XL1", s1, "insert into t1 values 5");
1:96c1585:         rs = s1.executeQuery("select count(*) from t1");
1:96c1585:         JDBC.assertSingleValueResultSet(rs, "1");
1:96c1585:         c2.rollback();
1:96c1585:         c1.rollback();
1:96c1585:         s1.executeUpdate("drop table U1.t1");
1:96c1585:         c1.commit();
1:96c1585:         s1.close();
1:96c1585:         s2.close();
1:96c1585:         c1.close();
1:96c1585:         c2.close();
1:96c1585:     }
1:96c1585: 
1:96c1585:     /**
1:96c1585:      * test with rollback.
1:96c1585:      * 
1:96c1585:      * @exception SQLException
1:96c1585:      */
1:96c1585:     public void testWithRolledBack() throws SQLException {
1:96c1585:         Connection c1 = setConnection("U1");
1:96c1585:         Statement s1 = c1.createStatement();
1:96c1585:         Connection c2 = setConnection("U2");
1:96c1585:         Statement s2 = c2.createStatement();
1:96c1585: 
1:96c1585:         setupTable(s1);
1:96c1585:         c1.commit();
1:96c1585: 
1:96c1585:         // -- create another table
1:96c1585:         s1.executeUpdate("create table t2(c1 int)");
1:96c1585:         c1.commit();
1:96c1585: 
1:96c1585:         // verify that the user getting error on lock table
1:96c1585:         // doesn't get rolled back, so other locks remain in  place.
1:96c1585:         s1.executeUpdate("lock table t1 in share mode");
1:96c1585:         s2.executeUpdate("lock table u1.t2 in share mode");
1:96c1585:         // Attempt to lock t1 in exclusive mode, while it has been share-locked.
1:96c1585:         // We expect X0X02 (Table cannot be locked in 'EXCLUSIVE' mode) 
1:96c1585:         // and 40XL1 (A lock could not be obtained within the time requested).
1:96c1585:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:96c1585:                 "lock table u1.t1 in exclusive mode");
1:96c1585:         // verify the other user still has the lock
1:96c1585:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:96c1585:         JDBC.assertFullResultSet(rs, new String[][]{
1:96c1585:                 {"U1", "UserTransaction", "TABLE", "1",
1:96c1585:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"},
1:96c1585:                 {"U2", "UserTransaction", "TABLE", "1",
1:96c1585:                     "S", "T2", "Tablelock", "GRANT", "ACTIVE"}
1:96c1585:         });
1:96c1585:         c2.rollback();
1:96c1585:         c1.rollback();
1:96c1585:         s1.executeUpdate("drop table U1.t2");
1:96c1585:         s1.executeUpdate("drop table U1.t1");
1:96c1585:         c1.commit();
1:96c1585:         s1.close();
1:96c1585:         s2.close();
1:96c1585:         c1.close();
1:96c1585:         c2.close();
1:96c1585:     }
1:96c1585: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:     public static String getSelectLocksString() {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:61661c1
/////////////////////////////////////////////////////////////////////////
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:96c1585
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LockTableTest
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: // Note: This test could be refined by modifying the BaseJDBCTestCase
1: //       method assertStatementError(new String[],Statement,String)
1: //       and all methods down that chain to search for the variable
1: //       values in the SQL error messages as well, in this case, in this
1: //       case, to check for 'exclusive' or 'share' in error X0202.
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Connection;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests the LOCK TABLE in various modes.
1:  * 
1:  * @exception SQLException
1:  */
1: public class LockTableTest extends BaseJDBCTestCase {
1: 
1:     public LockTableTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      * The suite is wrapped in a DatabasePropertyTestSetup to
1:      * lower the locking times.
1:      *
1:      * @return A suite containing embedded fixtures
1:      */
1:     public static Test suite() {
1:         Properties properties = new Properties();
1:         properties.setProperty("derby.storage.rowLocking", "false");
1:         properties.setProperty("derby.locks.waitTimeout", "7");
1:         properties.setProperty("derby.locks.deadlockTimeout", "5");
1: 
1:         Test suite = TestConfiguration.embeddedSuite (LockTableTest.class);
1:         suite = new DatabasePropertyTestSetup(suite, properties, true);
1:         return new CleanDatabaseTestSetup(suite) {
1:             /**
1:              * Creates the schemas and table used in the test cases.
1:              *
1:              * @throws SQLException
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 Connection conn = getConnection();
1:                 conn.setAutoCommit(false);
1:                 s.executeUpdate("create schema u1");
1:                 s.executeUpdate("create schema u2");
1:                 conn.commit();
1:             }
1:         };
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * Tear-down the fixture by removing the tables and schemas
1:      * @throws Exception
1:      */
1:     protected void tearDown() throws Exception {
1:         // first drop t2 only - it is only used in one fixture.
1:         // if doing this in the other block, the schemas might not
1:         // get dropped.
1:         Statement s = createStatement();
1: /*        try {
1:             s.executeUpdate("drop table u1.t2");
1:         } catch(SQLException sqe) {
1:             if (!(sqe.getSQLState().equalsIgnoreCase("42X05") 
1:                     || sqe.getSQLState().equalsIgnoreCase("42Y55")))
1:             {
1:                 fail("oops in teardown, encountered some other error than " +
1:                 		"'object does not exist' or " +
1:                 		"'cannot drop object because it doesn't exist'");
1:                 sqe.printStackTrace();
1:             }
1:         }
1:         finally {
1:             s.close();
1:         }*/
1:         try {
1:             s = createStatement();
1:             s.executeUpdate("drop table u1.t1");
1:             s.executeUpdate("drop schema u1 restrict");
1:             s.executeUpdate("drop schema u2 restrict");
1:         } catch(SQLException sqe) {
1:             if (!(sqe.getSQLState().equalsIgnoreCase("42X05") 
1:                     || sqe.getSQLState().equalsIgnoreCase("42Y55")))
1:             {
1:                 fail("oops in teardown, encountered some other error than " +
1:                 		"'object does not exist' or " +
1:                 		"'cannot drop object because it doesn't exist'");
1:                 sqe.printStackTrace();
1:             }
1:         }
1:         finally {
1:             s.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     /** sets up the connection for a user
1:      * 
1:      * @return A connection with autocommit set to false
1:      * @exception SQLException
1:      */
1:     private Connection setConnection(String userString) throws SQLException {
1:         Connection c1 = openUserConnection(userString);
1:         c1.setAutoCommit(false);
1:         return c1;
1:     }
1: 
1:     /* create table t1, used in most of the fixtures
1:      * 
1:      * @exception SQLException
1:      */
1:     private void setupTable(Statement s) throws SQLException {
1:         s.executeUpdate("create table t1(c1 int)");
1:         s.executeUpdate("insert into t1 values 1");
1:     }
1: 
1:     /* get the query to get the locks
1:      * 
1:      * @return String with the query
1:      */
0:     private String getSelectLocksString() {
1:         String sql = 
1:                 "select " + 
1:                         "cast(username as char(8)) as username, " +
1:                         "cast(t.type as char(15)) as trantype, " +
1:                         "cast(l.type as char(8)) as type, " +
1:                         "cast(lockcount as char(3)) as cnt, " +
1:                         "mode, " +
1:                         "cast(tablename as char(12)) as tabname, " +
1:                         "cast(lockname as char(10)) as lockname, " +
1:                         "state, " +
1:                         "status " +
1:                         "from syscs_diag.lock_table l " +
1:                         "right outer join syscs_diag.transaction_table t " +
1:                         "on l.xid = t.xid where l.tableType <> 'S' " +
1:                         "order by " +
1:                         "tabname, type desc, mode, cnt, lockname";
1:         return sql;
1:     }
1:     
1:     /**
1:      * Tests that LOCK TABLE is not allowed on system tables.
1:      * 
1:      * @exception SQLException
1:      */
1:     public void testSystemTable() throws SQLException {
1:         Statement s = createStatement();
1:         assertStatementError("42X62", s,
1:                 "lock table sys.systables in share mode");
1:         s.close();
1:     }
1: 
1:     /**
1:      * Tests LOCK TABLE command - exclusive vs exclusive mode
1:      * 
1:      * @exception SQLException
1:      */
1:     public void testTXvsTXLocks() throws SQLException {
1:         //set up the connections;
1:         Connection c1 = setConnection("U1");
1:         Statement s1 = c1.createStatement();
1:         Connection c2 = setConnection("U2");
1:         Statement s2 = c2.createStatement();
1: 
1:         setupTable(s1);
1:         c1.commit();
1: 
1:         s1.executeUpdate("lock table u1.t1 in exclusive mode");
1:         // We expect X0X02 (Table cannot be locked 'EXCLUSIVE' mode) 
1:         // and 40XL1 (A lock could not be obtained within the time requested).
1:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:                 "lock table u1.t1 in exclusive mode");
1:         // verify we still have the lock
1:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"U1", "UserTransaction", "TABLE", "1",
1:                     "X", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:         });
1:         // verify user 1 can insert into the table
1:         s1.executeUpdate("insert into t1 values 2");
1:         rs = s1.executeQuery("select count(*) from t1");
1:         JDBC.assertSingleValueResultSet(rs, "2");
1:         // But user 2 should not be able to insert
1:         assertStatementError("40XL1", s2, "insert into u1.t1 values 9");
1:         rs = s1.executeQuery("select count(*) from t1");
1:         JDBC.assertSingleValueResultSet(rs, "2");
1:         // but select should be ok
1:         rs = s1.executeQuery("select count(*) from u1.t1");
1:         JDBC.assertSingleValueResultSet(rs, "2");
1:         rs.close();
1:         c1.commit();
1:         s1.executeUpdate("drop table U1.t1");
1:         c1.commit();
1:         s1.close();
1:         s2.close();
1:         c1.close();
1:         c2.rollback();
1:         c2.close();
1:     }
1: 
1:     /**
1:      * Tests LOCK TABLE command - exclusive vs shared mode
1:      * 
1:      * @exception SQLException
1:      */
1:     public void testTXvsTSLocks() throws SQLException {
1:         Connection c1 = setConnection("U1");
1:         Statement s1 = c1.createStatement();
1:         Connection c2 = setConnection("U2");
1:         Statement s2 = c2.createStatement();
1: 
1:         setupTable(s1);
1:         c1.commit();
1: 
1:         // - test TX vs TS locks
1:         s1.executeUpdate("lock table t1 in exclusive mode");
1:         // We expect X0X02 (Table cannot be locked in 'SHARE' mode) 
1:         // and 40XL1 (A lock could not be obtained within the time requested).
1:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:                 "lock table u1.t1 in share mode");
1:         // verify we still have the lock
1:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"U1", "UserTransaction", "TABLE", "1",
1:                     "X", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:         });
1:         // verify we can still insert into the table
1:         s1.executeUpdate("insert into t1 values 3");
1:         rs = s1.executeQuery("select count(*) from t1");
1:         JDBC.assertSingleValueResultSet(rs, "2");
1:         s1.executeUpdate("drop table U1.t1");
1:         c1.commit();
1:         s1.close();
1:         s2.close();
1:         c1.close();
1:         c2.rollback();
1:         c2.close();
1:     }
1: 
1:     /**
1:      * Tests LOCK TABLE command - shared vs exclusive mode
1:      * 
1:      * @exception SQLException
1:      */
1:     public void testTSvsTXLocks() throws SQLException {
1:         Connection c1 = setConnection("U1");
1:         Statement s1 = c1.createStatement();
1:         Connection c2 = setConnection("U2");
1:         Statement s2 = c2.createStatement();
1: 
1:         setupTable(s1);
1:         c1.commit();
1: 
1:         // -- test TS vs TX locks
1:         s1.executeUpdate("lock table t1 in share mode");
1:         // We expect X0X02 (Table cannot be locked in 'EXLUSIVE' mode) 
1:         // and 40XL1 (A lock could not be obtained within the time requested).
1:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:                 "lock table u1.t1 in exclusive mode");
1:         // verify we still have the lock
1:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"U1", "UserTransaction", "TABLE", "1",
1:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:         });
1:         // verify insert
1:         s1.executeUpdate("insert into t1 values 4");
1:         rs = s1.executeQuery("select count(*) from t1");
1:         JDBC.assertSingleValueResultSet(rs, "2");
1:         s1.executeUpdate("drop table U1.t1");
1:         c1.commit();
1:         s1.close();
1:         s2.close();
1:         c1.close();
1:         c2.rollback();
1:         c2.close();
1:     }
1: 
1:     /**
1:      * Tests LOCK TABLE command - shared vs shared mode
1:      * 
1:      * @exception SQLException
1:      */
1:     public void testTSvsTSLocks() throws SQLException {
1:         Connection c1 = setConnection("U1");
1:         Statement s1 = c1.createStatement();
1:         Connection c2 = setConnection("U2");
1:         Statement s2 = c2.createStatement();
1: 
1:         setupTable(s1);
1:         c1.commit();
1: 
1:         // -- test TS vs TS locks
1:         s1.executeUpdate("lock table t1 in share mode");
1:         // expect success on lock, but now user 1 may not update.
1:         assertUpdateCount(s2, 0, "lock table u1.t1 in share mode");
1:         // verify we have two locks
1:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"U2", "UserTransaction", "TABLE", "1",
1:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"},
1:                 {"U1", "UserTransaction", "TABLE", "1",
1:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"}
1:         });
1:         // verify that with a share lock for user 2 place, user 1 cannot insert
1:         assertStatementError("40XL1", s1, "insert into t1 values 5");
1:         rs = s1.executeQuery("select count(*) from t1");
1:         JDBC.assertSingleValueResultSet(rs, "1");
1:         c2.rollback();
1:         c1.rollback();
1:         s1.executeUpdate("drop table U1.t1");
1:         c1.commit();
1:         s1.close();
1:         s2.close();
1:         c1.close();
1:         c2.close();
1:     }
1: 
1:     /**
1:      * test with rollback.
1:      * 
1:      * @exception SQLException
1:      */
1:     public void testWithRolledBack() throws SQLException {
1:         Connection c1 = setConnection("U1");
1:         Statement s1 = c1.createStatement();
1:         Connection c2 = setConnection("U2");
1:         Statement s2 = c2.createStatement();
1: 
1:         setupTable(s1);
1:         c1.commit();
1: 
1:         // -- create another table
1:         s1.executeUpdate("create table t2(c1 int)");
1:         c1.commit();
1: 
1:         // verify that the user getting error on lock table
1:         // doesn't get rolled back, so other locks remain in  place.
1:         s1.executeUpdate("lock table t1 in share mode");
1:         s2.executeUpdate("lock table u1.t2 in share mode");
1:         // Attempt to lock t1 in exclusive mode, while it has been share-locked.
1:         // We expect X0X02 (Table cannot be locked in 'EXCLUSIVE' mode) 
1:         // and 40XL1 (A lock could not be obtained within the time requested).
1:         assertStatementError(new String[] {"X0X02","40XL1"},s2,
1:                 "lock table u1.t1 in exclusive mode");
1:         // verify the other user still has the lock
1:         ResultSet rs = s1.executeQuery(getSelectLocksString());
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"U1", "UserTransaction", "TABLE", "1",
1:                     "S", "T1", "Tablelock", "GRANT", "ACTIVE"},
1:                 {"U2", "UserTransaction", "TABLE", "1",
1:                     "S", "T2", "Tablelock", "GRANT", "ACTIVE"}
1:         });
1:         c2.rollback();
1:         c1.rollback();
1:         s1.executeUpdate("drop table U1.t2");
1:         s1.executeUpdate("drop table U1.t1");
1:         c1.commit();
1:         s1.close();
1:         s2.close();
1:         c1.close();
1:         c2.close();
1:     }
1: }
============================================================================