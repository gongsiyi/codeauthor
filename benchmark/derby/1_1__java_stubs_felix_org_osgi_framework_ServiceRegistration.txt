1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceRegistration.java,v 1.14 2007/02/21 16:49:05 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.Dictionary;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A registered service.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The Framework returns a <code>ServiceRegistration</code> object when a
1:a8b6921:  * <code>BundleContext.registerService</code> method invocation is successful.
1:a8b6921:  * The <code>ServiceRegistration</code> object is for the private use of the
1:a8b6921:  * registering bundle and should not be shared with other bundles.
1:a8b6921:  * <p>
1:a8b6921:  * The <code>ServiceRegistration</code> object may be used to update the
1:a8b6921:  * properties of the service or to unregister the service.
1:a8b6921:  * 
1:a8b6921:  * @see BundleContext#registerService(String[],Object,Dictionary)
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.14 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface ServiceRegistration {
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a <code>ServiceReference</code> object for a service being
1:a8b6921: 	 * registered.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The <code>ServiceReference</code> object may be shared with other
1:a8b6921: 	 * bundles.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this
1:a8b6921: 	 *         <code>ServiceRegistration</code> object has already been
1:a8b6921: 	 *         unregistered.
1:a8b6921: 	 * @return <code>ServiceReference</code> object.
1:a8b6921: 	 */
1:a8b6921: 	public ServiceReference getReference();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Updates the properties associated with a service.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The {@link Constants#OBJECTCLASS} and {@link Constants#SERVICE_ID} keys
1:a8b6921: 	 * cannot be modified by this method. These values are set by the Framework
1:a8b6921: 	 * when the service is registered in the OSGi environment.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to modify service properties:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>The service's properties are replaced with the provided properties.
1:a8b6921: 	 * <li>A service event of type {@link ServiceEvent#MODIFIED} is
1:a8b6921: 	 * fired.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param properties The properties for this service. See {@link Constants}
1:a8b6921: 	 *        for a list of standard service property keys. Changes should not
1:a8b6921: 	 *        be made to this object after calling this method. To update the
1:a8b6921: 	 *        service's properties this method should be called again.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws IllegalStateException If this <code>ServiceRegistration</code>
1:a8b6921: 	 *         object has already been unregistered.
1:a8b6921: 	 * @throws IllegalArgumentException If <code>properties</code> contains
1:a8b6921: 	 *         case variants of the same key name.
1:a8b6921: 	 */
1:a8b6921: 	public void setProperties(Dictionary properties);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Unregisters a service. Remove a <code>ServiceRegistration</code> object
1:a8b6921: 	 * from the Framework service registry. All <code>ServiceReference</code>
1:a8b6921: 	 * objects associated with this <code>ServiceRegistration</code> object
1:a8b6921: 	 * can no longer be used to interact with the service.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to unregister a service:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>The service is removed from the Framework service registry so that
1:a8b6921: 	 * it can no longer be used. <code>ServiceReference</code> objects for the
1:a8b6921: 	 * service may no longer be used to get a service object for the service.
1:a8b6921: 	 * <li>A service event of type {@link ServiceEvent#UNREGISTERING} is
1:a8b6921: 	 * fired so that bundles using this service can release their
1:a8b6921: 	 * use of it.
1:a8b6921: 	 * <li>For each bundle whose use count for this service is greater than
1:a8b6921: 	 * zero: <br>
1:a8b6921: 	 * The bundle's use count for this service is set to zero. <br>
1:a8b6921: 	 * If the service was registered with a {@link ServiceFactory} object, the
1:a8b6921: 	 * <code>ServiceFactory.ungetService</code> method is called to release
1:a8b6921: 	 * the service object for the bundle.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this
1:a8b6921: 	 *         <code>ServiceRegistration</code> object has already been
1:a8b6921: 	 *         unregistered.
1:a8b6921: 	 * @see BundleContext#ungetService
1:a8b6921: 	 * @see ServiceFactory#ungetService
1:a8b6921: 	 */
1:a8b6921: 	public void unregister();
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceRegistration.java,v 1.14 2007/02/21 16:49:05 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.util.Dictionary;
1: 
1: /**
1:  * A registered service.
1:  * 
1:  * <p>
1:  * The Framework returns a <code>ServiceRegistration</code> object when a
1:  * <code>BundleContext.registerService</code> method invocation is successful.
1:  * The <code>ServiceRegistration</code> object is for the private use of the
1:  * registering bundle and should not be shared with other bundles.
1:  * <p>
1:  * The <code>ServiceRegistration</code> object may be used to update the
1:  * properties of the service or to unregister the service.
1:  * 
1:  * @see BundleContext#registerService(String[],Object,Dictionary)
1:  * @ThreadSafe
1:  * @version $Revision: 1.14 $
1:  */
1: 
1: public interface ServiceRegistration {
1: 	/**
1: 	 * Returns a <code>ServiceReference</code> object for a service being
1: 	 * registered.
1: 	 * <p>
1: 	 * The <code>ServiceReference</code> object may be shared with other
1: 	 * bundles.
1: 	 * 
1: 	 * @throws java.lang.IllegalStateException If this
1: 	 *         <code>ServiceRegistration</code> object has already been
1: 	 *         unregistered.
1: 	 * @return <code>ServiceReference</code> object.
1: 	 */
1: 	public ServiceReference getReference();
1: 
1: 	/**
1: 	 * Updates the properties associated with a service.
1: 	 * 
1: 	 * <p>
1: 	 * The {@link Constants#OBJECTCLASS} and {@link Constants#SERVICE_ID} keys
1: 	 * cannot be modified by this method. These values are set by the Framework
1: 	 * when the service is registered in the OSGi environment.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to modify service properties:
1: 	 * <ol>
1: 	 * <li>The service's properties are replaced with the provided properties.
1: 	 * <li>A service event of type {@link ServiceEvent#MODIFIED} is
1: 	 * fired.
1: 	 * </ol>
1: 	 * 
1: 	 * @param properties The properties for this service. See {@link Constants}
1: 	 *        for a list of standard service property keys. Changes should not
1: 	 *        be made to this object after calling this method. To update the
1: 	 *        service's properties this method should be called again.
1: 	 * 
1: 	 * @throws IllegalStateException If this <code>ServiceRegistration</code>
1: 	 *         object has already been unregistered.
1: 	 * @throws IllegalArgumentException If <code>properties</code> contains
1: 	 *         case variants of the same key name.
1: 	 */
1: 	public void setProperties(Dictionary properties);
1: 
1: 	/**
1: 	 * Unregisters a service. Remove a <code>ServiceRegistration</code> object
1: 	 * from the Framework service registry. All <code>ServiceReference</code>
1: 	 * objects associated with this <code>ServiceRegistration</code> object
1: 	 * can no longer be used to interact with the service.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to unregister a service:
1: 	 * <ol>
1: 	 * <li>The service is removed from the Framework service registry so that
1: 	 * it can no longer be used. <code>ServiceReference</code> objects for the
1: 	 * service may no longer be used to get a service object for the service.
1: 	 * <li>A service event of type {@link ServiceEvent#UNREGISTERING} is
1: 	 * fired so that bundles using this service can release their
1: 	 * use of it.
1: 	 * <li>For each bundle whose use count for this service is greater than
1: 	 * zero: <br>
1: 	 * The bundle's use count for this service is set to zero. <br>
1: 	 * If the service was registered with a {@link ServiceFactory} object, the
1: 	 * <code>ServiceFactory.ungetService</code> method is called to release
1: 	 * the service object for the bundle.
1: 	 * </ol>
1: 	 * 
1: 	 * @throws java.lang.IllegalStateException If this
1: 	 *         <code>ServiceRegistration</code> object has already been
1: 	 *         unregistered.
1: 	 * @see BundleContext#ungetService
1: 	 * @see ServiceFactory#ungetService
1: 	 */
1: 	public void unregister();
1: }
============================================================================