1:eac0369: /*
1:6ae3022: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.info.JVMInfo
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
4:eac0369:  */
14:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.info;
1:1a4ea31: 
1:4c5c16b: import java.lang.reflect.InvocationTargetException;
1:4c5c16b: import java.lang.reflect.Method;
1:4c5c16b: import java.net.MalformedURLException;
1:4c5c16b: import java.security.AccessController;
1:4c5c16b: import java.security.PrivilegedExceptionAction;
1:4c5c16b: 
1:f1de502: // As an exception to the rule we import SanityManager from the shared package
1:f1de502: // here, because the JVMInfo class is included in both derby.jar and
1:f1de502: // derbyclient.jar. Pulling in the class from the shared package allows us to
1:f1de502: // unseal the shared package only (leaving iapi.services.sanity sealed).
1:f1de502: import org.apache.derby.shared.common.sanity.SanityManager;
1:4c5c16b: 
4:eac0369: /**
1:05e9c29: 	This class is used to determine which Java specification Derby will run at.
1:05e9c29:     For a useful discussion of how this class is used, please see DERBY-3176.
1:eac0369:  */
1:eac0369: public abstract class JVMInfo
1:b6cdb88: {
1:6ae3022: 	/**
1:eac0369: 		The JVM's runtime environment.
1:eac0369: 		<UL>
1:6ae3022: 		<LI> 1 - not used was JDK 1.1
1:05e9c29: 		<LI> 2 - not used, was for JDK 1.2 and 1.3
1:923a60f:         <LI> 4 - not used, was for JDK 1.4.0 or 1.4.1
1:923a60f:         <LI> 5 - not used, was for JDK 1.4.2
1:923a60f:         <LI> 6 - not used, was for JDK 1.5
1:0d57d84:         <LI> 7 - not used, was for JDK 1.6
1:0d57d84:         <LI> 8 - not used, was for JDK 1.7
1:88fc5dd:         <LI> 9 - J2SE_18 - JDK 1.8
1:eac0369: 		</UL>
1:eac0369: 	*/
1:eac0369: 	public static final int JDK_ID;
1:6ae3022: 
1:0d57d84:     public static final int J2SE_18 = 9;   // Java SE 8
1:6ae3022: 
1:b6cdb88:     public static int jdbcMajorVersion()
1:38c638d:     { 
1:b6cdb88:         return 4; 
1:38c638d:     }
1:b6cdb88: 
1:b6cdb88:     public static int jdbcMinorVersion()
1:38c638d:     {
1:b6cdb88:         switch (JDK_ID)
1:38c638d:         { 
1:b6cdb88:         case J2SE_18: 
1:b6cdb88:         default: return 2; 
1:38c638d:         }
1:38c638d:     } 
1:b6cdb88: 
1:eac0369: 	static 
1:38c638d: 	{
1:eac0369: 		int id;
1:4e0e1f1: 
1:6ae3022: 		//
1:eac0369: 		// If the property java.specification.version is set, then try to parse
1:eac0369: 		// that.  Anything we don't recognize, default to Java 2 platform
1:eac0369: 		// because java.specification.version is a property that is introduced
1:eac0369: 		// in Java 2.  We hope that JVM vendors don't implement Java 1 and
1:eac0369: 		// set a Java 2 system property.
2:eac0369: 		// 
1:eac0369: 		// Otherwise, see if we recognize what is set in java.version.
1:c769b62: 		// If we don't recognize that, or if the property is not set, assume
1:0d57d84:         // version 1.8, which is the lowest level we support.
1:eac0369: 		//
1:0d57d84:         String javaVersion = "1.8";
1:6ae3022: 		try {
1:923a60f:             javaVersion =
1:0d57d84:                 System.getProperty("java.specification.version", javaVersion);
1:6ae3022: 		} catch (SecurityException se) {
1:6ae3022: 			// some vms do not know about this property so they
1:6ae3022: 			// throw a security exception when access is restricted.
1:38c638d: 		}
1:6ae3022: 
1:0d57d84:         if (javaVersion.equals("1.8")) {
1:38c638d:             id = J2SE_18;
1:38c638d:         }
2:38c638d:         else
1:38c638d:         {
1:923a60f:             // Assume our lowest support unless the java spec
1:38c638d:             // is greater than our highest level.
1:0d57d84:             id = J2SE_18;
1:38c638d: 
1:38c638d:             try {
1:6ae3022: 
1:c40b7ed:                 // Extract major and minor version out of the spec version.
1:c40b7ed:                 String[] ver = javaVersion.split("[.]");
1:c40b7ed:                 int major = ver.length >= 1 ? Integer.parseInt(ver[0]) : 0;
1:c40b7ed:                 int minor = ver.length >= 2 ? Integer.parseInt(ver[1]) : 0;
1:c40b7ed: 
1:c40b7ed:                 // The highest level currently supported is 1.8. Use that
1:c40b7ed:                 // level if the spec version is greater than or equal to it.
1:c40b7ed:                 final int highestMajor = 1;
1:c40b7ed:                 final int highestMinor = 8;
1:c40b7ed:                 if (major > highestMajor ||
1:c40b7ed:                         (major == highestMajor && minor >= highestMinor)) {
1:38c638d:                     id = J2SE_18;
1:c40b7ed:                 }
1:c40b7ed: 
1:38c638d:             } catch (NumberFormatException nfe) {
1:38c638d:             }
1:b6cdb88:         }
1:6ae3022: 
1:eac0369: 		JDK_ID = id;
1:b6cdb88: 	}
1:eac0369: 
1:4e0e1f1: 	/**
1:6ae3022: 		Return Derby's understanding of the virtual machine's environment.
1:6ae3022: 	*/
1:6ae3022: 	public static String derbyVMLevel()
1:b6cdb88: 	{
1:b6cdb88: 		String jdbcVersion = jdbcMajorVersion() + "." + jdbcMinorVersion();
1:6ae3022: 		switch (JDK_ID)
1:b6cdb88: 		{
1:b6cdb88:         case J2SE_18: return "Java SE 8 - JDBC " + jdbcVersion;
1:6ae3022: 		default: return "?-?";
1:b6cdb88: 		}
1:dc43cf8: 	}
1:05e9c29: 
1:4c5c16b:     /**
1:4c5c16b:      * Get system property.
1:4c5c16b:      *
1:4c5c16b:      * @param name name of the property
1:4c5c16b:      */
1:4c5c16b:     private static String getSystemProperty(final String name) {
1:4c5c16b:         
1:996ca72:         return AccessController
1:996ca72:                 .doPrivileged(new java.security.PrivilegedAction<String>() {
1:4c5c16b:                     
1:996ca72:                     public String run() {
1:4c5c16b:                         return System.getProperty(name);
1:4c5c16b:                         
1:88fc5dd:                     }
1:4c5c16b:                     
1:4c5c16b:                 });
1:4c5c16b:     }
1:4c5c16b:     
1:4c5c16b:     /**
1:4c5c16b:      * Check whether this is sun jvm.
1:4c5c16b:      *
1:4c5c16b:      * @return true if it is sun jvm, false if it is not sun jvm
1:4c5c16b:      */
1:4c5c16b:     public static final boolean isSunJVM() {
1:4c5c16b:         String vendor = getSystemProperty("java.vendor");
1:4c5c16b:         return "Sun Microsystems Inc.".equals(vendor)
1:4c5c16b:                 || "Oracle Corporation".equals(vendor);
1:4c5c16b:     }
1:4c5c16b:     
1:4c5c16b:     /**
1:4c5c16b:      * Check whether this is IBM jvm.
1:4c5c16b:      *
1:4c5c16b:      * @return true if it is IBM jvm, false if it is not IBM jvm
1:4c5c16b:      */
1:4c5c16b:     public static final boolean isIBMJVM() {
1:4c5c16b:         return ("IBM Corporation".equals(getSystemProperty("java.vendor")));
1:4c5c16b:     }
1:4c5c16b:     
1:4c5c16b:     /**
1:4c5c16b:      * For IBM jvm, this method will dump more diagnostic information to file.
1:4c5c16b:      * JVM specific code for other vender can be added. DERBY-4856 
1:4c5c16b:      *  
1:4c5c16b:      */
1:4c5c16b:     public static void javaDump() {
1:4c5c16b:         if (isIBMJVM()) {
1:996ca72:             Class<?> ibmc = null;
1:4c5c16b:             try {
1:4c5c16b:                 ibmc = Class.forName("com.ibm.jvm.Dump");
1:996ca72:                 final Method ibmm = ibmc.getMethod("JavaDump", new Class<?>[] {});
1:4c5c16b:                 
1:996ca72:                 AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
1:4c5c16b:                     public Object run() throws IllegalAccessException,
1:4c5c16b:                             MalformedURLException, InstantiationException,
1:4c5c16b:                             InvocationTargetException {
1:4c5c16b:                         return ibmm.invoke(null, new Object[] {});
1:4c5c16b:                     }
1:4c5c16b:                 });
1:4c5c16b:             } catch (Exception e) {
1:4c5c16b:                 if (SanityManager.DEBUG) {
1:4c5c16b:                     SanityManager
1:4c5c16b:                             .THROWASSERT(
1:4c5c16b:                                     "Failed to execute com.ibm.jvm.Dump.JavaDump in IBM JVM",
1:4c5c16b:                                     e);
1:4c5c16b:                 }
1:4c5c16b:             }
1:4c5c16b:         }
1:4c5c16b:     }
1:eac0369: 
1:eac0369:     /**
1:4e0e1f1:      * Determine whether we are running in a constrained environment.
1:4e0e1f1:      * @return true if JNDI is available
1:4e0e1f1:      */
1:4e0e1f1:     public static boolean hasJNDI() {
1:4e0e1f1:         try {
1:4e0e1f1:             Class.forName("javax.naming.Referenceable");
1:4e0e1f1:         } catch (ClassNotFoundException e) {
1:4e0e1f1:             return false;
1:4e0e1f1:         }
1:4e0e1f1:         return true;
1:4e0e1f1:     }
1:4c5c16b: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0d57d84
/////////////////////////////////////////////////////////////////////////
1:         <LI> 7 - not used, was for JDK 1.6
1:         <LI> 8 - not used, was for JDK 1.7
1:     public static final int J2SE_18 = 9;   // Java SE 8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // version 1.8, which is the lowest level we support.
1:         String javaVersion = "1.8";
1:                 System.getProperty("java.specification.version", javaVersion);
1:         if (javaVersion.equals("1.8")) {
1:             id = J2SE_18;
/////////////////////////////////////////////////////////////////////////
commit:c40b7ed
/////////////////////////////////////////////////////////////////////////
1:                 // Extract major and minor version out of the spec version.
1:                 String[] ver = javaVersion.split("[.]");
1:                 int major = ver.length >= 1 ? Integer.parseInt(ver[0]) : 0;
1:                 int minor = ver.length >= 2 ? Integer.parseInt(ver[1]) : 0;
1: 
1:                 // The highest level currently supported is 1.8. Use that
1:                 // level if the spec version is greater than or equal to it.
1:                 final int highestMajor = 1;
1:                 final int highestMinor = 8;
1:                 if (major > highestMajor ||
1:                         (major == highestMajor && minor >= highestMinor)) {
1:                 }
1: 
commit:923a60f
/////////////////////////////////////////////////////////////////////////
1:         <LI> 4 - not used, was for JDK 1.4.0 or 1.4.1
1:         <LI> 5 - not used, was for JDK 1.4.2
1:         <LI> 6 - not used, was for JDK 1.5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         // version 1.6, which is the lowest level we support.
1:             javaVersion =
0:                 System.getProperty("java.specification.version", "1.6");
0:             javaVersion = "1.6";
0:         if (javaVersion.equals("1.6"))
/////////////////////////////////////////////////////////////////////////
1:             // Assume our lowest support unless the java spec
0:             id = J2SE_16;
/////////////////////////////////////////////////////////////////////////
commit:38c638d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (javaVersion.equals("1.4"))
1:         {
0:             String vmVersion = System.getProperty("java.version", "1.4.0");
0:             if (JVMInfo.vmCheck(vmVersion, "1.4.0") || JVMInfo.vmCheck(vmVersion, "1.4.1"))
0:                 id = J2SE_14;
1:             else
0:                 id = J2SE_142;
1:         }
0:         else if (javaVersion.equals("1.5"))
1:         {
0:             id = J2SE_15;
1:         }
0:         else if (javaVersion.equals("1.6"))
1:         {
0:             id = J2SE_16;
1:         }
0:         else if (javaVersion.equals("1.7"))
1:         {
0:             id = J2SE_17;
1:         }
0:         else if (javaVersion.equals("1.8")) {
1:             id = J2SE_18;
1:         }
1:         else
1:         {
0:             // aussme our lowest support unless the java spec
1:             // is greater than our highest level.
0:             id = J2SE_14;
1:             try {
1: 
0:                 if (Float.parseFloat(javaVersion) > 1.8f)
1:                     id = J2SE_18;
1:             } catch (NumberFormatException nfe) {
1:         }
/////////////////////////////////////////////////////////////////////////
0: 		case J2SE_14: return "J2SE 1.4 - JDBC 3.0";
commit:dcfe164
/////////////////////////////////////////////////////////////////////////
0:              javaSpec.startsWith("CDC")  || // Oracle Java ME Embedded Client
commit:c769b62
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		// If we don't recognize that, or if the property is not set, assume
0: 		// version 1.4.
/////////////////////////////////////////////////////////////////////////
commit:8801b76
/////////////////////////////////////////////////////////////////////////
0: 	public static final int J2SE_16 = 7; // Java SE 6, not J2SE
/////////////////////////////////////////////////////////////////////////
0: 		case J2SE_16: return "Java SE 6 - JDBC 4.0";
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:b6cdb88
/////////////////////////////////////////////////////////////////////////
1:     public static int jdbcMajorVersion()
1:     { 
1:         return 4; 
1:     }
1: 
1:     public static int jdbcMinorVersion()
1:     {
1:         switch (JDK_ID)
1:         { 
0:         case J2SE_16: return 0; 
0:         case J2SE_17: return 1; 
1:         case J2SE_18: 
1:         default: return 2; 
1:         }
1:     } 
1: 
/////////////////////////////////////////////////////////////////////////
1: 		String jdbcVersion = jdbcMajorVersion() + "." + jdbcMinorVersion();
0:         case J2SE_16: return "Java SE 6 - JDBC " + jdbcVersion;
0:         case J2SE_17: return "Java SE 7 - JDBC " + jdbcVersion;
1:         case J2SE_18: return "Java SE 8 - JDBC " + jdbcVersion;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1:         return AccessController
1:                 .doPrivileged(new java.security.PrivilegedAction<String>() {
1:                     public String run() {
/////////////////////////////////////////////////////////////////////////
1:             Class<?> ibmc = null;
1:                 final Method ibmm = ibmc.getMethod("JavaDump", new Class<?>[] {});
1:                 AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
commit:05e9c29
/////////////////////////////////////////////////////////////////////////
1: 	This class is used to determine which Java specification Derby will run at.
1:     For a useful discussion of how this class is used, please see DERBY-3176.
/////////////////////////////////////////////////////////////////////////
1: 		<LI> 2 - not used, was for JDK 1.2 and 1.3
0: 		<LI> 7 - J2SE_16 - JDK 1.6
/////////////////////////////////////////////////////////////////////////
0: 			javaVersion = System.getProperty("java.specification.version", "1.4");
0: 			javaVersion = "1.4";
0: 		if (javaSpec != null &&
0:             (
0:              javaSpec.startsWith("J2ME") || // recognize IBM WCTME
0:              (
0:               (javaSpec.indexOf( "Profile" ) > -1) && // recognize phoneME
0:               (javaSpec.indexOf( "Specification" ) > -1)
0:              )
0:             )
0:             )
0: 			id = J2SE_14;
/////////////////////////////////////////////////////////////////////////
0: 			if (javaVersion.equals("1.4"))
/////////////////////////////////////////////////////////////////////////
0: 				id = J2SE_14;
/////////////////////////////////////////////////////////////////////////
0: 		case J2SE_14: return J2ME ? "J2ME - JDBC for CDC/FP 1.1" : "J2SE 1.4 - JDBC 3.0";
1: 
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:4e0e1f1
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Determine whether we are running in a constrained environment.
1:      * @return true if JNDI is available
1:      */
1:     public static boolean hasJNDI() {
1:         try {
1:             Class.forName("javax.naming.Referenceable");
1:         } catch (ClassNotFoundException e) {
1:             return false;
1:         }
1:         return true;
1:     }
commit:c69a529
/////////////////////////////////////////////////////////////////////////
0:         <LI> 8 - J2SE_17 - JDK 1.7
/////////////////////////////////////////////////////////////////////////
0:         case J2SE_16: return "Java SE 6 - JDBC 4.1";
0:         case J2SE_17: return "Java SE 7 - JDBC 4.1";
commit:dc43cf8
/////////////////////////////////////////////////////////////////////////
0:     public static final int J2SE_17 = 8; // Java SE 7
/////////////////////////////////////////////////////////////////////////
0:             else if (javaVersion.equals("1.7"))
0:             {
0:                 id = J2SE_17;
1:             }
/////////////////////////////////////////////////////////////////////////
0:                     if (Float.parseFloat(javaVersion) > 1.7f)
0:                         id = J2SE_17;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:88fc5dd
/////////////////////////////////////////////////////////////////////////
1:         <LI> 9 - J2SE_18 - JDK 1.8
/////////////////////////////////////////////////////////////////////////
0:     public static final int J2SE_18 = 9;
/////////////////////////////////////////////////////////////////////////
0:             else if (javaVersion.equals("1.8")) {
0:                 id = J2SE_18;
1:             }
/////////////////////////////////////////////////////////////////////////
0:                     if (Float.parseFloat(javaVersion) > 1.8f)
0:                         id = J2SE_18;
/////////////////////////////////////////////////////////////////////////
0:         case J2SE_18: return "Java SE 8 - JDBC 4.1";
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:f1de502
/////////////////////////////////////////////////////////////////////////
1: // As an exception to the rule we import SanityManager from the shared package
1: // here, because the JVMInfo class is included in both derby.jar and
1: // derbyclient.jar. Pulling in the class from the shared package allows us to
1: // unseal the shared package only (leaving iapi.services.sanity sealed).
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:8b6fe4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
commit:d14e499
/////////////////////////////////////////////////////////////////////////
0: 					if (Float.valueOf(javaVersion).floatValue() > 1.6f)
0: 						id = J2SE_16;
author:Lily Wei
-------------------------------------------------------------------------------
commit:eb7e251
/////////////////////////////////////////////////////////////////////////
0: 					if (Float.parseFloat(javaVersion) > 1.6f)
commit:4c5c16b
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.net.MalformedURLException;
1: import java.security.AccessController;
1: import java.security.PrivilegedExceptionAction;
1: 
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get system property.
1:      *
1:      * @param name name of the property
1:      */
1:     private static String getSystemProperty(final String name) {
1:         
0:         return (String) AccessController
0:                 .doPrivileged(new java.security.PrivilegedAction() {
1:                     
0:                     public Object run() {
1:                         return System.getProperty(name);
1:                         
1:                     }
1:                     
1:                 });
1:     }
1:     
1:     /**
1:      * Check whether this is sun jvm.
1:      *
1:      * @return true if it is sun jvm, false if it is not sun jvm
1:      */
1:     public static final boolean isSunJVM() {
1:         String vendor = getSystemProperty("java.vendor");
1:         return "Sun Microsystems Inc.".equals(vendor)
1:                 || "Oracle Corporation".equals(vendor);
1:     }
1:     
1:     /**
1:      * Check whether this is IBM jvm.
1:      *
1:      * @return true if it is IBM jvm, false if it is not IBM jvm
1:      */
1:     public static final boolean isIBMJVM() {
1:         return ("IBM Corporation".equals(getSystemProperty("java.vendor")));
1:     }
1:     
1:     /**
1:      * For IBM jvm, this method will dump more diagnostic information to file.
1:      * JVM specific code for other vender can be added. DERBY-4856 
1:      *  
1:      */
1:     public static void javaDump() {
1:         if (isIBMJVM()) {
0:             Class ibmc = null;
1:             try {
1:                 ibmc = Class.forName("com.ibm.jvm.Dump");
0:                 final Method ibmm = ibmc.getMethod("JavaDump", new Class[] {});
1:                 
0:                 AccessController.doPrivileged(new PrivilegedExceptionAction() {
1:                     public Object run() throws IllegalAccessException,
1:                             MalformedURLException, InstantiationException,
1:                             InvocationTargetException {
1:                         return ibmm.invoke(null, new Object[] {});
1:                     }
1:                 });
1:             } catch (Exception e) {
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager
1:                             .THROWASSERT(
1:                                     "Failed to execute com.ibm.jvm.Dump.JavaDump in IBM JVM",
1:                                     e);
1:                 }
1:             }
1:         }
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
0: 			Types.BOOLEAN :java.sql.Types.BIT;
commit:6ae3022
/////////////////////////////////////////////////////////////////////////
1: 		<LI> 1 - not used was JDK 1.1
0: 		<LI> 2 - J2SE_13- JDK 1.2, 1.3
0: 		<LI> 4 - J2SE_14 - JDK 1.4.0 or 1.4.1
0: 		<LI> 5 - J2SE_142 - JDK 1.4.2
0: 		<LI> 6 - J2SE_15 - JDK 1.5
0: 	public static final int J2SE_13 = 2;
0: 	public static final int J2SE_14 = 4;
0: 	public static final int J2SE_142 = 5;
0: 	public static final int J2SE_15 = 6; // aka J2SE 5.0
1: 
0: 	public static final boolean J2ME;
1: 
/////////////////////////////////////////////////////////////////////////
0: 		String javaSpec;
0: 		boolean isJ2ME;
1: 
1: 		try {
0: 			javaSpec = System.getProperty("java.specification.name");
1: 		} catch (SecurityException se) {
1: 			// some vms do not know about this property so they
1: 			// throw a security exception when access is restricted.
0: 			javaSpec = null;
0: 		}
/////////////////////////////////////////////////////////////////////////
0: 		if (javaSpec != null && javaSpec.startsWith("J2ME"))
0: 			// IBM's WCTME 5.7 returns these values for CDC 1.0 profiles.
0: 			// "J2ME Foundation Specification"
1: 			//
0: 			// Foundation 1.0 and Personal Profile 1.0 based
0: 			// upon CDC 1.0 which is JDK 1.3 based
0: 			id = J2SE_13;
0: 			isJ2ME = true;
0: 			// J2SE/J2EE
0: 			isJ2ME = false;
0: 			if (javaVersion.equals("1.2") || javaVersion.equals("1.3"))
0: 			{	
0: 				id = J2SE_13; //jdk1.3 is still Java2 platform with the same API
0: 			}
0: 			else if (javaVersion.equals("1.4"))
0: 			{
0: 				String vmVersion = System.getProperty("java.version", "1.4.0");
0: 				if (JVMInfo.vmCheck(vmVersion, "1.4.0") || JVMInfo.vmCheck(vmVersion, "1.4.1"))
0: 					id = J2SE_14;
0: 				else
0: 					id = J2SE_142;
0: 			}
0: 			else if (javaVersion.equals("1.5"))
0: 			{
0: 				id = J2SE_15;
0: 			}
0: 			else
0: 			{
0: 				// aussme our lowest support unless the java spec
0: 				// is greater than our highest level.
0: 				id = J2SE_13;
1: 
0: 				try {
1: 
0: 					if (Float.valueOf(javaVersion).floatValue() > 1.4f)
0: 						id = 5;
0: 				} catch (NumberFormatException nfe) {
0: 				}
0: 		J2ME = isJ2ME;
0: 		JAVA_SQL_TYPES_BOOLEAN = (isJ2ME || id >= J2SE_14) ?
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 		Return Derby's understanding of the virtual machine's environment.
1: 	*/
1: 	public static String derbyVMLevel()
0: 	{
1: 		switch (JDK_ID)
0: 		{
0: 		case J2SE_13: return J2ME ? "J2ME - JDBC for CDC/FP 1.0" : "J2SE 1.3 - JDBC 2.1";
0: 		case J2SE_14: return "J2SE 1.4 - JDBC 3.0";
0: 		case J2SE_142: return "J2SE 1.4.2 - JDBC 3.0";
0: 		case J2SE_15: return "J2SE 5.0 - JDBC 3.0";
1: 		default: return "?-?";
0: 		}
0: 	}
commit:8bf0832
/////////////////////////////////////////////////////////////////////////
0: 		<LI> 6 - JDK 1.5
/////////////////////////////////////////////////////////////////////////
0:         else if (javaVersion.equals("1.5"))
0:         {
0:             id = 6;
0:         }
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.info.JVMInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.info
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.info;
1: 
1: 
1: /**
0: 	What's the current JDK runtime environment.
1:  */
1: public abstract class JVMInfo
0: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 		The JVM's runtime environment.
1: 		<UL>
0: 		<LI> 1 - JDK 1.1
0: 		<LI> 2 - JDK 1.2, 1.3
0: 		<LI> 4 - JDK 1.4.0 or 1.4.1
0: 		<LI> 5 - JDK 1.4.2
1: 		</UL>
0: 		@return The JVM's runtime environment.
1: 	*/
1: 	public static final int JDK_ID;
1: 
1: 	/**
0:     JDBC Boolean type - Types.BIT in JDK1.1 & 1.2 & 1.3, Types.BOOLEAN in JDK1.4
1: 	*/
0: 	public static final int JAVA_SQL_TYPES_BOOLEAN;
1: 
1: 	static 
0: 	{
1: 		int id;
1: 
1: 		//
1: 		// If the property java.specification.version is set, then try to parse
1: 		// that.  Anything we don't recognize, default to Java 2 platform
1: 		// because java.specification.version is a property that is introduced
1: 		// in Java 2.  We hope that JVM vendors don't implement Java 1 and
1: 		// set a Java 2 system property.
1: 		// 
1: 		// Otherwise, see if we recognize what is set in java.version.
0: 		// If we don't recoginze that, or if the property is not set, assume
0: 		// version 1.3.
1: 		//
0: 		String javaVersion;
1: 
0: 		try {
0: 			javaVersion = System.getProperty("java.specification.version", "1.3");
1: 
0: 		} catch (SecurityException se) {
0: 			// some vms do not know about this property so they
0: 			// throw a security exception when access is restricted.
0: 			javaVersion = "1.3";
0: 		}
1: 
0: 		if (javaVersion.equals("1.2") || javaVersion.equals("1.3"))
0: 		{	
0: 			id = 2; //jdk1.3 is still Java2 platform with the same API
0: 		}
0: 		else if (javaVersion.equals("1.4"))
0: 		{
0: 			String vmVersion = System.getProperty("java.version", "1.4.0");
1: 
0: 			if (JVMInfo.vmCheck(vmVersion, "1.4.0") || JVMInfo.vmCheck(vmVersion, "1.4.1"))
0: 				id = 4;
0: 			else
0: 				id = 5;
0: 		}
0: 		else
0: 		{
0: 			// aussme our lowest support unless the java spec
0: 			// is greater than our highest level.
0: 			id = 2;
1: 
0: 			try {
1: 
0: 				if (Float.valueOf(javaVersion).floatValue() > 1.4f)
0: 					id = 5;
0: 			} catch (NumberFormatException nfe) {
0: 			}
0: 		}
1: 
1: 		JDK_ID = id;
0: 		JAVA_SQL_TYPES_BOOLEAN = (id >= 4) ?
0: 			org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN :java.sql.Types.BIT;
0: 	}
1: 
1: 	/**
0: 		Check the vmVersion against a speciifc value.
0: 		Sun jvms are of the form
1: 	*/
0: 	private static boolean vmCheck(String vmVersion, String id)
0: 	{
0: 		return vmVersion.equals(id) || vmVersion.startsWith(id + "_");
0: 	}
0: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:660d738
/////////////////////////////////////////////////////////////////////////
0: 	public static final int J2SE_16 = 7; 
/////////////////////////////////////////////////////////////////////////
0: 			else if (javaVersion.equals("1.6"))
0: 			{
0: 				id = J2SE_16;
0: 			}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.info
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.info;
0: 
0: 
0: /**
0: 	What's the current JDK runtime environment.
0:  */
0: public abstract class JVMInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 		The JVM's runtime environment.
0: 		<UL>
0: 		<LI> 1 - JDK 1.1
0: 		<LI> 2 - JDK 1.2, 1.3
0: 		<LI> 4 - JDK 1.4.0 or 1.4.1
0: 		<LI> 5 - JDK 1.4.2
0: 		</UL>
0: 		@return The JVM's runtime environment.
0: 	*/
0: 	public static final int JDK_ID;
0: 
0: 	/**
0:     JDBC Boolean type - Types.BIT in JDK1.1 & 1.2 & 1.3, Types.BOOLEAN in JDK1.4
0: 	*/
0: 	public static final int JAVA_SQL_TYPES_BOOLEAN;
0: 
0: 	static 
0: 	{
0: 		int id;
0: 
0: 		//
0: 		// If the property java.specification.version is set, then try to parse
0: 		// that.  Anything we don't recognize, default to Java 2 platform
0: 		// because java.specification.version is a property that is introduced
0: 		// in Java 2.  We hope that JVM vendors don't implement Java 1 and
0: 		// set a Java 2 system property.
0: 		// 
0: 		// Otherwise, see if we recognize what is set in java.version.
0: 		// If we don't recoginze that, or if the property is not set, assume
0: 		// version 1.3.
0: 		//
0: 		String javaVersion;
0: 
0: 		try {
0: 			javaVersion = System.getProperty("java.specification.version", "1.3");
0: 
0: 		} catch (SecurityException se) {
0: 			// some vms do not know about this property so they
0: 			// throw a security exception when access is restricted.
0: 			javaVersion = "1.3";
0: 		}
0: 
0: 		if (javaVersion.equals("1.2") || javaVersion.equals("1.3"))
0: 		{	
0: 			id = 2; //jdk1.3 is still Java2 platform with the same API
0: 		}
0: 		else if (javaVersion.equals("1.4"))
0: 		{
0: 			String vmVersion = System.getProperty("java.version", "1.4.0");
0: 
0: 			if (JVMInfo.vmCheck(vmVersion, "1.4.0") || JVMInfo.vmCheck(vmVersion, "1.4.1"))
0: 				id = 4;
0: 			else
0: 				id = 5;
0: 		}
0: 		else
0: 		{
0: 			// aussme our lowest support unless the java spec
0: 			// is greater than our highest level.
0: 			id = 2;
0: 
0: 			try {
0: 
0: 				if (Float.valueOf(javaVersion).floatValue() > 1.4f)
0: 					id = 5;
0: 			} catch (NumberFormatException nfe) {
0: 			}
0: 		}
0: 
0: 		JDK_ID = id;
0: 		JAVA_SQL_TYPES_BOOLEAN = (id >= 4) ?
0: 			org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN :java.sql.Types.BIT;
0: 	}
0: 
0: 	/**
0: 		Check the vmVersion against a speciifc value.
0: 		Sun jvms are of the form
0: 	*/
0: 	private static boolean vmCheck(String vmVersion, String id)
0: 	{
0: 		return vmVersion.equals(id) || vmVersion.startsWith(id + "_");
0: 	}
0: }
============================================================================