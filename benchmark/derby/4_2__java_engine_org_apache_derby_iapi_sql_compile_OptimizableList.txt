1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizableList
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * OptimizableList provides services for optimizing a list of
1:eac0369:  * Optimizables (tables) in a query.
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface OptimizableList {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *  Return the number of Optimizables in the list.
3:eac0369: 	 *
1:eac0369: 	 *  @return integer		The number of Optimizables in the list.
1:eac0369: 	 */
1:eac0369: 	public int size();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *  Return the nth Optimizable in the list.
1:eac0369: 	 *
1:eac0369: 	 *  @param n				"index" (0 based) into the list.
1:eac0369: 	 *
1:eac0369: 	 *  @return Optimizable		The nth Optimizables in the list.
1:eac0369: 	 */
1:eac0369: 	public Optimizable getOptimizable(int n);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the nth Optimizable to the specified Optimizable.
1:eac0369: 	 *
1:eac0369: 	 *  @param n				"index" (0 based) into the list.
1:eac0369: 	 *  @param optimizable		New nth Optimizable.
1:eac0369: 	 */
1:eac0369: 	public void setOptimizable(int n, Optimizable optimizable);
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * Verify that the Properties list with optimizer overrides, if specified, is valid
1:eac0369: 	 *
1:eac0369: 	 * @param dDictionary	The DataDictionary to use.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void verifyProperties(DataDictionary dDictionary) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the join order for this list of optimizables.  The join order is
1:eac0369: 	 * represented as an array of integers - each entry in the array stands
1:eac0369: 	 * for the order of the corresponding element in the list.  For example,
1:eac0369: 	 * a joinOrder of {2, 0, 1} means that the 3rd Optimizable in the list
1:eac0369: 	 * (element 2, since we are zero-based) is the first one in the join
1:eac0369: 	 * order, followed by the 1st element in the list, and finally by the
1:eac0369: 	 * 2nd element in the list.
1:eac0369: 	 *
1:eac0369: 	 * This method shuffles this OptimizableList to match the join order.
1:eac0369: 	 *
1:eac0369: 	 * Obviously, the size of the array must equal the number of elements in
1:eac0369: 	 * the array, and the values in the array must be between 0 and the
1:eac0369: 	 * number of elements in the array minus 1, and the values in the array
1:eac0369: 	 * must be unique.
1:eac0369: 	 */
1:eac0369: 	public void reOrder(int[] joinOrder);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * user can specify that s/he doesn't want statistics to be considered when
1:eac0369: 	 * optimizing the query.
1:eac0369: 	 */
1:eac0369: 	public boolean useStatistics();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether the join order should be optimized.
1:eac0369: 	 */
1:eac0369: 	public boolean optimizeJoinOrder();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether the join order is legal.
1:eac0369: 	 */
1:eac0369: 	public boolean legalJoinOrder(int numTablesInQuery);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Init the access paths for these optimizables.
1:eac0369: 	 *
1:eac0369: 	 * @param optimizer The optimizer being used.
1:eac0369: 	 */
1:eac0369: 	public void initAccessPaths(Optimizer optimizer);
1:eac0369: }
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizableList
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: /**
1:  * OptimizableList provides services for optimizing a list of
1:  * Optimizables (tables) in a query.
1:  */
1: 
1: public interface OptimizableList {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 *  Return the number of Optimizables in the list.
1: 	 *
1: 	 *  @return integer		The number of Optimizables in the list.
1: 	 */
1: 	public int size();
1: 
1: 	/**
1: 	 *  Return the nth Optimizable in the list.
1: 	 *
1: 	 *  @param n				"index" (0 based) into the list.
1: 	 *
1: 	 *  @return Optimizable		The nth Optimizables in the list.
1: 	 */
1: 	public Optimizable getOptimizable(int n);
1: 
1: 	/**
1: 	 * Set the nth Optimizable to the specified Optimizable.
1: 	 *
1: 	 *  @param n				"index" (0 based) into the list.
1: 	 *  @param optimizable		New nth Optimizable.
1: 	 *
0: 	 *  @return Nothing.
1: 	 */
1: 	public void setOptimizable(int n, Optimizable optimizable);
1: 
1: 	/** 
1: 	 * Verify that the Properties list with optimizer overrides, if specified, is valid
1: 	 *
1: 	 * @param dDictionary	The DataDictionary to use.
1: 	 *
0: 	 * @return Nothing.
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void verifyProperties(DataDictionary dDictionary) throws StandardException;
1: 
1: 	/**
1: 	 * Set the join order for this list of optimizables.  The join order is
1: 	 * represented as an array of integers - each entry in the array stands
1: 	 * for the order of the corresponding element in the list.  For example,
1: 	 * a joinOrder of {2, 0, 1} means that the 3rd Optimizable in the list
1: 	 * (element 2, since we are zero-based) is the first one in the join
1: 	 * order, followed by the 1st element in the list, and finally by the
1: 	 * 2nd element in the list.
1: 	 *
1: 	 * This method shuffles this OptimizableList to match the join order.
1: 	 *
1: 	 * Obviously, the size of the array must equal the number of elements in
1: 	 * the array, and the values in the array must be between 0 and the
1: 	 * number of elements in the array minus 1, and the values in the array
1: 	 * must be unique.
1: 	 */
1: 	public void reOrder(int[] joinOrder);
1: 
1: 	/**
1: 	 * user can specify that s/he doesn't want statistics to be considered when
1: 	 * optimizing the query.
1: 	 */
1: 	public boolean useStatistics();
1: 
1: 	/**
1: 	 * Tell whether the join order should be optimized.
1: 	 */
1: 	public boolean optimizeJoinOrder();
1: 
1: 	/**
1: 	 * Tell whether the join order is legal.
1: 	 */
1: 	public boolean legalJoinOrder(int numTablesInQuery);
1: 
1: 	/**
1: 	 * Init the access paths for these optimizables.
1: 	 *
1: 	 * @param optimizer The optimizer being used.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void initAccessPaths(Optimizer optimizer);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: /**
0:  * OptimizableList provides services for optimizing a list of
0:  * Optimizables (tables) in a query.
0:  */
0: 
0: public interface OptimizableList {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 *  Return the number of Optimizables in the list.
0: 	 *
0: 	 *  @return integer		The number of Optimizables in the list.
0: 	 */
0: 	public int size();
0: 
0: 	/**
0: 	 *  Return the nth Optimizable in the list.
0: 	 *
0: 	 *  @param n				"index" (0 based) into the list.
0: 	 *
0: 	 *  @return Optimizable		The nth Optimizables in the list.
0: 	 */
0: 	public Optimizable getOptimizable(int n);
0: 
0: 	/**
0: 	 * Set the nth Optimizable to the specified Optimizable.
0: 	 *
0: 	 *  @param n				"index" (0 based) into the list.
0: 	 *  @param optimizable		New nth Optimizable.
0: 	 *
0: 	 *  @return Nothing.
0: 	 */
0: 	public void setOptimizable(int n, Optimizable optimizable);
0: 
0: 	/** 
0: 	 * Verify that the Properties list with optimizer overrides, if specified, is valid
0: 	 *
0: 	 * @param dDictionary	The DataDictionary to use.
0: 	 *
0: 	 * @return Nothing.
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void verifyProperties(DataDictionary dDictionary) throws StandardException;
0: 
0: 	/**
0: 	 * Set the join order for this list of optimizables.  The join order is
0: 	 * represented as an array of integers - each entry in the array stands
0: 	 * for the order of the corresponding element in the list.  For example,
0: 	 * a joinOrder of {2, 0, 1} means that the 3rd Optimizable in the list
0: 	 * (element 2, since we are zero-based) is the first one in the join
0: 	 * order, followed by the 1st element in the list, and finally by the
0: 	 * 2nd element in the list.
0: 	 *
0: 	 * This method shuffles this OptimizableList to match the join order.
0: 	 *
0: 	 * Obviously, the size of the array must equal the number of elements in
0: 	 * the array, and the values in the array must be between 0 and the
0: 	 * number of elements in the array minus 1, and the values in the array
0: 	 * must be unique.
0: 	 */
0: 	public void reOrder(int[] joinOrder);
0: 
0: 	/**
0: 	 * user can specify that s/he doesn't want statistics to be considered when
0: 	 * optimizing the query.
0: 	 */
0: 	public boolean useStatistics();
0: 
0: 	/**
0: 	 * Tell whether the join order should be optimized.
0: 	 */
0: 	public boolean optimizeJoinOrder();
0: 
0: 	/**
0: 	 * Tell whether the join order is legal.
0: 	 */
0: 	public boolean legalJoinOrder(int numTablesInQuery);
0: 
0: 	/**
0: 	 * Init the access paths for these optimizables.
0: 	 *
0: 	 * @param optimizer The optimizer being used.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void initAccessPaths(Optimizer optimizer);
0: }
============================================================================