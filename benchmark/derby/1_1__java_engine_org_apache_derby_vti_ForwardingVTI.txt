1:10df8a5: /*
1:10df8a5: 
1:10df8a5:    Derby - Class org.apache.derby.vti.ForwardingVTI
1:10df8a5: 
1:10df8a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10df8a5:    contributor license agreements.  See the NOTICE file distributed with
1:10df8a5:    this work for additional information regarding copyright ownership.
1:10df8a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:10df8a5:    (the "License"); you may not use this file except in compliance with
1:10df8a5:    the License.  You may obtain a copy of the License at
1:10df8a5: 
1:10df8a5:       http://www.apache.org/licenses/LICENSE-2.0
1:10df8a5: 
1:10df8a5:    Unless required by applicable law or agreed to in writing, software
1:10df8a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:10df8a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10df8a5:    See the License for the specific language governing permissions and
1:10df8a5:    limitations under the License.
1:10df8a5: 
1:10df8a5:  */
1:10df8a5: 
1:10df8a5: package org.apache.derby.vti;
1:10df8a5: 
1:10df8a5: import java.io.InputStream;
1:10df8a5: import java.io.Reader;
1:10df8a5: import java.math.BigDecimal;
1:10df8a5: import java.sql.Blob;
1:10df8a5: import java.sql.Clob;
1:10df8a5: import java.sql.Connection;
1:10df8a5: import java.sql.Date;
1:10df8a5: import java.sql.DatabaseMetaData;
1:10df8a5: import java.sql.DriverManager;
1:10df8a5: import java.sql.PreparedStatement;
1:10df8a5: import java.sql.ResultSet;
1:10df8a5: import java.sql.ResultSetMetaData;
1:10df8a5: import java.sql.SQLException;
1:10df8a5: import java.sql.Time;
1:10df8a5: import java.sql.Timestamp;
1:10df8a5: import java.sql.Types;
1:10df8a5: import java.util.Calendar;
1:10df8a5: import java.util.HashMap;
1:10df8a5: import java.util.Map;
1:10df8a5: 
1:10df8a5: import org.apache.derby.iapi.services.io.ArrayUtil;
1:10df8a5: import org.apache.derby.iapi.util.IdUtil;
1:10df8a5: 
1:10df8a5: /**
1:10df8a5:  * <p>
1:10df8a5:  * This class contains a table function which forwards its behavior to
1:10df8a5:  * another ResultSet wrapped inside it.
1:10df8a5:  * </p>
1:10df8a5:  */
1:10df8a5: public	class   ForwardingVTI extends VTITemplate
1:10df8a5: {
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	CONSTANTS
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	STATE
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     private ResultSet           _wrappedResultSet;
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	CONSTRUCTOR
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Construct from another ResultSet.
1:10df8a5:      * </p>
1:10df8a5:      */
1:10df8a5:     public  ForwardingVTI() { super(); }
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	SUPPORT FUNCTIONS
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     /** Poke in another ResultSet to which we forward method calls. */
1:10df8a5:     public  final   void    wrapResultSet( ResultSet wrappedResultSet ) { _wrappedResultSet = wrappedResultSet; }
1:10df8a5: 
1:10df8a5:     /** Get the wrapped ResultSet. */
1:10df8a5:     public  final   ResultSet   getWrappedResultSet() { return _wrappedResultSet; }
1:10df8a5: 
1:10df8a5:     /** This overridable method maps the ForwardVTI's column numbers to those of the wrapped ResultSet */
1:10df8a5:     protected int mapColumnNumber( int ourColumnNumber )    { return ourColumnNumber; }
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	ResultSet BEHAVIOR
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     public  void    close() throws SQLException { _wrappedResultSet.close(); }
1:10df8a5: 
1:10df8a5:     public  boolean next()  throws SQLException { return _wrappedResultSet.next(); }
1:10df8a5: 
1:10df8a5:     public boolean isClosed() throws SQLException { return _wrappedResultSet.isClosed(); }
1:10df8a5: 
1:10df8a5:     public  boolean wasNull()   throws SQLException
1:10df8a5:     { return _wrappedResultSet.wasNull(); }
1:10df8a5: 
1:10df8a5:     public  ResultSetMetaData   getMetaData()   throws SQLException
1:10df8a5:     { return _wrappedResultSet.getMetaData(); }
1:10df8a5: 
1:10df8a5:     public  InputStream 	getAsciiStream(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getAsciiStream( mapColumnNumber( i ) ); }
1:10df8a5:     
1:10df8a5:     public  BigDecimal 	getBigDecimal(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getBigDecimal( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     @Deprecated
1:10df8a5:     public  BigDecimal 	getBigDecimal(int i, int scale) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getBigDecimal( mapColumnNumber( i ), scale ); }
1:10df8a5:     
1:10df8a5:     public  InputStream 	getBinaryStream(int i)  throws SQLException
1:10df8a5:     { return _wrappedResultSet.getBinaryStream( mapColumnNumber( i ) ); }
1:10df8a5:     
1:10df8a5:     public  Blob 	getBlob(int i)  throws SQLException
1:10df8a5:     { return _wrappedResultSet.getBlob( mapColumnNumber( i ) ); }
1:10df8a5:     
1:10df8a5:     public  boolean 	getBoolean(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getBoolean( mapColumnNumber( i ) ); }
1:10df8a5:     
1:10df8a5:     public  byte 	getByte(int i)    throws SQLException
1:10df8a5:     { return _wrappedResultSet.getByte( mapColumnNumber( i ) ); }
1:10df8a5:     
1:10df8a5:     public  byte[] 	getBytes(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getBytes( mapColumnNumber( i ) ); }
1:10df8a5:     
1:10df8a5:     public  Reader 	getCharacterStream(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getCharacterStream( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Clob 	getClob(int i)  throws SQLException
1:10df8a5:     { return _wrappedResultSet.getClob( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Date 	getDate(int i)  throws SQLException
1:10df8a5:     { return _wrappedResultSet.getDate( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Date 	getDate(int i, Calendar cal)    throws SQLException
1:10df8a5:     { return _wrappedResultSet.getDate( mapColumnNumber( i ), cal ); }
1:10df8a5: 
1:10df8a5:     public  double 	getDouble(int i)    throws SQLException
1:10df8a5:     { return _wrappedResultSet.getDouble( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  float 	getFloat(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getFloat( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  int 	getInt(int i)   throws SQLException
1:10df8a5:     { return _wrappedResultSet.getInt( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  long 	getLong(int i)  throws SQLException
1:10df8a5:     { return _wrappedResultSet.getLong( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Object 	getObject(int i)    throws SQLException
1:10df8a5:     { return _wrappedResultSet.getObject( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  short 	getShort(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getShort( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  String 	getString(int i)    throws SQLException
1:10df8a5:     { return _wrappedResultSet.getString( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Time 	getTime(int i)  throws SQLException
1:10df8a5:     { return _wrappedResultSet.getTime( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Time 	getTime(int i, Calendar cal)    throws SQLException
1:10df8a5:     { return _wrappedResultSet.getTime( mapColumnNumber( i ), cal ); }
1:10df8a5: 
1:10df8a5:     public  Timestamp 	getTimestamp(int i) throws SQLException
1:10df8a5:     { return _wrappedResultSet.getTimestamp( mapColumnNumber( i ) ); }
1:10df8a5: 
1:10df8a5:     public  Timestamp 	getTimestamp(int i, Calendar cal)   throws SQLException
1:10df8a5:     { return _wrappedResultSet.getTimestamp( mapColumnNumber( i ), cal ); }
1:10df8a5: 
1:10df8a5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:10df8a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.vti.ForwardingVTI
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.math.BigDecimal;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Connection;
1: import java.sql.Date;
1: import java.sql.DatabaseMetaData;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.sql.Types;
1: import java.util.Calendar;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.util.IdUtil;
1: 
1: /**
1:  * <p>
1:  * This class contains a table function which forwards its behavior to
1:  * another ResultSet wrapped inside it.
1:  * </p>
1:  */
1: public	class   ForwardingVTI extends VTITemplate
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private ResultSet           _wrappedResultSet;
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Construct from another ResultSet.
1:      * </p>
1:      */
1:     public  ForwardingVTI() { super(); }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	SUPPORT FUNCTIONS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** Poke in another ResultSet to which we forward method calls. */
1:     public  final   void    wrapResultSet( ResultSet wrappedResultSet ) { _wrappedResultSet = wrappedResultSet; }
1: 
1:     /** Get the wrapped ResultSet. */
1:     public  final   ResultSet   getWrappedResultSet() { return _wrappedResultSet; }
1: 
1:     /** This overridable method maps the ForwardVTI's column numbers to those of the wrapped ResultSet */
1:     protected int mapColumnNumber( int ourColumnNumber )    { return ourColumnNumber; }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	ResultSet BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    close() throws SQLException { _wrappedResultSet.close(); }
1: 
1:     public  boolean next()  throws SQLException { return _wrappedResultSet.next(); }
1: 
1:     public boolean isClosed() throws SQLException { return _wrappedResultSet.isClosed(); }
1: 
1:     public  boolean wasNull()   throws SQLException
1:     { return _wrappedResultSet.wasNull(); }
1: 
1:     public  ResultSetMetaData   getMetaData()   throws SQLException
1:     { return _wrappedResultSet.getMetaData(); }
1: 
1:     public  InputStream 	getAsciiStream(int i) throws SQLException
1:     { return _wrappedResultSet.getAsciiStream( mapColumnNumber( i ) ); }
1:     
1:     public  BigDecimal 	getBigDecimal(int i) throws SQLException
1:     { return _wrappedResultSet.getBigDecimal( mapColumnNumber( i ) ); }
1: 
1:     @Deprecated
1:     public  BigDecimal 	getBigDecimal(int i, int scale) throws SQLException
1:     { return _wrappedResultSet.getBigDecimal( mapColumnNumber( i ), scale ); }
1:     
1:     public  InputStream 	getBinaryStream(int i)  throws SQLException
1:     { return _wrappedResultSet.getBinaryStream( mapColumnNumber( i ) ); }
1:     
1:     public  Blob 	getBlob(int i)  throws SQLException
1:     { return _wrappedResultSet.getBlob( mapColumnNumber( i ) ); }
1:     
1:     public  boolean 	getBoolean(int i) throws SQLException
1:     { return _wrappedResultSet.getBoolean( mapColumnNumber( i ) ); }
1:     
1:     public  byte 	getByte(int i)    throws SQLException
1:     { return _wrappedResultSet.getByte( mapColumnNumber( i ) ); }
1:     
1:     public  byte[] 	getBytes(int i) throws SQLException
1:     { return _wrappedResultSet.getBytes( mapColumnNumber( i ) ); }
1:     
1:     public  Reader 	getCharacterStream(int i) throws SQLException
1:     { return _wrappedResultSet.getCharacterStream( mapColumnNumber( i ) ); }
1: 
1:     public  Clob 	getClob(int i)  throws SQLException
1:     { return _wrappedResultSet.getClob( mapColumnNumber( i ) ); }
1: 
1:     public  Date 	getDate(int i)  throws SQLException
1:     { return _wrappedResultSet.getDate( mapColumnNumber( i ) ); }
1: 
1:     public  Date 	getDate(int i, Calendar cal)    throws SQLException
1:     { return _wrappedResultSet.getDate( mapColumnNumber( i ), cal ); }
1: 
1:     public  double 	getDouble(int i)    throws SQLException
1:     { return _wrappedResultSet.getDouble( mapColumnNumber( i ) ); }
1: 
1:     public  float 	getFloat(int i) throws SQLException
1:     { return _wrappedResultSet.getFloat( mapColumnNumber( i ) ); }
1: 
1:     public  int 	getInt(int i)   throws SQLException
1:     { return _wrappedResultSet.getInt( mapColumnNumber( i ) ); }
1: 
1:     public  long 	getLong(int i)  throws SQLException
1:     { return _wrappedResultSet.getLong( mapColumnNumber( i ) ); }
1: 
1:     public  Object 	getObject(int i)    throws SQLException
1:     { return _wrappedResultSet.getObject( mapColumnNumber( i ) ); }
1: 
1:     public  short 	getShort(int i) throws SQLException
1:     { return _wrappedResultSet.getShort( mapColumnNumber( i ) ); }
1: 
1:     public  String 	getString(int i)    throws SQLException
1:     { return _wrappedResultSet.getString( mapColumnNumber( i ) ); }
1: 
1:     public  Time 	getTime(int i)  throws SQLException
1:     { return _wrappedResultSet.getTime( mapColumnNumber( i ) ); }
1: 
1:     public  Time 	getTime(int i, Calendar cal)    throws SQLException
1:     { return _wrappedResultSet.getTime( mapColumnNumber( i ), cal ); }
1: 
1:     public  Timestamp 	getTimestamp(int i) throws SQLException
1:     { return _wrappedResultSet.getTimestamp( mapColumnNumber( i ) ); }
1: 
1:     public  Timestamp 	getTimestamp(int i, Calendar cal)   throws SQLException
1:     { return _wrappedResultSet.getTimestamp( mapColumnNumber( i ), cal ); }
1: 
1: }
============================================================================