1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:b31849d: import org.apache.derby.iapi.sql.Activation;
1:b31849d: import org.apache.derby.iapi.sql.execute.ExecRow;
1:b31849d: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:b31849d: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Takes 2 NoPutResultSets and a join filter and returns
1:eac0369:  * the join's rows satisfying the filter as a result set.
1:eac0369:  */
1:f77f36d: class NestedLoopJoinResultSet extends JoinResultSet
2:eac0369: {
1:eac0369: 	private boolean returnedRowMatchingRightSide = false;
1:eac0369: 	private ExecRow rightTemplate;
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clear any private state that changes during scans.
1:eac0369: 	 * This includes things like the last row seen, etc.
1:eac0369: 	 * THis does not include immutable things that are
1:eac0369: 	 * typically set up in the constructor.
1:eac0369: 	 * <p>
1:eac0369: 	 * This method is called on open()/close() and reopen()
1:eac0369: 	 * <p>
1:eac0369: 	 * WARNING: this should be implemented in every sub
1:eac0369: 	 * class and it should always call super.clearScanState().
1:eac0369: 	 */
1:eac0369: 	void clearScanState()
1:eac0369: 	{
1:eac0369: 		returnedRowMatchingRightSide = false;
1:eac0369: 		super.clearScanState();
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Return the requested values computed
1:eac0369:      * from the next row (if any) for which
1:eac0369:      * the restriction evaluates to true.
1:eac0369:      * <p>
1:eac0369:      * restriction parameters
1:eac0369:      * are evaluated for each row.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 * @exception StandardException		ResultSetNotOpen thrown if closed
1:eac0369: 	 * @return the next row in the join result
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 	    ExecRow result = null;
1:eac0369: 		boolean haveRow = false;
1:eac0369: 	    boolean restrict = false;
1:eac0369: 		int colInCtr;
1:eac0369: 		int colOutCtr;
1:eac0369: 	    DataValueDescriptor restrictBoolean;
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (! isOpen)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
1:eac0369: 
1:eac0369: 		/* If we have a row from the left side and the right side is not open, 
1:eac0369: 		 * then we get an error on the previous next, either on the next on
1:eac0369: 		 * the left or the open on the right.  So, we do a next on the left
1:eac0369: 		 * and then open the right if that succeeds.
1:eac0369: 		 */
1:eac0369: 		if (! isRightOpen && leftRow != null)
1:eac0369: 		{		 
1:eac0369: 			leftRow = leftResultSet.getNextRowCore();
1:eac0369: 			if (leftRow == null)
1:eac0369: 			{
1:eac0369: 				closeRight();
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				rowsSeenLeft++;
1:eac0369: 				openRight();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		while (leftRow != null && !haveRow)
1:eac0369: 		{
1:eac0369: 			if (oneRowRightSide && returnedRowMatchingRightSide)
1:eac0369: 			{
1:eac0369: 				rightRow = null;
1:eac0369: 				returnedRowMatchingRightSide = false;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				rightRow = rightResultSet.getNextRowCore();
1:eac0369: 
1:eac0369: 				/* If this is a NOT EXISTS join, we just need to reverse the logic
1:eac0369: 				 * of EXISTS join.  To make the implementation simple, we create a
1:eac0369: 				 * right side template, which is never really needed. (beetle 5173)
1:eac0369: 				 */
1:eac0369: 				if (notExistsRightSide)
1:eac0369: 				{
1:eac0369: 					if (rightRow == null)      //none satisfied
1:eac0369: 						rightRow = rightTemplate;  //then we are
1:eac0369: 					else
1:eac0369: 						rightRow = null;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				returnedRowMatchingRightSide = (rightRow != null);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (rightRow == null)
1:eac0369: 			{
1:eac0369: 				/* Current scan on right is exhausted.  Need to close old scan 
1:eac0369: 				 * and open new scan with new "parameters".  openRight()	
1:eac0369: 				 * will reopen if already open.
1:eac0369: 				 */
1:eac0369: 				leftRow = leftResultSet.getNextRowCore();
1:eac0369: 				if (leftRow == null)
1:eac0369: 				{
1:eac0369: 					closeRight();
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 				{
1:eac0369: 					rowsSeenLeft++;
1:eac0369: 					openRight();
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				rowsSeenRight++;
1:eac0369: 
1:eac0369: 				if (restriction != null)
1:eac0369: 				{
1:eac0369: 					restrictBoolean =
1:eac0369: 						(DataValueDescriptor) restriction.invoke(activation);
1:eac0369: 
1:eac0369: 			        // if the result is null, we make it false --
1:eac0369: 					// so the row won't be returned.
1:eac0369: 					restrict = (! restrictBoolean.isNull()) &&
1:eac0369: 									restrictBoolean.getBoolean();
1:eac0369: 
1:eac0369: 					if (! restrict)
1:eac0369: 					{
1:eac0369: 						/* Update the run time statistics */
1:eac0369: 						rowsFiltered++;
1:eac0369: 						continue;
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				/* Merge the rows, doing just in time allocation for mergedRow.
1:eac0369: 				 * (By convention, left Row is to left of right Row.)
1:eac0369: 				 */
1:eac0369: 				if (mergedRow == null)
1:eac0369: 				{
1:eac0369: 					mergedRow = getExecutionFactory().getValueRow(leftNumCols + rightNumCols);
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
1:eac0369: 					 colInCtr++, colOutCtr++)
1:93a23a8:                 {
1:93a23a8:                     DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
1:93a23a8:                     // Clone the value if it is represented by a stream
1:93a23a8:                     // (DERBY-3650).
1:93a23a8:                     if (src_col != null && src_col.hasStream()) {
1:93a23a8:                         src_col = src_col.cloneValue(false);
1:93a23a8:                     }
1:93a23a8: 
1:93a23a8:                     mergedRow.setColumn(colOutCtr, src_col);
1:93a23a8:                 }
1:93a23a8: 
1:eac0369: 				if (! notExistsRightSide)
1:eac0369: 				{
1:eac0369: 					for (colInCtr = 1; colInCtr <= rightNumCols; 
1:eac0369: 						 colInCtr++, colOutCtr++)
1:eac0369: 					{
1:93a23a8:                         DataValueDescriptor src_col = 
1:93a23a8:                             rightRow.getColumn(colInCtr);
1:93a23a8:                         // Clone the value if it is represented by a stream
1:93a23a8:                         // (DERBY-3650).
1:93a23a8:                         if (src_col != null && src_col.hasStream()) {
1:93a23a8:                             src_col = src_col.cloneValue(false);
1:93a23a8:                         }
1:93a23a8: 
1:93a23a8:                         mergedRow.setColumn(colOutCtr, src_col);
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				setCurrentRow(mergedRow);
1:eac0369: 				haveRow = true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Do we have a row to return? */
1:eac0369: 	    if (haveRow)
1:eac0369: 	    {
1:eac0369: 			result = mergedRow;
1:eac0369: 			rowsReturned++;
1:eac0369: 	    }
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			clearCurrentRow();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 	    return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 	    if ( isOpen )
1:eac0369: 	    {
1:eac0369: 			beginTime = getCurrentTimeMillis();
1:eac0369: 
1:eac0369: 			// we don't want to keep around a pointer to the
1:eac0369: 			// row ... so it can be thrown away.
1:eac0369: 			// REVISIT: does this need to be in a finally
1:eac0369: 			// block, to ensure that it is executed?
1:eac0369: 		    clearCurrentRow();
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 			returnedRowMatchingRightSide = false;
1:eac0369: 			closeTime += getElapsedMillis(beginTime);
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1:eac0369: 
1:eac0369: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1:eac0369: 		{
1:eac0369: 			return	totTime - leftResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE) -
1:eac0369: 							  rightResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return totTime;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /*
1:eac0369:      * class interface
1:eac0369:      *
1:eac0369:      */
1:f77f36d:     NestedLoopJoinResultSet(NoPutResultSet leftResultSet,
1:eac0369: 								   int leftNumCols,
1:eac0369: 								   NoPutResultSet rightResultSet,
1:eac0369: 								   int rightNumCols,
1:eac0369: 								   Activation activation,
1:eac0369: 								   GeneratedMethod restriction,
1:eac0369: 								   int resultSetNumber,
1:eac0369: 								   boolean oneRowRightSide,
1:eac0369: 								   boolean notExistsRightSide,
1:eac0369: 								   double optimizerEstimatedRowCount,
1:eac0369: 								   double optimizerEstimatedCost,
1:f77f36d: 								   String userSuppliedOptimizerOverrides)
1:eac0369:     {
1:eac0369: 		super(leftResultSet, leftNumCols, rightResultSet, rightNumCols,
1:eac0369: 			  activation, restriction, resultSetNumber, 
1:eac0369: 			  oneRowRightSide, notExistsRightSide, optimizerEstimatedRowCount, 
1:f77f36d: 			  optimizerEstimatedCost, userSuppliedOptimizerOverrides);
1:eac0369: 		if (notExistsRightSide)
1:eac0369: 			rightTemplate = getExecutionFactory().getValueRow(rightNumCols);
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:93a23a8
/////////////////////////////////////////////////////////////////////////
1:                 {
1:                     DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
1:                     // Clone the value if it is represented by a stream
1:                     // (DERBY-3650).
1:                     if (src_col != null && src_col.hasStream()) {
1:                         src_col = src_col.cloneValue(false);
1:                     }
1: 
1:                     mergedRow.setColumn(colOutCtr, src_col);
1:                 }
1: 
1:                         DataValueDescriptor src_col = 
1:                             rightRow.getColumn(colInCtr);
1:                         // Clone the value if it is represented by a stream
1:                         // (DERBY-3650).
1:                         if (src_col != null && src_col.hasStream()) {
1:                             src_col = src_col.cloneValue(false);
1:                         }
1: 
1:                         mergedRow.setColumn(colOutCtr, src_col);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b31849d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class NestedLoopJoinResultSet extends JoinResultSet
/////////////////////////////////////////////////////////////////////////
1:     NestedLoopJoinResultSet(NoPutResultSet leftResultSet,
/////////////////////////////////////////////////////////////////////////
1: 								   String userSuppliedOptimizerOverrides)
1: 			  optimizerEstimatedCost, userSuppliedOptimizerOverrides);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: 
1: /**
1:  * Takes 2 NoPutResultSets and a join filter and returns
1:  * the join's rows satisfying the filter as a result set.
1:  */
0: public class NestedLoopJoinResultSet extends JoinResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private boolean returnedRowMatchingRightSide = false;
1: 	private ExecRow rightTemplate;
1: 
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 
1: 	/**
1: 	 * Clear any private state that changes during scans.
1: 	 * This includes things like the last row seen, etc.
1: 	 * THis does not include immutable things that are
1: 	 * typically set up in the constructor.
1: 	 * <p>
1: 	 * This method is called on open()/close() and reopen()
1: 	 * <p>
1: 	 * WARNING: this should be implemented in every sub
1: 	 * class and it should always call super.clearScanState().
1: 	 */
1: 	void clearScanState()
1: 	{
1: 		returnedRowMatchingRightSide = false;
1: 		super.clearScanState();
1: 	}
1: 
1: 	/**
1:      * Return the requested values computed
1:      * from the next row (if any) for which
1:      * the restriction evaluates to true.
1:      * <p>
1:      * restriction parameters
1:      * are evaluated for each row.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 * @exception StandardException		ResultSetNotOpen thrown if closed
1: 	 * @return the next row in the join result
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException
1: 	{
1: 	    ExecRow result = null;
1: 		boolean haveRow = false;
1: 	    boolean restrict = false;
1: 		int colInCtr;
1: 		int colOutCtr;
1: 	    DataValueDescriptor restrictBoolean;
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 		if (! isOpen)
1: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
1: 
1: 		/* If we have a row from the left side and the right side is not open, 
1: 		 * then we get an error on the previous next, either on the next on
1: 		 * the left or the open on the right.  So, we do a next on the left
1: 		 * and then open the right if that succeeds.
1: 		 */
1: 		if (! isRightOpen && leftRow != null)
1: 		{		 
1: 			leftRow = leftResultSet.getNextRowCore();
1: 			if (leftRow == null)
1: 			{
1: 				closeRight();
1: 			}
1: 			else
1: 			{
1: 				rowsSeenLeft++;
1: 				openRight();
1: 			}
1: 		}
1: 
1: 		while (leftRow != null && !haveRow)
1: 		{
1: 			if (oneRowRightSide && returnedRowMatchingRightSide)
1: 			{
1: 				rightRow = null;
1: 				returnedRowMatchingRightSide = false;
1: 			}
1: 			else
1: 			{
1: 				rightRow = rightResultSet.getNextRowCore();
1: 
1: 				/* If this is a NOT EXISTS join, we just need to reverse the logic
1: 				 * of EXISTS join.  To make the implementation simple, we create a
1: 				 * right side template, which is never really needed. (beetle 5173)
1: 				 */
1: 				if (notExistsRightSide)
1: 				{
1: 					if (rightRow == null)      //none satisfied
1: 						rightRow = rightTemplate;  //then we are
1: 					else
1: 						rightRow = null;
1: 				}
1: 
1: 				returnedRowMatchingRightSide = (rightRow != null);
1: 			}
1: 
1: 			if (rightRow == null)
1: 			{
1: 				/* Current scan on right is exhausted.  Need to close old scan 
1: 				 * and open new scan with new "parameters".  openRight()	
1: 				 * will reopen if already open.
1: 				 */
1: 				leftRow = leftResultSet.getNextRowCore();
1: 				if (leftRow == null)
1: 				{
1: 					closeRight();
1: 				}
1: 				else
1: 				{
1: 					rowsSeenLeft++;
1: 					openRight();
1: 				}
1: 			}
1: 			else
1: 			{
1: 				rowsSeenRight++;
1: 
1: 				if (restriction != null)
1: 				{
1: 					restrictBoolean =
1: 						(DataValueDescriptor) restriction.invoke(activation);
1: 
1: 			        // if the result is null, we make it false --
1: 					// so the row won't be returned.
1: 					restrict = (! restrictBoolean.isNull()) &&
1: 									restrictBoolean.getBoolean();
1: 
1: 					if (! restrict)
1: 					{
1: 						/* Update the run time statistics */
1: 						rowsFiltered++;
1: 						continue;
1: 					}
1: 				}
1: 
1: 				/* Merge the rows, doing just in time allocation for mergedRow.
1: 				 * (By convention, left Row is to left of right Row.)
1: 				 */
1: 				if (mergedRow == null)
1: 				{
1: 					mergedRow = getExecutionFactory().getValueRow(leftNumCols + rightNumCols);
1: 				}
1: 
1: 				for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
1: 					 colInCtr++, colOutCtr++)
1: 					{
0: 						 mergedRow.setColumn(colOutCtr, 
0: 											 leftRow.getColumn(colInCtr));
1: 					}
1: 				if (! notExistsRightSide)
1: 				{
1: 					for (colInCtr = 1; colInCtr <= rightNumCols; 
1: 						 colInCtr++, colOutCtr++)
1: 					{
0: 						 mergedRow.setColumn(colOutCtr, 
0: 											 rightRow.getColumn(colInCtr));
1: 					}
1: 				}
1: 
1: 				setCurrentRow(mergedRow);
1: 				haveRow = true;
1: 			}
1: 		}
1: 
1: 		/* Do we have a row to return? */
1: 	    if (haveRow)
1: 	    {
1: 			result = mergedRow;
1: 			rowsReturned++;
1: 	    }
1: 		else
1: 		{
1: 			clearCurrentRow();
1: 		}
1: 
1: 		nextTime += getElapsedMillis(beginTime);
1: 	    return result;
1: 	}
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 	    if ( isOpen )
1: 	    {
1: 			beginTime = getCurrentTimeMillis();
1: 
1: 			// we don't want to keep around a pointer to the
1: 			// row ... so it can be thrown away.
1: 			// REVISIT: does this need to be in a finally
1: 			// block, to ensure that it is executed?
1: 		    clearCurrentRow();
1: 
1: 			super.close();
1: 			returnedRowMatchingRightSide = false;
1: 			closeTime += getElapsedMillis(beginTime);
1: 	    }
1: 
1: 	}
1: 
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1: 		{
1: 			return	totTime - leftResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE) -
1: 							  rightResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE);
1: 		}
1: 		else
1: 		{
1: 			return totTime;
1: 		}
1: 	}
1: 
1:     /*
1:      * class interface
1:      *
1:      */
0:     public NestedLoopJoinResultSet(NoPutResultSet leftResultSet,
1: 								   int leftNumCols,
1: 								   NoPutResultSet rightResultSet,
1: 								   int rightNumCols,
1: 								   Activation activation,
1: 								   GeneratedMethod restriction,
1: 								   int resultSetNumber,
1: 								   boolean oneRowRightSide,
1: 								   boolean notExistsRightSide,
1: 								   double optimizerEstimatedRowCount,
1: 								   double optimizerEstimatedCost,
0: 								   GeneratedMethod closeCleanup)
1:     {
1: 		super(leftResultSet, leftNumCols, rightResultSet, rightNumCols,
1: 			  activation, restriction, resultSetNumber, 
1: 			  oneRowRightSide, notExistsRightSide, optimizerEstimatedRowCount, 
0: 			  optimizerEstimatedCost, closeCleanup);
1: 		if (notExistsRightSide)
1: 			rightTemplate = getExecutionFactory().getValueRow(rightNumCols);
1:     }
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
0: 								   String userSuppliedOptimizerOverrides,
0: 			  optimizerEstimatedCost, userSuppliedOptimizerOverrides, closeCleanup);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: 
0: /**
0:  * Takes 2 NoPutResultSets and a join filter and returns
0:  * the join's rows satisfying the filter as a result set.
0:  */
0: public class NestedLoopJoinResultSet extends JoinResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private boolean returnedRowMatchingRightSide = false;
0: 	private ExecRow rightTemplate;
0: 
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 
0: 	/**
0: 	 * Clear any private state that changes during scans.
0: 	 * This includes things like the last row seen, etc.
0: 	 * THis does not include immutable things that are
0: 	 * typically set up in the constructor.
0: 	 * <p>
0: 	 * This method is called on open()/close() and reopen()
0: 	 * <p>
0: 	 * WARNING: this should be implemented in every sub
0: 	 * class and it should always call super.clearScanState().
0: 	 */
0: 	void clearScanState()
0: 	{
0: 		returnedRowMatchingRightSide = false;
0: 		super.clearScanState();
0: 	}
0: 
0: 	/**
0:      * Return the requested values computed
0:      * from the next row (if any) for which
0:      * the restriction evaluates to true.
0:      * <p>
0:      * restriction parameters
0:      * are evaluated for each row.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 * @exception StandardException		ResultSetNotOpen thrown if closed
0: 	 * @return the next row in the join result
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException
0: 	{
0: 	    ExecRow result = null;
0: 		boolean haveRow = false;
0: 	    boolean restrict = false;
0: 		int colInCtr;
0: 		int colOutCtr;
0: 	    DataValueDescriptor restrictBoolean;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 		if (! isOpen)
0: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
0: 
0: 		/* If we have a row from the left side and the right side is not open, 
0: 		 * then we get an error on the previous next, either on the next on
0: 		 * the left or the open on the right.  So, we do a next on the left
0: 		 * and then open the right if that succeeds.
0: 		 */
0: 		if (! isRightOpen && leftRow != null)
0: 		{		 
0: 			leftRow = leftResultSet.getNextRowCore();
0: 			if (leftRow == null)
0: 			{
0: 				closeRight();
0: 			}
0: 			else
0: 			{
0: 				rowsSeenLeft++;
0: 				openRight();
0: 			}
0: 		}
0: 
0: 		while (leftRow != null && !haveRow)
0: 		{
0: 			if (oneRowRightSide && returnedRowMatchingRightSide)
0: 			{
0: 				rightRow = null;
0: 				returnedRowMatchingRightSide = false;
0: 			}
0: 			else
0: 			{
0: 				rightRow = rightResultSet.getNextRowCore();
0: 
0: 				/* If this is a NOT EXISTS join, we just need to reverse the logic
0: 				 * of EXISTS join.  To make the implementation simple, we create a
0: 				 * right side template, which is never really needed. (beetle 5173)
0: 				 */
0: 				if (notExistsRightSide)
0: 				{
0: 					if (rightRow == null)      //none satisfied
0: 						rightRow = rightTemplate;  //then we are
0: 					else
0: 						rightRow = null;
0: 				}
0: 
0: 				returnedRowMatchingRightSide = (rightRow != null);
0: 			}
0: 
0: 			if (rightRow == null)
0: 			{
0: 				/* Current scan on right is exhausted.  Need to close old scan 
0: 				 * and open new scan with new "parameters".  openRight()	
0: 				 * will reopen if already open.
0: 				 */
0: 				leftRow = leftResultSet.getNextRowCore();
0: 				if (leftRow == null)
0: 				{
0: 					closeRight();
0: 				}
0: 				else
0: 				{
0: 					rowsSeenLeft++;
0: 					openRight();
0: 				}
0: 			}
0: 			else
0: 			{
0: 				rowsSeenRight++;
0: 
0: 				if (restriction != null)
0: 				{
0: 					restrictBoolean =
0: 						(DataValueDescriptor) restriction.invoke(activation);
0: 
0: 			        // if the result is null, we make it false --
0: 					// so the row won't be returned.
0: 					restrict = (! restrictBoolean.isNull()) &&
0: 									restrictBoolean.getBoolean();
0: 
0: 					if (! restrict)
0: 					{
0: 						/* Update the run time statistics */
0: 						rowsFiltered++;
0: 						continue;
0: 					}
0: 				}
0: 
0: 				/* Merge the rows, doing just in time allocation for mergedRow.
0: 				 * (By convention, left Row is to left of right Row.)
0: 				 */
0: 				if (mergedRow == null)
0: 				{
0: 					mergedRow = getExecutionFactory().getValueRow(leftNumCols + rightNumCols);
0: 				}
0: 
0: 				for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
0: 					 colInCtr++, colOutCtr++)
0: 					{
0: 						 mergedRow.setColumn(colOutCtr, 
0: 											 leftRow.getColumn(colInCtr));
0: 					}
0: 				if (! notExistsRightSide)
0: 				{
0: 					for (colInCtr = 1; colInCtr <= rightNumCols; 
0: 						 colInCtr++, colOutCtr++)
0: 					{
0: 						 mergedRow.setColumn(colOutCtr, 
0: 											 rightRow.getColumn(colInCtr));
0: 					}
0: 				}
0: 
0: 				setCurrentRow(mergedRow);
0: 				haveRow = true;
0: 			}
0: 		}
0: 
0: 		/* Do we have a row to return? */
0: 	    if (haveRow)
0: 	    {
0: 			result = mergedRow;
0: 			rowsReturned++;
0: 	    }
0: 		else
0: 		{
0: 			clearCurrentRow();
0: 		}
0: 
0: 		nextTime += getElapsedMillis(beginTime);
0: 	    return result;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 	    if ( isOpen )
0: 	    {
0: 			beginTime = getCurrentTimeMillis();
0: 
0: 			// we don't want to keep around a pointer to the
0: 			// row ... so it can be thrown away.
0: 			// REVISIT: does this need to be in a finally
0: 			// block, to ensure that it is executed?
0: 		    clearCurrentRow();
0: 
0: 			super.close();
0: 			returnedRowMatchingRightSide = false;
0: 			closeTime += getElapsedMillis(beginTime);
0: 	    }
0: 
0: 	}
0: 
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
0: 		{
0: 			return	totTime - leftResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE) -
0: 							  rightResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE);
0: 		}
0: 		else
0: 		{
0: 			return totTime;
0: 		}
0: 	}
0: 
0:     /*
0:      * class interface
0:      *
0:      */
0:     public NestedLoopJoinResultSet(NoPutResultSet leftResultSet,
0: 								   int leftNumCols,
0: 								   NoPutResultSet rightResultSet,
0: 								   int rightNumCols,
0: 								   Activation activation,
0: 								   GeneratedMethod restriction,
0: 								   int resultSetNumber,
0: 								   boolean oneRowRightSide,
0: 								   boolean notExistsRightSide,
0: 								   double optimizerEstimatedRowCount,
0: 								   double optimizerEstimatedCost,
0: 								   GeneratedMethod closeCleanup)
0:     {
0: 		super(leftResultSet, leftNumCols, rightResultSet, rightNumCols,
0: 			  activation, restriction, resultSetNumber, 
0: 			  oneRowRightSide, notExistsRightSide, optimizerEstimatedRowCount, 
0: 			  optimizerEstimatedCost, closeCleanup);
0: 		if (notExistsRightSide)
0: 			rightTemplate = getExecutionFactory().getValueRow(rightNumCols);
0:     }
0: }
============================================================================