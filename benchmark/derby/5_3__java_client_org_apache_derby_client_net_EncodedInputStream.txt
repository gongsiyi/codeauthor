1:956354d: /*
1:956354d:     Derby - Class org.apache.derby.client.net.EncodedInputStream
30:956354d: 
1:956354d:     Licensed to the Apache Software Foundation (ASF) under one
1:956354d:     or more contributor license agreements.  See the NOTICE file
1:956354d:     distributed with this work for additional information
1:956354d:     regarding copyright ownership.  The ASF licenses this file
1:956354d:     to you under the Apache License, Version 2.0 (the
1:956354d:     "License"); you may not use this file except in compliance
1:956354d:     with the License.  You may obtain a copy of the License at
1:956354d: 
1:956354d:     http://www.apache.org/licenses/LICENSE-2.0
1:956354d: 
1:956354d:     Unless required by applicable law or agreed to in writing,
1:956354d:     software distributed under the License is distributed on an
1:956354d:     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:956354d:     KIND, either express or implied.  See the License for the
1:956354d:     specific language governing permissions and limitations
1:956354d:     under the License.
1:956354d: */
1:956354d: package org.apache.derby.client.net;
1:956354d: 
1:956354d: import java.io.InputStream;
1:956354d: import java.io.Reader;
1:956354d: import java.io.OutputStreamWriter;
1:956354d: import java.io.ByteArrayInputStream;
1:956354d: 
1:956354d: import java.io.IOException;
1:a0b8943: import java.nio.charset.Charset;
1:956354d: 
1:956354d: /**
1:956354d:  * Create an encoded stream from a <code>Reader</code>.
1:956354d:  *
1:956354d:  * This is an internal class, used to pass readers of characters as streams of
1:956354d:  * bytes. The characters will be represented according to the specified
1:956354d:  * encoding. It is up to the caller to ensure the specified encoding is
1:956354d:  * available, and in general only encodings available as default from Java 1.3
1:956354d:  * and up should be used.
1:956354d:  *
1:956354d:  * Currently, the encodings 'UTF8' and 'UTF-16BE' are used.
1:956354d:  * Streams are obtained by calling the static methods of this class,
1:956354d:  * for instance <code>createUTF8Stream</code>.
1:956354d:  */
1:956354d: public final class EncodedInputStream extends InputStream {
1:956354d: 
1:a0b8943:     private static final Charset UTF_8 = Charset.forName("UTF-8");
1:a0b8943:     private static final Charset UTF_16BE = Charset.forName("UTF-16BE");
1:a0b8943: 
1:956354d:     /**
1:956354d:      * Create a UTF-8 encoded stream from the given <code>Reader</code>.
1:956354d:      *
1:956354d:      * @param reader the <code>Reader</code> to read characters from.
1:956354d:      * @return a byte-stream with UTF-8 encoded characters
1:956354d:      */
1:956354d:     public static EncodedInputStream createUTF8Stream(Reader reader) {
1:956354d:         return new EncodedInputStream(reader, 
1:a0b8943:                                       UTF_8,
1:956354d:                                       BUFFERED_CHAR_LEN,
1:956354d:                                       BUFFERED_CHAR_LEN*3);
15:956354d:     }
1:956354d: 
1:956354d:     /**
1:956354d:      * Create a UTF-16BE encoded stream from the given <code>Reader</code>.
1:956354d:      *
1:956354d:      * @param reader the <code>Reader</code> to read characters from.
1:956354d:      * @return a byte-stream with UTF-16BE encoded characters
1:956354d:      */
1:956354d:     static EncodedInputStream createUTF16BEStream(Reader reader) {
1:956354d:         return new EncodedInputStream(reader,
1:a0b8943:                                       UTF_16BE,
1:956354d:                                       BUFFERED_CHAR_LEN,
1:956354d:                                       BUFFERED_CHAR_LEN*2);
1:956354d:     }
1:956354d:     
1:956354d:     private static final int BUFFERED_CHAR_LEN = 1024;
1:6eb29f6:     private static final ByteArrayInputStream suspendMarker = new ByteArrayInputStream( new byte[ 0 ] );
1:956354d: 
1:956354d:     private Reader reader_;
1:956354d:     private final char[] decodedBuffer_;
1:956354d:     
1:956354d:     private OutputStreamWriter encodedStreamWriter_;
1:956354d:     private PublicBufferOutputStream encodedOutputStream_;
1:956354d:     
1:956354d:     private ByteArrayInputStream encodedInputStream_;
1:956354d:     
1:956354d:     /**
1:956354d:      * Create an encoded stream for the specified <code>Reader</code>.
1:956354d:      * 
1:956354d:      * @param reader the <code>Reader</code> to read characters from
1:956354d:      * @param encoding the encoding to use in the encoded stream
1:956354d:      * @param charBufferSize the size of the char buffer. This is the number
1:956354d:      *      of characters read at once from the <code>Reader</code>.
1:956354d:      * @param initialByteBufferSize the initial size of the byte buffer.
1:956354d:      *      holding the encoded bytes
1:956354d:      */
1:956354d:     private EncodedInputStream(Reader reader,
1:a0b8943:                                Charset encoding,
1:956354d:                                int charBufferSize,
1:956354d:                                int initialByteBufferSize) {
1:6eb29f6:     
1:6eb29f6:         reader_ = reader;
1:6eb29f6:         decodedBuffer_ = new char[charBufferSize];
1:956354d: 
1:6eb29f6:         encodedOutputStream_ = new PublicBufferOutputStream(
1:6eb29f6:                 initialByteBufferSize);
1:6eb29f6:         
1:a0b8943:         encodedStreamWriter_ =
1:a0b8943:                 new OutputStreamWriter(encodedOutputStream_, encoding);
1:a0b8943: 
1:6eb29f6:         encodedInputStream_ = suspendMarker;
1:6eb29f6:     
1:6eb29f6:     }
1:6eb29f6: 
1:6eb29f6: 
1:956354d:     private ByteArrayInputStream reEncode(Reader reader) 
1:6eb29f6:         throws IOException
1:956354d:     {
1:6eb29f6:     
1:6eb29f6:         int count;
1:6eb29f6:         do{
1:6eb29f6:             count = reader.read(decodedBuffer_, 0, decodedBuffer_.length);
1:6eb29f6:             
1:6eb29f6:         }while(count == 0);
1:6eb29f6:             
1:6eb29f6:         if(count < 0)
1:6eb29f6:             return null;
1:6eb29f6:     
1:6eb29f6:         encodedOutputStream_.reset();
1:6eb29f6:         encodedStreamWriter_.write(decodedBuffer_,0,count);
1:6eb29f6:         encodedStreamWriter_.flush();
1:956354d: 
1:6eb29f6:         int encodedLength = encodedOutputStream_.size();
1:6eb29f6:     
1:6eb29f6:         return new ByteArrayInputStream(encodedOutputStream_.getBuffer(),
1:6eb29f6:                                         0,
1:6eb29f6:                                         encodedLength);
1:956354d:     }
1:956354d:     
1:956354d:     
1:956354d:     public int available() 
1:6eb29f6:         throws IOException {
1:6eb29f6:         
1:6eb29f6:         if(encodedInputStream_ == suspendMarker)
1:6eb29f6:             encodedInputStream_ = reEncode(reader_);
1:956354d: 
1:6eb29f6:         if(encodedInputStream_ == null){
1:6eb29f6:             return 0;
1:6eb29f6:         }
1:956354d: 
1:6eb29f6:         return encodedInputStream_.available();
1:6eb29f6:     
1:956354d:     }
1:956354d:     
1:956354d: 
1:956354d:     public void close() 
1:6eb29f6:         throws IOException {
1:6eb29f6:     
1:6eb29f6:         if(encodedInputStream_ != null ){
1:6eb29f6:             encodedInputStream_.close();
1:6eb29f6:             encodedInputStream_ = null;
1:6eb29f6:         }
1:956354d: 
1:6eb29f6:         if(reader_ != null ){
1:6eb29f6:             reader_.close();
1:6eb29f6:             reader_ = null;
1:6eb29f6:         }
1:956354d: 
1:6eb29f6:         if(encodedStreamWriter_ != null){
1:6eb29f6:             encodedStreamWriter_.close();
1:6eb29f6:             encodedStreamWriter_ = null;
1:6eb29f6:         }
1:6eb29f6:     
1:956354d:     }
1:956354d:     
1:956354d:     
1:956354d:     public int read() 
1:6eb29f6:         throws IOException {
1:6eb29f6:         
1:6eb29f6:         if(encodedInputStream_ == suspendMarker)
1:6eb29f6:             encodedInputStream_ = reEncode(reader_);
1:956354d: 
1:6eb29f6:         if(encodedInputStream_ == null){
1:6eb29f6:             return -1;
1:6eb29f6:         }
1:6eb29f6:     
1:6eb29f6:         int c = encodedInputStream_.read();
1:956354d: 
1:6eb29f6:         if(c > -1){
1:6eb29f6:             return c;
1:6eb29f6:         
1:6eb29f6:         }else{
1:6eb29f6:             encodedInputStream_ = reEncode(reader_);
1:6eb29f6:         
1:6eb29f6:             if(encodedInputStream_ == null){
1:6eb29f6:                 return -1;
1:6eb29f6:             }
1:6eb29f6:         
1:6eb29f6:             return encodedInputStream_.read();
1:6eb29f6: 
1:6eb29f6:         }
1:956354d:     
1:956354d:     }
1:956354d: 
1:956354d: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a0b8943
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
1:     private static final Charset UTF_8 = Charset.forName("UTF-8");
1:     private static final Charset UTF_16BE = Charset.forName("UTF-16BE");
1: 
/////////////////////////////////////////////////////////////////////////
1:                                       UTF_8,
/////////////////////////////////////////////////////////////////////////
1:                                       UTF_16BE,
/////////////////////////////////////////////////////////////////////////
1:                                Charset encoding,
/////////////////////////////////////////////////////////////////////////
1:         encodedStreamWriter_ =
1:                 new OutputStreamWriter(encodedOutputStream_, encoding);
1: 
commit:4458855
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb29f6
/////////////////////////////////////////////////////////////////////////
1:     private static final ByteArrayInputStream suspendMarker = new ByteArrayInputStream( new byte[ 0 ] );
/////////////////////////////////////////////////////////////////////////
1:     
1:         reader_ = reader;
1:         decodedBuffer_ = new char[charBufferSize];
1:         encodedOutputStream_ = new PublicBufferOutputStream(
1:                 initialByteBufferSize);
1:         
0:         try{
0:             encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,
1:             
0:         }catch(UnsupportedEncodingException e){
0:             // Should never happen. It is up to the caller to ensure the
1:         }
1:     
1:         encodedInputStream_ = suspendMarker;
1:     
1:         throws IOException
1:     
1:         int count;
1:         do{
1:             count = reader.read(decodedBuffer_, 0, decodedBuffer_.length);
1:             
1:         }while(count == 0);
1:             
1:         if(count < 0)
1:             return null;
1:     
1:         encodedOutputStream_.reset();
1:         encodedStreamWriter_.write(decodedBuffer_,0,count);
1:         encodedStreamWriter_.flush();
1:         int encodedLength = encodedOutputStream_.size();
1:     
1:         return new ByteArrayInputStream(encodedOutputStream_.getBuffer(),
1:                                         0,
1:                                         encodedLength);
1:         throws IOException {
1:         
1:         if(encodedInputStream_ == suspendMarker)
1:             encodedInputStream_ = reEncode(reader_);
1:         if(encodedInputStream_ == null){
1:             return 0;
1:         }
1:         return encodedInputStream_.available();
1:     
1:         throws IOException {
1:     
1:         if(encodedInputStream_ != null ){
1:             encodedInputStream_.close();
1:             encodedInputStream_ = null;
1:         }
1:         if(reader_ != null ){
1:             reader_.close();
1:             reader_ = null;
1:         }
1:         if(encodedStreamWriter_ != null){
1:             encodedStreamWriter_.close();
1:             encodedStreamWriter_ = null;
1:         }
1:     
1:         throws IOException {
1:         
1:         if(encodedInputStream_ == suspendMarker)
1:             encodedInputStream_ = reEncode(reader_);
1:         if(encodedInputStream_ == null){
1:             return -1;
1:         }
1:     
1:         int c = encodedInputStream_.read();
1:         if(c > -1){
1:             return c;
1:         
1:         }else{
1:             encodedInputStream_ = reEncode(reader_);
1:         
1:             if(encodedInputStream_ == null){
1:                 return -1;
1:             }
1:         
1:             return encodedInputStream_.read();
1:         }
1:     
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:2371470
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:188fc76
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:956354d
/////////////////////////////////////////////////////////////////////////
1: /*
1:     Derby - Class org.apache.derby.client.net.EncodedInputStream
1: 
1:     Licensed to the Apache Software Foundation (ASF) under one
1:     or more contributor license agreements.  See the NOTICE file
1:     distributed with this work for additional information
1:     regarding copyright ownership.  The ASF licenses this file
1:     to you under the Apache License, Version 2.0 (the
1:     "License"); you may not use this file except in compliance
1:     with the License.  You may obtain a copy of the License at
1: 
1:     http://www.apache.org/licenses/LICENSE-2.0
1: 
1:     Unless required by applicable law or agreed to in writing,
1:     software distributed under the License is distributed on an
1:     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:     KIND, either express or implied.  See the License for the
1:     specific language governing permissions and limitations
1:     under the License.
1: */
1: package org.apache.derby.client.net;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.io.OutputStreamWriter;
0: import java.io.ByteArrayOutputStream;
1: import java.io.ByteArrayInputStream;
1: 
1: import java.io.IOException;
0: import java.io.UnsupportedEncodingException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * Create an encoded stream from a <code>Reader</code>.
1:  *
1:  * This is an internal class, used to pass readers of characters as streams of
1:  * bytes. The characters will be represented according to the specified
1:  * encoding. It is up to the caller to ensure the specified encoding is
1:  * available, and in general only encodings available as default from Java 1.3
1:  * and up should be used.
1:  *
1:  * Currently, the encodings 'UTF8' and 'UTF-16BE' are used.
1:  * Streams are obtained by calling the static methods of this class,
1:  * for instance <code>createUTF8Stream</code>.
1:  */
1: public final class EncodedInputStream extends InputStream {
1: 
1:     /**
1:      * Create a UTF-8 encoded stream from the given <code>Reader</code>.
1:      *
1:      * @param reader the <code>Reader</code> to read characters from.
1:      * @return a byte-stream with UTF-8 encoded characters
1:      */
1:     public static EncodedInputStream createUTF8Stream(Reader reader) {
1:         return new EncodedInputStream(reader, 
0:                                       "UTF8",
1:                                       BUFFERED_CHAR_LEN,
1:                                       BUFFERED_CHAR_LEN*3);
1:     }
1: 
1:     /**
1:      * Create a UTF-16BE encoded stream from the given <code>Reader</code>.
1:      *
1:      * @param reader the <code>Reader</code> to read characters from.
1:      * @return a byte-stream with UTF-16BE encoded characters
1:      */
1:     static EncodedInputStream createUTF16BEStream(Reader reader) {
1:         return new EncodedInputStream(reader,
0:                                       "UTF-16BE",
1:                                       BUFFERED_CHAR_LEN,
1:                                       BUFFERED_CHAR_LEN*2);
1:     }
1:     
1:     private static final int BUFFERED_CHAR_LEN = 1024;
0: 	private static final ByteArrayInputStream suspendMarker = new ByteArrayInputStream( new byte[ 0 ] );
1: 
1:     private Reader reader_;
1:     private final char[] decodedBuffer_;
1:     
1:     private OutputStreamWriter encodedStreamWriter_;
1:     private PublicBufferOutputStream encodedOutputStream_;
1:     
1:     private ByteArrayInputStream encodedInputStream_;
1:     
1:     /**
1:      * Create an encoded stream for the specified <code>Reader</code>.
1:      * 
1:      * @param reader the <code>Reader</code> to read characters from
1:      * @param encoding the encoding to use in the encoded stream
1:      * @param charBufferSize the size of the char buffer. This is the number
1:      *      of characters read at once from the <code>Reader</code>.
1:      * @param initialByteBufferSize the initial size of the byte buffer.
1:      *      holding the encoded bytes
1:      */
1:     private EncodedInputStream(Reader reader,
0:                                String encoding,
1:                                int charBufferSize,
1:                                int initialByteBufferSize) {
1: 	
0: 		reader_ = reader;
0: 		decodedBuffer_ = new char[charBufferSize];
1: 
0: 		encodedOutputStream_ = new PublicBufferOutputStream(
0: 				initialByteBufferSize);
1: 		
0: 		try{
0: 			encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,
0:                                                           encoding);
1: 			
0: 		}catch(UnsupportedEncodingException e){
0: 			// Should never happen. It is up to the caller to ensure the
0:             // specified encoding is available.
0:             if (SanityManager.DEBUG) {
0:                 SanityManager.THROWASSERT("Unavailable encoding specified: " +
0:                         encoding, e);
1:             }
1: 		}
1: 	
0: 		encodedInputStream_ = suspendMarker;
1: 	
1:     }
1: 
1: 
1:     private ByteArrayInputStream reEncode(Reader reader) 
0: 		throws IOException
1:     {
1: 	
0: 		int count;
0: 		do{
0: 			count = reader.read(decodedBuffer_, 0, decodedBuffer_.length);
1: 			
0: 		}while(count == 0);
1: 			
0: 		if(count < 0)
0: 			return null;
1: 	
0: 		encodedOutputStream_.reset();
0: 		encodedStreamWriter_.write(decodedBuffer_,0,count);
0: 		encodedStreamWriter_.flush();
1: 
0: 		int encodedLength = encodedOutputStream_.size();
1: 	
0: 		return new ByteArrayInputStream(encodedOutputStream_.getBuffer(),
0: 										0,
0: 										encodedLength);
1:     }
1:     
1:     
1:     public int available() 
0: 		throws IOException {
1: 		
0: 		if(encodedInputStream_ == suspendMarker)
0: 			encodedInputStream_ = reEncode(reader_);
1: 
0: 		if(encodedInputStream_ == null){
0: 			return 0;
1: 		}
1: 
0: 		return encodedInputStream_.available();
1: 	
1:     }
1:     
1: 
1:     public void close() 
0: 		throws IOException {
1: 	
0: 		if(encodedInputStream_ != null ){
0: 			encodedInputStream_.close();
0: 			encodedInputStream_ = null;
1: 		}
1: 
0: 		if(reader_ != null ){
0: 			reader_.close();
0: 			reader_ = null;
1: 		}
1: 
0: 		if(encodedStreamWriter_ != null){
0: 			encodedStreamWriter_.close();
0: 			encodedStreamWriter_ = null;
1: 		}
1: 	
1:     }
1:     
1:     
1:     public int read() 
0: 		throws IOException {
1: 		
0: 		if(encodedInputStream_ == suspendMarker)
0: 			encodedInputStream_ = reEncode(reader_);
1: 
0: 		if(encodedInputStream_ == null){
0: 			return -1;
1: 		}
1: 	
0: 		int c = encodedInputStream_.read();
1: 
0: 		if(c > -1){
0: 			return c;
1: 	    
0: 		}else{
0: 			encodedInputStream_ = reEncode(reader_);
1: 	    
0: 			if(encodedInputStream_ == null){
0: 				return -1;
1: 			}
1: 	    
0: 			return encodedInputStream_.read();
1: 
1: 		}
1: 	
1:     }
1:     
1:     
0:     protected void finalize() throws IOException {
0: 		close();
1:     }
1:     
1:     
0:     static class PublicBufferOutputStream extends ByteArrayOutputStream{
1: 	
0: 		PublicBufferOutputStream(int size){
0: 			super(size);
1: 		}
1: 
0: 		public byte[] getBuffer(){
0: 			return buf;
1: 		}
1: 	
1:     }
1: }
============================================================================