1:5d18b03: /*
1:5d18b03:  * Licensed to the Apache Software Foundation (ASF) under one
1:5d18b03:  * or more contributor license agreements.  See the NOTICE file
1:5d18b03:  * distributed with this work for additional information
1:5d18b03:  * regarding copyright ownership.  The ASF licenses this file
1:5d18b03:  * to you under the Apache License, Version 2.0 (the
1:5d18b03:  * "License"); you may not use this file except in compliance
1:5d18b03:  * with the License.  You may obtain a copy of the License at
3:5d18b03:  *
1:5d18b03:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5d18b03:  *
1:5d18b03:  * Unless required by applicable law or agreed to in writing,
1:5d18b03:  * software distributed under the License is distributed on an
1:5d18b03:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5d18b03:  * KIND, either express or implied.  See the License for the
1:5d18b03:  * specific language governing permissions and limitations
1:5d18b03:  * under the License.
3:5d18b03:  */
6:5d18b03: 
1:5d18b03: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:5272c90: 
1:5d18b03: import java.lang.reflect.Method;
1:5d18b03: import java.sql.Connection;
1:5d18b03: import java.sql.SQLException;
1:5d18b03: import javax.sql.ConnectionPoolDataSource;
1:5d18b03: import javax.sql.DataSource;
1:5d18b03: import javax.sql.PooledConnection;
1:5d18b03: import javax.sql.XAConnection;
1:5d18b03: import javax.sql.XADataSource;
1:5d18b03: import junit.framework.Test;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:419724b: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:8ed08b2: import org.apache.derbyTesting.junit.J2EEDataSource;
1:3bd1dd8: import org.apache.derbyTesting.junit.JDBC;
1:8ed08b2: import org.apache.derbyTesting.junit.JDBCDataSource;
1:5272c90: 
3:5d18b03: /**
1:5d18b03:  * This class tests that properties of data sources are handled correctly.
1:5d18b03:  */
1:5d18b03: public class DataSourcePropertiesTest extends BaseJDBCTestCase {
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Creates a new test case.
1:5d18b03:      * @param name name of test method
1:5d18b03:      */
1:5d18b03:     public DataSourcePropertiesTest(String name) {
1:5d18b03:         super(name);
6:5d18b03:     }
1:5d18b03: 
1:5d18b03:     // SETUP
1:5d18b03: 
1:16c6f35:     /** Creates a test suite with all test cases
1:16c6f35:      * only running in embedded at the moment.
1:16c6f35:      */
1:5d18b03:     public static Test suite() {
1:5272c90:         
1:5272c90:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DataSourcePropertiesTest");
1:5272c90:         
1:5272c90:         // TODO: Run fixtures in J2ME and JDBC2 (with extensions)
1:5272c90:         // that can be supported there. This disabling matches
1:5272c90:         // the original _app.properties file. Concern was over
1:5272c90:         // XA support (which is supported in JDBC 2 with extensions).
1:5272c90:         if (JDBC.vmSupportsJDBC3()) {
1:5272c90:         
1:5272c90:             // Add all methods starting with 'test'.
1:5272c90:             //suite.addTestSuite(DataSourcePropertiesTest.class);
1:16c6f35:  
1:16c6f35:             Method[] methods = DataSourcePropertiesTest.class.getMethods();
1:16c6f35:             for (int i = 0; i < methods.length; i++) {
1:16c6f35:                 Method m = methods[i];
1:16c6f35:                 if (m.getParameterTypes().length > 0 ||
1:16c6f35:                         !m.getReturnType().equals(Void.TYPE)) {
1:16c6f35:                     continue;
1:16c6f35:                 }
1:16c6f35:                 String name = m.getName();
1:16c6f35:                 if (name.startsWith("embedded")) {
1:16c6f35:                     suite.addTest(new DataSourcePropertiesTest(name));
1:5272c90:                 }
1:5272c90:             }
1:5272c90:         }
1:419724b:         return new CleanDatabaseTestSetup(suite);
1:5d18b03:     }
1:5d18b03: 
1:5d18b03:     // TEST METHODS
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Tests that the default password is not sent as an attribute string when
1:5d18b03:      * <code>attributesAsPassword</code> is <code>true</code>. The test is run
1:5d18b03:      * with a <code>DataSource</code>.
1:5d18b03:      */
1:5d18b03:     public void embeddedTestAttributesAsPasswordWithoutPassword_ds()
2:5d18b03:         throws Exception
2:5d18b03:     {
1:8ed08b2:         DataSource ds = JDBCDataSource.getDataSource();
1:419724b:         JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
1:419724b:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:5d18b03:         Connection c = ds.getConnection();
1:5d18b03:         c.close();
1:5d18b03:     }
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Tests that the default password is not sent as an attribute string when
1:5d18b03:      * <code>attributesAsPassword</code> is <code>true</code>. The test is run
1:5d18b03:      * with a <code>ConnectionPoolDataSource</code>.
1:5d18b03:      */
1:5d18b03:     public void embeddedTestAttributesAsPasswordWithoutPassword_pooled()
1:5d18b03:         throws Exception
1:5d18b03:     {
1:5d18b03:         ConnectionPoolDataSource ds =
1:8ed08b2:             J2EEDataSource.getConnectionPoolDataSource();
1:419724b:         JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
1:419724b:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:419724b:        // DERBY-1586 caused a malformed url error here
1:5d18b03:         PooledConnection pc = ds.getPooledConnection();
1:5d18b03:         Connection c = pc.getConnection();
1:5d18b03:         c.close();
1:5d18b03:     }
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Tests that the default password is not sent as an attribute string when
1:5d18b03:      * <code>attributesAsPassword</code> is <code>true</code>. The test is run
1:5d18b03:      * with an <code>XADataSource</code>.
1:5d18b03:      */
1:5d18b03:     public void embeddedTestAttributesAsPasswordWithoutPassword_xa()
1:5d18b03:         throws Exception
1:5d18b03:     {
1:8ed08b2:         XADataSource ds = J2EEDataSource.getXADataSource();
1:419724b:         JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
1:419724b:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:5d18b03:         XAConnection xa = ds.getXAConnection();
1:5d18b03:         Connection c = xa.getConnection();
1:5d18b03:         c.close();
1:5d18b03:     }
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Tests that the <code>attributesAsPassword</code> property of a
1:5d18b03:      * <code>DataSource</code> causes an explicitly specified password to be
1:5d18b03:      * sent as a property string.
1:5d18b03:      */
1:5d18b03:     public void embeddedTestAttributesAsPasswordWithPassword_ds()
1:5d18b03:         throws Exception
1:5d18b03:     {
1:8ed08b2:         DataSource ds = JDBCDataSource.getDataSource();
1:419724b:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:5d18b03:         try {
1:5d18b03:             Connection c = ds.getConnection("username", "mypassword");
1:5d18b03:             fail("Expected getConnection to fail.");
1:5d18b03:         } catch (SQLException e) {
1:5d18b03:             // expect error because of malformed url
1:5d18b03:             assertSQLState("XJ028", e);
1:5d18b03:         }
1:5d18b03:     }
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Tests that the <code>attributesAsPassword</code> property of a
1:5d18b03:      * <code>ConnectionPoolDataSource</code> causes an explicitly specified
1:5d18b03:      * password to be sent as a property string.
1:5d18b03:      */
1:5d18b03:     public void embeddedTestAttributesAsPasswordWithPassword_pooled()
1:5d18b03:         throws Exception
1:5d18b03:     {
1:5d18b03:         ConnectionPoolDataSource ds =
1:8ed08b2:             J2EEDataSource.getConnectionPoolDataSource();
1:419724b:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:5d18b03:         try {
1:5d18b03:             PooledConnection pc =
1:5d18b03:                 ds.getPooledConnection("username", "mypassword");
1:5d18b03:             fail("Expected getPooledConnection to fail.");
1:5d18b03:         } catch (SQLException e) {
1:5d18b03:             // expect error because of malformed url
1:5d18b03:             assertSQLState("XJ028", e);
1:5d18b03:         }
1:5d18b03:     }
1:5d18b03: 
1:5d18b03:     /**
1:5d18b03:      * Tests that the <code>attributesAsPassword</code> property of an
1:5d18b03:      * <code>XADataSource</code> causes an explicitly specified password to be
1:5d18b03:      * sent as a property string.
1:5d18b03:      */
1:5d18b03:     public void embeddedTestAttributesAsPasswordWithPassword_xa()
1:5d18b03:         throws Exception
1:5d18b03:     {
1:8ed08b2:         XADataSource ds = J2EEDataSource.getXADataSource();
1:419724b:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:5d18b03:         try {
1:5d18b03:             XAConnection xa = ds.getXAConnection("username", "mypassword");
1:5d18b03:             fail("Expected getXAConnection to fail.");
1:5d18b03:         } catch (SQLException e) {
1:5d18b03:             // expect error because of malformed url
1:5d18b03:             assertSQLState("XJ028", e);
1:5d18b03:         }
1:5d18b03:     }
1:5d18b03: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DataSourcePropertiesTest");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:419724b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(suite);
/////////////////////////////////////////////////////////////////////////
1:         JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
1:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
1:         JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
1:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
1:        // DERBY-1586 caused a malformed url error here
/////////////////////////////////////////////////////////////////////////
1:         JDBCDataSource.setBeanProperty(ds, "password",  "mypassword");
1:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
1:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
1:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
1:         JDBCDataSource.setBeanProperty(ds, "attributesAsPassword", Boolean.TRUE);
commit:8ed08b2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:         DataSource ds = JDBCDataSource.getDataSource();
/////////////////////////////////////////////////////////////////////////
1:             J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         XADataSource ds = J2EEDataSource.getXADataSource();
/////////////////////////////////////////////////////////////////////////
1:         DataSource ds = JDBCDataSource.getDataSource();
/////////////////////////////////////////////////////////////////////////
1:             J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         XADataSource ds = J2EEDataSource.getXADataSource();
commit:16c6f35
/////////////////////////////////////////////////////////////////////////
1:     /** Creates a test suite with all test cases
1:      * only running in embedded at the moment.
1:      */
/////////////////////////////////////////////////////////////////////////
1:  
1:             Method[] methods = DataSourcePropertiesTest.class.getMethods();
1:             for (int i = 0; i < methods.length; i++) {
1:                 Method m = methods[i];
1:                 if (m.getParameterTypes().length > 0 ||
1:                         !m.getReturnType().equals(Void.TYPE)) {
1:                     continue;
1:                 }
1:                 String name = m.getName();
1:                 if (name.startsWith("embedded")) {
1:                     suite.addTest(new DataSourcePropertiesTest(name));
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("DataSourcePropertiesTest");
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
commit:5272c90
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         
1:         
1:         
1:         // TODO: Run fixtures in J2ME and JDBC2 (with extensions)
1:         // that can be supported there. This disabling matches
1:         // the original _app.properties file. Concern was over
1:         // XA support (which is supported in JDBC 2 with extensions).
1:         if (JDBC.vmSupportsJDBC3()) {
1:         
1:             // Add all methods starting with 'test'.
1:             //suite.addTestSuite(DataSourcePropertiesTest.class);
1:             
0:             if (usingEmbedded()) {
1:            
0:                 // When using embedded, add all methods starting with 'embedded'.
0:                 Method[] methods = DataSourcePropertiesTest.class.getMethods();
0:                 for (int i = 0; i < methods.length; i++) {
0:                     Method m = methods[i];
0:                     if (m.getParameterTypes().length > 0 ||
0:                             m.getReturnType().equals(Void.TYPE)) {
0:                         continue;
1:                     }
0:                     String name = m.getName();
0:                     if (name.startsWith("embedded")) {
0:                         suite.addTest(new DataSourcePropertiesTest(name));
1:                     }
1:                 }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d18b03
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.lang.reflect.Method;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import javax.sql.ConnectionPoolDataSource;
1: import javax.sql.DataSource;
1: import javax.sql.PooledConnection;
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
0: import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
1: /**
1:  * This class tests that properties of data sources are handled correctly.
1:  */
1: public class DataSourcePropertiesTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Creates a new test case.
1:      * @param name name of test method
1:      */
1:     public DataSourcePropertiesTest(String name) {
1:         super(name);
1:     }
1: 
1:     // SETUP
1: 
0:     /** Creates a test suite with all test cases. */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite();
0:         Method[] methods = DataSourcePropertiesTest.class.getMethods();
0:         // Add all methods starting with 'test'.
0:         // When using embedded, add all methods starting with 'embedded'.
0:         for (int i = 0; i < methods.length; i++) {
0:             Method m = methods[i];
0:             if (m.getParameterTypes().length > 0 ||
0:                     m.getReturnType() != Void.TYPE) {
0:                 continue;
1:             }
0:             String name = m.getName();
0:             if (name.startsWith("test") ||
0:                     (name.startsWith("embedded") && usingEmbedded())) {
0:                 suite.addTest(new DataSourcePropertiesTest(name));
1:             }
1:         }
0:         return suite;
1:     }
1: 
0:     // HELPER METHODS
1: 
1:     /**
0:      * Sets a property of a data source object.
1:      *
0:      * @param dataSource the data source
0:      * @param name name of the property to set
0:      * @param value property value
0:      * @param type property type (useful for setting <code>null</code> or
0:      * primitive types)
1:      */
0:     private void setDataSourceProperty(Object dataSource, String name,
0:                                        Object value, Class type)
1:         throws Exception
1:     {
0:         Method setter = dataSource.getClass().
0:             getMethod(TestUtil.getSetterName(name), new Class[] { type });
0:         setter.invoke(dataSource, new Object[] { value });
1:     }
1: 
1:     /**
0:      * Sets a property of a data source object.
1:      *
0:      * @param dataSource the data source
0:      * @param name name of the property to set
0:      * @param value property value
1:      */
0:     private void setDataSourceProperty(Object dataSource, String name,
0:                                        Object value) throws Exception {
0:         setDataSourceProperty(dataSource, name, value, value.getClass());
1:     }
1: 
1:     // TEST METHODS
1: 
1:     /**
1:      * Tests that the default password is not sent as an attribute string when
1:      * <code>attributesAsPassword</code> is <code>true</code>. The test is run
1:      * with a <code>DataSource</code>.
1:      */
1:     public void embeddedTestAttributesAsPasswordWithoutPassword_ds()
1:         throws Exception
1:     {
0:         DataSource ds = TestDataSourceFactory.getDataSource();
0:         setDataSourceProperty(ds, "password", "mypassword");
0:         setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
0:                               Boolean.TYPE);
1:         Connection c = ds.getConnection();
1:         c.close();
1:     }
1: 
1:     /**
1:      * Tests that the default password is not sent as an attribute string when
1:      * <code>attributesAsPassword</code> is <code>true</code>. The test is run
1:      * with a <code>ConnectionPoolDataSource</code>.
1:      */
1:     public void embeddedTestAttributesAsPasswordWithoutPassword_pooled()
1:         throws Exception
1:     {
1:         ConnectionPoolDataSource ds =
0:             TestDataSourceFactory.getConnectionPoolDataSource();
0:         setDataSourceProperty(ds, "password", "mypassword");
0:         setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
0:                               Boolean.TYPE);
0:         // DERBY-1586 caused a malformed url error here
1:         PooledConnection pc = ds.getPooledConnection();
1:         Connection c = pc.getConnection();
1:         c.close();
1:     }
1: 
1:     /**
1:      * Tests that the default password is not sent as an attribute string when
1:      * <code>attributesAsPassword</code> is <code>true</code>. The test is run
1:      * with an <code>XADataSource</code>.
1:      */
1:     public void embeddedTestAttributesAsPasswordWithoutPassword_xa()
1:         throws Exception
1:     {
0:         XADataSource ds = TestDataSourceFactory.getXADataSource();
0:         setDataSourceProperty(ds, "password", "mypassword");
0:         setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
0:                               Boolean.TYPE);
1:         XAConnection xa = ds.getXAConnection();
1:         Connection c = xa.getConnection();
1:         c.close();
1:     }
1: 
1:     /**
1:      * Tests that the <code>attributesAsPassword</code> property of a
1:      * <code>DataSource</code> causes an explicitly specified password to be
1:      * sent as a property string.
1:      */
1:     public void embeddedTestAttributesAsPasswordWithPassword_ds()
1:         throws Exception
1:     {
0:         DataSource ds = TestDataSourceFactory.getDataSource();
0:         setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
0:                               Boolean.TYPE);
1:         try {
1:             Connection c = ds.getConnection("username", "mypassword");
1:             fail("Expected getConnection to fail.");
1:         } catch (SQLException e) {
1:             // expect error because of malformed url
1:             assertSQLState("XJ028", e);
1:         }
1:     }
1: 
1:     /**
1:      * Tests that the <code>attributesAsPassword</code> property of a
1:      * <code>ConnectionPoolDataSource</code> causes an explicitly specified
1:      * password to be sent as a property string.
1:      */
1:     public void embeddedTestAttributesAsPasswordWithPassword_pooled()
1:         throws Exception
1:     {
1:         ConnectionPoolDataSource ds =
0:             TestDataSourceFactory.getConnectionPoolDataSource();
0:         setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
0:                               Boolean.TYPE);
1:         try {
1:             PooledConnection pc =
1:                 ds.getPooledConnection("username", "mypassword");
1:             fail("Expected getPooledConnection to fail.");
1:         } catch (SQLException e) {
1:             // expect error because of malformed url
1:             assertSQLState("XJ028", e);
1:         }
1:     }
1: 
1:     /**
1:      * Tests that the <code>attributesAsPassword</code> property of an
1:      * <code>XADataSource</code> causes an explicitly specified password to be
1:      * sent as a property string.
1:      */
1:     public void embeddedTestAttributesAsPasswordWithPassword_xa()
1:         throws Exception
1:     {
0:         XADataSource ds = TestDataSourceFactory.getXADataSource();
0:         setDataSourceProperty(ds, "attributesAsPassword", Boolean.TRUE,
0:                               Boolean.TYPE);
1:         try {
1:             XAConnection xa = ds.getXAConnection("username", "mypassword");
1:             fail("Expected getXAConnection to fail.");
1:         } catch (SQLException e) {
1:             // expect error because of malformed url
1:             assertSQLState("XJ028", e);
1:         }
1:     }
1: }
============================================================================