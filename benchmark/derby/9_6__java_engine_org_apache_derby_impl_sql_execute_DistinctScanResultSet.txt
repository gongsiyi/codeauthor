1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DistinctScanResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:49f3f24: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Eliminates duplicates while scanning the underlying conglomerate.
1:eac0369:  * (Assumes no predicates, for now.)
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class DistinctScanResultSet extends HashScanResultSet
1:eac0369: {
1:eac0369: 
1:eac0369: 	Enumeration element = null;
1:eac0369: 
1:eac0369: 
1:eac0369:     //
1:eac0369:     // class interface
1:eac0369:     //
1:f77f36d:     DistinctScanResultSet(long conglomId, 
1:eac0369: 		StaticCompiledOpenConglomInfo scoci, Activation activation, 
1:959fef2: 		int resultRowTemplate,
1:eac0369: 		int resultSetNumber,
1:eac0369: 		int hashKeyItem,
1:eac0369: 		String tableName,
1:c7248d5: 		String userSuppliedOptimizerOverrides,
1:eac0369: 		String indexName,
1:eac0369: 		boolean isConstraint,
1:eac0369: 		int colRefItem,
1:eac0369: 		int lockMode,
1:eac0369: 		boolean tableLocked,
1:eac0369: 		int isolationLevel,
1:eac0369: 		double optimizerEstimatedRowCount,
1:f77f36d: 		double optimizerEstimatedCost)
1:eac0369: 			throws StandardException
1:eac0369:     {
1:959fef2: 		super(conglomId, scoci, activation, resultRowTemplate, resultSetNumber,
1:eac0369: 			  (GeneratedMethod) null, // startKeyGetter
1:eac0369: 			  0,					  // startSearchOperator
1:eac0369: 			  (GeneratedMethod) null, // stopKeyGetter
1:eac0369: 			  0,					  // stopSearchOperator
1:eac0369: 			  false,				  // sameStartStopPosition
1:eac0369: 			  (Qualifier[][]) null,	  // scanQualifiers
1:eac0369: 			  (Qualifier[][]) null,	  // nextQualifiers
1:eac0369: 			  DEFAULT_INITIAL_CAPACITY, DEFAULT_LOADFACTOR, DEFAULT_MAX_CAPACITY,
1:c7248d5: 			  hashKeyItem, tableName, userSuppliedOptimizerOverrides, indexName, isConstraint, 
1:eac0369: 			  false,				  // forUpdate
1:eac0369: 			  colRefItem, lockMode, tableLocked, isolationLevel,
1:eac0369: 			  false,
1:f77f36d: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369: 
1:eac0369: 		// Tell super class to eliminate duplicates
1:eac0369: 		eliminateDuplicates = true;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (override methods from HashScanResultSet)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Return the next row (if any) from the scan (if open).
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to get next row
1:eac0369: 	 */
1:eac0369: 	public ExecRow getNextRowCore() throws StandardException
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 	    ExecRow result = null;
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 	    if ( isOpen )
1:eac0369: 	    {
1:eac0369: 			if (firstNext)
1:eac0369: 			{
1:eac0369: 				element = hashtable.elements();
1:eac0369: 				firstNext = false;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (element.hasMoreElements())
1:eac0369: 			{
1:e81e52c:                 DataValueDescriptor[] columns = unpackHashValue( element.nextElement() );
1:eac0369: 
1:eac0369: 				setCompatRow(compactRow, columns);
1:eac0369: 
1:eac0369: 				rowsSeen++;
1:eac0369: 
1:eac0369: 				result = compactRow;
1:eac0369: 			}
1:eac0369: 			// else done
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		setCurrentRow(result);
1:eac0369: 
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 	    return result;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e81e52c
/////////////////////////////////////////////////////////////////////////
1:                 DataValueDescriptor[] columns = unpackHashValue( element.nextElement() );
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:959fef2
/////////////////////////////////////////////////////////////////////////
1: 		int resultRowTemplate,
/////////////////////////////////////////////////////////////////////////
1: 		super(conglomId, scoci, activation, resultRowTemplate, resultSetNumber,
commit:79e7790
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
commit:49f3f24
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataValueDescriptor;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 DataValueDescriptor[] columns = (DataValueDescriptor[]) element.nextElement();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class DistinctScanResultSet extends HashScanResultSet
/////////////////////////////////////////////////////////////////////////
1:     DistinctScanResultSet(long conglomId, 
/////////////////////////////////////////////////////////////////////////
1: 		double optimizerEstimatedCost)
/////////////////////////////////////////////////////////////////////////
1: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DistinctScanResultSet
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
0: import org.apache.derby.iapi.services.io.FormatableIntHolder;
1: 
1: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.Vector;
1: 
1: /**
1:  * Eliminates duplicates while scanning the underlying conglomerate.
1:  * (Assumes no predicates, for now.)
1:  *
0:  * @author jerry
1:  */
0: public class DistinctScanResultSet extends HashScanResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	Enumeration element = null;
1: 
1: 
1:     //
1:     // class interface
1:     //
0:     public DistinctScanResultSet(long conglomId, 
1: 		StaticCompiledOpenConglomInfo scoci, Activation activation, 
0: 		GeneratedMethod resultRowAllocator, 
1: 		int resultSetNumber,
1: 		int hashKeyItem,
1: 		String tableName,
1: 		String indexName,
1: 		boolean isConstraint,
1: 		int colRefItem,
1: 		int lockMode,
1: 		boolean tableLocked,
1: 		int isolationLevel,
1: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup)
1: 			throws StandardException
1:     {
0: 		super(conglomId, scoci, activation, resultRowAllocator, resultSetNumber,
1: 			  (GeneratedMethod) null, // startKeyGetter
1: 			  0,					  // startSearchOperator
1: 			  (GeneratedMethod) null, // stopKeyGetter
1: 			  0,					  // stopSearchOperator
1: 			  false,				  // sameStartStopPosition
1: 			  (Qualifier[][]) null,	  // scanQualifiers
1: 			  (Qualifier[][]) null,	  // nextQualifiers
1: 			  DEFAULT_INITIAL_CAPACITY, DEFAULT_LOADFACTOR, DEFAULT_MAX_CAPACITY,
0: 			  hashKeyItem, tableName, indexName, isConstraint, 
1: 			  false,				  // forUpdate
1: 			  colRefItem, lockMode, tableLocked, isolationLevel,
1: 			  false,
0: 			  optimizerEstimatedRowCount, optimizerEstimatedCost, closeCleanup);
1: 
1: 		// Tell super class to eliminate duplicates
1: 		eliminateDuplicates = true;
1:     }
1: 
1: 	//
1: 	// ResultSet interface (override methods from HashScanResultSet)
1: 	//
1: 
1: 	/**
1:      * Return the next row (if any) from the scan (if open).
1: 	 *
1: 	 * @exception StandardException thrown on failure to get next row
1: 	 */
1: 	public ExecRow getNextRowCore() throws StandardException
1: 	{
1: 	    ExecRow result = null;
0: 		Object[] columns = null;
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 	    if ( isOpen )
1: 	    {
1: 			if (firstNext)
1: 			{
1: 				element = hashtable.elements();
1: 				firstNext = false;
1: 			}
1: 
1: 			if (element.hasMoreElements())
1: 			{
0: 				columns = (Object[]) element.nextElement();
1: 
1: 				setCompatRow(compactRow, columns);
1: 
1: 				rowsSeen++;
1: 
1: 				result = compactRow;
1: 			}
1: 			// else done
1: 		}
1: 
0: 		currentRow = result;
1: 		setCurrentRow(result);
1: 
1: 		nextTime += getElapsedMillis(beginTime);
1: 	    return result;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
1: 		String userSuppliedOptimizerOverrides,
/////////////////////////////////////////////////////////////////////////
1: 			  hashKeyItem, tableName, userSuppliedOptimizerOverrides, indexName, isConstraint, 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
0: import org.apache.derby.iapi.services.io.FormatableIntHolder;
0: 
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.Vector;
0: 
0: /**
0:  * Eliminates duplicates while scanning the underlying conglomerate.
0:  * (Assumes no predicates, for now.)
0:  *
0:  * @author jerry
0:  */
0: public class DistinctScanResultSet extends HashScanResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	Enumeration element = null;
0: 
0: 
0:     //
0:     // class interface
0:     //
0:     public DistinctScanResultSet(long conglomId, 
0: 		StaticCompiledOpenConglomInfo scoci, Activation activation, 
0: 		GeneratedMethod resultRowAllocator, 
0: 		int resultSetNumber,
0: 		int hashKeyItem,
0: 		String tableName,
0: 		String indexName,
0: 		boolean isConstraint,
0: 		int colRefItem,
0: 		int lockMode,
0: 		boolean tableLocked,
0: 		int isolationLevel,
0: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup)
0: 			throws StandardException
0:     {
0: 		super(conglomId, scoci, activation, resultRowAllocator, resultSetNumber,
0: 			  (GeneratedMethod) null, // startKeyGetter
0: 			  0,					  // startSearchOperator
0: 			  (GeneratedMethod) null, // stopKeyGetter
0: 			  0,					  // stopSearchOperator
0: 			  false,				  // sameStartStopPosition
0: 			  (Qualifier[][]) null,	  // scanQualifiers
0: 			  (Qualifier[][]) null,	  // nextQualifiers
0: 			  DEFAULT_INITIAL_CAPACITY, DEFAULT_LOADFACTOR, DEFAULT_MAX_CAPACITY,
0: 			  hashKeyItem, tableName, indexName, isConstraint, 
0: 			  false,				  // forUpdate
0: 			  colRefItem, lockMode, tableLocked, isolationLevel,
0: 			  false,
0: 			  optimizerEstimatedRowCount, optimizerEstimatedCost, closeCleanup);
0: 
0: 		// Tell super class to eliminate duplicates
0: 		eliminateDuplicates = true;
0:     }
0: 
0: 	//
0: 	// ResultSet interface (override methods from HashScanResultSet)
0: 	//
0: 
0: 	/**
0:      * Return the next row (if any) from the scan (if open).
0: 	 *
0: 	 * @exception StandardException thrown on failure to get next row
0: 	 */
0: 	public ExecRow getNextRowCore() throws StandardException
0: 	{
0: 	    ExecRow result = null;
0: 		Object[] columns = null;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 	    if ( isOpen )
0: 	    {
0: 			if (firstNext)
0: 			{
0: 				element = hashtable.elements();
0: 				firstNext = false;
0: 			}
0: 
0: 			if (element.hasMoreElements())
0: 			{
0: 				columns = (Object[]) element.nextElement();
0: 
0: 				setCompatRow(compactRow, columns);
0: 
0: 				rowsSeen++;
0: 
0: 				result = compactRow;
0: 			}
0: 			// else done
0: 		}
0: 
0: 		currentRow = result;
0: 		setCurrentRow(result);
0: 
0: 		nextTime += getElapsedMillis(beginTime);
0: 	    return result;
0: 	}
0: }
============================================================================