1:f63124f: package org.apache.derbyTesting.functionTests.tests.largedata;
4:f63124f: 
1:f63124f: import java.sql.Connection;
1:f63124f: import java.sql.PreparedStatement;
1:f63124f: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:f63124f: 
1:f63124f: 
1:f63124f: /*
1:f63124f: Class org.apache.derbyTesting.functionTests.tests.store.Derby5624Test
1:f63124f: 
1:f63124f: Licensed to the Apache Software Foundation (ASF) under one or more
1:f63124f: contributor license agreements.  See the NOTICE file distributed with
1:f63124f: this work for additional information regarding copyright ownership.
1:f63124f: The ASF licenses this file to you under the Apache License, Version 2.0
1:f63124f: (the "License"); you may not use this file except in compliance with
1:f63124f: the License.  You may obtain a copy of the License at
1:f63124f: 
1:f63124f:    http://www.apache.org/licenses/LICENSE-2.0
1:f63124f: 
1:f63124f: Unless required by applicable law or agreed to in writing, software
1:f63124f: distributed under the License is distributed on an "AS IS" BASIS,
1:f63124f: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f63124f: See the License for the specific language governing permissions and
1:f63124f: limitations under the License.
1:f63124f: 
1:f63124f: */
1:f63124f: 
1:f63124f: 
1:f63124f: /**
1:f63124f: 
1:89c0bc3: Test to reproduce DERBY-5624, a recursion during DropOnCommit causes out
1:89c0bc3: of stack space for operations that generate a lot of objects to be dropped
1:89c0bc3: at commit time. 
1:89c0bc3: 
1:89c0bc3: This test reproduces the problem by creating a table with 1000 columns, then
1:89c0bc3: an index on each of those columns, loads some data and then call compress
1:89c0bc3: will drop and recreate each of those indexes.  At commit time each index
1:89c0bc3: drop will have registered itself onto the Observer list for processing at
1:89c0bc3: commit time.  Before fix this would fail with out of disk space in at least
1:89c0bc3: XP, ibm16 default jvm configuration.
1:f63124f: 
1:f63124f: **/
1:f63124f: 
1:f63124f: public class Derby5624Test extends BaseJDBCTestCase
1:f63124f: {
1:f63124f:     /**************************************************************************
1:f63124f:      * Fields of the class
1:f63124f:      **************************************************************************
1:f63124f:      */
1:f63124f: 
1:f63124f:     /**************************************************************************
1:f63124f:      * Constructors for This class:
1:f63124f:      **************************************************************************
1:f63124f:      */
1:f63124f: 
1:f63124f:     /**************************************************************************
1:f63124f:      * Private/Protected methods of This class:
1:f63124f:      **************************************************************************
1:f63124f:      */
1:f63124f: 
1:f63124f:     /**************************************************************************
1:f63124f:      * Public Methods of This class:
1:f63124f:      **************************************************************************
1:f63124f:      */
1:f63124f: 
1:f63124f:     /**************************************************************************
1:f63124f:      * Public Methods of XXXX class:
1:f63124f:      **************************************************************************
1:f63124f:      */
1:f63124f: 
1:f63124f:     public Derby5624Test(String name) 
1:f63124f:     {
1:f63124f:         super(name);
1:f63124f:     }
1:f63124f: 
1:f63124f:     
1:f63124f:     /**
1:f63124f:      * DERBY-5624 test case
1:f63124f:      * <p>
1:f63124f:      *
1:f63124f:      **/
1:f63124f:     public void testDERBY_5624()
1:f63124f:         throws SQLException
1:f63124f:     {
1:f63124f:         Statement stmt = createStatement();
1:f63124f: 
1:f63124f:         PreparedStatement insert_stmt = 
1:f63124f:             prepareStatement(
1:f63124f:                 "INSERT INTO TESTBIGTABLE (col1, col2, col3) VALUES(?, ?, ?)");
1:f63124f: 
1:f63124f:         for (int i = 0; i < 3000; i++)
1:f63124f:         {
1:f63124f:             insert_stmt.setInt(1, i);
1:f63124f:             insert_stmt.setInt(2, -(i));
1:f63124f:             insert_stmt.setInt(3, i);
1:f63124f:             insert_stmt.executeUpdate();
1:f63124f:         }
1:f63124f: 
1:f63124f:         commit();
1:f63124f: 
1:f63124f:         // create index on each column
1:f63124f:         for (int i = 0; i < 1000; i++)
1:f63124f:         {
1:f63124f:             stmt.executeUpdate(
1:f63124f:                 "CREATE INDEX INDEXBIG" + i + 
1:f63124f:                 " on TESTBIGTABLE (col" + i + ")");
1:f63124f:         }
1:f63124f:         commit();
1:f63124f: 
1:f63124f:         // see if compress succeeeds 
1:f63124f:         stmt.executeUpdate(
1:f63124f:             "call SYSCS_UTIL.SYSCS_COMPRESS_TABLE('APP', 'TESTBIGTABLE', 0)");
1:f63124f: 
1:f63124f:         commit();
1:f63124f: 
1:89c0bc3:         // verify access to table after the commit, previous to fix the
1:89c0bc3:         // commit would fail with an out of memory or out of stack space error.
1:f63124f:         JDBC.assertUnorderedResultSet(
1:f63124f:             prepareStatement(
1:f63124f:                 "select col1, col2 from TESTBIGTABLE where col1 = 10").executeQuery(),
1:f63124f:             new String[][] {{"10", "-10"}});
1:f63124f: 
1:f63124f:     }
1:f63124f: 
1:f63124f:     protected static Test baseSuite(String name) 
1:f63124f:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:f63124f:         suite.addTestSuite(Derby5624Test.class);
1:45f25aa:         return new CleanDatabaseTestSetup(suite)
1:f63124f:         {
1:f63124f:             /**
1:f63124f:              * Creates the tables used in the test cases.
1:f63124f:              * @exception SQLException if a database error occurs
1:f63124f:              */
1:f63124f:             protected void decorateSQL(Statement stmt) throws SQLException
1:f63124f:             {
1:f63124f:                 Connection conn = stmt.getConnection();
1:f63124f: 
1:f63124f:                 // create table with 1000 columns
1:f63124f:                 StringBuffer create_table_qry = new StringBuffer(10000);
1:f63124f: 
1:f63124f:                 create_table_qry.append("CREATE TABLE TESTBIGTABLE (col0 int");
1:f63124f: 
1:f63124f:                 for (int colnum = 1; colnum < 1000; colnum++)
1:f63124f:                 {
1:f63124f:                     create_table_qry.append(", col" + colnum + " int");
1:f63124f:                 }
1:f63124f:                 create_table_qry.append(")");
1:f63124f: 
1:f63124f:                 // CREATE TABLE TESTBIGTABLE (
1:f63124f:                 //     col0 int, col1 int, ... , col999 int)
1:f63124f:                 stmt.executeUpdate(create_table_qry.toString());
1:f63124f: 
1:f63124f:                 conn.setAutoCommit(false);
1:f63124f:             }
1:f63124f:         };
1:f63124f:     }
1:f63124f: 
1:f63124f:     public static Test suite() 
1:f63124f:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Derby5624Test");
1:f63124f:         suite.addTest(baseSuite("Derby5624Test:embedded"));
1:f63124f:         return suite;
1:f63124f:     }
1:f63124f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Derby5624Test");
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:45f25aa
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(suite)
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:89c0bc3
/////////////////////////////////////////////////////////////////////////
1: Test to reproduce DERBY-5624, a recursion during DropOnCommit causes out
1: of stack space for operations that generate a lot of objects to be dropped
1: at commit time. 
1: 
1: This test reproduces the problem by creating a table with 1000 columns, then
1: an index on each of those columns, loads some data and then call compress
1: will drop and recreate each of those indexes.  At commit time each index
1: drop will have registered itself onto the Observer list for processing at
1: commit time.  Before fix this would fail with out of disk space in at least
1: XP, ibm16 default jvm configuration.
/////////////////////////////////////////////////////////////////////////
1:         // verify access to table after the commit, previous to fix the
1:         // commit would fail with an out of memory or out of stack space error.
commit:f63124f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.largedata;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
1: 
1: /*
1: Class org.apache.derbyTesting.functionTests.tests.store.Derby5624Test
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to you under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: 
1: /**
1: 
0: Test to reproduce DERBY-5624, An expanding update fails with an nospc.U error.
1: 
1: **/
1: 
1: public class Derby5624Test extends BaseJDBCTestCase
1: {
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of XXXX class:
1:      **************************************************************************
1:      */
1: 
1:     public Derby5624Test(String name) 
1:     {
1:         super(name);
1:     }
1: 
1:     
1:     /**
1:      * DERBY-5624 test case
1:      * <p>
1:      *
1:      **/
1:     public void testDERBY_5624()
1:         throws SQLException
1:     {
1:         Statement stmt = createStatement();
1: 
1:         PreparedStatement insert_stmt = 
1:             prepareStatement(
1:                 "INSERT INTO TESTBIGTABLE (col1, col2, col3) VALUES(?, ?, ?)");
1: 
1:         for (int i = 0; i < 3000; i++)
1:         {
1:             insert_stmt.setInt(1, i);
1:             insert_stmt.setInt(2, -(i));
1:             insert_stmt.setInt(3, i);
1:             insert_stmt.executeUpdate();
1:         }
1: 
1:         commit();
1: 
1:         // create index on each column
1:         for (int i = 0; i < 1000; i++)
1:         {
1:             stmt.executeUpdate(
1:                 "CREATE INDEX INDEXBIG" + i + 
1:                 " on TESTBIGTABLE (col" + i + ")");
1:         }
1:         commit();
1: 
1:         // see if compress succeeeds 
1:         stmt.executeUpdate(
1:             "call SYSCS_UTIL.SYSCS_COMPRESS_TABLE('APP', 'TESTBIGTABLE', 0)");
1: 
1:         commit();
1: 
0:         // verify access to table
1:         JDBC.assertUnorderedResultSet(
1:             prepareStatement(
1:                 "select col1, col2 from TESTBIGTABLE where col1 = 10").executeQuery(),
1:             new String[][] {{"10", "-10"}});
1: 
1:     }
1: 
1:     protected static Test baseSuite(String name) 
1:     {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(Derby5624Test.class);
0:         return new CleanDatabaseTestSetup(
0:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
1:         {
1:             /**
1:              * Creates the tables used in the test cases.
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
1:                 Connection conn = stmt.getConnection();
1: 
1:                 // create table with 1000 columns
1:                 StringBuffer create_table_qry = new StringBuffer(10000);
1: 
1:                 create_table_qry.append("CREATE TABLE TESTBIGTABLE (col0 int");
1: 
1:                 for (int colnum = 1; colnum < 1000; colnum++)
1:                 {
1:                     create_table_qry.append(", col" + colnum + " int");
1:                 }
1:                 create_table_qry.append(")");
1: 
1:                 // CREATE TABLE TESTBIGTABLE (
1:                 //     col0 int, col1 int, ... , col999 int)
1:                 stmt.executeUpdate(create_table_qry.toString());
1: 
1:                 conn.setAutoCommit(false);
1:             }
1:         };
1:     }
1: 
1:     public static Test suite() 
1:     {
0:         TestSuite suite = new TestSuite("Derby5624Test");
1:         suite.addTest(baseSuite("Derby5624Test:embedded"));
1:         return suite;
1:     }
1: }
============================================================================