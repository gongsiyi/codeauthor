1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/AdminPermission.java,v 1.34 2007/02/21 16:49:05 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.lang.reflect.Constructor;
1:a8b6921: import java.lang.reflect.InvocationTargetException;
1:a8b6921: import java.security.*;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A bundle's authority to perform specific privileged administrative operations
1:a8b6921:  * on or to get sensitive information about a bundle. The actions for this
1:a8b6921:  * permission are:
1:a8b6921:  * 
1:a8b6921:  * <pre>
1:a8b6921:  *   Action               Methods
1:a8b6921:  *   class                Bundle.loadClass
1:a8b6921:  *   execute              Bundle.start
1:a8b6921:  *                        Bundle.stop
1:a8b6921:  *                        StartLevel.setBundleStartLevel
1:a8b6921:  *   extensionLifecycle   BundleContext.installBundle for extension bundles
1:a8b6921:  *                        Bundle.update for extension bundles
1:a8b6921:  *                        Bundle.uninstall for extension bundles
1:a8b6921:  *   lifecycle            BundleContext.installBundle
1:a8b6921:  *                        Bundle.update
1:a8b6921:  *                        Bundle.uninstall
1:a8b6921:  *   listener             BundleContext.addBundleListener for SynchronousBundleListener
1:a8b6921:  *                        BundleContext.removeBundleListener for SynchronousBundleListener
1:a8b6921:  *   metadata             Bundle.getHeaders
1:a8b6921:  *                        Bundle.getLocation
1:a8b6921:  *   resolve              PackageAdmin.refreshPackages
1:a8b6921:  *                        PackageAdmin.resolveBundles
1:a8b6921:  *   resource             Bundle.getResource
1:a8b6921:  *                        Bundle.getResources
1:a8b6921:  *                        Bundle.getEntry
1:a8b6921:  *                        Bundle.getEntryPaths
1:a8b6921:  *                        Bundle.findEntries
1:a8b6921:  *                        Bundle resource/entry URL creation
1:a8b6921:  *   startlevel           StartLevel.setStartLevel
1:a8b6921:  *                        StartLevel.setInitialBundleStartLevel 
1:a8b6921:  *   context              Bundle.getBundleContext                     
1:a8b6921:  *                        
1:a8b6921:  * </pre>
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The special action &quot;*&quot; will represent all actions.
1:a8b6921:  * <p>
1:a8b6921:  * The name of this permission is a filter expression. The filter gives access
1:a8b6921:  * to the following parameters:
1:a8b6921:  * <ul>
1:a8b6921:  * <li>signer - A Distinguished Name chain used to sign a bundle. Wildcards in
1:a8b6921:  * a DN are not matched according to the filter string rules, but according to
1:a8b6921:  * the rules defined for a DN chain.</li>
1:a8b6921:  * <li>location - The location of a bundle.</li>
1:a8b6921:  * <li>id - The bundle ID of the designated bundle.</li>
1:a8b6921:  * <li>name - The symbolic name of a bundle.</li>
1:a8b6921:  * </ul>
1:a8b6921:  * 
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.34 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public final class AdminPermission extends BasicPermission {
1:a8b6921: 	static final long					serialVersionUID	= 307051004521261705L;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>class</code> (Value is "class").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			CLASS				= "class";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>execute</code> (Value is "execute").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			EXECUTE				= "execute";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>extensionLifecycle</code> (Value is
1:a8b6921: 	 * "extensionLifecycle").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			EXTENSIONLIFECYCLE	= "extensionLifecycle";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>lifecycle</code> (Value is "lifecycle").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			LIFECYCLE			= "lifecycle";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>listener</code> (Value is "listener").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			LISTENER			= "listener";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>metadata</code> (Value is "metadata").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			METADATA			= "metadata";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>resolve</code> (Value is "resolve").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			RESOLVE				= "resolve";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>resource</code> (Value is "resource").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			RESOURCE			= "resource";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>startlevel</code> (Value is "startlevel").
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String			STARTLEVEL			= "startlevel";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>context</code> (Value is "context").
1:a8b6921: 	 * @since 1.4
1:a8b6921: 	 */
1:a8b6921: 	public final static String			CONTEXT				= "context";
1:a8b6921: 	
1:a8b6921: 	/*
1:a8b6921: 	 * NOTE: A framework implementor may also choose to replace this class in
1:a8b6921: 	 * their distribution with a class that directly interfaces with the
1:a8b6921: 	 * framework implementation. This replacement class MUST NOT
1:a8b6921: 	 * alter the public/protected signature of this class.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	/*
1:a8b6921: 	 * This class will load the AdminPermission class in the package named by
1:a8b6921: 	 * the org.osgi.vendor.framework package. For each instance of this class,
1:a8b6921: 	 * an instance of the vendor AdminPermission class will be created and this
1:a8b6921: 	 * class will delegate method calls to the vendor AdminPermission instance.
1:a8b6921: 	 */
1:a8b6921: 
1:7051698: 	private static class ImplHolder implements PrivilegedAction<Constructor[]> {
1:a8b6921: 		private static final String			packageProperty		= "org.osgi.vendor.framework";
1:a8b6921: 		static final Constructor	initStringString;
1:a8b6921: 		static final Constructor	initBundleString;
1:a8b6921: 		static {
1:7051698: 			Constructor[] constructors = AccessController.doPrivileged(new ImplHolder());
1:a8b6921: 			
1:a8b6921: 			initStringString = constructors[0];
1:a8b6921: 			initBundleString = constructors[1];
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		private ImplHolder() {
1:a8b6921: 		}
1:a8b6921: 		
1:7051698: 		public Constructor[] run() {
1:a8b6921: 			String packageName = System
1:a8b6921: 			.getProperty(packageProperty);
1:a8b6921: 			if (packageName == null) {
1:a8b6921: 				throw new NoClassDefFoundError(packageProperty
1:a8b6921: 						+ " property not set");
1:a8b6921: 			}
1:a8b6921: 			
1:7051698: 			Class<?> delegateClass;
1:a8b6921: 			try {
1:a8b6921: 				delegateClass = Class.forName(packageName
1:a8b6921: 						+ ".AdminPermission");
1:a8b6921: 			}
1:a8b6921: 			catch (ClassNotFoundException e) {
1:a8b6921: 				throw new NoClassDefFoundError(e.toString());
1:a8b6921: 			}
1:a8b6921: 			
1:a8b6921: 			Constructor[] result = new Constructor[2];
1:a8b6921: 			try {
1:a8b6921: 				result[0] = delegateClass
1:a8b6921: 				.getConstructor(new Class[] {String.class,
1:a8b6921: 						String.class			});
1:a8b6921: 				result[1] = delegateClass
1:a8b6921: 				.getConstructor(new Class[] {Bundle.class,
1:a8b6921: 						String.class			});
1:a8b6921: 			}
1:a8b6921: 			catch (NoSuchMethodException e) {
1:a8b6921: 				throw new NoSuchMethodError(e.toString());
1:a8b6921: 			}
1:a8b6921: 			
1:a8b6921: 			return result;
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 	
1:a8b6921: 	/*
1:a8b6921: 	 * This is the delegate permission created by the constructor.
1:a8b6921: 	 */
1:a8b6921: 	private final Permission			delegate;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a new <code>AdminPermission</code> object that matches all
1:a8b6921: 	 * bundles and has all actions. Equivalent to AdminPermission("*","*");
1:a8b6921: 	 */
1:a8b6921: 	public AdminPermission() {
1:a8b6921: 		this("*", "*"); //$NON-NLS-1$
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Create a new AdminPermission.
1:a8b6921: 	 * 
1:a8b6921: 	 * This constructor must only be used to create a permission that is going
1:a8b6921: 	 * to be checked.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Examples:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 * (signer=\*,o=ACME,c=US)   
1:a8b6921: 	 * (&amp;(signer=\*,o=ACME,c=US)(name=com.acme.*)(location=http://www.acme.com/bundles/*))
1:a8b6921: 	 * (id&gt;=1)
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * When a signer key is used within the filter expression the signer value
1:a8b6921: 	 * must escape the special filter chars ('*', '(', ')').
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Null arguments are equivalent to "*".
1:a8b6921: 	 * 
1:a8b6921: 	 * @param filter A filter expression that can use signer, location, id, and
1:a8b6921: 	 *        name keys. A value of &quot;*&quot; or <code>null</code> matches
1:a8b6921: 	 *        all bundle.
1:a8b6921: 	 * @param actions <code>class</code>, <code>execute</code>,
1:a8b6921: 	 *        <code>extensionLifecycle</code>, <code>lifecycle</code>,
1:a8b6921: 	 *        <code>listener</code>, <code>metadata</code>,
1:a8b6921: 	 *        <code>resolve</code>, <code>resource</code>, 
1:a8b6921: 	 *        <code>startlevel</code> or <code>context</code>. A value of "*" or <code>null</code>
1:a8b6921: 	 *        indicates all actions
1:a8b6921: 	 */
1:a8b6921: 	public AdminPermission(String filter, String actions) {
1:a8b6921: 		// arguments will be null if called from a PermissionInfo defined with
1:a8b6921: 		// no args
1:a8b6921: 		super(filter == null ? "*" : filter);
1:a8b6921: 		try {
1:a8b6921: 			try {
1:a8b6921: 				delegate = (Permission) ImplHolder.initStringString
1:a8b6921: 						.newInstance(new Object[] {filter, actions});
1:a8b6921: 			}
1:a8b6921: 			catch (InvocationTargetException e) {
1:a8b6921: 				throw e.getTargetException();
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 		catch (Error e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (RuntimeException e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (Throwable e) {
1:a8b6921: 			throw new RuntimeException(e.toString());
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a new <code>AdminPermission</code> object to be used by the
1:a8b6921: 	 * code that must check a <code>Permission</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param bundle A bundle
1:a8b6921: 	 * @param actions <code>class</code>, <code>execute</code>,
1:a8b6921: 	 *        <code>extensionLifecycle</code>, <code>lifecycle</code>,
1:a8b6921: 	 *        <code>listener</code>, <code>metadata</code>,
1:a8b6921: 	 *        <code>resolve</code>, <code>resource</code>,
1:a8b6921: 	 *        <code>startlevel</code>, <code>context</code>.
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public AdminPermission(Bundle bundle, String actions) {
1:a8b6921: 		super(createName(bundle));
1:a8b6921: 		try {
1:a8b6921: 			try {
1:a8b6921: 				delegate = (Permission) ImplHolder.initBundleString
1:a8b6921: 						.newInstance(new Object[] {bundle, actions});
1:a8b6921: 			}
1:a8b6921: 			catch (InvocationTargetException e) {
1:a8b6921: 				throw e.getTargetException();
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 		catch (Error e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (RuntimeException e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (Throwable e) {
1:a8b6921: 			throw new RuntimeException(e.toString());
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Create a permission name from a Bundle
1:a8b6921: 	 * 
1:a8b6921: 	 * @param bundle Bundle to use to create permission name.
1:a8b6921: 	 * @return permission name.
1:a8b6921: 	 */
1:a8b6921: 	private static String createName(Bundle bundle) {
1:a8b6921: 		StringBuffer sb = new StringBuffer();
1:a8b6921: 		sb.append("(id=");
1:a8b6921: 		sb.append(bundle.getBundleId());
1:a8b6921: 		sb.append(")");
1:a8b6921: 		return sb.toString();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines the equality of two <code>AdminPermission</code> objects.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param obj The object being compared for equality with this object.
1:a8b6921: 	 * @return <code>true</code> if <code>obj</code> is equivalent to this
1:a8b6921: 	 *         <code>AdminPermission</code>; <code>false</code> otherwise.
1:a8b6921: 	 */
1:a8b6921: 	public boolean equals(Object obj) {
1:a8b6921: 		if (obj == this) {
1:a8b6921: 			return true;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (!(obj instanceof AdminPermission)) {
1:a8b6921: 			return false;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		AdminPermission p = (AdminPermission) obj;
1:a8b6921: 
1:a8b6921: 		return delegate.equals(p.delegate);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the hash code value for this object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Hash code value for this object.
1:a8b6921: 	 */
1:a8b6921: 	public int hashCode() {
1:a8b6921: 		return delegate.hashCode();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the canonical string representation of the
1:a8b6921: 	 * <code>AdminPermission</code> actions.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Always returns present <code>AdminPermission</code> actions in the
1:a8b6921: 	 * following order: <code>class</code>, <code>execute</code>,
1:a8b6921: 	 * <code>extensionLifecycle</code>, <code>lifecycle</code>,
1:a8b6921: 	 * <code>listener</code>, <code>metadata</code>, <code>resolve</code>,
1:a8b6921: 	 * <code>resource</code>, <code>startlevel</code>, <code>context</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Canonical string representation of the
1:a8b6921: 	 *         <code>AdminPermission</code> actions.
1:a8b6921: 	 */
1:a8b6921: 	public String getActions() {
1:a8b6921: 		return delegate.getActions();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines if the specified permission is implied by this object. This
1:a8b6921: 	 * method throws an exception if the specified permission was not
1:a8b6921: 	 * constructed with a bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method returns <code>true</code> if the specified permission is an
1:a8b6921: 	 * AdminPermission AND
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li>this object's filter matches the specified permission's bundle ID,
1:a8b6921: 	 * bundle symbolic name, bundle location and bundle signer distinguished
1:a8b6921: 	 * name chain OR</li>
1:a8b6921: 	 * <li>this object's filter is "*"</li>
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * AND this object's actions include all of the specified permission's
1:a8b6921: 	 * actions.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Special case: if the specified permission was constructed with "*"
1:a8b6921: 	 * filter, then this method returns <code>true</code> if this object's
1:a8b6921: 	 * filter is "*" and this object's actions include all of the specified
1:a8b6921: 	 * permission's actions
1:a8b6921: 	 * 
1:a8b6921: 	 * @param p The permission to interrogate.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return <code>true</code> if the specified permission is implied by
1:a8b6921: 	 *         this object; <code>false</code> otherwise.
1:a8b6921: 	 * @throws RuntimeException if specified permission was not constructed with
1:a8b6921: 	 *         a bundle or "*"
1:a8b6921: 	 */
1:a8b6921: 	public boolean implies(Permission p) {
1:a8b6921: 		if (!(p instanceof AdminPermission)) {
1:a8b6921: 			return false;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		AdminPermission pp = (AdminPermission) p;
1:a8b6921: 		return delegate.implies(pp.delegate);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a new <code>PermissionCollection</code> object suitable for
1:a8b6921: 	 * storing <code>AdminPermission</code>s.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return A new <code>PermissionCollection</code> object.
1:a8b6921: 	 */
1:a8b6921: 	public PermissionCollection newPermissionCollection() {
1:a8b6921: 		return delegate.newPermissionCollection();
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7051698
/////////////////////////////////////////////////////////////////////////
1: 	private static class ImplHolder implements PrivilegedAction<Constructor[]> {
1: 			Constructor[] constructors = AccessController.doPrivileged(new ImplHolder());
/////////////////////////////////////////////////////////////////////////
1: 		public Constructor[] run() {
/////////////////////////////////////////////////////////////////////////
1: 			Class<?> delegateClass;
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/AdminPermission.java,v 1.34 2007/02/21 16:49:05 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: import java.security.*;
1: 
1: /**
1:  * A bundle's authority to perform specific privileged administrative operations
1:  * on or to get sensitive information about a bundle. The actions for this
1:  * permission are:
1:  * 
1:  * <pre>
1:  *   Action               Methods
1:  *   class                Bundle.loadClass
1:  *   execute              Bundle.start
1:  *                        Bundle.stop
1:  *                        StartLevel.setBundleStartLevel
1:  *   extensionLifecycle   BundleContext.installBundle for extension bundles
1:  *                        Bundle.update for extension bundles
1:  *                        Bundle.uninstall for extension bundles
1:  *   lifecycle            BundleContext.installBundle
1:  *                        Bundle.update
1:  *                        Bundle.uninstall
1:  *   listener             BundleContext.addBundleListener for SynchronousBundleListener
1:  *                        BundleContext.removeBundleListener for SynchronousBundleListener
1:  *   metadata             Bundle.getHeaders
1:  *                        Bundle.getLocation
1:  *   resolve              PackageAdmin.refreshPackages
1:  *                        PackageAdmin.resolveBundles
1:  *   resource             Bundle.getResource
1:  *                        Bundle.getResources
1:  *                        Bundle.getEntry
1:  *                        Bundle.getEntryPaths
1:  *                        Bundle.findEntries
1:  *                        Bundle resource/entry URL creation
1:  *   startlevel           StartLevel.setStartLevel
1:  *                        StartLevel.setInitialBundleStartLevel 
1:  *   context              Bundle.getBundleContext                     
1:  *                        
1:  * </pre>
1:  * 
1:  * <p>
1:  * The special action &quot;*&quot; will represent all actions.
1:  * <p>
1:  * The name of this permission is a filter expression. The filter gives access
1:  * to the following parameters:
1:  * <ul>
1:  * <li>signer - A Distinguished Name chain used to sign a bundle. Wildcards in
1:  * a DN are not matched according to the filter string rules, but according to
1:  * the rules defined for a DN chain.</li>
1:  * <li>location - The location of a bundle.</li>
1:  * <li>id - The bundle ID of the designated bundle.</li>
1:  * <li>name - The symbolic name of a bundle.</li>
1:  * </ul>
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision: 1.34 $
1:  */
1: 
1: public final class AdminPermission extends BasicPermission {
1: 	static final long					serialVersionUID	= 307051004521261705L;
1: 
1: 	/**
1: 	 * The action string <code>class</code> (Value is "class").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			CLASS				= "class";
1: 	/**
1: 	 * The action string <code>execute</code> (Value is "execute").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			EXECUTE				= "execute";
1: 	/**
1: 	 * The action string <code>extensionLifecycle</code> (Value is
1: 	 * "extensionLifecycle").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			EXTENSIONLIFECYCLE	= "extensionLifecycle";
1: 	/**
1: 	 * The action string <code>lifecycle</code> (Value is "lifecycle").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			LIFECYCLE			= "lifecycle";
1: 	/**
1: 	 * The action string <code>listener</code> (Value is "listener").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			LISTENER			= "listener";
1: 	/**
1: 	 * The action string <code>metadata</code> (Value is "metadata").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			METADATA			= "metadata";
1: 	/**
1: 	 * The action string <code>resolve</code> (Value is "resolve").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			RESOLVE				= "resolve";
1: 	/**
1: 	 * The action string <code>resource</code> (Value is "resource").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			RESOURCE			= "resource";
1: 	/**
1: 	 * The action string <code>startlevel</code> (Value is "startlevel").
1: 	 * @since 1.3
1: 	 */
1: 	public final static String			STARTLEVEL			= "startlevel";
1: 
1: 	/**
1: 	 * The action string <code>context</code> (Value is "context").
1: 	 * @since 1.4
1: 	 */
1: 	public final static String			CONTEXT				= "context";
1: 	
1: 	/*
1: 	 * NOTE: A framework implementor may also choose to replace this class in
1: 	 * their distribution with a class that directly interfaces with the
1: 	 * framework implementation. This replacement class MUST NOT
1: 	 * alter the public/protected signature of this class.
1: 	 */
1: 
1: 	/*
1: 	 * This class will load the AdminPermission class in the package named by
1: 	 * the org.osgi.vendor.framework package. For each instance of this class,
1: 	 * an instance of the vendor AdminPermission class will be created and this
1: 	 * class will delegate method calls to the vendor AdminPermission instance.
1: 	 */
1: 
0: 	private static class ImplHolder implements PrivilegedAction {
1: 		private static final String			packageProperty		= "org.osgi.vendor.framework";
1: 		static final Constructor	initStringString;
1: 		static final Constructor	initBundleString;
1: 		static {
0: 			Constructor[] constructors = (Constructor[]) AccessController.doPrivileged(new ImplHolder());
1: 			
1: 			initStringString = constructors[0];
1: 			initBundleString = constructors[1];
1: 		}
1: 
1: 		private ImplHolder() {
1: 		}
1: 		
0: 		public Object run() {
1: 			String packageName = System
1: 			.getProperty(packageProperty);
1: 			if (packageName == null) {
1: 				throw new NoClassDefFoundError(packageProperty
1: 						+ " property not set");
1: 			}
1: 			
0: 			Class delegateClass;
1: 			try {
1: 				delegateClass = Class.forName(packageName
1: 						+ ".AdminPermission");
1: 			}
1: 			catch (ClassNotFoundException e) {
1: 				throw new NoClassDefFoundError(e.toString());
1: 			}
1: 			
1: 			Constructor[] result = new Constructor[2];
1: 			try {
1: 				result[0] = delegateClass
1: 				.getConstructor(new Class[] {String.class,
1: 						String.class			});
1: 				result[1] = delegateClass
1: 				.getConstructor(new Class[] {Bundle.class,
1: 						String.class			});
1: 			}
1: 			catch (NoSuchMethodException e) {
1: 				throw new NoSuchMethodError(e.toString());
1: 			}
1: 			
1: 			return result;
1: 		}
1: 	}
1: 	
1: 	/*
1: 	 * This is the delegate permission created by the constructor.
1: 	 */
1: 	private final Permission			delegate;
1: 
1: 	/**
1: 	 * Creates a new <code>AdminPermission</code> object that matches all
1: 	 * bundles and has all actions. Equivalent to AdminPermission("*","*");
1: 	 */
1: 	public AdminPermission() {
1: 		this("*", "*"); //$NON-NLS-1$
1: 	}
1: 
1: 	/**
1: 	 * Create a new AdminPermission.
1: 	 * 
1: 	 * This constructor must only be used to create a permission that is going
1: 	 * to be checked.
1: 	 * <p>
1: 	 * Examples:
1: 	 * 
1: 	 * <pre>
1: 	 * (signer=\*,o=ACME,c=US)   
1: 	 * (&amp;(signer=\*,o=ACME,c=US)(name=com.acme.*)(location=http://www.acme.com/bundles/*))
1: 	 * (id&gt;=1)
1: 	 * </pre>
1: 	 * 
1: 	 * <p>
1: 	 * When a signer key is used within the filter expression the signer value
1: 	 * must escape the special filter chars ('*', '(', ')').
1: 	 * <p>
1: 	 * Null arguments are equivalent to "*".
1: 	 * 
1: 	 * @param filter A filter expression that can use signer, location, id, and
1: 	 *        name keys. A value of &quot;*&quot; or <code>null</code> matches
1: 	 *        all bundle.
1: 	 * @param actions <code>class</code>, <code>execute</code>,
1: 	 *        <code>extensionLifecycle</code>, <code>lifecycle</code>,
1: 	 *        <code>listener</code>, <code>metadata</code>,
1: 	 *        <code>resolve</code>, <code>resource</code>, 
1: 	 *        <code>startlevel</code> or <code>context</code>. A value of "*" or <code>null</code>
1: 	 *        indicates all actions
1: 	 */
1: 	public AdminPermission(String filter, String actions) {
1: 		// arguments will be null if called from a PermissionInfo defined with
1: 		// no args
1: 		super(filter == null ? "*" : filter);
1: 		try {
1: 			try {
1: 				delegate = (Permission) ImplHolder.initStringString
1: 						.newInstance(new Object[] {filter, actions});
1: 			}
1: 			catch (InvocationTargetException e) {
1: 				throw e.getTargetException();
1: 			}
1: 		}
1: 		catch (Error e) {
1: 			throw e;
1: 		}
1: 		catch (RuntimeException e) {
1: 			throw e;
1: 		}
1: 		catch (Throwable e) {
1: 			throw new RuntimeException(e.toString());
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Creates a new <code>AdminPermission</code> object to be used by the
1: 	 * code that must check a <code>Permission</code> object.
1: 	 * 
1: 	 * @param bundle A bundle
1: 	 * @param actions <code>class</code>, <code>execute</code>,
1: 	 *        <code>extensionLifecycle</code>, <code>lifecycle</code>,
1: 	 *        <code>listener</code>, <code>metadata</code>,
1: 	 *        <code>resolve</code>, <code>resource</code>,
1: 	 *        <code>startlevel</code>, <code>context</code>.
1: 	 * @since 1.3
1: 	 */
1: 	public AdminPermission(Bundle bundle, String actions) {
1: 		super(createName(bundle));
1: 		try {
1: 			try {
1: 				delegate = (Permission) ImplHolder.initBundleString
1: 						.newInstance(new Object[] {bundle, actions});
1: 			}
1: 			catch (InvocationTargetException e) {
1: 				throw e.getTargetException();
1: 			}
1: 		}
1: 		catch (Error e) {
1: 			throw e;
1: 		}
1: 		catch (RuntimeException e) {
1: 			throw e;
1: 		}
1: 		catch (Throwable e) {
1: 			throw new RuntimeException(e.toString());
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Create a permission name from a Bundle
1: 	 * 
1: 	 * @param bundle Bundle to use to create permission name.
1: 	 * @return permission name.
1: 	 */
1: 	private static String createName(Bundle bundle) {
1: 		StringBuffer sb = new StringBuffer();
1: 		sb.append("(id=");
1: 		sb.append(bundle.getBundleId());
1: 		sb.append(")");
1: 		return sb.toString();
1: 	}
1: 
1: 	/**
1: 	 * Determines the equality of two <code>AdminPermission</code> objects.
1: 	 * 
1: 	 * @param obj The object being compared for equality with this object.
1: 	 * @return <code>true</code> if <code>obj</code> is equivalent to this
1: 	 *         <code>AdminPermission</code>; <code>false</code> otherwise.
1: 	 */
1: 	public boolean equals(Object obj) {
1: 		if (obj == this) {
1: 			return true;
1: 		}
1: 
1: 		if (!(obj instanceof AdminPermission)) {
1: 			return false;
1: 		}
1: 
1: 		AdminPermission p = (AdminPermission) obj;
1: 
1: 		return delegate.equals(p.delegate);
1: 	}
1: 
1: 	/**
1: 	 * Returns the hash code value for this object.
1: 	 * 
1: 	 * @return Hash code value for this object.
1: 	 */
1: 	public int hashCode() {
1: 		return delegate.hashCode();
1: 	}
1: 
1: 	/**
1: 	 * Returns the canonical string representation of the
1: 	 * <code>AdminPermission</code> actions.
1: 	 * 
1: 	 * <p>
1: 	 * Always returns present <code>AdminPermission</code> actions in the
1: 	 * following order: <code>class</code>, <code>execute</code>,
1: 	 * <code>extensionLifecycle</code>, <code>lifecycle</code>,
1: 	 * <code>listener</code>, <code>metadata</code>, <code>resolve</code>,
1: 	 * <code>resource</code>, <code>startlevel</code>, <code>context</code>.
1: 	 * 
1: 	 * @return Canonical string representation of the
1: 	 *         <code>AdminPermission</code> actions.
1: 	 */
1: 	public String getActions() {
1: 		return delegate.getActions();
1: 	}
1: 
1: 	/**
1: 	 * Determines if the specified permission is implied by this object. This
1: 	 * method throws an exception if the specified permission was not
1: 	 * constructed with a bundle.
1: 	 * 
1: 	 * <p>
1: 	 * This method returns <code>true</code> if the specified permission is an
1: 	 * AdminPermission AND
1: 	 * <ul>
1: 	 * <li>this object's filter matches the specified permission's bundle ID,
1: 	 * bundle symbolic name, bundle location and bundle signer distinguished
1: 	 * name chain OR</li>
1: 	 * <li>this object's filter is "*"</li>
1: 	 * </ul>
1: 	 * AND this object's actions include all of the specified permission's
1: 	 * actions.
1: 	 * <p>
1: 	 * Special case: if the specified permission was constructed with "*"
1: 	 * filter, then this method returns <code>true</code> if this object's
1: 	 * filter is "*" and this object's actions include all of the specified
1: 	 * permission's actions
1: 	 * 
1: 	 * @param p The permission to interrogate.
1: 	 * 
1: 	 * @return <code>true</code> if the specified permission is implied by
1: 	 *         this object; <code>false</code> otherwise.
1: 	 * @throws RuntimeException if specified permission was not constructed with
1: 	 *         a bundle or "*"
1: 	 */
1: 	public boolean implies(Permission p) {
1: 		if (!(p instanceof AdminPermission)) {
1: 			return false;
1: 		}
1: 
1: 		AdminPermission pp = (AdminPermission) p;
1: 		return delegate.implies(pp.delegate);
1: 	}
1: 
1: 	/**
1: 	 * Returns a new <code>PermissionCollection</code> object suitable for
1: 	 * storing <code>AdminPermission</code>s.
1: 	 * 
1: 	 * @return A new <code>PermissionCollection</code> object.
1: 	 */
1: 	public PermissionCollection newPermissionCollection() {
1: 		return delegate.newPermissionCollection();
1: 	}
1: }
============================================================================