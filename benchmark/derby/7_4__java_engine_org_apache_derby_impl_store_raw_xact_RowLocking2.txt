1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLocking2
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: import org.apache.derby.iapi.services.locks.C_LockFactory;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.RowLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369: 	A locking policy that implements row level locking with isolation degree 2.
1:eac0369: 
1:eac0369:     The approach is to place all "write" container and row locks on the 
1:eac0369:     transaction group lock list.  Locks on this group will last until end
1:eac0369:     of transaction.  All "read" container and row locks will be placed 
1:eac0369:     on a group list, key'd by the ContainerId of the lock.  Locks on this
1:eac0369:     list will either be released explicitly by the caller, or will be released
1:eac0369:     as a group when the unlockContainer() call is made.
1:eac0369: 
1:eac0369:     Note that write operations extend from the RowLocking3 implementations.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1:eac0369: */
1:eac0369: public class RowLocking2 extends RowLockingRR
2:eac0369: {
1:eac0369: 	// no locking has no state, so it's safe to hold
1:eac0369: 	// it as a static
1:eac0369: 	private static final LockingPolicy NO_LOCK = new NoLocking();
1:eac0369: 
1:eac0369: 	protected RowLocking2(LockFactory lf) 
1:eac0369:     {
1:eac0369: 		super(lf);
2:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Obtain container level intent lock.
3:eac0369:      * <p>
1:eac0369:      * This implementation of row locking is 2 level, ie. table and row locking.
1:eac0369:      * It will interact correctly with tables opened with ContainerLocking3
1:eac0369:      * locking mode.
1:eac0369:      * <p>
1:eac0369:      * Updater's will get table level IX locks, and X row locks.
1:eac0369:      * <p>
1:eac0369:      * Reader's will get table level IS locks, and S row locks.
1:eac0369:      * <p>
1:eac0369:      * Read locks are put in a separate "group" from the transaction, so that
1:eac0369:      * when the container is closed it can release these read locks.
3:eac0369:      *
1:eac0369:      * @param t            Transaction to associate lock with.
1:eac0369:      * @param container    Container to lock.
1:eac0369:      * @param waitForLock  Should lock request wait until granted?
1:eac0369:      * @param forUpdate    Should container be locked for update, or read?
1:eac0369:      *
1:eac0369:      * @return true if the lock was obtained, false if it wasn't. 
1:eac0369:      *   False should only be returned if the waitForLock policy was set to
1:eac0369:      *  "false," and the lock was unavailable.
1:eac0369:      *
2:eac0369: 	 * @exception  StandardException  Standard exception policy.
2:eac0369:      **/
1:eac0369: 	public boolean lockContainer(
1:eac0369:     Transaction         t, 
1:eac0369:     ContainerHandle     container, 
1:eac0369:     boolean             waitForLock,
1:eac0369:     boolean             forUpdate)
2:eac0369: 		throws StandardException 
1:eac0369:     {
1:eac0369: 		Object qualifier = forUpdate ? ContainerLock.CIX : ContainerLock.CIS;
1:eac0369: 
1:eac0369:         // for cursor stability put read locks on a separate lock chain, which
1:eac0369:         // will be released when the container is unlocked.
1:eac0369:         Object group = 
1:eac0369:             forUpdate ? ((Object) t) : ((Object) container.getUniqueId());
1:eac0369: 
1:eac0369: 		boolean gotLock = 
2:eac0369:             lf.lockObject(
1:eac0369:                 t.getCompatibilitySpace(), group, container.getId(), qualifier,
1:eac0369:                 waitForLock ? C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT);
1:eac0369: 
1:eac0369: 		if (gotLock) 
1:eac0369:         {
1:eac0369: 			// look for covering table locks
1:eac0369: 			// CIS and CIX is covered by CX 
1:eac0369:             // In that case move the lock to the transaction list from the
1:eac0369:             // container list, as the null locking policy will do nothing in
1:eac0369:             // unlockContainer().
1:eac0369:             //
1:eac0369: 
1:eac0369: 
1:966d860: 			if (lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(),
1:966d860: 							  ContainerLock.CX))
1:966d860: 			{
1:966d860: 				//release any container group locks becuase CX container lock will cover everthing.
1:966d860: 				lf.unlockGroup(t.getCompatibilitySpace(), container.getUniqueId());
1:966d860: 				container.setLockingPolicy(NO_LOCK);
1:966d860: 			}else if ((!forUpdate) && 
1:966d860: 					 lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(), ContainerLock.CS))
1:eac0369:             {
1:966d860:                 // move locks from container group to transaction group.
1:966d860: 				lf.transfer(t.getCompatibilitySpace(), group, t);
1:eac0369: 				container.setLockingPolicy(NO_LOCK);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return gotLock;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Obtain lock on record being read.
1:eac0369:      * <p>
2:eac0369:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
2:eac0369:      * or Update lock on the row, depending on the "forUpdate" parameter.
1:eac0369:      * <p>
1:eac0369:      * Read lock will be placed on separate group from transaction.
1:eac0369:      *
2:eac0369:      * @param t             The transaction to associate the lock with.
2:eac0369:      * @param record        The record to be locked.
1:eac0369:      * @param waitForLock   Should lock request wait until granted?
2:eac0369:      * @param forUpdate     Whether to open for read or write access.
1:eac0369:      *
1:eac0369:      * @return true if the lock was granted, false if waitForLock was false 
1:eac0369:      * and the lock could not be granted.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	public boolean lockRecordForRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container_handle,
2:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         waitForLock,
2:eac0369:     boolean         forUpdate)
1:eac0369: 		throws StandardException
1:eac0369: 	{
2:eac0369: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1:eac0369: 
1:eac0369:         return( 
1:eac0369:             lf.lockObject(
1:eac0369:                 t.getCompatibilitySpace(), 
1:eac0369:                 container_handle.getUniqueId(), 
1:eac0369:                 record, 
1:eac0369:                 qualifier,
1:eac0369:                 waitForLock ? 
1:eac0369:                     C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void unlockRecordAfterRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container_handle,
1:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         forUpdate,
1:eac0369:     boolean         row_qualified)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1:eac0369: 
1:eac0369:         int count = 
1:eac0369:             lf.unlock(
1:eac0369:                 t.getCompatibilitySpace(), container_handle.getUniqueId(), 
1:eac0369:                 record, qualifier);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             // in the case of lock escalation the count could be 0.
1:eac0369:             if (!(count == 1 || count == 0))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369:                 "count = " + count +
1:eac0369:                 "record.getContainerId() = " + record.getContainerId());
1:eac0369: 			}
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Unlock read locks.
1:eac0369:      * <p>
1:eac0369:      * In Cursor stability release all read locks obtained.  unlockContainer()
1:eac0369:      * will be called when the container is closed.
1:eac0369:      * <p>
1:eac0369:      *
1:7a4afea:      * @param t                 The transaction to associate the lock with.
1:7a4afea:      * @param container_handle  Container to unlock.
1:eac0369:      **/
1:eac0369: 	public void unlockContainer(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container_handle)
1:eac0369:     {
1:eac0369:         // Only release read locks before end of transaction in level 2.
1:eac0369:         lf.unlockGroup(
1:eac0369:             t.getCompatibilitySpace(), container_handle.getUniqueId());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7a4afea
/////////////////////////////////////////////////////////////////////////
1:      * @param t                 The transaction to associate the lock with.
1:      * @param container_handle  Container to unlock.
commit:966d860
/////////////////////////////////////////////////////////////////////////
1: 			if (lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(),
1: 							  ContainerLock.CX))
1: 			{
1: 				//release any container group locks becuase CX container lock will cover everthing.
1: 				lf.unlockGroup(t.getCompatibilitySpace(), container.getUniqueId());
1: 				container.setLockingPolicy(NO_LOCK);
1: 			}else if ((!forUpdate) && 
1: 					 lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(), ContainerLock.CS))
1:                 // move locks from container group to transaction group.
1: 				lf.transfer(t.getCompatibilitySpace(), group, t);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLocking2
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.RowLock;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 	A locking policy that implements row level locking with isolation degree 2.
1: 
1:     The approach is to place all "write" container and row locks on the 
1:     transaction group lock list.  Locks on this group will last until end
1:     of transaction.  All "read" container and row locks will be placed 
1:     on a group list, key'd by the ContainerId of the lock.  Locks on this
1:     list will either be released explicitly by the caller, or will be released
1:     as a group when the unlockContainer() call is made.
1: 
1:     Note that write operations extend from the RowLocking3 implementations.
1: 
1: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1: */
1: public class RowLocking2 extends RowLockingRR
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	// no locking has no state, so it's safe to hold
1: 	// it as a static
1: 	private static final LockingPolicy NO_LOCK = new NoLocking();
1: 
1: 	protected RowLocking2(LockFactory lf) 
1:     {
1: 		super(lf);
1: 	}
1: 
1:     /**
1:      * Obtain container level intent lock.
1:      * <p>
1:      * This implementation of row locking is 2 level, ie. table and row locking.
1:      * It will interact correctly with tables opened with ContainerLocking3
1:      * locking mode.
1:      * <p>
1:      * Updater's will get table level IX locks, and X row locks.
1:      * <p>
1:      * Reader's will get table level IS locks, and S row locks.
1:      * <p>
1:      * Read locks are put in a separate "group" from the transaction, so that
1:      * when the container is closed it can release these read locks.
1:      *
1:      * @param t            Transaction to associate lock with.
1:      * @param container    Container to lock.
1:      * @param waitForLock  Should lock request wait until granted?
1:      * @param forUpdate    Should container be locked for update, or read?
1:      *
1:      * @return true if the lock was obtained, false if it wasn't. 
1:      *   False should only be returned if the waitForLock policy was set to
1:      *  "false," and the lock was unavailable.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public boolean lockContainer(
1:     Transaction         t, 
1:     ContainerHandle     container, 
1:     boolean             waitForLock,
1:     boolean             forUpdate)
1: 		throws StandardException 
1:     {
1: 		Object qualifier = forUpdate ? ContainerLock.CIX : ContainerLock.CIS;
1: 
1:         // for cursor stability put read locks on a separate lock chain, which
1:         // will be released when the container is unlocked.
1:         Object group = 
1:             forUpdate ? ((Object) t) : ((Object) container.getUniqueId());
1: 
1: 		boolean gotLock = 
1:             lf.lockObject(
1:                 t.getCompatibilitySpace(), group, container.getId(), qualifier,
1:                 waitForLock ? C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT);
1: 
1: 		if (gotLock) 
1:         {
1: 			// look for covering table locks
1: 			// CIS and CIX is covered by CX 
1:             // In that case move the lock to the transaction list from the
1:             // container list, as the null locking policy will do nothing in
1:             // unlockContainer().
1:             //
1: 
1: 
0: 			if (lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(), ContainerLock.CX) ||
0: 				((!forUpdate) && 
0:                  lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(), ContainerLock.CS)))
1:             {
0:                 // move lock from container group to transaction group.
0:                 if (!forUpdate)
0:                     lf.transfer(t.getCompatibilitySpace(), group, t);
1: 				container.setLockingPolicy(NO_LOCK);
1: 			}
1: 		}
1: 
1: 		return gotLock;
1: 	}
1: 
1: 
1:     /**
1:      * Obtain lock on record being read.
1:      * <p>
1:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
1:      * or Update lock on the row, depending on the "forUpdate" parameter.
1:      * <p>
1:      * Read lock will be placed on separate group from transaction.
1:      *
1:      * @param t             The transaction to associate the lock with.
1:      * @param record        The record to be locked.
1:      * @param waitForLock   Should lock request wait until granted?
1:      * @param forUpdate     Whether to open for read or write access.
1:      *
1:      * @return true if the lock was granted, false if waitForLock was false 
1:      * and the lock could not be granted.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public boolean lockRecordForRead(
1:     Transaction     t, 
1:     ContainerHandle container_handle,
1:     RecordHandle    record, 
1:     boolean         waitForLock,
1:     boolean         forUpdate)
1: 		throws StandardException
1: 	{
1: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1: 
1:         return( 
1:             lf.lockObject(
1:                 t.getCompatibilitySpace(), 
1:                 container_handle.getUniqueId(), 
1:                 record, 
1:                 qualifier,
1:                 waitForLock ? 
1:                     C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT));
1: 	}
1: 
1:     /**
0:      * Obtain lock on record being read while holding a latch.
1:      * <p>
1:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
1:      * or Update lock on the row, depending on the "forUpdate" parameter.
1:      * <p>
1:      *
0:      * @param latch         The latch being held.
1:      * @param record        The record to be locked.
1:      * @param forUpdate     Whether to open for read or write access.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0: 	public void lockRecordForRead(
0:     Latch			latch, 
1:     RecordHandle    record, 
1:     boolean         forUpdate)
1: 		throws StandardException
1: 	{
0:         // RESOLVE - Did I do the right thing with the "forUpdate" variable.
0:         // RESOLVE (mikem) - looks like it needs work for update locks, and
0:         //     compatibility spaces.
1: 
1: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1: 
1:         lf.lockObject(
0:             record.getContainerId(), record, qualifier, 
0:             C_LockFactory.TIMED_WAIT, latch);
1: 	}
1: 
1: 	public void unlockRecordAfterRead(
1:     Transaction     t, 
1:     ContainerHandle container_handle,
1:     RecordHandle    record, 
1:     boolean         forUpdate,
1:     boolean         row_qualified)
1:         throws StandardException
1: 	{
1: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1: 
1:         int count = 
1:             lf.unlock(
1:                 t.getCompatibilitySpace(), container_handle.getUniqueId(), 
1:                 record, qualifier);
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             // in the case of lock escalation the count could be 0.
1:             if (!(count == 1 || count == 0))
1: 			{
1: 				SanityManager.THROWASSERT(
1:                 "count = " + count +
1:                 "record.getContainerId() = " + record.getContainerId());
1: 			}
1:         }
1: 	}
1: 
1:     /**
1:      * Unlock read locks.
1:      * <p>
1:      * In Cursor stability release all read locks obtained.  unlockContainer()
1:      * will be called when the container is closed.
1:      * <p>
1:      *
1:      * @param t             The transaction to associate the lock with.
0:      * @param container     Container to unlock.
1:      **/
1: 	public void unlockContainer(
1:     Transaction     t, 
1:     ContainerHandle container_handle)
1:     {
1:         // Only release read locks before end of transaction in level 2.
1:         lf.unlockGroup(
1:             t.getCompatibilitySpace(), container_handle.getUniqueId());
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.RowLock;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 	A locking policy that implements row level locking with isolation degree 2.
0: 
0:     The approach is to place all "write" container and row locks on the 
0:     transaction group lock list.  Locks on this group will last until end
0:     of transaction.  All "read" container and row locks will be placed 
0:     on a group list, key'd by the ContainerId of the lock.  Locks on this
0:     list will either be released explicitly by the caller, or will be released
0:     as a group when the unlockContainer() call is made.
0: 
0:     Note that write operations extend from the RowLocking3 implementations.
0: 
0: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
0: */
0: public class RowLocking2 extends RowLockingRR
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	// no locking has no state, so it's safe to hold
0: 	// it as a static
0: 	private static final LockingPolicy NO_LOCK = new NoLocking();
0: 
0: 	protected RowLocking2(LockFactory lf) 
0:     {
0: 		super(lf);
0: 	}
0: 
0:     /**
0:      * Obtain container level intent lock.
0:      * <p>
0:      * This implementation of row locking is 2 level, ie. table and row locking.
0:      * It will interact correctly with tables opened with ContainerLocking3
0:      * locking mode.
0:      * <p>
0:      * Updater's will get table level IX locks, and X row locks.
0:      * <p>
0:      * Reader's will get table level IS locks, and S row locks.
0:      * <p>
0:      * Read locks are put in a separate "group" from the transaction, so that
0:      * when the container is closed it can release these read locks.
0:      *
0:      * @param t            Transaction to associate lock with.
0:      * @param container    Container to lock.
0:      * @param waitForLock  Should lock request wait until granted?
0:      * @param forUpdate    Should container be locked for update, or read?
0:      *
0:      * @return true if the lock was obtained, false if it wasn't. 
0:      *   False should only be returned if the waitForLock policy was set to
0:      *  "false," and the lock was unavailable.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public boolean lockContainer(
0:     Transaction         t, 
0:     ContainerHandle     container, 
0:     boolean             waitForLock,
0:     boolean             forUpdate)
0: 		throws StandardException 
0:     {
0: 		Object qualifier = forUpdate ? ContainerLock.CIX : ContainerLock.CIS;
0: 
0:         // for cursor stability put read locks on a separate lock chain, which
0:         // will be released when the container is unlocked.
0:         Object group = 
0:             forUpdate ? ((Object) t) : ((Object) container.getUniqueId());
0: 
0: 		boolean gotLock = 
0:             lf.lockObject(
0:                 t.getCompatibilitySpace(), group, container.getId(), qualifier,
0:                 waitForLock ? C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT);
0: 
0: 		if (gotLock) 
0:         {
0: 			// look for covering table locks
0: 			// CIS and CIX is covered by CX 
0:             // In that case move the lock to the transaction list from the
0:             // container list, as the null locking policy will do nothing in
0:             // unlockContainer().
0:             //
0: 
0: 
0: 			if (lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(), ContainerLock.CX) ||
0: 				((!forUpdate) && 
0:                  lf.isLockHeld(t.getCompatibilitySpace(), t, container.getId(), ContainerLock.CS)))
0:             {
0:                 // move lock from container group to transaction group.
0:                 if (!forUpdate)
0:                     lf.transfer(t.getCompatibilitySpace(), group, t);
0: 				container.setLockingPolicy(NO_LOCK);
0: 			}
0: 		}
0: 
0: 		return gotLock;
0: 	}
0: 
0: 
0:     /**
0:      * Obtain lock on record being read.
0:      * <p>
0:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
0:      * or Update lock on the row, depending on the "forUpdate" parameter.
0:      * <p>
0:      * Read lock will be placed on separate group from transaction.
0:      *
0:      * @param t             The transaction to associate the lock with.
0:      * @param record        The record to be locked.
0:      * @param waitForLock   Should lock request wait until granted?
0:      * @param forUpdate     Whether to open for read or write access.
0:      *
0:      * @return true if the lock was granted, false if waitForLock was false 
0:      * and the lock could not be granted.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public boolean lockRecordForRead(
0:     Transaction     t, 
0:     ContainerHandle container_handle,
0:     RecordHandle    record, 
0:     boolean         waitForLock,
0:     boolean         forUpdate)
0: 		throws StandardException
0: 	{
0: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
0: 
0:         return( 
0:             lf.lockObject(
0:                 t.getCompatibilitySpace(), 
0:                 container_handle.getUniqueId(), 
0:                 record, 
0:                 qualifier,
0:                 waitForLock ? 
0:                     C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT));
0: 	}
0: 
0:     /**
0:      * Obtain lock on record being read while holding a latch.
0:      * <p>
0:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
0:      * or Update lock on the row, depending on the "forUpdate" parameter.
0:      * <p>
0:      *
0:      * @param latch         The latch being held.
0:      * @param record        The record to be locked.
0:      * @param forUpdate     Whether to open for read or write access.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public void lockRecordForRead(
0:     Latch			latch, 
0:     RecordHandle    record, 
0:     boolean         forUpdate)
0: 		throws StandardException
0: 	{
0:         // RESOLVE - Did I do the right thing with the "forUpdate" variable.
0:         // RESOLVE (mikem) - looks like it needs work for update locks, and
0:         //     compatibility spaces.
0: 
0: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
0: 
0:         lf.lockObject(
0:             record.getContainerId(), record, qualifier, 
0:             C_LockFactory.TIMED_WAIT, latch);
0: 	}
0: 
0: 	public void unlockRecordAfterRead(
0:     Transaction     t, 
0:     ContainerHandle container_handle,
0:     RecordHandle    record, 
0:     boolean         forUpdate,
0:     boolean         row_qualified)
0:         throws StandardException
0: 	{
0: 		Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
0: 
0:         int count = 
0:             lf.unlock(
0:                 t.getCompatibilitySpace(), container_handle.getUniqueId(), 
0:                 record, qualifier);
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             // in the case of lock escalation the count could be 0.
0:             if (!(count == 1 || count == 0))
0: 			{
0: 				SanityManager.THROWASSERT(
0:                 "count = " + count +
0:                 "record.getContainerId() = " + record.getContainerId());
0: 			}
0:         }
0: 	}
0: 
0:     /**
0:      * Unlock read locks.
0:      * <p>
0:      * In Cursor stability release all read locks obtained.  unlockContainer()
0:      * will be called when the container is closed.
0:      * <p>
0:      *
0:      * @param t             The transaction to associate the lock with.
0:      * @param container     Container to unlock.
0:      **/
0: 	public void unlockContainer(
0:     Transaction     t, 
0:     ContainerHandle container_handle)
0:     {
0:         // Only release read locks before end of transaction in level 2.
0:         lf.unlockGroup(
0:             t.getCompatibilitySpace(), container_handle.getUniqueId());
0: 	}
0: }
============================================================================