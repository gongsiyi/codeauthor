1:c0052e0: /*
2:c0052e0: 
1:587dfe1:    Derby - Class org.apache.derby.iapi.security.SecurityUtil
1:c0052e0: 
1:c0052e0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c0052e0:    contributor license agreements.  See the NOTICE file distributed with
1:c0052e0:    this work for additional information regarding copyright ownership.
1:c0052e0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c0052e0:    (the "License"); you may not use this file except in compliance with
1:c0052e0:    the License.  You may obtain a copy of the License at
1:c0052e0: 
1:c0052e0:       http://www.apache.org/licenses/LICENSE-2.0
1:c0052e0: 
1:c0052e0:    Unless required by applicable law or agreed to in writing, software
1:c0052e0:    distributed under the License is distributed on an "AS IS" BASIS,
1:c0052e0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0052e0:    See the License for the specific language governing permissions and
1:c0052e0:    limitations under the License.
1:c0052e0: 
1:c0052e0:  */
1:c0052e0: 
1:c0052e0: package org.apache.derby.iapi.security;
1:c0052e0: 
1:bf32514: import java.util.ArrayList;
1:c0052e0: import java.util.Set;
1:c0052e0: import java.util.HashSet;
1:c0052e0: import java.util.Iterator;
1:c0052e0: import java.util.Properties;
1:c0052e0: import java.io.IOException;
1:c0052e0: 
1:c0052e0: import java.security.PrivilegedAction;
1:c0052e0: import java.security.AccessController;
1:c0052e0: import java.security.AccessControlException;
1:c0052e0: import java.security.AccessControlContext;
1:c0052e0: import java.security.Permission;
1:c0052e0: import javax.security.auth.Subject;
1:c0052e0: 
1:c0052e0: import org.apache.derby.authentication.SystemPrincipal;
1:bf32514: import org.apache.derby.catalog.AliasInfo;
1:c0052e0: import org.apache.derby.iapi.error.StandardException;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:bf32514: import org.apache.derby.iapi.services.context.ContextService;
1:bf32514: import org.apache.derby.iapi.sql.conn.Authorizer;
1:bf32514: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:bf32514: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:bf32514: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:bf32514: import org.apache.derby.iapi.sql.dictionary.StatementPermission;
1:bf32514: import org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission;
1:bf32514: import org.apache.derby.iapi.util.IdUtil;
1:a0dbbd7: import org.apache.derby.security.SystemPermission;
1:c0052e0: 
1:c0052e0: /**
1:c0052e0:  * This class provides helper functions for security-related features.
1:c0052e0:  */
1:c0052e0: public class SecurityUtil {
1:c0052e0: 
1:c0052e0:     /**
1:a0dbbd7:      * Permission to access Derby contexts (permissions are immutable).
1:a0dbbd7:      */
1:a0dbbd7:     private final static SystemPermission USE_DERBY_INTERNALS = new SystemPermission
1:a0dbbd7:         ( SystemPermission.ENGINE, SystemPermission.USE_DERBY_INTERNALS );
1:a0dbbd7: 
1:a0dbbd7:     /**
1:587dfe1:      * Creates a (read-only) Subject representing a given user
1:587dfe1:      * as a System user within Derby.
1:c0052e0:      *
1:c0052e0:      * @param user the user name
1:c0052e0:      * @return a Subject representing the user by its exact and normalized name
1:c0052e0:      *
1:c0052e0:      * @see <a href="http://wiki.apache.org/db-derby/UserIdentifiers">User Names & Authorization Identifiers in Derby</a>
1:c0052e0:      */
1:c0052e0:     static public Subject createSystemPrincipalSubject(String user) {
1:850aba4:         final Set<SystemPrincipal> principals = new HashSet<SystemPrincipal>();
1:c0052e0:         // add the authenticated user
1:c0052e0:         if (user != null) {
1:c0052e0:             // The Java security runtime checks whether a Subject falls
1:c0052e0:             // under a Principal policy by looking for a literal match
1:c0052e0:             // of the Principal name as exactly found in a policy file
1:c0052e0:             // clause with any of the Subject's listed Principal names.
1:c0052e0:             //
1:c0052e0:             // To support Authorization Identifier as Principal names
1:c0052e0:             // we add two Principals here: one with the given name and
1:c0052e0:             // another one with the normalized name.  This way, a
1:c0052e0:             // permission will be granted if the authenticated user name
1:c0052e0:             // matches a Principal clause in the policy file with either
1:c0052e0:             // the exact same name or the normalized name.
1:c0052e0:             //
1:c0052e0:             // An alternative approach of normalizing all names within
1:c0052e0:             // SystemPrincipal has issues; see comments there.
1:c0052e0:             principals.add(new SystemPrincipal(user));
1:c0052e0:             principals.add(new SystemPrincipal(getAuthorizationId(user)));
1:c0052e0:         }
1:c0052e0:         final boolean readOnly = true;
1:c0052e0:         final Set credentials = new HashSet();
1:c0052e0:         return new Subject(readOnly, principals, credentials, credentials);
1:c0052e0:     }
1:c0052e0: 
1:a0dbbd7:     /**
1:c0052e0:      * Returns the Authorization Identifier for a principal name.
1:c0052e0:      *
1:c0052e0:      * @param name the name of the principal
1:c0052e0:      * @return the authorization identifier for this principal
1:c0052e0:      */
1:c0052e0:     static private String getAuthorizationId(String name) {
1:c0052e0:         // RuntimeException messages not localized
1:c0052e0:         if (name == null) {
1:c0052e0:             throw new NullPointerException("name can't be null");
1:c0052e0:         }
1:c0052e0:         if (name.length() == 0) {
1:c0052e0:             throw new IllegalArgumentException("name can't be empty");
1:c0052e0:         }
1:c0052e0:         try {
1:c0052e0:             return IdUtil.getUserAuthorizationId(name);
1:c0052e0:         } catch (StandardException se) {
1:c0052e0:             throw new IllegalArgumentException(se.getMessage());
1:c0052e0: 		}
1:c0052e0:     }
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Checks that a Subject has a Permission under the SecurityManager.
1:c0052e0:      * To perform this check the following policy grant is required
1:c0052e0:      * <ul>
1:c0052e0:      * <li> to run the encapsulated test:
1:c0052e0:      *      permission javax.security.auth.AuthPermission "doAsPrivileged";
1:c0052e0:      * </ul>
1:c0052e0:      * or an AccessControlException will be raised detailing the cause.
1:c0052e0:      * <p>
1:c0052e0:      *
1:c0052e0:      * @param subject the subject representing the SystemPrincipal(s)
1:c0052e0:      * @param perm the permission to be checked
1:c0052e0:      * @throws AccessControlException if permissions are missing
1:c0052e0:      */
1:c0052e0:     static public void checkSubjectHasPermission(final Subject subject,
1:c0052e0:                                                  final Permission perm) {
1:c0052e0:         // the checks
1:850aba4:         final PrivilegedAction<Void> runCheck
1:850aba4:             = new PrivilegedAction<Void>() {
1:850aba4:                     public Void run() {
1:c0052e0:                         AccessController.checkPermission(perm);
1:c0052e0:                         return null;
1:c0052e0:                     }
1:c0052e0:                 };
1:850aba4:         final PrivilegedAction<Void> runCheckAsPrivilegedUser
1:850aba4:             = new PrivilegedAction<Void>() {
1:850aba4:                     public Void run() {
1:587dfe1:                         // run check only using the the subject
1:587dfe1:                         // (by using null as the AccessControlContext)
1:c0052e0:                         final AccessControlContext acc = null;
1:c0052e0:                         Subject.doAsPrivileged(subject, runCheck, acc);
1:c0052e0:                         return null;
1:c0052e0:                     }
1:c0052e0:                 };
1:c0052e0: 
1:c0052e0:         // run check as privileged action for narrow codebase permissions
1:c0052e0:         AccessController.doPrivileged(runCheckAsPrivilegedUser);
1:c0052e0:     }
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Checks that a User has a Permission under the SecurityManager.
1:c0052e0:      * To perform this check the following policy grant is required
1:c0052e0:      * <ul>
1:c0052e0:      * <li> to run the encapsulated test:
1:c0052e0:      *      permission javax.security.auth.AuthPermission "doAsPrivileged";
1:c0052e0:      * </ul>
1:c0052e0:      * or an AccessControlException will be raised detailing the cause.
1:c0052e0:      * <p>
1:c0052e0:      *
1:c0052e0:      * @param user the user to be check for having the permission
1:c0052e0:      * @param perm the permission to be checked
1:c0052e0:      * @throws AccessControlException if permissions are missing
1:c0052e0:      */
1:c0052e0:     static public void checkUserHasPermission(String user,
1:c0052e0:                                               Permission perm) {
1:c0052e0:         // approve action if not running under a security manager
1:c0052e0:         if (System.getSecurityManager() == null) {
1:c0052e0:             return;
1:c0052e0:         }
1:c0052e0: 
1:c0052e0:         // check the subject for having the permission
1:c0052e0:         final Subject subject = createSystemPrincipalSubject(user);
1:c0052e0:         checkSubjectHasPermission(subject, perm);
1:c0052e0:     }
1:bf32514: 
1:bf32514:     /**
1:bf32514:      * Raise an exception if the current user does not have permission
1:bf32514:      * to perform the indicated operation.
1:bf32514:      */
1:bf32514:     public  static  void    authorize( Securable operation )
1:bf32514:         throws StandardException
1:bf32514:     {
1:bf32514:         LanguageConnectionContext lcc = (LanguageConnectionContext)
1:a0dbbd7: 				getContextOrNull( LanguageConnectionContext.CONTEXT_ID );
1:bf32514: 
1:bf32514:         if ( lcc.usesSqlAuthorization() )
1:bf32514:         {
1:bf32514:             Authorizer   authorizer = lcc.getAuthorizer();
1:bf32514: 
1:bf32514:             DataDictionary dd = lcc.getDataDictionary();
1:bf32514:             AliasDescriptor ad = dd.getRoutineList
1:bf32514:                 (
1:bf32514:                  operation.routineSchemaID,
1:bf32514:                  operation.routineName,
1:bf32514:                  operation.routineType
1:bf32514:                  ).get( 0 );
1:bf32514:             ArrayList<StatementPermission>   requiredPermissions = new ArrayList<StatementPermission>();
1:bf32514:             StatementRoutinePermission  executePermission = new StatementRoutinePermission( ad.getObjectID() );
1:bf32514: 
1:bf32514:             requiredPermissions.add( executePermission );
1:bf32514: 
1:bf32514:             authorizer.authorize( requiredPermissions, lcc.getLastActivation() );
1:bf32514:         }
1:bf32514:     }
1:bf32514: 
1:c0052e0:     /**
1:a0dbbd7:      * Verify that we have been granted permission to use Derby internals
1:a0dbbd7:      */
1:a0dbbd7:     public  static  void    checkDerbyInternalsPrivilege()
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() != null )
1:a0dbbd7:         {
1:a0dbbd7:             AccessController.checkPermission( USE_DERBY_INTERNALS );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContextOrNull( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContextOrNull( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContextOrNull( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:bf32514: 
1:c0052e0: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.security.SystemPermission;
/////////////////////////////////////////////////////////////////////////
1:      * Permission to access Derby contexts (permissions are immutable).
1:      */
1:     private final static SystemPermission USE_DERBY_INTERNALS = new SystemPermission
1:         ( SystemPermission.ENGINE, SystemPermission.USE_DERBY_INTERNALS );
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 				getContextOrNull( LanguageConnectionContext.CONTEXT_ID );
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Verify that we have been granted permission to use Derby internals
1:      */
1:     public  static  void    checkDerbyInternalsPrivilege()
1:     {
1:         if ( System.getSecurityManager() != null )
1:         {
1:             AccessController.checkPermission( USE_DERBY_INTERNALS );
1:         }
1:     }
1: 
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContextOrNull( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContextOrNull( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContextOrNull( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
commit:bf32514
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.StatementPermission;
1: import org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission;
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Raise an exception if the current user does not have permission
1:      * to perform the indicated operation.
1:      */
1:     public  static  void    authorize( Securable operation )
1:         throws StandardException
1:     {
1:         LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 				ContextService.getContextOrNull( LanguageConnectionContext.CONTEXT_ID );
1: 
1:         if ( lcc.usesSqlAuthorization() )
1:         {
1:             Authorizer   authorizer = lcc.getAuthorizer();
1: 
1:             DataDictionary dd = lcc.getDataDictionary();
1:             AliasDescriptor ad = dd.getRoutineList
1:                 (
1:                  operation.routineSchemaID,
1:                  operation.routineName,
1:                  operation.routineType
1:                  ).get( 0 );
1:             ArrayList<StatementPermission>   requiredPermissions = new ArrayList<StatementPermission>();
1:             StatementRoutinePermission  executePermission = new StatementRoutinePermission( ad.getObjectID() );
1: 
1:             requiredPermissions.add( executePermission );
1: 
1:             authorizer.authorize( requiredPermissions, lcc.getLastActivation() );
1:         }
1:     }
1: 
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1:         final Set<SystemPrincipal> principals = new HashSet<SystemPrincipal>();
/////////////////////////////////////////////////////////////////////////
1:         final PrivilegedAction<Void> runCheck
1:             = new PrivilegedAction<Void>() {
1:                     public Void run() {
1:         final PrivilegedAction<Void> runCheckAsPrivilegedUser
1:             = new PrivilegedAction<Void>() {
1:                     public Void run() {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:587dfe1
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.security.SecurityUtil
/////////////////////////////////////////////////////////////////////////
1:      * Creates a (read-only) Subject representing a given user
1:      * as a System user within Derby.
/////////////////////////////////////////////////////////////////////////
1:                         // run check only using the the subject
1:                         // (by using null as the AccessControlContext)
commit:c0052e0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.security.SystemPermission
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.security;
1: 
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.Properties;
1: import java.io.IOException;
1: 
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
1: import java.security.AccessControlException;
1: import java.security.AccessControlContext;
1: import java.security.Permission;
1: import javax.security.auth.Subject;
1: 
1: import org.apache.derby.authentication.SystemPrincipal;
0: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1:  * This class provides helper functions for security-related features.
1:  */
1: public class SecurityUtil {
1: 
1:     /**
0:      * Creates a (read-only) Subject representing a given user.
1:      *
1:      * @param user the user name
1:      * @return a Subject representing the user by its exact and normalized name
1:      *
1:      * @see <a href="http://wiki.apache.org/db-derby/UserIdentifiers">User Names & Authorization Identifiers in Derby</a>
1:      */
1:     static public Subject createSystemPrincipalSubject(String user) {
0:         final Set principals = new HashSet();
1:         // add the authenticated user
1:         if (user != null) {
1:             // The Java security runtime checks whether a Subject falls
1:             // under a Principal policy by looking for a literal match
1:             // of the Principal name as exactly found in a policy file
1:             // clause with any of the Subject's listed Principal names.
1:             //
1:             // To support Authorization Identifier as Principal names
1:             // we add two Principals here: one with the given name and
1:             // another one with the normalized name.  This way, a
1:             // permission will be granted if the authenticated user name
1:             // matches a Principal clause in the policy file with either
1:             // the exact same name or the normalized name.
1:             //
1:             // An alternative approach of normalizing all names within
1:             // SystemPrincipal has issues; see comments there.
1:             principals.add(new SystemPrincipal(user));
1:             principals.add(new SystemPrincipal(getAuthorizationId(user)));
1:         }
1:         final boolean readOnly = true;
1:         final Set credentials = new HashSet();
1:         return new Subject(readOnly, principals, credentials, credentials);
1:     }
1: 
1:     /**
1:      * Returns the Authorization Identifier for a principal name.
1:      *
1:      * @param name the name of the principal
1:      * @return the authorization identifier for this principal
1:      */
1:     static private String getAuthorizationId(String name) {
1:         // RuntimeException messages not localized
1:         if (name == null) {
1:             throw new NullPointerException("name can't be null");
1:         }
1:         if (name.length() == 0) {
1:             throw new IllegalArgumentException("name can't be empty");
1:         }
1:         try {
1:             return IdUtil.getUserAuthorizationId(name);
1:         } catch (StandardException se) {
1:             throw new IllegalArgumentException(se.getMessage());
1: 		}
1:     }
1: 
1:     /**
1:      * Checks that a Subject has a Permission under the SecurityManager.
1:      * To perform this check the following policy grant is required
1:      * <ul>
1:      * <li> to run the encapsulated test:
1:      *      permission javax.security.auth.AuthPermission "doAsPrivileged";
1:      * </ul>
1:      * or an AccessControlException will be raised detailing the cause.
1:      * <p>
1:      *
1:      * @param subject the subject representing the SystemPrincipal(s)
1:      * @param perm the permission to be checked
1:      * @throws AccessControlException if permissions are missing
1:      */
1:     static public void checkSubjectHasPermission(final Subject subject,
1:                                                  final Permission perm) {
1:         // the checks
0:         final PrivilegedAction runCheck
0:             = new PrivilegedAction() {
0:                     public Object run() {
1:                         AccessController.checkPermission(perm);
1:                         return null;
1:                     }
1:                 };
0:         final PrivilegedAction runCheckAsPrivilegedUser
0:             = new PrivilegedAction() {
0:                     public Object run() {
0:                         // run check as subject with new access control context
1:                         final AccessControlContext acc = null;
1:                         Subject.doAsPrivileged(subject, runCheck, acc);
1:                         return null;
1:                     }
1:                 };
1: 
1:         // run check as privileged action for narrow codebase permissions
1:         AccessController.doPrivileged(runCheckAsPrivilegedUser);
1:     }
1: 
1:     /**
1:      * Checks that a User has a Permission under the SecurityManager.
1:      * To perform this check the following policy grant is required
1:      * <ul>
1:      * <li> to run the encapsulated test:
1:      *      permission javax.security.auth.AuthPermission "doAsPrivileged";
1:      * </ul>
1:      * or an AccessControlException will be raised detailing the cause.
1:      * <p>
1:      *
1:      * @param user the user to be check for having the permission
1:      * @param perm the permission to be checked
1:      * @throws AccessControlException if permissions are missing
1:      */
1:     static public void checkUserHasPermission(String user,
1:                                               Permission perm) {
1:         // approve action if not running under a security manager
1:         if (System.getSecurityManager() == null) {
1:             return;
1:         }
1: 
1:         // check the subject for having the permission
1:         final Subject subject = createSystemPrincipalSubject(user);
1:         checkSubjectHasPermission(subject, perm);
1:     }
1: }
============================================================================