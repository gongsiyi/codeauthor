1:df69fcc: /*
2:df69fcc: 
1:df69fcc:    Derby - Class SimpleNetworkServerSample
1:df69fcc: 
1:44e2455:    Licensed to the Apache Software Foundation (ASF) under one or more
1:44e2455:    contributor license agreements.  See the NOTICE file distributed with
1:44e2455:    this work for additional information regarding copyright ownership.
1:44e2455:    The ASF licenses this file to You under the Apache License, Version 2.0
1:44e2455:    (the "License"); you may not use this file except in compliance with
1:44e2455:    the License.  You may obtain a copy of the License at
1:df69fcc: 
1:df69fcc:       http://www.apache.org/licenses/LICENSE-2.0
1:df69fcc: 
1:df69fcc:    Unless required by applicable law or agreed to in writing, software
1:df69fcc:    distributed under the License is distributed on an "AS IS" BASIS,
1:df69fcc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df69fcc:    See the License for the specific language governing permissions and
1:df69fcc:    limitations under the License.
1:df69fcc: 
1:df69fcc:  */
1:df69fcc: 
1:df69fcc: import org.apache.derby.drda.NetworkServerControl;
1:df69fcc: import java.io.BufferedReader;
1:df69fcc: import java.io.InputStreamReader;
1:1695a5d: import java.sql.Connection;
1:1695a5d: import java.sql.DriverManager;
1:1695a5d: import java.sql.ResultSet;
1:1695a5d: import java.sql.Statement;
1:1695a5d: import java.sql.SQLException;
1:df69fcc: 
1:df69fcc: /**
1:df69fcc:  * In order for a database to be consistent, only one JVM is allowed
1:df69fcc:  * to access it at a time. The embedded driver is loaded when the Network Server
1:df69fcc:  * is started. Hence, the JVM that starts the Network Server can get an
1:df69fcc:  * embedded connection to the same database that Network Server is accessing
1:df69fcc:  * to serve the clients from other JVMs. This solution allows you to take
1:1695a5d:  * advantage of the performance benefits of the embedded driver as well as allow
1:df69fcc:  * for client connections from other JVMs to connect to the same database.
1:df69fcc:  *
1:df69fcc:  *
1:1695a5d:  * In particular, this sample program
1:df69fcc:  * 1) 	starts the Derby Network Server using a property and
1:df69fcc:  *		also loads the embedded driver
1:df69fcc:  * 2)	checks if the Derby Network Server is up and running
1:df69fcc:  * 3)	creates the database 'NSSimpleDB' if not already created
1:df69fcc:  * 4)	obtains an embedded database connection
1:df69fcc:  * 5)	tests the database connection by executing a sample query
1:df69fcc:  * 6)	allows for client connections to connect to the server until
1:df69fcc:  *      the user decides to stop the server and exit the program
1:df69fcc:  * 7)	closes the connections
1:df69fcc:  * 8)	shuts down the Derby Network Server before exiting the program.
1:df69fcc:  *
1:1695a5d:  * Note: On running this program, there will be a NSSimpleDB database directory
1:1695a5d:  * created if not present already, and there will be a derby.log file which
1:1695a5d:  * contains messages from Derby.
1:df69fcc:  *
1:df69fcc:  *  <P>
1:df69fcc:  *  Usage: java SimpleNetworkServerSample
1:df69fcc:  *
1:df69fcc:  */
1:df69fcc: public class SimpleNetworkServerSample
1:df69fcc: {
1:df69fcc: 
1:df69fcc: 	/*
1:df69fcc: 	 * The database is located in the same directory where this program is being
1:1695a5d: 	 * run. Alternatively, you can specify the absolute path of the database location
1:df69fcc: 	 */
1:df69fcc: 	private static String DBNAME="NSSimpleDB";
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	public static void main (String[] args)
1:df69fcc: 		throws Exception
1:df69fcc: 	{
1:df69fcc: 		Connection embeddedConn = null;
1:df69fcc: 
1:df69fcc: 		try
1:df69fcc: 		{
1:df69fcc: 			startNetworkServer();
1:df69fcc: 
1:df69fcc: 			/*
1:1695a5d: 			  Can now spawn threads to do many things with
1:df69fcc: 			  embedded connections but allow others to connect via
1:df69fcc: 			  Network Server. But for sample purposes, an embedded connection
1:df69fcc: 			  will be obtained and a sample query executed before waiting for
1:1695a5d: 			  the user to give input to shut down the server.
1:df69fcc: 			*/
1:df69fcc: 
1:df69fcc: 		}
1:df69fcc: 		catch (Exception e)
1:df69fcc: 		{
1:df69fcc: 			System.out.println("Failed to start NetworkServer: " + e);
1:df69fcc: 			System.exit(1);
1:df69fcc: 		}
1:df69fcc: 
1:df69fcc: 		try
1:df69fcc: 		{
1:df69fcc: 			// get an embedded connection
1:1695a5d: 			// Since the Network Server was started in this JVM, this JVM can get an embedded
1:1695a5d: 			// connection to the same database that the Network Server
1:1695a5d: 			// is accessing to serve clients from other JVMs.
1:df69fcc: 			// The embedded connection will be faster than going across the
1:df69fcc: 			// network
1:df69fcc: 			embeddedConn = getEmbeddedConnection(DBNAME,"create=true;");
1:df69fcc: 			System.out.println("Got an embedded connection.");
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 			System.out.println("Testing embedded connection by executing a sample query ");
1:df69fcc: 			// test connections by doing some work
1:df69fcc: 			test(embeddedConn);
1:df69fcc: 
1:df69fcc: 			// print how to connect to the network server using ij
1:df69fcc: 			String howToConnect = ijUsage();
1:df69fcc: 			System.out.println(howToConnect);
1:df69fcc: 
1:df69fcc: 			waitForExit();
1:df69fcc: 
1:df69fcc: 		}
1:df69fcc: 		catch (SQLException sqle)
1:df69fcc: 		{
1:df69fcc: 			System.out.println("Failure making connection: " + sqle);
1:df69fcc: 			sqle.printStackTrace();
1:df69fcc: 		}
1:df69fcc: 		finally
1:df69fcc: 		{
1:df69fcc: 
1:df69fcc: 			if(embeddedConn != null)
1:df69fcc: 				embeddedConn.close();
1:df69fcc: 			try
1:df69fcc: 			{
1:1695a5d: 				// shut down Derby Network Server
1:df69fcc: 				DriverManager.getConnection("jdbc:derby:;shutdown=true");
1:df69fcc: 			}
1:df69fcc: 			catch(SQLException se)
1:df69fcc: 			{
1:df69fcc: 				//ignore se
1:df69fcc: 			}
1:df69fcc: 
1:df69fcc: 		}
1:df69fcc: 
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 *  Setting the derby.drda.startNetworkServer property to true,
1:df69fcc: 	 *  either in the System properties as we do here or in
1:1695a5d: 	 *  the derby.properties file, will cause the Network Server to
1:df69fcc: 	 *  start as soon as Derby is loaded.
1:df69fcc: 	 *
1:1695a5d: 	 *  To load Derby, we just need to load the embedded
1:1695a5d: 	 *  driver with:
1:df69fcc: 	 *  Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1:df69fcc: 	 *
1:df69fcc: 	 *  Then we will test for a while and make sure it is up, before
1:df69fcc: 	 *  we give up.
1:df69fcc:   	 *
1:1695a5d: 	 *  Alternatively, the Network Server might be started from the command
1:df69fcc: 	 *  line or from some other program. Note: only the JVM that starts
1:df69fcc: 	 *  Network Server can make an embedded connection.
1:df69fcc: 	 */
1:df69fcc: 
1:df69fcc: 	public static void startNetworkServer() throws Exception
1:df69fcc: 	{
1:1695a5d: 		// Start the Network Server using the property
1:df69fcc: 		// and then wait for the server to start by testing a connection
1:df69fcc: 		startWithProperty();
1:df69fcc: 		waitForStart();
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Start Derby Network Server using the property
1:df69fcc: 	 * derby.drda.startNetworkServer. This property can be set as a system property or
1:1695a5d: 	 * or in the derby.properties file.
1:1695a5d: 	 * Setting this property to true starts the Network Server when
1:df69fcc: 	 * Derby boots up.
1:1695a5d: 	 * The port at which the Derby Network Server listens can be changed
1:df69fcc: 	 * by setting the derby.drda.portNumber property. By default, the server starts
1:1695a5d: 	 * at port 1527.
1:1695a5d: 	 * Server output goes to derby.log.
1:df69fcc: 	 */
1:df69fcc: 
1:df69fcc: 	private static void startWithProperty() throws Exception
1:df69fcc: 	{
1:df69fcc: 		System.out.println("Starting Network Server");
1:df69fcc: 		System.setProperty("derby.drda.startNetworkServer","true");
1:df69fcc: 
1:1695a5d: 		// Booting Derby
1:4469400:         Class<?> clazz = Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:4469400:         clazz.getConstructor().newInstance();
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Tries to check if the Network Server is up and running by calling ping
1:1695a5d: 	 * If successful, it returns; otherwise, it tries for 50 seconds before giving up and throwing
1:df69fcc: 	 * an exception.
1:df69fcc: 	 * @throws Exception when there is a problem with testing if the Network Server is up
1:df69fcc: 	 * and running
1:df69fcc: 	 */
1:df69fcc: 	private static void waitForStart() throws Exception
1:df69fcc: 	{
1:df69fcc: 
1:df69fcc: 		// Server instance for testing connection
1:df69fcc: 		org.apache.derby.drda.NetworkServerControl server = null;
1:df69fcc: 
1:1695a5d: 		// Use NetworkServerControl.ping() to wait for the
1:1695a5d: 		// Network Server to come up.  We could have used
1:1695a5d: 		// NetworkServerControl to start the server, but the property is
1:df69fcc: 		// easier.
1:df69fcc: 		server = new NetworkServerControl();
1:df69fcc: 
1:df69fcc: 		System.out.println("Testing if Network Server is up and running!");
1:df69fcc: 		for (int i = 0; i < 10 ; i ++)
1:df69fcc: 		{
1:df69fcc: 			try {
1:df69fcc: 
1:df69fcc: 				Thread.currentThread().sleep(5000);
1:df69fcc: 				server.ping();
1:df69fcc: 			}
1:df69fcc: 			catch (Exception e)
1:df69fcc: 			{
1:df69fcc: 				System.out.println("Try #" + i + " " +e.toString());
1:df69fcc: 				if (i == 9 )
1:df69fcc: 				{
1:df69fcc: 					System.out.println("Giving up trying to connect to Network Server!");
1:df69fcc: 					throw e;
1:df69fcc: 				}
1:df69fcc: 			}
1:df69fcc: 		}
1:df69fcc: 		System.out.println("Derby Network Server now running");
1:df69fcc: 
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 	/**
1:1695a5d: 	 * Used to return an embedded Derby connection.
1:df69fcc: 	 * The protocol used is "jdbc:derby:dbName" where dbName is the database name
1:1695a5d: 	 * @pre the Derby embedded JDBC driver must be loaded before calling
1:1695a5d: 	 * this method
1:1695a5d: 	 * Alternatively, if the Derby Network Server is started in this JVM, the embedded driver
1:df69fcc: 	 * org.apache.derby.jdbc.EmbeddedDriver is already loaded and it need not be loaded again.
1:df69fcc: 	 * @param	dbName	database name (ie location of the database)
1:df69fcc: 	 * @param 	attributes attributes for the database connection
1:1695a5d: 	 *			(for example, create=true;
1:1695a5d: 	 *					 upgrade=true;)
1:df69fcc: 	 * @return	returns embedded database connection
1:df69fcc: 	 * @throws Exception if there is any error
1:df69fcc: 	 */
1:df69fcc: 	public static Connection getEmbeddedConnection(String database,String attributes)
1:df69fcc: 		throws Exception
1:df69fcc: 	{
1:df69fcc: 		String dbUrl = "jdbc:derby:"+database +";"+attributes;
1:df69fcc: 		Connection conn = DriverManager.getConnection(dbUrl);
1:df69fcc: 		return conn;
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Test a connection by executing a sample query
1:df69fcc: 	 * @param	conn 	database connection
1:df69fcc: 	 * @throws Exception if there is any error
1:df69fcc: 	 */
1:df69fcc: 	public static void test(Connection conn)
1:df69fcc: 		throws Exception
1:df69fcc: 	{
1:df69fcc: 
1:df69fcc: 	  Statement stmt = null;
1:df69fcc: 	  ResultSet rs = null;
1:df69fcc: 	  try
1:df69fcc: 	  {
1:df69fcc: 		// To test our connection, we will try to do a select from the system catalog tables
1:df69fcc: 		stmt = conn.createStatement();
1:df69fcc: 		rs = stmt.executeQuery("select count(*) from sys.systables");
1:df69fcc: 		while(rs.next())
1:df69fcc: 			System.out.println("number of rows in sys.systables = "+ rs.getInt(1));
1:df69fcc: 
1:df69fcc: 	  }
1:df69fcc: 	  catch(SQLException sqle)
1:df69fcc: 	  {
1:df69fcc: 		  System.out.println("SQLException when querying on the database connection; "+ sqle);
1:df69fcc: 		  throw sqle;
1:df69fcc:   	  }
1:df69fcc:   	  finally
1:df69fcc:   	  {
1:df69fcc: 		  if(rs != null)
1:df69fcc: 		  	rs.close();
1:df69fcc: 		  if(stmt != null)
1:df69fcc: 		  	stmt.close();
1:df69fcc:  	  }
1:df69fcc: 
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:1695a5d: 	 * This method waits until the user presses Enter to stop the server
1:df69fcc: 	 * and eventually exit this program
1:df69fcc: 	 * Allows clients to continue to connect using client connections from other
1:1695a5d: 	 * JVMs to the Derby Network Server that was started in this program
1:df69fcc: 	 */
1:df69fcc:  	private static void waitForExit() throws Exception
1:df69fcc:  	{
1:df69fcc: 		System.out.println("Clients can continue to connect: ");
1:df69fcc:  		BufferedReader in =
1:df69fcc:  			new BufferedReader(new InputStreamReader(System.in));
1:df69fcc:  		System.out.println("Press [Enter] to stop Server");
1:df69fcc:  		in.readLine();
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Returns a string with information as to how to connect to Derby Network Server
1:df69fcc: 	 */
1:df69fcc: 	private static String ijUsage()
1:df69fcc: 	{
1:df69fcc: 
1:df69fcc: 		String ijUsage = "\nWhile my app is busy with embedded work, ";
1:df69fcc: 		ijUsage += "ij might connect like this:\n\n";
1:6558c14: 		ijUsage +=  "\t$ java -Dij.user=me -Dij.password=pw -Dij.protocol=jdbc:derby://localhost:1527/ org.apache.derby.tools.ij\n";
1:6558c14: 		ijUsage += "\tij> connect '" + DBNAME + "';\n\n";
1:df69fcc: 
1:df69fcc: 		return ijUsage;
1:df69fcc: 	}
1:df69fcc: }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz = Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:         clazz.getConstructor().newInstance();
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1:  * advantage of the performance benefits of the embedded driver as well as allow
1:  * In particular, this sample program
/////////////////////////////////////////////////////////////////////////
1:  * Note: On running this program, there will be a NSSimpleDB database directory
1:  * created if not present already, and there will be a derby.log file which
1:  * contains messages from Derby.
/////////////////////////////////////////////////////////////////////////
1: 	 * run. Alternatively, you can specify the absolute path of the database location
/////////////////////////////////////////////////////////////////////////
1: 			  Can now spawn threads to do many things with
1: 			  the user to give input to shut down the server.
/////////////////////////////////////////////////////////////////////////
1: 			// Since the Network Server was started in this JVM, this JVM can get an embedded
1: 			// connection to the same database that the Network Server
1: 			// is accessing to serve clients from other JVMs.
/////////////////////////////////////////////////////////////////////////
1: 				// shut down Derby Network Server
/////////////////////////////////////////////////////////////////////////
1: 	 *  the derby.properties file, will cause the Network Server to
1: 	 *  To load Derby, we just need to load the embedded
1: 	 *  driver with:
1: 	 *  Alternatively, the Network Server might be started from the command
1: 		// Start the Network Server using the property
/////////////////////////////////////////////////////////////////////////
1: 	 * or in the derby.properties file.
1: 	 * Setting this property to true starts the Network Server when
1: 	 * The port at which the Derby Network Server listens can be changed
1: 	 * at port 1527.
1: 	 * Server output goes to derby.log.
/////////////////////////////////////////////////////////////////////////
1: 		// Booting Derby
/////////////////////////////////////////////////////////////////////////
1: 	 * If successful, it returns; otherwise, it tries for 50 seconds before giving up and throwing
/////////////////////////////////////////////////////////////////////////
1: 		// Use NetworkServerControl.ping() to wait for the
1: 		// Network Server to come up.  We could have used
1: 		// NetworkServerControl to start the server, but the property is
/////////////////////////////////////////////////////////////////////////
1: 	 * Used to return an embedded Derby connection.
1: 	 * @pre the Derby embedded JDBC driver must be loaded before calling
1: 	 * this method
1: 	 * Alternatively, if the Derby Network Server is started in this JVM, the embedded driver
1: 	 *			(for example, create=true;
1: 	 *					 upgrade=true;)
/////////////////////////////////////////////////////////////////////////
1: 	 * This method waits until the user presses Enter to stop the server
1: 	 * JVMs to the Derby Network Server that was started in this program
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:44e2455
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6558c14
/////////////////////////////////////////////////////////////////////////
1: 		ijUsage +=  "\t$ java -Dij.user=me -Dij.password=pw -Dij.protocol=jdbc:derby://localhost:1527/ org.apache.derby.tools.ij\n";
1: 		ijUsage += "\tij> connect '" + DBNAME + "';\n\n";
commit:df69fcc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class SimpleNetworkServerSample
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: import java.sql.*;
0: import javax.sql.DataSource;
1: import org.apache.derby.drda.NetworkServerControl;
0: import java.util.Properties;
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
1: 
1: /**
1:  * In order for a database to be consistent, only one JVM is allowed
1:  * to access it at a time. The embedded driver is loaded when the Network Server
1:  * is started. Hence, the JVM that starts the Network Server can get an
1:  * embedded connection to the same database that Network Server is accessing
1:  * to serve the clients from other JVMs. This solution allows you to take
0:  * advantage of the performance benefits of embedded driver as well as allow
1:  * for client connections from other JVMs to connect to the same database.
1:  *
1:  *
0:  * In particular,this sample program
1:  * 1) 	starts the Derby Network Server using a property and
1:  *		also loads the embedded driver
1:  * 2)	checks if the Derby Network Server is up and running
1:  * 3)	creates the database 'NSSimpleDB' if not already created
1:  * 4)	obtains an embedded database connection
1:  * 5)	tests the database connection by executing a sample query
1:  * 6)	allows for client connections to connect to the server until
1:  *      the user decides to stop the server and exit the program
1:  * 7)	closes the connections
1:  * 8)	shuts down the Derby Network Server before exiting the program.
1:  *
0:  * Note, on running this program, there will be a NSSimpleDB database directory
0:  * created if not present already and there will be a derby.log file which
0:  * contains messages from Derby
1:  *
1:  *  <P>
1:  *  Usage: java SimpleNetworkServerSample
1:  *
1:  */
1: public class SimpleNetworkServerSample
1: {
1: 
1: 	/*
1: 	 * The database is located in the same directory where this program is being
0: 	 * run. Alternately one can specify the absolute path of the database location
1: 	 */
1: 	private static String DBNAME="NSSimpleDB";
1: 
1: 
1: 	public static void main (String[] args)
1: 		throws Exception
1: 	{
1: 		Connection embeddedConn = null;
1: 
1: 		try
1: 		{
1: 			startNetworkServer();
1: 
1: 			/*
0: 			  Can now spawn threads to do many wonderous things with
1: 			  embedded connections but allow others to connect via
1: 			  Network Server. But for sample purposes, an embedded connection
1: 			  will be obtained and a sample query executed before waiting for
0: 			  the user to give input to shutdown the server.
1: 			*/
1: 
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			System.out.println("Failed to start NetworkServer: " + e);
1: 			System.exit(1);
1: 		}
1: 
1: 		try
1: 		{
1: 			// get an embedded connection
0: 			// Since Network Server was started in this jvm,  this JVM can get an embedded
0: 			// connection to the same database that Network Server
0: 			// is accessing to serve clients from other JVM's.
1: 			// The embedded connection will be faster than going across the
1: 			// network
1: 			embeddedConn = getEmbeddedConnection(DBNAME,"create=true;");
1: 			System.out.println("Got an embedded connection.");
1: 
1: 
1: 			System.out.println("Testing embedded connection by executing a sample query ");
1: 			// test connections by doing some work
1: 			test(embeddedConn);
1: 
1: 			// print how to connect to the network server using ij
1: 			String howToConnect = ijUsage();
1: 			System.out.println(howToConnect);
1: 
1: 			waitForExit();
1: 
1: 		}
1: 		catch (SQLException sqle)
1: 		{
1: 			System.out.println("Failure making connection: " + sqle);
1: 			sqle.printStackTrace();
1: 		}
1: 		finally
1: 		{
1: 
1: 			if(embeddedConn != null)
1: 				embeddedConn.close();
1: 			try
1: 			{
0: 				// shutdown Derby Network Server
1: 				DriverManager.getConnection("jdbc:derby:;shutdown=true");
1: 			}
1: 			catch(SQLException se)
1: 			{
1: 				//ignore se
1: 			}
1: 
1: 		}
1: 
1: 	}
1: 
1: 	/**
1: 	 *  Setting the derby.drda.startNetworkServer property to true,
1: 	 *  either in the System properties as we do here or in
0: 	 *  the derby.properties file will cause Network Server to
1: 	 *  start as soon as Derby is loaded.
1: 	 *
0: 	 *  To load Derby we just need to load the embedded
0: 	 *  Driver with:
1: 	 *  Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1: 	 *
1: 	 *  Then we will test for a while and make sure it is up, before
1: 	 *  we give up.
1:   	 *
0: 	 *  Alternately Network Server might be started from the command
1: 	 *  line or from some other program. Note: only the JVM that starts
1: 	 *  Network Server can make an embedded connection.
1: 	 */
1: 
1: 	public static void startNetworkServer() throws Exception
1: 	{
0: 		// Start network server using the property
1: 		// and then wait for the server to start by testing a connection
1: 		startWithProperty();
1: 		waitForStart();
1: 	}
1: 
1: 	/**
1: 	 * Start Derby Network Server using the property
1: 	 * derby.drda.startNetworkServer. This property can be set as a system property or
0: 	 * or by setting in derby.properties file.
0: 	 * Setting this property to true , starts the Network Server when
1: 	 * Derby boots up.
0: 	 * The port at which the Derby Network Server listens to can be changed
1: 	 * by setting the derby.drda.portNumber property. By default, the server starts
0: 	 * at port 1527
0: 	 * Server output goes to derby.log
1: 	 */
1: 
1: 	private static void startWithProperty() throws Exception
1: 	{
1: 		System.out.println("Starting Network Server");
1: 		System.setProperty("derby.drda.startNetworkServer","true");
1: 
0: 		// Booting derby
0: 		Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	 * Tries to check if the Network Server is up and running by calling ping
0: 	 * If successful, then it returns else tries for 50 seconds before giving up and throwing
1: 	 * an exception.
1: 	 * @throws Exception when there is a problem with testing if the Network Server is up
1: 	 * and running
1: 	 */
1: 	private static void waitForStart() throws Exception
1: 	{
1: 
1: 		// Server instance for testing connection
1: 		org.apache.derby.drda.NetworkServerControl server = null;
1: 
0: 		// Use NetworkServerControl.ping() to wait for
0: 		// NetworkServer to come up.  We could have used
0: 		// NetworkServerControl to start the server but the property is
1: 		// easier.
1: 		server = new NetworkServerControl();
1: 
1: 		System.out.println("Testing if Network Server is up and running!");
1: 		for (int i = 0; i < 10 ; i ++)
1: 		{
1: 			try {
1: 
1: 				Thread.currentThread().sleep(5000);
1: 				server.ping();
1: 			}
1: 			catch (Exception e)
1: 			{
1: 				System.out.println("Try #" + i + " " +e.toString());
1: 				if (i == 9 )
1: 				{
1: 					System.out.println("Giving up trying to connect to Network Server!");
1: 					throw e;
1: 				}
1: 			}
1: 		}
1: 		System.out.println("Derby Network Server now running");
1: 
1: 	}
1: 
1: 	/**
0: 	 * Used to return an embedded Derby connection
1: 	 * The protocol used is "jdbc:derby:dbName" where dbName is the database name
0: 	 * @pre the derby embedded jdbc driver must be loaded before calling this method
0: 	 * Alternately, if the derby network server is started in this jvm, then the embedded driver
1: 	 * org.apache.derby.jdbc.EmbeddedDriver is already loaded and it need not be loaded again.
1: 	 * @param	dbName	database name (ie location of the database)
1: 	 * @param 	attributes attributes for the database connection
0: 	 *			example, create=true;
0: 	 *					 upgrade=true;
1: 	 * @return	returns embedded database connection
1: 	 * @throws Exception if there is any error
1: 	 */
1: 	public static Connection getEmbeddedConnection(String database,String attributes)
1: 		throws Exception
1: 	{
1: 		String dbUrl = "jdbc:derby:"+database +";"+attributes;
1: 		Connection conn = DriverManager.getConnection(dbUrl);
1: 		return conn;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	 * Test a connection by executing a sample query
1: 	 * @param	conn 	database connection
1: 	 * @throws Exception if there is any error
1: 	 */
1: 	public static void test(Connection conn)
1: 		throws Exception
1: 	{
1: 
1: 	  Statement stmt = null;
1: 	  ResultSet rs = null;
1: 	  try
1: 	  {
1: 		// To test our connection, we will try to do a select from the system catalog tables
1: 		stmt = conn.createStatement();
1: 		rs = stmt.executeQuery("select count(*) from sys.systables");
1: 		while(rs.next())
1: 			System.out.println("number of rows in sys.systables = "+ rs.getInt(1));
1: 
1: 	  }
1: 	  catch(SQLException sqle)
1: 	  {
1: 		  System.out.println("SQLException when querying on the database connection; "+ sqle);
1: 		  throw sqle;
1:   	  }
1:   	  finally
1:   	  {
1: 		  if(rs != null)
1: 		  	rs.close();
1: 		  if(stmt != null)
1: 		  	stmt.close();
1:  	  }
1: 
1: 	}
1: 
1: 
1: 	/**
0: 	 * This method waits until the user hits enter to stop the server
1: 	 * and eventually exit this program
1: 	 * Allows clients to continue to connect using client connections from other
0: 	 * jvms to Derby Network Server that was started in this program
1: 	 */
1:  	private static void waitForExit() throws Exception
1:  	{
1: 		System.out.println("Clients can continue to connect: ");
1:  		BufferedReader in =
1:  			new BufferedReader(new InputStreamReader(System.in));
1:  		System.out.println("Press [Enter] to stop Server");
1:  		in.readLine();
1: 	}
1: 
1: 	/**
1: 	 * Returns a string with information as to how to connect to Derby Network Server
1: 	 */
1: 	private static String ijUsage()
1: 	{
1: 
1: 		String ijUsage = "\nWhile my app is busy with embedded work, ";
1: 		ijUsage += "ij might connect like this:\n\n";
0: 		ijUsage +=  "\t$ java -Dij.user=me -Dij.password=pw -Dij.protocol=jdbc:derby:net://localhost:1527/ org.apache.derby.tools.ij\n";
0: 		ijUsage += "\tij> connect '" + DBNAME + ":retrieveMessagesFromServerOnGetMessage=true;';\n";
0: 		ijUsage += "Watch that punctuation.  Put a ':' before the jcc\n";
0: 		ijUsage += "attributes and a ';' after each one (even the last).\n\n";
1: 
1: 		return ijUsage;
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
commit:6f35451
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class SimpleNetworkServerSample
0: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
commit:67614ad
/////////////////////////////////////////////////////////////////////////
============================================================================