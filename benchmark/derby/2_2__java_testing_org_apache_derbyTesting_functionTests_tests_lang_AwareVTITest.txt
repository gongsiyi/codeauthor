1:29007f0: /*
3:29007f0: 
1:29007f0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AwareVTITest
1:29007f0: 
1:29007f0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:29007f0:    contributor license agreements.  See the NOTICE file distributed with
1:29007f0:    this work for additional information regarding copyright ownership.
1:29007f0:    The ASF licenses this file to you under the Apache License, Version 2.0
1:29007f0:    (the "License"); you may not use this file except in compliance with
1:29007f0:    the License.  You may obtain a copy of the License at
1:29007f0: 
1:29007f0:      http://www.apache.org/licenses/LICENSE-2.0
1:29007f0: 
1:29007f0:    Unless required by applicable law or agreed to in writing, software
1:29007f0:    distributed under the License is distributed on an "AS IS" BASIS,
1:29007f0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29007f0:    See the License for the specific language governing permissions and
1:29007f0:    limitations under the License.
1:29007f0: 
1:29007f0:  */
1:29007f0: 
1:29007f0: package org.apache.derbyTesting.functionTests.tests.lang;
1:29007f0: 
1:29007f0: import java.sql.Connection;
1:70d436b: import java.sql.SQLException;
1:29007f0: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:29007f0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:29007f0: 
1:29007f0: /**
1:29007f0:  * <p>
1:29007f0:  * Test AwareVTIs. See DERBY-6117.
1:29007f0:  * </p>
1:29007f0:  */
1:29007f0: public class AwareVTITest  extends GeneratedColumnsHelper
1:29007f0: {
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:29007f0:     // CONSTANTS
1:29007f0:     //
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:70d436b:     private static  final   String  CANNOT_CHANGE_COLUMNS = "X0Y92";
1:70d436b: 
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:29007f0:     // STATE
1:29007f0:     //
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:29007f0:     // CONSTRUCTOR
1:29007f0:     //
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:29007f0:     /**
1:29007f0:      * Create a new instance.
1:29007f0:      */
1:29007f0: 
1:29007f0:     public AwareVTITest(String name)
1:29007f0:     {
1:29007f0:         super(name);
1:29007f0:     }
1:29007f0:     
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:29007f0:     // JUnit BEHAVIOR
1:29007f0:     //
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:29007f0: 
1:29007f0:     /**
1:29007f0:      * Construct top level suite in this JUnit test
1:29007f0:      */
1:29007f0:     public static Test suite()
1:29007f0:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             AwareVTITest.class);
1:29007f0:         Test        result = new CleanDatabaseTestSetup( suite );
1:29007f0: 
1:29007f0:         return result;
1:29007f0:     }
1:29007f0: 
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:29007f0:     // TESTS
1:29007f0:     //
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:29007f0:     /**
1:29007f0:      * <p>
1:29007f0:      * Basic test of AwareVTIs.
1:29007f0:      * </p>
1:29007f0:      */
1:29007f0:     public void test_01_basic() throws Exception
1:29007f0:     {
1:29007f0:         Connection conn = getConnection();
1:29007f0: 
1:29007f0:         vetBasic( conn, "s1", "f1" );
1:29007f0:         vetBasic( conn, "s2", "f2" );
1:29007f0:     }
1:29007f0:     private void    vetBasic( Connection conn, String schema, String function ) throws Exception
1:29007f0:     {
1:29007f0:         goodStatement( conn, "create schema " + schema );
1:29007f0:         goodStatement
1:29007f0:             (
1:29007f0:              conn,
1:29007f0:              "create function " + schema + "." + function + "() returns table\n" +
1:29007f0:              "(\n" +
1:29007f0:              "    schema_name varchar( 20 ),\n" +
1:29007f0:              "    vti_name varchar( 20 ),\n" +
1:29007f0:              "    statement_text varchar( 100 )\n" +
1:29007f0:              ")\n" +
1:29007f0:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:29007f0:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AwareVTITest.dummyAwareVTI'\n"
1:29007f0:              );
1:29007f0: 
1:29007f0:         String  query = "select * from table( " + schema + "." + function + "() ) s";
1:29007f0:         assertResults
1:29007f0:             (
1:29007f0:              conn,
1:29007f0:              query,
1:29007f0:              new String[][]
1:29007f0:              {
1:29007f0:                  { schema.toUpperCase(), function.toUpperCase(), query },
1:29007f0:              },
1:29007f0:              false
1:29007f0:              );
1:29007f0:     }
1:29007f0: 
1:70d436b:     /**
1:70d436b:      * <p>
1:70d436b:      * Test that column names can be set in a StringColumnVTI, but only
1:70d436b:      * if they haven't already been set.
1:70d436b:      * </p>
1:70d436b:      */
1:70d436b:     public void test_02_StringColumnVTI() throws Exception
1:70d436b:     {
1:70d436b:         Connection conn = getConnection();
1:70d436b: 
1:70d436b:         String[][]  rows = new String[][]
1:70d436b:             {
1:70d436b:                 { "foo", "bar" },
1:70d436b:                 { "wibble", "baz" }
1:70d436b:             };
1:70d436b:         UnnamedColumnsVTI   ucv = new UnnamedColumnsVTI( rows );
1:70d436b: 
1:70d436b:         // you can set the column names once...
1:70d436b:         ucv.setColumnNames( new String [] { "A", "B" } );
1:70d436b: 
1:70d436b:         // ...but only once
1:70d436b:         try {
1:70d436b:             ucv.setColumnNames( new String [] { "C", "D" } );
1:70d436b:             fail( "Attempt to reset column names should have failed." );
1:70d436b:         }
1:70d436b:         catch (SQLException se)
1:70d436b:         {
1:70d436b:             assertEquals( CANNOT_CHANGE_COLUMNS, se.getSQLState() );
1:70d436b:         }
1:70d436b: 
1:70d436b:         assertResults( ucv, rows, false );
1:70d436b:     }
1:70d436b:     
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Test the ArchiveVTI table function. This table function may be an example
1:10df8a5:      * in the Derby user docs. If you break this table function, then you need to
1:10df8a5:      * adjust the user docs accordingly. That documentation should be linked from
1:10df8a5:      * DERBY-6117.
1:10df8a5:      * </p>
1:10df8a5:      */
1:10df8a5:     public void test_03_ArchiveVTI() throws Exception
1:10df8a5:     {
1:10df8a5:         Connection conn = getConnection();
1:10df8a5: 
1:10df8a5:         goodStatement
1:10df8a5:             (
1:10df8a5:              conn,
1:10df8a5:              "create table t1\n" +
1:10df8a5:              "(\n" +
1:10df8a5:              "    keyCol int,\n" +
1:10df8a5:              "    aCol int,\n" +
1:10df8a5:              "    bCol int\n" +
1:10df8a5:              ")\n"
1:10df8a5:              );
1:10df8a5:         goodStatement( conn, "create table t1_archive_001 as select * from t1 with no data" );
1:10df8a5:         goodStatement( conn, "create table t1_archive_002 as select * from t1 with no data" );
1:10df8a5:         goodStatement( conn, "insert into t1_archive_002 values ( 1, 100, 1000 ), ( 2, 200, 2000 ), ( 3, 300, 3000 )" );
1:10df8a5:         goodStatement( conn, "insert into t1_archive_001 values ( 4, 400, 4000 ), ( 5, 500, 5000 ), ( 6, 600, 6000 )" );
1:10df8a5:         goodStatement( conn, "insert into t1 values ( 7, 700, 7000 ), ( 8, 800, 8000 ), ( 9, 900, 9000 )" );
1:10df8a5:         goodStatement
1:10df8a5:             (
1:10df8a5:              conn,
1:10df8a5:              "create function t1( archiveSuffix varchar( 32672 ) ) returns table\n" +
1:10df8a5:              "(\n" +
1:10df8a5:              "    keyCol int,\n" +
1:10df8a5:              "    aCol int,\n" +
1:10df8a5:              "    bCol int\n" +
1:10df8a5:              ")\n" +
1:10df8a5:              "language java parameter style derby_jdbc_result_set reads sql data\n" +
1:10df8a5:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI'\n"
1:10df8a5:              );
1:10df8a5:         
1:10df8a5:         assertResults
1:10df8a5:             (
1:10df8a5:              conn,
1:10df8a5:              "select keyCol, bCol from table( t1( '_ARCHIVE_' ) ) s\n" +
1:10df8a5:              "where keyCol between 3 and 7\n" +
1:10df8a5:              "order by keyCol\n",
1:10df8a5:              new String[][]
1:10df8a5:              {
1:10df8a5:                  { "3", "3000" },
1:10df8a5:                  { "4", "4000" },
1:10df8a5:                  { "5", "5000" },
1:10df8a5:                  { "6", "6000" },
1:10df8a5:                  { "7", "7000" },
1:10df8a5:              },
1:10df8a5:              false
1:10df8a5:              );
1:10df8a5:     }
1:10df8a5: 
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:29007f0:     // ROUTINES
1:29007f0:     //
1:29007f0:     ///////////////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:29007f0:     public  static  DummyAwareVTI   dummyAwareVTI()
1:29007f0:     {
1:29007f0:         return new DummyAwareVTI();
1:29007f0:     }
1:29007f0: 
1:70d436b:     ///////////////////////////////////////////////////////////////////////////////////
1:70d436b:     //
1:70d436b:     // NESTED CLASSES
1:70d436b:     //
1:70d436b:     ///////////////////////////////////////////////////////////////////////////////////
1:70d436b: 
1:70d436b:     public  static  class   UnnamedColumnsVTI    extends StringArrayVTI
1:70d436b:     {
1:70d436b:         public  UnnamedColumnsVTI( String[][] rows )
1:70d436b:         {
1:70d436b:             super( null, rows );
1:70d436b:         }
1:70d436b:     }
1:70d436b: 
1:29007f0: }
1:29007f0: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             AwareVTITest.class);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:10df8a5
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test the ArchiveVTI table function. This table function may be an example
1:      * in the Derby user docs. If you break this table function, then you need to
1:      * adjust the user docs accordingly. That documentation should be linked from
1:      * DERBY-6117.
1:      * </p>
1:      */
1:     public void test_03_ArchiveVTI() throws Exception
1:     {
1:         Connection conn = getConnection();
1: 
1:         goodStatement
1:             (
1:              conn,
1:              "create table t1\n" +
1:              "(\n" +
1:              "    keyCol int,\n" +
1:              "    aCol int,\n" +
1:              "    bCol int\n" +
1:              ")\n"
1:              );
1:         goodStatement( conn, "create table t1_archive_001 as select * from t1 with no data" );
1:         goodStatement( conn, "create table t1_archive_002 as select * from t1 with no data" );
1:         goodStatement( conn, "insert into t1_archive_002 values ( 1, 100, 1000 ), ( 2, 200, 2000 ), ( 3, 300, 3000 )" );
1:         goodStatement( conn, "insert into t1_archive_001 values ( 4, 400, 4000 ), ( 5, 500, 5000 ), ( 6, 600, 6000 )" );
1:         goodStatement( conn, "insert into t1 values ( 7, 700, 7000 ), ( 8, 800, 8000 ), ( 9, 900, 9000 )" );
1:         goodStatement
1:             (
1:              conn,
1:              "create function t1( archiveSuffix varchar( 32672 ) ) returns table\n" +
1:              "(\n" +
1:              "    keyCol int,\n" +
1:              "    aCol int,\n" +
1:              "    bCol int\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set reads sql data\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI'\n"
1:              );
1:         
1:         assertResults
1:             (
1:              conn,
1:              "select keyCol, bCol from table( t1( '_ARCHIVE_' ) ) s\n" +
1:              "where keyCol between 3 and 7\n" +
1:              "order by keyCol\n",
1:              new String[][]
1:              {
1:                  { "3", "3000" },
1:                  { "4", "4000" },
1:                  { "5", "5000" },
1:                  { "6", "6000" },
1:                  { "7", "7000" },
1:              },
1:              false
1:              );
1:     }
1: 
commit:70d436b
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  CANNOT_CHANGE_COLUMNS = "X0Y92";
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test that column names can be set in a StringColumnVTI, but only
1:      * if they haven't already been set.
1:      * </p>
1:      */
1:     public void test_02_StringColumnVTI() throws Exception
1:     {
1:         Connection conn = getConnection();
1: 
1:         String[][]  rows = new String[][]
1:             {
1:                 { "foo", "bar" },
1:                 { "wibble", "baz" }
1:             };
1:         UnnamedColumnsVTI   ucv = new UnnamedColumnsVTI( rows );
1: 
1:         // you can set the column names once...
1:         ucv.setColumnNames( new String [] { "A", "B" } );
1: 
1:         // ...but only once
1:         try {
1:             ucv.setColumnNames( new String [] { "C", "D" } );
1:             fail( "Attempt to reset column names should have failed." );
1:         }
1:         catch (SQLException se)
1:         {
1:             assertEquals( CANNOT_CHANGE_COLUMNS, se.getSQLState() );
1:         }
1: 
1:         assertResults( ucv, rows, false );
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  class   UnnamedColumnsVTI    extends StringArrayVTI
1:     {
1:         public  UnnamedColumnsVTI( String[][] rows )
1:         {
1:             super( null, rows );
1:         }
1:     }
1: 
commit:29007f0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AwareVTITest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * <p>
1:  * Test AwareVTIs. See DERBY-6117.
1:  * </p>
1:  */
1: public class AwareVTITest  extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public AwareVTITest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(AwareVTITest.class);
1:         Test        result = new CleanDatabaseTestSetup( suite );
1: 
1:         return result;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Basic test of AwareVTIs.
1:      * </p>
1:      */
1:     public void test_01_basic() throws Exception
1:     {
1:         Connection conn = getConnection();
1: 
1:         vetBasic( conn, "s1", "f1" );
1:         vetBasic( conn, "s2", "f2" );
1:     }
1:     private void    vetBasic( Connection conn, String schema, String function ) throws Exception
1:     {
1:         goodStatement( conn, "create schema " + schema );
1:         goodStatement
1:             (
1:              conn,
1:              "create function " + schema + "." + function + "() returns table\n" +
1:              "(\n" +
1:              "    schema_name varchar( 20 ),\n" +
1:              "    vti_name varchar( 20 ),\n" +
1:              "    statement_text varchar( 100 )\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AwareVTITest.dummyAwareVTI'\n"
1:              );
1: 
1:         String  query = "select * from table( " + schema + "." + function + "() ) s";
1:         assertResults
1:             (
1:              conn,
1:              query,
1:              new String[][]
1:              {
1:                  { schema.toUpperCase(), function.toUpperCase(), query },
1:              },
1:              false
1:              );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ROUTINES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  DummyAwareVTI   dummyAwareVTI()
1:     {
1:         return new DummyAwareVTI();
1:     }
1: 
1: }
1: 
============================================================================