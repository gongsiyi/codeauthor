1:eac0369: /*
12:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BaseColumnNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.store.access.Qualifier;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * A BaseColumnNode represents a column in a base table.  The parser generates a
1:eac0369:  * BaseColumnNode for each column reference.  A column refercence could be a column in
1:eac0369:  * a base table, a column in a view (which could expand into a complex
1:eac0369:  * expression), or a column in a subquery in the FROM clause.  By the time
1:eac0369:  * we get to code generation, all BaseColumnNodes should stand only for columns
1:eac0369:  * in base tables.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class BaseColumnNode extends ValueNode
3:eac0369: {
1:5b2f5de: 	private String	columnName;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** This is the user-specified table name.  It will be null if the
1:eac0369: 	** user specifies a column without a table name.  
1:eac0369: 	*/
1:5b2f5de: 	private TableName	tableName;
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * Constructor for a referenced column name
1:3bb140c:      * @param columnName The name of the column being referenced
1:3bb140c:      * @param tableName The qualification for the column
1:3bb140c:      * @param dtd Data type descriptor for the column
1:3bb140c:      * @param cm Context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     BaseColumnNode(
1:3bb140c:             String columnName,
1:3bb140c:             TableName tableName,
1:3bb140c:             DataTypeDescriptor dtd,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(cm);
1:3bb140c:         this.columnName = columnName;
1:3bb140c:         this.tableName = tableName;
1:3bb140c:         setType(dtd);
1:3bb140c:     }
1:eac0369: 
1:01217c2: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:01217c2: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:01217c2: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "columnName: " + columnName + "\n" +
1:c9a1206: 				"tableName: " +
1:eac0369: 				( ( tableName != null) ?
1:eac0369: 						tableName.toString() :
1:c9a1206: 						"null") + "\n" +
1:eac0369: 				super.toString();
2:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of this column
1:eac0369: 	 *
1:eac0369: 	 * @return	The name of this column
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getColumnName()
1:eac0369: 	{
1:eac0369: 		return columnName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the user-supplied table name of this column.  This will be null
1:eac0369: 	 * if the user did not supply a name (for example, select a from t).
1:b57ee34: 	 * The method will return B for this example, select b.a from t as b
1:b57ee34: 	 * The method will return T for this example, select t.a from t
1:eac0369: 	 *
1:eac0369: 	 * @return	The user-supplied name of this column.  Null if no user-
1:eac0369: 	 * 		supplied name.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getTableName()
1:eac0369: 	{
1:eac0369: 		return ( ( tableName != null) ? tableName.getTableName() : null );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:b57ee34: 	 * Get the user-supplied schema name for this column's table. This will be null
1:b57ee34: 	 * if the user did not supply a name (for example, select t.a from t).
1:b57ee34: 	 * Another example for null return value (for example, select b.a from t as b).
1:b57ee34: 	 * But for following query select app.t.a from t, this will return APP
1:b57ee34: 	 *
1:b57ee34: 	 * @return	The schema name for this column's table
1:b57ee34: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getSchemaName() throws StandardException
1:b57ee34: 	{
1:b57ee34: 		return ( ( tableName != null) ? tableName.getSchemaName() : null );
1:b57ee34: 	}
1:b57ee34: 
1:b57ee34: 	/**
1:eac0369: 	 * Do the code generation for this node. Should never be called.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 							throws StandardException
1:eac0369: 	{
1:eac0369: 		throw StandardException.newException(SQLState.LANG_UNABLE_TO_GENERATE,
1:eac0369: 			this.nodeHeader());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the variant type for the underlying expression.
1:eac0369: 	 * The variant type can be:
1:eac0369: 	 *		VARIANT				- variant within a scan
1:eac0369: 	 *							  (method calls and non-static field access)
1:eac0369: 	 *		SCAN_INVARIANT		- invariant within a scan
1:eac0369: 	 *							  (column references from outer tables)
1:eac0369: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:eac0369: 	 *							  (constant expressions)
1:eac0369: 	 *
1:eac0369: 	 * @return	The variant type for the underlying expression.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	protected int getOrderableVariantType()
1:eac0369: 	{
1:eac0369: 		return Qualifier.SCAN_INVARIANT;
1:eac0369: 	}
1:01217c2:         
1:a09a583:     /**
1:a09a583:      * {@inheritDoc}
1:a09a583:      */
1:2706d1f:     boolean isEquivalent(ValueNode o)
1:01217c2: 	{
1:2706d1f:         if (isSameNodeKind(o)) {
1:01217c2: 			BaseColumnNode other = (BaseColumnNode)o;
1:348f1e4: 			return other.tableName.equals(tableName)
1:01217c2: 			&& other.columnName.equals(columnName);
1:01217c2: 		} 
1:2706d1f: 
1:01217c2: 		return false;
1:01217c2: 	}
1:69f8afa: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (tableName != null) {
1:69f8afa:             tableName = (TableName) tableName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (tableName != null) {
1:             tableName = (TableName) tableName.accept(v);
1:         }
1:     }
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:348f1e4
/////////////////////////////////////////////////////////////////////////
1: 			return other.tableName.equals(tableName)
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode o)
1:         if (isSameNodeKind(o)) {
1: 
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: class BaseColumnNode extends ValueNode
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Constructor for a referenced column name
1:      * @param columnName The name of the column being referenced
1:      * @param tableName The qualification for the column
1:      * @param dtd Data type descriptor for the column
1:      * @param cm Context manager
1:      * @throws StandardException
1:      */
1:     BaseColumnNode(
1:             String columnName,
1:             TableName tableName,
1:             DataTypeDescriptor dtd,
1:             ContextManager cm) throws StandardException {
1:         super(cm);
1:         this.columnName = columnName;
1:         this.tableName = tableName;
1:         setType(dtd);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getColumnName()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getTableName()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getSchemaName() throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1: 				"tableName: " +
1: 						"null") + "\n" +
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:a09a583
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * {@inheritDoc}
1:      */
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1:         
1:         /**
0:          * @inheritDoc
1:          */
0: 	protected boolean isEquivalent(ValueNode o)
1: 	{
0: 		if (isSameNodeType(o)) 
1: 		{
1: 			BaseColumnNode other = (BaseColumnNode)o;
0: 			return other.tableName.equals(other.tableName) 
1: 			&& other.columnName.equals(columnName);
1: 		} 
1: 		return false;
1: 	}
commit:5b2f5de
/////////////////////////////////////////////////////////////////////////
1: 	private String	columnName;
1: 	private TableName	tableName;
commit:b57ee34
/////////////////////////////////////////////////////////////////////////
1: 	 * The method will return B for this example, select b.a from t as b
1: 	 * The method will return T for this example, select t.a from t
/////////////////////////////////////////////////////////////////////////
1: 	 * Get the user-supplied schema name for this column's table. This will be null
1: 	 * if the user did not supply a name (for example, select t.a from t).
1: 	 * Another example for null return value (for example, select b.a from t as b).
1: 	 * But for following query select app.t.a from t, this will return APP
1: 	 *
1: 	 * @return	The schema name for this column's table
1: 	 */
0: 	public String getSchemaName() throws StandardException
1: 	{
1: 		return ( ( tableName != null) ? tableName.getSchemaName() : null );
1: 	}
1: 
1: 	/**
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BaseColumnNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.sql.Row;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * A BaseColumnNode represents a column in a base table.  The parser generates a
1:  * BaseColumnNode for each column reference.  A column refercence could be a column in
1:  * a base table, a column in a view (which could expand into a complex
1:  * expression), or a column in a subquery in the FROM clause.  By the time
1:  * we get to code generation, all BaseColumnNodes should stand only for columns
1:  * in base tables.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
0: public class BaseColumnNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public String	columnName;
1: 
1: 	/*
1: 	** This is the user-specified table name.  It will be null if the
1: 	** user specifies a column without a table name.  
1: 	*/
0: 	public TableName	tableName;
1: 
1: 	/**
0: 	 * Initializer for when you only have the column name.
1: 	 *
0: 	 * @param columnName	The name of the column being referenced
0: 	 * @param tableName		The qualification for the column
0: 	 * @param dts			DataTypeServices for the column
1: 	 */
1: 
0: 	public void init(
0: 							Object columnName,
0: 							Object tableName,
0: 				   			Object dts)
1: 	{
0: 		this.columnName = (String) columnName;
0: 		this.tableName = (TableName) tableName;
0: 		setType((DataTypeDescriptor) dts);
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "columnName: " + columnName + "\n" +
1: 				( ( tableName != null) ?
1: 						tableName.toString() :
0: 						"tableName: null\n") +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the name of this column
1: 	 *
1: 	 * @return	The name of this column
1: 	 */
1: 
0: 	public String getColumnName()
1: 	{
1: 		return columnName;
1: 	}
1: 
1: 	/**
1: 	 * Get the user-supplied table name of this column.  This will be null
1: 	 * if the user did not supply a name (for example, select a from t).
1: 	 *
1: 	 * @return	The user-supplied name of this column.  Null if no user-
1: 	 * 		supplied name.
1: 	 */
1: 
0: 	public String getTableName()
1: 	{
1: 		return ( ( tableName != null) ? tableName.getTableName() : null );
1: 	}
1: 
1: 	/**
1: 	 * Do the code generation for this node. Should never be called.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 							throws StandardException
1: 	{
1: 		throw StandardException.newException(SQLState.LANG_UNABLE_TO_GENERATE,
1: 			this.nodeHeader());
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *							  (constant expressions)
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 */
1: 	protected int getOrderableVariantType()
1: 	{
1: 		return Qualifier.SCAN_INVARIANT;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
0: 				   			Object dts) throws StandardException
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.sql.Row;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * A BaseColumnNode represents a column in a base table.  The parser generates a
0:  * BaseColumnNode for each column reference.  A column refercence could be a column in
0:  * a base table, a column in a view (which could expand into a complex
0:  * expression), or a column in a subquery in the FROM clause.  By the time
0:  * we get to code generation, all BaseColumnNodes should stand only for columns
0:  * in base tables.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public class BaseColumnNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public String	columnName;
0: 
0: 	/*
0: 	** This is the user-specified table name.  It will be null if the
0: 	** user specifies a column without a table name.  
0: 	*/
0: 	public TableName	tableName;
0: 
0: 	/**
0: 	 * Initializer for when you only have the column name.
0: 	 *
0: 	 * @param columnName	The name of the column being referenced
0: 	 * @param tableName		The qualification for the column
0: 	 * @param dts			DataTypeServices for the column
0: 	 */
0: 
0: 	public void init(
0: 							Object columnName,
0: 							Object tableName,
0: 				   			Object dts)
0: 	{
0: 		this.columnName = (String) columnName;
0: 		this.tableName = (TableName) tableName;
0: 		setType((DataTypeDescriptor) dts);
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "columnName: " + columnName + "\n" +
0: 				( ( tableName != null) ?
0: 						tableName.toString() :
0: 						"tableName: null\n") +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the name of this column
0: 	 *
0: 	 * @return	The name of this column
0: 	 */
0: 
0: 	public String getColumnName()
0: 	{
0: 		return columnName;
0: 	}
0: 
0: 	/**
0: 	 * Get the user-supplied table name of this column.  This will be null
0: 	 * if the user did not supply a name (for example, select a from t).
0: 	 *
0: 	 * @return	The user-supplied name of this column.  Null if no user-
0: 	 * 		supplied name.
0: 	 */
0: 
0: 	public String getTableName()
0: 	{
0: 		return ( ( tableName != null) ? tableName.getTableName() : null );
0: 	}
0: 
0: 	/**
0: 	 * Do the code generation for this node. Should never be called.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 							throws StandardException
0: 	{
0: 		throw StandardException.newException(SQLState.LANG_UNABLE_TO_GENERATE,
0: 			this.nodeHeader());
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *							  (constant expressions)
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 */
0: 	protected int getOrderableVariantType()
0: 	{
0: 		return Qualifier.SCAN_INVARIANT;
0: 	}
0: }
============================================================================