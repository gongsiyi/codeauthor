1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizablePredicate
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * OptimizablePredicate provides services for optimizing predicates in a query.
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface OptimizablePredicate
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Get the map of referenced tables for this OptimizablePredicate.
1:eac0369: 	 *
1:eac0369: 	 * @return JBitSet	Referenced table map.
1:eac0369: 	 */
1:eac0369: 	JBitSet getReferencedMap();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not an OptimizablePredicate contains a subquery.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not an OptimizablePredicate includes a subquery.
1:eac0369: 	 */
1:eac0369: 	boolean hasSubquery();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not an OptimizablePredicate contains a method call.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not an OptimizablePredicate includes a method call.
1:eac0369: 	 */
1:eac0369: 	boolean hasMethodCall();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell the predicate that it is to be used as a column in the start key
1:eac0369: 	 * value for an index scan.
1:eac0369: 	 */
1:eac0369: 	void markStartKey();
1:eac0369: 
1:eac0369: 	/** Is this predicate a start key? */
1:eac0369: 	boolean isStartKey();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell the predicate that it is to be used as a column in the stop key
1:eac0369: 	 * value for an index scan.
1:eac0369: 	 */
1:eac0369: 	void markStopKey();
1:eac0369: 
1:eac0369: 	/** Is this predicate a stop key? */
1:eac0369: 	boolean isStopKey();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell the predicate that it is to be used as a qualifier in an index
1:eac0369: 	 * scan.
1:eac0369: 	 */
1:eac0369: 	void markQualifier();
1:eac0369: 
1:eac0369: 	/** Is this predicate a qualifier? */
1:eac0369: 	boolean isQualifier();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this predicate a comparison with a known constant value?
1:eac0369: 	 *
1:eac0369: 	 * @param optTable	The Optimizable that we want to know whether we
1:eac0369: 	 *					are comparing to a known constant.
1:eac0369: 	 * @param considerParameters	Whether or not to consider parameters with defaults
1:eac0369: 	 *								as known constants.
1:eac0369: 	 */
1:eac0369: 	boolean compareWithKnownConstant(Optimizable optTable, boolean considerParameters);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get an Object representing the known constant value that the given
1:eac0369: 	 * Optimizable is being compared to.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	DataValueDescriptor getCompareValue(Optimizable optTable) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this predicate an equality comparison with a constant expression?
1:eac0369: 	 * (IS NULL is considered to be an = comparison with a constant expression).
1:eac0369: 	 *
1:eac0369: 	 * @param optTable	The Optimizable for which we want to know whether
1:eac0369: 	 *					it is being equality-compared to a constant expression.
1:eac0369: 	 */
1:eac0369: 	boolean equalsComparisonWithConstantExpression(Optimizable optTable);
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Returns if the predicate involves an equal operator on one of the
1:eac0369: 	 * columns specified in the baseColumnPositions.
1:eac0369: 	 *
1:eac0369: 	 * @param 	baseColumnPositions	the column numbers on which the user wants
1:eac0369: 	 * to check if the equality condition exists.
1:eac0369: 	 * @param 	optTable the table for which baseColumnPositions are given.
1:eac0369: 
1:eac0369: 		@return returns the index into baseColumnPositions of the column that has the
1:eac0369: 		equality operator.
1:eac0369: 	 */
1:eac0369: 	int hasEqualOnColumnList(int[] baseColumnPositions,
1:eac0369: 								 Optimizable optTable)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a (crude) estimate of the selectivity of this predicate.
1:eac0369: 	 * This is to be used when no better technique is available for
1:eac0369: 	 * estimating the selectivity - this method's estimate is a hard-
1:eac0369: 	 * wired number based on the type of predicate and the datatype
1:eac0369: 	 * (the selectivity of boolean is always 50%).
1:eac0369: 	 *
1:eac0369: 	 * @param optTable	The Optimizable that this predicate restricts
1:eac0369: 	 */
1:d5bc20f: 	double selectivity(Optimizable optTable)
1:d5bc20f: 	throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the position of the index column that this predicate restricts.
1:eac0369: 	 * NOTE: This assumes that this predicate is part of an
1:eac0369: 	 * OptimizablePredicateList, and that classify() has been called
1:eac0369: 	 * on the OptimizablePredicateList.
1:eac0369: 	 *
1:eac0369: 	 * @return The index position that this predicate restricts (zero-based)
1:eac0369: 	 */
1:eac0369: 	int getIndexPosition();
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 	double selectivity(Optimizable optTable)
1: 	throws StandardException;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizablePredicate
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.util.JBitSet;
1: 
1: /**
1:  * OptimizablePredicate provides services for optimizing predicates in a query.
1:  */
1: 
1: public interface OptimizablePredicate
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Get the map of referenced tables for this OptimizablePredicate.
1: 	 *
1: 	 * @return JBitSet	Referenced table map.
1: 	 */
1: 	JBitSet getReferencedMap();
1: 
1: 	/**
1: 	 * Return whether or not an OptimizablePredicate contains a subquery.
1: 	 *
1: 	 * @return boolean	Whether or not an OptimizablePredicate includes a subquery.
1: 	 */
1: 	boolean hasSubquery();
1: 
1: 	/**
1: 	 * Return whether or not an OptimizablePredicate contains a method call.
1: 	 *
1: 	 * @return boolean	Whether or not an OptimizablePredicate includes a method call.
1: 	 */
1: 	boolean hasMethodCall();
1: 
1: 	/**
1: 	 * Tell the predicate that it is to be used as a column in the start key
1: 	 * value for an index scan.
1: 	 */
1: 	void markStartKey();
1: 
1: 	/** Is this predicate a start key? */
1: 	boolean isStartKey();
1: 
1: 	/**
1: 	 * Tell the predicate that it is to be used as a column in the stop key
1: 	 * value for an index scan.
1: 	 */
1: 	void markStopKey();
1: 
1: 	/** Is this predicate a stop key? */
1: 	boolean isStopKey();
1: 
1: 	/**
1: 	 * Tell the predicate that it is to be used as a qualifier in an index
1: 	 * scan.
1: 	 */
1: 	void markQualifier();
1: 
1: 	/** Is this predicate a qualifier? */
1: 	boolean isQualifier();
1: 
1: 	/**
1: 	 * Is this predicate a comparison with a known constant value?
1: 	 *
1: 	 * @param optTable	The Optimizable that we want to know whether we
1: 	 *					are comparing to a known constant.
1: 	 * @param considerParameters	Whether or not to consider parameters with defaults
1: 	 *								as known constants.
1: 	 */
1: 	boolean compareWithKnownConstant(Optimizable optTable, boolean considerParameters);
1: 
1: 	/**
1: 	 * Get an Object representing the known constant value that the given
1: 	 * Optimizable is being compared to.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	DataValueDescriptor getCompareValue(Optimizable optTable) 
1:         throws StandardException;
1: 
1: 	/**
1: 	 * Is this predicate an equality comparison with a constant expression?
1: 	 * (IS NULL is considered to be an = comparison with a constant expression).
1: 	 *
1: 	 * @param optTable	The Optimizable for which we want to know whether
1: 	 *					it is being equality-compared to a constant expression.
1: 	 */
1: 	boolean equalsComparisonWithConstantExpression(Optimizable optTable);
1: 
1: 	
1: 	/**
1: 	 * Returns if the predicate involves an equal operator on one of the
1: 	 * columns specified in the baseColumnPositions.
1: 	 *
1: 	 * @param 	baseColumnPositions	the column numbers on which the user wants
1: 	 * to check if the equality condition exists.
1: 	 * @param 	optTable the table for which baseColumnPositions are given.
1: 
1: 		@return returns the index into baseColumnPositions of the column that has the
1: 		equality operator.
1: 	 */
1: 	int hasEqualOnColumnList(int[] baseColumnPositions,
1: 								 Optimizable optTable)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * Get a (crude) estimate of the selectivity of this predicate.
1: 	 * This is to be used when no better technique is available for
1: 	 * estimating the selectivity - this method's estimate is a hard-
1: 	 * wired number based on the type of predicate and the datatype
1: 	 * (the selectivity of boolean is always 50%).
1: 	 *
1: 	 * @param optTable	The Optimizable that this predicate restricts
1: 	 */
0: 	double selectivity(Optimizable optTable);
1: 
1: 	/**
1: 	 * Get the position of the index column that this predicate restricts.
1: 	 * NOTE: This assumes that this predicate is part of an
1: 	 * OptimizablePredicateList, and that classify() has been called
1: 	 * on the OptimizablePredicateList.
1: 	 *
1: 	 * @return The index position that this predicate restricts (zero-based)
1: 	 */
1: 	int getIndexPosition();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: /**
0:  * OptimizablePredicate provides services for optimizing predicates in a query.
0:  */
0: 
0: public interface OptimizablePredicate
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Get the map of referenced tables for this OptimizablePredicate.
0: 	 *
0: 	 * @return JBitSet	Referenced table map.
0: 	 */
0: 	JBitSet getReferencedMap();
0: 
0: 	/**
0: 	 * Return whether or not an OptimizablePredicate contains a subquery.
0: 	 *
0: 	 * @return boolean	Whether or not an OptimizablePredicate includes a subquery.
0: 	 */
0: 	boolean hasSubquery();
0: 
0: 	/**
0: 	 * Return whether or not an OptimizablePredicate contains a method call.
0: 	 *
0: 	 * @return boolean	Whether or not an OptimizablePredicate includes a method call.
0: 	 */
0: 	boolean hasMethodCall();
0: 
0: 	/**
0: 	 * Tell the predicate that it is to be used as a column in the start key
0: 	 * value for an index scan.
0: 	 */
0: 	void markStartKey();
0: 
0: 	/** Is this predicate a start key? */
0: 	boolean isStartKey();
0: 
0: 	/**
0: 	 * Tell the predicate that it is to be used as a column in the stop key
0: 	 * value for an index scan.
0: 	 */
0: 	void markStopKey();
0: 
0: 	/** Is this predicate a stop key? */
0: 	boolean isStopKey();
0: 
0: 	/**
0: 	 * Tell the predicate that it is to be used as a qualifier in an index
0: 	 * scan.
0: 	 */
0: 	void markQualifier();
0: 
0: 	/** Is this predicate a qualifier? */
0: 	boolean isQualifier();
0: 
0: 	/**
0: 	 * Is this predicate a comparison with a known constant value?
0: 	 *
0: 	 * @param optTable	The Optimizable that we want to know whether we
0: 	 *					are comparing to a known constant.
0: 	 * @param considerParameters	Whether or not to consider parameters with defaults
0: 	 *								as known constants.
0: 	 */
0: 	boolean compareWithKnownConstant(Optimizable optTable, boolean considerParameters);
0: 
0: 	/**
0: 	 * Get an Object representing the known constant value that the given
0: 	 * Optimizable is being compared to.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	DataValueDescriptor getCompareValue(Optimizable optTable) 
0:         throws StandardException;
0: 
0: 	/**
0: 	 * Is this predicate an equality comparison with a constant expression?
0: 	 * (IS NULL is considered to be an = comparison with a constant expression).
0: 	 *
0: 	 * @param optTable	The Optimizable for which we want to know whether
0: 	 *					it is being equality-compared to a constant expression.
0: 	 */
0: 	boolean equalsComparisonWithConstantExpression(Optimizable optTable);
0: 
0: 	
0: 	/**
0: 	 * Returns if the predicate involves an equal operator on one of the
0: 	 * columns specified in the baseColumnPositions.
0: 	 *
0: 	 * @param 	baseColumnPositions	the column numbers on which the user wants
0: 	 * to check if the equality condition exists.
0: 	 * @param 	optTable the table for which baseColumnPositions are given.
0: 
0: 		@return returns the index into baseColumnPositions of the column that has the
0: 		equality operator.
0: 	 */
0: 	int hasEqualOnColumnList(int[] baseColumnPositions,
0: 								 Optimizable optTable)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * Get a (crude) estimate of the selectivity of this predicate.
0: 	 * This is to be used when no better technique is available for
0: 	 * estimating the selectivity - this method's estimate is a hard-
0: 	 * wired number based on the type of predicate and the datatype
0: 	 * (the selectivity of boolean is always 50%).
0: 	 *
0: 	 * @param optTable	The Optimizable that this predicate restricts
0: 	 */
0: 	double selectivity(Optimizable optTable);
0: 
0: 	/**
0: 	 * Get the position of the index column that this predicate restricts.
0: 	 * NOTE: This assumes that this predicate is part of an
0: 	 * OptimizablePredicateList, and that classify() has been called
0: 	 * on the OptimizablePredicateList.
0: 	 *
0: 	 * @return The index position that this predicate restricts (zero-based)
0: 	 */
0: 	int getIndexPosition();
0: }
============================================================================