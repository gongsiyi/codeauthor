1:a2a0ff2: /*
1:a2a0ff2: 
1:96e3f0c:    Derby - Class org.apache.derby.iapi.types.HarmonySerialClob
1:a2a0ff2: 
1:a2a0ff2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a2a0ff2:    contributor license agreements.  See the NOTICE file distributed with
1:a2a0ff2:    this work for additional information regarding copyright ownership.
1:a2a0ff2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a2a0ff2:    (the "License"); you may not use this file except in compliance with
1:a2a0ff2:    the License.  You may obtain a copy of the License at
1:a2a0ff2: 
1:a2a0ff2:       http://www.apache.org/licenses/LICENSE-2.0
1:a2a0ff2: 
1:a2a0ff2:    Unless required by applicable law or agreed to in writing, software
1:a2a0ff2:    distributed under the License is distributed on an "AS IS" BASIS,
1:a2a0ff2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a2a0ff2:    See the License for the specific language governing permissions and
1:a2a0ff2:    limitations under the License.
1:a2a0ff2: 
1:a2a0ff2:  */
1:a2a0ff2: 
1:a2a0ff2: package org.apache.derby.iapi.types;
1:a2a0ff2: 
1:a2a0ff2: import java.io.CharArrayReader;
1:a2a0ff2: import java.io.IOException;
1:a2a0ff2: import java.io.InputStream;
1:a2a0ff2: import java.io.OutputStream;
1:a2a0ff2: import java.io.Reader;
1:a2a0ff2: import java.io.Serializable;
1:a2a0ff2: import java.io.Writer;
1:a2a0ff2: import java.sql.Clob;
1:a2a0ff2: import java.sql.SQLException;
1:a2a0ff2: 
1:a2a0ff2: import org.apache.derby.iapi.reference.SQLState;
1:a2a0ff2: import org.apache.derby.iapi.error.StandardException;
1:a2a0ff2: 
1:a2a0ff2: /**
1:a2a0ff2:  * Copied from the Harmony project's implementation of javax.sql.rowset.serial.SerialClob
1:a2a0ff2:  * at subversion revision 946981.
1:a2a0ff2:  */
1:a2a0ff2: public class HarmonySerialClob implements Clob, Serializable, Cloneable {
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private static final long serialVersionUID = -1662519690087375313L;
1:a2a0ff2: 
1:a2a0ff2:     private char[] buf;
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private Clob clob;
1:a2a0ff2: 
1:a2a0ff2:     private long len;
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private long origLen;
1:a2a0ff2: 
1:96e3f0c:     public HarmonySerialClob( String raw ) { this( raw.toCharArray() ); }
1:96e3f0c: 
1:a2a0ff2:     public HarmonySerialClob(char[] ch) {
1:a2a0ff2:         buf = new char[ch.length];
1:a2a0ff2:         origLen = ch.length;
1:a2a0ff2:         len = origLen;
1:a2a0ff2:         System.arraycopy(ch, 0, buf, 0, (int) len);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public HarmonySerialClob(Clob clob) throws SQLException {
1:a2a0ff2:         Reader characterStream;
1:a2a0ff2: 
1:a2a0ff2:         if (clob == null) { throw new IllegalArgumentException(); }
1:a2a0ff2:         if ((characterStream = clob.getCharacterStream()) == null
1:a2a0ff2:                 && clob.getAsciiStream() == null) { throw new IllegalArgumentException(); }
1:a2a0ff2: 
1:a2a0ff2:         this.clob = clob;
1:a2a0ff2:         origLen = clob.length();
1:a2a0ff2:         len = origLen;
1:a2a0ff2:         buf = new char[(int) len];
1:a2a0ff2:         try {
1:a2a0ff2:             characterStream.read(buf);
1:a2a0ff2:         } catch (IOException e) {
1:a2a0ff2:             SQLException se = new SQLException("SerialClob: "
1:a2a0ff2:                     + e.getMessage());
1:a2a0ff2: 
1:a2a0ff2:             se.initCause(e);
1:a2a0ff2:             throw se;
1:a2a0ff2:         }
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public long length() throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         return len;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public InputStream getAsciiStream() throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (clob == null) { throw new IllegalStateException(); }
1:a2a0ff2:         return clob.getAsciiStream();
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public Reader getCharacterStream() throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         return new CharArrayReader(buf);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public String getSubString(long pos, int length) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (length < 0)
1:a2a0ff2:         {
1:ce40a31:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:a2a0ff2:         }
1:a2a0ff2:         if (pos < 1 || pos > len || pos + length > len + 1)
1:a2a0ff2:         {
1:ce40a31:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
1:a2a0ff2:         }
1:a2a0ff2:         try {
1:a2a0ff2:             return new String(buf, (int) (pos - 1), length);
1:a2a0ff2:         } catch (StringIndexOutOfBoundsException e) {
1:a2a0ff2:             throw new SQLException();
1:a2a0ff2:         }
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public long position(Clob searchClob, long start) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         String searchString = searchClob.getSubString(1, (int) searchClob
1:a2a0ff2:                 .length());
1:a2a0ff2:         return position(searchString, start);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public long position(String searchString, long start)
1:a2a0ff2:             throws SQLException, SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (start < 1 || len - (start - 1) < searchString.length()) {
1:a2a0ff2:             return -1;
1:a2a0ff2:         }
1:a2a0ff2:         char[] pattern = searchString.toCharArray();
1:a2a0ff2:         for (int i = (int) start - 1; i < len; i++) {
1:a2a0ff2:             if (match(buf, i, pattern)) {
1:a2a0ff2:                 return i + 1;
1:a2a0ff2:             }
1:a2a0ff2:         }
1:a2a0ff2:         return -1;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /*
1:a2a0ff2:      * Returns true if the chars array contains exactly the same elements from
1:a2a0ff2:      * start position to start + pattern.length as pattern. Otherwise returns
1:a2a0ff2:      * false.
1:a2a0ff2:      */
1:a2a0ff2:     private boolean match(char[] chars, int start, char[] pattern) {
1:a2a0ff2:         for (int i = 0; i < pattern.length;) {
1:a2a0ff2:             if (chars[start++] != pattern[i++]) {
1:a2a0ff2:                 return false;
1:a2a0ff2:             }
1:a2a0ff2:         }
1:a2a0ff2:         return true;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public OutputStream setAsciiStream(long pos) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (clob == null) { throw new IllegalStateException(); }
1:a2a0ff2:         OutputStream os = clob.setAsciiStream(pos);
1:a2a0ff2:         if (os == null) { throw new IllegalStateException(); }
1:a2a0ff2:         return os;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public Writer setCharacterStream(long pos) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (clob == null) { throw new IllegalStateException(); }
1:a2a0ff2:         Writer writer = clob.setCharacterStream(pos);
1:a2a0ff2:         if (writer == null) { throw new IllegalStateException(); }
1:a2a0ff2:         return writer;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public int setString(long pos, String str) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         return setString(pos, str, 0, str.length());
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public int setString(long pos, String str, int offset, int length)
1:a2a0ff2:             throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (pos < 1)
1:a2a0ff2:         {
1:ce40a31:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
1:a2a0ff2:         }
1:a2a0ff2:         if (length < 0)
1:a2a0ff2:         {
1:a2a0ff2:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, null );
1:a2a0ff2:         }
1:a2a0ff2:         if (pos > (len - length + 1))
1:a2a0ff2:         {
1:a2a0ff2:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_POSITION_TOO_LARGE, null );
1:a2a0ff2:         }
1:a2a0ff2:         if (offset < 0 || offset > (str.length() - length))
1:a2a0ff2:         {
1:a2a0ff2:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_INVALID_OFFSET, null );
1:a2a0ff2:         }
1:a2a0ff2:         if (length > len + offset)
1:a2a0ff2:         {
1:a2a0ff2:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_INVALID_OFFSET, null );
1:a2a0ff2:         }
1:a2a0ff2:         str.getChars(offset, offset + length, buf, (int) pos - 1);
1:a2a0ff2:         return length;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public void truncate(long length) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         if (length < 0)
1:a2a0ff2:         {
1:ce40a31:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:a2a0ff2:         }
1:a2a0ff2:         if (length > len)
1:a2a0ff2:         {
1:ce40a31:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_LENGTH_TOO_LONG, new Object[] {length} );
1:a2a0ff2:         }
1:a2a0ff2:         char[] truncatedBuffer = new char[(int) length];
1:a2a0ff2:         System.arraycopy(buf, 0, truncatedBuffer, 0, (int) length);
1:a2a0ff2:         buf = truncatedBuffer;
1:a2a0ff2:         len = length;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public void free() throws SQLException {
1:a2a0ff2:         if (this.len != -1) {
1:a2a0ff2:             this.len = -1;
1:a2a0ff2:             this.clob = null;
1:a2a0ff2:             this.buf = null;
1:a2a0ff2:         }
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public Reader getCharacterStream(long pos, long length) throws SQLException {
1:a2a0ff2:         checkValidation();
1:a2a0ff2:         return new CharArrayReader(buf, (int) pos, (int) length);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     private void checkValidation() throws SQLException {
1:a2a0ff2:         if (len == -1)
1:a2a0ff2:         {
1:a2a0ff2:             throw HarmonySerialBlob.makeSQLException( SQLState.LOB_OBJECT_INVALID, null );
1:a2a0ff2:         }
1:a2a0ff2:     }
1:a2a0ff2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
/////////////////////////////////////////////////////////////////////////
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
/////////////////////////////////////////////////////////////////////////
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_LENGTH_TOO_LONG, new Object[] {length} );
commit:96e3f0c
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.HarmonySerialClob
/////////////////////////////////////////////////////////////////////////
1:     public HarmonySerialClob( String raw ) { this( raw.toCharArray() ); }
1: 
commit:a2a0ff2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.iapi.types.SQLClob
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import java.io.CharArrayReader;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.io.Reader;
1: import java.io.Serializable;
1: import java.io.Writer;
1: import java.sql.Clob;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Copied from the Harmony project's implementation of javax.sql.rowset.serial.SerialClob
1:  * at subversion revision 946981.
1:  */
1: public class HarmonySerialClob implements Clob, Serializable, Cloneable {
1: 
1:     // required by serialized form
1:     private static final long serialVersionUID = -1662519690087375313L;
1: 
1:     private char[] buf;
1: 
1:     // required by serialized form
1:     private Clob clob;
1: 
1:     private long len;
1: 
1:     // required by serialized form
1:     private long origLen;
1: 
1:     public HarmonySerialClob(char[] ch) {
1:         buf = new char[ch.length];
1:         origLen = ch.length;
1:         len = origLen;
1:         System.arraycopy(ch, 0, buf, 0, (int) len);
1:     }
1: 
1:     public HarmonySerialClob(Clob clob) throws SQLException {
1:         Reader characterStream;
1: 
1:         if (clob == null) { throw new IllegalArgumentException(); }
1:         if ((characterStream = clob.getCharacterStream()) == null
1:                 && clob.getAsciiStream() == null) { throw new IllegalArgumentException(); }
1: 
1:         this.clob = clob;
1:         origLen = clob.length();
1:         len = origLen;
1:         buf = new char[(int) len];
1:         try {
1:             characterStream.read(buf);
1:         } catch (IOException e) {
1:             SQLException se = new SQLException("SerialClob: "
1:                     + e.getMessage());
1: 
1:             se.initCause(e);
1:             throw se;
1:         }
1:     }
1: 
1:     public long length() throws SQLException {
1:         checkValidation();
1:         return len;
1:     }
1: 
1:     public InputStream getAsciiStream() throws SQLException {
1:         checkValidation();
1:         if (clob == null) { throw new IllegalStateException(); }
1:         return clob.getAsciiStream();
1:     }
1: 
1:     public Reader getCharacterStream() throws SQLException {
1:         checkValidation();
1:         return new CharArrayReader(buf);
1:     }
1: 
1:     public String getSubString(long pos, int length) throws SQLException {
1:         checkValidation();
1:         if (length < 0)
1:         {
0:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {new Integer(length)} );
1:         }
1:         if (pos < 1 || pos > len || pos + length > len + 1)
1:         {
0:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {new Long(pos)} );
1:         }
1:         try {
1:             return new String(buf, (int) (pos - 1), length);
1:         } catch (StringIndexOutOfBoundsException e) {
1:             throw new SQLException();
1:         }
1:     }
1: 
1:     public long position(Clob searchClob, long start) throws SQLException {
1:         checkValidation();
1:         String searchString = searchClob.getSubString(1, (int) searchClob
1:                 .length());
1:         return position(searchString, start);
1:     }
1: 
1:     public long position(String searchString, long start)
1:             throws SQLException, SQLException {
1:         checkValidation();
1:         if (start < 1 || len - (start - 1) < searchString.length()) {
1:             return -1;
1:         }
1:         char[] pattern = searchString.toCharArray();
1:         for (int i = (int) start - 1; i < len; i++) {
1:             if (match(buf, i, pattern)) {
1:                 return i + 1;
1:             }
1:         }
1:         return -1;
1:     }
1: 
1:     /*
1:      * Returns true if the chars array contains exactly the same elements from
1:      * start position to start + pattern.length as pattern. Otherwise returns
1:      * false.
1:      */
1:     private boolean match(char[] chars, int start, char[] pattern) {
1:         for (int i = 0; i < pattern.length;) {
1:             if (chars[start++] != pattern[i++]) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     public OutputStream setAsciiStream(long pos) throws SQLException {
1:         checkValidation();
1:         if (clob == null) { throw new IllegalStateException(); }
1:         OutputStream os = clob.setAsciiStream(pos);
1:         if (os == null) { throw new IllegalStateException(); }
1:         return os;
1:     }
1: 
1:     public Writer setCharacterStream(long pos) throws SQLException {
1:         checkValidation();
1:         if (clob == null) { throw new IllegalStateException(); }
1:         Writer writer = clob.setCharacterStream(pos);
1:         if (writer == null) { throw new IllegalStateException(); }
1:         return writer;
1:     }
1: 
1:     public int setString(long pos, String str) throws SQLException {
1:         checkValidation();
1:         return setString(pos, str, 0, str.length());
1:     }
1: 
1:     public int setString(long pos, String str, int offset, int length)
1:             throws SQLException {
1:         checkValidation();
1:         if (pos < 1)
1:         {
0:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {new Long(pos)} );
1:         }
1:         if (length < 0)
1:         {
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, null );
1:         }
1:         if (pos > (len - length + 1))
1:         {
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_POSITION_TOO_LARGE, null );
1:         }
1:         if (offset < 0 || offset > (str.length() - length))
1:         {
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_INVALID_OFFSET, null );
1:         }
1:         if (length > len + offset)
1:         {
1:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_INVALID_OFFSET, null );
1:         }
1:         str.getChars(offset, offset + length, buf, (int) pos - 1);
1:         return length;
1:     }
1: 
1:     public void truncate(long length) throws SQLException {
1:         checkValidation();
1:         if (length < 0)
1:         {
0:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {new Long(length)} );
1:         }
1:         if (length > len)
1:         {
0:             throw HarmonySerialBlob.makeSQLException( SQLState.BLOB_LENGTH_TOO_LONG, new Object[] {new Long(length)} );
1:         }
1:         char[] truncatedBuffer = new char[(int) length];
1:         System.arraycopy(buf, 0, truncatedBuffer, 0, (int) length);
1:         buf = truncatedBuffer;
1:         len = length;
1:     }
1: 
1:     public void free() throws SQLException {
1:         if (this.len != -1) {
1:             this.len = -1;
1:             this.clob = null;
1:             this.buf = null;
1:         }
1:     }
1: 
1:     public Reader getCharacterStream(long pos, long length) throws SQLException {
1:         checkValidation();
1:         return new CharArrayReader(buf, (int) pos, (int) length);
1:     }
1: 
1:     private void checkValidation() throws SQLException {
1:         if (len == -1)
1:         {
1:             throw HarmonySerialBlob.makeSQLException( SQLState.LOB_OBJECT_INVALID, null );
1:         }
1:     }
1: }
============================================================================