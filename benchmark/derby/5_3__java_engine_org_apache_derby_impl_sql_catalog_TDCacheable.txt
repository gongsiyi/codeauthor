1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.TDCacheable
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:eac0369: import org.apache.derby.iapi.services.cache.CacheManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class implements a Cacheable for a DataDictionary cache of
1:eac0369:  * table descriptors.  It is an abstract class - there is more than
1:eac0369:  * one cache of table descriptors per data dictionary, and this class
1:eac0369:  * provides the implementation that's common to all of them.  The lookup
1:eac0369:  * key for the cache (the "identity" of the cache item) is provided by
1:eac0369:  * the subclass.
1:eac0369:  *
1:eac0369:  * Another design alternative was to make the table descriptors themselves
1:eac0369:  * the cacheable objects.  This was rejected because: we would have only
1:eac0369:  * one way of caching table descriptors, and we need at least two (by UUID
1:eac0369:  * and by name); the contents of a table descriptor would have to be
1:eac0369:  * split out into a separate class, so it could be used as the createParameter
1:eac0369:  * to the createIdentity() method; the releasing of the Cacheable would
1:eac0369:  * have to be done when at the end of compilation by traversing the tree -
1:eac0369:  * by creating a separate Cacheable object, we can release the object within
1:eac0369:  * the getTableDescriptor() method after getting the table descriptor out
1:eac0369:  * of it.
1:eac0369:  */
1:eac0369: abstract class TDCacheable implements Cacheable
1:eac0369: {
1:eac0369: 	protected TableDescriptor	td;
1:eac0369: 	protected final DataDictionaryImpl	dd;
1:eac0369: 
1:eac0369: 	TDCacheable(DataDictionaryImpl dd) {
1:eac0369: 		this.dd = dd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clean */
1:eac0369: 	public void clean(boolean forRemove)
1:eac0369: 	{
1:eac0369: 		return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#isDirty */
1:eac0369: 	public boolean isDirty()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the table descriptor that is associated with this Cacheable
1:eac0369: 	 */
1:eac0369: 	public TableDescriptor getTableDescriptor()
1:eac0369: 	{
1:eac0369: 		return td;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Check the consistency of the table descriptor held by this TDCacheable
1:eac0369: 	 * versus an uncached table descriptor.
1:eac0369: 	 *
1:eac0369: 	 * @param uncachedTD	The uncached descriptor to compare to
1:eac0369: 	 * @param identity		The identity of the table descriptor
1:eac0369: 	 * @param reportInconsistent	A HeaderPrintWriter to send complaints to
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the descriptors are the same, false if they're different
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected boolean checkConsistency(TableDescriptor uncachedTD,
1:eac0369: 										Object identity,
1:eac0369: 										HeaderPrintWriter reportInconsistent)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean	retval = true;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (uncachedTD == null)
1:eac0369: 			{
1:eac0369: 				reportInconsistent.println(
1:eac0369: 					"Inconsistent NameTDCacheable: identity = " + identity +
1:eac0369: 					", uncached table descriptor not found.");
1:eac0369: 				retval = false;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				if (
1:eac0369: 					(uncachedTD.getHeapConglomerateId() !=
1:eac0369: 										td.getHeapConglomerateId()) ||
1:eac0369: 					( ! uncachedTD.getUUID().equals(td.getUUID())) ||
1:eac0369: 					( ! uncachedTD.getSchemaName().equals(td.getSchemaName()))||
1:eac0369: 					( ! uncachedTD.getName().equals(td.getName())) ||
1:eac0369: 					( uncachedTD.getTableType() != td.getTableType())
1:eac0369: 			   	)
1:eac0369: 				{
1:eac0369: 					reportInconsistent.println(
1:eac0369: 						"Inconsistent NameTDCacheable: identity = " + identity +
1:eac0369: 						", cached TD = " +
1:eac0369: 						td +
1:eac0369: 						", uncached TD = " +
1:eac0369: 						uncachedTD);
1:eac0369: 
1:eac0369: 					retval = false;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.TDCacheable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: /**
1:  * This class implements a Cacheable for a DataDictionary cache of
1:  * table descriptors.  It is an abstract class - there is more than
1:  * one cache of table descriptors per data dictionary, and this class
1:  * provides the implementation that's common to all of them.  The lookup
1:  * key for the cache (the "identity" of the cache item) is provided by
1:  * the subclass.
1:  *
1:  * Another design alternative was to make the table descriptors themselves
1:  * the cacheable objects.  This was rejected because: we would have only
1:  * one way of caching table descriptors, and we need at least two (by UUID
1:  * and by name); the contents of a table descriptor would have to be
1:  * split out into a separate class, so it could be used as the createParameter
1:  * to the createIdentity() method; the releasing of the Cacheable would
1:  * have to be done when at the end of compilation by traversing the tree -
1:  * by creating a separate Cacheable object, we can release the object within
1:  * the getTableDescriptor() method after getting the table descriptor out
1:  * of it.
1:  */
1: abstract class TDCacheable implements Cacheable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	protected TableDescriptor	td;
1: 	protected final DataDictionaryImpl	dd;
1: 
1: 	TDCacheable(DataDictionaryImpl dd) {
1: 		this.dd = dd;
1: 	}
1: 
1: 	/* Cacheable interface */
1: 
1: 	/** @see Cacheable#clean */
1: 	public void clean(boolean forRemove)
1: 	{
1: 		return;
1: 	}
1: 
1: 	/** @see Cacheable#isDirty */
1: 	public boolean isDirty()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Get the table descriptor that is associated with this Cacheable
1: 	 */
1: 	public TableDescriptor getTableDescriptor()
1: 	{
1: 		return td;
1: 	}
1: 
1: 	/**
1: 	 * Check the consistency of the table descriptor held by this TDCacheable
1: 	 * versus an uncached table descriptor.
1: 	 *
1: 	 * @param uncachedTD	The uncached descriptor to compare to
1: 	 * @param identity		The identity of the table descriptor
1: 	 * @param reportInconsistent	A HeaderPrintWriter to send complaints to
1: 	 *
1: 	 * @return	true if the descriptors are the same, false if they're different
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	protected boolean checkConsistency(TableDescriptor uncachedTD,
1: 										Object identity,
1: 										HeaderPrintWriter reportInconsistent)
1: 			throws StandardException
1: 	{
1: 		boolean	retval = true;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (uncachedTD == null)
1: 			{
1: 				reportInconsistent.println(
1: 					"Inconsistent NameTDCacheable: identity = " + identity +
1: 					", uncached table descriptor not found.");
1: 				retval = false;
1: 			}
1: 			else
1: 			{
1: 				if (
1: 					(uncachedTD.getHeapConglomerateId() !=
1: 										td.getHeapConglomerateId()) ||
1: 					( ! uncachedTD.getUUID().equals(td.getUUID())) ||
1: 					( ! uncachedTD.getSchemaName().equals(td.getSchemaName()))||
1: 					( ! uncachedTD.getName().equals(td.getName())) ||
1: 					( uncachedTD.getTableType() != td.getTableType())
1: 			   	)
1: 				{
1: 					reportInconsistent.println(
1: 						"Inconsistent NameTDCacheable: identity = " + identity +
1: 						", cached TD = " +
1: 						td +
1: 						", uncached TD = " +
1: 						uncachedTD);
1: 
1: 					retval = false;
1: 				}
1: 			}
1: 		}
1: 
1: 		return retval;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: /**
0:  * This class implements a Cacheable for a DataDictionary cache of
0:  * table descriptors.  It is an abstract class - there is more than
0:  * one cache of table descriptors per data dictionary, and this class
0:  * provides the implementation that's common to all of them.  The lookup
0:  * key for the cache (the "identity" of the cache item) is provided by
0:  * the subclass.
0:  *
0:  * Another design alternative was to make the table descriptors themselves
0:  * the cacheable objects.  This was rejected because: we would have only
0:  * one way of caching table descriptors, and we need at least two (by UUID
0:  * and by name); the contents of a table descriptor would have to be
0:  * split out into a separate class, so it could be used as the createParameter
0:  * to the createIdentity() method; the releasing of the Cacheable would
0:  * have to be done when at the end of compilation by traversing the tree -
0:  * by creating a separate Cacheable object, we can release the object within
0:  * the getTableDescriptor() method after getting the table descriptor out
0:  * of it.
0:  */
0: abstract class TDCacheable implements Cacheable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected TableDescriptor	td;
0: 	protected final DataDictionaryImpl	dd;
0: 
0: 	TDCacheable(DataDictionaryImpl dd) {
0: 		this.dd = dd;
0: 	}
0: 
0: 	/* Cacheable interface */
0: 
0: 	/** @see Cacheable#clean */
0: 	public void clean(boolean forRemove)
0: 	{
0: 		return;
0: 	}
0: 
0: 	/** @see Cacheable#isDirty */
0: 	public boolean isDirty()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Get the table descriptor that is associated with this Cacheable
0: 	 */
0: 	public TableDescriptor getTableDescriptor()
0: 	{
0: 		return td;
0: 	}
0: 
0: 	/**
0: 	 * Check the consistency of the table descriptor held by this TDCacheable
0: 	 * versus an uncached table descriptor.
0: 	 *
0: 	 * @param uncachedTD	The uncached descriptor to compare to
0: 	 * @param identity		The identity of the table descriptor
0: 	 * @param reportInconsistent	A HeaderPrintWriter to send complaints to
0: 	 *
0: 	 * @return	true if the descriptors are the same, false if they're different
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	protected boolean checkConsistency(TableDescriptor uncachedTD,
0: 										Object identity,
0: 										HeaderPrintWriter reportInconsistent)
0: 			throws StandardException
0: 	{
0: 		boolean	retval = true;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (uncachedTD == null)
0: 			{
0: 				reportInconsistent.println(
0: 					"Inconsistent NameTDCacheable: identity = " + identity +
0: 					", uncached table descriptor not found.");
0: 				retval = false;
0: 			}
0: 			else
0: 			{
0: 				if (
0: 					(uncachedTD.getHeapConglomerateId() !=
0: 										td.getHeapConglomerateId()) ||
0: 					( ! uncachedTD.getUUID().equals(td.getUUID())) ||
0: 					( ! uncachedTD.getSchemaName().equals(td.getSchemaName()))||
0: 					( ! uncachedTD.getName().equals(td.getName())) ||
0: 					( uncachedTD.getTableType() != td.getTableType())
0: 			   	)
0: 				{
0: 					reportInconsistent.println(
0: 						"Inconsistent NameTDCacheable: identity = " + identity +
0: 						", cached TD = " +
0: 						td +
0: 						", uncached TD = " +
0: 						uncachedTD);
0: 
0: 					retval = false;
0: 				}
0: 			}
0: 		}
0: 
0: 		return retval;
0: 	}
0: }
============================================================================