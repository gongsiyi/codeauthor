1:3bfb5f0: /*
7:3bfb5f0:  
1:3bfb5f0:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest
1:3bfb5f0:  
1:6e3dbab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:    contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:    this work for additional information regarding copyright ownership.
1:6e3dbab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:    (the "License"); you may not use this file except in compliance with
1:6e3dbab:    the License.  You may obtain a copy of the License at
1:3bfb5f0:  
1:3bfb5f0:       http://www.apache.org/licenses/LICENSE-2.0
1:3bfb5f0:  
1:3bfb5f0:    Unless required by applicable law or agreed to in writing, software
1:3bfb5f0:    distributed under the License is distributed on an "AS IS" BASIS,
1:3bfb5f0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bfb5f0:    See the License for the specific language governing permissions and
1:3bfb5f0:    limitations under the License.
1:3bfb5f0:  
3:3bfb5f0:  */
1:3bfb5f0: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:3bfb5f0: 
1:3bfb5f0: import junit.framework.*;
1:3bfb5f0: 
1:3bfb5f0: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:ec5ae26: import org.apache.derbyTesting.junit.TestConfiguration;
1:3bfb5f0: 
1:3bfb5f0: import java.sql.*;
1:3bfb5f0: import javax.sql.*;
1:3bfb5f0: 
1:3bfb5f0: 
1:3bfb5f0: public class ResultSetMetaDataTest extends BaseJDBCTestCase {
1:3bfb5f0:     //classes that will be used for the test
1:13e9e78: 
1:3bfb5f0:     private PreparedStatement ps   =null;
1:3bfb5f0:     private ResultSet         rs   =null;
1:3bfb5f0:     //The ResultSetMetaData object that will be used throughout the test
1:3bfb5f0:     private ResultSetMetaData rsmd =null;
1:3bfb5f0:     
3:3bfb5f0:     /**
5:3bfb5f0:      *
1:3bfb5f0:      * Create a test with the given name.
1:3bfb5f0:      *
1:3bfb5f0:      * @param name name of the test.
1:3bfb5f0:      *
1:3bfb5f0:      */
1:3bfb5f0:     public ResultSetMetaDataTest(String name) {
1:3bfb5f0:         super(name);
8:3bfb5f0:     }
1:f631317:     
1:3bfb5f0:     /**
1:3bfb5f0:      * Create a default DataSource
1:3bfb5f0:      */
1:13e9e78:     protected void setUp() throws SQLException {
1:13e9e78:          ps   =   prepareStatement("select count(*) from sys.systables");
1:3bfb5f0: 	rs   =   ps.executeQuery();
1:3bfb5f0:         rsmd =   rs.getMetaData();
1:3bfb5f0:     }
1:3bfb5f0:     
1:3bfb5f0:     /**
1:3bfb5f0:      * 
1:3bfb5f0:      * Initialize the ds to null once the tests that need to be run have been 
1:3bfb5f0:      * run
1:3bfb5f0:      */
1:13e9e78:     protected void tearDown() throws Exception {
1:3bfb5f0:         if(rs != null && !rs.isClosed())
1:3bfb5f0:             rs.close();
1:3bfb5f0:         if(ps != null && !ps.isClosed())
1:3bfb5f0:             ps.close();
1:ec5ae26:         ps = null;
1:ec5ae26:         rs = null;
1:ec5ae26:         rsmd = null;
1:13e9e78:         
1:13e9e78:         super.tearDown();
1:13e9e78: 
1:3bfb5f0:     }
1:3bfb5f0: 
1:f631317:     public void testIsWrapperForResultSetMetaData() throws SQLException {
1:f631317:         assertTrue(rsmd.isWrapperFor(ResultSetMetaData.class));
1:f631317:     }
1:f631317: 
1:f631317:     public void testUnwrapResultSetMetaData() throws SQLException {
1:f631317:         ResultSetMetaData rsmd2 = rsmd.unwrap(ResultSetMetaData.class);
1:f631317:         assertSame("Unwrap returned wrong object.", rsmd, rsmd2);
1:f631317:     }
1:f631317: 
1:f631317:     public void testIsWrapperForResultSet() throws SQLException {
1:f631317:         assertFalse(rsmd.isWrapperFor(ResultSet.class));
1:f631317:     }
1:f631317: 
1:f631317:     public void testUnwrapResultSet() {
1:f631317:         try {
1:f631317:             ResultSet rs = rsmd.unwrap(ResultSet.class);
1:f631317:             fail("Unwrap didn't fail.");
1:f631317:         } catch (SQLException e) {
1:f631317:             assertSQLState("XJ128", e);
1:3bfb5f0:         }
1:3bfb5f0:     }
1:f631317: 
1:3bfb5f0:     /**
1:3bfb5f0:      * Return suite with all tests of the class.
1:3bfb5f0:      */
1:3bfb5f0:     public static Test suite() {
1:ec5ae26:         return TestConfiguration.defaultSuite(ResultSetMetaDataTest.class);
1:3bfb5f0:     }
1:3bfb5f0: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ec5ae26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         ps = null;
1:         rs = null;
1:         rsmd = null;
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite(ResultSetMetaDataTest.class);
commit:f631317
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testIsWrapperForResultSetMetaData() throws SQLException {
1:         assertTrue(rsmd.isWrapperFor(ResultSetMetaData.class));
1:     }
1: 
1:     public void testUnwrapResultSetMetaData() throws SQLException {
1:         ResultSetMetaData rsmd2 = rsmd.unwrap(ResultSetMetaData.class);
1:         assertSame("Unwrap returned wrong object.", rsmd, rsmd2);
1:     }
1: 
1:     public void testIsWrapperForResultSet() throws SQLException {
1:         assertFalse(rsmd.isWrapperFor(ResultSet.class));
1:     }
1: 
1:     public void testUnwrapResultSet() {
1:         try {
1:             ResultSet rs = rsmd.unwrap(ResultSet.class);
1:             fail("Unwrap didn't fail.");
1:         } catch (SQLException e) {
1:             assertSQLState("XJ128", e);
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:13e9e78
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws SQLException {
1:          ps   =   prepareStatement("select count(*) from sys.systables");
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception {
1:         
1:         super.tearDown();
1: 
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:3bfb5f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import junit.framework.*;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1: 
1: import java.sql.*;
1: import javax.sql.*;
1: 
1: 
1: public class ResultSetMetaDataTest extends BaseJDBCTestCase {
1:     //classes that will be used for the test
0:     private Connection        conn =null;
1:     private PreparedStatement ps   =null;
1:     private ResultSet         rs   =null;
1:     //The ResultSetMetaData object that will be used throughout the test
1:     private ResultSetMetaData rsmd =null;
1:     
1:     /**
1:      *
1:      * Create a test with the given name.
1:      *
1:      * @param name name of the test.
1:      *
1:      */
1:     public ResultSetMetaDataTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Create a default DataSource
1:      */
0:     public void setUp() throws SQLException {
0:         conn =   getConnection();
0:         ps   =   conn.prepareStatement("select count(*) from sys.systables");
1: 	rs   =   ps.executeQuery();
1:         rsmd =   rs.getMetaData();
1:     }
1:     
1:     /**
1:      * 
1:      * Initialize the ds to null once the tests that need to be run have been 
1:      * run
1:      */
0:     public void tearDown() throws SQLException {
1:         if(rs != null && !rs.isClosed())
1:             rs.close();
1:         if(ps != null && !ps.isClosed())
1:             ps.close();
0:         if(conn != null && !conn.isClosed()) {
0:             conn.rollback();
0:             conn.close();
1:         }
1:     }
1:     
1:     /**
1:      *
0:      * Tests the wrapper methods isWrapperFor and unwrap. Test
0:      * for the case when isWrapperFor returns true and we call unwrap
0:      * The test is right now being run in the embedded case only
1:      *
1:      */
0:     public void testisWrapperReturnsTrue() throws SQLException {
0:         Class<ResultSetMetaData> wrap_class = ResultSetMetaData.class;
1:         
0:         //The if should return true enabling us  to call the unwrap method
0:         //without throwing  an exception
0:         if(rsmd.isWrapperFor(wrap_class)) {
0:             try {
0:                 ResultSetMetaData rsmd1 =
0:                         (ResultSetMetaData)rsmd.unwrap(wrap_class);
1:             }
0:             catch(SQLException sqle) {
0:                 fail("Unwrap wrongly throws a SQLException");
1:             }
0:         } else {
0:             fail("isWrapperFor wrongly returns false");
1:         }
1:     }
1:     
1:     /**
1:      *
0:      * Tests the wrapper methods isWrapperFor and unwrap. Test
0:      * for the case when isWrapperFor returns false and we call unwrap
0:      * The test is right now being run in the embedded case only
1:      *
1:      */
0:     public void testisWrapperReturnsFalse() throws SQLException {
0:         Class<ResultSet> wrap_class = ResultSet.class;
1:         
0:         //returning false is the correct behaviour in this case
0:         //Generate a message if it returns true
0:         if(rsmd.isWrapperFor(wrap_class)) {
0:             fail("isWrapperFor wrongly returns true");
0:         } else {
0:             try {
0:                 ResultSet rs1 = (ResultSet)
0:                 rsmd.unwrap(wrap_class);
0:                 fail("unwrap does not throw the expected " +
0:                         "exception");
0:             } catch (SQLException sqle) {
0:                 //calling unwrap in this case throws an SQLException
0:                 //check that this SQLException has the correct SQLState
0:                 if(!SQLStateConstants.UNABLE_TO_UNWRAP.equals(sqle.getSQLState())) {
0:                     throw sqle;
1:                 }
1:             }
1:         }
1:     }
1:     
1:     /**
1:      * Return suite with all tests of the class.
1:      */
1:     public static Test suite() {
0:         return (new TestSuite(ResultSetMetaDataTest.class,
0:                               "ResultSetMetaDataTest suite"));
1:     }
1: }
============================================================================