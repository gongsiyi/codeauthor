1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.AggregatorInfo
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
2:eac0369: /**
1:eac0369:  * This is a simple class used to store the run time information
1:eac0369:  * needed to invoke an aggregator.  This class is serializable
1:eac0369:  * because it is stored with the plan.  It is serializable rather
1:eac0369:  * than externalizable because it isn't particularly complicated
1:eac0369:  * and presumbably we don't need version control on plans.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class AggregatorInfo implements Formatable 
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.  OR, since this is something that is used
1:eac0369: 	**	in stored prepared statements, it is ok to change it
1:eac0369: 	**	if you make sure that stored prepared statements are
1:eac0369: 	**	invalidated across releases.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** See the constructor for the meaning of these fields
1:eac0369: 	*/
1:eac0369: 	String	aggregateName;
1:eac0369: 	int		inputColumn;
1:eac0369: 	int		outputColumn;
1:eac0369: 	int		aggregatorColumn;
1:eac0369: 	String	aggregatorClassName;
1:eac0369: 	boolean	isDistinct;
1:eac0369: 	ResultDescription	rd;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formattable
1:eac0369: 	 */
1:eac0369: 	public AggregatorInfo() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Consructor
1:eac0369: 	 *
1:eac0369: 	 * @param aggregateName	the name of the aggregate.  Not
1:eac0369:  	 *		actually used anywhere except diagnostics.  Should
1:eac0369: 	 *		be the names as found in the language (e.g. MAX).
1:eac0369: 	 * @param aggregatorClassName	the name of the aggregator
1:eac0369: 	 *		used to process this aggregate.  Aggregator expected
1:eac0369: 	 *		to have a null arg constructor and implement
1:eac0369: 	 *		Aggregator.
1:eac0369: 	 * @param inputColNum	the input column number
1:eac0369: 	 * @param outputColNum	the output column number
1:eac0369: 	 * @param aggregatorColNum	the column number in which the 
1:eac0369: 	 *		aggregator is stored.
1:eac0369: 	 * @param isDistinct	if it is a distinct aggregate
1:eac0369: 	 * @param rd	the result description
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public AggregatorInfo
1:eac0369: 	(
1:eac0369: 		String 				aggregateName, 
1:eac0369: 		String				aggregatorClassName,
1:eac0369: 		int					inputColNum,
1:eac0369: 		int					outputColNum,
1:eac0369: 		int					aggregatorColNum,
1:eac0369: 		boolean				isDistinct,
1:eac0369: 		ResultDescription	rd
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		this.aggregateName	= aggregateName;
1:eac0369: 		this.aggregatorClassName = aggregatorClassName;
1:eac0369: 		this.inputColumn	= inputColNum;	
1:eac0369: 		this.outputColumn	= outputColNum;
1:eac0369: 		this.aggregatorColumn = aggregatorColNum;
1:eac0369: 		this.isDistinct 	= isDistinct;
1:eac0369: 		this.rd 			= rd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the aggergate (e.g. MAX)
1:eac0369: 	 *
1:eac0369: 	 * @return the aggeregate name
1:eac0369: 	 */
1:eac0369: 	public String getAggregateName()
1:eac0369: 	{
1:eac0369: 		return aggregateName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the class that implements the user
1:eac0369: 	 * aggregator for this class.
1:eac0369: 	 *
1:eac0369: 	 * @return the aggeregator class name
1:eac0369: 	 */
1:eac0369: 	public String getAggregatorClassName()
1:eac0369: 	{
1:eac0369: 		return aggregatorClassName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column number for the aggregator
1:eac0369: 	 * column.
1:eac0369: 	 *
1:eac0369: 	 * @return the aggeregator colid
1:eac0369: 	 */
1:eac0369: 	public int getAggregatorColNum()
1:eac0369: 	{
1:eac0369: 		return aggregatorColumn;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column number for the input
1:eac0369: 	 * (addend) column.
1:eac0369: 	 *
1:eac0369: 	 * @return the aggeregator colid
1:eac0369: 	 */
1:eac0369: 	public int getInputColNum()
1:eac0369: 	{
1:eac0369: 		return inputColumn;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column number for the output
1:eac0369: 	 * (result) column.
1:eac0369: 	 *
1:eac0369: 	 * @return the aggeregator colid
1:eac0369: 	 */
1:eac0369: 	public int getOutputColNum()
1:eac0369: 	{
1:eac0369: 		return outputColumn;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is the aggergate distinct
1:eac0369: 	 *
1:eac0369: 	 * @return whether it is distinct
1:eac0369: 	 */
1:eac0369: 	public boolean isDistinct()
1:eac0369: 	{
1:eac0369: 		return isDistinct;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the result description for the input value
1:eac0369: 	 * to this aggregate.
1:eac0369: 	 *
1:eac0369: 	 * @return the rd
1:eac0369: 	 */
1:eac0369: 	public ResultDescription getResultDescription()
1:eac0369: 	{
1:eac0369: 		return rd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a string for the object
1:eac0369: 	 *
1:eac0369: 	 * @return string
1:eac0369: 	 */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "AggregatorInfo = Name: "+ aggregateName +
1:eac0369: 				"\n\tClass: " + aggregatorClassName +
1:eac0369: 				"\n\tInputColNum: " + inputColumn +
1:eac0369: 				"\n\tOutputColNum: " + outputColumn +
1:eac0369: 				"\n\tAggregatorColNum: " + aggregatorColumn +
1:eac0369: 				"\n\tDistinct: " + isDistinct +
1:eac0369: 				"\n" + rd;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeObject(aggregateName);
1:eac0369: 		out.writeInt(inputColumn);
1:eac0369: 		out.writeInt(outputColumn);
1:eac0369: 		out.writeInt(aggregatorColumn);
1:eac0369: 		out.writeObject(aggregatorClassName);
1:eac0369: 		out.writeBoolean(isDistinct);
1:eac0369: 		out.writeObject(rd);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		aggregateName = (String)in.readObject();
1:eac0369: 		inputColumn = in.readInt();
1:eac0369: 		outputColumn = in.readInt();
1:eac0369: 		aggregatorColumn = in.readInt();
1:eac0369: 		aggregatorClassName = (String)in.readObject();
1:eac0369: 		isDistinct = in.readBoolean();
1:eac0369: 		rd = (ResultDescription)in.readObject();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public int	getTypeFormatId()	{ return StoredFormatIds.AGG_INFO_V01_ID; }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.AggregatorInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.ResultDescription;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1:  * This is a simple class used to store the run time information
1:  * needed to invoke an aggregator.  This class is serializable
1:  * because it is stored with the plan.  It is serializable rather
1:  * than externalizable because it isn't particularly complicated
1:  * and presumbably we don't need version control on plans.
1:  *
0:  * @author jamie
1:  */
1: public class AggregatorInfo implements Formatable 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.  OR, since this is something that is used
1: 	**	in stored prepared statements, it is ok to change it
1: 	**	if you make sure that stored prepared statements are
1: 	**	invalidated across releases.
1: 	**
1: 	********************************************************/
1: 
1: 	/*
1: 	** See the constructor for the meaning of these fields
1: 	*/
1: 	String	aggregateName;
1: 	int		inputColumn;
1: 	int		outputColumn;
1: 	int		aggregatorColumn;
1: 	String	aggregatorClassName;
1: 	boolean	isDistinct;
1: 	ResultDescription	rd;
1: 
1: 	/**
1: 	 * Niladic constructor for Formattable
1: 	 */
1: 	public AggregatorInfo() {}
1: 
1: 	/**
1: 	 * Consructor
1: 	 *
1: 	 * @param aggregateName	the name of the aggregate.  Not
1:  	 *		actually used anywhere except diagnostics.  Should
1: 	 *		be the names as found in the language (e.g. MAX).
1: 	 * @param aggregatorClassName	the name of the aggregator
1: 	 *		used to process this aggregate.  Aggregator expected
1: 	 *		to have a null arg constructor and implement
1: 	 *		Aggregator.
1: 	 * @param inputColNum	the input column number
1: 	 * @param outputColNum	the output column number
1: 	 * @param aggregatorColNum	the column number in which the 
1: 	 *		aggregator is stored.
1: 	 * @param isDistinct	if it is a distinct aggregate
1: 	 * @param rd	the result description
1: 	 *
1: 	 */
1: 	public AggregatorInfo
1: 	(
1: 		String 				aggregateName, 
1: 		String				aggregatorClassName,
1: 		int					inputColNum,
1: 		int					outputColNum,
1: 		int					aggregatorColNum,
1: 		boolean				isDistinct,
1: 		ResultDescription	rd
1: 	)
1: 	{
1: 		this.aggregateName	= aggregateName;
1: 		this.aggregatorClassName = aggregatorClassName;
1: 		this.inputColumn	= inputColNum;	
1: 		this.outputColumn	= outputColNum;
1: 		this.aggregatorColumn = aggregatorColNum;
1: 		this.isDistinct 	= isDistinct;
1: 		this.rd 			= rd;
1: 	}
1: 
1: 	/**
1: 	 * Get the name of the aggergate (e.g. MAX)
1: 	 *
1: 	 * @return the aggeregate name
1: 	 */
1: 	public String getAggregateName()
1: 	{
1: 		return aggregateName;
1: 	}
1: 
1: 	/**
1: 	 * Get the name of the class that implements the user
1: 	 * aggregator for this class.
1: 	 *
1: 	 * @return the aggeregator class name
1: 	 */
1: 	public String getAggregatorClassName()
1: 	{
1: 		return aggregatorClassName;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Get the column number for the aggregator
1: 	 * column.
1: 	 *
1: 	 * @return the aggeregator colid
1: 	 */
1: 	public int getAggregatorColNum()
1: 	{
1: 		return aggregatorColumn;
1: 	}
1: 
1: 	/**
1: 	 * Get the column number for the input
1: 	 * (addend) column.
1: 	 *
1: 	 * @return the aggeregator colid
1: 	 */
1: 	public int getInputColNum()
1: 	{
1: 		return inputColumn;
1: 	}
1: 
1: 	/**
1: 	 * Get the column number for the output
1: 	 * (result) column.
1: 	 *
1: 	 * @return the aggeregator colid
1: 	 */
1: 	public int getOutputColNum()
1: 	{
1: 		return outputColumn;
1: 	}
1: 
1: 	/**
1: 	 * Is the aggergate distinct
1: 	 *
1: 	 * @return whether it is distinct
1: 	 */
1: 	public boolean isDistinct()
1: 	{
1: 		return isDistinct;
1: 	}
1: 
1: 	/**
1: 	 * Get the result description for the input value
1: 	 * to this aggregate.
1: 	 *
1: 	 * @return the rd
1: 	 */
1: 	public ResultDescription getResultDescription()
1: 	{
1: 		return rd;
1: 	}
1: 
1: 	/**
1: 	 * Get a string for the object
1: 	 *
1: 	 * @return string
1: 	 */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "AggregatorInfo = Name: "+ aggregateName +
1: 				"\n\tClass: " + aggregatorClassName +
1: 				"\n\tInputColNum: " + inputColumn +
1: 				"\n\tOutputColNum: " + outputColumn +
1: 				"\n\tAggregatorColNum: " + aggregatorColumn +
1: 				"\n\tDistinct: " + isDistinct +
1: 				"\n" + rd;
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeObject(aggregateName);
1: 		out.writeInt(inputColumn);
1: 		out.writeInt(outputColumn);
1: 		out.writeInt(aggregatorColumn);
1: 		out.writeObject(aggregatorClassName);
1: 		out.writeBoolean(isDistinct);
1: 		out.writeObject(rd);
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		aggregateName = (String)in.readObject();
1: 		inputColumn = in.readInt();
1: 		outputColumn = in.readInt();
1: 		aggregatorColumn = in.readInt();
1: 		aggregatorClassName = (String)in.readObject();
1: 		isDistinct = in.readBoolean();
1: 		rd = (ResultDescription)in.readObject();
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public int	getTypeFormatId()	{ return StoredFormatIds.AGG_INFO_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.ResultDescription;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0:  * This is a simple class used to store the run time information
0:  * needed to invoke an aggregator.  This class is serializable
0:  * because it is stored with the plan.  It is serializable rather
0:  * than externalizable because it isn't particularly complicated
0:  * and presumbably we don't need version control on plans.
0:  *
0:  * @author jamie
0:  */
0: public class AggregatorInfo implements Formatable 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.  OR, since this is something that is used
0: 	**	in stored prepared statements, it is ok to change it
0: 	**	if you make sure that stored prepared statements are
0: 	**	invalidated across releases.
0: 	**
0: 	********************************************************/
0: 
0: 	/*
0: 	** See the constructor for the meaning of these fields
0: 	*/
0: 	String	aggregateName;
0: 	int		inputColumn;
0: 	int		outputColumn;
0: 	int		aggregatorColumn;
0: 	String	aggregatorClassName;
0: 	boolean	isDistinct;
0: 	ResultDescription	rd;
0: 
0: 	/**
0: 	 * Niladic constructor for Formattable
0: 	 */
0: 	public AggregatorInfo() {}
0: 
0: 	/**
0: 	 * Consructor
0: 	 *
0: 	 * @param aggregateName	the name of the aggregate.  Not
0:  	 *		actually used anywhere except diagnostics.  Should
0: 	 *		be the names as found in the language (e.g. MAX).
0: 	 * @param aggregatorClassName	the name of the aggregator
0: 	 *		used to process this aggregate.  Aggregator expected
0: 	 *		to have a null arg constructor and implement
0: 	 *		Aggregator.
0: 	 * @param inputColNum	the input column number
0: 	 * @param outputColNum	the output column number
0: 	 * @param aggregatorColNum	the column number in which the 
0: 	 *		aggregator is stored.
0: 	 * @param isDistinct	if it is a distinct aggregate
0: 	 * @param rd	the result description
0: 	 *
0: 	 */
0: 	public AggregatorInfo
0: 	(
0: 		String 				aggregateName, 
0: 		String				aggregatorClassName,
0: 		int					inputColNum,
0: 		int					outputColNum,
0: 		int					aggregatorColNum,
0: 		boolean				isDistinct,
0: 		ResultDescription	rd
0: 	)
0: 	{
0: 		this.aggregateName	= aggregateName;
0: 		this.aggregatorClassName = aggregatorClassName;
0: 		this.inputColumn	= inputColNum;	
0: 		this.outputColumn	= outputColNum;
0: 		this.aggregatorColumn = aggregatorColNum;
0: 		this.isDistinct 	= isDistinct;
0: 		this.rd 			= rd;
0: 	}
0: 
0: 	/**
0: 	 * Get the name of the aggergate (e.g. MAX)
0: 	 *
0: 	 * @return the aggeregate name
0: 	 */
0: 	public String getAggregateName()
0: 	{
0: 		return aggregateName;
0: 	}
0: 
0: 	/**
0: 	 * Get the name of the class that implements the user
0: 	 * aggregator for this class.
0: 	 *
0: 	 * @return the aggeregator class name
0: 	 */
0: 	public String getAggregatorClassName()
0: 	{
0: 		return aggregatorClassName;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Get the column number for the aggregator
0: 	 * column.
0: 	 *
0: 	 * @return the aggeregator colid
0: 	 */
0: 	public int getAggregatorColNum()
0: 	{
0: 		return aggregatorColumn;
0: 	}
0: 
0: 	/**
0: 	 * Get the column number for the input
0: 	 * (addend) column.
0: 	 *
0: 	 * @return the aggeregator colid
0: 	 */
0: 	public int getInputColNum()
0: 	{
0: 		return inputColumn;
0: 	}
0: 
0: 	/**
0: 	 * Get the column number for the output
0: 	 * (result) column.
0: 	 *
0: 	 * @return the aggeregator colid
0: 	 */
0: 	public int getOutputColNum()
0: 	{
0: 		return outputColumn;
0: 	}
0: 
0: 	/**
0: 	 * Is the aggergate distinct
0: 	 *
0: 	 * @return whether it is distinct
0: 	 */
0: 	public boolean isDistinct()
0: 	{
0: 		return isDistinct;
0: 	}
0: 
0: 	/**
0: 	 * Get the result description for the input value
0: 	 * to this aggregate.
0: 	 *
0: 	 * @return the rd
0: 	 */
0: 	public ResultDescription getResultDescription()
0: 	{
0: 		return rd;
0: 	}
0: 
0: 	/**
0: 	 * Get a string for the object
0: 	 *
0: 	 * @return string
0: 	 */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "AggregatorInfo = Name: "+ aggregateName +
0: 				"\n\tClass: " + aggregatorClassName +
0: 				"\n\tInputColNum: " + inputColumn +
0: 				"\n\tOutputColNum: " + outputColumn +
0: 				"\n\tAggregatorColNum: " + aggregatorColumn +
0: 				"\n\tDistinct: " + isDistinct +
0: 				"\n" + rd;
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeObject(aggregateName);
0: 		out.writeInt(inputColumn);
0: 		out.writeInt(outputColumn);
0: 		out.writeInt(aggregatorColumn);
0: 		out.writeObject(aggregatorClassName);
0: 		out.writeBoolean(isDistinct);
0: 		out.writeObject(rd);
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		aggregateName = (String)in.readObject();
0: 		inputColumn = in.readInt();
0: 		outputColumn = in.readInt();
0: 		aggregatorColumn = in.readInt();
0: 		aggregatorClassName = (String)in.readObject();
0: 		isDistinct = in.readBoolean();
0: 		rd = (ResultDescription)in.readObject();
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public int	getTypeFormatId()	{ return StoredFormatIds.AGG_INFO_V01_ID; }
0: }
============================================================================