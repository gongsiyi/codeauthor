1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceEvent.java,v 1.15 2007/02/20 00:14:12 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.EventObject;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * An event from the Framework describing a service lifecycle change.
1:a8b6921:  * <p>
1:a8b6921:  * <code>ServiceEvent</code> objects are delivered to
1:a8b6921:  * <code>ServiceListener</code>s and <code>AllServiceListener</code>s when
1:a8b6921:  * a change occurs in this service's lifecycle. A type code is used to identify
1:a8b6921:  * the event type for future extendability.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * OSGi Alliance reserves the right to extend the set of types.
1:a8b6921:  * 
1:a8b6921:  * @Immutable
1:a8b6921:  * @see ServiceListener
1:a8b6921:  * @see AllServiceListener
1:a8b6921:  * @version $Revision: 1.15 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public class ServiceEvent extends EventObject {
1:a8b6921: 	static final long				serialVersionUID	= 8792901483909409299L;
1:a8b6921: 	/**
1:a8b6921: 	 * Reference to the service that had a change occur in its lifecycle.
1:a8b6921: 	 */
1:a8b6921: 	private final ServiceReference	reference;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Type of service lifecycle change.
1:a8b6921: 	 */
1:a8b6921: 	private final int				type;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * This service has been registered.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This event is synchronously delivered <strong>after</strong> the service
1:a8b6921: 	 * has been registered with the Framework.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>REGISTERED</code> is 0x00000001.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see BundleContext#registerService(String[],Object,java.util.Dictionary)
1:a8b6921: 	 */
1:a8b6921: 	public final static int			REGISTERED			= 0x00000001;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The properties of a registered service have been modified.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This event is synchronously delivered <strong>after</strong> the service
1:a8b6921: 	 * properties have been modified.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>MODIFIED</code> is 0x00000002.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see ServiceRegistration#setProperties
1:a8b6921: 	 */
1:a8b6921: 	public final static int			MODIFIED			= 0x00000002;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * This service is in the process of being unregistered.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This event is synchronously delivered <strong>before</strong> the
1:a8b6921: 	 * service has completed unregistering.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If a bundle is using a service that is <code>UNREGISTERING</code>, the
1:a8b6921: 	 * bundle should release its use of the service when it receives this event.
1:a8b6921: 	 * If the bundle does not release its use of the service when it receives
1:a8b6921: 	 * this event, the Framework will automatically release the bundle's use of
1:a8b6921: 	 * the service while completing the service unregistration operation.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of UNREGISTERING is 0x00000004.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see ServiceRegistration#unregister
1:a8b6921: 	 * @see BundleContext#ungetService
1:a8b6921: 	 */
1:a8b6921: 	public final static int			UNREGISTERING		= 0x00000004;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a new service event object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param type The event type.
1:a8b6921: 	 * @param reference A <code>ServiceReference</code> object to the service
1:a8b6921: 	 *        that had a lifecycle change.
1:a8b6921: 	 */
1:a8b6921: 	public ServiceEvent(int type, ServiceReference reference) {
1:a8b6921: 		super(reference);
1:a8b6921: 		this.reference = reference;
1:a8b6921: 		this.type = type;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a reference to the service that had a change occur in its
1:a8b6921: 	 * lifecycle.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This reference is the source of the event.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Reference to the service that had a lifecycle change.
1:a8b6921: 	 */
1:a8b6921: 	public ServiceReference getServiceReference() {
1:a8b6921: 		return reference;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the type of event. The event type values are:
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li>{@link #REGISTERED}
1:a8b6921: 	 * <li>{@link #MODIFIED}
1:a8b6921: 	 * <li>{@link #UNREGISTERING}
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Type of service lifecycle change.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public int getType() {
1:a8b6921: 		return type;
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceEvent.java,v 1.15 2007/02/20 00:14:12 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.util.EventObject;
1: 
1: /**
1:  * An event from the Framework describing a service lifecycle change.
1:  * <p>
1:  * <code>ServiceEvent</code> objects are delivered to
1:  * <code>ServiceListener</code>s and <code>AllServiceListener</code>s when
1:  * a change occurs in this service's lifecycle. A type code is used to identify
1:  * the event type for future extendability.
1:  * 
1:  * <p>
1:  * OSGi Alliance reserves the right to extend the set of types.
1:  * 
1:  * @Immutable
1:  * @see ServiceListener
1:  * @see AllServiceListener
1:  * @version $Revision: 1.15 $
1:  */
1: 
1: public class ServiceEvent extends EventObject {
1: 	static final long				serialVersionUID	= 8792901483909409299L;
1: 	/**
1: 	 * Reference to the service that had a change occur in its lifecycle.
1: 	 */
1: 	private final ServiceReference	reference;
1: 
1: 	/**
1: 	 * Type of service lifecycle change.
1: 	 */
1: 	private final int				type;
1: 
1: 	/**
1: 	 * This service has been registered.
1: 	 * <p>
1: 	 * This event is synchronously delivered <strong>after</strong> the service
1: 	 * has been registered with the Framework.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>REGISTERED</code> is 0x00000001.
1: 	 * 
1: 	 * @see BundleContext#registerService(String[],Object,java.util.Dictionary)
1: 	 */
1: 	public final static int			REGISTERED			= 0x00000001;
1: 
1: 	/**
1: 	 * The properties of a registered service have been modified.
1: 	 * <p>
1: 	 * This event is synchronously delivered <strong>after</strong> the service
1: 	 * properties have been modified.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>MODIFIED</code> is 0x00000002.
1: 	 * 
1: 	 * @see ServiceRegistration#setProperties
1: 	 */
1: 	public final static int			MODIFIED			= 0x00000002;
1: 
1: 	/**
1: 	 * This service is in the process of being unregistered.
1: 	 * <p>
1: 	 * This event is synchronously delivered <strong>before</strong> the
1: 	 * service has completed unregistering.
1: 	 * 
1: 	 * <p>
1: 	 * If a bundle is using a service that is <code>UNREGISTERING</code>, the
1: 	 * bundle should release its use of the service when it receives this event.
1: 	 * If the bundle does not release its use of the service when it receives
1: 	 * this event, the Framework will automatically release the bundle's use of
1: 	 * the service while completing the service unregistration operation.
1: 	 * 
1: 	 * <p>
1: 	 * The value of UNREGISTERING is 0x00000004.
1: 	 * 
1: 	 * @see ServiceRegistration#unregister
1: 	 * @see BundleContext#ungetService
1: 	 */
1: 	public final static int			UNREGISTERING		= 0x00000004;
1: 
1: 	/**
1: 	 * Creates a new service event object.
1: 	 * 
1: 	 * @param type The event type.
1: 	 * @param reference A <code>ServiceReference</code> object to the service
1: 	 *        that had a lifecycle change.
1: 	 */
1: 	public ServiceEvent(int type, ServiceReference reference) {
1: 		super(reference);
1: 		this.reference = reference;
1: 		this.type = type;
1: 	}
1: 
1: 	/**
1: 	 * Returns a reference to the service that had a change occur in its
1: 	 * lifecycle.
1: 	 * <p>
1: 	 * This reference is the source of the event.
1: 	 * 
1: 	 * @return Reference to the service that had a lifecycle change.
1: 	 */
1: 	public ServiceReference getServiceReference() {
1: 		return reference;
1: 	}
1: 
1: 	/**
1: 	 * Returns the type of event. The event type values are:
1: 	 * <ul>
1: 	 * <li>{@link #REGISTERED}
1: 	 * <li>{@link #MODIFIED}
1: 	 * <li>{@link #UNREGISTERING}
1: 	 * </ul>
1: 	 * 
1: 	 * @return Type of service lifecycle change.
1: 	 */
1: 
1: 	public int getType() {
1: 		return type;
1: 	}
1: }
============================================================================