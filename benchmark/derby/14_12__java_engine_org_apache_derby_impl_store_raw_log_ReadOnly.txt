3:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.log.ReadOnly
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.log;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleSupportable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PersistentSet;
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.ScanHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.log.Logger;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogScan;
1:1bac3f3: import org.apache.derby.iapi.store.replication.master.MasterFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: import org.apache.derby.iapi.store.access.DatabaseInstant;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.io.File;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A read-only version of the log factory.
1:eac0369: 	It doesn't do anything, it doesn't check that
1:eac0369: 	the database needs recovery or not.
1:eac0369: 	<P>
1:eac0369: 	It doesn't handle undo.  No recovery.
1:eac0369: 
1:eac0369: 	<P>Multithreading considerations:<BR>
1:eac0369: 	This class must be MT-safe.
1:eac0369: */
1:eac0369: 
1:eac0369: public class ReadOnly implements LogFactory, ModuleSupportable {
1:eac0369: 
1:eac0369: 	private String logArchiveDirectory = null;
1:eac0369: 
1:eac0369: 	/* 
1:eac0369: 	** Methods of Log Factory
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public Logger getLogger() {
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:9496f49:     /** Not applicable in readonly databases */
1:9496f49:     public void createDataWarningFile() throws StandardException {
1:9496f49:     }
1:9496f49: 
1:9cc8ad0: 	/** Not applicable in readonly databases */
1:9cc8ad0: 	public void setRawStoreFactory(RawStoreFactory rsf) {
1:9cc8ad0: 	}
1:9cc8ad0: 
1:eac0369: 	/**
1:eac0369: 	  MT - not needed, no work is done
1:94f158a: 	  @exception StandardException Standard Derby Error Policy
1:25f99f5: 	*/
1:9cc8ad0: 	public void recover(DataFactory dataFactory,
1:eac0369: 						TransactionFactory transactionFactory)
1:eac0369: 		 throws StandardException
1:047a763: 	{
1:eac0369: 		if (transactionFactory != null)
1:eac0369: 			transactionFactory.useTransactionTable((Formatable)null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  MT - not needed, no work is done
1:eac0369: 	*/
1:eac0369: 	public boolean checkpoint(RawStoreFactory rawStoreFactory,
2:eac0369: 							  DataFactory dataFactory,
1:eac0369: 							  TransactionFactory transactionFactory,
1:eac0369: 							  boolean wait)
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public StandardException markCorrupt(StandardException originalError) {
1:eac0369: 		return originalError;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void flush(LogInstant where) throws StandardException {
1:eac0369: 	}
1:eac0369: 
1:bf643fd: 	/*
1:eac0369: 	** Methods of ModuleControl
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public boolean canSupport(Properties startParams) {
1:eac0369: 
1:eac0369: 		String runtimeLogAttributes = startParams.getProperty(LogFactory.RUNTIME_ATTRIBUTES);
1:eac0369: 		if (runtimeLogAttributes == null)
2:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		return runtimeLogAttributes.equals(LogFactory.RT_READONLY);
1:eac0369: 	}
1:eac0369: 
1:25f99f5: 	/*
1:eac0369: 	 * truncation point support (not supported)
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public LogInstant setTruncationLWM(UUID name,
1:eac0369: 									   LogInstant instant,
1:eac0369: 									   RawStoreFactory rawStoreFactory, 
1:eac0369: 									  TransactionFactory transFactory)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:c414a36: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	*/
1:eac0369: 	public void setTruncationLWM(UUID name, LogInstant instant) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	*/
1:eac0369: 	public void removeTruncationLWM(UUID name,
1:eac0369: 							 RawStoreFactory rawStoreFactory, 
1:eac0369: 							 TransactionFactory transFactory)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	*/
1:eac0369: 	public LogInstant getTruncationLWM(UUID name) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	*/
1:eac0369: 	public void removeTruncationLWM(UUID name) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	*/
1:eac0369: 	public ScanHandle openFlushedScan(DatabaseInstant i, int groupsIWant)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	*/
1:eac0369: 	public LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  */
1:eac0369:     public LogInstant getFirstUnflushedInstant()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:29fd25c: 	public long getFirstUnflushedInstantAsLong() {
1:29fd25c: 		if (SanityManager.DEBUG) {
1:29fd25c: 			SanityManager.THROWASSERT("functionality not implemented");
1:29fd25c: 		}
1:29fd25c: 		return LogCounter.INVALID_LOG_INSTANT;
1:29fd25c: 	}
1:29fd25c: 
1:eac0369: 	/**
1:c6892a1: 	  @exception StandardException functionality not implemented
1:eac0369: 	  */
1:eac0369: 	public LogScan openForwardsFlushedScan(LogInstant startAt)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("functionality not implemented");
1:eac0369: 
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - stop sending log record to the log stream
1:94f158a: 	 * @exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public void freezePersistentStore() throws StandardException
1:eac0369: 	{
1:eac0369: 		// read only, do nothing
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - start sending log record to the log stream
1:94f158a: 	 * @exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public void unfreezePersistentStore() throws StandardException
1:eac0369: 	{
1:eac0369: 		// read only, do nothing
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - is the log being archived to some directory?
1:eac0369: 	 * if RawStore.LOG_ARCHIVAL_DIRECTORY is set to some value, that means the
1:eac0369: 	 * log is meant to be archived.  Else, log not archived.
1:eac0369: 	 */
1:eac0369: 	public boolean logArchived()
1:eac0369: 	{
1:eac0369: 		return (logArchiveDirectory != null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c6892a1: 		Get JBMS properties relevant to the log factory
1:eac0369: 	 */
1:eac0369: 	public void getLogFactoryProperties(PersistentSet set) 
1:eac0369: 	{
1:eac0369: 		// do nothing
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public StorageFile getLogDirectory()
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String getCanonicalLogPath()
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	//roll-forward recovery support routines
1:eac0369: 	//Nothing to be done for read only databases
1:eac0369: 	public void enableLogArchiveMode()
1:eac0369: 	{
2:eac0369: 		//do nothing
1:eac0369: 	}
1:25f99f5: 
1:eac0369: 	public void disableLogArchiveMode()
1:eac0369: 	{
1:eac0369: 		//do nothing
1:eac0369: 	}
1:25f99f5: 
1:eac0369: 	//this function is suppose to delete all the logs 
1:eac0369: 	//before this call that are not active logs.
1:eac0369: 	public void deleteOnlineArchivedLogFiles()
1:eac0369: 	{
1:eac0369: 		//do nothing
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//Is the transaction in rollforward recovery
1:eac0369: 	public boolean inRFR()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**	
1:a292c89: 	 *	Perform a checkpoint during rollforward recovery.
1:a292c89:      * 
1:a292c89:      * @throws org.apache.derby.iapi.error.StandardException 
1:a292c89:      */
1:a292c89: 	public void checkpointInRFR(LogInstant cinstant, long redoLWM, long undoLWM,
1:eac0369: 								DataFactory df) throws StandardException
1:eac0369: 	{
1:eac0369: 		//do nothing
1:eac0369: 	}
1:eac0369: 
1:eac0369: 		
1:25f99f5: 	/*
1:bf643fd: 	 * There are no log files to backup for  read  only databases, nothing to be
1:bf643fd:      * done here. 
1:bf643fd:      * @param toDir - location where the log files should be copied to.
1:bf643fd:      * @exception StandardException Standard Derby error policy
1:25f99f5: 	*/
1:25f99f5: 	public void startLogBackup(File toDir) throws StandardException
1:eac0369: 	{
1:25f99f5: 		// nothing to do for read only databases.
1:25f99f5: 	}
1:ae71c74: 
1:ae71c74: 	
1:ae71c74: 	/* 
1:bf643fd:      * There are no log files to backup for read only databases, 
1:bf643fd:      * nothing to be done here. 
1:bf643fd:      *
1:bf643fd:      * @param toDir - location where the log files should be copied to.
1:bf643fd:      * @exception StandardException Standard Derby error policy
1:ae71c74: 	*/
1:25f99f5: 	public void endLogBackup(File toDir) throws StandardException
1:25f99f5: 	{
1:25f99f5: 		// nothing to do for read only databases.
1:25f99f5: 	}
1:25f99f5: 
1:25f99f5: 	
1:25f99f5: 	/*
1:bf643fd:      * Log backup is not started for for read only databases, no work to do
1:bf643fd:      * here.
1:25f99f5: 	 **/
1:25f99f5: 	public void abortLogBackup()
1:25f99f5: 	{
1:25f99f5: 		// nothing to do for read only databases.
1:eac0369: 	}
1:25f99f5: 
1:89a6625:     /**
1:89a6625:      * Sets whether the database is encrypted.
1:89a6625:      * <p>
1:89a6625:      * Read-only database can not be re-encrypted, nothing to do in this case.
1:eac0369:      */
1:89a6625:     public void setDatabaseEncrypted(boolean isEncrypted, boolean flushLog)
1:eac0369:     {
1:ae71c74:         // nothing to do for a read-only database.
1:ae71c74:     }
1:047a763: 
1:32635d2: 
1:ae71c74:     /*
1:047a763:      * set up a new log file to start writing 
1:047a763:      * the log records into the new log file 
1:047a763:      * after this call.
1:047a763:      *
1:047a763:      * <P>MT - synchronization provided by caller - RawStore boot,
1:047a763:      * This method is called while re-encrypting the database 
1:047a763:      * at databse boot time. 
1:047a763:      *
1:047a763:      * Read-only database can not be reencrypted, 
1:047a763:      * nothing to do in this case. 
1:ae71c74:      */
1:047a763:     public void startNewLogFile() throws StandardException 
1:047a763:     {
1:ae71c74:         // nothing to do for a read-only database. 
1:ae71c74:     }
1:ae71c74: 
1:047a763:     /*
1:047a763:      * find if the checkpoint is in the last log file. 
1:047a763:      *
1:047a763:      * <P>MT - synchronization provided by caller - RawStore boot,
1:047a763:      * This method is called only if a crash occured while 
1:047a763:      * re-encrypting the database at boot time. 
1:047a763: 
1:047a763:      * Read-only database can not be re-encrypted, 
1:047a763:      * nothing to do in this case. 
1:047a763:      */
1:047a763:     public boolean isCheckpointInLastLogFile() 
1:047a763:         throws StandardException 
1:047a763:     {
1:047a763:         // nothing to do for a read-only database. 
1:047a763:         return false;
1:047a763:     }
1:047a763:     
1:047a763:     /*
1:047a763:      * delete the log file after the checkpoint. 
1:047a763:      *
1:047a763:      * <P>MT - synchronization provided by caller - RawStore boot,
1:047a763:      * This method is called only if a crash occured while 
1:047a763:      * re-encrypting the database at boot time. 
1:047a763:      *
1:047a763:      * Read-only database can not be re-encrypted, 
1:047a763:      * nothing to do in this case. 
1:047a763:      */
1:047a763:     public void deleteLogFileAfterCheckpointLogFile() 
1:047a763:         throws StandardException 
1:047a763:     {
1:047a763:         // nothing to do for a read-only database. 
1:047a763:     }
1:047a763: 
1:047a763: 
1:047a763: 
1:32635d2:     /**
1:32635d2:      *  Check to see if a database has been upgraded to the required
1:32635d2:      *  level in order to use a store feature.
1:32635d2:      *
1:32635d2:      * This method is generally used to prevent writes to 
1:32635d2:      * data/log file by a particular store feature until the 
1:32635d2:      * database is upgraded to the required version. 
1:32635d2:      * In read-only database writes are not allowed, so nothing to do
1:32635d2:      * for this method in this implementation of the log factory.
1:32635d2:      *
1:32635d2:      * @param requiredMajorVersion  required database Engine major version
1:32635d2:      * @param requiredMinorVersion  required database Engine minor version
1:32635d2:      * @param feature Non-null to throw an exception, null to return the 
1:32635d2:      *                state of the version match.
1:32635d2:      *
1:32635d2:      * @exception  StandardException 
1:32635d2:      *             not implemented exception is thrown
1:32635d2:      */
1:32635d2: 	public boolean checkVersion(int requiredMajorVersion, 
1:32635d2:                                 int requiredMinorVersion, 
1:32635d2:                                 String feature) 
1:32635d2:         throws StandardException
1:32635d2:     {
1:32635d2:         // nothing to do for read only databases; 
1:32635d2:         throw StandardException.newException(
1:32635d2:                   SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:32635d2:     }
1:eac0369: 
1:c414a36:     /** Replication not applicable on readonly databases 
1:c414a36:      * @exception StandardException always thrown, indicating that
1:c414a36:      * ReadOnly databases can not be replicated
1:c414a36:      */
1:c414a36:     public void startReplicationMasterRole(MasterFactory masterFactory)
1:c414a36:         throws StandardException {
1:c414a36:         throw StandardException.newException(
1:b9c57d5:                   SQLState.LOGMODULE_DOES_NOT_SUPPORT_REPLICATION);
1:c414a36:     }
1:d3d292e:     
1:d3d292e:     /**
1:d3d292e:      * Replication not applicable on readonly databases.
1:d3d292e:      *
1:d3d292e:      * @return false always since replication is not applicable here.
1:d3d292e:      */
1:d3d292e:     
1:d3d292e:     public boolean inReplicationMasterMode() {
1:d3d292e:         return false;
1:d3d292e:     }
1:c414a36: 
1:c414a36:     /** Replication not applicable on readonly databases */
1:c414a36:     public void stopReplicationMasterRole() {
1:c414a36:     }
1:c414a36: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:9496f49
/////////////////////////////////////////////////////////////////////////
1:     /** Not applicable in readonly databases */
1:     public void createDataWarningFile() throws StandardException {
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c6892a1
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException functionality not implemented
/////////////////////////////////////////////////////////////////////////
1: 		Get JBMS properties relevant to the log factory
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:89a6625
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets whether the database is encrypted.
1:      * <p>
1:      * Read-only database can not be re-encrypted, nothing to do in this case.
1:     public void setDatabaseEncrypted(boolean isEncrypted, boolean flushLog)
author:Jorgen Loland
-------------------------------------------------------------------------------
commit:9cc8ad0
/////////////////////////////////////////////////////////////////////////
1: 	/** Not applicable in readonly databases */
1: 	public void setRawStoreFactory(RawStoreFactory rsf) {
1: 	}
1: 
1: 	public void recover(DataFactory dataFactory,
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:a292c89
/////////////////////////////////////////////////////////////////////////
1: 	 *	Perform a checkpoint during rollforward recovery.
1:      * 
1:      * @throws org.apache.derby.iapi.error.StandardException 
1:      */
1: 	public void checkpointInRFR(LogInstant cinstant, long redoLWM, long undoLWM,
commit:d3d292e
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Replication not applicable on readonly databases.
1:      *
1:      * @return false always since replication is not applicable here.
1:      */
1:     
1:     public boolean inReplicationMasterMode() {
1:         return false;
1:     }
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.replication.master.MasterFactory;
commit:29fd25c
/////////////////////////////////////////////////////////////////////////
1: 	public long getFirstUnflushedInstantAsLong() {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 		}
1: 		return LogCounter.INVALID_LOG_INSTANT;
1: 	}
1: 
commit:b9c57d5
/////////////////////////////////////////////////////////////////////////
1:                   SQLState.LOGMODULE_DOES_NOT_SUPPORT_REPLICATION);
commit:c414a36
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.replication.master.MasterFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Replication not applicable on readonly databases 
1:      * @exception StandardException always thrown, indicating that
1:      * ReadOnly databases can not be replicated
1:      */
1:     public void startReplicationMasterRole(MasterFactory masterFactory)
1:         throws StandardException {
1:         throw StandardException.newException(
0:                   SQLState.CANNOT_REPLICATE_READONLY_DATABASE);
1:     }
1: 
1:     /** Replication not applicable on readonly databases */
1:     public void stopReplicationMasterRole() {
1:     }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby error policy
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:9e2a749
/////////////////////////////////////////////////////////////////////////
0:     public void setDatabaseEncrypted(boolean flushLog)
commit:047a763
/////////////////////////////////////////////////////////////////////////
0:     public void setDatabaseEncrypted()
1:     {
1: 
1:      * set up a new log file to start writing 
1:      * the log records into the new log file 
1:      * after this call.
1:      *
1:      * <P>MT - synchronization provided by caller - RawStore boot,
1:      * This method is called while re-encrypting the database 
1:      * at databse boot time. 
1:      *
1:      * Read-only database can not be reencrypted, 
1:      * nothing to do in this case. 
1:     public void startNewLogFile() throws StandardException 
1:     {
1:     /*
1:      * find if the checkpoint is in the last log file. 
1:      *
1:      * <P>MT - synchronization provided by caller - RawStore boot,
1:      * This method is called only if a crash occured while 
1:      * re-encrypting the database at boot time. 
1: 
1:      * Read-only database can not be re-encrypted, 
1:      * nothing to do in this case. 
1:      */
1:     public boolean isCheckpointInLastLogFile() 
1:         throws StandardException 
1:     {
1:         // nothing to do for a read-only database. 
1:         return false;
1:     }
1:     
1:     /*
1:      * delete the log file after the checkpoint. 
1:      *
1:      * <P>MT - synchronization provided by caller - RawStore boot,
1:      * This method is called only if a crash occured while 
1:      * re-encrypting the database at boot time. 
1:      *
1:      * Read-only database can not be re-encrypted, 
1:      * nothing to do in this case. 
1:      */
1:     public void deleteLogFileAfterCheckpointLogFile() 
1:         throws StandardException 
1:     {
1:         // nothing to do for a read-only database. 
1:     }
1: 
1: 
1: 
commit:32635d2
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      *  Check to see if a database has been upgraded to the required
1:      *  level in order to use a store feature.
1:      *
1:      * This method is generally used to prevent writes to 
1:      * data/log file by a particular store feature until the 
1:      * database is upgraded to the required version. 
1:      * In read-only database writes are not allowed, so nothing to do
1:      * for this method in this implementation of the log factory.
1:      *
1:      * @param requiredMajorVersion  required database Engine major version
1:      * @param requiredMinorVersion  required database Engine minor version
1:      * @param feature Non-null to throw an exception, null to return the 
1:      *                state of the version match.
1:      *
1:      * @exception  StandardException 
1:      *             not implemented exception is thrown
1:      */
1: 	public boolean checkVersion(int requiredMajorVersion, 
1:                                 int requiredMinorVersion, 
1:                                 String feature) 
1:         throws StandardException
1:     {
1:         // nothing to do for read only databases; 
1:         throw StandardException.newException(
1:                   SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1: 
1:     /*
0:      * Set that the database is encrypted. Read-only database can not 
0:      * be reencrypted, nothing to do in this case. 
1:      */
0:     public void setDatabaseEncrypted() {
1: 
1:         // nothing to do for a read-only database.
1:     }
1: 
1:     /*
0:      * setup log for encryption. Read-only database can not 
0:      * be reencrypted, nothing to do in this case. 
1:      */
0:     public void setupLogEncryption() throws StandardException {
1:         // nothing to do for a read-only database. 
1:     }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bf643fd
/////////////////////////////////////////////////////////////////////////
1: 	 * There are no log files to backup for  read  only databases, nothing to be
1:      * done here. 
1:      * @param toDir - location where the log files should be copied to.
1:      * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 	/* 
1:      * There are no log files to backup for read only databases, 
1:      * nothing to be done here. 
1:      *
1:      * @param toDir - location where the log files should be copied to.
1:      * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * Log backup is not started for for read only databases, no work to do
1:      * here.
commit:25f99f5
/////////////////////////////////////////////////////////////////////////
1: 		
1: 	/*
0: 	 * start the transaction log backup, the transaction log is  is required
0: 	 * to bring the database to the consistent state on restore. 
0: 	 * copies the log control information , active log files to the given 
0: 	 * backup directory and marks that backup is in progress.
0: 	 @param toDir - location where the log files should be copied to.
0: 	 @return true if log files copy is  successful
0: 	 @exception StandardException - encounter exception while doing checkpoint.
1: 	*/
1: 	public void startLogBackup(File toDir) throws StandardException
1: 		// nothing to do for read only databases.
1: 	}
1: 
1: 	
1: 	/*
0: 	 * copy all the log files that has to go into the backup directory
0: 	 * and mark that backup has come to an end. 
0: 	 @param toDir - location where the log files should be copied to.
0: 	 @return true if log files copy is  successful
0: 	 @exception StandardException - encounter exception while doing checkpoint.
1: 	*/
1: 	public void endLogBackup(File toDir) throws StandardException
1: 	{
1: 		// nothing to do for read only databases.
1: 	}
1: 
1: 	
1: 	/*
0: 	 * Abort any activity related to backup in the log factory.
0: 	 * Backup is not in progress any more, it failed for some reason.
1: 	 **/
1: 	public void abortLogBackup()
1: 	{
1: 		// nothing to do for read only databases.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.log.ReadOnly
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.monitor.ModuleSupportable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.services.property.PersistentSet;
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.ScanHandle;
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.log.Logger;
1: import org.apache.derby.iapi.store.raw.log.LogScan;
1: 
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.iapi.store.access.DatabaseInstant;
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.Properties;
1: import java.io.File;
1: 
1: /**
1: 	A read-only version of the log factory.
1: 	It doesn't do anything, it doesn't check that
1: 	the database needs recovery or not.
1: 	<P>
1: 	It doesn't handle undo.  No recovery.
1: 
1: 	<P>Multithreading considerations:<BR>
1: 	This class must be MT-safe.
1: */
1: 
1: public class ReadOnly implements LogFactory, ModuleSupportable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private String logArchiveDirectory = null;
1: 
1: 	/* 
1: 	** Methods of Log Factory
1: 	*/
1: 
1: 	public Logger getLogger() {
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	  MT - not needed, no work is done
0: 	  @exception StandardException Cloudscape Standard Error Policy
1: 	*/
0: 	public void recover(RawStoreFactory rawStoreFactory,
1: 						DataFactory dataFactory,
1: 						TransactionFactory transactionFactory)
1: 		 throws StandardException
1: 	{
1: 		if (transactionFactory != null)
1: 			transactionFactory.useTransactionTable((Formatable)null);
1: 	}
1: 
1: 	/**
1: 	  MT - not needed, no work is done
1: 	*/
1: 	public boolean checkpoint(RawStoreFactory rawStoreFactory,
1: 							  DataFactory dataFactory,
1: 							  TransactionFactory transactionFactory,
1: 							  boolean wait)
1: 	{
1: 		return true;
1: 	}
1: 
1: 	public StandardException markCorrupt(StandardException originalError) {
1: 		return originalError;
1: 	}
1: 
1: 	public void flush(LogInstant where) throws StandardException {
1: 	}
1: 
1: 	/*
1: 	** Methods of ModuleControl
1: 	*/
1: 
1: 	public boolean canSupport(Properties startParams) {
1: 
1: 		String runtimeLogAttributes = startParams.getProperty(LogFactory.RUNTIME_ATTRIBUTES);
1: 		if (runtimeLogAttributes == null)
1: 			return false;
1: 
1: 		return runtimeLogAttributes.equals(LogFactory.RT_READONLY);
1: 	}
1: 
1: 	/*
1: 	 * truncation point support (not supported)
1: 	 */
1: 
1: 	public LogInstant setTruncationLWM(UUID name,
1: 									   LogInstant instant,
1: 									   RawStoreFactory rawStoreFactory, 
1: 									  TransactionFactory transFactory)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 
1: 	}
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	*/
1: 	public void setTruncationLWM(UUID name, LogInstant instant) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	*/
1: 	public void removeTruncationLWM(UUID name,
1: 							 RawStoreFactory rawStoreFactory, 
1: 							 TransactionFactory transFactory)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	*/
1: 	public LogInstant getTruncationLWM(UUID name) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	*/
1: 	public void removeTruncationLWM(UUID name) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	*/
1: 	public ScanHandle openFlushedScan(DatabaseInstant i, int groupsIWant)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	*/
1: 	public LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 	/**
1: 	  */
1:     public LogInstant getFirstUnflushedInstant()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1: 		return null;
1: 	}
1: 
1: 	/**
0: 	  @exception StandardException functionality not implmented
1: 	  */
1: 	public LogScan openForwardsFlushedScan(LogInstant startAt)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("functionality not implemented");
1: 
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
1: 	/**
1: 	 * Backup restore - stop sending log record to the log stream
0: 	 * @exception StandardException Standard Cloudscape error policy
1: 	 */
1: 	public void freezePersistentStore() throws StandardException
1: 	{
1: 		// read only, do nothing
1: 	}
1: 
1: 	/**
1: 	 * Backup restore - start sending log record to the log stream
0: 	 * @exception StandardException Standard Cloudscape error policy
1: 	 */
1: 	public void unfreezePersistentStore() throws StandardException
1: 	{
1: 		// read only, do nothing
1: 	}
1: 
1: 	/**
1: 	 * Backup restore - is the log being archived to some directory?
1: 	 * if RawStore.LOG_ARCHIVAL_DIRECTORY is set to some value, that means the
1: 	 * log is meant to be archived.  Else, log not archived.
1: 	 */
1: 	public boolean logArchived()
1: 	{
1: 		return (logArchiveDirectory != null);
1: 	}
1: 
1: 	/**
0: 		Get JBMS properties relavent to the log factory
1: 	 */
1: 	public void getLogFactoryProperties(PersistentSet set) 
1: 	{
1: 		// do nothing
1: 	}
1: 	
1: 	public StorageFile getLogDirectory()
1: 	{
1: 		return null;
1: 	}
1: 
1: 	public String getCanonicalLogPath()
1: 	{
1: 		return null;
1: 	}
1: 
1: 	
1: 	//roll-forward recovery support routines
1: 	//Nothing to be done for read only databases
1: 	public void enableLogArchiveMode()
1: 	{
1: 		//do nothing
1: 	}
1: 
1: 	public void disableLogArchiveMode()
1: 	{
1: 		//do nothing
1: 	}
1: 
1: 	//this function is suppose to delete all the logs 
1: 	//before this call that are not active logs.
1: 	public void deleteOnlineArchivedLogFiles()
1: 	{
1: 		//do nothing
1: 	}
1: 
1: 
1: 	//Is the transaction in rollforward recovery
1: 	public boolean inRFR()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**	
0: 		perform a  checkpoint during rollforward recovery
1: 	*/
0: 	public void checkpointInRFR(LogInstant cinstant, long redoLWM, 
1: 								DataFactory df) throws StandardException
1: 	{
1: 		//do nothing
1: 	}
1: 
0: 	public boolean copyActiveLogFiles(File toDir) throws StandardException
1: 	{
1: 		//do nothing
1: 		return false;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.log;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.monitor.ModuleSupportable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.property.PersistentSet;
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.ScanHandle;
0: import org.apache.derby.iapi.store.raw.log.LogFactory;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.log.Logger;
0: import org.apache.derby.iapi.store.raw.log.LogScan;
0: 
0: import org.apache.derby.iapi.store.raw.data.DataFactory;
0: import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.xact.TransactionId;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.iapi.store.access.DatabaseInstant;
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Properties;
0: import java.io.File;
0: 
0: /**
0: 	A read-only version of the log factory.
0: 	It doesn't do anything, it doesn't check that
0: 	the database needs recovery or not.
0: 	<P>
0: 	It doesn't handle undo.  No recovery.
0: 
0: 	<P>Multithreading considerations:<BR>
0: 	This class must be MT-safe.
0: */
0: 
0: public class ReadOnly implements LogFactory, ModuleSupportable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private String logArchiveDirectory = null;
0: 
0: 	/* 
0: 	** Methods of Log Factory
0: 	*/
0: 
0: 	public Logger getLogger() {
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	  MT - not needed, no work is done
0: 	  @exception StandardException Cloudscape Standard Error Policy
0: 	*/
0: 	public void recover(RawStoreFactory rawStoreFactory,
0: 						DataFactory dataFactory,
0: 						TransactionFactory transactionFactory)
0: 		 throws StandardException
0: 	{
0: 		if (transactionFactory != null)
0: 			transactionFactory.useTransactionTable((Formatable)null);
0: 	}
0: 
0: 	/**
0: 	  MT - not needed, no work is done
0: 	*/
0: 	public boolean checkpoint(RawStoreFactory rawStoreFactory,
0: 							  DataFactory dataFactory,
0: 							  TransactionFactory transactionFactory,
0: 							  boolean wait)
0: 	{
0: 		return true;
0: 	}
0: 
0: 	public StandardException markCorrupt(StandardException originalError) {
0: 		return originalError;
0: 	}
0: 
0: 	public void flush(LogInstant where) throws StandardException {
0: 	}
0: 
0: 	/*
0: 	** Methods of ModuleControl
0: 	*/
0: 
0: 	public boolean canSupport(Properties startParams) {
0: 
0: 		String runtimeLogAttributes = startParams.getProperty(LogFactory.RUNTIME_ATTRIBUTES);
0: 		if (runtimeLogAttributes == null)
0: 			return false;
0: 
0: 		return runtimeLogAttributes.equals(LogFactory.RT_READONLY);
0: 	}
0: 
0: 	/*
0: 	 * truncation point support (not supported)
0: 	 */
0: 
0: 	public LogInstant setTruncationLWM(UUID name,
0: 									   LogInstant instant,
0: 									   RawStoreFactory rawStoreFactory, 
0: 									  TransactionFactory transFactory)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 
0: 	}
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	*/
0: 	public void setTruncationLWM(UUID name, LogInstant instant) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	*/
0: 	public void removeTruncationLWM(UUID name,
0: 							 RawStoreFactory rawStoreFactory, 
0: 							 TransactionFactory transFactory)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	*/
0: 	public LogInstant getTruncationLWM(UUID name) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	*/
0: 	public void removeTruncationLWM(UUID name) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	*/
0: 	public ScanHandle openFlushedScan(DatabaseInstant i, int groupsIWant)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	*/
0: 	public LogScan openForwardsScan(LogInstant startAt,LogInstant stopAt)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 	/**
0: 	  */
0:     public LogInstant getFirstUnflushedInstant()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	  @exception StandardException functionality not implmented
0: 	  */
0: 	public LogScan openForwardsFlushedScan(LogInstant startAt)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("functionality not implemented");
0: 
0:         throw StandardException.newException(
0:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
0: 	}
0: 
0: 	/**
0: 	 * Backup restore - stop sending log record to the log stream
0: 	 * @exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public void freezePersistentStore() throws StandardException
0: 	{
0: 		// read only, do nothing
0: 	}
0: 
0: 	/**
0: 	 * Backup restore - start sending log record to the log stream
0: 	 * @exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public void unfreezePersistentStore() throws StandardException
0: 	{
0: 		// read only, do nothing
0: 	}
0: 
0: 	/**
0: 	 * Backup restore - is the log being archived to some directory?
0: 	 * if RawStore.LOG_ARCHIVAL_DIRECTORY is set to some value, that means the
0: 	 * log is meant to be archived.  Else, log not archived.
0: 	 */
0: 	public boolean logArchived()
0: 	{
0: 		return (logArchiveDirectory != null);
0: 	}
0: 
0: 	/**
0: 		Get JBMS properties relavent to the log factory
0: 	 */
0: 	public void getLogFactoryProperties(PersistentSet set) 
0: 	{
0: 		// do nothing
0: 	}
0: 	
0: 	public StorageFile getLogDirectory()
0: 	{
0: 		return null;
0: 	}
0: 
0: 	public String getCanonicalLogPath()
0: 	{
0: 		return null;
0: 	}
0: 
0: 	
0: 	//roll-forward recovery support routines
0: 	//Nothing to be done for read only databases
0: 	public void enableLogArchiveMode()
0: 	{
0: 		//do nothing
0: 	}
0: 
0: 	public void disableLogArchiveMode()
0: 	{
0: 		//do nothing
0: 	}
0: 
0: 	//this function is suppose to delete all the logs 
0: 	//before this call that are not active logs.
0: 	public void deleteOnlineArchivedLogFiles()
0: 	{
0: 		//do nothing
0: 	}
0: 
0: 
0: 	//Is the transaction in rollforward recovery
0: 	public boolean inRFR()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**	
0: 		perform a  checkpoint during rollforward recovery
0: 	*/
0: 	public void checkpointInRFR(LogInstant cinstant, long redoLWM, 
0: 								DataFactory df) throws StandardException
0: 	{
0: 		//do nothing
0: 	}
0: 
0: 	public boolean copyActiveLogFiles(File toDir) throws StandardException
0: 	{
0: 		//do nothing
0: 		return false;
0: 	}
0: }
============================================================================