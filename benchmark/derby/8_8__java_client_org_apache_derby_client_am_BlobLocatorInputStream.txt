1:1a66a1a: /*
1:a8908bd:  
1:1a66a1a:    Derby - Class org.apache.derby.client.am.BlobLocatorInputStream
7:1a66a1a:  
1:1a66a1a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1a66a1a:    contributor license agreements.  See the NOTICE file distributed with
1:1a66a1a:    this work for additional information regarding copyright ownership.
1:1a66a1a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1a66a1a:    (the "License"); you may not use this file except in compliance with
1:1a66a1a:    the License.  You may obtain a copy of the License at
1:1a66a1a:  
1:1a66a1a:       http://www.apache.org/licenses/LICENSE-2.0
1:1a66a1a:  
1:1a66a1a:    Unless required by applicable law or agreed to in writing, software
1:1a66a1a:    distributed under the License is distributed on an "AS IS" BASIS,
1:1a66a1a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a66a1a:    See the License for the specific language governing permissions and
1:1a66a1a:    limitations under the License.
1:1a66a1a:  
4:1a66a1a:  */
1:c6ed70e: 
1:1a66a1a: package org.apache.derby.client.am;
1:1a66a1a: 
1:1a66a1a: import java.io.IOException;
1:69e3d06: import java.io.InputStream;
1:1a66a1a: 
1:05d610e: import org.apache.derby.shared.common.sanity.SanityManager;
1:1a66a1a: 
1:c6ed70e: /**
1:1a66a1a:  * An <code>InputStream</code> that will use an locator to fetch the
1:1a66a1a:  * Blob value from the server.  
1:1a66a1a:  * <p>
1:1a66a1a:  * Closing a <code>ByteArrayInputStream</code> has no effect. The methods in
1:1a66a1a:  * this class can be called after the stream has been closed without
1:1a66a1a:  * generating an <code>IOException</code>.
1:1a66a1a:  * <p>
1:1a66a1a:  * This <code>InputStream</code> implementation is pretty basic.  No
1:69e3d06:  * buffering of data is done.  Hence, for efficiency #read(byte[])
1:1a66a1a:  * should be used instead of #read().  Marks are not supported, but it
1:1a66a1a:  * should be pretty simple to extend the implementation to support
1:1a66a1a:  * this.  A more efficient skip implementation should also be
1:1a66a1a:  * straight-forward.
1:1a66a1a:  */
1:0326967: class BlobLocatorInputStream extends InputStream
1:1a66a1a: {
1:1a66a1a: 
8:1a66a1a:     /**
1:1a66a1a:      * Create an <code>InputStream</code> for reading the
1:c720ff6:      * <code>Blob</code> value represented by the given locator based
1:1a66a1a:      * <code>Blob</code> object.
1:1a66a1a:      * @param connection connection to be used to read the
1:1a66a1a:      *        <code>Blob</code> value from the server
1:1a66a1a:      * @param blob <code>Blob</code> object that contains locator for
1:c720ff6:      *        the <code>Blob</code> value on the server.
1:c720ff6:      * @throws SqlException if an error occurs when obtaining the
1:c720ff6:      *         length of the <code>Blob</code>.
1:1a66a1a:      */
1:0326967:     BlobLocatorInputStream(ClientConnection connection, ClientBlob blob)
1:c720ff6:         throws SqlException
1:1a66a1a:     {        
1:068071b:         if (SanityManager.DEBUG) {
1:05d610e:             SanityManager.ASSERT(blob.isLocator());
4:1a66a1a:         }
1:c720ff6:         this.connection = connection;
1:1a66a1a:         this.blob = blob;
1:c720ff6:         this.currentPos = 1;
1:c6ed70e:         
1:a8908bd:         //In this case a subset of the Blob has
1:a8908bd:         //not been requested for. We set maxPos 
1:a8908bd:         //to -1 and instead will call 
1:a8908bd:         //blob.sqlLength() each time we want 
1:a8908bd:         //the maximum length.
1:a8908bd:         this.maxPos = -1;
1:1a66a1a:     }
1:1a66a1a:     
1:c6ed70e:     /**
1:c720ff6:      * Create an <code>InputStream</code> for reading the
1:c720ff6:      * <code>Blob</code> value represented by the given locator based
1:c720ff6:      * <code>Blob</code> object.
1:c720ff6:      * @param connection connection to be used to read the
1:c720ff6:      *        <code>Blob</code> value from the server
1:c720ff6:      * @param blob <code>Blob</code> object that contains locator for
1:c720ff6:      *        the <code>Blob</code> value on the server.
1:fb60d06:      * @param position the position in the <code>Blob</code> of the first
1:c720ff6:      *        byte to read.  
1:c720ff6:      * @param length the maximum number of bytes to read from
1:c720ff6:      *        the <code>Blob</code>.
1:c720ff6:      * @throws SqlException if an error occurs when obtaining the
1:c720ff6:      *         length of the <code>Blob</code>.
1:c720ff6:      */
1:0326967:     BlobLocatorInputStream(ClientConnection connection, ClientBlob blob,
1:c720ff6:                                   long position, long length) 
1:c720ff6:         throws SqlException
1:c720ff6:     {    
1:f7823f7:         if (SanityManager.DEBUG) {
1:c720ff6:             SanityManager.ASSERT(blob.isLocator());
1:c720ff6:         }
1:c720ff6:         this.connection = connection;
1:c720ff6:         this.blob = blob;
1:c720ff6:         this.currentPos = position;
1:a8908bd:         if (length != -1) {//verify if length is -1
1:a8908bd:             this.maxPos = Math.min(blob.sqlLength(), position + length - 1);
1:a8908bd:         }
1:a8908bd:         else {
1:a8908bd:             this.maxPos = -1;
1:a8908bd:         }
1:a8908bd:     }
1:c720ff6:     
1:c720ff6:     /**
1:c720ff6:      * @see java.io.InputStream#read()
1:c6ed70e:      *
1:1a66a1a:      * This method fetches one byte at a time from the server. For more 
1:1a66a1a:      * efficient retrieval, use #read(byte[]).
1:c6ed70e:      */    
1:c720ff6:     public int read() throws IOException
1:1a66a1a:     {
1:1a66a1a:         byte[] bytes = readBytes(1);
1:1a66a1a:         if (bytes.length == 0) { // EOF
1:1a66a1a:             return -1;
1:c720ff6:         } else {
1:1952e60:             // convert byte in range [-128,127] to int in range [0,255]
1:1952e60:             return bytes[0] & 0xff;
1:c6ed70e:         }
1:1a66a1a:     }
1:c6ed70e:     
1:c720ff6:     /**
1:1a66a1a:      * @see java.io.InputStream#read(byte[], int, int)
1:c6ed70e:      */
1:1a66a1a:     public int read(byte[] b, int off, int len) throws IOException 
1:1a66a1a:     {
1:c720ff6:         if (len == 0) return 0;
1:1a66a1a:         if ((off < 0) || (len < 0) || (off+len > b.length)) {
1:1a66a1a:             throw new IndexOutOfBoundsException();
1:1a66a1a:         }
1:1a66a1a:         
1:c720ff6:         byte[] bytes = readBytes(len);
1:1a66a1a:         if (bytes.length == 0) { // EOF
1:1a66a1a:             return -1;
2:1a66a1a:         } else {
1:1a66a1a:             System.arraycopy(bytes, 0, b, off, bytes.length);
1:c720ff6:             return bytes.length;
1:1a66a1a:         }
1:1a66a1a:     }
1:1a66a1a: 
1:c720ff6:     /**
1:c720ff6:      * Read the next <code>len</code> bytes of the <code>Blob</code>
1:1a66a1a:      * value from the server.
2:1a66a1a:      * 
1:1a66a1a:      * @param len number of bytes to read
1:1a66a1a:      * @throws java.io.IOException Wrapped SqlException if reading
1:c720ff6:      *         from server fails.
1:1a66a1a:      * @return <code>byte[]</code> containing the read bytes
1:1a66a1a:      */
1:1a66a1a:     private byte[] readBytes(int len) throws IOException
1:1a66a1a:     {
1:c6ed70e:         try {
1:a8908bd:             //stores the actual length that can be read
1:a8908bd:             //based on the value of the current position
1:a8908bd:             //in the stream(currentPos) and the length of
1:a8908bd:             //the stream.
1:a8908bd:             int actualLength = -1;
1:a8908bd:             //check if maxPos has been set and calculate actualLength
1:a8908bd:             //based on that.
1:a8908bd:             if(maxPos != -1) {
1:a8908bd:                 //maxPos has been set. use maxPos to calculate the
1:a8908bd:                 //actual length based on the value set for maxPos.
1:a8908bd:                 actualLength 
1:a8908bd:                     = (int )Math.min(len, maxPos - currentPos + 1);
1:c6ed70e:             }
1:a8908bd:             else {
1:a8908bd:                 //The subset of the Blob was not requested for
1:a8908bd:                 //hence maxPos is -1. Here we use blob.sqllength
1:a8908bd:                 //instead.
1:a8908bd:                 actualLength 
1:a8908bd:                     = (int )Math.min(len, blob.sqlLength() - currentPos + 1);
1:c6ed70e:             }
1:1a66a1a:             byte[] result = connection.locatorProcedureCall()
1:1a66a1a:                 .blobGetBytes(blob.getLocator(), currentPos, actualLength);
1:c720ff6:             currentPos += result.length;
1:1a66a1a:             return result;       
1:1a66a1a:         } catch (SqlException ex) {
1:b862050:             // Passing cause as ctor argument ensures that the IOException 
1:b862050:             // inherits the cause's message, (unlike invoking initCause() on a 
1:b862050:             // default-constructed IOException).
1:b862050:             throw new IOException(ex);
1:c6ed70e:         }
1:c6ed70e:     }
1:c6ed70e: 
1:c6ed70e:     /**
1:1a66a1a:      * Connection used to read Blob from server.
1:1a66a1a:      */
1:69e3d06:     private final ClientConnection connection;
1:1a66a1a:     
1:c720ff6:     /**
1:1a66a1a:      * The Blob to be accessed.
1:1a66a1a:      */
1:69e3d06:     private final ClientBlob blob;
1:1a66a1a: 
1:c720ff6:     /**
1:1a66a1a:      * Current position in the underlying Blob.
1:1a66a1a:      * Blobs are indexed from 1
1:c720ff6:      */
1:c720ff6:     private long currentPos;
1:c720ff6: 
1:c720ff6:     /**
1:c720ff6:      * Position in Blob where to stop reading.
1:d6844ab:      * maxPos starts counting from 1.
1:c6ed70e:      */
1:d6844ab:     private final long maxPos;
1:a8908bd: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:b862050
/////////////////////////////////////////////////////////////////////////
1:             // Passing cause as ctor argument ensures that the IOException 
1:             // inherits the cause's message, (unlike invoking initCause() on a 
1:             // default-constructed IOException).
1:             throw new IOException(ex);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class BlobLocatorInputStream extends InputStream
/////////////////////////////////////////////////////////////////////////
1:     BlobLocatorInputStream(ClientConnection connection, ClientBlob blob)
/////////////////////////////////////////////////////////////////////////
1:     BlobLocatorInputStream(ClientConnection connection, ClientBlob blob,
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1:  * buffering of data is done.  Hence, for efficiency #read(byte[])
0: public class BlobLocatorInputStream extends InputStream
/////////////////////////////////////////////////////////////////////////
0:     public BlobLocatorInputStream(ClientConnection connection, ClientBlob blob)
/////////////////////////////////////////////////////////////////////////
0:     public BlobLocatorInputStream(ClientConnection connection, ClientBlob blob,
/////////////////////////////////////////////////////////////////////////
1:     private final ClientConnection connection;
1:     private final ClientBlob blob;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:50f5a01
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fb60d06
/////////////////////////////////////////////////////////////////////////
1:      * @param position the position in the <code>Blob</code> of the first
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c6ed70e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.error.ExceptionUtil;
0: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Closes this input stream and releases any system resources associated
0:      * with the stream.  This will release the underlying Blob value. 
1:      *  
0:      * @throws java.io.IOException
1:      */
0:     public void close() throws IOException {
1:         try {
0:             if (blob != null  && freeBlobOnClose) {
0:                 blob.free();
1:             }
0:         } catch (SQLException ex) {
0:             if (ex.getSQLState().compareTo
0:                     (ExceptionUtil.getSQLStateFromIdentifier
0:                             (SQLState.LOB_OBJECT_INVALID)) == 0) {
0:                 // Blob has already been freed, probably because of autocommit
0:                 return;  // Ignore error
1:             }
1: 
0:             IOException ioEx = new IOException();
0:             ioEx.initCause(ex);
0:             throw ioEx;
1:         }
1:     }
1: 
1:     /**
0:      * Tell stream to free the underlying Blob when it is closed.
1:      */
0:     public void setFreeBlobOnClose() {
0:         freeBlobOnClose = true;
1:     }
/////////////////////////////////////////////////////////////////////////
1:  
1:     /**
0:      * If true, the underlying Blob will be freed when the underlying stream is
0:      * closed.  Used to implement correct behavior for streams obtained from
0:      * result sets.
1:      */
0:     private boolean freeBlobOnClose = false;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1952e60
/////////////////////////////////////////////////////////////////////////
1:             // convert byte in range [-128,127] to int in range [0,255]
1:             return bytes[0] & 0xff;
commit:d6844ab
/////////////////////////////////////////////////////////////////////////
0:     private final Connection connection;
0:     private final Blob blob;
/////////////////////////////////////////////////////////////////////////
1:      * maxPos starts counting from 1.
1:     private final long maxPos;
commit:05d610e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:             SanityManager.ASSERT(blob.isLocator());
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1:         
1:         //In this case a subset of the Blob has
1:         //not been requested for. We set maxPos 
1:         //to -1 and instead will call 
1:         //blob.sqlLength() each time we want 
1:         //the maximum length.
1:         this.maxPos = -1;
/////////////////////////////////////////////////////////////////////////
1:         if (length != -1) {//verify if length is -1
1:             this.maxPos = Math.min(blob.sqlLength(), position + length - 1);
1:         }
1:         else {
1:             this.maxPos = -1;
1:         }
/////////////////////////////////////////////////////////////////////////
1:             //stores the actual length that can be read
1:             //based on the value of the current position
1:             //in the stream(currentPos) and the length of
1:             //the stream.
1:             int actualLength = -1;
1:             //check if maxPos has been set and calculate actualLength
1:             //based on that.
1:             if(maxPos != -1) {
1:                 //maxPos has been set. use maxPos to calculate the
1:                 //actual length based on the value set for maxPos.
1:                 actualLength 
1:                     = (int )Math.min(len, maxPos - currentPos + 1);
1:             }
1:             else {
1:                 //The subset of the Blob was not requested for
1:                 //hence maxPos is -1. Here we use blob.sqllength
1:                 //instead.
1:                 actualLength 
1:                     = (int )Math.min(len, blob.sqlLength() - currentPos + 1);
1:             }
commit:c720ff6
/////////////////////////////////////////////////////////////////////////
1:      * <code>Blob</code> value represented by the given locator based
1:      *        the <code>Blob</code> value on the server.
1:      * @throws SqlException if an error occurs when obtaining the
1:      *         length of the <code>Blob</code>.
1:         throws SqlException
1:         this.connection = connection;
1:         this.currentPos = 1;
0:         this.maxPos = blob.sqlLength();
1:      * Create an <code>InputStream</code> for reading the
1:      * <code>Blob</code> value represented by the given locator based
1:      * <code>Blob</code> object.
1:      * @param connection connection to be used to read the
1:      *        <code>Blob</code> value from the server
1:      * @param blob <code>Blob</code> object that contains locator for
1:      *        the <code>Blob</code> value on the server.
0:      * @param offset the offset in the <code>Blob</code> of the first
1:      *        byte to read.  
1:      * @param length the maximum number of bytes to read from
1:      *        the <code>Blob</code>.
1:      * @throws SqlException if an error occurs when obtaining the
1:      *         length of the <code>Blob</code>.
1:      */
0:     public BlobLocatorInputStream(Connection connection, Blob blob,
1:                                   long position, long length) 
1:         throws SqlException
1:     {        
1:         SanityManager.ASSERT(blob.isLocator());
1:         this.connection = connection;
1:         this.blob = blob;
1:         this.currentPos = position;
0:         this.maxPos = Math.min(blob.sqlLength(), position + length - 1);
1:     }
1:     
1:     /**
1:      * @see java.io.InputStream#read()
1:     public int read() throws IOException
1:         } else {
1:     /**
1:         if (len == 0) return 0;
1:         byte[] bytes = readBytes(len);
1:             return bytes.length;
1:      * Read the next <code>len</code> bytes of the <code>Blob</code>
1:      *         from server fails.
0:         try {
0:                 = (int )Math.min(len, maxPos - currentPos + 1);
1:             currentPos += result.length;
0:             throw ioEx;
1:     /**
1:     /**
1:     /**
1:     private long currentPos;
1: 
1:     /**
1:      * Position in Blob where to stop reading.
1:      */
0:     private long maxPos;
commit:1a66a1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.BlobLocatorInputStream
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
0: import java.sql.CallableStatement;
0: import java.sql.SQLException;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * An <code>InputStream</code> that will use an locator to fetch the
1:  * Blob value from the server.  
1:  * <p>
1:  * Closing a <code>ByteArrayInputStream</code> has no effect. The methods in
1:  * this class can be called after the stream has been closed without
1:  * generating an <code>IOException</code>.
1:  * <p>
1:  * This <code>InputStream</code> implementation is pretty basic.  No
0:  * buffering of data is done.  Hence, for efficieny #read(byte[])
1:  * should be used instead of #read().  Marks are not supported, but it
1:  * should be pretty simple to extend the implementation to support
1:  * this.  A more efficient skip implementation should also be
1:  * straight-forward.
1:  */
0: public class BlobLocatorInputStream extends java.io.InputStream 
1: {
1: 
1:     /**
1:      * Create an <code>InputStream</code> for reading the
0:    * <code>Blob</code> value represented by the given locator based
1:      * <code>Blob</code> object.
1:      * @param connection connection to be used to read the
1:      *        <code>Blob</code> value from the server
1:      * @param blob <code>Blob</code> object that contains locator for
0:    *        the <code>Blob</code> value on the server.
1:      */
0:     public BlobLocatorInputStream(Connection connection, Blob blob) 
1:     {        
0:         SanityManager.ASSERT(blob.isLocator());
0:          this.connection = connection;
1:         this.blob = blob;
1:     }
1:     
1:     /**
0:    * @see java.io.InputStream#read()
1:      *
1:      * This method fetches one byte at a time from the server. For more 
1:      * efficient retrieval, use #read(byte[]).
1:      */    
0:   public int read() throws IOException
1:     {
1:         byte[] bytes = readBytes(1);
1:         if (bytes.length == 0) { // EOF
1:             return -1;
1:       } else {
0:             return bytes[0];
1:         }
1:     }
1:     
1:   /**
1:      * @see java.io.InputStream#read(byte[], int, int)
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException 
1:     {
0:       if (len == 0) return 0;
1:         if ((off < 0) || (len < 0) || (off+len > b.length)) {
1:             throw new IndexOutOfBoundsException();
1:         }
1:         
0:       byte[] bytes = readBytes(len);
1:         if (bytes.length == 0) { // EOF
1:             return -1;
1:         } else {
1:             System.arraycopy(bytes, 0, b, off, bytes.length);
0:           return bytes.length;
1:         }
1:     }
1: 
1:     /**
0:    * Read the next <code>len</code> bytes of the <code>Blob</code>
1:      * value from the server.
1:      * 
1:      * @param len number of bytes to read
1:      * @throws java.io.IOException Wrapped SqlException if reading
0:    *         from server fails.
1:      * @return <code>byte[]</code> containing the read bytes
1:      */
1:     private byte[] readBytes(int len) throws IOException
1:     {
0:       try {
0:             int actualLength 
0:                 = (int )Math.min(len, blob.sqlLength() - currentPos + 1);
1:             byte[] result = connection.locatorProcedureCall()
1:                 .blobGetBytes(blob.getLocator(), currentPos, actualLength);
0:           currentPos += result.length;
1:             return result;       
1:         } catch (SqlException ex) {
0:             IOException ioEx = new IOException();
0:             ioEx.initCause(ex);
0:           throw ioEx;
1:         }
1:     }
1:     
1:     
1:   /**
1:      * Connection used to read Blob from server.
1:      */
0:     private Connection connection;
1:     
1:   /**
1:      * The Blob to be accessed.
1:      */
0:     private Blob blob;
1: 
1:   /**
1:      * Current position in the underlying Blob.
1:      * Blobs are indexed from 1
1:      */
0:     private long currentPos = 1;
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f7823f7
/////////////////////////////////////////////////////////////////////////
0:     {    
1:         if (SanityManager.DEBUG) {
0:             SanityManager.ASSERT(blob.isLocator());
0:         }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:068071b
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
0:         	SanityManager.ASSERT(blob.isLocator());
0:         }
============================================================================