1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.classfile.MemberTable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.classfile;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:eac0369: import java.util.Vector;
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: class MemberTable {
1:996ca72: 	protected Vector<ClassMember> entries;
1:996ca72: 	private Hashtable<MemberTableHash,MemberTableHash> hashtable;
1:eac0369: 	private MemberTableHash	mutableMTH = null;
1:eac0369: 
1:eac0369: 	public MemberTable(int count) {
1:996ca72: 		entries = new Vector<ClassMember>(count);
1:996ca72: 		hashtable = new Hashtable<MemberTableHash,MemberTableHash>((count > 50) ? count : 50);
1:eac0369: 		mutableMTH = new MemberTableHash(null, null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void addEntry(ClassMember item) {
1:eac0369: 		MemberTableHash mth= new MemberTableHash(
1:eac0369: 									item.getName(), 
1:eac0369: 									item.getDescriptor(),
1:eac0369: 									entries.size());
1:eac0369: 		/* Add to the Vector */
1:a32eb9f: 		entries.add(item);
1:eac0369: 
1:eac0369: 		/* Add to the Hashtable */
1:eac0369: 		hashtable.put(mth, mth);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	ClassMember find(String name, String descriptor) {
1:eac0369: 
1:eac0369: 		/* Set up the mutable MTH for the search */
1:eac0369: 		mutableMTH.name = name;
1:eac0369: 		mutableMTH.descriptor = descriptor;
1:eac0369: 		mutableMTH.setHashCode();
1:eac0369: 
1:eac0369: 		/* search the hash table */
1:996ca72: 		MemberTableHash mth = hashtable.get(mutableMTH);
1:eac0369: 		if (mth == null)
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:996ca72: 		return entries.get(mth.index);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void put(ClassFormatOutput out) throws IOException {
1:eac0369: 
1:996ca72: 		Vector<ClassMember> lentries = entries;
1:eac0369: 		int count = lentries.size();
1:eac0369: 		for (int i = 0; i < count; i++) {
1:996ca72: 			lentries.get(i).put(out);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	int size() {
1:eac0369: 		return entries.size();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	int classFileSize() {
1:eac0369: 		int size = 0;
1:eac0369: 
1:996ca72: 		Vector<ClassMember> lentries = entries;
1:eac0369: 		int count = lentries.size();
1:eac0369: 		for (int i = 0; i < count; i++) {
1:996ca72: 			size += lentries.get(i).classFileSize();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return size;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: class MemberTableHash 
1:eac0369: {
1:eac0369: 	String name;
1:eac0369: 	String descriptor;
1:eac0369: 	int	   index;
1:eac0369: 	int	   hashCode;
1:eac0369: 	
1:eac0369: 	MemberTableHash(String name, String descriptor, int index)
1:eac0369: 	{
1:eac0369: 		this.name = name;
1:eac0369: 		this.descriptor = descriptor;
1:eac0369: 		this.index = index;
1:eac0369: 		/* Only set hashCode if both name and descriptor are non-null */
1:eac0369: 		if (name != null && descriptor != null)
1:eac0369: 		{
1:eac0369: 			setHashCode();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	MemberTableHash(String name, String descriptor)
1:eac0369: 	{
1:eac0369: 		this(name, descriptor, -1);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void setHashCode()
1:eac0369: 	{
1:eac0369: 		hashCode = name.hashCode() + descriptor.hashCode();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other)
1:eac0369: 	{
1:eac0369: 		MemberTableHash mth = (MemberTableHash) other;
1:eac0369: 
1:eac0369: 		if (other == null)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (name.equals(mth.name) && descriptor.equals(mth.descriptor))
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return hashCode;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1: 	protected Vector<ClassMember> entries;
1: 	private Hashtable<MemberTableHash,MemberTableHash> hashtable;
1: 		entries = new Vector<ClassMember>(count);
1: 		hashtable = new Hashtable<MemberTableHash,MemberTableHash>((count > 50) ? count : 50);
/////////////////////////////////////////////////////////////////////////
1: 		MemberTableHash mth = hashtable.get(mutableMTH);
1: 		return entries.get(mth.index);
1: 		Vector<ClassMember> lentries = entries;
1: 			lentries.get(i).put(out);
/////////////////////////////////////////////////////////////////////////
1: 		Vector<ClassMember> lentries = entries;
1: 			size += lentries.get(i).classFileSize();
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
1: 		entries.add(item);
/////////////////////////////////////////////////////////////////////////
0: 		return (ClassMember) entries.get(mth.index);
/////////////////////////////////////////////////////////////////////////
0: 			((ClassMember) lentries.get(i)).put(out);
/////////////////////////////////////////////////////////////////////////
0: 			size += ((ClassMember) lentries.get(i)).classFileSize();
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.classfile.MemberTable
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.classfile;
1: 
1: import java.io.IOException;
1: 
1: import java.util.Hashtable;
1: import java.util.Vector;
1: 
1: 
1: 
1: class MemberTable {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	protected Vector entries;
0: 	private Hashtable hashtable;
1: 	private MemberTableHash	mutableMTH = null;
1: 
1: 	public MemberTable(int count) {
0: 		entries = new Vector(count);
0: 		hashtable = new Hashtable((count > 50) ? count : 50);
1: 		mutableMTH = new MemberTableHash(null, null);
1: 	}
1: 
1: 	void addEntry(ClassMember item) {
1: 		MemberTableHash mth= new MemberTableHash(
1: 									item.getName(), 
1: 									item.getDescriptor(),
1: 									entries.size());
1: 		/* Add to the Vector */
0: 		entries.addElement(item);
1: 
1: 		/* Add to the Hashtable */
1: 		hashtable.put(mth, mth);
1: 	}
1: 
1: 	ClassMember find(String name, String descriptor) {
1: 
1: 		/* Set up the mutable MTH for the search */
1: 		mutableMTH.name = name;
1: 		mutableMTH.descriptor = descriptor;
1: 		mutableMTH.setHashCode();
1: 
1: 		/* search the hash table */
0: 		MemberTableHash mth = (MemberTableHash) hashtable.get(mutableMTH);
1: 		if (mth == null)
1: 		{
1: 			return null;
1: 		}
1: 
0: 		return (ClassMember) entries.elementAt(mth.index);
1: 	}
1: 
1: 	void put(ClassFormatOutput out) throws IOException {
1: 
0: 		Vector lentries = entries;
1: 		int count = lentries.size();
1: 		for (int i = 0; i < count; i++) {
0: 			((ClassMember) lentries.elementAt(i)).put(out);
1: 		}
1: 	}
1: 
1: 	int size() {
1: 		return entries.size();
1: 	}
1: 
1: 	int classFileSize() {
1: 		int size = 0;
1: 
0: 		Vector lentries = entries;
1: 		int count = lentries.size();
1: 		for (int i = 0; i < count; i++) {
0: 			size += ((ClassMember) lentries.elementAt(i)).classFileSize();
1: 		}
1: 
1: 		return size;
1: 	}
1: }
1: 
1: class MemberTableHash 
1: {
1: 	String name;
1: 	String descriptor;
1: 	int	   index;
1: 	int	   hashCode;
1: 	
1: 	MemberTableHash(String name, String descriptor, int index)
1: 	{
1: 		this.name = name;
1: 		this.descriptor = descriptor;
1: 		this.index = index;
1: 		/* Only set hashCode if both name and descriptor are non-null */
1: 		if (name != null && descriptor != null)
1: 		{
1: 			setHashCode();
1: 		}
1: 	}
1: 
1: 	MemberTableHash(String name, String descriptor)
1: 	{
1: 		this(name, descriptor, -1);
1: 	}
1: 
1: 	void setHashCode()
1: 	{
1: 		hashCode = name.hashCode() + descriptor.hashCode();
1: 	}
1: 
1: 	public boolean equals(Object other)
1: 	{
1: 		MemberTableHash mth = (MemberTableHash) other;
1: 
1: 		if (other == null)
1: 		{
1: 			return false;
1: 		}
1: 
1: 		if (name.equals(mth.name) && descriptor.equals(mth.descriptor))
1: 		{
1: 			return true;
1: 		}
1: 		else
1: 		{
1: 			return false;
1: 		}
1: 	}
1: 
1: 	public int hashCode()
1: 	{
1: 		return hashCode;
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.classfile;
0: 
0: import java.io.IOException;
0: 
0: import java.util.Hashtable;
0: import java.util.Vector;
0: 
0: 
0: 
0: class MemberTable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	protected Vector entries;
0: 	private Hashtable hashtable;
0: 	private MemberTableHash	mutableMTH = null;
0: 
0: 	public MemberTable(int count) {
0: 		entries = new Vector(count);
0: 		hashtable = new Hashtable((count > 50) ? count : 50);
0: 		mutableMTH = new MemberTableHash(null, null);
0: 	}
0: 
0: 	void addEntry(ClassMember item) {
0: 		MemberTableHash mth= new MemberTableHash(
0: 									item.getName(), 
0: 									item.getDescriptor(),
0: 									entries.size());
0: 		/* Add to the Vector */
0: 		entries.addElement(item);
0: 
0: 		/* Add to the Hashtable */
0: 		hashtable.put(mth, mth);
0: 	}
0: 
0: 	ClassMember find(String name, String descriptor) {
0: 
0: 		/* Set up the mutable MTH for the search */
0: 		mutableMTH.name = name;
0: 		mutableMTH.descriptor = descriptor;
0: 		mutableMTH.setHashCode();
0: 
0: 		/* search the hash table */
0: 		MemberTableHash mth = (MemberTableHash) hashtable.get(mutableMTH);
0: 		if (mth == null)
0: 		{
0: 			return null;
0: 		}
0: 
0: 		return (ClassMember) entries.elementAt(mth.index);
0: 	}
0: 
0: 	void put(ClassFormatOutput out) throws IOException {
0: 
0: 		Vector lentries = entries;
0: 		int count = lentries.size();
0: 		for (int i = 0; i < count; i++) {
0: 			((ClassMember) lentries.elementAt(i)).put(out);
0: 		}
0: 	}
0: 
0: 	int size() {
0: 		return entries.size();
0: 	}
0: 
0: 	int classFileSize() {
0: 		int size = 0;
0: 
0: 		Vector lentries = entries;
0: 		int count = lentries.size();
0: 		for (int i = 0; i < count; i++) {
0: 			size += ((ClassMember) lentries.elementAt(i)).classFileSize();
0: 		}
0: 
0: 		return size;
0: 	}
0: }
0: 
0: class MemberTableHash 
0: {
0: 	String name;
0: 	String descriptor;
0: 	int	   index;
0: 	int	   hashCode;
0: 	
0: 	MemberTableHash(String name, String descriptor, int index)
0: 	{
0: 		this.name = name;
0: 		this.descriptor = descriptor;
0: 		this.index = index;
0: 		/* Only set hashCode if both name and descriptor are non-null */
0: 		if (name != null && descriptor != null)
0: 		{
0: 			setHashCode();
0: 		}
0: 	}
0: 
0: 	MemberTableHash(String name, String descriptor)
0: 	{
0: 		this(name, descriptor, -1);
0: 	}
0: 
0: 	void setHashCode()
0: 	{
0: 		hashCode = name.hashCode() + descriptor.hashCode();
0: 	}
0: 
0: 	public boolean equals(Object other)
0: 	{
0: 		MemberTableHash mth = (MemberTableHash) other;
0: 
0: 		if (other == null)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		if (name.equals(mth.name) && descriptor.equals(mth.descriptor))
0: 		{
0: 			return true;
0: 		}
0: 		else
0: 		{
0: 			return false;
0: 		}
0: 	}
0: 
0: 	public int hashCode()
0: 	{
0: 		return hashCode;
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================