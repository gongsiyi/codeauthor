1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.VirtualColumnNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A VirtualColumnNode represents a virtual column reference to a column in
1:eac0369:  * a row returned by an underlying ResultSetNode. The underlying column could
1:eac0369:  * be in a base table,  view (which could expand into a complex
1:eac0369:  * expression), subquery in the FROM clause, temp table, expression result, etc.  
1:eac0369:  * By the time we get to code generation, all VirtualColumnNodes should stand only 
1:eac0369:  * for references to columns in a base table within a FromBaseTable.
3:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class VirtualColumnNode extends ValueNode
3:eac0369: {
1:eac0369: 	/* A VirtualColumnNode contains a pointer to the immediate child result
1:eac0369: 	 * that is materializing the virtual column and the ResultColumn
1:eac0369: 	 * that represents that materialization.
1:eac0369: 	 */
1:e9ec322: 	private ResultSetNode	sourceResultSet;
1:e9ec322: 	private ResultColumn	sourceColumn;
1:eac0369: 
1:eac0369: 	/* columnId is redundant since a ResultColumn also has one, but
1:eac0369: 	 * we need it here for generate()
1:eac0369: 	 */
1:eac0369: 	int columnId;
1:eac0369: 
1:ba1b7ec: 	private boolean correlated = false;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a VirtualColumnNode.
1:eac0369: 	 *
1:eac0369: 	 * @param sourceResultSet	The ResultSetNode where the value is originating
1:eac0369: 	 * @param sourceColumn		The ResultColumn where the value is originating
1:eac0369: 	 * @param columnId			The columnId within the current Row
1:3bb140c:      * @param cm                The context manager
1:eac0369: 	 */
1:3bb140c:     VirtualColumnNode(ResultSetNode sourceResultSet,
1:3bb140c:                       ResultColumn sourceColumn,
1:3bb140c:                       int columnId,
1:3bb140c:                       ContextManager cm) throws StandardException
1:eac0369: 	{
1:3bb140c:         super(cm);
1:3bb140c:         this.sourceResultSet = sourceResultSet;
1:3bb140c:         this.sourceColumn = sourceColumn;
1:3bb140c:         this.columnId = columnId;
1:3bb140c:         setType(sourceColumn.getTypeServices());
3:eac0369: 	}
1:01217c2: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:eac0369: 	 * how tree printing is supposed to work.
1:eac0369: 	 *
1:eac0369: 	 * @param depth		The depth of this node in the tree
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:01217c2: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			super.printSubNodes(depth);
1:eac0369: 
1:e9ec322: 			printLabel(depth, "sourceColumn: ");
1:e9ec322: 		    sourceColumn.treePrint(depth + 1);
1:125f918:             printLabel(depth, "sourceResultSet: ");
1:125f918:             sourceResultSet.treePrint(depth + 1);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the ResultSetNode that is the source of this VirtualColumnNode.
1:eac0369: 	 *
1:eac0369: 	 * @return ResultSetNode	
1:eac0369: 	 */
1:3bb140c:     ResultSetNode getSourceResultSet()
1:eac0369: 	{
1:eac0369: 		return sourceResultSet;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the ResultColumn that is the source of this VirtualColumnNode.
1:eac0369: 	 *
1:eac0369: 	 * @return ResultSetNode	
1:eac0369: 	 */
1:3bb140c:     ResultColumn getSourceColumn()
1:eac0369: 	{
1:eac0369: 		return sourceColumn;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:b57ee34: 	 * Get the name of the table the ResultColumn is in, if any.  This will be null
1:b57ee34: 	 * if the user did not supply a name (for example, select a from t).
1:b57ee34: 	 * The method will return B for this example, select b.a from t as b
1:b57ee34: 	 * The method will return T for this example, select t.a from t
1:b57ee34: 	 *
1:b57ee34: 	 * @return	A String containing the name of the table the Column
1:b57ee34: 	 *		is in. If the column is not in a table (i.e. is a
1:b57ee34: 	 * 		derived column), it returns NULL.
1:b57ee34: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getTableName()
1:b57ee34: 	{
1:e9ec322: 		return sourceColumn.getTableName();
1:b57ee34: 	}
1:b57ee34: 
1:b57ee34: 	/**
1:b57ee34: 	 * Get the name of the schema the ResultColumn's table is in, if any.
1:b57ee34: 	 * The return value will be null if the user did not supply a schema name
1:b57ee34: 	 * (for example, select t.a from t).
1:b57ee34: 	 * Another example for null return value (for example, select b.a from t as b).
1:b57ee34: 	 * But for following query select app.t.a from t, this will return APP
1:b57ee34: 	 *
1:b57ee34: 	 * @return	A String containing the name of the schema for the Column's table.
1:b57ee34: 	 *		If the column is not in a schema (i.e. derived column), it returns NULL.
1:b57ee34: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getSchemaName() throws StandardException
1:b57ee34: 	{
1:e9ec322: 		return sourceColumn.getSchemaName();
1:b57ee34: 	}
1:b57ee34: 
1:b57ee34: 	/**
1:b57ee34: 	 * Return whether or not the ResultColumn is wirtable by a positioned update.
1:b57ee34: 	 *
1:b57ee34: 	 * @return TRUE, if the column is a base column of a table and is 
1:b57ee34: 	 * writable by a positioned update.
1:b57ee34: 	 */
1:3bb140c:     @Override
1:b57ee34: 	public boolean updatableByCursor()
1:b57ee34: 	{
1:e9ec322: 		return sourceColumn.updatableByCursor();
1:b57ee34: 	}
1:b57ee34: 
1:b57ee34: 	/**
1:eac0369: 	 * Return the ResultColumn that is the source of this VirtualColumnNode.
1:eac0369: 	 *
1:eac0369: 	 * @return ResultSetNode	
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ResultColumn getSourceResultColumn()
1:eac0369: 	{
1:eac0369: 		return sourceColumn;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Mark this VCN as a reference to a correlated column.
1:eac0369: 	 * (It's source resultSet is an outer ResultSet.
1:eac0369: 	 */
1:eac0369: 	void setCorrelated()
1:eac0369: 	{
1:eac0369: 		correlated = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this VCN is a correlated reference.
1:eac0369: 	 * 
1:eac0369: 	 * @return Whether or not this VCN is a correlated reference.
1:eac0369: 	 */
1:eac0369: 	boolean getCorrelated()
1:eac0369: 	{
1:eac0369: 		return correlated;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this expression tree is cloneable.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not this expression tree is cloneable.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean isCloneable()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * ColumnNode's are against the current row in the system.
1:eac0369: 	 * This lets us generate
1:eac0369: 	 * a faster get that simply returns the column from the
1:eac0369: 	 * current row, rather than getting the value out and
1:eac0369: 	 * returning that, only to have the caller (in the situations
1:eac0369: 	 * needed) stuffing it back into a new column holder object.
1:eac0369: 	 * We will assume the general generate() path is for getting
1:eac0369: 	 * the value out, and use generateColumn() when we want to
1:eac0369: 	 * keep the column wrapped.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		int sourceResultSetNumber = sourceColumn.getResultSetNumber();
1:eac0369: 
1:eac0369: 		/* If the source is marked as redundant, then continue down
1:eac0369: 		 * the RC/VirtualColumnNode chain.
1:eac0369: 		 */
1:eac0369: 		if (sourceColumn.isRedundant())
1:eac0369: 		{
1:eac0369: 			sourceColumn.getExpression().generateExpression(acb, mb);
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(sourceResultSetNumber >= 0,
1:eac0369: 			"sourceResultSetNumber expected to be >= 0 for virtual column "+sourceColumn.getName());
1:eac0369: 
1:eac0369: 		/* The ColumnReference is from an immediately underlying ResultSet.
1:eac0369: 		 * The Row for that ResultSet is Activation.row[sourceResultSetNumber], 
1:eac0369: 		 * where sourceResultSetNumber is the resultSetNumber for that ResultSet.
1:eac0369: 		 *
1:eac0369: 		 * The generated java is the expression:
1:eac0369: 		 *	(<Datatype interface>) this.row[sourceResultSetNumber].
1:eac0369: 		 *												getColumn(#columnId);
1:eac0369: 		 * where <Datatype interface> is the appropriate interface for the
1:eac0369: 		 * column from the Datatype protocol.
1:eac0369: 		 */
1:eac0369: 		acb.pushColumnReference(mb, 
1:eac0369: 									sourceResultSetNumber,
1:eac0369: 	    							sourceColumn.getVirtualColumnId());
1:eac0369: 
1:eac0369: 		mb.cast(sourceColumn.getTypeCompiler().interfaceName());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the variant type for the underlying expression.
1:eac0369: 	 * The variant type can be:
1:eac0369: 	 *		VARIANT				- variant within a scan
1:eac0369: 	 *							  (method calls and non-static field access)
1:eac0369: 	 *		SCAN_INVARIANT		- invariant within a scan
1:eac0369: 	 *							  (column references from outer tables)
1:eac0369: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:eac0369: 	 *							  (constant expressions)
1:eac0369: 	 *
1:eac0369: 	 * @return	The variant type for the underlying expression.
1:eac0369: 	 * @exception StandardException	thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	protected int getOrderableVariantType() throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** Delegate to the source column
1:eac0369: 		*/
1:eac0369: 		return sourceColumn.getOrderableVariantType();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the DataTypeServices from this Node.
1:eac0369: 	 *
1:eac0369: 	 * @return	The DataTypeServices from this Node.  This
1:eac0369: 	 *		may be null if the node isn't bound yet.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     final public DataTypeDescriptor getTypeServices()
1:eac0369: 	{
1:ba1b7ec:         return sourceColumn.getTypeServices();
1:ba1b7ec:     }
1:ba1b7ec:     
1:3bb140c:     @Override
1:3bb140c:     final public void setType(DataTypeDescriptor dtd) throws StandardException
1:ba1b7ec:     {
1:ba1b7ec:         sourceColumn.setType(dtd);
1:ba1b7ec:     }
1:eac0369:     
1:2706d1f:     boolean isEquivalent(ValueNode o) throws StandardException
1:eac0369:     {
1:2706d1f:         if (isSameNodeKind(o)) {
1:01217c2:     		VirtualColumnNode other = (VirtualColumnNode)o;
1:01217c2:     		return sourceColumn.isEquivalent(other.sourceColumn);
1:01217c2:     	}
1:2706d1f: 
1:01217c2:     	return false;
1:01217c2:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode o) throws StandardException
1:         if (isSameNodeKind(o)) {
1: 
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: class VirtualColumnNode extends ValueNode
/////////////////////////////////////////////////////////////////////////
1:      * Constructor for a VirtualColumnNode.
1:      * @param cm                The context manager
1:     VirtualColumnNode(ResultSetNode sourceResultSet,
1:                       ResultColumn sourceColumn,
1:                       int columnId,
1:                       ContextManager cm) throws StandardException
1:         super(cm);
0:         setNodeType(C_NodeTypes.VIRTUAL_COLUMN_NODE);
1:         this.sourceResultSet = sourceResultSet;
1:         this.sourceColumn = sourceColumn;
1:         this.columnId = columnId;
1:         setType(sourceColumn.getTypeServices());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     ResultSetNode getSourceResultSet()
/////////////////////////////////////////////////////////////////////////
1:     ResultColumn getSourceColumn()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getTableName()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getSchemaName() throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ResultColumn getSourceResultColumn()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean isCloneable()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     final public DataTypeDescriptor getTypeServices()
1:     @Override
1:     final public void setType(DataTypeDescriptor dtd) throws StandardException
commit:125f918
/////////////////////////////////////////////////////////////////////////
1:             printLabel(depth, "sourceResultSet: ");
1:             sourceResultSet.treePrint(depth + 1);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ed82406
/////////////////////////////////////////////////////////////////////////
0: 	public DataTypeDescriptor getTypeServices()
commit:ba1b7ec
/////////////////////////////////////////////////////////////////////////
1: 	private boolean correlated = false;
/////////////////////////////////////////////////////////////////////////
1:         return sourceColumn.getTypeServices();
1:     }
1:     
0:     public void setType(DataTypeDescriptor dtd) throws StandardException
1:     {
1:         sourceColumn.setType(dtd);
1:     }
commit:e9ec322
/////////////////////////////////////////////////////////////////////////
1: 	private ResultSetNode	sourceResultSet;
1: 	private ResultColumn	sourceColumn;
/////////////////////////////////////////////////////////////////////////
1: 			printLabel(depth, "sourceColumn: ");
1: 		    sourceColumn.treePrint(depth + 1);
/////////////////////////////////////////////////////////////////////////
1: 		return sourceColumn.getTableName();
/////////////////////////////////////////////////////////////////////////
1: 		return sourceColumn.getSchemaName();
/////////////////////////////////////////////////////////////////////////
1: 		return sourceColumn.updatableByCursor();
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected boolean isEquivalent(ValueNode o) throws StandardException
1:     {
0:     	if (isSameNodeType(o)) {
1:     		VirtualColumnNode other = (VirtualColumnNode)o;
1:     		return sourceColumn.isEquivalent(other.sourceColumn);
1:     	}
1:     	return false;
1:     }
commit:b57ee34
/////////////////////////////////////////////////////////////////////////
1: 	 * Get the name of the table the ResultColumn is in, if any.  This will be null
1: 	 * if the user did not supply a name (for example, select a from t).
1: 	 * The method will return B for this example, select b.a from t as b
1: 	 * The method will return T for this example, select t.a from t
1: 	 *
1: 	 * @return	A String containing the name of the table the Column
1: 	 *		is in. If the column is not in a table (i.e. is a
1: 	 * 		derived column), it returns NULL.
1: 	 */
0: 	public String getTableName()
1: 	{
0: 		return ( ( sourceColumn != null) ? sourceColumn.getTableName() : null );
1: 	}
1: 
1: 	/**
1: 	 * Get the name of the schema the ResultColumn's table is in, if any.
1: 	 * The return value will be null if the user did not supply a schema name
1: 	 * (for example, select t.a from t).
1: 	 * Another example for null return value (for example, select b.a from t as b).
1: 	 * But for following query select app.t.a from t, this will return APP
1: 	 *
1: 	 * @return	A String containing the name of the schema for the Column's table.
1: 	 *		If the column is not in a schema (i.e. derived column), it returns NULL.
1: 	 */
0: 	public String getSchemaName() throws StandardException
1: 	{
0: 		return ( ( sourceColumn != null) ? sourceColumn.getSchemaName() : null );
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not the ResultColumn is wirtable by a positioned update.
1: 	 *
1: 	 * @return TRUE, if the column is a base column of a table and is 
1: 	 * writable by a positioned update.
1: 	 */
1: 	public boolean updatableByCursor()
1: 	{
0: 		return ((sourceColumn != null) ? sourceColumn.updatableByCursor() : false);
1: 	}
1: 
1: 	/**
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.VirtualColumnNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
1: /**
1:  * A VirtualColumnNode represents a virtual column reference to a column in
1:  * a row returned by an underlying ResultSetNode. The underlying column could
1:  * be in a base table,  view (which could expand into a complex
1:  * expression), subquery in the FROM clause, temp table, expression result, etc.  
1:  * By the time we get to code generation, all VirtualColumnNodes should stand only 
1:  * for references to columns in a base table within a FromBaseTable.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
0: public class VirtualColumnNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* A VirtualColumnNode contains a pointer to the immediate child result
1: 	 * that is materializing the virtual column and the ResultColumn
1: 	 * that represents that materialization.
1: 	 */
0: 	ResultSetNode	sourceResultSet;
0: 	ResultColumn	sourceColumn;
1: 
1: 	/* columnId is redundant since a ResultColumn also has one, but
1: 	 * we need it here for generate()
1: 	 */
1: 	int columnId;
1: 
0: 	boolean correlated = false;
1: 
1: 
1: 	/**
0: 	 * Initializer for a VirtualColumnNode.
1: 	 *
1: 	 * @param sourceResultSet	The ResultSetNode where the value is originating
1: 	 * @param sourceColumn		The ResultColumn where the value is originating
1: 	 * @param columnId			The columnId within the current Row
1: 	 */
1: 
0: 	public void init(
0: 						Object sourceResultSet,
0: 						Object sourceColumn,
0: 						Object columnId)
1: 	{
0: 		ResultColumn source = (ResultColumn) sourceColumn;
1: 
0: 		this.sourceResultSet = (ResultSetNode) sourceResultSet;
0: 		this.sourceColumn = source;
0: 		this.columnId = ((Integer) columnId).intValue();
0: 		setType(source.getTypeServices());
1: 	}
1: 
1: 
1: 	/**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 
0: 			if (sourceColumn != null)
1: 			{
0: 				printLabel(depth, "sourceColumn: ");
0: 				sourceColumn.treePrint(depth + 1);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Return the ResultSetNode that is the source of this VirtualColumnNode.
1: 	 *
1: 	 * @return ResultSetNode	
1: 	 */
0: 	public ResultSetNode getSourceResultSet()
1: 	{
1: 		return sourceResultSet;
1: 	}
1: 
1: 	/**
1: 	 * Return the ResultColumn that is the source of this VirtualColumnNode.
1: 	 *
1: 	 * @return ResultSetNode	
1: 	 */
0: 	public ResultColumn getSourceColumn()
1: 	{
1: 		return sourceColumn;
1: 	}
1: 
1: 	/**
1: 	 * Return the ResultColumn that is the source of this VirtualColumnNode.
1: 	 *
1: 	 * @return ResultSetNode	
1: 	 */
0: 	public ResultColumn getSourceResultColumn()
1: 	{
1: 		return sourceColumn;
1: 	}
1: 
1: 	/**
1: 	 * Mark this VCN as a reference to a correlated column.
1: 	 * (It's source resultSet is an outer ResultSet.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	void setCorrelated()
1: 	{
1: 		correlated = true;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not this VCN is a correlated reference.
1: 	 * 
1: 	 * @return Whether or not this VCN is a correlated reference.
1: 	 */
1: 	boolean getCorrelated()
1: 	{
1: 		return correlated;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not this expression tree is cloneable.
1: 	 *
1: 	 * @return boolean	Whether or not this expression tree is cloneable.
1: 	 */
0: 	public boolean isCloneable()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * ColumnNode's are against the current row in the system.
1: 	 * This lets us generate
1: 	 * a faster get that simply returns the column from the
1: 	 * current row, rather than getting the value out and
1: 	 * returning that, only to have the caller (in the situations
1: 	 * needed) stuffing it back into a new column holder object.
1: 	 * We will assume the general generate() path is for getting
1: 	 * the value out, and use generateColumn() when we want to
1: 	 * keep the column wrapped.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1: 		int sourceResultSetNumber = sourceColumn.getResultSetNumber();
1: 
1: 		/* If the source is marked as redundant, then continue down
1: 		 * the RC/VirtualColumnNode chain.
1: 		 */
1: 		if (sourceColumn.isRedundant())
1: 		{
1: 			sourceColumn.getExpression().generateExpression(acb, mb);
1: 			return;
1: 		}
1: 
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(sourceResultSetNumber >= 0,
1: 			"sourceResultSetNumber expected to be >= 0 for virtual column "+sourceColumn.getName());
1: 
1: 		/* The ColumnReference is from an immediately underlying ResultSet.
1: 		 * The Row for that ResultSet is Activation.row[sourceResultSetNumber], 
1: 		 * where sourceResultSetNumber is the resultSetNumber for that ResultSet.
1: 		 *
1: 		 * The generated java is the expression:
1: 		 *	(<Datatype interface>) this.row[sourceResultSetNumber].
1: 		 *												getColumn(#columnId);
1: 		 * where <Datatype interface> is the appropriate interface for the
1: 		 * column from the Datatype protocol.
1: 		 */
1: 		acb.pushColumnReference(mb, 
1: 									sourceResultSetNumber,
1: 	    							sourceColumn.getVirtualColumnId());
1: 
1: 		mb.cast(sourceColumn.getTypeCompiler().interfaceName());
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *							  (constant expressions)
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 * @exception StandardException	thrown on error
1: 	 */
1: 	protected int getOrderableVariantType() throws StandardException
1: 	{
1: 		/*
1: 		** Delegate to the source column
1: 		*/
1: 		return sourceColumn.getOrderableVariantType();
1: 	}
1: 
1: 	/**
1: 	 * Get the DataTypeServices from this Node.
1: 	 *
1: 	 * @return	The DataTypeServices from this Node.  This
1: 	 *		may be null if the node isn't bound yet.
1: 	 */
0: 	public DataTypeDescriptor getTypeServices()
1: 	{
0:         DataTypeDescriptor dtd = super.getTypeServices();
0:         if( dtd == null && sourceColumn != null)
1:         {
0:             dtd = sourceColumn.getTypeServices();
0:             if( dtd != null)
0:                 setType( dtd);
1:         }
0:         return dtd;
0:     } // end of getTypeServices
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
0: 						Object columnId) throws StandardException
/////////////////////////////////////////////////////////////////////////
0: 	public DataTypeDescriptor getTypeServices() throws StandardException
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: /**
0:  * A VirtualColumnNode represents a virtual column reference to a column in
0:  * a row returned by an underlying ResultSetNode. The underlying column could
0:  * be in a base table,  view (which could expand into a complex
0:  * expression), subquery in the FROM clause, temp table, expression result, etc.  
0:  * By the time we get to code generation, all VirtualColumnNodes should stand only 
0:  * for references to columns in a base table within a FromBaseTable.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public class VirtualColumnNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* A VirtualColumnNode contains a pointer to the immediate child result
0: 	 * that is materializing the virtual column and the ResultColumn
0: 	 * that represents that materialization.
0: 	 */
0: 	ResultSetNode	sourceResultSet;
0: 	ResultColumn	sourceColumn;
0: 
0: 	/* columnId is redundant since a ResultColumn also has one, but
0: 	 * we need it here for generate()
0: 	 */
0: 	int columnId;
0: 
0: 	boolean correlated = false;
0: 
0: 
0: 	/**
0: 	 * Initializer for a VirtualColumnNode.
0: 	 *
0: 	 * @param sourceResultSet	The ResultSetNode where the value is originating
0: 	 * @param sourceColumn		The ResultColumn where the value is originating
0: 	 * @param columnId			The columnId within the current Row
0: 	 */
0: 
0: 	public void init(
0: 						Object sourceResultSet,
0: 						Object sourceColumn,
0: 						Object columnId)
0: 	{
0: 		ResultColumn source = (ResultColumn) sourceColumn;
0: 
0: 		this.sourceResultSet = (ResultSetNode) sourceResultSet;
0: 		this.sourceColumn = source;
0: 		this.columnId = ((Integer) columnId).intValue();
0: 		setType(source.getTypeServices());
0: 	}
0: 
0: 
0: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
0: 	 * how tree printing is supposed to work.
0: 	 *
0: 	 * @param depth		The depth of this node in the tree
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void printSubNodes(int depth)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			super.printSubNodes(depth);
0: 
0: 			if (sourceColumn != null)
0: 			{
0: 				printLabel(depth, "sourceColumn: ");
0: 				sourceColumn.treePrint(depth + 1);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Return the ResultSetNode that is the source of this VirtualColumnNode.
0: 	 *
0: 	 * @return ResultSetNode	
0: 	 */
0: 	public ResultSetNode getSourceResultSet()
0: 	{
0: 		return sourceResultSet;
0: 	}
0: 
0: 	/**
0: 	 * Return the ResultColumn that is the source of this VirtualColumnNode.
0: 	 *
0: 	 * @return ResultSetNode	
0: 	 */
0: 	public ResultColumn getSourceColumn()
0: 	{
0: 		return sourceColumn;
0: 	}
0: 
0: 	/**
0: 	 * Return the ResultColumn that is the source of this VirtualColumnNode.
0: 	 *
0: 	 * @return ResultSetNode	
0: 	 */
0: 	public ResultColumn getSourceResultColumn()
0: 	{
0: 		return sourceColumn;
0: 	}
0: 
0: 	/**
0: 	 * Mark this VCN as a reference to a correlated column.
0: 	 * (It's source resultSet is an outer ResultSet.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	void setCorrelated()
0: 	{
0: 		correlated = true;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not this VCN is a correlated reference.
0: 	 * 
0: 	 * @return Whether or not this VCN is a correlated reference.
0: 	 */
0: 	boolean getCorrelated()
0: 	{
0: 		return correlated;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not this expression tree is cloneable.
0: 	 *
0: 	 * @return boolean	Whether or not this expression tree is cloneable.
0: 	 */
0: 	public boolean isCloneable()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * ColumnNode's are against the current row in the system.
0: 	 * This lets us generate
0: 	 * a faster get that simply returns the column from the
0: 	 * current row, rather than getting the value out and
0: 	 * returning that, only to have the caller (in the situations
0: 	 * needed) stuffing it back into a new column holder object.
0: 	 * We will assume the general generate() path is for getting
0: 	 * the value out, and use generateColumn() when we want to
0: 	 * keep the column wrapped.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 		int sourceResultSetNumber = sourceColumn.getResultSetNumber();
0: 
0: 		/* If the source is marked as redundant, then continue down
0: 		 * the RC/VirtualColumnNode chain.
0: 		 */
0: 		if (sourceColumn.isRedundant())
0: 		{
0: 			sourceColumn.getExpression().generateExpression(acb, mb);
0: 			return;
0: 		}
0: 
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(sourceResultSetNumber >= 0,
0: 			"sourceResultSetNumber expected to be >= 0 for virtual column "+sourceColumn.getName());
0: 
0: 		/* The ColumnReference is from an immediately underlying ResultSet.
0: 		 * The Row for that ResultSet is Activation.row[sourceResultSetNumber], 
0: 		 * where sourceResultSetNumber is the resultSetNumber for that ResultSet.
0: 		 *
0: 		 * The generated java is the expression:
0: 		 *	(<Datatype interface>) this.row[sourceResultSetNumber].
0: 		 *												getColumn(#columnId);
0: 		 * where <Datatype interface> is the appropriate interface for the
0: 		 * column from the Datatype protocol.
0: 		 */
0: 		acb.pushColumnReference(mb, 
0: 									sourceResultSetNumber,
0: 	    							sourceColumn.getVirtualColumnId());
0: 
0: 		mb.cast(sourceColumn.getTypeCompiler().interfaceName());
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *							  (constant expressions)
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 * @exception StandardException	thrown on error
0: 	 */
0: 	protected int getOrderableVariantType() throws StandardException
0: 	{
0: 		/*
0: 		** Delegate to the source column
0: 		*/
0: 		return sourceColumn.getOrderableVariantType();
0: 	}
0: 
0: 	/**
0: 	 * Get the DataTypeServices from this Node.
0: 	 *
0: 	 * @return	The DataTypeServices from this Node.  This
0: 	 *		may be null if the node isn't bound yet.
0: 	 */
0: 	public DataTypeDescriptor getTypeServices()
0: 	{
0:         DataTypeDescriptor dtd = super.getTypeServices();
0:         if( dtd == null && sourceColumn != null)
0:         {
0:             dtd = sourceColumn.getTypeServices();
0:             if( dtd != null)
0:                 setType( dtd);
0:         }
0:         return dtd;
0:     } // end of getTypeServices
0: }
============================================================================