1:bb0c274: /*
1:9a6609b: 
1:bb0c274:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest
1:9a6609b: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:9a6609b: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:9a6609b: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:66edb71: 
1:9a6609b:  */
1:9a6609b: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:9a6609b: 
1:9a6609b: import java.sql.Connection;
1:9a6609b: import java.sql.PreparedStatement;
1:9a6609b: import java.sql.ResultSet;
1:9a6609b: import java.sql.SQLException;
1:9a6609b: import java.sql.Statement;
1:9a6609b: import junit.framework.Test;
1:9a6609b: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:9a6609b: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:66edb71: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:9a6609b: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1:9a6609b: import org.apache.derbyTesting.junit.SQLUtilities;
1:9a6609b: import org.apache.derbyTesting.junit.TestConfiguration;
1:9a6609b: 
2:9a6609b: /**
1:9a6609b:  * Test setTransactionIsolation
2:9a6609b:  * 
1:9a6609b:  */
1:9a6609b: public class SetTransactionIsolationTest extends BaseJDBCTestCase {
1:9a6609b: 
1:9a6609b:     /**
1:9a6609b:      * @param name
1:9a6609b:      */
1:9a6609b:     public SetTransactionIsolationTest(String name) {
1:9a6609b:         super(name);
2:9a6609b:     }
1:9a6609b: 
1:9a6609b:     public static int[] isoLevels = { Connection.TRANSACTION_READ_UNCOMMITTED,
1:9a6609b:             Connection.TRANSACTION_REPEATABLE_READ,
1:9a6609b:             Connection.TRANSACTION_READ_COMMITTED,
1:9a6609b:             Connection.TRANSACTION_SERIALIZABLE };
1:9a6609b: 
1:9a6609b:     /**
1:9a6609b:      * test setting of isolation levels with and without lock timeouts
1:9a6609b:      * @throws SQLException
1:9a6609b:      */
1:9a6609b:     public void testIsolation() throws SQLException {
1:9a6609b:         Connection conn = getConnection();
1:9a6609b:         Connection conn2 = openDefaultConnection();
1:9a6609b:         conn.setAutoCommit(false);
1:9a6609b:         // test with no lock timeouts
1:9a6609b:         for (int i = 0; i < isoLevels.length; i++) {
1:9a6609b:             checkIsolationLevelNoTimeout(conn, isoLevels[i]);
1:9a6609b:         }
1:9a6609b:        
1:9a6609b:         // Now do an insert to create lock timeout
1:9a6609b:         Statement stmt = conn.createStatement();
1:9a6609b:         stmt.executeUpdate("insert into t1 values(4,'Fourth Hello')");
1:9a6609b:         for (int i = 0; i < isoLevels.length; i++)
1:9a6609b:             checkIsolationLevelTimeout(conn2, isoLevels[i]);
1:9a6609b: 
1:9a6609b:         stmt.close();
1:9a6609b: 
1:9a6609b:         // rollback to cleanup locks from insert
1:9a6609b:         conn.rollback();
1:9a6609b: 
1:9a6609b:     }
1:9a6609b: 
1:9a6609b:     /**
1:9a6609b:      * Check setTransactioIsolation and queries with timeout expected in
1:9a6609b:      * all cases except READ_UNCOMMITTED
1:9a6609b:      * 
1:9a6609b:      * @param conn     Connection to use
1:9a6609b:      * @param isoLevel Isolation level to test from Connection.TRANSACTION_*
1:9a6609b:      * @throws SQLException
1:9a6609b:      */
1:9a6609b:     private void checkIsolationLevelTimeout(Connection conn, int isoLevel)
1:9a6609b:             throws SQLException {
1:9a6609b: 
1:9a6609b:         RuntimeStatisticsParser rsp = null;
1:9a6609b:         conn.setTransactionIsolation(isoLevel);
1:9a6609b: 
1:9a6609b:         try {
1:9a6609b:             rsp = SQLUtilities.executeAndGetRuntimeStatistics(conn,
1:9a6609b:                     "select * from t1");
1:9a6609b:             // only READ_UNCOMMITTED should make it through
1:9a6609b:             assertEquals(Connection.TRANSACTION_READ_UNCOMMITTED, rsp
1:9a6609b:                     .getIsolationLevel());
1:9a6609b:         } catch (SQLException se) {
1:9a6609b:             if (isoLevel != Connection.TRANSACTION_READ_UNCOMMITTED)
1:9a6609b:                 assertSQLState("expected lock timeout", "40XL1", se);
1:9a6609b:         }
1:9a6609b:         try {
1:9a6609b:             rsp = SQLUtilities.executeAndGetRuntimeStatistics(conn,
1:9a6609b:                     "insert into t1copy (select * from t1)");
1:9a6609b:             ;
1:9a6609b:             // only READ_UNCOMMITTED should make it through
1:9a6609b:             assertEquals(Connection.TRANSACTION_READ_UNCOMMITTED, rsp
1:9a6609b:                     .getIsolationLevel());
1:9a6609b:         } catch (SQLException se) {
1:9a6609b:             if (isoLevel != Connection.TRANSACTION_READ_UNCOMMITTED)
1:9a6609b:                 assertSQLState("expected lock timeout", "40XL1", se);
1:9a6609b: 
1:9a6609b:         }
1:9a6609b:     }
1:9a6609b: 
1:9a6609b:     /**
1:9a6609b:      * Test setTransactionIsolation and queries with no timeout expected
1:9a6609b:      * @param conn 
1:9a6609b:      * @param isoLevel
1:9a6609b:      * @throws SQLException
1:9a6609b:      */
1:9a6609b:     private void checkIsolationLevelNoTimeout(Connection conn, int isoLevel)
1:9a6609b:             throws SQLException {
1:9a6609b: 
1:9a6609b:         conn.setTransactionIsolation(isoLevel);
1:9a6609b:         RuntimeStatisticsParser rsp = SQLUtilities
1:9a6609b:                 .executeAndGetRuntimeStatistics(conn, "select * from t1");
1:9a6609b:         assertEquals(isoLevel, rsp.getIsolationLevel());
1:9a6609b: 
1:9a6609b:         rsp = SQLUtilities.executeAndGetRuntimeStatistics(conn,
1:9a6609b:                 "insert into t1copy (select * from t1)");
1:9a6609b:         ;
1:9a6609b:         assertEquals(isoLevel, rsp.getIsolationLevel());
1:9a6609b: 
1:9a6609b:     }
1:9a6609b: 
1:9a6609b:     /**
1:9a6609b:      * setTransactionIsolation commits?
1:9a6609b:      */
1:2f3d052:     public void testSetTransactionIsolationCommitRollback() throws SQLException {
1:9a6609b:         Connection conn = getConnection();
1:9a6609b: 
1:9a6609b:         conn.rollback();
1:9a6609b:         conn.setAutoCommit(false);
1:9a6609b:         conn
1:9a6609b:                 .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
1:9a6609b:         Statement s = conn.createStatement();
1:9a6609b:         s.executeUpdate("delete from t3");
1:9a6609b:         s.executeUpdate("insert into t3 values(1)");
1:9a6609b:         conn.commit();
1:9a6609b:         s.executeUpdate("insert into t3 values(2)");
1:9a6609b:         conn
1:9a6609b:                 .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
1:9a6609b:         conn.rollback();
1:9a6609b:         ResultSet rs = s.executeQuery("select count(*) from t3");
1:9a6609b:         rs.next();
1:9a6609b:         int count = rs.getInt(1);
1:2f3d052:         assertEquals(1, count);
1:9a6609b:         rs.close();
2:9a6609b:         s.close();
1:9a6609b: 
1:9a6609b:     }
1:9a6609b: 
1:9a6609b:     /**
1:9a6609b:      * Call setTransactionIsolation with holdable cursor open?
1:9a6609b:      */
1:9a6609b:     public void testSetTransactionIsolationInHoldCursor() throws SQLException
1:9a6609b: 
1:9a6609b:     {
1:9a6609b:         Connection conn = getConnection();
1:9a6609b:         try {
1:9a6609b: 
1:9a6609b:             PreparedStatement ps = conn.prepareStatement("SELECT * from TAB1");
1:9a6609b:             ResultSet rs = ps.executeQuery();
1:9a6609b:             rs.next();
1:9a6609b:             // setTransactionIsolation should fail because we have
1:9a6609b:             // a holdable cursor open
1:9a6609b:             conn
1:9a6609b:                     .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
1:9a6609b:             rs.next(); // to fix DERBY-1108. Else the GC for ibm15 will clean
1:9a6609b:                         // up the ResultSet Object
1:9a6609b:         } catch (SQLException se) {
1:9a6609b:             assertSQLState("Expected Exception if held cursor is open",
1:9a6609b:                     "X0X03", se);
1:9a6609b:             return;
1:9a6609b:         }
1:9a6609b:         fail("FAIL: setTransactionIsolation() did not throw exception with open hold cursor");
1:9a6609b:     }
1:9a6609b: 
1:9a6609b:     public static Test baseSuite(String name) {
1:9a6609b: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:9a6609b:         suite.addTestSuite(SetTransactionIsolationTest.class);
1:9a6609b: 
1:66edb71:         // Some test cases expect lock timeouts, so reduce the timeout to
1:66edb71:         // make the test go faster.
1:66edb71:         Test test = DatabasePropertyTestSetup.setLockTimeouts(suite, 1, 3);
1:9a6609b: 
1:66edb71:         return new CleanDatabaseTestSetup(test) {
1:9a6609b: 
1:9a6609b:             /**
1:9a6609b:              * Create and populate table
1:9a6609b:              * 
1:9a6609b:              * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:9a6609b:              */
1:9a6609b:             protected void decorateSQL(Statement s) throws SQLException {
1:9a6609b:                 Connection conn = getConnection();
1:9a6609b: 
1:9a6609b:                 /**
1:9a6609b:                  * Creates the table used in the test cases.
1:9a6609b:                  * 
1:9a6609b:                  */
1:9a6609b:                 
1:9a6609b:                 final int stringLength = 400;
1:9a6609b:                 s.executeUpdate("CREATE TABLE TAB1 (c11 int, " + "c12 varchar("
1:9a6609b:                         + stringLength + "))");
1:9a6609b:                 PreparedStatement insertStmt = conn
1:9a6609b:                         .prepareStatement("INSERT INTO TAB1 VALUES(?,?)");
1:9a6609b:                 // We need to ensure that there is more data in the table than
1:9a6609b:                 // the
1:9a6609b:                 // client can fetch in one message (about 32K). Otherwise, the
1:9a6609b:                 // cursor might be closed on the server and we are not testing
1:9a6609b:                 // the
1:9a6609b:                 // same thing in embedded mode and client/server mode.
1:9a6609b:                 final int rows = 40000 / stringLength;
1:9a6609b:                 StringBuffer buff = new StringBuffer(stringLength);
1:9a6609b:                 for (int i = 0; i < stringLength; i++) {
1:9a6609b:                     buff.append(" ");
1:9a6609b:                 }
1:9a6609b:                 for (int i = 1; i <= rows; i++) {
1:9a6609b:                     insertStmt.setInt(1, i);
1:9a6609b:                     insertStmt.setString(2, buff.toString());
1:9a6609b:                     insertStmt.executeUpdate();
1:9a6609b:                 }
1:9a6609b:                 insertStmt.close();
1:9a6609b: 
1:9a6609b:                 s.execute("create table t1(I int, B char(15))");
1:9a6609b:                 s.execute("create table t1copy(I int, B char(15))");
1:9a6609b: 
1:9a6609b:                 s.executeUpdate("INSERT INTO T1 VALUES(1,'First Hello')");
1:9a6609b:                 s.executeUpdate("INSERT INTO T1 VALUES(2,'Second Hello')");
1:9a6609b:                 s.executeUpdate("INSERT INTO T1 VALUES(3,'Third Hello')");
1:9a6609b: 
1:9a6609b:                 s.executeUpdate("create table t3 (i integer)");
1:9a6609b:             }
1:9a6609b: 
1:9a6609b:         };
1:9a6609b: 
1:9a6609b:     }
1:9a6609b: 
1:9a6609b:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SetTransactionIsolation");
1:9a6609b: 
1:9a6609b:         suite.addTest(baseSuite("SetTransactionIsolation:embedded"));
1:9a6609b: 
1:9a6609b:         suite
1:9a6609b:                 .addTest(TestConfiguration
1:9a6609b:                         .clientServerDecorator(baseSuite("SetTransactionIsolation:client")));
1:9a6609b:         return suite;
1:9a6609b: 
1:9a6609b:     }
1:9a6609b: 
1:9a6609b: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SetTransactionIsolation");
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2f3d052
/////////////////////////////////////////////////////////////////////////
1:     public void testSetTransactionIsolationCommitRollback() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, count);
commit:9a6609b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test setTransactionIsolation
1:  * 
1:  */
1: public class SetTransactionIsolationTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * @param name
1:      */
1:     public SetTransactionIsolationTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static int[] isoLevels = { Connection.TRANSACTION_READ_UNCOMMITTED,
1:             Connection.TRANSACTION_REPEATABLE_READ,
1:             Connection.TRANSACTION_READ_COMMITTED,
1:             Connection.TRANSACTION_SERIALIZABLE };
1: 
1:     /**
1:      * test setting of isolation levels with and without lock timeouts
1:      * @throws SQLException
1:      */
1:     public void testIsolation() throws SQLException {
1:         Connection conn = getConnection();
1:         Connection conn2 = openDefaultConnection();
1:         conn.setAutoCommit(false);
1:         // test with no lock timeouts
1:         for (int i = 0; i < isoLevels.length; i++) {
1:             checkIsolationLevelNoTimeout(conn, isoLevels[i]);
1:         }
1:        
1:         // Now do an insert to create lock timeout
1:         Statement stmt = conn.createStatement();
1:         stmt.executeUpdate("insert into t1 values(4,'Fourth Hello')");
1:         for (int i = 0; i < isoLevels.length; i++)
1:             checkIsolationLevelTimeout(conn2, isoLevels[i]);
1: 
1:         stmt.close();
1: 
1:         // rollback to cleanup locks from insert
1:         conn.rollback();
1: 
1:     }
1: 
1:     /**
1:      * Check setTransactioIsolation and queries with timeout expected in
1:      * all cases except READ_UNCOMMITTED
1:      * 
1:      * @param conn     Connection to use
1:      * @param isoLevel Isolation level to test from Connection.TRANSACTION_*
1:      * @throws SQLException
1:      */
1:     private void checkIsolationLevelTimeout(Connection conn, int isoLevel)
1:             throws SQLException {
1: 
1:         RuntimeStatisticsParser rsp = null;
1:         conn.setTransactionIsolation(isoLevel);
1: 
1:         try {
1:             rsp = SQLUtilities.executeAndGetRuntimeStatistics(conn,
1:                     "select * from t1");
1:             // only READ_UNCOMMITTED should make it through
1:             assertEquals(Connection.TRANSACTION_READ_UNCOMMITTED, rsp
1:                     .getIsolationLevel());
1:         } catch (SQLException se) {
1:             if (isoLevel != Connection.TRANSACTION_READ_UNCOMMITTED)
1:                 assertSQLState("expected lock timeout", "40XL1", se);
1:         }
1:         try {
1:             rsp = SQLUtilities.executeAndGetRuntimeStatistics(conn,
1:                     "insert into t1copy (select * from t1)");
1:             ;
1:             // only READ_UNCOMMITTED should make it through
1:             assertEquals(Connection.TRANSACTION_READ_UNCOMMITTED, rsp
1:                     .getIsolationLevel());
1:         } catch (SQLException se) {
1:             if (isoLevel != Connection.TRANSACTION_READ_UNCOMMITTED)
1:                 assertSQLState("expected lock timeout", "40XL1", se);
1: 
1:         }
1:     }
1: 
1:     /**
1:      * Test setTransactionIsolation and queries with no timeout expected
1:      * @param conn 
1:      * @param isoLevel
1:      * @throws SQLException
1:      */
1:     private void checkIsolationLevelNoTimeout(Connection conn, int isoLevel)
1:             throws SQLException {
1: 
1:         conn.setTransactionIsolation(isoLevel);
1:         RuntimeStatisticsParser rsp = SQLUtilities
1:                 .executeAndGetRuntimeStatistics(conn, "select * from t1");
1:         assertEquals(isoLevel, rsp.getIsolationLevel());
1: 
1:         rsp = SQLUtilities.executeAndGetRuntimeStatistics(conn,
1:                 "insert into t1copy (select * from t1)");
1:         ;
1:         assertEquals(isoLevel, rsp.getIsolationLevel());
1: 
1:     }
1: 
1:     /**
1:      * setTransactionIsolation commits?
1:      */
0:     public void testSetTransactionIsolationCommits() throws SQLException {
0:         // In the current client implementation, the transaction will
0:         // commit when setTransactionIsolation is called, while the
0:         // embedded driver will not commit. See
0:         // http://issues.apache.org/jira/browse/DERBY-2064
1:         Connection conn = getConnection();
1: 
1:         conn.rollback();
1:         conn.setAutoCommit(false);
1:         conn
1:                 .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
1:         Statement s = conn.createStatement();
1:         s.executeUpdate("delete from t3");
1:         s.executeUpdate("insert into t3 values(1)");
1:         conn.commit();
1:         s.executeUpdate("insert into t3 values(2)");
1:         conn
1:                 .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
1:         conn.rollback();
1:         ResultSet rs = s.executeQuery("select count(*) from t3");
1:         rs.next();
1:         int count = rs.getInt(1);
0:         boolean passCommitCheck = false;
0:         switch (count) {
0:         case 1:
0:             // Embedded and JCC don't commit
0:             if (usingEmbedded())
0:                 passCommitCheck = true;
0:             break;
0:         case 2:
0:             // Client commits
0:             if (usingDerbyNetClient())
0:                 passCommitCheck = true;
0:             break;
0:         default:
1: 
0:             fail("FAIL: count="
0:                     + count
0:                     + ", unexepected behaviour from testSetTransactionIsolationCommits");
0:             break;
1:         }
0:         assertTrue(passCommitCheck);
1:         rs.close();
1:         s.close();
1: 
1:     }
1: 
1:     /**
1:      * Call setTransactionIsolation with holdable cursor open?
1:      */
1:     public void testSetTransactionIsolationInHoldCursor() throws SQLException
1: 
1:     {
1:         Connection conn = getConnection();
1:         try {
1: 
1:             PreparedStatement ps = conn.prepareStatement("SELECT * from TAB1");
1:             ResultSet rs = ps.executeQuery();
1:             rs.next();
1:             // setTransactionIsolation should fail because we have
1:             // a holdable cursor open
1:             conn
1:                     .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
1:             rs.next(); // to fix DERBY-1108. Else the GC for ibm15 will clean
1:                         // up the ResultSet Object
1:         } catch (SQLException se) {
1:             assertSQLState("Expected Exception if held cursor is open",
1:                     "X0X03", se);
1:             return;
1:         }
1:         fail("FAIL: setTransactionIsolation() did not throw exception with open hold cursor");
1:     }
1: 
1:     public static Test baseSuite(String name) {
1: 
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(SetTransactionIsolationTest.class);
1: 
0:         return new CleanDatabaseTestSetup(suite) {
1: 
1:             /**
1:              * Create and populate table
1:              * 
1:              * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 Connection conn = getConnection();
1: 
1:                 /**
1:                  * Creates the table used in the test cases.
1:                  * 
1:                  */
1:                 
1:                 final int stringLength = 400;
1:                 s.executeUpdate("CREATE TABLE TAB1 (c11 int, " + "c12 varchar("
1:                         + stringLength + "))");
1:                 PreparedStatement insertStmt = conn
1:                         .prepareStatement("INSERT INTO TAB1 VALUES(?,?)");
1:                 // We need to ensure that there is more data in the table than
1:                 // the
1:                 // client can fetch in one message (about 32K). Otherwise, the
1:                 // cursor might be closed on the server and we are not testing
1:                 // the
1:                 // same thing in embedded mode and client/server mode.
1:                 final int rows = 40000 / stringLength;
1:                 StringBuffer buff = new StringBuffer(stringLength);
1:                 for (int i = 0; i < stringLength; i++) {
1:                     buff.append(" ");
1:                 }
1:                 for (int i = 1; i <= rows; i++) {
1:                     insertStmt.setInt(1, i);
1:                     insertStmt.setString(2, buff.toString());
1:                     insertStmt.executeUpdate();
1:                 }
1:                 insertStmt.close();
1: 
1:                 s.execute("create table t1(I int, B char(15))");
1:                 s.execute("create table t1copy(I int, B char(15))");
1: 
1:                 s.executeUpdate("INSERT INTO T1 VALUES(1,'First Hello')");
1:                 s.executeUpdate("INSERT INTO T1 VALUES(2,'Second Hello')");
1:                 s.executeUpdate("INSERT INTO T1 VALUES(3,'Third Hello')");
1: 
1:                 s.executeUpdate("create table t3 (i integer)");
1:                 
1: 
1:                 s.close();
0:                 CallableStatement cs = conn
0:                         .prepareCall("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY (?, ?)");
0:                 cs.setString(1, "derby.locks.waitTimeout");
0:                 cs.setString(2, "3");
0:                 cs.execute();
0:                 cs.setString(1, "derby.locks.deadlockTimeout");
0:                 cs.setString(2, "3");
1:             }
1: 
1:         };
1: 
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("SetTransactionIsolation");
1: 
1:         suite.addTest(baseSuite("SetTransactionIsolation:embedded"));
1: 
1:         suite
1:                 .addTest(TestConfiguration
1:                         .clientServerDecorator(baseSuite("SetTransactionIsolation:client")));
1:         return suite;
1: 
1:     }
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:66edb71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         // Some test cases expect lock timeouts, so reduce the timeout to
1:         // make the test go faster.
1:         Test test = DatabasePropertyTestSetup.setLockTimeouts(suite, 1, 3);
1: 
1:         return new CleanDatabaseTestSetup(test) {
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4c80863
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest
0: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
0: 
1:      http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
0: 
============================================================================