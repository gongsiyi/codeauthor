1:8629a0f: /*
31:8629a0f: 
1:8629a0f:    Derby - Class org.apache.derby.client.am.CloseFilterInputStream
1:8629a0f: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:8629a0f: 
1:8629a0f:       http://www.apache.org/licenses/LICENSE-2.0
1:8629a0f: 
1:8629a0f:    Unless required by applicable law or agreed to in writing, software
1:8629a0f:    distributed under the License is distributed on an "AS IS" BASIS,
1:8629a0f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8629a0f:    See the License for the specific language governing permissions and
1:8629a0f:    limitations under the License.
1:8629a0f: 
1:8629a0f: */
1:8629a0f: 
1:8629a0f: package org.apache.derby.client.am;
1:8629a0f: 
1:8629a0f: import java.io.InputStream;
1:8629a0f: import java.io.FilterInputStream;
1:8629a0f: import java.io.IOException;
1:f271471: import org.apache.derby.shared.common.reference.MessageId;
1:8629a0f: 
1:8629a0f: class CloseFilterInputStream extends FilterInputStream {
1:6eb29f6:     
1:6eb29f6:     private static final String ALREADY_CLOSED_ERR_MESSAGE = 
1:f271471:             SqlException.getMessageUtil().getTextMessage(
1:2d1bc8f:                 MessageId.OBJECT_CLOSED);
1:6eb29f6:     
1:6eb29f6:     private boolean closed;
1:6eb29f6:     
1:6eb29f6:     public CloseFilterInputStream(InputStream is){
1:6eb29f6:         
1:6eb29f6:         super(is);
1:6eb29f6:         closed = false;
1:6eb29f6:         
1:6eb29f6:     }
1:6eb29f6:     
1:6eb29f6:     
1:6eb29f6:     public int read() 
1:6eb29f6:         throws IOException {
1:8629a0f: 
1:6eb29f6:         if(closed){
1:6eb29f6:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:6eb29f6:         }
1:6eb29f6:         
1:6eb29f6:         return super.read();
1:6eb29f6:         
1:6eb29f6:     }
1:6eb29f6:     
1:8629a0f: 
1:6eb29f6:     public int read(byte[] b) 
1:6eb29f6:         throws IOException {
1:6eb29f6:         
1:6eb29f6:         if(closed){
1:6eb29f6:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:6eb29f6:         }
1:8629a0f: 
1:6eb29f6:         return super.read(b);
1:6eb29f6: 
1:6eb29f6:     }
1:6eb29f6:     
1:8629a0f:     
1:6eb29f6:     public int read(byte[] b,
1:6eb29f6:             int off,
1:6eb29f6:             int len) 
1:6eb29f6:         throws IOException{
1:6eb29f6:         
1:6eb29f6:         if(closed){
1:6eb29f6:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:6eb29f6:         }
1:8629a0f: 
1:6eb29f6:         return super.read(b, off, len);
1:6eb29f6: 
1:6eb29f6:     }
1:8629a0f: 
1:8629a0f:     
1:6eb29f6:     public long skip(long n)
1:6eb29f6:         throws IOException{
1:6eb29f6: 
1:6eb29f6:         if(closed){
1:6eb29f6:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:6eb29f6:         }
1:8629a0f:         
1:6eb29f6:         return super.skip(n);
1:6eb29f6:         
1:6eb29f6:     }
1:6eb29f6:     
1:6eb29f6:     
1:6eb29f6:     public int available()
1:6eb29f6:         throws IOException{
1:6eb29f6:         
1:6eb29f6:         if(closed){
1:6eb29f6:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:6eb29f6:         }
1:6eb29f6: 
1:6eb29f6:         return super.available();
1:6eb29f6:         
1:6eb29f6:     }
1:6eb29f6:     
1:6eb29f6:     
1:6eb29f6:     public void close()
1:6eb29f6:         throws IOException{
1:6eb29f6:         
1:6eb29f6:         super.close();
1:6eb29f6:         closed = true;
1:6eb29f6:         
1:6eb29f6:     }
1:6eb29f6:     
1:8629a0f:     
13:8629a0f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb29f6
/////////////////////////////////////////////////////////////////////////
1:     
1:     private static final String ALREADY_CLOSED_ERR_MESSAGE = 
1:     
1:     private boolean closed;
1:     
1:     public CloseFilterInputStream(InputStream is){
1:         
1:         super(is);
1:         closed = false;
1:         
1:     }
1:     
1:     
1:     public int read() 
1:         throws IOException {
1:         if(closed){
1:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:         }
1:         
1:         return super.read();
1:         
1:     }
1:     
1:     public int read(byte[] b) 
1:         throws IOException {
1:         
1:         if(closed){
1:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:         }
1:         return super.read(b);
1:     }
1:     
1:     
1:     public int read(byte[] b,
1:             int off,
1:             int len) 
1:         throws IOException{
1:         
1:         if(closed){
1:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:         }
1:         return super.read(b, off, len);
1:     }
1:     
1:     public long skip(long n)
1:         throws IOException{
1:         if(closed){
1:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:         }
1:         
1:         return super.skip(n);
1:         
1:     }
1:     
1:     
1:     public int available()
1:         throws IOException{
1:         
1:         if(closed){
1:             throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
1:         }
1:         return super.available();
1:         
1:     }
1:     
1:     
1:     public void close()
1:         throws IOException{
1:         
1:         super.close();
1:         closed = true;
1:         
1:     }
1:     
1:     
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:2d1bc8f
/////////////////////////////////////////////////////////////////////////
1:                 MessageId.OBJECT_CLOSED);
commit:49912a9
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f271471
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.MessageId;
1:             SqlException.getMessageUtil().getTextMessage(
0:                 MessageId.CONN_ALREADY_CLOSED);
commit:e6936ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.i18n.MessageUtil;
0: 	private static final String ALREADY_CLOSED_ERR_MESSAGE = 
0:         MessageUtil.getCompleteMessage("J104",
0:             SqlException.CLIENT_MESSAGE_RESOURCE_NAME, (Object[]) null);
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException(ALREADY_CLOSED_ERR_MESSAGE);
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:8629a0f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.CloseFilterInputStream
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.io.InputStream;
1: import java.io.FilterInputStream;
1: 
1: import java.io.IOException;
1: 
1: class CloseFilterInputStream extends FilterInputStream {
1: 	
0: 	private static final String ALREADY_CLOSED_ERR_MEASSAGE = "This object is already closed.";
1: 	
0: 	private boolean closed;
1: 	
1: 	
0: 	public CloseFilterInputStream(InputStream is){
1: 		
0: 		super(is);
0: 		closed = false;
1: 		
1: 	}
1: 	
1: 	
0: 	public int read() 
0: 		throws IOException {
1: 
0: 		if(closed){
0: 			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
1: 		}
1: 		
0: 		return super.read();
1: 		
1: 	}
1: 	
1: 
0: 	public int read(byte[] b) 
0: 		throws IOException {
1: 		
0: 		if(closed){
0: 			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
1: 		}
1: 
0: 		return super.read(b);
1: 
1: 	}
1: 	
1: 	
0: 	public int read(byte[] b,
0: 			int off,
0: 			int len) 
0: 		throws IOException{
1: 		
0: 		if(closed){
0: 			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
1: 		}
1: 
0: 		return super.read(b, off, len);
1: 
1: 	}
1: 
1: 	
0: 	public long skip(long n)
0: 		throws IOException{
1: 
0: 		if(closed){
0: 			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
1: 		}
1: 		
0: 		return super.skip(n);
1: 		
1: 	}
1: 	
1: 	
0: 	public int available()
0: 		throws IOException{
1: 		
0: 		if(closed){
0: 			throw new IOException(ALREADY_CLOSED_ERR_MEASSAGE);
1: 		}
1: 
0: 		return super.available();
1: 		
1: 	}
1: 	
1: 	
0: 	public void close()
0: 		throws IOException{
1: 		
0: 		super.close();
0: 		closed = true;
1: 		
1: 	}
1: 	
1: 	
1: }
============================================================================