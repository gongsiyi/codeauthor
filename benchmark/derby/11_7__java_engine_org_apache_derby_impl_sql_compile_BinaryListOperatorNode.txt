1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BinaryListOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
19:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * A BinaryListOperatorNode represents a built-in "binary" operator with a single
1:eac0369:  * operand on the left of the operator and a list of operands on the right.
1:eac0369:  * This covers operators such as IN and BETWEEN.
7:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public abstract class BinaryListOperatorNode extends ValueNode
8:eac0369: {
1:eac0369: 	String	methodName;
1:eac0369: 	/* operator used for error messages */
1:eac0369: 	String	operator;
1:eac0369: 
1:eac0369: 	ValueNode		leftOperand;
1:eac0369: 	ValueNodeList	rightOperandList;
1:eac0369: 
1:3bb140c:     BinaryListOperatorNode(
1:3bb140c:             ValueNode leftOperand,
1:3bb140c:             ValueNodeList rightOperandList,
1:3bb140c:             String operator,
1:3bb140c:             String methodName,
1:3bb140c:             ContextManager cm) throws SecurityException {
1:3bb140c:         super(cm);
1:3bb140c:         this.leftOperand = leftOperand;
1:3bb140c:         this.rightOperandList = rightOperandList;
1:3bb140c:         this.operator = operator;
1:3bb140c:         this.methodName = methodName;
1:3bb140c:     }
1:01217c2: 
1:01217c2: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:01217c2: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:01217c2: 		{
1:eac0369: 			return "operator: " + operator + "\n" +
1:eac0369: 				   "methodName: " + methodName + "\n" +
1:eac0369: 				super.toString();
1:01217c2: 		}
1:eac0369: 		else
1:01217c2: 		{
1:eac0369: 			return "";
1:01217c2: 		}
7:eac0369: 	}
1:01217c2: 
1:eac0369: 	/**
1:eac0369: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:eac0369: 	 * how tree printing is supposed to work.
1:eac0369: 	 *
1:eac0369: 	 * @param depth		The depth of this node in the tree
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:01217c2: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			super.printSubNodes(depth);
1:eac0369: 
1:eac0369: 			if (leftOperand != null)
1:eac0369: 			{
1:eac0369: 				printLabel(depth, "leftOperand: ");
1:eac0369: 				leftOperand.treePrint(depth + 1);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (rightOperandList != null)
1:eac0369: 			{
1:eac0369: 				printLabel(depth, "rightOperandList: ");
1:eac0369: 				rightOperandList.treePrint(depth + 1);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this expression.  This means binding the sub-expressions,
1:eac0369: 	 * as well as figuring out what the return type is for this expression.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList		The FROM list for the query this
1:eac0369: 	 *				expression is in, for binding columns.
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         leftOperand = leftOperand.bindExpression(fromList, subqueryList, aggregates);
1:09c2697:         rightOperandList.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		/* Is there a ? parameter on the left? */
1:d5bc20f: 		if (leftOperand.requiresTypeFromContext())
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** It's an error if both operands are all ? parameters.
1:eac0369: 			*/
1:eac0369: 			if (rightOperandList.containsAllParameterNodes())
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_BINARY_OPERANDS_BOTH_PARMS, 
1:eac0369: 																	operator);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/* Set the left operand to the type of right parameter. */
1:d5bc20f: 			leftOperand.setType(rightOperandList.getTypeServices());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Is there a ? parameter on the right? */
1:eac0369: 		if (rightOperandList.containsParameterNode())
1:eac0369: 		{
1:eac0369: 			/* Set the right operand to the type of the left parameter. */
1:eac0369: 			rightOperandList.setParameterDescriptor(leftOperand.getTypeServices());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* If the left operand is not a built-in type, then generate a conversion
1:eac0369: 		 * tree to a built-in type.
1:eac0369: 		 */
1:08d6ce2: 		if (leftOperand.getTypeId().userType())
1:eac0369: 		{
1:eac0369: 			leftOperand = leftOperand.genSQLJavaSQLTree();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Generate bound conversion trees for those elements in the rightOperandList
1:eac0369: 		 * that are not built-in types.
1:eac0369: 		 */
1:eac0369: 		rightOperandList.genSQLJavaSQLTrees();
1:eac0369: 
1:eac0369: 		/* Test type compatability and set type info for this node */
1:eac0369: 		bindComparisonOperator();
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Test the type compatability of the operands and set the type info
1:eac0369: 	 * for this node.  This method is useful both during binding and
1:eac0369: 	 * when we generate nodes within the language module outside of the parser.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     void bindComparisonOperator()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean				nullableResult;
1:eac0369: 
1:eac0369: 		/* Can the types be compared to each other? */
1:eac0369: 		rightOperandList.comparable(leftOperand);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Set the result type of this comparison operator based on the
1:eac0369: 		** operands.  The result type is always SQLBoolean - the only question
1:eac0369: 		** is whether it is nullable or not.  If either the leftOperand or
1:eac0369: 		** any of the elements in the rightOperandList is
1:eac0369: 		** nullable, the result of the comparison must be nullable, too, so
1:eac0369: 		** we can represent the unknown truth value.
1:eac0369: 		*/
1:eac0369: 		nullableResult = leftOperand.getTypeServices().isNullable() ||
1:eac0369: 							rightOperandList.isNullable();
1:eac0369: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Preprocess an expression tree.  We do a number of transformations
1:eac0369: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1:eac0369: 	 * subquery flattening.
1:eac0369: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1:eac0369: 	 *
1:eac0369: 	 * @param	numTables			Number of tables in the DML Statement
1:eac0369: 	 * @param	outerFromList		FromList from outer query block
1:eac0369: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1:eac0369: 	 * @param	outerPredicateList	PredicateList from outer query block
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode preprocess(int numTables,
1:eac0369: 								FromList outerFromList,
1:eac0369: 								SubqueryList outerSubqueryList,
1:eac0369: 								PredicateList outerPredicateList) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		leftOperand = leftOperand.preprocess(numTables,
1:eac0369: 											 outerFromList, outerSubqueryList,
1:eac0369: 											 outerPredicateList);
1:eac0369:  		rightOperandList.preprocess(numTables,
1:eac0369: 									outerFromList, outerSubqueryList,
1:eac0369: 									outerPredicateList);
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the leftOperand to the specified ValueNode
1:eac0369: 	 *
1:eac0369: 	 * @param newLeftOperand	The new leftOperand
1:eac0369: 	 */
1:3bb140c:     void setLeftOperand(ValueNode newLeftOperand)
1:eac0369: 	{
1:eac0369: 		leftOperand = newLeftOperand;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the leftOperand
1:eac0369: 	 *
1:eac0369: 	 * @return The current leftOperand.
1:eac0369: 	 */
1:3bb140c:     ValueNode getLeftOperand()
1:eac0369: 	{
1:eac0369: 		return leftOperand;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the rightOperandList to the specified ValueNodeList
1:eac0369: 	 *
1:eac0369: 	 * @param newRightOperandList	The new rightOperandList
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     void setRightOperandList(ValueNodeList newRightOperandList)
1:eac0369: 	{
1:eac0369: 		rightOperandList = newRightOperandList;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the rightOperandList
1:eac0369: 	 *
1:eac0369: 	 * @return The current rightOperandList.
1:eac0369: 	 */
1:3bb140c:     ValueNodeList getRightOperandList()
1:eac0369: 	{
1:eac0369: 		return rightOperandList;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Categorize this predicate.  Initially, this means
1:eac0369: 	 * building a bit map of the referenced tables for each predicate.
1:eac0369: 	 * If the source of this ColumnReference (at the next underlying level) 
1:eac0369: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1:eac0369: 	 * will not be pushed down.
1:eac0369: 	 *
1:eac0369: 	 * For example, in:
1:eac0369: 	 *		select * from (select 1 from s) a (x) where x = 1
1:eac0369: 	 * we will not push down x = 1.
1:eac0369: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1:eac0369: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1:eac0369: 	 * that tree into the pushed predicate, and that tree could contain
1:eac0369: 	 * subqueries and method calls.
1:eac0369: 	 * RESOLVE - revisit this issue once we have views.
1:eac0369: 	 *
1:eac0369: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1:eac0369: 	 * @param simplePredsOnly	Whether or not to consider method
1:eac0369: 	 *							calls, field references and conditional nodes
1:eac0369: 	 *							when building bit map
1:eac0369: 	 *
1:eac0369: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1:eac0369: 	 *						or a VirtualColumnNode.
1:eac0369: 	 * @exception StandardException			Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean pushable;
1:eac0369: 		pushable = leftOperand.categorize(referencedTabs, simplePredsOnly);
1:eac0369: 		pushable = (rightOperandList.categorize(referencedTabs, simplePredsOnly) && pushable);
1:eac0369: 		return pushable;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Remap all ColumnReferences in this tree to be clones of the
1:eac0369: 	 * underlying expression.
1:eac0369: 	 *
1:eac0369: 	 * @return ValueNode			The remapped expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException			Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode remapColumnReferencesToExpressions()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		// we need to assign back because a new object may be returned, beetle 4983
1:eac0369: 		leftOperand = leftOperand.remapColumnReferencesToExpressions();
1:eac0369: 		rightOperandList.remapColumnReferencesToExpressions();
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this expression tree represents a constant expression.
1:eac0369: 	 *
1:eac0369: 	 * @return	Whether or not this expression tree represents a constant expression.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean isConstantExpression()
1:eac0369: 	{
1:eac0369: 		return (leftOperand.isConstantExpression() &&
1:eac0369: 				rightOperandList.isConstantExpression());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see ValueNode#constantExpression */
1:3bb140c:     @Override
1:3bb140c:     boolean constantExpression(PredicateList whereClause)
1:eac0369: 	{
1:eac0369: 		return (leftOperand.constantExpression(whereClause) &&
1:eac0369: 				rightOperandList.constantExpression(whereClause));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the variant type for the underlying expression.
1:eac0369: 	 * The variant type can be:
1:eac0369: 	 *		VARIANT				- variant within a scan
1:eac0369: 	 *							  (method calls and non-static field access)
1:eac0369: 	 *		SCAN_INVARIANT		- invariant within a scan
1:eac0369: 	 *							  (column references from outer tables)
1:eac0369: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:eac0369: 	 *		CONSTANT			- immutable
1:eac0369: 	 *
1:eac0369: 	 * @return	The variant type for the underlying expression.
1:eac0369: 	 * @exception StandardException	thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	protected int getOrderableVariantType() throws StandardException
1:eac0369: 	{
1:eac0369: 		int leftType = leftOperand.getOrderableVariantType();
1:eac0369: 		int rightType = rightOperandList.getOrderableVariantType();
1:eac0369: 
1:eac0369: 		return Math.min(leftType, rightType);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dd2f5a8: 	 * Accept the visitor for all visitable children of this node.
1:eac0369: 	 * 
1:eac0369: 	 * @param v the visitor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:dd2f5a8: 	void acceptChildren(Visitor v)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:dd2f5a8: 		super.acceptChildren(v);
1:eac0369: 
1:aebfb28: 		if (leftOperand != null)
1:eac0369: 		{
1:eac0369: 			leftOperand = (ValueNode)leftOperand.accept(v);
1:eac0369: 		}
1:eac0369: 			
1:aebfb28: 		if (rightOperandList != null)
1:eac0369: 		{
1:eac0369: 			rightOperandList = (ValueNodeList)rightOperandList.accept(v);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369:         
1:eac0369:         /**
1:01217c2:          * @inheritDoc
1:01217c2:          */
1:2706d1f:     boolean isEquivalent(ValueNode o) throws StandardException
1:01217c2: 	{
1:2706d1f:         if (! isSameNodeKind(o)) {
3:01217c2: 			return false;
1:01217c2: 		}
1:2706d1f: 
1:01217c2: 		BinaryListOperatorNode other = (BinaryListOperatorNode)o;
1:01217c2: 		if (!operator.equals(other.operator)
1:01217c2: 				|| !leftOperand.isEquivalent(other.getLeftOperand())) 
1:01217c2: 		{
1:01217c2: 			return false;
1:01217c2: 		}
1:fc5f3cc: 
1:fc5f3cc:         if (!rightOperandList.isEquivalent(other.rightOperandList))
1:fc5f3cc:         {
1:fc5f3cc:             return false;
1:fc5f3cc:         }
1:fc5f3cc: 
1:01217c2: 		return true;
1:01217c2: 	}
1:01217c2: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode o) throws StandardException
1:         if (! isSameNodeKind(o)) {
1: 
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1:     BinaryListOperatorNode(
1:             ValueNode leftOperand,
1:             ValueNodeList rightOperandList,
1:             String operator,
1:             String methodName,
1:             ContextManager cm) throws SecurityException {
1:         super(cm);
1:         this.leftOperand = leftOperand;
1:         this.rightOperandList = rightOperandList;
1:         this.operator = operator;
1:         this.methodName = methodName;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     void bindComparisonOperator()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:     void setLeftOperand(ValueNode newLeftOperand)
/////////////////////////////////////////////////////////////////////////
1:     ValueNode getLeftOperand()
/////////////////////////////////////////////////////////////////////////
1:     void setRightOperandList(ValueNodeList newRightOperandList)
/////////////////////////////////////////////////////////////////////////
1:     ValueNodeList getRightOperandList()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode remapColumnReferencesToExpressions()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean isConstantExpression()
1:     @Override
1:     boolean constantExpression(PredicateList whereClause)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         leftOperand = leftOperand.bindExpression(fromList, subqueryList, aggregates);
1:         rightOperandList.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         FromList fromList, SubqueryList subqueryList, List aggregateVector)
commit:fc5f3cc
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (!rightOperandList.isEquivalent(other.rightOperandList))
1:         {
1:             return false;
1:         }
1: 
commit:aebfb28
/////////////////////////////////////////////////////////////////////////
1: 		if (leftOperand != null)
1: 		if (rightOperandList != null)
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * Accept the visitor for all visitable children of this node.
1: 	void acceptChildren(Visitor v)
1: 		super.acceptChildren(v);
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e2f08d2
/////////////////////////////////////////////////////////////////////////
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1:         
1:         /**
1:          * @inheritDoc
1:          */
0: 	protected boolean isEquivalent(ValueNode o) throws StandardException
1: 	{
0: 		if (!isSameNodeType(o))
1: 		{
1: 			return false;
1: 		}
1: 		BinaryListOperatorNode other = (BinaryListOperatorNode)o;
1: 		if (!operator.equals(other.operator)
1: 				|| !leftOperand.isEquivalent(other.getLeftOperand())) 
1: 		{
1: 			return false;
1: 		}
1: 		
0: 		int sz = getRightOperandList().size();
0: 		if (sz != other.rightOperandList.size())
1: 		{
1: 			return false;
1: 		}
0: 		for (int i = 0; i < sz; i++)
1: 		{
0: 			ValueNode e = (ValueNode)rightOperandList.elementAt(i);
0: 			if (!e.isEquivalent((ValueNode)other.rightOperandList.elementAt(i))) 
1: 			{
1: 				return false;
1: 			}
1: 		}
1: 		return true;
1: 	}
commit:08d6ce2
/////////////////////////////////////////////////////////////////////////
1: 		if (leftOperand.getTypeId().userType())
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BinaryListOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: 
1: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * A BinaryListOperatorNode represents a built-in "binary" operator with a single
1:  * operand on the left of the operator and a list of operands on the right.
1:  * This covers operators such as IN and BETWEEN.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
1: public abstract class BinaryListOperatorNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	String	methodName;
1: 	/* operator used for error messages */
1: 	String	operator;
1: 
0: 	String		leftInterfaceType;
0: 	String		rightInterfaceType;
1: 
0: 	ValueNode		receiver; // used in generation
1: 	ValueNode		leftOperand;
1: 	ValueNodeList	rightOperandList;
1: 
1: 	/**
0: 	 * Initializer for a BinaryListOperatorNode
1: 	 *
0: 	 * @param leftOperand		The left operand of the node
0: 	 * @param rightOperandList	The right operand list of the node
0: 	 * @param operator			String representation of operator
1: 	 */
1: 
0: 	public void init(Object leftOperand, Object rightOperandList,
0: 					   Object operator, Object methodName)
1: 	{
0: 		this.leftOperand = (ValueNode) leftOperand;
0: 		this.rightOperandList = (ValueNodeList) rightOperandList;
0: 		this.operator = (String) operator;
0: 		this.methodName = (String) methodName;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "operator: " + operator + "\n" +
1: 				   "methodName: " + methodName + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 
1: 			if (leftOperand != null)
1: 			{
1: 				printLabel(depth, "leftOperand: ");
1: 				leftOperand.treePrint(depth + 1);
1: 			}
1: 
1: 			if (rightOperandList != null)
1: 			{
1: 				printLabel(depth, "rightOperandList: ");
1: 				rightOperandList.treePrint(depth + 1);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * Set the clause that this node appears in.
1: 	 *
0: 	 * @param clause	The clause that this node appears in.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setClause(int clause)
1: 	{
0: 		super.setClause(clause);
0: 		leftOperand.setClause(clause);
0: 		rightOperandList.setClause(clause);
1: 	}
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
1: 	 *				expression is in, for binding columns.
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector) 
1: 			throws StandardException
1: 	{
0: 		leftOperand = leftOperand.bindExpression(fromList, subqueryList, aggregateVector);
0: 		rightOperandList.bindExpression(fromList, subqueryList, aggregateVector);
1: 
1: 		/* Is there a ? parameter on the left? */
0: 		if (leftOperand.isParameterNode())
1: 		{
0: 			ValueNode rightOperand = (ValueNode) rightOperandList.elementAt(0);
1: 
1: 			/*
1: 			** It's an error if both operands are all ? parameters.
1: 			*/
1: 			if (rightOperandList.containsAllParameterNodes())
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_BINARY_OPERANDS_BOTH_PARMS, 
1: 																	operator);
1: 			}
1: 
1: 			/* Set the left operand to the type of right parameter. */
0: 			((ParameterNode) leftOperand).setDescriptor(rightOperandList.getTypeServices());
1: 		}
1: 
1: 		/* Is there a ? parameter on the right? */
1: 		if (rightOperandList.containsParameterNode())
1: 		{
1: 			/* Set the right operand to the type of the left parameter. */
1: 			rightOperandList.setParameterDescriptor(leftOperand.getTypeServices());
1: 		}
1: 
1: 		/* If the left operand is not a built-in type, then generate a conversion
1: 		 * tree to a built-in type.
1: 		 */
0: 		if (! leftOperand.getTypeId().systemBuiltIn())
1: 		{
1: 			leftOperand = leftOperand.genSQLJavaSQLTree();
1: 		}
1: 
1: 		/* Generate bound conversion trees for those elements in the rightOperandList
1: 		 * that are not built-in types.
1: 		 */
1: 		rightOperandList.genSQLJavaSQLTrees();
1: 
1: 		/* Test type compatability and set type info for this node */
1: 		bindComparisonOperator();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Test the type compatability of the operands and set the type info
1: 	 * for this node.  This method is useful both during binding and
1: 	 * when we generate nodes within the language module outside of the parser.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void bindComparisonOperator()
1: 			throws StandardException
1: 	{
1: 		boolean				nullableResult;
1: 
1: 		/* Can the types be compared to each other? */
1: 		rightOperandList.comparable(leftOperand);
1: 
1: 		/*
1: 		** Set the result type of this comparison operator based on the
1: 		** operands.  The result type is always SQLBoolean - the only question
1: 		** is whether it is nullable or not.  If either the leftOperand or
1: 		** any of the elements in the rightOperandList is
1: 		** nullable, the result of the comparison must be nullable, too, so
1: 		** we can represent the unknown truth value.
1: 		*/
1: 		nullableResult = leftOperand.getTypeServices().isNullable() ||
1: 							rightOperandList.isNullable();
1: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
1: 	}
1: 
1: 	/**
1: 	 * Preprocess an expression tree.  We do a number of transformations
1: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1: 	 * subquery flattening.
1: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1: 	 *
1: 	 * @param	numTables			Number of tables in the DML Statement
1: 	 * @param	outerFromList		FromList from outer query block
1: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode preprocess(int numTables,
1: 								FromList outerFromList,
1: 								SubqueryList outerSubqueryList,
1: 								PredicateList outerPredicateList) 
1: 					throws StandardException
1: 	{
1: 		leftOperand = leftOperand.preprocess(numTables,
1: 											 outerFromList, outerSubqueryList,
1: 											 outerPredicateList);
1:  		rightOperandList.preprocess(numTables,
1: 									outerFromList, outerSubqueryList,
1: 									outerPredicateList);
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Set the leftOperand to the specified ValueNode
1: 	 *
1: 	 * @param newLeftOperand	The new leftOperand
1: 	 *
0: 	 * @return None.
1: 	 */
0: 	public void setLeftOperand(ValueNode newLeftOperand)
1: 	{
1: 		leftOperand = newLeftOperand;
1: 	}
1: 
1: 	/**
1: 	 * Get the leftOperand
1: 	 *
1: 	 * @return The current leftOperand.
1: 	 */
0: 	public ValueNode getLeftOperand()
1: 	{
1: 		return leftOperand;
1: 	}
1: 
1: 	/**
1: 	 * Set the rightOperandList to the specified ValueNodeList
1: 	 *
1: 	 * @param newRightOperandList	The new rightOperandList
1: 	 *
0: 	 * @return None.
1: 	 */
0: 	public void setRightOperandList(ValueNodeList newRightOperandList)
1: 	{
1: 		rightOperandList = newRightOperandList;
1: 	}
1: 
1: 	/**
1: 	 * Get the rightOperandList
1: 	 *
1: 	 * @return The current rightOperandList.
1: 	 */
0: 	public ValueNodeList getRightOperandList()
1: 	{
1: 		return rightOperandList;
1: 	}
1: 
1: 	/**
1: 	 * Categorize this predicate.  Initially, this means
1: 	 * building a bit map of the referenced tables for each predicate.
1: 	 * If the source of this ColumnReference (at the next underlying level) 
1: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1: 	 * will not be pushed down.
1: 	 *
1: 	 * For example, in:
1: 	 *		select * from (select 1 from s) a (x) where x = 1
1: 	 * we will not push down x = 1.
1: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1: 	 * that tree into the pushed predicate, and that tree could contain
1: 	 * subqueries and method calls.
1: 	 * RESOLVE - revisit this issue once we have views.
1: 	 *
1: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1: 	 * @param simplePredsOnly	Whether or not to consider method
1: 	 *							calls, field references and conditional nodes
1: 	 *							when building bit map
1: 	 *
1: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1: 	 *						or a VirtualColumnNode.
1: 	 * @exception StandardException			Thrown on error
1: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1: 		throws StandardException
1: 	{
1: 		boolean pushable;
1: 		pushable = leftOperand.categorize(referencedTabs, simplePredsOnly);
1: 		pushable = (rightOperandList.categorize(referencedTabs, simplePredsOnly) && pushable);
1: 		return pushable;
1: 	}
1: 
1: 	/**
1: 	 * Remap all ColumnReferences in this tree to be clones of the
1: 	 * underlying expression.
1: 	 *
1: 	 * @return ValueNode			The remapped expression tree.
1: 	 *
1: 	 * @exception StandardException			Thrown on error
1: 	 */
0: 	public ValueNode remapColumnReferencesToExpressions()
1: 		throws StandardException
1: 	{
1: 		// we need to assign back because a new object may be returned, beetle 4983
1: 		leftOperand = leftOperand.remapColumnReferencesToExpressions();
1: 		rightOperandList.remapColumnReferencesToExpressions();
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not this expression tree represents a constant expression.
1: 	 *
1: 	 * @return	Whether or not this expression tree represents a constant expression.
1: 	 */
0: 	public boolean isConstantExpression()
1: 	{
1: 		return (leftOperand.isConstantExpression() &&
1: 				rightOperandList.isConstantExpression());
1: 	}
1: 
1: 	/** @see ValueNode#constantExpression */
0: 	public boolean constantExpression(PredicateList whereClause)
1: 	{
1: 		return (leftOperand.constantExpression(whereClause) &&
1: 				rightOperandList.constantExpression(whereClause));
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *		CONSTANT			- immutable
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 * @exception StandardException	thrown on error
1: 	 */
1: 	protected int getOrderableVariantType() throws StandardException
1: 	{
1: 		int leftType = leftOperand.getOrderableVariantType();
1: 		int rightType = rightOperandList.getOrderableVariantType();
1: 
1: 		return Math.min(leftType, rightType);
1: 	}
1: 
1: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
1: 	 * 
1: 	 * @param v the visitor
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	public Visitable accept(Visitor v) 
1: 		throws StandardException
1: 	{
0: 		Visitable		returnNode = v.visit(this);
1: 
0: 		if (v.skipChildren(this))
1: 		{
0: 			return returnNode;
1: 		}
1: 
0: 		if (leftOperand != null && !v.stopTraversal())
1: 		{
1: 			leftOperand = (ValueNode)leftOperand.accept(v);
1: 		}
1: 			
0: 		if (rightOperandList != null && !v.stopTraversal())
1: 		{
1: 			rightOperandList = (ValueNodeList)rightOperandList.accept(v);
1: 		}
1: 			
0: 		return returnNode;
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:63385d4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f63b7da
/////////////////////////////////////////////////////////////////////////
0: 			leftOperand.setCollationUsingCompilationSchema(
commit:7c5fbc4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
0: 			//? parameter should pick up the collation type of the schema in
0: 			//which this statement is getting compiled.
0: 			leftOperand.getTypeServices().setCollationDerivation(
0: 					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 			leftOperand.getTypeServices().setCollationType(
0: 					getLanguageConnectionContext().getDefaultSchema().getCollationType());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b3bf9ca
/////////////////////////////////////////////////////////////////////////
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 		if (leftOperand.requiresTypeFromContext())
/////////////////////////////////////////////////////////////////////////
1: 			leftOperand.setType(rightOperandList.getTypeServices());
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * A BinaryListOperatorNode represents a built-in "binary" operator with a single
0:  * operand on the left of the operator and a list of operands on the right.
0:  * This covers operators such as IN and BETWEEN.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public abstract class BinaryListOperatorNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	String	methodName;
0: 	/* operator used for error messages */
0: 	String	operator;
0: 
0: 	String		leftInterfaceType;
0: 	String		rightInterfaceType;
0: 
0: 	ValueNode		receiver; // used in generation
0: 	ValueNode		leftOperand;
0: 	ValueNodeList	rightOperandList;
0: 
0: 	/**
0: 	 * Initializer for a BinaryListOperatorNode
0: 	 *
0: 	 * @param leftOperand		The left operand of the node
0: 	 * @param rightOperandList	The right operand list of the node
0: 	 * @param operator			String representation of operator
0: 	 */
0: 
0: 	public void init(Object leftOperand, Object rightOperandList,
0: 					   Object operator, Object methodName)
0: 	{
0: 		this.leftOperand = (ValueNode) leftOperand;
0: 		this.rightOperandList = (ValueNodeList) rightOperandList;
0: 		this.operator = (String) operator;
0: 		this.methodName = (String) methodName;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "operator: " + operator + "\n" +
0: 				   "methodName: " + methodName + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
0: 	 * how tree printing is supposed to work.
0: 	 *
0: 	 * @param depth		The depth of this node in the tree
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void printSubNodes(int depth)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			super.printSubNodes(depth);
0: 
0: 			if (leftOperand != null)
0: 			{
0: 				printLabel(depth, "leftOperand: ");
0: 				leftOperand.treePrint(depth + 1);
0: 			}
0: 
0: 			if (rightOperandList != null)
0: 			{
0: 				printLabel(depth, "rightOperandList: ");
0: 				rightOperandList.treePrint(depth + 1);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Set the clause that this node appears in.
0: 	 *
0: 	 * @param clause	The clause that this node appears in.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setClause(int clause)
0: 	{
0: 		super.setClause(clause);
0: 		leftOperand.setClause(clause);
0: 		rightOperandList.setClause(clause);
0: 	}
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector) 
0: 			throws StandardException
0: 	{
0: 		leftOperand = leftOperand.bindExpression(fromList, subqueryList, aggregateVector);
0: 		rightOperandList.bindExpression(fromList, subqueryList, aggregateVector);
0: 
0: 		/* Is there a ? parameter on the left? */
0: 		if (leftOperand.isParameterNode())
0: 		{
0: 			ValueNode rightOperand = (ValueNode) rightOperandList.elementAt(0);
0: 
0: 			/*
0: 			** It's an error if both operands are all ? parameters.
0: 			*/
0: 			if (rightOperandList.containsAllParameterNodes())
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_BINARY_OPERANDS_BOTH_PARMS, 
0: 																	operator);
0: 			}
0: 
0: 			/* Set the left operand to the type of right parameter. */
0: 			((ParameterNode) leftOperand).setDescriptor(rightOperandList.getTypeServices());
0: 		}
0: 
0: 		/* Is there a ? parameter on the right? */
0: 		if (rightOperandList.containsParameterNode())
0: 		{
0: 			/* Set the right operand to the type of the left parameter. */
0: 			rightOperandList.setParameterDescriptor(leftOperand.getTypeServices());
0: 		}
0: 
0: 		/* If the left operand is not a built-in type, then generate a conversion
0: 		 * tree to a built-in type.
0: 		 */
0: 		if (! leftOperand.getTypeId().systemBuiltIn())
0: 		{
0: 			leftOperand = leftOperand.genSQLJavaSQLTree();
0: 		}
0: 
0: 		/* Generate bound conversion trees for those elements in the rightOperandList
0: 		 * that are not built-in types.
0: 		 */
0: 		rightOperandList.genSQLJavaSQLTrees();
0: 
0: 		/* Test type compatability and set type info for this node */
0: 		bindComparisonOperator();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Test the type compatability of the operands and set the type info
0: 	 * for this node.  This method is useful both during binding and
0: 	 * when we generate nodes within the language module outside of the parser.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void bindComparisonOperator()
0: 			throws StandardException
0: 	{
0: 		boolean				nullableResult;
0: 
0: 		/* Can the types be compared to each other? */
0: 		rightOperandList.comparable(leftOperand);
0: 
0: 		/*
0: 		** Set the result type of this comparison operator based on the
0: 		** operands.  The result type is always SQLBoolean - the only question
0: 		** is whether it is nullable or not.  If either the leftOperand or
0: 		** any of the elements in the rightOperandList is
0: 		** nullable, the result of the comparison must be nullable, too, so
0: 		** we can represent the unknown truth value.
0: 		*/
0: 		nullableResult = leftOperand.getTypeServices().isNullable() ||
0: 							rightOperandList.isNullable();
0: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
0: 	}
0: 
0: 	/**
0: 	 * Preprocess an expression tree.  We do a number of transformations
0: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
0: 	 * subquery flattening.
0: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
0: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode preprocess(int numTables,
0: 								FromList outerFromList,
0: 								SubqueryList outerSubqueryList,
0: 								PredicateList outerPredicateList) 
0: 					throws StandardException
0: 	{
0: 		leftOperand = leftOperand.preprocess(numTables,
0: 											 outerFromList, outerSubqueryList,
0: 											 outerPredicateList);
0:  		rightOperandList.preprocess(numTables,
0: 									outerFromList, outerSubqueryList,
0: 									outerPredicateList);
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Set the leftOperand to the specified ValueNode
0: 	 *
0: 	 * @param newLeftOperand	The new leftOperand
0: 	 *
0: 	 * @return None.
0: 	 */
0: 	public void setLeftOperand(ValueNode newLeftOperand)
0: 	{
0: 		leftOperand = newLeftOperand;
0: 	}
0: 
0: 	/**
0: 	 * Get the leftOperand
0: 	 *
0: 	 * @return The current leftOperand.
0: 	 */
0: 	public ValueNode getLeftOperand()
0: 	{
0: 		return leftOperand;
0: 	}
0: 
0: 	/**
0: 	 * Set the rightOperandList to the specified ValueNodeList
0: 	 *
0: 	 * @param newRightOperandList	The new rightOperandList
0: 	 *
0: 	 * @return None.
0: 	 */
0: 	public void setRightOperandList(ValueNodeList newRightOperandList)
0: 	{
0: 		rightOperandList = newRightOperandList;
0: 	}
0: 
0: 	/**
0: 	 * Get the rightOperandList
0: 	 *
0: 	 * @return The current rightOperandList.
0: 	 */
0: 	public ValueNodeList getRightOperandList()
0: 	{
0: 		return rightOperandList;
0: 	}
0: 
0: 	/**
0: 	 * Categorize this predicate.  Initially, this means
0: 	 * building a bit map of the referenced tables for each predicate.
0: 	 * If the source of this ColumnReference (at the next underlying level) 
0: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
0: 	 * will not be pushed down.
0: 	 *
0: 	 * For example, in:
0: 	 *		select * from (select 1 from s) a (x) where x = 1
0: 	 * we will not push down x = 1.
0: 	 * NOTE: It would be easy to handle the case of a constant, but if the
0: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
0: 	 * that tree into the pushed predicate, and that tree could contain
0: 	 * subqueries and method calls.
0: 	 * RESOLVE - revisit this issue once we have views.
0: 	 *
0: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
0: 	 * @param simplePredsOnly	Whether or not to consider method
0: 	 *							calls, field references and conditional nodes
0: 	 *							when building bit map
0: 	 *
0: 	 * @return boolean		Whether or not source.expression is a ColumnReference
0: 	 *						or a VirtualColumnNode.
0: 	 * @exception StandardException			Thrown on error
0: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
0: 		throws StandardException
0: 	{
0: 		boolean pushable;
0: 		pushable = leftOperand.categorize(referencedTabs, simplePredsOnly);
0: 		pushable = (rightOperandList.categorize(referencedTabs, simplePredsOnly) && pushable);
0: 		return pushable;
0: 	}
0: 
0: 	/**
0: 	 * Remap all ColumnReferences in this tree to be clones of the
0: 	 * underlying expression.
0: 	 *
0: 	 * @return ValueNode			The remapped expression tree.
0: 	 *
0: 	 * @exception StandardException			Thrown on error
0: 	 */
0: 	public ValueNode remapColumnReferencesToExpressions()
0: 		throws StandardException
0: 	{
0: 		// we need to assign back because a new object may be returned, beetle 4983
0: 		leftOperand = leftOperand.remapColumnReferencesToExpressions();
0: 		rightOperandList.remapColumnReferencesToExpressions();
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not this expression tree represents a constant expression.
0: 	 *
0: 	 * @return	Whether or not this expression tree represents a constant expression.
0: 	 */
0: 	public boolean isConstantExpression()
0: 	{
0: 		return (leftOperand.isConstantExpression() &&
0: 				rightOperandList.isConstantExpression());
0: 	}
0: 
0: 	/** @see ValueNode#constantExpression */
0: 	public boolean constantExpression(PredicateList whereClause)
0: 	{
0: 		return (leftOperand.constantExpression(whereClause) &&
0: 				rightOperandList.constantExpression(whereClause));
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *		CONSTANT			- immutable
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 * @exception StandardException	thrown on error
0: 	 */
0: 	protected int getOrderableVariantType() throws StandardException
0: 	{
0: 		int leftType = leftOperand.getOrderableVariantType();
0: 		int rightType = rightOperandList.getOrderableVariantType();
0: 
0: 		return Math.min(leftType, rightType);
0: 	}
0: 
0: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
0: 	 * 
0: 	 * @param v the visitor
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public Visitable accept(Visitor v) 
0: 		throws StandardException
0: 	{
0: 		Visitable		returnNode = v.visit(this);
0: 
0: 		if (v.skipChildren(this))
0: 		{
0: 			return returnNode;
0: 		}
0: 
0: 		if (leftOperand != null && !v.stopTraversal())
0: 		{
0: 			leftOperand = (ValueNode)leftOperand.accept(v);
0: 		}
0: 			
0: 		if (rightOperandList != null && !v.stopTraversal())
0: 		{
0: 			rightOperandList = (ValueNodeList)rightOperandList.accept(v);
0: 		}
0: 			
0: 		return returnNode;
0: 	}
0: }
============================================================================