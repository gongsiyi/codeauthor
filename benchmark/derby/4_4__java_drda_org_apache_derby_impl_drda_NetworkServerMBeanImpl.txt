1:cb68a03: /*
1:cb68a03: 
1:cb68a03:    Derby - Class org.apache.derby.impl.drda.NetworkServerMBeanImpl
1:cb68a03: 
1:cb68a03:    Licensed to the Apache Software Foundation (ASF) under one or more
1:cb68a03:    contributor license agreements.  See the NOTICE file distributed with
1:cb68a03:    this work for additional information regarding copyright ownership.
1:cb68a03:    The ASF licenses this file to You under the Apache License, Version 2.0
1:cb68a03:    (the "License"); you may not use this file except in compliance with
1:cb68a03:    the License.  You may obtain a copy of the License at
1:cb68a03: 
1:cb68a03:       http://www.apache.org/licenses/LICENSE-2.0
1:cb68a03: 
1:cb68a03:    Unless required by applicable law or agreed to in writing, software
1:cb68a03:    distributed under the License is distributed on an "AS IS" BASIS,
1:cb68a03:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cb68a03:    See the License for the specific language governing permissions and
1:cb68a03:    limitations under the License.
1:cb68a03: 
1:cb68a03:  */
1:cb68a03: 
1:cb68a03: package org.apache.derby.impl.drda;
1:eb71b7f: 
1:eb71b7f: import java.security.AccessControlException;
1:eb71b7f: import java.security.AccessController;
1:db4c995: import org.apache.derby.drda.NetworkServerControl;
1:cb68a03: import org.apache.derby.iapi.reference.Property;
1:cb68a03: import org.apache.derby.iapi.services.monitor.Monitor;
1:cb68a03: import org.apache.derby.iapi.services.property.PropertyUtil;
1:db4c995: import org.apache.derby.mbeans.drda.NetworkServerMBean;
1:db4c995: import org.apache.derby.security.SystemPermission;
1:cb68a03: 
1:cb68a03: /**
1:cb68a03:  * <p>
1:cb68a03:  * This is an implementation of the 
1:cb68a03:  * <code>org.apache.derby.mbeans.drda.NetworkServerMBean</code>,
1:cb68a03:  * providing management and monitoring capabilities related to the Network 
1:cb68a03:  * Server through JMX.</p>
1:cb68a03:  * <p>
1:cb68a03:  * This bean uses callbacks to the NetworkServerControlImpl class instead of
1:cb68a03:  * invoking NetworkServerControl, as it is the impl class that contains most
1:cb68a03:  * of the information we want to expose via JMX.</p>
1:cb68a03:  * 
1:cb68a03:  * @see org.apache.derby.mbeans.drda.NetworkServerMBean
1:cb68a03:  */
1:cb68a03: class NetworkServerMBeanImpl implements NetworkServerMBean {
1:cb68a03:     
1:cb68a03:     /* The instrumented server implementation */
1:cb68a03:     private NetworkServerControlImpl server;
1:cb68a03:     
1:d72e3be:     private final long startTime;
1:d72e3be:     
1:cb68a03:     NetworkServerMBeanImpl(NetworkServerControlImpl nsc) {
1:cb68a03:         this.server = nsc;
1:d72e3be:         startTime = System.currentTimeMillis();
1:cb68a03:     }
1:2b80f9b:     
1:eb71b7f:     private static final SystemPermission CONTROL =
1:eb71b7f:         new SystemPermission(SystemPermission.SERVER,
1:eb71b7f:                 SystemPermission.CONTROL);
1:eb71b7f:     private static final SystemPermission MONITOR =
1:eb71b7f:         new SystemPermission(SystemPermission.SERVER,
1:eb71b7f:                 SystemPermission.MONITOR);
1:eb71b7f:     
1:2b80f9b:     /**
1:2b80f9b:      * Ensure the caller has permission to control the network server.
1:2b80f9b:      */
1:eb71b7f:     private static void checkControl() { 
1:356ff6f:         checkPermission(CONTROL);
1:2b80f9b:     }
1:2b80f9b: 
1:2b80f9b:     /**
1:2b80f9b:      * Ensure the caller has permission to monitor the network server.
1:2b80f9b:      */
1:eb71b7f:     private static void checkMonitor() { 
1:eb71b7f:         checkPermission(MONITOR);
1:eb71b7f:     }
1:eb71b7f:     
1:eb71b7f:     private static void checkPermission(SystemPermission permission)
1:eb71b7f:     {
1:eb71b7f:         try {
1:eb71b7f:             if (System.getSecurityManager() != null)
1:eb71b7f:                 AccessController.checkPermission(permission);
1:eb71b7f:         } catch (AccessControlException e) {
1:eb71b7f:             // Need to throw a simplified version as AccessControlException
1:eb71b7f:             // will have a reference to Derby's SystemPermission which most likely
1:eb71b7f:             // will not be available on the client.
1:eb71b7f:             throw new SecurityException(e.getMessage());
1:eb71b7f:         }  
1:2b80f9b:     }
1:cb68a03: 
1:cb68a03:     // Some of the code is disabled (commented out) due to security concerns,
1:cb68a03:     // see DERBY-1387 for details.
1:cb68a03:     
1:cb68a03:     //
1:cb68a03:     // ------------------------- MBEAN ATTRIBUTES  ----------------------------
1:cb68a03:     //
1:cb68a03:     
1:cb68a03:     public String getDrdaHost() {
1:2b80f9b:         // Since this is sensitive information require control permission.
1:2b80f9b:         checkControl();
1:2b80f9b: 
1:cb68a03:         String host = getServerProperty(Property.DRDA_PROP_HOSTNAME);
1:cb68a03:         return host;
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     public boolean getDrdaKeepAlive() {
1:eb71b7f:         checkMonitor();
1:cb68a03:         String on = getServerProperty(Property.DRDA_PROP_KEEPALIVE);
1:cb68a03:         return ( "true".equals(on) ? true : false);
1:cb68a03:     }
1:2b80f9b:     
1:cb68a03:     public int getDrdaMaxThreads() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:cb68a03:         int maxThreads = 0; // default
1:cb68a03:         String maxThreadsStr = getServerProperty(Property.DRDA_PROP_MAXTHREADS);
1:cb68a03:         if (maxThreadsStr != null) {
1:cb68a03:             try {
1:cb68a03:                 maxThreads = Integer.parseInt(maxThreadsStr);
1:cb68a03:             } catch (NumberFormatException nfe) {
1:cb68a03:                 // ignore, use the default value
1:cb68a03:             }
1:cb68a03:         }
1:cb68a03:         return maxThreads;
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public void setDrdaMaxThreads(int max)
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         try {
1:cb68a03:             server.netSetMaxThreads(max);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }*/
1:cb68a03:     
1:cb68a03:     public int getDrdaPortNumber() {
1:2b80f9b:         // Since this is sensitive information require control permission.
1:2b80f9b:         checkControl();
1:2b80f9b: 
1:cb68a03:         int portNumber = NetworkServerControl.DEFAULT_PORTNUMBER; // the default
1:cb68a03:         String portString = getServerProperty(Property.DRDA_PROP_PORTNUMBER);
1:cb68a03:         try {
1:cb68a03:             portNumber = Integer.parseInt(portString);
1:cb68a03:         } catch (NumberFormatException nfe) {
1:cb68a03:             // ignore, use the default value
1:cb68a03:         }
1:cb68a03:         return portNumber;
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     public String getDrdaSecurityMechanism() {
1:2b80f9b:         // Since this is sensitive information require control permission.
1:2b80f9b:         checkControl();
1:2b80f9b: 
1:cb68a03:         String secmec = getServerProperty(Property.DRDA_PROP_SECURITYMECHANISM);
1:cb68a03:         if (secmec == null) {
1:cb68a03:             // default is none (represented by the empty string)
1:cb68a03:             secmec = "";
1:cb68a03:         }
1:cb68a03:         return secmec;
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     public String getDrdaSslMode() {
1:2b80f9b:         // Since this is sensitive information require control permission.
1:2b80f9b:         checkControl();
1:2b80f9b: 
1:cb68a03:         // may be null if not set (?)
1:cb68a03:         String SSLMode = getServerProperty(Property.DRDA_PROP_SSL_MODE);
1:cb68a03:         return SSLMode;
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     
1:b7c93fa:     public int getDrdaStreamOutBufferSize() {
1:2b80f9b:         checkMonitor();
1:cb68a03:         
1:cb68a03:         // TODO - Fix NetworkServerControlImpl so that this setting is included
1:cb68a03:         //        in the property values returned by getPropertyValues()?
1:cb68a03:         //String size = getServerProperty(Property.DRDA_PROP_STREAMOUTBUFFERSIZE);
1:b7c93fa:         int size = PropertyUtil.getSystemInt(
1:b7c93fa:                 Property.DRDA_PROP_STREAMOUTBUFFERSIZE, 0);
1:cb68a03:         return size;
1:cb68a03:     }
1:cb68a03: 
1:cb68a03:        
1:cb68a03:     public int getDrdaTimeSlice() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:cb68a03:         // relying on server to return the default if not set
1:cb68a03:         return server.getTimeSlice();
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public void setDrdaTimeSlice(int timeSlice)
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         try {
1:cb68a03:             server.netSetTimeSlice(timeSlice);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }*/
1:cb68a03:     
1:cb68a03:     public boolean getDrdaTraceAll() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:cb68a03:         String on = getServerProperty(Property.DRDA_PROP_TRACEALL);
1:cb68a03:         return ("true".equals(on) ? true : false );
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public void setDrdaTraceAll(boolean on)
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         try {
1:cb68a03:             server.trace(on);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }*/
1:cb68a03:     
1:cb68a03:     public String getDrdaTraceDirectory() {
1:2b80f9b:         // Since this is sensitive information require control
1:2b80f9b:         // (gives away information about the file system).
1:2b80f9b:         checkControl();
1:2b80f9b:         
1:cb68a03:         String traceDirectory = null;
1:cb68a03:         traceDirectory = getServerProperty(Property.DRDA_PROP_TRACEDIRECTORY);
1:cb68a03:         if(traceDirectory == null){
1:cb68a03:             // if traceDirectory is not set, derby.system.home is default
1:cb68a03:             traceDirectory = getServerProperty(Property.SYSTEM_HOME_PROPERTY);
1:cb68a03:         }
1:cb68a03:         
1:cb68a03:         // if derby.system.home is not set, current directory is default
1:cb68a03:         if (traceDirectory == null) {
1:cb68a03:             traceDirectory = PropertyUtil.getSystemProperty("user.dir");
1:cb68a03:         }
1:cb68a03:         return traceDirectory;
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public void setDrdaTraceDirectory(String dir)
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         try {
1:cb68a03:             server.sendSetTraceDirectory(dir);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }*/
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public String getSysInfo()
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         String sysInfo = "";
1:cb68a03:         try {
1:cb68a03:             sysInfo = server.sysinfo();
1:cb68a03:             // remove information that is also given in the DerbySystemMBean
1:cb68a03:             return sysInfo.substring(sysInfo.indexOf("DRDA"),sysInfo.indexOf("-- list"));
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }
1:cb68a03:      **/
1:cb68a03: 
1:e3972b6:     public int getConnectionCount() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:e3972b6:         return getActiveConnectionCount() + getWaitingConnectionCount();
1:e3972b6:     }
1:cb68a03:     
1:e3972b6:     public int getActiveConnectionCount() {
1:2b80f9b:         checkMonitor();
1:2b80f9b: 
1:1ab256e:         return server.getActiveSessions();
1:1ab256e:     }
1:cb68a03:     
1:e3972b6:     public int getWaitingConnectionCount() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         return server.getRunQueueSize();
1:1ab256e:     }
1:cb68a03:     
1:357ad1c:     public int getConnectionThreadPoolSize() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         return server.getThreadListSize();
1:1ab256e:     }
1:cb68a03:      
1:e3972b6:     public int getAccumulatedConnectionCount() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         return server.getConnectionNumber();
1:1ab256e:     }
1:cb68a03:     
1:1ab256e:     public long getBytesReceived() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         return server.getBytesRead();
1:1ab256e:     }
1:e3972b6:     
1:1ab256e:     public long getBytesSent() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         return server.getBytesWritten();
1:1ab256e:     }
3:1ab256e:     
1:1ab256e:     private long lastReceiveTime = System.currentTimeMillis();
1:1ab256e:     private long lastReceiveBytes = 0;
1:1ab256e:     private int receiveResult = 0;
1:1ab256e:     
1:357ad1c:     synchronized public int getBytesReceivedPerSecond(){
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         long now = System.currentTimeMillis();
1:1ab256e:         if (now - lastReceiveTime >= 1000) {
1:1ab256e:             long count = getBytesReceived();
1:357ad1c:             receiveResult = (int)((count - lastReceiveBytes) * 1000 /((now - lastReceiveTime)));
1:1ab256e:             lastReceiveTime = now;
1:1ab256e:             lastReceiveBytes = count;
1:1ab256e:         }
1:1ab256e:         return receiveResult;
1:1ab256e:     }
1:1ab256e: 
1:1ab256e:     private long lastSentTime = System.currentTimeMillis();
1:1ab256e:     private long lastSentBytes = 0;
1:1ab256e:     private int sentResult = 0;
1:1ab256e: 
1:357ad1c:     synchronized public int getBytesSentPerSecond(){
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:1ab256e:         long now = System.currentTimeMillis();
1:1ab256e:         if (now - lastSentTime >= 1000) {
1:1ab256e:             long count = getBytesSent();
1:357ad1c:             sentResult = (int) ((count - lastSentBytes) * 1000 / (now - lastSentTime));
1:1ab256e:             lastSentTime = now;
1:1ab256e:             lastSentBytes = count;
1:1ab256e:         }
1:1ab256e:         return sentResult;
1:1ab256e:     }
1:d72e3be:     
1:d72e3be:     /**
1:d72e3be:      * Return start time.
1:d72e3be:      */
1:d72e3be:     public long getStartTime() {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:d72e3be:         return startTime;
1:d72e3be:     }
1:d72e3be: 
1:d72e3be:     /**
1:d72e3be:      * Return time server has been running.
1:d72e3be:      */
1:d72e3be:     public long getUptime() {
1:2b80f9b:         checkMonitor();
1:1ab256e:         
1:2b80f9b:         return System.currentTimeMillis() - startTime;
1:d72e3be:     }
1:d72e3be: 
1:cb68a03:     // ------------------------- MBEAN OPERATIONS  ----------------------------
1:cb68a03:     
1:cb68a03:     /**
1:cb68a03:      * Pings the Network Server.
1:cb68a03:      * 
1:cb68a03:      * @see org.apache.derby.mbeans.drda.NetworkServerMBean#ping()
1:cb68a03:      * @throws Exception if the ping fails.
1:cb68a03:      */
1:cb68a03:     public void ping() throws Exception {
1:2b80f9b:         checkMonitor();
1:2b80f9b:         
1:cb68a03:         //String feedback = "Server pinged successfully.";
1:cb68a03:         //boolean success = true;
1:cb68a03:         try {
1:cb68a03:             server.ping();
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             //feedback = "Error occured while pinging server.";
1:cb68a03:             //success = false;
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public String traceConnection(int connection, boolean on)
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         String feedback;
1:cb68a03:         if(on){
1:cb68a03:             feedback = "Tracing enabled for connection " + connection
1:cb68a03:                 + ". \n (0 = all connections)";
1:cb68a03:         }
1:cb68a03:         else{
1:cb68a03:             feedback = "Tracing disabled for connection " + connection
1:cb68a03:                 + ". \n (0 = all connections)";           
1:cb68a03:         }
1:cb68a03:         try {
1:cb68a03:             server.trace(connection, on);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:         return feedback;
1:cb68a03:     }
1:cb68a03:      */
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public String enableConnectionLogging()
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         String feedback = "Connection logging enabled.";
1:cb68a03:         try {
1:cb68a03:             server.logConnections(true);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:         
1:cb68a03:         return feedback;
1:cb68a03:     }*/
1:cb68a03:    
1:cb68a03:     /*
1:cb68a03:     public String disableConnectionLogging()
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         String feedback = "Connection logging disabled.";
1:cb68a03:         try {
1:cb68a03:             server.logConnections(false);
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:        
1:cb68a03:        return feedback;
1:cb68a03:     }*/
1:cb68a03:     
1:cb68a03:     /*
1:cb68a03:     public void shutdown()
1:cb68a03:         throws Exception
1:cb68a03:     {
1:cb68a03:         try {
1:cb68a03:             server.shutdown();
1:cb68a03:         } catch (Exception ex) {
1:cb68a03:             Monitor.logThrowable(ex);
1:cb68a03:             throw ex;
1:cb68a03:         }
1:cb68a03:     }*/
1:cb68a03:    
1:cb68a03:    // ------------------------- UTILITY METHODS  ----------------------------
1:cb68a03:     
1:cb68a03:    /**
1:cb68a03:     *  Gets the value of a specific network server setting (property). 
1:cb68a03:     *  Most server-related property keys have the prefix 
1:cb68a03:     *  <code>derby.drda.</code> and may be found in the 
1:cb68a03:     *  org.apache.derby.iapi.reference.Property class.
1:cb68a03:     * 
1:cb68a03:     *  @see org.apache.derby.iapi.reference.Property
1:cb68a03:     *  @param property the name of the server property
1:cb68a03:     *  @return the value of the given server property
1:cb68a03:     */
1:cb68a03:    private String getServerProperty(String property) {
1:cb68a03:         return server.getPropertyValues().getProperty(property);     
1:cb68a03:    }
1:cb68a03: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derby.mbeans.drda.NetworkServerMBean;
1: import org.apache.derby.security.SystemPermission;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b7c93fa
/////////////////////////////////////////////////////////////////////////
1:     public int getDrdaStreamOutBufferSize() {
1:         int size = PropertyUtil.getSystemInt(
1:                 Property.DRDA_PROP_STREAMOUTBUFFERSIZE, 0);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:356ff6f
/////////////////////////////////////////////////////////////////////////
1:         checkPermission(CONTROL);
commit:eb71b7f
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessControlException;
1: import java.security.AccessController;
1: 
0: import org.apache.derby.security.SystemPermission;
/////////////////////////////////////////////////////////////////////////
1:     private static final SystemPermission CONTROL =
1:         new SystemPermission(SystemPermission.SERVER,
1:                 SystemPermission.CONTROL);
1:     private static final SystemPermission MONITOR =
1:         new SystemPermission(SystemPermission.SERVER,
1:                 SystemPermission.MONITOR);
1:     
1:     private static void checkControl() { 
0:         // checkPermission(CONTROL);
1:     private static void checkMonitor() { 
1:         checkPermission(MONITOR);
1:     }
1:     
1:     private static void checkPermission(SystemPermission permission)
1:     {
1:         try {
1:             if (System.getSecurityManager() != null)
1:                 AccessController.checkPermission(permission);
1:         } catch (AccessControlException e) {
1:             // Need to throw a simplified version as AccessControlException
1:             // will have a reference to Derby's SystemPermission which most likely
1:             // will not be available on the client.
1:             throw new SecurityException(e.getMessage());
1:         }  
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
commit:2b80f9b
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Ensure the caller has permission to control the network server.
1:      */
0:     private void checkControl() { 
0:         // TODO: implement check
1:     }
1: 
1:     /**
1:      * Ensure the caller has permission to monitor the network server.
1:      */
0:     private void checkMonitor() { 
0: //      TODO: implement check
1:     }
/////////////////////////////////////////////////////////////////////////
1:         // Since this is sensitive information require control permission.
1:         checkControl();
1: 
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         // Since this is sensitive information require control permission.
1:         checkControl();
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Since this is sensitive information require control permission.
1:         checkControl();
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Since this is sensitive information require control permission.
1:         checkControl();
1: 
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         // Since this is sensitive information require control
1:         // (gives away information about the file system).
1:         checkControl();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
1:         checkMonitor();
1: 
1:         checkMonitor();
1:         
1:         checkMonitor();
1:         
1:         checkMonitor();
1:         
1:         checkMonitor();
1:         
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         return System.currentTimeMillis() - startTime;
/////////////////////////////////////////////////////////////////////////
1:         checkMonitor();
1:         
commit:d72e3be
/////////////////////////////////////////////////////////////////////////
1:     private final long startTime;
1:     
1:         startTime = System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Return start time.
1:      */
1:     public long getStartTime() {
1:         return startTime;
1:     }
1: 
1:     /**
1:      * Return time server has been running.
1:      */
1:     public long getUptime() {
0:         return System.currentTimeMillis() - startTime;
1:         
1:     }
/////////////////////////////////////////////////////////////////////////
commit:cb68a03
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.NetworkServerMBeanImpl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
0: import org.apache.derby.mbeans.drda.NetworkServerMBean;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: /**
1:  * <p>
1:  * This is an implementation of the 
1:  * <code>org.apache.derby.mbeans.drda.NetworkServerMBean</code>,
1:  * providing management and monitoring capabilities related to the Network 
1:  * Server through JMX.</p>
1:  * <p>
1:  * This bean uses callbacks to the NetworkServerControlImpl class instead of
1:  * invoking NetworkServerControl, as it is the impl class that contains most
1:  * of the information we want to expose via JMX.</p>
1:  * 
1:  * @see org.apache.derby.mbeans.drda.NetworkServerMBean
1:  */
1: class NetworkServerMBeanImpl implements NetworkServerMBean {
1:     
1:     /* The instrumented server implementation */
1:     private NetworkServerControlImpl server;
1:     
1:     NetworkServerMBeanImpl(NetworkServerControlImpl nsc) {
1:         this.server = nsc;
1:     }
1: 
1:     // Some of the code is disabled (commented out) due to security concerns,
1:     // see DERBY-1387 for details.
1:     
1:     //
1:     // ------------------------- MBEAN ATTRIBUTES  ----------------------------
1:     //
1:     
1:     public String getDrdaHost() {
1:         String host = getServerProperty(Property.DRDA_PROP_HOSTNAME);
1:         return host;
1:     }
1:     
1:     public boolean getDrdaKeepAlive() {
1:         String on = getServerProperty(Property.DRDA_PROP_KEEPALIVE);
1:         return ( "true".equals(on) ? true : false);
1:     }
1:     
1:     public int getDrdaMaxThreads() {
1:         int maxThreads = 0; // default
1:         String maxThreadsStr = getServerProperty(Property.DRDA_PROP_MAXTHREADS);
1:         if (maxThreadsStr != null) {
1:             try {
1:                 maxThreads = Integer.parseInt(maxThreadsStr);
1:             } catch (NumberFormatException nfe) {
1:                 // ignore, use the default value
1:             }
1:         }
1:         return maxThreads;
1:     }
1:     
1:     /*
1:     public void setDrdaMaxThreads(int max)
1:         throws Exception
1:     {
1:         try {
1:             server.netSetMaxThreads(max);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:     }*/
1:     
1:     public int getDrdaPortNumber() {
1:         int portNumber = NetworkServerControl.DEFAULT_PORTNUMBER; // the default
1:         String portString = getServerProperty(Property.DRDA_PROP_PORTNUMBER);
1:         try {
1:             portNumber = Integer.parseInt(portString);
1:         } catch (NumberFormatException nfe) {
1:             // ignore, use the default value
1:         }
1:         return portNumber;
1:     }
1:     
1:     public String getDrdaSecurityMechanism() {
1:         String secmec = getServerProperty(Property.DRDA_PROP_SECURITYMECHANISM);
1:         if (secmec == null) {
1:             // default is none (represented by the empty string)
1:             secmec = "";
1:         }
1:         return secmec;
1:     }
1:     
1:     public String getDrdaSslMode() {
1:         // may be null if not set (?)
1:         String SSLMode = getServerProperty(Property.DRDA_PROP_SSL_MODE);
1:         return SSLMode;
1:     }
1:     
1:     
0:     public String getDrdaStreamOutBufferSize() {
1:         // TODO - Fix NetworkServerControlImpl so that this setting is included
1:         //        in the property values returned by getPropertyValues()?
1:         //String size = getServerProperty(Property.DRDA_PROP_STREAMOUTBUFFERSIZE);
0:         String size = PropertyUtil.getSystemProperty(
0:                 Property.DRDA_PROP_STREAMOUTBUFFERSIZE, "0");
1:         return size;
1:     }
1: 
1:        
1:     public int getDrdaTimeSlice() {
1:         // relying on server to return the default if not set
1:         return server.getTimeSlice();
1:     }
1:     
1:     /*
1:     public void setDrdaTimeSlice(int timeSlice)
1:         throws Exception
1:     {
1:         try {
1:             server.netSetTimeSlice(timeSlice);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:     }*/
1:     
1:     public boolean getDrdaTraceAll() {
1:         String on = getServerProperty(Property.DRDA_PROP_TRACEALL);
1:         return ("true".equals(on) ? true : false );
1:     }
1:     
1:     /*
1:     public void setDrdaTraceAll(boolean on)
1:         throws Exception
1:     {
1:         try {
1:             server.trace(on);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:     }*/
1:     
1:     public String getDrdaTraceDirectory() {
1:         String traceDirectory = null;
1:         traceDirectory = getServerProperty(Property.DRDA_PROP_TRACEDIRECTORY);
1:         if(traceDirectory == null){
1:             // if traceDirectory is not set, derby.system.home is default
1:             traceDirectory = getServerProperty(Property.SYSTEM_HOME_PROPERTY);
1:         }
1:         
1:         // if derby.system.home is not set, current directory is default
1:         if (traceDirectory == null) {
1:             traceDirectory = PropertyUtil.getSystemProperty("user.dir");
1:         }
1:         return traceDirectory;
1:     }
1:     
1:     /*
1:     public void setDrdaTraceDirectory(String dir)
1:         throws Exception
1:     {
1:         try {
1:             server.sendSetTraceDirectory(dir);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:     }*/
1:     
1:     /*
1:     public String getSysInfo()
1:         throws Exception
1:     {
1:         String sysInfo = "";
1:         try {
1:             sysInfo = server.sysinfo();
1:             // remove information that is also given in the DerbySystemMBean
1:             return sysInfo.substring(sysInfo.indexOf("DRDA"),sysInfo.indexOf("-- list"));
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:     }
1:      **/
1:     
1:     
1:     
1:      
1:     // ------------------------- MBEAN OPERATIONS  ----------------------------
1:     
1:     /**
1:      * Pings the Network Server.
1:      * 
1:      * @see org.apache.derby.mbeans.drda.NetworkServerMBean#ping()
1:      * @throws Exception if the ping fails.
1:      */
1:     public void ping() throws Exception {
1:         //String feedback = "Server pinged successfully.";
1:         //boolean success = true;
1:         try {
1:             server.ping();
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             //feedback = "Error occured while pinging server.";
1:             //success = false;
1:             throw ex;
1:         }
1:     }
1:     
1:     /*
1:     public String traceConnection(int connection, boolean on)
1:         throws Exception
1:     {
1:         String feedback;
1:         if(on){
1:             feedback = "Tracing enabled for connection " + connection
1:                 + ". \n (0 = all connections)";
1:         }
1:         else{
1:             feedback = "Tracing disabled for connection " + connection
1:                 + ". \n (0 = all connections)";           
1:         }
1:         try {
1:             server.trace(connection, on);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:         return feedback;
1:     }
1:      */
1:     
1:     /*
1:     public String enableConnectionLogging()
1:         throws Exception
1:     {
1:         String feedback = "Connection logging enabled.";
1:         try {
1:             server.logConnections(true);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:         
1:         return feedback;
1:     }*/
1:    
1:     /*
1:     public String disableConnectionLogging()
1:         throws Exception
1:     {
1:         String feedback = "Connection logging disabled.";
1:         try {
1:             server.logConnections(false);
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:        
1:        return feedback;
1:     }*/
1:     
1:     /*
1:     public void shutdown()
1:         throws Exception
1:     {
1:         try {
1:             server.shutdown();
1:         } catch (Exception ex) {
1:             Monitor.logThrowable(ex);
1:             throw ex;
1:         }
1:     }*/
1:    
1:    // ------------------------- UTILITY METHODS  ----------------------------
1:     
1:    /**
1:     *  Gets the value of a specific network server setting (property). 
1:     *  Most server-related property keys have the prefix 
1:     *  <code>derby.drda.</code> and may be found in the 
1:     *  org.apache.derby.iapi.reference.Property class.
1:     * 
1:     *  @see org.apache.derby.iapi.reference.Property
1:     *  @param property the name of the server property
1:     *  @return the value of the given server property
1:     */
1:    private String getServerProperty(String property) {
1:         return server.getPropertyValues().getProperty(property);     
1:    }
1: 
1: }
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:e3972b6
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getConnectionCount() {
1:         return getActiveConnectionCount() + getWaitingConnectionCount();
1:     }
1:     public int getActiveConnectionCount() {
1:     public int getWaitingConnectionCount() {
/////////////////////////////////////////////////////////////////////////
1:     public int getAccumulatedConnectionCount() {
commit:357ad1c
/////////////////////////////////////////////////////////////////////////
0:     public int getActiveConnections() {
0:     public int getWaitingConnections() {
1:     public int getConnectionThreadPoolSize() {
0:     public int getConnectionCounter() {
/////////////////////////////////////////////////////////////////////////
1:     synchronized public int getBytesReceivedPerSecond(){
1:             receiveResult = (int)((count - lastReceiveBytes) * 1000 /((now - lastReceiveTime)));
/////////////////////////////////////////////////////////////////////////
1:     synchronized public int getBytesSentPerSecond(){
1:             sentResult = (int) ((count - lastSentBytes) * 1000 / (now - lastSentTime));
commit:1ab256e
/////////////////////////////////////////////////////////////////////////
0:     public int getActiveSessions() {
1:         return server.getActiveSessions();
1:     }
0:     public int getWaitingSessions() {
1:         return server.getRunQueueSize();
1:     }
0:     public int getConnectionThreads() {
1:         return server.getThreadListSize();
1:     }
0:     public int getNumberOfConnections() {
1:         return server.getConnectionNumber();
1:     }
1:     
1:     public long getBytesReceived() {
1:         return server.getBytesRead();
1:     }
1:     
1:     public long getBytesSent() {
1:         return server.getBytesWritten();
1:     }
1:     
1:     private long lastReceiveTime = System.currentTimeMillis();
1:     private long lastReceiveBytes = 0;
1:     private int receiveResult = 0;
1:     
0:     public int getBytesReceivedPerSecond(){
1:         long now = System.currentTimeMillis();
1:         if (now - lastReceiveTime >= 1000) {
1:             long count = getBytesReceived();
0:             receiveResult = (int)((count - lastReceiveBytes)/((now - lastReceiveTime)/1000));
1:             lastReceiveTime = now;
1:             lastReceiveBytes = count;
1:         }
1:         return receiveResult;
1:     }
1: 
1:     private long lastSentTime = System.currentTimeMillis();
1:     private long lastSentBytes = 0;
1:     private int sentResult = 0;
1: 
0:     public int getBytesSentPerSecond(){
1:         long now = System.currentTimeMillis();
1:         if (now - lastSentTime >= 1000) {
1:             long count = getBytesSent();
0:             sentResult = (int)((count - lastSentBytes)/((now - lastSentTime)/1000));
1:             lastSentTime = now;
1:             lastSentBytes = count;
1:         }
1:         return sentResult;
1:     }
1: 
============================================================================