1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: import org.apache.derby.catalog.ReferencedColumns;
1:eac0369: import org.apache.derby.catalog.UUID;
1:997ee7f: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
1:997ee7f: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:997ee7f: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class represents a check constraint descriptor.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class CheckConstraintDescriptor extends ConstraintDescriptor
1:eac0369: {
1:997ee7f: 	private ReferencedColumns	referencedColumns;
1:997ee7f: 	private String						constraintText;
1:eac0369: 
1:eac0369: 	CheckConstraintDescriptor(
1:eac0369: 		    DataDictionary dataDictionary,
1:eac0369: 			TableDescriptor table,
1:eac0369: 			String constraintName,
1:eac0369: 			boolean deferrable,
1:eac0369: 			boolean initiallyDeferred,
1:eac0369: 			UUID constraintId,
1:eac0369: 			String constraintText,
1:eac0369: 			ReferencedColumns referencedColumns,
1:eac0369: 			SchemaDescriptor schemaDesc,
1:eac0369: 			boolean	isEnabled
1:eac0369: 			)							
1:eac0369: 	{
1:eac0369: 		super(dataDictionary, table, constraintName, deferrable,
1:eac0369: 			  initiallyDeferred, (int []) null,
1:eac0369: 			  constraintId, schemaDesc, isEnabled);
1:eac0369: 		this.constraintText = constraintText;
1:eac0369: 		this.referencedColumns = referencedColumns;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this constraint have a backing index?
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not there is a backing index for this constraint.
1:eac0369: 	 */
1:eac0369: 	public boolean hasBackingIndex()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets an identifier telling what type of descriptor it is
1:eac0369: 	 * (UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1:eac0369: 	 *
1:eac0369: 	 * @return	An identifier telling what type of descriptor it is
1:eac0369: 	 *		(UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1:eac0369: 	 */
1:eac0369: 	public int	getConstraintType()
1:eac0369: 	{
1:eac0369: 		return DataDictionary.CHECK_CONSTRAINT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the text of the constraint. (Only non-null/meaningful for check
1:eac0369: 	 * constraints.)
1:eac0369: 	 * @return	The constraint text.
1:eac0369: 	 */
1:eac0369: 	public String getConstraintText()
1:eac0369: 	{
1:eac0369: 		return constraintText;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the UUID of the backing index, if one exists.
1:eac0369: 	 *
1:eac0369: 	 * @return The UUID of the backing index, if one exists, else null.
1:eac0369: 	 */
1:eac0369: 	public UUID getConglomerateId()
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the ReferencedColumns.
1:eac0369: 	 *
1:eac0369: 	 * @return The ReferencedColumns.
1:eac0369: 	 */
1:eac0369: 	public ReferencedColumns getReferencedColumnsDescriptor()
1:eac0369: 	{
1:eac0369: 		return referencedColumns;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the ReferencedColumns; used in drop column
1:eac0369: 	 *
1:6b50965: 	 * @param	rcd	The new ReferencedColumns.
1:eac0369: 	 */
1:eac0369: 	public void setReferencedColumnsDescriptor(ReferencedColumns rcd)
1:eac0369: 	{
1:eac0369: 		referencedColumns = rcd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the referenced columns as an int[] of column ids.
1:eac0369: 	 *
1:eac0369: 	 * @return The array of referenced column ids.
1:eac0369: 	 */
1:eac0369: 	public int[] getReferencedColumns()
1:eac0369: 	{
1:eac0369: 		return referencedColumns.getReferencedColumnPositions();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this constraint need to fire on this type of
1:eac0369: 	 * DML?  For a check constraint, all inserts, and
1:eac0369: 	 * appropriate updates
1:eac0369: 	 *
1:6b50965: 	 * @param stmtType	the type of DML 
1:eac0369: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
1:eac0369: 	 * @param modifiedCols	the columns modified, or null for all
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** If we are disabled, we never fire
1:eac0369: 		*/
1:09bee7d:         if (!enforced())
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (stmtType == StatementType.INSERT)
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (stmtType == StatementType.DELETE)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		// if update, only relevant if columns intersect
1:eac0369: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
1:997ee7f: 	}   
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert the CheckConstraintDescriptor to a String.
1:eac0369: 	 *
1:eac0369: 	 * @return	A String representation of this CheckConstraintDescriptor
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "constraintText: " + constraintText + "\n" +
1:eac0369: 			   "referencedColumns: " + referencedColumns + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:         if (!enforced())
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:997ee7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
/////////////////////////////////////////////////////////////////////////
1: 	private ReferencedColumns	referencedColumns;
1: 	private String						constraintText;
/////////////////////////////////////////////////////////////////////////
1: 	}   
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: import org.apache.derby.catalog.ReferencedColumns;
1: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.StatementType;
1: 
1: /**
1:  * This class represents a check constraint descriptor.
1:  *
0:  * @author jamie
1:  */
1: public class CheckConstraintDescriptor extends ConstraintDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	ReferencedColumns	referencedColumns;
0: 	String						constraintText;
1: 
1: 	CheckConstraintDescriptor(
1: 		    DataDictionary dataDictionary,
1: 			TableDescriptor table,
1: 			String constraintName,
1: 			boolean deferrable,
1: 			boolean initiallyDeferred,
1: 			UUID constraintId,
1: 			String constraintText,
1: 			ReferencedColumns referencedColumns,
1: 			SchemaDescriptor schemaDesc,
1: 			boolean	isEnabled
1: 			)							
1: 	{
1: 		super(dataDictionary, table, constraintName, deferrable,
1: 			  initiallyDeferred, (int []) null,
1: 			  constraintId, schemaDesc, isEnabled);
1: 		this.constraintText = constraintText;
1: 		this.referencedColumns = referencedColumns;
1: 	}
1: 
1: 	/**
1: 	 * Does this constraint have a backing index?
1: 	 *
1: 	 * @return boolean	Whether or not there is a backing index for this constraint.
1: 	 */
1: 	public boolean hasBackingIndex()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Gets an identifier telling what type of descriptor it is
1: 	 * (UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1: 	 *
1: 	 * @return	An identifier telling what type of descriptor it is
1: 	 *		(UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1: 	 */
1: 	public int	getConstraintType()
1: 	{
1: 		return DataDictionary.CHECK_CONSTRAINT;
1: 	}
1: 
1: 	/**
1: 	 * Get the text of the constraint. (Only non-null/meaningful for check
1: 	 * constraints.)
1: 	 * @return	The constraint text.
1: 	 */
1: 	public String getConstraintText()
1: 	{
1: 		return constraintText;
1: 	}
1: 
1: 	/**
1: 	 * Get the UUID of the backing index, if one exists.
1: 	 *
1: 	 * @return The UUID of the backing index, if one exists, else null.
1: 	 */
1: 	public UUID getConglomerateId()
1: 	{
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * Get the ReferencedColumns.
1: 	 *
1: 	 * @return The ReferencedColumns.
1: 	 */
1: 	public ReferencedColumns getReferencedColumnsDescriptor()
1: 	{
1: 		return referencedColumns;
1: 	}
1: 
1: 	/**
1: 	 * Set the ReferencedColumns; used in drop column
1: 	 *
0: 	 * @param	The new ReferencedColumns.
0: 	 * @return	void
1: 	 */
1: 	public void setReferencedColumnsDescriptor(ReferencedColumns rcd)
1: 	{
1: 		referencedColumns = rcd;
1: 	}
1: 
1: 	/**
1: 	 * Get the referenced columns as an int[] of column ids.
1: 	 *
1: 	 * @return The array of referenced column ids.
1: 	 */
1: 	public int[] getReferencedColumns()
1: 	{
1: 		return referencedColumns.getReferencedColumnPositions();
1: 	}
1: 
1: 	/**
1: 	 * Does this constraint need to fire on this type of
1: 	 * DML?  For a check constraint, all inserts, and
1: 	 * appropriate updates
1: 	 *
0: 	 * @param dmlType	the type of DML 
1: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
1: 	 * @param modifiedCols	the columns modified, or null for all
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
1: 	{
1: 		/*
1: 		** If we are disabled, we never fire
1: 		*/
0: 		if (!isEnabled)
1: 		{
1: 			return false;
1: 		}
1: 
1: 		if (stmtType == StatementType.INSERT)
1: 		{
1: 			return true;
1: 		}
1: 
1: 		if (stmtType == StatementType.DELETE)
1: 		{
1: 			return false;
1: 		}
1: 	
1: 		// if update, only relevant if columns intersect
1: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
1: 	}
1: 
1: 	/**
1: 	 * Convert the CheckConstraintDescriptor to a String.
1: 	 *
1: 	 * @return	A String representation of this CheckConstraintDescriptor
1: 	 */
1: 
1: 	public String	toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "constraintText: " + constraintText + "\n" +
1: 			   "referencedColumns: " + referencedColumns + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	rcd	The new ReferencedColumns.
/////////////////////////////////////////////////////////////////////////
1: 	 * @param stmtType	the type of DML 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: import org.apache.derby.catalog.ReferencedColumns;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: /**
0:  * This class represents a check constraint descriptor.
0:  *
0:  * @author jamie
0:  */
0: public class CheckConstraintDescriptor extends ConstraintDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	ReferencedColumns	referencedColumns;
0: 	String						constraintText;
0: 
0: 	CheckConstraintDescriptor(
0: 		    DataDictionary dataDictionary,
0: 			TableDescriptor table,
0: 			String constraintName,
0: 			boolean deferrable,
0: 			boolean initiallyDeferred,
0: 			UUID constraintId,
0: 			String constraintText,
0: 			ReferencedColumns referencedColumns,
0: 			SchemaDescriptor schemaDesc,
0: 			boolean	isEnabled
0: 			)							
0: 	{
0: 		super(dataDictionary, table, constraintName, deferrable,
0: 			  initiallyDeferred, (int []) null,
0: 			  constraintId, schemaDesc, isEnabled);
0: 		this.constraintText = constraintText;
0: 		this.referencedColumns = referencedColumns;
0: 	}
0: 
0: 	/**
0: 	 * Does this constraint have a backing index?
0: 	 *
0: 	 * @return boolean	Whether or not there is a backing index for this constraint.
0: 	 */
0: 	public boolean hasBackingIndex()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Gets an identifier telling what type of descriptor it is
0: 	 * (UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
0: 	 *
0: 	 * @return	An identifier telling what type of descriptor it is
0: 	 *		(UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
0: 	 */
0: 	public int	getConstraintType()
0: 	{
0: 		return DataDictionary.CHECK_CONSTRAINT;
0: 	}
0: 
0: 	/**
0: 	 * Get the text of the constraint. (Only non-null/meaningful for check
0: 	 * constraints.)
0: 	 * @return	The constraint text.
0: 	 */
0: 	public String getConstraintText()
0: 	{
0: 		return constraintText;
0: 	}
0: 
0: 	/**
0: 	 * Get the UUID of the backing index, if one exists.
0: 	 *
0: 	 * @return The UUID of the backing index, if one exists, else null.
0: 	 */
0: 	public UUID getConglomerateId()
0: 	{
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * Get the ReferencedColumns.
0: 	 *
0: 	 * @return The ReferencedColumns.
0: 	 */
0: 	public ReferencedColumns getReferencedColumnsDescriptor()
0: 	{
0: 		return referencedColumns;
0: 	}
0: 
0: 	/**
0: 	 * Set the ReferencedColumns; used in drop column
0: 	 *
0: 	 * @param	The new ReferencedColumns.
0: 	 * @return	void
0: 	 */
0: 	public void setReferencedColumnsDescriptor(ReferencedColumns rcd)
0: 	{
0: 		referencedColumns = rcd;
0: 	}
0: 
0: 	/**
0: 	 * Get the referenced columns as an int[] of column ids.
0: 	 *
0: 	 * @return The array of referenced column ids.
0: 	 */
0: 	public int[] getReferencedColumns()
0: 	{
0: 		return referencedColumns.getReferencedColumnPositions();
0: 	}
0: 
0: 	/**
0: 	 * Does this constraint need to fire on this type of
0: 	 * DML?  For a check constraint, all inserts, and
0: 	 * appropriate updates
0: 	 *
0: 	 * @param dmlType	the type of DML 
0: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
0: 	 * @param modifiedCols	the columns modified, or null for all
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
0: 	{
0: 		/*
0: 		** If we are disabled, we never fire
0: 		*/
0: 		if (!isEnabled)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		if (stmtType == StatementType.INSERT)
0: 		{
0: 			return true;
0: 		}
0: 
0: 		if (stmtType == StatementType.DELETE)
0: 		{
0: 			return false;
0: 		}
0: 	
0: 		// if update, only relevant if columns intersect
0: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
0: 	}
0: 
0: 	/**
0: 	 * Convert the CheckConstraintDescriptor to a String.
0: 	 *
0: 	 * @return	A String representation of this CheckConstraintDescriptor
0: 	 */
0: 
0: 	public String	toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "constraintText: " + constraintText + "\n" +
0: 			   "referencedColumns: " + referencedColumns + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 
0: }
============================================================================