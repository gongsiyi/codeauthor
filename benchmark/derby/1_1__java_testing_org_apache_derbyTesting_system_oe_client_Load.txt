1:6e8ab1f: /*
1:6e8ab1f:  *
1:6e8ab1f:  * Derby - Class org.apache.derbyTesting.system.oe.client.Load
1:6e8ab1f:  *
1:6e8ab1f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e8ab1f:  * contributor license agreements.  See the NOTICE file distributed with
1:6e8ab1f:  * this work for additional information regarding copyright ownership.
1:6e8ab1f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e8ab1f:  * (the "License"); you may not use this file except in compliance with
1:6e8ab1f:  * the License.  You may obtain a copy of the License at
1:6e8ab1f:  *
1:6e8ab1f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6e8ab1f:  *
1:6e8ab1f:  * Unless required by applicable law or agreed to in writing, 
1:6e8ab1f:  * software distributed under the License is distributed on an 
1:6e8ab1f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:6e8ab1f:  * either express or implied. See the License for the specific 
1:6e8ab1f:  * language governing permissions and limitations under the License.
9:6e8ab1f:  */
1:6e8ab1f: package org.apache.derbyTesting.system.oe.client;
9:6e8ab1f: 
1:6e8ab1f: import java.sql.Connection;
1:6e8ab1f: import java.sql.SQLException;
1:6e8ab1f: 
9:6e8ab1f: /**
1:6e8ab1f:  * Interface for a client to populate the database. Various implementations can
1:6e8ab1f:  * be provided, e.g. via SQL, via VTI, via import etc
1:6e8ab1f:  * An implementation for Load must be able to do the following
1:6e8ab1f:  * <OL>
1:6e8ab1f:  * <LI> Use the setupLoad to perform any necessary initialization for the load
1:6e8ab1f:  * phase
1:7a0c00a:  * <LI> Load data into all the tables 
1:6e8ab1f:  * </OL>
1:6e8ab1f:  * <P>
1:6e8ab1f:  * DECIMAL values are represented as String objects to allow Order Entry to be
1:6e8ab1f:  * run on J2ME/CDC/Foundation which does not support BigDecimal.
1:6e8ab1f:  */
1:6e8ab1f: public interface Load {
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Cardinality constants 
1:6e8ab1f:      * These numbers are factored by W, the number of Warehouses,
1:6e8ab1f:      * to illustrate the database scaling.
1:6e8ab1f:      * 
1:6e8ab1f:      * see section 1.2.1 of TPC-C specification
1:6e8ab1f:      */
1:6e8ab1f:     public static final short DISTRICT_COUNT_W = 10;
1:6e8ab1f: 
1:6e8ab1f:     public static final int CUSTOMER_COUNT_W = 3000 * DISTRICT_COUNT_W;
1:6e8ab1f: 
1:6e8ab1f:     public static final int ITEM_COUNT = 100000;
1:6e8ab1f: 
1:6e8ab1f:     public static final int NEWORDERS_COUNT_W = (CUSTOMER_COUNT_W * 9) / 30;
1:6e8ab1f: 
1:6e8ab1f:     // 1 per customer initially
1:6e8ab1f:     public static final int HISTORY_COUNT_W = CUSTOMER_COUNT_W; 
1:6e8ab1f: 
1:6e8ab1f:     public static final int STOCK_COUNT_W = ITEM_COUNT;
1:6e8ab1f: 
1:6e8ab1f:     public static final int ORDERS_COUNT_W = CUSTOMER_COUNT_W;
1:6e8ab1f: 
1:6e8ab1f:     //  5 to 15 , per order. so average 10
1:6e8ab1f:     public static final int ORDERLINE_COUNT_WV = ORDERS_COUNT_W * 10; 
1:6e8ab1f: 
1:6e8ab1f:     public static final int NEWORDERS_BREAKPOINT = 
1:6e8ab1f:         (ORDERS_COUNT_W - NEWORDERS_COUNT_W)/ DISTRICT_COUNT_W;
1:9f7e882:     
1:9f7e882:     
1:9f7e882:     /**
1:9f7e882:      * Set the seed for the random number generator used to
1:9f7e882:      * populate the data. Useful for testing to ensure consistent
1:9f7e882:      * repeatable runs. If not set, defaults a value based upon current time.
1:9f7e882:      * Must be called before setupLoad to have an effect.
1:9f7e882:      * @param seed
1:9f7e882:      */
1:9f7e882:     public void setSeed(long seed);
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Perform the necessary setup before database population.
1:6e8ab1f:      * @param conn - database connection 
1:6e8ab1f:      * @param scale - scale of the database.  The WAREHOUSE table is 
1:6e8ab1f:      * used as the base unit of scaling. 
1:6e8ab1f:      * @throws Exception
1:6e8ab1f:      */
1:6e8ab1f:     public void setupLoad(Connection conn, short scale) throws Exception;
1:fbc46af:     
1:fbc46af:     /**
1:fbc46af:      * Set the number of total threads the loader is allowed to use
1:fbc46af:      * to load data.
1:fbc46af:      * If an implementation does not support multiple threads then
1:fbc46af:      * the passed in value will be ignored.
1:fbc46af:      * 
1:fbc46af:      * @param threadCount Number of threads to use if loading supports
1:fbc46af:      * multiple threading.
1:fbc46af:      */
1:fbc46af:     public void setThreadCount(int threadCount);
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Follow the initial database population requirements in Section 4.3.3 
1:6e8ab1f:      * and populate all the required tables.
1:7a0c00a:      * BE CAREFUL to use the correct starting identifiers for the data in
1:7a0c00a:      * the tables. In the specification, identifiers start at 1 (one), 
1:7a0c00a:      * e.g. 1-10 for a district and is not zero based.
1:7a0c00a:      * 
8:6e8ab1f:      * @throws SQLException
1:6e8ab1f:      */
1:fbc46af:     public void populateAllTables() throws Exception;
1:6e8ab1f: 
1:6e8ab1f: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fbc46af
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Set the number of total threads the loader is allowed to use
1:      * to load data.
1:      * If an implementation does not support multiple threads then
1:      * the passed in value will be ignored.
1:      * 
1:      * @param threadCount Number of threads to use if loading supports
1:      * multiple threading.
1:      */
1:     public void setThreadCount(int threadCount);
/////////////////////////////////////////////////////////////////////////
1:     public void populateAllTables() throws Exception;
commit:9f7e882
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     /**
1:      * Set the seed for the random number generator used to
1:      * populate the data. Useful for testing to ensure consistent
1:      * repeatable runs. If not set, defaults a value based upon current time.
1:      * Must be called before setupLoad to have an effect.
1:      * @param seed
1:      */
1:     public void setSeed(long seed);
commit:7a0c00a
/////////////////////////////////////////////////////////////////////////
1:  * <LI> Load data into all the tables 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * BE CAREFUL to use the correct starting identifiers for the data in
1:      * the tables. In the specification, identifiers start at 1 (one), 
1:      * e.g. 1-10 for a district and is not zero based.
1:      * 
commit:6e8ab1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.client.Load
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.client;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
1: /**
1:  * Interface for a client to populate the database. Various implementations can
1:  * be provided, e.g. via SQL, via VTI, via import etc
1:  * An implementation for Load must be able to do the following
1:  * <OL>
1:  * <LI> Use the setupLoad to perform any necessary initialization for the load
1:  * phase
0:  * <LI> Load data into the tables 
0:  * <LI> Provide information about cardinality of rows in each table.
1:  * </OL>
1:  * <P>
1:  * DECIMAL values are represented as String objects to allow Order Entry to be
1:  * run on J2ME/CDC/Foundation which does not support BigDecimal.
1:  */
1: public interface Load {
1: 
1:     /**
1:      * Cardinality constants 
1:      * These numbers are factored by W, the number of Warehouses,
1:      * to illustrate the database scaling.
1:      * 
1:      * see section 1.2.1 of TPC-C specification
1:      */
1:     public static final short DISTRICT_COUNT_W = 10;
1: 
1:     public static final int CUSTOMER_COUNT_W = 3000 * DISTRICT_COUNT_W;
1: 
1:     public static final int ITEM_COUNT = 100000;
1: 
1:     public static final int NEWORDERS_COUNT_W = (CUSTOMER_COUNT_W * 9) / 30;
1: 
1:     // 1 per customer initially
1:     public static final int HISTORY_COUNT_W = CUSTOMER_COUNT_W; 
1: 
1:     public static final int STOCK_COUNT_W = ITEM_COUNT;
1: 
1:     public static final int ORDERS_COUNT_W = CUSTOMER_COUNT_W;
1: 
1:     //  5 to 15 , per order. so average 10
1:     public static final int ORDERLINE_COUNT_WV = ORDERS_COUNT_W * 10; 
1: 
1:     public static final int NEWORDERS_BREAKPOINT = 
1:         (ORDERS_COUNT_W - NEWORDERS_COUNT_W)/ DISTRICT_COUNT_W;
1: 
1:     /**
0:      * Return the warehouse scale factor of the database. 
0:      * @return
1:      */
0:     public short getScale();
1: 
1:     /**
1:      * Perform the necessary setup before database population.
1:      * @param conn - database connection 
1:      * @param scale - scale of the database.  The WAREHOUSE table is 
1:      * used as the base unit of scaling. 
1:      * @throws Exception
1:      */
1:     public void setupLoad(Connection conn, short scale) throws Exception;
1: 
1:     /**
1:      * Follow the initial database population requirements in Section 4.3.3 
1:      * and populate all the required tables.
1:      * @throws SQLException
1:      */
0:     public void populateAllTables() throws SQLException;
1: 
1:     /**
0:      * Return the number of rows in the table. 
0:      * A simple select count(*) from tableName 
0:      * @param tableName - name of the table
1:      * @throws SQLException
1:      */
0:     public int rowsInTable(String tableName) throws SQLException;
1: 
1:     /**
0:      * Populate the ITEM table 
0:      * See population requirements in section 4.3.3.1
0:      * <BR>
0:      * @param itemStart insert item information starting from this Item id (ITEM.I_ID) 
0:      * @param itemEnd  last Item id (ITEM.I_ID) for inserting information for
1:      * @throws SQLException
1:      */
0:     public void itemTable(int itemStart, int itemEnd) throws SQLException;
1: 
1:     /**
0:      * Populate the WAREHOUSE table for a given warehouse.
0:      * See population requirements in section 4.3.3.1
0:      * @param w WAREHOUSE ID (W_ID)
1:      * @throws SQLException
1:      */
0:     public void warehouseTable(short w) throws SQLException;
1: 
1:     /**
0:      * Populate the STOCK table for a given warehouse.
0:      * See population requirements in section 4.3.3.1
0:      * <BR>
0:      * @param itemStart insert stocks of items from this Item id (ITEM.I_ID) 
0:      * @param itemEnd  last Item id (ITEM.I_ID) to insert stocks of times for.
0:      * @param w WAREHOUSE id (W_ID) for which the stock is populated.
1:      * @throws SQLException
1:      */
0:     public void stockTable(int itemStart, int itemEnd, short w)
0:     throws SQLException;
1: 
1:     /**
0:      * Populate the DISTRICT table for a given warehouse.
0:      * See population requirements in section 4.3.3.1
0:      * <BR>
0:      * @param w - WAREHOUSE id (W_ID)
0:      * @param d - DISTRICT id (D_ID)
1:      * @throws SQLException
1:      */
0:     public void districtTable(short w, short d) throws SQLException;
1: 
1:     /**
0:      * Populate the CUSTOMER table for a given district for a specific warehouse.
0:      * See population requirements in section 4.3.3.1
0:      * <BR>
0:      * @param w - WAREHOUSE id (W_ID)
0:      * @param d - DISTRICT id (D_ID)
1:      * @throws SQLException
1:      */
0:     public void customerTable(short w, short d) throws SQLException;
1: 
1:     /**
0:      * Populate the ORDER table 
0:      * See population requirements in section 4.3.3.1
0:      * @param w - WAREHOUSE id (W_ID)
0:      * @param d - DISTRICT id (D_ID)
1:      * @throws SQLException
1:      */
0:     public void orderTable(short w, short d) throws SQLException;
1: 
1: }
============================================================================