1:db8dae7: /*
3:db8dae7:  
1:9c2b1f3: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Distributed
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.FileInputStream;
1:db8dae7: import java.io.IOException;
1:db8dae7: import java.io.InputStream;
1:db8dae7: import java.util.Properties;
1:db8dae7: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:40a554b: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:db8dae7: 
1:db8dae7: 
1:db8dae7: 
1:db8dae7: /**
1:db8dae7:  * Run a replication test in a distributed
1:db8dae7:  * environment, where master and slave hosts, and
1:db8dae7:  * master and slave ports are specified in a property file.
1:db8dae7:  * Which test to run is also specified in the property file.
1:db8dae7:  * 
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: public class ReplicationRun_Distributed extends ReplicationRun
3:db8dae7: {
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      * Creates a new instance of ReplicationRun_Distributed
1:db8dae7:      * @param testcaseName Identifying the test.
1:db8dae7:      */
1:db8dae7:     public ReplicationRun_Distributed(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
3:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public static Test suite()
1:db8dae7:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Distributed Suite");
1:db8dae7:         
1:db8dae7:         suite.addTestSuite( ReplicationRun_Distributed.class );
1:db8dae7:         
1:40a554b:         return SecurityManagerSetup.noSecurityManager(suite);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     //////////////////////////////////////////////////////////////
1:db8dae7:     ////
1:db8dae7:     //// The replication test framework (testReplication()):
1:db8dae7:     //// a) "clean" replication run starting master and slave servers,
1:db8dae7:     ////     preparing master and slave databases,
1:db8dae7:     ////     starting and stopping replication and doing
1:db8dae7:     ////     failover for a "normal"/"failure free" replication
1:db8dae7:     ////     test run.
1:db8dae7:     ////
1:db8dae7:     //////////////////////////////////////////////////////////////
1:db8dae7:     
1:db8dae7:     public void testReplication()
1:db8dae7:     throws Exception
1:db8dae7:     {
1:db8dae7:         cleanAllTestHosts();
1:db8dae7:         
1:db8dae7:         initEnvironment();
1:db8dae7:         
1:db8dae7:         initMaster(masterServerHost,
1:db8dae7:                 replicatedDb);
1:db8dae7:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:db8dae7:                 masterServerHost,
1:db8dae7:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:db8dae7:                 masterServerPort,
1:dbe5dc3:                 masterDbSubPath); // Distinguishing master/slave
1:db8dae7:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:db8dae7:                 slaveServerHost,
1:db8dae7:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:db8dae7:                 slaveServerPort,
1:dbe5dc3:                 slaveDbSubPath); // Distinguishing master/slave
1:db8dae7:         
1:db8dae7:         startServerMonitor(slaveServerHost);
1:db8dae7:         
1:db8dae7:         bootMasterDatabase(jvmVersion,
1:db8dae7:                 masterDatabasePath +FS+ masterDbSubPath,
1:db8dae7:                 replicatedDb,
1:db8dae7:                 masterServerHost, // Where the startreplication command must be given
1:db8dae7:                 masterServerPort, // master server interface accepting client requests
1:db8dae7:                 null // bootLoad, // The "test" to start when booting db.
1:db8dae7:                 );
1:db8dae7:         
1:db8dae7:         initSlave(slaveServerHost,
1:db8dae7:                 jvmVersion,
1:db8dae7:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:db8dae7:         
1:db8dae7:         startSlave(jvmVersion, replicatedDb,
1:db8dae7:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:db8dae7:                 slaveServerPort,
1:db8dae7:                 slaveServerHost, // for slaveReplInterface
1:db8dae7:                 slaveReplPort,
1:db8dae7:                 testClientHost);
1:db8dae7:         
1:7ed87c8:         // Allow the slave to reach the required state before attempting to start master:
1:7ed87c8:         util.sleep(sleepTime, "Before startMaster");  // startMaster_ij should retry connection? 
1:db8dae7:         startMaster(jvmVersion, replicatedDb,
1:db8dae7:                 masterServerHost, // Where the startMaster command must be given
1:db8dae7:                 masterServerPort, // master server interface accepting client requests
1:db8dae7:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:db8dae7:                 slaveServerPort, // Not used since slave don't allow clients.
1:db8dae7:                 slaveServerHost, // for slaveReplInterface
1:db8dae7:                 slaveReplPort);
1:db8dae7:         
1:db8dae7:         
1:db8dae7:         // Used to run positive tests.
1:db8dae7:         // Handle negative testing in State.testPostStartedMasterAndSlave().
1:db8dae7:         // Observe that it will not be meaningful to do runTest if State.XXXX()
1:db8dae7:         // has led to incorrect replication state wrt. replicationTest.
1:db8dae7:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:db8dae7:                 jvmVersion,
1:db8dae7:                 testClientHost,
1:db8dae7:                 masterServerHost, masterServerPort,
1:db8dae7:                 replicatedDb);
1:db8dae7:         
1:db8dae7:         failOver(jvmVersion,
1:db8dae7:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:db8dae7:                 masterServerHost,  // Where the master db is run.
1:db8dae7:                 masterServerPort,
1:db8dae7:                 testClientHost);
1:db8dae7:         
1:db8dae7:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:db8dae7:                 slaveServerHost,slaveServerPort,
1:db8dae7:                 testClientHost);
1:db8dae7:         
1:db8dae7:         verifySlave();
1:db8dae7:         
1:db8dae7:         // We should verify the master as well, at least to see that we still can connect.
1:db8dae7:         verifyMaster();
1:db8dae7:         
1:db8dae7:         stopServer(jvmVersion, derbyVersion,
1:db8dae7:                 slaveServerHost, slaveServerPort);
1:db8dae7:         
1:db8dae7:         stopServer(jvmVersion, derbyVersion,
1:db8dae7:                 masterServerHost, masterServerPort);
1:db8dae7:         // As of 2008-02-06 master does not accept shutdown after replication, so:
1:db8dae7:         // do a 'kill pid' after ending the test run
1:db8dae7:         
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      * When running in a distributed context,
1:db8dae7:      * the environment is defined via the REPLICATIONTEST_PROPFILE.
1:db8dae7:      */
1:db8dae7:     void initEnvironment()
1:db8dae7:     throws IOException
1:db8dae7:     {
1:db8dae7:         
1:7ed87c8:         util.DEBUG("*** Properties -----------------------------------------");
1:db8dae7:         userDir = System.getProperty("user.dir");
1:7ed87c8:         util.DEBUG("user.dir:          " + userDir);
1:db8dae7:         
1:7ed87c8:         userHome = System.getProperty("user.home");
1:7ed87c8:         util.DEBUG("user.home:          " + userHome);
1:7ed87c8:         util.writeToFile("exit;", userHome+FS+"ij_dummy_script.sql");
1:7ed87c8:         
1:7ed87c8:         util.DEBUG("derby.system.home: " + System.getProperty("derby.system.home"));
1:db8dae7:         
1:db8dae7:         String realPropertyFile = REPLICATIONTEST_PROPFILE; // Is just the plain file name in ${user.dir}
1:7ed87c8:         util.DEBUG("realPropertyFile: " + realPropertyFile);
1:db8dae7:         
1:db8dae7:         InputStream isCp =  new FileInputStream(userDir + FS + realPropertyFile);
1:db8dae7:         Properties cp = new Properties();
1:db8dae7:         // testRunProperties = cp; // Make available for e.g. new Load(loadId)
1:db8dae7:         cp.load(isCp);
1:db8dae7:         // testRunProperties = cp; // Make available for e.g. new Load(loadId)
1:db8dae7:         // Now we can get the derby jar path, jvm path etc.
1:db8dae7:         
1:db8dae7:         util.printDebug = cp.getProperty("test.printDebug","false").equalsIgnoreCase("true");
1:7ed87c8:         util.DEBUG("printDebug: " + util.printDebug);
1:db8dae7:         
1:db8dae7:         showSysinfo = cp.getProperty("test.showSysinfo","false").equalsIgnoreCase("true");
1:7ed87c8:         util.DEBUG("showSysinfo: " + showSysinfo);
1:db8dae7:         
1:7ed87c8:         testUser = cp.getProperty("test.testUser","UNKNOWN");
1:7ed87c8:         util.DEBUG("testUser: " + testUser);
1:db8dae7:         
1:db8dae7:         masterServerHost = cp.getProperty("test.masterServerHost",masterServerHost);
1:7ed87c8:         util.DEBUG("masterServerHost: " + masterServerHost);
1:7ed87c8:         cp.setProperty("test.serverHost", masterServerHost); // Set for initially running tests against master.
1:db8dae7:         
1:db8dae7:         masterServerPort = Integer.parseInt(cp.getProperty("test.masterServerPort",""+masterServerPort));
1:7ed87c8:         util.DEBUG("masterServerPort: " + masterServerPort);
1:7ed87c8:         cp.setProperty("test.serverPort", ""+masterServerPort); // Set for initially running tests against master.
1:db8dae7:         
1:db8dae7:         slaveServerHost = cp.getProperty("test.slaveServerHost",slaveServerHost);
1:7ed87c8:         util.DEBUG("slaveServerHost: " + slaveServerHost);
1:db8dae7:         
1:db8dae7:         slaveServerPort = Integer.parseInt(cp.getProperty("test.slaveServerPort",""+slaveServerPort));
1:7ed87c8:         util.DEBUG("slaveServerPort: " + slaveServerPort);
1:db8dae7:         
1:db8dae7:         slaveReplPort = Integer.parseInt(cp.getProperty("test.slaveReplPort",""+slaveReplPort));
1:7ed87c8:         util.DEBUG("slaveReplPort: " + slaveReplPort);
1:db8dae7:         
1:db8dae7:         testClientHost = cp.getProperty("test.testClientHost",testClientHost);
1:7ed87c8:         util.DEBUG("testClientHost: " + testClientHost);
1:db8dae7:         
1:db8dae7:         masterDatabasePath = cp.getProperty("test.master.databasepath");
1:7ed87c8:         util.DEBUG("masterDatabasePath: " + masterDatabasePath);
1:db8dae7:         
1:db8dae7:         slaveDatabasePath = cp.getProperty("test.slave.databasepath");
1:7ed87c8:         util.DEBUG("slaveDatabasePath: " + slaveDatabasePath);
1:db8dae7:         
1:db8dae7:         replicatedDb = cp.getProperty("test.databaseName","test");
1:7ed87c8:         util.DEBUG("replicatedDb: " + replicatedDb);
1:db8dae7:         
1:db8dae7:         bootLoad = cp.getProperty("test.bootLoad");
1:7ed87c8:         util.DEBUG("bootLoad: " + bootLoad);
1:db8dae7:         
1:db8dae7:         freezeDB = cp.getProperty("test.freezeDB");
1:7ed87c8:         util.DEBUG("freezeDB: " + freezeDB);
1:db8dae7:         
1:db8dae7:         unFreezeDB = cp.getProperty("test.unFreezeDB");
1:7ed87c8:         util.DEBUG("unFreezeDB: " + unFreezeDB);
1:7ed87c8:         
1:7ed87c8:         simpleLoad = System.getProperty("derby.tests.replSimpleLoad", "true")
1:7ed87c8:                                                      .equalsIgnoreCase("true");
1:7ed87c8:         util.DEBUG("simpleLoad: " + simpleLoad);
1:7ed87c8:         simpleLoadTuples = Integer.parseInt(cp.getProperty("test.simpleloadtuples","10000"));
1:7ed87c8:         util.DEBUG("simpleLoadTuples: " + simpleLoadTuples);
1:db8dae7:         
1:db8dae7:         replicationTest = cp.getProperty("test.replicationTest");
1:7ed87c8:         util.DEBUG("replicationTest: " + replicationTest);
1:db8dae7:         replicationVerify = cp.getProperty("test.replicationVerify");
1:7ed87c8:         util.DEBUG("replicationVerify: " + replicationVerify);
1:7ed87c8:         junitTest = cp.getProperty("test.junitTest", "true")
1:7ed87c8:                                                      .equalsIgnoreCase("true");
1:7ed87c8:         util.DEBUG("junitTest: " + junitTest);
1:db8dae7:         
1:7ed87c8:         THREADS = Integer.parseInt(cp.getProperty("test.stressMultiThreads","0"));
1:7ed87c8:         util.DEBUG("THREADS: " + THREADS);
1:7ed87c8:         MINUTES = Integer.parseInt(cp.getProperty("test.stressMultiMinutes","0"));
1:7ed87c8:         util.DEBUG("MINUTES: " + MINUTES);
1:7ed87c8:                 
1:db8dae7:         sqlLoadInit = cp.getProperty("test.sqlLoadInit");
1:7ed87c8:         util.DEBUG("sqlLoadInit: " + sqlLoadInit);
1:db8dae7: 
1:db8dae7:         
1:db8dae7:         specialTestingJar = cp.getProperty("test.derbyTestingJar", null);
1:7ed87c8:         util.DEBUG("specialTestingJar: " + specialTestingJar);
1:db8dae7:         
1:db8dae7:         jvmVersion = cp.getProperty("jvm.version");
1:7ed87c8:         util.DEBUG("jvmVersion: " + jvmVersion);
1:db8dae7:         
1:db8dae7:         masterJvmVersion = cp.getProperty("jvm.masterversion");
1:db8dae7:         if ( masterJvmVersion == null )
1:db8dae7:         {masterJvmVersion = jvmVersion;}
1:7ed87c8:         util.DEBUG("masterJvmVersion: " + masterJvmVersion);
1:db8dae7:         
1:db8dae7:         slaveJvmVersion = cp.getProperty("jvm.slaveversion");
1:db8dae7:         if ( slaveJvmVersion == null )
1:db8dae7:         {slaveJvmVersion = jvmVersion;}
1:7ed87c8:         util.DEBUG("slaveJvmVersion: " + slaveJvmVersion);
1:db8dae7:         
1:db8dae7:         derbyVersion = cp.getProperty("derby.version");
1:7ed87c8:         util.DEBUG("derbyVersion: " + derbyVersion);
1:db8dae7:         
1:db8dae7:         derbyMasterVersion = cp.getProperty("derby.masterversion");
1:db8dae7:         if ( derbyMasterVersion == null )
1:db8dae7:         {derbyMasterVersion = derbyVersion;}
1:7ed87c8:         util.DEBUG("derbyMasterVersion: " + derbyMasterVersion);
1:db8dae7:         
1:db8dae7:         derbySlaveVersion = cp.getProperty("derby.slaveversion");
1:db8dae7:         if ( derbySlaveVersion == null )
1:db8dae7:         {derbySlaveVersion = derbyVersion;}
1:7ed87c8:         util.DEBUG("derbySlaveVersion: " + derbySlaveVersion);
1:db8dae7:         
1:db8dae7:         String derbyTestingJar = derbyVersion + FS+"derbyTesting.jar";
1:db8dae7:         if ( specialTestingJar != null )  derbyTestingJar = specialTestingJar;
1:7ed87c8:         util.DEBUG("derbyTestingJar: " + derbyTestingJar);
1:db8dae7:         
1:db8dae7:         junit_jar = cp.getProperty("junit_jar");
1:7ed87c8:         util.DEBUG("junit_jar: " + junit_jar);
1:db8dae7:         
1:db8dae7:         test_jars = derbyTestingJar
1:db8dae7:                 + ":" + junit_jar
1:db8dae7:                 ;
1:7ed87c8:         util.DEBUG("test_jars: " + test_jars);
1:db8dae7:         
1:db8dae7:         sleepTime = Integer.parseInt(cp.getProperty("test.sleepTime","15000"));
1:7ed87c8:         util.DEBUG("sleepTime: " + sleepTime);
1:db8dae7:         
1:db8dae7:         runUnReplicated = cp.getProperty("test.runUnReplicated","false").equalsIgnoreCase("true");
1:7ed87c8:         util.DEBUG("runUnReplicated: " + runUnReplicated);
1:db8dae7:         
1:db8dae7:         localEnv = cp.getProperty("test.localEnvironment","false").equalsIgnoreCase("true");
1:7ed87c8:         util.DEBUG("localEnv: " + localEnv);
1:db8dae7:         
1:db8dae7:         derbyProperties = 
1:db8dae7:                  "derby.infolog.append=true"+LF
1:db8dae7:                 +"derby.drda.logConnections=true"+LF
1:db8dae7:                 +"derby.drda.traceAll=true"+LF;
1:db8dae7: 
1:db8dae7:         
1:7ed87c8:         util.DEBUG("--------------------------------------------------------");
1:db8dae7:         
1:db8dae7:         masterPreRepl = new Load("masterPreRepl", cp);
1:db8dae7:         masterPostRepl = new Load("masterPostRepl", cp);
1:db8dae7:         slavePreSlave = new Load("slavePreSlave", cp);
1:db8dae7:         masterPostSlave = new Load("masterPostSlave", cp);
1:db8dae7:         slavePostSlave = new Load("slavePostSlave", cp);
1:db8dae7:         
1:7ed87c8:         util.DEBUG("--------------------------------------------------------");
1:db8dae7:         // for SimplePerfTest
1:f41a8a7:         tuplesToInsertPerf = Integer.parseInt(cp.getProperty("test.inserts","10000"));
1:7ed87c8:         util.DEBUG("tuplesToInsertPerf: " + tuplesToInsertPerf);
1:db8dae7:         commitFreq = Integer.parseInt(cp.getProperty("test.commitFreq","0")); // "0" is autocommit
1:7ed87c8:         util.DEBUG("commitFreq: " + commitFreq);
1:db8dae7:         
1:7ed87c8:         util.DEBUG("--------------------------------------------------------");
1:db8dae7:         
1:db8dae7:         state.initEnvironment(cp);
1:db8dae7:        
1:7ed87c8:         util.DEBUG("--------------------------------------------------------");
1:db8dae7:        
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Distributed Suite");
commit:9c2b1f3
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Distributed
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Ole Solberg
-------------------------------------------------------------------------------
commit:7ed87c8
/////////////////////////////////////////////////////////////////////////
1:         // Allow the slave to reach the required state before attempting to start master:
1:         util.sleep(sleepTime, "Before startMaster");  // startMaster_ij should retry connection? 
/////////////////////////////////////////////////////////////////////////
1:         util.DEBUG("*** Properties -----------------------------------------");
1:         util.DEBUG("user.dir:          " + userDir);
1:         userHome = System.getProperty("user.home");
1:         util.DEBUG("user.home:          " + userHome);
1:         util.writeToFile("exit;", userHome+FS+"ij_dummy_script.sql");
1:         
1:         util.DEBUG("derby.system.home: " + System.getProperty("derby.system.home"));
1:         util.DEBUG("realPropertyFile: " + realPropertyFile);
/////////////////////////////////////////////////////////////////////////
1:         util.DEBUG("printDebug: " + util.printDebug);
1:         util.DEBUG("showSysinfo: " + showSysinfo);
1:         testUser = cp.getProperty("test.testUser","UNKNOWN");
1:         util.DEBUG("testUser: " + testUser);
1:         util.DEBUG("masterServerHost: " + masterServerHost);
1:         cp.setProperty("test.serverHost", masterServerHost); // Set for initially running tests against master.
1:         util.DEBUG("masterServerPort: " + masterServerPort);
1:         cp.setProperty("test.serverPort", ""+masterServerPort); // Set for initially running tests against master.
1:         util.DEBUG("slaveServerHost: " + slaveServerHost);
1:         util.DEBUG("slaveServerPort: " + slaveServerPort);
1:         util.DEBUG("slaveReplPort: " + slaveReplPort);
1:         util.DEBUG("testClientHost: " + testClientHost);
1:         util.DEBUG("masterDatabasePath: " + masterDatabasePath);
1:         util.DEBUG("slaveDatabasePath: " + slaveDatabasePath);
1:         util.DEBUG("replicatedDb: " + replicatedDb);
1:         util.DEBUG("bootLoad: " + bootLoad);
1:         util.DEBUG("freezeDB: " + freezeDB);
1:         util.DEBUG("unFreezeDB: " + unFreezeDB);
1:         
1:         simpleLoad = System.getProperty("derby.tests.replSimpleLoad", "true")
1:                                                      .equalsIgnoreCase("true");
1:         util.DEBUG("simpleLoad: " + simpleLoad);
1:         simpleLoadTuples = Integer.parseInt(cp.getProperty("test.simpleloadtuples","10000"));
1:         util.DEBUG("simpleLoadTuples: " + simpleLoadTuples);
1:         util.DEBUG("replicationTest: " + replicationTest);
1:         util.DEBUG("replicationVerify: " + replicationVerify);
1:         junitTest = cp.getProperty("test.junitTest", "true")
1:                                                      .equalsIgnoreCase("true");
1:         util.DEBUG("junitTest: " + junitTest);
1:         THREADS = Integer.parseInt(cp.getProperty("test.stressMultiThreads","0"));
1:         util.DEBUG("THREADS: " + THREADS);
1:         MINUTES = Integer.parseInt(cp.getProperty("test.stressMultiMinutes","0"));
1:         util.DEBUG("MINUTES: " + MINUTES);
1:                 
1:         util.DEBUG("sqlLoadInit: " + sqlLoadInit);
1:         util.DEBUG("specialTestingJar: " + specialTestingJar);
1:         util.DEBUG("jvmVersion: " + jvmVersion);
1:         util.DEBUG("masterJvmVersion: " + masterJvmVersion);
1:         util.DEBUG("slaveJvmVersion: " + slaveJvmVersion);
1:         util.DEBUG("derbyVersion: " + derbyVersion);
1:         util.DEBUG("derbyMasterVersion: " + derbyMasterVersion);
1:         util.DEBUG("derbySlaveVersion: " + derbySlaveVersion);
1:         util.DEBUG("derbyTestingJar: " + derbyTestingJar);
1:         util.DEBUG("junit_jar: " + junit_jar);
1:         util.DEBUG("test_jars: " + test_jars);
1:         util.DEBUG("sleepTime: " + sleepTime);
1:         util.DEBUG("runUnReplicated: " + runUnReplicated);
1:         util.DEBUG("localEnv: " + localEnv);
/////////////////////////////////////////////////////////////////////////
1:         util.DEBUG("--------------------------------------------------------");
/////////////////////////////////////////////////////////////////////////
1:         util.DEBUG("--------------------------------------------------------");
1:         util.DEBUG("tuplesToInsertPerf: " + tuplesToInsertPerf);
1:         util.DEBUG("commitFreq: " + commitFreq);
1:         util.DEBUG("--------------------------------------------------------");
1:         util.DEBUG("--------------------------------------------------------");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
1:         tuplesToInsertPerf = Integer.parseInt(cp.getProperty("test.inserts","10000"));
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:dbe5dc3
/////////////////////////////////////////////////////////////////////////
1:                 masterDbSubPath); // Distinguishing master/slave
1:                 slaveDbSubPath); // Distinguishing master/slave
commit:40a554b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
/////////////////////////////////////////////////////////////////////////
1:         return SecurityManagerSetup.noSecurityManager(suite);
commit:5d24c78
/////////////////////////////////////////////////////////////////////////
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Properties;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: 
1: 
1: /**
1:  * Run a replication test in a distributed
1:  * environment, where master and slave hosts, and
1:  * master and slave ports are specified in a property file.
1:  * Which test to run is also specified in the property file.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Distributed extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Distributed
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Distributed(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
0:     protected void setUp() throws Exception
1:     {
0:         super.setUp();
1:     }
1:     
0:     protected void tearDown() throws Exception
1:     {
0:         super.tearDown();
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Distributed Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Distributed.class );
1:         
0:         return suite;
1:     }
1:     
1:     //////////////////////////////////////////////////////////////
1:     ////
1:     //// The replication test framework (testReplication()):
1:     //// a) "clean" replication run starting master and slave servers,
1:     ////     preparing master and slave databases,
1:     ////     starting and stopping replication and doing
1:     ////     failover for a "normal"/"failure free" replication
1:     ////     test run.
1:     ////
1:     //////////////////////////////////////////////////////////////
1:     
1:     public void testReplication()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:                 masterServerPort,
0:                 masterDatabasePath +FS+ masterDbSubPath); // Distinguishing master/slave
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:                 slaveServerPort,
0:                 slaveDatabasePath +FS+ slaveDbSubPath); // Distinguishing master/slave
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath,
1:                 replicatedDb,
1:                 masterServerHost, // Where the startreplication command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:                 slaveServerPort,
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, // Where the startMaster command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:                 slaveServerPort, // Not used since slave don't allow clients.
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort);
1:         
1:         
1:         // Used to run positive tests.
1:         // Handle negative testing in State.testPostStartedMasterAndSlave().
1:         // Observe that it will not be meaningful to do runTest if State.XXXX()
1:         // has led to incorrect replication state wrt. replicationTest.
1:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:                 jvmVersion,
1:                 testClientHost,
1:                 masterServerHost, masterServerPort,
1:                 replicatedDb);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         verifySlave();
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         verifyMaster();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         // As of 2008-02-06 master does not accept shutdown after replication, so:
1:         // do a 'kill pid' after ending the test run
1:         
1:     }
1:     
1:     /**
1:      * When running in a distributed context,
1:      * the environment is defined via the REPLICATIONTEST_PROPFILE.
1:      */
1:     void initEnvironment()
1:     throws IOException
1:     {
1:         
0:         System.out.println("*** Properties -----------------------------------------");
1:         userDir = System.getProperty("user.dir");
0:         System.out.println("user.dir:          " + userDir);
1:         
0:         System.out.println("derby.system.home: " + System.getProperty("derby.system.home"));
1:         
1:         String realPropertyFile = REPLICATIONTEST_PROPFILE; // Is just the plain file name in ${user.dir}
0:         System.out.println("realPropertyFile: " + realPropertyFile);
1:         
1:         InputStream isCp =  new FileInputStream(userDir + FS + realPropertyFile);
1:         Properties cp = new Properties();
1:         // testRunProperties = cp; // Make available for e.g. new Load(loadId)
1:         cp.load(isCp);
1:         // testRunProperties = cp; // Make available for e.g. new Load(loadId)
1:         // Now we can get the derby jar path, jvm path etc.
1:         
1:         util.printDebug = cp.getProperty("test.printDebug","false").equalsIgnoreCase("true");
0:         System.out.println("printDebug: " + util.printDebug);
1:         
1:         showSysinfo = cp.getProperty("test.showSysinfo","false").equalsIgnoreCase("true");
0:         System.out.println("showSysinfo: " + showSysinfo);
1:         
0:         testUser = cp.getProperty("test.testUser","false");
0:         System.out.println("testUser: " + testUser);
1:         
1:         masterServerHost = cp.getProperty("test.masterServerHost",masterServerHost);
0:         System.out.println("masterServerHost: " + masterServerHost);
1:         
1:         masterServerPort = Integer.parseInt(cp.getProperty("test.masterServerPort",""+masterServerPort));
0:         System.out.println("masterServerPort: " + masterServerPort);
1:         
1:         slaveServerHost = cp.getProperty("test.slaveServerHost",slaveServerHost);
0:         System.out.println("slaveServerHost: " + slaveServerHost);
1:         
1:         slaveServerPort = Integer.parseInt(cp.getProperty("test.slaveServerPort",""+slaveServerPort));
0:         System.out.println("slaveServerPort: " + slaveServerPort);
1:         
1:         slaveReplPort = Integer.parseInt(cp.getProperty("test.slaveReplPort",""+slaveReplPort));
0:         System.out.println("slaveReplPort: " + slaveReplPort);
1:         
1:         testClientHost = cp.getProperty("test.testClientHost",testClientHost);
0:         System.out.println("testClientHost: " + testClientHost);
1:         
1:         masterDatabasePath = cp.getProperty("test.master.databasepath");
0:         System.out.println("masterDatabasePath: " + masterDatabasePath);
1:         
1:         slaveDatabasePath = cp.getProperty("test.slave.databasepath");
0:         System.out.println("slaveDatabasePath: " + slaveDatabasePath);
1:         
1:         replicatedDb = cp.getProperty("test.databaseName","test");
0:         System.out.println("replicatedDb: " + replicatedDb);
1:         
1:         bootLoad = cp.getProperty("test.bootLoad");
0:         System.out.println("bootLoad: " + bootLoad);
1:         
1:         freezeDB = cp.getProperty("test.freezeDB");
0:         System.out.println("freezeDB: " + freezeDB);
1:         
1:         unFreezeDB = cp.getProperty("test.unFreezeDB");
0:         System.out.println("unFreezeDB: " + unFreezeDB);
1:         
1:         replicationTest = cp.getProperty("test.replicationTest");
0:         System.out.println("replicationTest: " + replicationTest);
1:         replicationVerify = cp.getProperty("test.replicationVerify");
0:         System.out.println("replicationVerify: " + replicationVerify);
1:         
1:         sqlLoadInit = cp.getProperty("test.sqlLoadInit");
0:         System.out.println("sqlLoadInit: " + sqlLoadInit);
1: 
1:         
1:         specialTestingJar = cp.getProperty("test.derbyTestingJar", null);
0:         System.out.println("specialTestingJar: " + specialTestingJar);
1:         
1:         jvmVersion = cp.getProperty("jvm.version");
0:         System.out.println("jvmVersion: " + jvmVersion);
1:         
1:         masterJvmVersion = cp.getProperty("jvm.masterversion");
1:         if ( masterJvmVersion == null )
1:         {masterJvmVersion = jvmVersion;}
0:         System.out.println("masterJvmVersion: " + masterJvmVersion);
1:         
1:         slaveJvmVersion = cp.getProperty("jvm.slaveversion");
1:         if ( slaveJvmVersion == null )
1:         {slaveJvmVersion = jvmVersion;}
0:         System.out.println("slaveJvmVersion: " + slaveJvmVersion);
1:         
1:         derbyVersion = cp.getProperty("derby.version");
0:         System.out.println("derbyVersion: " + derbyVersion);
1:         
1:         derbyMasterVersion = cp.getProperty("derby.masterversion");
1:         if ( derbyMasterVersion == null )
1:         {derbyMasterVersion = derbyVersion;}
0:         System.out.println("derbyMasterVersion: " + derbyMasterVersion);
1:         
1:         derbySlaveVersion = cp.getProperty("derby.slaveversion");
1:         if ( derbySlaveVersion == null )
1:         {derbySlaveVersion = derbyVersion;}
0:         System.out.println("derbySlaveVersion: " + derbySlaveVersion);
1:         
1:         String derbyTestingJar = derbyVersion + FS+"derbyTesting.jar";
1:         if ( specialTestingJar != null )  derbyTestingJar = specialTestingJar;
0:         System.out.println("derbyTestingJar: " + derbyTestingJar);
1:         
1:         junit_jar = cp.getProperty("junit_jar");
0:         System.out.println("junit_jar: " + junit_jar);
1:         
1:         test_jars = derbyTestingJar
1:                 + ":" + junit_jar
1:                 ;
0:         System.out.println("test_jars: " + test_jars);
1:         
1:         sleepTime = Integer.parseInt(cp.getProperty("test.sleepTime","15000"));
0:         System.out.println("sleepTime: " + sleepTime);
1:         
1:         runUnReplicated = cp.getProperty("test.runUnReplicated","false").equalsIgnoreCase("true");
0:         System.out.println("runUnReplicated: " + runUnReplicated);
1:         
1:         localEnv = cp.getProperty("test.localEnvironment","false").equalsIgnoreCase("true");
0:         System.out.println("localEnv: " + localEnv);
1:         
1:         derbyProperties = 
1:                  "derby.infolog.append=true"+LF
1:                 +"derby.drda.logConnections=true"+LF
1:                 +"derby.drda.traceAll=true"+LF;
1: 
1:         
0:         System.out.println("--------------------------------------------------------");
1:         
1:         masterPreRepl = new Load("masterPreRepl", cp);
1:         masterPostRepl = new Load("masterPostRepl", cp);
1:         slavePreSlave = new Load("slavePreSlave", cp);
1:         masterPostSlave = new Load("masterPostSlave", cp);
1:         slavePostSlave = new Load("slavePostSlave", cp);
1:         
0:         System.out.println("--------------------------------------------------------");
1:         // for SimplePerfTest
0:         tuplesToInsert = Integer.parseInt(cp.getProperty("test.inserts","10000"));
1:         commitFreq = Integer.parseInt(cp.getProperty("test.commitFreq","0")); // "0" is autocommit
1:         
0:         System.out.println("--------------------------------------------------------");
1:         
1:         state.initEnvironment(cp);
1:        
0:         System.out.println("--------------------------------------------------------");
1:        
1:     }
1: }
============================================================================