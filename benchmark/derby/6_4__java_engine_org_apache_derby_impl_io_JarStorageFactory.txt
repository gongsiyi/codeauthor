1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.io.JarStorageFactory
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.io;
1:eac0369: 
1:eac0369: import java.io.File;
1:eac0369: import java.io.IOException;
1:eac0369: import java.util.zip.ZipFile;
1:eac0369: 
1:55ffdfb: import org.apache.derby.io.StorageFile;
1:55ffdfb: 
2:eac0369: /**
1:eac0369:  * This class provides a Jar file based implementation of the StorageFactory interface. It is used by the
1:eac0369:  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
1:eac0369:  */
1:eac0369: 
1:eac0369: public class JarStorageFactory extends BaseStorageFactory
1:eac0369: {
1:eac0369:     ZipFile zipData;
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Construct a persistent StorageFile from a path name.
1:eac0369:      *
1:eac0369:      * @param path The path name of the file
1:eac0369:      *
1:eac0369:      * @return A corresponding StorageFile object
1:eac0369:      */
1:eac0369:     StorageFile newPersistentFile( String path)
1:eac0369:     {
1:eac0369:         return new JarDBFile( this, path);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Construct a StorageFile from a directory and file name.
1:eac0369:      *
1:eac0369:      * @param directoryName The directory part of the path name. Must not be null, nor may it be in the temp dir.
1:eac0369:      * @param fileName The name of the file within the directory.
1:eac0369:      *
1:eac0369:      * @return A corresponding StorageFile object
1:eac0369:      */
1:eac0369:     StorageFile newPersistentFile( String directoryName, String fileName)
1:eac0369:     {
1:eac0369:         if( directoryName == null || directoryName.length() == 0)
1:eac0369:             return newPersistentFile( fileName);
1:eac0369:         return new JarDBFile( this, directoryName, fileName);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Construct a StorageFile from a directory and file name.
1:eac0369:      *
1:eac0369:      * @param directoryName The directory part of the path name.
1:eac0369:      * @param fileName The name of the file within the directory.
1:eac0369:      *
1:eac0369:      * @return A corresponding StorageFile object
1:eac0369:      */
1:eac0369:     StorageFile newPersistentFile( StorageFile directoryName, String fileName)
1:eac0369:     {
1:eac0369:         if( directoryName == null)
1:eac0369:             return newPersistentFile( fileName);
1:eac0369:         return new JarDBFile( (JarDBFile) directoryName, fileName);
1:eac0369:     }
1:eac0369: 
1:eac0369:     void doInit() throws IOException
1:eac0369:     {
1:eac0369:         if( dataDirectory == null)
1:eac0369:             return;
1:eac0369:         // Parse the dataDirectory name. It should be of the form "(jar-file)directory" or "jar-file"
1:eac0369:         int offset = 0;
1:4963980:         while( offset < dataDirectory.length() && Character.isSpaceChar( dataDirectory.charAt( offset)))
1:eac0369:             offset ++;
1:eac0369:         int leftParen = -1;
1:eac0369:         int rightParen = -1;
1:eac0369:         if( offset < dataDirectory.length())
1:eac0369:         {
1:eac0369:             leftParen = dataDirectory.indexOf( '(', offset);
1:eac0369:             if( leftParen >= 0)
1:894a72f:                 rightParen = dataDirectory.lastIndexOf( ')' );
1:eac0369:         }
1:eac0369:         File jarFile = null;
1:eac0369:         if( rightParen > 0)
1:eac0369:         {
1:eac0369:             jarFile = getJarFile( dataDirectory.substring( leftParen + 1, rightParen));
1:eac0369:             offset = rightParen + 1;
1:4963980:             while( offset < dataDirectory.length() && Character.isSpaceChar( dataDirectory.charAt( offset)))
1:eac0369:                 offset ++;
1:eac0369:             dataDirectory = dataDirectory.substring( offset, dataDirectory.length());
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             jarFile = getJarFile( dataDirectory);
1:eac0369:             dataDirectory = "";
1:eac0369:         }
1:eac0369:         zipData = new ZipFile( jarFile);
1:eac0369:         canonicalName = "(" + jarFile.getCanonicalPath() + ")" + dataDirectory;
1:eac0369:         separatedDataDirectory = dataDirectory + '/'; // Zip files use '/' as a separator
1:eac0369:         createTempDir();
1:eac0369:     } // end of doInit
1:55ffdfb:     
1:55ffdfb:     /**
1:55ffdfb:      * Close the opened jar/zip file on shutdown.
1:55ffdfb:      * (Fix for DERBY-2083).
1:55ffdfb:      */
1:55ffdfb:     public void shutdown() {
1:55ffdfb:         if (zipData != null) {
1:55ffdfb:             try {
1:55ffdfb:                 zipData.close();
1:55ffdfb:             } catch (IOException e) {
1:55ffdfb:             }
1:55ffdfb:             zipData = null;
1:55ffdfb:         }
1:55ffdfb:     }
1:eac0369: 
1:eac0369:     private File getJarFile( String name)
1:eac0369:     {
1:eac0369:         File jarFile = new File( name);
1:eac0369:         if( home != null && !jarFile.isAbsolute())
1:eac0369:             jarFile = new File( home, name);
1:eac0369:         return jarFile;
1:eac0369:     } // end of getJarFile
1:eac0369: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:d54c775
/////////////////////////////////////////////////////////////////////////
commit:894a72f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
1:                 rightParen = dataDirectory.lastIndexOf( ')' );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4963980
/////////////////////////////////////////////////////////////////////////
1:         while( offset < dataDirectory.length() && Character.isSpaceChar( dataDirectory.charAt( offset)))
/////////////////////////////////////////////////////////////////////////
1:             while( offset < dataDirectory.length() && Character.isSpaceChar( dataDirectory.charAt( offset)))
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:55ffdfb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.io.StorageFile;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Close the opened jar/zip file on shutdown.
1:      * (Fix for DERBY-2083).
1:      */
1:     public void shutdown() {
1:         if (zipData != null) {
1:             try {
1:                 zipData.close();
1:             } catch (IOException e) {
1:             }
1:             zipData = null;
1:         }
1:     }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.io.JarStorageFactory
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.io.StorageFactory;
0: import org.apache.derby.io.StorageFile;
1: 
1: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
1: import java.io.IOException;
1: 
0: import java.util.Properties;
0: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipFile;
1: 
1: /**
1:  * This class provides a Jar file based implementation of the StorageFactory interface. It is used by the
1:  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
1:  */
1: 
1: public class JarStorageFactory extends BaseStorageFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1:     ZipFile zipData;
1:     
1:     /**
1:      * Construct a persistent StorageFile from a path name.
1:      *
1:      * @param path The path name of the file
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     StorageFile newPersistentFile( String path)
1:     {
1:         return new JarDBFile( this, path);
1:     }
1: 
1:     /**
1:      * Construct a StorageFile from a directory and file name.
1:      *
1:      * @param directoryName The directory part of the path name. Must not be null, nor may it be in the temp dir.
1:      * @param fileName The name of the file within the directory.
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     StorageFile newPersistentFile( String directoryName, String fileName)
1:     {
1:         if( directoryName == null || directoryName.length() == 0)
1:             return newPersistentFile( fileName);
1:         return new JarDBFile( this, directoryName, fileName);
1:     }
1: 
1:     /**
1:      * Construct a StorageFile from a directory and file name.
1:      *
1:      * @param directoryName The directory part of the path name.
1:      * @param fileName The name of the file within the directory.
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     StorageFile newPersistentFile( StorageFile directoryName, String fileName)
1:     {
1:         if( directoryName == null)
1:             return newPersistentFile( fileName);
1:         return new JarDBFile( (JarDBFile) directoryName, fileName);
1:     }
1: 
1:     void doInit() throws IOException
1:     {
1:         if( dataDirectory == null)
1:             return;
1:         // Parse the dataDirectory name. It should be of the form "(jar-file)directory" or "jar-file"
1:         int offset = 0;
0:         while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
1:             offset ++;
1:         int leftParen = -1;
1:         int rightParen = -1;
1:         if( offset < dataDirectory.length())
1:         {
1:             leftParen = dataDirectory.indexOf( '(', offset);
1:             if( leftParen >= 0)
0:                 rightParen = dataDirectory.indexOf( ')', leftParen + 1);
1:         }
1:         File jarFile = null;
1:         if( rightParen > 0)
1:         {
1:             jarFile = getJarFile( dataDirectory.substring( leftParen + 1, rightParen));
1:             offset = rightParen + 1;
0:             while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
1:                 offset ++;
1:             dataDirectory = dataDirectory.substring( offset, dataDirectory.length());
1:         }
1:         else
1:         {
1:             jarFile = getJarFile( dataDirectory);
1:             dataDirectory = "";
1:         }
1:         zipData = new ZipFile( jarFile);
1:         canonicalName = "(" + jarFile.getCanonicalPath() + ")" + dataDirectory;
1:         separatedDataDirectory = dataDirectory + '/'; // Zip files use '/' as a separator
1:         createTempDir();
1:     } // end of doInit
1: 
1:     private File getJarFile( String name)
1:     {
1:         File jarFile = new File( name);
1:         if( home != null && !jarFile.isAbsolute())
1:             jarFile = new File( home, name);
1:         return jarFile;
1:     } // end of getJarFile
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.io;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.io.StorageFactory;
0: import org.apache.derby.io.StorageFile;
0: 
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: 
0: import java.util.Properties;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipFile;
0: 
0: /**
0:  * This class provides a Jar file based implementation of the StorageFactory interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
0:  */
0: 
0: public class JarStorageFactory extends BaseStorageFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0:     ZipFile zipData;
0:     
0:     /**
0:      * Construct a persistent StorageFile from a path name.
0:      *
0:      * @param path The path name of the file
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     StorageFile newPersistentFile( String path)
0:     {
0:         return new JarDBFile( this, path);
0:     }
0: 
0:     /**
0:      * Construct a StorageFile from a directory and file name.
0:      *
0:      * @param directoryName The directory part of the path name. Must not be null, nor may it be in the temp dir.
0:      * @param fileName The name of the file within the directory.
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     StorageFile newPersistentFile( String directoryName, String fileName)
0:     {
0:         if( directoryName == null || directoryName.length() == 0)
0:             return newPersistentFile( fileName);
0:         return new JarDBFile( this, directoryName, fileName);
0:     }
0: 
0:     /**
0:      * Construct a StorageFile from a directory and file name.
0:      *
0:      * @param directoryName The directory part of the path name.
0:      * @param fileName The name of the file within the directory.
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     StorageFile newPersistentFile( StorageFile directoryName, String fileName)
0:     {
0:         if( directoryName == null)
0:             return newPersistentFile( fileName);
0:         return new JarDBFile( (JarDBFile) directoryName, fileName);
0:     }
0: 
0:     void doInit() throws IOException
0:     {
0:         if( dataDirectory == null)
0:             return;
0:         // Parse the dataDirectory name. It should be of the form "(jar-file)directory" or "jar-file"
0:         int offset = 0;
0:         while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
0:             offset ++;
0:         int leftParen = -1;
0:         int rightParen = -1;
0:         if( offset < dataDirectory.length())
0:         {
0:             leftParen = dataDirectory.indexOf( '(', offset);
0:             if( leftParen >= 0)
0:                 rightParen = dataDirectory.indexOf( ')', leftParen + 1);
0:         }
0:         File jarFile = null;
0:         if( rightParen > 0)
0:         {
0:             jarFile = getJarFile( dataDirectory.substring( leftParen + 1, rightParen));
0:             offset = rightParen + 1;
0:             while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
0:                 offset ++;
0:             dataDirectory = dataDirectory.substring( offset, dataDirectory.length());
0:         }
0:         else
0:         {
0:             jarFile = getJarFile( dataDirectory);
0:             dataDirectory = "";
0:         }
0:         zipData = new ZipFile( jarFile);
0:         canonicalName = "(" + jarFile.getCanonicalPath() + ")" + dataDirectory;
0:         separatedDataDirectory = dataDirectory + '/'; // Zip files use '/' as a separator
0:         createTempDir();
0:     } // end of doInit
0: 
0:     private File getJarFile( String name)
0:     {
0:         File jarFile = new File( name);
0:         if( home != null && !jarFile.isAbsolute())
0:             jarFile = new File( home, name);
0:         return jarFile;
0:     } // end of getJarFile
0: }
============================================================================