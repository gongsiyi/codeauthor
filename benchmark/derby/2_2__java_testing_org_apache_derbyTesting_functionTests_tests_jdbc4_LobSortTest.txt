1:ea2ac9f: /*
3:ea2ac9f: 
1:ea2ac9f:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.LobSortTest
1:ea2ac9f: 
1:ea2ac9f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ea2ac9f:    contributor license agreements.  See the NOTICE file distributed with
1:ea2ac9f:    this work for additional information regarding copyright ownership.
1:ea2ac9f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ea2ac9f:    (the "License"); you may not use this file except in compliance with
1:ea2ac9f:    the License.  You may obtain a copy of the License at
1:ea2ac9f: 
1:ea2ac9f:       http://www.apache.org/licenses/LICENSE-2.0
1:ea2ac9f: 
1:ea2ac9f:    Unless required by applicable law or agreed to in writing, software
1:ea2ac9f:    distributed under the License is distributed on an "AS IS" BASIS,
1:ea2ac9f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ea2ac9f:    See the License for the specific language governing permissions and
1:ea2ac9f:    limitations under the License.
1:ea2ac9f: 
1:ea2ac9f:  */
1:ea2ac9f: 
1:ea2ac9f: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:ea2ac9f: 
1:ea2ac9f: import java.sql.Connection;
1:ea2ac9f: import java.sql.PreparedStatement;
1:ea2ac9f: import java.sql.ResultSet;
1:ea2ac9f: import java.sql.SQLException;
1:ea2ac9f: import java.sql.Statement;
1:250dbe6: import java.util.Properties;
1:ea2ac9f: import java.util.Random;
1:ea2ac9f: import junit.framework.Test;
1:ea2ac9f: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1:ea2ac9f: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:ea2ac9f: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:ea2ac9f: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:ea2ac9f: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:250dbe6: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:ea2ac9f: 
1:ea2ac9f: /**
1:ea2ac9f:  * Executes sorting of LOB values based on the length of the LOB or a random
1:ea2ac9f:  * value. The intention is to test code determining the length of the LOBs and
1:ea2ac9f:  * also the code materializing the LOB values. The tests don't verify that the
1:ea2ac9f:  * sort order is actually correct. This test is a good candidate for being run
1:ea2ac9f:  * with hard or soft upgraded databases.
1:ea2ac9f:  * <p>
1:ea2ac9f:  * Note that the seed used for the random number generator is included in the
1:ea2ac9f:  * name of the test methods. Knowing the seed enables debugging by being able
1:ea2ac9f:  * to rerun a specific test sequence that failed. The random number generator
1:ea2ac9f:  * is only used during data insertion.
1:ea2ac9f:  * <p>
1:ea2ac9f:  * See DERBY-4245.
1:ea2ac9f:  * <p>
1:ea2ac9f:  * <em>NOTE</em>: This test is sensitive to the JVM heap size, which is one of
1:ea2ac9f:  * the factors determining whether the sort is done internally or externally.
1:ea2ac9f:  * The bug for a clean database would only occur with the external sort.
1:ea2ac9f:  */
1:ea2ac9f: public class LobSortTest
1:ea2ac9f:         extends BaseJDBCTestCase {
1:ea2ac9f: 
1:ea2ac9f:     /** The seed used for the random number generator. */
1:ea2ac9f:     private static final long SEED = System.currentTimeMillis();
1:ea2ac9f: 
1:ea2ac9f:     public LobSortTest(String name) {
1:ea2ac9f:         super(name);
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     /**
1:ea2ac9f:      * Overridden naming method which includes the seed used for the random
1:ea2ac9f:      * generator.
1:ea2ac9f:      * <p>
1:ea2ac9f:      * The seed is required if one wants to replay a specific sequence for
1:ea2ac9f:      * debugging purposes.
1:ea2ac9f:      *
1:ea2ac9f:      * @return The name of the test.
1:ea2ac9f:      */
1:ea2ac9f:     public String getName() {
1:ea2ac9f:         return (super.getName() + "-" + SEED);
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testBlobMixed()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthBlob(
1:ea2ac9f:                 "select blen, b from MIXED_LOBS order by length(b)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testBlobSmall()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthBlob("select blen, b from MIXED_LOBS " +
1:ea2ac9f:                                   "where blen < 2000 order by length(b)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testBlobLarge()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthBlob("select blen, b from MIXED_LOBS " +
1:ea2ac9f:                     "where blen > 34000 order by length(b)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testBlobClob()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthBlob(
1:ea2ac9f:                 "select blen, b from MIXED_LOBS order by length(c), length(b)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testBlobRandom()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthBlob(
1:ea2ac9f:                 "select blen, b from MIXED_LOBS order by rnd");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testClobMixed()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthClob(
1:ea2ac9f:                 "select clen, c from MIXED_LOBS order by length(c)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testClobSmall()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthClob("select clen, c from MIXED_LOBS " +
1:ea2ac9f:                                   "where clen < 2000 order by length(c)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testClobLarge()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthClob("select clen, c from MIXED_LOBS " +
1:ea2ac9f:                     "where clen > 34000 order by length(c)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testClobBlob()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthClob(
1:ea2ac9f:                 "select clen, c from MIXED_LOBS order by length(b), length(c)");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public void testClobRandom()
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         fetchIterateGetLengthClob(
1:ea2ac9f:                 "select clen, c from MIXED_LOBS order by rnd");
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     /**
1:ea2ac9f:      * Executes the specified query two times, materializes the Blob on the
1:ea2ac9f:      * first run and gets the length through {@code Blob.length} on the second.
1:ea2ac9f:      * <p>
1:ea2ac9f:      * Note that the query must select a Blob column at index one and the length
1:ea2ac9f:      * at index two.
1:ea2ac9f:      *
1:ea2ac9f:      * @param sql query to execute
1:ea2ac9f:      * @throws SQLException if the test fails for some reason
1:ea2ac9f:      */
1:ea2ac9f:     private void fetchIterateGetLengthBlob(String sql)
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         Statement stmt = createStatement();
1:ea2ac9f:         ResultSet rs = stmt.executeQuery(sql);
1:ea2ac9f:         // Materialize the BLOB value.
1:ea2ac9f:         while (rs.next()) {
1:ea2ac9f:             assertEquals(rs.getInt(1), rs.getBytes(2).length);
1:ea2ac9f:         }
1:ea2ac9f:         rs.close();
1:ea2ac9f:         rs = stmt.executeQuery(sql);
1:34ac4cc:         // Get the BLOB value length through Blob.length
1:ea2ac9f:         while (rs.next()) {
1:ea2ac9f:             assertEquals(rs.getInt(1), (int)rs.getBlob(2).length());
1:ea2ac9f:         }
1:ea2ac9f:         rs.close();
1:ea2ac9f:         stmt.close();
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     /**
1:ea2ac9f:      * Executes the specified query two times, materializes the Clob on the
1:ea2ac9f:      * first run and gets the length through {@code Clob.length} on the second.
1:ea2ac9f:      * <p>
1:ea2ac9f:      * Note that the query must select a Clob column at index one and the length
1:ea2ac9f:      * at index two.
1:ea2ac9f:      *
1:ea2ac9f:      * @param sql query to execute
1:ea2ac9f:      * @throws SQLException if the test fails for some reason
1:ea2ac9f:      */
1:ea2ac9f:     private void fetchIterateGetLengthClob(String sql)
1:ea2ac9f:             throws SQLException {
1:ea2ac9f:         Statement stmt = createStatement();
1:ea2ac9f:         ResultSet rs = stmt.executeQuery(sql);
1:ea2ac9f:         // Materialize the CLOB value.
1:ea2ac9f:         while (rs.next()) {
1:ea2ac9f:             assertEquals(rs.getInt(1), rs.getString(2).length());
1:ea2ac9f:         }
1:ea2ac9f:         rs.close();
1:ea2ac9f:         rs = stmt.executeQuery(sql);
1:34ac4cc:         // Get the CLOB value length through Clob.length
1:ea2ac9f:         while (rs.next()) {
1:ea2ac9f:             assertEquals(rs.getInt(1), (int)rs.getClob(2).length());
1:ea2ac9f:         }
1:ea2ac9f:         rs.close();
1:ea2ac9f:         stmt.close();
1:ea2ac9f:     }
1:ea2ac9f: 
1:ea2ac9f:     public static Test suite() {
1:250dbe6:         Properties props = new Properties();
1:250dbe6:         // Adjust sort buffer size to trigger the bug situation with less data.
1:250dbe6:         props.setProperty("derby.storage.sortBufferMax", "4");
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(LobSortTest.class,
1:ea2ac9f:                                         "LobSortTestEmbedded");
1:250dbe6:         return new CleanDatabaseTestSetup(
1:250dbe6:                 new SystemPropertyTestSetup(suite, props, true)) {
1:ea2ac9f:             /**
1:ea2ac9f:              * Generates a table with Blob and Clobs of mixed size.
1:ea2ac9f:              */
1:ea2ac9f:             protected void decorateSQL(Statement s)
1:ea2ac9f:                     throws SQLException {
1:ea2ac9f:                 Random rnd = new Random(SEED);
1:ea2ac9f:                 Connection con = s.getConnection();
1:ea2ac9f:                 con.setAutoCommit(false);
1:ea2ac9f:                 s.executeUpdate("create table MIXED_LOBS (" +
1:ea2ac9f:                         "c clob, clen int, b blob, blen int, rnd int)");
1:ea2ac9f:                 PreparedStatement ps = con.prepareStatement(
1:ea2ac9f:                         "insert into MIXED_LOBS values (?,?,?,?,?)");
1:ea2ac9f:                 // Make sure we get at least one zero-length CLOB and BLOB.
1:ea2ac9f:                 ps.setString(1, "");
1:ea2ac9f:                 ps.setInt(2, 0);
1:ea2ac9f:                 ps.setBytes(3, new byte[0]);
1:ea2ac9f:                 ps.setInt(4, 0);
1:ea2ac9f:                 ps.setInt(5, rnd.nextInt());
1:ea2ac9f:                 ps.executeUpdate();
1:250dbe6:                 for (int i=0; i < 100; i++) {
1:ea2ac9f:                     CharAlphabet ca = getCharAlphabet(1 + rnd.nextInt(3));
1:ea2ac9f:                     int length = (int)(rnd.nextDouble() * 64.0 * 1024.0);
1:ea2ac9f:                     if (rnd.nextInt(1000) < 500) {
1:ea2ac9f:                         // Specify the length.
1:ea2ac9f:                         ps.setCharacterStream( 1,
1:ea2ac9f:                                 new LoopingAlphabetReader(length, ca), length);
1:ea2ac9f:                     } else {
1:ea2ac9f:                         // Don't specify the length.
1:ea2ac9f:                         ps.setCharacterStream(1,
1:ea2ac9f:                                 new LoopingAlphabetReader(length, ca));
1:ea2ac9f:                     }
1:ea2ac9f:                     ps.setInt(2, length);
1:ea2ac9f:                     length = (int)(rnd.nextDouble() * 64.0 * 1024.0);
1:ea2ac9f:                     if (rnd.nextInt(1000) < 500) {
1:ea2ac9f:                         // Specify the length.
1:ea2ac9f:                         ps.setBinaryStream(3,
1:ea2ac9f:                                 new LoopingAlphabetStream(length), length);
1:ea2ac9f:                     } else {
1:ea2ac9f:                         // Don't specify the length.
1:ea2ac9f:                         ps.setBinaryStream(3,
1:ea2ac9f:                                 new LoopingAlphabetStream(length));
1:ea2ac9f:                     }
1:ea2ac9f:                     ps.setInt(4, length);
1:ea2ac9f:                     ps.setInt(5, rnd.nextInt());
1:ea2ac9f:                     ps.executeUpdate();
1:ea2ac9f:                 }
1:ea2ac9f:                 con.commit();
1:ea2ac9f:                 ps.close();
1:ea2ac9f:             }
1:ea2ac9f: 
1:ea2ac9f:             /**
1:ea2ac9f:              * Returns a character alphabet.
1:ea2ac9f:              */
1:ea2ac9f:             private CharAlphabet getCharAlphabet(int i) {
1:ea2ac9f:                 switch (i) {
1:ea2ac9f:                     case 1:
1:ea2ac9f:                         return CharAlphabet.modernLatinLowercase();
1:ea2ac9f:                     case 2:
1:ea2ac9f:                         return CharAlphabet.tamil();
1:ea2ac9f:                     case 3:
1:ea2ac9f:                         return CharAlphabet.cjkSubset();
1:ea2ac9f:                     default:
1:ea2ac9f:                         fail("Unknown alphabet identifier: " + i);
1:ea2ac9f:                 }
1:ea2ac9f:                 // Will never be reached.
1:ea2ac9f:                 return null;
1:ea2ac9f:             }
1:ea2ac9f:         };
1:ea2ac9f:     }
1:ea2ac9f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(LobSortTest.class,
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:250dbe6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         Properties props = new Properties();
1:         // Adjust sort buffer size to trigger the bug situation with less data.
1:         props.setProperty("derby.storage.sortBufferMax", "4");
1:         return new CleanDatabaseTestSetup(
1:                 new SystemPropertyTestSetup(suite, props, true)) {
/////////////////////////////////////////////////////////////////////////
1:                 for (int i=0; i < 100; i++) {
commit:34ac4cc
/////////////////////////////////////////////////////////////////////////
1:         // Get the BLOB value length through Blob.length
/////////////////////////////////////////////////////////////////////////
1:         // Get the CLOB value length through Clob.length
commit:ea2ac9f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.LobSortTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Random;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * Executes sorting of LOB values based on the length of the LOB or a random
1:  * value. The intention is to test code determining the length of the LOBs and
1:  * also the code materializing the LOB values. The tests don't verify that the
1:  * sort order is actually correct. This test is a good candidate for being run
1:  * with hard or soft upgraded databases.
1:  * <p>
1:  * Note that the seed used for the random number generator is included in the
1:  * name of the test methods. Knowing the seed enables debugging by being able
1:  * to rerun a specific test sequence that failed. The random number generator
1:  * is only used during data insertion.
1:  * <p>
1:  * See DERBY-4245.
1:  * <p>
1:  * <em>NOTE</em>: This test is sensitive to the JVM heap size, which is one of
1:  * the factors determining whether the sort is done internally or externally.
1:  * The bug for a clean database would only occur with the external sort.
1:  */
1: public class LobSortTest
1:         extends BaseJDBCTestCase {
1: 
1:     /** The seed used for the random number generator. */
1:     private static final long SEED = System.currentTimeMillis();
1: 
1:     public LobSortTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Overridden naming method which includes the seed used for the random
1:      * generator.
1:      * <p>
1:      * The seed is required if one wants to replay a specific sequence for
1:      * debugging purposes.
1:      *
1:      * @return The name of the test.
1:      */
1:     public String getName() {
1:         return (super.getName() + "-" + SEED);
1:     }
1: 
1:     public void testBlobMixed()
1:             throws SQLException {
1:         fetchIterateGetLengthBlob(
1:                 "select blen, b from MIXED_LOBS order by length(b)");
1:     }
1: 
1:     public void testBlobSmall()
1:             throws SQLException {
1:         fetchIterateGetLengthBlob("select blen, b from MIXED_LOBS " +
1:                                   "where blen < 2000 order by length(b)");
1:     }
1: 
1:     public void testBlobLarge()
1:             throws SQLException {
1:         fetchIterateGetLengthBlob("select blen, b from MIXED_LOBS " +
1:                     "where blen > 34000 order by length(b)");
1:     }
1: 
1:     public void testBlobClob()
1:             throws SQLException {
1:         fetchIterateGetLengthBlob(
1:                 "select blen, b from MIXED_LOBS order by length(c), length(b)");
1:     }
1: 
1:     public void testBlobRandom()
1:             throws SQLException {
1:         fetchIterateGetLengthBlob(
1:                 "select blen, b from MIXED_LOBS order by rnd");
1:     }
1: 
1:     public void testClobMixed()
1:             throws SQLException {
1:         fetchIterateGetLengthClob(
1:                 "select clen, c from MIXED_LOBS order by length(c)");
1:     }
1: 
1:     public void testClobSmall()
1:             throws SQLException {
1:         fetchIterateGetLengthClob("select clen, c from MIXED_LOBS " +
1:                                   "where clen < 2000 order by length(c)");
1:     }
1: 
1:     public void testClobLarge()
1:             throws SQLException {
1:         fetchIterateGetLengthClob("select clen, c from MIXED_LOBS " +
1:                     "where clen > 34000 order by length(c)");
1:     }
1: 
1:     public void testClobBlob()
1:             throws SQLException {
1:         fetchIterateGetLengthClob(
1:                 "select clen, c from MIXED_LOBS order by length(b), length(c)");
1:     }
1: 
1:     public void testClobRandom()
1:             throws SQLException {
1:         fetchIterateGetLengthClob(
1:                 "select clen, c from MIXED_LOBS order by rnd");
1:     }
1: 
1:     /**
1:      * Executes the specified query two times, materializes the Blob on the
1:      * first run and gets the length through {@code Blob.length} on the second.
1:      * <p>
1:      * Note that the query must select a Blob column at index one and the length
1:      * at index two.
1:      *
1:      * @param sql query to execute
1:      * @throws SQLException if the test fails for some reason
1:      */
1:     private void fetchIterateGetLengthBlob(String sql)
1:             throws SQLException {
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(sql);
1:         // Materialize the BLOB value.
1:         while (rs.next()) {
1:             assertEquals(rs.getInt(1), rs.getBytes(2).length);
1:         }
1:         rs.close();
1:         rs = stmt.executeQuery(sql);
0:         // Get the BLOB value length though Blob.length
1:         while (rs.next()) {
1:             assertEquals(rs.getInt(1), (int)rs.getBlob(2).length());
1:         }
1:         rs.close();
1:         stmt.close();
1:     }
1: 
1:     /**
1:      * Executes the specified query two times, materializes the Clob on the
1:      * first run and gets the length through {@code Clob.length} on the second.
1:      * <p>
1:      * Note that the query must select a Clob column at index one and the length
1:      * at index two.
1:      *
1:      * @param sql query to execute
1:      * @throws SQLException if the test fails for some reason
1:      */
1:     private void fetchIterateGetLengthClob(String sql)
1:             throws SQLException {
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(sql);
1:         // Materialize the CLOB value.
1:         while (rs.next()) {
1:             assertEquals(rs.getInt(1), rs.getString(2).length());
1:         }
1:         rs.close();
1:         rs = stmt.executeQuery(sql);
0:         // Get the CLOB value length though Clob.length
1:         while (rs.next()) {
1:             assertEquals(rs.getInt(1), (int)rs.getClob(2).length());
1:         }
1:         rs.close();
1:         stmt.close();
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite(LobSortTest.class,
1:                                         "LobSortTestEmbedded");
0:         return new CleanDatabaseTestSetup(suite) {
1:             /**
1:              * Generates a table with Blob and Clobs of mixed size.
1:              */
1:             protected void decorateSQL(Statement s)
1:                     throws SQLException {
1:                 Random rnd = new Random(SEED);
1:                 Connection con = s.getConnection();
1:                 con.setAutoCommit(false);
1:                 s.executeUpdate("create table MIXED_LOBS (" +
1:                         "c clob, clen int, b blob, blen int, rnd int)");
1:                 PreparedStatement ps = con.prepareStatement(
1:                         "insert into MIXED_LOBS values (?,?,?,?,?)");
1:                 // Make sure we get at least one zero-length CLOB and BLOB.
1:                 ps.setString(1, "");
1:                 ps.setInt(2, 0);
1:                 ps.setBytes(3, new byte[0]);
1:                 ps.setInt(4, 0);
1:                 ps.setInt(5, rnd.nextInt());
1:                 ps.executeUpdate();
0:                 for (int i=0; i < 600; i++) {
1:                     CharAlphabet ca = getCharAlphabet(1 + rnd.nextInt(3));
1:                     int length = (int)(rnd.nextDouble() * 64.0 * 1024.0);
1:                     if (rnd.nextInt(1000) < 500) {
1:                         // Specify the length.
1:                         ps.setCharacterStream( 1,
1:                                 new LoopingAlphabetReader(length, ca), length);
1:                     } else {
1:                         // Don't specify the length.
1:                         ps.setCharacterStream(1,
1:                                 new LoopingAlphabetReader(length, ca));
1:                     }
1:                     ps.setInt(2, length);
1:                     length = (int)(rnd.nextDouble() * 64.0 * 1024.0);
1:                     if (rnd.nextInt(1000) < 500) {
1:                         // Specify the length.
1:                         ps.setBinaryStream(3,
1:                                 new LoopingAlphabetStream(length), length);
1:                     } else {
1:                         // Don't specify the length.
1:                         ps.setBinaryStream(3,
1:                                 new LoopingAlphabetStream(length));
1:                     }
1:                     ps.setInt(4, length);
1:                     ps.setInt(5, rnd.nextInt());
1:                     ps.executeUpdate();
1:                 }
1:                 con.commit();
1:                 ps.close();
1:             }
1: 
1:             /**
1:              * Returns a character alphabet.
1:              */
1:             private CharAlphabet getCharAlphabet(int i) {
1:                 switch (i) {
1:                     case 1:
1:                         return CharAlphabet.modernLatinLowercase();
1:                     case 2:
1:                         return CharAlphabet.tamil();
1:                     case 3:
1:                         return CharAlphabet.cjkSubset();
1:                     default:
1:                         fail("Unknown alphabet identifier: " + i);
1:                 }
1:                 // Will never be reached.
1:                 return null;
1:             }
1:         };
1:     }
1: }
============================================================================