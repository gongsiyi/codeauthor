1:6b8ad38: /*
1:6b8ad38: 
1:6b8ad38:    Class org.apache.derby.optional.utils.ToolUtilities
1:6b8ad38: 
1:6b8ad38:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6b8ad38:    contributor license agreements.  See the NOTICE file distributed with
1:6b8ad38:    this work for additional information regarding copyright ownership.
1:6b8ad38:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6b8ad38:    (the "License"); you may not use this file except in compliance with
1:6b8ad38:    the License.  You may obtain a copy of the License at
1:6b8ad38: 
1:6b8ad38:       http://www.apache.org/licenses/LICENSE-2.0
1:6b8ad38: 
1:6b8ad38:    Unless required by applicable law or agreed to in writing, software
1:6b8ad38:    distributed under the License is distributed on an "AS IS" BASIS,
1:6b8ad38:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b8ad38:    See the License for the specific language governing permissions and
1:6b8ad38:    limitations under the License.
1:6b8ad38: 
1:6b8ad38: */
1:6b8ad38: 
1:6b8ad38: package org.apache.derby.optional.utils;
1:6b8ad38: 
1:6b8ad38: import java.sql.Connection;
1:6b8ad38: import java.sql.PreparedStatement;
1:6b8ad38: import java.sql.ResultSet;
1:6b8ad38: import java.sql.SQLException;
1:6b8ad38: 
1:6b8ad38: import org.apache.derby.iapi.error.PublicAPI;
1:6b8ad38: import org.apache.derby.iapi.error.StandardException;
1:6b8ad38: import org.apache.derby.iapi.util.IdUtil;
1:6b8ad38: import org.apache.derby.shared.common.reference.SQLState;
1:6b8ad38: 
1:6b8ad38: /**
1:6b8ad38:  * Utility functions shared across the optional tools.
1:6b8ad38:  * 
1:6b8ad38:  */
1:6b8ad38: public class ToolUtilities
1:6b8ad38: {
1:6b8ad38:     ////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     //	CONSTANTS
1:6b8ad38:     //
1:6b8ad38:     ////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     ////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     //	STATE
1:6b8ad38:     //
1:6b8ad38:     ////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     ////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     //	ENTRY POINTS
1:6b8ad38:     //
1:6b8ad38:     ////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * Returns true if SQL authorization is enabled in the connected database.
1:6b8ad38:      */
1:6b8ad38:     public  static  boolean sqlAuthorizationEnabled( Connection conn )
1:6b8ad38:         throws SQLException
1:6b8ad38:     {
1:6b8ad38:         try {
1:6b8ad38:             ResultSet   rs;
1:6b8ad38:         
1:6b8ad38:             // first check to see if NATIVE authentication is on
1:6b8ad38:             rs = conn.prepareStatement( "select count(*) from sys.sysusers" ).executeQuery();
1:6b8ad38:             rs.next();
1:6b8ad38:             try {
1:6b8ad38:                 if ( rs.getInt( 1 ) > 0 ) { return true; }
1:6b8ad38:             }
1:6b8ad38:             finally { rs.close(); }
1:6b8ad38:         }
1:6b8ad38:         catch (SQLException se)
1:6b8ad38:         {
1:6b8ad38:             if ( SQLState.DBO_ONLY.equals( se.getSQLState() ) ) { return true; }
1:6b8ad38:         }
1:6b8ad38:         
1:6b8ad38:         ResultSet   rs = conn.prepareStatement
1:6b8ad38:             (
1:6b8ad38:              "values syscs_util.syscs_get_database_property( 'derby.database.sqlAuthorization' )"
1:6b8ad38:              ).executeQuery();
1:6b8ad38: 
1:6b8ad38:         try {
1:6b8ad38:             if ( !( rs.next() ) ) { return false; }
1:6b8ad38: 
1:6b8ad38:             return ( "true".equals( rs.getString( 1 ) ) );
1:6b8ad38:         }
1:6b8ad38:         finally { rs.close(); }
1:6b8ad38:     }
1:6b8ad38:     
1:6b8ad38:     /**
1:6b8ad38:      * <p>
1:6b8ad38:      * Raise an exception if SQL authorization is enabled and the current user
1:6b8ad38:      * isn't the DBO or the owner of the indicated schema or if the indicated schema
1:6b8ad38:      * doesn't exist.
1:6b8ad38:      * </p>
1:6b8ad38:      */
1:6b8ad38:     public static  void    mustBeOwner( Connection conn, String schema )
1:6b8ad38:         throws SQLException
1:6b8ad38:     {
1:6b8ad38:         if ( !sqlAuthorizationEnabled( conn ) ) { return; }
1:6b8ad38: 
1:6b8ad38:         String  dbo = getOwner( conn, "SYS" );
1:6b8ad38:         String  schemaOwner = getOwner( conn, schema );
1:6b8ad38:         String  currentUser = getCurrentUser( conn );
1:6b8ad38: 
1:6b8ad38:         if (
1:6b8ad38:             (schemaOwner != null) &&
1:6b8ad38:             (
1:6b8ad38:              schemaOwner.equals( currentUser ) ||
1:6b8ad38:              dbo.equals( currentUser )
1:6b8ad38:              )
1:6b8ad38:             )   { return; }
1:6b8ad38:         else
1:6b8ad38:         {
1:6b8ad38:             throw newSQLException( SQLState.LUCENE_MUST_OWN_SCHEMA );
1:6b8ad38:         }
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * <p>
1:6b8ad38:      * Raise an exception if SQL authorization is enabled and the current user
1:6b8ad38:      * isn't the DBO.
1:6b8ad38:      * </p>
1:6b8ad38:      */
1:6b8ad38:     public static  void    mustBeDBO( Connection conn )
1:6b8ad38:         throws SQLException
1:6b8ad38:     {
1:6b8ad38:         if ( !sqlAuthorizationEnabled( conn ) ) { return; }
1:6b8ad38: 
1:6b8ad38:         String  dbo = getOwner( conn, "SYS" );
1:6b8ad38:         String  currentUser = getCurrentUser( conn );
1:6b8ad38: 
1:6b8ad38:         if ( dbo.equals( currentUser ) )   { return; }
1:6b8ad38:         else
1:6b8ad38:         {
1:6b8ad38:             throw newSQLException( SQLState.DBO_ONLY );
1:6b8ad38:         }
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /** Get the current user */
1:6b8ad38:     public static  String  getCurrentUser( Connection conn )
1:6b8ad38:         throws SQLException
1:6b8ad38:     {
1:6b8ad38:         ResultSet   rs = conn.prepareStatement( "values current_user" ).executeQuery();
1:6b8ad38:         try {
1:6b8ad38:             rs.next();
1:6b8ad38:             return rs.getString( 1 );
1:6b8ad38:         } finally { rs.close(); }
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * <p>
1:6b8ad38:      * Get the owner of the indicated schema. Returns null if the schema doesn't exist.
1:6b8ad38:      * </p>
1:6b8ad38:      */
1:6b8ad38:     public static  String  getOwner( Connection conn, String schema )
1:6b8ad38:         throws SQLException
1:6b8ad38:     {
1:6b8ad38:         PreparedStatement   ps = conn.prepareStatement
1:6b8ad38:             ( "select authorizationID from sys.sysschemas where schemaName = ?" );
1:6b8ad38:         ps.setString( 1, derbyIdentifier( schema ) );
1:6b8ad38: 
1:6b8ad38:         ResultSet   rs = ps.executeQuery();
1:6b8ad38:         try {
1:6b8ad38:             if ( rs.next() ) { return rs.getString( 1 ); }
1:6b8ad38:             else { return null; }
1:6b8ad38:         } finally { rs.close(); }
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /** Make a SQLException from a SQLState and optional args */
1:6b8ad38:     public  static  SQLException    newSQLException( String sqlState, Object... args )
1:6b8ad38:     {
1:6b8ad38:         StandardException   se = StandardException.newException( sqlState, args );
1:6b8ad38:         return sqlException( se );
1:6b8ad38:     }
1:6b8ad38:     
1:6b8ad38:     /** Convert a raw string into a properly cased and escaped Derby identifier */
1:6b8ad38:     public static  String  derbyIdentifier( String rawString )
1:6b8ad38:         throws SQLException
1:6b8ad38:     {
1:6b8ad38:         try {
1:6b8ad38:             return IdUtil.parseSQLIdentifier( rawString );
1:6b8ad38:         }
1:6b8ad38:         catch (StandardException se)  { throw ToolUtilities.sqlException( se ); }
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     //  ERROR HANDLING
1:6b8ad38:     //
1:6b8ad38:     /////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     /** Turn a StandardException into a SQLException */
1:6b8ad38:     public  static  SQLException    sqlException( StandardException se )
1:6b8ad38:     {
1:6b8ad38:         return PublicAPI.wrapStandardException( se );
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /** Wrap an external exception */
1:6b8ad38:     public  static  SQLException    wrap( Throwable t )
1:6b8ad38:     {
1:6b8ad38:         return sqlException( StandardException.plainWrapException( t ) );
1:6b8ad38:     }
1:6b8ad38:     
1:6b8ad38: }
1:6b8ad38: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Class org.apache.derby.optional.utils.ToolUtilities
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.optional.utils;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.error.PublicAPI;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: /**
1:  * Utility functions shared across the optional tools.
1:  * 
1:  */
1: public class ToolUtilities
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	ENTRY POINTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns true if SQL authorization is enabled in the connected database.
1:      */
1:     public  static  boolean sqlAuthorizationEnabled( Connection conn )
1:         throws SQLException
1:     {
1:         try {
1:             ResultSet   rs;
1:         
1:             // first check to see if NATIVE authentication is on
1:             rs = conn.prepareStatement( "select count(*) from sys.sysusers" ).executeQuery();
1:             rs.next();
1:             try {
1:                 if ( rs.getInt( 1 ) > 0 ) { return true; }
1:             }
1:             finally { rs.close(); }
1:         }
1:         catch (SQLException se)
1:         {
1:             if ( SQLState.DBO_ONLY.equals( se.getSQLState() ) ) { return true; }
1:         }
1:         
1:         ResultSet   rs = conn.prepareStatement
1:             (
1:              "values syscs_util.syscs_get_database_property( 'derby.database.sqlAuthorization' )"
1:              ).executeQuery();
1: 
1:         try {
1:             if ( !( rs.next() ) ) { return false; }
1: 
1:             return ( "true".equals( rs.getString( 1 ) ) );
1:         }
1:         finally { rs.close(); }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Raise an exception if SQL authorization is enabled and the current user
1:      * isn't the DBO or the owner of the indicated schema or if the indicated schema
1:      * doesn't exist.
1:      * </p>
1:      */
1:     public static  void    mustBeOwner( Connection conn, String schema )
1:         throws SQLException
1:     {
1:         if ( !sqlAuthorizationEnabled( conn ) ) { return; }
1: 
1:         String  dbo = getOwner( conn, "SYS" );
1:         String  schemaOwner = getOwner( conn, schema );
1:         String  currentUser = getCurrentUser( conn );
1: 
1:         if (
1:             (schemaOwner != null) &&
1:             (
1:              schemaOwner.equals( currentUser ) ||
1:              dbo.equals( currentUser )
1:              )
1:             )   { return; }
1:         else
1:         {
1:             throw newSQLException( SQLState.LUCENE_MUST_OWN_SCHEMA );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Raise an exception if SQL authorization is enabled and the current user
1:      * isn't the DBO.
1:      * </p>
1:      */
1:     public static  void    mustBeDBO( Connection conn )
1:         throws SQLException
1:     {
1:         if ( !sqlAuthorizationEnabled( conn ) ) { return; }
1: 
1:         String  dbo = getOwner( conn, "SYS" );
1:         String  currentUser = getCurrentUser( conn );
1: 
1:         if ( dbo.equals( currentUser ) )   { return; }
1:         else
1:         {
1:             throw newSQLException( SQLState.DBO_ONLY );
1:         }
1:     }
1: 
1:     /** Get the current user */
1:     public static  String  getCurrentUser( Connection conn )
1:         throws SQLException
1:     {
1:         ResultSet   rs = conn.prepareStatement( "values current_user" ).executeQuery();
1:         try {
1:             rs.next();
1:             return rs.getString( 1 );
1:         } finally { rs.close(); }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the owner of the indicated schema. Returns null if the schema doesn't exist.
1:      * </p>
1:      */
1:     public static  String  getOwner( Connection conn, String schema )
1:         throws SQLException
1:     {
1:         PreparedStatement   ps = conn.prepareStatement
1:             ( "select authorizationID from sys.sysschemas where schemaName = ?" );
1:         ps.setString( 1, derbyIdentifier( schema ) );
1: 
1:         ResultSet   rs = ps.executeQuery();
1:         try {
1:             if ( rs.next() ) { return rs.getString( 1 ); }
1:             else { return null; }
1:         } finally { rs.close(); }
1:     }
1: 
1:     /** Make a SQLException from a SQLState and optional args */
1:     public  static  SQLException    newSQLException( String sqlState, Object... args )
1:     {
1:         StandardException   se = StandardException.newException( sqlState, args );
1:         return sqlException( se );
1:     }
1:     
1:     /** Convert a raw string into a properly cased and escaped Derby identifier */
1:     public static  String  derbyIdentifier( String rawString )
1:         throws SQLException
1:     {
1:         try {
1:             return IdUtil.parseSQLIdentifier( rawString );
1:         }
1:         catch (StandardException se)  { throw ToolUtilities.sqlException( se ); }
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  ERROR HANDLING
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Turn a StandardException into a SQLException */
1:     public  static  SQLException    sqlException( StandardException se )
1:     {
1:         return PublicAPI.wrapStandardException( se );
1:     }
1: 
1:     /** Wrap an external exception */
1:     public  static  SQLException    wrap( Throwable t )
1:     {
1:         return sqlException( StandardException.plainWrapException( t ) );
1:     }
1:     
1: }
1: 
============================================================================