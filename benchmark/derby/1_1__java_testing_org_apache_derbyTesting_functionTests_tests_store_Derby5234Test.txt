1:74e2f88: /*
1:74e2f88:   Class org.apache.derbyTesting.functionTests.tests.store.Derby5234Test
6:74e2f88: 
1:74e2f88:   Licensed to the Apache Software Foundation (ASF) under one or more
1:74e2f88:   contributor license agreements.  See the NOTICE file distributed with
1:74e2f88:   this work for additional information regarding copyright ownership.
1:74e2f88:   The ASF licenses this file to you under the Apache License, Version 2.0
1:74e2f88:   (the "License"); you may not use this file except in compliance with
1:74e2f88:   the License.  You may obtain a copy of the License at
1:74e2f88: 
1:74e2f88:   http://www.apache.org/licenses/LICENSE-2.0
1:74e2f88: 
1:74e2f88:   Unless required by applicable law or agreed to in writing, software
1:74e2f88:   distributed under the License is distributed on an "AS IS" BASIS,
1:74e2f88:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74e2f88:   See the License for the specific language governing permissions and
1:74e2f88:   limitations under the License.
1:74e2f88: 
3:74e2f88: */
1:74e2f88: 
1:74e2f88: package org.apache.derbyTesting.functionTests.tests.store;
1:74e2f88: 
1:74e2f88: import java.sql.Connection;
1:74e2f88: import java.sql.PreparedStatement;
1:74e2f88: import java.sql.SQLException;
1:74e2f88: 
1:74e2f88: import junit.framework.Test;
1:74e2f88: 
1:74e2f88: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:74e2f88: import org.apache.derbyTesting.junit.TestConfiguration;
1:74e2f88: 
3:74e2f88: /**
1:74e2f88:  * Regression test for DERBY-5234.
1:74e2f88:  */
1:74e2f88: public class Derby5234Test extends BaseJDBCTestCase
3:74e2f88: {
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88:     //
1:74e2f88:     // CONSTANTS
1:74e2f88:     //
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88: 
1:74e2f88:     // this number of rows will force Derby to grab a second allocation page for the table
1:74e2f88:     private static  final   long    ITERATIONS = 12500;
1:74e2f88: 
1:355ebf6:     // highest row count which does NOT trip the bug
1:355ebf6:     private static  final   long    MAX_KEY_PER_FIRST_EXTENT = 10217L;
1:355ebf6: 
1:74e2f88:     private static  final   int     VARCHAR_LENGTH = 2000;
1:74e2f88:     private static  final   String  SEED = "0123456789";
1:74e2f88: 
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88:     //
1:74e2f88:     // STATE
1:74e2f88:     //
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88: 
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88:     //
1:74e2f88:     // CONSTRUCTOR
1:74e2f88:     //
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88: 
1:74e2f88:     public Derby5234Test(String name)
1:74e2f88:     {
1:74e2f88:         super(name);
3:74e2f88:     }
1:74e2f88: 
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88:     //
1:74e2f88:     // JUnit BEHAVIOR
1:74e2f88:     //
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88: 
1:74e2f88:     /** Create a suite of tests. */
1:74e2f88:     public static Test suite()
1:74e2f88:     {
1:74e2f88:         return TestConfiguration.defaultSuite( Derby5234Test.class );
1:74e2f88:     }
1:74e2f88: 
1:355ebf6:     // do this for each test case
1:355ebf6:     protected void setUp() throws Exception
1:355ebf6:     {
1:355ebf6:         super.setUp();
1:355ebf6:         
1:355ebf6:         goodStatement
1:355ebf6:             (
1:355ebf6:              getConnection(),
1:355ebf6:              "create table t5234( a bigint, b varchar( " + VARCHAR_LENGTH + " ) )"
1:355ebf6:              );
1:355ebf6:     }
1:355ebf6:     protected void tearDown() throws Exception
1:355ebf6:     {
1:355ebf6:         goodStatement
1:355ebf6:             (
1:355ebf6:              getConnection(),
1:355ebf6:              "drop table t5234"
1:355ebf6:              );
1:355ebf6:         
1:355ebf6:         super.tearDown();
1:355ebf6:     }
1:355ebf6:     
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88:     //
1:74e2f88:     // TESTS
1:74e2f88:     //
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88: 
1:74e2f88:     /**
1:74e2f88:      * <p>
1:74e2f88:      * Basic test case for DERBY-5234. Test that the last allocation page
1:74e2f88:      * remembers which pages have been released to the operating system.
1:74e2f88:      * </p>
1:74e2f88:      */
1:74e2f88:     public void test_01_basic() throws Exception
1:74e2f88:     {
1:355ebf6:         vetBasic( ITERATIONS );
1:355ebf6:     }
1:355ebf6:     private void vetBasic( long rowCount ) throws Exception
1:355ebf6:     {
1:74e2f88:         Connection  conn = getConnection();
1:74e2f88: 
1:74e2f88:         // this makes the test run faster
1:74e2f88:         boolean oldAutoCommit = conn.getAutoCommit();
1:74e2f88:         conn.setAutoCommit( false );
1:74e2f88: 
1:355ebf6:         insertRows( conn, rowCount );
1:74e2f88:         deleteRows( conn );
1:74e2f88:         compressTable( conn );
1:74e2f88: 
1:74e2f88:         // the bug would cause the second round of insertions to write
1:74e2f88:         // beyond the end of the file
1:355ebf6:         insertRows( conn, rowCount );
1:74e2f88:         
1:74e2f88:         conn.setAutoCommit( oldAutoCommit );
1:74e2f88:     }
1:74e2f88:     /** Fill the table with enough rows to force Derby to grab a second allocation page */
1:355ebf6:     private void    insertRows( Connection conn, long iterations )
1:74e2f88:         throws Exception
1:74e2f88:     {
1:74e2f88:         PreparedStatement insert = chattyPrepare
2:74e2f88:             (
2:74e2f88:              conn,
1:74e2f88:              "insert into t5234( a, b ) values ( ?, ? )"
2:74e2f88:              );
1:74e2f88:         String          varcharValue = makeVarcharValue();
1:74e2f88: 
1:74e2f88:         long    percent = 0L;
1:355ebf6:         for ( long i = 0; i < iterations; i++)
1:74e2f88:         {
1:355ebf6:             if ( (i * 10) / iterations  > percent)
1:74e2f88:             {
1:74e2f88:                 conn.commit();
1:74e2f88:                 percent++;
1:74e2f88:             }
1:74e2f88: 
1:74e2f88:             insert.setLong( 1, i );
1:74e2f88:             insert.setString( 2, varcharValue );
1:74e2f88:             insert.executeUpdate();
1:74e2f88:         }
1:74e2f88:         
1:74e2f88:         conn.commit();
1:74e2f88:     }
1:74e2f88:     private String    makeVarcharValue()
1:74e2f88:     {
1:74e2f88:         StringBuffer    buffer = new StringBuffer();
1:74e2f88:         int                 count = VARCHAR_LENGTH / SEED.length();
1:74e2f88: 
1:74e2f88:         for ( int i = 0; i < count; i++ ) { buffer.append( SEED ); }
1:74e2f88: 
1:74e2f88:         return buffer.toString();
1:74e2f88:     }
1:74e2f88:     private void deleteRows( Connection conn )
1:74e2f88:         throws Exception
1:74e2f88:     {
2:74e2f88:         goodStatement
1:74e2f88:             (
1:74e2f88:              conn,
1:74e2f88:              "delete from t5234"
1:74e2f88:              );
1:74e2f88:         
1:74e2f88:         conn.commit();
1:74e2f88:     }
1:74e2f88:     private void compressTable( Connection conn )
1:74e2f88:         throws Exception
1:74e2f88:     {
1:74e2f88:         goodStatement
1:74e2f88:             (
1:74e2f88:              conn,
1:74e2f88:              "call syscs_util.syscs_inplace_compress_table( 'APP', 'T5234', 0, 0, 1 )"
1:74e2f88:              );
1:74e2f88: 
1:74e2f88:         conn.commit();
1:74e2f88:     }
1:74e2f88: 
1:355ebf6:     /**
1:355ebf6:      * <p>
1:355ebf6:      * Test with the highest row count which did NOT trip the bug.
1:355ebf6:      * </p>
1:355ebf6:      */
1:355ebf6:     public void test_02_maxOK() throws Exception
1:355ebf6:     {
1:355ebf6:         vetBasic( MAX_KEY_PER_FIRST_EXTENT );
1:355ebf6:     }
1:355ebf6:     
1:355ebf6:     /**
1:355ebf6:      * <p>
1:355ebf6:      * Test with one more than the highest good value.
1:355ebf6:      * </p>
1:355ebf6:      */
1:355ebf6:     public void test_03_triggeringEdge() throws Exception
1:355ebf6:     {
1:355ebf6:         vetBasic( MAX_KEY_PER_FIRST_EXTENT + 1L );
1:355ebf6:     }
1:355ebf6:     
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88:     //
1:74e2f88:     // HELPER METHODS
1:74e2f88:     //
1:74e2f88:     ///////////////////////////////////////////////////////////////////////////////////
1:74e2f88: 
1:74e2f88: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:070d37e
/////////////////////////////////////////////////////////////////////////
commit:355ebf6
/////////////////////////////////////////////////////////////////////////
1:     // highest row count which does NOT trip the bug
1:     private static  final   long    MAX_KEY_PER_FIRST_EXTENT = 10217L;
1: 
/////////////////////////////////////////////////////////////////////////
1:     // do this for each test case
1:     protected void setUp() throws Exception
1:     {
1:         super.setUp();
1:         
1:         goodStatement
1:             (
1:              getConnection(),
1:              "create table t5234( a bigint, b varchar( " + VARCHAR_LENGTH + " ) )"
1:              );
1:     }
1:     protected void tearDown() throws Exception
1:     {
1:         goodStatement
1:             (
1:              getConnection(),
1:              "drop table t5234"
1:              );
1:         
1:         super.tearDown();
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         vetBasic( ITERATIONS );
1:     }
1:     private void vetBasic( long rowCount ) throws Exception
1:     {
1:         insertRows( conn, rowCount );
1:         insertRows( conn, rowCount );
1:     private void    insertRows( Connection conn, long iterations )
/////////////////////////////////////////////////////////////////////////
1:         for ( long i = 0; i < iterations; i++)
1:             if ( (i * 10) / iterations  > percent)
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test with the highest row count which did NOT trip the bug.
1:      * </p>
1:      */
1:     public void test_02_maxOK() throws Exception
1:     {
1:         vetBasic( MAX_KEY_PER_FIRST_EXTENT );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Test with one more than the highest good value.
1:      * </p>
1:      */
1:     public void test_03_triggeringEdge() throws Exception
1:     {
1:         vetBasic( MAX_KEY_PER_FIRST_EXTENT + 1L );
1:     }
1:     
commit:74e2f88
/////////////////////////////////////////////////////////////////////////
1: /*
1:   Class org.apache.derbyTesting.functionTests.tests.store.Derby5234Test
1: 
1:   Licensed to the Apache Software Foundation (ASF) under one or more
1:   contributor license agreements.  See the NOTICE file distributed with
1:   this work for additional information regarding copyright ownership.
1:   The ASF licenses this file to you under the Apache License, Version 2.0
1:   (the "License"); you may not use this file except in compliance with
1:   the License.  You may obtain a copy of the License at
1: 
1:   http://www.apache.org/licenses/LICENSE-2.0
1: 
1:   Unless required by applicable law or agreed to in writing, software
1:   distributed under the License is distributed on an "AS IS" BASIS,
1:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:   See the License for the specific language governing permissions and
1:   limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Regression test for DERBY-5234.
1:  */
1: public class Derby5234Test extends BaseJDBCTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     // this number of rows will force Derby to grab a second allocation page for the table
1:     private static  final   long    ITERATIONS = 12500;
1: 
1:     private static  final   int     VARCHAR_LENGTH = 2000;
1:     private static  final   String  SEED = "0123456789";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public Derby5234Test(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Create a suite of tests. */
1:     public static Test suite()
1:     {
1:         return TestConfiguration.defaultSuite( Derby5234Test.class );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Basic test case for DERBY-5234. Test that the last allocation page
1:      * remembers which pages have been released to the operating system.
1:      * </p>
1:      */
1:     public void test_01_basic() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         goodStatement
1:             (
1:              conn,
0:              "create table t5234( a bigint, b varchar( " + VARCHAR_LENGTH + " ) )"
1:              );
1: 
1:         // this makes the test run faster
1:         boolean oldAutoCommit = conn.getAutoCommit();
1:         conn.setAutoCommit( false );
1: 
0:         insertRows( conn );
1:         deleteRows( conn );
1:         compressTable( conn );
1: 
1:         // the bug would cause the second round of insertions to write
1:         // beyond the end of the file
0:         insertRows( conn );
1:         
1:         conn.setAutoCommit( oldAutoCommit );
1:     }
1:     /** Fill the table with enough rows to force Derby to grab a second allocation page */
0:     private void    insertRows( Connection conn )
1:         throws Exception
1:     {
1:         PreparedStatement insert = chattyPrepare
1:             (
1:              conn,
1:              "insert into t5234( a, b ) values ( ?, ? )"
1:              );
1:         String          varcharValue = makeVarcharValue();
1: 
1:         long    percent = 0L;
0:         for ( long i = 0; i < ITERATIONS; i++)
1:         {
0:             if ( (i * 10) / ITERATIONS  > percent)
1:             {
1:                 conn.commit();
1:                 percent++;
1:             }
1: 
1:             insert.setLong( 1, i );
1:             insert.setString( 2, varcharValue );
1:             insert.executeUpdate();
1:         }
1:         
1:         conn.commit();
1:     }
1:     private String    makeVarcharValue()
1:     {
1:         StringBuffer    buffer = new StringBuffer();
1:         int                 count = VARCHAR_LENGTH / SEED.length();
1: 
1:         for ( int i = 0; i < count; i++ ) { buffer.append( SEED ); }
1: 
1:         return buffer.toString();
1:     }
1:     private void deleteRows( Connection conn )
1:         throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "delete from t5234"
1:              );
1:         
1:         conn.commit();
1:     }
1:     private void compressTable( Connection conn )
1:         throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_inplace_compress_table( 'APP', 'T5234', 0, 0, 1 )"
1:              );
1: 
1:         conn.commit();
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // HELPER METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Run a successful statement.
0:      * @throws SQLException 
1:      */
0:     private void    goodStatement( Connection conn, String command ) throws SQLException
1:     {
0:         PreparedStatement    ps = chattyPrepare( conn, command );
1: 
0:         ps.execute();
0:         ps.close();
1:     }
1:     
1:     /**
0:      * Prepare a statement and report its sql text.
1:      */
0:     private PreparedStatement   chattyPrepare( Connection conn, String text )
0:         throws SQLException
1:     {
0:         println( "Preparing statement:\n\t" + text );
1:         
0:         return conn.prepareStatement( text );
1:     }
1: 
1: }
============================================================================