1:38520af: /*
1:38520af:  * Derby - Class org.apache.derbyTesting.functionTests.util.ExecIjTestCase
1:38520af:  *
1:38520af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:38520af:  * contributor license agreements.  See the NOTICE file distributed with
1:38520af:  * this work for additional information regarding copyright ownership.
1:38520af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:38520af:  * (the "License"); you may not use this file except in compliance with
1:38520af:  * the License.  You may obtain a copy of the License at
1:38520af:  *
1:38520af:  *    http://www.apache.org/licenses/LICENSE-2.0
1:38520af:  *
1:38520af:  * Unless required by applicable law or agreed to in writing, 
1:38520af:  * software distributed under the License is distributed on an 
1:38520af:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:38520af:  * either express or implied. See the License for the specific 
1:38520af:  * language governing permissions and limitations under the License.
1:38520af:  */
3:38520af: 
1:38520af: package org.apache.derbyTesting.functionTests.util;
1:38520af: 
1:38520af: import java.io.File;
1:38520af: import java.io.FileInputStream;
1:38520af: import java.io.FileNotFoundException;
1:38520af: import java.io.OutputStream;
1:38520af: import java.security.AccessController;
1:38520af: import java.security.PrivilegedAction;
1:38520af: 
1:38520af: import org.apache.derby.tools.ij;
1:ce97577: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:ce97577: 
1:38520af: 
1:38520af: /**
1:38520af:  * Run a .sql script via ij's main method and compare with a canon.
1:ce97577:  * 
1:ce97577:  * Tests that extend this class should always wrap their suite with
1:ce97577:  * a SupportFilesSetup so that the extinout directory where ij will
1:ce97577:  * write the test output is created. 
1:38520af:  */
1:38520af: public class IjTestCase extends ScriptTestCase {
1:38520af: 
1:38520af: 	String scriptName;
1:38520af: 	String outfileName;
1:38520af:     File outfile;
1:38520af: 	
1:38520af:     /**
1:38520af:      * Create a script testcase that runs the .sql script with the
1:38520af:      * given name. The name should not include the ".sql" suffix.
1:38520af:      */
1:38520af: 	public IjTestCase(String name) {
1:38520af: 		super(name);
1:38520af: 		scriptName = getName() + ".sql";
1:fedee29: 		outfileName = SupportFilesSetup.EXTINOUT + "/" + getName() + ".out";
1:38520af: 		outfile = new File(outfileName);
2:38520af: 	}
1:38520af: 	
1:70c969f: 	public void setUp() {
1:38520af: 	    super.setUp();
1:38520af: 		setSystemProperty("ij.outfile", outfileName);
1:38520af: 		setSystemProperty("ij.defaultResourcePackage",
1:38520af: 				"/org/apache/derbyTesting/functionTests/tests/"
1:fedee29: 				+ getArea() + "/");
1:38520af: 	}
1:38520af: 	
1:38520af: 	public void tearDown() throws Exception {
1:38520af: 		super.tearDown();
1:38520af: 		removeSystemProperty("ij.outfile");
1:38520af: 		removeSystemProperty("ij.defaultResourcePackage");
1:38520af: 	}
1:38520af: 	
1:38520af: 	/**
1:38520af: 	 * Run a .sql test, calling ij's main method.
1:cb69fa9: 	 * Then, take the output file and read it into our OutputStream
1:38520af: 	 * so that it can be compared via compareCanon().
1:cb69fa9: 	 * TODO:
1:cb69fa9: 	 * Note that the output will include a version number;
1:cb69fa9: 	 * this should get filtered/ignored in compareCanon
1:38520af: 	 */
1:38520af: 	public void runTest() throws Throwable {
1:38520af: 		String [] args = { "-fr", scriptName };
1:38520af: 		ij.main(args);
1:38520af: 		
1:38520af: 		String canon =
1:38520af: 			"org/apache/derbyTesting/functionTests/master/"
1:38520af: 			+ getName() + ".out";
1:38520af: 		
1:38520af: 		final File out = outfile;
1:3f5c48a: 		FileInputStream fis = AccessController.doPrivileged(
1:3f5c48a:                 new PrivilegedAction<FileInputStream>() {
1:3f5c48a: 			public FileInputStream run() {
1:38520af: 				FileInputStream fis = null;
1:38520af: 				try {
1:38520af: 					fis = new FileInputStream(out);
1:38520af: 				} catch (FileNotFoundException e) {
1:38520af: 					fail("Could not open ij output file.");
1:38520af: 				}				
1:38520af: 				return fis;
1:38520af: 			}
2:38520af: 		});
1:38520af: 		OutputStream os = getOutputStream();
1:38520af: 		int b;
1:38520af: 		while ((b = fis.read()) != -1) {
1:38520af: 			os.write(b);
1:38520af: 		}
1:38520af: 		fis.close();
1:3f5c48a: 
1:3f5c48a:         boolean deleted = PrivilegedFileOpsForTests.delete(outfile);
1:38520af: 		
1:3f5c48a: 		if (!deleted) {
1:38520af: 			println("Could not delete outfile for " + scriptName);
1:3f5c48a:         }
1:38520af: 		
1:38520af: 		this.compareCanon(canon);
1:38520af: 	}
1:38520af: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: 		FileInputStream fis = AccessController.doPrivileged(
1:                 new PrivilegedAction<FileInputStream>() {
1: 			public FileInputStream run() {
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean deleted = PrivilegedFileOpsForTests.delete(outfile);
1: 		if (!deleted) {
1:         }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:70c969f
/////////////////////////////////////////////////////////////////////////
1: 	public void setUp() {
commit:cb69fa9
/////////////////////////////////////////////////////////////////////////
1: 	 * Then, take the output file and read it into our OutputStream
1: 	 * TODO:
1: 	 * Note that the output will include a version number;
1: 	 * this should get filtered/ignored in compareCanon
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:fedee29
/////////////////////////////////////////////////////////////////////////
1: 		outfileName = SupportFilesSetup.EXTINOUT + "/" + getName() + ".out";
/////////////////////////////////////////////////////////////////////////
1: 				+ getArea() + "/");
commit:ce97577
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1:  * 
1:  * Tests that extend this class should always wrap their suite with
1:  * a SupportFilesSetup so that the extinout directory where ij will
1:  * write the test output is created. 
/////////////////////////////////////////////////////////////////////////
0: 		outfileName = SupportFilesSetup.EXTINOUT + File.separator + getName() + ".out";
commit:38520af
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.ExecIjTestCase
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileNotFoundException;
1: import java.io.OutputStream;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.tools.ij;
1: 
1: /**
1:  * Run a .sql script via ij's main method and compare with a canon.
1:  */
1: public class IjTestCase extends ScriptTestCase {
1: 
1: 	String scriptName;
1: 	String outfileName;
1:     File outfile;
1: 	
1:     /**
1:      * Create a script testcase that runs the .sql script with the
1:      * given name. The name should not include the ".sql" suffix.
1:      */
1: 	public IjTestCase(String name) {
1: 		super(name);
1: 		scriptName = getName() + ".sql";
0: 		outfileName = "system" + File.separator + getName() + ".out";
1: 		outfile = new File(outfileName);
1: 	}
1: 	
0: 	public void setUp() throws Exception{
1: 	    super.setUp();
1: 		setSystemProperty("ij.outfile", outfileName);
1: 		setSystemProperty("ij.defaultResourcePackage",
1: 				"/org/apache/derbyTesting/functionTests/tests/"
0: 				+ getArea() + File.separator);
1: 	}
1: 	
1: 	public void tearDown() throws Exception {
1: 		super.tearDown();
1: 		removeSystemProperty("ij.outfile");
1: 		removeSystemProperty("ij.defaultResourcePackage");
1: 	}
1: 	
1: 	/**
1: 	 * Run a .sql test, calling ij's main method.
0: 	 * Then, take the output filre and read it into our OutputStream
1: 	 * so that it can be compared via compareCanon().
1: 	 */
1: 	public void runTest() throws Throwable {
1: 		String [] args = { "-fr", scriptName };
1: 		ij.main(args);
1: 		
1: 		String canon =
1: 			"org/apache/derbyTesting/functionTests/master/"
1: 			+ getName() + ".out";
1: 		
1: 		final File out = outfile;
0: 		FileInputStream fis = (FileInputStream) AccessController.doPrivileged(new PrivilegedAction() {
0: 			public Object run() {
1: 				FileInputStream fis = null;
1: 				try {
1: 					fis = new FileInputStream(out);
1: 				} catch (FileNotFoundException e) {
1: 					fail("Could not open ij output file.");
1: 				}				
1: 				return fis;
1: 			}
1: 		});
1: 		OutputStream os = getOutputStream();
1: 		int b;
1: 		while ((b = fis.read()) != -1) {
1: 			os.write(b);
1: 		}
1: 		fis.close();
1: 		
0: 		Boolean deleted = (Boolean) AccessController.doPrivileged(new PrivilegedAction() {
0: 			public Object run() {
0: 				boolean d = outfile.delete();
1: 				
0: 				return new Boolean(d);
1: 			}
1: 		});
1: 		
0: 		if (!deleted.booleanValue())
1: 			println("Could not delete outfile for " + scriptName);
1: 		
1: 		this.compareCanon(canon);
1: 	}
1: }
============================================================================