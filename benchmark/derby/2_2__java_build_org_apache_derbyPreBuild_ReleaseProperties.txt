1:41205b9: /*
3:41205b9: 
1:41205b9:    Derby - Class org.apache.derbyPreBuild.ReleaseProperties
1:41205b9: 
1:41205b9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:41205b9:    contributor license agreements.  See the NOTICE file distributed with
1:41205b9:    this work for additional information regarding copyright ownership.
1:41205b9:    The ASF licenses this file to You under the Apache License, Version 2.0
1:41205b9:    (the "License"); you may not use this file except in compliance with
1:41205b9:    the License.  You may obtain a copy of the License at
1:41205b9: 
1:41205b9:       http://www.apache.org/licenses/LICENSE-2.0
1:41205b9: 
1:41205b9:    Unless required by applicable law or agreed to in writing, software
1:41205b9:    distributed under the License is distributed on an "AS IS" BASIS,
1:41205b9:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41205b9:    See the License for the specific language governing permissions and
1:41205b9:    limitations under the License.
1:41205b9: 
1:41205b9:  */
1:41205b9: 
1:41205b9: package org.apache.derbyPreBuild;
1:41205b9: 
1:41205b9: import java.io.File;
1:404a2f0: import java.io.FileInputStream;
1:41205b9: import java.io.FileWriter;
1:41205b9: import java.io.IOException;
1:41205b9: import java.io.PrintWriter;
1:41205b9: import java.util.Calendar;
1:404a2f0: import java.util.Properties;
1:41205b9: import java.util.StringTokenizer;
1:41205b9: 
1:41205b9: import org.apache.tools.ant.BuildException;
1:7ed2340: import org.apache.tools.ant.taskdefs.Property;
1:41205b9: import org.apache.tools.ant.Task;
1:41205b9: 
1:41205b9: /**
1:41205b9:  * <p>
1:41205b9:  * This ant task creates the release properties needed to define the release id
1:41205b9:  * when building the Derby distributions. For a description of the Derby release id,
1:41205b9:  * see http://db.apache.org/derby/papers/versionupgrade.html
1:41205b9:  * </p>
1:647bf64:  *
1:647bf64:  * <p>
1:647bf64:  * This task also sets a property for use by downstream targets during
1:647bf64:  * the release-build:
1:647bf64:  * </p>
1:647bf64:  *
1:647bf64:  * <ul>
1:647bf64:  * <li><b>derby.release.id.new</b> - The new id for the branch, in case we were asked to bump the release id.</li>
1:647bf64:  * </ul>
1:41205b9:  */
1:41205b9: 
1:41205b9: public class ReleaseProperties extends Task
1:41205b9: {
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9:     //
1:41205b9:     //  CONSTANTS
1:41205b9:     //
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:93fd82e:     private static final String LS = System.getProperty("line.separator");
1:41205b9:     private static final String APACHE_LICENSE_HEADER =
1:93fd82e:         "# Licensed to the Apache Software Foundation (ASF) under one or more" + LS +
1:93fd82e:         "# contributor license agreements.  See the NOTICE file distributed with" + LS +
1:93fd82e:         "# this work for additional information regarding copyright ownership." + LS +
1:93fd82e:         "# The ASF licenses this file to you under the Apache License, Version 2.0" + LS +
1:93fd82e:         "# (the \"License\"); you may not use this file except in compliance with" + LS +
1:93fd82e:         "# the License.  You may obtain a copy of the License at" + LS +
1:93fd82e:         "#" + LS +
1:93fd82e:         "#     http://www.apache.org/licenses/LICENSE-2.0" + LS +
1:93fd82e:         "#" + LS +
1:93fd82e:         "# Unless required by applicable law or agreed to in writing, software" + LS +
1:93fd82e:         "# distributed under the License is distributed on an \"AS IS\" BASIS," + LS +
1:93fd82e:         "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." + LS +
1:93fd82e:         "# See the License for the specific language governing permissions and" + LS +
1:93fd82e:         "# limitations under the License." + LS + LS;
1:41205b9:     
1:41205b9: 	public final static int	MAINT_ENCODING = 1000000;
1:41205b9:     private final static int MAINT_LENGTH = 7;
1:41205b9: 
1:404a2f0:     private final   static  String  DRDA_MAINT = "drdamaint";
1:404a2f0:     private final   static  int DRDA_MAINT_ID_DEFAULT = 0;
1:404a2f0: 
1:647bf64:     // properties to set on the way out
1:647bf64:     private static final String NEW_RELEASE_ID = "derby.release.id.new";
1:41205b9: 
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9:     //
1:41205b9:     //  STATE
1:41205b9:     //
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9: 
1:41205b9:     // set by caller. Derby release id of the form "N.N.N.N" or "N.N.N.N beta"
1:41205b9:     private String _releaseID;
1:41205b9: 
1:41205b9:     // set by caller. name of file where release properties will be written
1:41205b9:     private String _releasePropertiesFileName;
1:41205b9:     
1:7ed2340:     // set by caller. true if the last digit of the release id should be bumped.
1:7ed2340:     private boolean _bump;
1:7ed2340:     
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9:     //
1:41205b9:     //  CONSTRUCTORS
1:41205b9:     //
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9: 
1:41205b9:    /**
1:41205b9:      * <p>
1:41205b9:      * Let Ant conjure us out of thin air.
1:41205b9:      * </p>
1:41205b9:      */
1:41205b9:     public ReleaseProperties()
1:41205b9:     {}
1:41205b9:     
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9:     //
1:41205b9:     //  Task BEHAVIOR
1:41205b9:     //
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9: 
1:41205b9:         
1:41205b9:     /** <p>Let Ant set the Derby release id, a string of the form N.N.N.N.</p>*/
1:41205b9:     public void setReleaseID( String releaseID ) { _releaseID = releaseID; }
1:41205b9: 
1:41205b9:     /** <p>Let Ant set the output file name.</p>*/
1:41205b9:     public void setReleasePropertiesFileName( String fileName ) { _releasePropertiesFileName = fileName; }
1:41205b9: 
1:7ed2340:     /** <p>Let Ant set our bumping behavior to true or false.</p>*/
1:7ed2340:     public void setBump( String bumpFlag ) { _bump = Boolean.parseBoolean( bumpFlag ); }
1:7ed2340: 
1:41205b9:    /**
1:41205b9:      * <p>
1:7ed2340:      * Create the release properties file from the release id. Sets the
1:7ed2340:      * property derby.release.id.new equal to the resulting release id.
1:41205b9:      * </p>
1:41205b9:      */
1:41205b9:     public  void    execute()
1:41205b9:         throws BuildException
1:41205b9:     {
1:41205b9:         File                 target = new File( _releasePropertiesFileName );
1:41205b9:         FileWriter      propertiesFW = null;
1:41205b9:         PrintWriter    propertiesPW = null;
1:41205b9: 
1:41205b9:         try {
1:404a2f0:             int     drdaMaintID = readDRDAMaintID( target );
1:404a2f0:             System.out.println( "XXX ReleaseProperties. drda maint id = " + drdaMaintID );
1:404a2f0:             
1:41205b9:             VersionID versionID = new VersionID( _releaseID );
1:7ed2340:             if ( _bump ) { versionID.bump(); }
1:7ed2340:             
1:41205b9:             int major = versionID.getMajor();
1:41205b9:             int minor = versionID.getMinor();
1:647bf64:             int currentYear = getCurrentYear();
1:41205b9: 
1:41205b9:             propertiesFW = new FileWriter( target );
1:41205b9:             propertiesPW = new PrintWriter( propertiesFW );
1:41205b9: 
1:41205b9:             propertiesPW.println( APACHE_LICENSE_HEADER );
1:41205b9: 
1:404a2f0:             propertiesPW.println( DRDA_MAINT + "=" + drdaMaintID );
1:41205b9:             propertiesPW.println( "maint=" + encodeFixpackAndPoint( versionID ) );
1:41205b9:             propertiesPW.println( "major=" + major );
1:41205b9:             propertiesPW.println( "minor=" + minor );
1:647bf64:             propertiesPW.println( "eversion=" + versionID.getBranchName() );
1:41205b9:             propertiesPW.println( "beta=" + versionID.isBeta() );
1:647bf64:             propertiesPW.println( "copyright.comment=Copyright 1997, " + currentYear + " The Apache Software Foundation or its licensors, as applicable." );
1:41205b9:             propertiesPW.println( "vendor=The Apache Software Foundation" ) ;
1:647bf64:             propertiesPW.println( "copyright.year=" + currentYear ) ;
1:647bf64:             propertiesPW.println( "release.id.long=" + versionID.toString() ) ;
1:7ed2340: 
1:647bf64:             setProperty( NEW_RELEASE_ID, versionID.toString() );
1:41205b9:         }
1:41205b9:         catch (Exception e)
1:41205b9:         {
1:41205b9:             throw new BuildException( "Could not generate release properties: " + e.getMessage(), e );
1:41205b9:         }
1:41205b9:         finally
1:41205b9:         {
1:41205b9:             try {
1:41205b9:                 finishWriting( propertiesFW, propertiesPW );
1:41205b9:             }
1:41205b9:             catch (Exception ex)
1:41205b9:             {
1:41205b9:                 throw new BuildException( "Error closing file writers.", ex );
1:41205b9:             }
1:41205b9:         }
1:41205b9:     }
1:41205b9:     
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9:     //
1:41205b9:     //  MINIONS
1:41205b9:     //
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9: 
1:41205b9:     /**
1:41205b9:      * <p>
1:41205b9:      * Stuff the third and fourth numbers of a Derby release id into the
1:41205b9:      * encoded format expected by the Derby release machinery.
1:41205b9:      * </p>
1:41205b9:      */
1:41205b9:     private String encodeFixpackAndPoint( VersionID versionID )
1:41205b9:     {
1:41205b9:         int result = ( versionID.getFixpack() * MAINT_ENCODING ) + versionID.getPoint();
1:41205b9: 
1:41205b9:         // the convention is to represent the number as 7 digits even
1:41205b9:         // if the number is 0
1:41205b9:         String retval = Integer.toString( result );
1:41205b9:         int  length = retval.length();
1:41205b9: 
1:41205b9:         int count = MAINT_LENGTH - length;
1:41205b9:         for ( int i = 0; i < count; i++ ) { retval = "0" + retval; }
1:41205b9: 
1:41205b9:         return retval;
1:41205b9:     }
1:41205b9: 
1:41205b9:     /**
1:41205b9:      * <p>
1:41205b9:      * Get the current year as an int.
1:41205b9:      * </p>
1:41205b9:      */
1:41205b9:     private int getCurrentYear()
1:41205b9:     {
1:41205b9:         return Calendar.getInstance().get( Calendar.YEAR );
1:41205b9:     }
1:41205b9:     
1:41205b9:     /**
1:41205b9:      * <p>
1:41205b9:      * Flush and close file writers.
1:41205b9:      * </p>
1:41205b9:      */
1:41205b9:     private void    finishWriting( FileWriter fw, PrintWriter pw )
1:41205b9:         throws IOException
1:41205b9:     {
1:41205b9:         if ( (fw == null) || (pw == null) ) { return; }
1:41205b9:         
1:41205b9:         pw.flush();
1:41205b9:         fw.flush();
1:41205b9: 
1:41205b9:         pw.close();
1:41205b9:         fw.close();
1:41205b9:     }
1:404a2f0: 
1:404a2f0:     /**
1:404a2f0:      * <p>
1:404a2f0:      * Read the DRDA maintenance id from the existing release properties.
1:404a2f0:      * Returns 0 if the release properties file doesn't exist.
1:404a2f0:      * </p>
1:404a2f0:      */
1:404a2f0:     private int readDRDAMaintID( File inputFile )
1:404a2f0:         throws Exception
1:404a2f0:     {
1:404a2f0:         if ( !inputFile.exists() ) { return DRDA_MAINT_ID_DEFAULT; }
1:404a2f0:         
1:404a2f0:         Properties  releaseProperties = new Properties();
1:404a2f0:         releaseProperties.load( new FileInputStream( inputFile ) );
1:404a2f0: 
1:404a2f0:         String  stringValue = releaseProperties.getProperty( DRDA_MAINT );
1:404a2f0: 
1:404a2f0:         return Integer.parseInt( stringValue );
1:404a2f0:     }
1:41205b9:     
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9:     //
1:41205b9:     //  INNER CLASSES
1:41205b9:     //
1:41205b9:     /////////////////////////////////////////////////////////////////////////
1:41205b9: 
1:41205b9:     public static final class VersionID
1:41205b9:     {
1:41205b9:         private int _major;
1:41205b9:         private int _minor;
1:41205b9:         private int _fixpack;
1:41205b9:         private int _point;
1:41205b9:         private boolean _isBeta = false;
1:41205b9: 
1:41205b9:         public VersionID( String text )
1:41205b9:             throws BuildException
1:41205b9:         {
1:41205b9:             StringTokenizer tokenizer = new StringTokenizer( text, ". " );
1:41205b9: 
1:41205b9:             try {
1:41205b9:                 _major = Integer.parseInt( tokenizer.nextToken() );
1:41205b9:                 _minor = Integer.parseInt( tokenizer.nextToken() );
1:41205b9:                 _fixpack = Integer.parseInt( tokenizer.nextToken() );
1:41205b9:                 _point = Integer.parseInt( tokenizer.nextToken() );
1:41205b9: 
1:41205b9:                 if ( tokenizer.hasMoreTokens() )
1:41205b9:                 {
1:41205b9:                     if ( tokenizer.nextToken().trim().toLowerCase().equals( "beta" ) )
1:41205b9:                     { _isBeta = true; }
1:41205b9:                     else { throw new Exception( "Illegal trailing token" ); }
1:41205b9:                 }
1:41205b9:             }
1:41205b9:             catch (Exception e) { throw badID( text ); }
1:41205b9:         }
1:41205b9: 
1:7ed2340:         /** Bump the last digit of the release id */
1:7ed2340:         public void bump() { _point++; }
1:7ed2340: 
1:41205b9:         public int getMajor() { return _major; }
1:41205b9:         public int getMinor() { return _minor; }
1:41205b9:         public int getFixpack() { return _fixpack; }
1:41205b9:         public int getPoint() { return _point; }
1:41205b9:         public boolean isBeta() { return _isBeta; }
1:41205b9: 
1:647bf64:         public String getBranchName() { return Integer.toString( _major ) + '.' + Integer.toString( _minor ); }
1:647bf64: 
1:7ed2340:         public String toString()
1:7ed2340:         {
1:7ed2340:             StringBuffer buffer = new StringBuffer();
1:7ed2340: 
1:7ed2340:             buffer.append( _major ); buffer.append( '.' );
1:7ed2340:             buffer.append( _minor ); buffer.append( '.' );
1:7ed2340:             buffer.append( _fixpack ); buffer.append( '.' );
1:7ed2340:             buffer.append( _point );
1:7ed2340: 
1:7ed2340:             if ( _isBeta ) { buffer.append( " beta" ); }
1:7ed2340: 
1:7ed2340:             return buffer.toString();
1:7ed2340:         }
1:7ed2340: 
1:41205b9:         private BuildException badID( String text )
1:41205b9:         {
1:41205b9:             return new BuildException( "Version id \"" + text + "\" is not a string of the form \"N.N.N.N\" or \"N.N.N.N beta\"" );
1:41205b9:         }
1:41205b9:     }
1:41205b9: 
1:7ed2340:     /**
1:7ed2340:      * <p>
1:7ed2340:      * Set an ant property.
1:7ed2340:      * </p>
1:7ed2340:      */
1:7ed2340:     private void    setProperty( String name, String value )
1:7ed2340:         throws BuildException
1:7ed2340:     {
1:7ed2340:         Property    property = new Property();
1:7ed2340: 
1:7ed2340:         property.setName( name );
1:7ed2340:         property.setValue( value );
1:7ed2340: 
1:7ed2340:         property.setProject( getProject() );
1:7ed2340:         property.execute();
1:7ed2340:     }
1:7ed2340: 
1:41205b9: }
1:41205b9: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:404a2f0
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:     private final   static  String  DRDA_MAINT = "drdamaint";
1:     private final   static  int DRDA_MAINT_ID_DEFAULT = 0;
1: 
/////////////////////////////////////////////////////////////////////////
1:             int     drdaMaintID = readDRDAMaintID( target );
1:             System.out.println( "XXX ReleaseProperties. drda maint id = " + drdaMaintID );
1:             
/////////////////////////////////////////////////////////////////////////
1:             propertiesPW.println( DRDA_MAINT + "=" + drdaMaintID );
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Read the DRDA maintenance id from the existing release properties.
1:      * Returns 0 if the release properties file doesn't exist.
1:      * </p>
1:      */
1:     private int readDRDAMaintID( File inputFile )
1:         throws Exception
1:     {
1:         if ( !inputFile.exists() ) { return DRDA_MAINT_ID_DEFAULT; }
1:         
1:         Properties  releaseProperties = new Properties();
1:         releaseProperties.load( new FileInputStream( inputFile ) );
1: 
1:         String  stringValue = releaseProperties.getProperty( DRDA_MAINT );
1: 
1:         return Integer.parseInt( stringValue );
1:     }
commit:647bf64
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * <p>
1:  * This task also sets a property for use by downstream targets during
1:  * the release-build:
1:  * </p>
1:  *
1:  * <ul>
1:  * <li><b>derby.release.id.new</b> - The new id for the branch, in case we were asked to bump the release id.</li>
1:  * </ul>
/////////////////////////////////////////////////////////////////////////
1:     // properties to set on the way out
1:     private static final String NEW_RELEASE_ID = "derby.release.id.new";
/////////////////////////////////////////////////////////////////////////
1:             int currentYear = getCurrentYear();
/////////////////////////////////////////////////////////////////////////
1:             propertiesPW.println( "eversion=" + versionID.getBranchName() );
1:             propertiesPW.println( "copyright.comment=Copyright 1997, " + currentYear + " The Apache Software Foundation or its licensors, as applicable." );
1:             propertiesPW.println( "copyright.year=" + currentYear ) ;
1:             propertiesPW.println( "release.id.long=" + versionID.toString() ) ;
1:             setProperty( NEW_RELEASE_ID, versionID.toString() );
/////////////////////////////////////////////////////////////////////////
1:         public String getBranchName() { return Integer.toString( _major ) + '.' + Integer.toString( _minor ); }
1: 
commit:7ed2340
/////////////////////////////////////////////////////////////////////////
1: import org.apache.tools.ant.taskdefs.Property;
/////////////////////////////////////////////////////////////////////////
1:     // set by caller. true if the last digit of the release id should be bumped.
1:     private boolean _bump;
1:     
/////////////////////////////////////////////////////////////////////////
1:     /** <p>Let Ant set our bumping behavior to true or false.</p>*/
1:     public void setBump( String bumpFlag ) { _bump = Boolean.parseBoolean( bumpFlag ); }
1: 
1:      * Create the release properties file from the release id. Sets the
1:      * property derby.release.id.new equal to the resulting release id.
/////////////////////////////////////////////////////////////////////////
1:             if ( _bump ) { versionID.bump(); }
1:             
/////////////////////////////////////////////////////////////////////////
1: 
0:             setProperty( "derby.release.id.new", versionID.toString() );
/////////////////////////////////////////////////////////////////////////
1:         /** Bump the last digit of the release id */
1:         public void bump() { _point++; }
1: 
1:         public String toString()
1:         {
1:             StringBuffer buffer = new StringBuffer();
1: 
1:             buffer.append( _major ); buffer.append( '.' );
1:             buffer.append( _minor ); buffer.append( '.' );
1:             buffer.append( _fixpack ); buffer.append( '.' );
1:             buffer.append( _point );
1: 
1:             if ( _isBeta ) { buffer.append( " beta" ); }
1: 
1:             return buffer.toString();
1:         }
1: 
1:     /**
1:      * <p>
1:      * Set an ant property.
1:      * </p>
1:      */
1:     private void    setProperty( String name, String value )
1:         throws BuildException
1:     {
1:         Property    property = new Property();
1: 
1:         property.setName( name );
1:         property.setValue( value );
1: 
1:         property.setProject( getProject() );
1:         property.execute();
1:     }
1: 
commit:41205b9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyPreBuild.ReleaseProperties
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyPreBuild;
1: 
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.Calendar;
1: import java.util.StringTokenizer;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.Task;
1: 
1: /**
1:  * <p>
1:  * This ant task creates the release properties needed to define the release id
1:  * when building the Derby distributions. For a description of the Derby release id,
1:  * see http://db.apache.org/derby/papers/versionupgrade.html
1:  * </p>
1:  */
1: 
1: public class ReleaseProperties extends Task
1: {
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private static final String APACHE_LICENSE_HEADER =
0:         "# Licensed to the Apache Software Foundation (ASF) under one or more\n" +
0:         "# contributor license agreements.  See the NOTICE file distributed with\n" +
0:         "# this work for additional information regarding copyright ownership.\n" +
0:         "# The ASF licenses this file to you under the Apache License, Version 2.0\n" +
0:         "# (the \"License\"); you may not use this file except in compliance with\n" +
0:         "# the License.  You may obtain a copy of the License at\n" +
0:         "#\n" +
0:         "#     http://www.apache.org/licenses/LICENSE-2.0\n" +
0:         "#\n" +
0:         "# Unless required by applicable law or agreed to in writing, software\n" +
0:         "# distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
0:         "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
0:         "# See the License for the specific language governing permissions and\n" +
0:         "# limitations under the License.\n" +
0:         "\n";
1:     
1: 	public final static int	MAINT_ENCODING = 1000000;
1:     private final static int MAINT_LENGTH = 7;
1: 	
1: 
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     // set by caller. Derby release id of the form "N.N.N.N" or "N.N.N.N beta"
1:     private String _releaseID;
1: 
1:     // set by caller. name of file where release properties will be written
1:     private String _releasePropertiesFileName;
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTORS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:    /**
1:      * <p>
1:      * Let Ant conjure us out of thin air.
1:      * </p>
1:      */
1:     public ReleaseProperties()
1:     {}
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  Task BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:         
1:     /** <p>Let Ant set the Derby release id, a string of the form N.N.N.N.</p>*/
1:     public void setReleaseID( String releaseID ) { _releaseID = releaseID; }
1: 
1:     /** <p>Let Ant set the output file name.</p>*/
1:     public void setReleasePropertiesFileName( String fileName ) { _releasePropertiesFileName = fileName; }
1: 
1:    /**
1:      * <p>
0:      * Create the release properties file from the release id.
1:      * </p>
1:      */
1:     public  void    execute()
1:         throws BuildException
1:     {
1:         File                 target = new File( _releasePropertiesFileName );
1:         FileWriter      propertiesFW = null;
1:         PrintWriter    propertiesPW = null;
1: 
1:         try {
1:             VersionID versionID = new VersionID( _releaseID );
1:             int major = versionID.getMajor();
1:             int minor = versionID.getMinor();
1: 
1:             propertiesFW = new FileWriter( target );
1:             propertiesPW = new PrintWriter( propertiesFW );
1: 
1:             propertiesPW.println( APACHE_LICENSE_HEADER );
1: 
0:             propertiesPW.println( "drdamaint=0" );
1:             propertiesPW.println( "maint=" + encodeFixpackAndPoint( versionID ) );
1:             propertiesPW.println( "major=" + major );
1:             propertiesPW.println( "minor=" + minor );
0:             propertiesPW.println( "eversion=" + major + "." + minor );
1:             propertiesPW.println( "beta=" + versionID.isBeta() );
0:             propertiesPW.println( "copyright.comment=Copyright 1997, " + getCurrentYear() + " The Apache Software Foundation or its licensors, as applicable." );
1:             propertiesPW.println( "vendor=The Apache Software Foundation" ) ;
1:         }
1:         catch (Exception e)
1:         {
1:             throw new BuildException( "Could not generate release properties: " + e.getMessage(), e );
1:         }
1:         finally
1:         {
1:             try {
1:                 finishWriting( propertiesFW, propertiesPW );
1:             }
1:             catch (Exception ex)
1:             {
1:                 throw new BuildException( "Error closing file writers.", ex );
1:             }
1:         }
1:     }
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Stuff the third and fourth numbers of a Derby release id into the
1:      * encoded format expected by the Derby release machinery.
1:      * </p>
1:      */
1:     private String encodeFixpackAndPoint( VersionID versionID )
1:     {
1:         int result = ( versionID.getFixpack() * MAINT_ENCODING ) + versionID.getPoint();
1: 
1:         // the convention is to represent the number as 7 digits even
1:         // if the number is 0
1:         String retval = Integer.toString( result );
1:         int  length = retval.length();
1: 
1:         int count = MAINT_LENGTH - length;
1:         for ( int i = 0; i < count; i++ ) { retval = "0" + retval; }
1: 
1:         return retval;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the current year as an int.
1:      * </p>
1:      */
1:     private int getCurrentYear()
1:     {
1:         return Calendar.getInstance().get( Calendar.YEAR );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Flush and close file writers.
1:      * </p>
1:      */
1:     private void    finishWriting( FileWriter fw, PrintWriter pw )
1:         throws IOException
1:     {
1:         if ( (fw == null) || (pw == null) ) { return; }
1:         
1:         pw.flush();
1:         fw.flush();
1: 
1:         pw.close();
1:         fw.close();
1:     }
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  INNER CLASSES
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     public static final class VersionID
1:     {
1:         private int _major;
1:         private int _minor;
1:         private int _fixpack;
1:         private int _point;
1:         private boolean _isBeta = false;
1: 
1:         public VersionID( String text )
1:             throws BuildException
1:         {
1:             StringTokenizer tokenizer = new StringTokenizer( text, ". " );
1: 
1:             try {
1:                 _major = Integer.parseInt( tokenizer.nextToken() );
1:                 _minor = Integer.parseInt( tokenizer.nextToken() );
1:                 _fixpack = Integer.parseInt( tokenizer.nextToken() );
1:                 _point = Integer.parseInt( tokenizer.nextToken() );
1: 
1:                 if ( tokenizer.hasMoreTokens() )
1:                 {
1:                     if ( tokenizer.nextToken().trim().toLowerCase().equals( "beta" ) )
1:                     { _isBeta = true; }
1:                     else { throw new Exception( "Illegal trailing token" ); }
1:                 }
1:             }
1:             catch (Exception e) { throw badID( text ); }
1:         }
1: 
1:         public int getMajor() { return _major; }
1:         public int getMinor() { return _minor; }
1:         public int getFixpack() { return _fixpack; }
1:         public int getPoint() { return _point; }
1:         public boolean isBeta() { return _isBeta; }
1: 
1:         private BuildException badID( String text )
1:         {
1:             return new BuildException( "Version id \"" + text + "\" is not a string of the form \"N.N.N.N\" or \"N.N.N.N beta\"" );
1:         }
1:     }
1: 
1: }
1: 
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:93fd82e
/////////////////////////////////////////////////////////////////////////
1:     private static final String LS = System.getProperty("line.separator");
1:         "# Licensed to the Apache Software Foundation (ASF) under one or more" + LS +
1:         "# contributor license agreements.  See the NOTICE file distributed with" + LS +
1:         "# this work for additional information regarding copyright ownership." + LS +
1:         "# The ASF licenses this file to you under the Apache License, Version 2.0" + LS +
1:         "# (the \"License\"); you may not use this file except in compliance with" + LS +
1:         "# the License.  You may obtain a copy of the License at" + LS +
1:         "#" + LS +
1:         "#     http://www.apache.org/licenses/LICENSE-2.0" + LS +
1:         "#" + LS +
1:         "# Unless required by applicable law or agreed to in writing, software" + LS +
1:         "# distributed under the License is distributed on an \"AS IS\" BASIS," + LS +
1:         "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." + LS +
1:         "# See the License for the specific language governing permissions and" + LS +
1:         "# limitations under the License." + LS + LS;
============================================================================