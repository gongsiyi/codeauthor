1:3e13f59: /*     WwdClientExample.java										 
1:bec02c5:  **  This sample program is described in the Getting Started With Derby Manual
2:3e13f59: 
1:3e13f59:        Licensed to the Apache Software Foundation (ASF) under one
1:3e13f59:            or more contributor license agreements.  See the NOTICE file
1:3e13f59:            distributed with this work for additional information
1:3e13f59:            regarding copyright ownership.  The ASF licenses this file
1:3e13f59:            to you under the Apache License, Version 2.0 (the
1:3e13f59:            "License"); you may not use this file except in compliance
1:3e13f59:            with the License.  You may obtain a copy of the License at
1:3e13f59: 
1:3e13f59:              http://www.apache.org/licenses/LICENSE-2.0
1:3e13f59: 
1:3e13f59:            Unless required by applicable law or agreed to in writing,
1:3e13f59:            software distributed under the License is distributed on an
1:3e13f59:            "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3e13f59:            KIND, either express or implied.  See the License for the
1:3e13f59:            specific language governing permissions and limitations
1:3e13f59:            under the License.    
2:3e13f59: */
1:3e13f59: //   ## INITIALIZATION SECTION ##
1:3e13f59: //  Include the java SQL classes 
1:3e13f59: import java.sql.*;
1:3e13f59: 
1:3e13f59: public class WwdClientExample
1:3e13f59: {
1:3e13f59:     public static void main(String[] args)
1:3e13f59:    {
1:3e13f59:    //   ## DEFINE VARIABLES SECTION ##
1:3e13f59:    // define the driver to use 
1:3e13f59:       String driver = "org.apache.derby.jdbc.ClientDriver";
1:3e13f59:    // the database name  
1:3e13f59:       String dbName="jdbcDemoDB";
1:3e13f59:    // define the Derby connection URL to use 
1:3e13f59:       String connectionURL = "jdbc:derby://localhost:1527/" + dbName + ";create=true";
1:3e13f59: 
1:3e13f59:       Connection conn = null;
1:3e13f59:       Statement s;
1:3e13f59:       PreparedStatement psInsert;
1:3e13f59:       ResultSet myWishes;
1:3e13f59:       String printLine = "  __________________________________________________";
1:3e13f59:       String createString = "CREATE TABLE WISH_LIST  "
1:3e13f59:         +  "(WISH_ID INT NOT NULL GENERATED ALWAYS AS IDENTITY " 
1:3e13f59:         +  "   CONSTRAINT WISH_PK PRIMARY KEY, " 
1:3e13f59:         +  " ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, "
1:3e13f59:         +  " WISH_ITEM VARCHAR(32) NOT NULL) " ;
1:3e13f59:       String answer;
1:3e13f59: 
1:1695a5d:       //   JDBC code sections   
1:3e13f59:       //  Beginning of Primary DB access section
1:3e13f59:       //   ## BOOT DATABASE SECTION ##
1:3e13f59:      try {
1:1695a5d:             // Create (if needed) and connect to the database.
1:1695a5d:             // The driver is loaded automatically.
1:3e13f59:             conn = DriverManager.getConnection(connectionURL);		 
1:3e13f59:             System.out.println("Connected to database " + dbName);
1:3e13f59:             
1:3e13f59:             //   ## INITIAL SQL SECTION ## 
1:3e13f59:             //   Create a statement to issue simple commands.  
1:3e13f59:             s = conn.createStatement();
1:3e13f59:              // Call utility method to check if table exists.
1:3e13f59:              //      Create the table if needed
1:3e13f59:              if (! WwdUtils.wwdChk4Table(conn))
1:3e13f59:              {  
1:3e13f59:                   System.out.println (" . . . . creating table WISH_LIST");
1:3e13f59:                   s.execute(createString);
4:3e13f59:               }
1:3e13f59:              //  Prepare the insert statement to use 
1:3e13f59:             psInsert = conn.prepareStatement("insert into WISH_LIST(WISH_ITEM) values (?)");
1:3e13f59: 
1:3e13f59:             //   ## ADD / DISPLAY RECORD SECTION ## 
1:3e13f59:             //  The Add-Record Loop - continues until 'exit' is entered 
1:3e13f59:             do {
1:3e13f59:                 // Call utility method to ask user for input 
1:3e13f59:                 answer = WwdUtils.getWishItem();
1:3e13f59:                 // Check if it is time to EXIT, if not insert the data   
1:3e13f59:                 if (! answer.equals("exit"))
1:3e13f59:                 {
1:3e13f59:                     //Insert the text entered into the WISH_ITEM table
1:3e13f59:                     psInsert.setString(1,answer);
1:3e13f59:                     psInsert.executeUpdate();  
1:3e13f59: 
1:3e13f59:                     //   Select all records in the WISH_LIST table
1:3e13f59:                     myWishes = s.executeQuery("select ENTRY_DATE, WISH_ITEM from WISH_LIST order by ENTRY_DATE");
1:3e13f59: 
1:3e13f59:                     //  Loop through the ResultSet and print the data 
1:3e13f59:                     System.out.println(printLine);
1:3e13f59:                     while (myWishes.next())
1:3e13f59:                      {
1:3e13f59:                            System.out.println("On " + myWishes.getTimestamp(1) + " I wished for " + myWishes.getString(2));
1:3e13f59:                       }
1:3e13f59:                       System.out.println(printLine);
1:3e13f59:                       //  Close the resultSet 
1:3e13f59:                       myWishes.close();
1:3e13f59:                  }       //  END of IF block   
1:3e13f59:              // Check if it is time to EXIT, if so end the loop  
1:3e13f59:               } while (! answer.equals("exit")) ;  // End of do-while loop 
1:3e13f59: 
1:3e13f59:              // Release the resources (clean up )
1:3e13f59:              psInsert.close();
1:3e13f59:              s.close();
1:3e13f59:             conn.close();						
1:3e13f59:             System.out.println("Closed connection");
1:3e13f59: 
1:3e13f59:             //   ## DATABASE SHUTDOWN SECTION ## 
1:3e13f59:             /*** In embedded mode, an application should shut down Derby.
1:3e13f59:                Shutdown throws the XJ015 exception to confirm success. ***/			
1:3e13f59:             if (driver.equals("org.apache.derby.jdbc.EmbeddedDriver")) {
1:3e13f59:                boolean gotSQLExc = false;
1:3e13f59:                try {
1:3e13f59:                   DriverManager.getConnection("jdbc:derby:;shutdown=true");
1:3e13f59:                } catch (SQLException se)  {	
1:3e13f59:                   if ( se.getSQLState().equals("XJ015") ) {		
1:3e13f59:                      gotSQLExc = true;
1:3e13f59:                   }
1:3e13f59:                }
1:3e13f59:                if (!gotSQLExc) {
1:3e13f59:                	  System.out.println("Database did not shut down normally");
1:3e13f59:                }  else  {
1:3e13f59:                   System.out.println("Database shut down normally");	
1:3e13f59:                }  
1:3e13f59:             }
1:3e13f59:             
1:0567766:          //  Beginning of the primary catch block: prints stack trace
1:3e13f59:          }  catch (Throwable e)  {   
1:3e13f59:             /*       Catch all exceptions and pass them to 
1:0567766:              *       the Throwable.printStackTrace method  */
1:3e13f59:             System.out.println(" . . . exception thrown:");
1:0567766:             e.printStackTrace(System.out);
1:3e13f59:          }
1:bec02c5:          System.out.println("Getting Started With Derby JDBC program ending.");
1:3e13f59:       }
1:3e13f59: }
============================================================================
author:Camilla Haase
-------------------------------------------------------------------------------
commit:0567766
/////////////////////////////////////////////////////////////////////////
1:          //  Beginning of the primary catch block: prints stack trace
1:              *       the Throwable.printStackTrace method  */
1:             e.printStackTrace(System.out);
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
1:       //   JDBC code sections   
1:             // Create (if needed) and connect to the database.
1:             // The driver is loaded automatically.
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:bec02c5
/////////////////////////////////////////////////////////////////////////
1:  **  This sample program is described in the Getting Started With Derby Manual
/////////////////////////////////////////////////////////////////////////
1:          System.out.println("Getting Started With Derby JDBC program ending.");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3e13f59
/////////////////////////////////////////////////////////////////////////
1: /*     WwdClientExample.java										 
0:  **  This sample program is described in the document Working With Derby
1: 
1:        Licensed to the Apache Software Foundation (ASF) under one
1:            or more contributor license agreements.  See the NOTICE file
1:            distributed with this work for additional information
1:            regarding copyright ownership.  The ASF licenses this file
1:            to you under the Apache License, Version 2.0 (the
1:            "License"); you may not use this file except in compliance
1:            with the License.  You may obtain a copy of the License at
1: 
1:              http://www.apache.org/licenses/LICENSE-2.0
1: 
1:            Unless required by applicable law or agreed to in writing,
1:            software distributed under the License is distributed on an
1:            "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:            KIND, either express or implied.  See the License for the
1:            specific language governing permissions and limitations
1:            under the License.    
1: */
1: //   ## INITIALIZATION SECTION ##
1: //  Include the java SQL classes 
1: import java.sql.*;
1: 
1: public class WwdClientExample
1: {
1:     public static void main(String[] args)
1:    {
1:    //   ## DEFINE VARIABLES SECTION ##
1:    // define the driver to use 
1:       String driver = "org.apache.derby.jdbc.ClientDriver";
1:    // the database name  
1:       String dbName="jdbcDemoDB";
1:    // define the Derby connection URL to use 
1:       String connectionURL = "jdbc:derby://localhost:1527/" + dbName + ";create=true";
1: 
1:       Connection conn = null;
1:       Statement s;
1:       PreparedStatement psInsert;
1:       ResultSet myWishes;
1:       String printLine = "  __________________________________________________";
1:       String createString = "CREATE TABLE WISH_LIST  "
1:         +  "(WISH_ID INT NOT NULL GENERATED ALWAYS AS IDENTITY " 
1:         +  "   CONSTRAINT WISH_PK PRIMARY KEY, " 
1:         +  " ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, "
1:         +  " WISH_ITEM VARCHAR(32) NOT NULL) " ;
1:       String answer;
1: 
0:       //   Beginning of JDBC code sections   
0:       //   ## LOAD DRIVER SECTION ##
0:       try	        {
0:           /*
0:           **  Load the Derby driver. 
0:           **     When the embedded Driver is used this action start the Derby engine.
0:           **  Catch an error and suggest a CLASSPATH problem
1:            */
0:           Class.forName(driver); 
0:           System.out.println(driver + " loaded. ");
0:       } catch(java.lang.ClassNotFoundException e)     {
0:           System.err.print("ClassNotFoundException: ");
0:           System.err.println(e.getMessage());
0:           System.out.println("\n    >>> Please check your CLASSPATH variable   <<<\n");
1:       }
1:       //  Beginning of Primary DB access section
1:       //   ## BOOT DATABASE SECTION ##
1:      try {
0:             // Create (if needed) and connect to the database
1:             conn = DriverManager.getConnection(connectionURL);		 
1:             System.out.println("Connected to database " + dbName);
1:             
1:             //   ## INITIAL SQL SECTION ## 
1:             //   Create a statement to issue simple commands.  
1:             s = conn.createStatement();
1:              // Call utility method to check if table exists.
1:              //      Create the table if needed
1:              if (! WwdUtils.wwdChk4Table(conn))
1:              {  
1:                   System.out.println (" . . . . creating table WISH_LIST");
1:                   s.execute(createString);
1:               }
1:              //  Prepare the insert statement to use 
1:             psInsert = conn.prepareStatement("insert into WISH_LIST(WISH_ITEM) values (?)");
1: 
1:             //   ## ADD / DISPLAY RECORD SECTION ## 
1:             //  The Add-Record Loop - continues until 'exit' is entered 
1:             do {
1:                 // Call utility method to ask user for input 
1:                 answer = WwdUtils.getWishItem();
1:                 // Check if it is time to EXIT, if not insert the data   
1:                 if (! answer.equals("exit"))
1:                 {
1:                     //Insert the text entered into the WISH_ITEM table
1:                     psInsert.setString(1,answer);
1:                     psInsert.executeUpdate();  
1: 
1:                     //   Select all records in the WISH_LIST table
1:                     myWishes = s.executeQuery("select ENTRY_DATE, WISH_ITEM from WISH_LIST order by ENTRY_DATE");
1: 
1:                     //  Loop through the ResultSet and print the data 
1:                     System.out.println(printLine);
1:                     while (myWishes.next())
1:                      {
1:                            System.out.println("On " + myWishes.getTimestamp(1) + " I wished for " + myWishes.getString(2));
1:                       }
1:                       System.out.println(printLine);
1:                       //  Close the resultSet 
1:                       myWishes.close();
1:                  }       //  END of IF block   
1:              // Check if it is time to EXIT, if so end the loop  
1:               } while (! answer.equals("exit")) ;  // End of do-while loop 
1: 
1:              // Release the resources (clean up )
1:              psInsert.close();
1:              s.close();
1:             conn.close();						
1:             System.out.println("Closed connection");
1: 
1:             //   ## DATABASE SHUTDOWN SECTION ## 
1:             /*** In embedded mode, an application should shut down Derby.
1:                Shutdown throws the XJ015 exception to confirm success. ***/			
1:             if (driver.equals("org.apache.derby.jdbc.EmbeddedDriver")) {
1:                boolean gotSQLExc = false;
1:                try {
1:                   DriverManager.getConnection("jdbc:derby:;shutdown=true");
1:                } catch (SQLException se)  {	
1:                   if ( se.getSQLState().equals("XJ015") ) {		
1:                      gotSQLExc = true;
1:                   }
1:                }
1:                if (!gotSQLExc) {
1:                	  System.out.println("Database did not shut down normally");
1:                }  else  {
1:                   System.out.println("Database shut down normally");	
1:                }  
1:             }
1:             
0:          //  Beginning of the primary catch block: uses errorPrint method
1:          }  catch (Throwable e)  {   
1:             /*       Catch all exceptions and pass them to 
0:             **       the exception reporting method             */
1:             System.out.println(" . . . exception thrown:");
0:             errorPrint(e);
1:          }
0:          System.out.println("Working With Derby JDBC program ending.");
1:       }
0:      //   ## DERBY EXCEPTION REPORTING CLASSES  ## 
0:     /***     Exception reporting methods
0:     **      with special handling of SQLExceptions
0:     ***/
0:       static void errorPrint(Throwable e) {
0:          if (e instanceof SQLException) 
0:             SQLExceptionPrint((SQLException)e);
0:          else {
0:             System.out.println("A non SQL error occured.");
0:             e.printStackTrace();
1:          }   
0:       }  // END errorPrint 
1: 
0:     //  Iterates through a stack of SQLExceptions 
0:       static void SQLExceptionPrint(SQLException sqle) {
0:          while (sqle != null) {
0:             System.out.println("\n---SQLException Caught---\n");
0:             System.out.println("SQLState:   " + (sqle).getSQLState());
0:             System.out.println("Severity: " + (sqle).getErrorCode());
0:             System.out.println("Message:  " + (sqle).getMessage()); 
0:             sqle.printStackTrace();  
0:             sqle = sqle.getNextException();
1:          }
0:    }  //  END SQLExceptionPrint   	
1: }
============================================================================