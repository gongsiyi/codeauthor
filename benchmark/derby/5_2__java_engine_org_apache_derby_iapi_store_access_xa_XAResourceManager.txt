1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.xa.XAResourceManager
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access.xa;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import javax.transaction.xa.Xid;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: This interface allows access to commit,prepare,abort global transactions
1:eac0369: as part of a two phase commit protocol.  These interfaces have been chosen
1:eac0369: to be exact implementations required to implement the XAResource interfaces
1:eac0369: as part of the JTA standard extension.
1:eac0369: <P>
1:eac0369: It is expected that the following interfaces are only used during the 
1:eac0369: recovery portion of 2 phase commit, when the transaction manager is
1:eac0369: cleaning up after a runtime crash - it is expected that no current context
1:eac0369: managers exist for the Xid's being operated on.  The "online" two phase commit
1:eac0369: protocol will be implemented by calls directly on a TransactionController.
1:eac0369: <P>
1:eac0369: The XAResource interface is a Java mapping of the industry standard XA resource
1:eac0369: manager interface.  Please refer to: X/Open CAE Specification - Distributed 
1:eac0369: Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300
1:eac0369: or ISBN 1 872630 24 3.
1:eac0369: <P>
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface XAResourceManager
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called to commit the global transaction specified by xid.
1:eac0369:      * <p>
1:eac0369:      * RESOLVE - how do we map to the "right" XAExceptions.
1:eac0369:      * <p>
2:eac0369:      *
1:eac0369:      * @param cm       The ContextManager returned from the find() call.
1:eac0369:      * @param xid      A global transaction identifier.
1:eac0369:      * @param onePhase If true, the resource manager should use a one-phase
1:eac0369:      *                 commit protocol to commit the work done on behalf of 
1:eac0369:      *                 xid.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void commit(
1:eac0369:     ContextManager  cm,
1:eac0369:     Xid             xid,
1:eac0369:     boolean         onePhase)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Find the given Xid in the transaction table.
1:eac0369:      * <p>
1:eac0369:      * This routine is used to find a in-doubt transaction from the list
1:eac0369:      * of Xid's returned from the recover() routine.  
1:eac0369:      * <p>
1:eac0369:      * In the current implementation it is up to the calling routine
1:eac0369:      * to make the returned ContextManager the "current" ContextManager
1:eac0369:      * before calls to commit,abort, or forget.  The caller is responsible
1:eac0369:      * for error handling, ie. calling cleanupOnError() on the correct
1:eac0369:      * ContextManager.
1:eac0369:      * <p>
1:eac0369:      * If the Xid is not in the system, "null" is returned.
1:eac0369:      * RESOLVE - find out from sku if she wants a exception instead?
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param xid      A global transaction identifier.
1:eac0369:      **/
1:eac0369:     public ContextManager find(
1:eac0369:     Xid     xid);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called to remove the given transaction 
1:eac0369:      * from the transaction table/log.
1:eac0369:      * <p>
1:eac0369:      * Used to let the store remove all record from log and transaction
1:eac0369:      * table of the given transaction.  This should only be used to 
1:eac0369:      * clean up heuristically completed transactions, otherwise commit or
1:eac0369:      * abort should be used to act on other transactions.
1:eac0369:      * <p>
1:eac0369:      * If forget() is called on a transaction which has not be heuristically
1:eac0369:      * completed then it will throw an exception:
1:eac0369:      * SQLState.STORE_XA_PROTOCOL_VIOLATION.
1:eac0369:      *
1:eac0369:      * @param cm       The ContextManager returned from the find() call.
1:eac0369:      * @param xid      A global transaction identifier.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public void forget(
1:eac0369:     ContextManager  cm,
1:eac0369:     Xid             xid)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called to obtain a list of prepared transactions.
1:eac0369:      * <p>
1:eac0369:      * This call returns a complete list of global transactions which are 
1:eac0369:      * either prepared or heuristically complete.
1:eac0369:      * <p>
1:eac0369:      * The XAResource interface expects a scan type interface, but our
1:eac0369:      * implementation only returns a complete list of transactions.  So to
1:eac0369:      * simulate the scan the following state is maintained.  If TMSTARTSCAN
1:eac0369:      * is specified the complete list is returned.  If recover is called with
1:eac0369:      * TMNOFLAGS is ever called a 0 length array is returned.  
1:eac0369:      *
1:eac0369: 	 * @return Return a array with 0 or more Xid's which are currently in
1:eac0369:      *         prepared or heuristically completed state.  If an error occurs
1:eac0369:      *         during the operation, an appropriate error is thrown.
1:eac0369:      *
1:eac0369:      * @param flags    combination of the following flags 
1:eac0369:      *                 XAResource.{TMSTARTRSCAN,TMENDRSCAN,TMNOFLAGS}.  
1:eac0369:      *                 TMNOFLAGS must be used when no other flags are used.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public Xid[] recover(int flags)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * rollback the transaction identified by Xid.
1:eac0369:      * <p>
1:eac0369:      * The given transaction is roll'ed back and it's history is not
1:eac0369:      * maintained in the transaction table or long term log.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param cm       The ContextManager returned from the find() call.
1:eac0369:      * @param xid      A global transaction identifier.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void rollback(
1:eac0369:     ContextManager  cm,
1:eac0369:     Xid             xid)
1:eac0369:         throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.xa.XAResourceManager
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.xa
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access.xa;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import javax.transaction.xa.Xid;
1: 
1: /**
1: 
1: This interface allows access to commit,prepare,abort global transactions
1: as part of a two phase commit protocol.  These interfaces have been chosen
1: to be exact implementations required to implement the XAResource interfaces
1: as part of the JTA standard extension.
1: <P>
1: It is expected that the following interfaces are only used during the 
1: recovery portion of 2 phase commit, when the transaction manager is
1: cleaning up after a runtime crash - it is expected that no current context
1: managers exist for the Xid's being operated on.  The "online" two phase commit
1: protocol will be implemented by calls directly on a TransactionController.
1: <P>
1: The XAResource interface is a Java mapping of the industry standard XA resource
1: manager interface.  Please refer to: X/Open CAE Specification - Distributed 
1: Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300
1: or ISBN 1 872630 24 3.
1: <P>
1: 
1: **/
1: 
1: public interface XAResourceManager
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * This method is called to commit the global transaction specified by xid.
1:      * <p>
1:      * RESOLVE - how do we map to the "right" XAExceptions.
1:      * <p>
1:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
1:      * @param cm       The ContextManager returned from the find() call.
1:      * @param xid      A global transaction identifier.
1:      * @param onePhase If true, the resource manager should use a one-phase
1:      *                 commit protocol to commit the work done on behalf of 
1:      *                 xid.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void commit(
1:     ContextManager  cm,
1:     Xid             xid,
1:     boolean         onePhase)
1: 		throws StandardException;
1: 
1:     /**
1:      * Find the given Xid in the transaction table.
1:      * <p>
1:      * This routine is used to find a in-doubt transaction from the list
1:      * of Xid's returned from the recover() routine.  
1:      * <p>
1:      * In the current implementation it is up to the calling routine
1:      * to make the returned ContextManager the "current" ContextManager
1:      * before calls to commit,abort, or forget.  The caller is responsible
1:      * for error handling, ie. calling cleanupOnError() on the correct
1:      * ContextManager.
1:      * <p>
1:      * If the Xid is not in the system, "null" is returned.
1:      * RESOLVE - find out from sku if she wants a exception instead?
1:      * <p>
1:      *
1:      * @param xid      A global transaction identifier.
1:      **/
1:     public ContextManager find(
1:     Xid     xid);
1: 
1:     /**
1:      * This method is called to remove the given transaction 
1:      * from the transaction table/log.
1:      * <p>
1:      * Used to let the store remove all record from log and transaction
1:      * table of the given transaction.  This should only be used to 
1:      * clean up heuristically completed transactions, otherwise commit or
1:      * abort should be used to act on other transactions.
1:      * <p>
1:      * If forget() is called on a transaction which has not be heuristically
1:      * completed then it will throw an exception:
1:      * SQLState.STORE_XA_PROTOCOL_VIOLATION.
1:      *
1:      * @param cm       The ContextManager returned from the find() call.
1:      * @param xid      A global transaction identifier.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      *
1:      **/
1:     public void forget(
1:     ContextManager  cm,
1:     Xid             xid)
1: 		throws StandardException;
1: 
1:     /**
1:      * This method is called to obtain a list of prepared transactions.
1:      * <p>
1:      * This call returns a complete list of global transactions which are 
1:      * either prepared or heuristically complete.
1:      * <p>
1:      * The XAResource interface expects a scan type interface, but our
1:      * implementation only returns a complete list of transactions.  So to
1:      * simulate the scan the following state is maintained.  If TMSTARTSCAN
1:      * is specified the complete list is returned.  If recover is called with
1:      * TMNOFLAGS is ever called a 0 length array is returned.  
1:      *
1: 	 * @return Return a array with 0 or more Xid's which are currently in
1:      *         prepared or heuristically completed state.  If an error occurs
1:      *         during the operation, an appropriate error is thrown.
1:      *
1:      * @param flags    combination of the following flags 
1:      *                 XAResource.{TMSTARTRSCAN,TMENDRSCAN,TMNOFLAGS}.  
1:      *                 TMNOFLAGS must be used when no other flags are used.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public Xid[] recover(int flags)
1:         throws StandardException;
1: 
1:     /**
1:      * rollback the transaction identified by Xid.
1:      * <p>
1:      * The given transaction is roll'ed back and it's history is not
1:      * maintained in the transaction table or long term log.
1:      * <p>
1:      *
1:      * @param cm       The ContextManager returned from the find() call.
1:      * @param xid      A global transaction identifier.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void rollback(
1:     ContextManager  cm,
1:     Xid             xid)
1:         throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.xa
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access.xa;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import javax.transaction.xa.Xid;
0: 
0: /**
0: 
0: This interface allows access to commit,prepare,abort global transactions
0: as part of a two phase commit protocol.  These interfaces have been chosen
0: to be exact implementations required to implement the XAResource interfaces
0: as part of the JTA standard extension.
0: <P>
0: It is expected that the following interfaces are only used during the 
0: recovery portion of 2 phase commit, when the transaction manager is
0: cleaning up after a runtime crash - it is expected that no current context
0: managers exist for the Xid's being operated on.  The "online" two phase commit
0: protocol will be implemented by calls directly on a TransactionController.
0: <P>
0: The XAResource interface is a Java mapping of the industry standard XA resource
0: manager interface.  Please refer to: X/Open CAE Specification - Distributed 
0: Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300
0: or ISBN 1 872630 24 3.
0: <P>
0: 
0: **/
0: 
0: public interface XAResourceManager
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * This method is called to commit the global transaction specified by xid.
0:      * <p>
0:      * RESOLVE - how do we map to the "right" XAExceptions.
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0:      * @param cm       The ContextManager returned from the find() call.
0:      * @param xid      A global transaction identifier.
0:      * @param onePhase If true, the resource manager should use a one-phase
0:      *                 commit protocol to commit the work done on behalf of 
0:      *                 xid.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void commit(
0:     ContextManager  cm,
0:     Xid             xid,
0:     boolean         onePhase)
0: 		throws StandardException;
0: 
0:     /**
0:      * Find the given Xid in the transaction table.
0:      * <p>
0:      * This routine is used to find a in-doubt transaction from the list
0:      * of Xid's returned from the recover() routine.  
0:      * <p>
0:      * In the current implementation it is up to the calling routine
0:      * to make the returned ContextManager the "current" ContextManager
0:      * before calls to commit,abort, or forget.  The caller is responsible
0:      * for error handling, ie. calling cleanupOnError() on the correct
0:      * ContextManager.
0:      * <p>
0:      * If the Xid is not in the system, "null" is returned.
0:      * RESOLVE - find out from sku if she wants a exception instead?
0:      * <p>
0:      *
0:      * @param xid      A global transaction identifier.
0:      **/
0:     public ContextManager find(
0:     Xid     xid);
0: 
0:     /**
0:      * This method is called to remove the given transaction 
0:      * from the transaction table/log.
0:      * <p>
0:      * Used to let the store remove all record from log and transaction
0:      * table of the given transaction.  This should only be used to 
0:      * clean up heuristically completed transactions, otherwise commit or
0:      * abort should be used to act on other transactions.
0:      * <p>
0:      * If forget() is called on a transaction which has not be heuristically
0:      * completed then it will throw an exception:
0:      * SQLState.STORE_XA_PROTOCOL_VIOLATION.
0:      *
0:      * @param cm       The ContextManager returned from the find() call.
0:      * @param xid      A global transaction identifier.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      *
0:      **/
0:     public void forget(
0:     ContextManager  cm,
0:     Xid             xid)
0: 		throws StandardException;
0: 
0:     /**
0:      * This method is called to obtain a list of prepared transactions.
0:      * <p>
0:      * This call returns a complete list of global transactions which are 
0:      * either prepared or heuristically complete.
0:      * <p>
0:      * The XAResource interface expects a scan type interface, but our
0:      * implementation only returns a complete list of transactions.  So to
0:      * simulate the scan the following state is maintained.  If TMSTARTSCAN
0:      * is specified the complete list is returned.  If recover is called with
0:      * TMNOFLAGS is ever called a 0 length array is returned.  
0:      *
0: 	 * @return Return a array with 0 or more Xid's which are currently in
0:      *         prepared or heuristically completed state.  If an error occurs
0:      *         during the operation, an appropriate error is thrown.
0:      *
0:      * @param flags    combination of the following flags 
0:      *                 XAResource.{TMSTARTRSCAN,TMENDRSCAN,TMNOFLAGS}.  
0:      *                 TMNOFLAGS must be used when no other flags are used.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public Xid[] recover(int flags)
0:         throws StandardException;
0: 
0:     /**
0:      * rollback the transaction identified by Xid.
0:      * <p>
0:      * The given transaction is roll'ed back and it's history is not
0:      * maintained in the transaction table or long term log.
0:      * <p>
0:      *
0:      * @param cm       The ContextManager returned from the find() call.
0:      * @param xid      A global transaction identifier.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void rollback(
0:     ContextManager  cm,
0:     Xid             xid)
0:         throws StandardException;
0: }
============================================================================