1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:36b4892: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableProperties;
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINScanPropsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for HashTableResultSet.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: public class RealHashTableStatistics
1:eac0369: 	extends RealNoPutResultSetStatistics
1:eac0369: {
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 	public int hashtableSize;
1:eac0369: 	public int[] hashKeyColumns;
1:eac0369: 	public String isolationLevel;
1:eac0369: 	public String nextQualifiers;
1:eac0369: 	public FormatableProperties scanProperties;
1:eac0369: 	public ResultSetStatistics childResultSetStatistics;
1:eac0369: 	public ResultSetStatistics[] subqueryTrackingArray;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	RealHashTableStatistics(
1:eac0369: 									int numOpens,
1:eac0369: 									int rowsSeen,
1:eac0369: 									int rowsFiltered,
1:eac0369: 									long constructorTime,
1:eac0369: 									long openTime,
1:eac0369: 									long nextTime,
1:eac0369: 									long closeTime,
1:eac0369: 									int resultSetNumber,
1:eac0369: 									int hashtableSize,
1:eac0369: 									int[] hashKeyColumns,
1:eac0369: 									String nextQualifiers,
1:eac0369: 									Properties scanProperties,
1:eac0369: 									double optimizerEstimatedRowCount,
1:eac0369: 									double optimizerEstimatedCost,
1:eac0369: 									ResultSetStatistics[] subqueryTrackingArray,
1:eac0369: 									ResultSetStatistics childResultSetStatistics
1:eac0369: 									)
1:eac0369: 	{
1:eac0369: 		super(
1:eac0369: 			numOpens,
1:eac0369: 			rowsSeen,
1:eac0369: 			rowsFiltered,
1:eac0369: 			constructorTime,
1:eac0369: 			openTime,
1:eac0369: 			nextTime,
1:eac0369: 			closeTime,
1:eac0369: 			resultSetNumber,
1:eac0369: 			optimizerEstimatedRowCount,
1:eac0369: 			optimizerEstimatedCost
1:eac0369: 			);
1:eac0369: 		this.hashtableSize = hashtableSize;
1:36b4892: 		this.hashKeyColumns = ArrayUtil.copy( hashKeyColumns );
1:eac0369: 		this.nextQualifiers = nextQualifiers;
1:eac0369: 		this.scanProperties = new FormatableProperties();
1:eac0369: 		if (scanProperties != null)
1:eac0369: 		{
1:eac0369: 			for (Enumeration e = scanProperties.keys(); e.hasMoreElements(); )
1:eac0369: 			{
1:eac0369: 				String key = (String)e.nextElement();
1:eac0369: 				this.scanProperties.put(key, scanProperties.get(key));
1:eac0369: 			}
1:eac0369: 		}
1:3f7581c:         this.subqueryTrackingArray = ArrayUtil.copy(subqueryTrackingArray);
1:eac0369: 		this.childResultSetStatistics = childResultSetStatistics;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// ResultSetStatistics methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the statement execution plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 *
1:eac0369: 	 * @return String	The statement executio plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText(int depth)
1:eac0369: 	{
1:eac0369: 		String subqueryInfo = "";
1:eac0369: 
1:eac0369: 		initFormatInfo(depth);
1:eac0369: 
1:eac0369: 		/* Dump out the statistics for any subqueries */
1:eac0369: 
1:eac0369: 		if (subqueryTrackingArray != null)
1:eac0369: 		{
1:eac0369: 			boolean	foundAttached = false;
1:eac0369: 
1:eac0369: 			for (int index = 0; index < subqueryTrackingArray.length; index++)
1:eac0369: 			{
1:eac0369: 				if (subqueryTrackingArray[index] != null)
1:eac0369: 				{
1:eac0369: 					/* Only print attached subqueries message once */
1:eac0369: 					if (! foundAttached)
1:eac0369: 					{
1:eac0369: 						subqueryInfo = indent +
1:eac0369: 							MessageService.getTextMessage(
1:eac0369: 													SQLState.RTS_ATTACHED_SQS) +
1:eac0369: 							":\n";
1:eac0369: 						foundAttached = true;
1:eac0369: 					}
1:eac0369: 					subqueryInfo = subqueryInfo +
1:eac0369: 						subqueryTrackingArray[index].getStatementExecutionPlanText(sourceDepth);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		initFormatInfo(depth);
1:eac0369: 		
1:eac0369: 		String hashKeyColumnString;
1:eac0369: 		if (hashKeyColumns.length == 1)
1:eac0369: 		{
1:eac0369: 			hashKeyColumnString =
1:eac0369: 					MessageService.getTextMessage(SQLState.RTS_HASH_KEY) +
1:eac0369: 					" " +
1:eac0369: 					hashKeyColumns[0];
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			hashKeyColumnString =
1:eac0369: 					MessageService.getTextMessage(SQLState.RTS_HASH_KEYS) +
1:eac0369: 					" (" + hashKeyColumns[0];
1:eac0369: 			for (int index = 1; index < hashKeyColumns.length; index++)
1:eac0369: 			{
1:eac0369: 				hashKeyColumnString = hashKeyColumnString + "," + hashKeyColumns[index];
1:eac0369: 			}
1:eac0369: 			hashKeyColumnString = hashKeyColumnString + ")";
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_HASH_TABLE_RS) +
1:eac0369: 										" (" +	resultSetNumber + "):" + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_NUM_OPENS) +
1:eac0369: 										" = " + numOpens + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_HASH_TABLE_SIZE) +
1:eac0369: 										" = " + hashtableSize + "\n" +
1:eac0369: 			indent + hashKeyColumnString + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_SEEN) +
1:eac0369: 										" = " + rowsSeen + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_FILTERED) +
1:eac0369: 										" = " + rowsFiltered + "\n" +
1:eac0369: 			dumpTimeStats(indent, subIndent) + "\n" +
1:eac0369: 			dumpEstimatedCosts(subIndent) + "\n" +
1:eac0369: 			((rowsSeen > 0) 
1:eac0369: 				?
1:eac0369: 					subIndent +
1:eac0369: 					MessageService.getTextMessage(SQLState.RTS_NEXT_TIME) +
1:eac0369: 					" = " + (nextTime / rowsSeen) + "\n"
1:eac0369: 				: 
1:eac0369: 					"") + "\n" +
1:eac0369: 			subIndent + MessageService.getTextMessage(
1:eac0369: 													SQLState.RTS_NEXT_QUALS) +
1:eac0369: 										":\n" + nextQualifiers + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_SOURCE_RS) +
1:eac0369: 										":\n" +
1:eac0369: 			childResultSetStatistics.getStatementExecutionPlanText(sourceDepth);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return information on the scan nodes from the statement execution 
1:eac0369: 	 * plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 * @param tableName if not NULL then print information for this table only
1:eac0369: 	 *
1:eac0369: 	 * @return String	The information on the scan nodes from the 
1:eac0369: 	 *					statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName, int depth)
1:eac0369: 	{
1:eac0369: 		if (tableName == null)
1:eac0369: 			return getStatementExecutionPlanText(depth);
1:eac0369: 		else
1:eac0369: 			return (String)null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Class implementation
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return getStatementExecutionPlanText(0);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * If this node is on a database item (like a table or an index), then provide a
1:eac0369:    * string that describes the on item.
1:eac0369:    *
1:eac0369: 	 */
1:eac0369:   public String getNodeOn(){
1:eac0369:     return "";
1:eac0369:   }
1:eac0369: 	/**
1:eac0369:    * Format for display, a name for this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public String getNodeName(){
1:eac0369:     return MessageService.getTextMessage(SQLState.RTS_HASH_TABLE);
1:eac0369:   }
1:48a9884:   
1:48a9884:   // -----------------------------------------------------
1:48a9884:   // XPLAINable Implementation
1:48a9884:   // -----------------------------------------------------
1:48a9884:   
1:48a9884:     public void accept(XPLAINVisitor visitor) {
1:48a9884:         // compute number of children of this node, which get visited
1:48a9884:         int noChildren = 0;
1:48a9884:         if(this.childResultSetStatistics!=null) noChildren++;
1:48a9884:         if(this.subqueryTrackingArray!=null){
1:48a9884:             noChildren += subqueryTrackingArray.length;
1:48a9884:         }
1:48a9884:         // inform the visitor
1:48a9884:         visitor.setNumberOfChildren(noChildren);
1:48a9884:         
1:48a9884:         // pre-order, depth-first traversal
1:48a9884:         // me first
1:48a9884:         visitor.visit(this);
1:48a9884:         // then my direct child
1:48a9884:         if(childResultSetStatistics!=null){
1:48a9884:             childResultSetStatistics.accept(visitor);
1:48a9884:         }
1:48a9884:         // and now the dependant resultsets, if there are any
1:48a9884:         if (subqueryTrackingArray != null)
1:48a9884:         {
1:48a9884:             boolean foundAttached = false;
1:48a9884: 
1:48a9884:             for (int index = 0; index < subqueryTrackingArray.length; index++)
1:48a9884:             {
1:48a9884:                 if (subqueryTrackingArray[index] != null)
1:48a9884:                 {
1:48a9884:                     // TODO add additional dependant referential action ?
1:48a9884:                     /*
1:48a9884:                     if (! foundAttached)
1:48a9884:                     {
1:48a9884:                         dependentInfo = indent  + "\n" +
1:48a9884:                             MessageService.getTextMessage(
1:48a9884:                                                 SQLState.RTS_REFACTION_DEPENDENT) +
1:48a9884:                                 ":\n";
1:48a9884:                         foundAttached = true;
1:48a9884:                     }*/
1:48a9884:                     
1:48a9884:                     subqueryTrackingArray[index].accept(visitor);
1:48a9884:                 }
1:48a9884:             }
1:48a9884:         }
1:48a9884:     }
1:48a9884:     public String getRSXplainType() { return XPLAINUtil.OP_HASHTABLE; }
1:48a9884:     public String getRSXplainDetails() { return "("+this.resultSetNumber+")"; }
1:48a9884:     public Object getScanPropsDescriptor(Object scanPropsID)
1:48a9884:     {
1:48a9884:         FormatableProperties props = this.scanProperties;
1:48a9884:         
1:48a9884:         String isoLevel = XPLAINUtil.getIsolationLevelCode(this.isolationLevel);
1:48a9884:         
1:48a9884:         String hashkey_columns =
1:48a9884:             XPLAINUtil.getHashKeyColumnNumberString(this.hashKeyColumns);
1:48a9884:         
1:48a9884:         // create new scan info descriptor with some basic information
1:48a9884:         XPLAINScanPropsDescriptor scanRSDescriptor =            
1:48a9884:               new XPLAINScanPropsDescriptor(
1:48a9884:               (UUID)scanPropsID,      // the scan props UUID
1:48a9884:               "Temporary HashTable", // the index/table name
1:48a9884:               null,             // the scan object, either (C)onstraint, (I)ndex or (T)able
1:48a9884:               null,             // the scan type: heap, btree, sort
1:48a9884:               isoLevel,         // the isolation level
1:48a9884:               null,             // the number of visited pages
1:48a9884:               null,             // the number of visited rows
1:48a9884:               null,             // the number of qualified rows
1:48a9884:               null,             // the number of visited deleted rows
1:48a9884:               null,             // the number of fetched columns
1:48a9884:               null,             // the bitset of fetched columns
1:48a9884:               null,             // the btree height
1:48a9884:               null,             // the fetch size
1:48a9884:               null,                          // the start position, internal encoding
1:48a9884:               null,                          // the stop position, internal encoding
1:48a9884:               null,                          // the scan qualifiers
1:48a9884:               this.nextQualifiers,     // the next qualifiers
1:48a9884:               hashkey_columns,               // the hash key column numbers
1:ce40a31:               this.hashtableSize // the hash table size
1:48a9884:             );
1:48a9884:         
1:48a9884:         // fill additional information from scan properties
1:48a9884:         return XPLAINUtil.extractScanProps(scanRSDescriptor,props);
1:48a9884:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:               this.hashtableSize // the hash table size
commit:36b4892
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 		this.hashKeyColumns = ArrayUtil.copy( hashKeyColumns );
/////////////////////////////////////////////////////////////////////////
0: 		this.subqueryTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( subqueryTrackingArray );
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1:         this.subqueryTrackingArray = ArrayUtil.copy(subqueryTrackingArray);
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINScanPropsDescriptor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
/////////////////////////////////////////////////////////////////////////
1:   
1:   // -----------------------------------------------------
1:   // XPLAINable Implementation
1:   // -----------------------------------------------------
1:   
1:     public void accept(XPLAINVisitor visitor) {
1:         // compute number of children of this node, which get visited
1:         int noChildren = 0;
1:         if(this.childResultSetStatistics!=null) noChildren++;
1:         if(this.subqueryTrackingArray!=null){
1:             noChildren += subqueryTrackingArray.length;
1:         }
1:         // inform the visitor
1:         visitor.setNumberOfChildren(noChildren);
1:         
1:         // pre-order, depth-first traversal
1:         // me first
1:         visitor.visit(this);
1:         // then my direct child
1:         if(childResultSetStatistics!=null){
1:             childResultSetStatistics.accept(visitor);
1:         }
1:         // and now the dependant resultsets, if there are any
1:         if (subqueryTrackingArray != null)
1:         {
1:             boolean foundAttached = false;
1: 
1:             for (int index = 0; index < subqueryTrackingArray.length; index++)
1:             {
1:                 if (subqueryTrackingArray[index] != null)
1:                 {
1:                     // TODO add additional dependant referential action ?
1:                     /*
1:                     if (! foundAttached)
1:                     {
1:                         dependentInfo = indent  + "\n" +
1:                             MessageService.getTextMessage(
1:                                                 SQLState.RTS_REFACTION_DEPENDENT) +
1:                                 ":\n";
1:                         foundAttached = true;
1:                     }*/
1:                     
1:                     subqueryTrackingArray[index].accept(visitor);
1:                 }
1:             }
1:         }
1:     }
1:     public String getRSXplainType() { return XPLAINUtil.OP_HASHTABLE; }
1:     public String getRSXplainDetails() { return "("+this.resultSetNumber+")"; }
1:     public Object getScanPropsDescriptor(Object scanPropsID)
1:     {
1:         FormatableProperties props = this.scanProperties;
1:         
1:         String isoLevel = XPLAINUtil.getIsolationLevelCode(this.isolationLevel);
1:         
1:         String hashkey_columns =
1:             XPLAINUtil.getHashKeyColumnNumberString(this.hashKeyColumns);
1:         
1:         // create new scan info descriptor with some basic information
1:         XPLAINScanPropsDescriptor scanRSDescriptor =            
1:               new XPLAINScanPropsDescriptor(
1:               (UUID)scanPropsID,      // the scan props UUID
1:               "Temporary HashTable", // the index/table name
1:               null,             // the scan object, either (C)onstraint, (I)ndex or (T)able
1:               null,             // the scan type: heap, btree, sort
1:               isoLevel,         // the isolation level
1:               null,             // the number of visited pages
1:               null,             // the number of visited rows
1:               null,             // the number of qualified rows
1:               null,             // the number of visited deleted rows
1:               null,             // the number of fetched columns
1:               null,             // the bitset of fetched columns
1:               null,             // the btree height
1:               null,             // the fetch size
1:               null,                          // the start position, internal encoding
1:               null,                          // the stop position, internal encoding
1:               null,                          // the scan qualifiers
1:               this.nextQualifiers,     // the next qualifiers
1:               hashkey_columns,               // the hash key column numbers
0:               new Integer(this.hashtableSize) // the hash table size
1:             );
1:         
1:         // fill additional information from scan properties
1:         return XPLAINUtil.extractScanProps(scanRSDescriptor,props);
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: import org.apache.derby.iapi.services.io.FormatableProperties;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: 
1: /**
1:   ResultSetStatistics implemenation for HashTableResultSet.
1: 
0:   @author jerry
1: 
1: */
1: public class RealHashTableStatistics
1: 	extends RealNoPutResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/* Leave these fields public for object inspectors */
1: 	public int hashtableSize;
1: 	public int[] hashKeyColumns;
1: 	public String isolationLevel;
1: 	public String nextQualifiers;
1: 	public FormatableProperties scanProperties;
1: 	public ResultSetStatistics childResultSetStatistics;
1: 	public ResultSetStatistics[] subqueryTrackingArray;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * 
1: 	 *
1: 	 */
1:     public	RealHashTableStatistics(
1: 									int numOpens,
1: 									int rowsSeen,
1: 									int rowsFiltered,
1: 									long constructorTime,
1: 									long openTime,
1: 									long nextTime,
1: 									long closeTime,
1: 									int resultSetNumber,
1: 									int hashtableSize,
1: 									int[] hashKeyColumns,
1: 									String nextQualifiers,
1: 									Properties scanProperties,
1: 									double optimizerEstimatedRowCount,
1: 									double optimizerEstimatedCost,
1: 									ResultSetStatistics[] subqueryTrackingArray,
1: 									ResultSetStatistics childResultSetStatistics
1: 									)
1: 	{
1: 		super(
1: 			numOpens,
1: 			rowsSeen,
1: 			rowsFiltered,
1: 			constructorTime,
1: 			openTime,
1: 			nextTime,
1: 			closeTime,
1: 			resultSetNumber,
1: 			optimizerEstimatedRowCount,
1: 			optimizerEstimatedCost
1: 			);
1: 		this.hashtableSize = hashtableSize;
0: 		this.hashKeyColumns = hashKeyColumns;
1: 		this.nextQualifiers = nextQualifiers;
1: 		this.scanProperties = new FormatableProperties();
1: 		if (scanProperties != null)
1: 		{
1: 			for (Enumeration e = scanProperties.keys(); e.hasMoreElements(); )
1: 			{
1: 				String key = (String)e.nextElement();
1: 				this.scanProperties.put(key, scanProperties.get(key));
1: 			}
1: 		}
0: 		this.subqueryTrackingArray = subqueryTrackingArray;
1: 		this.childResultSetStatistics = childResultSetStatistics;
1: 	}
1: 
1: 	// ResultSetStatistics methods
1: 
1: 	/**
1: 	 * Return the statement execution plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 *
1: 	 * @return String	The statement executio plan as a String.
1: 	 */
1: 	public String getStatementExecutionPlanText(int depth)
1: 	{
1: 		String subqueryInfo = "";
1: 
1: 		initFormatInfo(depth);
1: 
1: 		/* Dump out the statistics for any subqueries */
1: 
1: 		if (subqueryTrackingArray != null)
1: 		{
1: 			boolean	foundAttached = false;
1: 
1: 			for (int index = 0; index < subqueryTrackingArray.length; index++)
1: 			{
1: 				if (subqueryTrackingArray[index] != null)
1: 				{
1: 					/* Only print attached subqueries message once */
1: 					if (! foundAttached)
1: 					{
1: 						subqueryInfo = indent +
1: 							MessageService.getTextMessage(
1: 													SQLState.RTS_ATTACHED_SQS) +
1: 							":\n";
1: 						foundAttached = true;
1: 					}
1: 					subqueryInfo = subqueryInfo +
1: 						subqueryTrackingArray[index].getStatementExecutionPlanText(sourceDepth);
1: 				}
1: 			}
1: 		}
1: 
1: 		initFormatInfo(depth);
1: 		
1: 		String hashKeyColumnString;
1: 		if (hashKeyColumns.length == 1)
1: 		{
1: 			hashKeyColumnString =
1: 					MessageService.getTextMessage(SQLState.RTS_HASH_KEY) +
1: 					" " +
1: 					hashKeyColumns[0];
1: 		}
1: 		else
1: 		{
1: 			hashKeyColumnString =
1: 					MessageService.getTextMessage(SQLState.RTS_HASH_KEYS) +
1: 					" (" + hashKeyColumns[0];
1: 			for (int index = 1; index < hashKeyColumns.length; index++)
1: 			{
1: 				hashKeyColumnString = hashKeyColumnString + "," + hashKeyColumns[index];
1: 			}
1: 			hashKeyColumnString = hashKeyColumnString + ")";
1: 		}
1: 
1: 		return
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_HASH_TABLE_RS) +
1: 										" (" +	resultSetNumber + "):" + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_NUM_OPENS) +
1: 										" = " + numOpens + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_HASH_TABLE_SIZE) +
1: 										" = " + hashtableSize + "\n" +
1: 			indent + hashKeyColumnString + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_SEEN) +
1: 										" = " + rowsSeen + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_FILTERED) +
1: 										" = " + rowsFiltered + "\n" +
1: 			dumpTimeStats(indent, subIndent) + "\n" +
1: 			dumpEstimatedCosts(subIndent) + "\n" +
1: 			((rowsSeen > 0) 
1: 				?
1: 					subIndent +
1: 					MessageService.getTextMessage(SQLState.RTS_NEXT_TIME) +
1: 					" = " + (nextTime / rowsSeen) + "\n"
1: 				: 
1: 					"") + "\n" +
1: 			subIndent + MessageService.getTextMessage(
1: 													SQLState.RTS_NEXT_QUALS) +
1: 										":\n" + nextQualifiers + "\n" +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_SOURCE_RS) +
1: 										":\n" +
1: 			childResultSetStatistics.getStatementExecutionPlanText(sourceDepth);
1: 	}
1: 
1: 	/**
1: 	 * Return information on the scan nodes from the statement execution 
1: 	 * plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 * @param tableName if not NULL then print information for this table only
1: 	 *
1: 	 * @return String	The information on the scan nodes from the 
1: 	 *					statement execution plan as a String.
1: 	 */
1: 	public String getScanStatisticsText(String tableName, int depth)
1: 	{
1: 		if (tableName == null)
1: 			return getStatementExecutionPlanText(depth);
1: 		else
1: 			return (String)null;
1: 	}
1: 
1: 
1: 	// Class implementation
1: 	
1: 	public String toString()
1: 	{
1: 		return getStatementExecutionPlanText(0);
1: 	}
1: 	/**
1: 	 * If this node is on a database item (like a table or an index), then provide a
1:    * string that describes the on item.
1:    *
1: 	 */
1:   public String getNodeOn(){
1:     return "";
1:   }
1: 	/**
1:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public String getNodeName(){
1:     return MessageService.getTextMessage(SQLState.RTS_HASH_TABLE);
1:   }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableProperties;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.util.Enumeration;
0: import java.util.Properties;
0: 
0: 
0: /**
0:   ResultSetStatistics implemenation for HashTableResultSet.
0: 
0:   @author jerry
0: 
0: */
0: public class RealHashTableStatistics
0: 	extends RealNoPutResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/* Leave these fields public for object inspectors */
0: 	public int hashtableSize;
0: 	public int[] hashKeyColumns;
0: 	public String isolationLevel;
0: 	public String nextQualifiers;
0: 	public FormatableProperties scanProperties;
0: 	public ResultSetStatistics childResultSetStatistics;
0: 	public ResultSetStatistics[] subqueryTrackingArray;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0:     public	RealHashTableStatistics(
0: 									int numOpens,
0: 									int rowsSeen,
0: 									int rowsFiltered,
0: 									long constructorTime,
0: 									long openTime,
0: 									long nextTime,
0: 									long closeTime,
0: 									int resultSetNumber,
0: 									int hashtableSize,
0: 									int[] hashKeyColumns,
0: 									String nextQualifiers,
0: 									Properties scanProperties,
0: 									double optimizerEstimatedRowCount,
0: 									double optimizerEstimatedCost,
0: 									ResultSetStatistics[] subqueryTrackingArray,
0: 									ResultSetStatistics childResultSetStatistics
0: 									)
0: 	{
0: 		super(
0: 			numOpens,
0: 			rowsSeen,
0: 			rowsFiltered,
0: 			constructorTime,
0: 			openTime,
0: 			nextTime,
0: 			closeTime,
0: 			resultSetNumber,
0: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost
0: 			);
0: 		this.hashtableSize = hashtableSize;
0: 		this.hashKeyColumns = hashKeyColumns;
0: 		this.nextQualifiers = nextQualifiers;
0: 		this.scanProperties = new FormatableProperties();
0: 		if (scanProperties != null)
0: 		{
0: 			for (Enumeration e = scanProperties.keys(); e.hasMoreElements(); )
0: 			{
0: 				String key = (String)e.nextElement();
0: 				this.scanProperties.put(key, scanProperties.get(key));
0: 			}
0: 		}
0: 		this.subqueryTrackingArray = subqueryTrackingArray;
0: 		this.childResultSetStatistics = childResultSetStatistics;
0: 	}
0: 
0: 	// ResultSetStatistics methods
0: 
0: 	/**
0: 	 * Return the statement execution plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 *
0: 	 * @return String	The statement executio plan as a String.
0: 	 */
0: 	public String getStatementExecutionPlanText(int depth)
0: 	{
0: 		String subqueryInfo = "";
0: 
0: 		initFormatInfo(depth);
0: 
0: 		/* Dump out the statistics for any subqueries */
0: 
0: 		if (subqueryTrackingArray != null)
0: 		{
0: 			boolean	foundAttached = false;
0: 
0: 			for (int index = 0; index < subqueryTrackingArray.length; index++)
0: 			{
0: 				if (subqueryTrackingArray[index] != null)
0: 				{
0: 					/* Only print attached subqueries message once */
0: 					if (! foundAttached)
0: 					{
0: 						subqueryInfo = indent +
0: 							MessageService.getTextMessage(
0: 													SQLState.RTS_ATTACHED_SQS) +
0: 							":\n";
0: 						foundAttached = true;
0: 					}
0: 					subqueryInfo = subqueryInfo +
0: 						subqueryTrackingArray[index].getStatementExecutionPlanText(sourceDepth);
0: 				}
0: 			}
0: 		}
0: 
0: 		initFormatInfo(depth);
0: 		
0: 		String hashKeyColumnString;
0: 		if (hashKeyColumns.length == 1)
0: 		{
0: 			hashKeyColumnString =
0: 					MessageService.getTextMessage(SQLState.RTS_HASH_KEY) +
0: 					" " +
0: 					hashKeyColumns[0];
0: 		}
0: 		else
0: 		{
0: 			hashKeyColumnString =
0: 					MessageService.getTextMessage(SQLState.RTS_HASH_KEYS) +
0: 					" (" + hashKeyColumns[0];
0: 			for (int index = 1; index < hashKeyColumns.length; index++)
0: 			{
0: 				hashKeyColumnString = hashKeyColumnString + "," + hashKeyColumns[index];
0: 			}
0: 			hashKeyColumnString = hashKeyColumnString + ")";
0: 		}
0: 
0: 		return
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_HASH_TABLE_RS) +
0: 										" (" +	resultSetNumber + "):" + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_NUM_OPENS) +
0: 										" = " + numOpens + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_HASH_TABLE_SIZE) +
0: 										" = " + hashtableSize + "\n" +
0: 			indent + hashKeyColumnString + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_SEEN) +
0: 										" = " + rowsSeen + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_FILTERED) +
0: 										" = " + rowsFiltered + "\n" +
0: 			dumpTimeStats(indent, subIndent) + "\n" +
0: 			dumpEstimatedCosts(subIndent) + "\n" +
0: 			((rowsSeen > 0) 
0: 				?
0: 					subIndent +
0: 					MessageService.getTextMessage(SQLState.RTS_NEXT_TIME) +
0: 					" = " + (nextTime / rowsSeen) + "\n"
0: 				: 
0: 					"") + "\n" +
0: 			subIndent + MessageService.getTextMessage(
0: 													SQLState.RTS_NEXT_QUALS) +
0: 										":\n" + nextQualifiers + "\n" +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_SOURCE_RS) +
0: 										":\n" +
0: 			childResultSetStatistics.getStatementExecutionPlanText(sourceDepth);
0: 	}
0: 
0: 	/**
0: 	 * Return information on the scan nodes from the statement execution 
0: 	 * plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 * @param tableName if not NULL then print information for this table only
0: 	 *
0: 	 * @return String	The information on the scan nodes from the 
0: 	 *					statement execution plan as a String.
0: 	 */
0: 	public String getScanStatisticsText(String tableName, int depth)
0: 	{
0: 		if (tableName == null)
0: 			return getStatementExecutionPlanText(depth);
0: 		else
0: 			return (String)null;
0: 	}
0: 
0: 
0: 	// Class implementation
0: 	
0: 	public String toString()
0: 	{
0: 		return getStatementExecutionPlanText(0);
0: 	}
0: 	/**
0: 	 * If this node is on a database item (like a table or an index), then provide a
0:    * string that describes the on item.
0:    *
0: 	 */
0:   public String getNodeOn(){
0:     return "";
0:   }
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public String getNodeName(){
0:     return MessageService.getTextMessage(SQLState.RTS_HASH_TABLE);
0:   }
0: }
============================================================================