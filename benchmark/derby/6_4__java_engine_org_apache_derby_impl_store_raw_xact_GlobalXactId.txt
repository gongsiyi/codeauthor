1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.GlobalXactId
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.GlobalTransactionId;
1:eac0369: import org.apache.derby.iapi.store.access.GlobalXact;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: public class GlobalXactId extends GlobalXact implements GlobalTransactionId
1:eac0369: {
2:eac0369:     /**************************************************************************
1:eac0369:      * Private Fields of the class
2:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:0fad4e6:     GlobalXactId(
1:eac0369: 						int     format_id,
1:eac0369: 						byte[]  global_id,
1:eac0369: 						byte[]  branch_id)
1:eac0369:     {
1:eac0369: 		this.format_id = format_id;
1:0fad4e6:         this.global_id = (byte[]) global_id.clone();
1:0fad4e6:         this.branch_id = (byte[]) branch_id.clone();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of Formatable interface:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public GlobalXactId()
1:eac0369:     { 
1:eac0369:     }
1:eac0369: 
1:0fad4e6: 	/**
1:eac0369: 		Write this out.
1:eac0369: 		@exception IOException error writing to log stream
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369:         out.writeInt(format_id);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(global_id.length <= 64);
1:eac0369:             SanityManager.ASSERT(global_id != null);
1:eac0369:             SanityManager.ASSERT(branch_id != null);
1:eac0369:         }
1:eac0369: 
1:eac0369:         // write length of array followed by the array
1:eac0369:         out.write(global_id.length);
1:eac0369:         if (global_id.length > 0)
1:eac0369:             out.write(global_id);
1:eac0369: 
1:eac0369:         // write length of array followed by the array
1:eac0369:         out.write(branch_id.length);
1:eac0369:         if (branch_id.length > 0)
1:eac0369:             out.write(branch_id);
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369:         format_id = in.readInt();
1:eac0369: 
1:eac0369:         // read global_id in from disk
1:eac0369:         int array_len = in.read();
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG) 
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(array_len >= 0);
1:eac0369:         }
1:eac0369: 
1:eac0369:         global_id = new byte[array_len];
1:eac0369:         if (array_len > 0)
1:eac0369:             in.read(global_id);
1:eac0369: 
1:eac0369:         // read branch_id in from disk
1:eac0369:         array_len = in.read();
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(array_len >= 0);
1:eac0369:         }
1:eac0369: 
1:eac0369:         branch_id = new byte[array_len];
1:eac0369:         if (array_len > 0)
1:eac0369:             in.read(branch_id);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.RAW_STORE_GLOBAL_XACT_ID_NEW;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:0fad4e6:      * Obtain the format id part of the GlobalTransactionId.
1:0fad4e6:      * @return format identifier, 0 means the OSI CCR format
1:eac0369:      */
1:0fad4e6:     int getFormat_Id()
1:eac0369:     {
1:eac0369:         return(format_id);
1:eac0369:     }
1:eac0369: 
1:0fad4e6:     /**
1:0fad4e6:      * Obtain the global transaction identifier as an array of bytes.
1:0fad4e6:      * @return a byte array containing the global transaction identifier
1:0fad4e6:      */
1:0fad4e6:     byte[] getGlobalTransactionId()
1:eac0369:     {
1:eac0369:         return(global_id);
1:eac0369:     }
1:eac0369: 
1:0fad4e6:     /**
1:0fad4e6:      * Obtain the transaction branch qualifier as an array of bytes.
1:0fad4e6:      * @return a byte array containing the branch qualifier of the transaction
1:0fad4e6:      */
1:0fad4e6:     byte[] getBranchQualifier()
1:eac0369:     {
1:eac0369:         return(branch_id);
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0fad4e6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     GlobalXactId(
1:         this.global_id = (byte[]) global_id.clone();
1:         this.branch_id = (byte[]) branch_id.clone();
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Obtain the format id part of the GlobalTransactionId.
1:      * @return format identifier, 0 means the OSI CCR format
1:     int getFormat_Id()
1:     /**
1:      * Obtain the global transaction identifier as an array of bytes.
1:      * @return a byte array containing the global transaction identifier
1:      */
1:     byte[] getGlobalTransactionId()
1:     /**
1:      * Obtain the transaction branch qualifier as an array of bytes.
1:      * @return a byte array containing the branch qualifier of the transaction
1:      */
1:     byte[] getBranchQualifier()
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.GlobalXactId
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.store.raw.GlobalTransactionId;
1: import org.apache.derby.iapi.store.access.GlobalXact;
1: 
0: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: public class GlobalXactId extends GlobalXact implements GlobalTransactionId
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**************************************************************************
1:      * Private Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
0: 	public GlobalXactId(
1: 						int     format_id,
1: 						byte[]  global_id,
1: 						byte[]  branch_id)
1:     {
1: 		this.format_id = format_id;
0: 		this.global_id = new byte[global_id.length];
0: 		System.arraycopy(global_id, 0, this.global_id, 0, global_id.length);
0: 		this.branch_id = new byte[branch_id.length];
0: 		System.arraycopy(branch_id, 0, this.branch_id, 0, branch_id.length);
1: 	}
1: 
1:     /**************************************************************************
1:      * Public Methods of Formatable interface:
1:      **************************************************************************
1:      */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public GlobalXactId()
1:     { 
1:     }
1: 
1: 	/**
1: 		Write this out.
1: 		@exception IOException error writing to log stream
1: 	*/
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1:         out.writeInt(format_id);
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(global_id.length <= 64);
1:             SanityManager.ASSERT(global_id != null);
1:             SanityManager.ASSERT(branch_id != null);
1:         }
1: 
1:         // write length of array followed by the array
1:         out.write(global_id.length);
1:         if (global_id.length > 0)
1:             out.write(global_id);
1: 
1:         // write length of array followed by the array
1:         out.write(branch_id.length);
1:         if (branch_id.length > 0)
1:             out.write(branch_id);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1:         format_id = in.readInt();
1: 
1:         // read global_id in from disk
1:         int array_len = in.read();
1: 
1:         if (SanityManager.DEBUG) 
1:         {
1:             SanityManager.ASSERT(array_len >= 0);
1:         }
1: 
1:         global_id = new byte[array_len];
1:         if (array_len > 0)
1:             in.read(global_id);
1: 
1:         // read branch_id in from disk
1:         array_len = in.read();
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(array_len >= 0);
1:         }
1: 
1:         branch_id = new byte[array_len];
1:         if (array_len > 0)
1:             in.read(branch_id);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.RAW_STORE_GLOBAL_XACT_ID_NEW;
1: 	}
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
0:      * Public Methods of This class:
1:      **************************************************************************
1:      */
0:     public int getFormat_Id()
1:     {
1:         return(format_id);
1:     }
1: 
0:     public byte[] getGlobalTransactionId()
1:     {
1:         return(global_id);
1:     }
1: 
0:     public byte[] getBranchQualifier()
1:     {
1:         return(branch_id);
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.store.raw.GlobalTransactionId;
0: import org.apache.derby.iapi.store.access.GlobalXact;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: public class GlobalXactId extends GlobalXact implements GlobalTransactionId
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**************************************************************************
0:      * Private Fields of the class
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0: 	public GlobalXactId(
0: 						int     format_id,
0: 						byte[]  global_id,
0: 						byte[]  branch_id)
0:     {
0: 		this.format_id = format_id;
0: 		this.global_id = new byte[global_id.length];
0: 		System.arraycopy(global_id, 0, this.global_id, 0, global_id.length);
0: 		this.branch_id = new byte[branch_id.length];
0: 		System.arraycopy(branch_id, 0, this.branch_id, 0, branch_id.length);
0: 	}
0: 
0:     /**************************************************************************
0:      * Public Methods of Formatable interface:
0:      **************************************************************************
0:      */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public GlobalXactId()
0:     { 
0:     }
0: 
0: 	/**
0: 		Write this out.
0: 		@exception IOException error writing to log stream
0: 	*/
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0:         out.writeInt(format_id);
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(global_id.length <= 64);
0:             SanityManager.ASSERT(global_id != null);
0:             SanityManager.ASSERT(branch_id != null);
0:         }
0: 
0:         // write length of array followed by the array
0:         out.write(global_id.length);
0:         if (global_id.length > 0)
0:             out.write(global_id);
0: 
0:         // write length of array followed by the array
0:         out.write(branch_id.length);
0:         if (branch_id.length > 0)
0:             out.write(branch_id);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0:         format_id = in.readInt();
0: 
0:         // read global_id in from disk
0:         int array_len = in.read();
0: 
0:         if (SanityManager.DEBUG) 
0:         {
0:             SanityManager.ASSERT(array_len >= 0);
0:         }
0: 
0:         global_id = new byte[array_len];
0:         if (array_len > 0)
0:             in.read(global_id);
0: 
0:         // read branch_id in from disk
0:         array_len = in.read();
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(array_len >= 0);
0:         }
0: 
0:         branch_id = new byte[array_len];
0:         if (array_len > 0)
0:             in.read(branch_id);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.RAW_STORE_GLOBAL_XACT_ID_NEW;
0: 	}
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0:     public int getFormat_Id()
0:     {
0:         return(format_id);
0:     }
0: 
0:     public byte[] getGlobalTransactionId()
0:     {
0:         return(global_id);
0:     }
0: 
0:     public byte[] getBranchQualifier()
0:     {
0:         return(branch_id);
0:     }
0: }
============================================================================