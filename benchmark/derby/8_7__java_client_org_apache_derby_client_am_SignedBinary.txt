1:33776ff: /*
8:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.SignedBinary
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
5:70f7692: */
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:70f7692: public class SignedBinary {
1:70f7692:     // Hide the default constructor, this is a static class.
1:70f7692:     private SignedBinary() {
1:90731d5:     }
1:53795a1: 
6:70f7692:     /**
1:70f7692:      * Unix byte-order for signed binary representations.
1:70f7692:      */
1:70f7692:     public final static int BIG_ENDIAN = 1;
1:33776ff: 
1:70f7692:     /**
1:70f7692:      * Intel 80/86 reversed byte-order for signed binary representations.
1:70f7692:      */
1:70f7692:     public final static int LITTLE_ENDIAN = 2;
1:90731d5: 
1:90731d5:     /**
1:eff3919:      * Get a byte from the buffer.
1:eff3919:      */
1:0326967:     static byte getByte(byte[] buffer, int offset) {
1:eff3919:         return buffer[ offset ];
1:eff3919:     }
1:eff3919: 
1:eff3919:     /**
1:70f7692:      * Build a Java short from a 2-byte signed binary representation.
1:53795a1:      *
1:70f7692:      * @throws IllegalArgumentException if the specified byte order is not recognized.
1:53795a1:      */
1:0326967:     public static short getShort(byte[] buffer, int offset) {
1:70f7692:         return (short) (((buffer[offset + 0] & 0xff) << 8) +
1:70f7692:                 ((buffer[offset + 1] & 0xff) << 0));
1:53795a1:     }
1:53795a1: 
1:53795a1:     /**
1:70f7692:      * Build a Java int from a 4-byte signed binary representation.
1:53795a1:      *
1:70f7692:      * @throws IllegalArgumentException if the specified byte order is not recognized.
1:90731d5:      */
1:70f7692:     public static final int getInt(byte[] buffer, int offset) {
1:70f7692:         return (int) (((buffer[offset + 0] & 0xff) << 24) +
1:70f7692:                 ((buffer[offset + 1] & 0xff) << 16) +
1:70f7692:                 ((buffer[offset + 2] & 0xff) << 8) +
1:70f7692:                 ((buffer[offset + 3] & 0xff) << 0));
1:53795a1:     }
1:33776ff: 
1:70f7692:     /**
1:70f7692:      * Build a Java long from an 8-byte signed binary representation.
1:90731d5:      *
1:70f7692:      * @throws IllegalArgumentException if the specified byte order is not recognized.
1:70f7692:      */
1:70f7692:     public static final long getLong(byte[] buffer, int offset) {
1:70f7692:         return (long) (((buffer[offset + 0] & 0xffL) << 56) +
1:70f7692:                 ((buffer[offset + 1] & 0xffL) << 48) +
1:70f7692:                 ((buffer[offset + 2] & 0xffL) << 40) +
1:70f7692:                 ((buffer[offset + 3] & 0xffL) << 32) +
1:70f7692:                 ((buffer[offset + 4] & 0xffL) << 24) +
1:70f7692:                 ((buffer[offset + 5] & 0xffL) << 16) +
1:70f7692:                 ((buffer[offset + 6] & 0xffL) << 8) +
1:70f7692:                 ((buffer[offset + 7] & 0xffL) << 0));
6:70f7692:     }
1:33776ff: 
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     static byte getByte(byte[] buffer, int offset) {
/////////////////////////////////////////////////////////////////////////
1:     public static short getShort(byte[] buffer, int offset) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6e1e6f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:53795a1
/////////////////////////////////////////////////////////////////////////
0:     /** Maximum value that cen be encoded by 6 bytes (signed). */
0:     public static final long MAX_LONG_6_BYTES_SIGNED = 0x7FFFFFFFFFFFL;
1: 
/////////////////////////////////////////////////////////////////////////
0:      * Writes a Java long to a 6-byte big endian signed binary representation.
1:      *
0:      * @param buffer the buffer to write into
0:      * @param offset the offset at which to start writing
0:      * @param v the value to be written
1:      *
0:      * @throws IllegalArgumentException if the long value is too large to be
0:      *      represented by six bytes.
1:      */
0:     public static void long6BytesToBigEndianBytes(byte[] buffer, int offset,
0:                                                   long v) {
0:         if (v > MAX_LONG_6_BYTES_SIGNED) {
0:             throw new IllegalArgumentException("value too large to be " +
0:                     "represented by six bytes (signed): " + v);
1:         }
0:         buffer[offset++] = (byte) ((v >>> 40) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 32) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 24) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 16) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
1:     }
1: 
1:     /**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eff3919
/////////////////////////////////////////////////////////////////////////
1:      * Get a byte from the buffer.
1:      */
0:     public static final byte getByte(byte[] buffer, int offset) {
1:         return buffer[ offset ];
1:     }
1: 
1:     /**
commit:93cfc7f
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:90731d5
/////////////////////////////////////////////////////////////////////////
1:      /**
0:      * Build a Java boolean from a byte.
1:      *
1:      */
0:     public static final boolean getBoolean(byte[] buffer, int offset) {
0: 		if ( buffer[ offset ] == 0 ) { return false; }
0: 		else { return true; }
1:     }
1: 	
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: public class SignedBinary {
1:     // Hide the default constructor, this is a static class.
1:     private SignedBinary() {
1:     }
1:     /**
1:      * Unix byte-order for signed binary representations.
1:      */
1:     public final static int BIG_ENDIAN = 1;
1:     /**
1:      * Intel 80/86 reversed byte-order for signed binary representations.
1:      */
1:     public final static int LITTLE_ENDIAN = 2;
1:     /**
1:      * Build a Java short from a 2-byte signed binary representation.
0:      *
1:      * @throws IllegalArgumentException if the specified byte order is not recognized.
1:      */
0:     public static final short getShort(byte[] buffer, int offset) {
1:         return (short) (((buffer[offset + 0] & 0xff) << 8) +
1:                 ((buffer[offset + 1] & 0xff) << 0));
1:     }
1:     /**
1:      * Build a Java int from a 4-byte signed binary representation.
0:      *
1:      * @throws IllegalArgumentException if the specified byte order is not recognized.
1:      */
1:     public static final int getInt(byte[] buffer, int offset) {
1:         return (int) (((buffer[offset + 0] & 0xff) << 24) +
1:                 ((buffer[offset + 1] & 0xff) << 16) +
1:                 ((buffer[offset + 2] & 0xff) << 8) +
1:                 ((buffer[offset + 3] & 0xff) << 0));
1:     }
1:     /**
1:      * Build a Java long from an 8-byte signed binary representation.
0:      *
1:      * @throws IllegalArgumentException if the specified byte order is not recognized.
1:      */
1:     public static final long getLong(byte[] buffer, int offset) {
1:         return (long) (((buffer[offset + 0] & 0xffL) << 56) +
1:                 ((buffer[offset + 1] & 0xffL) << 48) +
1:                 ((buffer[offset + 2] & 0xffL) << 40) +
1:                 ((buffer[offset + 3] & 0xffL) << 32) +
1:                 ((buffer[offset + 4] & 0xffL) << 24) +
1:                 ((buffer[offset + 5] & 0xffL) << 16) +
1:                 ((buffer[offset + 6] & 0xffL) << 8) +
1:                 ((buffer[offset + 7] & 0xffL) << 0));
1:     }
0:     //--------------------- input converters -------------------------------------
1:     /**
0:      * Write a Java short to a 2-byte big endian signed binary representation.
1:      */
0:     public static final void shortToBigEndianBytes(byte[] buffer, int offset, short v) {
0:         buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
1:     }
1:     /**
0:      * Write a Java int to a 4-byte big endian signed binary representation.
1:      */
0:     public static final void intToBigEndianBytes(byte[] buffer, int offset, int v) {
0:         buffer[offset++] = (byte) ((v >>> 24) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 16) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
1:     }
1:     /**
0:      * Write a Java long to an 8-byte big endian signed binary representation.
1:      */
0:     public static final void longToBigEndianBytes(byte[] buffer, int offset, long v) {
0:         buffer[offset++] = (byte) ((v >>> 56) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 48) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 40) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 32) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 24) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 16) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
0:         buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.SignedBinary
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0: */
1: package org.apache.derby.client.am;
1: 
0: public class SignedBinary
0: {
0:   // Hide the default constructor, this is a static class.
0:   private SignedBinary () {}
1: 
0:   /**
0:    * Unix byte-order for signed binary representations.
0:    */
0:   public final static int BIG_ENDIAN = 1;
1: 
0:   /**
0:    * Intel 80/86 reversed byte-order for signed binary representations.
0:    */
0:   public final static int LITTLE_ENDIAN = 2;
1: 
0:   /**
0:    * Build a Java short from a 2-byte signed binary representation.
0:    *
0:    * @exception IllegalArgumentException if the specified byte order is not recognized.
0:    */
0:   public static final short getShort (byte[] buffer, int offset)
0:   {
0:     return (short) (((buffer[offset+0] & 0xff) << 8) +
0:                     ((buffer[offset+1] & 0xff) << 0));
0:   }
1: 
0:   /**
0:    * Build a Java int from a 4-byte signed binary representation.
0:    *
0:    * @exception IllegalArgumentException if the specified byte order is not recognized.
0:    */
0:   public static final int getInt (byte[] buffer, int offset)
0:   {
0:     return (int) (((buffer[offset+0] & 0xff) << 24) +
0:                   ((buffer[offset+1] & 0xff) << 16) +
0:                   ((buffer[offset+2] & 0xff) << 8) +
0:                   ((buffer[offset+3] & 0xff) << 0));
0:   }
1: 
0:   /**
0:    * Build a Java long from an 8-byte signed binary representation.
0:    *
0:    * @exception IllegalArgumentException if the specified byte order is not recognized.
0:    */
0:   public static final long getLong (byte[] buffer, int offset)
0:   {
0:     return (long) (((buffer[offset+0] & 0xffL) << 56) +
0:                    ((buffer[offset+1] & 0xffL) << 48) +
0:                    ((buffer[offset+2] & 0xffL) << 40) +
0:                    ((buffer[offset+3] & 0xffL) << 32) +
0:                    ((buffer[offset+4] & 0xffL) << 24) +
0:                    ((buffer[offset+5] & 0xffL) << 16) +
0:                    ((buffer[offset+6] & 0xffL) << 8) +
0:                    ((buffer[offset+7] & 0xffL) << 0));
0:   }
1: 
0:   //--------------------- input converters -------------------------------------
1: 
0:   /**
0:    * Write a Java short to a 2-byte big endian signed binary representation.
0:    */
0:   public static final void shortToBigEndianBytes (byte[] buffer, int offset, short v)
0:   {
0:     buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
0:   }
1: 
0:   /**
0:    * Write a Java int to a 4-byte big endian signed binary representation.
0:    */
0:   public static final void intToBigEndianBytes (byte[] buffer, int offset, int v)
0:   {
0:     buffer[offset++] = (byte) ((v >>> 24) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 16) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 8) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 0) & 0xFF);
0:   }
1: 
0:   /**
0:    * Write a Java long to an 8-byte big endian signed binary representation.
0:    */
0:   public static final void longToBigEndianBytes (byte[] buffer, int offset, long v)
0:   {
0:     buffer[offset++] = (byte) ((v >>> 56) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 48) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 40) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 32) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 24) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>> 16) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>>  8) & 0xFF);
0:     buffer[offset++] = (byte) ((v >>>  0) & 0xFF);
0:   }
0: }
============================================================================