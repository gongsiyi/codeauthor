1:b3eb01a: /*
1:b3eb01a: 
1:b3eb01a:    Derby - Class org.apache.derby.impl.services.locks.LockTable
1:b3eb01a: 
1:b3eb01a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b3eb01a:    contributor license agreements.  See the NOTICE file distributed with
1:b3eb01a:    this work for additional information regarding copyright ownership.
1:b3eb01a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:b3eb01a:    (the "License"); you may not use this file except in compliance with
1:b3eb01a:    the License.  You may obtain a copy of the License at
1:b3eb01a: 
1:b3eb01a:       http://www.apache.org/licenses/LICENSE-2.0
1:b3eb01a: 
1:b3eb01a:    Unless required by applicable law or agreed to in writing, software
1:b3eb01a:    distributed under the License is distributed on an "AS IS" BASIS,
1:b3eb01a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b3eb01a:    See the License for the specific language governing permissions and
1:b3eb01a:    limitations under the License.
1:b3eb01a: 
1:b3eb01a: */
1:b3eb01a: 
1:b3eb01a: package org.apache.derby.impl.services.locks;
1:b3eb01a: 
1:b3eb01a: import java.util.Map;
1:b3eb01a: import org.apache.derby.iapi.error.StandardException;
1:b3eb01a: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:b3eb01a: import org.apache.derby.iapi.services.locks.Latch;
1:b3eb01a: import org.apache.derby.iapi.services.locks.Lockable;
1:b3eb01a: 
1:b3eb01a: /**
1:b3eb01a:  * Interface which must be implemented by lock table classes.
1:b3eb01a:  */
1:b3eb01a: interface LockTable {
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Lock an object.
1:b3eb01a:      *
1:b3eb01a:      * @param compatibilitySpace the compatibility space
1:b3eb01a:      * @param ref the object to lock
1:b3eb01a:      * @param qualifier qualifier of the lock
1:b3eb01a:      * @param timeout maximum time to wait in milliseconds
1:85e3e12:      * ({@code C_LockFactory.NO_WAIT} means don't wait)
1:85e3e12:      * @return a reference to the lock, or <code>null</code> if the lock
1:85e3e12:      * couldn't be obtained immediately and the timeout was {@code NO_WAIT}
1:85e3e12:      * or {@code LockOwner} had the {@code noWait} flag set
1:b3eb01a:      * @exception StandardException if the lock could not be obtained
1:b3eb01a:      */
1:b3eb01a:     Lock lockObject(CompatibilitySpace compatibilitySpace, Lockable ref,
1:b3eb01a:                     Object qualifier, int timeout)
1:b3eb01a:             throws StandardException;
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Unlock an object previously locked by <code>lockObject()</code>.
1:b3eb01a:      *
1:b3eb01a:      * @param item the lock to unlock
1:b3eb01a:      * @param unlockCount the number of times to unlock the item; or zero,
1:b3eb01a:      * meaning take the unlock count from the item
1:b3eb01a:      */
1:b3eb01a:     void unlock(Latch item, int unlockCount);
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Unlock an object once if it is present in the specified group. Also
1:b3eb01a:      * remove the object from the group.
1:b3eb01a:      *
1:b3eb01a:      * @param space the compatibility space
1:b3eb01a:      * @param ref a reference to the locked object
1:b3eb01a:      * @param qualifier qualifier of the lock
1:b3eb01a:      * @param group a map representing the locks in a group
1:b3eb01a:      * @return the corresponding lock in the group map, or <code>null</code> if
1:b3eb01a:      * the object was not unlocked
1:b3eb01a:      */
1:b3eb01a:     Lock unlockReference(CompatibilitySpace space, Lockable ref,
1:b3eb01a:                          Object qualifier, Map group);
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Notify the lock table that it has one more waiter.
1:b3eb01a:      */
1:b3eb01a:     void oneMoreWaiter();
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Notify the lock table that it has one less waiter.
1:b3eb01a:      *
1:b3eb01a:      */
1:b3eb01a:     void oneLessWaiter();
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Check whether there are anyone blocked in the lock table.
1:b3eb01a:      *
1:b3eb01a:      * @return <code>true</code> if someone is blocked, <code>false</code>
1:b3eb01a:      * otherwise
1:b3eb01a:      */
1:b3eb01a:     boolean anyoneBlocked();
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Lock an object and release the lock immediately. Equivalent to
1:b3eb01a:      * <pre>
1:b3eb01a:      * Lock lock = lockTable.lockObject(space, ref, qualifier, timeout);
1:b3eb01a:      * lockTable.unlock(lock, 1);
1:b3eb01a:      * </pre>
1:b3eb01a:      * except that the implementation might be more efficient.
1:b3eb01a:      *
1:b3eb01a:      * @param space the compatibility space
1:b3eb01a:      * @param ref a reference to the locked object
1:b3eb01a:      * @param qualifier qualifier of the lock
1:b3eb01a:      * @param timeout maximum time to wait in milliseconds
1:85e3e12:      * ({@code C_LockFactory.NO_WAIT} means don't wait)
1:b3eb01a:      * @return <code>true</code> if the object was locked, or
1:85e3e12:      * {@code false} if the object couldn't be locked immediately and timeout
1:85e3e12:      * was {@code NO_WAIT} or {@code LockOwner} had the {@code noWait} flag set
1:b3eb01a:      * @exception StandardException if the lock could not be obtained
1:b3eb01a:      */
1:b3eb01a:     boolean zeroDurationLockObject(CompatibilitySpace space, Lockable ref,
1:b3eb01a:                                    Object qualifier, int timeout)
1:b3eb01a:             throws StandardException;
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Create a map containing a snapshot of all the (<code>Lockable</code>,
1:b3eb01a:      * <code>LockControl</code>) pairs in the lock table.
1:b3eb01a:      *
1:b3eb01a:      * @return a shallow clone of the lock table
1:b3eb01a:      */
1:b3eb01a:     Map shallowClone();
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Set the deadlock timeout.
1:b3eb01a:      *
1:b3eb01a:      * @param timeout deadlock timeout in milliseconds
1:b3eb01a:      */
1:b3eb01a:     void setDeadlockTimeout(int timeout);
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Set the wait timeout.
1:b3eb01a:      *
1:b3eb01a:      * @param timeout wait timeout in milliseconds
1:b3eb01a:      */
1:b3eb01a:     void setWaitTimeout(int timeout);
1:b3eb01a: 
1:b3eb01a:     /**
1:39c6ffc:      * Get the wait timeout in milliseconds.
1:39c6ffc:      */
1:39c6ffc:     int getWaitTimeout();
1:39c6ffc: 
1:39c6ffc:     /**
1:b3eb01a:      * Enable or disable tracing of deadlocks.
1:b3eb01a:      *
1:b3eb01a:      * @param flag <code>true</code> enables tracing, <code>false</code>
1:b3eb01a:      * disables tracing
1:b3eb01a:      */
1:b3eb01a:     void setDeadlockTrace(boolean flag);
1:b3eb01a: 
1:b3eb01a:     /**
1:b3eb01a:      * Add all waiters in the lock table to the specified map.
1:b3eb01a:      *
1:b3eb01a:      * @param waiters the map to add the waiters to
1:b3eb01a:      * @see LockControl#addWaiters
1:b3eb01a:      */
1:a15a470:     void addWaiters(Map<Object,Object> waiters);
1:b3eb01a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1:     void addWaiters(Map<Object,Object> waiters);
commit:39c6ffc
/////////////////////////////////////////////////////////////////////////
1:      * Get the wait timeout in milliseconds.
1:      */
1:     int getWaitTimeout();
1: 
1:     /**
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:85e3e12
/////////////////////////////////////////////////////////////////////////
1:      * ({@code C_LockFactory.NO_WAIT} means don't wait)
1:      * @return a reference to the lock, or <code>null</code> if the lock
1:      * couldn't be obtained immediately and the timeout was {@code NO_WAIT}
1:      * or {@code LockOwner} had the {@code noWait} flag set
/////////////////////////////////////////////////////////////////////////
1:      * ({@code C_LockFactory.NO_WAIT} means don't wait)
1:      * {@code false} if the object couldn't be locked immediately and timeout
1:      * was {@code NO_WAIT} or {@code LockOwner} had the {@code noWait} flag set
commit:b3eb01a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.locks.LockTable
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
1: import java.util.Map;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1: import org.apache.derby.iapi.services.locks.Latch;
1: import org.apache.derby.iapi.services.locks.Lockable;
1: 
1: /**
1:  * Interface which must be implemented by lock table classes.
1:  */
1: interface LockTable {
1: 
1:     /**
1:      * Lock an object.
1:      *
1:      * @param compatibilitySpace the compatibility space
1:      * @param ref the object to lock
1:      * @param qualifier qualifier of the lock
1:      * @param timeout maximum time to wait in milliseconds
0:      * (<code>LockFactory.NO_WAIT</code> means don't wait)
0:      * @return a reference to the lock, or <code>null</code> if the timeout was
0:      * <code>NO_WAIT</code> and the lock couldn't be obtained immediately
1:      * @exception StandardException if the lock could not be obtained
1:      */
1:     Lock lockObject(CompatibilitySpace compatibilitySpace, Lockable ref,
1:                     Object qualifier, int timeout)
1:             throws StandardException;
1: 
1:     /**
1:      * Unlock an object previously locked by <code>lockObject()</code>.
1:      *
1:      * @param item the lock to unlock
1:      * @param unlockCount the number of times to unlock the item; or zero,
1:      * meaning take the unlock count from the item
1:      */
1:     void unlock(Latch item, int unlockCount);
1: 
1:     /**
1:      * Unlock an object once if it is present in the specified group. Also
1:      * remove the object from the group.
1:      *
1:      * @param space the compatibility space
1:      * @param ref a reference to the locked object
1:      * @param qualifier qualifier of the lock
1:      * @param group a map representing the locks in a group
1:      * @return the corresponding lock in the group map, or <code>null</code> if
1:      * the object was not unlocked
1:      */
1:     Lock unlockReference(CompatibilitySpace space, Lockable ref,
1:                          Object qualifier, Map group);
1: 
1:     /**
1:      * Notify the lock table that it has one more waiter.
1:      */
1:     void oneMoreWaiter();
1: 
1:     /**
1:      * Notify the lock table that it has one less waiter.
1:      *
1:      */
1:     void oneLessWaiter();
1: 
1:     /**
1:      * Check whether there are anyone blocked in the lock table.
1:      *
1:      * @return <code>true</code> if someone is blocked, <code>false</code>
1:      * otherwise
1:      */
1:     boolean anyoneBlocked();
1: 
1:     /**
1:      * Lock an object and release the lock immediately. Equivalent to
1:      * <pre>
1:      * Lock lock = lockTable.lockObject(space, ref, qualifier, timeout);
1:      * lockTable.unlock(lock, 1);
1:      * </pre>
1:      * except that the implementation might be more efficient.
1:      *
1:      * @param space the compatibility space
1:      * @param ref a reference to the locked object
1:      * @param qualifier qualifier of the lock
1:      * @param timeout maximum time to wait in milliseconds
0:      * (<code>LockFactory.NO_WAIT</code> means don't wait)
1:      * @return <code>true</code> if the object was locked, or
0:      * <code>false</code>if the timeout was <code>NO_WAIT</code> and the lock
0:      * couldn't be obtained immediately
1:      * @exception StandardException if the lock could not be obtained
1:      */
1:     boolean zeroDurationLockObject(CompatibilitySpace space, Lockable ref,
1:                                    Object qualifier, int timeout)
1:             throws StandardException;
1: 
1:     /**
1:      * Create a map containing a snapshot of all the (<code>Lockable</code>,
1:      * <code>LockControl</code>) pairs in the lock table.
1:      *
1:      * @return a shallow clone of the lock table
1:      */
1:     Map shallowClone();
1: 
1:     /**
1:      * Set the deadlock timeout.
1:      *
1:      * @param timeout deadlock timeout in milliseconds
1:      */
1:     void setDeadlockTimeout(int timeout);
1: 
1:     /**
1:      * Set the wait timeout.
1:      *
1:      * @param timeout wait timeout in milliseconds
1:      */
1:     void setWaitTimeout(int timeout);
1: 
1:     /**
1:      * Enable or disable tracing of deadlocks.
1:      *
1:      * @param flag <code>true</code> enables tracing, <code>false</code>
1:      * disables tracing
1:      */
1:     void setDeadlockTrace(boolean flag);
1: 
1:     /**
1:      * Add all waiters in the lock table to the specified map.
1:      *
1:      * @param waiters the map to add the waiters to
1:      * @see LockControl#addWaiters
1:      */
0:     void addWaiters(Map waiters);
1: }
============================================================================