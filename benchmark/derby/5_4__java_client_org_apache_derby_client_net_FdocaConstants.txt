1:33776ff: /*
7:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.FdocaConstants
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:70f7692: class FdocaConstants {
1:33776ff: 
1:b565f41: // PROTOCOL FD:OCA constants used (subset)
1:70f7692:     static final int FDOCA_TYPE_VARBYTES = 0x02;
1:70f7692:     static final int FDOCA_TYPE_PSCLBYTE = 0x07;
1:70f7692:     static final int FDOCA_TYPE_VARCHAR = 0x11;
1:70f7692:     static final int FDOCA_TYPE_PSCLCHAR = 0x19;
1:70f7692:     static final int FDOCA_TYPE_DECIMAL = 0x30;
1:70f7692:     static final int FDOCA_TYPE_NUMERIC_CHAR = 0x32;
1:70f7692:     static final int FDOCA_TYPE_LOBBYTES = 0x50;
1:70f7692:     static final int FDOCA_TYPE_LOBCHAR = 0x51;
1:33776ff: 
1:70f7692:     static final int CPT_TRIPLET_TYPE = 0x7F;      // CPT triplet type
1:70f7692:     static final int MDD_TRIPLET_TYPE = 0x78;      // MDD triplet type
1:70f7692:     static final int NGDA_TRIPLET_TYPE = 0x76;     // N-GDA triplet type
1:70f7692:     static final int RLO_TRIPLET_TYPE = 0x71;      // RLO triplet type
1:70f7692:     static final int SDA_TRIPLET_TYPE = 0x70;      // SDA triplet type
1:33776ff: 
1:70f7692:     static final int SQLDTARD_LID = 0xF0;
1:70f7692:     static final int SQLCADTA_LID = 0xE0;
1:70f7692:     static final int SQLDTAGRP_LID = 0xD0;         // SQLDTAGRP LID
1:70f7692:     static final int NULL_LID = 0x00;
1:33776ff: 
1:70f7692:     static final int INDICATOR_NULLABLE = 0x00;
1:70f7692:     static final int NULL_DATA = 0xFF;
1:33776ff: 
1:70f7692:     static final int MAX_VARS_IN_NGDA = 84;        // Number of SQLVARs in full SQLDTAGRP
1:70f7692:     // N-GDA or CPT
1:70f7692:     static final int MDD_TRIPLET_SIZE = 7;         // Size of MDD triplet
1:70f7692:     static final int SQLDTARD_RLO_SIZE = 6;        // size of SQLDTARD minus MDD
1:70f7692:     static final int SQLCADTA_RLO_SIZE = 9;        // size of SQLCDTA minus MDD
1:70f7692:     static final int SDA_TRIPLET_SIZE = 12;        // Size of SDA triplet
1:33776ff: 
1:70f7692:     static final byte[] MDD_SQLDTAGRP_TOSEND = {
2:70f7692:         (byte) 0x07, (byte) 0x78, (byte) 0x00, (byte) 0x05,
1:70f7692:         (byte) 0x02, (byte) 0x01, (byte) 0xD0
2:70f7692:     };
1:33776ff: 
1:70f7692:     static final byte[] MDD_SQLDTA_TOSEND = {
1:70f7692:         (byte) 0x07, (byte) 0x78, (byte) 0x00, (byte) 0x05,
1:70f7692:         (byte) 0x03, (byte) 0x01, (byte) 0xE4
1:70f7692:     };
1:33776ff: 
1:70f7692:     // Hard-coded SQLDTA RLO
1:70f7692:     static final byte[] SQLDTA_RLO_TOSEND = {
1:70f7692:         (byte) 0x06, (byte) 0x71, (byte) 0xE4,
1:70f7692:         (byte) 0xD0, (byte) 0x00, (byte) 0x01
1:70f7692:     };
1:33776ff: 
1:70f7692:     // Hard-coded SQLCADTA RLO
1:70f7692:     static final byte[] SQLCADTA_RLO_TOSEND = {
1:70f7692:         (byte) 0x09, (byte) 0x71, (byte) 0xE0,
1:70f7692:         (byte) 0x54, (byte) 0x00, (byte) 0x01,
1:70f7692:         (byte) 0xD0, (byte) 0x00, (byte) 0x01
1:70f7692:     };
1:33776ff: 
1:70f7692:     // Hard-coded SQLDTARD RLO
1:70f7692:     static final byte[] SQLDTARD_RLO_TOSEND = {
1:70f7692:         (byte) 0X06, (byte) 0X71, (byte) 0xF0,
1:70f7692:         (byte) 0xE0, (byte) 0x00, (byte) 0x00
1:70f7692:     };
1:33776ff: 
1:70f7692:     // following code added for parseSQLDTARD prototype
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_START = 0;
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_END = 1;
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_MDD = 2;
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_SDA = 3;
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_RLO = 4;
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_GDA = 5;
1:33776ff:     static final int SQLDTARD_TRIPLET_TYPE_CPT = 6;
1:33776ff: 
1:33776ff:     static final boolean[][] SQLDTARD_TRIPLET_TYPES = {
1:70f7692:         //   /*START*/, /*END*/, /*MDD*/, /*SDA*/, /*RLO*/, /*GDA*/, /*CPT*/    // next ->
1:70f7692: /*START*/ {false, false, true, false, false, true, false},
1:70f7692: /* END */ {false, false, false, false, false, false, false},
1:70f7692: /* MDD */ {false, false, false, true, true, true, false}, //           |
1:70f7692: /* SDA */ {false, false, true, false, false, false, false}, // previous  |
1:70f7692: /* RLO */ {false, true, true, false, true, false, false}, //          \ /
1:70f7692: /* GDA */ {false, false, true, false, true, false, true},
1:70f7692: /* CPT */ {false, false, true, false, true, false, true}};
1:33776ff: 
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_START = 0;
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_END = 1;
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_SDA = 2;
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_0 = 3;
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_D0 = 4;
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_E0 = 5;
1:33776ff:     static final int SQLDTARD_TRIPLET_ID_F0 = 6;
1:33776ff: 
1:33776ff:     static final boolean[][] SQLDTARD_TRIPLET_IDS = {
1:70f7692:         //   /*START*/, /*END*/, /*SDA*/, /*0*/, /*D0*/, /*E0*/, /*F4*/ // next ->
1:70f7692: /*START*/  {false, false, false, true, true, false, false},
1:70f7692: /* END */  {false, false, false, false, false, false, false},
1:70f7692: /* SDA */  {false, false, false, true, false, false, false},
1:70f7692: /* 0   */  {false, false, true, true, true, true, true},
1:70f7692: /* D0 */   {false, false, false, true, false, true, false},
1:70f7692: /* E0 */   {false, false, false, true, false, false, true},
1:70f7692: /* F4 */   {false, true, false, false, false, false, false}};
1:33776ff: 
1:33776ff:     static final int RLO_GROUP_LID = 0;
1:33776ff:     static final int RLO_ELEMENT_TAKEN = 1;
1:33776ff:     static final int RLO_REP_FACTOR = 2;
1:33776ff: 
1:33776ff:     static final int[][] RLO_SQLCADTA = {// GROUP LID , ELEM TAKEN,  REP_FACTOR
1:70f7692:         {0x54, 0, 1},
1:70f7692:         {0xD0, 0, 1}};
1:33776ff: 
1:33776ff:     static final int[][] RLO_SQLDTARD = {// GROUP LID , ELEM TAKEN,  REP_FACTOR
1:70f7692:         {0xE0, 0, 0}};
1:33776ff: 
1:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
1: // PROTOCOL FD:OCA constants used (subset)
commit:0326967
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:90731d5
/////////////////////////////////////////////////////////////////////////
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: class FdocaConstants {
0:     static final int FDOCA_TYPE_FIXEDBYTES = 0x01;
0:     static final int FDOCA_TYPE_NFIXEDBYTES = 0x81;
1:     static final int FDOCA_TYPE_VARBYTES = 0x02;
0:     static final int FDOCA_TYPE_NVARBYTES = 0x82;
0:     static final int FDOCA_TYPE_NTBYTES = 0x03;
0:     static final int FDOCA_TYPE_NNTBYTES = 0x83;
1:     static final int FDOCA_TYPE_PSCLBYTE = 0x07;
0:     static final int FDOCA_TYPE_NPSCLBYTE = 0x87;
0:     static final int FDOCA_TYPE_FIXEDCHAR = 0x10;
0:     static final int FDOCA_TYPE_NFIXEDCHAR = 0x90;
1:     static final int FDOCA_TYPE_VARCHAR = 0x11;
0:     static final int FDOCA_TYPE_NVARCHAR = 0x91;
0:     static final int FDOCA_TYPE_NTCHAR = 0x14;
0:     static final int FDOCA_TYPE_NNTCHAR = 0x94;
1:     static final int FDOCA_TYPE_PSCLCHAR = 0x19;
0:     static final int FDOCA_TYPE_NPSCLCHAR = 0x99;
0:     static final int FDOCA_TYPE_INTEGER_BE = 0x23;
0:     static final int FDOCA_TYPE_NINTEGER_BE = 0xA3;
0:     static final int FDOCA_TYPE_INTEGER_LE = 0x24;
0:     static final int FDOCA_TYPE_NINTEGER_LE = 0xA4;
1:     static final int FDOCA_TYPE_DECIMAL = 0x30;
0:     static final int FDOCA_TYPE_NDECIMAL = 0xB0;
1:     static final int FDOCA_TYPE_NUMERIC_CHAR = 0x32;
0:     static final int FDOCA_TYPE_NNUMERIC_CHAR = 0xB2;
0:     static final int FDOCA_TYPE_FLOAT_X86 = 0x47;
0:     static final int FDOCA_TYPE_NFLOAT_X86 = 0xC7;
0:     static final int FDOCA_TYPE_FLOAT_IEEE = 0x48;
0:     static final int FDOCA_TYPE_NFLOAT_IEEE = 0xC8;
1:     static final int FDOCA_TYPE_LOBBYTES = 0x50;
0:     static final int FDOCA_TYPE_NLOBBYTES = 0xD0;
1:     static final int FDOCA_TYPE_LOBCHAR = 0x51;
0:     static final int FDOCA_TYPE_NLOBCHAR = 0xD1;
0:     // PROTOCOL Type constants.
0:     static final int PROTOCOL_TYPE_INTEGER = 0x02;
0:     static final int PROTOCOL_TYPE_NINTEGER = 0x03;
0:     static final int PROTOCOL_TYPE_SMALL = 0x04;
0:     static final int PROTOCOL_TYPE_NSMALL = 0x05;
0:     static final int PROTOCOL_TYPE_1BYTE_INT = 0x06;
0:     static final int PROTOCOL_TYPE_N1BYTE_INT = 0x07;
0:     static final int PROTOCOL_TYPE_FLOAT16 = 0x08;
0:     static final int PROTOCOL_TYPE_NFLOAT16 = 0x09;
0:     static final int PROTOCOL_TYPE_FLOAT8 = 0x0A;
0:     static final int PROTOCOL_TYPE_NFLOAT8 = 0x0B;
0:     static final int PROTOCOL_TYPE_FLOAT4 = 0x0C;
0:     static final int PROTOCOL_TYPE_NFLOAT4 = 0x0D;
0:     static final int PROTOCOL_TYPE_DECIMAL = 0x0E;
0:     static final int PROTOCOL_TYPE_NDECIMAL = 0x0F;
0:     static final int PROTOCOL_TYPE_NUMERIC_CHAR = 0x12;
0:     static final int PROTOCOL_TYPE_NNUMERIC_CHAR = 0x13;
0:     static final int PROTOCOL_TYPE_RSET_LOC = 0x14;
0:     static final int PROTOCOL_TYPE_NRSET_LOC = 0x15;
0:     static final int PROTOCOL_TYPE_INTEGER8 = 0x16;
0:     static final int PROTOCOL_TYPE_NINTEGER8 = 0x17;
0:     static final int PROTOCOL_TYPE_LOBLOC = 0x18;
0:     static final int PROTOCOL_TYPE_NLOBLOC = 0x19;
0:     static final int PROTOCOL_TYPE_CLOBLOC = 0x1A;
0:     static final int PROTOCOL_TYPE_NCLOBLOC = 0x1B;
0:     static final int PROTOCOL_TYPE_DBCSCLOBLOC = 0x1C;
0:     static final int PROTOCOL_TYPE_NDBCSCLOBLOC = 0x1D;
0:     static final int PROTOCOL_TYPE_DATE = 0x20;
0:     static final int PROTOCOL_TYPE_NDATE = 0x21;
0:     static final int PROTOCOL_TYPE_TIME = 0x22;
0:     static final int PROTOCOL_TYPE_NTIME = 0x23;
0:     static final int PROTOCOL_TYPE_TIMESTAMP = 0x24;
0:     static final int PROTOCOL_TYPE_NTIMESTAMP = 0x25;
0:     static final int PROTOCOL_TYPE_FIXBYTE = 0x26;
0:     static final int PROTOCOL_TYPE_NFIXBYTE = 0x27;
0:     static final int PROTOCOL_TYPE_VARBYTE = 0x28;
0:     static final int PROTOCOL_TYPE_NVARBYTE = 0x29;
0:     static final int PROTOCOL_TYPE_LONGVARBYTE = 0x2A;
0:     static final int PROTOCOL_TYPE_NLONGVARBYTE = 0x2B;
0:     static final int PROTOCOL_TYPE_NTERMBYTE = 0x2C;
0:     static final int PROTOCOL_TYPE_NNTERMBYTE = 0x2D;
0:     static final int PROTOCOL_TYPE_CSTR = 0x2E;
0:     static final int PROTOCOL_TYPE_NCSTR = 0x2F;
0:     static final int PROTOCOL_TYPE_CHAR = 0x30;
0:     static final int PROTOCOL_TYPE_NCHAR = 0x31;
0:     static final int PROTOCOL_TYPE_VARCHAR = 0x32;
0:     static final int PROTOCOL_TYPE_NVARCHAR = 0x33;
0:     static final int PROTOCOL_TYPE_LONG = 0x34;
0:     static final int PROTOCOL_TYPE_NLONG = 0x35;
0:     static final int PROTOCOL_TYPE_MIX = 0x3C;
0:     static final int PROTOCOL_TYPE_NMIX = 0x3D;
0:     static final int PROTOCOL_TYPE_VARMIX = 0x3E;
0:     static final int PROTOCOL_TYPE_NVARMIX = 0x3F;
0:     static final int PROTOCOL_TYPE_LONGMIX = 0x40;
0:     static final int PROTOCOL_TYPE_NLONGMIX = 0x41;
0:     static final int PROTOCOL_TYPE_CSTRMIX = 0x42;
0:     static final int PROTOCOL_TYPE_NCSTRMIX = 0x43;
0:     static final int PROTOCOL_TYPE_PSCLBYTE = 0x44;
0:     static final int PROTOCOL_TYPE_NPSCLBYTE = 0x45;
0:     // --- Override LIDs 0x50 - 0xAF
0:     static final int FIRST_OVERRIDE_LID = 0x50;
0:     static final int LAST_OVERRIDE_LID = 0xAF;
0:     static final int PROTOCOL_TYPE_LOBBYTES = 0xC8;
0:     static final int PROTOCOL_TYPE_NLOBBYTES = 0xC9;
0:     static final int PROTOCOL_TYPE_LOBCSBCS = 0xCA;
0:     static final int PROTOCOL_TYPE_NLOBCSBCS = 0xCB;
0:     static final int PROTOCOL_TYPE_LOBCDBCS = 0xCC;
0:     static final int PROTOCOL_TYPE_NLOBCDBCS = 0xCD;
0:     static final int PROTOCOL_TYPE_LOBCMIXED = 0xCE;
0:     static final int PROTOCOL_TYPE_NLOBCMIXED = 0xCF;
1:     static final int CPT_TRIPLET_TYPE = 0x7F;      // CPT triplet type
1:     static final int MDD_TRIPLET_TYPE = 0x78;      // MDD triplet type
1:     static final int NGDA_TRIPLET_TYPE = 0x76;     // N-GDA triplet type
1:     static final int RLO_TRIPLET_TYPE = 0x71;      // RLO triplet type
1:     static final int SDA_TRIPLET_TYPE = 0x70;      // SDA triplet type
1:     static final int SQLDTARD_LID = 0xF0;
1:     static final int SQLCADTA_LID = 0xE0;
1:     static final int SQLDTAGRP_LID = 0xD0;         // SQLDTAGRP LID
1:     static final int NULL_LID = 0x00;
1:     static final int INDICATOR_NULLABLE = 0x00;
1:     static final int NULL_DATA = 0xFF;
1:     static final int MAX_VARS_IN_NGDA = 84;        // Number of SQLVARs in full SQLDTAGRP
1:     // N-GDA or CPT
1:     static final int MDD_TRIPLET_SIZE = 7;         // Size of MDD triplet
1:     static final int SQLDTARD_RLO_SIZE = 6;        // size of SQLDTARD minus MDD
1:     static final int SQLCADTA_RLO_SIZE = 9;        // size of SQLCDTA minus MDD
1:     static final int SDA_TRIPLET_SIZE = 12;        // Size of SDA triplet
0:     static final int SQLDTAGRP_SIZE = 3;           // Size of SQLDTAGRP descriptor
0:     static final int CPT_SIZE = 3;                 // Size of CPT descriptor
0:     static final int SQLDTAGRP_COL_DSC_SIZE = 3;   // Env. LID & len. bytes
0:     static final int MDD_REST_SIZE = 5;            // Size of the MDD group minus length and type
0:     static final int MDD_SDA_TRIPLET_SIZE = 19;
0:     static final int MDD_SDA_PROTOCOLTYPE_OFFSET = 6;
0:     static final int MDD_SDA_FDOCALID_OFFSET = 9;
0:     static final int MDD_SDA_FDOCATYPE_OFFSET = 10;
0:     static final int MDD_SDA_CCSID_OFFSET = 11;
0:     static final int MDD_SDA_LENGTH_OFFSET = 17;
0:     static final byte[] defaultMddSdaBytes = {
1:         (byte) 0x07, (byte) 0x78, (byte) 0x00, (byte) 0x05,
0:         (byte) 0x01, (byte) 0x01, (byte) 0x00, // protocol type
0:         (byte) 0x0C, (byte) 0x70, (byte) 0x00, // fdoca triplet lid
0:         (byte) 0x00, // fdoca field type
0:         (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, // ccsid
0:         (byte) 0x01, (byte) 0x01,
0:         (byte) 0x7F, (byte) 0xFF                           // length
1:     };
1:     static final byte[] MDD_SQLDTAGRP_TOSEND = {
1:         (byte) 0x07, (byte) 0x78, (byte) 0x00, (byte) 0x05,
1:         (byte) 0x02, (byte) 0x01, (byte) 0xD0
1:     };
1:     static final byte[] MDD_SQLDTA_TOSEND = {
1:         (byte) 0x07, (byte) 0x78, (byte) 0x00, (byte) 0x05,
1:         (byte) 0x03, (byte) 0x01, (byte) 0xE4
1:     };
1:     // Hard-coded SQLDTA RLO
1:     static final byte[] SQLDTA_RLO_TOSEND = {
1:         (byte) 0x06, (byte) 0x71, (byte) 0xE4,
1:         (byte) 0xD0, (byte) 0x00, (byte) 0x01
1:     };
1:     // Hard-coded SQLCADTA RLO
1:     static final byte[] SQLCADTA_RLO_TOSEND = {
1:         (byte) 0x09, (byte) 0x71, (byte) 0xE0,
1:         (byte) 0x54, (byte) 0x00, (byte) 0x01,
1:         (byte) 0xD0, (byte) 0x00, (byte) 0x01
1:     };
1:     // Hard-coded SQLDTARD RLO
1:     static final byte[] SQLDTARD_RLO_TOSEND = {
1:         (byte) 0X06, (byte) 0X71, (byte) 0xF0,
1:         (byte) 0xE0, (byte) 0x00, (byte) 0x00
1:     };
1:     // following code added for parseSQLDTARD prototype
/////////////////////////////////////////////////////////////////////////
1:         //   /*START*/, /*END*/, /*MDD*/, /*SDA*/, /*RLO*/, /*GDA*/, /*CPT*/    // next ->
1: /*START*/ {false, false, true, false, false, true, false},
1: /* END */ {false, false, false, false, false, false, false},
1: /* MDD */ {false, false, false, true, true, true, false}, //           |
1: /* SDA */ {false, false, true, false, false, false, false}, // previous  |
1: /* RLO */ {false, true, true, false, true, false, false}, //          \ /
1: /* GDA */ {false, false, true, false, true, false, true},
1: /* CPT */ {false, false, true, false, true, false, true}};
/////////////////////////////////////////////////////////////////////////
1:         //   /*START*/, /*END*/, /*SDA*/, /*0*/, /*D0*/, /*E0*/, /*F4*/ // next ->
1: /*START*/  {false, false, false, true, true, false, false},
1: /* END */  {false, false, false, false, false, false, false},
1: /* SDA */  {false, false, false, true, false, false, false},
1: /* 0   */  {false, false, true, true, true, true, true},
1: /* D0 */   {false, false, false, true, false, true, false},
1: /* E0 */   {false, false, false, true, false, false, true},
1: /* F4 */   {false, true, false, false, false, false, false}};
1:         {0x54, 0, 1},
1:         {0xD0, 0, 1}};
1:         {0xE0, 0, 0}};
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.FdocaConstants
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.net;
1: 
0: class FdocaConstants
0: {
1: 
0: // PROTOCOL FD:OCA constants.
0:   static final int FDOCA_TYPE_FIXEDBYTES = 0x01;
0:   static final int FDOCA_TYPE_NFIXEDBYTES = 0x81;
0:   static final int FDOCA_TYPE_VARBYTES = 0x02;
0:   static final int FDOCA_TYPE_NVARBYTES = 0x82;
0:   static final int FDOCA_TYPE_NTBYTES = 0x03;
0:   static final int FDOCA_TYPE_NNTBYTES = 0x83;
0:   static final int FDOCA_TYPE_PSCLBYTE = 0x07;
0:   static final int FDOCA_TYPE_NPSCLBYTE = 0x87;
0:   static final int FDOCA_TYPE_FIXEDCHAR = 0x10;
0:   static final int FDOCA_TYPE_NFIXEDCHAR = 0x90;
0:   static final int FDOCA_TYPE_VARCHAR = 0x11;
0:   static final int FDOCA_TYPE_NVARCHAR = 0x91;
0:   static final int FDOCA_TYPE_NTCHAR = 0x14;
0:   static final int FDOCA_TYPE_NNTCHAR = 0x94;
0:   static final int FDOCA_TYPE_PSCLCHAR = 0x19;
0:   static final int FDOCA_TYPE_NPSCLCHAR = 0x99;
0:   static final int FDOCA_TYPE_INTEGER_BE = 0x23;
0:   static final int FDOCA_TYPE_NINTEGER_BE = 0xA3;
0:   static final int FDOCA_TYPE_INTEGER_LE = 0x24;
0:   static final int FDOCA_TYPE_NINTEGER_LE = 0xA4;
0:   static final int FDOCA_TYPE_DECIMAL = 0x30;
0:   static final int FDOCA_TYPE_NDECIMAL = 0xB0;
0:   static final int FDOCA_TYPE_NUMERIC_CHAR = 0x32;
0:   static final int FDOCA_TYPE_NNUMERIC_CHAR = 0xB2;
0:   static final int FDOCA_TYPE_FLOAT_X86 = 0x47;
0:   static final int FDOCA_TYPE_NFLOAT_X86 = 0xC7;
0:   static final int FDOCA_TYPE_FLOAT_IEEE = 0x48;
0:   static final int FDOCA_TYPE_NFLOAT_IEEE = 0xC8;
0:   static final int FDOCA_TYPE_LOBBYTES = 0x50;
0:   static final int FDOCA_TYPE_NLOBBYTES = 0xD0;
0:   static final int FDOCA_TYPE_LOBCHAR = 0x51;
0:   static final int FDOCA_TYPE_NLOBCHAR = 0xD1;
1: 
0:   // PROTOCOL Type constants.
0:   static final int PROTOCOL_TYPE_INTEGER = 0x02;
0:   static final int PROTOCOL_TYPE_NINTEGER = 0x03;
0:   static final int PROTOCOL_TYPE_SMALL = 0x04;
0:   static final int PROTOCOL_TYPE_NSMALL = 0x05;
0:   static final int PROTOCOL_TYPE_1BYTE_INT = 0x06;
0:   static final int PROTOCOL_TYPE_N1BYTE_INT = 0x07;
0:   static final int PROTOCOL_TYPE_FLOAT16 = 0x08;
0:   static final int PROTOCOL_TYPE_NFLOAT16 = 0x09;
0:   static final int PROTOCOL_TYPE_FLOAT8 = 0x0A;
0:   static final int PROTOCOL_TYPE_NFLOAT8 = 0x0B;
0:   static final int PROTOCOL_TYPE_FLOAT4 = 0x0C;
0:   static final int PROTOCOL_TYPE_NFLOAT4 = 0x0D;
0:   static final int PROTOCOL_TYPE_DECIMAL = 0x0E;
0:   static final int PROTOCOL_TYPE_NDECIMAL = 0x0F;
0:   static final int PROTOCOL_TYPE_NUMERIC_CHAR = 0x12;
0:   static final int PROTOCOL_TYPE_NNUMERIC_CHAR = 0x13;
0:   static final int PROTOCOL_TYPE_RSET_LOC = 0x14;
0:   static final int PROTOCOL_TYPE_NRSET_LOC = 0x15;
0:   static final int PROTOCOL_TYPE_INTEGER8 = 0x16;
0:   static final int PROTOCOL_TYPE_NINTEGER8 = 0x17;
0:   static final int PROTOCOL_TYPE_LOBLOC = 0x18;
0:   static final int PROTOCOL_TYPE_NLOBLOC = 0x19;
0:   static final int PROTOCOL_TYPE_CLOBLOC = 0x1A;
0:   static final int PROTOCOL_TYPE_NCLOBLOC = 0x1B;
0:   static final int PROTOCOL_TYPE_DBCSCLOBLOC = 0x1C;
0:   static final int PROTOCOL_TYPE_NDBCSCLOBLOC = 0x1D;
0:   static final int PROTOCOL_TYPE_DATE = 0x20;
0:   static final int PROTOCOL_TYPE_NDATE = 0x21;
0:   static final int PROTOCOL_TYPE_TIME = 0x22;
0:   static final int PROTOCOL_TYPE_NTIME = 0x23;
0:   static final int PROTOCOL_TYPE_TIMESTAMP = 0x24;
0:   static final int PROTOCOL_TYPE_NTIMESTAMP = 0x25;
0:   static final int PROTOCOL_TYPE_FIXBYTE = 0x26;
0:   static final int PROTOCOL_TYPE_NFIXBYTE = 0x27;
0:   static final int PROTOCOL_TYPE_VARBYTE = 0x28;
0:   static final int PROTOCOL_TYPE_NVARBYTE = 0x29;
0:   static final int PROTOCOL_TYPE_LONGVARBYTE = 0x2A;
0:   static final int PROTOCOL_TYPE_NLONGVARBYTE = 0x2B;
0:   static final int PROTOCOL_TYPE_NTERMBYTE = 0x2C;
0:   static final int PROTOCOL_TYPE_NNTERMBYTE = 0x2D;
0:   static final int PROTOCOL_TYPE_CSTR = 0x2E;
0:   static final int PROTOCOL_TYPE_NCSTR = 0x2F;
0:   static final int PROTOCOL_TYPE_CHAR = 0x30;
0:   static final int PROTOCOL_TYPE_NCHAR = 0x31;
0:   static final int PROTOCOL_TYPE_VARCHAR = 0x32;
0:   static final int PROTOCOL_TYPE_NVARCHAR = 0x33;
0:   static final int PROTOCOL_TYPE_LONG = 0x34;
0:   static final int PROTOCOL_TYPE_NLONG = 0x35;
0:   static final int PROTOCOL_TYPE_MIX = 0x3C;
0:   static final int PROTOCOL_TYPE_NMIX = 0x3D;
0:   static final int PROTOCOL_TYPE_VARMIX = 0x3E;
0:   static final int PROTOCOL_TYPE_NVARMIX = 0x3F;
0:   static final int PROTOCOL_TYPE_LONGMIX = 0x40;
0:   static final int PROTOCOL_TYPE_NLONGMIX = 0x41;
0:   static final int PROTOCOL_TYPE_CSTRMIX = 0x42;
0:   static final int PROTOCOL_TYPE_NCSTRMIX = 0x43;
0:   static final int PROTOCOL_TYPE_PSCLBYTE = 0x44;
0:   static final int PROTOCOL_TYPE_NPSCLBYTE = 0x45;
1: 
0:   // --- Override LIDs 0x50 - 0xAF
0:   static final int FIRST_OVERRIDE_LID = 0x50;
0:   static final int LAST_OVERRIDE_LID = 0xAF;
1: 
0:   static final int PROTOCOL_TYPE_LOBBYTES = 0xC8;
0:   static final int PROTOCOL_TYPE_NLOBBYTES = 0xC9;
0:   static final int PROTOCOL_TYPE_LOBCSBCS = 0xCA;
0:   static final int PROTOCOL_TYPE_NLOBCSBCS = 0xCB;
0:   static final int PROTOCOL_TYPE_LOBCDBCS = 0xCC;
0:   static final int PROTOCOL_TYPE_NLOBCDBCS = 0xCD;
0:   static final int PROTOCOL_TYPE_LOBCMIXED = 0xCE;
0:   static final int PROTOCOL_TYPE_NLOBCMIXED = 0xCF;
1: 
0:   static final int CPT_TRIPLET_TYPE = 0x7F;      // CPT triplet type
0:   static final int MDD_TRIPLET_TYPE = 0x78;      // MDD triplet type
0:   static final int NGDA_TRIPLET_TYPE = 0x76;     // N-GDA triplet type
0:   static final int RLO_TRIPLET_TYPE = 0x71;      // RLO triplet type
0:   static final int SDA_TRIPLET_TYPE = 0x70;      // SDA triplet type
1: 
0:   static final int SQLDTARD_LID = 0xF0;
0:   static final int SQLCADTA_LID = 0xE0;
0:   static final int SQLDTAGRP_LID = 0xD0;         // SQLDTAGRP LID
0:   static final int NULL_LID = 0x00;
1: 
0:   static final int INDICATOR_NULLABLE = 0x00;
0:   static final int NULL_DATA = 0xFF;
1: 
0:   static final int MAX_VARS_IN_NGDA = 84;        // Number of SQLVARs in full SQLDTAGRP
0:                                                  // N-GDA or CPT
0:   static final int MDD_TRIPLET_SIZE = 7;         // Size of MDD triplet
0:   static final int SQLDTARD_RLO_SIZE = 6;        // size of SQLDTARD minus MDD
0:   static final int SQLCADTA_RLO_SIZE = 9;        // size of SQLCDTA minus MDD
0:   static final int SDA_TRIPLET_SIZE = 12;        // Size of SDA triplet
0:   static final int SQLDTAGRP_SIZE = 3;           // Size of SQLDTAGRP descriptor
0:   static final int CPT_SIZE = 3;                 // Size of CPT descriptor
0:   static final int SQLDTAGRP_COL_DSC_SIZE = 3;   // Env. LID & len. bytes
0:   static final int MDD_REST_SIZE = 5;            // Size of the MDD group minus length and type
1: 
0:   static final int MDD_SDA_TRIPLET_SIZE = 19;
0:   static final int MDD_SDA_PROTOCOLTYPE_OFFSET = 6;
0:   static final int MDD_SDA_FDOCALID_OFFSET = 9;
0:   static final int MDD_SDA_FDOCATYPE_OFFSET = 10;
0:   static final int MDD_SDA_CCSID_OFFSET = 11;
0:   static final int MDD_SDA_LENGTH_OFFSET = 17;
1: 
0:   static final byte[] defaultMddSdaBytes = {
0:     (byte)0x07, (byte)0x78, (byte)0x00, (byte)0x05,
0:     (byte)0x01, (byte)0x01, (byte)0x00,              // protocol type
0:     (byte)0x0C, (byte)0x70, (byte)0x00,              // fdoca triplet lid
0:     (byte)0x00,                                      // fdoca field type
0:     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,  // ccsid
0:     (byte)0x01, (byte)0x01,
0:     (byte)0x7F, (byte)0xFF                           // length
0:   };
1: 
0:   static final byte[] MDD_SQLDTAGRP_TOSEND = {
0:     (byte)0x07, (byte)0x78, (byte)0x00, (byte)0x05,
0:     (byte)0x02, (byte)0x01, (byte)0xD0
0:   };
1: 
0:   static final byte[] MDD_SQLDTA_TOSEND = {
0:     (byte)0x07, (byte)0x78, (byte)0x00, (byte)0x05,
0:     (byte)0x03, (byte)0x01, (byte)0xE4
0:   };
1: 
0:   // Hard-coded SQLDTA RLO
0:   static final byte[] SQLDTA_RLO_TOSEND = {   
0:     (byte)0x06, (byte)0x71, (byte)0xE4,
0:     (byte)0xD0, (byte)0x00, (byte)0x01
0:   };
1: 
0:   // Hard-coded SQLCADTA RLO
0:   static final byte[] SQLCADTA_RLO_TOSEND = {  
0:     (byte)0x09, (byte)0x71, (byte)0xE0,        
0:     (byte)0x54, (byte)0x00, (byte)0x01,        
0:     (byte)0xD0, (byte)0x00, (byte)0x01
0:   };
1: 
0:   // Hard-coded SQLDTARD RLO
0:   static final byte[] SQLDTARD_RLO_TOSEND = {  
0:     (byte)0X06, (byte)0X71, (byte)0xF0,        
0:     (byte)0xE0, (byte)0x00, (byte)0x00         
0:   };
1: 
0:   // following code added for parseSQLDTARD prototype
1:     static final int SQLDTARD_TRIPLET_TYPE_START = 0;
1:     static final int SQLDTARD_TRIPLET_TYPE_END = 1;
1:     static final int SQLDTARD_TRIPLET_TYPE_MDD = 2;
1:     static final int SQLDTARD_TRIPLET_TYPE_SDA = 3;
1:     static final int SQLDTARD_TRIPLET_TYPE_RLO = 4;
1:     static final int SQLDTARD_TRIPLET_TYPE_GDA = 5;
1:     static final int SQLDTARD_TRIPLET_TYPE_CPT = 6;
1: 
1:     static final boolean[][] SQLDTARD_TRIPLET_TYPES = {
0:      //   /*START*/, /*END*/, /*MDD*/, /*SDA*/, /*RLO*/, /*GDA*/, /*CPT*/    // next ->
0: /*START*/ { false  , false  ,  true  ,  false ,  false ,  true  , false },
0: /* END */ { false  , false  ,  false ,  false ,  false ,  false , false },
0: /* MDD */ { false  , false  ,  false ,  true  ,  true  ,  true  , false },    //           |
0: /* SDA */ { false  , false  ,  true  ,  false ,  false ,  false , false },    // previous  |
0: /* RLO */ { false  , true   ,  true  ,  false ,  true  ,  false , false },    //          \ /
0: /* GDA */ { false  , false  ,  true  ,  false ,  true  ,  false , true  },
0: /* CPT */ { false  , false  ,  true  ,  false ,  true  ,  false , true }};
1: 
1:     static final int SQLDTARD_TRIPLET_ID_START = 0;
1:     static final int SQLDTARD_TRIPLET_ID_END = 1;
1:     static final int SQLDTARD_TRIPLET_ID_SDA = 2;
1:     static final int SQLDTARD_TRIPLET_ID_0 = 3;
1:     static final int SQLDTARD_TRIPLET_ID_D0 = 4;
1:     static final int SQLDTARD_TRIPLET_ID_E0 = 5;
1:     static final int SQLDTARD_TRIPLET_ID_F0 = 6;
1: 
1:     static final boolean[][] SQLDTARD_TRIPLET_IDS = {
0:       //   /*START*/, /*END*/, /*SDA*/, /*0*/, /*D0*/, /*E0*/, /*F4*/ // next ->
0: /*START*/  { false  , false  ,  false ,  true , true , false , false },
0: /* END */  { false  , false  ,  false ,  false, false, false , false },
0: /* SDA */  { false  , false  ,  false ,  true , false, false , false },
0: /* 0   */  { false  , false  ,  true  ,  true , true , true  , true  },
0: /* D0 */   { false  , false  ,  false ,  true , false, true  , false },
0: /* E0 */   { false  , false  ,  false ,  true , false, false , true  },
0: /* F4 */   { false  , true   ,  false ,  false, false, false , false }};
1: 
1:     static final int RLO_GROUP_LID = 0;
1:     static final int RLO_ELEMENT_TAKEN = 1;
1:     static final int RLO_REP_FACTOR = 2;
1: 
1:     static final int[][] RLO_SQLCADTA = {// GROUP LID , ELEM TAKEN,  REP_FACTOR
0:                                         {   0x54    ,     0     ,      1},
0:                                         {   0xD0    ,     0     ,      1}};
1: 
1:     static final int[][] RLO_SQLDTARD = {// GROUP LID , ELEM TAKEN,  REP_FACTOR
0:                                         {   0xE0    ,     0     ,      0}};
1: 
1: }
============================================================================