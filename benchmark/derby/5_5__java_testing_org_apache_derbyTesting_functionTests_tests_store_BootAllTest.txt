1:1c31b3a: /*
1:1c31b3a:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootAllTest
16:1c31b3a: 
1:36498c0:    Licensed to the Apache Software Foundation (ASF) under one
1:36498c0:    or more contributor license agreements.  See the NOTICE file
1:36498c0:    distributed with this work for additional information
1:36498c0:    regarding copyright ownership.  The ASF licenses this file
1:36498c0:    to you under the Apache License, Version 2.0 (the
1:36498c0:    "License"); you may not use this file except in compliance
1:36498c0:    with the License.  You may obtain a copy of the License at
1:36498c0:    
1:36498c0:    http://www.apache.org/licenses/LICENSE-2.0
1:36498c0:    
1:36498c0:    Unless required by applicable law or agreed to in writing,
1:36498c0:    software distributed under the License is distributed on an
1:36498c0:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:36498c0:    KIND, either express or implied.  See the License for the
1:36498c0:    specific language governing permissions and limitations
1:36498c0:    under the License.
1:36498c0: */
1:1c31b3a: 
1:1c31b3a: package org.apache.derbyTesting.functionTests.tests.store;
1:b1c5200: 
1:b1c5200: import java.sql.Driver;
1:b1c5200: import java.sql.DriverManager;
1:b1c5200: import java.sql.DriverPropertyInfo;
1:b1c5200: import java.sql.SQLException;
1:1c31b3a: import java.util.Properties;
1:b1c5200: import junit.framework.Test;
1:b1c5200: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:b1c5200: import org.apache.derbyTesting.junit.JDBC;
1:b1c5200: import org.apache.derbyTesting.junit.JDBCClient;
1:b1c5200: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:b1c5200: import org.apache.derbyTesting.junit.TestConfiguration;
1:b1c5200: 
3:1c31b3a: /**
1:1c31b3a:  * Tests for the system property "derby.system.bootAll"
1:1c31b3a:  *
1:1c31b3a:  * DERBY-1296 - Setting property derby.system.bootAll causes an Exception
1:1c31b3a:  * 
1:dbed020:  * create and shutdown three databases as well as the default
1:b1c5200:  * shutdown the engine
1:b1c5200:  * set "derby.system.bootAll"
1:b1c5200:  * check at least four databases are listed in the driver info
1:b1c5200:  * 
1:b1c5200:  * Test drops the three databases after their use as it uses
1:b1c5200:  * the singleUseDatabaseDecorator.
1:b1c5200:  * 
1:b1c5200:  * Test is written to be tolerant of other databases in the system.
1:b1c5200:  * 
4:1c31b3a:  */
1:df2b52c: public class BootAllTest  extends BaseJDBCTestCase {
1:1c31b3a:     
1:b1c5200:     public static Test suite() {
1:b1c5200:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("BootAllTest");
1:b1c5200:         
1:b1c5200:         // Test uses driver manager so JDBC 2 required.
1:7a5b1d0:         if (JDBC.vmSupportsJDBC3())
1:b1c5200:         {           
1:b1c5200:             // Suite to create the third (inner) database and
1:b1c5200:             // perform the actual test (will be run last)
1:1ae02c9:             BaseTestSuite db3 = new BaseTestSuite("db3");
1:b1c5200:             db3.addTest(new BootAllTest("createShutdownDatabase"));
1:b1c5200:             db3.addTest(new BootAllTest("shutdownDerby"));
1:b1c5200:             
1:b1c5200:             Properties ba = new Properties();
1:b1c5200:             ba.setProperty("derby.system.bootAll", "true");
1:b1c5200:             
1:b1c5200:             db3.addTest(new SystemPropertyTestSetup(
1:b1c5200:                     new BootAllTest("testSettingBootAllPropertyWithHomePropertySet"),
1:b1c5200:                     ba));
1:b1c5200:             
1:b1c5200:             // Suite to create the second database (middle) and
1:b1c5200:             // embed in it the third database suite.
1:1ae02c9:             BaseTestSuite db2 = new BaseTestSuite("db2");
1:b1c5200:             db2.addTest(new BootAllTest("createShutdownDatabase"));
1:b1c5200:             db2.addTest(TestConfiguration.singleUseDatabaseDecorator(db3));
1:b1c5200:             
1:b1c5200:             // Suite to create the first database (outer) and
1:b1c5200:             // embed in it the second database suite.
1:1ae02c9:             BaseTestSuite db1 = new BaseTestSuite("db1");
1:b1c5200:             db1.addTest(new BootAllTest("createShutdownDatabase"));
1:b1c5200:             db1.addTest(TestConfiguration.singleUseDatabaseDecorator(db2));
1:b1c5200:             
1:b1c5200:             // Add the default database in as well, this will ensure
1:b1c5200:             // that databases at the root level get booted as well
1:b1c5200:             // as those at sub-levels
1:b1c5200:             suite.addTest(new BootAllTest("createShutdownDatabase"));
1:b1c5200:             
1:b1c5200:             // add the first database into the actual suite.
1:b1c5200:             suite.addTest(TestConfiguration.singleUseDatabaseDecorator(db1)); 
1:b1c5200:         }
1:b1c5200:         
1:b1c5200:         return suite;
1:b1c5200:     }
1:b1c5200: 
1:1c31b3a: 
1:1c31b3a:     /**
1:1c31b3a:      * Creates a new instance of BootAllTest
1:1c31b3a:      */
1:1c31b3a:     public BootAllTest(String name) {
1:1c31b3a:         super(name);
7:1c31b3a:     }
1:b1c5200:     
1:b1c5200:     public void createShutdownDatabase() throws SQLException
1:b1c5200:     {
1:b1c5200:         getConnection().close();
1:b1c5200:         getTestConfiguration().shutdownDatabase();
1:b1c5200:     }
1:b1c5200:     
1:b1c5200:     public void shutdownDerby() {
1:b1c5200:         getTestConfiguration().shutdownEngine();
1:1c31b3a:         System.runFinalization();
1:1c31b3a:         System.gc();
1:1c31b3a: 
1:1c31b3a:     }
1:1c31b3a: 
1:1c31b3a:     /**
1:1c31b3a:      * DERBY-1296 - Setting property derby.system.bootAll causes an Exception
1:1c31b3a:      *
1:1c31b3a:      * Check that setting the system property "derby.system.bootAll" will not 
1:1c31b3a:      * cause an exception when used in combination with the system property
1:1c31b3a:      * "derby.system.home".
1:1c31b3a:      *
1:1c31b3a:      * The property "derby.system.home" is set by default for all tests and does
1:1c31b3a:      * not need to be explicitly set in this test.
1:1c31b3a:      */
1:1c31b3a:     public void testSettingBootAllPropertyWithHomePropertySet() 
1:1c31b3a:             throws Exception 
1:1c31b3a:     {
1:b1c5200:         JDBCClient embedded = getTestConfiguration().getJDBCClient();
1:1c31b3a: 
1:b1c5200:         String driverName = embedded.getJDBCDriverName();
1:b1c5200:         String url = embedded.getUrlBase();
1:b1c5200:         
1:b1c5200:         // Ensure the engine is not booted.
1:b1c5200:         try {
1:b1c5200:             DriverManager.getDriver(url);
1:b1c5200:             fail("Derby is booted!");
1:b1c5200:         } catch (SQLException e) {
1:b1c5200:        }
1:1c31b3a: 
1:4469400:         Class<?> clazz = Class.forName(driverName);
1:4469400:         clazz.getConstructor().newInstance();
1:1c31b3a: 
1:1c31b3a:         Driver driver = DriverManager.getDriver(url);
1:1c31b3a: 
1:1c31b3a:         DriverPropertyInfo[] attributes = driver.getPropertyInfo(url, null);
1:b1c5200:         
1:b1c5200:         String returnedDatabases[] = null;
1:1c31b3a:         for (int i = 0; i < attributes.length; i++) {
1:1c31b3a:             if (attributes[i].name.equalsIgnoreCase("databaseName")) {
1:1c31b3a:                 returnedDatabases = attributes[i].choices;
1:1c31b3a:             }
1:1c31b3a:         }
1:b1c5200:         
1:b1c5200:         // We expect at least four databases to be booted,
1:b1c5200:         // but it could be more if other tests have left databases
1:b1c5200:         // around.
1:b29215b:         // DERBY-2069 the single use databases are not
1:b29215b:         // booted automatically, once DERBY-2069 is fixed
1:b29215b:         // the length can be compared to four.
1:b1c5200:         assertNotNull(returnedDatabases);
1:b1c5200:         assertTrue("Fewer databases booted than expected",
1:b1c5200:                 returnedDatabases.length >= 1);
1:1c31b3a:     }
1:1c31b3a:     
1:1c31b3a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * create and shutdown three databases as well as the default
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz = Class.forName(driverName);
1:         clazz.getConstructor().newInstance();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("BootAllTest");
1:             BaseTestSuite db3 = new BaseTestSuite("db3");
/////////////////////////////////////////////////////////////////////////
1:             BaseTestSuite db2 = new BaseTestSuite("db2");
1:             BaseTestSuite db1 = new BaseTestSuite("db1");
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7a5b1d0
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJDBC3())
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b29215b
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-2069 the single use databases are not
1:         // booted automatically, once DERBY-2069 is fixed
1:         // the length can be compared to four.
commit:b1c5200
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Driver;
1: import java.sql.DriverManager;
1: import java.sql.DriverPropertyInfo;
1: import java.sql.SQLException;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCClient;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0:  * create & shutdown three databases as well as the default
1:  * shutdown the engine
1:  * set "derby.system.bootAll"
1:  * check at least four databases are listed in the driver info
1:  * 
1:  * Test drops the three databases after their use as it uses
1:  * the singleUseDatabaseDecorator.
1:  * 
1:  * Test is written to be tolerant of other databases in the system.
1:  * 
1:     public static Test suite() {
1:         
0:         TestSuite suite = new TestSuite("BootAllTest");
1:         
1:         // Test uses driver manager so JDBC 2 required.
0:         if (JDBC.vmSupportsJDBC2())
1:         {           
1:             // Suite to create the third (inner) database and
1:             // perform the actual test (will be run last)
0:             TestSuite db3 = new TestSuite("db3");
1:             db3.addTest(new BootAllTest("createShutdownDatabase"));
1:             db3.addTest(new BootAllTest("shutdownDerby"));
1:             
1:             Properties ba = new Properties();
1:             ba.setProperty("derby.system.bootAll", "true");
1:             
1:             db3.addTest(new SystemPropertyTestSetup(
1:                     new BootAllTest("testSettingBootAllPropertyWithHomePropertySet"),
1:                     ba));
1:             
1:             // Suite to create the second database (middle) and
1:             // embed in it the third database suite.
0:             TestSuite db2 = new TestSuite("db2");
1:             db2.addTest(new BootAllTest("createShutdownDatabase"));
1:             db2.addTest(TestConfiguration.singleUseDatabaseDecorator(db3));
1:             
1:             // Suite to create the first database (outer) and
1:             // embed in it the second database suite.
0:             TestSuite db1 = new TestSuite("db1");
1:             db1.addTest(new BootAllTest("createShutdownDatabase"));
1:             db1.addTest(TestConfiguration.singleUseDatabaseDecorator(db2));
1:             
1:             // Add the default database in as well, this will ensure
1:             // that databases at the root level get booted as well
1:             // as those at sub-levels
1:             suite.addTest(new BootAllTest("createShutdownDatabase"));
1:             
1:             // add the first database into the actual suite.
1:             suite.addTest(TestConfiguration.singleUseDatabaseDecorator(db1)); 
1:         }
1:         
1:         return suite;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void createShutdownDatabase() throws SQLException
1:     {
1:         getConnection().close();
1:         getTestConfiguration().shutdownDatabase();
1:     }
1:     
1:     public void shutdownDerby() {
1:         getTestConfiguration().shutdownEngine();
/////////////////////////////////////////////////////////////////////////
1:         JDBCClient embedded = getTestConfiguration().getJDBCClient();
1:         String driverName = embedded.getJDBCDriverName();
1:         String url = embedded.getUrlBase();
1:         
1:         // Ensure the engine is not booted.
1:         try {
1:             DriverManager.getDriver(url);
1:             fail("Derby is booted!");
1:         } catch (SQLException e) {
1:        }
1:         
1:         String returnedDatabases[] = null;
1:         
1:         // We expect at least four databases to be booted,
1:         // but it could be more if other tests have left databases
1:         // around.
1:         assertNotNull(returnedDatabases);
1:         assertTrue("Fewer databases booted than expected",
1:                 returnedDatabases.length >= 1);
commit:e0104e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             Connection con = openConnection(databases[i]);
0:                 openConnection(databases[i] + ";shutdown=true");
0:         String url = getTestConfiguration().getJDBCUrl("");
/////////////////////////////////////////////////////////////////////////
0:         String driverName = getTestConfiguration().getJDBCClient().getJDBCDriverName();
0:             openConnection(";shutdown=true");
/////////////////////////////////////////////////////////////////////////
0:         String driverName = getTestConfiguration().getJDBCClient().getJDBCDriverName();
0:         String url = getTestConfiguration().getJDBCUrl("");
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
commit:df2b52c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1: public class BootAllTest  extends BaseJDBCTestCase {
/////////////////////////////////////////////////////////////////////////
0:             con = openConnection(databases[i]);
0:                 con = openConnection(databases[i] + ";shutdown=true");
/////////////////////////////////////////////////////////////////////////
0:             con = openConnection(";shutdown=true");
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:36498c0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1:    
1:    http://www.apache.org/licenses/LICENSE-2.0
1:    
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: */
commit:1c31b3a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootAllTest
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
0:       http://www.apache.org/licenses/LICENSE-2.0
1: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseTestCase;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
0: import junit.framework.*;
0: import java.sql.*;
1: import java.util.Properties;
0: import java.util.Arrays;
1: 
1: /**
1:  * Tests for the system property "derby.system.bootAll"
1:  *
1:  * DERBY-1296 - Setting property derby.system.bootAll causes an Exception
1:  * 
1:  */
0: public class BootAllTest  extends BaseTestCase {
1: 
0:     /** JDBC Connection */
0:     private Connection con;
0:     private Driver driver;
0:     private String databases[] = new String[] {"wombat1", "wombat2", "wombat3"};
1:     
0:     final static String DATABASE_SHUT_DOWN = "08006";
0:     final static String ALL_DATABASES_SHUT_DOWN = "XJ015";
1: 
1:     /**
1:      * Creates a new instance of BootAllTest
1:      */
1:     public BootAllTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
0:      * Create the databases
1:      */
0:     public void setUp() throws Exception {
0:         for (int i = 0; i < databases.length; i++) {
0:             con = CONFIG.getConnection(databases[i]);
0:             con.close();
0:             try {
0:                 con = CONFIG.
0:                         getConnection(databases[i] + ";shutdown=true");
0:             } catch (SQLException se) {
0:                 assertEquals("Expected exception on setUp " + se.getSQLState(), 
0:                         DATABASE_SHUT_DOWN, se.getSQLState());
1:             }
1:         }
0:         String url = CONFIG.getJDBCUrl("");
0:         driver = DriverManager.getDriver(url);
0:         DriverManager.deregisterDriver(driver);
0:         try {
0:             driver.connect(url + ";shutdown=true", null);
0:         } catch (SQLException se) {
0:             assertEquals("Expected exception on tearDown " + se.getSQLState(), 
0:                     ALL_DATABASES_SHUT_DOWN, se.getSQLState());
1:         }
1:         System.runFinalization();
1:         System.gc();
1:     }
1: 
1:     /**
0:      * Shutdown all databases
1:      */
0:     public void tearDown() throws Exception {
0:         String driverName = CONFIG.getJDBCClient().getJDBCDriverName();
0:         Class.forName(driverName);
0:         println("Teardown of: " + getName());
0:         try {
0:             con = CONFIG.
0:                     getConnection(";shutdown=true");
0:         } catch (SQLException se) {
0:             assertEquals("Expected exception on tearDown " + se.getSQLState(), 
0:                     ALL_DATABASES_SHUT_DOWN, se.getSQLState());
1:         }
1:     }
1: 
1:     /**
1:      * DERBY-1296 - Setting property derby.system.bootAll causes an Exception
1:      *
1:      * Check that setting the system property "derby.system.bootAll" will not 
1:      * cause an exception when used in combination with the system property
1:      * "derby.system.home".
1:      *
1:      * The property "derby.system.home" is set by default for all tests and does
1:      * not need to be explicitly set in this test.
1:      */
1:     public void testSettingBootAllPropertyWithHomePropertySet() 
1:             throws Exception 
1:     {
0:         String returnedDatabases[] = null;
1: 
0:         setSystemProperty("derby.system.bootAll", "true");
1: 
0:         String driverName = CONFIG.getJDBCClient().getJDBCDriverName();
0:         String url = CONFIG.getJDBCUrl("");
1: 
0:         Class.forName(driverName).newInstance();
0:         DriverManager.registerDriver(driver);
1: 
1:         Driver driver = DriverManager.getDriver(url);
1: 
1:         DriverPropertyInfo[] attributes = driver.getPropertyInfo(url, null);
1:         for (int i = 0; i < attributes.length; i++) {
1:             if (attributes[i].name.equalsIgnoreCase("databaseName")) {
1:                 returnedDatabases = attributes[i].choices;
1:             }
1:         }
1: 
0:         Arrays.sort(returnedDatabases);
1: 
0:         assertEquals("The number of databases should be", 
0:                 databases.length, 
0:                 returnedDatabases.length);
1: 
0:         for (int i = 0; i < databases.length; i++) {
0:             assertEquals("Database names should be", 
0:                     databases[i], 
0:                     returnedDatabases[i]);
1:         }
1: 
1:     }
1:     
1: }
============================================================================