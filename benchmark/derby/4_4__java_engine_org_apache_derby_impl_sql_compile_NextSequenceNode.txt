1:1c7cfce: /*
1:1c7cfce: 
1:1c7cfce:    Derby - Class org.apache.derby.impl.sql.compile.NextSequenceNode
1:1c7cfce: 
1:1c7cfce:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1c7cfce:    contributor license agreements.  See the NOTICE file distributed with
1:1c7cfce:    this work for additional information regarding copyright ownership.
1:1c7cfce:    The ASF licenses this file to you under the Apache License, Version 2.0
1:1c7cfce:    (the "License"); you may not use this file except in compliance with
1:1c7cfce:    the License.  You may obtain a copy of the License at
1:1c7cfce: 
1:1c7cfce:       http://www.apache.org/licenses/LICENSE-2.0
1:1c7cfce: 
1:1c7cfce:    Unless required by applicable law or agreed to in writing, software
1:1c7cfce:    distributed under the License is distributed on an "AS IS" BASIS,
1:1c7cfce:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1c7cfce:    See the License for the specific language governing permissions and
1:1c7cfce:    limitations under the License.
1:1c7cfce: 
1:1c7cfce:  */
1:1c7cfce: package org.apache.derby.impl.sql.compile;
1:1c7cfce: 
1:1c7cfce: import java.sql.Types;
1:f33fbaf: import java.util.List;
1:1c7cfce: import org.apache.derby.iapi.error.StandardException;
1:139ca85: import org.apache.derby.iapi.reference.ClassName;
1:139ca85: import org.apache.derby.iapi.reference.SQLState;
1:139ca85: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:1c7cfce: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:e671fc7: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:1c7cfce: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:1c7cfce: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1:1c7cfce: 
1:1c7cfce: /**
1:1c7cfce:  * A class that represents a value obtained from a Sequence using 'NEXT VALUE'
1:1c7cfce:  */
1:3bb140c: class NextSequenceNode extends ValueNode {
1:1c7cfce: 
1:1c7cfce:     private TableName sequenceName;
1:1c7cfce:     private SequenceDescriptor sequenceDescriptor;
1:1c7cfce: 
1:1c7cfce:     /**
1:3bb140c:      * Constructor for a NextSequenceNode
1:1c7cfce:      *
1:1c7cfce:      * @param sequenceName The name of the sequence being called
1:3bb140c:      * @param cm           The context manager
1:1c7cfce:      */
1:3bb140c:     NextSequenceNode(TableName sequenceName,
1:3bb140c:                      ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.sequenceName = sequenceName;
1:1c7cfce:     }
1:1c7cfce: 
1:1c7cfce:     /**
1:1c7cfce:      * Bind this expression.  This means binding the sub-expressions,
1:1c7cfce:      * as well as figuring out what the return type is for this expression.
1:1c7cfce:      *
1:1c7cfce:      * @param fromList        The FROM list for the query this
1:1c7cfce:      *                        expression is in, for binding columns.
1:1c7cfce:      * @param subqueryList    The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates      The aggregate list being built as we find AggregateNodes
1:1c7cfce:      * @return The new top of the expression tree.
1:1c7cfce:      * @throws StandardException Thrown on error
1:1c7cfce:      */
1:3bb140c:     @Override
1:3bb140c:     ValueNode bindExpression(FromList fromList,
1:3bb140c:                              SubqueryList subqueryList,
1:3bb140c:                              List<AggregateNode> aggregates,
1:3bb140c:                              boolean forQueryRewrite) throws StandardException
1:e671fc7:     {
1:30dd4c5:         //
1:30dd4c5:         // Higher level bind() logic may try to redundantly re-bind this node. Unfortunately,
1:30dd4c5:         // that causes us to think that the sequence is being referenced more than once
1:30dd4c5:         // in the same statement. If the sequence generator is already filled in, then
1:30dd4c5:         // this node has already been bound and we can exit quickly. See DERBY-4803.
1:30dd4c5:         //
1:30dd4c5:         if ( sequenceDescriptor != null ) { return this; }
1:1c7cfce:         
1:e671fc7:         CompilerContext cc = getCompilerContext();
1:1c7cfce:         
1:e671fc7:         if ( (cc.getReliability() & CompilerContext.NEXT_VALUE_FOR_ILLEGAL) != 0 )
1:e671fc7:         {
1:e671fc7:             throw StandardException.newException( SQLState.LANG_NEXT_VALUE_FOR_ILLEGAL );
1:e671fc7:         }
1:7fd0c6e: 
1:1c7cfce:         // lookup sequence object in the data dictionary
1:eab88ec:         sequenceName.bind();
1:1c7cfce:         SchemaDescriptor sd = getSchemaDescriptor(sequenceName.getSchemaName());
1:1c7cfce:         sequenceDescriptor = getDataDictionary().getSequenceDescriptor(sd, sequenceName.getTableName());
1:1c7cfce: 
1:139ca85:         if ( sequenceDescriptor == null )
1:139ca85:         {
1:7fd0c6e:             throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "SEQUENCE", sequenceName.getFullTableName());
1:7fd0c6e:         }
1:1c7cfce: 
1:7fd0c6e:         //
1:7fd0c6e:         // System sequences can only be operated at runtime when inserting
1:7fd0c6e:         // a new identity value. See DERBY-6542.
1:7fd0c6e:         //
1:7fd0c6e:         if ( sd.isSystemSchema() )
1:7fd0c6e:         {
1:7fd0c6e:             throw StandardException.newException( SQLState.LANG_SYSTEM_SEQUENCE );
1:139ca85:         }
1:30dd4c5: 
1:1c7cfce:         // set the datatype of the value node
1:1c7cfce:         this.setType(sequenceDescriptor.getDataType());
1:1c7cfce: 
1:e671fc7:         //
1:e671fc7:         // The statement is only allowed to refer to a given sequence once.
1:e671fc7:         // See DERBY-4513.
1:e671fc7:         //
1:e671fc7:         if ( cc.isReferenced( sequenceDescriptor ) )
1:e671fc7:         {
1:e671fc7:             throw StandardException.newException
1:e671fc7:                 ( SQLState.LANG_SEQUENCE_REFERENCED_TWICE, sequenceName.getFullTableName() );
1:e671fc7:         }
1:e671fc7:         cc.addReferencedSequence( sequenceDescriptor );
1:1c7cfce: 
1:1c7cfce:         ValueNode returnNode = this;
1:1c7cfce: 
1:a4cbe6f:         // set up dependency on sequence and compile a check for USAGE
1:a4cbe6f:         // priv if needed
1:a4cbe6f:         getCompilerContext().createDependency( sequenceDescriptor );
1:1c7cfce: 
1:a4cbe6f:         if ( isPrivilegeCollectionRequired() )
1:a4cbe6f:         {
1:a4cbe6f:             getCompilerContext().addRequiredUsagePriv( sequenceDescriptor );
1:a4cbe6f:         }
1:1c7cfce: 
1:1c7cfce:         return returnNode;
1:1c7cfce:     }
1:1c7cfce: 
1:1c7cfce: 
1:3bb140c:     @Override
1:8fe3166:     void generateExpression
1:1c7cfce:         (
1:8fe3166:          ExpressionClassBuilder acb, MethodBuilder mb)
1:e671fc7:         throws StandardException
1:139ca85:     {
1:139ca85:         String sequenceUUIDstring = sequenceDescriptor.getUUID().toString();
1:139ca85:         int dataTypeFormatID = sequenceDescriptor.getDataType().getNull().getTypeFormatId();
1:1c7cfce:         
1:139ca85: 		mb.pushThis();
1:139ca85: 		mb.push( sequenceUUIDstring );
1:139ca85: 		mb.push( dataTypeFormatID );
1:139ca85: 		mb.callMethod
1:139ca85:             (
1:139ca85:              VMOpcode.INVOKEVIRTUAL,
1:139ca85:              ClassName.BaseActivation,
1:139ca85:              "getCurrentValueAndAdvance",
1:139ca85:              ClassName.NumberDataValue,
1:bb4cfe9:              2
1:139ca85:              );
1:1c7cfce:     }
1:1c7cfce: 
1:1c7cfce:     /**
1:1c7cfce:      * Dummy implementation to return a constant. Will be replaced with actual NEXT VALUE logic.
1:1c7cfce:      *
1:1c7cfce:      * @param ecb The ExpressionClassBuilder for the class being built
1:1c7cfce:      * @param mb The method the expression will go into
1:1c7cfce:      * @throws StandardException on error
1:1c7cfce:      */
1:9f2ed7d:     void generateConstant
1:1c7cfce:             (
1:1c7cfce:                     ExpressionClassBuilder ecb,
2:1c7cfce:                     MethodBuilder mb
2:1c7cfce:             ) throws StandardException {
1:1c7cfce:         switch (getTypeServices().getJDBCTypeId()) {
1:1c7cfce:             case Types.INTEGER:
1:1c7cfce:                 mb.push(1);
1:1c7cfce:                 break;
1:1c7cfce:             default:
1:1c7cfce:                 if (SanityManager.DEBUG) {
1:1c7cfce:                     SanityManager.THROWASSERT(
1:1c7cfce:                             "Unexpected dataType = " + getTypeServices().getJDBCTypeId());
1:1c7cfce:                 }
1:1c7cfce:         }
1:1c7cfce: 
1:1c7cfce:     }
1:1c7cfce: 
1:1c7cfce:     /**
1:1c7cfce:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:1c7cfce:      * for how this should be done for tree printing.
1:1c7cfce:      *
1:1c7cfce:      * @return This object as a String
1:1c7cfce:      */
1:3bb140c:     @Override
1:1c7cfce:     public String toString() {
1:1c7cfce:         if (SanityManager.DEBUG) {
1:1c7cfce:             return super.toString();
1:1c7cfce:         } else {
1:1c7cfce:             return "";
1:1c7cfce:         }
1:1c7cfce:     }
1:1c7cfce: 
1:2706d1f:     boolean isEquivalent(ValueNode other) throws StandardException {
1:1c7cfce:         return false;
1:1c7cfce:     }
1:69f8afa: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (sequenceName != null) {
1:69f8afa:             sequenceName = (TableName) sequenceName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:1c7cfce: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:eab88ec
/////////////////////////////////////////////////////////////////////////
1:         sequenceName.bind();
commit:0cefeda
/////////////////////////////////////////////////////////////////////////
0:         sequenceName.bind(getDataDictionary());
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (sequenceName != null) {
1:             sequenceName = (TableName) sequenceName.accept(v);
1:         }
1:     }
commit:9f2ed7d
/////////////////////////////////////////////////////////////////////////
1:     void generateConstant
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression
1:          ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates      The aggregate list being built as we find AggregateNodes
0:     ValueNode bindExpression(
0:             FromList fromList, SubqueryList subqueryList, List aggregates, boolean forQueryRewrite)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:             List aggregateVector, boolean forQueryRewrite)
commit:1c7cfce
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.NextSequenceNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import java.util.Vector;
1: import java.sql.Types;
1: 
1: /**
1:  * A class that represents a value obtained from a Sequence using 'NEXT VALUE'
1:  */
0: public class NextSequenceNode extends ValueNode {
1: 
1:     private TableName sequenceName;
1:     private SequenceDescriptor sequenceDescriptor;
1: 
1:     /**
0:      * Initializer for a NextSequenceNode
1:      *
1:      * @param sequenceName The name of the sequence being called
0:      * @throws org.apache.derby.iapi.error.StandardException
0:      *          Thrown on error
1:      */
0:     public void init(Object sequenceName) throws StandardException {
0:         this.sequenceName = (TableName) sequenceName;
1:     }
1: 
1:     /**
1:      * Bind this expression.  This means binding the sub-expressions,
1:      * as well as figuring out what the return type is for this expression.
1:      *
1:      * @param fromList        The FROM list for the query this
1:      *                        expression is in, for binding columns.
1:      * @param subqueryList    The subquery list being built as we find SubqueryNodes
0:      * @param aggregateVector The aggregate vector being built as we find AggregateNodes
1:      * @return The new top of the expression tree.
1:      * @throws StandardException Thrown on error
1:      */
0:     public ValueNode bindExpression(
0:             FromList fromList, SubqueryList subqueryList,
0:             Vector aggregateVector, boolean forQueryRewrite)
0:             throws StandardException {
1: 
1:         // lookup sequence object in the data dictionary
1:         SchemaDescriptor sd = getSchemaDescriptor(sequenceName.getSchemaName());
1:         sequenceDescriptor = getDataDictionary().getSequenceDescriptor(sd, sequenceName.getTableName());
1: 
1:         // set the datatype of the value node
1:         this.setType(sequenceDescriptor.getDataType());
1: 
1:         ValueNode returnNode = this;
1: 
1:         return returnNode;
1: 
1:     }
1: 
1: 
0:     public void generateExpression
1:             (
0:                     ExpressionClassBuilder acb,
1:                     MethodBuilder mb
1:             ) throws StandardException {
1: 
0:         //TODO : Proper implementation for value generation
0:         generateConstant(acb, mb);    //dummy method to return a constant
1: 
0:         acb.generateDataValue(mb, getTypeCompiler(),
0:                 getTypeServices().getCollationType(), (LocalField) null);
1: 
1:     }
1: 
1:     /**
1:      * Dummy implementation to return a constant. Will be replaced with actual NEXT VALUE logic.
1:      *
1:      * @param ecb The ExpressionClassBuilder for the class being built
1:      * @param mb The method the expression will go into
1:      * @throws StandardException on error
1:      */
0:     public void generateConstant
1:             (
1:                     ExpressionClassBuilder ecb,
1:                     MethodBuilder mb
1:             ) throws StandardException {
1:         switch (getTypeServices().getJDBCTypeId()) {
1:             case Types.INTEGER:
1:                 mb.push(1);
1:                 break;
1:             default:
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.THROWASSERT(
1:                             "Unexpected dataType = " + getTypeServices().getJDBCTypeId());
1:                 }
1:         }
1: 
1:     }
1: 
1:     /**
1:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:      * for how this should be done for tree printing.
1:      *
1:      * @return This object as a String
1:      */
1: 
1:     public String toString() {
1:         if (SanityManager.DEBUG) {
1:             return super.toString();
1:         } else {
1:             return "";
1:         }
1:     }
1: 
0:     protected boolean isEquivalent(ValueNode other) throws StandardException {
1:         return false;
1:     }
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7fd0c6e
/////////////////////////////////////////////////////////////////////////
1:             throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "SEQUENCE", sequenceName.getFullTableName());
1:         }
1: 
1:         //
1:         // System sequences can only be operated at runtime when inserting
1:         // a new identity value. See DERBY-6542.
1:         //
1:         if ( sd.isSystemSchema() )
1:         {
1:             throw StandardException.newException( SQLState.LANG_SYSTEM_SEQUENCE );
commit:bb4cfe9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:              2
commit:729be57
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
/////////////////////////////////////////////////////////////////////////
0: 		mb.push( DataDictionary.SYSSEQUENCES_CATALOG_NUM );
/////////////////////////////////////////////////////////////////////////
0:              3
commit:30dd4c5
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // Higher level bind() logic may try to redundantly re-bind this node. Unfortunately,
1:         // that causes us to think that the sequence is being referenced more than once
1:         // in the same statement. If the sequence generator is already filled in, then
1:         // this node has already been bound and we can exit quickly. See DERBY-4803.
1:         //
1:         if ( sequenceDescriptor != null ) { return this; }
1:         
commit:e671fc7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
/////////////////////////////////////////////////////////////////////////
1:             throws StandardException
1:     {
1:         CompilerContext cc = getCompilerContext();
0:         
1:         if ( (cc.getReliability() & CompilerContext.NEXT_VALUE_FOR_ILLEGAL) != 0 )
1:         {
1:             throw StandardException.newException( SQLState.LANG_NEXT_VALUE_FOR_ILLEGAL );
1:         }
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // The statement is only allowed to refer to a given sequence once.
1:         // See DERBY-4513.
1:         //
1:         if ( cc.isReferenced( sequenceDescriptor ) )
1:         {
1:             throw StandardException.newException
1:                 ( SQLState.LANG_SEQUENCE_REFERENCED_TWICE, sequenceName.getFullTableName() );
1:         }
1:         cc.addReferencedSequence( sequenceDescriptor );
0: 
commit:139ca85
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
/////////////////////////////////////////////////////////////////////////
1:         if ( sequenceDescriptor == null )
1:         {
0:                 throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "SEQUENCE", sequenceName.getFullTableName());
1:         }
0: 
/////////////////////////////////////////////////////////////////////////
1:         (
0:          ExpressionClassBuilder acb,
0:          MethodBuilder mb
0:          )
0:         throws StandardException
1:     {
1:         String sequenceUUIDstring = sequenceDescriptor.getUUID().toString();
1:         int dataTypeFormatID = sequenceDescriptor.getDataType().getNull().getTypeFormatId();
0:         
1: 		mb.pushThis();
1: 		mb.push( sequenceUUIDstring );
1: 		mb.push( dataTypeFormatID );
1: 		mb.callMethod
1:              VMOpcode.INVOKEVIRTUAL,
1:              ClassName.BaseActivation,
1:              "getCurrentValueAndAdvance",
1:              ClassName.NumberDataValue,
0:              2
1:              );
commit:a4cbe6f
/////////////////////////////////////////////////////////////////////////
1:         // set up dependency on sequence and compile a check for USAGE
1:         // priv if needed
1:         getCompilerContext().createDependency( sequenceDescriptor );
1:         if ( isPrivilegeCollectionRequired() )
1:         {
1:             getCompilerContext().addRequiredUsagePriv( sequenceDescriptor );
1:         }
0: 
0:         return returnNode;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode other) throws StandardException {
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: class NextSequenceNode extends ValueNode {
1:      * Constructor for a NextSequenceNode
1:      * @param cm           The context manager
1:     NextSequenceNode(TableName sequenceName,
1:                      ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.NEXT_SEQUENCE_NODE);
1:         this.sequenceName = sequenceName;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode bindExpression(FromList fromList,
1:                              SubqueryList subqueryList,
1:                              List<AggregateNode> aggregates,
1:                              boolean forQueryRewrite) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
============================================================================