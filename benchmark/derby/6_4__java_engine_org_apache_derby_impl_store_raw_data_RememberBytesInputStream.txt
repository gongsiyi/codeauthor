1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.RememberBytesInputStream
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import java.io.FilterInputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.OutputStream;
1:eac0369: 
2:eac0369: /**
1:eac0369:   A FilterInputStream that remembers read or skipped bytes.
1:eac0369: 
1:eac0369:   <P>In record mode this stream remembers all the bytes a
1:eac0369:   caller reads or skips. After reading some bytes this
1:eac0369:   returns a 'replay' stream to re-read them.
1:eac0369: 
1:eac0369:   <P>A caller may call getReplaySteam to get a stream 
1:eac0369:   to re-read the the remembered bytes. Any number of calls
1:eac0369:   to getReplayStream are supported.
1:eac0369: 
1:eac0369:   <P>The clear function causes this stream to forget the remembered
1:eac0369:   bytes and re-enter record mode.
1:eac0369:   */
1:eac0369: public class RememberBytesInputStream extends FilterInputStream
1:eac0369: {
1:eac0369: 	ByteHolder bh;
1:eac0369: 	boolean recording = true;
1:bb1be44:     
1:bb1be44:     // In case of streams (e.g ReaderToUTF8Stream,
1:bb1be44:     // RawToBinaryFormatStream) that cannot be re-used
1:bb1be44:     // a read on a closed stream will throw an EOFException
1:bb1be44:     // hence keep track if the stream is closed or not
1:bb1be44:     boolean streamClosed = false;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	  Construct a RememberBytesInputStream.
1:eac0369: 
1:eac0369: 	  @param bh for storing the remembered bytes. (must be
1:eac0369: 	  in writing mode.
1:eac0369: 	  */
1:eac0369: 	public RememberBytesInputStream(InputStream in, ByteHolder bh) {
1:eac0369: 		super(in);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(bh.writingMode());
1:eac0369: 
1:eac0369: 		this.bh = bh;
1:bb1be44: 
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	  @see java.io.InputStream#read
1:eac0369: 	  @exception IOException thrown on an io error spooling rememberd bytes
1:eac0369: 	             to backing storage.
1:eac0369: 	  */
1:eac0369: 	public int read() throws IOException {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(recording,
1:eac0369: 								 "Must be in record mode to perform a read.");
1:bb1be44: 		
1:bb1be44:         int value = -1;
1:bb1be44:         
1:bb1be44:         if ( !streamClosed )
1:bb1be44:         {
1:bb1be44:             value = super.read();
1:bb1be44:             if ( value != -1 )
1:bb1be44:                 bh.write(value);
1:bb1be44:             else
1:bb1be44:                 streamClosed =true;
1:bb1be44:         }
1:bb1be44: 		
1:bb1be44:         return value;
1:eac0369: 	}
1:bb1be44: 
1:eac0369: 	/**
1:eac0369: 	  @see java.io.InputStream#read
1:eac0369: 	  @exception IOException thrown on an io error spooling rememberd bytes
1:eac0369: 	             to backing storage.
1:eac0369: 	  */
1:eac0369: 	public int read(byte b[], int off, int len) throws IOException {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(recording,
1:eac0369: 								 "Must be in record mode to perform a read.");
1:eac0369: 		
1:bb1be44:         if ( !streamClosed ) {
1:bb1be44:             if ((len + off) > b.length)
1:bb1be44:                 len = b.length - off;
1:bb1be44: 
1:bb1be44:             len = super.read(b, off, len);
1:bb1be44:             if (len > 0 )
1:bb1be44:                 bh.write(b, off, len);
1:bb1be44:             else
1:bb1be44:                 streamClosed = true;
1:bb1be44:         } else {
1:bb1be44:             return -1;
1:bb1be44:         }
1:bb1be44: 
1:bb1be44:         return len;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  read len bytes from the input stream, and store it in the byte holder.
1:eac0369: 
1:bb1be44:       Note, fillBuf does not return negative values, if there are no 
1:bb1be44:       bytes to store in the byteholder, it will return 0
1:eac0369: 	  @exception IOException thrown on an io error spooling rememberd bytes
1:eac0369: 	             to backing storage.
1:eac0369: 	  */
1:eac0369: 	public long fillBuf(int len) throws IOException{
1:bb1be44:         
1:bb1be44:         long val = 0;
1:bb1be44: 
1:bb1be44:         if ( !streamClosed )
1:bb1be44:         {
1:bb1be44:             val = bh.write(this.in, len);
1:bb1be44:             
1:bb1be44:             // if bh.write returns less than len, then the stream
1:bb1be44:             // has reached end of stream. See logic in MemByteHolder.write
1:bb1be44:             if ( val < len )
1:bb1be44:                 streamClosed=true;
1:bb1be44:         }       
1:bb1be44: 
1:bb1be44:         return val;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  read len bytes from the byte holder, and write it to the output stream.
1:eac0369: 
1:eac0369: 	  @exception IOException thrown on an io error spooling rememberd bytes
1:eac0369: 	             to backing storage.
1:eac0369: 	  */
1:eac0369: 	public int putBuf(OutputStream out, int len) throws IOException {
1:eac0369: 		bh.startReading();
1:eac0369: 		return bh.read(out, len);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see java.io.InputStream#skip
1:eac0369: 	  @exception IOException thrown on an io error spooling rememberd bytes
1:eac0369: 	             to backing storage.
1:eac0369: 	  */
1:eac0369: 	public long skip(long count)  throws IOException {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(recording,
1:eac0369: 								 "Must be in record mode to perform a read.");
1:eac0369: 		return bh.write(in,count);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Get an input stream for re-reading the remembered bytes.
1:eac0369: 	  */
1:eac0369: 	public InputStream getReplayStream() throws IOException {
1:eac0369: 		bh.startReading();
1:eac0369: 		recording = false;
1:eac0369: 		return new ByteHolderInputStream(bh);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Get the byteHolder.
1:eac0369: 	  */
1:eac0369: 	public ByteHolder getByteHolder() throws IOException {
1:eac0369: 		return bh;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Clear all the remembered bytes. This stream will
1:eac0369: 	  remember any bytes read after this call.
1:eac0369: 	  @exception IOException thrown on an io error clearing backing
1:eac0369: 	             storage.
1:eac0369: 	  */
1:eac0369: 	public void clear() throws IOException {
1:eac0369: 		bh.clear();
1:eac0369: 		recording = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Set the InputStream from which this reads.
1:eac0369: 
1:eac0369: 	  <P>Please note this does not clear remembered
1:eac0369: 	  bytes.
1:eac0369: 	 */
1:eac0369: 	public void setInput(InputStream in) {
1:eac0369: 		this.in = in;
1:bb1be44:         streamClosed = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Return true iff this RememberBytesInputStream is
1:eac0369: 	  in recording mode.
1:eac0369: 	  */
1:eac0369: 	public boolean recording() {
1:eac0369: 		return recording;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Return the number of bytes remains in the byteHolder
1:eac0369: 	  for reading, without setting the write/read mode.
1:eac0369: 	  */
1:eac0369: 	public int available() throws IOException {
1:eac0369: 		// may not have set reading to be true, then,
1:eac0369: 		// we are getting available in negative numbers.
1:eac0369: 		int remainingBytes = bh.available();
1:eac0369: 		remainingBytes = remainingBytes > 0 ? remainingBytes : (-1) * remainingBytes;
1:eac0369: 		return remainingBytes;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:  	  Return the number of bytes that have been saved to this byte holder.
1:eac0369:       This result is different from available() as it is unaffected by the
1:eac0369:       current read position on the ByteHolder.
1:eac0369: 	  */
1:eac0369: 	public int numBytesSaved() throws IOException 
1:eac0369:     {
1:eac0369:         return(bh.numBytesSaved());
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  remove the remaining bytes in the byteHolder to the beginning
1:eac0369: 	  set the position to start recording just after these bytes.
1:eac0369: 	  returns how many bytes was transfered to the beginning.
1:eac0369: 	  */
1:eac0369: 	public int shiftToFront() throws IOException {
1:eac0369: 		int bytesShifted = bh.shiftToFront();
1:eac0369: 		return bytesShifted;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see java.lang.Object#toString
1:eac0369: 	  */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return
1:eac0369: 			"RememberBytesInputStream: "+
1:eac0369: 			" recording: "+recording+" "+bh;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bb1be44
/////////////////////////////////////////////////////////////////////////
1:     
1:     // In case of streams (e.g ReaderToUTF8Stream,
1:     // RawToBinaryFormatStream) that cannot be re-used
1:     // a read on a closed stream will throw an EOFException
1:     // hence keep track if the stream is closed or not
1:     boolean streamClosed = false;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 		
1:         int value = -1;
1:         
1:         if ( !streamClosed )
1:         {
1:             value = super.read();
1:             if ( value != -1 )
1:                 bh.write(value);
1:             else
1:                 streamClosed =true;
1:         }
1: 		
1:         return value;
/////////////////////////////////////////////////////////////////////////
1: 		
1:         if ( !streamClosed ) {
1:             if ((len + off) > b.length)
1:                 len = b.length - off;
1: 
1:             len = super.read(b, off, len);
1:             if (len > 0 )
1:                 bh.write(b, off, len);
1:             else
1:                 streamClosed = true;
1:         } else {
1:             return -1;
1:         }
1: 
1:         return len;
1:       Note, fillBuf does not return negative values, if there are no 
1:       bytes to store in the byteholder, it will return 0
1:         
1:         long val = 0;
1: 
1:         if ( !streamClosed )
1:         {
1:             val = bh.write(this.in, len);
1:             
1:             // if bh.write returns less than len, then the stream
1:             // has reached end of stream. See logic in MemByteHolder.write
1:             if ( val < len )
1:                 streamClosed=true;
1:         }       
1: 
1:         return val;
/////////////////////////////////////////////////////////////////////////
1:         streamClosed = false;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.RememberBytesInputStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: 
1: /**
1:   A FilterInputStream that remembers read or skipped bytes.
1: 
1:   <P>In record mode this stream remembers all the bytes a
1:   caller reads or skips. After reading some bytes this
1:   returns a 'replay' stream to re-read them.
1: 
1:   <P>A caller may call getReplaySteam to get a stream 
1:   to re-read the the remembered bytes. Any number of calls
1:   to getReplayStream are supported.
1: 
1:   <P>The clear function causes this stream to forget the remembered
1:   bytes and re-enter record mode.
1:   */
1: public class RememberBytesInputStream extends FilterInputStream
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	ByteHolder bh;
1: 	boolean recording = true;
1: 	
1: 	/**
1: 	  Construct a RememberBytesInputStream.
1: 
1: 	  @param bh for storing the remembered bytes. (must be
1: 	  in writing mode.
1: 	  */
1: 	public RememberBytesInputStream(InputStream in, ByteHolder bh) {
1: 		super(in);
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(bh.writingMode());
1: 
1: 		this.bh = bh;
1: 	}
1: 	
1: 	/**
1: 	  @see java.io.InputStream#read
1: 	  @exception IOException thrown on an io error spooling rememberd bytes
1: 	             to backing storage.
1: 	  */
1: 	public int read() throws IOException {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(recording,
1: 								 "Must be in record mode to perform a read.");
0: 		int value = super.read();
0: 		if (value != -1)
0: 			bh.write(value);
0: 		return value;
1: 	}
1: 
1: 	/**
1: 	  @see java.io.InputStream#read
1: 	  @exception IOException thrown on an io error spooling rememberd bytes
1: 	             to backing storage.
1: 	  */
1: 	public int read(byte b[], int off, int len) throws IOException {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(recording,
1: 								 "Must be in record mode to perform a read.");
0: 		if ((len + off) > b.length)
0: 			len = b.length - off;
0: 		len = super.read(b,off,len);
0: 		if (len != -1)
0: 			bh.write(b,off,len);
0: 		return len;
1: 	}
1: 
1: 	/**
1: 	  read len bytes from the input stream, and store it in the byte holder.
1: 
1: 	  @exception IOException thrown on an io error spooling rememberd bytes
1: 	             to backing storage.
1: 	  */
1: 	public long fillBuf(int len) throws IOException{
0: 		return bh.write(this.in, len);
1: 	}
1: 
1: 	/**
1: 	  read len bytes from the byte holder, and write it to the output stream.
1: 
1: 	  @exception IOException thrown on an io error spooling rememberd bytes
1: 	             to backing storage.
1: 	  */
1: 	public int putBuf(OutputStream out, int len) throws IOException {
1: 		bh.startReading();
1: 		return bh.read(out, len);
1: 	}
1: 
1: 	/**
1: 	  @see java.io.InputStream#skip
1: 	  @exception IOException thrown on an io error spooling rememberd bytes
1: 	             to backing storage.
1: 	  */
1: 	public long skip(long count)  throws IOException {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(recording,
1: 								 "Must be in record mode to perform a read.");
1: 		return bh.write(in,count);
1: 	}
1: 
1: 	/**
1: 	  Get an input stream for re-reading the remembered bytes.
1: 	  */
1: 	public InputStream getReplayStream() throws IOException {
1: 		bh.startReading();
1: 		recording = false;
1: 		return new ByteHolderInputStream(bh);
1: 	}
1: 
1: 	/**
1: 	  Get the byteHolder.
1: 	  */
1: 	public ByteHolder getByteHolder() throws IOException {
1: 		return bh;
1: 	}
1: 
1: 	/**
1: 	  Clear all the remembered bytes. This stream will
1: 	  remember any bytes read after this call.
1: 	  @exception IOException thrown on an io error clearing backing
1: 	             storage.
1: 	  */
1: 	public void clear() throws IOException {
1: 		bh.clear();
1: 		recording = true;
1: 	}
1: 
1: 	/**
1: 	  Set the InputStream from which this reads.
1: 
1: 	  <P>Please note this does not clear remembered
1: 	  bytes.
1: 	 */
1: 	public void setInput(InputStream in) {
1: 		this.in = in;
1: 	}
1: 
1: 	/**
1: 	  Return true iff this RememberBytesInputStream is
1: 	  in recording mode.
1: 	  */
1: 	public boolean recording() {
1: 		return recording;
1: 	}
1: 
1: 	/**
1: 	  Return the number of bytes remains in the byteHolder
1: 	  for reading, without setting the write/read mode.
1: 	  */
1: 	public int available() throws IOException {
1: 		// may not have set reading to be true, then,
1: 		// we are getting available in negative numbers.
1: 		int remainingBytes = bh.available();
1: 		remainingBytes = remainingBytes > 0 ? remainingBytes : (-1) * remainingBytes;
1: 		return remainingBytes;
1: 	}
1: 
1:     /**
1:  	  Return the number of bytes that have been saved to this byte holder.
1:       This result is different from available() as it is unaffected by the
1:       current read position on the ByteHolder.
1: 	  */
1: 	public int numBytesSaved() throws IOException 
1:     {
1:         return(bh.numBytesSaved());
1:     }
1: 
1: 	/**
1: 	  remove the remaining bytes in the byteHolder to the beginning
1: 	  set the position to start recording just after these bytes.
1: 	  returns how many bytes was transfered to the beginning.
1: 	  */
1: 	public int shiftToFront() throws IOException {
1: 		int bytesShifted = bh.shiftToFront();
1: 		return bytesShifted;
1: 	}
1: 
1: 	/**
1: 	  @see java.lang.Object#toString
1: 	  */
1: 	public String toString()
1: 	{
1: 		return
1: 			"RememberBytesInputStream: "+
1: 			" recording: "+recording+" "+bh;
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import java.io.FilterInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: 
0: /**
0:   A FilterInputStream that remembers read or skipped bytes.
0: 
0:   <P>In record mode this stream remembers all the bytes a
0:   caller reads or skips. After reading some bytes this
0:   returns a 'replay' stream to re-read them.
0: 
0:   <P>A caller may call getReplaySteam to get a stream 
0:   to re-read the the remembered bytes. Any number of calls
0:   to getReplayStream are supported.
0: 
0:   <P>The clear function causes this stream to forget the remembered
0:   bytes and re-enter record mode.
0:   */
0: public class RememberBytesInputStream extends FilterInputStream
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	ByteHolder bh;
0: 	boolean recording = true;
0: 	
0: 	/**
0: 	  Construct a RememberBytesInputStream.
0: 
0: 	  @param bh for storing the remembered bytes. (must be
0: 	  in writing mode.
0: 	  */
0: 	public RememberBytesInputStream(InputStream in, ByteHolder bh) {
0: 		super(in);
0: 
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(bh.writingMode());
0: 
0: 		this.bh = bh;
0: 	}
0: 	
0: 	/**
0: 	  @see java.io.InputStream#read
0: 	  @exception IOException thrown on an io error spooling rememberd bytes
0: 	             to backing storage.
0: 	  */
0: 	public int read() throws IOException {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(recording,
0: 								 "Must be in record mode to perform a read.");
0: 		int value = super.read();
0: 		if (value != -1)
0: 			bh.write(value);
0: 		return value;
0: 	}
0: 
0: 	/**
0: 	  @see java.io.InputStream#read
0: 	  @exception IOException thrown on an io error spooling rememberd bytes
0: 	             to backing storage.
0: 	  */
0: 	public int read(byte b[], int off, int len) throws IOException {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(recording,
0: 								 "Must be in record mode to perform a read.");
0: 		if ((len + off) > b.length)
0: 			len = b.length - off;
0: 		len = super.read(b,off,len);
0: 		if (len != -1)
0: 			bh.write(b,off,len);
0: 		return len;
0: 	}
0: 
0: 	/**
0: 	  read len bytes from the input stream, and store it in the byte holder.
0: 
0: 	  @exception IOException thrown on an io error spooling rememberd bytes
0: 	             to backing storage.
0: 	  */
0: 	public long fillBuf(int len) throws IOException{
0: 		return bh.write(this.in, len);
0: 	}
0: 
0: 	/**
0: 	  read len bytes from the byte holder, and write it to the output stream.
0: 
0: 	  @exception IOException thrown on an io error spooling rememberd bytes
0: 	             to backing storage.
0: 	  */
0: 	public int putBuf(OutputStream out, int len) throws IOException {
0: 		bh.startReading();
0: 		return bh.read(out, len);
0: 	}
0: 
0: 	/**
0: 	  @see java.io.InputStream#skip
0: 	  @exception IOException thrown on an io error spooling rememberd bytes
0: 	             to backing storage.
0: 	  */
0: 	public long skip(long count)  throws IOException {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(recording,
0: 								 "Must be in record mode to perform a read.");
0: 		return bh.write(in,count);
0: 	}
0: 
0: 	/**
0: 	  Get an input stream for re-reading the remembered bytes.
0: 	  */
0: 	public InputStream getReplayStream() throws IOException {
0: 		bh.startReading();
0: 		recording = false;
0: 		return new ByteHolderInputStream(bh);
0: 	}
0: 
0: 	/**
0: 	  Get the byteHolder.
0: 	  */
0: 	public ByteHolder getByteHolder() throws IOException {
0: 		return bh;
0: 	}
0: 
0: 	/**
0: 	  Clear all the remembered bytes. This stream will
0: 	  remember any bytes read after this call.
0: 	  @exception IOException thrown on an io error clearing backing
0: 	             storage.
0: 	  */
0: 	public void clear() throws IOException {
0: 		bh.clear();
0: 		recording = true;
0: 	}
0: 
0: 	/**
0: 	  Set the InputStream from which this reads.
0: 
0: 	  <P>Please note this does not clear remembered
0: 	  bytes.
0: 	 */
0: 	public void setInput(InputStream in) {
0: 		this.in = in;
0: 	}
0: 
0: 	/**
0: 	  Return true iff this RememberBytesInputStream is
0: 	  in recording mode.
0: 	  */
0: 	public boolean recording() {
0: 		return recording;
0: 	}
0: 
0: 	/**
0: 	  Return the number of bytes remains in the byteHolder
0: 	  for reading, without setting the write/read mode.
0: 	  */
0: 	public int available() throws IOException {
0: 		// may not have set reading to be true, then,
0: 		// we are getting available in negative numbers.
0: 		int remainingBytes = bh.available();
0: 		remainingBytes = remainingBytes > 0 ? remainingBytes : (-1) * remainingBytes;
0: 		return remainingBytes;
0: 	}
0: 
0:     /**
0:  	  Return the number of bytes that have been saved to this byte holder.
0:       This result is different from available() as it is unaffected by the
0:       current read position on the ByteHolder.
0: 	  */
0: 	public int numBytesSaved() throws IOException 
0:     {
0:         return(bh.numBytesSaved());
0:     }
0: 
0: 	/**
0: 	  remove the remaining bytes in the byteHolder to the beginning
0: 	  set the position to start recording just after these bytes.
0: 	  returns how many bytes was transfered to the beginning.
0: 	  */
0: 	public int shiftToFront() throws IOException {
0: 		int bytesShifted = bh.shiftToFront();
0: 		return bytesShifted;
0: 	}
0: 
0: 	/**
0: 	  @see java.lang.Object#toString
0: 	  */
0: 	public String toString()
0: 	{
0: 		return
0: 			"RememberBytesInputStream: "+
0: 			" recording: "+recording+" "+bh;
0: 	}
0: }
0: 
============================================================================