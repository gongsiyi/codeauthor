1:f302c78: /*
1:3d7af4e: 
1:a535ea9:    Derby - Class org.apache.derby.impl.jdbc.UpdatableBlobStream
1:3d7af4e: 
1:3d7af4e:    Licensed to the Apache Software Foundation (ASF) under one
1:3d7af4e:    or more contributor license agreements.  See the NOTICE file
1:3d7af4e:    distributed with this work for additional information
1:3d7af4e:    regarding copyright ownership.  The ASF licenses this file
1:3d7af4e:    to you under the Apache License, Version 2.0 (the
1:3d7af4e:    "License"); you may not use this file except in compliance
1:3d7af4e:    with the License.  You may obtain a copy of the License at
1:3d7af4e: 
1:3d7af4e:      http://www.apache.org/licenses/LICENSE-2.0
1:3d7af4e: 
1:3d7af4e:    Unless required by applicable law or agreed to in writing,
1:3d7af4e:    software distributed under the License is distributed on an
1:3d7af4e:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3d7af4e:    KIND, either express or implied.  See the License for the
1:3d7af4e:    specific language governing permissions and limitations
1:3d7af4e:    under the License.
1:3d7af4e: 
1:3d7af4e:  */
1:3d7af4e: 
1:3d7af4e: package org.apache.derby.impl.jdbc;
1:3d7af4e: 
1:3d7af4e: import java.io.IOException;
1:3d7af4e: import java.io.InputStream;
1:3d7af4e: import java.sql.SQLException;
1:a1c1356: import org.apache.derby.iapi.services.io.InputStreamUtil;
1:3d7af4e: 
1:3d7af4e: /**
1:a535ea9:  * Updatable blob stream is a wrapper stream over dvd stream
1:f302c78:  * and LOBInputStream.
1:f302c78:  * It detects if blob data has moved from dvd to clob control. If this happens,
1:f302c78:  * it will update itself to point to LOBInputStream and reflect changes made to
1:f302c78:  * the Blob after the current position of the stream.
1:3d7af4e:  */
1:a535ea9: class UpdatableBlobStream extends InputStream {
1:f302c78:     /**
1:f302c78:      * Flag to check if it is using stream from LOBStreamControl or from DVD.
1:f302c78:      * <code>true</code> means data is read from LOBStreamControl,
1:f302c78:      * <code>false</code> means data is read from the DVD.
1:f302c78:      */
1:3d7af4e:     private boolean materialized;
1:3d7af4e:     private InputStream stream;
1:f302c78:     /* Current position of this stream in number of bytes. */
1:3d7af4e:     private long pos;
1:f302c78:     private final EmbedBlob blob;
1:f302c78:     
1:3d7af4e:     /**
1:debc0fc:      * Position in Blob where to stop reading unless EOF is reached first.
1:78afc5b:      */
1:debc0fc:     private final long maxPos;
1:3d7af4e:     
1:3d7af4e: 
1:78afc5b:     /**
1:a535ea9:      * Constructs UpdatableBlobStream using the the InputStream receives as the
1:f302c78:      * parameter. The initial position is set to the <code>0</code>.
1:a535ea9:      * 
1:3d7af4e:      * @param blob EmbedBlob this stream is associated with.
1:3d7af4e:      * @param is InputStream this class is going to use internally.
1:debc0fc:      * @throws IOException if an I/O error occurs
1:78afc5b:      */
1:debc0fc:     UpdatableBlobStream (EmbedBlob blob, InputStream is)
1:debc0fc:             throws IOException {
1:debc0fc:         // The entire Blob has been requested, hence set length to infinity (or
1:debc0fc:         // as close as we get).
1:debc0fc:         this(blob, is, 0L, Long.MAX_VALUE);
3:3d7af4e:     }
1:f302c78:     
1:78afc5b:     /**
1:0631531:      * Construct an <code>UpdatableBlobStream</code> using the 
1:78afc5b:      * <code>InputStream</code> received as parameter. The initial
1:78afc5b:      * position in the stream is set to <code>pos</code> and the
1:78afc5b:      * stream is restricted to a length of <code>len</code>.
1:a535ea9:      * 
1:78afc5b:      * @param blob EmbedBlob this stream is associated with.
1:78afc5b:      * @param is InputStream this class is going to use internally.
1:78afc5b:      * @param pos initial position
1:78afc5b:      * @param len The length to which the underlying <code>InputStream</code>
1:78afc5b:      *            has to be restricted.
1:3d7af4e:      * @throws IOException
1:3d7af4e:      */
1:a535ea9:     UpdatableBlobStream (EmbedBlob blob, InputStream is, long pos, long len) 
1:debc0fc:             throws IOException {
1:3d7af4e:         this.blob = blob;
1:f302c78:         stream = is;
1:debc0fc:         maxPos = pos + len;
1:f302c78:         
1:cd727e7:         //Skip to the requested position
1:cd727e7:         //inside the stream.
1:debc0fc:         if (pos > 0) {
1:debc0fc:             skip(pos);
1:3d7af4e:         }
1:3d7af4e:     }
1:3d7af4e: 
1:f302c78:     /**
1:f302c78:      * Checks if this object is using materialized blob
1:f302c78:      * if not it checks if the blob was materialized since
1:f302c78:      * this stream was last access. If the blob was materialized
1:f302c78:      * (due to one of the set methods) it gets the stream again and
1:f302c78:      * sets the position to current read position.
1:f302c78:      */
1:3d7af4e:     private void updateIfRequired () throws IOException {
1:3d7af4e:         if (materialized)
1:3d7af4e:             return;
1:3d7af4e:         if (blob.isMaterialized()) {
1:3d7af4e:             materialized = true;
1:3d7af4e:             try {
1:3d7af4e:                 stream = blob.getBinaryStream();
1:3d7af4e:             } catch (SQLException ex) {
1:ed0be21:                 throw Util.newIOException(ex);
1:3d7af4e:             }
1:a1c1356:             InputStreamUtil.skipFully(stream, pos);
1:3d7af4e:         }
1:3d7af4e:     }
1:3d7af4e: 
1:3d7af4e:     /**
1:3d7af4e:      * Reads the next byte of data from the input stream. The value byte is
1:3d7af4e:      * returned as an <code>int</code> in the range <code>0</code> to
1:3d7af4e:      * <code>255</code>. If no byte is available because the end of the stream
1:3d7af4e:      * has been reached, the value <code>-1</code> is returned. This method
1:3d7af4e:      * blocks until input data is available, the end of the stream is detected,
1:3d7af4e:      * or an exception is thrown.
1:f302c78:      * <p>
1:f302c78:      * A subclass must provide an implementation of this method.
1:f302c78:      * <p>
1:f302c78:      * Note that this stream will reflect changes made to the underlying Blob at
1:f302c78:      * positions equal to or larger then the current position.
1:f302c78:      *
1:3d7af4e:      * @return the next byte of data, or <code>-1</code> if the end of the
1:3d7af4e:      *             stream is reached.
1:3d7af4e:      * @exception IOException  if an I/O error occurs.
1:f302c78:      * @see InputStream#read
1:3d7af4e:      */
1:3d7af4e:     public int read() throws IOException {
1:f302c78:         updateIfRequired();
2:78afc5b:         
1:debc0fc:         //If the current position inside the stream has exceeded maxPos, the
1:debc0fc:         //read should return -1 signifying end of stream.
1:debc0fc:         if (pos >= maxPos) {
1:78afc5b:             return -1;
1:3d7af4e:         }
1:3d7af4e:         int ret = stream.read();
1:3d7af4e:         if (ret >= 0)
1:3d7af4e:             pos++;
1:3d7af4e:         return ret;
1:3d7af4e:     }
1:3d7af4e: 
1:3d7af4e:     /**
1:3d7af4e:      * Reads up to <code>len</code> bytes of data from the input stream into
1:3d7af4e:      * an array of bytes.  An attempt is made to read as many as
1:3d7af4e:      * <code>len</code> bytes, but a smaller number may be read.
1:3d7af4e:      * The number of bytes actually read is returned as an integer.
1:f302c78:      * <p>
1:f302c78:      * Note that this stream will reflect changes made to the underlying Blob at
1:f302c78:      * positions equal to or larger then the current position .
1:f302c78:      *
1:3d7af4e:      * @param b     the buffer into which the data is read.
1:3d7af4e:      * @param off   the start offset in array <code>b</code>
1:3d7af4e:      *                   at which the data is written.
1:3d7af4e:      * @param len   the maximum number of bytes to read.
1:3d7af4e:      * @return the total number of bytes read into the buffer, or
1:3d7af4e:      *             <code>-1</code> if there is no more data because the end of
1:3d7af4e:      *             the stream has been reached.
1:3d7af4e:      * @exception IOException If the first byte cannot be read for any reason
1:3d7af4e:      * other than end of file, or if the input stream has been closed, or if
1:3d7af4e:      * some other I/O error occurs.
1:3d7af4e:      * @exception NullPointerException If <code>b</code> is <code>null</code>.
1:f302c78:      * @exception IndexOutOfBoundsException If <code>off</code> is negative,
1:f302c78:      * <code>len</code> is negative, or <code>len</code> is greater than
1:3d7af4e:      * <code>b.length - off</code>
1:f302c78:      * @see java.io.InputStream#read(byte[],int,int)
1:3d7af4e:      */
1:3d7af4e:     public int read(byte[] b, int off, int len) throws IOException {
1:f302c78:         updateIfRequired();
1:28365b0:         long remaining = maxPos - pos;
1:28365b0:         // Return EOF if the maximum allowed position has been reached,
1:28365b0:         // and we're trying to read at least one byte.
1:28365b0:         if (remaining == 0 && len > 0) {
1:28365b0:             return -1;
1:28365b0:         }
1:28365b0:         int actualLength = (int) Math.min(len, remaining);
1:168957e:         int retValue = stream.read(b, off, actualLength);
2:3d7af4e:         if (retValue > 0)
2:3d7af4e:             pos += retValue;
2:3d7af4e:         return retValue;
1:f302c78:     }
1:3d7af4e: 
1:3d7af4e:     /**
1:3d7af4e:      * Reads some number of bytes from the input stream and stores them into
1:3d7af4e:      * the buffer array <code>b</code>. The number of bytes actually read is
1:3d7af4e:      * returned as an integer.  This method blocks until input data is
1:3d7af4e:      * available, end of file is detected, or an exception is thrown.
1:f302c78:      * <p>
1:f302c78:      * Note that this stream will reflect changes made to the underlying Blob at
1:f302c78:      * positions equal to or larger then the current position .
1:f302c78:      *
1:3d7af4e:      * @param b   the buffer into which the data is read.
1:3d7af4e:      * @return the total number of bytes read into the buffer, or
1:3d7af4e:      *             <code>-1</code> is there is no more data because the end of
1:3d7af4e:      *             the stream has been reached.
1:3d7af4e:      * @exception IOException  If the first byte cannot be read for any reason
1:3d7af4e:      * other than the end of the file, if the input stream has been closed, or
1:3d7af4e:      * if some other I/O error occurs.
1:3d7af4e:      * @exception NullPointerException  if <code>b</code> is <code>null</code>.
1:f302c78:      * @see java.io.InputStream#read(byte[])
1:3d7af4e:      */
1:3d7af4e:     public int read(byte[] b) throws IOException {
1:28365b0:         return read(b, 0, b.length);
1:3d7af4e:     }
1:3d7af4e: 
1:3d7af4e:     /**
1:3d7af4e:      * Skips over and discards <code>n</code> bytes of data from this input
1:3d7af4e:      * stream. The <code>skip</code> method may, for a variety of reasons, end
1:3d7af4e:      * up skipping over some smaller number of bytes, possibly <code>0</code>.
1:3d7af4e:      * This may result from any of a number of conditions; reaching end of file
1:3d7af4e:      * before <code>n</code> bytes have been skipped is only one possibility.
1:3d7af4e:      * The actual number of bytes skipped is returned.  If <code>n</code> is
1:3d7af4e:      * negative, no bytes are skipped.
1:f302c78:      * <p>
1:f302c78:      * Note that this stream will reflect changes made to the underlying Blob at
1:f302c78:      * positions equal to or larger then the current position .
1:f302c78:      *
1:3d7af4e:      * @param n   the number of bytes to be skipped.
1:3d7af4e:      * @return the actual number of bytes skipped.
1:3d7af4e:      * @exception IOException  if the stream does not support seek,
1:3d7af4e:      *                      or if some other I/O error occurs.
1:3d7af4e:      * @see java.io.InputStream#skip(long)
1:3d7af4e:      */
1:3d7af4e:     public long skip(long n) throws IOException {
4:3d7af4e:         updateIfRequired();
1:3d7af4e:         long retValue = stream.skip(n);
1:3d7af4e:         if (retValue > 0)
1:3d7af4e:             pos += retValue;
1:3d7af4e:         return retValue;
1:3d7af4e:     }
1:3d7af4e: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:28365b0
/////////////////////////////////////////////////////////////////////////
1:         long remaining = maxPos - pos;
1:         // Return EOF if the maximum allowed position has been reached,
1:         // and we're trying to read at least one byte.
1:         if (remaining == 0 && len > 0) {
1:             return -1;
1:         }
1:         int actualLength = (int) Math.min(len, remaining);
/////////////////////////////////////////////////////////////////////////
1:         return read(b, 0, b.length);
commit:a535ea9
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.UpdatableBlobStream
/////////////////////////////////////////////////////////////////////////
1:  * Updatable blob stream is a wrapper stream over dvd stream
1: class UpdatableBlobStream extends InputStream {
/////////////////////////////////////////////////////////////////////////
1:      * Constructs UpdatableBlobStream using the the InputStream receives as the
1:      * 
0:     UpdatableBlobStream (EmbedBlob blob, InputStream is) {
/////////////////////////////////////////////////////////////////////////
0:      * Construct an <code>UpdatableBlobStream<code> using the 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:     UpdatableBlobStream (EmbedBlob blob, InputStream is, long pos, long len) 
commit:168957e
/////////////////////////////////////////////////////////////////////////
1:         int retValue = stream.read(b, off, actualLength);
commit:f302c78
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0:  * Updateable blob stream is a wrapper stream over dvd stream
1:  * and LOBInputStream.
1:  * It detects if blob data has moved from dvd to clob control. If this happens,
1:  * it will update itself to point to LOBInputStream and reflect changes made to
1:  * the Blob after the current position of the stream.
1:     /**
1:      * Flag to check if it is using stream from LOBStreamControl or from DVD.
1:      * <code>true</code> means data is read from LOBStreamControl,
1:      * <code>false</code> means data is read from the DVD.
1:      */
1:     /* Current position of this stream in number of bytes. */
1:     private final EmbedBlob blob;
1: 
1:      * parameter. The initial position is set to the <code>0</code>.
1:         stream = is;
1: 
1:     /**
1:      * Checks if this object is using materialized blob
1:      * if not it checks if the blob was materialized since
1:      * this stream was last access. If the blob was materialized
1:      * (due to one of the set methods) it gets the stream again and
1:      * sets the position to current read position.
1:      */
/////////////////////////////////////////////////////////////////////////
0:                 throw ioe;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * A subclass must provide an implementation of this method.
1:      * <p>
1:      * Note that this stream will reflect changes made to the underlying Blob at
1:      * positions equal to or larger then the current position.
1:      *
1:      * @see InputStream#read
1:         updateIfRequired();
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Note that this stream will reflect changes made to the underlying Blob at
1:      * positions equal to or larger then the current position .
1:      *
/////////////////////////////////////////////////////////////////////////
1:      * @exception IndexOutOfBoundsException If <code>off</code> is negative,
1:      * <code>len</code> is negative, or <code>len</code> is greater than
1:      * @see java.io.InputStream#read(byte[],int,int)
1:         updateIfRequired();
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Note that this stream will reflect changes made to the underlying Blob at
1:      * positions equal to or larger then the current position .
1:      *
/////////////////////////////////////////////////////////////////////////
1:      * @see java.io.InputStream#read(byte[])
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Note that this stream will reflect changes made to the underlying Blob at
1:      * positions equal to or larger then the current position .
1:      *
/////////////////////////////////////////////////////////////////////////
1:     }
commit:3d7af4e
/////////////////////////////////////////////////////////////////////////
0: /* 
1: 
0:    Derby - Class org.apache.derby.impl.jdbc.UpdateableBlobStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.sql.SQLException;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
1: /**
0:  * Updateable blob stream is a wrapper stream over dvd stream 
0:  * and LOBInputStream. It detects if blob data has moved from 
0:  * dvd to clob control update itself to point to LOBInputStream.
1:  */
0: class UpdateableBlobStream extends InputStream {
0:     //flag to check if its using stream from LOBStreamControl
0:     //or from DVD.
1:     private boolean materialized;
1:     private InputStream stream;
1:     private long pos;
0:     private EmbedBlob blob;
1:     
1:     /**
0:      * Constructs UpdateableBlobStream using the the InputStream receives as the
0:      * parameter. The initial position is set to the pos.
1:      * @param blob EmbedBlob this stream is associated with.
1:      * @param is InputStream this class is going to use internally.
1:      * @throws IOException
1:      */
0:     UpdateableBlobStream (EmbedBlob blob, InputStream is) {
0:         stream = is;        
0:         this.pos = 0;
1:         this.blob = blob;
1:     }
1:     
0:     //Checks if this object is using materialized blob
0:     //if not it checks if the blob was materialized since
0:     //this stream was last access. If the blob was materialized 
0:     //(due to one of the set methods) it gets the stream again and 
0:     //sets the position to current read position
1:     private void updateIfRequired () throws IOException {
1:         if (materialized)
1:             return;
1:         if (blob.isMaterialized()) {
1:             materialized = true;
1:             try {
1:                 stream = blob.getBinaryStream();
1:             } catch (SQLException ex) {
0:                 IOException ioe = new IOException (ex.getMessage());
0:                 ioe.initCause (ex);
1:             }
0:             long leftToSkip = pos;
0:             while (leftToSkip > 0) {
0:                 long skipped = stream.skip (leftToSkip);
0:                 if (skipped == 0) {
0:                     //skipping zero byte check stream has reached eof
0:                     if (stream.read() < 0) {
0:                          throw new IOException (
0:                                  MessageService.getCompleteMessage (
0:                                  SQLState.STREAM_EOF, new Object [0]));
1:                     }
0:                     else {
0:                         skipped = 1;
1:                     }
1:                 }
0:                 leftToSkip -= skipped;
1:                 
1:             }
1:         }
1:     }
1:     
1:     /**
1:      * Reads the next byte of data from the input stream. The value byte is
1:      * returned as an <code>int</code> in the range <code>0</code> to
1:      * <code>255</code>. If no byte is available because the end of the stream
1:      * has been reached, the value <code>-1</code> is returned. This method
1:      * blocks until input data is available, the end of the stream is detected,
1:      * or an exception is thrown.
0:      * 
0:      * <p> A subclass must provide an implementation of this method.
0:      * 
1:      * @return the next byte of data, or <code>-1</code> if the end of the
1:      *             stream is reached.
1:      * @exception IOException  if an I/O error occurs.
1:      */
1:     public int read() throws IOException {
1:         updateIfRequired();        
1:         int ret = stream.read();
1:         if (ret >= 0)
1:             pos++;
1:         return ret;
1:     }
1: 
1:     /**
1:      * Reads up to <code>len</code> bytes of data from the input stream into
1:      * an array of bytes.  An attempt is made to read as many as
1:      * <code>len</code> bytes, but a smaller number may be read.
1:      * The number of bytes actually read is returned as an integer.
0:      * 
0:      * 
1:      * @param b     the buffer into which the data is read.
1:      * @param off   the start offset in array <code>b</code>
1:      *                   at which the data is written.
1:      * @param len   the maximum number of bytes to read.
1:      * @return the total number of bytes read into the buffer, or
1:      *             <code>-1</code> if there is no more data because the end of
1:      *             the stream has been reached.
1:      * @exception IOException If the first byte cannot be read for any reason
1:      * other than end of file, or if the input stream has been closed, or if
1:      * some other I/O error occurs.
1:      * @exception NullPointerException If <code>b</code> is <code>null</code>.
0:      * @exception IndexOutOfBoundsException If <code>off</code> is negative, 
0:      * <code>len</code> is negative, or <code>len</code> is greater than 
1:      * <code>b.length - off</code>
0:      * @see java.io.InputStream#read()
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         updateIfRequired();        
0:         int retValue = super.read(b, off, len);
1:         if (retValue > 0)
1:             pos += retValue;
1:         return retValue;
1:     }
1: 
1:     /**
1:      * Reads some number of bytes from the input stream and stores them into
1:      * the buffer array <code>b</code>. The number of bytes actually read is
1:      * returned as an integer.  This method blocks until input data is
1:      * available, end of file is detected, or an exception is thrown.
0:      * 
1:      * @param b   the buffer into which the data is read.
1:      * @return the total number of bytes read into the buffer, or
1:      *             <code>-1</code> is there is no more data because the end of
1:      *             the stream has been reached.
1:      * @exception IOException  If the first byte cannot be read for any reason
1:      * other than the end of the file, if the input stream has been closed, or
1:      * if some other I/O error occurs.
1:      * @exception NullPointerException  if <code>b</code> is <code>null</code>.
0:      * @see java.io.InputStream#read(byte[], int, int)
1:      */
1:     public int read(byte[] b) throws IOException {
1:         updateIfRequired();
0:         int retValue = stream.read(b);
1:         if (retValue > 0)
1:             pos += retValue;
1:         return retValue;
1:     }
1: 
1:     /**
1:      * Skips over and discards <code>n</code> bytes of data from this input
1:      * stream. The <code>skip</code> method may, for a variety of reasons, end
1:      * up skipping over some smaller number of bytes, possibly <code>0</code>.
1:      * This may result from any of a number of conditions; reaching end of file
1:      * before <code>n</code> bytes have been skipped is only one possibility.
1:      * The actual number of bytes skipped is returned.  If <code>n</code> is
1:      * negative, no bytes are skipped.
0:      * 
1:      * @param n   the number of bytes to be skipped.
1:      * @return the actual number of bytes skipped.
1:      * @exception IOException  if the stream does not support seek,
1:      *                      or if some other I/O error occurs.
1:      * @see java.io.InputStream#skip(long)
1:      */
1:     public long skip(long n) throws IOException {
1:         updateIfRequired();
1:         long retValue = stream.skip(n);
1:         if (retValue > 0)
1:             pos += retValue;
1:         return retValue;
1:     }        
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a1c1356
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.InputStreamUtil;
/////////////////////////////////////////////////////////////////////////
1:             InputStreamUtil.skipFully(stream, pos);
commit:ed0be21
/////////////////////////////////////////////////////////////////////////
1:                 throw Util.newIOException(ex);
commit:debc0fc
/////////////////////////////////////////////////////////////////////////
1:      * Position in Blob where to stop reading unless EOF is reached first.
1:     private final long maxPos;
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException if an I/O error occurs
1:     UpdatableBlobStream (EmbedBlob blob, InputStream is)
1:             throws IOException {
1:         // The entire Blob has been requested, hence set length to infinity (or
1:         // as close as we get).
1:         this(blob, is, 0L, Long.MAX_VALUE);
/////////////////////////////////////////////////////////////////////////
1:             throws IOException {
0:         this.blob = blob;
0:         stream = is;
1:         maxPos = pos + len;
1:         if (pos > 0) {
1:             skip(pos);
0:         }
/////////////////////////////////////////////////////////////////////////
1:         //If the current position inside the stream has exceeded maxPos, the
1:         //read should return -1 signifying end of stream.
1:         if (pos >= maxPos) {
/////////////////////////////////////////////////////////////////////////
0:         int actualLength = (int) Math.min(len, maxPos - pos);
/////////////////////////////////////////////////////////////////////////
0:         int actualLength = (int) Math.min(b.length, maxPos - pos);
commit:0631531
/////////////////////////////////////////////////////////////////////////
1:      * Construct an <code>UpdatableBlobStream</code> using the 
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:cd727e7
/////////////////////////////////////////////////////////////////////////
0:      * @throws SQLException
0:     throws IOException, SQLException {
/////////////////////////////////////////////////////////////////////////
1:         //Skip to the requested position
1:         //inside the stream.
0:         skip(pos);
commit:78afc5b
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Position in Blob where to stop reading.
1:      */
0:     private long maxPos;
1:     
/////////////////////////////////////////////////////////////////////////
0:         //The subset of the Blob
0:         //has not been requested.
0:         //Hence set maxPos to -1.
0:         this.maxPos = -1;
0:     }
0:     
1:     /**
0:      * Construct an <code>UpdateableBlobStream<code> using the 
1:      * <code>InputStream</code> received as parameter. The initial
1:      * position in the stream is set to <code>pos</code> and the
1:      * stream is restricted to a length of <code>len</code>.
0:      *
1:      * @param blob EmbedBlob this stream is associated with.
1:      * @param is InputStream this class is going to use internally.
1:      * @param pos initial position
1:      * @param len The length to which the underlying <code>InputStream</code>
1:      *            has to be restricted.
0:      * @throws IOException
1:      */
0:     UpdateableBlobStream (EmbedBlob blob, InputStream is, long pos, long len) 
0:     throws SQLException {
0:         this(blob, is);
0:         //The length requested cannot exceed the length
0:         //of the underlying Blob object. Hence chose the
0:         //minimum of the length of the underlying Blob
0:         //object and requested length.
0:         maxPos = Math.min(blob.length(), pos + len);
0:         
0:         try {
0:             //Skip to the requested position
0:             //inside the stream.
0:             skip(pos);
0:         }
0:         catch(IOException ioe) {
0:             //Skip throws an IOException. Wrap the
0:             //exception inside a SQLException and 
0:             //throw it to the caller.
0:             
0:             SQLException sqle = new SQLException();
0:             sqle.initCause(ioe);
0:             throw sqle;
0:         }
/////////////////////////////////////////////////////////////////////////
0:         
0:         //If maxPos is not invalid and the current
0:         //position inside the stream has exceeded
0:         //maxPos the read sould return -1 signifying
0:         //end of stream.
0:         if (maxPos != -1 && pos >= maxPos) {
1:             return -1;
0:         }
/////////////////////////////////////////////////////////////////////////
0:         int actualLength = 0;
0:         
0:         //If maxPos is not invalid then
0:         //ensure that the length(len) 
0:         //that is requested falls within
0:         //the restriction set by maxPos.
0:         if(maxPos != -1) {
0:             actualLength 
0:                     = (int )Math.min(len, maxPos - pos);
0:         }
0:         else {
0:             //maxPos has not been set. Make
0:             //maxPos the length requested.
0:             actualLength = len;
0:         }
0:         int retValue = super.read(b, off, actualLength);
/////////////////////////////////////////////////////////////////////////
0:         int actualLength = 0;
0:         //If maxPos is not invalid
0:         //then ensure that the length
0:         //(len of the byte array b) 
0:         //falls within the restriction 
0:         //set by maxPos.
0:         if(maxPos != -1) {
0:             actualLength 
0:                     = (int )Math.min(b.length, maxPos - pos);
0:         }
0:         else {
0:             //maxPos has not been set. Make
0:             //maxPos the length requested.
0:             actualLength = b.length;
0:         }
0:         int retValue = stream.read(b, 0, actualLength);
============================================================================