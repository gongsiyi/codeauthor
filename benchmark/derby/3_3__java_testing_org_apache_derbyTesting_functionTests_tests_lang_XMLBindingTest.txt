1:cd4ba4a: /*
5:cd4ba4a: 
1:cd4ba4a:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest
1:cd4ba4a: 
1:cd4ba4a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:cd4ba4a:    contributor license agreements.  See the NOTICE file distributed with
1:cd4ba4a:    this work for additional information regarding copyright ownership.
1:cd4ba4a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:cd4ba4a:    (the "License"); you may not use this file except in compliance with
1:cd4ba4a:    the License.  You may obtain a copy of the License at
1:cd4ba4a: 
1:cd4ba4a:       http://www.apache.org/licenses/LICENSE-2.0
1:cd4ba4a: 
1:cd4ba4a:    Unless required by applicable law or agreed to in writing, software
1:cd4ba4a:    distributed under the License is distributed on an "AS IS" BASIS,
1:cd4ba4a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd4ba4a:    See the License for the specific language governing permissions and
1:cd4ba4a:    limitations under the License.
1:cd4ba4a: 
2:cd4ba4a:  */
1:cd4ba4a: 
1:cd4ba4a: package org.apache.derbyTesting.functionTests.tests.lang;
1:cd4ba4a: 
1:cd4ba4a: import java.sql.Connection;
1:cd4ba4a: import java.sql.PreparedStatement;
1:cd4ba4a: import java.sql.ResultSet;
1:cd4ba4a: import java.sql.Types;
1:cd4ba4a: import junit.framework.Test;
1:cd4ba4a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:cd4ba4a: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:cd4ba4a: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:3983f42: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:cd4ba4a: import org.apache.derbyTesting.junit.TestConfiguration;
1:1ae02c9: import org.apache.derbyTesting.junit.XML;
1:cd4ba4a: 
1:cd4ba4a: /**
1:cd4ba4a:  * This test checks to make sure that the XML data type and
1:cd4ba4a:  * the corresponding XML operations all work as expected
1:cd4ba4a:  * from the JDBC side of things.  In particular, this test
1:cd4ba4a:  * verifies that 1) it is NOT possible to bind to/from an XML
1:cd4ba4a:  * datatype (because such an operation requires JDBC 4.0 and
1:cd4ba4a:  * is not yet supported by Derby), and 2) the correct behavior
1:cd4ba4a:  * occurs when null values (both Java and SQL) are bound
1:cd4ba4a:  * into the bindable parameters for the XML operators.
1:cd4ba4a:  *
1:cd4ba4a:  * This test also checks that insertion from XML files
1:cd4ba4a:  * via a character stream works, which is important since
1:cd4ba4a:  * XML files can be arbitrarily long and thus stream-based
1:cd4ba4a:  * processing is a must.
1:cd4ba4a:  */
1:cd4ba4a: public class XMLBindingTest extends BaseJDBCTestCase {
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Public constructor required for running test as standalone JUnit.
1:cd4ba4a:      */
1:cd4ba4a:     public XMLBindingTest(String name)
1:cd4ba4a:     {
1:cd4ba4a:         super(name);
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Return a suite that runs a set of XML binding tests.  Only return
1:cd4ba4a:      * such a suite IF the testing classpath has the required XML classes.
1:cd4ba4a:      * Otherwise just return an empty suite.
1:cd4ba4a:      */
1:cd4ba4a:     public static Test suite()
1:cd4ba4a:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("XML Binding Suite");
1:cd4ba4a:         if (XML.classpathMeetsXMLReqs())
1:cd4ba4a:         {
1:cd4ba4a:             /* "false" in the next line means that we will *not* clean the
1:cd4ba4a:              * database before the embedded and client suites.  This ensures
1:cd4ba4a:              * that we do not remove the objects created by XBindTestSetup.
1:cd4ba4a:              */
1:3983f42:             Test test =
1:3983f42:                 TestConfiguration.defaultSuite(XMLBindingTest.class, false);
1:cd4ba4a: 
1:3983f42:             test = new XBindTestSetup(test);
1:cd4ba4a: 
1:cd4ba4a:             /* XML parser needs to read "personal.dtd" for schema-based
1:cd4ba4a:              * insertion, so copy it to user directory.
1:cd4ba4a:              */
1:3983f42:             test = new SupportFilesSetup(test,
1:cd4ba4a:                 new String [] {
1:cd4ba4a:                     "functionTests/tests/lang/xmlTestFiles/personal.dtd"
1:cd4ba4a:                 });
1:3983f42: 
1:3983f42:             // JEP 185 (http://openjdk.java.net/jeps/185) in Java SE 8 added
1:3983f42:             // restrictions on access to external resources. This system
1:3983f42:             // property loosens the restriction so that the XML parser is
1:3983f42:             // allowed to read the DTD.
1:3983f42:             test = SystemPropertyTestSetup.singleProperty(
1:3983f42:                     test, "javax.xml.accessExternalDTD", "file");
1:3983f42: 
1:3983f42:             suite.addTest(test);
1:cd4ba4a:         }
1:de7372b: 
1:cd4ba4a:         return suite;
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Performs a series of binding checks to make sure binding
1:cd4ba4a:      * to or from an XML value never works.
1:de7372b:      */
1:cd4ba4a:     public void testInvalidXMLBindings() throws Exception
1:cd4ba4a:     {
1:cd4ba4a:         // Binding to an XML column.
1:cd4ba4a:         assertCompileError("42Z70", "insert into xTable.t1(x) values (?)");
1:cd4ba4a: 
1:cd4ba4a:         // Binding to an XML value in the XMLSERIALIZE operator.
1:cd4ba4a:         assertCompileError("42Z70", 
1:cd4ba4a:                 "select XMLSERIALIZE(? AS CLOB) FROM XTABLE.T1");
1:cd4ba4a: 
1:cd4ba4a:         // Binding to an XML value in the XMLEXISTS operator.
1:cd4ba4a:         assertCompileError("42Z70", "select i from xTable.t1 where " +
1:cd4ba4a:                 "XMLEXISTS('//*' PASSING BY REF ?)");
1:cd4ba4a: 
1:cd4ba4a:         // Binding to an XML value in the XMLQUERY operator.
1:cd4ba4a:         assertCompileError("42Z70", "select i from xTable.t1 where " +
1:cd4ba4a:                 "XMLQUERY('//*' PASSING BY REF ? EMPTY ON EMPTY) is " +
1:cd4ba4a:                 "not null");
1:cd4ba4a: 
1:cd4ba4a:         /* Make sure that attempts to bind _from_ XML will fail.
1:cd4ba4a:          * We should fail at compile time with an error saying
1:cd4ba4a:          * that XML values are not allowed in top-level result
1:cd4ba4a:          * sets (and thus cannot be bound).
1:cd4ba4a:          */
1:cd4ba4a:         assertCompileError("42Z71", "select x from xTable.t1");
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Test serialization of the XML values inserted as part
1:cd4ba4a:      * XBindTestSetup processing.  For the documents that are
1:cd4ba4a:      * are larger than 32K, this tests that they can be correctly
1:cd4ba4a:      * read from disk as a stream (instead of just as as string).
1:cd4ba4a:      */
1:cd4ba4a:     public void testXMLSerializeBinding() throws Exception
1:cd4ba4a:     {
1:cd4ba4a:         // Array of expected character counts for every row inserted
1:cd4ba4a:         // into xTable.t1 as part of XBindTestSetup setup.  A "0"
1:cd4ba4a:         // means empty string; a "-1" means we inserted a null.
1:cd4ba4a:         int [] expectedCharCounts =
1:2710472:             new int [] { 40228, 38712, 1948, 1942, 1967, 1709, 22, -1, -1 };
1:cd4ba4a: 
1:cd4ba4a:         int rowCount = 0;
1:cd4ba4a:         ResultSet rs = createStatement().executeQuery(
1:cd4ba4a:                 "select i, XMLSERIALIZE(X AS CLOB) FROM xTable.t1");
1:cd4ba4a: 
1:cd4ba4a:         while (rs.next())
1:cd4ba4a:         {
1:cd4ba4a:             int charCount;
1:cd4ba4a:             java.io.Reader xResult = rs.getCharacterStream(2);
1:cd4ba4a: 
1:cd4ba4a:             // Count the number of characters we read back.
1:cd4ba4a:             if (!rs.wasNull())
1:cd4ba4a:             {
1:de7372b:                 int ch = xResult.read();
1:de7372b:                 for (charCount = 0; ch != -1; ch = xResult.read())
1:de7372b:                 {
1:de7372b:                     /* Xalan serialization produces platform-specific line-
1:de7372b:                      * endings (DERBY-2106), which can throw off the character
1:de7372b:                      * count on Windows.  So if we see the Windows '\r' char
1:de7372b:                      * we do not count it.
1:de7372b:                      */
1:de7372b:                     if ((char)ch != '\r')
1:de7372b:                         charCount++;
1:de7372b:                 }
1:cd4ba4a:                 xResult.close();
1:cd4ba4a:             }
1:cd4ba4a:             else
1:cd4ba4a:                 charCount = -1;
1:cd4ba4a: 
1:cd4ba4a:             assertEquals("Unexpected serialized character count:",
1:cd4ba4a:                 expectedCharCounts[rowCount], charCount);
1:cd4ba4a: 
1:cd4ba4a:             rowCount++;
1:cd4ba4a:         }
1:cd4ba4a: 
1:cd4ba4a:         assertEquals("Unexpected row count when serializing:",
1:cd4ba4a:             expectedCharCounts.length, rowCount);
1:cd4ba4a: 
1:cd4ba4a:         /* Test binding to the XMLSERIALIZE operand.  Since
1:cd4ba4a:          * the operand is an XML value, and since we don't
1:cd4ba4a:          * allow binding to an XML value (which is tested in
1:cd4ba4a:          * testInvalidXMLBindings()), there's nothing more to
1:cd4ba4a:          * to do here.
1:cd4ba4a:          */
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Run some simple XPath queries against the documents
1:cd4ba4a:      * inserted as part of XBindTestSetup to verify correct
1:cd4ba4a:      * functionality in insertion and XMLEXISTS.  Also test
1:cd4ba4a:      * binding of values into the first XMLEXISTS operator
1:cd4ba4a:      * (should fail).
1:cd4ba4a:      */
1:cd4ba4a:     public void testXMLExistsBinding() throws Exception
1:cd4ba4a:     {
1:cd4ba4a:         /* Test binding to the XMLEXISTS operands.  Binding
1:cd4ba4a:          * of the second (XML) operand is not allowed and was
1:cd4ba4a:          * checked in "testInvalidXMLBindings()" above.  Here we
1:cd4ba4a:          * check binding of the first operand, which should fail
1:cd4ba4a:          * because SQL/XML spec says the first operand must
1:cd4ba4a:          * be a string literal.
1:cd4ba4a:          */
1:cd4ba4a:         assertCompileError("42Z75", 
1:cd4ba4a:                 "select i from xTable.t1 where " +
1:cd4ba4a:                 "XMLEXISTS (? PASSING BY REF x)");
1:cd4ba4a: 
1:cd4ba4a:         // Run some sample queries.
1:cd4ba4a:         existsQuery("//abb", 1);
1:cd4ba4a:         existsQuery("//d50", 1);
1:cd4ba4a:         existsQuery("//person/email", 4);
1:cd4ba4a:         existsQuery("/personnel", 5);
1:cd4ba4a:         existsQuery("//person/@id", 4);
1:cd4ba4a: 
1:cd4ba4a:         /* This next one is important because it verifies
1:cd4ba4a:          * that implicit/default values which are defined
1:cd4ba4a:          * in a DTD _are_ actually processed, even though
1:cd4ba4a:          * we don't perform validation.  Thus this next
1:cd4ba4a:          * query _should_ return a match.
1:cd4ba4a:          */
1:cd4ba4a:         existsQuery("//person/@noteTwo", 1);
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Test binding of values into the first XMLQUERY operand
1:cd4ba4a:      * (should fail).
1:cd4ba4a:      */
1:cd4ba4a:     public void testXMLQueryBinding() throws Exception
1:cd4ba4a:     {
1:cd4ba4a:         /* Binding of the second (XML) operand is not allowed
1:cd4ba4a:          * and is checked as part of "testInvalidXMLBindings()".
1:cd4ba4a:          * Here we check binding of the first operand, which
1:cd4ba4a:          * should fail because SQL/XML spec says the first
1:cd4ba4a:          * operand must be a string literal.
1:cd4ba4a:          */
1:cd4ba4a:         assertCompileError("42Z75", 
1:cd4ba4a:                 "select i from xTable.t1 where " +
1:cd4ba4a:                 "XMLQUERY (? PASSING BY REF x EMPTY ON EMPTY) " +
1:cd4ba4a:                 "is not null");
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Helper method.  Selects all rows (from xTable.t1) against which
1:cd4ba4a:      * evaluation of the received XPath expression returns a non-empty
1:cd4ba4a:      * sequence.  Evaluates the query using the XMLEXISTS operator and
1:cd4ba4a:      * then verifies that the number of rows matches the expected row
1:cd4ba4a:      * row count.
1:cd4ba4a:      *
1:cd4ba4a:      * @param xPath The XPath expression to evaluate.
1:cd4ba4a:      * @param expectedRows Number of rows for which we expect XMLEXISTS
1:cd4ba4a:      *  to return "true".
1:cd4ba4a:      */
1:cd4ba4a:     private void existsQuery(String xPath, int expectedRows)
1:cd4ba4a:         throws Exception
1:cd4ba4a:     {
1:cd4ba4a:         ResultSet rs = createStatement().executeQuery(
1:cd4ba4a:             "select i from xTable.t1 where " +
1:cd4ba4a:             "xmlexists('" + xPath + "' passing by ref x)");
1:cd4ba4a: 
1:cd4ba4a:         JDBC.assertDrainResults(rs, expectedRows);
1:cd4ba4a:     }
1:cd4ba4a: 
1:cd4ba4a:     /**
1:cd4ba4a:      * Helper class.  Creates a test table and populates it with data.
1:cd4ba4a:      * That data is then used throughout the various test methods that
1:cd4ba4a:      * are run in XMLBindingTest.
1:cd4ba4a:      */
1:cd4ba4a:     private static class XBindTestSetup extends BaseJDBCTestSetup
1:cd4ba4a:     {
1:3983f42:         public XBindTestSetup(Test test) {
1:3983f42:             super(test);
1:cd4ba4a:         }
1:cd4ba4a: 
1:cd4ba4a:         /**
1:cd4ba4a:          * Create the XML table and insert all of the test documents.
1:cd4ba4a:          * Some of the documents are small, others are larger than
1:cd4ba4a:          * 32K (which will test stream processing of XML data).  This
1:cd4ba4a:          * method is called as part of the XBindTestSetup because the
1:cd4ba4a:          * data is used throughout the test methods in XMLBindingTest.
1:cd4ba4a:          * That said, though, this method is itself a test, as well--
1:cd4ba4a:          * namley, it tests that XMLPARSE binding succeeds in all
1:cd4ba4a:          * of the cases where it is expected to succeed.
1:cd4ba4a:          */
1:cd4ba4a:         public void setUp() throws Exception
1:cd4ba4a:         {
1:cd4ba4a:             String tName = "xTable.t1";
1:cd4ba4a:             Connection c = getConnection();
1:cd4ba4a:             c.createStatement().execute("create table " + tName +
1:cd4ba4a:                  "(i int generated always as identity, x xml)");
1:cd4ba4a: 
1:cd4ba4a:             // Test parsing of > 32K XML documents.
1:cd4ba4a:             XML.insertFile(c, tName, "x", "wide40k.xml", 1);
1:cd4ba4a:             XML.insertFile(c, tName, "x", "deep40k.xml", 1);
1:cd4ba4a: 
1:cd4ba4a:             /* Test parsing of docs that use schemas.  Since DTDs
1:cd4ba4a:              * are stored in "{user.dir}/extin" we have to modify
1:cd4ba4a:              * the XML documents that use DTDs so that they can find
1:cd4ba4a:              * the DTD files.
1:cd4ba4a:              */
1:cd4ba4a: 
1:cd4ba4a:             XML.insertFile(c, tName, "x", "xsdDoc.xml", 1);
1:cd4ba4a:             XML.insertDocWithDTD(c, tName, "x",
1:cd4ba4a:                 "dtdDoc.xml", "personal.dtd", 1);
1:cd4ba4a: 
1:cd4ba4a:             // XMLPARSE is not supposed to validate, so the following
1:cd4ba4a:             // inserts should SUCCEED, even though the documents
1:cd4ba4a:             // don't adhere to their schemas.
1:cd4ba4a: 
1:cd4ba4a:             XML.insertFile(c, tName, "x", "xsdDoc_invalid.xml", 1);
1:cd4ba4a:             XML.insertDocWithDTD(c, tName, "x",
1:cd4ba4a:                 "dtdDoc_invalid.xml", "personal.dtd", 1);
1:cd4ba4a: 
1:cd4ba4a:             // Test simple binding to the XMLPARSE operand.
1:cd4ba4a: 
1:cd4ba4a:             PreparedStatement pSt = getConnection().prepareStatement(
1:cd4ba4a:                 "insert into xTable.t1(x) values " +
1:cd4ba4a:                 "(XMLPARSE (DOCUMENT CAST (? as CLOB) PRESERVE WHITESPACE))");
1:cd4ba4a: 
1:cd4ba4a:             // This should work.  Note we check binding via
1:cd4ba4a:             // a character stream method in XML.insertFile().
1:cd4ba4a: 
1:cd4ba4a:             pSt.setString(1, "<simple> doc </simple>");
1:cd4ba4a:             pSt.execute();
1:cd4ba4a: 
1:cd4ba4a:             // Null should work, too.  Make sure the inserts execute without
1:cd4ba4a:             // error here.  We'll verify the results as part of the testing
1:cd4ba4a:             // for XMLSERIALIZE.
1:cd4ba4a: 
1:cd4ba4a:             // Java null.
1:cd4ba4a:             pSt.setString(1, null);
1:cd4ba4a:             pSt.execute();
1:cd4ba4a: 
1:cd4ba4a:             // SQL null.
1:cd4ba4a:             pSt.setNull(1, Types.CLOB);
1:cd4ba4a:             pSt.execute();
1:cd4ba4a:             pSt.close();
1:cd4ba4a:             c = null;
1:cd4ba4a:         }
1:cd4ba4a: 
1:cd4ba4a:         /**
1:cd4ba4a:          * Just have to drop the table we created in setUp().
1:cd4ba4a:          */
1:cd4ba4a:         public void tearDown() throws Exception
1:cd4ba4a:         {
1:cd4ba4a:             getConnection().createStatement().execute("drop table xTable.t1");
1:cd4ba4a:             super.tearDown();
1:cd4ba4a:         }
1:cd4ba4a:     }
1:cd4ba4a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.XML;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("XML Binding Suite");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3983f42
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:             Test test =
1:                 TestConfiguration.defaultSuite(XMLBindingTest.class, false);
1:             test = new XBindTestSetup(test);
1:             test = new SupportFilesSetup(test,
1: 
1:             // JEP 185 (http://openjdk.java.net/jeps/185) in Java SE 8 added
1:             // restrictions on access to external resources. This system
1:             // property loosens the restriction so that the XML parser is
1:             // allowed to read the DTD.
1:             test = SystemPropertyTestSetup.singleProperty(
1:                     test, "javax.xml.accessExternalDTD", "file");
1: 
1:             suite.addTest(test);
/////////////////////////////////////////////////////////////////////////
1:         public XBindTestSetup(Test test) {
1:             super(test);
author:Army
-------------------------------------------------------------------------------
commit:2710472
/////////////////////////////////////////////////////////////////////////
1:             new int [] { 40228, 38712, 1948, 1942, 1967, 1709, 22, -1, -1 };
commit:f7abbf4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             XBindTestSetup wrapper = new XBindTestSetup(suite);
0:             return new SupportFilesSetup(wrapper,
commit:de7372b
/////////////////////////////////////////////////////////////////////////
0: import junit.extensions.TestSetup;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
/////////////////////////////////////////////////////////////////////////
0:             TestSetup wrapper = new XBindTestSetup(suite);
0:             wrapper = new SupportFilesSetup(wrapper,
1: 
0:             /* RESOLVE: In order to run XMLBindingTest as part of a
0:              * suite we currently have to disable the security manager
0:              * to allow the JAXP parser to read DTD files.  Once we
0:              * figure out how to give JAXP the correct permissions
0:              * in the derby_tests policy file, we can then remove the
0:              * "noSecurityManager()" decoration. See comments in
0:              * DERBY-1758 for details.
1:              */
0:             return SecurityManagerSetup.noSecurityManager(wrapper);
/////////////////////////////////////////////////////////////////////////
0:             new int [] { 39441, 37925, 1161, 1155, 1180, 922, 22, -1, -1 };
/////////////////////////////////////////////////////////////////////////
1:                 int ch = xResult.read();
1:                 for (charCount = 0; ch != -1; ch = xResult.read())
1:                 {
1:                     /* Xalan serialization produces platform-specific line-
1:                      * endings (DERBY-2106), which can throw off the character
1:                      * count on Windows.  So if we see the Windows '\r' char
1:                      * we do not count it.
1:                      */
1:                     if ((char)ch != '\r')
1:                         charCount++;
1:                 }
commit:cd4ba4a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.io.InputStreamReader;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.Statement;
1: import java.sql.Types;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.XML;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This test checks to make sure that the XML data type and
1:  * the corresponding XML operations all work as expected
1:  * from the JDBC side of things.  In particular, this test
1:  * verifies that 1) it is NOT possible to bind to/from an XML
1:  * datatype (because such an operation requires JDBC 4.0 and
1:  * is not yet supported by Derby), and 2) the correct behavior
1:  * occurs when null values (both Java and SQL) are bound
1:  * into the bindable parameters for the XML operators.
1:  *
1:  * This test also checks that insertion from XML files
1:  * via a character stream works, which is important since
1:  * XML files can be arbitrarily long and thus stream-based
1:  * processing is a must.
1:  */
1: public class XMLBindingTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public XMLBindingTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Return a suite that runs a set of XML binding tests.  Only return
1:      * such a suite IF the testing classpath has the required XML classes.
1:      * Otherwise just return an empty suite.
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("XML Binding Suite");
1:         if (XML.classpathMeetsXMLReqs())
1:         {
1:             /* "false" in the next line means that we will *not* clean the
1:              * database before the embedded and client suites.  This ensures
1:              * that we do not remove the objects created by XBindTestSetup.
1:              */
0:             suite.addTest(
0:                 TestConfiguration.defaultSuite(XMLBindingTest.class, false));
1: 
0:             XBindTestSetup wrapper = new XBindTestSetup(suite);
1: 
1:             /* XML parser needs to read "personal.dtd" for schema-based
1:              * insertion, so copy it to user directory.
1:              */
0:             return new SupportFilesSetup(wrapper,
1:                 new String [] {
1:                     "functionTests/tests/lang/xmlTestFiles/personal.dtd"
1:                 });
1:         }
1: 
1:         return suite;
1:     }
1: 
1:     /**
1:      * Performs a series of binding checks to make sure binding
1:      * to or from an XML value never works.
1:      */
1:     public void testInvalidXMLBindings() throws Exception
1:     {
1:         // Binding to an XML column.
1:         assertCompileError("42Z70", "insert into xTable.t1(x) values (?)");
1: 
1:         // Binding to an XML value in the XMLSERIALIZE operator.
1:         assertCompileError("42Z70", 
1:                 "select XMLSERIALIZE(? AS CLOB) FROM XTABLE.T1");
1: 
1:         // Binding to an XML value in the XMLEXISTS operator.
1:         assertCompileError("42Z70", "select i from xTable.t1 where " +
1:                 "XMLEXISTS('//*' PASSING BY REF ?)");
1: 
1:         // Binding to an XML value in the XMLQUERY operator.
1:         assertCompileError("42Z70", "select i from xTable.t1 where " +
1:                 "XMLQUERY('//*' PASSING BY REF ? EMPTY ON EMPTY) is " +
1:                 "not null");
1: 
1:         /* Make sure that attempts to bind _from_ XML will fail.
1:          * We should fail at compile time with an error saying
1:          * that XML values are not allowed in top-level result
1:          * sets (and thus cannot be bound).
1:          */
1:         assertCompileError("42Z71", "select x from xTable.t1");
1:     }
1: 
1:     /**
1:      * Test serialization of the XML values inserted as part
1:      * XBindTestSetup processing.  For the documents that are
1:      * are larger than 32K, this tests that they can be correctly
1:      * read from disk as a stream (instead of just as as string).
1:      */
1:     public void testXMLSerializeBinding() throws Exception
1:     {
1:         // Array of expected character counts for every row inserted
1:         // into xTable.t1 as part of XBindTestSetup setup.  A "0"
1:         // means empty string; a "-1" means we inserted a null.
1:         int [] expectedCharCounts =
0:             new int [] { 40869, 40375, 1199, 1187, 1218, 954, 22, -1, -1 };
1: 
1:         int rowCount = 0;
1:         ResultSet rs = createStatement().executeQuery(
1:                 "select i, XMLSERIALIZE(X AS CLOB) FROM xTable.t1");
1: 
1:         while (rs.next())
1:         {
1:             int charCount;
1:             java.io.Reader xResult = rs.getCharacterStream(2);
1: 
1:             // Count the number of characters we read back.
1:             if (!rs.wasNull())
1:             {
0:                 for (charCount = 0; xResult.read() != -1; charCount++);
1:                 xResult.close();
1:             }
1:             else
1:                 charCount = -1;
1: 
1:             assertEquals("Unexpected serialized character count:",
1:                 expectedCharCounts[rowCount], charCount);
1: 
1:             rowCount++;
1:         }
1: 
1:         assertEquals("Unexpected row count when serializing:",
1:             expectedCharCounts.length, rowCount);
1: 
1:         /* Test binding to the XMLSERIALIZE operand.  Since
1:          * the operand is an XML value, and since we don't
1:          * allow binding to an XML value (which is tested in
1:          * testInvalidXMLBindings()), there's nothing more to
1:          * to do here.
1:          */
1:     }
1: 
1:     /**
1:      * Run some simple XPath queries against the documents
1:      * inserted as part of XBindTestSetup to verify correct
1:      * functionality in insertion and XMLEXISTS.  Also test
1:      * binding of values into the first XMLEXISTS operator
1:      * (should fail).
1:      */
1:     public void testXMLExistsBinding() throws Exception
1:     {
1:         /* Test binding to the XMLEXISTS operands.  Binding
1:          * of the second (XML) operand is not allowed and was
1:          * checked in "testInvalidXMLBindings()" above.  Here we
1:          * check binding of the first operand, which should fail
1:          * because SQL/XML spec says the first operand must
1:          * be a string literal.
1:          */
1:         assertCompileError("42Z75", 
1:                 "select i from xTable.t1 where " +
1:                 "XMLEXISTS (? PASSING BY REF x)");
1: 
1:         // Run some sample queries.
1:         existsQuery("//abb", 1);
1:         existsQuery("//d50", 1);
1:         existsQuery("//person/email", 4);
1:         existsQuery("/personnel", 5);
1:         existsQuery("//person/@id", 4);
1: 
1:         /* This next one is important because it verifies
1:          * that implicit/default values which are defined
1:          * in a DTD _are_ actually processed, even though
1:          * we don't perform validation.  Thus this next
1:          * query _should_ return a match.
1:          */
1:         existsQuery("//person/@noteTwo", 1);
1:     }
1: 
1:     /**
1:      * Test binding of values into the first XMLQUERY operand
1:      * (should fail).
1:      */
1:     public void testXMLQueryBinding() throws Exception
1:     {
1:         /* Binding of the second (XML) operand is not allowed
1:          * and is checked as part of "testInvalidXMLBindings()".
1:          * Here we check binding of the first operand, which
1:          * should fail because SQL/XML spec says the first
1:          * operand must be a string literal.
1:          */
1:         assertCompileError("42Z75", 
1:                 "select i from xTable.t1 where " +
1:                 "XMLQUERY (? PASSING BY REF x EMPTY ON EMPTY) " +
1:                 "is not null");
1:     }
1: 
1:     /**
1:      * Helper method.  Selects all rows (from xTable.t1) against which
1:      * evaluation of the received XPath expression returns a non-empty
1:      * sequence.  Evaluates the query using the XMLEXISTS operator and
1:      * then verifies that the number of rows matches the expected row
1:      * row count.
1:      *
1:      * @param xPath The XPath expression to evaluate.
1:      * @param expectedRows Number of rows for which we expect XMLEXISTS
1:      *  to return "true".
1:      */
1:     private void existsQuery(String xPath, int expectedRows)
1:         throws Exception
1:     {
1:         ResultSet rs = createStatement().executeQuery(
1:             "select i from xTable.t1 where " +
1:             "xmlexists('" + xPath + "' passing by ref x)");
1: 
1:         JDBC.assertDrainResults(rs, expectedRows);
1:     }
1: 
1:     /**
1:      * Helper class.  Creates a test table and populates it with data.
1:      * That data is then used throughout the various test methods that
1:      * are run in XMLBindingTest.
1:      */
1:     private static class XBindTestSetup extends BaseJDBCTestSetup
1:     {
0:         public XBindTestSetup(TestSuite tSuite) {
0:             super(tSuite);
1:         }
1: 
1:         /**
1:          * Create the XML table and insert all of the test documents.
1:          * Some of the documents are small, others are larger than
1:          * 32K (which will test stream processing of XML data).  This
1:          * method is called as part of the XBindTestSetup because the
1:          * data is used throughout the test methods in XMLBindingTest.
1:          * That said, though, this method is itself a test, as well--
1:          * namley, it tests that XMLPARSE binding succeeds in all
1:          * of the cases where it is expected to succeed.
1:          */
1:         public void setUp() throws Exception
1:         {
1:             String tName = "xTable.t1";
1:             Connection c = getConnection();
1:             c.createStatement().execute("create table " + tName +
1:                  "(i int generated always as identity, x xml)");
1: 
1:             // Test parsing of > 32K XML documents.
1:             XML.insertFile(c, tName, "x", "wide40k.xml", 1);
1:             XML.insertFile(c, tName, "x", "deep40k.xml", 1);
1: 
1:             /* Test parsing of docs that use schemas.  Since DTDs
1:              * are stored in "{user.dir}/extin" we have to modify
1:              * the XML documents that use DTDs so that they can find
1:              * the DTD files.
1:              */
1: 
1:             XML.insertFile(c, tName, "x", "xsdDoc.xml", 1);
1:             XML.insertDocWithDTD(c, tName, "x",
1:                 "dtdDoc.xml", "personal.dtd", 1);
1: 
1:             // XMLPARSE is not supposed to validate, so the following
1:             // inserts should SUCCEED, even though the documents
1:             // don't adhere to their schemas.
1: 
1:             XML.insertFile(c, tName, "x", "xsdDoc_invalid.xml", 1);
1:             XML.insertDocWithDTD(c, tName, "x",
1:                 "dtdDoc_invalid.xml", "personal.dtd", 1);
1: 
1:             // Test simple binding to the XMLPARSE operand.
1: 
1:             PreparedStatement pSt = getConnection().prepareStatement(
1:                 "insert into xTable.t1(x) values " +
1:                 "(XMLPARSE (DOCUMENT CAST (? as CLOB) PRESERVE WHITESPACE))");
1: 
1:             // This should work.  Note we check binding via
1:             // a character stream method in XML.insertFile().
1: 
1:             pSt.setString(1, "<simple> doc </simple>");
1:             pSt.execute();
1: 
1:             // Null should work, too.  Make sure the inserts execute without
1:             // error here.  We'll verify the results as part of the testing
1:             // for XMLSERIALIZE.
1: 
1:             // Java null.
1:             pSt.setString(1, null);
1:             pSt.execute();
1: 
1:             // SQL null.
1:             pSt.setNull(1, Types.CLOB);
1:             pSt.execute();
1:             pSt.close();
1:             c = null;
1:         }
1: 
1:         /**
1:          * Just have to drop the table we created in setUp().
1:          */
1:         public void tearDown() throws Exception
1:         {
1:             getConnection().createStatement().execute("drop table xTable.t1");
1:             super.tearDown();
1:         }
1:     }
1: }
============================================================================