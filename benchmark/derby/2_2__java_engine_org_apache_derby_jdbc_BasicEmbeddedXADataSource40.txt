1:4e0e1f1: /*
1:4e0e1f1: 
1:38667d9:    Derby - Class org.apache.derby.jdbc.BasicEmbeddedXADataSource40
1:4e0e1f1: 
1:4e0e1f1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4e0e1f1:    contributor license agreements.  See the NOTICE file distributed with
1:4e0e1f1:    this work for additional information regarding copyright ownership.
1:4e0e1f1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:4e0e1f1:    (the "License"); you may not use this file except in compliance with
1:4e0e1f1:    the License.  You may obtain a copy of the License at
1:4e0e1f1: 
1:4e0e1f1:       http://www.apache.org/licenses/LICENSE-2.0
1:4e0e1f1: 
1:4e0e1f1:    Unless required by applicable law or agreed to in writing, software
1:4e0e1f1:    distributed under the License is distributed on an "AS IS" BASIS,
1:4e0e1f1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4e0e1f1:    See the License for the specific language governing permissions and
1:4e0e1f1:    limitations under the License.
1:4e0e1f1: 
4:4e0e1f1:  */
1:4e0e1f1: 
1:4e0e1f1: package org.apache.derby.jdbc;
1:4e0e1f1: 
1:4e0e1f1: import java.sql.SQLException;
1:4e0e1f1: import javax.sql.XAConnection;
1:4e0e1f1: import org.apache.derby.iapi.jdbc.ResourceAdapter;
1:4e0e1f1: 
4:4e0e1f1: /**
2:4e0e1f1:  *
1:7863d83:  * This data source is suitable for an application using embedded Derby,
1:2913612:  * running on Java 8 Compact Profile 2 or higher.
1:2913612:  * <p/>
1:38667d9:  * BasicEmbeddedXADataSource40 is similar to
1:4e0e1f1:  * EmbeddedXADataSource40, except that it does not support JNDI
1:4e0e1f1:  * naming, i.e. it does not implement {@code javax.naming.Referenceable}.
1:4e0e1f1:  *
1:4e0e1f1:  * @see EmbeddedXADataSource40
1:4e0e1f1:  */
1:38667d9: public class BasicEmbeddedXADataSource40
1:38667d9:     extends BasicEmbeddedDataSource40
1:4e0e1f1:     implements
1:4e0e1f1:         EmbeddedXADataSourceInterface,
1:4e0e1f1:         javax.sql.XADataSource /* compile time check of 41 extensions */
1:4e0e1f1: {
1:4e0e1f1: 
1:4e0e1f1:     private static final long serialVersionUID = -5715798975598379739L;
1:4e0e1f1: 
1:b004dff:     /**
1:b004dff:      * link to the database
1:b004dff:      */
1:4e0e1f1:     private transient ResourceAdapter ra;
1:4e0e1f1: 
1:b004dff:     /**
1:b004dff:      * Constructs a basic embedded XA data source. See the class Javadoc.
1:b004dff:      */
1:38667d9:     public BasicEmbeddedXADataSource40() {
1:4e0e1f1:         super();
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /*
1:4e0e1f1:      * Implementation of XADataSource interface methods
1:4e0e1f1:      */
1:4e0e1f1: 
1:a086620:     @Override
1:4e0e1f1:     public final XAConnection getXAConnection() throws SQLException     {
1:4e0e1f1: 
1:4e0e1f1:         if (ra == null || !ra.isActive()) {
1:4e0e1f1:             ra = setupResourceAdapter(this, ra, null, null, false);
1:4e0e1f1:         }
1:4e0e1f1: 
1:4e0e1f1:         return createXAConnection (ra, getUser(), getPassword(), false);
1:4e0e1f1:     }
1:4e0e1f1: 
1:a086620:     @Override
1:4e0e1f1:     public final XAConnection getXAConnection(String user, String password)
1:4e0e1f1:          throws SQLException {
1:4e0e1f1: 
1:4e0e1f1:         if (ra == null || !ra.isActive()) {
1:4e0e1f1:             ra = setupResourceAdapter(this, ra, user, password, true);
1:4e0e1f1:         }
1:4e0e1f1: 
1:4e0e1f1:         return createXAConnection (ra, user, password, true);
1:4e0e1f1:     }
1:4e0e1f1: 
1:b004dff:     /**
1:b004dff:      * {@inheritDoc}
1:b004dff:      * <p/>
1:41935d5:      * Also clears {@link #ra}.
1:b004dff:      */
1:a086620:     @Override
1:4e0e1f1:     protected void update() {
1:4e0e1f1:         ra = null;
1:4e0e1f1:         super.update();
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1: 
1:b004dff:     /**
1:b004dff:      * Instantiate and return an EmbedXAConnection from this instance
1:b004dff:      * of EmbeddedXADataSource. Minion method.
1:b004dff:      * @param ra The resource adapter for this database
1:b004dff:      * @param user The user name
1:b004dff:      * @param password The password
1:b004dff:      * @param requestPassword @{@code false} if original call is from a
1:b004dff:      *        no-argument constructor, otherwise {@code true}
1:b004dff:      * @return An XA connection to the database
1:b004dff:      */
1:4e0e1f1:     private XAConnection createXAConnection(
1:4e0e1f1:             ResourceAdapter ra,
1:4e0e1f1:             String user,
1:4e0e1f1:             String password,
1:4e0e1f1:             boolean requestPassword) throws SQLException {
1:4e0e1f1: 
1:4e0e1f1:         // See comment for EmbeddedXADataSource#createXAConnection
1:595307e:         return findDriver().getNewXAConnection(
1:4e0e1f1:             this, ra, user, password, requestPassword);
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * @return The ResourceAdapter instance for the underlying database
1:4e0e1f1:      */
1:a086620:     @Override
1:4e0e1f1:     public ResourceAdapter getResourceAdapter() {
1:4e0e1f1:         return ra;
1:4e0e1f1:     }
1:4e0e1f1: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:41935d5
/////////////////////////////////////////////////////////////////////////
1:      * Also clears {@link #ra}.
commit:b004dff
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * link to the database
1:      */
1:     /**
1:      * Constructs a basic embedded XA data source. See the class Javadoc.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * {@inheritDoc}
1:      * <p/>
0:      * Also clears {@link ra}.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Instantiate and return an EmbedXAConnection from this instance
1:      * of EmbeddedXADataSource. Minion method.
1:      * @param ra The resource adapter for this database
1:      * @param user The user name
1:      * @param password The password
1:      * @param requestPassword @{@code false} if original call is from a
1:      *        no-argument constructor, otherwise {@code true}
1:      * @return An XA connection to the database
1:      */
commit:a086620
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     // Instantiate and return an EmbedXAConnection from this instance
0:     // of EmbeddedXADataSource.
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1:  * This data source is suitable for an application using embedded Derby,
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:  * This datasource is suitable for an application using embedded Derby,
1:  * running on Java 8 Compact Profile 2 or higher.
1:  * <p/>
commit:38667d9
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.BasicEmbeddedXADataSource40
/////////////////////////////////////////////////////////////////////////
1:  * BasicEmbeddedXADataSource40 is similar to
1: public class BasicEmbeddedXADataSource40
1:     extends BasicEmbeddedDataSource40
/////////////////////////////////////////////////////////////////////////
1:     public BasicEmbeddedXADataSource40() {
commit:4e0e1f1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import java.sql.SQLException;
1: import javax.sql.XAConnection;
1: import org.apache.derby.iapi.jdbc.ResourceAdapter;
1: 
1: /**
1:  *
0:  * NonJNDIEmbeddedXADataSource40 is similar to
1:  * EmbeddedXADataSource40, except that it does not support JNDI
1:  * naming, i.e. it does not implement {@code javax.naming.Referenceable}.
1:  *
1:  * @see EmbeddedXADataSource40
1:  */
0: public class NonJNDIEmbeddedXADataSource40
0:     extends NonJNDIEmbeddedDataSource40
1:     implements
1:         EmbeddedXADataSourceInterface,
1:         javax.sql.XADataSource /* compile time check of 41 extensions */
1: {
1: 
1:     private static final long serialVersionUID = -5715798975598379739L;
1: 
0:     // link to the database
1:     private transient ResourceAdapter ra;
1: 
0:     public NonJNDIEmbeddedXADataSource40() {
1:         super();
1:     }
1: 
1:     /*
1:      * Implementation of XADataSource interface methods
1:      */
1: 
1:     /**
0:      * @see javax.sql.XADataSource#getXAConnection()
1:      */
1:     public final XAConnection getXAConnection() throws SQLException     {
1: 
1:         if (ra == null || !ra.isActive()) {
1:             ra = setupResourceAdapter(this, ra, null, null, false);
1:         }
1: 
1:         return createXAConnection (ra, getUser(), getPassword(), false);
1:     }
1: 
1:     /**
0:      * @see javax.sql.XADataSource#getXAConnection(String, String)
1:      */
1:     public final XAConnection getXAConnection(String user, String password)
1:          throws SQLException {
1: 
1:         if (ra == null || !ra.isActive()) {
1:             ra = setupResourceAdapter(this, ra, user, password, true);
1:         }
1: 
1:         return createXAConnection (ra, user, password, true);
1:     }
1: 
0:     // implementation methods
1:     protected void update() {
1:         ra = null;
1:         super.update();
1:     }
1: 
1: 
1:     /**
0:      * Instantiate and return an EmbedXAConnection from this instance
0:      * of EmbeddedXADataSource.
1:      *
0:      * @param user
0:      * @param password
0:      * @return XAConnection
0:      * @throws SQLException if a connection can't be created
1:      */
1:     private XAConnection createXAConnection(
1:             ResourceAdapter ra,
1:             String user,
1:             String password,
1:             boolean requestPassword) throws SQLException {
1: 
1:         // See comment for EmbeddedXADataSource#createXAConnection
0:         return ((Driver30) findDriver()).getNewXAConnection(
1:             this, ra, user, password, requestPassword);
1:     }
1: 
1: 
1:     /**
1:      * @return The ResourceAdapter instance for the underlying database
1:      */
1:     public ResourceAdapter getResourceAdapter() {
1:         return ra;
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:595307e
/////////////////////////////////////////////////////////////////////////
1:         return findDriver().getNewXAConnection(
============================================================================