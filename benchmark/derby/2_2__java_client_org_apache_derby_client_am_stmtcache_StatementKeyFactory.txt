1:78944d5: /*
2:78944d5: 
1:78944d5:    Derby - Class org.apache.derby.client.am.stmtcache.StatementKeyFactory
1:78944d5: 
1:78944d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:78944d5:    contributor license agreements.  See the NOTICE file distributed with
1:78944d5:    this work for additional information regarding copyright ownership.
1:78944d5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:78944d5:    (the "License"); you may not use this file except in compliance with
1:78944d5:    the License.  You may obtain a copy of the License at
1:78944d5: 
1:78944d5:       http://www.apache.org/licenses/LICENSE-2.0
1:78944d5: 
1:78944d5:    Unless required by applicable law or agreed to in writing, software
1:78944d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:78944d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:78944d5:    See the License for the specific language governing permissions and
1:78944d5:    limitations under the License.
1:78944d5: 
1:78944d5: */
1:78944d5: 
1:78944d5: package org.apache.derby.client.am.stmtcache;
1:78944d5: 
1:69e3d06: import java.sql.ResultSet;
1:69e3d06: import java.sql.Statement;
1:69e3d06: 
1:78944d5: 
1:78944d5: /**
1:78944d5:  * A factory for creating JDBC statement keys for use with the JDBC statement
1:78944d5:  * cache.
1:2e54aa6:  *
1:78944d5:  * @see JDBCStatementCache
1:78944d5:  */
1:78944d5: //@ThreadSafe
1:78944d5: public final class StatementKeyFactory {
1:2e54aa6: 
1:78944d5:     private static final boolean CALLABLE = true;
1:78944d5:     private static final boolean PREPARED = false;
1:78944d5: 
1:78944d5:     /** Instantiation not allowed. */
1:78944d5:     private StatementKeyFactory() {};
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a key for a query with default settings.
1:78944d5:      * <p>
1:78944d5:      * Defaults are according to the JDBC standard; result set type will be
1:78944d5:      * <code>ResultSet.TYPE_FORWARD_ONLY</code>, concurrency will be
1:78944d5:      * <code>ResultSet.CONCUR_READ_ONLY</code> and the statement will not
1:78944d5:      * return auto-generated keys.
1:2e54aa6:      *
1:78944d5:      * @param sql SQL query string
1:78944d5:      * @param schema current compilation schema
3:78944d5:      * @param holdability result set holdability
1:78944d5:      * @return A statement key.
1:78944d5:      */
1:78944d5:     public static StatementKey newPrepared(
1:78944d5:             String sql, String schema, int holdability) {
1:78944d5:         return new StatementKey(PREPARED, sql, schema,
1:69e3d06:                 ResultSet.TYPE_FORWARD_ONLY,
1:69e3d06:                 ResultSet.CONCUR_READ_ONLY,
1:69e3d06:                 holdability, Statement.NO_GENERATED_KEYS);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a key for a query specifying whether auto-generated keys
1:78944d5:      * shall be returned.
1:78944d5:      * <p>
1:78944d5:      * Unspecified settings will be according to the JDBC standard; result set
1:78944d5:      * type will be <code>ResultSet.TYPE_FORWARD_ONLY</code>, concurrency will
1:78944d5:      * be <code>ResultSet.CONCUR_READ_ONLY</code>.
1:2e54aa6:      *
1:78944d5:      * @param sql SQL query string
1:78944d5:      * @param schema current compilation schema
1:78944d5:      * @param holdability result set holdability
1:78944d5:      * @param autogeneratedKeys tells whether or not to reutrn auto-generated
1:78944d5:      *      keys
1:78944d5:      * @return A statement key.
1:78944d5:      */
1:78944d5:     public static StatementKey newPrepared(
1:78944d5:             String sql, String schema, int holdability, int autogeneratedKeys) {
1:78944d5:         return new StatementKey(PREPARED, sql, schema,
1:69e3d06:                                 ResultSet.TYPE_FORWARD_ONLY,
1:69e3d06:                                 ResultSet.CONCUR_READ_ONLY,
1:78944d5:                                 holdability, autogeneratedKeys);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a key for a query specifying result set type and concurrency.
1:78944d5:      * <p>
1:78944d5:      * The returned key is for a statement not returning auto-generated keys.
1:2e54aa6:      *
1:78944d5:      * @param sql SQL query string
1:78944d5:      * @param schema current compilation schema
1:78944d5:      * @param rst result set type
1:78944d5:      * @param rsc result set concurrency level
1:45f24f8:      * @param rsh result set holdability
1:78944d5:      * @return A statement key.
1:78944d5:      */
1:78944d5:     public static StatementKey newPrepared(
1:45f24f8:             String sql, String schema, int rst, int rsc, int rsh) {
1:45f24f8:         return new StatementKey(PREPARED, sql, schema, rst, rsc, rsh,
1:69e3d06:                                 Statement.NO_GENERATED_KEYS);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a key for a callable statement.
1:78944d5:      * <p>
1:78944d5:      * Unspecified settings will be according to the JDBC standard; result set
1:78944d5:      * type will be <code>ResultSet.TYPE_FORWARD_ONLY</code>, concurrency will
1:78944d5:      * be <code>ResultSet.CONCUR_READ_ONLY</code>.
1:2e54aa6:      *
1:78944d5:      * @param sql SQL query string
1:78944d5:      * @param schema current compilation schema
1:78944d5:      * @param holdability result set holdability
1:78944d5:      * @return A statement key.
1:78944d5:      */
1:78944d5:     public static StatementKey newCallable(
1:78944d5:             String sql, String schema, int holdability) {
1:69e3d06:         return newCallable(sql, schema, ResultSet.TYPE_FORWARD_ONLY,
1:69e3d06:                 ResultSet.CONCUR_READ_ONLY, holdability);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a key for a callable statement specifying result set type and
1:78944d5:      * concurrency.
1:78944d5:      * <p>
1:78944d5:      * The returned key is for a statement not returning auto-generated keys.
1:2e54aa6:      *
1:78944d5:      * @param sql SQL query string
1:78944d5:      * @param schema current compilation schema
1:78944d5:      * @param rst result set type
1:78944d5:      * @param rsc result set concurrency level
1:45f24f8:      * @param rsh result set holdability
1:78944d5:      * @return A statement key.
1:78944d5:      */
1:78944d5:     public static StatementKey newCallable(
1:45f24f8:             String sql, String schema, int rst, int rsc, int rsh) {
1:45f24f8:         return new StatementKey(CALLABLE, sql, schema, rst, rsc, rsh,
1:69e3d06:                                 Statement.NO_GENERATED_KEYS);
1:78944d5:     }
1:78944d5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 ResultSet.TYPE_FORWARD_ONLY,
1:                 ResultSet.CONCUR_READ_ONLY,
1:                 holdability, Statement.NO_GENERATED_KEYS);
/////////////////////////////////////////////////////////////////////////
1:                                 ResultSet.TYPE_FORWARD_ONLY,
1:                                 ResultSet.CONCUR_READ_ONLY,
/////////////////////////////////////////////////////////////////////////
1:                                 Statement.NO_GENERATED_KEYS);
/////////////////////////////////////////////////////////////////////////
1:         return newCallable(sql, schema, ResultSet.TYPE_FORWARD_ONLY,
1:                 ResultSet.CONCUR_READ_ONLY, holdability);
/////////////////////////////////////////////////////////////////////////
1:                                 Statement.NO_GENERATED_KEYS);
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 java.sql.ResultSet.TYPE_FORWARD_ONLY,
0:                 java.sql.ResultSet.CONCUR_READ_ONLY,
0:                 holdability, java.sql.Statement.NO_GENERATED_KEYS);
/////////////////////////////////////////////////////////////////////////
0:                                 java.sql.ResultSet.TYPE_FORWARD_ONLY,
0:                                 java.sql.ResultSet.CONCUR_READ_ONLY,
/////////////////////////////////////////////////////////////////////////
0:                                 java.sql.Statement.NO_GENERATED_KEYS);
/////////////////////////////////////////////////////////////////////////
0:         return newCallable(sql, schema, java.sql.ResultSet.TYPE_FORWARD_ONLY,
0:                 java.sql.ResultSet.CONCUR_READ_ONLY, holdability);
/////////////////////////////////////////////////////////////////////////
0:                                 java.sql.Statement.NO_GENERATED_KEYS);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:55570ef
/////////////////////////////////////////////////////////////////////////
0:         return newCallable(sql, schema, ResultSet.TYPE_FORWARD_ONLY,
0:                 ResultSet.CONCUR_READ_ONLY, holdability);
commit:45f24f8
/////////////////////////////////////////////////////////////////////////
1:      * @param rsh result set holdability
1:             String sql, String schema, int rst, int rsc, int rsh) {
1:         return new StatementKey(PREPARED, sql, schema, rst, rsc, rsh,
/////////////////////////////////////////////////////////////////////////
1:      * @param rsh result set holdability
1:             String sql, String schema, int rst, int rsc, int rsh) {
1:         return new StatementKey(CALLABLE, sql, schema, rst, rsc, rsh,
commit:2e54aa6
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
commit:78944d5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.stmtcache.StatementKeyFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am.stmtcache;
1: 
0: import java.sql.ResultSet;
0: import java.sql.Statement;
1: 
1: /**
1:  * A factory for creating JDBC statement keys for use with the JDBC statement
1:  * cache.
0:  * 
1:  * @see JDBCStatementCache
1:  */
1: //@ThreadSafe
1: public final class StatementKeyFactory {
1:     
1:     private static final boolean CALLABLE = true;
1:     private static final boolean PREPARED = false;
1: 
1:     /** Instantiation not allowed. */
1:     private StatementKeyFactory() {};
1: 
1:     /**
1:      * Creates a key for a query with default settings.
1:      * <p>
1:      * Defaults are according to the JDBC standard; result set type will be
1:      * <code>ResultSet.TYPE_FORWARD_ONLY</code>, concurrency will be
1:      * <code>ResultSet.CONCUR_READ_ONLY</code> and the statement will not
1:      * return auto-generated keys.
0:      * 
1:      * @param sql SQL query string
1:      * @param schema current compilation schema
1:      * @param holdability result set holdability
1:      * @return A statement key.
1:      */
1:     public static StatementKey newPrepared(
1:             String sql, String schema, int holdability) {
1:         return new StatementKey(PREPARED, sql, schema,
0:                 ResultSet.TYPE_FORWARD_ONLY,
0:                 ResultSet.CONCUR_READ_ONLY,
0:                 holdability, Statement.NO_GENERATED_KEYS);
1:     }
1: 
1:     /**
1:      * Creates a key for a query specifying whether auto-generated keys
1:      * shall be returned.
1:      * <p>
1:      * Unspecified settings will be according to the JDBC standard; result set
1:      * type will be <code>ResultSet.TYPE_FORWARD_ONLY</code>, concurrency will
1:      * be <code>ResultSet.CONCUR_READ_ONLY</code>.
0:      * 
1:      * @param sql SQL query string
1:      * @param schema current compilation schema
1:      * @param holdability result set holdability
1:      * @param autogeneratedKeys tells whether or not to reutrn auto-generated
1:      *      keys
1:      * @return A statement key.
1:      */
1:     public static StatementKey newPrepared(
1:             String sql, String schema, int holdability, int autogeneratedKeys) {
1:         return new StatementKey(PREPARED, sql, schema,
0:                                 ResultSet.TYPE_FORWARD_ONLY,
0:                                 ResultSet.CONCUR_READ_ONLY,
1:                                 holdability, autogeneratedKeys);
1:     }
1: 
1:     /**
1:      * Creates a key for a query specifying result set type and concurrency.
1:      * <p>
1:      * The returned key is for a statement not returning auto-generated keys.
0:      * 
1:      * @param sql SQL query string
1:      * @param schema current compilation schema
1:      * @param holdability result set holdability
1:      * @param rst result set type
1:      * @param rsc result set concurrency level
1:      * @return A statement key.
1:      */
1:     public static StatementKey newPrepared(
0:             String sql, String schema, int holdability, int rst, int rsc) {
0:         return new StatementKey(PREPARED, sql, schema, rst, rsc, holdability,
0:                                 Statement.NO_GENERATED_KEYS);
1:     }
1: 
1:     /**
1:      * Creates a key for a callable statement.
1:      * <p>
1:      * Unspecified settings will be according to the JDBC standard; result set
1:      * type will be <code>ResultSet.TYPE_FORWARD_ONLY</code>, concurrency will
1:      * be <code>ResultSet.CONCUR_READ_ONLY</code>.
0:      * 
1:      * @param sql SQL query string
1:      * @param schema current compilation schema
1:      * @param holdability result set holdability
1:      * @return A statement key.
1:      */
1:     public static StatementKey newCallable(
1:             String sql, String schema, int holdability) {
0:         return newCallable(sql, schema, holdability,
0:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
1:     }
1: 
1:     /**
1:      * Creates a key for a callable statement specifying result set type and
1:      * concurrency.
1:      * <p>
1:      * The returned key is for a statement not returning auto-generated keys.
0:      * 
1:      * @param sql SQL query string
1:      * @param schema current compilation schema
1:      * @param holdability result set holdability
1:      * @param rst result set type
1:      * @param rsc result set concurrency level
1:      * @return A statement key.
1:      */
1:     public static StatementKey newCallable(
0:             String sql, String schema, int holdability, int rst, int rsc) {
0:         return new StatementKey(CALLABLE, sql, schema, rst, rsc, holdability,
0:                                 Statement.NO_GENERATED_KEYS);
1:     }
1: }
============================================================================