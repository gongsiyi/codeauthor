1:01d6da3: /*
3:01d6da3: 
1:01d6da3:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ConnectTest
1:01d6da3: 
1:01d6da3:        Licensed to the Apache Software Foundation (ASF) under one
1:01d6da3:        or more contributor license agreements.  See the NOTICE file
1:01d6da3:        distributed with this work for additional information
1:01d6da3:        regarding copyright ownership.  The ASF licenses this file
1:01d6da3:        to you under the Apache License, Version 2.0 (the
1:01d6da3:        "License"); you may not use this file except in compliance
1:01d6da3:        with the License.  You may obtain a copy of the License at
1:01d6da3: 
1:01d6da3:          http://www.apache.org/licenses/LICENSE-2.0
1:01d6da3: 
1:01d6da3:        Unless required by applicable law or agreed to in writing,
1:01d6da3:        software distributed under the License is distributed on an
1:01d6da3:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:01d6da3:        KIND, either express or implied.  See the License for the
1:01d6da3:        specific language governing permissions and limitations
1:01d6da3:        under the License
1:01d6da3: */
1:01d6da3: package org.apache.derbyTesting.functionTests.tests.lang;
1:01d6da3: 
1:67f6bb0: import java.sql.CallableStatement;
1:01d6da3: import java.sql.Connection;
1:01d6da3: import java.sql.DriverManager;
1:01d6da3: import java.sql.SQLException;
1:01d6da3: import java.sql.Statement;
1:01d6da3: import junit.framework.Test;
1:67f6bb0: import org.apache.derbyTesting.functionTests.util.TestRoutines;
1:01d6da3: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:67f6bb0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:01d6da3: import org.apache.derbyTesting.junit.JDBC;
1:01d6da3: import org.apache.derbyTesting.junit.TestConfiguration;
1:01d6da3: 
1:01d6da3: /**
1:01d6da3:  * Test case for connect.sql. 
1:01d6da3:  */
1:01d6da3: public class ConnectTest extends BaseJDBCTestCase{
1:01d6da3:     
1:01d6da3:     public ConnectTest(String name) {
1:01d6da3:         super(name);
4:01d6da3:     }
1:01d6da3:     
1:01d6da3:     public static Test suite() {
1:01d6da3:         if ( JDBC.vmSupportsJSR169())
1:01d6da3:             // Test uses DriverManager which
1:01d6da3:             // is not supported with JSR169
1:1ae02c9:                         return 
1:1ae02c9:             new BaseTestSuite("empty ConnectTest:DriverManager not supported");
1:67f6bb0:         else  {
1:1ae02c9:                 BaseTestSuite suite = new BaseTestSuite("ConnectTest suite");
1:67f6bb0:                 suite.addTest(TestConfiguration.defaultSuite(ConnectTest.class));
1:67f6bb0:                 // Derby2026 test uses explicit client connection so not relevant to embedded
1:67f6bb0:                 suite.addTest(TestConfiguration.
1:67f6bb0:                             clientServerDecorator(new ConnectTest("clientTestDerby2026LoginTimeout")));
1:67f6bb0:                 return new CleanDatabaseTestSetup(suite);
1:1ae02c9:         }
1:67f6bb0:                   
1:67f6bb0:     }
1:01d6da3: 
1:01d6da3:     /**
1:01d6da3:      *  Test whether we can reconnect.
1:01d6da3:      */
1:01d6da3:     public void testConnectRepeatedly() throws SQLException {
1:01d6da3:         String url = "jdbc:derby:wombat;create=true";
1:01d6da3:         Connection con = DriverManager.getConnection(url);
1:01d6da3: 
1:01d6da3:         Statement st = con.createStatement();
1:01d6da3:         JDBC.assertSingleValueResultSet(st.executeQuery("values 1"), "1");
1:01d6da3:         st.close();
1:01d6da3:         con.close();
1:67f6bb0: 
1:01d6da3:         // Can we reconnect?
1:01d6da3:         con = DriverManager.getConnection(url);
1:01d6da3:         st = con.createStatement();
1:01d6da3:         JDBC.assertSingleValueResultSet(st.executeQuery("values 1"), "1");
1:01d6da3:         st.close();
1:01d6da3:         con.close();
1:01d6da3:     }
1:01d6da3: 
1:67f6bb0:     /**
1:01d6da3:      * Test on kinds of database names.
1:01d6da3:      */
1:01d6da3:     public void testDBName() throws SQLException {
1:01d6da3:         // Do we get a non-internal error when we try to create
1:01d6da3:         // over an existing directory? (T#674)
1:01d6da3:         String url = "jdbc:derby:wombat/seg0;create=true";
1:01d6da3:         try {
1:01d6da3:             DriverManager.getConnection(url);
1:01d6da3:             fail("Error XBM0J is expected");
1:01d6da3:         } catch (SQLException e) {
1:01d6da3:             assertEquals("XJ041", e.getSQLState());
1:67f6bb0:         }
1:01d6da3: 
1:01d6da3:         // -- check to ensure an empty database name is taken
1:01d6da3:         // -- as the name, over any connection attribute.
1:01d6da3:         // -- this should fail.
1:01d6da3:         url = "jdbc:derby: ;databaseName=wombat";
1:01d6da3:         try {
1:01d6da3:             DriverManager.getConnection(url);
1:01d6da3:             fail("Error XJ004 is expected");
1:01d6da3:         } catch (SQLException e) {
1:01d6da3:             assertEquals("XJ004", e.getSQLState());
1:01d6da3:         }
1:01d6da3: 
1:01d6da3:         // and this should succeed (no database name in URL)
1:01d6da3:         url = "jdbc:derby:;databaseName=wombat";
1:01d6da3:         Connection con = DriverManager.getConnection(url);
1:01d6da3:         con.close();
1:01d6da3:     }
1:01d6da3: 
1:01d6da3:     /**
1:01d6da3:      * Doing some simple grant/revoke negative tests in legacy database.
1:01d6da3:      * All should fail with errors.
1:01d6da3:      */
1:01d6da3:     public void testGrantAndRevoke() throws SQLException {
1:01d6da3:         String url = "jdbc:derby:wombat";
1:01d6da3:         Connection con = DriverManager.getConnection(url);
1:01d6da3: 
1:01d6da3:         String sql = "create table mytab(i int)";
1:01d6da3:         Statement st = con.createStatement();
1:01d6da3:         st.execute(sql);
1:01d6da3: 
1:01d6da3:         sql = "grant select on mytab to satheesh";
1:01d6da3:         try {
1:01d6da3:             st.executeUpdate(sql);
1:01d6da3:             fail("Error 42Z60 is expected");
1:01d6da3:         } catch (SQLException e) {
1:01d6da3:             assertEquals("42Z60", e.getSQLState());
1:01d6da3:         }
1:01d6da3: 
1:01d6da3:         sql = "revoke select on mytab to satheesh";
1:01d6da3:         try {
1:01d6da3:             st.executeUpdate(sql);
1:01d6da3:             fail("Error 42Z60 is expected");
1:01d6da3:         } catch (SQLException e) {
1:01d6da3:             assertEquals("42Z60", e.getSQLState());
1:01d6da3:         }
1:01d6da3: 
1:01d6da3:         sql = "drop table mytab";
1:01d6da3:         st.execute(sql);
1:01d6da3: 
1:01d6da3:         st.close();
1:01d6da3:         con.close();
1:01d6da3:     }
1:01d6da3: 
1:01d6da3:     /**
1:67f6bb0:      * DERBY-2026 make sure loginTimeout does not
1:67f6bb0:      * affect queries
1:67f6bb0:      * @throws SQLException
1:67f6bb0:      */
1:67f6bb0:     public void clientTestDerby2026LoginTimeout() throws SQLException  {
1:67f6bb0:         String url = "jdbc:derby://" + TestConfiguration.getCurrent().getHostName() +":" +
1:67f6bb0:         TestConfiguration.getCurrent().getPort() + "/" + TestConfiguration.getCurrent().getDefaultDatabaseName();
1:67f6bb0:         try {
1:73863c9:             DriverManager.setLoginTimeout(10);
1:73863c9:             //System.out.println(url);
1:73863c9:             try {
1:73863c9:                 Class.forName("org.apache.derby.jdbc.ClientDriver");
1:73863c9:             } catch (ClassNotFoundException e) {
1:73863c9:                 fail(e.getMessage());
1:73863c9:             }
1:73863c9:             Connection conn = DriverManager.getConnection(url);
1:73863c9:             TestRoutines.installRoutines(conn);
1:73863c9:             CallableStatement cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
1:73863c9:             cs.execute();
1:73863c9:             //rollback to make sure our connection is ok.
1:73863c9:             conn.rollback();
1:73863c9:         } finally {
1:73863c9:             DriverManager.setLoginTimeout(0);
1:73863c9:         }
1:67f6bb0:     }   
1:67f6bb0:     
1:67f6bb0: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:                         return 
1:             new BaseTestSuite("empty ConnectTest:DriverManager not supported");
1:                 BaseTestSuite suite = new BaseTestSuite("ConnectTest suite");
/////////////////////////////////////////////////////////////////////////
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:73863c9
/////////////////////////////////////////////////////////////////////////
1:             DriverManager.setLoginTimeout(10);
1:             //System.out.println(url);
1:             try {
1:                 Class.forName("org.apache.derby.jdbc.ClientDriver");
1:             } catch (ClassNotFoundException e) {
1:                 fail(e.getMessage());
1:             }
1:             Connection conn = DriverManager.getConnection(url);
1:             TestRoutines.installRoutines(conn);
1:             CallableStatement cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
1:             cs.execute();
1:             //rollback to make sure our connection is ok.
1:             conn.rollback();
1:         } finally {
1:             DriverManager.setLoginTimeout(0);
1:     }   
commit:67f6bb0
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestRoutines;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         else  {
0:                 TestSuite suite = new TestSuite("ConnectTest suite");  
1:                 suite.addTest(TestConfiguration.defaultSuite(ConnectTest.class));
1:                 // Derby2026 test uses explicit client connection so not relevant to embedded
1:                 suite.addTest(TestConfiguration.
1:                             clientServerDecorator(new ConnectTest("clientTestDerby2026LoginTimeout")));
1:                 return new CleanDatabaseTestSetup(suite);
1:         }
1:                   
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * DERBY-2026 make sure loginTimeout does not
1:      * affect queries
1:      * @throws SQLException
1:      */
1:     public void clientTestDerby2026LoginTimeout() throws SQLException  {
1:         String url = "jdbc:derby://" + TestConfiguration.getCurrent().getHostName() +":" +
1:         TestConfiguration.getCurrent().getPort() + "/" + TestConfiguration.getCurrent().getDefaultDatabaseName();
0:         DriverManager.setLoginTimeout(10);
0:         //System.out.println(url);
1:         try {
0:             Class.forName("org.apache.derby.jdbc.ClientDriver");
0:         } catch (ClassNotFoundException e) {
0:             fail(e.getMessage());
1:         }
0:         Connection conn = DriverManager.getConnection(url);
0:         TestRoutines.installRoutines(conn);
0:         CallableStatement cs = conn.prepareCall("CALL TESTROUTINE.SLEEP(20000)");
0:         cs.execute();
0:         //rollback to make sure our connection is ok.
0:         conn.rollback();
1:     }
1:     
1: }
commit:01d6da3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ConnectTest
1: 
1:        Licensed to the Apache Software Foundation (ASF) under one
1:        or more contributor license agreements.  See the NOTICE file
1:        distributed with this work for additional information
1:        regarding copyright ownership.  The ASF licenses this file
1:        to you under the Apache License, Version 2.0 (the
1:        "License"); you may not use this file except in compliance
1:        with the License.  You may obtain a copy of the License at
1: 
1:          http://www.apache.org/licenses/LICENSE-2.0
1: 
1:        Unless required by applicable law or agreed to in writing,
1:        software distributed under the License is distributed on an
1:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:        KIND, either express or implied.  See the License for the
1:        specific language governing permissions and limitations
1:        under the License
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for connect.sql. 
1:  */
1: public class ConnectTest extends BaseJDBCTestCase{
1:     
1:     public ConnectTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:         if ( JDBC.vmSupportsJSR169())
1:             // Test uses DriverManager which
1:             // is not supported with JSR169
0:             return 
0:             new TestSuite("empty ConnectTest:DriverManager not supported");
0:         else
0:             return TestConfiguration.defaultSuite(ConnectTest.class);
1:     }
1: 
1:     /**
1:      *  Test whether we can reconnect.
1:      */
1:     public void testConnectRepeatedly() throws SQLException {
1:         String url = "jdbc:derby:wombat;create=true";
1:         Connection con = DriverManager.getConnection(url);
1: 
1:         Statement st = con.createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("values 1"), "1");
1:         st.close();
1:         con.close();
1: 
1:         // Can we reconnect?
1:         con = DriverManager.getConnection(url);
1:         st = con.createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("values 1"), "1");
1:         st.close();
1:         con.close();
1:     }
1: 
1:     /**
1:      * Test on kinds of database names.
1:      */
1:     public void testDBName() throws SQLException {
1:         // Do we get a non-internal error when we try to create
1:         // over an existing directory? (T#674)
1:         String url = "jdbc:derby:wombat/seg0;create=true";
1:         try {
1:             DriverManager.getConnection(url);
1:             fail("Error XBM0J is expected");
1:         } catch (SQLException e) {
1:             assertEquals("XJ041", e.getSQLState());
1:         }
1: 
1:         // -- check to ensure an empty database name is taken
1:         // -- as the name, over any connection attribute.
1:         // -- this should fail.
1:         url = "jdbc:derby: ;databaseName=wombat";
1:         try {
1:             DriverManager.getConnection(url);
1:             fail("Error XJ004 is expected");
1:         } catch (SQLException e) {
1:             assertEquals("XJ004", e.getSQLState());
1:         }
1: 
1:         // and this should succeed (no database name in URL)
1:         url = "jdbc:derby:;databaseName=wombat";
1:         Connection con = DriverManager.getConnection(url);
1:         con.close();
1:     }
1: 
1:     /**
1:      * Doing some simple grant/revoke negative tests in legacy database.
1:      * All should fail with errors.
1:      */
1:     public void testGrantAndRevoke() throws SQLException {
1:         String url = "jdbc:derby:wombat";
1:         Connection con = DriverManager.getConnection(url);
1: 
1:         String sql = "create table mytab(i int)";
1:         Statement st = con.createStatement();
1:         st.execute(sql);
1: 
1:         sql = "grant select on mytab to satheesh";
1:         try {
1:             st.executeUpdate(sql);
1:             fail("Error 42Z60 is expected");
1:         } catch (SQLException e) {
1:             assertEquals("42Z60", e.getSQLState());
1:         }
1: 
1:         sql = "revoke select on mytab to satheesh";
1:         try {
1:             st.executeUpdate(sql);
1:             fail("Error 42Z60 is expected");
1:         } catch (SQLException e) {
1:             assertEquals("42Z60", e.getSQLState());
1:         }
1: 
1:         sql = "drop table mytab";
1:         st.execute(sql);
1: 
1:         st.close();
1:         con.close();
1:     }
1: }
============================================================================