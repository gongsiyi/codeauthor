1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecPreparedStatement
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedClass;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.PreparedStatement;
1:eac0369: 
1:c45f5b1: import java.util.List;
1:801cf0d: import org.apache.derby.iapi.sql.dictionary.StatementPermission;
1:c45f5b1: 
4:eac0369: /**
1:eac0369:  * Execution extends prepared statement to add methods it needs
1:eac0369:  * for execution purposes (that should not be on the Database API).
3:eac0369:  *
1:eac0369:  */
1:eac0369: public interface ExecPreparedStatement 
1:76addbc: 	extends PreparedStatement {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * set the statement text
1:eac0369: 	 *
1:eac0369: 	 * @param txt the source text
1:eac0369: 	 */
1:eac0369: 	void setSource(String txt);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Get the Execution constants. This routine is called at Execution time.
1:eac0369: 	 *
1:eac0369: 	 *	@return	ConstantAction	The big structure enclosing the Execution constants.
1:eac0369: 	 */
1:eac0369: 	ConstantAction	getConstantAction( );
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Get a saved object by number.  This is called during execution to
1:eac0369: 	 *  access objects created at compile time.  These are meant to be
1:eac0369: 	 *  read-only at run time.
1:eac0369: 	 *
1:eac0369: 	 *	@return	Object	A saved object.  The caller has to know what
1:eac0369: 	 *	it is requesting and cast it back to the expected type.
1:eac0369: 	 */
1:eac0369: 	Object	getSavedObject(int objectNum);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Get all the saved objects.  Used for stored prepared
1:eac0369: 	 * 	statements.
1:eac0369: 	 *
1:554386c:      *  @return a list with all the saved objects
1:eac0369: 	 */
1:71c8e86:     List<Object> getSavedObjects();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Get the saved cursor info.  Used for stored prepared
1:eac0369: 	 * 	statements.
1:eac0369: 	 *
1:eac0369: 	 *	@return	Object	the cursor info
1:eac0369: 	 */
1:eac0369: 	Object	getCursorInfo();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *  Get the class generated for this prepared statement.
1:eac0369: 	 *  Used to confirm compatability with auxilary structures.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error obtaining class
1:eac0369: 	 *	(probably when a stored prepared statement is loading)
1:eac0369: 	 */
1:eac0369: 	GeneratedClass getActivationClass() throws StandardException;
1:eac0369: 
1:6832893:     /**
1:6832893:      * <p>
1:6832893:      * Checks whether this PreparedStatement is up to date and its activation
1:6832893:      * class is identical to the supplied generated class. A call to {@code
1:6832893:      * upToDate(gc)} is supposed to perform the same work as the following code
1:6832893:      * in one atomic operation:
1:6832893:      * </p>
1:6832893:      *
1:6832893:      * <pre>
1:dbed020:      * getActivationClass() == gc &amp;&amp; upToDate()
1:6832893:      * </pre>
1:6832893:      *
1:6832893:      * @param gc a generated class that must be identical to {@code
1:6832893:      * getActivationClass()} for this method to return {@code true}
1:6832893:      * @return {@code true} if this statement is up to date and its activation
1:6832893:      * class is identical to {@code gc}, {@code false} otherwise
1:6832893:      * @see PreparedStatement#upToDate()
1:6832893:      * @see #getActivationClass()
1:6832893:      */
1:6832893:     boolean upToDate(GeneratedClass gc) throws StandardException;
1:6832893: 
1:eac0369: 	/**
1:eac0369: 	 *  Mark the statement as unusable, i.e. the system is
1:eac0369: 	 * finished with it and no one should be able to use it.
1:eac0369: 	 */
1:eac0369: 	void finish(LanguageConnectionContext lcc);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this statement need a savpoint
1:eac0369: 	 *
1:eac0369: 	 * @return true if needs a savepoint
1:eac0369: 	 */
1:eac0369: 	boolean needsSavepoint();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a new prepared statement that is a shallow copy
1:eac0369: 	 * of the current one.
1:eac0369: 	 *
1:eac0369: 	 * @return a new prepared statement
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error 
1:eac0369: 	 */
1:eac0369: 	public ExecPreparedStatement getClone() throws StandardException;
1:eac0369: 
1:eac0369: 	/* Methods from old CursorPreparedStatement */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * the update mode of the cursor
1:eac0369: 	 *
1:eac0369: 	 * @return	The update mode of the cursor
1:eac0369: 	 */
1:eac0369: 	int	getUpdateMode();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * the target table of the cursor
1:eac0369: 	 *
1:eac0369: 	 * @return	target table of the cursor
1:eac0369: 	 */
1:eac0369: 	ExecCursorTableReference getTargetTable();
1:eac0369: 
1:dda453e:     /**
1:dda453e:      * Check if this prepared statement has a cursor with columns that
1:dda453e:      * can be updated.
1:dda453e:      */
1:dda453e:     boolean hasUpdateColumns();
1:eac0369: 
1:dda453e:     /**
1:dda453e:      * Check if the specified column name is one of the update columns.
1:dda453e:      */
1:dda453e:     boolean isUpdateColumn(String columnName);
1:eac0369: 
1:eac0369: 	/**
1:00df88c: 	 * set this prepared statement to be valid
1:eac0369: 	 */
1:eac0369: 	void setValid();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Indicate that the statement represents an SPS action
1:eac0369: 	 */
1:eac0369: 	void setSPSAction();
1:c45f5b1: 
1:c45f5b1: 	/**
1:c45f5b1: 	 * @return the list of permissions required to execute this statement. May be null if
1:c45f5b1: 	 *         the database does not use SQL standard authorization
1:c45f5b1: 	 */
1:801cf0d:     List<StatementPermission> getRequiredPermissionsList();
1:eac0369: 
1:f542632:     // Methods for stale plan checking.
1:f542632: 
1:f542632:     /**
1:f542632:      * Increment and return the execution count for this statement.
1:f542632:      * @return execution count for this statement after the last compilation
1:f542632:      */
1:f542632:     int incrementExecutionCount();
1:f542632: 
1:f542632:     /**
1:f542632:      * Get the initial row count of the specified result set. If the initial
1:f542632:      * row count has not yet been set, initialize it with the value of the
1:f542632:      * current row count.
1:f542632:      * @param rsNum the result set to get the initial row count for
1:f542632:      * @param currentRowCount the current row count for the result set
1:f542632:      * @return the row count from the first execution of the result set
1:f542632:      */
1:f542632:     long getInitialRowCount(int rsNum, long currentRowCount);
1:f542632: 
1:f542632:     /**
1:f542632:      * Set the stale plan check interval.
1:f542632:      * @param interval the stale plan check interval
1:f542632:      */
1:f542632:     void setStalePlanCheckInterval(int interval);
1:f542632: 
1:f542632:     /**
1:f542632:      * Get the stale plan check interval.
1:f542632:      * @return the stale plan check interval, or zero if it has not been
1:f542632:      * initialized yet
1:f542632:      */
1:f542632:     int getStalePlanCheckInterval();
1:f542632: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * getActivationClass() == gc &amp;&amp; upToDate()
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     List<Object> getSavedObjects();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:00df88c
/////////////////////////////////////////////////////////////////////////
1: 	 * set this prepared statement to be valid
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.StatementPermission;
/////////////////////////////////////////////////////////////////////////
1:     List<StatementPermission> getRequiredPermissionsList();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:554386c
/////////////////////////////////////////////////////////////////////////
1:      *  @return a list with all the saved objects
0:     List getSavedObjects();
commit:dda453e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check if this prepared statement has a cursor with columns that
1:      * can be updated.
1:      */
1:     boolean hasUpdateColumns();
1:     /**
1:      * Check if the specified column name is one of the update columns.
1:      */
1:     boolean isUpdateColumn(String columnName);
commit:f542632
/////////////////////////////////////////////////////////////////////////
1:     // Methods for stale plan checking.
1: 
1:     /**
1:      * Increment and return the execution count for this statement.
1:      * @return execution count for this statement after the last compilation
1:      */
1:     int incrementExecutionCount();
1: 
1:     /**
1:      * Get the initial row count of the specified result set. If the initial
1:      * row count has not yet been set, initialize it with the value of the
1:      * current row count.
1:      * @param rsNum the result set to get the initial row count for
1:      * @param currentRowCount the current row count for the result set
1:      * @return the row count from the first execution of the result set
1:      */
1:     long getInitialRowCount(int rsNum, long currentRowCount);
1: 
1:     /**
1:      * Set the stale plan check interval.
1:      * @param interval the stale plan check interval
1:      */
1:     void setStalePlanCheckInterval(int interval);
1: 
1:     /**
1:      * Get the stale plan check interval.
1:      * @return the stale plan check interval, or zero if it has not been
1:      * initialized yet
1:      */
1:     int getStalePlanCheckInterval();
1: }
commit:6832893
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Checks whether this PreparedStatement is up to date and its activation
1:      * class is identical to the supplied generated class. A call to {@code
1:      * upToDate(gc)} is supposed to perform the same work as the following code
1:      * in one atomic operation:
1:      * </p>
1:      *
1:      * <pre>
0:      * getActivationClass() == gc && upToDate()
1:      * </pre>
1:      *
1:      * @param gc a generated class that must be identical to {@code
1:      * getActivationClass()} for this method to return {@code true}
1:      * @return {@code true} if this statement is up to date and its activation
1:      * class is identical to {@code gc}, {@code false} otherwise
1:      * @see PreparedStatement#upToDate()
1:      * @see #getActivationClass()
1:      */
1:     boolean upToDate(GeneratedClass gc) throws StandardException;
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * @return the list of permissions required to execute this statement. May be null if
1: 	 *         the database does not use SQL standard authorization
1: 	 */
0: 	List getRequiredPermissionsList();
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecPreparedStatement
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: 	extends PreparedStatement {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedClass;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.PreparedStatement;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: 
1: /**
1:  * Execution extends prepared statement to add methods it needs
1:  * for execution purposes (that should not be on the Database API).
1:  *
0:  *	@author ames
1:  */
1: public interface ExecPreparedStatement 
0: 	extends PreparedStatement { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * set the statement text
1: 	 *
1: 	 * @param txt the source text
1: 	 */
1: 	void setSource(String txt);
1: 
1: 	/**
1: 	 *	Get the Execution constants. This routine is called at Execution time.
1: 	 *
1: 	 *	@return	ConstantAction	The big structure enclosing the Execution constants.
1: 	 */
1: 	ConstantAction	getConstantAction( );
1: 
1: 	/**
1: 	 *	Get a saved object by number.  This is called during execution to
1: 	 *  access objects created at compile time.  These are meant to be
1: 	 *  read-only at run time.
1: 	 *
1: 	 *	@return	Object	A saved object.  The caller has to know what
1: 	 *	it is requesting and cast it back to the expected type.
1: 	 */
1: 	Object	getSavedObject(int objectNum);
1: 
1: 	/**
1: 	 *	Get all the saved objects.  Used for stored prepared
1: 	 * 	statements.
1: 	 *
0: 	 *	@return	Object[]	the saved objects
1: 	 */
0: 	Object[]	getSavedObjects();
1: 
1: 	/**
1: 	 *	Get the saved cursor info.  Used for stored prepared
1: 	 * 	statements.
1: 	 *
1: 	 *	@return	Object	the cursor info
1: 	 */
1: 	Object	getCursorInfo();
1: 
1: 	/**
1: 	 *  Get the class generated for this prepared statement.
1: 	 *  Used to confirm compatability with auxilary structures.
1: 	 *
1: 	 * @exception StandardException on error obtaining class
1: 	 *	(probably when a stored prepared statement is loading)
1: 	 */
1: 	GeneratedClass getActivationClass() throws StandardException;
1: 
1: 	/**
1: 	 *  Mark the statement as unusable, i.e. the system is
1: 	 * finished with it and no one should be able to use it.
1: 	 */
1: 	void finish(LanguageConnectionContext lcc);
1: 
1: 	/**
1: 	 * Does this statement need a savpoint
1: 	 *
1: 	 * @return true if needs a savepoint
1: 	 */
1: 	boolean needsSavepoint();
1: 
1: 	/**
1: 	 * Get a new prepared statement that is a shallow copy
1: 	 * of the current one.
1: 	 *
1: 	 * @return a new prepared statement
1: 	 *
1: 	 * @exception StandardException on error 
1: 	 */
1: 	public ExecPreparedStatement getClone() throws StandardException;
1: 
1: 	/* Methods from old CursorPreparedStatement */
1: 
1: 	/**
1: 	 * the update mode of the cursor
1: 	 *
1: 	 * @return	The update mode of the cursor
1: 	 */
1: 	int	getUpdateMode();
1: 
1: 	/**
1: 	 * the target table of the cursor
1: 	 *
1: 	 * @return	target table of the cursor
1: 	 */
1: 	ExecCursorTableReference getTargetTable();
1: 
1: 	/**
0: 	 * the target columns of the cursor; this is a superset of
0: 	 * the updatable columns, describing the row available
1: 	 *
0: 	 * @return	target columns of the cursor as an array of column descriptors
1: 	 */
0: 	ResultColumnDescriptor[]	getTargetColumns();
1: 
1: 	/**
0: 	 * the update columns of the cursor
1: 	 *
0: 	 * @return	update columns of the cursor as a string of column names
1: 	 */
0: 	String[]	getUpdateColumns();
1: 
1: 	/**
0: 	 * set this parepared statement to be valid
1: 	 */
1: 	void setValid();
1: 
1: 	/**
1: 	 * Indicate that the statement represents an SPS action
1: 	 */
1: 	void setSPSAction();
0: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedClass;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.PreparedStatement;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: 
0: /**
0:  * Execution extends prepared statement to add methods it needs
0:  * for execution purposes (that should not be on the Database API).
0:  *
0:  *	@author ames
0:  */
0: public interface ExecPreparedStatement 
0: 	extends PreparedStatement { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * set the statement text
0: 	 *
0: 	 * @param txt the source text
0: 	 */
0: 	void setSource(String txt);
0: 
0: 	/**
0: 	 *	Get the Execution constants. This routine is called at Execution time.
0: 	 *
0: 	 *	@return	ConstantAction	The big structure enclosing the Execution constants.
0: 	 */
0: 	ConstantAction	getConstantAction( );
0: 
0: 	/**
0: 	 *	Get a saved object by number.  This is called during execution to
0: 	 *  access objects created at compile time.  These are meant to be
0: 	 *  read-only at run time.
0: 	 *
0: 	 *	@return	Object	A saved object.  The caller has to know what
0: 	 *	it is requesting and cast it back to the expected type.
0: 	 */
0: 	Object	getSavedObject(int objectNum);
0: 
0: 	/**
0: 	 *	Get all the saved objects.  Used for stored prepared
0: 	 * 	statements.
0: 	 *
0: 	 *	@return	Object[]	the saved objects
0: 	 */
0: 	Object[]	getSavedObjects();
0: 
0: 	/**
0: 	 *	Get the saved cursor info.  Used for stored prepared
0: 	 * 	statements.
0: 	 *
0: 	 *	@return	Object	the cursor info
0: 	 */
0: 	Object	getCursorInfo();
0: 
0: 	/**
0: 	 *  Get the class generated for this prepared statement.
0: 	 *  Used to confirm compatability with auxilary structures.
0: 	 *
0: 	 * @exception StandardException on error obtaining class
0: 	 *	(probably when a stored prepared statement is loading)
0: 	 */
0: 	GeneratedClass getActivationClass() throws StandardException;
0: 
0: 	/**
0: 	 *  Mark the statement as unusable, i.e. the system is
0: 	 * finished with it and no one should be able to use it.
0: 	 */
0: 	void finish(LanguageConnectionContext lcc);
0: 
0: 	/**
0: 	 * Does this statement need a savpoint
0: 	 *
0: 	 * @return true if needs a savepoint
0: 	 */
0: 	boolean needsSavepoint();
0: 
0: 	/**
0: 	 * Get a new prepared statement that is a shallow copy
0: 	 * of the current one.
0: 	 *
0: 	 * @return a new prepared statement
0: 	 *
0: 	 * @exception StandardException on error 
0: 	 */
0: 	public ExecPreparedStatement getClone() throws StandardException;
0: 
0: 	/* Methods from old CursorPreparedStatement */
0: 
0: 	/**
0: 	 * the update mode of the cursor
0: 	 *
0: 	 * @return	The update mode of the cursor
0: 	 */
0: 	int	getUpdateMode();
0: 
0: 	/**
0: 	 * the target table of the cursor
0: 	 *
0: 	 * @return	target table of the cursor
0: 	 */
0: 	ExecCursorTableReference getTargetTable();
0: 
0: 	/**
0: 	 * the target columns of the cursor; this is a superset of
0: 	 * the updatable columns, describing the row available
0: 	 *
0: 	 * @return	target columns of the cursor as an array of column descriptors
0: 	 */
0: 	ResultColumnDescriptor[]	getTargetColumns();
0: 
0: 	/**
0: 	 * the update columns of the cursor
0: 	 *
0: 	 * @return	update columns of the cursor as a string of column names
0: 	 */
0: 	String[]	getUpdateColumns();
0: 
0: 	/**
0: 	 * set this parepared statement to be valid
0: 	 */
0: 	void setValid();
0: 
0: 	/**
0: 	 * Indicate that the statement represents an SPS action
0: 	 */
0: 	void setSPSAction();
0: }
0: 
============================================================================