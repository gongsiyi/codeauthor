1:4f7da81: /*
1:4f7da81:   Class org.apache.derbyTesting.functionTests.tests.store.Derby4676Test
1:4f7da81: 
1:4f7da81:   Licensed to the Apache Software Foundation (ASF) under one or more
1:4f7da81:   contributor license agreements.  See the NOTICE file distributed with
1:4f7da81:   this work for additional information regarding copyright ownership.
1:4f7da81:   The ASF licenses this file to you under the Apache License, Version 2.0
1:4f7da81:   (the "License"); you may not use this file except in compliance with
1:4f7da81:   the License.  You may obtain a copy of the License at
1:4f7da81: 
1:4f7da81:   http://www.apache.org/licenses/LICENSE-2.0
1:4f7da81: 
1:4f7da81:   Unless required by applicable law or agreed to in writing, software
1:4f7da81:   distributed under the License is distributed on an "AS IS" BASIS,
1:4f7da81:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f7da81:   See the License for the specific language governing permissions and
1:4f7da81:   limitations under the License.
1:4f7da81: 
1:4f7da81: */
1:4f7da81: 
1:4f7da81: package org.apache.derbyTesting.functionTests.tests.store;
1:4f7da81: 
1:4f7da81: import java.sql.Connection;
1:4f7da81: import java.sql.Statement;
1:4f7da81: import java.util.ArrayList;
1:4f7da81: import java.util.List;
1:4f7da81: import junit.framework.Test;
1:4f7da81: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:4f7da81: import org.apache.derbyTesting.junit.JDBC;
1:4f7da81: import org.apache.derbyTesting.junit.TestConfiguration;
1:4f7da81: 
1:4f7da81: /**
1:4f7da81:  * Regression test for DERBY-4676.
1:4f7da81:  */
1:4f7da81: public class Derby4676Test extends BaseJDBCTestCase {
1:4f7da81:     /** List of {@code HelperThread}s used in the test. */
1:3f5c48a:     private List<HelperThread> threads;
1:4f7da81: 
1:4f7da81:     public Derby4676Test(String name) {
1:4f7da81:         super(name);
1:4f7da81:     }
1:4f7da81: 
1:4f7da81:     /** Create a suite of tests. */
1:4f7da81:     public static Test suite() {
1:4f7da81:         return TestConfiguration.defaultSuite(Derby4676Test.class);
1:4f7da81:     }
1:4f7da81: 
1:4f7da81:     /** Set up the test environment. */
1:4f7da81:     protected void setUp() {
1:3f5c48a:         threads = new ArrayList<HelperThread>();
1:4f7da81:     }
1:4f7da81: 
1:4f7da81:     /** Tear down the test environment. */
1:4f7da81:     protected void tearDown() throws Exception {
1:4f7da81:         super.tearDown();
1:4f7da81: 
1:3f5c48a:         List<HelperThread> localThreads = threads;
1:4f7da81:         threads = null;
1:4f7da81: 
1:4f7da81:         // First, wait for all threads to terminate and close all connections.
1:4f7da81:         for (int i = 0; i < localThreads.size(); i++) {
1:3f5c48a:             HelperThread t = localThreads.get(i);
1:4f7da81:             t.join();
1:4f7da81:             Connection c = t.conn;
1:4f7da81:             if (c != null && !c.isClosed()) {
1:4f7da81:                 c.rollback();
1:4f7da81:                 c.close();
1:4f7da81:             }
1:4f7da81:         }
1:4f7da81: 
1:4f7da81:         // Then check if any of the helper threads failed.
1:4f7da81:         for (int i = 0; i < localThreads.size(); i++) {
1:3f5c48a:             HelperThread t = localThreads.get(i);
1:4f7da81:             if (t.exception != null) {
1:4f7da81:                 fail("Helper thread failed", t.exception);
1:4f7da81:             }
1:4f7da81:         }
1:4f7da81:     }
1:4f7da81: 
1:4f7da81:     /**
1:4f7da81:      * <p>
1:4f7da81:      * Regression test case for DERBY-4676. Before the fix, fetching a row by
1:4f7da81:      * its row location would sometimes fail with a NullPointerException if
1:4f7da81:      * the row was deleted while the fetch operation was waiting for a lock.
1:4f7da81:      * </p>
1:4f7da81:      */
1:4f7da81:     public void testConcurrentFetchAndDelete() throws Exception {
1:4f7da81:         // Create a table to use in the test. Note that we need to have a
1:4f7da81:         // non-covering index on the table so that the row location is fetched
1:4f7da81:         // from the index and used to look up the row in the heap. If the
1:4f7da81:         // index covers all the columns, we won't fetch the row location from
1:4f7da81:         // it and the bug won't be reproduced.
1:4f7da81:         Statement s = createStatement();
1:4f7da81:         s.execute("create table t(x int, y int)");
1:4f7da81:         s.execute("create index idx on t(x)");
1:4f7da81: 
1:4f7da81:         // Create a thread that repeatedly inserts and deletes a row.
1:4f7da81:         HelperThread thread = new HelperThread() {
1:4f7da81:             void body(Connection conn) throws Exception {
1:4f7da81:                 Thread.sleep(1000); // Wait for the select loop to start so
1:4f7da81:                                     // that the insert/delete loop doesn't
1:4f7da81:                                     // complete before it has started.
1:4f7da81:                 Statement s = conn.createStatement();
1:4f7da81:                 for (int i = 0; i < 1000; i++) {
1:4f7da81:                     s.execute("insert into t values (1,2)");
1:4f7da81:                     s.execute("delete from t");
1:4f7da81:                 }
1:4f7da81:                 s.close();
1:4f7da81:             }
1:4f7da81:         };
1:4f7da81: 
1:4f7da81:         startThread(thread);
1:4f7da81: 
1:4f7da81:         // As long as the insert/delete thread is running, try to read the
1:4f7da81:         // rows of the table using the index. This used to cause intermittent
1:4f7da81:         // NullPointerExceptions.
1:4f7da81:         while (thread.isAlive()) {
1:4f7da81:             JDBC.assertDrainResults(s.executeQuery(
1:4f7da81:                 "select * from t --derby-properties index=idx"));
1:4f7da81:         }
1:4f7da81:     }
1:4f7da81: 
1:4f7da81:     /**
1:4f7da81:      * Helper class for running database operations in a separate thread and
1:4f7da81:      * in a separate transaction.
1:4f7da81:      */
1:4f7da81:     private abstract class HelperThread extends Thread {
1:4f7da81:         Exception exception;
1:4f7da81:         Connection conn;
1:4f7da81: 
1:4f7da81:         public void run() {
1:4f7da81:             try {
1:4f7da81:                 conn = openDefaultConnection();
1:4f7da81:                 body(conn);
1:4f7da81:             } catch (Exception ex) {
1:4f7da81:                 exception = ex;
1:4f7da81:             }
1:4f7da81:         }
1:4f7da81: 
1:4f7da81:         abstract void body(Connection conn) throws Exception;
1:4f7da81:     }
1:4f7da81: 
1:4f7da81:     /**
1:4f7da81:      * Start a helper thread and register it for automatic clean-up in
1:4f7da81:      * {@link #tearDown()}.
1:4f7da81:      *
1:4f7da81:      * @param thread the helper thread to start
1:4f7da81:      */
1:4f7da81:     private void startThread(HelperThread thread) {
1:4f7da81:         thread.start();
1:4f7da81:         threads.add(thread);
1:4f7da81:     }
1:4f7da81: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     private List<HelperThread> threads;
/////////////////////////////////////////////////////////////////////////
1:         threads = new ArrayList<HelperThread>();
1:         List<HelperThread> localThreads = threads;
1:             HelperThread t = localThreads.get(i);
/////////////////////////////////////////////////////////////////////////
1:             HelperThread t = localThreads.get(i);
commit:4f7da81
/////////////////////////////////////////////////////////////////////////
1: /*
1:   Class org.apache.derbyTesting.functionTests.tests.store.Derby4676Test
1: 
1:   Licensed to the Apache Software Foundation (ASF) under one or more
1:   contributor license agreements.  See the NOTICE file distributed with
1:   this work for additional information regarding copyright ownership.
1:   The ASF licenses this file to you under the Apache License, Version 2.0
1:   (the "License"); you may not use this file except in compliance with
1:   the License.  You may obtain a copy of the License at
1: 
1:   http://www.apache.org/licenses/LICENSE-2.0
1: 
1:   Unless required by applicable law or agreed to in writing, software
1:   distributed under the License is distributed on an "AS IS" BASIS,
1:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:   See the License for the specific language governing permissions and
1:   limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: import java.util.List;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Regression test for DERBY-4676.
1:  */
1: public class Derby4676Test extends BaseJDBCTestCase {
1:     /** List of {@code HelperThread}s used in the test. */
0:     private List threads;
1: 
1:     public Derby4676Test(String name) {
1:         super(name);
1:     }
1: 
1:     /** Create a suite of tests. */
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(Derby4676Test.class);
1:     }
1: 
1:     /** Set up the test environment. */
1:     protected void setUp() {
0:         threads = new ArrayList();
1:     }
1: 
1:     /** Tear down the test environment. */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
0:         List localThreads = threads;
1:         threads = null;
1: 
1:         // First, wait for all threads to terminate and close all connections.
1:         for (int i = 0; i < localThreads.size(); i++) {
0:             HelperThread t = (HelperThread) localThreads.get(i);
1:             t.join();
1:             Connection c = t.conn;
1:             if (c != null && !c.isClosed()) {
1:                 c.rollback();
1:                 c.close();
1:             }
1:         }
1: 
1:         // Then check if any of the helper threads failed.
1:         for (int i = 0; i < localThreads.size(); i++) {
0:             HelperThread t = (HelperThread) localThreads.get(i);
1:             if (t.exception != null) {
1:                 fail("Helper thread failed", t.exception);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Regression test case for DERBY-4676. Before the fix, fetching a row by
1:      * its row location would sometimes fail with a NullPointerException if
1:      * the row was deleted while the fetch operation was waiting for a lock.
1:      * </p>
1:      */
1:     public void testConcurrentFetchAndDelete() throws Exception {
1:         // Create a table to use in the test. Note that we need to have a
1:         // non-covering index on the table so that the row location is fetched
1:         // from the index and used to look up the row in the heap. If the
1:         // index covers all the columns, we won't fetch the row location from
1:         // it and the bug won't be reproduced.
1:         Statement s = createStatement();
1:         s.execute("create table t(x int, y int)");
1:         s.execute("create index idx on t(x)");
1: 
1:         // Create a thread that repeatedly inserts and deletes a row.
1:         HelperThread thread = new HelperThread() {
1:             void body(Connection conn) throws Exception {
1:                 Thread.sleep(1000); // Wait for the select loop to start so
1:                                     // that the insert/delete loop doesn't
1:                                     // complete before it has started.
1:                 Statement s = conn.createStatement();
1:                 for (int i = 0; i < 1000; i++) {
1:                     s.execute("insert into t values (1,2)");
1:                     s.execute("delete from t");
1:                 }
1:                 s.close();
1:             }
1:         };
1: 
1:         startThread(thread);
1: 
1:         // As long as the insert/delete thread is running, try to read the
1:         // rows of the table using the index. This used to cause intermittent
1:         // NullPointerExceptions.
1:         while (thread.isAlive()) {
1:             JDBC.assertDrainResults(s.executeQuery(
1:                 "select * from t --derby-properties index=idx"));
1:         }
1:     }
1: 
1:     /**
1:      * Helper class for running database operations in a separate thread and
1:      * in a separate transaction.
1:      */
1:     private abstract class HelperThread extends Thread {
1:         Exception exception;
1:         Connection conn;
1: 
1:         public void run() {
1:             try {
1:                 conn = openDefaultConnection();
1:                 body(conn);
1:             } catch (Exception ex) {
1:                 exception = ex;
1:             }
1:         }
1: 
1:         abstract void body(Connection conn) throws Exception;
1:     }
1: 
1:     /**
1:      * Start a helper thread and register it for automatic clean-up in
1:      * {@link #tearDown()}.
1:      *
1:      * @param thread the helper thread to start
1:      */
1:     private void startThread(HelperThread thread) {
1:         thread.start();
1:         threads.add(thread);
1:     }
1: }
============================================================================