1:888d12e: /*
1:888d12e: 
1:888d12e:    Derby - Class org.apache.derby.impl.store.access.RAMAccessUndoHandler
1:888d12e: 
1:888d12e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:888d12e:    contributor license agreements.  See the NOTICE file distributed with
1:888d12e:    this work for additional information regarding copyright ownership.
1:888d12e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:888d12e:    (the "License"); you may not use this file except in compliance with
1:888d12e:    the License.  You may obtain a copy of the License at
1:888d12e: 
1:888d12e:       http://www.apache.org/licenses/LICENSE-2.0
1:888d12e: 
1:888d12e:    Unless required by applicable law or agreed to in writing, software
1:888d12e:    distributed under the License is distributed on an "AS IS" BASIS,
1:888d12e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:888d12e:    See the License for the specific language governing permissions and
1:888d12e:    limitations under the License.
1:888d12e: 
1:888d12e: */
1:888d12e: 
1:888d12e: package org.apache.derby.impl.store.access;
1:888d12e: 
1:888d12e: import org.apache.derby.shared.common.sanity.SanityManager;
1:888d12e: 
1:888d12e: import org.apache.derby.iapi.error.StandardException; 
1:888d12e: 
1:888d12e: import org.apache.derby.iapi.store.access.AccessFactory;
1:888d12e: 
1:888d12e: import org.apache.derby.iapi.store.access.conglomerate.ConglomerateFactory;
1:888d12e: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:888d12e: 
1:888d12e: import org.apache.derby.iapi.store.raw.PageKey;
1:888d12e: import org.apache.derby.iapi.store.raw.Transaction;
1:888d12e: import org.apache.derby.iapi.store.raw.UndoHandler;
1:888d12e: 
1:888d12e: 
1:888d12e: /**
1:888d12e: 	A class that provides interface to be called when undo of an Insert
1:888d12e:     happens in raw store.
1:888d12e: */
1:888d12e: 
1:888d12e: 
1:888d12e: public class RAMAccessUndoHandler implements UndoHandler
1:888d12e: {
1:888d12e:     /**************************************************************************
1:888d12e:      * Fields of the class
1:888d12e:      **************************************************************************
1:888d12e:      */
1:888d12e:     private RAMAccessManager access_factory;
1:888d12e: 
1:888d12e:     /**************************************************************************
1:888d12e:      * Constructors for This class:
1:888d12e:      **************************************************************************
1:888d12e:      */
1:888d12e:     public RAMAccessUndoHandler(RAMAccessManager input_access_factory)
1:888d12e:     {
1:888d12e:         access_factory = input_access_factory;
1:888d12e:     }
1:888d12e: 
1:888d12e:     /**************************************************************************
1:888d12e:      * Private/Protected methods of This class:
1:888d12e:      **************************************************************************
1:888d12e:      */
1:888d12e: 
1:888d12e:     /**************************************************************************
1:888d12e:      * Public Methods of This class:
1:888d12e:      **************************************************************************
1:888d12e:      */
1:888d12e: 
1:888d12e:     /**
1:888d12e:      * Interface to be called when an undo of an insert is processed.
1:888d12e:      * <p>
1:888d12e:      * Implementer of this class provides interface to be called by the raw
1:888d12e:      * store when an undo of an insert is processed.  Initial implementation
1:888d12e:      * will be by Access layer to queue space reclaiming events if necessary
1:888d12e:      * when a rows is logically "deleted" as part of undo of the original
1:888d12e:      * insert.  This undo can happen a lot for many applications if they
1:888d12e:      * generate expected and handled duplicate key errors.
1:888d12e:      * <p>
1:888d12e:      * It may be useful at some time to include the recordId of the deleted
1:888d12e:      * row, but it is not used currently by those notified.  The post commit
1:888d12e:      * work ultimately processes all rows on the table while
1:888d12e:      * it has the latch which is more efficient than one row at time per latch.
1:888d12e:      * <p>
1:888d12e:      * It is expected that notifies only happen for pages that caller
1:888d12e:      * is interested in.  Currently only the following aborted inserts
1:888d12e:      * cause a notify:
1:888d12e:      * o must be on a non overflow page
1:888d12e:      * o if all "user" rows on page are deleted a notify happens (page 1 
1:888d12e:      *   has a system row so on page one notifies happen if all but the first
1:888d12e:      *   row is deleted).
1:888d12e:      * o if the aborted insert row has either an overflow row or column
1:888d12e:      *   component then the notify is executed.
1:888d12e:      *
1:888d12e:      * @param xact      transaction that is being backed out.
1:888d12e:      * @param page_key  key that uniquely identifies page in question, container
1:888d12e:      *                  key information is embedded in the PageKey
1:888d12e:      *
1:888d12e:      * @exception  StandardException  Standard exception policy.
1:888d12e:      **/
1:888d12e:     public void insertUndoNotify(
1:888d12e:     Transaction         xact,
1:888d12e:     PageKey             page_key)
1:888d12e:        throws StandardException
1:888d12e:     {
1:888d12e:         // from the container id, get the type of conglomerate (currently
1:888d12e:         // Heap or Btree), and then marshal the call to the appropriate
1:888d12e:         // conglomerate factory.
1:888d12e:         long conglom_id = page_key.getContainerId().getContainerId();
1:888d12e: 
1:888d12e:         // casting to get package access to getFactoryFromConglomId, 
1:888d12e:         ConglomerateFactory conglom_factory = 
1:888d12e:             access_factory.getFactoryFromConglomId(conglom_id);
1:888d12e: 
1:888d12e:         try
1:888d12e:         {
1:888d12e:             conglom_factory.insertUndoNotify(
1:888d12e:                     access_factory, 
1:888d12e:                     xact,
1:888d12e:                     page_key);
1:888d12e: 
1:888d12e:         }
1:888d12e:         catch (StandardException exception)
1:888d12e:         {
1:888d12e:             // errors are likely related to abort of ddl associated
1:888d12e:             // with inserts.  Just ignore and don't post try and post
1:888d12e:             // a work event.
1:888d12e: 
1:888d12e: 
1:888d12e:             // ignore exception
1:888d12e:         }
1:888d12e: 
1:888d12e:         return;
1:888d12e:     }
1:888d12e: 
1:888d12e:     /**************************************************************************
1:888d12e:      * Public Methods of XXXX class:
1:888d12e:      **************************************************************************
1:888d12e:      */
1:888d12e: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:888d12e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.access.RAMAccessUndoHandler
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.store.access;
1: 
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.ConglomerateFactory;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: import org.apache.derby.iapi.store.raw.PageKey;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.UndoHandler;
1: 
1: 
1: /**
1: 	A class that provides interface to be called when undo of an Insert
1:     happens in raw store.
1: */
1: 
1: 
1: public class RAMAccessUndoHandler implements UndoHandler
1: {
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1:     private RAMAccessManager access_factory;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     public RAMAccessUndoHandler(RAMAccessManager input_access_factory)
1:     {
1:         access_factory = input_access_factory;
1:     }
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Interface to be called when an undo of an insert is processed.
1:      * <p>
1:      * Implementer of this class provides interface to be called by the raw
1:      * store when an undo of an insert is processed.  Initial implementation
1:      * will be by Access layer to queue space reclaiming events if necessary
1:      * when a rows is logically "deleted" as part of undo of the original
1:      * insert.  This undo can happen a lot for many applications if they
1:      * generate expected and handled duplicate key errors.
1:      * <p>
1:      * It may be useful at some time to include the recordId of the deleted
1:      * row, but it is not used currently by those notified.  The post commit
1:      * work ultimately processes all rows on the table while
1:      * it has the latch which is more efficient than one row at time per latch.
1:      * <p>
1:      * It is expected that notifies only happen for pages that caller
1:      * is interested in.  Currently only the following aborted inserts
1:      * cause a notify:
1:      * o must be on a non overflow page
1:      * o if all "user" rows on page are deleted a notify happens (page 1 
1:      *   has a system row so on page one notifies happen if all but the first
1:      *   row is deleted).
1:      * o if the aborted insert row has either an overflow row or column
1:      *   component then the notify is executed.
1:      *
1:      * @param xact      transaction that is being backed out.
1:      * @param page_key  key that uniquely identifies page in question, container
1:      *                  key information is embedded in the PageKey
1:      *
1:      * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void insertUndoNotify(
1:     Transaction         xact,
1:     PageKey             page_key)
1:        throws StandardException
1:     {
1:         // from the container id, get the type of conglomerate (currently
1:         // Heap or Btree), and then marshal the call to the appropriate
1:         // conglomerate factory.
1:         long conglom_id = page_key.getContainerId().getContainerId();
1: 
1:         // casting to get package access to getFactoryFromConglomId, 
1:         ConglomerateFactory conglom_factory = 
1:             access_factory.getFactoryFromConglomId(conglom_id);
1: 
1:         try
1:         {
1:             conglom_factory.insertUndoNotify(
1:                     access_factory, 
1:                     xact,
1:                     page_key);
1: 
1:         }
1:         catch (StandardException exception)
1:         {
1:             // errors are likely related to abort of ddl associated
1:             // with inserts.  Just ignore and don't post try and post
1:             // a work event.
1: 
1: 
1:             // ignore exception
1:         }
1: 
1:         return;
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods of XXXX class:
1:      **************************************************************************
1:      */
1: }
============================================================================