1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatIdInputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.DataInputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.ObjectInputStream;
1:eac0369: import java.io.StreamCorruptedException;
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: import java.security.AccessController;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
1:eac0369: import org.apache.derby.iapi.types.Resetable;
1:eac0369: 
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
2:eac0369: /**
1:eac0369:   A stream for reading objects with format id tags which was
1:eac0369:   produced by a FormatIdOutputStream.
1:eac0369: 
1:eac0369:   <P>Please see the documentation for FormatIdOutputStream for
1:eac0369:   information about the streams format and capabilites.
1:eac0369:   */
1:eac0369: public final class FormatIdInputStream extends DataInputStream
1:1b454a1:     implements ErrorObjectInput, Resetable, CloneableStream
1:eac0369: {
1:eac0369: 	protected ClassFactory cf;
1:eac0369: 	private ErrorInfo errorInfo;
1:eac0369:     private Exception myNestedException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Constructor for a FormatIdInputStream
1:eac0369: 
1:eac0369: 	  @param in bytes come from here.
1:eac0369: 	  */
1:eac0369:     public FormatIdInputStream(InputStream in)
1:eac0369: 	{
1:eac0369: 		super(in);
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read an object from this stream.
1:eac0369: 
1:eac0369: 	  @return The read object.
1:489530b:       @exception java.io.IOException An IO or serialization error occurred.
1:eac0369: 	  @exception java.lang.ClassNotFoundException A class for an object in
1:eac0369: 	  the stream could not be found.
1:eac0369: 	  */
1:eac0369: 
1:eac0369: 	public Object readObject() throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369:         setErrorInfo(null);
1:eac0369: 
1:eac0369: 		int fmtId = FormatIdUtil.readFormatIdInteger(this);
1:eac0369: 
1:eac0369: 		if (fmtId == StoredFormatIds.NULL_FORMAT_ID)
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (fmtId == StoredFormatIds.STRING_FORMAT_ID)
1:eac0369: 		{
1:eac0369: 			return readUTF();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		try
1:eac0369:         {
1:eac0369: 
1:eac0369: 			if (fmtId == StoredFormatIds.SERIALIZABLE_FORMAT_ID)
1:eac0369: 			{
1:eac0369: 				ObjectInputStream ois = getObjectStream();
1:eac0369: 				try {
1:eac0369: 					Object result = ois.readObject();
1:eac0369: 					return result;
1:eac0369: 				} catch (IOException ioe) {
1:489530b:                     throw handleReadError(ioe, ois);
1:eac0369: 				} catch (ClassNotFoundException cnfe) {
1:489530b:                     throw handleReadError(cnfe, ois);
1:eac0369: 				} catch (LinkageError le) {
1:489530b:                     throw handleReadError(le, ois);
1:eac0369: 				} catch (ClassCastException cce) {
1:489530b:                     throw handleReadError(cce, ois);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 
1:eac0369: 				Formatable f = (Formatable)Monitor.newInstanceFromIdentifier(fmtId);
1:eac0369: 				if (f instanceof Storable)
1:eac0369: 				{
1:eac0369: 					boolean isNull = this.readBoolean();
1:eac0369: 					if (isNull == true)
1:eac0369: 					{
1:eac0369: 						Storable s = (Storable)f;
1:eac0369: 						s.restoreToNull();
1:eac0369: 						return s;
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				f.readExternal(this);
1:eac0369: 				return f;
1:eac0369: 			} catch (StandardException se) {
1:eac0369: 				throw new ClassNotFoundException(se.toString());
1:eac0369: 			}
1:eac0369: 
1:eac0369: 
1:eac0369: 		}
1:eac0369:         catch (ClassCastException cce)
1:eac0369:         {
1:eac0369: 			// We catch this here as it is usuall a user error.
1:eac0369: 			// they have readExternal (or SQLData) that doesn't match
1:eac0369: 			// the writeExternal. and thus the object read is of
1:eac0369: 			// the incorrect type, e.g. Integer i = (Integer) in.readObject();
1:76a9f5a: 			StreamCorruptedException sce = new StreamCorruptedException(cce.toString());
1:76a9f5a: 			sce.initCause(cce);
1:76a9f5a: 			throw sce;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Set the InputStream for this FormatIdInputStream to the stream
1:eac0369: 	  provided.
1:eac0369: 
1:eac0369: 	  @param in The new input stream.
1:eac0369: 	  */
1:eac0369: 	public void setInput(InputStream in)
1:eac0369: 	{
1:eac0369: 		this.in = in;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public	InputStream	getInputStream()
1:eac0369:     {
1:eac0369:         return in;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	public String getErrorInfo()
1:eac0369:     {
1:eac0369: 		if (errorInfo == null)
1:eac0369:             return "";
1:eac0369: 
1:eac0369: 		return errorInfo.getErrorInfo();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public Exception getNestedException()
1:eac0369:     {
1:eac0369:         if (myNestedException != null)
1:eac0369:             return null;
1:eac0369: 
1:eac0369:         if (errorInfo == null)
1:eac0369:             return null;
1:eac0369: 
1:eac0369:         return errorInfo.getNestedException();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	private void setErrorInfo(ErrorInfo ei)
1:eac0369:     {
1:eac0369:         errorInfo = ei;
1:eac0369: 	}
1:eac0369: 
1:489530b:     /**
1:489530b:      * Handle an error that happened within {@code readObject()} when reading
1:489530b:      * a {@code Serializable} object.
1:489530b:      *
1:489530b:      * @param <T> the type of exception that was thrown
1:489530b:      * @param cause the thrown exception
1:489530b:      * @param stream the stream from which the exception was thrown
1:489530b:      * @return the thrown exception
1:489530b:      */
1:489530b:     private <T extends Throwable> T handleReadError(
1:489530b:             T cause, ObjectInputStream stream) {
1:489530b:         // If the input stream implements the ErrorInfo interface, it contains
1:489530b:         // extra information about the error, and we want to make that
1:489530b:         // information available to error handlers on a higher level.
1:489530b:         if (stream instanceof ErrorInfo) {
1:489530b:             setErrorInfo((ErrorInfo) stream);
1:489530b:         }
1:489530b:         return cause;
1:489530b:     }
1:eac0369: 
1:eac0369:     ClassFactory getClassFactory() {
1:eac0369: 		if (cf == null) {
1:eac0369: 
1:eac0369: 			ClassFactoryContext cfc =
1:a0dbbd7: 				(ClassFactoryContext) getContextOrNull
1:eac0369: 				                                  (ClassFactoryContext.CONTEXT_ID);
1:eac0369: 
1:eac0369: 			if (cfc != null)
1:eac0369: 				cf = cfc.getClassFactory();
1:eac0369: 		}
1:eac0369: 		return cf;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Class private methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	private ObjectInputStream getObjectStream() throws IOException {
1:eac0369: 
1:eac0369: 		return getClassFactory() == null ?
1:eac0369: 			new ObjectInputStream(this) :
1:eac0369: 			new ApplicationObjectInputStream(this, cf);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     /*** Resetable interface ***/
1:eac0369: 
1:9902f43:     /** @see Resetable#resetStream() */
1:eac0369:     public void resetStream()
1:eac0369:         throws IOException, StandardException
1:eac0369:     {
1:eac0369:         ((Resetable) in).resetStream();
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:9902f43:     /** @see Resetable#initStream() */
1:eac0369:     public void initStream()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         ((Resetable) in).initStream();
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:9902f43:     /** @see Resetable#closeStream() */
1:eac0369:     public void closeStream()
1:eac0369:     {
1:eac0369:         ((Resetable) in).closeStream();
1:eac0369:     }
1:eac0369: 
1:1b454a1:     /*** CloneableStream interface ***/
1:1b454a1: 
1:9902f43:     /** @see CloneableStream#cloneStream() */
1:1b454a1:     public InputStream cloneStream() {
1:1b454a1:         InputStream new_input_stream = ((CloneableStream) in).cloneStream();
1:1b454a1: 
1:1b454a1:         return(new FormatIdInputStream(new_input_stream));
1:1b454a1:     }
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContextOrNull( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContextOrNull( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContextOrNull( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:1b454a1: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1: 				(ClassFactoryContext) getContextOrNull
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContextOrNull( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContextOrNull( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContextOrNull( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:489530b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       @exception java.io.IOException An IO or serialization error occurred.
/////////////////////////////////////////////////////////////////////////
1:                     throw handleReadError(ioe, ois);
1:                     throw handleReadError(cnfe, ois);
1:                     throw handleReadError(le, ois);
1:                     throw handleReadError(cce, ois);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Handle an error that happened within {@code readObject()} when reading
1:      * a {@code Serializable} object.
1:      *
1:      * @param <T> the type of exception that was thrown
1:      * @param cause the thrown exception
1:      * @param stream the stream from which the exception was thrown
1:      * @return the thrown exception
1:      */
1:     private <T extends Throwable> T handleReadError(
1:             T cause, ObjectInputStream stream) {
1:         // If the input stream implements the ErrorInfo interface, it contains
1:         // extra information about the error, and we want to make that
1:         // information available to error handlers on a higher level.
1:         if (stream instanceof ErrorInfo) {
1:             setErrorInfo((ErrorInfo) stream);
1:         }
1:         return cause;
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:76a9f5a
/////////////////////////////////////////////////////////////////////////
1: 			StreamCorruptedException sce = new StreamCorruptedException(cce.toString());
1: 			sce.initCause(cce);
1: 			throw sce;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9902f43
/////////////////////////////////////////////////////////////////////////
1:     /** @see Resetable#resetStream() */
1:     /** @see Resetable#initStream() */
1:     /** @see Resetable#closeStream() */
1:     /** @see CloneableStream#cloneStream() */
commit:1b454a1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     implements ErrorObjectInput, Resetable, CloneableStream
/////////////////////////////////////////////////////////////////////////
1:     /*** CloneableStream interface ***/
1:     public InputStream cloneStream() {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof CloneableStream);
1: 
1:         InputStream new_input_stream = ((CloneableStream) in).cloneStream();
1: 
1:         return(new FormatIdInputStream(new_input_stream));
1:     }
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatIdInputStream
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.ObjectInputStream;
1: import java.io.StreamCorruptedException;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
1: import org.apache.derby.iapi.types.Resetable;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: /**
1:   A stream for reading objects with format id tags which was
1:   produced by a FormatIdOutputStream.
1: 
1:   <P>Please see the documentation for FormatIdOutputStream for
1:   information about the streams format and capabilites.
1:   */
1: public final class FormatIdInputStream extends DataInputStream
0: 	 implements ErrorObjectInput, Resetable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	protected ClassFactory cf;
1: 	private ErrorInfo errorInfo;
1:     private Exception myNestedException;
1: 
1: 
1: 	/**
1: 	  Constructor for a FormatIdInputStream
1: 
1: 	  @param in bytes come from here.
1: 	  */
1:     public FormatIdInputStream(InputStream in)
1: 	{
1: 		super(in);
1: 	}
1: 
1: 	/**
1: 	  Read an object from this stream.
1: 
1: 	  @return The read object.
0: 	  @exception java.io.IOException An IO or serialization error occured.
1: 	  @exception java.lang.ClassNotFoundException A class for an object in
1: 	  the stream could not be found.
1: 	  */
1: 
1: 	public Object readObject() throws IOException, ClassNotFoundException
1: 	{
1:         setErrorInfo(null);
1: 
1: 		int fmtId = FormatIdUtil.readFormatIdInteger(this);
1: 
1: 		if (fmtId == StoredFormatIds.NULL_FORMAT_ID)
1: 		{
1: 			return null;
1: 		}
1: 
1: 		if (fmtId == StoredFormatIds.STRING_FORMAT_ID)
1: 		{
1: 			return readUTF();
1: 		}
1: 
1: 		try
1:         {
1: 
1: 			if (fmtId == StoredFormatIds.SERIALIZABLE_FORMAT_ID)
1: 			{
1: 				ObjectInputStream ois = getObjectStream();
1: 				try {
1: 					Object result = ois.readObject();
1: 					return result;
1: 				} catch (IOException ioe) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw ioe;
1: 				} catch (ClassNotFoundException cnfe) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw cnfe;
1: 				} catch (LinkageError le) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw le;
1: 				} catch (ClassCastException cce) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw cce;
1: 				}
1: 			}
1: 
1: 			try {
1: 
1: 				Formatable f = (Formatable)Monitor.newInstanceFromIdentifier(fmtId);
1: 				if (f instanceof Storable)
1: 				{
1: 					boolean isNull = this.readBoolean();
1: 					if (isNull == true)
1: 					{
1: 						Storable s = (Storable)f;
1: 						s.restoreToNull();
1: 						return s;
1: 					}
1: 				}
1: 
1: 				f.readExternal(this);
1: 				return f;
1: 			} catch (StandardException se) {
1: 				throw new ClassNotFoundException(se.toString());
1: 			}
1: 
1: 
1: 		}
1:         catch (ClassCastException cce)
1:         {
1: 			// We catch this here as it is usuall a user error.
1: 			// they have readExternal (or SQLData) that doesn't match
1: 			// the writeExternal. and thus the object read is of
1: 			// the incorrect type, e.g. Integer i = (Integer) in.readObject();
0: 			throw new StreamCorruptedException(cce.toString());
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Set the InputStream for this FormatIdInputStream to the stream
1: 	  provided.
1: 
1: 	  @param in The new input stream.
1: 	  */
1: 	public void setInput(InputStream in)
1: 	{
1: 		this.in = in;
1: 	}
1: 
1:     public	InputStream	getInputStream()
1:     {
1:         return in;
1:     }
1: 
1: 	public String getErrorInfo()
1:     {
1: 		if (errorInfo == null)
1:             return "";
1: 
1: 		return errorInfo.getErrorInfo();
1: 	}
1: 
1:     public Exception getNestedException()
1:     {
1:         if (myNestedException != null)
1:             return null;
1: 
1:         if (errorInfo == null)
1:             return null;
1: 
1:         return errorInfo.getNestedException();
1:     }
1: 
1: 	private void setErrorInfo(ErrorInfo ei)
1:     {
1:         errorInfo = ei;
1: 	}
1: 
1: 
1:     ClassFactory getClassFactory() {
1: 		if (cf == null) {
1: 
1: 			ClassFactoryContext cfc =
0: 				(ClassFactoryContext) ContextService.getContextOrNull
1: 				                                  (ClassFactoryContext.CONTEXT_ID);
1: 
1: 			if (cfc != null)
1: 				cf = cfc.getClassFactory();
1: 		}
1: 		return cf;
1: 	}
1: 
1: 	/*
1: 	** Class private methods
1: 	*/
1: 
1: 	private ObjectInputStream getObjectStream() throws IOException {
1: 
1: 		return getClassFactory() == null ?
1: 			new ObjectInputStream(this) :
1: 			new ApplicationObjectInputStream(this, cf);
1: 	}
1: 
1: 
1: 
1:     /*** Resetable interface ***/
1: 
1:     public void resetStream()
1:         throws IOException, StandardException
1:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof Resetable);
1:         ((Resetable) in).resetStream();
1:     }
1: 
1: 
1:     public void initStream()
1:         throws StandardException
1:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof Resetable);
1:         ((Resetable) in).initStream();
1:     }
1: 
1: 
1:     public void closeStream()
1:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof Resetable);
1:         ((Resetable) in).closeStream();
1:     }
1: 
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.ObjectInputStream;
0: import java.io.StreamCorruptedException;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
0: import org.apache.derby.iapi.types.Resetable;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: /**
0:   A stream for reading objects with format id tags which was
0:   produced by a FormatIdOutputStream.
0: 
0:   <P>Please see the documentation for FormatIdOutputStream for
0:   information about the streams format and capabilites.
0:   */
0: public final class FormatIdInputStream extends DataInputStream
0: 	 implements ErrorObjectInput, Resetable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected ClassFactory cf;
0: 	private ErrorInfo errorInfo;
0:     private Exception myNestedException;
0: 
0: 
0: 	/**
0: 	  Constructor for a FormatIdInputStream
0: 
0: 	  @param in bytes come from here.
0: 	  */
0:     public FormatIdInputStream(InputStream in)
0: 	{
0: 		super(in);
0: 	}
0: 
0: 	/**
0: 	  Read an object from this stream.
0: 
0: 	  @return The read object.
0: 	  @exception java.io.IOException An IO or serialization error occured.
0: 	  @exception java.lang.ClassNotFoundException A class for an object in
0: 	  the stream could not be found.
0: 	  */
0: 
0: 	public Object readObject() throws IOException, ClassNotFoundException
0: 	{
0:         setErrorInfo(null);
0: 
0: 		int fmtId = FormatIdUtil.readFormatIdInteger(this);
0: 
0: 		if (fmtId == StoredFormatIds.NULL_FORMAT_ID)
0: 		{
0: 			return null;
0: 		}
0: 
0: 		if (fmtId == StoredFormatIds.STRING_FORMAT_ID)
0: 		{
0: 			return readUTF();
0: 		}
0: 
0: 		try
0:         {
0: 
0: 			if (fmtId == StoredFormatIds.SERIALIZABLE_FORMAT_ID)
0: 			{
0: 				ObjectInputStream ois = getObjectStream();
0: 				try {
0: 					Object result = ois.readObject();
0: 					return result;
0: 				} catch (IOException ioe) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw ioe;
0: 				} catch (ClassNotFoundException cnfe) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw cnfe;
0: 				} catch (LinkageError le) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw le;
0: 				} catch (ClassCastException cce) {
0: 					setErrorInfo((ErrorInfo) ois);
0: 					throw cce;
0: 				}
0: 			}
0: 
0: 			try {
0: 
0: 				Formatable f = (Formatable)Monitor.newInstanceFromIdentifier(fmtId);
0: 				if (f instanceof Storable)
0: 				{
0: 					boolean isNull = this.readBoolean();
0: 					if (isNull == true)
0: 					{
0: 						Storable s = (Storable)f;
0: 						s.restoreToNull();
0: 						return s;
0: 					}
0: 				}
0: 
0: 				f.readExternal(this);
0: 				return f;
0: 			} catch (StandardException se) {
0: 				throw new ClassNotFoundException(se.toString());
0: 			}
0: 
0: 
0: 		}
0:         catch (ClassCastException cce)
0:         {
0: 			// We catch this here as it is usuall a user error.
0: 			// they have readExternal (or SQLData) that doesn't match
0: 			// the writeExternal. and thus the object read is of
0: 			// the incorrect type, e.g. Integer i = (Integer) in.readObject();
0: 			throw new StreamCorruptedException(cce.toString());
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Set the InputStream for this FormatIdInputStream to the stream
0: 	  provided.
0: 
0: 	  @param in The new input stream.
0: 	  */
0: 	public void setInput(InputStream in)
0: 	{
0: 		this.in = in;
0: 	}
0: 
0:     public	InputStream	getInputStream()
0:     {
0:         return in;
0:     }
0: 
0: 	public String getErrorInfo()
0:     {
0: 		if (errorInfo == null)
0:             return "";
0: 
0: 		return errorInfo.getErrorInfo();
0: 	}
0: 
0:     public Exception getNestedException()
0:     {
0:         if (myNestedException != null)
0:             return null;
0: 
0:         if (errorInfo == null)
0:             return null;
0: 
0:         return errorInfo.getNestedException();
0:     }
0: 
0: 	private void setErrorInfo(ErrorInfo ei)
0:     {
0:         errorInfo = ei;
0: 	}
0: 
0: 
0:     ClassFactory getClassFactory() {
0: 		if (cf == null) {
0: 
0: 			ClassFactoryContext cfc =
0: 				(ClassFactoryContext) ContextService.getContextOrNull
0: 				                                  (ClassFactoryContext.CONTEXT_ID);
0: 
0: 			if (cfc != null)
0: 				cf = cfc.getClassFactory();
0: 		}
0: 		return cf;
0: 	}
0: 
0: 	/*
0: 	** Class private methods
0: 	*/
0: 
0: 	private ObjectInputStream getObjectStream() throws IOException {
0: 
0: 		return getClassFactory() == null ?
0: 			new ObjectInputStream(this) :
0: 			new ApplicationObjectInputStream(this, cf);
0: 	}
0: 
0: 
0: 
0:     /*** Resetable interface ***/
0: 
0:     public void resetStream()
0:         throws IOException, StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof Resetable);
0:         ((Resetable) in).resetStream();
0:     }
0: 
0: 
0:     public void initStream()
0:         throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof Resetable);
0:         ((Resetable) in).initStream();
0:     }
0: 
0: 
0:     public void closeStream()
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(in instanceof Resetable);
0:         ((Resetable) in).closeStream();
0:     }
0: 
0: }
0: 
============================================================================