1:ae71c74: /*
2:ae71c74: 
1:ae71c74:    Derby - Class org.apache.derby.impl.store.raw.data.EncryptContainerOperation
1:ae71c74: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:ae71c74: 
1:ae71c74:       http://www.apache.org/licenses/LICENSE-2.0
1:ae71c74: 
1:ae71c74:    Unless required by applicable law or agreed to in writing, software
1:ae71c74:    distributed under the License is distributed on an "AS IS" BASIS,
1:ae71c74:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ae71c74:    See the License for the specific language governing permissions and
1:ae71c74:    limitations under the License.
1:ae71c74: 
1:ae71c74:  */
1:ae71c74: 
1:ae71c74: package org.apache.derby.impl.store.raw.data;
1:ae71c74: 
1:ae71c74: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ae71c74: import org.apache.derby.iapi.store.raw.Compensation;
1:ae71c74: import org.apache.derby.iapi.store.raw.Transaction;
1:ae71c74: import org.apache.derby.iapi.store.raw.Undoable;
1:ae71c74: import org.apache.derby.iapi.store.raw.Loggable;
1:ae71c74: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:ae71c74: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:ae71c74: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:ae71c74: import org.apache.derby.iapi.store.raw.ContainerKey;
1:ae71c74: import org.apache.derby.iapi.error.StandardException;
1:ae71c74: 
1:ae71c74: import org.apache.derby.iapi.util.ByteArray;
1:ae71c74: 
1:ae71c74: import java.io.ObjectOutput;
1:ae71c74: import java.io.ObjectInput;
1:ae71c74: import java.io.IOException;
1:ae71c74: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:ae71c74: 
1:ae71c74: /**
1:ae71c74:  * Log operation to encrypt a container with a new encryption key or to encrypt
1:ae71c74:  * an unencrypted container while configuring the database for
1:d5650e5:  * encryption. Container is synced to the disk when encryption is 
1:d5650e5:  * is successful, there is nothing to do on a redo. If there is crash/error
1:ae71c74:  * while configuring a database for encryption; original version of the
1:d5650e5:  * container is put back during undo. 
1:ae71c74:  *
1:ae71c74:  * <PRE>
1:787ceb4:  *  @derby.formatId	LOGOP_ENCRYPT_CONTAINER
1:ae71c74:  * 	the formatId is written by FormatIdOutputStream when this object is
1:ae71c74:  *	written out by writeObject
1:787ceb4:  * @derby.purpose to record enctyption of container with a new encryption key.
1:787ceb4:  * @derby.upgrade
1:787ceb4:  * @derby.diskLayout
1:ae71c74:  *      containerId(ContainerKey)  the id of the container this operation applies to
1:787ceb4:  *	@derby.endFormat
1:ae71c74:  *  </PRE>
1:ae71c74:  *
1:ae71c74:  *  @see Undoable
1:ae71c74:  */
1:ae71c74: public class EncryptContainerOperation implements Undoable
1:ae71c74: {
1:ae71c74: 
1:ae71c74: 	private ContainerKey containerId;
1:ae71c74: 
1:ae71c74: 	protected EncryptContainerOperation(RawContainerHandle hdl) 
1:ae71c74:         throws StandardException
1:ae71c74: 	{
1:ae71c74: 		containerId = hdl.getId();
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74:     /*
1:ae71c74:      * Formatable methods
1:ae71c74:      */
1:ae71c74: 
1:ae71c74:     // no-arg constructor, required by Formatable
1:ae71c74:     public EncryptContainerOperation() { super(); }
1:ae71c74: 
1:ae71c74:     public void writeExternal(ObjectOutput out) throws IOException
1:ae71c74:     {
1:ae71c74:         containerId.writeExternal(out);
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     public void readExternal(ObjectInput in) 
1:ae71c74:         throws IOException, ClassNotFoundException 
1:ae71c74:     {
1:ae71c74:         containerId = ContainerKey.read(in);
1:ae71c74:     }
1:ae71c74: 
1:ae71c74: 
1:ae71c74: 	/**
1:ae71c74: 		Loggable methods
1:ae71c74: 	*/
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:        the default for prepared log is always null for all the operations
1:ae71c74:        that don't have optionalData.  If an operation has optional data,
1:ae71c74:        the operation need to prepare the optional data for this method.
1:ae71c74:        
1:ae71c74:        Encrypt Operation has no optional data to write out
1:ae71c74: 	*/
1:ae71c74:     public ByteArray getPreparedLog()
1:ae71c74:     {
1:ae71c74:         return (ByteArray) null;
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     public void releaseResource(Transaction tran)
1:ae71c74:     {
1:ae71c74:         // no resources held to release.
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:        A space operation is a RAWSTORE log record
1:ae71c74:     */
1:ae71c74:     public int group()
1:ae71c74:     {
1:ae71c74:         return Loggable.RAWSTORE;
1:ae71c74:     }
1:ae71c74: 
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:      * Check if this operation needs to be redone during recovery redo. 
1:ae71c74:      * Returns true if this op should be redone during recovery redo,
1:ae71c74:      * @param xact	the transaction that is doing the rollback
1:ae71c74:      * @return  true, if this operation needs to be redone during recovery.       
1:ae71c74:      * @exception StandardException Standard Derby error policy
1:ae71c74: 	*/
1:ae71c74: 	public boolean needsRedo(Transaction xact)
1:ae71c74: 		 throws StandardException
1:ae71c74: 	{
1:ae71c74:         // this opeation should not be redone during recovery. Encrypted version
1:ae71c74:         // of the container are synced to the disk when it is complete. In case 
1:ae71c74:         // rollback containers are replaced with the origincal version. 
1:ae71c74:         return false;
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:        Return my format identifier.
1:ae71c74:     */
1:ae71c74:     public int getTypeFormatId() {
1:ae71c74:         return StoredFormatIds.LOGOP_ENCRYPT_CONTAINER;
1:ae71c74:     }
1:ae71c74: 
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:      * Containers are not encryped on a redo. Nothing to do in this method.
1:ae71c74:      * @param tran      transaction doing the operation.
1:ae71c74:      * @param instant   log instant for this operation.
1:ae71c74:      * @param in        unused by this log operation.
1:ae71c74:      *
1:94f158a:      * @exception StandardException Standard Derby error policy
1:ae71c74:      */
1:ae71c74:     public final void doMe(Transaction tran, LogInstant instant, 
1:ae71c74:                            LimitObjectInput in)
1:ae71c74: 		 throws StandardException
1:ae71c74: 	{
1:ae71c74: 
1:ae71c74:         // nothing to do here, containers are not encrypted on redo, 
1:ae71c74:         // if confuring the database for encryption fails. it is  
1:ae71c74:         // undone during  recovery. Encryption of the container is done 
1:ae71c74:         // after the log record is flushed to the disk. 
1:ae71c74: 
1:ae71c74:         releaseResource(tran);
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:        Undo of encrytpion of the container. Original version of the container
1:ae71c74:        that existed before the start of the database encryption is put back.
1:ae71c74:         
1:ae71c74:        @param tran the transaction that is undoing this operation
1:94f158a:        @exception StandardException Standard Derby error policy
1:ae71c74:     */
1:ae71c74:     public void undoMe(Transaction tran) throws StandardException
1:ae71c74:     {
1:ae71c74:         // restore the container to the state it was before the encrytpion.
1:ae71c74:         BaseDataFileFactory bdff = 
1:ae71c74:             (BaseDataFileFactory) ((RawTransaction) tran).getDataFactory();
1:89a6625:         EncryptOrDecryptData ed = new EncryptOrDecryptData(bdff);
1:ae71c74:         ed.restoreContainer(containerId);
1:ae71c74:         releaseResource(tran);
1:ae71c74: 
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 	/**
1:ae71c74:      * Generate a Compensation (EncryptContainerUndoOperation) that 
1:ae71c74:      * will rollback the changes made to the container during container 
1:ae71c74:      * encryption.
1:ae71c74:      * @param tran	the transaction doing the compensating
1:ae71c74: 	 * @param in	optional input; not used by this operation.
1:94f158a:      * @exception StandardException Standard Derby error policy
1:ae71c74:      */
1:ae71c74:     public Compensation generateUndo(Transaction tran, LimitObjectInput in)
1:ae71c74:         throws StandardException
1:ae71c74:     {
1:ae71c74:         return new EncryptContainerUndoOperation(this);
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     /** debug */
1:ae71c74:     public String toString()
1:ae71c74:     {
1:ae71c74:         if (SanityManager.DEBUG)
1:ae71c74:         {
1:ae71c74:             return  "Encrypt container " + containerId;
1:ae71c74:         }
1:ae71c74:         
1:ae71c74:         return null;
1:ae71c74:     }
1:ae71c74: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:89a6625
/////////////////////////////////////////////////////////////////////////
1:         EncryptOrDecryptData ed = new EncryptOrDecryptData(bdff);
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1:  *  @derby.formatId	LOGOP_ENCRYPT_CONTAINER
1:  * @derby.purpose to record enctyption of container with a new encryption key.
1:  * @derby.upgrade
1:  * @derby.diskLayout
1:  *	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:        @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby error policy
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d5650e5
/////////////////////////////////////////////////////////////////////////
1:  * encryption. Container is synced to the disk when encryption is 
1:  * is successful, there is nothing to do on a redo. If there is crash/error
1:  * container is put back during undo. 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.raw.data.EncryptContainerOperation
1: 
0:    Copyright 1997, 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1:  * Log operation to encrypt a container with a new encryption key or to encrypt
1:  * an unencrypted container while configuring the database for
0:  * encryption. Container is  synced to the disk when encryption is 
0:  * is successfull, there is nothing to do on a redo. If there is crash/error
1:  * while configuring a database for encryption; original version of the
0:  * container is put backup during undo. 
1:  *
1:  * <PRE>
0:  *  @format_id	LOGOP_ENCRYPT_CONTAINER
1:  * 	the formatId is written by FormatIdOutputStream when this object is
1:  *	written out by writeObject
0:  * @purpose to record enctyption of container with a new encryption key.
0:  * @upgrade
0:  * @disk_layout
1:  *      containerId(ContainerKey)  the id of the container this operation applies to
0:  *	@end_format
1:  *  </PRE>
1:  *
0:  *	@author  Suresh Thalamati
1:  *  @see Undoable
1:  */
1: public class EncryptContainerOperation implements Undoable
1: {
1: 
1: 	private ContainerKey containerId;
1: 
1: 	protected EncryptContainerOperation(RawContainerHandle hdl) 
1:         throws StandardException
1: 	{
1: 		containerId = hdl.getId();
1: 	}
1: 
1:     /*
1:      * Formatable methods
1:      */
1: 
1:     // no-arg constructor, required by Formatable
1:     public EncryptContainerOperation() { super(); }
1: 
1:     public void writeExternal(ObjectOutput out) throws IOException
1:     {
1:         containerId.writeExternal(out);
1:     }
1: 
1:     public void readExternal(ObjectInput in) 
1:         throws IOException, ClassNotFoundException 
1:     {
1:         containerId = ContainerKey.read(in);
1:     }
1: 
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1:     /**
1:        the default for prepared log is always null for all the operations
1:        that don't have optionalData.  If an operation has optional data,
1:        the operation need to prepare the optional data for this method.
1:        
1:        Encrypt Operation has no optional data to write out
1: 	*/
1:     public ByteArray getPreparedLog()
1:     {
1:         return (ByteArray) null;
1:     }
1: 
1:     public void releaseResource(Transaction tran)
1:     {
1:         // no resources held to release.
1:     }
1: 
1:     /**
1:        A space operation is a RAWSTORE log record
1:     */
1:     public int group()
1:     {
1:         return Loggable.RAWSTORE;
1:     }
1: 
1: 
1:     /**
1:      * Check if this operation needs to be redone during recovery redo. 
1:      * Returns true if this op should be redone during recovery redo,
1:      * @param xact	the transaction that is doing the rollback
1:      * @return  true, if this operation needs to be redone during recovery.       
1:      * @exception StandardException Standard Derby error policy
1: 	*/
1: 	public boolean needsRedo(Transaction xact)
1: 		 throws StandardException
1: 	{
1:         // this opeation should not be redone during recovery. Encrypted version
1:         // of the container are synced to the disk when it is complete. In case 
1:         // rollback containers are replaced with the origincal version. 
1:         return false;
1: 	}
1: 
1: 
1:     /**
1:        Return my format identifier.
1:     */
1:     public int getTypeFormatId() {
1:         return StoredFormatIds.LOGOP_ENCRYPT_CONTAINER;
1:     }
1: 
1: 
1:     /**
1:      * Containers are not encryped on a redo. Nothing to do in this method.
1:      * @param tran      transaction doing the operation.
1:      * @param instant   log instant for this operation.
1:      * @param in        unused by this log operation.
1:      *
0:      * @exception StandardException Standard Cloudscape error policy
1:      */
1:     public final void doMe(Transaction tran, LogInstant instant, 
1:                            LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 
1:         // nothing to do here, containers are not encrypted on redo, 
1:         // if confuring the database for encryption fails. it is  
1:         // undone during  recovery. Encryption of the container is done 
1:         // after the log record is flushed to the disk. 
1: 
1:         releaseResource(tran);
1: 	}
1: 
1: 
1:     /**
1:        Undo of encrytpion of the container. Original version of the container
1:        that existed before the start of the database encryption is put back.
1:         
1:        @param tran the transaction that is undoing this operation
0:        @exception StandardException Standard Cloudscape error policy
1:     */
1:     public void undoMe(Transaction tran) throws StandardException
1:     {
1:         // restore the container to the state it was before the encrytpion.
1:         BaseDataFileFactory bdff = 
1:             (BaseDataFileFactory) ((RawTransaction) tran).getDataFactory();
0:         EncryptData ed = new EncryptData(bdff);
1:         ed.restoreContainer(containerId);
1:         releaseResource(tran);
1: 
1: 	}
1: 
1: 	/**
1:      * Generate a Compensation (EncryptContainerUndoOperation) that 
1:      * will rollback the changes made to the container during container 
1:      * encryption.
1:      * @param tran	the transaction doing the compensating
1: 	 * @param in	optional input; not used by this operation.
0:      * @exception StandardException Standard Cloudscape error policy
1:      */
1:     public Compensation generateUndo(Transaction tran, LimitObjectInput in)
1:         throws StandardException
1:     {
1:         return new EncryptContainerUndoOperation(this);
1:     }
1: 
1:     /** debug */
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             return  "Encrypt container " + containerId;
1:         }
1:         
1:         return null;
1:     }
1: }
============================================================================