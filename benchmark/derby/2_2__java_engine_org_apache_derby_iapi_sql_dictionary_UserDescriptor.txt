1:aa609d5: /*
3:aa609d5: 
1:aa609d5:    Derby - Class org.apache.derby.iapi.sql.dictionary.UserDescriptor
1:aa609d5: 
1:aa609d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:aa609d5:    contributor license agreements.  See the NOTICE file distributed with
1:aa609d5:    this work for additional information regarding copyright ownership.
1:aa609d5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:aa609d5:    (the "License"); you may not use this file except in compliance with
1:aa609d5:    the License.  You may obtain a copy of the License at
1:aa609d5: 
1:aa609d5:       http://www.apache.org/licenses/LICENSE-2.0
1:aa609d5: 
1:aa609d5:    Unless required by applicable law or agreed to in writing, software
1:aa609d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:aa609d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa609d5:    See the License for the specific language governing permissions and
1:aa609d5:    limitations under the License.
1:aa609d5: 
1:aa609d5:  */
1:aa609d5: 
1:aa609d5: package org.apache.derby.iapi.sql.dictionary;
1:aa609d5: 
1:aa609d5: import java.sql.Timestamp;
1:aa609d5: import java.util.Arrays;
1:aa609d5: 
1:bc2c59e: import org.apache.derby.iapi.types.DataTypeUtilities;
1:bc2c59e: 
1:aa609d5: /**
1:aa609d5:  * A Descriptor for a user stored in SYSUSERS.
1:aa609d5:  */
1:aa609d5: public final class  UserDescriptor extends TupleDescriptor 
1:aa609d5: {
1:aa609d5: 	private String _userName;
1:aa609d5: 	private String _hashingScheme;
1:aa609d5:     private char[] _password;
1:aa609d5:     private Timestamp _lastModified;
1:aa609d5: 	
1:aa609d5: 	/**
1:aa609d5: 	 * Constructor for a UserDescriptor.
1:aa609d5: 	 *
1:aa609d5: 	 * @param dataDictionary		The data dictionary that this descriptor lives in.
1:aa609d5: 	 * @param userName  Name of the user.
1:aa609d5: 	 * @param hashingScheme How the password was hashed.
1:aa609d5: 	 * @param password  The user's password.
1:aa609d5: 	 * @param lastModified  Time that the password was last modified.
1:aa609d5: 	 */
1:3221b8c:     UserDescriptor
1:aa609d5:         (
1:aa609d5:          DataDictionary dataDictionary,
1:aa609d5:          String userName,
1:aa609d5:          String hashingScheme,
1:aa609d5:          char[] password,
1:aa609d5:          Timestamp lastModified
1:aa609d5:          )
1:aa609d5: 	{
1:aa609d5: 		super( dataDictionary );
1:aa609d5: 
1:aa609d5:         _userName = userName;
1:aa609d5:         _hashingScheme = hashingScheme;
1:aa609d5: 
1:aa609d5:         if ( password == null ) { _password = null; }
1:aa609d5:         else
1:aa609d5:         {
1:aa609d5:             // copy the password because the caller will 0 it out
1:aa609d5:             _password = new char[ password.length ];
1:aa609d5:             System.arraycopy( password, 0, _password, 0, password.length );
1:aa609d5:         }
1:aa609d5:         
1:bc2c59e:         _lastModified = DataTypeUtilities.clone( lastModified );
1:aa609d5: 	}
1:aa609d5: 
1:aa609d5: 	public String getUserName(){ return _userName; }
1:aa609d5: 	public String getHashingScheme()    { return _hashingScheme; }
1:bc2c59e:     public  Timestamp   getLastModified()   { return DataTypeUtilities.clone( _lastModified ); }
1:aa609d5: 
1:aa609d5:     /**
1:aa609d5:      * <p>
1:aa609d5:      * Zero the password after getting it so that the char[] can't be memory-sniffed.
1:aa609d5:      * </p>
1:aa609d5:      */
1:aa609d5: 	public char[]   getAndZeroPassword()
1:aa609d5: 	{
1:aa609d5: 		int length = _password.length;
1:aa609d5:         char[] retval = new char[ length ];
1:aa609d5:         System.arraycopy( _password, 0, retval, 0, length );
1:aa609d5:         Arrays.fill( _password, (char) 0 );
1:aa609d5: 
1:aa609d5:         return retval;
1:aa609d5: 	}
1:aa609d5: 
1:aa609d5: 	//
1:aa609d5: 	// class interface
1:aa609d5: 	//
1:aa609d5: 
1:aa609d5: 	
1:aa609d5: 	/** @see TupleDescriptor#getDescriptorType */
1:aa609d5: 	public String getDescriptorType() { return "User"; }
1:aa609d5: 
1:aa609d5: 	/** @see TupleDescriptor#getDescriptorName */
1:aa609d5: 	public String getDescriptorName() { return _userName; }
1:aa609d5: 
1:aa609d5: 
1:aa609d5: 
1:aa609d5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bc2c59e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:         _lastModified = DataTypeUtilities.clone( lastModified );
1:     public  Timestamp   getLastModified()   { return DataTypeUtilities.clone( _lastModified ); }
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.UserDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import java.sql.Timestamp;
1: import java.util.Arrays;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * A Descriptor for a user stored in SYSUSERS.
1:  */
1: public final class  UserDescriptor extends TupleDescriptor 
1: {
1: 	private String _userName;
1: 	private String _hashingScheme;
1:     private char[] _password;
1:     private Timestamp _lastModified;
1: 	
1: 	/**
1: 	 * Constructor for a UserDescriptor.
1: 	 *
1: 	 * @param dataDictionary		The data dictionary that this descriptor lives in.
1: 	 * @param userName  Name of the user.
1: 	 * @param hashingScheme How the password was hashed.
1: 	 * @param password  The user's password.
1: 	 * @param lastModified  Time that the password was last modified.
1: 	 */
1: 
0: 	public UserDescriptor
1:         (
1:          DataDictionary dataDictionary,
1:          String userName,
1:          String hashingScheme,
1:          char[] password,
1:          Timestamp lastModified
1:          )
1: 	{
1: 		super( dataDictionary );
1: 
1:         _userName = userName;
1:         _hashingScheme = hashingScheme;
1: 
1:         if ( password == null ) { _password = null; }
1:         else
1:         {
1:             // copy the password because the caller will 0 it out
1:             _password = new char[ password.length ];
1:             System.arraycopy( password, 0, _password, 0, password.length );
1:         }
1:         
0:         _lastModified = lastModified;
1: 	}
1: 
1: 	public String getUserName(){ return _userName; }
1: 	public String getHashingScheme()    { return _hashingScheme; }
0:     public  Timestamp   getLastModified()   { return _lastModified; }
1: 
1:     /**
1:      * <p>
1:      * Zero the password after getting it so that the char[] can't be memory-sniffed.
1:      * </p>
1:      */
1: 	public char[]   getAndZeroPassword()
1: 	{
1: 		int length = _password.length;
1:         char[] retval = new char[ length ];
1:         System.arraycopy( _password, 0, retval, 0, length );
1:         Arrays.fill( _password, (char) 0 );
1: 
1:         return retval;
1: 	}
1: 
1: 	//
1: 	// class interface
1: 	//
1: 
1: 	
1: 	/** @see TupleDescriptor#getDescriptorType */
1: 	public String getDescriptorType() { return "User"; }
1: 
1: 	/** @see TupleDescriptor#getDescriptorName */
1: 	public String getDescriptorName() { return _userName; }
1: 
1: 
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3221b8c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     UserDescriptor
============================================================================