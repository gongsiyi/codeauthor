1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.RowUtil;
1:eac0369: 
1:722a889: import org.apache.derby.iapi.store.raw.Transaction;
1:722a889: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:9a3cbed: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:04db160: /**
1:eac0369: 
1:eac0369: A utility class to store and use temporary scratch space associated with
1:eac0369: a conglomerate.
1:eac0369: 
2:eac0369: **/
1:eac0369: 
1:eac0369: public class OpenConglomerateScratchSpace 
1:eac0369:     implements DynamicCompiledOpenConglomInfo
2:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
3:eac0369:     /**
1:eac0369:      * A template of info about the classes in the returned row.
2:eac0369:      * <p>
1:eac0369:      * This template is allocated on demand, and is used to efficiently
1:eac0369:      * create new rows for export from this class.  This variable is for
1:eac0369:      * use by get_row_for_export().
1:eac0369:      **/
1:6404cde:     private DataValueDescriptor[]   row_for_export_template;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * A Scratch template used for searching and qualifying rows in the 
1:6404cde:      * conglomerate.  This is a full template, independent of the 
1:6404cde:      * FormatableBitSet used for access.
1:eac0369:      **/
1:3f3b5e6:     private DataValueDescriptor[]   scratch_template;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * A Scratch row used for qualifying rows in the 
1:6404cde:      * conglomerate.  This is a row which matches the FormatableBitSet of rows
1:6404cde:      * being returned.
1:eac0369:      **/
1:3f3b5e6:     private DataValueDescriptor[]   scratch_row;
1:eac0369: 
1:eac0369:     /**
1:3f3b5e6:      * A complete array of format id's and collation_ids for this conglomerate.
1:eac0369:      **/
1:9a3cbed:     private final int[] format_ids;
1:9a3cbed:     private final int[] collation_ids;
1:9a3cbed:     /**
1:9a3cbed:      * Tells if there is at least one type in the conglomerate whose collation
1:9a3cbed:      * isn't StringDataValue.COLLATION_TYPE_UCS_BASIC. This can be determined
1:9a3cbed:      * by looking at the collation ids, but now the caller is passing in the
1:9a3cbed:      * value to avoid having to look at all the collation ids multiple times.
1:9a3cbed:      */
1:9a3cbed:     private final boolean hasCollatedTypes;
1:3f3b5e6: 
1:3f3b5e6: 
1:eac0369:     /**
1:04db160:      * Scratch space used by <code>ConglomerateController</code>.
1:04db160:      * 
1:04db160:      * @see org.apache.derby.iapi.store.access.ConglomerateController#delete
1:04db160:      * @see org.apache.derby.iapi.store.access.ConglomerateController#replace
1:04db160:      */
1:3f3b5e6:     private RowPosition             scratch_row_position;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:04db160: 
1:04db160:     /**
1:04db160:      * Creates a new scratch space.
1:04db160:      *
1:04db160:      * @param format_ids format identifiers for columns in the row
1:04db160:      * @param collation_ids collation identifiers for the columns in the row
1:9a3cbed:      * @param hasCollatedTypes whether there is at least one collated type with
1:9a3cbed:      *      a collation other than UCS BASIC in the conglomerate
1:04db160:      */
1:eac0369:     public OpenConglomerateScratchSpace(
1:722a889:     int[]   format_ids,
1:9a3cbed:     int[]   collation_ids,
1:9a3cbed:     boolean hasCollatedTypes)
1:eac0369:     {
1:722a889:         this.format_ids     = format_ids;
1:722a889:         this.collation_ids  = collation_ids;
1:9a3cbed:         this.hasCollatedTypes = hasCollatedTypes;
1:9a3cbed:         if (SanityManager.DEBUG) {
1:9a3cbed:             SanityManager.ASSERT(GenericConglomerate.hasCollatedColumns(
1:9a3cbed:                         collation_ids) == hasCollatedTypes);
1:9a3cbed:         }
2:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return an empty template (possibly partial) row to be given back to 
1:eac0369:      * a client.
1:3f3b5e6:      * <p>
1:eac0369:      * The main use of this is for fetchSet() and fetchNextGroup() which
1:eac0369:      * allocate rows and then give them back entirely to the caller.
1:eac0369:      * <p>
1:3f3b5e6:      *
1:eac0369: 	 * @return The row to use.
2:eac0369:      *
1:3f3b5e6: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:722a889:     public DataValueDescriptor[] get_row_for_export(Transaction rawtran)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         // Create a partial row class template template from the initial scan
1:eac0369:         // parameters.
1:6404cde:         if (row_for_export_template == null)
1:eac0369:         {
1:6404cde:             row_for_export_template = 
1:722a889:                 RowUtil.newTemplate(
1:722a889:                     rawtran.getDataValueFactory(), 
1:04db160:                     null, format_ids, collation_ids);
1:eac0369:         }
1:3f3b5e6: 
1:eac0369:         // Allocate a new row based on the class template.
1:6404cde:         return(RowUtil.newRowFromTemplate(row_for_export_template));
1:eac0369:     }
1:eac0369: 
1:3f3b5e6:     /**
1:eac0369:      * Return an empty template (possibly partial) row to be used and 
1:eac0369:      * reused internally for processing.
1:eac0369:      * <p>
1:eac0369:      * The main use of this is for qualifying rows where a row has not been
1:eac0369:      * provided by the client.  This routine cache's a single row for reuse
1:eac0369:      * by the caller, if the caller needs 2 concurrent scratch rows, some other
1:eac0369:      * mechanism must be used.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The row to use.
1:eac0369:      *
2:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:722a889:     public DataValueDescriptor[] get_scratch_row(Transaction    rawtran)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         // Create a partial row class template template from the initial scan
1:eac0369:         // parameters.
1:eac0369:         if (scratch_row == null)
1:eac0369:         {
1:722a889:             scratch_row = get_row_for_export(rawtran);
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Allocate a new row based on the class template.
1:eac0369:         return(scratch_row);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return a complete empty row.  
1:eac0369:      * <p>
1:eac0369:      * The main use of this is for searching a tree where a complete copy of
1:eac0369:      * the row is needed for searching.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The template to use.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:722a889:     public DataValueDescriptor[] get_template(Transaction rawtran)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         // Create a partial row class template from the initial scan parameters.
1:eac0369:         if (scratch_template == null)
1:eac0369:         {
1:6404cde:             scratch_template = 
1:722a889:                 TemplateRow.newRow(
1:722a889:                     rawtran, 
1:722a889:                     (FormatableBitSet) null, format_ids, collation_ids);
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(scratch_template);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:3f3b5e6:      * Return a scratch RowPosition.
1:eac0369:      * <p>
1:3f3b5e6:      * Used by GenericConglomerateController.delete() and 
1:3f3b5e6:      * GenericConglomerateController.replace().  It may be reused so callers
1:3f3b5e6:      * must insure that object no longer needed before next possible call
1:3f3b5e6:      * to get it again.
1:3f3b5e6:      * <p>
1:3f3b5e6:      *
1:3f3b5e6: 	 * @return a scratch RowPosition.
1:3f3b5e6:      **/
1:3f3b5e6:     public RowPosition get_scratch_row_position()
1:3f3b5e6:     {
1:3f3b5e6:         if (scratch_row_position == null)
1:3f3b5e6:         {
1:3f3b5e6:             scratch_row_position = new RowPosition();
1:3f3b5e6:         }
1:3f3b5e6: 
1:3f3b5e6:         return(scratch_row_position);
1:3f3b5e6:     }
1:9a3cbed:     
1:9a3cbed:     /**
1:9a3cbed:      * Tells if there is at least one column with a collation different
1:9a3cbed:      * than UCS BASIC in the conglomerate.
1:9a3cbed:      *
1:9a3cbed:      * @return {@code true} if there is at least one column with a collation
1:9a3cbed:      *      different than UCS BASIC.
1:9a3cbed:      */
1:9a3cbed:     public boolean hasCollatedTypes() {
1:9a3cbed:         return hasCollatedTypes;
1:9a3cbed:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9a3cbed
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final int[] format_ids;
1:     private final int[] collation_ids;
1:     /**
1:      * Tells if there is at least one type in the conglomerate whose collation
1:      * isn't StringDataValue.COLLATION_TYPE_UCS_BASIC. This can be determined
1:      * by looking at the collation ids, but now the caller is passing in the
1:      * value to avoid having to look at all the collation ids multiple times.
1:      */
1:     private final boolean hasCollatedTypes;
/////////////////////////////////////////////////////////////////////////
1:      * @param hasCollatedTypes whether there is at least one collated type with
1:      *      a collation other than UCS BASIC in the conglomerate
1:     int[]   collation_ids,
1:     boolean hasCollatedTypes)
1:         this.hasCollatedTypes = hasCollatedTypes;
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(GenericConglomerate.hasCollatedColumns(
1:                         collation_ids) == hasCollatedTypes);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Tells if there is at least one column with a collation different
1:      * than UCS BASIC in the conglomerate.
1:      *
1:      * @return {@code true} if there is at least one column with a collation
1:      *      different than UCS BASIC.
1:      */
1:     public boolean hasCollatedTypes() {
1:         return hasCollatedTypes;
1:     }
commit:04db160
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Scratch space used by <code>ConglomerateController</code>.
1:      * 
1:      * @see org.apache.derby.iapi.store.access.ConglomerateController#delete
1:      * @see org.apache.derby.iapi.store.access.ConglomerateController#replace
1:      */
1: 
1:     /**
1:      * Creates a new scratch space.
1:      *
1:      * @param format_ids format identifiers for columns in the row
1:      * @param collation_ids collation identifiers for the columns in the row
1:      */
/////////////////////////////////////////////////////////////////////////
1:                     null, format_ids, collation_ids);
/////////////////////////////////////////////////////////////////////////
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3f3b5e6
/////////////////////////////////////////////////////////////////////////
1:     private DataValueDescriptor[]   scratch_template;
1:     private DataValueDescriptor[]   scratch_row;
1:      * A complete array of format id's and collation_ids for this conglomerate.
0:     private int[]                   format_ids;
0:     private int[]                   collation_ids;
1: 
1: 
0:     /* scratch space used by ConglomerateController.delete and replace */
1:     private RowPosition             scratch_row_position;
/////////////////////////////////////////////////////////////////////////
1:      * Return a scratch RowPosition.
1:      * <p>
1:      * Used by GenericConglomerateController.delete() and 
1:      * GenericConglomerateController.replace().  It may be reused so callers
1:      * must insure that object no longer needed before next possible call
1:      * to get it again.
1:      * <p>
1:      *
1: 	 * @return a scratch RowPosition.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public RowPosition get_scratch_row_position()
1:     {
1:         if (scratch_row_position == null)
1:         {
1:             scratch_row_position = new RowPosition();
1:         }
1: 
1:         return(scratch_row_position);
1:     }
1: 
1:     /**
commit:722a889
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private int[]    collation_ids;
1:     int[]   format_ids,
0:     int[]   collation_ids)
1:         this.format_ids     = format_ids;
1:         this.collation_ids  = collation_ids;
/////////////////////////////////////////////////////////////////////////
1:     public DataValueDescriptor[] get_row_for_export(Transaction rawtran)
/////////////////////////////////////////////////////////////////////////
1:                 RowUtil.newTemplate(
1:                     rawtran.getDataValueFactory(), 
0:                     row_for_export_column_list, format_ids, collation_ids);
/////////////////////////////////////////////////////////////////////////
1:     public DataValueDescriptor[] get_scratch_row(Transaction    rawtran)
1:             scratch_row = get_row_for_export(rawtran);
/////////////////////////////////////////////////////////////////////////
1:     public DataValueDescriptor[] get_template(Transaction rawtran)
1:                 TemplateRow.newRow(
1:                     rawtran, 
1:                     (FormatableBitSet) null, format_ids, collation_ids);
commit:6404cde
/////////////////////////////////////////////////////////////////////////
0:     private FormatableBitSet        row_for_export_column_list;
1:     private DataValueDescriptor[]   row_for_export_template;
1:      * conglomerate.  This is a full template, independent of the 
1:      * FormatableBitSet used for access.
1:      * conglomerate.  This is a row which matches the FormatableBitSet of rows
1:      * being returned.
/////////////////////////////////////////////////////////////////////////
1:         if (row_for_export_template == null)
1:             row_for_export_template = 
0:                 RowUtil.newTemplate(row_for_export_column_list, format_ids);
1:         return(RowUtil.newRowFromTemplate(row_for_export_template));
/////////////////////////////////////////////////////////////////////////
1:             scratch_template = 
0:                 TemplateRow.newRow((FormatableBitSet) null, format_ids);
/////////////////////////////////////////////////////////////////////////
0:         row_for_export_template       = null;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.RowUtil;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.loader.InstanceGetter;
1: 
1: /**
1: 
1: A utility class to store and use temporary scratch space associated with
1: a conglomerate.
1: 
1: **/
1: 
1: public class OpenConglomerateScratchSpace 
1:     implements DynamicCompiledOpenConglomInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * A template of info about the classes in the returned row.
1:      * <p>
1:      * This template is allocated on demand, and is used to efficiently
1:      * create new rows for export from this class.  This variable is for
1:      * use by get_row_for_export().
1:      **/
0:     private FormatableBitSet     row_for_export_column_list;
0:     private InstanceGetter[] row_for_export_class_template;
1: 
1:     /**
1:      * A Scratch template used for searching and qualifying rows in the 
0:      * conglomerate.  This is a full template, independent of the FormatableBitSet
0:      * used for access.
1:      **/
0:     private DataValueDescriptor[] scratch_template;
1: 
1:     /**
1:      * A Scratch row used for qualifying rows in the 
0:      * conglomerate.  This is a row which matches the FormatableBitSet of rows being
0:      * returned.
1:      **/
0:     private DataValueDescriptor[] scratch_row;
1: 
1:     /**
0:      * A complete array of format id's for this conglomerate.
1:      **/
0:     private int[]    format_ids;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     public OpenConglomerateScratchSpace(
0:     int[]  format_ids)
1:     {
0:         this.format_ids = format_ids;
1:     }
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Return an empty template (possibly partial) row to be given back to 
1:      * a client.
1:      * <p>
1:      * The main use of this is for fetchSet() and fetchNextGroup() which
1:      * allocate rows and then give them back entirely to the caller.
1:      * <p>
1:      *
1: 	 * @return The row to use.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public DataValueDescriptor[] get_row_for_export()
1:         throws StandardException
1:     {
1:         // Create a partial row class template template from the initial scan
1:         // parameters.
0:         if (row_for_export_class_template == null)
1:         {
0:             row_for_export_class_template = 
0:                 RowUtil.newClassInfoTemplate(
0:                     row_for_export_column_list, format_ids);
1:         }
1: 
1:         // Allocate a new row based on the class template.
0:         return(
0:             RowUtil.newRowFromClassInfoTemplate(row_for_export_class_template));
1:     }
1: 
1:     /**
1:      * Return an empty template (possibly partial) row to be used and 
1:      * reused internally for processing.
1:      * <p>
1:      * The main use of this is for qualifying rows where a row has not been
1:      * provided by the client.  This routine cache's a single row for reuse
1:      * by the caller, if the caller needs 2 concurrent scratch rows, some other
1:      * mechanism must be used.
1:      * <p>
1:      *
1: 	 * @return The row to use.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public DataValueDescriptor[] get_scratch_row()
1:         throws StandardException
1:     {
1:         // Create a partial row class template template from the initial scan
1:         // parameters.
1:         if (scratch_row == null)
1:         {
0:             scratch_row = get_row_for_export();
1:         }
1: 
1:         // Allocate a new row based on the class template.
1:         return(scratch_row);
1:     }
1: 
1:     /**
1:      * Return a complete empty row.  
1:      * <p>
1:      * The main use of this is for searching a tree where a complete copy of
1:      * the row is needed for searching.
1:      * <p>
1:      *
1: 	 * @return The template to use.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public DataValueDescriptor[] get_template()
1:         throws StandardException
1:     {
1:         // Create a partial row class template from the initial scan parameters.
1:         if (scratch_template == null)
1:         {
0:             scratch_template = TemplateRow.newRow((FormatableBitSet) null, format_ids);
1:         }
1: 
1:         return(scratch_template);
1:     }
1: 
1:     /**
0:      * Initialize scratch space for reuse by possibly different template.
1:      * <p>
0:      * Some data is only valid per statement.
1:      **/
0:     public void init(
0:     FormatableBitSet export_column_list)
1:     {
0:         row_for_export_class_template = null;
0:         row_for_export_column_list    = null;
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.loader.InstanceGetter;
0: 
0: /**
0: 
0: A utility class to store and use temporary scratch space associated with
0: a conglomerate.
0: 
0: **/
0: 
0: public class OpenConglomerateScratchSpace 
0:     implements DynamicCompiledOpenConglomInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * A template of info about the classes in the returned row.
0:      * <p>
0:      * This template is allocated on demand, and is used to efficiently
0:      * create new rows for export from this class.  This variable is for
0:      * use by get_row_for_export().
0:      **/
0:     private FormatableBitSet     row_for_export_column_list;
0:     private InstanceGetter[] row_for_export_class_template;
0: 
0:     /**
0:      * A Scratch template used for searching and qualifying rows in the 
0:      * conglomerate.  This is a full template, independent of the FormatableBitSet
0:      * used for access.
0:      **/
0:     private DataValueDescriptor[] scratch_template;
0: 
0:     /**
0:      * A Scratch row used for qualifying rows in the 
0:      * conglomerate.  This is a row which matches the FormatableBitSet of rows being
0:      * returned.
0:      **/
0:     private DataValueDescriptor[] scratch_row;
0: 
0:     /**
0:      * A complete array of format id's for this conglomerate.
0:      **/
0:     private int[]    format_ids;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     public OpenConglomerateScratchSpace(
0:     int[]  format_ids)
0:     {
0:         this.format_ids = format_ids;
0:     }
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Return an empty template (possibly partial) row to be given back to 
0:      * a client.
0:      * <p>
0:      * The main use of this is for fetchSet() and fetchNextGroup() which
0:      * allocate rows and then give them back entirely to the caller.
0:      * <p>
0:      *
0: 	 * @return The row to use.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public DataValueDescriptor[] get_row_for_export()
0:         throws StandardException
0:     {
0:         // Create a partial row class template template from the initial scan
0:         // parameters.
0:         if (row_for_export_class_template == null)
0:         {
0:             row_for_export_class_template = 
0:                 RowUtil.newClassInfoTemplate(
0:                     row_for_export_column_list, format_ids);
0:         }
0: 
0:         // Allocate a new row based on the class template.
0:         return(
0:             RowUtil.newRowFromClassInfoTemplate(row_for_export_class_template));
0:     }
0: 
0:     /**
0:      * Return an empty template (possibly partial) row to be used and 
0:      * reused internally for processing.
0:      * <p>
0:      * The main use of this is for qualifying rows where a row has not been
0:      * provided by the client.  This routine cache's a single row for reuse
0:      * by the caller, if the caller needs 2 concurrent scratch rows, some other
0:      * mechanism must be used.
0:      * <p>
0:      *
0: 	 * @return The row to use.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public DataValueDescriptor[] get_scratch_row()
0:         throws StandardException
0:     {
0:         // Create a partial row class template template from the initial scan
0:         // parameters.
0:         if (scratch_row == null)
0:         {
0:             scratch_row = get_row_for_export();
0:         }
0: 
0:         // Allocate a new row based on the class template.
0:         return(scratch_row);
0:     }
0: 
0:     /**
0:      * Return a complete empty row.  
0:      * <p>
0:      * The main use of this is for searching a tree where a complete copy of
0:      * the row is needed for searching.
0:      * <p>
0:      *
0: 	 * @return The template to use.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public DataValueDescriptor[] get_template()
0:         throws StandardException
0:     {
0:         // Create a partial row class template from the initial scan parameters.
0:         if (scratch_template == null)
0:         {
0:             scratch_template = TemplateRow.newRow((FormatableBitSet) null, format_ids);
0:         }
0: 
0:         return(scratch_template);
0:     }
0: 
0:     /**
0:      * Initialize scratch space for reuse by possibly different template.
0:      * <p>
0:      * Some data is only valid per statement.
0:      **/
0:     public void init(
0:     FormatableBitSet export_column_list)
0:     {
0:         row_for_export_class_template = null;
0:         row_for_export_column_list    = null;
0:     }
0: }
============================================================================