1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.RowSource
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   A RowSource is the mechanism for iterating over a set of rows.  The RowSource
1:eac0369:   is the interface through which access recieved a set of rows from the client
1:eac0369:   for the purpose of inserting into a single conglomerate.
1:eac0369: 
1:eac0369:   <p>
1:eac0369:   A RowSource can come from many sources - from rows that are from fast path
1:eac0369:   import, to rows coming out of a sort for index creation.
1:eac0369: 
1:eac0369: */ 
1:76addbc: public interface RowSource {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the next row as an array of column objects. The column objects can
1:eac0369: 		be a JBMS Storable or any
1:eac0369: 		Serializable/Externalizable/Formattable/Streaming type.
1:eac0369: 		<BR>
1:eac0369: 		A return of null indicates that the complete set of rows has been read.
1:eac0369: 
1:eac0369: 		<p>
1:eac0369: 		A null column can be specified by leaving the object null, or indicated
1:eac0369: 		by returning a non-null getValidColumns.  On streaming columns, it can
1:eac0369: 		be indicated by returning a non-null get FieldStates.
1:eac0369: 
1:eac0369: 		<p>
1:eac0369:         If RowSource.needToClone() is true then the returned row 
1:eac0369:         (the DataValueDescriptor[]) is guaranteed not to be modified by drainer
1:eac0369:         of the RowSource (except that the input stream will be read, of course) 
1:eac0369:         and drainer will keep no reference to it before making the subsequent 
1:eac0369:         nextRow call.  So it is safe to return the same DataValueDescriptor[] 
1:eac0369:         in subsequent nextRow calls if that is desirable for performance 
1:eac0369:         reasons.  
1:eac0369: 
1:eac0369: 		<p>
1:eac0369:         If RowSource.needToClone() is false then the returned row (the 
1:eac0369:         DataValueDescriptor[]) may be be modified by drainer of the RowSource, 
1:eac0369:         and the drainer may keep a reference to it after making the subsequent 
1:eac0369:         nextRow call.  In this case the client should severe all references to 
1:eac0369:         the row after returning it from getNextRowFromRowSource().
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor[] getNextRowFromRowSource() 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:         Does the caller of getNextRowFromRowSource() need to clone the row
1:eac0369:         in order to keep a reference to the row past the 
1:eac0369:         getNextRowFromRowSource() call which returned the row.  This call
1:eac0369:         must always return the same for all rows in a RowSource (ie. the
1:eac0369:         caller will call this once per scan from a RowSource and assume the
1:eac0369:         behavior is true for all rows in the RowSource).
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	public boolean needsToClone();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  getValidColumns describes the DataValueDescriptor[] returned by all calls
1:eac0369:       to the getNextRowFromRowSource() call. 
1:eac0369: 
1:eac0369: 	  If getValidColumns returns null, the number of columns is given by the
1:eac0369: 	  DataValueDescriptor.length where DataValueDescriptor[] is returned by the
1:eac0369:       preceeding getNextRowFromRowSource() call.  Column N maps to 
1:eac0369:       DataValueDescriptor[N], where column numbers start at zero.
1:eac0369: 
1:eac0369: 	  If getValidColumns return a non null validColumns FormatableBitSet the number of
1:eac0369: 	  columns is given by the number of bits set in validColumns.  Column N is
1:eac0369: 	  not in the partial row if validColumns.get(N) returns false.  Column N is
1:eac0369: 	  in the partial row if validColumns.get(N) returns true.  If column N is
1:eac0369: 	  in the partial row then it maps to DataValueDescriptor[M] where M is the 
1:dbed020:       count of calls to validColumns.get(i) that return true where i &lt; N.  If
1:eac0369: 	  DataValueDescriptor.length is greater than the number of columns 
1:eac0369:       indicated by validColumns the extra entries are ignored.  
1:eac0369: 	*/
1:eac0369: 	FormatableBitSet getValidColumns(); 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		closeRowSource tells the RowSource that it will no longer need to
1:eac0369: 		return any rows and it can release any resource it may have.
1:eac0369: 		Subsequent call to any method on the RowSource will result in undefined
1:eac0369: 		behavior.  A closed rowSource can be closed again.
1:eac0369: 	*/
1:eac0369: 	void closeRowSource();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:       count of calls to validColumns.get(i) that return true where i &lt; N.  If
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.RowSource
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface RowSource {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 
1:   A RowSource is the mechanism for iterating over a set of rows.  The RowSource
1:   is the interface through which access recieved a set of rows from the client
1:   for the purpose of inserting into a single conglomerate.
1: 
1:   <p>
1:   A RowSource can come from many sources - from rows that are from fast path
1:   import, to rows coming out of a sort for index creation.
1: 
1: */ 
0: public interface RowSource { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/**
1: 		Get the next row as an array of column objects. The column objects can
1: 		be a JBMS Storable or any
1: 		Serializable/Externalizable/Formattable/Streaming type.
1: 		<BR>
1: 		A return of null indicates that the complete set of rows has been read.
1: 
1: 		<p>
1: 		A null column can be specified by leaving the object null, or indicated
1: 		by returning a non-null getValidColumns.  On streaming columns, it can
1: 		be indicated by returning a non-null get FieldStates.
1: 
1: 		<p>
1:         If RowSource.needToClone() is true then the returned row 
1:         (the DataValueDescriptor[]) is guaranteed not to be modified by drainer
1:         of the RowSource (except that the input stream will be read, of course) 
1:         and drainer will keep no reference to it before making the subsequent 
1:         nextRow call.  So it is safe to return the same DataValueDescriptor[] 
1:         in subsequent nextRow calls if that is desirable for performance 
1:         reasons.  
1: 
1: 		<p>
1:         If RowSource.needToClone() is false then the returned row (the 
1:         DataValueDescriptor[]) may be be modified by drainer of the RowSource, 
1:         and the drainer may keep a reference to it after making the subsequent 
1:         nextRow call.  In this case the client should severe all references to 
1:         the row after returning it from getNextRowFromRowSource().
1: 
0: 		@exception StandardException Cloudscape Standard Error Policy
1: 	 */
1: 	public DataValueDescriptor[] getNextRowFromRowSource() 
1:         throws StandardException;
1: 
1: 	/**
1:         Does the caller of getNextRowFromRowSource() need to clone the row
1:         in order to keep a reference to the row past the 
1:         getNextRowFromRowSource() call which returned the row.  This call
1:         must always return the same for all rows in a RowSource (ie. the
1:         caller will call this once per scan from a RowSource and assume the
1:         behavior is true for all rows in the RowSource).
1: 
1: 	 */
1: 	public boolean needsToClone();
1: 
1: 	/**
1: 	  getValidColumns describes the DataValueDescriptor[] returned by all calls
1:       to the getNextRowFromRowSource() call. 
1: 
1: 	  If getValidColumns returns null, the number of columns is given by the
1: 	  DataValueDescriptor.length where DataValueDescriptor[] is returned by the
1:       preceeding getNextRowFromRowSource() call.  Column N maps to 
1:       DataValueDescriptor[N], where column numbers start at zero.
1: 
1: 	  If getValidColumns return a non null validColumns FormatableBitSet the number of
1: 	  columns is given by the number of bits set in validColumns.  Column N is
1: 	  not in the partial row if validColumns.get(N) returns false.  Column N is
1: 	  in the partial row if validColumns.get(N) returns true.  If column N is
1: 	  in the partial row then it maps to DataValueDescriptor[M] where M is the 
0:       count of calls to validColumns.get(i) that return true where i < N.  If
1: 	  DataValueDescriptor.length is greater than the number of columns 
1:       indicated by validColumns the extra entries are ignored.  
1: 	*/
1: 	FormatableBitSet getValidColumns(); 
1: 
1: 	/**
1: 		closeRowSource tells the RowSource that it will no longer need to
1: 		return any rows and it can release any resource it may have.
1: 		Subsequent call to any method on the RowSource will result in undefined
1: 		behavior.  A closed rowSource can be closed again.
1: 	*/
1: 	void closeRowSource();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 
0:   A RowSource is the mechanism for iterating over a set of rows.  The RowSource
0:   is the interface through which access recieved a set of rows from the client
0:   for the purpose of inserting into a single conglomerate.
0: 
0:   <p>
0:   A RowSource can come from many sources - from rows that are from fast path
0:   import, to rows coming out of a sort for index creation.
0: 
0: */ 
0: public interface RowSource { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Get the next row as an array of column objects. The column objects can
0: 		be a JBMS Storable or any
0: 		Serializable/Externalizable/Formattable/Streaming type.
0: 		<BR>
0: 		A return of null indicates that the complete set of rows has been read.
0: 
0: 		<p>
0: 		A null column can be specified by leaving the object null, or indicated
0: 		by returning a non-null getValidColumns.  On streaming columns, it can
0: 		be indicated by returning a non-null get FieldStates.
0: 
0: 		<p>
0:         If RowSource.needToClone() is true then the returned row 
0:         (the DataValueDescriptor[]) is guaranteed not to be modified by drainer
0:         of the RowSource (except that the input stream will be read, of course) 
0:         and drainer will keep no reference to it before making the subsequent 
0:         nextRow call.  So it is safe to return the same DataValueDescriptor[] 
0:         in subsequent nextRow calls if that is desirable for performance 
0:         reasons.  
0: 
0: 		<p>
0:         If RowSource.needToClone() is false then the returned row (the 
0:         DataValueDescriptor[]) may be be modified by drainer of the RowSource, 
0:         and the drainer may keep a reference to it after making the subsequent 
0:         nextRow call.  In this case the client should severe all references to 
0:         the row after returning it from getNextRowFromRowSource().
0: 
0: 		@exception StandardException Cloudscape Standard Error Policy
0: 	 */
0: 	public DataValueDescriptor[] getNextRowFromRowSource() 
0:         throws StandardException;
0: 
0: 	/**
0:         Does the caller of getNextRowFromRowSource() need to clone the row
0:         in order to keep a reference to the row past the 
0:         getNextRowFromRowSource() call which returned the row.  This call
0:         must always return the same for all rows in a RowSource (ie. the
0:         caller will call this once per scan from a RowSource and assume the
0:         behavior is true for all rows in the RowSource).
0: 
0: 	 */
0: 	public boolean needsToClone();
0: 
0: 	/**
0: 	  getValidColumns describes the DataValueDescriptor[] returned by all calls
0:       to the getNextRowFromRowSource() call. 
0: 
0: 	  If getValidColumns returns null, the number of columns is given by the
0: 	  DataValueDescriptor.length where DataValueDescriptor[] is returned by the
0:       preceeding getNextRowFromRowSource() call.  Column N maps to 
0:       DataValueDescriptor[N], where column numbers start at zero.
0: 
0: 	  If getValidColumns return a non null validColumns FormatableBitSet the number of
0: 	  columns is given by the number of bits set in validColumns.  Column N is
0: 	  not in the partial row if validColumns.get(N) returns false.  Column N is
0: 	  in the partial row if validColumns.get(N) returns true.  If column N is
0: 	  in the partial row then it maps to DataValueDescriptor[M] where M is the 
0:       count of calls to validColumns.get(i) that return true where i < N.  If
0: 	  DataValueDescriptor.length is greater than the number of columns 
0:       indicated by validColumns the extra entries are ignored.  
0: 	*/
0: 	FormatableBitSet getValidColumns(); 
0: 
0: 	/**
0: 		closeRowSource tells the RowSource that it will no longer need to
0: 		return any rows and it can release any resource it may have.
0: 		Subsequent call to any method on the RowSource will result in undefined
0: 		behavior.  A closed rowSource can be closed again.
0: 	*/
0: 	void closeRowSource();
0: }
============================================================================