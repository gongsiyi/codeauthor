1:b83e61a: /*
1:b83e61a:  *
1:260993b:  * Derby - Class org.apache.derbyTesting.junit.DropDatabaseSetup
1:b83e61a:  *
1:b83e61a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b83e61a:  * contributor license agreements.  See the NOTICE file distributed with
1:b83e61a:  * this work for additional information regarding copyright ownership.
1:b83e61a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b83e61a:  * (the "License"); you may not use this file except in compliance with
1:b83e61a:  * the License.  You may obtain a copy of the License at
1:b83e61a:  *
1:b83e61a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b83e61a:  *
1:b83e61a:  * Unless required by applicable law or agreed to in writing, 
1:b83e61a:  * software distributed under the License is distributed on an 
1:b83e61a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:b83e61a:  * either express or implied. See the License for the specific 
1:b83e61a:  * language governing permissions and limitations under the License.
1:b83e61a:  */
1:b83e61a: package org.apache.derbyTesting.junit;
1:af7f5e2: 
1:b83e61a: import java.io.File;
1:b83e61a: import java.sql.SQLException;
1:26b12fa: import javax.sql.DataSource;
1:b83e61a: import junit.framework.Test;
1:2510115: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:26b12fa: 
1:b83e61a: /**
1:26b12fa:  * Shutdown and drop the database identified by the logical
1:26b12fa:  * name passed in when creating this decorator.
1:b83e61a:  *
1:b83e61a:  */
1:23c0fed: class DropDatabaseSetup extends BaseTestSetup {
1:155b6a1: 
1:689206c:     private final String logicalDBName;
1:689206c:     private final boolean shutdownBeforeDrop;
1:689206c: 
1:26b12fa:     DropDatabaseSetup(Test test, String logicalDBName) {
1:689206c:         this(test, logicalDBName, true);
1:689206c:     }
1:689206c: 
1:689206c:     DropDatabaseSetup(Test test, String logicalDBName, boolean shutdown) {
1:b83e61a:         super(test);
1:26b12fa:         this.logicalDBName = logicalDBName;
1:689206c:         this.shutdownBeforeDrop = shutdown;
1:689206c:     }
1:4c5c16b:     
1:4c5c16b:     /**
1:26b12fa:      * Shutdown the database and then remove all of its files.
1:b83e61a:      */
1:689206c:     @Override
1:b1c5200:     protected void tearDown() throws Exception {
1:689206c:         if (shutdownBeforeDrop) {
1:689206c:             shutdownDatabase();
1:689206c:         }
1:689206c: 
1:689206c:         removeDatabase();
1:689206c:     }
1:689206c: 
1:689206c:     private void shutdownDatabase() throws SQLException {
1:689206c: 
1:26b12fa:         TestConfiguration config = TestConfiguration.getCurrent();
1:26b12fa:         
1:b1c5200:         // Ensure the database is booted
1:b1c5200:         // since that is what shutdownDatabase() requires.
1:e6cce75:         boolean shutdown;
1:e6cce75:         try {
1:e6cce75:             config.openConnection(logicalDBName).close();
1:e6cce75:             shutdown = true;
1:e6cce75:         } catch (SQLException e) {
1:5107349:             String  sqlState = e.getSQLState();
1:e6cce75:             // If the database cannot be booted due
1:e6cce75:             // to some restrictions such as authentication
1:e6cce75:             // or encrypted (ie here we don't know the 
1:e6cce75:             // correct authentication tokens, then it's
1:e6cce75:             // ok since we just want it shutdown anyway!
1:5107349:             if ( "XJ040".equals( sqlState ) || "08004".equals( sqlState ) || "4251I".equals( sqlState ) )
1:e6cce75:             {
1:e6cce75:                 shutdown = false;
1:e6cce75:             }
1:e6cce75:             else
1:e6cce75:             {
1:e6cce75:                 throw e;
1:e6cce75:             }
1:e6cce75:         }
1:e6cce75:         if (shutdown)
1:e6cce75:         {
1:e6cce75:             DataSource ds = JDBCDataSource.getDataSourceLogical(logicalDBName);
1:e6cce75:             JDBCDataSource.shutdownDatabase(ds);
1:af7f5e2:         }
1:e6cce75:     }
1:af7f5e2: 
1:af7f5e2:     void removeDatabase()
1:af7f5e2:     {
1:af7f5e2:         TestConfiguration config = TestConfiguration.getCurrent();
1:af7f5e2:         String dbName = config.getPhysicalDatabaseName(logicalDBName);
1:d488449:         dbName = dbName.replace('/', File.separatorChar);
1:d488449:         String dsh = BaseTestCase.getSystemProperty("derby.system.home");
1:af7f5e2:         if (dsh == null) {
1:d488449:             fail("not implemented");
1:af7f5e2:         } else {
1:d488449:             dbName = dsh + File.separator + dbName;
1:af7f5e2:         }
1:273ce5e:         removeDirectory(dbName);
1:b79d9d8:         //DERBY-5995 (Add a test case to check the 3 readme files get created 
1:b79d9d8:         // even when log directory has been changed with jdbc url attribute 
1:b79d9d8:         // logDevice )
1:b79d9d8:         String logDevice = config.getConnectionAttributes().getProperty("logDevice");
1:b79d9d8:         if (logDevice != null) {
1:b79d9d8:             removeDirectory(logDevice);
1:b79d9d8:         }
1:af7f5e2:     }
1:af7f5e2: 
1:af7f5e2: 
1:273ce5e:     static void removeDirectory(String path)
1:273ce5e:     {
1:273ce5e:         final File dir = new File(path);
1:26ed4f9:         removeDirectory(dir);
1:26ed4f9:     }
1:26ed4f9:     
1:26ed4f9:     static void removeDirectory(final File dir) {
1:155b6a1:         // Check if anything to do!
1:155b6a1:         // Database may not have been created.
1:2510115:         if (!PrivilegedFileOpsForTests.exists(dir)) {
1:155b6a1:             return;
1:2510115:         }
1:ba553fa: 
1:a0f4b68:         BaseTestCase.assertDirectoryDeleted(dir);
1:273ce5e:     }
1:26b12fa: 
1:b83e61a:     /**
1:4c5c16b:      * Remove all the files in the list
1:4c5c16b:      * @param list the list of files that will be deleted
1:4c5c16b:      **/
1:4c5c16b:     static void removeFiles(String[] list) {
1:4c5c16b:         for (int i = 0; i < list.length; i++) {
1:4c5c16b:              try {
1:4c5c16b:                  File dfile = new File(list[i].toString());            
1:4c5c16b:                  assertTrue(list[i].toString(), dfile.delete());
1:4c5c16b:              } catch (IllegalArgumentException e) {
1:4c5c16b:                  fail("open file error");
1:4c5c16b:              }
1:4c5c16b:         }
1:4c5c16b:     }
1:273ce5e: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:689206c
/////////////////////////////////////////////////////////////////////////
1:     private final String logicalDBName;
1:     private final boolean shutdownBeforeDrop;
1: 
1:         this(test, logicalDBName, true);
1:     }
1: 
1:     DropDatabaseSetup(Test test, String logicalDBName, boolean shutdown) {
1:         this.shutdownBeforeDrop = shutdown;
1:     }
1:     @Override
1:         if (shutdownBeforeDrop) {
1:             shutdownDatabase();
1:         }
1: 
1:         removeDatabase();
1:     }
1: 
1:     private void shutdownDatabase() throws SQLException {
1: 
/////////////////////////////////////////////////////////////////////////
commit:2510115
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
1:         if (!PrivilegedFileOpsForTests.exists(dir)) {
1:         }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:b79d9d8
/////////////////////////////////////////////////////////////////////////
1:         //DERBY-5995 (Add a test case to check the 3 readme files get created 
1:         // even when log directory has been changed with jdbc url attribute 
1:         // logDevice )
1:         String logDevice = config.getConnectionAttributes().getProperty("logDevice");
1:         if (logDevice != null) {
1:             removeDirectory(logDevice);
1:         }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:a0f4b68
/////////////////////////////////////////////////////////////////////////
1:         BaseTestCase.assertDirectoryDeleted(dir);
commit:ba553fa
/////////////////////////////////////////////////////////////////////////
0:         BaseJDBCTestCase.assertDirectoryDeleted(dir);
1: 
commit:9c86d82
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5107349
/////////////////////////////////////////////////////////////////////////
1:             String  sqlState = e.getSQLState();
1:             if ( "XJ040".equals( sqlState ) || "08004".equals( sqlState ) || "4251I".equals( sqlState ) )
commit:af7f5e2
/////////////////////////////////////////////////////////////////////////
0:     final String logicalDBName;
/////////////////////////////////////////////////////////////////////////
1: 
0:         removeDatabase();
1:     }
1: 
1:     void removeDatabase()
1:     {
1:         TestConfiguration config = TestConfiguration.getCurrent();
1:         String dbName = config.getPhysicalDatabaseName(logicalDBName);
1:         if (dsh == null) {
1:         } else {
1:         }
1:     }
1: 
1: 
author:Lily Wei
-------------------------------------------------------------------------------
commit:4c5c16b
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Remove all the files in the list
1:      * @param list the list of files that will be deleted
1:      **/
1:     static void removeFiles(String[] list) {
1:         for (int i = 0; i < list.length; i++) {
1:              try {
1:                  File dfile = new File(list[i].toString());            
1:                  assertTrue(list[i].toString(), dfile.delete());
1:              } catch (IllegalArgumentException e) {
1:                  fail("open file error");
1:              }
1:         }
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:26ed4f9
/////////////////////////////////////////////////////////////////////////
1:         removeDirectory(dir);
1:     }
1:     
1:     static void removeDirectory(final File dir) {
commit:23c0fed
/////////////////////////////////////////////////////////////////////////
1: class DropDatabaseSetup extends BaseTestSetup {
commit:e6cce75
/////////////////////////////////////////////////////////////////////////
1:         boolean shutdown;
1:         try {
1:             config.openConnection(logicalDBName).close();
1:             shutdown = true;
1:         } catch (SQLException e) {
1:             // If the database cannot be booted due
1:             // to some restrictions such as authentication
1:             // or encrypted (ie here we don't know the 
1:             // correct authentication tokens, then it's
1:             // ok since we just want it shutdown anyway!
0:             if ("XJ040".equals(e.getSQLState()))
1:             {
1:                 shutdown = false;
1:             }
1:             else
1:             {
1:                 throw e;
1:             }
1:         }
1:         if (shutdown)
1:         {
1:             DataSource ds = JDBCDataSource.getDataSourceLogical(logicalDBName);
1:             JDBCDataSource.shutdownDatabase(ds);
1:         }
commit:26b12fa
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: 
1: import javax.sql.DataSource;
1:  * Shutdown and drop the database identified by the logical
1:  * name passed in when creating this decorator.
0: class DropDatabaseSetup extends TestSetup {
0:     private final String logicalDBName;
1:     DropDatabaseSetup(Test test, String logicalDBName) {
1:         this.logicalDBName = logicalDBName;
1:      * Shutdown the database and then remove all of its files.
1:         TestConfiguration config = TestConfiguration.getCurrent();
1:         
0:         config.openConnection(logicalDBName).close();
0:         String dbName = config.getPhysicalDatabaseName(logicalDBName);
0:         DataSource ds = JDBCDataSource.getDataSource(dbName);
0:         JDBCDataSource.shutdownDatabase(ds);
1:              
/////////////////////////////////////////////////////////////////////////
0:                     assertTrue(entry.getPath(), entry.delete());
0:         assertTrue(dir.getPath(), dir.delete());
commit:155b6a1
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Check if anything to do!
1:         // Database may not have been created.
0:         if (!dir.exists())
1:             return;
commit:3df869c
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0:      * Drop the last database added to the list of used databases.
/////////////////////////////////////////////////////////////////////////
0:         ArrayList usedDbs = TestConfiguration.getCurrent().getUsedDatabaseNames();
0:         String dbName = (String) usedDbs.get(usedDbs.size()-1);
commit:273ce5e
/////////////////////////////////////////////////////////////////////////
1:         removeDirectory(dbName);
1:     } 
0:     
1:     static void removeDirectory(String path)
1:     {
1:         final File dir = new File(path);
0:                 removeDir(dir);
0:         
1:     }
0:     private static void removeDir(File dir) {
0:         String[] list = dir.list();
0:                 File entry = new File(dir, list[i]);
0:                     removeDir(entry);
0:         assertTrue(dir.delete());
commit:b1c5200
/////////////////////////////////////////////////////////////////////////
0: class DropDatabaseSetup extends BaseJDBCTestSetup {
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception {
0:         
1:         // Ensure the database is booted
1:         // since that is what shutdownDatabase() requires.
0:         getConnection().close();
commit:9528482
/////////////////////////////////////////////////////////////////////////
0:         TestConfiguration.getCurrent().shutdownDatabase();
commit:260993b
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.junit.DropDatabaseSetup
/////////////////////////////////////////////////////////////////////////
commit:d488449
/////////////////////////////////////////////////////////////////////////
0: 
0:         String dbName = TestConfiguration.getCurrent().getDatabaseName();
1:         dbName = dbName.replace('/', File.separatorChar);
0:         
1:         String dsh = BaseTestCase.getSystemProperty("derby.system.home");
0:         if (dsh == null)
1:             fail("not implemented");
0:         else
1:             dbName = dsh + File.separator + dbName;
0:         
0:         final File dbDir = new File(dbName);
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0: 
0:             public Object run() {
0:                 removeDBDir(dbDir);
0:                 return null;
0:             }
0:         });
0: 
0:     private static void removeDBDir(File dbDir) {
0: 
0:         String[] list = dbDir.list();
0: 
0:         // Some JVMs return null for File.list() when the
0:         // directory is empty.
0:         if (list != null) {
0:             for (int i = 0; i < list.length; i++) {
0:                 File entry = new File(dbDir, list[i]);
0: 
0:                 if (entry.isDirectory()) {
0:                     removeDBDir(entry);
0:                 } else {
0:                     assertTrue(entry.delete());
0:                 }
0:             }
0:         }
0: 
0:         assertTrue(dbDir.delete());
0:     }
commit:b83e61a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
0:  * Derby - Class org.apache.derbyTesting.unit.DropDatabaseSetup
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
0: 
1: import java.io.File;
0: import java.security.AccessController;
1: import java.sql.SQLException;
0: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
0: 
1: /**
0:  * Shutdown and drop the current database at tearDown time.
0:  * Work in progress - currently just shuts the database down.
1:  *
1:  */
0: class DropDatabaseSetup extends TestSetup {
0: 
0:     DropDatabaseSetup(Test test) {
1:         super(test);
0:      }
0:     
1:     /**
0:      * Drop the current database.
1:      */
0:     protected void tearDown() throws Exception {  
0:         super.tearDown();
0:         
0:         try {
0:             TestConfiguration.getCurrent().getDefaultConnection(
0:                     "shutdown=true");
0:             fail("Database failed to shut down");
0:         } catch (SQLException e) {
0:             BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
0:         }
0:     } 
0: }
============================================================================