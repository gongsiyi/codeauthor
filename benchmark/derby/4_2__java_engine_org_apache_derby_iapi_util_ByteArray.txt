1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.util.ByteArray
1:7ecc1f2: 
1:11ec54f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11ec54f:    contributor license agreements.  See the NOTICE file distributed with
1:11ec54f:    this work for additional information regarding copyright ownership.
1:11ec54f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:11ec54f:    (the "License"); you may not use this file except in compliance with
1:11ec54f:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.util;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	ByteArray wraps java byte arrays (byte[]) to allow
1:eac0369: 	byte arrays to be used as keys in hashtables.
1:eac0369: 
1:eac0369: 	This is required because the equals function on
1:eac0369: 	byte[] directly uses reference equality.
1:eac0369: 	<P>
1:eac0369: 	This class also allows the trio of array, offset and length
1:eac0369: 	to be carried around as a single object.
1:eac0369: */
1:eac0369: public final class ByteArray
1:eac0369: {
1:eac0369: 
1:eac0369: 	private byte[] array;
1:eac0369: 	private int    offset;
1:eac0369: 	private int    length;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create an instance of this class that wraps ths given array.
1:eac0369: 		This class does not make a copy of the array, it just saves
1:eac0369: 		the reference.
1:eac0369: 	*/
1:eac0369: 	public ByteArray(byte[] array, int offset, int length) {
1:eac0369: 		this.array = array;
1:eac0369: 		this.offset = offset;
1:eac0369: 		this.length = length;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ByteArray(byte[] array) {
1:eac0369: 		this(array, 0, array.length);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ByteArray()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setBytes(byte[] array)
1:eac0369: 	{
1:eac0369: 		this.array = array;
1:eac0369: 		offset = 0;
1:eac0369: 		length = array.length;
1:eac0369: 	}	
1:eac0369: 
1:eac0369: 	public void setBytes(byte[] array, int length)
1:eac0369: 	{
1:eac0369: 		this.array = array;
1:eac0369: 		this.offset = 0;
1:eac0369: 		this.length = length;
1:eac0369: 	}	
1:eac0369: 
1:eac0369: 	public void setBytes(byte[] array, int offset, int length)
1:eac0369: 	{
1:eac0369: 		this.array = array;
1:eac0369: 		this.offset = offset;
1:eac0369: 		this.length = length;
1:eac0369: 	}	
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Value equality for byte arrays.
1:eac0369: 	*/
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (other instanceof ByteArray) {
1:eac0369: 			ByteArray ob = (ByteArray) other;
1:eac0369: 			return ByteArray.equals(array, offset, length, ob.array, ob.offset, ob.length);
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	*/
1:eac0369: 	public int hashCode() {
1:eac0369: 
1:eac0369: 		byte[] larray = array;
1:eac0369: 
1:eac0369: 		int hash = length;
1:eac0369: 		for (int i = 0; i < length; i++) {
1:eac0369: 			hash += larray[i + offset];
1:eac0369: 		}
1:eac0369: 		return hash;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final byte[] getArray() {
1:eac0369: 		return array;
1:eac0369: 	}
1:eac0369: 	public final int getOffset() {
1:eac0369: 		return offset;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final int getLength() {
1:eac0369: 		return length;
1:eac0369: 	}
1:eac0369: 	public final void setLength(int newLength) {
1:eac0369: 		length = newLength;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in ) throws IOException
1:eac0369: 	{
1:eac0369: 		int len = length = in.readInt();
1:eac0369: 		offset = 0; 
1:eac0369: 		array = new byte[len];
1:eac0369: 
1:eac0369: 		in.readFully(array, 0, len);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write the byte array out w/o compression
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeInt(length);
1:eac0369: 		out.write(array, offset, length);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Compare two byte arrays using value equality.
1:eac0369: 		Two byte arrays are equal if their length is
1:eac0369: 		identical and their contents are identical.
1:eac0369: 	*/
1:eac0369: 	private static boolean equals(byte[] a, int aOffset, int aLength, byte[] b, int bOffset, int bLength) {
1:eac0369: 
1:eac0369: 		if (aLength != bLength)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < aLength; i++) {
1:eac0369: 			if (a[i + aOffset] != b[i + bOffset])
1:eac0369: 				return false;
1:eac0369: 		}
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11ec54f
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.util.ByteArray
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.util;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 	ByteArray wraps java byte arrays (byte[]) to allow
1: 	byte arrays to be used as keys in hashtables.
1: 
1: 	This is required because the equals function on
1: 	byte[] directly uses reference equality.
1: 	<P>
1: 	This class also allows the trio of array, offset and length
1: 	to be carried around as a single object.
1: */
1: public final class ByteArray
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private byte[] array;
1: 	private int    offset;
1: 	private int    length;
1: 
1: 	/**
1: 		Create an instance of this class that wraps ths given array.
1: 		This class does not make a copy of the array, it just saves
1: 		the reference.
1: 	*/
1: 	public ByteArray(byte[] array, int offset, int length) {
1: 		this.array = array;
1: 		this.offset = offset;
1: 		this.length = length;
1: 	}
1: 
1: 	public ByteArray(byte[] array) {
1: 		this(array, 0, array.length);
1: 	}
1: 
1: 	public ByteArray()
1: 	{
1: 	}
1: 
1: 	public void setBytes(byte[] array)
1: 	{
1: 		this.array = array;
1: 		offset = 0;
1: 		length = array.length;
1: 	}	
1: 
1: 	public void setBytes(byte[] array, int length)
1: 	{
1: 		this.array = array;
1: 		this.offset = 0;
1: 		this.length = length;
1: 	}	
1: 
1: 	public void setBytes(byte[] array, int offset, int length)
1: 	{
1: 		this.array = array;
1: 		this.offset = offset;
1: 		this.length = length;
1: 	}	
1: 
1: 
1: 	/**
1: 		Value equality for byte arrays.
1: 	*/
1: 	public boolean equals(Object other) {
1: 		if (other instanceof ByteArray) {
1: 			ByteArray ob = (ByteArray) other;
1: 			return ByteArray.equals(array, offset, length, ob.array, ob.offset, ob.length);
1: 		}
1: 		return false;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	*/
1: 	public int hashCode() {
1: 
1: 		byte[] larray = array;
1: 
1: 		int hash = length;
1: 		for (int i = 0; i < length; i++) {
1: 			hash += larray[i + offset];
1: 		}
1: 		return hash;
1: 	}
1: 
1: 	public final byte[] getArray() {
1: 		return array;
1: 	}
1: 	public final int getOffset() {
1: 		return offset;
1: 	}
1: 
1: 	public final int getLength() {
1: 		return length;
1: 	}
1: 	public final void setLength(int newLength) {
1: 		length = newLength;
1: 	}
1: 	
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in ) throws IOException
1: 	{
1: 		int len = length = in.readInt();
1: 		offset = 0; 
1: 		array = new byte[len];
1: 
1: 		in.readFully(array, 0, len);
1: 	}
1: 
1: 
1: 	/**
1: 	 * Write the byte array out w/o compression
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeInt(length);
1: 		out.write(array, offset, length);
1: 	}
1: 
1: 
1: 
1: 	/**
1: 		Compare two byte arrays using value equality.
1: 		Two byte arrays are equal if their length is
1: 		identical and their contents are identical.
1: 	*/
1: 	private static boolean equals(byte[] a, int aOffset, int aLength, byte[] b, int bOffset, int bLength) {
1: 
1: 		if (aLength != bLength)
1: 			return false;
1: 
1: 		for (int i = 0; i < aLength; i++) {
1: 			if (a[i + aOffset] != b[i + bOffset])
1: 				return false;
1: 		}
1: 		return true;
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.util;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 	ByteArray wraps java byte arrays (byte[]) to allow
0: 	byte arrays to be used as keys in hashtables.
0: 
0: 	This is required because the equals function on
0: 	byte[] directly uses reference equality.
0: 	<P>
0: 	This class also allows the trio of array, offset and length
0: 	to be carried around as a single object.
0: */
0: public final class ByteArray
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private byte[] array;
0: 	private int    offset;
0: 	private int    length;
0: 
0: 	/**
0: 		Create an instance of this class that wraps ths given array.
0: 		This class does not make a copy of the array, it just saves
0: 		the reference.
0: 	*/
0: 	public ByteArray(byte[] array, int offset, int length) {
0: 		this.array = array;
0: 		this.offset = offset;
0: 		this.length = length;
0: 	}
0: 
0: 	public ByteArray(byte[] array) {
0: 		this(array, 0, array.length);
0: 	}
0: 
0: 	public ByteArray()
0: 	{
0: 	}
0: 
0: 	public void setBytes(byte[] array)
0: 	{
0: 		this.array = array;
0: 		offset = 0;
0: 		length = array.length;
0: 	}	
0: 
0: 	public void setBytes(byte[] array, int length)
0: 	{
0: 		this.array = array;
0: 		this.offset = 0;
0: 		this.length = length;
0: 	}	
0: 
0: 	public void setBytes(byte[] array, int offset, int length)
0: 	{
0: 		this.array = array;
0: 		this.offset = offset;
0: 		this.length = length;
0: 	}	
0: 
0: 
0: 	/**
0: 		Value equality for byte arrays.
0: 	*/
0: 	public boolean equals(Object other) {
0: 		if (other instanceof ByteArray) {
0: 			ByteArray ob = (ByteArray) other;
0: 			return ByteArray.equals(array, offset, length, ob.array, ob.offset, ob.length);
0: 		}
0: 		return false;
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	*/
0: 	public int hashCode() {
0: 
0: 		byte[] larray = array;
0: 
0: 		int hash = length;
0: 		for (int i = 0; i < length; i++) {
0: 			hash += larray[i + offset];
0: 		}
0: 		return hash;
0: 	}
0: 
0: 	public final byte[] getArray() {
0: 		return array;
0: 	}
0: 	public final int getOffset() {
0: 		return offset;
0: 	}
0: 
0: 	public final int getLength() {
0: 		return length;
0: 	}
0: 	public final void setLength(int newLength) {
0: 		length = newLength;
0: 	}
0: 	
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in ) throws IOException
0: 	{
0: 		int len = length = in.readInt();
0: 		offset = 0; 
0: 		array = new byte[len];
0: 
0: 		in.readFully(array, 0, len);
0: 	}
0: 
0: 
0: 	/**
0: 	 * Write the byte array out w/o compression
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeInt(length);
0: 		out.write(array, offset, length);
0: 	}
0: 
0: 
0: 
0: 	/**
0: 		Compare two byte arrays using value equality.
0: 		Two byte arrays are equal if their length is
0: 		identical and their contents are identical.
0: 	*/
0: 	private static boolean equals(byte[] a, int aOffset, int aLength, byte[] b, int bOffset, int bLength) {
0: 
0: 		if (aLength != bLength)
0: 			return false;
0: 
0: 		for (int i = 0; i < aLength; i++) {
0: 			if (a[i + aOffset] != b[i + bOffset])
0: 				return false;
0: 		}
0: 		return true;
0: 	}
0: }
0: 
============================================================================