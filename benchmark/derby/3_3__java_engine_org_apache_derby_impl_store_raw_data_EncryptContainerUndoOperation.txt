1:ae71c74: /*
2:ae71c74: 
1:ae71c74:    Derby - Class org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation
1:ae71c74: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:ae71c74: 
1:ae71c74:       http://www.apache.org/licenses/LICENSE-2.0
1:ae71c74: 
1:ae71c74:    Unless required by applicable law or agreed to in writing, software
1:ae71c74:    distributed under the License is distributed on an "AS IS" BASIS,
1:ae71c74:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ae71c74:    See the License for the specific language governing permissions and
1:ae71c74:    limitations under the License.
1:ae71c74: 
1:ae71c74:  */
1:ae71c74: 
1:ae71c74: package org.apache.derby.impl.store.raw.data;
1:ae71c74: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ae71c74: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:ae71c74: 
1:ae71c74: import org.apache.derby.iapi.store.raw.Compensation;
1:ae71c74: import org.apache.derby.iapi.store.raw.Loggable;
1:ae71c74: import org.apache.derby.iapi.store.raw.Transaction;
1:ae71c74: import org.apache.derby.iapi.store.raw.Undoable;
1:ae71c74: import org.apache.derby.iapi.util.ByteArray;
1:ae71c74: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:ae71c74: import org.apache.derby.iapi.error.StandardException;
1:ae71c74: 
1:ae71c74: import java.io.ObjectOutput;
1:ae71c74: import java.io.ObjectInput;
1:ae71c74: import java.io.IOException;
1:ae71c74: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:ae71c74: 
1:ae71c74: /** A Encrypt Container undo operation rolls back the change of a 
1:ae71c74:  *  Encrypt Container operation 
1:ae71c74:  */
1:ae71c74: public class EncryptContainerUndoOperation implements Compensation 
1:ae71c74: {
1:ae71c74: 	// the operation to rollback 
1:ae71c74: 	transient private	EncryptContainerOperation undoOp;
1:ae71c74: 
1:ae71c74: 	/** During redo, the whole operation will be reconstituted from the log */
1:ae71c74: 
1:ae71c74: 	/** 
1:ae71c74:      *	Set up a Encrypt Container undo operation during run time rollback
1:ae71c74:      *  @param op Encrypt contaner operatation that is to be undone. 
1:ae71c74:      */
1:ae71c74: 	public EncryptContainerUndoOperation(EncryptContainerOperation op) 
1:ae71c74: 	{
1:ae71c74: 		undoOp = op;
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 	/*
1:ae71c74: 	 * Formatable methods
1:ae71c74: 	 */
1:ae71c74: 
1:ae71c74: 	// no-arg constructor, required by Formatable 
1:ae71c74: 	public EncryptContainerUndoOperation() { super(); }
1:ae71c74: 
1:ae71c74: 	public void writeExternal(ObjectOutput out) throws IOException 
1:ae71c74: 	{
1:ae71c74:         // nothing to write.
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 	/**
1:ae71c74: 		@exception IOException cannot read log record from log stream
1:ae71c74: 		@exception ClassNotFoundException cannot read ByteArray object
1:ae71c74: 	 */
1:ae71c74: 	public void readExternal(ObjectInput in) 
1:ae71c74: 		 throws IOException, ClassNotFoundException
1:ae71c74: 	{
1:ae71c74:         // nothing to read.
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 	/**
1:ae71c74: 		Return my format identifier.
1:ae71c74: 	*/
1:ae71c74: 	public int getTypeFormatId() {
1:ae71c74: 		return StoredFormatIds.LOGOP_ENCRYPT_CONTAINER_UNDO;
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 	/** 
1:ae71c74: 		Compensation method
1:ae71c74: 	*/
1:ae71c74: 
1:ae71c74: 	/** Set up a Container undo operation during recovery redo. */
1:ae71c74: 	public void setUndoOp(Undoable op)
1:ae71c74: 	{
1:ae71c74: 		if (SanityManager.DEBUG) {
1:ae71c74: 			SanityManager.ASSERT(op instanceof EncryptContainerOperation);
1:ae71c74: 		}
1:ae71c74: 
1:ae71c74: 		undoOp = (EncryptContainerOperation)op;
1:ae71c74: 	}
1:ae71c74: 
1:ae71c74: 	/**
1:ae71c74: 		Loggable methods
1:ae71c74: 	*/
1:ae71c74: 
1:ae71c74:     
1:ae71c74:     /**
1:ae71c74:      * Check if this operation needs to be redone during recovery redo. 
1:ae71c74:      * Returns true if this op should be redone during recovery redo,
1:ae71c74:      * @param xact	the transaction that is doing the rollback
1:ae71c74:      * @return  true, if this operation needs to be redone during recovery.
1:ae71c74:      * @exception StandardException Standard Derby error policy
1:ae71c74:      */
1:ae71c74:     public boolean needsRedo(Transaction xact)
1:ae71c74:         throws StandardException
1:ae71c74:     {
1:ae71c74:         return true;
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74:        the default for prepared log is always null for all the operations
1:ae71c74:        that don't have optionalData.  If an operation has optional data,
1:ae71c74:        the operation need to prepare the optional data for this method.
1:ae71c74: 
1:ae71c74:        Encrypt Conatainer Undo Operation has no optional data to write out
1:ae71c74: 	*/
1:ae71c74:     public ByteArray getPreparedLog()
1:ae71c74:     {
1:ae71c74:         return (ByteArray) null;
1:ae71c74:     }
1:ae71c74: 
1:ae71c74: 
1:ae71c74:     /** Apply the undo operation, in this implementation of the
1:ae71c74:         RawStore, it can only call the undoMe method of undoOp
1:ae71c74:         @param xact			the Transaction that is doing the rollback
1:ae71c74:         @param instant		the log instant of this compenstaion operation
1:ae71c74:         @param in			optional data
1:ae71c74:         @exception IOException Can be thrown by any of the methods of ObjectInput.
1:ae71c74:         @exception StandardException Standard Derby policy.
1:ae71c74: 
1:ae71c74:         @see EncryptContainerOperation#generateUndo
1:ae71c74:     */
1:ae71c74:     public final void doMe(Transaction xact, LogInstant instant, 
1:ae71c74:                            LimitObjectInput in) 
1:ae71c74:         throws StandardException, IOException
1:ae71c74: 	{
1:ae71c74:         undoOp.undoMe(xact);
1:ae71c74:         releaseResource(xact);
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     /* make sure resource found in undoOp is released */
1:ae71c74:     public void releaseResource(Transaction xact)
1:ae71c74: 	{
1:ae71c74:         if (undoOp != null)
1:ae71c74:             undoOp.releaseResource(xact);
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     /* Undo operation is a COMPENSATION log operation */
1:ae71c74:     public int group()
1:ae71c74:     {
1:ae71c74:         return Loggable.COMPENSATION | Loggable.RAWSTORE;
1:ae71c74:     }
1:ae71c74: 
1:ae71c74:     /**
1:ae71c74: 	  DEBUG: Print self.
1:ae71c74: 	*/
1:ae71c74:     public String toString()
1:ae71c74:     {
1:ae71c74:         if (SanityManager.DEBUG)
1:ae71c74:         {
1:ae71c74:             String str = "CLR (Encrypt Container Undo): " ;
1:ae71c74:             if (undoOp != null)
1:ae71c74:                 str += undoOp.toString();
1:ae71c74:             else
1:ae71c74:                 str += "undo Operation not set";
1:ae71c74: 
1:ae71c74:             return str;
1:ae71c74:         }
1:ae71c74:         else
1:ae71c74:             return null;
1:ae71c74:     }
1:ae71c74: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation
1: 
0:    Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: import org.apache.derby.iapi.util.ByteArray;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /** A Encrypt Container undo operation rolls back the change of a 
1:  *  Encrypt Container operation 
1:  */
1: public class EncryptContainerUndoOperation implements Compensation 
1: {
1: 	// the operation to rollback 
1: 	transient private	EncryptContainerOperation undoOp;
1: 
1: 	/** During redo, the whole operation will be reconstituted from the log */
1: 
1: 	/** 
1:      *	Set up a Encrypt Container undo operation during run time rollback
1:      *  @param op Encrypt contaner operatation that is to be undone. 
1:      */
1: 	public EncryptContainerUndoOperation(EncryptContainerOperation op) 
1: 	{
1: 		undoOp = op;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public EncryptContainerUndoOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1:         // nothing to write.
1: 	}
1: 
1: 	/**
1: 		@exception IOException cannot read log record from log stream
1: 		@exception ClassNotFoundException cannot read ByteArray object
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1:         // nothing to read.
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_ENCRYPT_CONTAINER_UNDO;
1: 	}
1: 
1: 	/** 
1: 		Compensation method
1: 	*/
1: 
1: 	/** Set up a Container undo operation during recovery redo. */
1: 	public void setUndoOp(Undoable op)
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(op instanceof EncryptContainerOperation);
1: 		}
1: 
1: 		undoOp = (EncryptContainerOperation)op;
1: 	}
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1:     
1:     /**
1:      * Check if this operation needs to be redone during recovery redo. 
1:      * Returns true if this op should be redone during recovery redo,
1:      * @param xact	the transaction that is doing the rollback
1:      * @return  true, if this operation needs to be redone during recovery.
1:      * @exception StandardException Standard Derby error policy
1:      */
1:     public boolean needsRedo(Transaction xact)
1:         throws StandardException
1:     {
1:         return true;
1:     }
1: 
1:     /**
1:        the default for prepared log is always null for all the operations
1:        that don't have optionalData.  If an operation has optional data,
1:        the operation need to prepare the optional data for this method.
1: 
1:        Encrypt Conatainer Undo Operation has no optional data to write out
1: 	*/
1:     public ByteArray getPreparedLog()
1:     {
1:         return (ByteArray) null;
1:     }
1: 
1: 
1:     /** Apply the undo operation, in this implementation of the
1:         RawStore, it can only call the undoMe method of undoOp
1:         @param xact			the Transaction that is doing the rollback
1:         @param instant		the log instant of this compenstaion operation
1:         @param in			optional data
1:         @exception IOException Can be thrown by any of the methods of ObjectInput.
1:         @exception StandardException Standard Derby policy.
1: 
1:         @see EncryptContainerOperation#generateUndo
1:     */
1:     public final void doMe(Transaction xact, LogInstant instant, 
1:                            LimitObjectInput in) 
1:         throws StandardException, IOException
1: 	{
1:         undoOp.undoMe(xact);
1:         releaseResource(xact);
1:     }
1: 
1:     /* make sure resource found in undoOp is released */
1:     public void releaseResource(Transaction xact)
1: 	{
1:         if (undoOp != null)
1:             undoOp.releaseResource(xact);
1:     }
1: 
1:     /* Undo operation is a COMPENSATION log operation */
1:     public int group()
1:     {
1:         return Loggable.COMPENSATION | Loggable.RAWSTORE;
1:     }
1: 
1:     /**
1: 	  DEBUG: Print self.
1: 	*/
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             String str = "CLR (Encrypt Container Undo): " ;
1:             if (undoOp != null)
1:                 str += undoOp.toString();
1:             else
1:                 str += "undo Operation not set";
1: 
1:             return str;
1:         }
1:         else
1:             return null;
1:     }
1: }
============================================================================