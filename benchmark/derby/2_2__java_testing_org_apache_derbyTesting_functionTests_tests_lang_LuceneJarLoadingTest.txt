1:a409436: /*
3:a409436: 
1:a409436:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneJarLoadingTest
1:a409436: 
1:a409436:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a409436:    contributor license agreements.  See the NOTICE file distributed with
1:a409436:    this work for additional information regarding copyright ownership.
1:a409436:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a409436:    (the "License"); you may not use this file except in compliance with
1:a409436:    the License.  You may obtain a copy of the License at
1:a409436: 
1:a409436:      http://www.apache.org/licenses/LICENSE-2.0
1:a409436: 
1:a409436:    Unless required by applicable law or agreed to in writing, software
1:a409436:    distributed under the License is distributed on an "AS IS" BASIS,
1:a409436:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a409436:    See the License for the specific language governing permissions and
1:a409436:    limitations under the License.
1:a409436: 
1:a409436:  */
1:a409436: 
1:a409436: package org.apache.derbyTesting.functionTests.tests.lang;
1:a409436: 
1:a409436: import java.net.URL;
1:a409436: import java.sql.Connection;
1:a409436: import junit.framework.Test;
1:515a63e: import org.apache.derby.optional.api.LuceneUtils;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a409436: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:a409436: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:a409436: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:a409436: 
1:a409436: /**
1:a409436:  * <p>
1:a409436:  * Test backup and restore of databases with Lucene indexes.
1:a409436:  * </p>
1:a409436:  */
1:a409436: public class LuceneJarLoadingTest extends GeneratedColumnsHelper
1:a409436: {
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436:     //
1:a409436:     // CONSTANTS
1:a409436:     //
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436: 
1:a409436:     private static  final   String      DB_NAME = "lucenejarloadingdb";
1:a409436: 
1:a409436:     private static  final   String      TEST_DBO = "TEST_DBO";
1:a409436:     private static  final   String      RUTH = "RUTH";
1:a409436:     private static  final   String      ALICE = "ALICE";
1:a409436:     private static  final   String      FRANK = "FRANK";
1:a409436:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1:a409436: 
1:a409436:     private static  final   String      POLICY_FILE = "org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy";
1:a409436: 
1:a409436:     /** the jar file which contains the custom Analyzer and QueryParser */
1:a409436:     private static  final   String      EXTERNAL_JAR_NAME = "myLuceneClasses.jar";
1:a409436:     private static  final   String      INTERNAL_JAR_NAME = "TEST_DBO.myLuceneClasses";
1:a409436:     private static  final   String[]    SUPPORT_FILES = { "functionTests/tests/lang/" + EXTERNAL_JAR_NAME };
1:a409436: 
1:a409436:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:a409436:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:a4e6298:     private static  final   String      MY_ANALYZER = "MyAnalyzer.makeMyIndexDescriptor";
1:a409436:     private static  final   String      INDEX_TEXT_TABLE =
1:a409436:         "call LuceneSupport.createIndex( 'ruth', 'textTable', 'textCol', '" + MY_ANALYZER + "' )";
1:a409436:     private static  final   String      DROP_TEXT_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'textTable', 'textCol' )";
1:a409436: 
1:a409436:     private static  final   String      READ_TEXT_INDEX =
1:a409436:         "select * from table\n" +
1:a409436:         "(\n" +
1:a409436:         "  ruth.textTable__textCol\n" +
1:a409436:         "  (\n" +
1:a409436:         "    'one two three four five six seven eight nine ten',\n" +
1:a409436:         "    100, null\n" +
1:a409436:         "  )\n" +
1:a409436:         ") t\n";
1:a409436:     private static  final   String[][]  READ_TEXT_RESULT =
1:a409436:         new String[][]
1:a409436:         {
1:a409436:             { "10", "9", "2.2791052" },   
1:a409436:             { "9", "8", "1.6305782" },
1:a409436:             { "8", "7", "1.1616905" },   
1:a409436:             { "7", "6", "0.97469425" }, 
1:a409436:             { "6", "5", "0.6597747" },  
1:a409436:             { "5", "4", "0.49575216" },
1:a409436:             { "4", "3", "0.33803377" }, 
1:a409436:             { "3", "2", "0.17799875" },     
1:a409436:             { "2", "1", "0.09289266" },
1:a409436:             { "1", "0", "0.035006654" },   
1:a409436:         };
1:a409436: 
1:a409436:     private static  final   String  GOOD_SHUTDOWN = "08006";
1:a409436: 
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436:     //
1:a409436:     // STATE
1:a409436:     //
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436: 
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436:     //
1:a409436:     // CONSTRUCTOR
1:a409436:     //
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436: 
1:a409436:     /**
1:a409436:      * Create a new instance.
1:a409436:      */
1:a409436: 
1:a409436:     public LuceneJarLoadingTest( String name )
1:a409436:     {
1:a409436:         super( name );
1:a409436:     }
1:a409436: 
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436:     //
1:a409436:     // JUnit BEHAVIOR
1:a409436:     //
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436: 
1:a409436: 
1:a409436:     /**
1:a409436:      * Construct top level suite in this JUnit test
1:a409436:      */
1:a409436:     public static Test suite()
1:a409436:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             LuceneJarLoadingTest.class );
1:a409436: 
1:a409436:         Test        secureTest = new SecurityManagerSetup( suite, POLICY_FILE );
1:a409436:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:a409436:             ( secureTest, LEGAL_USERS, "LuceneJarLoadingPermissions" );
1:a409436:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, true );
1:a409436:         Test        supportFilesTest = new SupportFilesSetup( authorizedTest, SUPPORT_FILES );
1:a409436: 
1:a409436:         return supportFilesTest;
1:a409436:     }
1:a409436: 
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436:     //
1:a409436:     // TESTS
1:a409436:     //
1:a409436:     ///////////////////////////////////////////////////////////////////////////////////
1:a409436: 
1:a409436:     /**
1:a409436:      * <p>
1:a409436:      * Test that you can use Analyzers and QueryParsers which live inside jar files
1:a409436:      * stored in the database.
1:a409436:      * </p>
1:a409436:      */
1:a409436:     public  void    test_001_basic()
1:a409436:         throws Exception
1:a409436:     {
1:a409436:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:a409436:         Connection  ruthConnection = openUserConnection( RUTH );
1:a409436: 
1:a409436:         goodStatement( dboConnection, "create table dummyJustToCreateSchema( a int )" );
1:a409436: 
1:a409436:         // load the jar file
1:a409436:         URL jar = SupportFilesSetup.getReadOnlyURL( EXTERNAL_JAR_NAME );
1:a409436:         goodStatement( dboConnection, "call sqlj.install_jar( '" + jar.toExternalForm() + "', '" + INTERNAL_JAR_NAME + "', 0 )" );
1:a409436:         goodStatement
1:a409436:             (
1:a409436:              dboConnection,
1:a409436:              "call syscs_util.syscs_set_database_property( 'derby.database.classpath', '" + INTERNAL_JAR_NAME + "' )"
1:a409436:              );
1:a409436: 
1:a409436:         LuceneSupportPermsTest.loadTestTable( ruthConnection );
1:a409436: 
1:a409436:         goodStatement( dboConnection, LOAD_TOOL );
1:a409436:         goodStatement( ruthConnection, INDEX_TEXT_TABLE );
1:a409436: 
1:a409436:         // verify that everything looks good
1:a409436:         assertResults
1:a409436:             (
1:a409436:              ruthConnection,
1:a409436:              READ_TEXT_INDEX,
1:a409436:              READ_TEXT_RESULT,
1:a409436:              false
1:a409436:              );
1:a409436: 
1:a409436:         // cleanup
1:a409436:         goodStatement( ruthConnection, DROP_TEXT_INDEX );
1:a409436:         goodStatement( dboConnection, UNLOAD_TOOL );
1:a409436:         LuceneSupportPermsTest.unloadTestTable( ruthConnection );
1:a409436:     }
1:a409436: 
1:515a63e:     /**
1:515a63e:      * <p>
1:515a63e:      * Test that you can declare a function on methods in the Lucene api package.
1:515a63e:      * </p>
1:515a63e:      */
1:515a63e:     public  void    test_002_apiPackage()
1:515a63e:         throws Exception
1:515a63e:     {
1:515a63e:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:515a63e: 
1:515a63e:         goodStatement( dboConnection, "create type LuceneVersion external name 'org.apache.lucene.util.Version' language java" );
1:515a63e:         goodStatement
1:515a63e:             (
1:515a63e:              dboConnection,
1:515a63e:              "create function getLuceneVersion() returns LuceneVersion\n" +
1:515a63e:              "language java parameter style java no sql\n" +
1:515a63e:              "external name 'org.apache.derby.optional.api.LuceneUtils.currentVersion'\n"
1:515a63e:              );
1:515a63e: 
1:515a63e:         assertResults
1:515a63e:             (
1:515a63e:              dboConnection,
1:515a63e:              "values getLuceneVersion()",
1:515a63e:              new String[][]
1:515a63e:              {
1:515a63e:                  { LuceneUtils.currentVersion().toString() }
1:515a63e:              },
1:515a63e:              false
1:515a63e:              );
1:515a63e: 
1:515a63e:         goodStatement( dboConnection, "drop function getLuceneVersion" );
1:515a63e:         goodStatement( dboConnection, "drop type LuceneVersion restrict" );
1:515a63e:     }
1:515a63e:     
1:a409436: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             LuceneJarLoadingTest.class );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      MY_ANALYZER = "MyAnalyzer.makeMyIndexDescriptor";
/////////////////////////////////////////////////////////////////////////
commit:515a63e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.api.LuceneUtils;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test that you can declare a function on methods in the Lucene api package.
1:      * </p>
1:      */
1:     public  void    test_002_apiPackage()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1: 
1:         goodStatement( dboConnection, "create type LuceneVersion external name 'org.apache.lucene.util.Version' language java" );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function getLuceneVersion() returns LuceneVersion\n" +
1:              "language java parameter style java no sql\n" +
1:              "external name 'org.apache.derby.optional.api.LuceneUtils.currentVersion'\n"
1:              );
1: 
1:         assertResults
1:             (
1:              dboConnection,
1:              "values getLuceneVersion()",
1:              new String[][]
1:              {
1:                  { LuceneUtils.currentVersion().toString() }
1:              },
1:              false
1:              );
1: 
1:         goodStatement( dboConnection, "drop function getLuceneVersion" );
1:         goodStatement( dboConnection, "drop type LuceneVersion restrict" );
1:     }
1:     
commit:a409436
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneJarLoadingTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.io.File;
1: import java.net.URL;
1: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * <p>
1:  * Test backup and restore of databases with Lucene indexes.
1:  * </p>
1:  */
1: public class LuceneJarLoadingTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      DB_NAME = "lucenejarloadingdb";
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      RUTH = "RUTH";
1:     private static  final   String      ALICE = "ALICE";
1:     private static  final   String      FRANK = "FRANK";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1: 
1:     private static  final   String      POLICY_FILE = "org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy";
1: 
1:     /** the jar file which contains the custom Analyzer and QueryParser */
1:     private static  final   String      EXTERNAL_JAR_NAME = "myLuceneClasses.jar";
1:     private static  final   String      INTERNAL_JAR_NAME = "TEST_DBO.myLuceneClasses";
1:     private static  final   String[]    SUPPORT_FILES = { "functionTests/tests/lang/" + EXTERNAL_JAR_NAME };
1: 
1:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
0:     private static  final   String      MY_ANALYZER = "MyAnalyzer.makeMyAnalyzer";
1:     private static  final   String      INDEX_TEXT_TABLE =
1:         "call LuceneSupport.createIndex( 'ruth', 'textTable', 'textCol', '" + MY_ANALYZER + "' )";
1:     private static  final   String      DROP_TEXT_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'textTable', 'textCol' )";
1: 
1:     private static  final   String      READ_TEXT_INDEX =
1:         "select * from table\n" +
1:         "(\n" +
1:         "  ruth.textTable__textCol\n" +
1:         "  (\n" +
1:         "    'one two three four five six seven eight nine ten',\n" +
0:         "    'MyQueryParser.makeMyQueryParser',\n" +
1:         "    100, null\n" +
1:         "  )\n" +
1:         ") t\n";
1:     private static  final   String[][]  READ_TEXT_RESULT =
1:         new String[][]
1:         {
1:             { "10", "9", "2.2791052" },   
1:             { "9", "8", "1.6305782" },
1:             { "8", "7", "1.1616905" },   
1:             { "7", "6", "0.97469425" }, 
1:             { "6", "5", "0.6597747" },  
1:             { "5", "4", "0.49575216" },
1:             { "4", "3", "0.33803377" }, 
1:             { "3", "2", "0.17799875" },     
1:             { "2", "1", "0.09289266" },
1:             { "1", "0", "0.035006654" },   
1:         };
1: 
1:     private static  final   String  GOOD_SHUTDOWN = "08006";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public LuceneJarLoadingTest( String name )
1:     {
1:         super( name );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite( LuceneJarLoadingTest.class );
1: 
1:         Test        secureTest = new SecurityManagerSetup( suite, POLICY_FILE );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( secureTest, LEGAL_USERS, "LuceneJarLoadingPermissions" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, true );
1:         Test        supportFilesTest = new SupportFilesSetup( authorizedTest, SUPPORT_FILES );
1: 
1:         return supportFilesTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that you can use Analyzers and QueryParsers which live inside jar files
1:      * stored in the database.
1:      * </p>
1:      */
1:     public  void    test_001_basic()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  ruthConnection = openUserConnection( RUTH );
1: 
1:         goodStatement( dboConnection, "create table dummyJustToCreateSchema( a int )" );
1: 
1:         // load the jar file
1:         URL jar = SupportFilesSetup.getReadOnlyURL( EXTERNAL_JAR_NAME );
1:         goodStatement( dboConnection, "call sqlj.install_jar( '" + jar.toExternalForm() + "', '" + INTERNAL_JAR_NAME + "', 0 )" );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_set_database_property( 'derby.database.classpath', '" + INTERNAL_JAR_NAME + "' )"
1:              );
1: 
1:         LuceneSupportPermsTest.loadTestTable( ruthConnection );
1: 
1:         goodStatement( dboConnection, LOAD_TOOL );
1:         goodStatement( ruthConnection, INDEX_TEXT_TABLE );
1: 
1:         // verify that everything looks good
1:         assertResults
1:             (
1:              ruthConnection,
1:              READ_TEXT_INDEX,
1:              READ_TEXT_RESULT,
1:              false
1:              );
1: 
1:         // cleanup
1:         goodStatement( ruthConnection, DROP_TEXT_INDEX );
1:         goodStatement( dboConnection, UNLOAD_TOOL );
1:         LuceneSupportPermsTest.unloadTestTable( ruthConnection );
1:     }
1: 
1: }
============================================================================