1:eac0369: /*
8:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.services.reflect.UpdateLoader
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.reflect;
1:eac0369: 
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
2:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.util.IdUtil;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.locks.ShExLockable;
1:eac0369: import org.apache.derby.iapi.services.locks.ShExQual;
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: import org.apache.derby.iapi.services.locks.Latch;
1:eac0369: import org.apache.derby.iapi.services.locks.C_LockFactory;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
1:eac0369: import org.apache.derby.iapi.services.loader.JarReader;
1:eac0369: import org.apache.derby.iapi.services.property.PersistentSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:420f9d6: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.MessageId;
1:eac0369: import org.apache.derby.iapi.reference.Module;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:3c1f634: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:85e3e12: import org.apache.derby.iapi.services.locks.LockOwner;
1:46ecfcf: 
1:c722b36: /**
1:c722b36:  * UpdateLoader implements then functionality of
1:c722b36:  * derby.database.classpath. It manages the ClassLoaders
1:c722b36:  * (instances of JarLoader) for each installed jar file.
1:c722b36:  * Jar files are installed through the sqlj.install_jar procedure.
1:c722b36:  * <BR>
1:c722b36:  * Each JarLoader delegates any request through standard mechanisms
1:c722b36:  * to load a class to this object, which will then ask each jarLoader in order of
1:c722b36:  * derby.database.classpath to load the class through an internal api.
1:c722b36:  * This means if the third jar in derby.database.classpath tries to load
1:c722b36:  * a class, say from the class for a procedure's method making some
1:c722b36:  * reference to it, then the request is delegated to UpdateLoader.
1:c722b36:  * UpdateLoader will then try to load the class from each of the jars
1:c722b36:  * in order of derby.database.classpath using the jar's installed JarLoader.
1:c722b36:  */
1:85e3e12: final class UpdateLoader implements LockOwner {
1:eac0369:     
1:46ecfcf:     /**
1:46ecfcf:      * List of packages that Derby will not support being loaded
1:46ecfcf:      * from an installed jar file.
1:46ecfcf:      */
1:46ecfcf:     private static final String[] RESTRICTED_PACKAGES = {
1:46ecfcf:         // While loading java. classes is blocked by the standard
1:46ecfcf:         // class loading mechanism, javax. ones are not. However
1:46ecfcf:         // allowing database applications to override jvm classes
1:46ecfcf:         // seems a bad idea.
1:46ecfcf:         "javax.",
1:46ecfcf:         
1:46ecfcf:         // Allowing an application to possible override the engine's
1:46ecfcf:         // own classes also seems dangerous.
1:46ecfcf:         "org.apache.derby.",
1:46ecfcf:     };
1:eac0369: 
1:eac0369: 	private JarLoader[] jarList;
1:eac0369: 	private HeaderPrintWriter vs;
1:eac0369: 	private final ClassLoader myLoader;
1:eac0369: 	private boolean initDone;
1:eac0369: 	private String thisClasspath;
1:eac0369: 	private final LockFactory lf;
1:eac0369: 	private final ShExLockable classLoaderLock;
1:eac0369: 	private int version;
1:eac0369:     private boolean normalizeToUpper;
1:eac0369: 	private DatabaseClasses parent;
1:3c1f634: 	private final CompatibilitySpace compat;
1:eac0369: 
1:eac0369: 	private boolean needReload;
1:eac0369: 	private JarReader jarReader;
1:eac0369: 
1:420f9d6: 	UpdateLoader(String classpath, DatabaseClasses parent, boolean verbose, boolean normalizeToUpper) 
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369:         this.normalizeToUpper = normalizeToUpper;
1:eac0369: 		this.parent = parent;
1:56c1dc2: 		lf = (LockFactory) getServiceModule(parent, Module.LockFactory);
1:7057c61: 		compat = (lf != null) ? lf.createCompatibilitySpace(this) : null;
1:eac0369: 
1:eac0369: 		if (verbose) {
1:eac0369: 			vs = Monitor.getStream();
7:eac0369: 		}
1:eac0369: 		
1:eac0369: 		myLoader = getClass().getClassLoader();
1:eac0369: 
1:eac0369: 		this.classLoaderLock = new ClassLoaderLock(this);
1:eac0369: 
1:eac0369: 		initializeFromClassPath(classpath);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private void initializeFromClassPath(String classpath) throws StandardException {
1:eac0369: 
1:9067662: 		final String[][] elements = IdUtil.parseDbClassPath(classpath);
1:eac0369: 		
1:420f9d6: 		final int jarCount = elements.length;
1:eac0369: 		jarList = new JarLoader[jarCount];
1:eac0369: 			
1:420f9d6:         if (jarCount != 0) {
1:420f9d6:             // Creating class loaders is a restricted operation
1:420f9d6:             // so we need to use a privileged block.
1:420f9d6:             AccessController.doPrivileged
1:a15a470:             (new java.security.PrivilegedAction<Object>(){
1:420f9d6:                 
1:420f9d6:                 public Object run(){    
1:420f9d6:     		      for (int i = 0; i < jarCount; i++) {
1:420f9d6:     			     jarList[i] = new JarLoader(UpdateLoader.this, elements[i], vs);
1:420f9d6:     		      }
1:420f9d6:                   return null;
1:420f9d6:                 }
1:420f9d6:             });
1:420f9d6:         }
1:eac0369: 		if (vs != null) {
1:870f7cd: 			vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOADER_START, classpath ));
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		thisClasspath = classpath;
1:eac0369: 		initDone = false;
1:eac0369: 	}
1:eac0369: 
1:85e3e12: 	/**
1:c722b36: 		Load the class from the class path. Called by JarLoader
1:c722b36:         when it has a request to load a class to fulfill
1:c722b36:         the sematics of derby.database.classpath.
1:c722b36:         <P>
1:c722b36:         Enforces two restrictions:
1:c722b36:         <UL>
1:c722b36:         <LI> Do not allow classes in certain name spaces to be loaded
1:c722b36:         from installed jars, see RESTRICTED_PACKAGES for the list.
1:c722b36:         <LI> Referencing Derby's internal classes (those outside the
1:c722b36:         public api) from installed is disallowed. This is to stop
1:c722b36:         user defined routines bypassing security or taking advantage
1:c722b36:         of security holes in Derby. E.g. allowing a routine to
1:c722b36:         call a public method in derby would allow such routines
1:c722b36:         to call public static methods for system procedures without
1:c722b36:         having been granted permission on them, such as setting database
1:c722b36:         properties.
1:c722b36:         </UL>
1:eac0369: 
1:c722b36: 		@exception ClassNotFoundException Class can not be found or
1:c722b36:         the installed jar is restricted from loading it.
1:eac0369: 	*/
1:420f9d6: 	Class loadClass(String className, boolean resolve) 
1:eac0369: 		throws ClassNotFoundException {
1:eac0369: 
1:eac0369: 		JarLoader jl = null;
1:eac0369: 
1:eac0369: 		boolean unlockLoader = false;
1:eac0369: 		try {
1:eac0369: 			unlockLoader = lockClassLoader(ShExQual.SH);
1:eac0369: 
2:eac0369: 			synchronized (this) {
1:eac0369: 
1:eac0369: 				if (needReload) {
1:eac0369: 					reload();
1:eac0369: 				}
1:eac0369: 			
1:eac0369: 				Class clazz = checkLoaded(className, resolve);
1:eac0369: 				if (clazz != null)
1:eac0369: 					return clazz;
1:46ecfcf:                 
1:46ecfcf:                 // Refuse to load classes from restricted name spaces
1:c33ef39:                 // That is classes in those name spaces can be not
1:c33ef39:                 // loaded from installed jar files.
1:46ecfcf:                 for (int i = 0; i < RESTRICTED_PACKAGES.length; i++)
2:9819cf8:                 {
1:46ecfcf:                     if (className.startsWith(RESTRICTED_PACKAGES[i]))
1:46ecfcf:                         throw new ClassNotFoundException(className);
1:46ecfcf:                 }
1:eac0369: 
1:eac0369: 				String jvmClassName = className.replace('.', '/').concat(".class");
1:eac0369: 
1:eac0369: 				if (!initDone)
1:eac0369: 					initLoaders();
1:eac0369: 
2:eac0369: 				for (int i = 0; i < jarList.length; i++) {
1:eac0369: 
1:eac0369: 					jl = jarList[i];
1:eac0369: 
1:eac0369: 					Class c = jl.loadClassData(className, jvmClassName, resolve);
1:eac0369: 					if (c != null) {
1:eac0369: 						if (vs != null)
1:eac0369: 							vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOAD, className, jl.getJarName()));
1:eac0369: 
1:eac0369: 						return c;
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			return null;
1:eac0369: 
1:eac0369: 
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 			throw new ClassNotFoundException(MessageService.getTextMessage(MessageId.CM_CLASS_LOAD_EXCEPTION, className, jl == null ? null : jl.getJarName(), se));
1:eac0369: 		} finally {
1:eac0369: 			if (unlockLoader) {
1:3c1f634: 				lf.unlock(compat, this, classLoaderLock, ShExQual.SH);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:420f9d6: 	InputStream getResourceAsStream(String name) {
1:eac0369: 
1:eac0369: 		InputStream is = (myLoader == null) ?
1:eac0369: 			ClassLoader.getSystemResourceAsStream(name) :
1:eac0369: 			myLoader.getResourceAsStream(name);
1:eac0369: 
1:eac0369: 		if (is != null)
1:eac0369: 			return is;
1:eac0369: 
1:eac0369: 		// match behaviour of standard class loaders. 
1:eac0369: 		if (name.endsWith(".class"))
1:eac0369: 			return null;
1:eac0369: 
1:eac0369: 		boolean unlockLoader = false;
1:eac0369: 		try {
1:eac0369: 			unlockLoader = lockClassLoader(ShExQual.SH);
1:eac0369: 
1:eac0369: 			synchronized (this) {
1:eac0369: 
1:eac0369: 				if (needReload) {
1:eac0369: 					reload();		
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				if (!initDone)
1:eac0369: 					initLoaders();
1:eac0369: 
1:eac0369: 				for (int i = 0; i < jarList.length; i++) {
1:eac0369: 
2:eac0369: 					JarLoader jl = jarList[i];
1:eac0369: 
1:eac0369: 					is = jl.getStream(name);
1:eac0369: 					if (is != null) {
1:eac0369: 						return is;
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			return null;
1:eac0369: 
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 			return null;
1:eac0369: 		} finally {
1:eac0369: 			if (unlockLoader) {
1:3c1f634: 				lf.unlock(compat, this, classLoaderLock, ShExQual.SH);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:420f9d6: 	synchronized void modifyClasspath(String classpath)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		// lock transaction classloader exclusively
1:eac0369: 		lockClassLoader(ShExQual.EX);
1:eac0369: 		version++;
1:eac0369: 
1:eac0369: 
1:eac0369: 		modifyJar(false);
1:eac0369: 		initializeFromClassPath(classpath);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:420f9d6: 	synchronized void modifyJar(boolean reload) throws StandardException {
1:eac0369: 
1:eac0369: 		// lock transaction classloader exclusively
1:eac0369: 		lockClassLoader(ShExQual.EX);
1:eac0369: 		version++;
1:eac0369: 
1:eac0369: 		if (!initDone)
2:eac0369: 			return;
1:5739bce:         
1:5739bce:         // first close the existing jar file opens
1:5739bce:         close();
1:eac0369: 
1:eac0369: 		if (reload) {
1:eac0369: 			initializeFromClassPath(thisClasspath);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private boolean lockClassLoader(ShExQual qualifier)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		if (lf == null)
1:eac0369: 			return false;
1:a0dbbd7: 
1:a0dbbd7: 		ClassFactoryContext cfc = (ClassFactoryContext) getContextOrNull(ClassFactoryContext.CONTEXT_ID);
1:eac0369: 
1:eac0369: 		// This method can be called from outside of the database
1:eac0369: 		// engine, in which case tc will be null. In that case
1:eac0369: 		// we lock the class loader only for the duration of
1:eac0369: 		// the loadClass().
1:3c1f634: 		CompatibilitySpace lockSpace = null;
1:eac0369: 		
1:eac0369: 		if (cfc != null) {
1:eac0369: 			lockSpace = cfc.getLockSpace();
1:a0dbbd7: 		}
1:eac0369: 		if (lockSpace == null)
1:3c1f634: 			lockSpace = compat;
1:eac0369: 
1:3c1f634: 		Object lockGroup = lockSpace.getOwner();
1:eac0369: 
1:3c1f634: 		lf.lockObject(lockSpace, lockGroup, classLoaderLock, qualifier,
1:3c1f634: 					  C_LockFactory.TIMED_WAIT);
1:3c1f634: 
1:3c1f634: 		return (lockGroup == this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	Class checkLoaded(String className, boolean resolve) {
1:eac0369: 
1:eac0369: 		for (int i = 0; i < jarList.length; i++) {
1:eac0369: 			Class c = jarList[i].checkLoaded(className, resolve);
1:eac0369: 			if (c != null)
1:eac0369: 				return c;
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:420f9d6: 	void close() {
1:eac0369: 
1:eac0369: 		for (int i = 0; i < jarList.length; i++) {
1:5739bce: 			jarList[i].setInvalid();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private void initLoaders() {
1:eac0369: 
1:eac0369: 		if (initDone)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < jarList.length; i++) {
1:eac0369: 			jarList[i].initialize();
1:eac0369: 		}
1:eac0369: 		initDone = true;
1:eac0369: 	}
1:eac0369: 
1:420f9d6: 	int getClassLoaderVersion() {
1:eac0369: 		return version;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	synchronized void needReload() {
1:eac0369: 		version++;
1:eac0369: 		needReload = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private void reload() throws StandardException {
1:eac0369: 		thisClasspath = getClasspath();
1:eac0369: 		// first close the existing jar file opens
2:eac0369: 		close();
1:eac0369: 		initializeFromClassPath(thisClasspath);
1:eac0369: 		needReload = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	private String getClasspath()
1:eac0369: 		throws StandardException {
1:eac0369: 
1:a0dbbd7: 		ClassFactoryContext cfc = (ClassFactoryContext) getContextOrNull(ClassFactoryContext.CONTEXT_ID);
1:eac0369: 
1:eac0369: 		PersistentSet ps = cfc.getPersistentSet();
1:eac0369: 		
1:eac0369: 		String classpath = PropertyUtil.getServiceProperty(ps, Property.DATABASE_CLASSPATH);
1:eac0369: 
1:eac0369: 		//
1:eac0369: 		//In per database mode we must always have a classpath. If we do not
1:eac0369: 		//yet have one we make one up.
1:eac0369: 		if (classpath==null)
1:eac0369: 			classpath="";
1:eac0369: 
1:eac0369: 
1:eac0369: 		return classpath;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	JarReader getJarReader() {
1:eac0369: 		if (jarReader == null) {
1:eac0369: 
1:a0dbbd7: 			ClassFactoryContext cfc = (ClassFactoryContext) getContextOrNull(ClassFactoryContext.CONTEXT_ID);
1:eac0369: 
1:eac0369: 			jarReader = cfc.getJarReader(); 
1:eac0369: 		}
1:eac0369: 		return jarReader;
1:eac0369: 	}
1:85e3e12: 
1:a0dbbd7:     /**
1:85e3e12:      * Tell the lock manager that we don't want timed waits to time out
1:85e3e12:      * immediately.
1:85e3e12:      *
1:85e3e12:      * @return {@code false}
1:85e3e12:      */
1:85e3e12:     public boolean noWait() {
1:85e3e12:         return false;
1:85e3e12:     }
1:9819cf8:     
1:9819cf8:     public boolean isNestedOwner()
1:a0dbbd7:     {
1:9819cf8:         return false;
1:9819cf8:     }
1:9819cf8: 
1:9819cf8:     public boolean nestsUnder( LockOwner other )
1:a0dbbd7:     {
1:9819cf8:         return false;
1:9819cf8:     }
1:9819cf8:     
1:eac0369:     
2:eac0369:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContextOrNull( final String contextID )
1:a0dbbd7:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<Context>()
1:56c1dc2:              {
1:56c1dc2:                  public Context run()
1:a0dbbd7:                  {
1:56c1dc2:                      return ContextService.getContextOrNull( contextID );
1:56c1dc2:                  }
1:a0dbbd7:              }
1:56c1dc2:              );
1:a0dbbd7:     }
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged module lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private static  Object getServiceModule( final Object serviceModule, final String factoryInterface )
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<Object>()
1:56c1dc2:              {
1:56c1dc2:                  public Object run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getServiceModule( serviceModule, factoryInterface );
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:a0dbbd7: }
1:eac0369: 
1:eac0369: 
1:eac0369: class ClassLoaderLock extends ShExLockable {
1:eac0369: 
1:eac0369: 	private UpdateLoader myLoader;
1:eac0369: 
1:eac0369: 	ClassLoaderLock(UpdateLoader myLoader) {
1:eac0369: 		this.myLoader = myLoader;
1:a0dbbd7: 	}
1:eac0369: 
1:eac0369: 	public void unlockEvent(Latch lockInfo)
1:a0dbbd7: 	{
1:eac0369: 		super.unlockEvent(lockInfo);
1:eac0369: 
1:eac0369: 		if (lockInfo.getQualifier().equals(ShExQual.EX)) {
1:eac0369: 			// how do we tell if we are reverting or not
1:eac0369: 			myLoader.needReload();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: 		lf = (LockFactory) getServiceModule(parent, Module.LockFactory);
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<Context>()
1:              {
1:                  public Context run()
1:                      return ContextService.getContextOrNull( contextID );
1:              }
1:              );
1:     
1:     /**
1:      * Privileged module lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private static  Object getServiceModule( final Object serviceModule, final String factoryInterface )
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<Object>()
1:              {
1:                  public Object run()
1:                  {
1:                      return Monitor.getServiceModule( serviceModule, factoryInterface );
1:                  }
1:              }
1:              );
1:     }
1: 
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 		ClassFactoryContext cfc = (ClassFactoryContext) getContextOrNull(ClassFactoryContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1: 		ClassFactoryContext cfc = (ClassFactoryContext) getContextOrNull(ClassFactoryContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1: 			ClassFactoryContext cfc = (ClassFactoryContext) getContextOrNull(ClassFactoryContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContextOrNull( final String contextID )
1:     {
0:         if ( System.getSecurityManager() == null )
1:         {
0:             return ContextService.getContextOrNull( contextID );
1:         }
0:         else
1:         {
0:             return AccessController.doPrivileged
0:                 (
0:                  new PrivilegedAction<Context>()
1:                  {
0:                      public Context run()
1:                      {
0:                          return ContextService.getContextOrNull( contextID );
1:                      }
1:                  }
0:                  );
1:         }
1:     }
commit:9819cf8
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isNestedOwner()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean nestsUnder( LockOwner other )
1:     {
1:         return false;
1:     }
1:     
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1:             (new java.security.PrivilegedAction<Object>(){
commit:870f7cd
/////////////////////////////////////////////////////////////////////////
1: 			vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOADER_START, classpath ));
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:85e3e12
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.LockOwner;
/////////////////////////////////////////////////////////////////////////
1: final class UpdateLoader implements LockOwner {
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Tell the lock manager that we don't want timed waits to time out
1:      * immediately.
1:      *
1:      * @return {@code false}
1:      */
1:     public boolean noWait() {
1:         return false;
1:     }
commit:7057c61
/////////////////////////////////////////////////////////////////////////
1: 		compat = (lf != null) ? lf.createCompatibilitySpace(this) : null;
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
/////////////////////////////////////////////////////////////////////////
1: 	private final CompatibilitySpace compat;
/////////////////////////////////////////////////////////////////////////
0: 		compat = lf.createCompatibilitySpace(this);
/////////////////////////////////////////////////////////////////////////
1: 				lf.unlock(compat, this, classLoaderLock, ShExQual.SH);
/////////////////////////////////////////////////////////////////////////
1: 				lf.unlock(compat, this, classLoaderLock, ShExQual.SH);
/////////////////////////////////////////////////////////////////////////
1: 		CompatibilitySpace lockSpace = null;
1: 			lockSpace = compat;
1: 		Object lockGroup = lockSpace.getOwner();
1: 		lf.lockObject(lockSpace, lockGroup, classLoaderLock, qualifier,
1: 					  C_LockFactory.TIMED_WAIT);
1: 
1: 		return (lockGroup == this);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9067662
/////////////////////////////////////////////////////////////////////////
1: 		final String[][] elements = IdUtil.parseDbClassPath(classpath);
commit:c33ef39
/////////////////////////////////////////////////////////////////////////
1:                 // That is classes in those name spaces can be not
1:                 // loaded from installed jar files.
commit:c722b36
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * UpdateLoader implements then functionality of
1:  * derby.database.classpath. It manages the ClassLoaders
1:  * (instances of JarLoader) for each installed jar file.
1:  * Jar files are installed through the sqlj.install_jar procedure.
1:  * <BR>
1:  * Each JarLoader delegates any request through standard mechanisms
1:  * to load a class to this object, which will then ask each jarLoader in order of
1:  * derby.database.classpath to load the class through an internal api.
1:  * This means if the third jar in derby.database.classpath tries to load
1:  * a class, say from the class for a procedure's method making some
1:  * reference to it, then the request is delegated to UpdateLoader.
1:  * UpdateLoader will then try to load the class from each of the jars
1:  * in order of derby.database.classpath using the jar's installed JarLoader.
1:  */
0: final class UpdateLoader {
/////////////////////////////////////////////////////////////////////////
1: 		Load the class from the class path. Called by JarLoader
1:         when it has a request to load a class to fulfill
1:         the sematics of derby.database.classpath.
1:         <P>
1:         Enforces two restrictions:
1:         <UL>
1:         <LI> Do not allow classes in certain name spaces to be loaded
1:         from installed jars, see RESTRICTED_PACKAGES for the list.
1:         <LI> Referencing Derby's internal classes (those outside the
1:         public api) from installed is disallowed. This is to stop
1:         user defined routines bypassing security or taking advantage
1:         of security holes in Derby. E.g. allowing a routine to
1:         call a public method in derby would allow such routines
1:         to call public static methods for system procedures without
1:         having been granted permission on them, such as setting database
1:         properties.
1:         </UL>
1: 		@exception ClassNotFoundException Class can not be found or
1:         the installed jar is restricted from loading it.
commit:46ecfcf
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * List of packages that Derby will not support being loaded
1:      * from an installed jar file.
1:      */
1:     private static final String[] RESTRICTED_PACKAGES = {
1:         // While loading java. classes is blocked by the standard
1:         // class loading mechanism, javax. ones are not. However
1:         // allowing database applications to override jvm classes
1:         // seems a bad idea.
1:         "javax.",
1:         
1:         // Allowing an application to possible override the engine's
1:         // own classes also seems dangerous.
1:         "org.apache.derby.",
1:     };
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 // Refuse to load classes from restricted name spaces
1:                 for (int i = 0; i < RESTRICTED_PACKAGES.length; i++)
0:                 {
1:                     if (className.startsWith(RESTRICTED_PACKAGES[i]))
1:                         throw new ClassNotFoundException(className);
1:                 }
commit:5739bce
/////////////////////////////////////////////////////////////////////////
1:         
1:         // first close the existing jar file opens
1:         close();
/////////////////////////////////////////////////////////////////////////
1: 			jarList[i].setInvalid();
commit:e33b3b6
/////////////////////////////////////////////////////////////////////////
0: 				InstalledJar newJarFile = jl.setInvalid(reload);
commit:420f9d6
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
0: class UpdateLoader {
/////////////////////////////////////////////////////////////////////////
1: 	UpdateLoader(String classpath, DatabaseClasses parent, boolean verbose, boolean normalizeToUpper) 
/////////////////////////////////////////////////////////////////////////
0: 		final String[][] elements = IdUtil.parseDbClassPath(classpath, normalizeToUpper);
1: 		final int jarCount = elements.length;
1:         if (jarCount != 0) {
1:             // Creating class loaders is a restricted operation
1:             // so we need to use a privileged block.
1:             AccessController.doPrivileged
0:             (new java.security.PrivilegedAction(){
1:                 
1:                 public Object run(){    
1:     		      for (int i = 0; i < jarCount; i++) {
1:     			     jarList[i] = new JarLoader(UpdateLoader.this, elements[i], vs);
1:     		      }
1:                   return null;
1:                 }
1:             });
1:         }
/////////////////////////////////////////////////////////////////////////
1: 	Class loadClass(String className, boolean resolve) 
/////////////////////////////////////////////////////////////////////////
1: 	InputStream getResourceAsStream(String name) {
/////////////////////////////////////////////////////////////////////////
1: 	synchronized void modifyClasspath(String classpath)
/////////////////////////////////////////////////////////////////////////
1: 	synchronized void modifyJar(boolean reload) throws StandardException {
/////////////////////////////////////////////////////////////////////////
1: 	void close() {
/////////////////////////////////////////////////////////////////////////
1: 	int getClassLoaderVersion() {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.reflect.UpdateLoader
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.reflect;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.locks.ShExLockable;
1: import org.apache.derby.iapi.services.locks.ShExQual;
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: import org.apache.derby.iapi.services.locks.Latch;
1: import org.apache.derby.iapi.services.locks.C_LockFactory;
1: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
1: import org.apache.derby.iapi.services.loader.JarReader;
1: import org.apache.derby.iapi.services.property.PersistentSet;
1: 
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import java.io.InputStream;
1: 
1: import org.apache.derby.iapi.reference.MessageId;
1: import org.apache.derby.iapi.reference.Module;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
0: public class UpdateLoader {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private JarLoader[] jarList;
1: 	private HeaderPrintWriter vs;
1: 	private final ClassLoader myLoader;
1: 	private boolean initDone;
1: 	private String thisClasspath;
1: 	private final LockFactory lf;
1: 	private final ShExLockable classLoaderLock;
1: 	private int version;
1:     private boolean normalizeToUpper;
1: 	private DatabaseClasses parent;
1: 
1: 	private boolean needReload;
1: 	private JarReader jarReader;
1: 
0: 	public UpdateLoader(String classpath, DatabaseClasses parent, boolean verbose, boolean normalizeToUpper) 
1: 		throws StandardException {
1: 
1:         this.normalizeToUpper = normalizeToUpper;
1: 		this.parent = parent;
0: 		lf = (LockFactory) Monitor.getServiceModule(parent, Module.LockFactory);
1: 
1: 		if (verbose) {
1: 			vs = Monitor.getStream();
1: 		}
1: 		
1: 		myLoader = getClass().getClassLoader();
1: 
1: 		this.classLoaderLock = new ClassLoaderLock(this);
1: 
1: 		initializeFromClassPath(classpath);
1: 	}
1: 
1: 	private void initializeFromClassPath(String classpath) throws StandardException {
1: 
0: 		String[][] elements = IdUtil.parseDbClassPath(classpath, normalizeToUpper);
1: 		
0: 		int jarCount = elements.length;
1: 		jarList = new JarLoader[jarCount];
1: 			
0: 		for (int i = 0; i < jarCount; i++) {
0: 			jarList[i] = new JarLoader(this, elements[i], vs);
1: 		}
1: 
1: 		if (vs != null) {
0: 			vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOADER_START, classpath));
1: 		}
1: 		
1: 		thisClasspath = classpath;
1: 		initDone = false;
1: 	}
1: 
1: 	/**
0: 		Load the class from the class path.
1: 
0: 		@exception ClassNotFoundException Class can not be found
1: 	*/
0: 	public Class loadClass(String className, boolean resolve) 
1: 		throws ClassNotFoundException {
1: 
1: 
1: 		JarLoader jl = null;
1: 
1: 		boolean unlockLoader = false;
1: 		try {
1: 			unlockLoader = lockClassLoader(ShExQual.SH);
1: 
1: 			synchronized (this) {
1: 
1: 				if (needReload) {
1: 					reload();
1: 				}
1: 			
1: 				Class clazz = checkLoaded(className, resolve);
1: 				if (clazz != null)
1: 					return clazz;
1: 
1: 				String jvmClassName = className.replace('.', '/').concat(".class");
1: 
1: 				if (!initDone)
1: 					initLoaders();
1: 
1: 				for (int i = 0; i < jarList.length; i++) {
1: 
1: 					jl = jarList[i];
1: 
1: 					Class c = jl.loadClassData(className, jvmClassName, resolve);
1: 					if (c != null) {
1: 						if (vs != null)
1: 							vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOAD, className, jl.getJarName()));
1: 
1: 						return c;
1: 					}
1: 				}
1: 			}
1: 
1: 			return null;
1: 
1: 
1: 		} catch (StandardException se) {
1: 			throw new ClassNotFoundException(MessageService.getTextMessage(MessageId.CM_CLASS_LOAD_EXCEPTION, className, jl == null ? null : jl.getJarName(), se));
1: 		} finally {
1: 			if (unlockLoader) {
0: 				lf.unlock(this, this, classLoaderLock, ShExQual.SH);
1: 			}
1: 		}
1: 	}
1: 
0: 	public InputStream getResourceAsStream(String name) {
1: 
1: 		InputStream is = (myLoader == null) ?
1: 			ClassLoader.getSystemResourceAsStream(name) :
1: 			myLoader.getResourceAsStream(name);
1: 
1: 		if (is != null)
1: 			return is;
1: 
1: 		// match behaviour of standard class loaders. 
1: 		if (name.endsWith(".class"))
1: 			return null;
1: 
1: 		boolean unlockLoader = false;
1: 		try {
1: 			unlockLoader = lockClassLoader(ShExQual.SH);
1: 
1: 			synchronized (this) {
1: 
1: 				if (needReload) {
1: 					reload();		
1: 				}
1: 
1: 				if (!initDone)
1: 					initLoaders();
1: 
1: 				for (int i = 0; i < jarList.length; i++) {
1: 
1: 					JarLoader jl = jarList[i];
1: 
1: 					is = jl.getStream(name);
1: 					if (is != null) {
1: 						return is;
1: 					}
1: 				}
1: 			}
1: 			return null;
1: 
1: 		} catch (StandardException se) {
1: 			return null;
1: 		} finally {
1: 			if (unlockLoader) {
0: 				lf.unlock(this, this, classLoaderLock, ShExQual.SH);
1: 			}
1: 		}
1: 	}
1: 
0: 	public synchronized void modifyClasspath(String classpath)
1: 		throws StandardException {
1: 
1: 		// lock transaction classloader exclusively
1: 		lockClassLoader(ShExQual.EX);
1: 		version++;
1: 
1: 
1: 		modifyJar(false);
1: 		initializeFromClassPath(classpath);
1: 	}
1: 
1: 
0: 	public synchronized void modifyJar(boolean reload) throws StandardException {
1: 
1: 		// lock transaction classloader exclusively
1: 		lockClassLoader(ShExQual.EX);
1: 		version++;
1: 
1: 		if (!initDone)
1: 			return;
1: 
1: 		if (reload) {
0: 			//first close the existing jar file opens
1: 			close();
1: 			initializeFromClassPath(thisClasspath);
1: 			return;
1: 		}
1: 
0: 		// first thing to do is to remove all Class entries
0: 		// and then get a complete set of loaders ...
1: 		synchronized (this) {
1: 
1: 			for (int i = 0; i < jarList.length; i++) {
1: 
1: 				JarLoader jl = jarList[i];
1: 
0: 				JarFile newJarFile = jl.setInvalid(reload);
1: 			}
1: 		}
1: 	}
1: 
1: 	private boolean lockClassLoader(ShExQual qualifier)
1: 		throws StandardException {
1: 
1: 		if (lf == null)
1: 			return false;
1: 
0: 		ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContextOrNull(ClassFactoryContext.CONTEXT_ID);
1: 
1: 		// This method can be called from outside of the database
1: 		// engine, in which case tc will be null. In that case
1: 		// we lock the class loader only for the duration of
1: 		// the loadClass().
0: 		Object lockSpace = null;
1: 		
1: 		if (cfc != null) {
1: 			lockSpace = cfc.getLockSpace();
1: 		}
1: 		if (lockSpace == null)
0: 			lockSpace = this;
1: 
0: 		lf.lockObject(lockSpace, lockSpace, classLoaderLock, qualifier, C_LockFactory.TIMED_WAIT);
1: 
0: 		return (lockSpace == this);
1: 	}
1: 
1: 	Class checkLoaded(String className, boolean resolve) {
1: 
1: 		for (int i = 0; i < jarList.length; i++) {
1: 			Class c = jarList[i].checkLoaded(className, resolve);
1: 			if (c != null)
1: 				return c;
1: 		}
1: 		return null;
1: 	}
1: 
0: 	public void close() {
1: 
1: 		for (int i = 0; i < jarList.length; i++) {
0: 			jarList[i].setInvalid(false);
1: 		}
1: 
1: 	}
1: 
1: 	private void initLoaders() {
1: 
1: 		if (initDone)
1: 			return;
1: 
1: 		for (int i = 0; i < jarList.length; i++) {
1: 			jarList[i].initialize();
1: 		}
1: 		initDone = true;
1: 	}
1: 
0: 	public int getClassLoaderVersion() {
1: 		return version;
1: 	}
1: 
1: 	synchronized void needReload() {
1: 		version++;
1: 		needReload = true;
1: 	}
1: 
1: 	private void reload() throws StandardException {
1: 		thisClasspath = getClasspath();
1: 		// first close the existing jar file opens
1: 		close();
1: 		initializeFromClassPath(thisClasspath);
1: 		needReload = false;
1: 	}
1: 
1: 
1: 	private String getClasspath()
1: 		throws StandardException {
1: 
0: 		ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContextOrNull(ClassFactoryContext.CONTEXT_ID);
1: 
1: 		PersistentSet ps = cfc.getPersistentSet();
1: 		
1: 		String classpath = PropertyUtil.getServiceProperty(ps, Property.DATABASE_CLASSPATH);
1: 
1: 		//
1: 		//In per database mode we must always have a classpath. If we do not
1: 		//yet have one we make one up.
1: 		if (classpath==null)
1: 			classpath="";
1: 
1: 
1: 		return classpath;
1: 	}
1: 
1: 	JarReader getJarReader() {
1: 		if (jarReader == null) {
1: 
0: 			ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContextOrNull(ClassFactoryContext.CONTEXT_ID);
1: 
1: 			jarReader = cfc.getJarReader(); 
1: 		}
1: 		return jarReader;
1: 	}
1: }
1: 
1: 
1: class ClassLoaderLock extends ShExLockable {
1: 
1: 	private UpdateLoader myLoader;
1: 
1: 	ClassLoaderLock(UpdateLoader myLoader) {
1: 		this.myLoader = myLoader;
1: 	}
1: 
1: 	public void unlockEvent(Latch lockInfo)
0: 	{
1: 		super.unlockEvent(lockInfo);
1: 
1: 		if (lockInfo.getQualifier().equals(ShExQual.EX)) {
1: 			// how do we tell if we are reverting or not
1: 			myLoader.needReload();
1: 		}
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.reflect;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.util.IdUtil;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.locks.ShExLockable;
0: import org.apache.derby.iapi.services.locks.ShExQual;
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
0: import org.apache.derby.iapi.services.loader.JarReader;
0: import org.apache.derby.iapi.services.property.PersistentSet;
0: 
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import java.io.InputStream;
0: 
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.reference.Module;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 
0: public class UpdateLoader {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private JarLoader[] jarList;
0: 	private HeaderPrintWriter vs;
0: 	private final ClassLoader myLoader;
0: 	private boolean initDone;
0: 	private String thisClasspath;
0: 	private final LockFactory lf;
0: 	private final ShExLockable classLoaderLock;
0: 	private int version;
0:     private boolean normalizeToUpper;
0: 	private DatabaseClasses parent;
0: 
0: 	private boolean needReload;
0: 	private JarReader jarReader;
0: 
0: 	public UpdateLoader(String classpath, DatabaseClasses parent, boolean verbose, boolean normalizeToUpper) 
0: 		throws StandardException {
0: 
0:         this.normalizeToUpper = normalizeToUpper;
0: 		this.parent = parent;
0: 		lf = (LockFactory) Monitor.getServiceModule(parent, Module.LockFactory);
0: 
0: 		if (verbose) {
0: 			vs = Monitor.getStream();
0: 		}
0: 		
0: 		myLoader = getClass().getClassLoader();
0: 
0: 		this.classLoaderLock = new ClassLoaderLock(this);
0: 
0: 		initializeFromClassPath(classpath);
0: 	}
0: 
0: 	private void initializeFromClassPath(String classpath) throws StandardException {
0: 
0: 		String[][] elements = IdUtil.parseDbClassPath(classpath, normalizeToUpper);
0: 		
0: 		int jarCount = elements.length;
0: 		jarList = new JarLoader[jarCount];
0: 			
0: 		for (int i = 0; i < jarCount; i++) {
0: 			jarList[i] = new JarLoader(this, elements[i], vs);
0: 		}
0: 
0: 		if (vs != null) {
0: 			vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOADER_START, classpath));
0: 		}
0: 		
0: 		thisClasspath = classpath;
0: 		initDone = false;
0: 	}
0: 
0: 	/**
0: 		Load the class from the class path.
0: 
0: 		@exception ClassNotFoundException Class can not be found
0: 	*/
0: 	public Class loadClass(String className, boolean resolve) 
0: 		throws ClassNotFoundException {
0: 
0: 
0: 		JarLoader jl = null;
0: 
0: 		boolean unlockLoader = false;
0: 		try {
0: 			unlockLoader = lockClassLoader(ShExQual.SH);
0: 
0: 			synchronized (this) {
0: 
0: 				if (needReload) {
0: 					reload();
0: 				}
0: 			
0: 				Class clazz = checkLoaded(className, resolve);
0: 				if (clazz != null)
0: 					return clazz;
0: 
0: 				String jvmClassName = className.replace('.', '/').concat(".class");
0: 
0: 				if (!initDone)
0: 					initLoaders();
0: 
0: 				for (int i = 0; i < jarList.length; i++) {
0: 
0: 					jl = jarList[i];
0: 
0: 					Class c = jl.loadClassData(className, jvmClassName, resolve);
0: 					if (c != null) {
0: 						if (vs != null)
0: 							vs.println(MessageService.getTextMessage(MessageId.CM_CLASS_LOAD, className, jl.getJarName()));
0: 
0: 						return c;
0: 					}
0: 				}
0: 			}
0: 
0: 			return null;
0: 
0: 
0: 		} catch (StandardException se) {
0: 			throw new ClassNotFoundException(MessageService.getTextMessage(MessageId.CM_CLASS_LOAD_EXCEPTION, className, jl == null ? null : jl.getJarName(), se));
0: 		} finally {
0: 			if (unlockLoader) {
0: 				lf.unlock(this, this, classLoaderLock, ShExQual.SH);
0: 			}
0: 		}
0: 	}
0: 
0: 	public InputStream getResourceAsStream(String name) {
0: 
0: 		InputStream is = (myLoader == null) ?
0: 			ClassLoader.getSystemResourceAsStream(name) :
0: 			myLoader.getResourceAsStream(name);
0: 
0: 		if (is != null)
0: 			return is;
0: 
0: 		// match behaviour of standard class loaders. 
0: 		if (name.endsWith(".class"))
0: 			return null;
0: 
0: 		boolean unlockLoader = false;
0: 		try {
0: 			unlockLoader = lockClassLoader(ShExQual.SH);
0: 
0: 			synchronized (this) {
0: 
0: 				if (needReload) {
0: 					reload();		
0: 				}
0: 
0: 				if (!initDone)
0: 					initLoaders();
0: 
0: 				for (int i = 0; i < jarList.length; i++) {
0: 
0: 					JarLoader jl = jarList[i];
0: 
0: 					is = jl.getStream(name);
0: 					if (is != null) {
0: 						return is;
0: 					}
0: 				}
0: 			}
0: 			return null;
0: 
0: 		} catch (StandardException se) {
0: 			return null;
0: 		} finally {
0: 			if (unlockLoader) {
0: 				lf.unlock(this, this, classLoaderLock, ShExQual.SH);
0: 			}
0: 		}
0: 	}
0: 
0: 	public synchronized void modifyClasspath(String classpath)
0: 		throws StandardException {
0: 
0: 		// lock transaction classloader exclusively
0: 		lockClassLoader(ShExQual.EX);
0: 		version++;
0: 
0: 
0: 		modifyJar(false);
0: 		initializeFromClassPath(classpath);
0: 	}
0: 
0: 
0: 	public synchronized void modifyJar(boolean reload) throws StandardException {
0: 
0: 		// lock transaction classloader exclusively
0: 		lockClassLoader(ShExQual.EX);
0: 		version++;
0: 
0: 		if (!initDone)
0: 			return;
0: 
0: 		if (reload) {
0: 			//first close the existing jar file opens
0: 			close();
0: 			initializeFromClassPath(thisClasspath);
0: 			return;
0: 		}
0: 
0: 		// first thing to do is to remove all Class entries
0: 		// and then get a complete set of loaders ...
0: 		synchronized (this) {
0: 
0: 			for (int i = 0; i < jarList.length; i++) {
0: 
0: 				JarLoader jl = jarList[i];
0: 
0: 				JarFile newJarFile = jl.setInvalid(reload);
0: 			}
0: 		}
0: 	}
0: 
0: 	private boolean lockClassLoader(ShExQual qualifier)
0: 		throws StandardException {
0: 
0: 		if (lf == null)
0: 			return false;
0: 
0: 		ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContextOrNull(ClassFactoryContext.CONTEXT_ID);
0: 
0: 		// This method can be called from outside of the database
0: 		// engine, in which case tc will be null. In that case
0: 		// we lock the class loader only for the duration of
0: 		// the loadClass().
0: 		Object lockSpace = null;
0: 		
0: 		if (cfc != null) {
0: 			lockSpace = cfc.getLockSpace();
0: 		}
0: 		if (lockSpace == null)
0: 			lockSpace = this;
0: 
0: 		lf.lockObject(lockSpace, lockSpace, classLoaderLock, qualifier, C_LockFactory.TIMED_WAIT);
0: 
0: 		return (lockSpace == this);
0: 	}
0: 
0: 	Class checkLoaded(String className, boolean resolve) {
0: 
0: 		for (int i = 0; i < jarList.length; i++) {
0: 			Class c = jarList[i].checkLoaded(className, resolve);
0: 			if (c != null)
0: 				return c;
0: 		}
0: 		return null;
0: 	}
0: 
0: 	public void close() {
0: 
0: 		for (int i = 0; i < jarList.length; i++) {
0: 			jarList[i].setInvalid(false);
0: 		}
0: 
0: 	}
0: 
0: 	private void initLoaders() {
0: 
0: 		if (initDone)
0: 			return;
0: 
0: 		for (int i = 0; i < jarList.length; i++) {
0: 			jarList[i].initialize();
0: 		}
0: 		initDone = true;
0: 	}
0: 
0: 	public int getClassLoaderVersion() {
0: 		return version;
0: 	}
0: 
0: 	synchronized void needReload() {
0: 		version++;
0: 		needReload = true;
0: 	}
0: 
0: 	private void reload() throws StandardException {
0: 		thisClasspath = getClasspath();
0: 		// first close the existing jar file opens
0: 		close();
0: 		initializeFromClassPath(thisClasspath);
0: 		needReload = false;
0: 	}
0: 
0: 
0: 	private String getClasspath()
0: 		throws StandardException {
0: 
0: 		ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContextOrNull(ClassFactoryContext.CONTEXT_ID);
0: 
0: 		PersistentSet ps = cfc.getPersistentSet();
0: 		
0: 		String classpath = PropertyUtil.getServiceProperty(ps, Property.DATABASE_CLASSPATH);
0: 
0: 		//
0: 		//In per database mode we must always have a classpath. If we do not
0: 		//yet have one we make one up.
0: 		if (classpath==null)
0: 			classpath="";
0: 
0: 
0: 		return classpath;
0: 	}
0: 
0: 	JarReader getJarReader() {
0: 		if (jarReader == null) {
0: 
0: 			ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContextOrNull(ClassFactoryContext.CONTEXT_ID);
0: 
0: 			jarReader = cfc.getJarReader(); 
0: 		}
0: 		return jarReader;
0: 	}
0: }
0: 
0: 
0: class ClassLoaderLock extends ShExLockable {
0: 
0: 	private UpdateLoader myLoader;
0: 
0: 	ClassLoaderLock(UpdateLoader myLoader) {
0: 		this.myLoader = myLoader;
0: 	}
0: 
0: 	public void unlockEvent(Latch lockInfo)
0: 	{
0: 		super.unlockEvent(lockInfo);
0: 
0: 		if (lockInfo.getQualifier().equals(ShExQual.EX)) {
0: 			// how do we tell if we are reverting or not
0: 			myLoader.needReload();
0: 		}
0: 	}
0: }
============================================================================