1:04f8e95: /*
2:04f8e95:  
1:04f8e95:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.Wrapper41
1:04f8e95:  
1:04f8e95:    Licensed to the Apache Software Foundation (ASF) under one or more
1:04f8e95:    contributor license agreements.  See the NOTICE file distributed with
1:04f8e95:    this work for additional information regarding copyright ownership.
1:04f8e95:    The ASF licenses this file to you under the Apache License, Version 2.0
1:04f8e95:    (the "License"); you may not use this file except in compliance with
1:04f8e95:    the License.  You may obtain a copy of the License at
1:04f8e95:  
1:04f8e95:       http://www.apache.org/licenses/LICENSE-2.0
1:04f8e95:  
1:04f8e95:    Unless required by applicable law or agreed to in writing, software
1:04f8e95:    distributed under the License is distributed on an "AS IS" BASIS,
1:04f8e95:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04f8e95:    See the License for the specific language governing permissions and
1:04f8e95:    limitations under the License.
1:04f8e95:  
1:04f8e95:  */
1:04f8e95: 
1:04f8e95: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:04f8e95: 
1:04f8e95: import java.sql.SQLException;
1:9a0cdf1: import org.apache.derby.client.am.ClientCallableStatement;
1:9a0cdf1: import org.apache.derby.client.am.ClientResultSet;
1:9a0cdf1: import org.apache.derby.client.am.LogicalCallableStatement;
1:863daa0: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
1:b5f2776: import org.apache.derby.impl.jdbc.EmbedCallableStatement;
1:8514aa2: import org.apache.derby.impl.jdbc.EmbedResultSet;
1:04f8e95: 
1:04f8e95: /**
1:04f8e95:  * A wrapper around the getObject() overloads added by JDBC 4.1.
1:04f8e95:  * We can eliminate this class after Java 7 goes GA and we are allowed
1:04f8e95:  * to use the Java 7 compiler to build our released versions of derbyTesting.jar.
1:04f8e95:  */
1:04f8e95: public  class   Wrapper41
1:04f8e95: {
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95:     //
1:04f8e95:     // STATE
1:04f8e95:     //
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95: 
1:8514aa2:     private EmbedResultSet    _embedded;
1:9a0cdf1:     private ClientResultSet      _netclient;
1:b5f2776:     private EmbedCallableStatement _embedCallableStatement;
1:9a0cdf1:     private ClientCallableStatement _callableStatement;
1:863daa0:     private BrokeredCallableStatement _brokeredCallableStatement;
1:9a0cdf1:     private LogicalCallableStatement _logicalCallableStatement;
1:04f8e95:     
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95:     //
1:04f8e95:     // CONSTRUCTORS
1:04f8e95:     //
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95: 
1:04f8e95:     public Wrapper41( Object wrapped ) throws Exception
1:04f8e95:     {
1:8514aa2:         if ( wrapped instanceof EmbedResultSet ) { _embedded = (EmbedResultSet) wrapped; }
1:b5f2776:         else if ( wrapped instanceof EmbedCallableStatement ) { _embedCallableStatement = (EmbedCallableStatement) wrapped; }
1:863daa0:         else if ( wrapped instanceof BrokeredCallableStatement ) { _brokeredCallableStatement = (BrokeredCallableStatement) wrapped; }
1:9a0cdf1:         else if ( wrapped instanceof ClientResultSet ) { _netclient = (ClientResultSet) wrapped; }
1:9a0cdf1:         else if ( wrapped instanceof ClientCallableStatement ) { _callableStatement = (ClientCallableStatement) wrapped; }
1:9a0cdf1:         else if ( wrapped instanceof LogicalCallableStatement ) { _logicalCallableStatement = (LogicalCallableStatement) wrapped; }
1:04f8e95:         else { throw nothingWrapped(); }
1:04f8e95:     }
1:04f8e95:     
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95:     //
1:04f8e95:     // JDBC 4.1 BEHAVIOR
1:04f8e95:     //
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95: 
1:04f8e95:     public  <T> T getObject( int columnIndex, Class<T> type ) throws SQLException
1:04f8e95:     {
1:04f8e95:         if ( _embedded != null ) { return _embedded.getObject( columnIndex, type ); }
1:04f8e95:         else if ( _netclient != null ) { return _netclient.getObject( columnIndex, type ); }
1:04f8e95:         else if ( _embedCallableStatement != null ) { return _embedCallableStatement.getObject( columnIndex, type ); }
1:04f8e95:         else if ( _callableStatement != null ) { return _callableStatement.getObject( columnIndex, type ); }
1:04f8e95:         else if ( _brokeredCallableStatement != null ) { return _brokeredCallableStatement.getObject( columnIndex, type ); }
1:04f8e95:         else if ( _logicalCallableStatement != null ) { return _logicalCallableStatement.getObject( columnIndex, type ); }
1:04f8e95:         else { throw nothingWrapped(); }
1:04f8e95:     }
1:04f8e95:     public  <T> T getObject( String columnName, Class<T> type )
1:04f8e95:         throws SQLException
1:04f8e95:     {
1:04f8e95:         if ( _embedded != null ) { return _embedded.getObject( columnName, type ); }
1:04f8e95:         else if ( _netclient != null ) { return _netclient.getObject( columnName, type ); }
1:04f8e95:         else if ( _embedCallableStatement != null ) { return _embedCallableStatement.getObject( columnName, type ); }
1:04f8e95:         else if ( _callableStatement != null ) { return _callableStatement.getObject( columnName, type ); }
1:04f8e95:         else if ( _brokeredCallableStatement != null ) { return _brokeredCallableStatement.getObject( columnName, type ); }
1:04f8e95:         else if ( _logicalCallableStatement != null ) { return _logicalCallableStatement.getObject( columnName, type ); }
1:04f8e95:         else { throw nothingWrapped(); }
1:04f8e95:     }
1:04f8e95:     
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95:     //
1:04f8e95:     // OTHER PUBLIC BEHAVIOR
1:04f8e95:     //
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95: 
1:04f8e95:     public Object   getWrappedObject() throws SQLException
1:04f8e95:     {
1:04f8e95:         if ( _embedded != null ) { return _embedded; }
1:04f8e95:         else if ( _netclient != null ) { return _netclient; }
1:04f8e95:         else if ( _embedCallableStatement != null ) { return _embedCallableStatement; }
1:04f8e95:         else if ( _callableStatement != null ) { return _callableStatement; }
1:04f8e95:         else if ( _brokeredCallableStatement != null ) { return _brokeredCallableStatement; }
1:04f8e95:         else if ( _logicalCallableStatement != null ) { return _logicalCallableStatement; }
1:04f8e95:         else { throw nothingWrapped(); }
1:04f8e95:     }
1:04f8e95: 
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95:     //
1:04f8e95:     // MINIONS
1:04f8e95:     //
1:04f8e95:     ///////////////////////////////////////////////////////////////////////
1:04f8e95: 
1:04f8e95:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1:04f8e95: 
1:04f8e95: }
1:04f8e95: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:863daa0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
/////////////////////////////////////////////////////////////////////////
1:     private BrokeredCallableStatement _brokeredCallableStatement;
/////////////////////////////////////////////////////////////////////////
1:         else if ( wrapped instanceof BrokeredCallableStatement ) { _brokeredCallableStatement = (BrokeredCallableStatement) wrapped; }
commit:8514aa2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.EmbedResultSet;
/////////////////////////////////////////////////////////////////////////
1:     private EmbedResultSet    _embedded;
/////////////////////////////////////////////////////////////////////////
1:         if ( wrapped instanceof EmbedResultSet ) { _embedded = (EmbedResultSet) wrapped; }
commit:b5f2776
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.EmbedCallableStatement;
/////////////////////////////////////////////////////////////////////////
1:     private EmbedCallableStatement _embedCallableStatement;
/////////////////////////////////////////////////////////////////////////
1:         else if ( wrapped instanceof EmbedCallableStatement ) { _embedCallableStatement = (EmbedCallableStatement) wrapped; }
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientCallableStatement;
1: import org.apache.derby.client.am.ClientResultSet;
1: import org.apache.derby.client.am.LogicalCallableStatement;
0: import org.apache.derby.impl.jdbc.EmbedCallableStatement40;
0: import org.apache.derby.impl.jdbc.EmbedResultSet40;
/////////////////////////////////////////////////////////////////////////
1:     private ClientResultSet      _netclient;
1:     private ClientCallableStatement _callableStatement;
1:     private LogicalCallableStatement _logicalCallableStatement;
/////////////////////////////////////////////////////////////////////////
1:         else if ( wrapped instanceof ClientResultSet ) { _netclient = (ClientResultSet) wrapped; }
1:         else if ( wrapped instanceof ClientCallableStatement ) { _callableStatement = (ClientCallableStatement) wrapped; }
1:         else if ( wrapped instanceof LogicalCallableStatement ) { _logicalCallableStatement = (LogicalCallableStatement) wrapped; }
commit:fd0edf9
/////////////////////////////////////////////////////////////////////////
0:         else if ( wrapped instanceof NetResultSet40 ) { _netclient = (NetResultSet40) wrapped; }
0:         else if ( wrapped instanceof CallableStatement40 ) { _callableStatement = (CallableStatement40) wrapped; }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.ClientCallableStatement40;
/////////////////////////////////////////////////////////////////////////
0:     private ClientCallableStatement40 _callableStatement;
/////////////////////////////////////////////////////////////////////////
0:         else if ( wrapped instanceof ClientCallableStatement40 ) { _callableStatement = (ClientCallableStatement40) wrapped; }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:04f8e95
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.Wrapper41
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.sql.SQLException;
1: 
0: import org.apache.derby.impl.jdbc.EmbedResultSet40;
0: import org.apache.derby.client.net.NetResultSet40;
0: import org.apache.derby.impl.jdbc.EmbedCallableStatement40;
0: import org.apache.derby.client.am.CallableStatement40;
0: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement40;
0: import org.apache.derby.client.am.LogicalCallableStatement40;
1: 
1: /**
1:  * A wrapper around the getObject() overloads added by JDBC 4.1.
1:  * We can eliminate this class after Java 7 goes GA and we are allowed
1:  * to use the Java 7 compiler to build our released versions of derbyTesting.jar.
1:  */
1: public  class   Wrapper41
1: {
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
0:     private EmbedResultSet40    _embedded;
0:     private NetResultSet40      _netclient;
0:     private EmbedCallableStatement40 _embedCallableStatement;
0:     private CallableStatement40 _callableStatement;
0:     private BrokeredCallableStatement40 _brokeredCallableStatement;
0:     private LogicalCallableStatement40 _logicalCallableStatement;
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public Wrapper41( Object wrapped ) throws Exception
1:     {
0:         if ( wrapped instanceof EmbedResultSet40 ) { _embedded = (EmbedResultSet40) wrapped; }
0:         else if ( wrapped instanceof NetResultSet40 ) { _netclient = (NetResultSet40) wrapped; }
0:         else if ( wrapped instanceof EmbedCallableStatement40 ) { _embedCallableStatement = (EmbedCallableStatement40) wrapped; }
0:         else if ( wrapped instanceof CallableStatement40 ) { _callableStatement = (CallableStatement40) wrapped; }
0:         else if ( wrapped instanceof BrokeredCallableStatement40 ) { _brokeredCallableStatement = (BrokeredCallableStatement40) wrapped; }
0:         else if ( wrapped instanceof LogicalCallableStatement40 ) { _logicalCallableStatement = (LogicalCallableStatement40) wrapped; }
1:         else { throw nothingWrapped(); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // JDBC 4.1 BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public  <T> T getObject( int columnIndex, Class<T> type ) throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded.getObject( columnIndex, type ); }
1:         else if ( _netclient != null ) { return _netclient.getObject( columnIndex, type ); }
1:         else if ( _embedCallableStatement != null ) { return _embedCallableStatement.getObject( columnIndex, type ); }
1:         else if ( _callableStatement != null ) { return _callableStatement.getObject( columnIndex, type ); }
1:         else if ( _brokeredCallableStatement != null ) { return _brokeredCallableStatement.getObject( columnIndex, type ); }
1:         else if ( _logicalCallableStatement != null ) { return _logicalCallableStatement.getObject( columnIndex, type ); }
1:         else { throw nothingWrapped(); }
1:     }
1:     public  <T> T getObject( String columnName, Class<T> type )
1:         throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded.getObject( columnName, type ); }
1:         else if ( _netclient != null ) { return _netclient.getObject( columnName, type ); }
1:         else if ( _embedCallableStatement != null ) { return _embedCallableStatement.getObject( columnName, type ); }
1:         else if ( _callableStatement != null ) { return _callableStatement.getObject( columnName, type ); }
1:         else if ( _brokeredCallableStatement != null ) { return _brokeredCallableStatement.getObject( columnName, type ); }
1:         else if ( _logicalCallableStatement != null ) { return _logicalCallableStatement.getObject( columnName, type ); }
1:         else { throw nothingWrapped(); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public Object   getWrappedObject() throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded; }
1:         else if ( _netclient != null ) { return _netclient; }
1:         else if ( _embedCallableStatement != null ) { return _embedCallableStatement; }
1:         else if ( _callableStatement != null ) { return _callableStatement; }
1:         else if ( _brokeredCallableStatement != null ) { return _brokeredCallableStatement; }
1:         else if ( _logicalCallableStatement != null ) { return _logicalCallableStatement; }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1: 
1: }
1: 
============================================================================