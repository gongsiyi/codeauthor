1:2981b19: /*
7:2981b19: 
1:2981b19:    Derby - Class org.apache.derbyBuild.ReleaseNoteReader
1:2981b19: 
1:2981b19:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2981b19:    contributor license agreements.  See the NOTICE file distributed with
1:2981b19:    this work for additional information regarding copyright ownership.
1:2981b19:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2981b19:    (the "License"); you may not use this file except in compliance with
1:2981b19:    the License.  You may obtain a copy of the License at
1:2981b19: 
1:2981b19:       http://www.apache.org/licenses/LICENSE-2.0
1:2981b19: 
1:2981b19:    Unless required by applicable law or agreed to in writing, software
1:2981b19:    distributed under the License is distributed on an "AS IS" BASIS,
1:2981b19:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2981b19:    See the License for the specific language governing permissions and
1:2981b19:    limitations under the License.
1:2981b19: 
2:2981b19:  */
1:2981b19: 
1:2981b19: package org.apache.derbyBuild;
1:2981b19: 
1:2981b19: import java.io.*;
1:2981b19: import javax.xml.parsers.*;
1:2981b19: import org.w3c.dom.*;
1:2981b19: 
2:2981b19: /**
2:2981b19:  * <p>
1:2981b19:  * This tool reads a release note from a stream. When run standalone, this is
1:2981b19:  * a file stream. When run from the ReleaseNoteGenerator, the stream is opened
1:2981b19:  * on the URL of a release note stored in JIRA. The purpose of this class it to
1:2981b19:  * help people verify that their release notes can be digested by the ReleaseNoteGenerator.
2:2981b19:  * </p>
1:2981b19:  */
1:2981b19: public class ReleaseNoteReader
5:2981b19: {
1:2981b19:     /////////////////////////////////////////////////////////////////////////
3:2981b19:     //
1:2981b19:     //  CONSTANTS
1:2981b19:     //
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19:     
1:2981b19:     private static  final   String  USAGE =
1:2981b19:         "Usage:\n" +
1:2981b19:         "\n" +
1:2981b19:         "  java org.apache.derbyBuild.ReleaseNoteReader RELEASE_NOTE_FILE\n" +
1:2981b19:         "\n" +
1:2981b19:         "    where\n" +
1:2981b19:         "                  RELEASE_NOTE_FILE is the name of the file which holds the release note\n";
1:2981b19: 
1:2981b19: 
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19:     //
1:2981b19:     //  STATE
1:2981b19:     //
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19: 
1:2981b19:     private DocumentBuilder _documentBuilder;
1:2981b19: 
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19:     //
1:2981b19:     //  CONSTRUCTORS
1:2981b19:     //
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19: 
1:2981b19:     public ReleaseNoteReader( DocumentBuilder documentBuilder )
1:2981b19:     {
1:2981b19:         _documentBuilder = documentBuilder;
5:2981b19:     }
1:2981b19:         
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19:     //
1:2981b19:     //  MAIN
1:2981b19:     //
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19: 
1:2981b19:    /**
1:2981b19:     * The program entry point exercises all of the checks which
1:2981b19:     * would be performed by the ReleaseNoteGenerator on this
1:2981b19:     * particular release note. Takes one argument, the name of
1:2981b19:     * the file which holds the release note.
1:2981b19:     */
1:2981b19:     public  static void main( String[] args )
4:2981b19:         throws Exception
1:2981b19:     {
1:2981b19:         if ( (args == null) || (args.length != 1) )
1:2981b19:         {
1:2981b19:             println( USAGE );
1:2981b19:             System.exit(1);
1:2981b19:         }
1:2981b19: 
1:2981b19:         String                                  fileName = args[ 0 ];
1:2981b19:         FileInputStream                 fis = new FileInputStream( fileName );
1:2981b19:         DocumentBuilderFactory  factory = DocumentBuilderFactory.newInstance();
1:2981b19:         DocumentBuilder              builder = factory.newDocumentBuilder();
1:2981b19:         ReleaseNoteReader           me = new ReleaseNoteReader( builder );
1:2981b19: 
1:2981b19:         // here are the checks we perform
1:2981b19:         Document                        doc = me.getReleaseNote( fis );
1:4c14d1b:         Element                           summary = me.getReleaseNoteSummary( doc );
1:2981b19:         Element                         details = me.getReleaseNoteDetails( doc );
1:2981b19: 
1:4a57be6:         me.forbidBlockQuotes( doc );
1:4a57be6: 
1:2981b19:         // if you get this far, then everything worked
1:2981b19: 
1:2981b19:         println( "\n" + fileName + " passes the currently known checks performed by the release note generator.\n" );
1:2981b19:     }
1:2981b19:     
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19:     //
1:2981b19:     //  BEHAVIOR CALLED BY ReleaseNoteGenerator
1:2981b19:     //
1:2981b19:     /////////////////////////////////////////////////////////////////////////
1:2981b19: 
1:2981b19:     /**
1:2981b19:      * <p>
1:2981b19:      * Get the release note for an issue.
1:2981b19:      * </p>
1:2981b19:      */
1:2981b19:     public Document   getReleaseNote( InputStream is )
1:2981b19:         throws Exception
1:2981b19:     {
1:2981b19:         Document        doc = _documentBuilder.parse( is );
1:2981b19: 
1:2981b19:         is.close();
1:2981b19:         
1:2981b19:         return doc;
1:2981b19:     }
1:2981b19: 
1:2981b19:     /**
1:2981b19:      * <p>
1:4c14d1b:      * Get the summary paragraph for a release note
1:2981b19:      * </p>
1:2981b19:      */
1:4c14d1b:     public Element   getReleaseNoteSummary( Document releaseNote )
1:2981b19:         throws Exception
1:2981b19:     {
1:2981b19:         //
1:2981b19:         // The release note has the following structure:
1:2981b19:         //
1:2981b19:         // <h4>Summary of Change</h4>
1:2981b19:         // <p>
1:2981b19:         //  Summary text
1:2981b19:         // </p>
1:2981b19:         //
1:2981b19:         Element     root = releaseNote.getDocumentElement();
1:d76e238:         Element     summaryParagraph = GeneratorBase.getFirstChild( root, GeneratorBase.PARAGRAPH );
1:2981b19: 
1:4c14d1b:         return summaryParagraph;
1:2981b19:     }
1:2981b19:  
1:2981b19:     /**
1:2981b19:      * <p>
1:2981b19:      * Get the detail section for a release note
1:2981b19:      * </p>
1:2981b19:      */
1:2981b19:     public Element   getReleaseNoteDetails( Document releaseNote )
1:2981b19:         throws Exception
1:2981b19:     {
1:2981b19:         Element     root = releaseNote.getDocumentElement();
1:d76e238:         Element     details = GeneratorBase.getFirstChild( root, GeneratorBase.BODY );
1:2981b19: 
1:2981b19:         return details;
1:2981b19:     }
1:2981b19: 
1:4a57be6:     /**
1:4a57be6:      * <p>
1:4a57be6:      * Forbid BLOCKQUOTEs for accessibility reasons. See http://www.w3.org/TR/WCAG10/#gl-structure-presentation
1:4a57be6:      * </p>
1:4a57be6:      */
1:4a57be6:     private void    forbidBlockQuotes( Document releaseNote )   throws Exception
1:4a57be6:     {
1:4a57be6:         Element     root = releaseNote.getDocumentElement();
1:4a57be6:         String          errorMessage = "For accessibility reasons, blockquotes are not allowed. Please remove the blockquote tags.";
1:4a57be6: 
1:4a57be6:         forbid( root, "BLOCKQUOTE", errorMessage );
1:4a57be6:         forbid( root, "blockquote", errorMessage );
1:4a57be6:     }
1:4a57be6:     private void    forbid( Element root, String tag, String errorMessage ) throws Exception
1:4a57be6:     {
1:4a57be6:         NodeList    tags = root.getElementsByTagName( tag );
1:4a57be6: 
1:4a57be6:         if ( (tags != null) && (tags.getLength() > 0) )
1:4a57be6:         {
1:4a57be6:             throw new Exception( errorMessage );
1:4a57be6:         }
1:4a57be6:     }
1:2981b19: 
3:2981b19:     ////////////////////////////////////////////////////////
1:2981b19:     //
1:2981b19:     // MISC MINIONS
1:2981b19:     //
1:2981b19:     ////////////////////////////////////////////////////////
1:2981b19: 
1:2981b19:     private  static void    println( String text )
1:2981b19:     {
1:2981b19:         System.out.println( text );
1:2981b19:     }
1:2981b19: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4a57be6
/////////////////////////////////////////////////////////////////////////
1:         me.forbidBlockQuotes( doc );
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Forbid BLOCKQUOTEs for accessibility reasons. See http://www.w3.org/TR/WCAG10/#gl-structure-presentation
1:      * </p>
1:      */
1:     private void    forbidBlockQuotes( Document releaseNote )   throws Exception
1:     {
1:         Element     root = releaseNote.getDocumentElement();
1:         String          errorMessage = "For accessibility reasons, blockquotes are not allowed. Please remove the blockquote tags.";
1: 
1:         forbid( root, "BLOCKQUOTE", errorMessage );
1:         forbid( root, "blockquote", errorMessage );
1:     }
1:     private void    forbid( Element root, String tag, String errorMessage ) throws Exception
1:     {
1:         NodeList    tags = root.getElementsByTagName( tag );
1: 
1:         if ( (tags != null) && (tags.getLength() > 0) )
1:         {
1:             throw new Exception( errorMessage );
1:         }
1:     }
commit:4c14d1b
/////////////////////////////////////////////////////////////////////////
1:         Element                           summary = me.getReleaseNoteSummary( doc );
/////////////////////////////////////////////////////////////////////////
1:      * Get the summary paragraph for a release note
1:     public Element   getReleaseNoteSummary( Document releaseNote )
/////////////////////////////////////////////////////////////////////////
1:         return summaryParagraph;
commit:2981b19
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.ReleaseNoteReader
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyBuild;
1: 
1: import java.io.*;
0: import java.net.URL;
0: import java.util.ArrayList;
1: import javax.xml.parsers.*;
0: import javax.xml.transform.*;
0: import javax.xml.transform.dom.*;
0: import javax.xml.transform.stream.*;
1: import org.w3c.dom.*;
1: 
1: /**
1:  * <p>
1:  * This tool reads a release note from a stream. When run standalone, this is
1:  * a file stream. When run from the ReleaseNoteGenerator, the stream is opened
1:  * on the URL of a release note stored in JIRA. The purpose of this class it to
1:  * help people verify that their release notes can be digested by the ReleaseNoteGenerator.
1:  * </p>
1:  */
1: public class ReleaseNoteReader
1: {
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1:     
1:     private static  final   String  USAGE =
1:         "Usage:\n" +
1:         "\n" +
1:         "  java org.apache.derbyBuild.ReleaseNoteReader RELEASE_NOTE_FILE\n" +
1:         "\n" +
1:         "    where\n" +
1:         "                  RELEASE_NOTE_FILE is the name of the file which holds the release note\n";
1: 
0:     private static  final   String  PARAGRAPH = "p";
0:     private static  final   String  BODY = "body";
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private DocumentBuilder _documentBuilder;
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTORS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     public ReleaseNoteReader( DocumentBuilder documentBuilder )
1:     {
1:         _documentBuilder = documentBuilder;
1:     }
1:         
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MAIN
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:    /**
1:     * The program entry point exercises all of the checks which
1:     * would be performed by the ReleaseNoteGenerator on this
1:     * particular release note. Takes one argument, the name of
1:     * the file which holds the release note.
1:     */
1:     public  static void main( String[] args )
1:         throws Exception
1:     {
1:         if ( (args == null) || (args.length != 1) )
1:         {
1:             println( USAGE );
1:             System.exit(1);
1:         }
1: 
1:         String                                  fileName = args[ 0 ];
1:         FileInputStream                 fis = new FileInputStream( fileName );
1:         DocumentBuilderFactory  factory = DocumentBuilderFactory.newInstance();
1:         DocumentBuilder              builder = factory.newDocumentBuilder();
1:         ReleaseNoteReader           me = new ReleaseNoteReader( builder );
1: 
1:         // here are the checks we perform
1:         Document                        doc = me.getReleaseNote( fis );
0:         String                              summary = me.getReleaseNoteSummary( doc );
1:         Element                         details = me.getReleaseNoteDetails( doc );
1: 
1:         // if you get this far, then everything worked
1: 
1:         println( "\n" + fileName + " passes the currently known checks performed by the release note generator.\n" );
1:     }
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  BEHAVIOR CALLED BY ReleaseNoteGenerator
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the release note for an issue.
1:      * </p>
1:      */
1:     public Document   getReleaseNote( InputStream is )
1:         throws Exception
1:     {
1:         Document        doc = _documentBuilder.parse( is );
1: 
1:         is.close();
1:         
1:         return doc;
1:     }
1: 
1:     /**
1:      * <p>
0:      * Get the summary for a release note
1:      * </p>
1:      */
0:     public String   getReleaseNoteSummary( Document releaseNote )
1:         throws Exception
1:     {
1:         //
1:         // The release note has the following structure:
1:         //
1:         // <h4>Summary of Change</h4>
1:         // <p>
1:         //  Summary text
1:         // </p>
1:         //
1:         Element     root = releaseNote.getDocumentElement();
0:         Element     summaryParagraph = getFirstChild( root, PARAGRAPH );
0:         String          summaryText = squeezeText( summaryParagraph );
1: 
0:         return summaryText;
1:     }
1:  
1:     /**
1:      * <p>
1:      * Get the detail section for a release note
1:      * </p>
1:      */
1:     public Element   getReleaseNoteDetails( Document releaseNote )
1:         throws Exception
1:     {
1:         Element     root = releaseNote.getDocumentElement();
0:         Element     details = getFirstChild( root, BODY );
1: 
1:         return details;
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
0:     // XML MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
0:     private Element getFirstChild( Element node, String childName )
1:         throws Exception
1:     {
0:         Element retval = getOptionalChild( node, childName );
1: 
0:         if ( retval == null )
1:         {
0:             throw new Exception( "Could not find child element '" + childName + "' in parent element '" + node.getNodeName() + "'." );
1:         }
1: 
0:         return retval;
1:     }
1: 
0:     private Element getOptionalChild( Element node, String childName )
1:         throws Exception
1:     {
0:         return (Element) node.getElementsByTagName( childName ).item( 0 );
1:     }
1: 
1:     /**
1:      * <p>
0:      * Squeeze the text out of an Element.
1:      * </p>
1:      */
0:     private String squeezeText( Element node )
1:         throws Exception
1:     {
0:         Node        textChild = node.getFirstChild();
0:         String      text = textChild.getNodeValue();
1: 
0:         return text;
1:     }
1: 
1:    ////////////////////////////////////////////////////////
1:     //
1:     // MISC MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     private  static void    println( String text )
1:     {
1:         System.out.println( text );
1:     }
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:d76e238
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Element     summaryParagraph = GeneratorBase.getFirstChild( root, GeneratorBase.PARAGRAPH );
/////////////////////////////////////////////////////////////////////////
1:         Element     details = GeneratorBase.getFirstChild( root, GeneratorBase.BODY );
0: 
============================================================================