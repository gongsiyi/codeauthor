1:9bbe2e4: /*
1:9bbe2e4:  
1:9bbe2e4:  Derby - Class org.apache.derbyTesting.system.sttest.Setup
1:9bbe2e4:  
1:9bbe2e4:  Licensed to the Apache Software Foundation (ASF) under one or more
1:9bbe2e4:  contributor license agreements.  See the NOTICE file distributed with
1:9bbe2e4:  this work for additional information regarding copyright ownership.
1:9bbe2e4:  The ASF licenses this file to You under the Apache License, Version 2.0
1:9bbe2e4:  (the "License"); you may not use this file except in compliance with
1:9bbe2e4:  the License.  You may obtain a copy of the License at
1:9bbe2e4:  
1:9bbe2e4:  http://www.apache.org/licenses/LICENSE-2.0
1:9bbe2e4:  
1:9bbe2e4:  Unless required by applicable law or agreed to in writing, software
1:9bbe2e4:  distributed under the License is distributed on an "AS IS" BASIS,
1:9bbe2e4:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9bbe2e4:  See the License for the specific language governing permissions and
1:9bbe2e4:  limitations under the License.
1:9bbe2e4:  
1:9bbe2e4:  */
1:9bbe2e4: package org.apache.derbyTesting.system.sttest.utils;
1:9bbe2e4: 
1:9bbe2e4: import java.sql.Connection;
1:9bbe2e4: import java.sql.DriverManager;
1:9bbe2e4: import java.sql.ResultSet;
1:9bbe2e4: import java.sql.SQLException;
1:9bbe2e4: import java.sql.Statement;
1:9bbe2e4: 
1:9bbe2e4: import org.apache.derby.tools.JDBCDisplayUtil;
1:9bbe2e4: 
1:9bbe2e4: /**
1:9bbe2e4:  * creates database and builds single user table with indexes
1:9bbe2e4:  */
1:9bbe2e4: public class Setup {
1:9bbe2e4: 	public static boolean doit(String dbURL) throws Throwable {
1:9bbe2e4: 		Connection conn = null;
1:9bbe2e4: 		Statement s = null;
1:9bbe2e4: 		ResultSet rs = null;
1:9bbe2e4: 		boolean finished = false;
1:9bbe2e4: 		System.out.println("dbsetup start");
1:9bbe2e4: 		try {
1:9bbe2e4: 			conn = DriverManager.getConnection(dbURL + ";create=true");
1:9bbe2e4: 			conn.setAutoCommit(false);
1:9bbe2e4: 			conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:9bbe2e4: 		} catch (SQLException se) {
1:9bbe2e4: 			System.out.println("connect failed for " + dbURL);
1:9bbe2e4: 			JDBCDisplayUtil.ShowException(System.out, se);
1:9bbe2e4: 			return (false);
1:9bbe2e4: 		}
1:9bbe2e4: 		try {
1:9bbe2e4: 			s = conn.createStatement();
1:9bbe2e4: 			rs = s.executeQuery("select tablename from sys.systables "
1:9bbe2e4: 					+ " where tablename = 'DATATYPES'");
1:9bbe2e4: 			if (rs.next()) {
1:9bbe2e4: 				rs.close();
1:9bbe2e4: 				System.out.println("table 'DATATYPES' already exists");
1:9bbe2e4: 				finished = true;
1:9bbe2e4: 			}
1:9bbe2e4: 		} catch (SQLException se) {
1:9bbe2e4: 			System.out.println("create table: FAIL -- unexpected exception:");
1:9bbe2e4: 			JDBCDisplayUtil.ShowException(System.out, se);
1:9bbe2e4: 			return (false);
1:9bbe2e4: 		}
1:9bbe2e4: 		if (finished == false)
1:9bbe2e4: 			try {
1:9bbe2e4: 				System.out.println("creating table 'DATATYPES'");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create table Datatypes ("
1:9bbe2e4: 						+ "id int not null,"
1:9bbe2e4: 						+ "t_char char(100),"
1:9bbe2e4: 						+ "t_blob blob(100K),"
1:9bbe2e4: 						+ "t_clob clob(100K),"
1:9bbe2e4: 						+ "t_date date,"
1:9bbe2e4: 						+ "t_decimal decimal,"
1:9bbe2e4: 						+ "t_decimal_nn decimal(10,10),"
1:9bbe2e4: 						+ "t_double double precision,"
1:9bbe2e4: 						+ "t_float float,"
1:9bbe2e4: 						+ "t_int int,"
1:9bbe2e4: 						+ "t_longint bigint,"
1:9bbe2e4: 						+ "t_numeric_large numeric(31,0),"
1:9bbe2e4: 						+ "t_real real,"
1:9bbe2e4: 						+ "t_smallint smallint,"
1:9bbe2e4: 						+ "t_time time,"
1:9bbe2e4: 						+ "t_timestamp timestamp,"
1:9bbe2e4: 						+ "t_varchar varchar(100),"
1:9bbe2e4: 						+ "serialkey bigint generated always as identity (start with 1,increment by 1),"
1:9bbe2e4: 						+ "unique (serialkey), " + "unique (id))");
1:9bbe2e4: 				s.execute("create index t_char_ind on Datatypes ( t_char)");
1:9bbe2e4: 				s.execute("create index t_date_ind on Datatypes ( t_date)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_decimal_ind on Datatypes ( t_decimal)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_decimal_nn_ind on Datatypes ( t_decimal_nn)");
1:9bbe2e4: 				s.execute("create index t_double_ind on Datatypes ( t_double)");
1:9bbe2e4: 				s.execute("create index t_float_ind on Datatypes ( t_float)");
1:9bbe2e4: 				s.execute("create index t_int_ind on Datatypes ( t_int)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_longint_ind on Datatypes ( t_longint)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_numeric_larg_ind on Datatypes ( t_numeric_large)");
1:9bbe2e4: 				s.execute("create index t_real_ind on Datatypes ( t_real)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_smallint_ind on Datatypes ( t_smallint)");
1:9bbe2e4: 				s.execute("create index t_time_ind on Datatypes ( t_time)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_timestamp_ind on Datatypes ( t_timestamp)");
1:9bbe2e4: 				s
1:9bbe2e4: 				.execute("create index t_varchar_ind on Datatypes ( t_varchar)");
1:9bbe2e4: 				conn.commit();
1:9bbe2e4: 				conn.close();
1:9bbe2e4: 			} catch (SQLException se) {
1:9bbe2e4: 				System.out
1:9bbe2e4: 				.println("create table: FAIL -- unexpected exception:");
1:9bbe2e4: 				JDBCDisplayUtil.ShowException(System.out, se);
1:9bbe2e4: 				return (false);
1:9bbe2e4: 			}
1:9bbe2e4: 			return (true);
1:9bbe2e4: 	}
1:9bbe2e4: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:9bbe2e4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.system.sttest.Setup
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.system.sttest.utils;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:  * creates database and builds single user table with indexes
1:  */
1: public class Setup {
1: 	public static boolean doit(String dbURL) throws Throwable {
1: 		Connection conn = null;
1: 		Statement s = null;
1: 		ResultSet rs = null;
1: 		boolean finished = false;
1: 		System.out.println("dbsetup start");
1: 		try {
1: 			conn = DriverManager.getConnection(dbURL + ";create=true");
1: 			conn.setAutoCommit(false);
1: 			conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 		} catch (SQLException se) {
1: 			System.out.println("connect failed for " + dbURL);
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			return (false);
1: 		}
1: 		try {
1: 			s = conn.createStatement();
1: 			rs = s.executeQuery("select tablename from sys.systables "
1: 					+ " where tablename = 'DATATYPES'");
1: 			if (rs.next()) {
1: 				rs.close();
1: 				System.out.println("table 'DATATYPES' already exists");
1: 				finished = true;
1: 			}
1: 		} catch (SQLException se) {
1: 			System.out.println("create table: FAIL -- unexpected exception:");
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			return (false);
1: 		}
1: 		if (finished == false)
1: 			try {
1: 				System.out.println("creating table 'DATATYPES'");
1: 				s
1: 				.execute("create table Datatypes ("
1: 						+ "id int not null,"
1: 						+ "t_char char(100),"
1: 						+ "t_blob blob(100K),"
1: 						+ "t_clob clob(100K),"
1: 						+ "t_date date,"
1: 						+ "t_decimal decimal,"
1: 						+ "t_decimal_nn decimal(10,10),"
1: 						+ "t_double double precision,"
1: 						+ "t_float float,"
1: 						+ "t_int int,"
1: 						+ "t_longint bigint,"
1: 						+ "t_numeric_large numeric(31,0),"
1: 						+ "t_real real,"
1: 						+ "t_smallint smallint,"
1: 						+ "t_time time,"
1: 						+ "t_timestamp timestamp,"
1: 						+ "t_varchar varchar(100),"
1: 						+ "serialkey bigint generated always as identity (start with 1,increment by 1),"
1: 						+ "unique (serialkey), " + "unique (id))");
1: 				s.execute("create index t_char_ind on Datatypes ( t_char)");
1: 				s.execute("create index t_date_ind on Datatypes ( t_date)");
1: 				s
1: 				.execute("create index t_decimal_ind on Datatypes ( t_decimal)");
1: 				s
1: 				.execute("create index t_decimal_nn_ind on Datatypes ( t_decimal_nn)");
1: 				s.execute("create index t_double_ind on Datatypes ( t_double)");
1: 				s.execute("create index t_float_ind on Datatypes ( t_float)");
1: 				s.execute("create index t_int_ind on Datatypes ( t_int)");
1: 				s
1: 				.execute("create index t_longint_ind on Datatypes ( t_longint)");
1: 				s
1: 				.execute("create index t_numeric_larg_ind on Datatypes ( t_numeric_large)");
1: 				s.execute("create index t_real_ind on Datatypes ( t_real)");
1: 				s
1: 				.execute("create index t_smallint_ind on Datatypes ( t_smallint)");
1: 				s.execute("create index t_time_ind on Datatypes ( t_time)");
1: 				s
1: 				.execute("create index t_timestamp_ind on Datatypes ( t_timestamp)");
1: 				s
1: 				.execute("create index t_varchar_ind on Datatypes ( t_varchar)");
1: 				conn.commit();
1: 				conn.close();
1: 			} catch (SQLException se) {
1: 				System.out
1: 				.println("create table: FAIL -- unexpected exception:");
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 				return (false);
1: 			}
1: 			return (true);
1: 	}
1: }
============================================================================