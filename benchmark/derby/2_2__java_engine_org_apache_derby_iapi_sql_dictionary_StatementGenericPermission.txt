1:98c7520: /*
1:98c7520: 
1:98c7520:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementGenericPermission
1:98c7520: 
1:98c7520:    Licensed to the Apache Software Foundation (ASF) under one or more
1:98c7520:    contributor license agreements.  See the NOTICE file distributed with
1:98c7520:    this work for additional information regarding copyright ownership.
1:98c7520:    The ASF licenses this file to you under the Apache License, Version 2.0
1:98c7520:    (the "License"); you may not use this file except in compliance with
1:98c7520:    the License.  You may obtain a copy of the License at
1:98c7520: 
1:98c7520: 	  http://www.apache.org/licenses/LICENSE-2.0
1:98c7520: 
1:98c7520:    Unless required by applicable law or agreed to in writing, software
1:98c7520:    distributed under the License is distributed on an "AS IS" BASIS,
1:98c7520:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98c7520:    See the License for the specific language governing permissions and
1:98c7520:    limitations under the License.
1:98c7520: 
1:98c7520:  */
1:98c7520: 
1:98c7520: package org.apache.derby.iapi.sql.dictionary;
1:98c7520: 
1:98c7520: import org.apache.derby.iapi.error.StandardException;
1:98c7520: import org.apache.derby.catalog.UUID;
1:98c7520: import org.apache.derby.iapi.sql.conn.Authorizer;
1:98c7520: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:98c7520: import org.apache.derby.iapi.reference.SQLState;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1:98c7520: import org.apache.derby.iapi.store.access.TransactionController;
1:98c7520: import org.apache.derby.iapi.sql.Activation;
1:98c7520: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:98c7520: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:98c7520: import org.apache.derby.iapi.services.context.ContextManager;
1:98c7520: 
1:98c7520: /**
1:98c7520:  * This class describes a generic permission (such as USAGE)
1:98c7520:  * required by a statement.
1:98c7520:  */
1:98c7520: 
1:98c7520: public final class StatementGenericPermission extends StatementPermission
1:98c7520: {
1:98c7520: 	private UUID _objectID;
1:98c7520:     private String _objectType; // e.g., PermDescriptor.SEQUENCE_TYPE
1:98c7520:     private String _privilege; // e.g., PermDescriptor.USAGE_PRIV
1:98c7520: 
1:98c7520: 	public StatementGenericPermission( UUID objectID, String objectType, String privilege )
1:98c7520: 	{
1:98c7520: 		_objectID = objectID;
1:98c7520:         _objectType = objectType;
1:98c7520:         _privilege = privilege;
1:98c7520: 	}
1:98c7520: 
1:98c7520:     // accessors
1:98c7520: 	public UUID getObjectID() { return _objectID; }
1:98c7520:     public String getPrivilege() { return _privilege; }
1:98c7520: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#getObjectType
1:98c7520: 	 */
1:98c7520:     public String getObjectType() { return _objectType; }
1:98c7520: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#check
1:98c7520: 	 */
1:98c7520: 	public void check( LanguageConnectionContext lcc,
1:98c7520: 					   boolean forGrant,
1:98c7520: 					   Activation activation) throws StandardException
1:98c7520: 	{
1:9f60172:         genericCheck( lcc, forGrant, activation, _privilege );
1:98c7520: 	}
1:98c7520: 
1:98c7520: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#isCorrectPermission
1:98c7520: 	 */
1:98c7520:     public boolean isCorrectPermission( PermissionsDescriptor raw )
1:98c7520:     {
1:98c7520:         if ( (raw == null) || !( raw instanceof PermDescriptor) ) { return false; }
1:98c7520: 
1:98c7520:         PermDescriptor pd = (PermDescriptor) raw;
1:98c7520:         
1:98c7520:         return
1:98c7520:             pd.getPermObjectId().equals( _objectID ) &&
1:98c7520:             pd.getObjectType().equals( _objectType ) &&
1:98c7520:             pd.getPermission().equals( _privilege )
1:98c7520:             ;
1:98c7520:     }
1:98c7520: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#getPrivilegedObject
1:98c7520: 	 */
1:98c7520:     public PrivilegedSQLObject getPrivilegedObject( DataDictionary dd ) throws StandardException
1:98c7520:     {
1:98c7520:         if ( PermDescriptor.UDT_TYPE.equals( _objectType ) ) { return dd.getAliasDescriptor( _objectID ); }
1:f3c6217:         else if ( PermDescriptor.AGGREGATE_TYPE.equals( _objectType ) ) { return dd.getAliasDescriptor( _objectID ); }
1:98c7520:         else if ( PermDescriptor.SEQUENCE_TYPE.equals( _objectType ) ) { return dd.getSequenceDescriptor( _objectID ); }
1:98c7520:         else
1:98c7520:         {
1:98c7520:             throw StandardException.newException( SQLState.BTREE_UNIMPLEMENTED_FEATURE );
1:98c7520:         }
1:98c7520:     }
1:98c7520: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#getPermissionDescriptor
1:98c7520: 	 */
1:98c7520: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1:98c7520: 	throws StandardException
1:98c7520: 	{
1:98c7520: 		return dd.getGenericPermissions( _objectID, _objectType, _privilege, authid );
1:98c7520: 	}
1:98c7520: 
1:98c7520: 
1:98c7520: 	public String toString()
1:98c7520: 	{
1:98c7520: 		return "StatementGenericPermission( " + _objectID + ", " + _objectType + ", " + _privilege + " )";
1:98c7520: 	}
1:98c7520: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f3c6217
/////////////////////////////////////////////////////////////////////////
1:         else if ( PermDescriptor.AGGREGATE_TYPE.equals( _objectType ) ) { return dd.getAliasDescriptor( _objectID ); }
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementGenericPermission
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: /**
1:  * This class describes a generic permission (such as USAGE)
1:  * required by a statement.
1:  */
1: 
1: public final class StatementGenericPermission extends StatementPermission
1: {
1: 	private UUID _objectID;
1:     private String _objectType; // e.g., PermDescriptor.SEQUENCE_TYPE
1:     private String _privilege; // e.g., PermDescriptor.USAGE_PRIV
1: 
1: 	public StatementGenericPermission( UUID objectID, String objectType, String privilege )
1: 	{
1: 		_objectID = objectID;
1:         _objectType = objectType;
1:         _privilege = privilege;
1: 	}
1: 
1:     // accessors
1: 	public UUID getObjectID() { return _objectID; }
1:     public String getPrivilege() { return _privilege; }
1: 
1: 	/**
1: 	 * @see StatementPermission#getObjectType
1: 	 */
1:     public String getObjectType() { return _objectType; }
1: 
1: 	/**
1: 	 * @see StatementPermission#check
1: 	 */
1: 	public void check( LanguageConnectionContext lcc,
0: 					   String authorizationId,
1: 					   boolean forGrant,
1: 					   Activation activation) throws StandardException
1: 	{
0:         genericCheck( lcc, authorizationId, forGrant, activation, _privilege );
1: 	}
1: 
1: 
1: 	/**
1: 	 * @see StatementPermission#isCorrectPermission
1: 	 */
1:     public boolean isCorrectPermission( PermissionsDescriptor raw )
1:     {
1:         if ( (raw == null) || !( raw instanceof PermDescriptor) ) { return false; }
1: 
1:         PermDescriptor pd = (PermDescriptor) raw;
1:         
1:         return
1:             pd.getPermObjectId().equals( _objectID ) &&
1:             pd.getObjectType().equals( _objectType ) &&
1:             pd.getPermission().equals( _privilege )
1:             ;
1:     }
1: 
1: 	/**
1: 	 * @see StatementPermission#getPrivilegedObject
1: 	 */
1:     public PrivilegedSQLObject getPrivilegedObject( DataDictionary dd ) throws StandardException
1:     {
1:         if ( PermDescriptor.UDT_TYPE.equals( _objectType ) ) { return dd.getAliasDescriptor( _objectID ); }
1:         else if ( PermDescriptor.SEQUENCE_TYPE.equals( _objectType ) ) { return dd.getSequenceDescriptor( _objectID ); }
1:         else
1:         {
1:             throw StandardException.newException( SQLState.BTREE_UNIMPLEMENTED_FEATURE );
1:         }
1:     }
1: 
1: 	/**
1: 	 * @see StatementPermission#getPermissionDescriptor
1: 	 */
1: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1: 	throws StandardException
1: 	{
1: 		return dd.getGenericPermissions( _objectID, _objectType, _privilege, authid );
1: 	}
1: 
1: 
1: 	public String toString()
1: 	{
1: 		return "StatementGenericPermission( " + _objectID + ", " + _objectType + ", " + _privilege + " )";
1: 	}
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         genericCheck( lcc, forGrant, activation, _privilege );
============================================================================