2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.reflect.ReflectLoaderJava2
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.reflect;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:1f9b9c4: final class ReflectLoaderJava2 extends ClassLoader {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**	Fields
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	private final DatabaseClasses cf;
1:eac0369: 	
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	ReflectLoaderJava2(ClassLoader parent, DatabaseClasses cf) {
1:eac0369: 		super(parent);
1:eac0369: 		this.cf = cf;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected Class findClass(String name)
1:eac0369: 		throws ClassNotFoundException {
1:eac0369: 		return cf.loadApplicationClass(name);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Implementation specific methods
1:eac0369: 	** NOTE these are COPIED from ReflectLoader as the two classes cannot be made into
1:eac0369: 	   a super/sub class pair. Because the Java2 one needs to call super(ClassLoader)
1:eac0369: 	   that was added in Java2 and it needs to not implement loadClass()
1:eac0369: 	*/
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Load a generated class from the passed in class data.
1:eac0369: 	*/
1:adbd39f:     LoadedGeneratedClass loadGeneratedClass(String name, ByteArray classData) {
1:eac0369: 
1:eac0369: 		Class jvmClass = defineClass(name, classData.getArray(), classData.getOffset(), classData.getLength());
1:eac0369: 
1:eac0369: 		resolveClass(jvmClass);
1:eac0369: 
1:6790718:         return new ReflectGeneratedClass(cf, jvmClass);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:adbd39f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     LoadedGeneratedClass loadGeneratedClass(String name, ByteArray classData) {
commit:6790718
/////////////////////////////////////////////////////////////////////////
1:         return new ReflectGeneratedClass(cf, jvmClass);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.reflect.ReflectLoaderJava2
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
1: final class ReflectLoaderJava2 extends ClassLoader {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.reflect;
1: 
1: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.sql.compile.CodeGeneration;
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
1: 
0: final class ReflectLoaderJava2 extends ClassLoader { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 	/*
1: 	**	Fields
1: 	*/
1: 
1: 	private final DatabaseClasses cf;
1: 	
1: 	/*
1: 	** Constructor
1: 	*/
1: 
1: 	ReflectLoaderJava2(ClassLoader parent, DatabaseClasses cf) {
1: 		super(parent);
1: 		this.cf = cf;
1: 	}
1: 
1: 	protected Class findClass(String name)
1: 		throws ClassNotFoundException {
1: 		return cf.loadApplicationClass(name);
1: 	}
1: 
1: 	/*
1: 	** Implementation specific methods
1: 	** NOTE these are COPIED from ReflectLoader as the two classes cannot be made into
1: 	   a super/sub class pair. Because the Java2 one needs to call super(ClassLoader)
1: 	   that was added in Java2 and it needs to not implement loadClass()
1: 	*/
1: 
1: 	/**
1: 		Load a generated class from the passed in class data.
1: 	*/
0: 	public LoadedGeneratedClass loadGeneratedClass(String name, ByteArray classData) {
1: 
1: 		Class jvmClass = defineClass(name, classData.getArray(), classData.getOffset(), classData.getLength());
1: 
1: 		resolveClass(jvmClass);
1: 
1: 		/*
0: 			DJD - not enabling this yet, need more memory testing, may only
0: 			create a factory instance when a number of instances are created.
0: 			This would avoid a factory instance for DDL
1: 
0: 		// now generate a factory class that loads instances
0: 		int lastDot = name.lastIndexOf('.');
0: 		String factoryName = name.substring(lastDot + 1, name.length()).concat("_F");
1: 
0: 		classData = cf.buildSpecificFactory(name, factoryName);
0: 		Class factoryClass = defineClass(CodeGeneration.GENERATED_PACKAGE_PREFIX.concat(factoryName),
0: 			classData.getArray(), classData.getOffset(), classData.getLength());
0: 		resolveClass(factoryClass);
1: 		
1: 		  */
0: 		Class factoryClass = null;
1: 
0: 		return new ReflectGeneratedClass(cf, jvmClass, factoryClass);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.reflect;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.sql.compile.CodeGeneration;
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 
0: final class ReflectLoaderJava2 extends ClassLoader { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	/*
0: 	**	Fields
0: 	*/
0: 
0: 	private final DatabaseClasses cf;
0: 	
0: 	/*
0: 	** Constructor
0: 	*/
0: 
0: 	ReflectLoaderJava2(ClassLoader parent, DatabaseClasses cf) {
0: 		super(parent);
0: 		this.cf = cf;
0: 	}
0: 
0: 	protected Class findClass(String name)
0: 		throws ClassNotFoundException {
0: 		return cf.loadApplicationClass(name);
0: 	}
0: 
0: 	/*
0: 	** Implementation specific methods
0: 	** NOTE these are COPIED from ReflectLoader as the two classes cannot be made into
0: 	   a super/sub class pair. Because the Java2 one needs to call super(ClassLoader)
0: 	   that was added in Java2 and it needs to not implement loadClass()
0: 	*/
0: 
0: 	/**
0: 		Load a generated class from the passed in class data.
0: 	*/
0: 	public LoadedGeneratedClass loadGeneratedClass(String name, ByteArray classData) {
0: 
0: 		Class jvmClass = defineClass(name, classData.getArray(), classData.getOffset(), classData.getLength());
0: 
0: 		resolveClass(jvmClass);
0: 
0: 		/*
0: 			DJD - not enabling this yet, need more memory testing, may only
0: 			create a factory instance when a number of instances are created.
0: 			This would avoid a factory instance for DDL
0: 
0: 		// now generate a factory class that loads instances
0: 		int lastDot = name.lastIndexOf('.');
0: 		String factoryName = name.substring(lastDot + 1, name.length()).concat("_F");
0: 
0: 		classData = cf.buildSpecificFactory(name, factoryName);
0: 		Class factoryClass = defineClass(CodeGeneration.GENERATED_PACKAGE_PREFIX.concat(factoryName),
0: 			classData.getArray(), classData.getOffset(), classData.getLength());
0: 		resolveClass(factoryClass);
0: 		
0: 		  */
0: 		Class factoryClass = null;
0: 
0: 		return new ReflectGeneratedClass(cf, jvmClass, factoryClass);
0: 	}
0: }
============================================================================