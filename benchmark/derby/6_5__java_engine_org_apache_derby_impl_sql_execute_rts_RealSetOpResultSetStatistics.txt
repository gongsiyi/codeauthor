1:c9be530: /*
2:c9be530: 
1:c9be530:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics
1:c9be530: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:c9be530: 
1:c9be530:       http://www.apache.org/licenses/LICENSE-2.0
1:c9be530: 
1:c9be530:    Unless required by applicable law or agreed to in writing, software
1:c9be530:    distributed under the License is distributed on an "AS IS" BASIS,
1:c9be530:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c9be530:    See the License for the specific language governing permissions and
1:c9be530:    limitations under the License.
1:c9be530: 
1:c9be530:  */
1:c9be530: 
1:c9be530: package org.apache.derby.impl.sql.execute.rts;
1:c9be530: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:c9be530: import org.apache.derby.iapi.services.i18n.MessageService;
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:c9be530: import org.apache.derby.iapi.reference.SQLState;
1:c9be530: 
1:c9be530: import org.apache.derby.impl.sql.compile.IntersectOrExceptNode;
1:c9be530: 
1:c9be530: /**
1:c9be530:   ResultSetStatistics implementation for SetOpResultSet.
1:c9be530: 
1:c9be530: 
1:c9be530: */
1:c9be530: public class RealSetOpResultSetStatistics 
1:c9be530:     extends RealNoPutResultSetStatistics
1:c9be530: {
1:c9be530: 	
1:c9be530:     /* Leave these fields public for object inspectors */
1:c9be530:     public int opType;
1:c9be530:     public int rowsSeenLeft;
1:c9be530:     public int rowsSeenRight;
1:c9be530:     public int rowsReturned;
1:c9be530:     public ResultSetStatistics leftResultSetStatistics;
1:c9be530:     public ResultSetStatistics rightResultSetStatistics;
1:c9be530: 
1:c9be530:     // CONSTRUCTORS
1:c9be530: 
1:c9be530:     /**
1:c9be530:      *  Constructs a new <code>RealSetOpResultSetStatistics</code> object 
1:c9be530:      *  to represent the runtime statistics for <code>SetOpResultSet</code>.  
1:c9be530:      * 
1:c9be530:      *  @param   opType                       set operation type 
1:c9be530:      *  @param   numOpens                     number of open
1:c9be530:      *  @param   rowsSeen                     rows seen
1:c9be530:      *  @param   rowsFiltered                 rows filtered
1:c9be530:      *  @param   constructorTime              the time for construction
1:c9be530:      *  @param   openTime                     the time for open operation
1:c9be530:      *  @param   nextTime                     the time for next operation
1:c9be530:      *  @param   closeTime                    the time for close operation
1:c9be530:      *  @param   resultSetNumber              the result set number
1:c9be530:      *  @param   rowsSeenLeft                 rows seen by left source input
1:c9be530:      *  @param   rowsSeenRight                rows seen by right source input
1:c9be530:      *  @param   rowsReturned                 rows returned
1:c9be530:      *  @param   optimizerEstimatedRowCount   optimizer estimated row count
1:c9be530:      *  @param   optimizerEstimatedCost       optimizer estimated cost
1:c9be530:      *  @param   leftResultSetStatistics      left source runtime statistics
1:c9be530:      *  @param   rightResultSetStatistics     right source runtime statistics
1:c9be530:      *  
1:c9be530:      *  @see     org.apache.derby.impl.sql.execute.SetOpResultSet  
1:c9be530:      */
1:c9be530:     public	RealSetOpResultSetStatistics(
1:c9be530:                                  int opType,
1:c9be530:                                  int numOpens,
1:c9be530:                                  int rowsSeen,
1:c9be530:                                  int rowsFiltered,
1:c9be530:                                  long constructorTime,
1:c9be530:                                  long openTime,
1:c9be530:                                  long nextTime,
1:c9be530:                                  long closeTime,
1:c9be530:                                  int resultSetNumber,
1:c9be530:                                  int rowsSeenLeft,
1:c9be530:                                  int rowsSeenRight,
1:c9be530:                                  int rowsReturned,
1:c9be530:                                  double optimizerEstimatedRowCount,
1:c9be530:                                  double optimizerEstimatedCost,
1:c9be530:                                  ResultSetStatistics leftResultSetStatistics,
1:c9be530:                                  ResultSetStatistics rightResultSetStatistics 
1:c9be530:                                 )
1:c9be530:     {
1:c9be530:         super(
1:c9be530:             numOpens,
1:c9be530:             rowsSeen,
1:c9be530:             rowsFiltered,
1:c9be530:             constructorTime,
1:c9be530:             openTime,
1:c9be530:             nextTime,
1:c9be530:             closeTime,
1:c9be530:             resultSetNumber,
1:c9be530:             optimizerEstimatedRowCount,
1:c9be530:             optimizerEstimatedCost
1:c9be530:             );
1:c9be530: 		
1:c9be530:         this.opType = opType;
1:c9be530:         this.rowsSeenLeft = rowsSeenLeft;
1:c9be530:         this.rowsSeenRight = rowsSeenRight;
1:c9be530:         this.rowsReturned = rowsReturned;
1:c9be530:         this.leftResultSetStatistics = leftResultSetStatistics;
1:c9be530:         this.rightResultSetStatistics = rightResultSetStatistics;
1:c9be530:     }
1:c9be530: 
1:c9be530:     // ResultSetStatistics methods
1:c9be530: 
1:c9be530:     /**
1:c9be530:      * Return the statement execution plan as a <code>String</code>.
1:c9be530:      *
1:c9be530:      * @param depth	Indentation level.
1:c9be530:      *
1:c9be530:      * @return the statement execution plan as a <code>String</code>.
1:c9be530:      */
1:c9be530:     public String getStatementExecutionPlanText(int depth) {
1:c9be530:         initFormatInfo(depth);
1:c9be530: 
1:c9be530:         String rs = (opType == IntersectOrExceptNode.INTERSECT_OP) 
1:043a571:                 ? "INTERSECT ResultSet" : "EXCEPT ResultSet";
1:c9be530:          
1:c9be530:         return
1:c9be530:             indent + MessageService.getTextMessage(rs) + 
1:c9be530:                 ":\n" +
1:c9be530:             indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) + 
1:c9be530:                 " = " + numOpens + "\n" +
1:c9be530:             indent + MessageService.getTextMessage(
1:c9be530:                                             SQLState.RTS_ROWS_SEEN_LEFT) +
1:c9be530:                 " = " + rowsSeenLeft + "\n" + 
1:c9be530:             indent + MessageService.getTextMessage(
1:c9be530:                                             SQLState.RTS_ROWS_SEEN_RIGHT) + 
1:c9be530:                 " = " + rowsSeenRight + "\n" +
1:c9be530:             indent + MessageService.getTextMessage(
1:c9be530:                                             SQLState.RTS_ROWS_RETURNED) +
1:c9be530:                 " = " + rowsReturned + "\n" + 
1:c9be530:             dumpTimeStats(indent, subIndent) + "\n" +
1:c9be530:             dumpEstimatedCosts(subIndent) + "\n" +
1:c9be530:             indent + MessageService.getTextMessage(SQLState.RTS_LEFT_RS) +
1:c9be530:                 ":\n" + 
1:c9be530:             leftResultSetStatistics.getStatementExecutionPlanText(sourceDepth) +
1:c9be530:                 "\n" + 
1:c9be530:             indent + MessageService.getTextMessage(SQLState.RTS_RIGHT_RS) +
1:c9be530:                 ":\n" + 
1:c9be530:             rightResultSetStatistics.getStatementExecutionPlanText(
1:c9be530:             		                                              sourceDepth) + 
1:c9be530:                 "\n";
1:c9be530:     }
1:c9be530: 
1:c9be530:     /**
1:c9be530:      * Return information on the scan nodes from the statement execution 
1:c9be530:      * plan as a <code>String</code>.
1:c9be530:      *
1:c9be530:      * @param depth	Indentation level.
1:c9be530:      * @param tableName if not NULL then print information for this table only
1:c9be530:      *
1:c9be530:      * @return String	The information on the scan nodes from the 
1:c9be530:      *					statement execution plan as a <code>String</code>.
1:c9be530:      */
1:c9be530:     public String getScanStatisticsText(String tableName, int depth) {
1:c9be530:         return leftResultSetStatistics.getScanStatisticsText(tableName, depth)
1:c9be530:             + rightResultSetStatistics.getScanStatisticsText(tableName, depth);
1:c9be530:     }
1:c9be530: 
1:c9be530:     // Class implementation
1:c9be530: 
1:c9be530:     /**
1:c9be530:      * Return the runtime statistics of this object in textual representation
1:c9be530:      *
1:c9be530:      * @return the runtime statistics of this object in textual representation 
1:c9be530:      *         as a <code>String</code>.
1:c9be530:      */
1:c9be530:     public String toString() {
1:c9be530:         return getStatementExecutionPlanText(0);
1:c9be530:     }
1:c9be530: 
1:c9be530:     /**
1:c9be530:      * Retrieves the children runtime statistics of this <code>
1:c9be530:      * RealSetOpResultSetStatistics</code> object 
1:c9be530:      *
1:c9be530:      * @return the children runtime statistics of this <code>
1:c9be530:      *         RealSetOpResultSetStatistics</code> object stored in a <code>
1:c9be530:      *         Vector</code>. 
1:c9be530:      *         
1:c9be530:      */
1:9d5bd0e:     public java.util.Vector<ResultSetStatistics> getChildren() {
1:9d5bd0e:         java.util.Vector<ResultSetStatistics> children = new java.util.Vector<ResultSetStatistics>();
1:c9be530:         children.addElement(leftResultSetStatistics);
1:c9be530:         children.addElement(rightResultSetStatistics);
1:c9be530:         return children;
1:c9be530:     }
1:c9be530: 
1:c9be530:     /**
1:c9be530:      * Format for display, a name for this node.
1:c9be530:      *
1:c9be530:      * @return the name of the node as a <code>String</code>.
1:c9be530:      */
1:c9be530:     public String getNodeName() {
1:c9be530:         String nodeName = 
1:c9be530:             (opType == IntersectOrExceptNode.INTERSECT_OP) 
1:043a571:                 ? "INTERSECT" : "EXCEPT";
1:c9be530: 		
1:c9be530:         return MessageService.getTextMessage(nodeName);
1:c9be530:     }
1:48a9884:     
1:48a9884:     // -----------------------------------------------------
1:48a9884:     // XPLAINable Implementation
1:48a9884:     // -----------------------------------------------------
1:48a9884:     
1:48a9884:       public void accept(XPLAINVisitor visitor) {
1:48a9884:           int noChildren = 0;
1:48a9884:           if(this.leftResultSetStatistics!=null) noChildren++;
1:48a9884:           if(this.rightResultSetStatistics!=null) noChildren++;
1:48a9884:           
1:48a9884:           //inform the visitor
1:48a9884:           visitor.setNumberOfChildren(noChildren);
1:48a9884:           
1:48a9884:           // pre-order, depth-first traversal
1:48a9884:           // me first
1:48a9884:           visitor.visit(this);
1:48a9884:           // then visit first my left child
1:48a9884:           if(leftResultSetStatistics!=null){
1:48a9884:               leftResultSetStatistics.accept(visitor);
1:48a9884:           }
1:48a9884:           // and then my right child
1:48a9884:           if(rightResultSetStatistics!=null){
1:48a9884:               rightResultSetStatistics.accept(visitor);
1:48a9884:           }
1:48a9884:       }
1:48a9884:     public String getRSXplainType() { return XPLAINUtil.OP_SET; }
1:48a9884:     public String getRSXplainDetails()
1:48a9884:     {
1:48a9884:         String op_details = "("+this.resultSetNumber + ")";
1:48a9884:         // the details are weird, because the semantics are exchanged
1:48a9884:         op_details += (this.opType == IntersectOrExceptNode.INTERSECT_OP)?
1:48a9884:                       ", "+XPLAINUtil.OP_SET_EXCEPT:
1:48a9884:                       ", "+XPLAINUtil.OP_SET_INTERSECT;
1:48a9884:         return op_details;
1:48a9884:     }
1:48a9884:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:48a9884:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetDescriptor(
1:48a9884:            (UUID)rsID,
1:48a9884:            getRSXplainType(),
1:48a9884:            getRSXplainDetails(),
1:ce40a31:            this.numOpens,
1:48a9884:            null,                              // the number of index updates 
1:48a9884:            null,                           // lock mode
1:48a9884:            null,                           // lock granularity
1:48a9884:            (UUID)parentID,
1:ce40a31:            this.optimizerEstimatedRowCount,
1:ce40a31:            this.optimizerEstimatedCost,
1:48a9884:            null,                              // the affected rows
1:48a9884:            null,                              // the deferred rows
1:48a9884:            null,                              // the input rows
1:ce40a31:            this.rowsSeenLeft,        // the seen rows left
1:ce40a31:            this.rowsSeenRight,       // the seen rows right
1:ce40a31:            this.rowsFiltered,        // the filtered rows
1:ce40a31:            this.rowsReturned,        // the returned rows
1:48a9884:            null,                              // the empty right rows
1:48a9884:            null,                           // index key optimization
1:48a9884:            (UUID)scanID,
1:48a9884:            (UUID)sortID,
1:48a9884:            (UUID)stmtID,
1:48a9884:            (UUID)timingID);
1:48a9884:     }
1:c9be530: } 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:            this.numOpens,
1:            this.optimizerEstimatedRowCount,
1:            this.optimizerEstimatedCost,
1:            this.rowsSeenLeft,        // the seen rows left
1:            this.rowsSeenRight,       // the seen rows right
1:            this.rowsFiltered,        // the filtered rows
1:            this.rowsReturned,        // the returned rows
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:     public java.util.Vector<ResultSetStatistics> getChildren() {
1:         java.util.Vector<ResultSetStatistics> children = new java.util.Vector<ResultSetStatistics>();
commit:043a571
/////////////////////////////////////////////////////////////////////////
1:                 ? "INTERSECT ResultSet" : "EXCEPT ResultSet";
/////////////////////////////////////////////////////////////////////////
1:                 ? "INTERSECT" : "EXCEPT";
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
/////////////////////////////////////////////////////////////////////////
1:     
1:     // -----------------------------------------------------
1:     // XPLAINable Implementation
1:     // -----------------------------------------------------
1:     
1:       public void accept(XPLAINVisitor visitor) {
1:           int noChildren = 0;
1:           if(this.leftResultSetStatistics!=null) noChildren++;
1:           if(this.rightResultSetStatistics!=null) noChildren++;
1:           
1:           //inform the visitor
1:           visitor.setNumberOfChildren(noChildren);
1:           
1:           // pre-order, depth-first traversal
1:           // me first
1:           visitor.visit(this);
1:           // then visit first my left child
1:           if(leftResultSetStatistics!=null){
1:               leftResultSetStatistics.accept(visitor);
1:           }
1:           // and then my right child
1:           if(rightResultSetStatistics!=null){
1:               rightResultSetStatistics.accept(visitor);
1:           }
1:       }
1:     public String getRSXplainType() { return XPLAINUtil.OP_SET; }
1:     public String getRSXplainDetails()
1:     {
1:         String op_details = "("+this.resultSetNumber + ")";
1:         // the details are weird, because the semantics are exchanged
1:         op_details += (this.opType == IntersectOrExceptNode.INTERSECT_OP)?
1:                       ", "+XPLAINUtil.OP_SET_EXCEPT:
1:                       ", "+XPLAINUtil.OP_SET_INTERSECT;
1:         return op_details;
1:     }
1:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:     {
1:         return new XPLAINResultSetDescriptor(
1:            (UUID)rsID,
1:            getRSXplainType(),
1:            getRSXplainDetails(),
0:            new Integer(this.numOpens),
1:            null,                              // the number of index updates 
1:            null,                           // lock mode
1:            null,                           // lock granularity
1:            (UUID)parentID,
0:            new Double(this.optimizerEstimatedRowCount),
0:            new Double(this.optimizerEstimatedCost),
1:            null,                              // the affected rows
1:            null,                              // the deferred rows
1:            null,                              // the input rows
0:            new Integer(this.rowsSeenLeft),        // the seen rows left
0:            new Integer(this.rowsSeenRight),       // the seen rows right
0:            new Integer(this.rowsFiltered),        // the filtered rows
0:            new Integer(this.rowsReturned),        // the returned rows
1:            null,                              // the empty right rows
1:            null,                           // index key optimization
1:            (UUID)scanID,
1:            (UUID)sortID,
1:            (UUID)stmtID,
1:            (UUID)timingID);
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c9be530
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.impl.sql.compile.IntersectOrExceptNode;
1: 
1: /**
1:   ResultSetStatistics implementation for SetOpResultSet.
1: 
0:   @author yip
1: 
1: */
1: public class RealSetOpResultSetStatistics 
1:     extends RealNoPutResultSetStatistics
1: {
1: 	
1:     /* Leave these fields public for object inspectors */
1:     public int opType;
1:     public int rowsSeenLeft;
1:     public int rowsSeenRight;
1:     public int rowsReturned;
1:     public ResultSetStatistics leftResultSetStatistics;
1:     public ResultSetStatistics rightResultSetStatistics;
1: 
1:     // CONSTRUCTORS
1: 
1:     /**
1:      *  Constructs a new <code>RealSetOpResultSetStatistics</code> object 
1:      *  to represent the runtime statistics for <code>SetOpResultSet</code>.  
1:      * 
1:      *  @param   opType                       set operation type 
1:      *  @param   numOpens                     number of open
1:      *  @param   rowsSeen                     rows seen
1:      *  @param   rowsFiltered                 rows filtered
1:      *  @param   constructorTime              the time for construction
1:      *  @param   openTime                     the time for open operation
1:      *  @param   nextTime                     the time for next operation
1:      *  @param   closeTime                    the time for close operation
1:      *  @param   resultSetNumber              the result set number
1:      *  @param   rowsSeenLeft                 rows seen by left source input
1:      *  @param   rowsSeenRight                rows seen by right source input
1:      *  @param   rowsReturned                 rows returned
1:      *  @param   optimizerEstimatedRowCount   optimizer estimated row count
1:      *  @param   optimizerEstimatedCost       optimizer estimated cost
1:      *  @param   leftResultSetStatistics      left source runtime statistics
1:      *  @param   rightResultSetStatistics     right source runtime statistics
1:      *  
1:      *  @see     org.apache.derby.impl.sql.execute.SetOpResultSet  
1:      */
1:     public	RealSetOpResultSetStatistics(
1:                                  int opType,
1:                                  int numOpens,
1:                                  int rowsSeen,
1:                                  int rowsFiltered,
1:                                  long constructorTime,
1:                                  long openTime,
1:                                  long nextTime,
1:                                  long closeTime,
1:                                  int resultSetNumber,
1:                                  int rowsSeenLeft,
1:                                  int rowsSeenRight,
1:                                  int rowsReturned,
1:                                  double optimizerEstimatedRowCount,
1:                                  double optimizerEstimatedCost,
1:                                  ResultSetStatistics leftResultSetStatistics,
1:                                  ResultSetStatistics rightResultSetStatistics 
1:                                 )
1:     {
1:         super(
1:             numOpens,
1:             rowsSeen,
1:             rowsFiltered,
1:             constructorTime,
1:             openTime,
1:             nextTime,
1:             closeTime,
1:             resultSetNumber,
1:             optimizerEstimatedRowCount,
1:             optimizerEstimatedCost
1:             );
1: 		
1:         this.opType = opType;
1:         this.rowsSeenLeft = rowsSeenLeft;
1:         this.rowsSeenRight = rowsSeenRight;
1:         this.rowsReturned = rowsReturned;
1:         this.leftResultSetStatistics = leftResultSetStatistics;
1:         this.rightResultSetStatistics = rightResultSetStatistics;
1:     }
1: 
1:     // ResultSetStatistics methods
1: 
1:     /**
1:      * Return the statement execution plan as a <code>String</code>.
1:      *
1:      * @param depth	Indentation level.
1:      *
1:      * @return the statement execution plan as a <code>String</code>.
1:      */
1:     public String getStatementExecutionPlanText(int depth) {
1:         initFormatInfo(depth);
1: 
1:         String rs = (opType == IntersectOrExceptNode.INTERSECT_OP) 
0:                 ? (SQLState.RTS_INTERSECT_RS) : (SQLState.RTS_EXCEPT_RS);
1:          
1:         return
1:             indent + MessageService.getTextMessage(rs) + 
1:                 ":\n" +
1:             indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) + 
1:                 " = " + numOpens + "\n" +
1:             indent + MessageService.getTextMessage(
1:                                             SQLState.RTS_ROWS_SEEN_LEFT) +
1:                 " = " + rowsSeenLeft + "\n" + 
1:             indent + MessageService.getTextMessage(
1:                                             SQLState.RTS_ROWS_SEEN_RIGHT) + 
1:                 " = " + rowsSeenRight + "\n" +
1:             indent + MessageService.getTextMessage(
1:                                             SQLState.RTS_ROWS_RETURNED) +
1:                 " = " + rowsReturned + "\n" + 
1:             dumpTimeStats(indent, subIndent) + "\n" +
1:             dumpEstimatedCosts(subIndent) + "\n" +
1:             indent + MessageService.getTextMessage(SQLState.RTS_LEFT_RS) +
1:                 ":\n" + 
1:             leftResultSetStatistics.getStatementExecutionPlanText(sourceDepth) +
1:                 "\n" + 
1:             indent + MessageService.getTextMessage(SQLState.RTS_RIGHT_RS) +
1:                 ":\n" + 
1:             rightResultSetStatistics.getStatementExecutionPlanText(
1:             		                                              sourceDepth) + 
1:                 "\n";
1:     }
1: 
1:     /**
1:      * Return information on the scan nodes from the statement execution 
1:      * plan as a <code>String</code>.
1:      *
1:      * @param depth	Indentation level.
1:      * @param tableName if not NULL then print information for this table only
1:      *
1:      * @return String	The information on the scan nodes from the 
1:      *					statement execution plan as a <code>String</code>.
1:      */
1:     public String getScanStatisticsText(String tableName, int depth) {
1:         return leftResultSetStatistics.getScanStatisticsText(tableName, depth)
1:             + rightResultSetStatistics.getScanStatisticsText(tableName, depth);
1:     }
1: 
1:     // Class implementation
1: 
1:     /**
1:      * Return the runtime statistics of this object in textual representation
1:      *
1:      * @return the runtime statistics of this object in textual representation 
1:      *         as a <code>String</code>.
1:      */
1:     public String toString() {
1:         return getStatementExecutionPlanText(0);
1:     }
1: 
1:     /**
1:      * Retrieves the children runtime statistics of this <code>
1:      * RealSetOpResultSetStatistics</code> object 
1:      *
1:      * @return the children runtime statistics of this <code>
1:      *         RealSetOpResultSetStatistics</code> object stored in a <code>
1:      *         Vector</code>. 
1:      *         
1:      */
0:     public java.util.Vector getChildren() {
0:         java.util.Vector children = new java.util.Vector();
1:         children.addElement(leftResultSetStatistics);
1:         children.addElement(rightResultSetStatistics);
1:         return children;
1:     }
1: 
1:     /**
1:      * Format for display, a name for this node.
1:      *
1:      * @return the name of the node as a <code>String</code>.
1:      */
1:     public String getNodeName() {
1:         String nodeName = 
1:             (opType == IntersectOrExceptNode.INTERSECT_OP) 
0:                 ? (SQLState.RTS_INTERSECT) : (SQLState.RTS_EXCEPT);
1: 		
1:         return MessageService.getTextMessage(nodeName);
1:     }
1: } 
============================================================================