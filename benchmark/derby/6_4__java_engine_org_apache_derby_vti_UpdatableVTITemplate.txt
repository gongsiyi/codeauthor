1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.vti.UpdatableVTITemplate
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.vti;
1:eac0369: 
1:3be1575: import java.io.InputStream;
1:3be1575: import java.io.Reader;
1:3be1575: import java.math.BigDecimal;
1:3be1575: import java.net.URL;
1:3be1575: import java.sql.Array;
1:3be1575: import java.sql.Blob;
1:3be1575: import java.sql.Clob;
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.Date;
1:0758fb6: import java.sql.NClob;
1:8862182: import java.sql.ParameterMetaData;
1:eac0369: import java.sql.PreparedStatement;
1:3be1575: import java.sql.Ref;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.ResultSetMetaData;
1:0758fb6: import java.sql.RowId;
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.sql.SQLWarning;
1:0758fb6: import java.sql.SQLXML;
1:eac0369: import java.sql.Time;
1:eac0369: import java.sql.Timestamp;
1:eac0369: import java.util.Calendar;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369: 
1:3be1575:    An abstract implementation of PreparedStatement (JDBC 3.0) that is useful
1:eac0369: 	when writing a read-write (updatable) virtual table interface (VTI).
1:eac0369: 	
1:eac0369: 	This class implements
1:3be1575: 	the methods of the JDBC3.0 version of PreparedStatement
1:3be1575:     each one throwing a SQLException
1:eac0369: 	with the name of the method. A concrete subclass can then just implement
1:eac0369: 	the methods not implemented here and override any methods it needs
1:eac0369: 	to implement for correct functionality.
1:eac0369: 
1:eac0369:  */
1:eac0369: public abstract class UpdatableVTITemplate implements PreparedStatement 
1:eac0369: {
1:2c65d7c: 	protected UpdatableVTITemplate() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public ResultSet executeQuery(String sql) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("executeQuery");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int executeUpdate(String sql) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("executeUpdate");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void close() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("close");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public SQLWarning getWarnings() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getWarnings");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void clearWarnings() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("clearWarnings");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int getMaxFieldSize() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getMaxFieldSize");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setMaxFieldSize(int max) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setMaxFieldSize");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int getMaxRows() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getMaxRows");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setMaxRows(int max) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setMaxRows");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setEscapeProcessing(boolean enable) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setEscapeProcessing");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int getQueryTimeout() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getQueryTimeout");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setQueryTimeout(int seconds) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setQueryTimeout");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void addBatch(String sql) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("addBatch");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void clearBatch() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("clearBatch");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int[] executeBatch() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("executeBatch");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void cancel() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("cancel");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setCursorName(String name) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setCursorName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public boolean execute(String sql) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("execute");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public ResultSet getResultSet() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getResultSet");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int getUpdateCount() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getUpdateCount");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public boolean getMoreResults() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("getMoreResults");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.Statement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int getResultSetConcurrency() throws SQLException
1:eac0369: 	{
1:1e8a20f:         return ResultSet.CONCUR_UPDATABLE;
1:eac0369: 	}
1:eac0369: 
3:eac0369:     //
1:eac0369:     // java.sql.PreparedStatement calls, passed through to our preparedStatement.
1:eac0369:     //
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public ResultSet executeQuery() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("executeQuery");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public int executeUpdate() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("executeUpdate");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setNull(int parameterIndex, int jdbcType) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setNull");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setNull(int parameterIndex, int jdbcType, String typeName) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setNull");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setBoolean(int parameterIndex, boolean x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setBoolean");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setByte(int parameterIndex, byte x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setByte");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setShort(int parameterIndex, short x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setShort");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setInt(int parameterIndex, int x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setInt");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setLong(int parameterIndex, long x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setLong");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setFloat(int parameterIndex, float x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setFloat");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setDouble(int parameterIndex, double x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setDouble");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setBigDecimal");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setString(int parameterIndex, String x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setString");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setBytes(int parameterIndex, byte x[]) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setBytes");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setDate(int parameterIndex, Date x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setDate");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setTime(int parameterIndex, Time x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setTime");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setTimestamp");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setAsciiStream");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:e24d8ef:      * @deprecated
1:eac0369: 	 */
1:eac0369: 	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setUnicodeStream");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setBinaryStream");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void clearParameters() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("clearParameters");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setObject(int parameterIndex, Object x, int targetJdbcType, int scale) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setObject");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setObject(int parameterIndex, Object x, int targetJdbcType) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setObject");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public void setObject(int parameterIndex, Object x) throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("setObject");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public boolean execute() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("execute");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369:  	 * @exception SQLException on unexpected JDBC error
1:eac0369: 	 */
1:eac0369: 	public ResultSetMetaData getMetaData() throws SQLException
1:eac0369: 	{
1:eac0369:         throw new SQLException("ResultSetMetaData");
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public int getResultSetType() throws SQLException {
1:eac0369: 		throw new SQLException("getResultSetType");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setBlob(int i, Blob x) throws SQLException {
1:eac0369: 		throw new SQLException("setBlob");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setFetchDirection(int direction) throws SQLException {
1:eac0369: 		throw new SQLException("setFetchDirection");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setFetchSize(int rows) throws SQLException {
1:eac0369: 		throw new SQLException("setFetchSize");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void addBatch() throws SQLException {
1:eac0369: 		throw new SQLException("addBatch");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setCharacterStream(int parameterIndex,
1:eac0369: 									Reader reader,
1:eac0369: 									int length) throws SQLException {
1:eac0369: 		throw new SQLException("setCharacterStream");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public Connection getConnection() throws SQLException {
1:eac0369: 		throw new SQLException("getConnection");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public int getFetchDirection() throws SQLException {
1:eac0369: 		throw new SQLException("getFetchDirection");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setTime(int parameterIndex, Time x, Calendar cal)
1:eac0369: 								throws SQLException {
1:eac0369: 		throw new SQLException("setTime");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
1:eac0369: 								throws SQLException {
1:eac0369: 		throw new SQLException("setTimestamp");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public int getFetchSize() throws SQLException {
1:eac0369: 		throw new SQLException("getFetchSize");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setRef(int i, Ref x) throws SQLException {
1:eac0369: 		throw new SQLException("setRef");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setDate(int parameterIndex, Date x, Calendar cal)
1:eac0369: 						throws SQLException {
1:eac0369: 		throw new SQLException("setDate");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setClob(int i, Clob x) throws SQLException {
1:eac0369: 		throw new SQLException("setClob");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see java.sql.PreparedStatement
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Always thrown
1:eac0369: 	 */
1:eac0369: 	public void setArray(int i, Array x) throws SQLException {
1:eac0369: 		throw new SQLException("setArray");
1:eac0369: 	}
1:3be1575: 
1:3be1575:     public void setURL(int arg0, URL arg1) throws SQLException {
1:3be1575:         throw new SQLException("setURL");    
1:3be1575:     }
1:3be1575: 
1:3be1575:     public boolean getMoreResults(int arg0) throws SQLException {
1:3be1575:         throw new SQLException("getMoreResults");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public ResultSet getGeneratedKeys() throws SQLException {
1:3be1575:         throw new SQLException("getGeneratedKeys");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public int executeUpdate(String arg0, int arg1) throws SQLException {
1:3be1575:         throw new SQLException("executeUpdate");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public int executeUpdate(String arg0, int[] arg1) throws SQLException {
1:3be1575:         throw new SQLException("executeUpdate");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public int executeUpdate(String arg0, String[] arg1) throws SQLException {
1:3be1575:         throw new SQLException("executeUpdate");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public boolean execute(String arg0, int arg1) throws SQLException {
1:3be1575:         throw new SQLException("execute");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public boolean execute(String arg0, int[] arg1) throws SQLException {
1:3be1575:         throw new SQLException("execute");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public boolean execute(String arg0, String[] arg1) throws SQLException {
1:3be1575:         throw new SQLException("execute");
1:3be1575:     }
1:3be1575: 
1:3be1575:     public int getResultSetHoldability() throws SQLException {
1:3be1575:         throw new SQLException("getResultSetHoldability");
1:3be1575:     }
1:8862182: 
1:8862182:     public ParameterMetaData getParameterMetaData() throws SQLException {
1:8862182:         throw new SQLException("getParameterMetaData");
1:8862182:     }
1:0758fb6: 
1:0758fb6:     public  boolean 	isWrapperFor(Class<?> iface) throws SQLException { throw new SQLException( "isWrapperFor" ); }
1:0758fb6:     public  <T> T unwrap(Class<T> iface) throws SQLException { throw new SQLException( "unwrap" ); }
1:0758fb6: 
1:0758fb6:     public boolean isClosed() throws SQLException
1:0758fb6:     { throw new SQLException("isClosed"); }
1:0758fb6:     public boolean isPoolable() throws SQLException
1:0758fb6:     { throw new SQLException("isPoolable"); }
1:0758fb6:     public void setPoolable(boolean poolable) throws SQLException
1:0758fb6:     { throw new SQLException("setPoolable"); }
1:0758fb6: 	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException
1:0758fb6:     { throw new SQLException("setAsciiStream"); }
1:0758fb6: 	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setAsciiStream"); }
1:0758fb6: 	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException
1:0758fb6:     { throw new SQLException("setBinaryStream"); }
1:0758fb6: 	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setBinaryStream"); }
1:0758fb6:     public void 	setBlob(int parameterIndex, InputStream is) throws SQLException
1:0758fb6:     { throw new SQLException("setBlob"); }
1:0758fb6:     public void 	setBlob(int parameterIndex, InputStream is, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setBlob"); }
1:0758fb6:     public void 	setClob(int parameterIndex, Reader reader) throws SQLException
1:0758fb6:     { throw new SQLException("setClob"); }
1:0758fb6:     public void 	setClob(int parameterIndex, Reader reader, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setClob"); }
1:0758fb6:     public  void 	setCharacterStream(int parameterIndex, Reader value) throws SQLException
1:0758fb6:     { throw new SQLException("setCharacterStream"); }
1:0758fb6:     public void 	setCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setCharacterStream"); }
1:0758fb6:     public  void 	setNCharacterStream(int parameterIndex, Reader value) throws SQLException
1:0758fb6:     { throw new SQLException("setNCharacterStream"); }
1:0758fb6:     public void 	setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setNCharacterStream"); }
1:0758fb6:     public void 	setNClob(int parameterIndex, NClob value) throws SQLException
1:0758fb6:     { throw new SQLException("setNClob"); }
1:0758fb6:     public void 	setNClob(int parameterIndex, Reader reader) throws SQLException
1:0758fb6:     { throw new SQLException("setNClob"); }
1:0758fb6:     public void 	setNClob(int parameterIndex, Reader reader, long length) throws SQLException
1:0758fb6:     { throw new SQLException("setNClob"); }
1:0758fb6:     public void  	setNString(int parameterIndex, String value) throws SQLException
1:0758fb6:     { throw new SQLException("setNString"); }
1:0758fb6:     public void setRowId(int parameterIndex, RowId x) throws SQLException
1:0758fb6:     { throw new SQLException("setRowId"); }
1:0758fb6:     public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
1:0758fb6:     { throw new SQLException("setSQLXML"); }
1:0758fb6:     public boolean isCloseOnCompletion() throws SQLException
1:0758fb6:     { throw new SQLException("isCloseOnCompletion"); }
1:0758fb6:     public void closeOnCompletion() throws SQLException
1:0758fb6:     { throw new SQLException("closeOnCompletion"); }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0758fb6
/////////////////////////////////////////////////////////////////////////
1: import java.sql.NClob;
1: import java.sql.RowId;
1: import java.sql.SQLXML;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public  boolean 	isWrapperFor(Class<?> iface) throws SQLException { throw new SQLException( "isWrapperFor" ); }
1:     public  <T> T unwrap(Class<T> iface) throws SQLException { throw new SQLException( "unwrap" ); }
1: 
1:     public boolean isClosed() throws SQLException
1:     { throw new SQLException("isClosed"); }
1:     public boolean isPoolable() throws SQLException
1:     { throw new SQLException("isPoolable"); }
1:     public void setPoolable(boolean poolable) throws SQLException
1:     { throw new SQLException("setPoolable"); }
1: 	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException
1:     { throw new SQLException("setAsciiStream"); }
1: 	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException
1:     { throw new SQLException("setAsciiStream"); }
1: 	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException
1:     { throw new SQLException("setBinaryStream"); }
1: 	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException
1:     { throw new SQLException("setBinaryStream"); }
1:     public void 	setBlob(int parameterIndex, InputStream is) throws SQLException
1:     { throw new SQLException("setBlob"); }
1:     public void 	setBlob(int parameterIndex, InputStream is, long length) throws SQLException
1:     { throw new SQLException("setBlob"); }
1:     public void 	setClob(int parameterIndex, Reader reader) throws SQLException
1:     { throw new SQLException("setClob"); }
1:     public void 	setClob(int parameterIndex, Reader reader, long length) throws SQLException
1:     { throw new SQLException("setClob"); }
1:     public  void 	setCharacterStream(int parameterIndex, Reader value) throws SQLException
1:     { throw new SQLException("setCharacterStream"); }
1:     public void 	setCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
1:     { throw new SQLException("setCharacterStream"); }
1:     public  void 	setNCharacterStream(int parameterIndex, Reader value) throws SQLException
1:     { throw new SQLException("setNCharacterStream"); }
1:     public void 	setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
1:     { throw new SQLException("setNCharacterStream"); }
1:     public void 	setNClob(int parameterIndex, NClob value) throws SQLException
1:     { throw new SQLException("setNClob"); }
1:     public void 	setNClob(int parameterIndex, Reader reader) throws SQLException
1:     { throw new SQLException("setNClob"); }
1:     public void 	setNClob(int parameterIndex, Reader reader, long length) throws SQLException
1:     { throw new SQLException("setNClob"); }
1:     public void  	setNString(int parameterIndex, String value) throws SQLException
1:     { throw new SQLException("setNString"); }
1:     public void setRowId(int parameterIndex, RowId x) throws SQLException
1:     { throw new SQLException("setRowId"); }
1:     public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
1:     { throw new SQLException("setSQLXML"); }
1:     public boolean isCloseOnCompletion() throws SQLException
1:     { throw new SQLException("isCloseOnCompletion"); }
1:     public void closeOnCompletion() throws SQLException
1:     { throw new SQLException("closeOnCompletion"); }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1e8a20f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return ResultSet.CONCUR_UPDATABLE;
commit:8862182
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ParameterMetaData;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public ParameterMetaData getParameterMetaData() throws SQLException {
1:         throw new SQLException("getParameterMetaData");
1:     }
commit:3be1575
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.math.BigDecimal;
1: import java.net.URL;
1: import java.sql.Array;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Ref;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1:    An abstract implementation of PreparedStatement (JDBC 3.0) that is useful
1: 	the methods of the JDBC3.0 version of PreparedStatement
1:     each one throwing a SQLException
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setURL(int arg0, URL arg1) throws SQLException {
1:         throw new SQLException("setURL");    
1:     }
1: 
1:     public boolean getMoreResults(int arg0) throws SQLException {
1:         throw new SQLException("getMoreResults");
1:     }
1: 
1:     public ResultSet getGeneratedKeys() throws SQLException {
1:         throw new SQLException("getGeneratedKeys");
1:     }
1: 
1:     public int executeUpdate(String arg0, int arg1) throws SQLException {
1:         throw new SQLException("executeUpdate");
1:     }
1: 
1:     public int executeUpdate(String arg0, int[] arg1) throws SQLException {
1:         throw new SQLException("executeUpdate");
1:     }
1: 
1:     public int executeUpdate(String arg0, String[] arg1) throws SQLException {
1:         throw new SQLException("executeUpdate");
1:     }
1: 
1:     public boolean execute(String arg0, int arg1) throws SQLException {
1:         throw new SQLException("execute");
1:     }
1: 
1:     public boolean execute(String arg0, int[] arg1) throws SQLException {
1:         throw new SQLException("execute");
1:     }
1: 
1:     public boolean execute(String arg0, String[] arg1) throws SQLException {
1:         throw new SQLException("execute");
1:     }
1: 
1:     public int getResultSetHoldability() throws SQLException {
1:         throw new SQLException("getResultSetHoldability");
1:     }
commit:2c65d7c
/////////////////////////////////////////////////////////////////////////
1: 	protected UpdatableVTITemplate() {}
commit:fcf8c76
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.vti.UpdatableVTITemplate
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:bff3c2e
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
0: import org.apache.derby.iapi.reference.Copyright;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
1: import java.sql.Connection;
1: import java.sql.Date;
0: import java.sql.DriverManager;
0: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.sql.Time;
1: import java.sql.Timestamp;
0: import java.math.BigDecimal;
0: import java.sql.Blob;
0: import java.sql.Ref;
0: import java.sql.Clob;
0: import java.sql.Array;
1: 
0: import java.io.Reader;
1: 
1: import java.util.Calendar;
1: 
0: import java.io.InputStream;
1: 
1: /**
1: 
0:    An abstract implementation of PreparedStatement (JDK1.1/JDBC 1.2) that is useful
1: 	when writing a read-write (updatable) virtual table interface (VTI).
1: 	
1: 	This class implements
0: 	the methods of the JDBC1.2 version of PreparedStatement plus the 
0: 	JDBC2.0 getMetaData() method, each one throwing a SQLException
1: 	with the name of the method. A concrete subclass can then just implement
1: 	the methods not implemented here and override any methods it needs
1: 	to implement for correct functionality.
1: 
1:  */
1: public abstract class UpdatableVTITemplate implements PreparedStatement 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:     //
0:     // java.sql.Statement calls, passed through to our preparedStatement.
1:     //
1: 	/**
0: 		@deprecated Cloudscape 5.1 no longer supports read-write VTI's with JDBC 1.2. Applications
0: 		can use the UpdatableVTITemplate to implement a read-write VTI.
1: 	*/
0: 	public UpdatableVTITemplate() {}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public ResultSet executeQuery(String sql) throws SQLException
1: 	{
1:         throw new SQLException("executeQuery");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int executeUpdate(String sql) throws SQLException
1: 	{
1:         throw new SQLException("executeUpdate");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void close() throws SQLException
1: 	{
1:         throw new SQLException("close");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public SQLWarning getWarnings() throws SQLException
1: 	{
1:         throw new SQLException("getWarnings");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void clearWarnings() throws SQLException
1: 	{
1:         throw new SQLException("clearWarnings");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int getMaxFieldSize() throws SQLException
1: 	{
1:         throw new SQLException("getMaxFieldSize");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setMaxFieldSize(int max) throws SQLException
1: 	{
1:         throw new SQLException("setMaxFieldSize");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int getMaxRows() throws SQLException
1: 	{
1:         throw new SQLException("getMaxRows");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setMaxRows(int max) throws SQLException
1: 	{
1:         throw new SQLException("setMaxRows");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setEscapeProcessing(boolean enable) throws SQLException
1: 	{
1:         throw new SQLException("setEscapeProcessing");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int getQueryTimeout() throws SQLException
1: 	{
1:         throw new SQLException("getQueryTimeout");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setQueryTimeout(int seconds) throws SQLException
1: 	{
1:         throw new SQLException("setQueryTimeout");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void addBatch(String sql) throws SQLException
1: 	{
1:         throw new SQLException("addBatch");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void clearBatch() throws SQLException
1: 	{
1:         throw new SQLException("clearBatch");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int[] executeBatch() throws SQLException
1: 	{
1:         throw new SQLException("executeBatch");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void cancel() throws SQLException
1: 	{
1:         throw new SQLException("cancel");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setCursorName(String name) throws SQLException
1: 	{
1:         throw new SQLException("setCursorName");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public boolean execute(String sql) throws SQLException
1: 	{
1:         throw new SQLException("execute");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public ResultSet getResultSet() throws SQLException
1: 	{
1:         throw new SQLException("getResultSet");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int getUpdateCount() throws SQLException
1: 	{
1:         throw new SQLException("getUpdateCount");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public boolean getMoreResults() throws SQLException
1: 	{
1:         throw new SQLException("getMoreResults");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.Statement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int getResultSetConcurrency() throws SQLException
1: 	{
0:         return JDBC20Translation.CONCUR_UPDATABLE;
1: 	}
1: 
1:     //
1:     // java.sql.PreparedStatement calls, passed through to our preparedStatement.
1:     //
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public ResultSet executeQuery() throws SQLException
1: 	{
1:         throw new SQLException("executeQuery");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public int executeUpdate() throws SQLException
1: 	{
1:         throw new SQLException("executeUpdate");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setNull(int parameterIndex, int jdbcType) throws SQLException
1: 	{
1:         throw new SQLException("setNull");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setNull(int parameterIndex, int jdbcType, String typeName) throws SQLException
1: 	{
1:         throw new SQLException("setNull");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setBoolean(int parameterIndex, boolean x) throws SQLException
1: 	{
1:         throw new SQLException("setBoolean");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setByte(int parameterIndex, byte x) throws SQLException
1: 	{
1:         throw new SQLException("setByte");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setShort(int parameterIndex, short x) throws SQLException
1: 	{
1:         throw new SQLException("setShort");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setInt(int parameterIndex, int x) throws SQLException
1: 	{
1:         throw new SQLException("setInt");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setLong(int parameterIndex, long x) throws SQLException
1: 	{
1:         throw new SQLException("setLong");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setFloat(int parameterIndex, float x) throws SQLException
1: 	{
1:         throw new SQLException("setFloat");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setDouble(int parameterIndex, double x) throws SQLException
1: 	{
1:         throw new SQLException("setDouble");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
1: 	{
1:         throw new SQLException("setBigDecimal");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setString(int parameterIndex, String x) throws SQLException
1: 	{
1:         throw new SQLException("setString");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setBytes(int parameterIndex, byte x[]) throws SQLException
1: 	{
1:         throw new SQLException("setBytes");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setDate(int parameterIndex, Date x) throws SQLException
1: 	{
1:         throw new SQLException("setDate");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setTime(int parameterIndex, Time x) throws SQLException
1: 	{
1:         throw new SQLException("setTime");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
1: 	{
1:         throw new SQLException("setTimestamp");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
1: 	{
1:         throw new SQLException("setAsciiStream");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
1: 	{
1:         throw new SQLException("setUnicodeStream");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
1: 	{
1:         throw new SQLException("setBinaryStream");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void clearParameters() throws SQLException
1: 	{
1:         throw new SQLException("clearParameters");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setObject(int parameterIndex, Object x, int targetJdbcType, int scale) throws SQLException
1: 	{
1:         throw new SQLException("setObject");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setObject(int parameterIndex, Object x, int targetJdbcType) throws SQLException
1: 	{
1:         throw new SQLException("setObject");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public void setObject(int parameterIndex, Object x) throws SQLException
1: 	{
1:         throw new SQLException("setObject");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public boolean execute() throws SQLException
1: 	{
1:         throw new SQLException("execute");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
1: 	public ResultSetMetaData getMetaData() throws SQLException
1: 	{
1:         throw new SQLException("ResultSetMetaData");
1: 	}
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public int getResultSetType() throws SQLException {
1: 		throw new SQLException("getResultSetType");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setBlob(int i, Blob x) throws SQLException {
1: 		throw new SQLException("setBlob");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setFetchDirection(int direction) throws SQLException {
1: 		throw new SQLException("setFetchDirection");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setFetchSize(int rows) throws SQLException {
1: 		throw new SQLException("setFetchSize");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void addBatch() throws SQLException {
1: 		throw new SQLException("addBatch");
1: 	}
1: 
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setCharacterStream(int parameterIndex,
1: 									Reader reader,
1: 									int length) throws SQLException {
1: 		throw new SQLException("setCharacterStream");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public Connection getConnection() throws SQLException {
1: 		throw new SQLException("getConnection");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public int getFetchDirection() throws SQLException {
1: 		throw new SQLException("getFetchDirection");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setTime(int parameterIndex, Time x, Calendar cal)
1: 								throws SQLException {
1: 		throw new SQLException("setTime");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
1: 								throws SQLException {
1: 		throw new SQLException("setTimestamp");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public int getFetchSize() throws SQLException {
1: 		throw new SQLException("getFetchSize");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setRef(int i, Ref x) throws SQLException {
1: 		throw new SQLException("setRef");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setDate(int parameterIndex, Date x, Calendar cal)
1: 						throws SQLException {
1: 		throw new SQLException("setDate");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setClob(int i, Clob x) throws SQLException {
1: 		throw new SQLException("setClob");
1: 	}
1: 
1: 	/**
1: 	 * @see java.sql.PreparedStatement
1: 	 *
1: 	 * @exception SQLException		Always thrown
1: 	 */
1: 	public void setArray(int i, Array x) throws SQLException {
1: 		throw new SQLException("setArray");
1: 	}
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e24d8ef
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.vti;
0: 
0: import org.apache.derby.iapi.reference.Copyright;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
0: 
0: import java.sql.Connection;
0: import java.sql.Date;
0: import java.sql.DriverManager;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.Statement;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: import java.math.BigDecimal;
0: import java.sql.Blob;
0: import java.sql.Ref;
0: import java.sql.Clob;
0: import java.sql.Array;
0: 
0: import java.io.Reader;
0: 
0: import java.util.Calendar;
0: 
0: import java.io.InputStream;
0: 
0: /**
0: 
0:    An abstract implementation of PreparedStatement (JDK1.1/JDBC 1.2) that is useful
0: 	when writing a read-write (updatable) virtual table interface (VTI).
0: 	
0: 	This class implements
0: 	the methods of the JDBC1.2 version of PreparedStatement plus the 
0: 	JDBC2.0 getMetaData() method, each one throwing a SQLException
0: 	with the name of the method. A concrete subclass can then just implement
0: 	the methods not implemented here and override any methods it needs
0: 	to implement for correct functionality.
0: 
0:  */
0: public abstract class UpdatableVTITemplate implements PreparedStatement 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:     //
0:     // java.sql.Statement calls, passed through to our preparedStatement.
0:     //
0: 	/**
0: 		@deprecated Cloudscape 5.1 no longer supports read-write VTI's with JDBC 1.2. Applications
0: 		can use the UpdatableVTITemplate to implement a read-write VTI.
0: 	*/
0: 	public UpdatableVTITemplate() {}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public ResultSet executeQuery(String sql) throws SQLException
0: 	{
0:         throw new SQLException("executeQuery");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int executeUpdate(String sql) throws SQLException
0: 	{
0:         throw new SQLException("executeUpdate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void close() throws SQLException
0: 	{
0:         throw new SQLException("close");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public SQLWarning getWarnings() throws SQLException
0: 	{
0:         throw new SQLException("getWarnings");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void clearWarnings() throws SQLException
0: 	{
0:         throw new SQLException("clearWarnings");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getMaxFieldSize() throws SQLException
0: 	{
0:         throw new SQLException("getMaxFieldSize");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setMaxFieldSize(int max) throws SQLException
0: 	{
0:         throw new SQLException("setMaxFieldSize");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getMaxRows() throws SQLException
0: 	{
0:         throw new SQLException("getMaxRows");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setMaxRows(int max) throws SQLException
0: 	{
0:         throw new SQLException("setMaxRows");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setEscapeProcessing(boolean enable) throws SQLException
0: 	{
0:         throw new SQLException("setEscapeProcessing");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getQueryTimeout() throws SQLException
0: 	{
0:         throw new SQLException("getQueryTimeout");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setQueryTimeout(int seconds) throws SQLException
0: 	{
0:         throw new SQLException("setQueryTimeout");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void addBatch(String sql) throws SQLException
0: 	{
0:         throw new SQLException("addBatch");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void clearBatch() throws SQLException
0: 	{
0:         throw new SQLException("clearBatch");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int[] executeBatch() throws SQLException
0: 	{
0:         throw new SQLException("executeBatch");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void cancel() throws SQLException
0: 	{
0:         throw new SQLException("cancel");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setCursorName(String name) throws SQLException
0: 	{
0:         throw new SQLException("setCursorName");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean execute(String sql) throws SQLException
0: 	{
0:         throw new SQLException("execute");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public ResultSet getResultSet() throws SQLException
0: 	{
0:         throw new SQLException("getResultSet");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getUpdateCount() throws SQLException
0: 	{
0:         throw new SQLException("getUpdateCount");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean getMoreResults() throws SQLException
0: 	{
0:         throw new SQLException("getMoreResults");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.Statement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getResultSetConcurrency() throws SQLException
0: 	{
0:         return JDBC20Translation.CONCUR_UPDATABLE;
0: 	}
0: 
0:     //
0:     // java.sql.PreparedStatement calls, passed through to our preparedStatement.
0:     //
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public ResultSet executeQuery() throws SQLException
0: 	{
0:         throw new SQLException("executeQuery");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int executeUpdate() throws SQLException
0: 	{
0:         throw new SQLException("executeUpdate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setNull(int parameterIndex, int jdbcType) throws SQLException
0: 	{
0:         throw new SQLException("setNull");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setNull(int parameterIndex, int jdbcType, String typeName) throws SQLException
0: 	{
0:         throw new SQLException("setNull");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setBoolean(int parameterIndex, boolean x) throws SQLException
0: 	{
0:         throw new SQLException("setBoolean");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setByte(int parameterIndex, byte x) throws SQLException
0: 	{
0:         throw new SQLException("setByte");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setShort(int parameterIndex, short x) throws SQLException
0: 	{
0:         throw new SQLException("setShort");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setInt(int parameterIndex, int x) throws SQLException
0: 	{
0:         throw new SQLException("setInt");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setLong(int parameterIndex, long x) throws SQLException
0: 	{
0:         throw new SQLException("setLong");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setFloat(int parameterIndex, float x) throws SQLException
0: 	{
0:         throw new SQLException("setFloat");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setDouble(int parameterIndex, double x) throws SQLException
0: 	{
0:         throw new SQLException("setDouble");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
0: 	{
0:         throw new SQLException("setBigDecimal");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setString(int parameterIndex, String x) throws SQLException
0: 	{
0:         throw new SQLException("setString");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setBytes(int parameterIndex, byte x[]) throws SQLException
0: 	{
0:         throw new SQLException("setBytes");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setDate(int parameterIndex, Date x) throws SQLException
0: 	{
0:         throw new SQLException("setDate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setTime(int parameterIndex, Time x) throws SQLException
0: 	{
0:         throw new SQLException("setTime");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
0: 	{
0:         throw new SQLException("setTimestamp");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
0: 	{
0:         throw new SQLException("setAsciiStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
0: 	{
0:         throw new SQLException("setUnicodeStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
0: 	{
0:         throw new SQLException("setBinaryStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void clearParameters() throws SQLException
0: 	{
0:         throw new SQLException("clearParameters");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setObject(int parameterIndex, Object x, int targetJdbcType, int scale) throws SQLException
0: 	{
0:         throw new SQLException("setObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setObject(int parameterIndex, Object x, int targetJdbcType) throws SQLException
0: 	{
0:         throw new SQLException("setObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setObject(int parameterIndex, Object x) throws SQLException
0: 	{
0:         throw new SQLException("setObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean execute() throws SQLException
0: 	{
0:         throw new SQLException("execute");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public ResultSetMetaData getMetaData() throws SQLException
0: 	{
0:         throw new SQLException("ResultSetMetaData");
0: 	}
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public int getResultSetType() throws SQLException {
0: 		throw new SQLException("getResultSetType");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setBlob(int i, Blob x) throws SQLException {
0: 		throw new SQLException("setBlob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setFetchDirection(int direction) throws SQLException {
0: 		throw new SQLException("setFetchDirection");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setFetchSize(int rows) throws SQLException {
0: 		throw new SQLException("setFetchSize");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void addBatch() throws SQLException {
0: 		throw new SQLException("addBatch");
0: 	}
0: 
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setCharacterStream(int parameterIndex,
0: 									Reader reader,
0: 									int length) throws SQLException {
0: 		throw new SQLException("setCharacterStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public Connection getConnection() throws SQLException {
0: 		throw new SQLException("getConnection");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public int getFetchDirection() throws SQLException {
0: 		throw new SQLException("getFetchDirection");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setTime(int parameterIndex, Time x, Calendar cal)
0: 								throws SQLException {
0: 		throw new SQLException("setTime");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
0: 								throws SQLException {
0: 		throw new SQLException("setTimestamp");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public int getFetchSize() throws SQLException {
0: 		throw new SQLException("getFetchSize");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setRef(int i, Ref x) throws SQLException {
0: 		throw new SQLException("setRef");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setDate(int parameterIndex, Date x, Calendar cal)
0: 						throws SQLException {
0: 		throw new SQLException("setDate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setClob(int i, Clob x) throws SQLException {
0: 		throw new SQLException("setClob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.PreparedStatement
0: 	 *
0: 	 * @exception SQLException		Always thrown
0: 	 */
0: 	public void setArray(int i, Array x) throws SQLException {
0: 		throw new SQLException("setArray");
0: 	}
0: }
============================================================================