1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.context.ContextImpl
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.context;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Contexts are created and used to manage the execution
1:eac0369:  * environment. They provide a convenient location for
1:eac0369:  * storing globals organized by the module using the
1:eac0369:  * globals. 
1:eac0369:  * <p>
1:eac0369:  * We provide this abstract class for other implementations
1:eac0369:  * to use so that they can simply add fields and operations on
1:eac0369:  * them. To be usable by the context manager, the subclasses
1:eac0369:  * must define CleanupOnError and call super() in any constructor.
1:eac0369:  * <p>
1:eac0369:  * Contexts assist in cleanup
1:eac0369:  * when errors are caught in the outer block.
1:eac0369:  * <p>
1:eac0369:  * Contexts implement the sanity interface to check and provide
1:eac0369:  * information about their contents.
1:eac0369:  */
1:eac0369: public abstract class ContextImpl 
1:eac0369: 	implements Context
1:eac0369: {
1:eac0369: 	private final String myIdName;
1:eac0369: 	private final ContextManager myContextManager;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 	protected ContextImpl(ContextManager cm, String id) {
1:eac0369: 		myIdName = id;
1:eac0369: 		myContextManager = cm;
1:eac0369: 		cm.pushContext(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Context interface
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.context.Context#getContextManager
1:eac0369: 	 */
1:eac0369: 	final public ContextManager getContextManager()
1:eac0369: 	{
1:eac0369: 		return myContextManager;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.context.Context#getIdName
1:eac0369: 	 */
1:eac0369: 	final public String getIdName()
1:eac0369: 	{
1:eac0369: 		return myIdName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	final public void pushMe() {
1:eac0369: 		getContextManager().pushContext(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Context#popMe */
1:eac0369: 	final public void popMe() {
1:eac0369: 		getContextManager().popContext(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Context#isLastHandler
1:eac0369: 	 */
1:eac0369: 	public boolean isLastHandler(int severity)
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public StringBuffer appendErrorInfo() {
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.context.ContextImpl
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.context;
1: 
1: /**
1:  * Contexts are created and used to manage the execution
1:  * environment. They provide a convenient location for
1:  * storing globals organized by the module using the
1:  * globals. 
1:  * <p>
1:  * We provide this abstract class for other implementations
1:  * to use so that they can simply add fields and operations on
1:  * them. To be usable by the context manager, the subclasses
1:  * must define CleanupOnError and call super() in any constructor.
1:  * <p>
1:  * Contexts assist in cleanup
1:  * when errors are caught in the outer block.
1:  * <p>
1:  * Contexts implement the sanity interface to check and provide
1:  * information about their contents.
1:  */
1: public abstract class ContextImpl 
1: 	implements Context
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private final String myIdName;
1: 	private final ContextManager myContextManager;
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 	protected ContextImpl(ContextManager cm, String id) {
1: 		myIdName = id;
1: 		myContextManager = cm;
1: 		cm.pushContext(this);
1: 	}
1: 
1: 	/*
1: 	 * Context interface
1: 	 */
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.context.Context#getContextManager
1: 	 */
1: 	final public ContextManager getContextManager()
1: 	{
1: 		return myContextManager;
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.context.Context#getIdName
1: 	 */
1: 	final public String getIdName()
1: 	{
1: 		return myIdName;
1: 	}
1: 
1: 	final public void pushMe() {
1: 		getContextManager().pushContext(this);
1: 	}
1: 
1: 	/** @see Context#popMe */
1: 	final public void popMe() {
1: 		getContextManager().popContext(this);
1: 	}
1: 
1: 	/**
1: 	 * @see Context#isLastHandler
1: 	 */
1: 	public boolean isLastHandler(int severity)
1: 	{
1: 		return false;
1: 	}
1: 
1: 	public StringBuffer appendErrorInfo() {
1: 		return null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.context;
0: 
0: /**
0:  * Contexts are created and used to manage the execution
0:  * environment. They provide a convenient location for
0:  * storing globals organized by the module using the
0:  * globals. 
0:  * <p>
0:  * We provide this abstract class for other implementations
0:  * to use so that they can simply add fields and operations on
0:  * them. To be usable by the context manager, the subclasses
0:  * must define CleanupOnError and call super() in any constructor.
0:  * <p>
0:  * Contexts assist in cleanup
0:  * when errors are caught in the outer block.
0:  * <p>
0:  * Contexts implement the sanity interface to check and provide
0:  * information about their contents.
0:  */
0: public abstract class ContextImpl 
0: 	implements Context
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private final String myIdName;
0: 	private final ContextManager myContextManager;
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 	protected ContextImpl(ContextManager cm, String id) {
0: 		myIdName = id;
0: 		myContextManager = cm;
0: 		cm.pushContext(this);
0: 	}
0: 
0: 	/*
0: 	 * Context interface
0: 	 */
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.context.Context#getContextManager
0: 	 */
0: 	final public ContextManager getContextManager()
0: 	{
0: 		return myContextManager;
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.context.Context#getIdName
0: 	 */
0: 	final public String getIdName()
0: 	{
0: 		return myIdName;
0: 	}
0: 
0: 	final public void pushMe() {
0: 		getContextManager().pushContext(this);
0: 	}
0: 
0: 	/** @see Context#popMe */
0: 	final public void popMe() {
0: 		getContextManager().popContext(this);
0: 	}
0: 
0: 	/**
0: 	 * @see Context#isLastHandler
0: 	 */
0: 	public boolean isLastHandler(int severity)
0: 	{
0: 		return false;
0: 	}
0: 
0: 	public StringBuffer appendErrorInfo() {
0: 		return null;
0: 	}
0: }
============================================================================