1:4aef9b0: /*
3:4aef9b0: 
1:4aef9b0:    Derby - Class org.apache.derby.catalog.types.RowMultiSetImpl
1:4aef9b0: 
1:4aef9b0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4aef9b0:    contributor license agreements.  See the NOTICE file distributed with
1:4aef9b0:    this work for additional information regarding copyright ownership.
1:4aef9b0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:4aef9b0:    (the "License"); you may not use this file except in compliance with
1:4aef9b0:    the License.  You may obtain a copy of the License at
1:4aef9b0: 
1:4aef9b0:       http://www.apache.org/licenses/LICENSE-2.0
1:4aef9b0: 
1:4aef9b0:    Unless required by applicable law or agreed to in writing, software
1:4aef9b0:    distributed under the License is distributed on an "AS IS" BASIS,
1:4aef9b0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4aef9b0:    See the License for the specific language governing permissions and
1:4aef9b0:    limitations under the License.
1:4aef9b0: 
2:4aef9b0:  */
1:4aef9b0: 
1:4aef9b0: package org.apache.derby.catalog.types;
1:baca785: import org.apache.derby.catalog.TypeDescriptor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:57465ef: import org.apache.derby.iapi.services.io.ArrayUtil;
1:4aef9b0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:4aef9b0: import java.io.ObjectOutput;
1:4aef9b0: import java.io.ObjectInput;
1:4aef9b0: import java.io.IOException;
1:4aef9b0: import java.sql.Types;
1:4aef9b0: 
2:4aef9b0: /**
1:4aef9b0:  * <p>
1:4aef9b0:  * Row data type as described in the 2003 SQL spec
1:4aef9b0:  * in part 2, section 4.8.
1:4aef9b0:  * </p>
1:4aef9b0:  */
1:4aef9b0: public class RowMultiSetImpl extends BaseTypeIdImpl
3:4aef9b0: {
1:4aef9b0:     /********************************************************
1:4aef9b0:     **
1:4aef9b0:     **      This class implements Formatable. That means that it
1:4aef9b0:     **      can write itself to and from a formatted stream. If
1:4aef9b0:     **      you add more fields to this class, make sure that you
1:4aef9b0:     **      also write/read them with the writeExternal()/readExternal()
1:4aef9b0:     **      methods.
1:4aef9b0:     **
1:4aef9b0:     **      If, inbetween releases, you add more fields to this class,
1:4aef9b0:     **      then you should bump the version number emitted by the 
1:4aef9b0:     **      getTypeFormatId() method.
1:4aef9b0:     **
1:4aef9b0:     ********************************************************/
1:4aef9b0: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // CONSTANTS
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // STATE
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     private String[]                            _columnNames;
1:baca785:     private TypeDescriptor[]    _types;
1:4aef9b0: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // CONSTRUCTOR
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:4aef9b0:      * 0-arg constructor for Formatable machinery.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:4aef9b0:     public RowMultiSetImpl()
1:4aef9b0:     {}
1:4aef9b0:     
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:4aef9b0:      * Construct from column names and their types.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:baca785:     public RowMultiSetImpl( String[] columnNames, TypeDescriptor[] types )
1:4aef9b0:     {
1:57465ef:         _columnNames = ArrayUtil.copy( columnNames );
1:57465ef:         setTypes( types );
1:4aef9b0: 
1:4aef9b0:         if (
1:4aef9b0:             (columnNames == null ) ||
1:4aef9b0:             (types == null) ||
1:4aef9b0:             (columnNames.length != types.length )
1:4aef9b0:             )
1:4aef9b0:         {
1:4aef9b0:             throw new IllegalArgumentException( "Bad args: columnNames = " + columnNames + ". types = " + types );
3:4aef9b0:         }
1:4aef9b0:     }
1:4aef9b0: 
1:4aef9b0:         
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // ACCESSORS
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     /** Get the names of the columns in this row set */
1:57465ef:     public  String[]    getColumnNames()    { return ArrayUtil.copy( _columnNames ); }
1:4aef9b0:     
1:4aef9b0:     /** Get the types of the columns in this row set */
1:57465ef:     public  TypeDescriptor[]    getTypes() { return TypeDescriptorImpl.copyTypeDescriptors( _types ); }
1:57465ef:     
1:57465ef:     /** Set the types of the columns in this row set */
1:57465ef:     public  void    setTypes( TypeDescriptor[] types ) { _types = TypeDescriptorImpl.copyTypeDescriptors( types ); }
1:4aef9b0:     
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // OVERRIDE BEHAVIOR IN BaseTypeIdImpl
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:c69a3f5:      * Get the SQL name of this multi set. This is the name suitable for
1:c69a3f5:      * replaying the DDL to create a Table Function.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:4aef9b0:     public  String  getSQLTypeName()
1:4aef9b0:     {
1:4aef9b0:         StringBuffer    buffer = new StringBuffer();
1:4aef9b0:         int                     count = _columnNames.length;
1:4aef9b0: 
1:c69a3f5:         buffer.append( "TABLE ( " );
1:4aef9b0: 
1:4aef9b0:         for ( int i = 0; i < count; i++ )
1:4aef9b0:         {
1:4aef9b0:             if ( i > 0 ) { buffer.append( ", " ); }
1:4aef9b0: 
1:c69a3f5:             buffer.append( '\"' );
1:4aef9b0:             buffer.append( _columnNames[ i ] );
1:c69a3f5:             buffer.append( '\"' );
1:4aef9b0:             buffer.append( ' ' );
1:4aef9b0:             buffer.append( _types[ i ].getSQLstring() );
1:4aef9b0:         }
1:4aef9b0: 
1:c69a3f5:         buffer.append( " )" );
1:4aef9b0: 
1:4aef9b0:         return buffer.toString();
1:4aef9b0:     }
1:4aef9b0:     
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:4aef9b0:      * Get the corresponding JDBC type.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:4aef9b0:     public  int getJDBCTypeId()
1:4aef9b0:     {
1:4aef9b0:         return Types.OTHER;
1:4aef9b0:     }
1:4aef9b0: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // Formatable BEHAVIOR
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:4aef9b0:      * Get the id which indicates which class deserializes us.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:4aef9b0:     public  int getTypeFormatId()
1:4aef9b0:     {
1:4aef9b0:         return StoredFormatIds.ROW_MULTISET_TYPE_ID_IMPL;
1:4aef9b0:     }
1:4aef9b0:     
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:4aef9b0:      * Read ourself from a formatable stream.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:4aef9b0:     public  void readExternal( ObjectInput in )
1:4aef9b0:         throws IOException, ClassNotFoundException
1:4aef9b0:     {
1:4aef9b0:         int     count = in.readInt();
1:4aef9b0: 
1:4aef9b0:         _columnNames = new String[ count ];
1:baca785:         _types = new TypeDescriptor[ count ];
1:4aef9b0: 
1:4aef9b0:         for ( int i = 0; i < count; i++ ) { _columnNames[ i ] = in.readUTF(); }
1:baca785:         for ( int i = 0; i < count; i++ ) { _types[ i ] = (TypeDescriptor) in.readObject(); }
1:4aef9b0:     }
1:4aef9b0: 
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:4aef9b0:      * Write ourself to a formatable stream.
1:4aef9b0:      * </p>
1:4aef9b0:      */
1:4aef9b0:     public  void writeExternal( ObjectOutput out )
1:4aef9b0:         throws IOException
1:4aef9b0:     {
1:4aef9b0:         int     count = _columnNames.length;
1:4aef9b0: 
1:4aef9b0:         out.writeInt( count );
1:4aef9b0: 
1:4aef9b0:         for ( int i = 0; i < count; i++ ) { out.writeUTF( _columnNames[ i ] ); }
1:4aef9b0:         for ( int i = 0; i < count; i++ ) { out.writeObject( _types[ i ] ); }
1:4aef9b0:     }
1:4aef9b0: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // MINIONS
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0: 
1:4aef9b0: 
1:4aef9b0: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:57465ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1:         _columnNames = ArrayUtil.copy( columnNames );
1:         setTypes( types );
/////////////////////////////////////////////////////////////////////////
1:     public  String[]    getColumnNames()    { return ArrayUtil.copy( _columnNames ); }
1:     public  TypeDescriptor[]    getTypes() { return TypeDescriptorImpl.copyTypeDescriptors( _types ); }
1:     
1:     /** Set the types of the columns in this row set */
1:     public  void    setTypes( TypeDescriptor[] types ) { _types = TypeDescriptorImpl.copyTypeDescriptors( types ); }
commit:c69a3f5
/////////////////////////////////////////////////////////////////////////
1:      * Get the SQL name of this multi set. This is the name suitable for
1:      * replaying the DDL to create a Table Function.
/////////////////////////////////////////////////////////////////////////
1:         buffer.append( "TABLE ( " );
1:             buffer.append( '\"' );
1:             buffer.append( '\"' );
1:         buffer.append( " )" );
commit:4aef9b0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.types.RowMultiSetImpl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import java.sql.Types;
1: 
1: /**
1:  * <p>
1:  * Row data type as described in the 2003 SQL spec
1:  * in part 2, section 4.8.
1:  * </p>
1:  */
1: public class RowMultiSetImpl extends BaseTypeIdImpl
1: {
1:     /********************************************************
1:     **
1:     **      This class implements Formatable. That means that it
1:     **      can write itself to and from a formatted stream. If
1:     **      you add more fields to this class, make sure that you
1:     **      also write/read them with the writeExternal()/readExternal()
1:     **      methods.
1:     **
1:     **      If, inbetween releases, you add more fields to this class,
1:     **      then you should bump the version number emitted by the 
1:     **      getTypeFormatId() method.
1:     **
1:     ********************************************************/
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private String[]                            _columnNames;
0:     private DataTypeDescriptor[]    _types;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * 0-arg constructor for Formatable machinery.
1:      * </p>
1:      */
1:     public RowMultiSetImpl()
1:     {}
1:     
1:     /**
1:      * <p>
1:      * Construct from column names and their types.
1:      * </p>
1:      */
0:     public RowMultiSetImpl( String[] columnNames, DataTypeDescriptor[] types )
1:     {
0:         _columnNames = columnNames;
0:         _types = types;
1: 
1:         if (
1:             (columnNames == null ) ||
1:             (types == null) ||
1:             (columnNames.length != types.length )
1:             )
1:         {
1:             throw new IllegalArgumentException( "Bad args: columnNames = " + columnNames + ". types = " + types );
1:         }
1:     }
1: 
1:         
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the names of the columns in this row set */
0:     public  String[]    getColumnNames()    { return _columnNames; }
1:     
1:     /** Get the types of the columns in this row set */
0:     public  DataTypeDescriptor[]    getTypes() { return _types; }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OVERRIDE BEHAVIOR IN BaseTypeIdImpl
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
0:      * Get the SQL name of this multi set.
1:      * </p>
1:      */
1:     public  String  getSQLTypeName()
1:     {
1:         StringBuffer    buffer = new StringBuffer();
1:         int                     count = _columnNames.length;
1: 
0:         buffer.append( "ROW ( " );
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             if ( i > 0 ) { buffer.append( ", " ); }
1: 
1:             buffer.append( _columnNames[ i ] );
1:             buffer.append( ' ' );
1:             buffer.append( _types[ i ].getSQLstring() );
1:         }
1: 
0:         buffer.append( " ) MULTISET" );
1: 
1:         return buffer.toString();
1:     }
1:     
1:     /**
1:      * <p>
1:      * Get the corresponding JDBC type.
1:      * </p>
1:      */
1:     public  int getJDBCTypeId()
1:     {
1:         return Types.OTHER;
1:     }
1:     
1:     /**
0:      * Get the format id for the wrapper type id that corresponds to
0:      * this type id. Should not be called.
1:      */
0:     public int wrapperTypeFormatId()
1:     {
0:         if (SanityManager.DEBUG)
1:         {
0:             SanityManager.THROWASSERT("RowMultiSetImpl.wrapperTypeFormatId() unexpectedly called. " );
1:         }
1:         
0:         return -1;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Formatable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the id which indicates which class deserializes us.
1:      * </p>
1:      */
1:     public  int getTypeFormatId()
1:     {
1:         return StoredFormatIds.ROW_MULTISET_TYPE_ID_IMPL;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Read ourself from a formatable stream.
1:      * </p>
1:      */
1:     public  void readExternal( ObjectInput in )
1:         throws IOException, ClassNotFoundException
1:     {
1:         int     count = in.readInt();
1: 
1:         _columnNames = new String[ count ];
0:         _types = new DataTypeDescriptor[ count ];
1: 
1:         for ( int i = 0; i < count; i++ ) { _columnNames[ i ] = in.readUTF(); }
0:         for ( int i = 0; i < count; i++ ) { _types[ i ] = (DataTypeDescriptor) in.readObject(); }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Write ourself to a formatable stream.
1:      * </p>
1:      */
1:     public  void writeExternal( ObjectOutput out )
1:         throws IOException
1:     {
1:         int     count = _columnNames.length;
1: 
1:         out.writeInt( count );
1: 
1:         for ( int i = 0; i < count; i++ ) { out.writeUTF( _columnNames[ i ] ); }
1:         for ( int i = 0; i < count; i++ ) { out.writeObject( _types[ i ] ); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6e2e8c0
/////////////////////////////////////////////////////////////////////////
commit:baca785
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.TypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private TypeDescriptor[]    _types;
/////////////////////////////////////////////////////////////////////////
1:     public RowMultiSetImpl( String[] columnNames, TypeDescriptor[] types )
/////////////////////////////////////////////////////////////////////////
0:     public  TypeDescriptor[]    getTypes() { return _types; }
/////////////////////////////////////////////////////////////////////////
1:         _types = new TypeDescriptor[ count ];
1:         for ( int i = 0; i < count; i++ ) { _types[ i ] = (TypeDescriptor) in.readObject(); }
============================================================================