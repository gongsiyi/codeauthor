1:fc02124: /**
2:fc02124:  *
1:fc02124:  * Derby - Class BLOBDataModelSetup
1:fc02124:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:fc02124:  *
1:fc02124:  *    http://www.apache.org/licenses/LICENSE-2.0
1:fc02124:  *
1:fc02124:  * Unless required by applicable law or agreed to in writing,
1:fc02124:  * software distributed under the License is distributed on an
1:fc02124:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:fc02124:  * either express or implied. See the License for the specific
1:fc02124:  * language governing permissions and limitations under the License.
1:fc02124:  */
1:fc02124: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:fc02124: import org.apache.derbyTesting.functionTests.util.TestInputStream;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:3bd1dd8: 
1:fc02124: import junit.extensions.TestSetup;
1:fc02124: import junit.framework.Test;
1:fc02124: import java.sql.Connection;
1:fc02124: import java.sql.PreparedStatement;
1:fc02124: import java.sql.SQLException;
1:fc02124: import java.sql.Statement;
1:fc02124: import java.io.InputStream;
3:fc02124: 
1:fc02124: /**
1:fc02124:  * Sets up a data model with very large BLOBs.
1:fc02124:  * The table created will have three fields: 
1:fc02124:  *  1. a value field (val), which is the value for every byte in the BLOB.
1:fc02124:  *  2. a length (length) field which is the actual size of the BLOB
1:fc02124:  *  3. the data field (data), which is the actual BLOB data.
1:fc02124:  *
1:fc02124:  */
1:ffe3f66: final public class BLOBDataModelSetup extends BaseJDBCTestSetup
1:fc02124: {
1:fc02124:     
1:fc02124:     /** 
1:fc02124:      * Constructor
1:fc02124:      * @param test test object being decorated by this TestSetup
1:fc02124:      */
1:fc02124:     public BLOBDataModelSetup(Test test) 
1:fc02124:     {
1:fc02124:         super(test);
2:fc02124:     }
1:fc02124: 
1:fc02124:     /**
1:fc02124:      * The setup creates a Connection to the database, and creates a table
1:fc02124:      * with blob columns.
1:fc02124:      * @exception Exception any exception will cause test to fail with error.
1:fc02124:      */
1:576a49f:     protected final void setUp() 
1:fc02124:         throws Exception
1:fc02124:     {
1:ffe3f66:         Connection con = getConnection();
1:fc02124:         con.setAutoCommit(false);
1:fc02124:         
1:fc02124:         // Create table:
1:fc02124:         final Statement statement = con.createStatement();
1:fc02124:         statement.executeUpdate("CREATE TABLE " + tableName + " ("+
1:fc02124:                                 " val INTEGER," +
1:fc02124:                                 " length INTEGER, " +
1:fc02124:                                 " data BLOB(2G) NOT NULL)");
1:fc02124:         statement.close();
1:fc02124:         // Insert some data:
1:fc02124:         final PreparedStatement preparedStatement =
1:fc02124:             con.prepareStatement
1:fc02124:             ("INSERT INTO " + tableName + "(val, length, data) VALUES (?,?, ?)");
1:fc02124:         
1:fc02124:         // Insert 10 records with size of 1MB
1:1160146:         for (int i = 0; i < regularBlobs; i++) {
1:fc02124:             final int val = i;
1:fc02124:             final InputStream stream = new TestInputStream(size, val);
2:fc02124:             preparedStatement.setInt(1, val);
1:fc02124:             preparedStatement.setInt(2, size);
1:fc02124:             preparedStatement.setBinaryStream(3, stream, size);
1:fc02124:             preparedStatement.executeUpdate();
1:fc02124:         }
1:fc02124:         
1:fc02124:         // Insert 1 record with size of 64 MB
1:1160146:         BaseJDBCTestCase.println("Insert BLOB with size = " + bigSize);
1:1160146:         preparedStatement.setInt(1, bigVal);
1:1160146:         preparedStatement.setInt(2, bigSize);
1:1160146:         final InputStream stream = new TestInputStream(bigSize, bigVal);
1:1160146:         preparedStatement.setBinaryStream(3, stream, bigSize);
1:fc02124:         
1:fc02124:         BaseJDBCTestCase.println("Execute update");
1:fc02124:         preparedStatement.executeUpdate();
1:fc02124:         preparedStatement.close();
1:fc02124:         
1:fc02124:         BaseJDBCTestCase.println("Commit");
1:fc02124:         con.commit();
1:fc02124:     }
1:fc02124:     
1:fc02124:     /**
1:fc02124:      * Teardown test.
1:fc02124:      * Rollback connection and close it.
1:fc02124:      * @exception Exceptions causes the test to fail with error
1:fc02124:      */
1:576a49f:     protected final void tearDown() 
1:fc02124:         throws Exception
1:fc02124:     {
1:fc02124:         try { 
1:ffe3f66:             Connection con = getConnection();
1:fc02124:             Statement statement = con.createStatement();
1:fc02124:             statement.execute("DROP TABLE " + tableName);
1:fc02124:             statement.close();
1:fc02124:             con.commit();
1:fc02124:         } catch (SQLException e) {
1:fc02124:             BaseJDBCTestCase.printStackTrace(e);
1:ffe3f66:         }  
1:ffe3f66:         
1:ffe3f66:         super.tearDown();
1:fc02124:     }
1:fc02124: 
1:fc02124:     /**
1:fc02124:      * Return table name 
1:fc02124:      * @return table name
1:fc02124:      */
1:fc02124:     public static final String getBlobTableName() 
1:fc02124:     {
1:fc02124:         return tableName;
1:fc02124:     }
1:fc02124:     
1:1160146:     /** Size of regular Blobs (currently 1MB) */
1:1160146:     final static int size = 1024 * 1024;
1:1160146:     
1:1160146:     /** Number of regular Blobs */
1:1160146:     final static int regularBlobs = 10;
1:1160146: 
1:1160146:     /** Size of big record (currently 64 MB) */
1:1160146:     final static int bigSize = 64 * 1024 * 1024;
1:1160146:     
1:1160146:     /** Val for big  record */
1:1160146:     final static int bigVal = regularBlobs + 1;
1:1160146:     
1:fc02124:     /** Name of table */
1:fc02124:     private static final String tableName = "TESTBLOBTABLE";
1:fc02124: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: 
commit:ffe3f66
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestSetup;
/////////////////////////////////////////////////////////////////////////
1: final public class BLOBDataModelSetup extends BaseJDBCTestSetup
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:             Connection con = getConnection();
1:         }  
1:         
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
commit:576a49f
/////////////////////////////////////////////////////////////////////////
1:     protected final void setUp() 
/////////////////////////////////////////////////////////////////////////
1:     protected final void tearDown() 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:1160146
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < regularBlobs; i++) {
/////////////////////////////////////////////////////////////////////////
1:         BaseJDBCTestCase.println("Insert BLOB with size = " + bigSize);
1:         preparedStatement.setInt(1, bigVal);
1:         preparedStatement.setInt(2, bigSize);
1:         final InputStream stream = new TestInputStream(bigSize, bigVal);
1:         preparedStatement.setBinaryStream(3, stream, bigSize);
/////////////////////////////////////////////////////////////////////////
1:     /** Size of regular Blobs (currently 1MB) */
1:     final static int size = 1024 * 1024;
1:     
1:     /** Number of regular Blobs */
1:     final static int regularBlobs = 10;
1: 
1:     /** Size of big record (currently 64 MB) */
1:     final static int bigSize = 64 * 1024 * 1024;
1:     
1:     /** Val for big  record */
1:     final static int bigVal = regularBlobs + 1;
1:     
commit:fc02124
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Derby - Class BLOBDataModelSetup
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License")
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: import org.apache.derbyTesting.functionTests.util.TestInputStream;
1: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.io.InputStream;
1: 
1: /**
1:  * Sets up a data model with very large BLOBs.
1:  * The table created will have three fields: 
1:  *  1. a value field (val), which is the value for every byte in the BLOB.
1:  *  2. a length (length) field which is the actual size of the BLOB
1:  *  3. the data field (data), which is the actual BLOB data.
1:  *
0:  * @author Andreas Korneliussen
1:  */
0: final public class BLOBDataModelSetup extends TestSetup
1: {
1:     
1:     /** 
1:      * Constructor
1:      * @param test test object being decorated by this TestSetup
1:      */
1:     public BLOBDataModelSetup(Test test) 
1:     {
1:         super(test);
1:     }
1: 
1:     /**
1:      * The setup creates a Connection to the database, and creates a table
1:      * with blob columns.
1:      * @exception Exception any exception will cause test to fail with error.
1:      */
0:     public final void setUp() 
1:         throws Exception
1:     {
0:         con = BaseJDBCTestCase.getConnection();
1:         con.setAutoCommit(false);
1:         
1:         // Create table:
1:         final Statement statement = con.createStatement();
1:         statement.executeUpdate("CREATE TABLE " + tableName + " ("+
1:                                 " val INTEGER," +
1:                                 " length INTEGER, " +
1:                                 " data BLOB(2G) NOT NULL)");
1:         statement.close();
1:         // Insert some data:
1:         final PreparedStatement preparedStatement =
1:             con.prepareStatement
1:             ("INSERT INTO " + tableName + "(val, length, data) VALUES (?,?, ?)");
1:         
1:         // Insert 10 records with size of 1MB
0:         final int size = 1024*1024;
0:         for (int i = 0; i < 10; i++) {
1:             final int val = i;
1:             final InputStream stream = new TestInputStream(size, val);
1:             preparedStatement.setInt(1, val);
1:             preparedStatement.setInt(2, size);
1:             preparedStatement.setBinaryStream(3, stream, size);
1:             preparedStatement.executeUpdate();
1:         }
1:         
1:         // Insert 1 record with size of 64 MB
0:         final int bigsize = 1024 * 1024 * 64;
0:         final int val = 11;
1:         
0:         BaseJDBCTestCase.println("Insert BLOB with size = " + bigsize);
1:         preparedStatement.setInt(1, val);
0:         preparedStatement.setInt(2, bigsize);
0:         final InputStream stream = new TestInputStream(bigsize, val);
0:         preparedStatement.setBinaryStream(3, stream, bigsize);
1:         
1:         BaseJDBCTestCase.println("Execute update");
1:         preparedStatement.executeUpdate();
1:         preparedStatement.close();
1:         
1:         BaseJDBCTestCase.println("Commit");
1:         con.commit();
1:     }
1:     
1:     /**
1:      * Teardown test.
1:      * Rollback connection and close it.
1:      * @exception Exceptions causes the test to fail with error
1:      */
0:     public final void tearDown() 
1:         throws Exception
1:     {
1:         try { 
1:             Statement statement = con.createStatement();
1:             statement.execute("DROP TABLE " + tableName);
1:             statement.close();
1:             con.commit();
0:             con.close();
1:         } catch (SQLException e) {
1:             BaseJDBCTestCase.printStackTrace(e);
1:         }      
1:     }
1: 
1:     /**
1:      * Return table name 
1:      * @return table name
1:      */
1:     public static final String getBlobTableName() 
1:     {
1:         return tableName;
1:     }
1:     
0:     /** JDBC Connection */        
0:     private Connection con;
1:     
1:     /** Name of table */
1:     private static final String tableName = "TESTBLOBTABLE";
1: }
============================================================================