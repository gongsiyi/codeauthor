1:4f1a993: /*
1:bf44851: 
1:4f1a993:    Derby - Class org.apache.derbyTesting.junit.Decorator
1:5f07346: 
1:4f1a993:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4f1a993:    contributor license agreements.  See the NOTICE file distributed with
1:4f1a993:    this work for additional information regarding copyright ownership.
1:4f1a993:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4f1a993:    (the "License"); you may not use this file except in compliance with
1:4f1a993:    the License.  You may obtain a copy of the License at
23:4f1a993: 
1:4f1a993:       http://www.apache.org/licenses/LICENSE-2.0
1:4f1a993: 
1:4f1a993:    Unless required by applicable law or agreed to in writing, software
1:4f1a993:    distributed under the License is distributed on an "AS IS" BASIS,
1:4f1a993:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f1a993:    See the License for the specific language governing permissions and
1:4f1a993:    limitations under the License.
1:4f1a993: 
4:4f1a993:  */
1:4f1a993: package org.apache.derbyTesting.junit;
1:5f07346: 
1:5c61b1d: import java.util.Properties;
1:4f1a993: import java.util.Random;
1:4f1a993: import junit.framework.Test;
1:5f07346: 
4:4f1a993: /**
1:4f1a993:  * Utility class that provides static methods to decorate tests.
1:4f1a993:  * Used as a central collection point for decorators than cannot
1:4f1a993:  * be simply expressed as a TestSetup class. Typically the
1:4f1a993:  * decorators will be collections of other decorators
1:4f1a993:  */
1:4f1a993: public class Decorator {
1:5f07346: 
1:4f1a993:     private Decorator() {
1:4f1a993:         super();
3:4f1a993:     }
1:5f07346: 
1:4f1a993:     /**
1:4f1a993:      * Decorate a set of tests to use an encrypted
1:4f1a993:      * single use database. This is to run tests
1:5c61b1d:      * using encryption as a general test and
1:4f1a993:      * not specific tests of how encryption is handled.
1:4f1a993:      * E.g. tests of setting various URL attributes
1:4f1a993:      * would be handled in a specific test.
3:4f1a993:      * <BR>
1:4f1a993:      * The database will use the default encryption
1:4f1a993:      * algorithm.
1:4f1a993:      * <BR>
1:4f1a993:      * A boot password (phrase) is used with a random
1:4f1a993:      * set of characters and digits 16 characters long.
2:4f1a993:      * 
1:4f1a993:      * @param test test to decorate
1:4f1a993:      * @return decorated tests
1:4f1a993:      */
1:4f1a993:     public static Test encryptedDatabase(Test test)
4:4f1a993:     {
1:5c759ff:         return encryptedDatabaseBpw(test, getBootPhrase(16));
1:5c759ff:     }
1:5c759ff: 
1:5c759ff:     /**
1:5c759ff:      * Decorate a set of tests to use an encrypted
1:5c759ff:      * single use database. This is to run tests
1:5c759ff:      * using encryption as a general test and
1:5c759ff:      * not specific tests of how encryption is handled.
1:5c759ff:      * E.g. tests of setting various URL attributes
1:5c759ff:      * would be handled in a specific test.
1:5c759ff:      * <BR>
1:5c759ff:      * The database will use the default encryption
1:5c759ff:      * algorithm.
1:5c759ff:      * 
1:5c759ff:      * @param test test to decorate
1:5c759ff:      * @param bootPassword boot passphrase to use
1:5c759ff:      * @return decorated tests
1:5c759ff:      */
1:5c759ff:     public static Test encryptedDatabaseBpw(Test test, String bootPassword)
1:5c759ff:     {
1:637a940:         if (JDBC.vmSupportsJSR169())
1:1ae02c9:             return new BaseTestSuite("no encryption support");
1:637a940: 
1:5c61b1d:         Properties attributes = new Properties();
1:5c61b1d:         attributes.setProperty("dataEncryption", "true");
1:5c759ff:         attributes.setProperty("bootPassword", bootPassword);
1:5c61b1d: 
1:5c61b1d:         return attributesDatabase(attributes, test);
1:4f1a993:     }
1:5c759ff: 
1:b79d9d8:     /**
1:4f1a993:      * Decorate a set of tests to use an encrypted
1:4f1a993:      * single use database. This is to run tests
1:5c61b1d:      * using encryption as a general test and
1:4f1a993:      * not specific tests of how encryption is handled.
1:4f1a993:      * E.g. tests of setting various URL attributes
1:4f1a993:      * would be handled in a specific test.
1:4f1a993:      * <BR>
1:4f1a993:      * The database will use the specified encryption
1:4f1a993:      * algorithm.
1:4f1a993:      * <BR>
1:4f1a993:      * A boot password (phrase) is used with a random
1:4f1a993:      * set of characters and digits 64 characters long.
1:5f07346:      * 
1:4f1a993:      * @param test test to decorate
1:4f1a993:      * @return decorated tests
1:5f07346:      */
1:4f1a993:     public static Test encryptedDatabase(Test test, final String algorithm)
1:5f07346:     {
1:5c759ff:         return encryptedDatabaseBpw(test, algorithm, getBootPhrase(16));
1:5c759ff:     }
1:5c759ff: 
1:5c759ff: 
1:5c759ff:     /**
1:5c759ff:      * Decorate a set of tests to use an encrypted
1:5c759ff:      * single use database. This is to run tests
1:5c759ff:      * using encryption as a general test and
1:5c759ff:      * not specific tests of how encryption is handled.
1:5c759ff:      * E.g. tests of setting various URL attributes
1:5c759ff:      * would be handled in a specific test.
1:5c759ff:      * <BR>
1:5c759ff:      * The database will use the specified encryption
1:5c759ff:      * algorithm.
1:5c759ff:      * 
1:5c759ff:      * @param test test to decorate
1:5c759ff:      * @param bootPassword boot passphrase to use
1:5c759ff:      * @return decorated tests
1:5c759ff:      */
1:5c759ff:     public static Test encryptedDatabaseBpw(Test test,
1:5c759ff:                                             final String algorithm,
1:5c759ff:                                             String bootPassword)
1:5c759ff:     {
1:5c61b1d:         Properties attributes = new Properties();
1:5c61b1d:         attributes.setProperty("dataEncryption", "true");
1:5c759ff:         attributes.setProperty("bootPassword", bootPassword);
1:5c61b1d:         attributes.setProperty("encryptionAlgorithm", algorithm);
1:5c759ff: 
1:5f07346:         return attributesDatabase(attributes, test);
1:4f1a993:     }
1:b79d9d8: 
1:4f1a993:     private static String getBootPhrase(int length)
1:4f1a993:     {
1:4f1a993:         Random rand = new Random();
1:5f07346:         
1:4f1a993:         char[] bp = new char[length];
1:4f1a993:         for (int i = 0; i < bp.length; ) {
1:4f1a993:             char c = (char) rand.nextInt();
1:4f1a993:             if (Character.isLetterOrDigit(c))
1:4f1a993:             {
1:4f1a993:                 bp[i++] = c;
1:4f1a993:             }
1:4f1a993:         }
1:5f07346:         
1:4f1a993:         return new String(bp);
1:4f1a993:     }
1:5f07346:     
1:5f07346:     /**
1:5212101:      * Decorate a set of tests to use an single
1:5f07346:      * use database with TERRITORY_BASED collation
1:5c61b1d:      * set to the passed in locale.
1:85253df:      * @param locale Locale used to set territory JDBC attribute. If null
1:85253df:      * then only collation=TERRITORY_BASED will be set.
1:5f07346:      */
1:5f07346:     public static Test territoryCollatedDatabase(Test test, final String locale)
1:5f07346:     {
1:5c61b1d:         Properties attributes = new Properties();
1:5c61b1d:         attributes.setProperty("collation", "TERRITORY_BASED");
1:85253df:         
1:85253df:         if (locale != null)
1:5c61b1d:             attributes.setProperty("territory", locale);
1:5f07346:         
1:5f07346:         return attributesDatabase(attributes, test);
1:5f07346:     }
1:5f07346: 
1:5f07346:     /**
1:b79d9d8:      * Decorate a set of tests to use a single use database with
1:b79d9d8:      *  logDevice pointing a log directory to non-default location  
1:b79d9d8:      */
1:b79d9d8:     public static Test logDeviceAttributeDatabase(Test test, final String logDevice)
1:b79d9d8:     {
1:b79d9d8:         Properties attributes = new Properties();
1:b79d9d8:         if (logDevice != null) {
1:b79d9d8:             attributes.setProperty("logDevice",logDevice);
1:b79d9d8:         }
1:b79d9d8: 
1:b79d9d8:         test = TestConfiguration.singleUseDatabaseDecorator(test);
1:b79d9d8:         return attributesDatabase(attributes, test);
1:b79d9d8:     }
1:b79d9d8: 
1:5f07346:     /**
1:5f07346:      * Decorate a set of tests to use an single
1:5212101:      * use database with TERRITORY_BASED:SECONDARY collation
1:5c61b1d:      * set to the passed in locale.
1:5212101:      * @param locale Locale used to set territory JDBC attribute. If null
1:5212101:      * then only collation=TERRITORY_BASED:SECONDARY will be set.
1:5212101:      */
1:5212101:     public static Test territoryCollatedCaseInsensitiveDatabase(Test test, final String locale)
1:5212101:     {
1:5c61b1d:         Properties attributes = new Properties();
1:5c61b1d:         attributes.setProperty("collation", "TERRITORY_BASED:SECONDARY");
1:5212101: 
1:5212101:         if (locale != null)
1:5c61b1d:             attributes.setProperty("territory", locale);
1:5212101: 
1:5212101:         return attributesDatabase(attributes, test);
1:5212101:     }
1:5212101: 
1:5212101:     /**
1:5f07346:      * Decorate a test (or suite of tests) to use a single use database
1:5c61b1d:      * as the default database with a specified set connection attributes.
1:5f07346:      * 
1:5c61b1d:      * @param attributes properties to set in the connection URL or in the
1:5c61b1d:      * connectionAttributes of a data source when connecting to the database
1:5f07346:      * @param test Test to decorate
1:5f07346:      * @return Decorated test
1:5f07346:      */
1:951fa45:     public static Test attributesDatabase(
1:5c61b1d:             final Properties attributes, Test test)
1:5f07346:     {
1:5c61b1d:         test = new ChangeConfigurationSetup(test) {
1:5c61b1d:             TestConfiguration getNewConfiguration(TestConfiguration old) {
1:5c61b1d:                 return old.addConnectionAttributes(attributes);
1:5f07346:             }
1:5f07346:         };
1:5212101:         
1:5f07346:         return TestConfiguration.singleUseDatabaseDecorator(test);
1:5f07346:     }
1:4f1a993: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("no encryption support");
commit:5c759ff
/////////////////////////////////////////////////////////////////////////
1:         return encryptedDatabaseBpw(test, getBootPhrase(16));
1:     }
1: 
1:     /**
1:      * Decorate a set of tests to use an encrypted
1:      * single use database. This is to run tests
1:      * using encryption as a general test and
1:      * not specific tests of how encryption is handled.
1:      * E.g. tests of setting various URL attributes
1:      * would be handled in a specific test.
1:      * <BR>
1:      * The database will use the default encryption
1:      * algorithm.
1:      * 
1:      * @param test test to decorate
1:      * @param bootPassword boot passphrase to use
1:      * @return decorated tests
1:      */
1:     public static Test encryptedDatabaseBpw(Test test, String bootPassword)
1:     {
1:         attributes.setProperty("bootPassword", bootPassword);
1: 
/////////////////////////////////////////////////////////////////////////
1:         return encryptedDatabaseBpw(test, algorithm, getBootPhrase(16));
1:     }
1: 
1: 
1:     /**
1:      * Decorate a set of tests to use an encrypted
1:      * single use database. This is to run tests
1:      * using encryption as a general test and
1:      * not specific tests of how encryption is handled.
1:      * E.g. tests of setting various URL attributes
1:      * would be handled in a specific test.
1:      * <BR>
1:      * The database will use the specified encryption
1:      * algorithm.
1:      * 
1:      * @param test test to decorate
1:      * @param bootPassword boot passphrase to use
1:      * @return decorated tests
1:      */
1:     public static Test encryptedDatabaseBpw(Test test,
1:                                             final String algorithm,
1:                                             String bootPassword)
1:     {
1:         attributes.setProperty("bootPassword", bootPassword);
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:951fa45
/////////////////////////////////////////////////////////////////////////
1:     public static Test attributesDatabase(
commit:637a940
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJSR169())
0:             return new TestSuite("no encryption support");
1:         
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:b79d9d8
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Decorate a set of tests to use a single use database with
1:      *  logDevice pointing a log directory to non-default location  
1:      */
1:     public static Test logDeviceAttributeDatabase(Test test, final String logDevice)
1:     {
1:         Properties attributes = new Properties();
1:         if (logDevice != null) {
1:             attributes.setProperty("logDevice",logDevice);
1:         }
1: 
1:         test = TestConfiguration.singleUseDatabaseDecorator(test);
1:         return attributesDatabase(attributes, test);
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5c61b1d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:      * using encryption as a general test and
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Properties attributes = new Properties();
1:         attributes.setProperty("dataEncryption", "true");
0:         attributes.setProperty("bootPassword", getBootPhrase(16));
1: 
1:         return attributesDatabase(attributes, test);
1:      * using encryption as a general test and
/////////////////////////////////////////////////////////////////////////
1:         Properties attributes = new Properties();
1:         attributes.setProperty("dataEncryption", "true");
0:         attributes.setProperty("bootPassword", getBootPhrase(64));
1:         attributes.setProperty("encryptionAlgorithm", algorithm);
/////////////////////////////////////////////////////////////////////////
1:      * set to the passed in locale.
1:         Properties attributes = new Properties();
1:         attributes.setProperty("collation", "TERRITORY_BASED");
1:             attributes.setProperty("territory", locale);
/////////////////////////////////////////////////////////////////////////
1:      * set to the passed in locale.
1:         Properties attributes = new Properties();
1:         attributes.setProperty("collation", "TERRITORY_BASED:SECONDARY");
1:             attributes.setProperty("territory", locale);
1:      * as the default database with a specified set connection attributes.
1:      * @param attributes properties to set in the connection URL or in the
1:      * connectionAttributes of a data source when connecting to the database
0:     private static Test attributesDatabase(
1:             final Properties attributes, Test test)
1:         test = new ChangeConfigurationSetup(test) {
1:             TestConfiguration getNewConfiguration(TestConfiguration old) {
1:                 return old.addConnectionAttributes(attributes);
commit:5212101
/////////////////////////////////////////////////////////////////////////
1:      * Decorate a set of tests to use an single
1:      * use database with TERRITORY_BASED:SECONDARY collation
0:      * set to the passed in locale. Database is created
0:      * by the setUp method of the decorator.
1:      * @param locale Locale used to set territory JDBC attribute. If null
1:      * then only collation=TERRITORY_BASED:SECONDARY will be set.
1:      */
1:     public static Test territoryCollatedCaseInsensitiveDatabase(Test test, final String locale)
1:     {
1: 
0:         String attributes = "collation=TERRITORY_BASED:SECONDARY";
1: 
1:         if (locale != null)
0:             attributes = attributes.concat(";territory=" + locale);
1: 
1:         return attributesDatabase(attributes, test);
1:     }
1: 
1:     /**
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:85253df
/////////////////////////////////////////////////////////////////////////
0:      * by the setUp method of the decorator.
1:      * @param locale Locale used to set territory JDBC attribute. If null
1:      * then only collation=TERRITORY_BASED will be set.
0:         String attributes = "collation=TERRITORY_BASED";
1:         
1:         if (locale != null)
0:             attributes = attributes.concat(";territory=" + locale);
commit:5f07346
/////////////////////////////////////////////////////////////////////////
0:         String bootPhrase = getBootPhrase(64);
0:         String attributes =
0:             "dataEncryption=true;bootPassword=" + bootPhrase +
0:              ";encryptionAlgorithm=" + algorithm;
1: 
1:         return attributesDatabase(attributes, test);
1:         
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Decorate a set of tests to use an single
1:      * use database with TERRITORY_BASED collation
0:      * set to the passed in locale. Database is created
0:      * on by the setUp method of the decorator.
1:      */
1:     public static Test territoryCollatedDatabase(Test test, final String locale)
1:     {
1:         
0:         String attributes = "collation=TERRITORY_BASED;territory=" + locale;
1:         
1:         return attributesDatabase(attributes, test);
1:     }
1:     
1:     /**
1:      * Decorate a test (or suite of tests) to use a single use database
0:      * as the default database. The database is created by the setUp
0:      * method of the decorator. The database will be created using
0:      * a JDBC data source with createDatabase set to create and
0:      * connectionAttributes set to the passed in attributes.
1:      * 
1:      * 
0:      * @param attributes Value to set connectionAttributes to when creating
0:      * the database.
1:      * @param test Test to decorate
1:      * @return Decorated test
1:      */
0:     private static Test attributesDatabase(final String attributes, Test test)
1:     {
0:         test = new BaseTestSetup(test) {
1:             
1:             /**
0:              * Create a  database
0:              * using a JDBC data source with connectionAttributes set.
1:              */
0:             protected void setUp() throws SQLException
1:             {
0:                 DataSource ds = JDBCDataSource.getDataSource();
1:                                
0:                 JDBCDataSource.setBeanProperty(ds,
0:                         "createDatabase", "create");
0:                 JDBCDataSource.setBeanProperty(ds,
0:                         "connectionAttributes", attributes);
1:                                 
0:                 ds.getConnection().close();
1:             }
1:         };
1:         
1:         return TestConfiguration.singleUseDatabaseDecorator(test);
1:     }
commit:bf44851
/////////////////////////////////////////////////////////////////////////
0:                 String bootPhrase = getBootPhrase(16);
1: 
commit:23c0fed
/////////////////////////////////////////////////////////////////////////
0:         test = new BaseTestSetup(test) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         test = new BaseTestSetup(test) {
commit:4f1a993
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.junit.Decorator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.junit;
1: 
0: import java.sql.SQLException;
1: import java.util.Random;
1: 
0: import javax.sql.DataSource;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: 
1: /**
1:  * Utility class that provides static methods to decorate tests.
1:  * Used as a central collection point for decorators than cannot
1:  * be simply expressed as a TestSetup class. Typically the
1:  * decorators will be collections of other decorators
1:  */
1: public class Decorator {
1: 
1:     private Decorator() {
1:         super();
1:     }
1: 
1:     /**
1:      * Decorate a set of tests to use an encrypted
1:      * single use database. This is to run tests
0:      * using encrpyption as a general test and
1:      * not specific tests of how encryption is handled.
1:      * E.g. tests of setting various URL attributes
1:      * would be handled in a specific test.
1:      * <BR>
1:      * The database will use the default encryption
1:      * algorithm.
1:      * <BR>
1:      * A boot password (phrase) is used with a random
1:      * set of characters and digits 16 characters long.
1:      * <BR>
0:      * The database is created during the setUp of the decorator.
1:      * 
1:      * @param test test to decorate
1:      * @return decorated tests
1:      */
1:     public static Test encryptedDatabase(Test test)
1:     {
0:         test = new TestSetup(test) {
1:             
1:             /**
0:              * Create an encrypted database using a
0:              * JDBC data source.
1:              */
0:             protected void setUp() throws SQLException
1:             {
0:                 String bootPhrase = getBootPhrase(16);
1: 
0:                 DataSource ds = JDBCDataSource.getDataSource();
1:                                
0:                 JDBCDataSource.setBeanProperty(ds,
0:                         "createDatabase", "create");
0:                 JDBCDataSource.setBeanProperty(ds,
0:                         "connectionAttributes",
0:                         "dataEncryption=true;bootPassword=" + bootPhrase);
1:                 
0:                 ds.getConnection().close();
1:             }
0:         };
1:         
0:         return TestConfiguration.singleUseDatabaseDecorator(test);
1:     }
1:     
1:     /**
1:      * Decorate a set of tests to use an encrypted
1:      * single use database. This is to run tests
0:      * using encrpyption as a general test and
1:      * not specific tests of how encryption is handled.
1:      * E.g. tests of setting various URL attributes
1:      * would be handled in a specific test.
1:      * <BR>
1:      * The database will use the specified encryption
1:      * algorithm.
1:      * <BR>
1:      * A boot password (phrase) is used with a random
1:      * set of characters and digits 64 characters long.
1:      * <BR>
0:      * The database is created during the setUp of the decorator.
1: 
1:      * 
1:      * @param test test to decorate
1:      * @return decorated tests
1:      */
1:     public static Test encryptedDatabase(Test test, final String algorithm)
1:     {
0:         test = new TestSetup(test) {
1:             
1:             /**
0:              * Create an encrypted database using a
0:              * JDBC data source.
1:              */
0:             protected void setUp() throws SQLException
1:             {
0:                 String bootPhrase = getBootPhrase(64);
0:                 DataSource ds = JDBCDataSource.getDataSource();
1:                         
0:                 JDBCDataSource.setBeanProperty(ds,
0:                         "createDatabase", "create");
0:                 JDBCDataSource.setBeanProperty(ds,
0:                         "connectionAttributes",
0:                         "dataEncryption=true;bootPassword=" + bootPhrase +
0:                         ";encryptionAlgorithm=" + algorithm);
1:                 
0:                 ds.getConnection().close();
1:             }
0:         };
1:         
0:         return TestConfiguration.singleUseDatabaseDecorator(test);
1:     }
1:     
1:     private static String getBootPhrase(int length)
1:     {
1:         Random rand = new Random();
1:         
1:         char[] bp = new char[length];
1:         for (int i = 0; i < bp.length; ) {
1:             char c = (char) rand.nextInt();
1:             if (Character.isLetterOrDigit(c))
1:             {
1:                 bp[i++] = c;
1:             }
1:         }
1:         
1:         return new String(bp);
1:     }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9c86d82
/////////////////////////////////////////////////////////////////////////
============================================================================