1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_TWC
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.raw.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.services.locks.LockFactory;
1:2bc809f: import org.apache.derby.iapi.store.access.AccessFactoryGlobals;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Transaction with context, a utility class for tests to create
1:2bc809f: 	multiple interleaving transactions.
1:2bc809f: */
1:2bc809f: public class T_TWC
1:2bc809f: {
1:2bc809f: 	protected Transaction tran;
1:2bc809f: 	protected ContextManager cm;
1:2bc809f: 	protected ContextService contextService;
1:2bc809f: 	protected LockFactory lf;
1:2bc809f: 	protected RawStoreFactory rawStore;
1:2bc809f: 
1:2bc809f: 	public T_TWC(ContextService contextService,
1:2bc809f: 					LockFactory lockFactory,
1:2bc809f: 					RawStoreFactory rawStoreFactory)
1:2bc809f: 	{
1:2bc809f: 		this.contextService = contextService;
1:2bc809f: 		this.lf = lockFactory;
1:2bc809f: 		this.rawStore = rawStoreFactory;
1:2bc809f: 		tran = null;
1:2bc809f: 		cm = null;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public T_TWC startUserTransaction()
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		cm = contextService.newContextManager();
1:2bc809f: 		contextService.setCurrentContextManager(cm);
1:2bc809f: 		try {
1:2bc809f: 		tran = 
1:2bc809f:             rawStore.startTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);
1:2bc809f: 
1:2bc809f: 		if (SanityManager.DEBUG)
1:2bc809f: 			SanityManager.ASSERT(tran != null);
1:2bc809f: 		checkNullLockCount();
1:2bc809f: 		}
1:2bc809f: 		finally {
1:2bc809f: 			contextService.resetCurrentContextManager(cm);
1:2bc809f: 		}
1:2bc809f: 		return this;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void checkNullLockCount()
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 		if (SanityManager.DEBUG)
1:3c1f634: 			SanityManager.ASSERT(
1:3c1f634: 				!lf.areLocksHeld(tran.getCompatibilitySpace()),
1:3c1f634: 				"Transaction holds locks.");
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setSavePoint(String sp, Object kindOfSavepoint)
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 		tran.setSavePoint(sp, null);
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void rollbackToSavePoint(String sp, Object kindOfSavepoint)
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 			tran.rollbackToSavePoint(sp, null);
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void switchTransactionContext()
1:2bc809f: 	{
1:2bc809f: 		contextService.setCurrentContextManager(cm);
1:2bc809f: 	}
1:2bc809f: 	public void resetContext() {
1:2bc809f: 		contextService.resetCurrentContextManager(cm);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void logAndDo(Loggable l)
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 			tran.logAndDo(l);
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void commit()
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 		tran.commit();
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 		checkNullLockCount();		
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void abort()
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 		tran.abort();
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 		checkNullLockCount();		
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public GlobalTransactionId getId()
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		switchTransactionContext();
1:2bc809f: 		try {
1:2bc809f: 			return tran.getGlobalId();
1:2bc809f: 		} finally {
1:2bc809f: 			resetContext();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: 			SanityManager.ASSERT(
1: 				!lf.areLocksHeld(tran.getCompatibilitySpace()),
1: 				"Transaction holds locks.");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_TWC
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derby.iapi.store.raw.*;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: import org.apache.derby.iapi.store.access.AccessFactoryGlobals;
1: 
1: /**
1: 	Transaction with context, a utility class for tests to create
1: 	multiple interleaving transactions.
1: */
1: public class T_TWC
1: {
1: 	protected Transaction tran;
1: 	protected ContextManager cm;
1: 	protected ContextService contextService;
1: 	protected LockFactory lf;
1: 	protected RawStoreFactory rawStore;
1: 
1: 	public T_TWC(ContextService contextService,
1: 					LockFactory lockFactory,
1: 					RawStoreFactory rawStoreFactory)
1: 	{
1: 		this.contextService = contextService;
1: 		this.lf = lockFactory;
1: 		this.rawStore = rawStoreFactory;
1: 		tran = null;
1: 		cm = null;
1: 	}
1: 
1: 	public T_TWC startUserTransaction()
1: 		 throws StandardException
1: 	{
1: 		cm = contextService.newContextManager();
1: 		contextService.setCurrentContextManager(cm);
1: 		try {
1: 		tran = 
1:             rawStore.startTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(tran != null);
1: 		checkNullLockCount();
1: 		}
1: 		finally {
1: 			contextService.resetCurrentContextManager(cm);
1: 		}
1: 		return this;
1: 	}
1: 
1: 	public void checkNullLockCount()
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(!lf.areLocksHeld(tran));
1: 		} finally {
1: 			resetContext();
1: 		}
1: 	}
1: 
1: 	public void setSavePoint(String sp, Object kindOfSavepoint)
1: 		 throws StandardException
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 		tran.setSavePoint(sp, null);
1: 		} finally {
1: 			resetContext();
1: 		}
1: 	}
1: 
1: 	public void rollbackToSavePoint(String sp, Object kindOfSavepoint)
1: 		 throws StandardException
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 			tran.rollbackToSavePoint(sp, null);
1: 		} finally {
1: 			resetContext();
1: 		}
1: 	}
1: 
1: 	public void switchTransactionContext()
1: 	{
1: 		contextService.setCurrentContextManager(cm);
1: 	}
1: 	public void resetContext() {
1: 		contextService.resetCurrentContextManager(cm);
1: 	}
1: 
1: 	public void logAndDo(Loggable l)
1: 		 throws StandardException
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 			tran.logAndDo(l);
1: 		} finally {
1: 			resetContext();
1: 		}
1: 	}
1: 
1: 	public void commit()
1: 		 throws StandardException
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 		tran.commit();
1: 		} finally {
1: 			resetContext();
1: 		}
1: 		checkNullLockCount();		
1: 	}
1: 
1: 	public void abort()
1: 		 throws StandardException
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 		tran.abort();
1: 		} finally {
1: 			resetContext();
1: 		}
1: 		checkNullLockCount();		
1: 	}
1: 
1: 
1: 	public GlobalTransactionId getId()
1: 		 throws StandardException
1: 	{
1: 		switchTransactionContext();
1: 		try {
1: 			return tran.getGlobalId();
1: 		} finally {
1: 			resetContext();
1: 		}
1: 
1: 	}
1: }
============================================================================