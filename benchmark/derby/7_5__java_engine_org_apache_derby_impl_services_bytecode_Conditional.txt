1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.Conditional
1:4549ad4: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
17:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:af01856: 	A Conditional represents an if/then/else block.
1:af01856: 	When this is created the code  will already have
1:af01856: 	the conditional check code. The code is optimized for branch
1:af01856: 	offsets that fit in 2 bytes, though will handle 4 byte offsets.
1:af01856: <code>
1:eac0369:      if condition
1:eac0369: 	 then code
1:eac0369: 	 else code
1:af01856: </code>
1:eac0369:      what actually gets built is
1:af01856: <code>
1:af01856:      if !condition branch to eb:
1:eac0369: 	  then code
1:af01856: 	  goto end:  // skip else
1:eac0369: 	 eb:
1:eac0369: 	  else code
1:eac0369: 	 end:
1:af01856: </code>
1:af01856: 
1:af01856:     If no else condition was provided then the code is:
1:af01856:     
1:af01856: <code>
1:af01856:      if !condition branch to end:
1:af01856: 	  then code
1:af01856: 	 end:
1:af01856: </code>
1:af01856: 
1:af01856: Note all branches here are using relative offsets, not absolute program counters.
1:af01856: 
1:dbed020: If the then code leads to the conditional branch offset being too big (&gt;32k)
1:af01856: because the then code is larger than 32767 bytes then this is built:
1:af01856: <code>
1:af01856:      // when else code is present
1:af01856:      if condition branch to tb: (relative offset +8)
1:af01856:      goto_w eb: // indirect for else block (5 bytes)
1:af01856:      tb:
1:dbed020: 	    then code (&gt; 32767 bytes)
1:af01856: 	    goto end:
1:af01856: 	 eb:
1:af01856: 	  else code
1:af01856: 	 end:
1:af01856: </code>
1:af01856: 
1:af01856: <code>
1:af01856:      // when only then code is present
1:af01856:      if condition branch to tb: (relative offset +8)
1:af01856:      goto_w end: // indirect for else block (5 bytes)
1:af01856:      tb:
1:dbed020: 	    then code (&gt; 32767 bytes)
1:af01856: 	 end:
1:af01856: </code>
1:af01856: 
1:af01856: If there is an else branch and only it is larger than 32767 bytes then
1:af01856: the code is:
1:af01856: 
1:af01856: <code>
1:af01856:      if !condition branch to eb: (offset increased by two over previous value)
1:af01856: 	  then code
1:af01856: 	  goto_w end:  // skip else
1:af01856: 	 eb:
1:dbed020: 	  else code (&gt; 32767 bytes)
1:af01856: 	 end:
1:af01856: </code>
1:af01856: 
1:af01856: This has one special case where the size of conditional branch to eb:
1:af01856: now must change from a 16bit value to a 32 bit value. The generated code
1:af01856: for this is the same as when both the then code and the else code require
1:af01856: 32bit offsets for the branches. This code is:
1:af01856: 
1:af01856: <code>
1:af01856:      if condition branch to tb: (relative offset +8)
1:af01856:      goto_w eb: // indirect for else block (5 bytes)
1:af01856:      tb:
1:dbed020: 	    then code (&gt; 32767 bytes)
1:af01856: 	    goto_w end:
1:af01856: 	 eb:
1:dbed020: 	  else code (&gt; 32767 bytes)
1:af01856: 	 end:
1:af01856: </code>
1:af01856: 
1:af01856: In theory, at the moment this should not happen as this would mean a total
1:af01856: code size that exceeds the limit on the code size for a method (64k). This
1:af01856: code handles this case as it does occur if the limit for a branch is lowered
1:af01856: for testing purposes, to ensure the complete set of branch re-write code works.
1:af01856: This lowering of the limit can be done by changing the constant BRANCH16LIMIT.
1:af01856:   
1:eac0369: */
1:eac0369: class Conditional {
1:af01856: 	
1:af01856: 	/**
1:af01856: 	 * Limit of a 16 bit branch.
1:af01856: 	 * <P>
1:af01856: 	 * If broad testing of the switch from 16bit to 32bit
1:af01856: 	 * offsets is required then this constant can be reduced
1:af01856: 	 * to a lower value, say 50 and run complete tests. This
1:af01856: 	 * will cover all the combinations. This works because the
1:af01856: 	 * GOTO_W instruction works with any offset value.
1:af01856: 	 */
1:af01856: 	private static final int BRANCH16LIMIT = 32767;
1:af01856: 
1:eac0369: 
1:eac0369: 	private final Conditional parent;
1:38fe427: 	/**
1:af01856: 	 * pc of the 'if' opcode.
1:38fe427: 	 */
1:af01856: 	private final int   if_pc;
1:af01856: 	
1:4549ad4: 	private Type[]	stack;
1:af01856: 	
1:af01856: 	/**
1:af01856: 	 * pc of the GOTO added at the end of the then block
1:af01856: 	 * to transfer control to the end of this conditional.
1:af01856: 	 * That is at the end of the else block.
1:af01856: 	 */
1:af01856: 	private int thenGoto_pc;
1:eac0369: 
1:4549ad4: 	/**
1:4549ad4: 	 * Start a conditional block.
1:4549ad4: 	 * @param parent Current conditional block, null if no nesting is going on.
1:4549ad4: 	 * @param chunk CodeChunk this conditional lives in
1:4549ad4: 	 * @param ifOpcode Opcode for the if check.
1:4549ad4: 	 * @param entryStack Type stack on entering the conditional then block.
1:4549ad4: 	 */
1:4549ad4: 	Conditional(Conditional parent, CodeChunk chunk, short ifOpcode, Type[] entryStack) {
1:eac0369: 		this.parent = parent;
1:af01856: 		if_pc = chunk.getPC();
1:4549ad4: 		this.stack = entryStack;
1:af01856: 		
1:eac0369: 		// reserve the space for the branch, will overwrite later
1:4549ad4: 		// with the correct branch offset.
1:eac0369: 		chunk.addInstrU2(ifOpcode, 0);
2:eac0369: 	}
1:4549ad4: 
1:4549ad4: 	/**
1:4549ad4: 	 * Complete the 'then' block and start the 'else' block for this conditional
1:4549ad4: 	 * @param chunk CodeChunk this conditional lives in
1:4549ad4: 	 * @param thenStack Type stack on completing the conditional then block.
1:4549ad4: 	 * @return the type stack on entering the then block
1:4549ad4: 	 */
1:38fe427: 	Type[] startElse(BCMethod mb, CodeChunk chunk, Type[] thenStack) {
1:af01856: 		
1:af01856: 		// reserve space for the goto end we will be adding
1:eac0369: 		chunk.addInstrU2(VMOpcode.GOTO, 0);
1:eac0369: 
1:af01856: 		// fill in the branch opcode to branch to
1:af01856: 		// the code after the goto, which is the current pc.
1:af01856: 		fillIn(mb, chunk, if_pc, chunk.getPC());
1:af01856: 		
1:af01856: 		// Cannot use the pc before adding the GOTO above
1:af01856: 		// as the fillIn may insert bytes that move the GOTO,
1:af01856: 		// thus calculate at the end, and subtract the number of
1:af01856: 		// instructions in a goto to get its pc.
1:af01856: 		thenGoto_pc = chunk.getPC() - 3;
1:eac0369: 		
1:4549ad4: 		Type[] entryStack = stack;
1:4549ad4: 		stack = thenStack;
1:4549ad4: 		
1:4549ad4: 		return entryStack;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:4549ad4: 	/**
1:4549ad4: 	 * Complete the conditional and patch up any jump instructions.
1:4549ad4: 	 * @param chunk CodeChunk this conditional lives in
1:4549ad4: 	 * @param elseStack Current stack, which is the stack at the end of the else
1:4549ad4: 	 * @param stackNumber Current number of valid elements in elseStack
1:4549ad4: 	 * @return The conditional this conditional was nested in, if any.
1:4549ad4: 	 */
1:38fe427: 	Conditional end(BCMethod mb, CodeChunk chunk, Type[] elseStack, int stackNumber) {
1:af01856: 		int branch_pc;
1:af01856: 		if (thenGoto_pc == 0) {
1:af01856: 			// no else condition, make the conditional branch to the end
1:af01856: 			branch_pc = if_pc;
1:eac0369: 		} else {
1:af01856: 			// otherwise make the goto branch to the end
1:af01856: 			branch_pc = thenGoto_pc;
1:eac0369: 		}
1:4549ad4: 		
1:af01856: 		fillIn(mb, chunk, branch_pc, chunk.getPC());
1:af01856: 		
1:4549ad4: 		if (SanityManager.DEBUG)
1:af01856: 		{
1:5c2ad71: 			if (stackNumber != stack.length) {
1:5c2ad71:                 StringBuilder sb = new StringBuilder();
1:5c2ad71:                 
1:5c2ad71:                 sb.append("ByteCode Conditional then/else stack depths differ then:"
1:4549ad4: 						+ stack.length + " else: " + stackNumber);
1:5c2ad71:                 sb.append("\nif stack:\n");
1:5c2ad71:                 
1:5c2ad71:                 for (Type t: stack) {
1:5c2ad71:                     sb.append(t);
1:5c2ad71:                     sb.append('\n');
1:5c2ad71:                 }
1:5c2ad71:                 sb.append("else stack:\n");
1:5c2ad71:                 
1:5c2ad71:                 for (int i = 0; i < stackNumber; i++) {
1:5c2ad71:                     Type t = elseStack[i];
1:5c2ad71:                     sb.append(t);
1:5c2ad71:                     sb.append('\n');
1:5c2ad71:                 }
1:5c2ad71: 				SanityManager.THROWASSERT(sb.toString());
1:5c2ad71:             }
1:5c2ad71:             
1:4549ad4: 			for (int i = 0; i < stackNumber; i++)
2:4549ad4: 			{
1:fefc398: 				if (stack[i].vmType() != elseStack[i].vmType()) {
1:fefc398: 				    if(  !stack[i].vmName().equals(elseStack[i].vmName()))
1:4549ad4: 					SanityManager.THROWASSERT("ByteCode Conditional then/else stack mismatch: then: "
1:4549ad4: 							+ stack[i].vmName() + 
1:4549ad4: 							" else: " + elseStack[i].vmName());
1:fefc398: 				}
1:af01856: 			}
1:4549ad4: 		}
1:4549ad4: 		
1:eac0369: 		return parent;
1:eac0369: 	}
1:eac0369: 
1:38fe427: 	/**
1:af01856: 	 * Fill in the offsets for a conditional or goto instruction that
1:af01856: 	 * were dummied up as zero during code generation. Handles modifying
1:af01856: 	 * branch logic when the offset for the branch is greater than can
1:af01856: 	 * fit in 16 bits. In this case a GOTO_W with a 32 bit offset will
1:af01856: 	 * be used, see details within the method for how this is acheived
1:af01856: 	 * in all situations. This method might insert instructions in the
1:af01856: 	 * already generated byte code, thus increasing the program counter.
1:38fe427: 	 * 
1:af01856: 	 * @param mb Method this conditional is for
1:38fe427: 	 * @param chunk Our code chunk
1:af01856: 	 * @param branch_pc pc of the branch or goto opcode in the code stream
1:af01856: 	 * @param target_pc pc where we want to jump to.
1:38fe427: 	 */
1:af01856: 	private void fillIn(BCMethod mb, CodeChunk chunk,
1:af01856: 			int branch_pc, int target_pc) {
1:38fe427: 
1:af01856: 		int offset = target_pc - branch_pc;
1:af01856: 
1:af01856: 		// Following code assumes that this class only
1:af01856: 		// generates forward jumps. Jump of zero is
1:af01856: 		// wrong as well, would be infinite loop or stack problems.
1:af01856: 		if (SanityManager.DEBUG)
1:af01856: 		{
1:af01856: 			if (offset <= 0)
1:af01856: 				SanityManager.THROWASSERT("Conditional branch zero or negative " + offset);
1:af01856: 		}
1:af01856: 
1:af01856: 		// Original opcode written.
1:af01856: 		short branchOpcode = chunk.getOpcode(branch_pc);
1:af01856: 		
1:af01856: 		// Handle 16bit offsets, two byte.
1:af01856: 		if (offset <= BRANCH16LIMIT)
1:af01856: 		{
1:af01856: 			// Code was already setup for two byte offsets,
1:af01856: 			// branch or goto instruction was written with
1:af01856: 			// offset zero, ready to be overwritten by this code.
1:af01856: 			CodeChunk mod = chunk.insertCodeSpace(branch_pc, 0);
1:af01856: 			mod.addInstrU2(branchOpcode, offset);
1:af01856: 			return;
1:af01856: 		}
1:af01856: 		
1:af01856: 		if (branchOpcode == VMOpcode.GOTO)
1:af01856: 		{
1:ee1cc94: 	
1:ee1cc94:             // The goto could be beyond the code length
1:ee1cc94:             // supported by the virtual machine: VMOpcode.MAX_CODE_LENGTH
1:ee1cc94:             // We allow this because later splits may bring the goto
1:ee1cc94:             // offset to within the required limits. If the goto
1:ee1cc94:             // still points outside the limits of the JVM then
1:ee1cc94:             // building the class will fail anyway since the code
1:ee1cc94:             // size will be too large. So no need to flag an error here.
1:ee1cc94:             	
1:af01856: 			// Change the GOTO to a GOTO_W, which means
1:af01856: 			// inserting 2 bytes into the stream.
1:af01856: 			CodeChunk mod = chunk.insertCodeSpace(branch_pc, 2);
1:af01856: 			
1:af01856: 			// Offset we are jumping to is now two bytes futher away
1:af01856: 			offset += 2;
1:af01856: 			
1:af01856: 			// replace the original GOTO with a GOTO_W
1:af01856: 			mod.addInstrU4(VMOpcode.GOTO_W, offset);
1:af01856: 			
1:af01856: 			// Now need to patch up the original conditional
1:af01856: 			// as the else code it was branching to is now
1:af01856: 			// another two bytes away.
1:af01856: 			// There are three cases, given the original branch_offset:
1:af01856: 			//
1:af01856: 			// 1) branch_offset 16bit, branch_offset+2 16 bit
1:af01856: 			// 2) branch_offset 16bit, branch_offset+2 32 bit
1:af01856: 			// 3) branch_offset 32bit, branch_offset+2 32 bit
1:af01856: 			//
1:af01856: 			int startElse_pc = mod.getPC();
1:af01856: 			
1:af01856: 			int branchOffset = startElse_pc - if_pc;
1:af01856: 							
1:af01856: 			if (branchOffset <= BRANCH16LIMIT + 2)
1:af01856: 			{					
1:af01856: 				// case 1) branch_offset 16bit, branch_offset+2 16 bit
1:af01856:                 // case 2) branch_offset 16bit, branch_offset+2 32 bit
1:af01856: 				//
1:af01856: 				// Branch to the else code is on the original conditional
1:af01856: 				
1:af01856: 				// both handled by the standard fillIn method.
1:af01856: 				fillIn(mb, chunk, if_pc, mod.getPC());
1:af01856: 				return;
1:af01856: 
1:af01856: 			}
1:af01856: 
1:af01856: 			// branch to the else code was changed from the conditional
1:af01856: 			// to a GOTO_W as the branch was out of the range of the
1:af01856: 			// conditional.
1:af01856: 			
1:af01856: 			// Overwrite the offset of the existing GOTO_W, the instruction
1:af01856: 			// after the conditional instruction, which is three bytes long
1:af01856: 			mod = chunk.insertCodeSpace(if_pc + 3, 0);
1:af01856: 			
1:af01856: 			// Above branchOffset was calculated from the conditional
1:af01856: 			// but we need to branch from the GOTO_W that was inserted
1:af01856: 			// which is three bytes after the conditional.
1:af01856: 			branchOffset -= 3;
1:af01856: 			
1:af01856: 			mod.addInstrU4(VMOpcode.GOTO_W, branchOffset);
1:af01856: 			return;
1:af01856: 
1:af01856: 		}
1:af01856: 		else
1:af01856: 		{
2:af01856: 			// Ensure the pc we are jumping to (the current pc)
2:af01856: 			// is within bounds of a valid method *after*
2:af01856: 			// we have added the extra bytes.
1:af01856: 			if ((target_pc + 5) >= VMOpcode.MAX_CODE_LENGTH)
1:af01856: 			{
1:af01856: 			    mb.cb.addLimitExceeded(mb,
1:af01856: 			    		"branch_target", VMOpcode.MAX_CODE_LENGTH, target_pc + 5);
2:af01856: 				// even if we fail continue to generate the correct code
2:af01856: 				// so that the assumptions in the patch up code are not broken.
1:af01856: 			}
1:af01856: 
1:af01856: 			// Conditional branch
1:af01856: 			// branch on the conditional, need to add
1:af01856: 			// indirection. Basically changing
1:af01856: 			// (actual conditional might be different)
1:af01856: 			// Note branch inverting.
1:af01856: 			//
1:af01856: 			// IFNONNULL branch offset (to else code)
1:af01856: 			//   <then code>
1:af01856: 			// GOTO end:
1:af01856: 			//   <else code>
1:af01856: 			// end:
1:af01856: 			// to
1:af01856: 			//
1:af01856: 			// IFNULL branch +8  (to then code, 3 bytes in stream)
1:af01856: 			// GOTO_W offset* (to else code, 5 new bytes in stream)
1:af01856: 			//    <then code>
1:af01856: 			// GOTO end:
1:af01856: 			//    <else code>
1:af01856: 					
1:af01856: 			// Invert branch.
1:af01856: 			switch (branchOpcode)
1:af01856: 			{
1:af01856: 			case VMOpcode.IFNONNULL:
1:af01856: 				branchOpcode = VMOpcode.IFNULL;
1:af01856: 				break;
1:af01856: 			case VMOpcode.IFEQ:
1:af01856: 				branchOpcode = VMOpcode.IFNE;
1:af01856: 				break;
1:af01856: 			default:
1:af01856: 				if (SanityManager.DEBUG)
1:af01856: 					SanityManager.THROWASSERT("Conditional does not handle opcode " + branchOpcode);
1:af01856: 				
1:af01856: 			}
1:af01856: 												
1:af01856: 			// Thus we need to insert 5 bytes
1:af01856: 			//
1:af01856: 			CodeChunk mod = chunk.insertCodeSpace(branch_pc, 5);
1:af01856: 			
1:af01856: 			// mod is positioned at the current branch.
1:af01856: 			mod.addInstrU2(branchOpcode, 8);
1:af01856: 											
1:af01856: 			// Indirect goto for the conditional else block or end.
1:af01856: 			// Offset was from the comparision instruction to the
1:af01856: 			// start of the real code. Now the branch location
1:af01856: 			// is an additional two bytes away, because this
1:af01856: 			// GOTO_W instruction occupies 5 bytes, and the original
1:af01856: 			// branch 3.
1:af01856: 			offset += 2;
1:af01856: 			
1:af01856: 			mod.addInstrU4(VMOpcode.GOTO_W, offset);
1:af01856: 	
1:af01856: 			return;	
1:af01856: 		}
1:eac0369: 	}
1:38fe427: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: If the then code leads to the conditional branch offset being too big (&gt;32k)
1: 	    then code (&gt; 32767 bytes)
/////////////////////////////////////////////////////////////////////////
1: 	    then code (&gt; 32767 bytes)
/////////////////////////////////////////////////////////////////////////
1: 	  else code (&gt; 32767 bytes)
/////////////////////////////////////////////////////////////////////////
1: 	    then code (&gt; 32767 bytes)
1: 	  else code (&gt; 32767 bytes)
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:5c2ad71
/////////////////////////////////////////////////////////////////////////
1: 			if (stackNumber != stack.length) {
1:                 StringBuilder sb = new StringBuilder();
1:                 
1:                 sb.append("ByteCode Conditional then/else stack depths differ then:"
1:                 sb.append("\nif stack:\n");
1:                 
1:                 for (Type t: stack) {
1:                     sb.append(t);
1:                     sb.append('\n');
1:                 }
1:                 sb.append("else stack:\n");
1:                 
1:                 for (int i = 0; i < stackNumber; i++) {
1:                     Type t = elseStack[i];
1:                     sb.append(t);
1:                     sb.append('\n');
1:                 }
1: 				SanityManager.THROWASSERT(sb.toString());
1:             }
1:             
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:fefc398
/////////////////////////////////////////////////////////////////////////
1: 				if (stack[i].vmType() != elseStack[i].vmType()) {
1: 				    if(  !stack[i].vmName().equals(elseStack[i].vmName()))
1: 				}
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ee1cc94
/////////////////////////////////////////////////////////////////////////
1: 	
1:             // The goto could be beyond the code length
1:             // supported by the virtual machine: VMOpcode.MAX_CODE_LENGTH
1:             // We allow this because later splits may bring the goto
1:             // offset to within the required limits. If the goto
1:             // still points outside the limits of the JVM then
1:             // building the class will fail anyway since the code
1:             // size will be too large. So no need to flag an error here.
1:             	
commit:af01856
/////////////////////////////////////////////////////////////////////////
0:    Copyright 2000, 2006 The Apache Software Foundation or its licensors, as applicable.
/////////////////////////////////////////////////////////////////////////
1: 	A Conditional represents an if/then/else block.
1: 	When this is created the code  will already have
1: 	the conditional check code. The code is optimized for branch
1: 	offsets that fit in 2 bytes, though will handle 4 byte offsets.
1: <code>
1: </code>
1: <code>
1:      if !condition branch to eb:
1: 	  goto end:  // skip else
1: </code>
1: 
1:     If no else condition was provided then the code is:
1:     
1: <code>
1:      if !condition branch to end:
1: 	  then code
1: 	 end:
1: </code>
1: 
1: Note all branches here are using relative offsets, not absolute program counters.
1: 
0: If the then code leads to the conditional branch offset being too big (>32k)
1: because the then code is larger than 32767 bytes then this is built:
1: <code>
1:      // when else code is present
1:      if condition branch to tb: (relative offset +8)
1:      goto_w eb: // indirect for else block (5 bytes)
1:      tb:
0: 	    then code (> 32767 bytes)
1: 	    goto end:
1: 	 eb:
1: 	  else code
1: 	 end:
1: </code>
1: 
1: <code>
1:      // when only then code is present
1:      if condition branch to tb: (relative offset +8)
1:      goto_w end: // indirect for else block (5 bytes)
1:      tb:
0: 	    then code (> 32767 bytes)
1: 	 end:
1: </code>
1: 
1: If there is an else branch and only it is larger than 32767 bytes then
1: the code is:
1: 
1: <code>
1:      if !condition branch to eb: (offset increased by two over previous value)
1: 	  then code
1: 	  goto_w end:  // skip else
1: 	 eb:
0: 	  else code (> 32767 bytes)
1: 	 end:
1: </code>
1: 
1: This has one special case where the size of conditional branch to eb:
1: now must change from a 16bit value to a 32 bit value. The generated code
1: for this is the same as when both the then code and the else code require
1: 32bit offsets for the branches. This code is:
1: 
1: <code>
1:      if condition branch to tb: (relative offset +8)
1:      goto_w eb: // indirect for else block (5 bytes)
1:      tb:
0: 	    then code (> 32767 bytes)
1: 	    goto_w end:
1: 	 eb:
0: 	  else code (> 32767 bytes)
1: 	 end:
1: </code>
1: 
1: In theory, at the moment this should not happen as this would mean a total
1: code size that exceeds the limit on the code size for a method (64k). This
1: code handles this case as it does occur if the limit for a branch is lowered
1: for testing purposes, to ensure the complete set of branch re-write code works.
1: This lowering of the limit can be done by changing the constant BRANCH16LIMIT.
1:   
1: 	
1: 	/**
1: 	 * Limit of a 16 bit branch.
1: 	 * <P>
1: 	 * If broad testing of the switch from 16bit to 32bit
1: 	 * offsets is required then this constant can be reduced
1: 	 * to a lower value, say 50 and run complete tests. This
1: 	 * will cover all the combinations. This works because the
1: 	 * GOTO_W instruction works with any offset value.
1: 	 */
1: 	private static final int BRANCH16LIMIT = 32767;
1: 
1: 	 * pc of the 'if' opcode.
1: 	private final int   if_pc;
1: 	
1: 	
1: 	/**
1: 	 * pc of the GOTO added at the end of the then block
1: 	 * to transfer control to the end of this conditional.
1: 	 * That is at the end of the else block.
1: 	 */
1: 	private int thenGoto_pc;
/////////////////////////////////////////////////////////////////////////
1: 		if_pc = chunk.getPC();
1: 		
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		// reserve space for the goto end we will be adding
1: 		// fill in the branch opcode to branch to
1: 		// the code after the goto, which is the current pc.
1: 		fillIn(mb, chunk, if_pc, chunk.getPC());
1: 		
1: 		// Cannot use the pc before adding the GOTO above
1: 		// as the fillIn may insert bytes that move the GOTO,
1: 		// thus calculate at the end, and subtract the number of
1: 		// instructions in a goto to get its pc.
1: 		thenGoto_pc = chunk.getPC() - 3;
/////////////////////////////////////////////////////////////////////////
1: 		int branch_pc;
1: 		if (thenGoto_pc == 0) {
1: 			// no else condition, make the conditional branch to the end
1: 			branch_pc = if_pc;
1: 			// otherwise make the goto branch to the end
1: 			branch_pc = thenGoto_pc;
1: 		fillIn(mb, chunk, branch_pc, chunk.getPC());
1: 		
/////////////////////////////////////////////////////////////////////////
1: 	 * Fill in the offsets for a conditional or goto instruction that
1: 	 * were dummied up as zero during code generation. Handles modifying
1: 	 * branch logic when the offset for the branch is greater than can
1: 	 * fit in 16 bits. In this case a GOTO_W with a 32 bit offset will
1: 	 * be used, see details within the method for how this is acheived
1: 	 * in all situations. This method might insert instructions in the
1: 	 * already generated byte code, thus increasing the program counter.
1: 	 * @param mb Method this conditional is for
1: 	 * @param branch_pc pc of the branch or goto opcode in the code stream
1: 	 * @param target_pc pc where we want to jump to.
1: 	private void fillIn(BCMethod mb, CodeChunk chunk,
1: 			int branch_pc, int target_pc) {
1: 		int offset = target_pc - branch_pc;
1: 		// Following code assumes that this class only
1: 		// generates forward jumps. Jump of zero is
1: 		// wrong as well, would be infinite loop or stack problems.
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (offset <= 0)
1: 				SanityManager.THROWASSERT("Conditional branch zero or negative " + offset);
1: 		}
1: 
1: 		// Original opcode written.
1: 		short branchOpcode = chunk.getOpcode(branch_pc);
1: 		// Handle 16bit offsets, two byte.
1: 		if (offset <= BRANCH16LIMIT)
1: 		{
1: 			// Code was already setup for two byte offsets,
1: 			// branch or goto instruction was written with
1: 			// offset zero, ready to be overwritten by this code.
1: 			CodeChunk mod = chunk.insertCodeSpace(branch_pc, 0);
1: 			mod.addInstrU2(branchOpcode, offset);
1: 			return;
1: 		}
1: 		
1: 		if (branchOpcode == VMOpcode.GOTO)
1: 		{
1: 			// Ensure the pc we are jumping to (the current pc)
1: 			// is within bounds of a valid method *after*
1: 			// we have added the extra bytes.
0: 			if ((target_pc + 2) >= VMOpcode.MAX_CODE_LENGTH)
1: 			{
0: 				mb.cb.addLimitExceeded(mb, "goto_target",
0: 						VMOpcode.MAX_CODE_LENGTH, target_pc + 2);
1: 				// even if we fail continue to generate the correct code
1: 				// so that the assumptions in the patch up code are not broken.
1: 			}
1: 			
1: 		
1: 			// Change the GOTO to a GOTO_W, which means
1: 			// inserting 2 bytes into the stream.
1: 			CodeChunk mod = chunk.insertCodeSpace(branch_pc, 2);
1: 			
1: 			// Offset we are jumping to is now two bytes futher away
1: 			offset += 2;
1: 			
1: 			// replace the original GOTO with a GOTO_W
1: 			mod.addInstrU4(VMOpcode.GOTO_W, offset);
1: 			
1: 			// Now need to patch up the original conditional
1: 			// as the else code it was branching to is now
1: 			// another two bytes away.
1: 			// There are three cases, given the original branch_offset:
1: 			//
1: 			// 1) branch_offset 16bit, branch_offset+2 16 bit
1: 			// 2) branch_offset 16bit, branch_offset+2 32 bit
1: 			// 3) branch_offset 32bit, branch_offset+2 32 bit
1: 			//
1: 			int startElse_pc = mod.getPC();
1: 			
1: 			int branchOffset = startElse_pc - if_pc;
1: 							
1: 			if (branchOffset <= BRANCH16LIMIT + 2)
1: 			{					
1: 				// case 1) branch_offset 16bit, branch_offset+2 16 bit
1:                 // case 2) branch_offset 16bit, branch_offset+2 32 bit
1: 				//
1: 				// Branch to the else code is on the original conditional
1: 				
1: 				// both handled by the standard fillIn method.
1: 				fillIn(mb, chunk, if_pc, mod.getPC());
1: 				return;
1: 
1: 			}
1: 
1: 			// branch to the else code was changed from the conditional
1: 			// to a GOTO_W as the branch was out of the range of the
1: 			// conditional.
1: 			
1: 			// Overwrite the offset of the existing GOTO_W, the instruction
1: 			// after the conditional instruction, which is three bytes long
1: 			mod = chunk.insertCodeSpace(if_pc + 3, 0);
1: 			
1: 			// Above branchOffset was calculated from the conditional
1: 			// but we need to branch from the GOTO_W that was inserted
1: 			// which is three bytes after the conditional.
1: 			branchOffset -= 3;
1: 			
1: 			mod.addInstrU4(VMOpcode.GOTO_W, branchOffset);
1: 			return;
1: 
1: 		}
1: 		else
1: 		{
1: 			// Ensure the pc we are jumping to (the current pc)
1: 			// is within bounds of a valid method *after*
1: 			// we have added the extra bytes.
1: 			if ((target_pc + 5) >= VMOpcode.MAX_CODE_LENGTH)
1: 			{
1: 			    mb.cb.addLimitExceeded(mb,
1: 			    		"branch_target", VMOpcode.MAX_CODE_LENGTH, target_pc + 5);
1: 				// even if we fail continue to generate the correct code
1: 				// so that the assumptions in the patch up code are not broken.
1: 			}
1: 
1: 			// Conditional branch
1: 			// branch on the conditional, need to add
1: 			// indirection. Basically changing
1: 			// (actual conditional might be different)
1: 			// Note branch inverting.
1: 			//
1: 			// IFNONNULL branch offset (to else code)
1: 			//   <then code>
1: 			// GOTO end:
1: 			//   <else code>
1: 			// end:
1: 			// to
1: 			//
1: 			// IFNULL branch +8  (to then code, 3 bytes in stream)
1: 			// GOTO_W offset* (to else code, 5 new bytes in stream)
1: 			//    <then code>
1: 			// GOTO end:
1: 			//    <else code>
1: 					
1: 			// Invert branch.
1: 			switch (branchOpcode)
1: 			{
1: 			case VMOpcode.IFNONNULL:
1: 				branchOpcode = VMOpcode.IFNULL;
1: 				break;
1: 			case VMOpcode.IFEQ:
1: 				branchOpcode = VMOpcode.IFNE;
1: 				break;
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 					SanityManager.THROWASSERT("Conditional does not handle opcode " + branchOpcode);
1: 				
1: 			}
1: 												
1: 			// Thus we need to insert 5 bytes
1: 			//
1: 			CodeChunk mod = chunk.insertCodeSpace(branch_pc, 5);
1: 			
1: 			// mod is positioned at the current branch.
1: 			mod.addInstrU2(branchOpcode, 8);
1: 											
1: 			// Indirect goto for the conditional else block or end.
1: 			// Offset was from the comparision instruction to the
1: 			// start of the real code. Now the branch location
1: 			// is an additional two bytes away, because this
1: 			// GOTO_W instruction occupies 5 bytes, and the original
1: 			// branch 3.
1: 			offset += 2;
1: 			
1: 			mod.addInstrU4(VMOpcode.GOTO_W, offset);
1: 	
1: 			return;	
1: 		}
commit:38fe427
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Offset in the code stream of the 'if' opcode.
1: 	 */
/////////////////////////////////////////////////////////////////////////
1: 	Type[] startElse(BCMethod mb, CodeChunk chunk, Type[] thenStack) {
/////////////////////////////////////////////////////////////////////////
0: 		fillIn(mb, chunk, ifOffset);
/////////////////////////////////////////////////////////////////////////
1: 	Conditional end(BCMethod mb, CodeChunk chunk, Type[] elseStack, int stackNumber) {
0: 			fillIn(mb, chunk, ifOffset);
0: 			fillIn(mb, chunk, thenGotoOffset);
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * 
1: 	 * @param chunk Our code chunk
0: 	 * @param whereFrom Offset of the branch opcode in the code stream
1: 	 */
0: 	private void fillIn(BCMethod mb, CodeChunk chunk, int whereFrom) {
0: 		int offset = chunk.getRelativePC() - whereFrom;
1: 		
0: 		// branch offsets are a 16bit signed value, this implementation
0: 		// currently only generates forward branches
0: 		if (offset > 32767)
0: 			mb.cb.addLimitExceeded(mb, "branch_offset", 32767, offset);
0: 		// Skip the eight byte header at the start of the
0: 		// byte array, the eight bytes are the CodeAttribute header.
0: 		whereFrom += 8;
1: 				
0: 		codeBytes[whereFrom + 1] = (byte)(offset >> 8 );
0: 		codeBytes[whereFrom + 2] = (byte)(offset);
commit:4549ad4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 	private Type[]	stack;
1: 	/**
1: 	 * Start a conditional block.
1: 	 * @param parent Current conditional block, null if no nesting is going on.
1: 	 * @param chunk CodeChunk this conditional lives in
1: 	 * @param ifOpcode Opcode for the if check.
1: 	 * @param entryStack Type stack on entering the conditional then block.
1: 	 */
1: 	Conditional(Conditional parent, CodeChunk chunk, short ifOpcode, Type[] entryStack) {
1: 		this.stack = entryStack;
1: 		// with the correct branch offset.
1: 	/**
1: 	 * Complete the 'then' block and start the 'else' block for this conditional
1: 	 * @param chunk CodeChunk this conditional lives in
1: 	 * @param thenStack Type stack on completing the conditional then block.
1: 	 * @return the type stack on entering the then block
1: 	 */
0: 	Type[] startElse(CodeChunk chunk, Type[] thenStack) {
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		Type[] entryStack = stack;
1: 		stack = thenStack;
1: 		
1: 		return entryStack;
1: 	/**
1: 	 * Complete the conditional and patch up any jump instructions.
1: 	 * @param chunk CodeChunk this conditional lives in
1: 	 * @param elseStack Current stack, which is the stack at the end of the else
1: 	 * @param stackNumber Current number of valid elements in elseStack
1: 	 * @return The conditional this conditional was nested in, if any.
1: 	 */
0: 	Conditional end(CodeChunk chunk, Type[] elseStack, int stackNumber) {
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			if (stackNumber != stack.length)
0: 				SanityManager.THROWASSERT("ByteCode Conditional then/else stack depths differ then:"
1: 						+ stack.length + " else: " + stackNumber);
1: 			
1: 			for (int i = 0; i < stackNumber; i++)
1: 			{
0: 				if (!stack[i].vmName().equals(elseStack[i].vmName()))
1: 					SanityManager.THROWASSERT("ByteCode Conditional then/else stack mismatch: then: "
1: 							+ stack[i].vmName() + 
1: 							" else: " + elseStack[i].vmName());
1: 			}
1: 		
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.Conditional
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
1: /**
0: 	A code chunk that gets pushed to handle if-else blocks.
0: 	When this is created the mainChunk will already have
0: 	the conditional check code.
1: 
1:      if condition
1: 	 then code
1: 	 else code
1: 
1:      what actually gets built is
1: 
0:      if !condition goto eb:
1: 	  then code
0: 	  goto end:
1: 	 eb:
1: 	  else code
1: 	 end:
1: */
1: class Conditional {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	private final Conditional parent;
0: 	private final int   ifOffset;
0: 	private /*final*/ int	clearTo;
0: 	private int thenGotoOffset;
1: 
0: 	Conditional(Conditional parent, CodeChunk chunk, short ifOpcode, int clearTo) {
1: 		this.parent = parent;
0: 		ifOffset = chunk.getRelativePC();
0: 		this.clearTo = clearTo;
1: 
1: 		// reserve the space for the branch, will overwrite later
1: 		chunk.addInstrU2(ifOpcode, 0);
1: 	}
1: 
0: 	int startElse(CodeChunk chunk, int thenSize) {
1: 
0: 		thenGotoOffset = chunk.getRelativePC();
1: 
0: 		// reserve space for the goto we will be adding
1: 		chunk.addInstrU2(VMOpcode.GOTO, 0);
1: 
0: 		// fill in the branch opcode
0: 		fillIn(chunk, ifOffset);
1: 
0: 		int ret = clearTo;
0: 		clearTo = thenSize;
0: 		return ret;
1: 	}
1: 
1: 
0: 	Conditional end(CodeChunk chunk, int elseSize) {
1: 
0: 		if (thenGotoOffset == 0) {
0: 			// no else condition
0: 			fillIn(chunk, ifOffset);
1: 		} else {
0: 			fillIn(chunk, thenGotoOffset);
1: 		}
0: 		if (clearTo != elseSize) {
0: 			throw new RuntimeException("mismatched sizes then " + clearTo + " else " + elseSize);
1: 		}
1: 
1: 		return parent;
1: 	}
1: 
0: 	private void fillIn(CodeChunk chunk, int where) {
1: 
0: 		byte[] codeBytes = chunk.getCout().getData();
1: 
0: 		int offset = chunk.getRelativePC() - where;
1: 
0: 		where += 8;
1: 
0: 		codeBytes[where + 1] = (byte)(offset >> 8 );
0: 		codeBytes[where + 2] = (byte)(offset);
1: 	}
1: 
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: /**
0: 	A code chunk that gets pushed to handle if-else blocks.
0: 	When this is created the mainChunk will already have
0: 	the conditional check code.
0: 
0:      if condition
0: 	 then code
0: 	 else code
0: 
0:      what actually gets built is
0: 
0:      if !condition goto eb:
0: 	  then code
0: 	  goto end:
0: 	 eb:
0: 	  else code
0: 	 end:
0: */
0: class Conditional {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	private final Conditional parent;
0: 	private final int   ifOffset;
0: 	private /*final*/ int	clearTo;
0: 	private int thenGotoOffset;
0: 
0: 	Conditional(Conditional parent, CodeChunk chunk, short ifOpcode, int clearTo) {
0: 		this.parent = parent;
0: 		ifOffset = chunk.getRelativePC();
0: 		this.clearTo = clearTo;
0: 
0: 		// reserve the space for the branch, will overwrite later
0: 		chunk.addInstrU2(ifOpcode, 0);
0: 	}
0: 
0: 	int startElse(CodeChunk chunk, int thenSize) {
0: 
0: 		thenGotoOffset = chunk.getRelativePC();
0: 
0: 		// reserve space for the goto we will be adding
0: 		chunk.addInstrU2(VMOpcode.GOTO, 0);
0: 
0: 		// fill in the branch opcode
0: 		fillIn(chunk, ifOffset);
0: 
0: 		int ret = clearTo;
0: 		clearTo = thenSize;
0: 		return ret;
0: 	}
0: 
0: 
0: 	Conditional end(CodeChunk chunk, int elseSize) {
0: 
0: 		if (thenGotoOffset == 0) {
0: 			// no else condition
0: 			fillIn(chunk, ifOffset);
0: 		} else {
0: 			fillIn(chunk, thenGotoOffset);
0: 		}
0: 		if (clearTo != elseSize) {
0: 			throw new RuntimeException("mismatched sizes then " + clearTo + " else " + elseSize);
0: 		}
0: 
0: 		return parent;
0: 	}
0: 
0: 	private void fillIn(CodeChunk chunk, int where) {
0: 
0: 		byte[] codeBytes = chunk.getCout().getData();
0: 
0: 		int offset = chunk.getRelativePC() - where;
0: 
0: 		where += 8;
0: 
0: 		codeBytes[where + 1] = (byte)(offset >> 8 );
0: 		codeBytes[where + 2] = (byte)(offset);
0: 	}
0: 
0: 
0: }
============================================================================