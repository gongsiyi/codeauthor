1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_Heap
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: // impl imports are the preferred way to create unit tests.
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.impl.store.access.heap.*;
1:2bc809f: 
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: import java.io.PrintWriter;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.store.access.AccessFactory;
1:2bc809f: import org.apache.derby.iapi.store.access.ConglomerateController;
1:2bc809f: import org.apache.derby.iapi.store.access.Qualifier;
1:2bc809f: import org.apache.derby.iapi.types.RowLocation;
1:2bc809f: import org.apache.derby.iapi.store.access.ScanController;
1:2bc809f: import org.apache.derby.iapi.store.access.TransactionController;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.reference.Property;
1:2bc809f: 
1:a0dbbd7: import java.security.PrivilegedAction;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:a0dbbd7: import java.security.AccessController;
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: public class T_Heap extends T_Generic
3:2bc809f: {
1:2bc809f: 	private static final String testService = "heapTest";
1:2bc809f: 	/*
1:2bc809f: 	** Methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public String getModuleToTestProtocolName() {
1:2bc809f: 		return AccessFactory.MODULE;
2:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception T_Fail test failed.
1:2bc809f: 	*/
1:2bc809f: 	protected void runTests() throws T_Fail
1:a0dbbd7: 	{
1:2bc809f: 		AccessFactory store = null;
1:2bc809f: 		TransactionController tc = null;
1:2bc809f: 		boolean pass = false;
1:2bc809f: 
1:2bc809f:         out.println("executing heap test");
1:2bc809f: 
1:2bc809f: 		// don't automatic boot this service if it gets left around
1:2bc809f: 		if (startParams == null) {
1:2bc809f: 			startParams = new Properties();
1:2bc809f: 		}
1:2bc809f: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1:2bc809f: 		// remove the service directory to ensure a clean run
1:2bc809f: 		startParams.put(Property.DELETE_ON_CREATE, Boolean.TRUE.toString());
1:2bc809f: 
1:2bc809f: 		// see if we are testing encryption
1:2bc809f: 		startParams = T_Util.setEncryptionParam(startParams);
1:2bc809f: 
1:2bc809f: 		try {
1:56c1dc2: 			store = (AccessFactory) createPersistentService(getModuleToTestProtocolName(),
1:2bc809f: 			testService, startParams);
1:2bc809f: 		} catch (StandardException mse) {
1:2bc809f: 			throw T_Fail.exceptionFail(mse);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (store == null) {
1:2bc809f: 			throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " service not started.");
1:2bc809f: 		}
1:2bc809f: 		REPORT("(unitTestMain) Testing " + testService);
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 
1:2bc809f:             tc = store.getTransaction(
1:a0dbbd7:                     getContextService().getCurrentContextManager());
1:2bc809f: 
1:2bc809f:             if (t_001(tc))
1:a0dbbd7: 			{
1:2bc809f: 				pass = true;
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			tc.commit();
1:2bc809f: 			tc.destroy();
1:2bc809f: 		}
1:2bc809f: 		catch (StandardException e)
1:2bc809f: 		{
1:2bc809f:             System.out.println("got an exception.");
1:2bc809f: 			String  msg = e.getMessage();
1:2bc809f: 			if (msg == null)
1:2bc809f: 				msg = e.getClass().getName();
1:2bc809f: 			REPORT(msg);
1:2bc809f: 			throw T_Fail.exceptionFail(e);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (!pass)
1:2bc809f: 			throw T_Fail.testFailMsg("T_Heap test failed");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f:     /*
1:2bc809f:      * Test Qualifiers.
1:2bc809f:      */
1:2bc809f:     protected boolean t_001(TransactionController tc)
1:2bc809f:         throws StandardException, T_Fail
1:2bc809f:     {
1:2bc809f:         REPORT("Starting t_001");
1:2bc809f: 
1:2bc809f:         T_QualifierTest q_test = 
1:2bc809f:             new T_QualifierTest(
1:2bc809f:                 "heap",         // create a heap
1:2bc809f:                 null,           // properties
1:2bc809f:                 false,          // not temporary
1:2bc809f:                 out,
1:2bc809f:                 T_QualifierTest.ORDER_NONE);         // unordered data
1:2bc809f: 
1:2bc809f:         boolean test_result = q_test.t_testqual(tc);
1:2bc809f: 
1:2bc809f:         if (!test_result)
1:2bc809f:             throw T_Fail.testFailMsg("T_Heap.t_001 failed");
1:2bc809f: 
1:2bc809f:         REPORT("Ending t_001");
1:2bc809f: 
1:2bc809f:         return(test_result);
1:a0dbbd7:     }
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of the ContextService. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  ContextService    getContextService()
1:a0dbbd7:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ContextService>()
1:56c1dc2:              {
1:56c1dc2:                  public ContextService run()
1:56c1dc2:                  {
1:56c1dc2:                      return ContextService.getFactory();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object createPersistentService( final String factoryInterface, final String serviceName, final Properties properties ) 
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:a0dbbd7:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:a0dbbd7:                      {
1:56c1dc2:                          return Monitor.createPersistentService( factoryInterface, serviceName, properties );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 			store = (AccessFactory) createPersistentService(getModuleToTestProtocolName(),
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ContextService>()
1:              {
1:                  public ContextService run()
1:                  {
1:                      return ContextService.getFactory();
1:                  }
1:              }
1:              );
1:     }
1: 
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object createPersistentService( final String factoryInterface, final String serviceName, final Properties properties ) 
1:         throws StandardException
1:     {
1:         try {
1:                  new PrivilegedExceptionAction<Object>()
1:                      public Object run()
1:                          throws StandardException
1:                          return Monitor.createPersistentService( factoryInterface, serviceName, properties );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1:                     getContextService().getCurrentContextManager());
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of the ContextService. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ContextService    getContextService()
1:     {
0:         if ( System.getSecurityManager() == null )
1:         {
0:             return ContextService.getFactory();
1:         }
0:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
0:                  new PrivilegedAction<ContextService>()
1:                  {
0:                      public ContextService run()
1:                      {
0:                          return ContextService.getFactory();
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_Heap
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: // impl imports are the preferred way to create unit tests.
1: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.impl.store.access.heap.*;
1: 
1: import java.util.Properties;
1: 
1: import java.io.PrintWriter;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import java.util.Properties;
1: 
1: public class T_Heap extends T_Generic
1: {
1: 	private static final String testService = "heapTest";
1: 	/*
1: 	** Methods required by T_Generic
1: 	*/
1: 
1: 	public String getModuleToTestProtocolName() {
1: 		return AccessFactory.MODULE;
1: 	}
1: 
1: 	/**
1: 		@exception T_Fail test failed.
1: 	*/
1: 	protected void runTests() throws T_Fail
1: 	{
1: 		AccessFactory store = null;
1: 		TransactionController tc = null;
1: 		boolean pass = false;
1: 
1:         out.println("executing heap test");
1: 
1: 		// don't automatic boot this service if it gets left around
1: 		if (startParams == null) {
1: 			startParams = new Properties();
1: 		}
1: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1: 		// remove the service directory to ensure a clean run
1: 		startParams.put(Property.DELETE_ON_CREATE, Boolean.TRUE.toString());
1: 
1: 		// see if we are testing encryption
1: 		startParams = T_Util.setEncryptionParam(startParams);
1: 
1: 		try {
0: 			store = (AccessFactory) Monitor.createPersistentService(getModuleToTestProtocolName(),
1: 			testService, startParams);
1: 		} catch (StandardException mse) {
1: 			throw T_Fail.exceptionFail(mse);
1: 		}
1: 
1: 		if (store == null) {
1: 			throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " service not started.");
1: 		}
1: 		REPORT("(unitTestMain) Testing " + testService);
1: 
1: 		try {
1: 
1:             tc = store.getTransaction(
0:                     ContextService.getFactory().getCurrentContextManager());
1: 
1:             if (t_001(tc))
1: 			{
1: 				pass = true;
1: 			}
1: 
1: 			tc.commit();
1: 			tc.destroy();
1: 		}
1: 		catch (StandardException e)
1: 		{
1:             System.out.println("got an exception.");
1: 			String  msg = e.getMessage();
1: 			if (msg == null)
1: 				msg = e.getClass().getName();
1: 			REPORT(msg);
1: 			throw T_Fail.exceptionFail(e);
1: 		}
1: 
1: 		if (!pass)
1: 			throw T_Fail.testFailMsg("T_Heap test failed");
1: 	}
1: 
1:     /*
1:      * Test Qualifiers.
1:      */
1:     protected boolean t_001(TransactionController tc)
1:         throws StandardException, T_Fail
1:     {
1:         REPORT("Starting t_001");
1: 
1:         T_QualifierTest q_test = 
1:             new T_QualifierTest(
1:                 "heap",         // create a heap
1:                 null,           // properties
1:                 false,          // not temporary
1:                 out,
1:                 T_QualifierTest.ORDER_NONE);         // unordered data
1: 
1:         boolean test_result = q_test.t_testqual(tc);
1: 
1:         if (!test_result)
1:             throw T_Fail.testFailMsg("T_Heap.t_001 failed");
1: 
1:         REPORT("Ending t_001");
1: 
1:         return(test_result);
1:     }
1: }
============================================================================