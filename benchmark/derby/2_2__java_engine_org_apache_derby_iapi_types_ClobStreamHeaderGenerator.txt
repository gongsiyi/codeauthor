1:dfdebd5: /*
1:dfdebd5: 
1:dfdebd5:    Derby - Class org.apache.derby.iapi.types.ClobStreamHeaderGenerator
1:dfdebd5: 
1:dfdebd5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dfdebd5:    contributor license agreements.  See the NOTICE file distributed with
1:dfdebd5:    this work for additional information regarding copyright ownership.
1:dfdebd5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dfdebd5:    (the "License"); you may not use this file except in compliance with
1:dfdebd5:    the License.  You may obtain a copy of the License at
1:dfdebd5: 
1:dfdebd5:       http://www.apache.org/licenses/LICENSE-2.0
1:dfdebd5: 
1:dfdebd5:    Unless required by applicable law or agreed to in writing, software
1:dfdebd5:    distributed under the License is distributed on an "AS IS" BASIS,
1:dfdebd5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dfdebd5:    See the License for the specific language governing permissions and
1:dfdebd5:    limitations under the License.
1:dfdebd5: 
1:dfdebd5: */
1:dfdebd5: package org.apache.derby.iapi.types;
1:dfdebd5: 
1:a0dbbd7: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: 
1:dfdebd5: import java.io.IOException;
1:dfdebd5: import java.io.ObjectOutput;
1:dfdebd5: import org.apache.derby.iapi.db.DatabaseContext;
1:dfdebd5: import org.apache.derby.iapi.error.StandardException;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:dfdebd5: import org.apache.derby.iapi.services.context.ContextService;
1:dfdebd5: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:dfdebd5: 
1:dfdebd5: /**
1:dfdebd5:  * Generates stream headers for Clob data values.
1:dfdebd5:  * <p>
1:dfdebd5:  * <em>THREAD SAFETY NOTE</em>: This class is considered thread safe, even
1:dfdebd5:  * though it strictly speaking isn't. However, with the assumption that an
1:dfdebd5:  * instance of this class cannot be shared across databases with different
1:dfdebd5:  * versions, the only bad thing that can happen is that the mode is obtained
1:dfdebd5:  * several times.
1:dfdebd5:  */
1:dfdebd5: //@ThreadSafe
1:dfdebd5: public final class ClobStreamHeaderGenerator
1:dfdebd5:     implements StreamHeaderGenerator {
1:dfdebd5: 
1:dfdebd5:     /** Magic byte for the 10.5 stream header format. */
1:dfdebd5:     private static final byte MAGIC_BYTE = (byte)0xF0;
1:dfdebd5: 
1:dfdebd5:     /** Bytes for a 10.5 unknown length header. */
1:dfdebd5:     private static final byte[] UNKNOWN_LENGTH = new byte[] {
1:dfdebd5:                                             0x00, 0x00, MAGIC_BYTE, 0x00, 0x00};
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Header generator for the pre 10.5 header format. This format is used
1:dfdebd5:      * for Clobs as well if the database version is pre 10.5.
1:dfdebd5:      */
1:dfdebd5:     private static final CharStreamHeaderGenerator CHARHDRGEN =
1:dfdebd5:             new CharStreamHeaderGenerator();
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Reference to "owning" DVD, used to update it with information about
1:d92fa8c:      * which header format should be used. This is currently only determined by
1:d92fa8c:      * consulting the data dictionary about the version.
1:dfdebd5:      * <p>
1:dfdebd5:      * This is an optimization to avoid having to consult the data dictionary
1:dfdebd5:      * on every request to generate a header when a data value descriptor is
1:dfdebd5:      * reused.
1:dfdebd5:      */
1:dfdebd5:     private final StringDataValue callbackDVD;
1:dfdebd5:     /**
1:d92fa8c:      * {@code true} if the database version is prior to 10.5, {@code false} if
1:d92fa8c:      * the version is 10.5 or newer. If {@code null}, the version will be
1:d92fa8c:      * determined by obtaining the database context through the context service.
1:dfdebd5:      */
1:d92fa8c:     private Boolean isPreDerbyTenFive;
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Creates a new generator that will use the context manager to determine
1:d92fa8c:      * which header format to use based on the database version.
1:dfdebd5:      *
1:dfdebd5:      * @param dvd the owning data value descriptor
1:dfdebd5:      */
1:dfdebd5:     public ClobStreamHeaderGenerator(StringDataValue dvd) {
1:dfdebd5:         if (dvd == null) {
1:dfdebd5:             throw new IllegalStateException("dvd cannot be null");
1:dfdebd5:         }
1:dfdebd5:         this.callbackDVD = dvd;
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:d92fa8c:      * Creates a new generator using the specified header format.
1:dfdebd5:      *
1:d92fa8c:      * @param isPreDerbyTenFive {@code true} if the database version is prior
1:d92fa8c:      *      to 10.5, {@code false} if the version is 10.5 or newer
1:dfdebd5:      */
1:d92fa8c:     public ClobStreamHeaderGenerator(boolean isPreDerbyTenFive) {
1:d92fa8c:         // Do not try to determine the version through the cottext service, use
1:d92fa8c:         // the specified value instead.
1:dfdebd5:         this.callbackDVD = null;
1:d92fa8c:         this.isPreDerbyTenFive = Boolean.valueOf(isPreDerbyTenFive);
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Tells if the header encodes a character or byte count.
1:dfdebd5:      * <p>
1:dfdebd5:      * Currently the header expects a character count if the header format is
1:d92fa8c:      * 10.5 (or newer), and a byte count if we are accessing a database created
1:d92fa8c:      * by a version prior to 10.5.
1:dfdebd5:      *
1:d92fa8c:      * @return {@code false} if a byte count is expected (prior to 10.5),
1:d92fa8c:      *      {@code true} if a character count is expected (10.5 and newer).
1:dfdebd5:      */
1:dfdebd5:     public boolean expectsCharCount() {
1:d92fa8c:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:d92fa8c:             determineHeaderFormat();
1:dfdebd5:         }
1:d92fa8c:         // Expect byte count if older than 10.5, char count otherwise.
1:d92fa8c:         return !isPreDerbyTenFive.booleanValue();
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Generates the header for the specified length and writes it into the
1:dfdebd5:      * provided buffer, starting at the specified offset.
1:dfdebd5:      *
1:dfdebd5:      * @param buf the buffer to write into
1:dfdebd5:      * @param offset starting offset in the buffer
1:dfdebd5:      * @param valueLength the length to encode in the header
1:dfdebd5:      * @return The number of bytes written into the buffer.
1:dfdebd5:      */
1:dfdebd5:     public int generateInto(byte[] buf, int offset, long valueLength) {
1:d92fa8c:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:d92fa8c:             determineHeaderFormat();
1:dfdebd5:         }
1:dfdebd5:         int headerLength = 0;
1:d92fa8c:         if (isPreDerbyTenFive == Boolean.FALSE) {
1:dfdebd5:             // Write a 10.5 stream header format.
1:dfdebd5:             // Assume the length specified is a char count.
1:dfdebd5:             if (valueLength >= 0){
1:dfdebd5:                 // Encode the character count in the header.
1:dfdebd5:                 buf[offset + headerLength++] = (byte)(valueLength >>> 24);
1:dfdebd5:                 buf[offset + headerLength++] = (byte)(valueLength >>> 16);
1:dfdebd5:                 buf[offset + headerLength++] = MAGIC_BYTE;
1:dfdebd5:                 buf[offset + headerLength++] = (byte)(valueLength >>>  8);
1:dfdebd5:                 buf[offset + headerLength++] = (byte)(valueLength >>>  0);
1:dfdebd5:             } else {
1:dfdebd5:                 // Write an "unknown length" marker.
1:dfdebd5:                 headerLength = UNKNOWN_LENGTH.length;
1:dfdebd5:                 System.arraycopy(UNKNOWN_LENGTH, 0, buf, offset, headerLength);
1:dfdebd5:             }
1:dfdebd5:         } else {
1:dfdebd5:             // Write a pre 10.5 stream header format.
1:dfdebd5:             headerLength = CHARHDRGEN.generateInto(buf, offset, valueLength);
1:dfdebd5:         }
1:dfdebd5:         return headerLength;
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Generates the header for the specified length.
1:dfdebd5:      *
1:dfdebd5:      * @param out the destination stream
1:dfdebd5:      * @param valueLength the length to encode in the header
1:dfdebd5:      * @return The number of bytes written to the destination stream.
1:dfdebd5:      * @throws IOException if writing to the destination stream fails
1:dfdebd5:      */
1:dfdebd5:     public int generateInto(ObjectOutput out, long valueLength)
1:dfdebd5:             throws IOException {
1:d92fa8c:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:d92fa8c:             determineHeaderFormat();
1:dfdebd5:         }
1:dfdebd5:         int headerLength = 0;
1:d92fa8c:         if (isPreDerbyTenFive == Boolean.FALSE) {
1:dfdebd5:             // Write a 10.5 stream header format.
1:dfdebd5:             headerLength = 5;
1:dfdebd5:             // Assume the length specified is a char count.
1:dfdebd5:             if (valueLength > 0){
1:dfdebd5:                 // Encode the character count in the header.
1:dfdebd5:                 out.writeByte((byte)(valueLength >>> 24));
1:dfdebd5:                 out.writeByte((byte)(valueLength >>> 16));
1:dfdebd5:                 out.writeByte(MAGIC_BYTE);
1:dfdebd5:                 out.writeByte((byte)(valueLength >>>  8));
1:dfdebd5:                 out.writeByte((byte)(valueLength >>>  0));
1:dfdebd5:             } else {
1:dfdebd5:                 // Write an "unknown length" marker.
1:dfdebd5:                 out.write(UNKNOWN_LENGTH);
1:dfdebd5:             }
1:dfdebd5:         } else {
1:dfdebd5:             // Write a pre 10.5 stream header format.
1:dfdebd5:             headerLength = CHARHDRGEN.generateInto(out, valueLength);
1:dfdebd5:         }
1:dfdebd5:         return headerLength;
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Writes a Derby-specific end-of-stream marker to the buffer for a stream
1:dfdebd5:      * of the specified character length, if required.
1:dfdebd5:      *
1:dfdebd5:      * @param buffer the buffer to write into
1:dfdebd5:      * @param offset starting offset in the buffer
1:dfdebd5:      * @param valueLength the length of the stream
1:dfdebd5:      * @return Number of bytes written (zero or more).
1:dfdebd5:      */
1:dfdebd5:     public int writeEOF(byte[] buffer, int offset, long valueLength) {
1:d92fa8c:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:d92fa8c:             determineHeaderFormat();
1:dfdebd5:         }
1:d92fa8c:         if (!isPreDerbyTenFive.booleanValue()) {
1:dfdebd5:             if (valueLength < 0) {
1:9e74139:                 return CharStreamHeaderGenerator.writeEOFMarker( buffer, offset );
1:dfdebd5:             } else {
1:dfdebd5:                 return 0;
1:dfdebd5:             }
1:dfdebd5:         } else {
1:dfdebd5:             return CHARHDRGEN.writeEOF(buffer, offset, valueLength);
1:dfdebd5:         }
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Writes a Derby-specific end-of-stream marker to the destination stream
1:dfdebd5:      * for the specified character length, if required.
1:dfdebd5:      *
1:dfdebd5:      * @param out the destination stream
1:dfdebd5:      * @param valueLength the length of the stream
1:dfdebd5:      * @return Number of bytes written (zero or more).
1:dfdebd5:      */
1:dfdebd5:     public int writeEOF(ObjectOutput out, long valueLength)
1:dfdebd5:             throws IOException {
1:d92fa8c:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:d92fa8c:             determineHeaderFormat();
1:dfdebd5:         }
1:d92fa8c:         if (!isPreDerbyTenFive.booleanValue()) {
1:dfdebd5:             if (valueLength < 0) {
1:9e74139:                 return CharStreamHeaderGenerator.writeEOFMarker( out );
1:dfdebd5:             } else {
1:dfdebd5:                 return 0;
1:dfdebd5:             }
1:dfdebd5:         } else {
1:dfdebd5:             return CHARHDRGEN.writeEOF(out, valueLength);
1:dfdebd5:         }
1:dfdebd5:     }
1:dfdebd5: 
1:dfdebd5:     /**
1:85de1e4:      * Returns the maximum header length.
1:85de1e4:      *
1:85de1e4:      * @return Maximum header length in bytes.
1:85de1e4:      */
1:85de1e4:     public int getMaxHeaderLength() {
1:85de1e4:         return 5;
1:85de1e4:     }
1:85de1e4: 
1:85de1e4:     /**
1:d92fa8c:      * Determines which header format to use.
1:d92fa8c:      * <p>
1:d92fa8c:      * <em>Implementation note:</em> The header format is determined by
1:d92fa8c:      * consulting the data dictionary throught the context service. If there is
1:d92fa8c:      * no context, the operation will fail.
1:d92fa8c:      *
1:d92fa8c:      * @throws IllegalStateException if there is no context
1:dfdebd5:      */
1:d92fa8c:     private void determineHeaderFormat() {
1:dfdebd5:         DatabaseContext dbCtx = (DatabaseContext)
1:a0dbbd7:                 getContext(DatabaseContext.CONTEXT_ID);
1:dfdebd5:         if (dbCtx == null) {
1:dfdebd5:             throw new IllegalStateException("No context, unable to determine " +
1:dfdebd5:                     "which stream header format to generate");
1:dfdebd5:         } else {
1:dfdebd5:             DataDictionary dd = dbCtx.getDatabase().getDataDictionary();
1:dfdebd5:             try {
1:d92fa8c:                 isPreDerbyTenFive = Boolean.valueOf(!dd.checkVersion(
1:dfdebd5:                         DataDictionary.DD_VERSION_DERBY_10_5, null));
1:dfdebd5:             } catch (StandardException se) {
1:dfdebd5:                 // This should never happen as long as the second argument
1:dfdebd5:                 // above is null. If it happens, just bomb out.
1:dfdebd5:                 IllegalStateException ise =
1:dfdebd5:                         new IllegalStateException(se.getMessage());
1:dfdebd5:                 ise.initCause(se);
1:dfdebd5:                 throw ise;
1:dfdebd5:             }
1:dfdebd5:             // Update the DVD with information about the mode the database is
1:dfdebd5:             // being accessed in. It is assumed that a DVD is only shared
1:dfdebd5:             // within a single database, i.e. the mode doesn't change during
1:dfdebd5:             // the lifetime of the DVD.
1:d92fa8c:             callbackDVD.setStreamHeaderFormat(isPreDerbyTenFive);
1:dfdebd5:         }
1:dfdebd5:     }
1:a0dbbd7: 
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContext( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContext( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContext( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:dfdebd5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1:                 getContext(DatabaseContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContext( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContext( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContext( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:9e74139
/////////////////////////////////////////////////////////////////////////
1:                 return CharStreamHeaderGenerator.writeEOFMarker( buffer, offset );
/////////////////////////////////////////////////////////////////////////
1:                 return CharStreamHeaderGenerator.writeEOFMarker( out );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:85de1e4
/////////////////////////////////////////////////////////////////////////
1:      * Returns the maximum header length.
1:      *
1:      * @return Maximum header length in bytes.
1:      */
1:     public int getMaxHeaderLength() {
1:         return 5;
1:     }
1: 
1:     /**
commit:d92fa8c
/////////////////////////////////////////////////////////////////////////
1:      * which header format should be used. This is currently only determined by
1:      * consulting the data dictionary about the version.
/////////////////////////////////////////////////////////////////////////
1:      * {@code true} if the database version is prior to 10.5, {@code false} if
1:      * the version is 10.5 or newer. If {@code null}, the version will be
1:      * determined by obtaining the database context through the context service.
1:     private Boolean isPreDerbyTenFive;
1:      * which header format to use based on the database version.
/////////////////////////////////////////////////////////////////////////
1:      * Creates a new generator using the specified header format.
1:      * @param isPreDerbyTenFive {@code true} if the database version is prior
1:      *      to 10.5, {@code false} if the version is 10.5 or newer
1:     public ClobStreamHeaderGenerator(boolean isPreDerbyTenFive) {
1:         // Do not try to determine the version through the cottext service, use
1:         // the specified value instead.
1:         this.isPreDerbyTenFive = Boolean.valueOf(isPreDerbyTenFive);
1:      * 10.5 (or newer), and a byte count if we are accessing a database created
1:      * by a version prior to 10.5.
1:      * @return {@code false} if a byte count is expected (prior to 10.5),
1:      *      {@code true} if a character count is expected (10.5 and newer).
1:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:             determineHeaderFormat();
1:         // Expect byte count if older than 10.5, char count otherwise.
1:         return !isPreDerbyTenFive.booleanValue();
/////////////////////////////////////////////////////////////////////////
1:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:             determineHeaderFormat();
1:         if (isPreDerbyTenFive == Boolean.FALSE) {
/////////////////////////////////////////////////////////////////////////
1:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:             determineHeaderFormat();
1:         if (isPreDerbyTenFive == Boolean.FALSE) {
/////////////////////////////////////////////////////////////////////////
1:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:             determineHeaderFormat();
1:         if (!isPreDerbyTenFive.booleanValue()) {
/////////////////////////////////////////////////////////////////////////
1:         if (callbackDVD != null && isPreDerbyTenFive == null) {
1:             determineHeaderFormat();
1:         if (!isPreDerbyTenFive.booleanValue()) {
/////////////////////////////////////////////////////////////////////////
1:      * Determines which header format to use.
1:      * <p>
1:      * <em>Implementation note:</em> The header format is determined by
1:      * consulting the data dictionary throught the context service. If there is
1:      * no context, the operation will fail.
1:      *
1:      * @throws IllegalStateException if there is no context
1:     private void determineHeaderFormat() {
/////////////////////////////////////////////////////////////////////////
1:                 isPreDerbyTenFive = Boolean.valueOf(!dd.checkVersion(
/////////////////////////////////////////////////////////////////////////
1:             callbackDVD.setStreamHeaderFormat(isPreDerbyTenFive);
commit:52625a5
/////////////////////////////////////////////////////////////////////////
0:             callbackDVD.setSoftUpgradeMode(inSoftUpgradeMode);
commit:dfdebd5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.ClobStreamHeaderGenerator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.iapi.types;
1: 
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: import org.apache.derby.iapi.db.DatabaseContext;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: /**
1:  * Generates stream headers for Clob data values.
1:  * <p>
1:  * <em>THREAD SAFETY NOTE</em>: This class is considered thread safe, even
1:  * though it strictly speaking isn't. However, with the assumption that an
1:  * instance of this class cannot be shared across databases with different
1:  * versions, the only bad thing that can happen is that the mode is obtained
1:  * several times.
1:  */
1: //@ThreadSafe
1: public final class ClobStreamHeaderGenerator
1:     implements StreamHeaderGenerator {
1: 
1:     /** Magic byte for the 10.5 stream header format. */
1:     private static final byte MAGIC_BYTE = (byte)0xF0;
1: 
1:     /** Bytes for a 10.5 unknown length header. */
1:     private static final byte[] UNKNOWN_LENGTH = new byte[] {
1:                                             0x00, 0x00, MAGIC_BYTE, 0x00, 0x00};
1: 
1:     /**
1:      * Header generator for the pre 10.5 header format. This format is used
1:      * for Clobs as well if the database version is pre 10.5.
1:      */
1:     private static final CharStreamHeaderGenerator CHARHDRGEN =
1:             new CharStreamHeaderGenerator();
1: 
1:     /**
1:      * Reference to "owning" DVD, used to update it with information about
0:      * whether the database is being accessed in soft upgrade mode or not.
1:      * <p>
1:      * This is an optimization to avoid having to consult the data dictionary
1:      * on every request to generate a header when a data value descriptor is
1:      * reused.
1:      */
1:     private final StringDataValue callbackDVD;
1:     /**
0:      * {@code true} if database is being accessed in soft upgrade mode,
0:      * {@code false} is not. If {@code null}, the mode will be determined by
0:      * obtaining the database context through the context service.
1:      */
0:     private Boolean inSoftUpgradeMode;
1: 
1:     /**
1:      * Creates a new generator that will use the context manager to determine
0:      * if the database is being accessed in soft upgrade mode or not.
1:      *
1:      * @param dvd the owning data value descriptor
1:      */
1:     public ClobStreamHeaderGenerator(StringDataValue dvd) {
1:         if (dvd == null) {
1:             throw new IllegalStateException("dvd cannot be null");
1:         }
1:         this.callbackDVD = dvd;
1:     }
1: 
1:     /**
0:      * Creates a new generator for a database in the given mode.
1:      *
0:      * @param inSoftUpgradeMode {@code true} if the database is being accessed
0:      *      in soft upgrade mode, {@code false} if not
1:      */
0:     public ClobStreamHeaderGenerator(boolean inSoftUpgradeMode) {
0:         // Do not try to determine if we are in soft upgrade mode, use the
0:         // specified value for it.
1:         this.callbackDVD = null;
0:         this.inSoftUpgradeMode = Boolean.valueOf(inSoftUpgradeMode);
1:     }
1: 
1:     /**
1:      * Tells if the header encodes a character or byte count.
1:      * <p>
1:      * Currently the header expects a character count if the header format is
0:      * 10.5 (or newer), and a byte count if we are accessing a database in
0:      * soft upgrade mode.
1:      *
0:      * @return {@code false} if in soft upgrade mode, {@code true} if not.
1:      */
1:     public boolean expectsCharCount() {
0:         if (callbackDVD != null && inSoftUpgradeMode == null) {
0:             determineMode();
1:         }
0:         // Expect byte count if in soft upgrade mode, char count otherwise.
0:         return !inSoftUpgradeMode.booleanValue();
1:     }
1: 
1:     /**
1:      * Generates the header for the specified length and writes it into the
1:      * provided buffer, starting at the specified offset.
1:      *
1:      * @param buf the buffer to write into
1:      * @param offset starting offset in the buffer
1:      * @param valueLength the length to encode in the header
1:      * @return The number of bytes written into the buffer.
1:      */
1:     public int generateInto(byte[] buf, int offset, long valueLength) {
0:         if (callbackDVD != null && inSoftUpgradeMode == null) {
0:             determineMode();
1:         }
1:         int headerLength = 0;
0:         if (inSoftUpgradeMode == Boolean.FALSE) {
1:             // Write a 10.5 stream header format.
1:             // Assume the length specified is a char count.
1:             if (valueLength >= 0){
1:                 // Encode the character count in the header.
1:                 buf[offset + headerLength++] = (byte)(valueLength >>> 24);
1:                 buf[offset + headerLength++] = (byte)(valueLength >>> 16);
1:                 buf[offset + headerLength++] = MAGIC_BYTE;
1:                 buf[offset + headerLength++] = (byte)(valueLength >>>  8);
1:                 buf[offset + headerLength++] = (byte)(valueLength >>>  0);
1:             } else {
1:                 // Write an "unknown length" marker.
1:                 headerLength = UNKNOWN_LENGTH.length;
1:                 System.arraycopy(UNKNOWN_LENGTH, 0, buf, offset, headerLength);
1:             }
1:         } else {
1:             // Write a pre 10.5 stream header format.
1:             headerLength = CHARHDRGEN.generateInto(buf, offset, valueLength);
1:         }
1:         return headerLength;
1:     }
1: 
1:     /**
1:      * Generates the header for the specified length.
1:      *
1:      * @param out the destination stream
1:      * @param valueLength the length to encode in the header
1:      * @return The number of bytes written to the destination stream.
1:      * @throws IOException if writing to the destination stream fails
1:      */
1:     public int generateInto(ObjectOutput out, long valueLength)
1:             throws IOException {
0:         if (callbackDVD != null && inSoftUpgradeMode == null) {
0:             determineMode();
1:         }
1:         int headerLength = 0;
0:         if (inSoftUpgradeMode == Boolean.FALSE) {
1:             // Write a 10.5 stream header format.
1:             headerLength = 5;
1:             // Assume the length specified is a char count.
1:             if (valueLength > 0){
1:                 // Encode the character count in the header.
1:                 out.writeByte((byte)(valueLength >>> 24));
1:                 out.writeByte((byte)(valueLength >>> 16));
1:                 out.writeByte(MAGIC_BYTE);
1:                 out.writeByte((byte)(valueLength >>>  8));
1:                 out.writeByte((byte)(valueLength >>>  0));
1:             } else {
1:                 // Write an "unknown length" marker.
1:                 out.write(UNKNOWN_LENGTH);
1:             }
1:         } else {
1:             // Write a pre 10.5 stream header format.
1:             headerLength = CHARHDRGEN.generateInto(out, valueLength);
1:         }
1:         return headerLength;
1:     }
1: 
1:     /**
1:      * Writes a Derby-specific end-of-stream marker to the buffer for a stream
1:      * of the specified character length, if required.
1:      *
1:      * @param buffer the buffer to write into
1:      * @param offset starting offset in the buffer
1:      * @param valueLength the length of the stream
1:      * @return Number of bytes written (zero or more).
1:      */
1:     public int writeEOF(byte[] buffer, int offset, long valueLength) {
0:         if (callbackDVD != null && inSoftUpgradeMode == null) {
0:             determineMode();
1:         }
0:         if (!inSoftUpgradeMode.booleanValue()) {
1:             if (valueLength < 0) {
0:                 System.arraycopy(DERBY_EOF_MARKER, 0,
0:                                  buffer, offset, DERBY_EOF_MARKER.length);
0:                 return DERBY_EOF_MARKER.length;
1:             } else {
1:                 return 0;
1:             }
1:         } else {
1:             return CHARHDRGEN.writeEOF(buffer, offset, valueLength);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a Derby-specific end-of-stream marker to the destination stream
1:      * for the specified character length, if required.
1:      *
1:      * @param out the destination stream
1:      * @param valueLength the length of the stream
1:      * @return Number of bytes written (zero or more).
1:      */
1:     public int writeEOF(ObjectOutput out, long valueLength)
1:             throws IOException {
0:         if (callbackDVD != null && inSoftUpgradeMode == null) {
0:             determineMode();
1:         }
0:         if (!inSoftUpgradeMode.booleanValue()) {
1:             if (valueLength < 0) {
0:                 out.write(DERBY_EOF_MARKER);
0:                 return DERBY_EOF_MARKER.length;
1:             } else {
1:                 return 0;
1:             }
1:         } else {
1:             return CHARHDRGEN.writeEOF(out, valueLength);
1:         }
1:     }
1: 
1:     /**
0:      * Determines if the database being accessed is accessed in soft upgrade
0:      * mode or not.
1:      */
0:     private void determineMode() {
1:         DatabaseContext dbCtx = (DatabaseContext)
0:                 ContextService.getContext(DatabaseContext.CONTEXT_ID);
1:         if (dbCtx == null) {
1:             throw new IllegalStateException("No context, unable to determine " +
1:                     "which stream header format to generate");
1:         } else {
1:             DataDictionary dd = dbCtx.getDatabase().getDataDictionary();
1:             try {
0:                 inSoftUpgradeMode = Boolean.valueOf(!dd.checkVersion(
1:                         DataDictionary.DD_VERSION_DERBY_10_5, null));
1:             } catch (StandardException se) {
1:                 // This should never happen as long as the second argument
1:                 // above is null. If it happens, just bomb out.
1:                 IllegalStateException ise =
1:                         new IllegalStateException(se.getMessage());
1:                 ise.initCause(se);
1:                 throw ise;
1:             }
1:             // Update the DVD with information about the mode the database is
1:             // being accessed in. It is assumed that a DVD is only shared
1:             // within a single database, i.e. the mode doesn't change during
1:             // the lifetime of the DVD.
0:             // NOTE: Disabled until the StringDataValue interface has been
0:             //       changed.
0:             // callbackDVD.setSoftUpgradeMode(inSoftUpgradeMode);
1:         }
1:     }
1: }
============================================================================