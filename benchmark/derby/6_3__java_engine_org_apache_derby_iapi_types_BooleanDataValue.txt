2:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.BooleanDataValue
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
11:eac0369: 
8:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:af1c18c: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: public interface BooleanDataValue extends DataValueDescriptor
1:eac0369: {
1:eac0369: 	public boolean	getBoolean();
1:eac0369: 
8:eac0369: 	/**
1:eac0369: 	 * The SQL AND operator.  This provides SQL semantics for AND with unknown
1:eac0369: 	 * truth values - consult any standard SQL reference for an explanation.
21:eac0369: 	 *
1:eac0369: 	 * @param otherValue	The other BooleanDataValue to AND with this one
1:eac0369: 	 *
1:eac0369: 	 * @return	this AND otherValue
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public BooleanDataValue and(BooleanDataValue otherValue);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL OR operator.  This provides SQL semantics for OR with unknown
1:eac0369: 	 * truth values - consult any standard SQL reference for an explanation.
1:eac0369: 	 *
1:eac0369: 	 * @param otherValue	The other BooleanDataValue to OR with this one
1:eac0369: 	 *
1:eac0369: 	 * @return	this OR otherValue
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public BooleanDataValue or(BooleanDataValue otherValue);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL IS operator - consult any standard SQL reference for an explanation.
1:eac0369: 	 *
1:eac0369: 	 *	Implements the following truth table:
1:eac0369: 	 *
1:eac0369: 	 *	         otherValue
1:eac0369: 	 *	        | TRUE    | FALSE   | UNKNOWN
1:eac0369: 	 *	this    |----------------------------
1:eac0369: 	 *	        |
1:eac0369: 	 *	TRUE    | TRUE    | FALSE   | FALSE
1:eac0369: 	 *	FALSE   | FALSE   | TRUE    | FALSE
1:eac0369: 	 *	UNKNOWN | FALSE   | FALSE   | TRUE
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
1:eac0369: 	 *
1:eac0369: 	 * @return	whether this IS otherValue
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public BooleanDataValue is(BooleanDataValue otherValue);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Implements NOT IS. This reverses the sense of the is() call.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
1:eac0369: 	 *
1:eac0369: 	 * @return	NOT( this IS otherValue )
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public BooleanDataValue isNot(BooleanDataValue otherValue);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Throw an exception with the given SQLState if this BooleanDataValue
1:eac0369: 	 * is false. This method is useful for evaluating constraints.
1:eac0369: 	 *
1:eac0369: 	 * @param SQLState		The SQLState of the exception to throw if
1:eac0369: 	 *						this SQLBoolean is false.
1:eac0369: 	 * @param tableName		The name of the table to include in the exception
1:eac0369: 	 *						message.
1:eac0369: 	 * @param constraintName	The name of the failed constraint to include
1:eac0369: 	 *							in the exception message.
1:eac0369: 	 *
1:eac0369: 	 * @return	this
1:eac0369: 	 *
1:eac0369: 	 * @exception	StandardException	Thrown if this BooleanDataValue
1:eac0369: 	 *									is false.
1:eac0369: 	 */
1:eac0369: 	public BooleanDataValue throwExceptionIfFalse(
1:eac0369: 									String SQLState,
1:eac0369: 									String tableName,
1:eac0369: 									String constraintName)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:af1c18c:     /**
1:af1c18c:      * If this value is false and we have a deferred constraint, remember the
1:af1c18c:      * violation and proceed, else throw.  See also
1:af1c18c:      * {@link org.apache.derby.impl.sql.compile.AndNoShortCircuitNode}.
1:af1c18c:      *
1:af1c18c:      * @param SQLState      The SQLState of the exception to throw if
1:af1c18c:      *                      this SQLBoolean is false.
1:af1c18c:      * @param tableName     The name of the table to include in the exception
1:af1c18c:      *                      message.
1:af1c18c:      * @param constraintName    The name of the failed constraint to include
1:af1c18c:      *                          in the exception message.
1:af1c18c:      * @param a             The activation
1:af1c18c:      * @param savedUUIDIdx  The saved object number of the constraint's UUID.
1:af1c18c:      *
1:af1c18c:      * @return  this
1:af1c18c:      *
1:af1c18c:      * @exception   StandardException   Thrown if this BooleanDataValue
1:af1c18c:      *                                  is false.
1:af1c18c:      */
1:af1c18c:     public BooleanDataValue throwExceptionIfImmediateAndFalse(
1:af1c18c:                                     String SQLState,
1:af1c18c:                                     String tableName,
1:af1c18c:                                     String constraintName,
1:af1c18c:                                     Activation a,
1:af1c18c:                                     int savedUUIDIdx)
1:af1c18c:                             throws StandardException;
1:af1c18c: 
1:af1c18c:     /*
1:eac0369: 	** NOTE: The NOT operator is translated to "= FALSE", which does the same
1:eac0369: 	** thing.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the value of this BooleanDataValue.
1:eac0369: 	 *
1:eac0369: 	 * @param theValue	Contains the boolean value to set this BooleanDataValue
1:eac0369: 	 *					to.  Null means set this BooleanDataValue to null.
1:eac0369: 	 */
1:eac0369: 	public void setValue(Boolean theValue);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether a BooleanDataValue has the given value.  This is useful
1:eac0369: 	 * for short-circuiting.
1:eac0369: 	 *
1:eac0369: 	 * @param value		The value to look for
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the BooleanDataValue contains the given value.
1:eac0369: 	 */
1:eac0369: 	public boolean equals(boolean value);
1:4549ad4: 	
1:4549ad4: 	/**
1:4549ad4: 	 * Return an immutable BooleanDataValue with the same value as this.
1:4549ad4: 	 * @return An immutable BooleanDataValue with the same value as this.
1:4549ad4: 	 */
1:4549ad4: 	public BooleanDataValue getImmutable();
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * If this value is false and we have a deferred constraint, remember the
1:      * violation and proceed, else throw.  See also
1:      * {@link org.apache.derby.impl.sql.compile.AndNoShortCircuitNode}.
1:      *
1:      * @param SQLState      The SQLState of the exception to throw if
1:      *                      this SQLBoolean is false.
1:      * @param tableName     The name of the table to include in the exception
1:      *                      message.
1:      * @param constraintName    The name of the failed constraint to include
1:      *                          in the exception message.
1:      * @param a             The activation
1:      * @param savedUUIDIdx  The saved object number of the constraint's UUID.
1:      *
1:      * @return  this
1:      *
1:      * @exception   StandardException   Thrown if this BooleanDataValue
1:      *                                  is false.
1:      */
1:     public BooleanDataValue throwExceptionIfImmediateAndFalse(
1:                                     String SQLState,
1:                                     String tableName,
1:                                     String constraintName,
1:                                     Activation a,
1:                                     int savedUUIDIdx)
1:                             throws StandardException;
1: 
1:     /*
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4549ad4
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * Return an immutable BooleanDataValue with the same value as this.
1: 	 * @return An immutable BooleanDataValue with the same value as this.
1: 	 */
1: 	public BooleanDataValue getImmutable();
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.BooleanDataValue
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public interface BooleanDataValue extends DataValueDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	public boolean	getBoolean();
1: 
1: 	/**
1: 	 * The SQL AND operator.  This provides SQL semantics for AND with unknown
1: 	 * truth values - consult any standard SQL reference for an explanation.
1: 	 *
1: 	 * @param otherValue	The other BooleanDataValue to AND with this one
1: 	 *
1: 	 * @return	this AND otherValue
1: 	 *
1: 	 */
1: 	public BooleanDataValue and(BooleanDataValue otherValue);
1: 
1: 	/**
1: 	 * The SQL OR operator.  This provides SQL semantics for OR with unknown
1: 	 * truth values - consult any standard SQL reference for an explanation.
1: 	 *
1: 	 * @param otherValue	The other BooleanDataValue to OR with this one
1: 	 *
1: 	 * @return	this OR otherValue
1: 	 *
1: 	 */
1: 	public BooleanDataValue or(BooleanDataValue otherValue);
1: 
1: 	/**
1: 	 * The SQL IS operator - consult any standard SQL reference for an explanation.
1: 	 *
1: 	 *	Implements the following truth table:
1: 	 *
1: 	 *	         otherValue
1: 	 *	        | TRUE    | FALSE   | UNKNOWN
1: 	 *	this    |----------------------------
1: 	 *	        |
1: 	 *	TRUE    | TRUE    | FALSE   | FALSE
1: 	 *	FALSE   | FALSE   | TRUE    | FALSE
1: 	 *	UNKNOWN | FALSE   | FALSE   | TRUE
1: 	 *
1: 	 *
1: 	 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
1: 	 *
1: 	 * @return	whether this IS otherValue
1: 	 *
1: 	 */
1: 	public BooleanDataValue is(BooleanDataValue otherValue);
1: 
1: 	/**
1: 	 * Implements NOT IS. This reverses the sense of the is() call.
1: 	 *
1: 	 *
1: 	 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
1: 	 *
1: 	 * @return	NOT( this IS otherValue )
1: 	 *
1: 	 */
1: 	public BooleanDataValue isNot(BooleanDataValue otherValue);
1: 
1: 	/**
1: 	 * Throw an exception with the given SQLState if this BooleanDataValue
1: 	 * is false. This method is useful for evaluating constraints.
1: 	 *
1: 	 * @param SQLState		The SQLState of the exception to throw if
1: 	 *						this SQLBoolean is false.
1: 	 * @param tableName		The name of the table to include in the exception
1: 	 *						message.
1: 	 * @param constraintName	The name of the failed constraint to include
1: 	 *							in the exception message.
1: 	 *
1: 	 * @return	this
1: 	 *
1: 	 * @exception	StandardException	Thrown if this BooleanDataValue
1: 	 *									is false.
1: 	 */
1: 	public BooleanDataValue throwExceptionIfFalse(
1: 									String SQLState,
1: 									String tableName,
1: 									String constraintName)
1: 							throws StandardException;
1: 
1: 	/*
1: 	** NOTE: The NOT operator is translated to "= FALSE", which does the same
1: 	** thing.
1: 	*/
1: 
1: 	/**
1: 	 * Set the value of this BooleanDataValue.
1: 	 *
1: 	 * @param theValue	Contains the boolean value to set this BooleanDataValue
1: 	 *					to.  Null means set this BooleanDataValue to null.
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
1: 	public void setValue(Boolean theValue);
1: 
1: 
1: 	/**
0: 	 * Set the value of this BooleanDataValue to the given int value
1: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Integer theValue);
1: 
1: 	/**
0: 	 * Set the value of this BooleanDataValue to the given double value
1: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Double theValue);
1: 
1: 	/**
0: 	 * Set the value of this BooleanDataValue to the given float value
1: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Float theValue);
1: 
1: 
1: 	/**
0: 	 * Set the value of this BooleanDataValue to the given short value
1: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Short theValue);
1: 
1: 	/**
0: 	 * Set the value of this BooleanDataValue to the given long value
1: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Long theValue);
1: 
1: 
1: 	/**
0: 	 * Set the value of this BooleanDataValue to the given Byte value
1: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
1: 	 *
0: 	 * @return	This BooleanDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Byte theValue);
1: 
1: 	/**
1: 	 * Tell whether a BooleanDataValue has the given value.  This is useful
1: 	 * for short-circuiting.
1: 	 *
1: 	 * @param value		The value to look for
1: 	 *
1: 	 * @return	true if the BooleanDataValue contains the given value.
1: 	 */
1: 	public boolean equals(boolean value);
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: public interface BooleanDataValue extends DataValueDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	public boolean	getBoolean();
0: 
0: 	/**
0: 	 * The SQL AND operator.  This provides SQL semantics for AND with unknown
0: 	 * truth values - consult any standard SQL reference for an explanation.
0: 	 *
0: 	 * @param otherValue	The other BooleanDataValue to AND with this one
0: 	 *
0: 	 * @return	this AND otherValue
0: 	 *
0: 	 */
0: 	public BooleanDataValue and(BooleanDataValue otherValue);
0: 
0: 	/**
0: 	 * The SQL OR operator.  This provides SQL semantics for OR with unknown
0: 	 * truth values - consult any standard SQL reference for an explanation.
0: 	 *
0: 	 * @param otherValue	The other BooleanDataValue to OR with this one
0: 	 *
0: 	 * @return	this OR otherValue
0: 	 *
0: 	 */
0: 	public BooleanDataValue or(BooleanDataValue otherValue);
0: 
0: 	/**
0: 	 * The SQL IS operator - consult any standard SQL reference for an explanation.
0: 	 *
0: 	 *	Implements the following truth table:
0: 	 *
0: 	 *	         otherValue
0: 	 *	        | TRUE    | FALSE   | UNKNOWN
0: 	 *	this    |----------------------------
0: 	 *	        |
0: 	 *	TRUE    | TRUE    | FALSE   | FALSE
0: 	 *	FALSE   | FALSE   | TRUE    | FALSE
0: 	 *	UNKNOWN | FALSE   | FALSE   | TRUE
0: 	 *
0: 	 *
0: 	 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
0: 	 *
0: 	 * @return	whether this IS otherValue
0: 	 *
0: 	 */
0: 	public BooleanDataValue is(BooleanDataValue otherValue);
0: 
0: 	/**
0: 	 * Implements NOT IS. This reverses the sense of the is() call.
0: 	 *
0: 	 *
0: 	 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
0: 	 *
0: 	 * @return	NOT( this IS otherValue )
0: 	 *
0: 	 */
0: 	public BooleanDataValue isNot(BooleanDataValue otherValue);
0: 
0: 	/**
0: 	 * Throw an exception with the given SQLState if this BooleanDataValue
0: 	 * is false. This method is useful for evaluating constraints.
0: 	 *
0: 	 * @param SQLState		The SQLState of the exception to throw if
0: 	 *						this SQLBoolean is false.
0: 	 * @param tableName		The name of the table to include in the exception
0: 	 *						message.
0: 	 * @param constraintName	The name of the failed constraint to include
0: 	 *							in the exception message.
0: 	 *
0: 	 * @return	this
0: 	 *
0: 	 * @exception	StandardException	Thrown if this BooleanDataValue
0: 	 *									is false.
0: 	 */
0: 	public BooleanDataValue throwExceptionIfFalse(
0: 									String SQLState,
0: 									String tableName,
0: 									String constraintName)
0: 							throws StandardException;
0: 
0: 	/*
0: 	** NOTE: The NOT operator is translated to "= FALSE", which does the same
0: 	** thing.
0: 	*/
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue.
0: 	 *
0: 	 * @param theValue	Contains the boolean value to set this BooleanDataValue
0: 	 *					to.  Null means set this BooleanDataValue to null.
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Boolean theValue);
0: 
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue to the given int value
0: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Integer theValue);
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue to the given double value
0: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Double theValue);
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue to the given float value
0: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Float theValue);
0: 
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue to the given short value
0: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Short theValue);
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue to the given long value
0: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Long theValue);
0: 
0: 
0: 	/**
0: 	 * Set the value of this BooleanDataValue to the given Byte value
0: 	 *
0: 	 * @param theValue	The value to set this BooleanDataValue to
0: 	 *
0: 	 * @return	This BooleanDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Byte theValue);
0: 
0: 	/**
0: 	 * Tell whether a BooleanDataValue has the given value.  This is useful
0: 	 * for short-circuiting.
0: 	 *
0: 	 * @param value		The value to look for
0: 	 *
0: 	 * @return	true if the BooleanDataValue contains the given value.
0: 	 */
0: 	public boolean equals(boolean value);
0: }
============================================================================