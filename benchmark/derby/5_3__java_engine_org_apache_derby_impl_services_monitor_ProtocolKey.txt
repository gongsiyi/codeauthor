1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.services.monitor.ProtocolKey
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A class that represents a key for a module search.
1:eac0369: */
1:eac0369: 
1:eac0369: 
1:eac0369: class ProtocolKey {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Fields.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The class of the factory
1:eac0369: 	*/
1:073b862: 	protected Class<?> factoryInterface;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		name of module, can be null
1:eac0369: 	*/
1:eac0369: 	protected String		identifier;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 
1:073b862: 	protected ProtocolKey(Class<?> factoryInterface, String identifier)
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 		this.factoryInterface = factoryInterface;
1:eac0369: 		this.identifier = identifier;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	static ProtocolKey create(String className, String identifier) throws StandardException {
1:eac0369: 
1:eac0369: 		Throwable t;
1:eac0369: 		try {
1:eac0369: 			return new ProtocolKey(Class.forName(className), identifier);
1:eac0369: 
1:eac0369: 		} catch (ClassNotFoundException cnfe) {
1:eac0369: 			t = cnfe;
1:eac0369: 		} catch (IllegalArgumentException iae) {
1:eac0369: 			t = iae;
1:850aba4:         } catch (LinkageError le) {
1:850aba4:             t = le;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		throw Monitor.exceptionStartingModule(t);	
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods required to use this key
1:eac0369: 	*/
1:eac0369: 
1:073b862: 	protected Class<?> getFactoryInterface() {
1:eac0369: 		return factoryInterface;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected String getIdentifier() {
1:eac0369: 		return identifier;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public int hashCode() {
1:eac0369: 		return factoryInterface.hashCode() +
1:eac0369: 			(identifier == null ? 0  : identifier.hashCode());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (other instanceof ProtocolKey) {
1:eac0369: 			ProtocolKey otherKey = (ProtocolKey) other;
1:eac0369: 
1:eac0369: 			if (factoryInterface != otherKey.factoryInterface)
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			if (identifier == null) {
1:eac0369: 				if (otherKey.identifier != null)
1:eac0369: 					return false;
1:eac0369: 			} else {
1:eac0369: 
1:eac0369: 				if (otherKey.identifier == null)
1:eac0369: 					return false;
1:eac0369: 
1:eac0369: 				if (!identifier.equals(otherKey.identifier))
1:eac0369: 					return false;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString() {
1:eac0369: 
1:eac0369: 		return factoryInterface.getName() + " (" + identifier + ")";
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:073b862
/////////////////////////////////////////////////////////////////////////
1: 	protected Class<?> factoryInterface;
/////////////////////////////////////////////////////////////////////////
1: 	protected ProtocolKey(Class<?> factoryInterface, String identifier)
/////////////////////////////////////////////////////////////////////////
1: 	protected Class<?> getFactoryInterface() {
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1:         } catch (LinkageError le) {
1:             t = le;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.monitor.ProtocolKey
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.monitor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: 
1: /**
1: 	A class that represents a key for a module search.
1: */
1: 
1: 
1: class ProtocolKey {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/*
1: 	** Fields.
1: 	*/
1: 
1: 	/**
1: 		The class of the factory
1: 	*/
0: 	protected Class factoryInterface;
1: 
1: 	/**
1: 		name of module, can be null
1: 	*/
1: 	protected String		identifier;
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 
0: 	protected ProtocolKey(Class factoryInterface, String identifier)
1: 	{
1: 		super();
1: 		this.factoryInterface = factoryInterface;
1: 		this.identifier = identifier;
1: 	}
1: 
1: 	static ProtocolKey create(String className, String identifier) throws StandardException {
1: 
1: 		Throwable t;
1: 		try {
1: 			return new ProtocolKey(Class.forName(className), identifier);
1: 
1: 		} catch (ClassNotFoundException cnfe) {
1: 			t = cnfe;
1: 		} catch (IllegalArgumentException iae) {
1: 			t = iae;
1: 		}
1: 
1: 		throw Monitor.exceptionStartingModule(t);	
1: 	}
1: 
1: 	/*
1: 	** Methods required to use this key
1: 	*/
1: 
0: 	protected Class getFactoryInterface() {
1: 		return factoryInterface;
1: 	}
1: 
1: 	protected String getIdentifier() {
1: 		return identifier;
1: 	}
1: 
1: 	/*
1: 	**
1: 	*/
1: 
1: 	public int hashCode() {
1: 		return factoryInterface.hashCode() +
1: 			(identifier == null ? 0  : identifier.hashCode());
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (other instanceof ProtocolKey) {
1: 			ProtocolKey otherKey = (ProtocolKey) other;
1: 
1: 			if (factoryInterface != otherKey.factoryInterface)
1: 				return false;
1: 
1: 			if (identifier == null) {
1: 				if (otherKey.identifier != null)
1: 					return false;
1: 			} else {
1: 
1: 				if (otherKey.identifier == null)
1: 					return false;
1: 
1: 				if (!identifier.equals(otherKey.identifier))
1: 					return false;
1: 			}
1: 
1: 			return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	public String toString() {
1: 
1: 		return factoryInterface.getName() + " (" + identifier + ")";
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.monitor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: 
0: /**
0: 	A class that represents a key for a module search.
0: */
0: 
0: 
0: class ProtocolKey {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/*
0: 	** Fields.
0: 	*/
0: 
0: 	/**
0: 		The class of the factory
0: 	*/
0: 	protected Class factoryInterface;
0: 
0: 	/**
0: 		name of module, can be null
0: 	*/
0: 	protected String		identifier;
0: 
0: 	/*
0: 	** Constructor
0: 	*/
0: 
0: 	protected ProtocolKey(Class factoryInterface, String identifier)
0: 	{
0: 		super();
0: 		this.factoryInterface = factoryInterface;
0: 		this.identifier = identifier;
0: 	}
0: 
0: 	static ProtocolKey create(String className, String identifier) throws StandardException {
0: 
0: 		Throwable t;
0: 		try {
0: 			return new ProtocolKey(Class.forName(className), identifier);
0: 
0: 		} catch (ClassNotFoundException cnfe) {
0: 			t = cnfe;
0: 		} catch (IllegalArgumentException iae) {
0: 			t = iae;
0: 		}
0: 
0: 		throw Monitor.exceptionStartingModule(t);	
0: 	}
0: 
0: 	/*
0: 	** Methods required to use this key
0: 	*/
0: 
0: 	protected Class getFactoryInterface() {
0: 		return factoryInterface;
0: 	}
0: 
0: 	protected String getIdentifier() {
0: 		return identifier;
0: 	}
0: 
0: 	/*
0: 	**
0: 	*/
0: 
0: 	public int hashCode() {
0: 		return factoryInterface.hashCode() +
0: 			(identifier == null ? 0  : identifier.hashCode());
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 		if (other instanceof ProtocolKey) {
0: 			ProtocolKey otherKey = (ProtocolKey) other;
0: 
0: 			if (factoryInterface != otherKey.factoryInterface)
0: 				return false;
0: 
0: 			if (identifier == null) {
0: 				if (otherKey.identifier != null)
0: 					return false;
0: 			} else {
0: 
0: 				if (otherKey.identifier == null)
0: 					return false;
0: 
0: 				if (!identifier.equals(otherKey.identifier))
0: 					return false;
0: 			}
0: 
0: 			return true;
0: 		}
0: 		return false;
0: 	}
0: 
0: 	public String toString() {
0: 
0: 		return factoryInterface.getName() + " (" + identifier + ")";
0: 	}
0: }
============================================================================