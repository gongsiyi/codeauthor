1:10e07a5: /*
5:10e07a5: 
1:10e07a5: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1
1:10e07a5: 
1:10e07a5: Licensed to the Apache Software Foundation (ASF) under one or more
1:10e07a5: contributor license agreements.  See the NOTICE file distributed with
1:10e07a5: this work for additional information regarding copyright ownership.
1:10e07a5: The ASF licenses this file to You under the Apache License, Version 2.0
1:10e07a5: (the "License"); you may not use this file except in compliance with
1:10e07a5: the License.  You may obtain a copy of the License at
1:10e07a5: 
1:10e07a5:    http://www.apache.org/licenses/LICENSE-2.0
1:10e07a5: 
1:10e07a5: Unless required by applicable law or agreed to in writing, software
1:10e07a5: distributed under the License is distributed on an "AS IS" BASIS,
1:10e07a5: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10e07a5: See the License for the specific language governing permissions and
1:10e07a5: limitations under the License.
1:10e07a5: 
1:10e07a5: */
1:10e07a5: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:10e07a5: 
1:10e07a5: import java.sql.SQLException;
1:10e07a5: import java.sql.Statement;
1:10e07a5: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:10e07a5: 
1:10e07a5: /**
1:10e07a5:  * Upgrade test cases for changes made in 10.1.
1:daf5fa3:  * If the old version is 10.1 or later then these tests
1:daf5fa3:  * will not be run.
1:cdda215:  * <BR>
1:cdda215:     10.1 Upgrade issues
1:cdda215: 
1:cdda215:     <UL>
1:cdda215:     <LI> testProcedureSignature - Routines with explicit Java signatures.
1:cdda215:     </UL>
1:cdda215: 
1:10e07a5:  */
1:10e07a5: public class Changes10_1 extends UpgradeChange {
1:10e07a5:     
1:10e07a5:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Upgrade changes for 10.1");
1:10e07a5:         
1:10e07a5:         suite.addTestSuite(Changes10_1.class);
1:10e07a5:         
1:10e07a5:         return suite;
6:10e07a5:     }
1:10e07a5: 
1:10e07a5:     public Changes10_1(String name) {
1:10e07a5:         super(name);
1:10e07a5:     }
1:10e07a5:     
1:10e07a5:     /**
1:10e07a5:      * A CREATE PROCEDURE with a signature (of no arguments).
1:10e07a5:      */
1:10e07a5:     private static final String PROC_SIGNATURE =
1:10e07a5:         "CREATE PROCEDURE GC() " +
1:10e07a5:         "LANGUAGE JAVA PARAMETER STYLE JAVA EXTERNAL NAME" +
1:10e07a5:         " 'java.lang.System.gc()'";
1:10e07a5:     
1:10e07a5:     /**
1:10e07a5:      * Check that a procedure with a signature can not be added if the
1:10e07a5:      * on-disk database version is 10.0.
1:10e07a5:      * Test added by 10.1.
1:10e07a5:      * @throws SQLException 
1:10e07a5:      *
1:10e07a5:      */
1:10e07a5:     public void testProcedureSignature() throws SQLException
5:10e07a5:     {      
1:daf5fa3:        Statement s = createStatement();
1:10e07a5:         switch (getPhase())
1:10e07a5:         {
1:10e07a5:         case PH_CREATE:
1:daf5fa3:         case PH_POST_SOFT_UPGRADE:
3:10e07a5:             break;
1:10e07a5:         case PH_SOFT_UPGRADE:
1:daf5fa3:             assertStatementError(SQLSTATE_NEED_UPGRADE, s,
1:daf5fa3:                     PROC_SIGNATURE);
1:daf5fa3:             break;
1:10e07a5: 
1:10e07a5:         case PH_HARD_UPGRADE:
1:daf5fa3:             s.execute(PROC_SIGNATURE);
2:10e07a5:             s.execute("CALL GC()");
1:10e07a5:             break;
1:10e07a5:         }
1:daf5fa3:         s.close();
1:10e07a5:     }
1:10e07a5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Upgrade changes for 10.1");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:daf5fa3
/////////////////////////////////////////////////////////////////////////
1:  * If the old version is 10.1 or later then these tests
1:  * will not be run.
/////////////////////////////////////////////////////////////////////////
1:        Statement s = createStatement();
1:         case PH_POST_SOFT_UPGRADE:
1:             assertStatementError(SQLSTATE_NEED_UPGRADE, s,
1:                     PROC_SIGNATURE);
1:             break;
1:             s.execute(PROC_SIGNATURE);
1:         s.close();
commit:cdda215
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Connection;
0: import java.sql.DatabaseMetaData;
0: import java.sql.ResultSet;
/////////////////////////////////////////////////////////////////////////
1:  * <BR>
1:     10.1 Upgrade issues
1: 
1:     <UL>
1:     <LI> testProcedureSignature - Routines with explicit Java signatures.
1:     </UL>
1: 
commit:10e07a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Upgrade test cases for changes made in 10.1.
1:  */
1: public class Changes10_1 extends UpgradeChange {
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("Upgrade changes for 10.1");
1:         
1:         suite.addTestSuite(Changes10_1.class);
1:         
1:         return suite;
1:     }
1: 
1:     public Changes10_1(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * A CREATE PROCEDURE with a signature (of no arguments).
1:      */
1:     private static final String PROC_SIGNATURE =
1:         "CREATE PROCEDURE GC() " +
1:         "LANGUAGE JAVA PARAMETER STYLE JAVA EXTERNAL NAME" +
1:         " 'java.lang.System.gc()'";
1:     
1:     /**
1:      * Check that a procedure with a signature can not be added if the
1:      * on-disk database version is 10.0.
1:      * Test added by 10.1.
1:      * @throws SQLException 
1:      *
1:      */
1:     public void testProcedureSignature() throws SQLException
1:     {      
0:        boolean signaturesAllowedInOldRelease = oldAtLeast(10, 1);
1:         
1:         switch (getPhase())
1:         {
1:         case PH_CREATE:
1:             break;
1:         case PH_SOFT_UPGRADE:
1:         {
0:             Statement s = createStatement();
0:             try {
0:                 s.execute(PROC_SIGNATURE);
0:                 if (!signaturesAllowedInOldRelease)
0:                     fail("created procedure with signature");
1: 
0:             } catch (SQLException sqle) {
0:                 if (signaturesAllowedInOldRelease)
0:                     fail("failed to create valid procedure");
1:                 
0:                 assertSQLState("XCL47", sqle);
1:             }
0:             s.close();
1:             break;
1:         }
0:         case PH_POST_SOFT_UPGRADE:
1:         {
0:             Statement s = createStatement();
0:             try {
1:                 s.execute("CALL GC()");
0:                 if (!signaturesAllowedInOldRelease)
0:                     fail("procedure was created in soft upgrade!");
1:                     
0:             } catch (SQLException sqle)
1:             {
0:                 if (signaturesAllowedInOldRelease)
0:                     fail("procedure was created not in soft upgrade!");
1:             }
0:             s.close();
1:             break;
1:         }
1:         case PH_HARD_UPGRADE:
1:         {
0:             Statement s = createStatement();
0:             if (!signaturesAllowedInOldRelease)
0:                 s.execute(PROC_SIGNATURE);
1:             s.execute("CALL GC()");
0:             s.close();
1:             break;
1:         }
1:         }
1:     }
1: }
============================================================================