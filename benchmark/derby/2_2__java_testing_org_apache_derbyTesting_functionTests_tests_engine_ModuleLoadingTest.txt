1:877a43d: /*
1:877a43d:  * Derby - Class org.apache.derbyTesting.functionTests.tests.engine.ModuleLoadingTest
1:877a43d:  *
1:877a43d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:877a43d:  * contributor license agreements.  See the NOTICE file distributed with
1:877a43d:  * this work for additional information regarding copyright ownership.
1:877a43d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:877a43d:  * (the "License"); you may not use this file except in compliance with
1:877a43d:  * the License.  You may obtain a copy of the License at
1:877a43d:  *
1:877a43d:  * http://www.apache.org/licenses/LICENSE-2.0
1:877a43d:  *
1:877a43d:  * Unless required by applicable law or agreed to in writing, software
1:877a43d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:877a43d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:877a43d:  * See the License for the specific language governing permissions and
1:877a43d:  * limitations under the License.
1:877a43d:  */
1:877a43d: 
1:877a43d: package org.apache.derbyTesting.functionTests.tests.engine;
1:877a43d: 
1:877a43d: import java.sql.Connection;
1:877a43d: import java.sql.PreparedStatement;
1:877a43d: import java.util.ArrayList;
1:877a43d: import junit.framework.Test;
1:877a43d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:877a43d: import org.apache.derbyTesting.junit.JDBC;
1:877a43d: import org.apache.derbyTesting.junit.TestConfiguration;
1:877a43d: 
1:877a43d: /**
1:877a43d:  * This class contains tests for correct loading (booting) of modules
1:877a43d:  * and factories.
1:877a43d:  */
1:877a43d: public class ModuleLoadingTest extends BaseJDBCTestCase {
1:877a43d:     public ModuleLoadingTest(String name) {
1:877a43d:         super(name);
1:877a43d:     }
1:877a43d: 
1:877a43d:     public static Test suite() {
1:1ae02c9:         BaseTestSuite ts = new BaseTestSuite();
1:877a43d: 
1:877a43d:         // Run concurrentLoadingOfSortFactory in a separate database so that
1:877a43d:         // the sort factory isn't already loaded.
1:877a43d:         ts.addTest(TestConfiguration.singleUseDatabaseDecorator(
1:877a43d:                 new ModuleLoadingTest("concurrentLoadingOfSortFactory")));
1:877a43d: 
1:877a43d:         return ts;
1:877a43d:     }
1:877a43d: 
1:877a43d:     /**
1:877a43d:      * Test case for DERBY-2074. When multiple threads tried to load
1:877a43d:      * ExternalSortFactory concurrently, we sometimes got a
1:877a43d:      * NullPointerException.
1:877a43d:      */
1:877a43d:     public void concurrentLoadingOfSortFactory() throws Throwable {
1:877a43d:         // number of concurrent threads
1:877a43d:         final int numThreads = 10;
1:877a43d: 
1:877a43d:         // Helper object to make it easier to refer to ModuleLoadingTest.this
1:877a43d:         // from within the nested Runnable class. Used for synchronization
1:877a43d:         // between the threads.
1:877a43d:         final Object me = this;
1:877a43d: 
1:877a43d:         // Flag that tells the threads whether they're allowed to start.
1:877a43d:         final boolean[] go = new boolean[1];
1:877a43d:         // Active threads count.
1:877a43d:         final int[] activeThreads = new int[1];
1:877a43d:         // List of exceptions/throwables thrown by the forked threads.
1:c393694:         final ArrayList<Throwable> exceptions = new ArrayList<Throwable>();
1:877a43d: 
1:877a43d:         Thread[] threads = new Thread[numThreads];
1:877a43d: 
1:877a43d:         // Start the threads.
1:877a43d:         for (int i = 0; i < numThreads; i++) {
1:877a43d:             final Connection c = openDefaultConnection();
1:877a43d:             // Prepare a statement that ends up calling
1:877a43d:             // DistinctScalarAggregateResultSet.loadSorter().
1:877a43d:             final PreparedStatement ps = c.prepareStatement(
1:877a43d:                     "select count(distinct tablename) from sys.systables");
1:877a43d:             threads[i] = new Thread(new Runnable() {
1:877a43d:                 public void run() {
1:877a43d:                     try {
1:877a43d:                         _run();
1:877a43d:                     } catch (Throwable t) {
1:877a43d:                         synchronized (me) {
1:877a43d:                             exceptions.add(t);
1:877a43d:                         }
1:877a43d:                     }
1:877a43d:                 }
1:877a43d:                 private void _run() throws Exception {
1:877a43d:                     synchronized (me) {
1:877a43d:                         // Notify the main thread that we're ready to execute.
1:877a43d:                         activeThreads[0]++;
1:877a43d:                         me.notifyAll();
1:877a43d: 
1:877a43d:                         // Wait for the main thread to notify us that we
1:877a43d:                         // should go ahead.
1:877a43d:                         while (!go[0]) {
1:877a43d:                             me.wait();
1:877a43d:                         }
1:877a43d:                     }
1:877a43d:                     // executeQuery() below used to get occational NPEs before
1:877a43d:                     // DERBY-2074.
1:877a43d:                     JDBC.assertDrainResults(ps.executeQuery());
1:877a43d:                     ps.close();
1:877a43d:                     c.close();
1:877a43d:                 }
1:877a43d:             });
1:877a43d:             threads[i].start();
1:877a43d:         }
1:877a43d: 
1:877a43d:         // We want all threads to execute the statement at the same time,
1:877a43d:         // so wait for all threads to be ready before giving them the GO
1:877a43d:         // signal.
1:877a43d:         synchronized (me) {
1:877a43d:             while (activeThreads[0] < numThreads && exceptions.isEmpty()) {
1:877a43d:                 me.wait();
1:877a43d:             }
1:877a43d: 
1:877a43d:             // All threads are active, or at least one of the threads have
1:877a43d:             // failed, so tell the threads to stop waiting.
1:877a43d:             go[0] = true;
1:877a43d:             me.notifyAll();
1:877a43d:         }
1:877a43d: 
1:877a43d:         // The threads have been started, now wait for them to finish.
1:877a43d:         for (int i = 0; i < numThreads; i++) {
1:877a43d:             threads[i].join();
1:877a43d:         }
1:877a43d: 
1:877a43d:         // At least one of the threads failed. Re-throw the first error
1:877a43d:         // reported.
1:877a43d:         if (!exceptions.isEmpty()) {
1:c393694:             throw exceptions.get(0);
1:877a43d:         }
1:877a43d:     }
1:877a43d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite ts = new BaseTestSuite();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
1:         final ArrayList<Throwable> exceptions = new ArrayList<Throwable>();
/////////////////////////////////////////////////////////////////////////
1:             throw exceptions.get(0);
commit:877a43d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.engine.ModuleLoadingTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.engine;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.util.ArrayList;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This class contains tests for correct loading (booting) of modules
1:  * and factories.
1:  */
1: public class ModuleLoadingTest extends BaseJDBCTestCase {
1:     public ModuleLoadingTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite ts = new TestSuite();
1: 
1:         // Run concurrentLoadingOfSortFactory in a separate database so that
1:         // the sort factory isn't already loaded.
1:         ts.addTest(TestConfiguration.singleUseDatabaseDecorator(
1:                 new ModuleLoadingTest("concurrentLoadingOfSortFactory")));
1: 
1:         return ts;
1:     }
1: 
1:     /**
1:      * Test case for DERBY-2074. When multiple threads tried to load
1:      * ExternalSortFactory concurrently, we sometimes got a
1:      * NullPointerException.
1:      */
1:     public void concurrentLoadingOfSortFactory() throws Throwable {
1:         // number of concurrent threads
1:         final int numThreads = 10;
1: 
1:         // Helper object to make it easier to refer to ModuleLoadingTest.this
1:         // from within the nested Runnable class. Used for synchronization
1:         // between the threads.
1:         final Object me = this;
1: 
1:         // Flag that tells the threads whether they're allowed to start.
1:         final boolean[] go = new boolean[1];
1:         // Active threads count.
1:         final int[] activeThreads = new int[1];
1:         // List of exceptions/throwables thrown by the forked threads.
0:         final ArrayList exceptions = new ArrayList();
1: 
1:         Thread[] threads = new Thread[numThreads];
1: 
1:         // Start the threads.
1:         for (int i = 0; i < numThreads; i++) {
1:             final Connection c = openDefaultConnection();
1:             // Prepare a statement that ends up calling
1:             // DistinctScalarAggregateResultSet.loadSorter().
1:             final PreparedStatement ps = c.prepareStatement(
1:                     "select count(distinct tablename) from sys.systables");
1:             threads[i] = new Thread(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         _run();
1:                     } catch (Throwable t) {
1:                         synchronized (me) {
1:                             exceptions.add(t);
1:                         }
1:                     }
1:                 }
1:                 private void _run() throws Exception {
1:                     synchronized (me) {
1:                         // Notify the main thread that we're ready to execute.
1:                         activeThreads[0]++;
1:                         me.notifyAll();
1: 
1:                         // Wait for the main thread to notify us that we
1:                         // should go ahead.
1:                         while (!go[0]) {
1:                             me.wait();
1:                         }
1:                     }
1:                     // executeQuery() below used to get occational NPEs before
1:                     // DERBY-2074.
1:                     JDBC.assertDrainResults(ps.executeQuery());
1:                     ps.close();
1:                     c.close();
1:                 }
1:             });
1:             threads[i].start();
1:         }
1: 
1:         // We want all threads to execute the statement at the same time,
1:         // so wait for all threads to be ready before giving them the GO
1:         // signal.
1:         synchronized (me) {
1:             while (activeThreads[0] < numThreads && exceptions.isEmpty()) {
1:                 me.wait();
1:             }
1: 
1:             // All threads are active, or at least one of the threads have
1:             // failed, so tell the threads to stop waiting.
1:             go[0] = true;
1:             me.notifyAll();
1:         }
1: 
1:         // The threads have been started, now wait for them to finish.
1:         for (int i = 0; i < numThreads; i++) {
1:             threads[i].join();
1:         }
1: 
1:         // At least one of the threads failed. Re-throw the first error
1:         // reported.
1:         if (!exceptions.isEmpty()) {
0:             throw (Throwable) exceptions.get(0);
1:         }
1:     }
1: }
============================================================================