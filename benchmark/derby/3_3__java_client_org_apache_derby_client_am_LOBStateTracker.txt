1:f55d30a: /*
2:f55d30a: 
1:f55d30a:    Derby - Class org.apache.derby.client.am.LOBStateTracker
1:f55d30a: 
1:f55d30a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f55d30a:    contributor license agreements.  See the NOTICE file distributed with
1:f55d30a:    this work for additional information regarding copyright ownership.
1:f55d30a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:f55d30a:    (the "License"); you may not use this file except in compliance with
1:f55d30a:    the License.  You may obtain a copy of the License at
1:f55d30a: 
1:f55d30a:       http://www.apache.org/licenses/LICENSE-2.0
1:f55d30a: 
1:f55d30a:    Unless required by applicable law or agreed to in writing, software
1:f55d30a:    distributed under the License is distributed on an "AS IS" BASIS,
1:f55d30a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f55d30a:    See the License for the specific language governing permissions and
1:f55d30a:    limitations under the License.
1:f55d30a: 
1:f55d30a: */
1:f55d30a: package org.apache.derby.client.am;
1:f55d30a: 
1:f55d30a: import java.util.Arrays;
1:f55d30a: 
1:f55d30a: /**
1:3b24898:  * An object that tracks the state of large objects (LOBs) for the current row
1:3b24898:  * in a result set.
1:f55d30a:  * <p>
1:3b24898:  * A LOB's state is either unpublished or published. When a LOB is published, it
1:3b24898:  * means that the end-user has been given a reference to the LOB object. This
1:3b24898:  * implies that the LOB cannot be automatically freed/released when the
1:3b24898:  * result set position changes (i.e. typically {@code rs.next()}), because the
1:3b24898:  * LOB object must be kept valid/alive until the transaction is ended or the
1:3b24898:  * LOB object is explicitly freed.
1:3b24898:  * <p>
1:3b24898:  * This class covers two types of functionality regarding LOBs;
1:f55d30a:  * <ul>
1:3b24898:  *      <li>Keep track of whether a LOB column has been published or not.</li>
1:f55d30a:  *      <li>Release LOB locators on the server.</li>
1:f55d30a:  * </ul>
1:3b24898:  * Both functionalities will be disabled if the server doesn't support locators.
1:caa929f:  * If locators are enabled, they will be freed when {@link #checkCurrentRow} is
1:3b24898:  * called.
1:f55d30a:  * <p>
1:f55d30a:  * The tracker has a notion of current row. The current row is changed by
1:f55d30a:  * calling {@link #checkCurrentRow checkCurrentRow}. The owner of the tracker
1:f55d30a:  * is repsonsible for invoking the method at the correct time, and only when
1:f55d30a:  * the cursor is positioned on a valid data row. The method must be invoked
1:f55d30a:  * before the cursor changes the position. Note that calling the method
1:f55d30a:  * {@link #discardState discardState} makes {@code checkCurrentRow} ignore all
1:f55d30a:  * LOBs on the subsequent call.
1:f55d30a:  */
1:f55d30a: class LOBStateTracker {
1:f55d30a: 
1:3b24898:     /**
1:3b24898:      * Instance to use when there are no LOBs in the result set, or when the
1:3b24898:      * server doesn't support locators.
1:3b24898:      */
1:f55d30a:     public static final LOBStateTracker NO_OP_TRACKER =
1:f55d30a:             new LOBStateTracker(new int[0], new boolean[0], false);
1:f55d30a:     /** 1-based column indexes for the LOBs to track. */
1:f55d30a:     private final int[] columns;
1:3b24898:     /** Tells whether the LOB is Blob or a Clob. */
1:f55d30a:     private final boolean[] isBlob;
1:3b24898:     /** Tells whether the LOB colum has been published for the current row. */
1:3b24898:     private final boolean[] published;
1:f55d30a:     /**
1:f55d30a:      * Tells whether locators shall be released. This will be {@code false} if
1:f55d30a:      * locators are not supported by the server.
1:f55d30a:      */
1:3b24898:     private final boolean doRelease;
1:f55d30a:     /**
1:f55d30a:      * The last locator values seen when releasing. These values are used to
1:f55d30a:      * detect if {@linkplain #checkCurrentRow} is being executed more than once
1:f55d30a:      * on the same row.
1:f55d30a:      */
1:f55d30a:     private final int[] lastLocatorSeen;
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Creates a LOB state tracker for the specified configuration.
1:f55d30a:      *
1:f55d30a:      * @param lobIndexes the 1-based indexes of the LOB columns
1:f55d30a:      * @param isBlob whether the LOB is a Blob or a Clob
1:3b24898:      * @param doRelease whether locators shall be released
1:f55d30a:      * @see #NO_OP_TRACKER
1:f55d30a:      */
1:3b24898:     LOBStateTracker(int[] lobIndexes, boolean[] isBlob, boolean doRelease) {
1:f55d30a:         this.columns = lobIndexes;
1:f55d30a:         this.isBlob = isBlob;
1:3b24898:         this.published = new boolean[columns.length];
1:3b24898:         this.doRelease = doRelease;
1:3b24898:         // Zero is an invalid locator, don't fill with a valid value.
1:f55d30a:         this.lastLocatorSeen = new int[columns.length];
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Checks the current row, updating state and releasing locators on the
1:f55d30a:      * server as required.
1:f55d30a:      * <p>
1:f55d30a:      * This method should only be called once per valid row in the result set.
1:f55d30a:      *
1:f55d30a:      * @param cursor the cursor object to use for releasing the locators
1:f55d30a:      * @throws SqlException if releasing the locators on the server fails
1:f55d30a:      */
1:f55d30a:     void checkCurrentRow(Cursor cursor)
1:f55d30a:             throws SqlException {
1:4c9b831:         // If we are on a delete hole, there are no locators to release, and 
1:4c9b831:         // trying to release them will cause an error. See DERBY-6228.
1:4c9b831:         if (this.doRelease && !cursor.getIsUpdateDeleteHole()) {
1:f55d30a:             CallableLocatorProcedures procs = cursor.getLocatorProcedures();
1:f55d30a:             for (int i=0; i < this.columns.length; i++) {
1:f55d30a:                 // Note the conversion from 1-based to 0-based index when
1:f55d30a:                 // checking if the column has a NULL value.
1:3b24898:                 if (!this.published[i] && !cursor.isNull_[this.columns[i] -1]) {
1:f55d30a:                     // Fetch the locator so we can free it.
1:f55d30a:                     int locator = cursor.locator(this.columns[i]);
1:f55d30a:                     if (locator == this.lastLocatorSeen[i]) {
1:f55d30a:                         // We are being called on the same row twice...
1:f55d30a:                         return;
1:f0f5291:                     } else if (locator == Lob.INVALID_LOCATOR) {
1:f0f5291:                         // The locator is invalid, probably because the
1:f0f5291:                         // database is running in soft upgrade mode and
1:f0f5291:                         // doesn't have the neccessary stored procedures.
1:f0f5291:                         // Don't try to release an invalid locator.
1:f0f5291:                         return;
1:f55d30a:                     }
1:f55d30a:                     this.lastLocatorSeen[i] = locator;
1:f55d30a:                     if (this.isBlob[i]) {
1:f55d30a:                         procs.blobReleaseLocator(locator);
1:f55d30a:                     } else {
1:f55d30a:                         procs.clobReleaseLocator(locator);
1:f55d30a:                     }
1:f55d30a:                 }
1:f55d30a:             }
1:20276f1:             // Reset state for the next row.
1:20276f1:             Arrays.fill(this.published, false);
1:f55d30a:         }
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Discards all recorded dynamic state about LOBs.
1:f55d30a:      * <p>
1:f55d30a:      * Typically called after connection commit or rollback, as those operations
1:f55d30a:      * will release all locators on the server automatically. There is no need
1:f55d30a:      * to release them from the client side in this case.
1:f55d30a:      */
1:f55d30a:     void discardState() {
1:20276f1:         if (this.doRelease) {
1:20276f1:             // Force the state to published for all LOB columns.
1:20276f1:             // This will cause checkCurrentRow to ignore all LOBs on the next
1:20276f1:             // invocation. The method markAsPublished cannot be called before
1:20276f1:             // after checkCurrentRow has been called again.
1:20276f1:             Arrays.fill(this.published, true);
1:20276f1:         }
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:3b24898:      * Marks the specified column of the current row as published, which implies
1:f55d30a:      * that the tracker should not release the associated locator.
1:f55d30a:      * <p>
1:3b24898:      * Columns must be marked as published when a LOB object is created on
1:f55d30a:      * the client, to avoid releasing the corresponding locator too early.
1:f55d30a:      *
1:f55d30a:      * @param index 1-based column index
1:f55d30a:      */
1:3b24898:     void markAsPublished(int index) {
1:20276f1:         if (this.doRelease) {
1:20276f1:             int internalIndex = Arrays.binarySearch(this.columns, index);
1:20276f1:             this.published[internalIndex] = true;
1:20276f1:         }
1:f55d30a:     }
1:f55d30a: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:4c9b831
/////////////////////////////////////////////////////////////////////////
1:         // If we are on a delete hole, there are no locators to release, and 
1:         // trying to release them will cause an error. See DERBY-6228.
1:         if (this.doRelease && !cursor.getIsUpdateDeleteHole()) {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:20276f1
/////////////////////////////////////////////////////////////////////////
1:             // Reset state for the next row.
1:             Arrays.fill(this.published, false);
/////////////////////////////////////////////////////////////////////////
1:         if (this.doRelease) {
1:             // Force the state to published for all LOB columns.
1:             // This will cause checkCurrentRow to ignore all LOBs on the next
1:             // invocation. The method markAsPublished cannot be called before
1:             // after checkCurrentRow has been called again.
1:             Arrays.fill(this.published, true);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (this.doRelease) {
1:             int internalIndex = Arrays.binarySearch(this.columns, index);
1:             this.published[internalIndex] = true;
1:         }
commit:caa929f
/////////////////////////////////////////////////////////////////////////
1:  * If locators are enabled, they will be freed when {@link #checkCurrentRow} is
commit:3b24898
/////////////////////////////////////////////////////////////////////////
1:  * An object that tracks the state of large objects (LOBs) for the current row
1:  * in a result set.
1:  * A LOB's state is either unpublished or published. When a LOB is published, it
1:  * means that the end-user has been given a reference to the LOB object. This
1:  * implies that the LOB cannot be automatically freed/released when the
1:  * result set position changes (i.e. typically {@code rs.next()}), because the
1:  * LOB object must be kept valid/alive until the transaction is ended or the
1:  * LOB object is explicitly freed.
1:  * <p>
1:  * This class covers two types of functionality regarding LOBs;
1:  *      <li>Keep track of whether a LOB column has been published or not.</li>
1:  * Both functionalities will be disabled if the server doesn't support locators.
0:  * If locators are enabled, they will be freed when {@link checkCurrentRow} is
1:  * called.
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Instance to use when there are no LOBs in the result set, or when the
1:      * server doesn't support locators.
1:      */
1:     /** Tells whether the LOB is Blob or a Clob. */
1:     /** Tells whether the LOB colum has been published for the current row. */
1:     private final boolean[] published;
1:     private final boolean doRelease;
/////////////////////////////////////////////////////////////////////////
1:      * @param doRelease whether locators shall be released
1:     LOBStateTracker(int[] lobIndexes, boolean[] isBlob, boolean doRelease) {
1:         this.published = new boolean[columns.length];
1:         this.doRelease = doRelease;
1:         // Zero is an invalid locator, don't fill with a valid value.
/////////////////////////////////////////////////////////////////////////
0:         if (this.doRelease) {
1:                 if (!this.published[i] && !cursor.isNull_[this.columns[i] -1]) {
/////////////////////////////////////////////////////////////////////////
0:         Arrays.fill(this.published, false);
/////////////////////////////////////////////////////////////////////////
0:         // Force the state to published for all LOB columns.
0:         // invocation. The method markAsPublished cannot be called before after
0:         Arrays.fill(this.published, true);
1:      * Marks the specified column of the current row as published, which implies
1:      * Columns must be marked as published when a LOB object is created on
1:     void markAsPublished(int index) {
0:         this.published[internalIndex] = true;
commit:f55d30a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LOBStateTracker
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.am;
1: 
1: import java.util.Arrays;
1: 
1: /**
0:  * An object that tracks the state of large objects (LOBs) in a result set.
1:  * <p>
0:  * This object covers two types of functionality regarding LOBs;
1:  * <ul>
0:  *      <li>Keep track of whether a LOB column has been accessed.</li>
1:  *      <li>Release LOB locators on the server.</li>
1:  * </ul>
0:  * The former functionality is always present in a tracker object. The latter
0:  * functionality may or may not be available. This is decided by whether
0:  * locators are supported by the server or not.
1:  * <p>
1:  * The tracker has a notion of current row. The current row is changed by
1:  * calling {@link #checkCurrentRow checkCurrentRow}. The owner of the tracker
1:  * is repsonsible for invoking the method at the correct time, and only when
1:  * the cursor is positioned on a valid data row. The method must be invoked
1:  * before the cursor changes the position. Note that calling the method
1:  * {@link #discardState discardState} makes {@code checkCurrentRow} ignore all
1:  * LOBs on the subsequent call.
1:  */
1: class LOBStateTracker {
1: 
0:     /** Instance to use when there are no LOBs in the result set. */
1:     public static final LOBStateTracker NO_OP_TRACKER =
1:             new LOBStateTracker(new int[0], new boolean[0], false);
1: 
1:     /** 1-based column indexes for the LOBs to track. */
1:     private final int[] columns;
0:     /** Tells whether a LOB is Blob or a Clob. */
1:     private final boolean[] isBlob;
0:     /** Tells whether a LOB colum has been accessed in the current row.  */
0:     private final boolean[] accessed;
1:     /**
1:      * Tells whether locators shall be released. This will be {@code false} if
1:      * locators are not supported by the server.
1:      */
0:     private final boolean release;
1:     /**
1:      * The last locator values seen when releasing. These values are used to
1:      * detect if {@linkplain #checkCurrentRow} is being executed more than once
1:      * on the same row.
1:      */
1:     private final int[] lastLocatorSeen;
1: 
1:     /**
1:      * Creates a LOB state tracker for the specified configuration.
1:      *
1:      * @param lobIndexes the 1-based indexes of the LOB columns
1:      * @param isBlob whether the LOB is a Blob or a Clob
0:      * @param release whether locators shall be released
1:      * @see #NO_OP_TRACKER
1:      */
0:     LOBStateTracker(int[] lobIndexes, boolean[] isBlob, boolean release) {
1:         this.columns = lobIndexes;
1:         this.isBlob = isBlob;
0:         this.accessed = new boolean[columns.length];
0:         this.release = release;
0:         // Zero is an invalid locator, so don't fill with different value.
1:         this.lastLocatorSeen = new int[columns.length];
1:     }
1: 
1:     /**
1:      * Checks the current row, updating state and releasing locators on the
1:      * server as required.
1:      * <p>
1:      * This method should only be called once per valid row in the result set.
1:      *
1:      * @param cursor the cursor object to use for releasing the locators
1:      * @throws SqlException if releasing the locators on the server fails
1:      */
1:     void checkCurrentRow(Cursor cursor)
1:             throws SqlException {
0:         if (this.release) {
1:             CallableLocatorProcedures procs = cursor.getLocatorProcedures();
1:             for (int i=0; i < this.columns.length; i++) {
1:                 // Note the conversion from 1-based to 0-based index when
1:                 // checking if the column has a NULL value.
0:                 if (!this.accessed[i] && !cursor.isNull_[this.columns[i] -1]) {
1:                     // Fetch the locator so we can free it.
1:                     int locator = cursor.locator(this.columns[i]);
1:                     if (locator == this.lastLocatorSeen[i]) {
1:                         // We are being called on the same row twice...
1:                         return;
1:                     }
1:                     this.lastLocatorSeen[i] = locator;
1:                     if (this.isBlob[i]) {
1:                         procs.blobReleaseLocator(locator);
1:                     } else {
1:                         procs.clobReleaseLocator(locator);
1:                     }
1:                 }
1:             }
1:         }
0:         // Reset state for the next row.
0:         Arrays.fill(this.accessed, false);
1:     }
1: 
1:     /**
1:      * Discards all recorded dynamic state about LOBs.
1:      * <p>
1:      * Typically called after connection commit or rollback, as those operations
1:      * will release all locators on the server automatically. There is no need
1:      * to release them from the client side in this case.
1:      */
1:     void discardState() {
0:         // Force the internal state to accessed for all LOB columns.
0:         // This will cause checkCurrentRow to ignore all LOBs on the next
0:         // invocation. The method markAccessed cannot be called before after
0:         // checkCurrentRow has been called again.
0:         Arrays.fill(this.accessed, true);
1:     }
1: 
1:     /**
0:      * Marks the specified column of the current row as accessed, which implies
1:      * that the tracker should not release the associated locator.
1:      * <p>
0:      * Columns must be marked as accessed when a LOB object is created on
1:      * the client, to avoid releasing the corresponding locator too early.
1:      *
1:      * @param index 1-based column index
1:      */
0:     void markAccessed(int index) {
0:         int internalIndex = Arrays.binarySearch(this.columns, index);
0:         this.accessed[internalIndex] = true;
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f0f5291
/////////////////////////////////////////////////////////////////////////
1:                     } else if (locator == Lob.INVALID_LOCATOR) {
1:                         // The locator is invalid, probably because the
1:                         // database is running in soft upgrade mode and
1:                         // doesn't have the neccessary stored procedures.
1:                         // Don't try to release an invalid locator.
1:                         return;
============================================================================