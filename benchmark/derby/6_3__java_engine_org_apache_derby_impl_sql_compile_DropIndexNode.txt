1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DropIndexNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:4fb136d: import org.apache.derby.iapi.error.StandardException;
1:4fb136d: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
2:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A DropIndexNode is the root of a QueryTree that represents a DROP INDEX
1:eac0369:  * statement.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class DropIndexNode extends DDLStatementNode
1:eac0369: {
1:0061383: 	private ConglomerateDescriptor	cd;
1:0061383: 	private TableDescriptor			td;
1:eac0369: 
1:3bb140c:     DropIndexNode(TableName index, ContextManager cm) {
1:3bb140c:         super(index, cm);
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "DROP INDEX";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this DropIndexNode.  This means looking up the index,
1:eac0369: 	 * verifying it exists and getting the conglomerate number.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		CompilerContext			cc = getCompilerContext();
1:eac0369: 		DataDictionary			dd = getDataDictionary();
1:eac0369: 		SchemaDescriptor		sd;
1:eac0369: 
1:eac0369: 		sd = getSchemaDescriptor();
1:eac0369: 
1:eac0369: 		if (sd.getUUID() != null) 
1:eac0369: 			cd = dd.getConglomerateDescriptor(getRelativeName(), sd, false);
1:eac0369: 
1:eac0369: 		if (cd == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_INDEX_NOT_FOUND, getFullName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Get the table descriptor */
1:eac0369: 		td = getTableDescriptor(cd.getTableID());
1:eac0369: 
1:eac0369: 		/* Drop index is not allowed on an index backing a constraint -
1:eac0369: 		 * user must drop the constraint, which will drop the index.
1:eac0369: 		 * Drop constraint drops the constraint before the index,
1:eac0369: 		 * so it's okay to drop a backing index if we can't find its
1:eac0369: 		 * ConstraintDescriptor.
1:eac0369: 		 */
1:eac0369: 		if (cd.isConstraint())
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor conDesc;
1:eac0369: 			String constraintName;
1:eac0369: 
1:eac0369: 			conDesc = dd.getConstraintDescriptor(td, cd.getUUID());
1:eac0369: 			if (conDesc != null)
1:eac0369: 			{
1:eac0369: 				constraintName = conDesc.getConstraintName();
1:eac0369: 				throw StandardException.newException(SQLState.LANG_CANT_DROP_BACKING_INDEX, 
1:eac0369: 										getFullName(), constraintName);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
1:eac0369: 		cc.createDependency(td);
1:eac0369: 		cc.createDependency(cd);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// inherit generate() method from DDLStatementNode
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return	getGenericConstantActionFactory().getDropIndexConstantAction( getFullName(),
1:eac0369: 											 getRelativeName(),
1:eac0369: 											 getRelativeName(),
1:eac0369: 											 getSchemaDescriptor().getSchemaName(),
1:eac0369: 											 td.getUUID(),
1:eac0369: 											 td.getHeapConglomerateId());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class DropIndexNode extends DDLStatementNode
1:     DropIndexNode(TableName index, ContextManager cm) {
1:         super(index, cm);
0:         setNodeType(C_NodeTypes.DROP_INDEX_NODE);
1:     }
1: 
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4fb136d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:0061383
/////////////////////////////////////////////////////////////////////////
0: public class DropIndexNode extends DDLStatementNode
1: 	private ConglomerateDescriptor	cd;
1: 	private TableDescriptor			td;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DropIndexNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * A DropIndexNode is the root of a QueryTree that represents a DROP INDEX
1:  * statement.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
0: public class DropIndexNode extends DropStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	ConglomerateDescriptor	cd;
0: 	TableDescriptor			td;
1: 
0: 	public String statementToString()
1: 	{
1: 		return "DROP INDEX";
1: 	}
1: 
1: 	/**
1: 	 * Bind this DropIndexNode.  This means looking up the index,
1: 	 * verifying it exists and getting the conglomerate number.
1: 	 *
0: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
1: 		CompilerContext			cc = getCompilerContext();
1: 		DataDictionary			dd = getDataDictionary();
1: 		SchemaDescriptor		sd;
1: 
1: 		sd = getSchemaDescriptor();
1: 
1: 		if (sd.getUUID() != null) 
1: 			cd = dd.getConglomerateDescriptor(getRelativeName(), sd, false);
1: 
1: 		if (cd == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_INDEX_NOT_FOUND, getFullName());
1: 		}
1: 
1: 		/* Get the table descriptor */
1: 		td = getTableDescriptor(cd.getTableID());
1: 
1: 		/* Drop index is not allowed on an index backing a constraint -
1: 		 * user must drop the constraint, which will drop the index.
1: 		 * Drop constraint drops the constraint before the index,
1: 		 * so it's okay to drop a backing index if we can't find its
1: 		 * ConstraintDescriptor.
1: 		 */
1: 		if (cd.isConstraint())
1: 		{
1: 			ConstraintDescriptor conDesc;
1: 			String constraintName;
1: 
1: 			conDesc = dd.getConstraintDescriptor(td, cd.getUUID());
1: 			if (conDesc != null)
1: 			{
1: 				constraintName = conDesc.getConstraintName();
1: 				throw StandardException.newException(SQLState.LANG_CANT_DROP_BACKING_INDEX, 
1: 										getFullName(), constraintName);
1: 			}
1: 		}
1: 
1: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
1: 		cc.createDependency(td);
1: 		cc.createDependency(cd);
1: 
0: 		return this;
1: 	}
1: 
1: 	// inherit generate() method from DDLStatementNode
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return	getGenericConstantActionFactory().getDropIndexConstantAction( getFullName(),
1: 											 getRelativeName(),
1: 											 getRelativeName(),
1: 											 getSchemaDescriptor().getSchemaName(),
1: 											 td.getUUID(),
1: 											 td.getHeapConglomerateId());
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * A DropIndexNode is the root of a QueryTree that represents a DROP INDEX
0:  * statement.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public class DropIndexNode extends DropStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	ConglomerateDescriptor	cd;
0: 	TableDescriptor			td;
0: 
0: 	public String statementToString()
0: 	{
0: 		return "DROP INDEX";
0: 	}
0: 
0: 	/**
0: 	 * Bind this DropIndexNode.  This means looking up the index,
0: 	 * verifying it exists and getting the conglomerate number.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		CompilerContext			cc = getCompilerContext();
0: 		DataDictionary			dd = getDataDictionary();
0: 		SchemaDescriptor		sd;
0: 
0: 		sd = getSchemaDescriptor();
0: 
0: 		if (sd.getUUID() != null) 
0: 			cd = dd.getConglomerateDescriptor(getRelativeName(), sd, false);
0: 
0: 		if (cd == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_INDEX_NOT_FOUND, getFullName());
0: 		}
0: 
0: 		/* Get the table descriptor */
0: 		td = getTableDescriptor(cd.getTableID());
0: 
0: 		/* Drop index is not allowed on an index backing a constraint -
0: 		 * user must drop the constraint, which will drop the index.
0: 		 * Drop constraint drops the constraint before the index,
0: 		 * so it's okay to drop a backing index if we can't find its
0: 		 * ConstraintDescriptor.
0: 		 */
0: 		if (cd.isConstraint())
0: 		{
0: 			ConstraintDescriptor conDesc;
0: 			String constraintName;
0: 
0: 			conDesc = dd.getConstraintDescriptor(td, cd.getUUID());
0: 			if (conDesc != null)
0: 			{
0: 				constraintName = conDesc.getConstraintName();
0: 				throw StandardException.newException(SQLState.LANG_CANT_DROP_BACKING_INDEX, 
0: 										getFullName(), constraintName);
0: 			}
0: 		}
0: 
0: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
0: 		cc.createDependency(td);
0: 		cc.createDependency(cd);
0: 
0: 		return this;
0: 	}
0: 
0: 	// inherit generate() method from DDLStatementNode
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return	getGenericConstantActionFactory().getDropIndexConstantAction( getFullName(),
0: 											 getRelativeName(),
0: 											 getRelativeName(),
0: 											 getSchemaDescriptor().getSchemaName(),
0: 											 td.getUUID(),
0: 											 td.getHeapConglomerateId());
0: 	}
0: }
============================================================================