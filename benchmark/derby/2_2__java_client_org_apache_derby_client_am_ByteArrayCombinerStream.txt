1:956354d: /*
1:956354d:     Derby - Class org.apache.derby.client.am.ByteArrayCombinerStream
3:956354d: 
1:956354d:     Licensed to the Apache Software Foundation (ASF) under one
1:956354d:     or more contributor license agreements.  See the NOTICE file
1:956354d:     distributed with this work for additional information
1:956354d:     regarding copyright ownership.  The ASF licenses this file
1:956354d:     to you under the Apache License, Version 2.0 (the
1:956354d:     "License"); you may not use this file except in compliance
1:956354d:     with the License.  You may obtain a copy of the License at
1:956354d: 
1:956354d:     http://www.apache.org/licenses/LICENSE-2.0
1:956354d: 
1:956354d:     Unless required by applicable law or agreed to in writing,
1:956354d:     software distributed under the License is distributed on an
1:956354d:     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:956354d:     KIND, either express or implied.  See the License for the
1:956354d:     specific language governing permissions and limitations
1:956354d:     under the License.
1:956354d: */
1:956354d: package org.apache.derby.client.am;
1:956354d: 
1:956354d: import java.io.InputStream;
1:956354d: import java.io.IOException;
1:956354d: import java.util.ArrayList;
1:956354d: 
1:956354d: /**
1:956354d:  * A stream whose source is a list of byte arrays.
1:956354d:  *
1:956354d:  * This class was created when first implementing the JDBC 4 length less
1:956354d:  * overloads in the client driver. The reason was missing support for
1:956354d:  * streaming data with unknown length from the client to the server.
1:956354d:  *
1:956354d:  * The purpose of the stream is to avoid having to repeatedly copy data to grow
1:956354d:  * the byte buffer, or doing a single big copy to combine the byte arrays in
1:956354d:  * the end. This is important for the temporary solution, since we must
1:956354d:  * materialize the stream to find the length anyway.
1:ef4a7ba:  *
1:ef4a7ba:  * If there is less data available than the specified length, an exception is
1:ef4a7ba:  * thrown. Available data is determined by the length of the byte arrays, not
1:ef4a7ba:  * the contents of them. A byte array with all 0's is considered valid data.
1:ef4a7ba:  *
1:ef4a7ba:  * Besides from truncation, this stream does not change the underlying data in
1:ef4a7ba:  * any way.
1:956354d:  */
1:956354d: public class ByteArrayCombinerStream
1:956354d:     extends InputStream {
1:ef4a7ba: 
1:956354d:     /** A list of the arrays to combine. */
1:4772c7e:     private final ArrayList<byte[]> arrays;
1:956354d:     /** Length of the stream. */
1:956354d:     private final long specifiedLength;
1:956354d:     /** Global offset into the whole stream. */
1:956354d:     private long gOffset = 0;
1:956354d:     /** Index of the array we are currently reading from. */
1:956354d:     private int arrayIndex = 0;
1:956354d:     /** The array we are currently reading from. */
1:956354d:     private byte[] curArray;
1:956354d:     /** The local offset into the current array. */
1:ef4a7ba:     private int off = 0;
1:ef4a7ba: 
1:956354d:     /**
1:956354d:      * Create a stream whose source is a list of byte arrays.
1:956354d:      *
1:956354d:      * @param arraysIn an <code>ArrayList</code> with references to the source
1:956354d:      *      byte arrays. The references are copied to a new
1:956354d:      *      <code>ArrayList</code> instance.
1:956354d:      * @param length the length of the stream. Never published outside
1:ef4a7ba:      *      this object. Note that the length specified can be shorter
1:ef4a7ba:      *      than the actual number of bytes in the byte arrays.
1:ef4a7ba:      * @throws IllegalArgumentException if there is less data available than
1:ef4a7ba:      *      specified by <code>length</code>, or <code>length</code> is
1:ef4a7ba:      *      negative.
1:956354d:      */
1:4772c7e:     public ByteArrayCombinerStream(ArrayList<byte[]> arraysIn, long length) {
1:ef4a7ba:         // Don't allow negative length.
1:ef4a7ba:         if (length < 0) {
1:ef4a7ba:             throw new IllegalArgumentException("Length cannot be negative: " +
1:ef4a7ba:                     length);
1:ef4a7ba:         }
1:956354d:         this.specifiedLength = length;
1:ef4a7ba:         long tmpRemaining = length;
1:956354d:         if (arraysIn != null && arraysIn.size() > 0) {
1:956354d:             // Copy references to the byte arrays to a new ArrayList.
1:956354d:             int arrayCount = arraysIn.size();
1:956354d:             byte[] tmpArray;
1:4772c7e:             arrays = new ArrayList<byte[]>(arrayCount);
1:956354d:             // Truncate data if there are more bytes then specified.
1:956354d:             // Done to simplify boundary checking in the read-methods.
1:ef4a7ba:             for (int i=0; i < arrayCount && tmpRemaining > 0; i++) {
1:4772c7e:                 tmpArray = arraysIn.get(i);
1:956354d:                 if (tmpRemaining < tmpArray.length) {
1:956354d:                     // Create a new shrunk array.
1:ef4a7ba:                     byte[] shrunkArray =
1:956354d:                         new byte[(int)(tmpRemaining)];
1:ef4a7ba:                     System.arraycopy(tmpArray, 0,
1:956354d:                                      shrunkArray, 0, shrunkArray.length);
1:956354d:                     arrays.add(shrunkArray);
1:ef4a7ba:                     tmpRemaining -= shrunkArray.length;
1:956354d:                     break;
1:956354d:                 } else {
1:956354d:                     // Add the whole array.
1:956354d:                     tmpRemaining -= tmpArray.length;
1:956354d:                     arrays.add(tmpArray);
1:956354d:                 }
1:956354d:             }
1:956354d:             // Set the first array as the current one.
1:956354d:             curArray = nextArray();
1:956354d:         } else {
1:956354d:             // Specify gOffset so available returns 0;
1:956354d:             gOffset = length;
1:956354d:             arrays = null;
1:956354d:         }
1:ef4a7ba:         // If we don't have enough data, throw exception.
1:ef4a7ba:         if (tmpRemaining > 0) {
1:ef4a7ba:             throw new IllegalArgumentException("Not enough data, " + 
1:ef4a7ba:                     tmpRemaining + " bytes short of specified length " +
1:ef4a7ba:                     length);
1:ef4a7ba:         }
1:956354d:     }
1:956354d: 
1:956354d:     /**
1:956354d:      * Read a single byte.
1:956354d:      *
1:956354d:      * @return a byte, or <code>-1</code> if the end-of-stream is reached
1:956354d:      */
1:956354d:     public int read()
1:956354d:             throws IOException {
1:956354d:         if (curArray == null) {
1:956354d:             return -1;
1:956354d:         }
1:956354d:         if (off >= curArray.length) {
1:956354d:             curArray = nextArray();
1:956354d:             if (curArray == null) {
1:956354d:                 return -1;
1:956354d:             }
1:956354d:         }
1:956354d:         gOffset++;
1:956354d:         return curArray[off++];
1:956354d:     }
1:956354d: 
1:956354d:     /**
1:956354d:      * Reads up to len bytes of data from the input stream into an array of
1:956354d:      * bytes.
1:956354d:      * An attempt is made to read as many as <code>len</code> bytes, but
1:956354d:      * a smaller number may be read. The number of bytes actually read
1:956354d:      * is returned as an integer.
1:956354d:      *
1:956354d:      * @param buf the array to copy bytes into
1:956354d:      * @param offset offset into the array
1:956354d:      * @param length the maximum number of bytes to read
1:956354d:      * @return the number of bytes read, or <code>-1</code> if end-of-stream
1:956354d:      *      is reached
1:956354d:      */
1:956354d:     public int read(byte[] buf, int offset, int length)
1:956354d:             throws IOException {
1:956354d:         int read = 0;
1:956354d:         if (curArray == null) {
1:956354d:             return -1;
1:956354d:         }
1:956354d:         if (length <= (curArray.length - off)) {
1:956354d:             System.arraycopy(curArray, off, buf, offset, length);
1:956354d:             off += length;
1:956354d:             gOffset += length;
1:956354d:             read = length;
1:956354d:         } else {
1:956354d:             int toRead = 0;
1:956354d:             while (curArray != null && read < length) {
1:ef4a7ba:                 toRead = Math.min(curArray.length - off, length - read);
1:956354d:                 System.arraycopy(curArray, off, buf, offset + read, toRead);
1:956354d:                 read += toRead;
1:956354d:                 gOffset += toRead;
1:956354d:                 off += toRead;
1:956354d:                 if ( off < curArray.length) {
1:956354d:                     break;
1:956354d:                 }
1:956354d:                 curArray = nextArray();
1:956354d:             }
1:956354d:         }
1:956354d:         return read;
1:956354d:     }
1:956354d: 
1:956354d:     /**
1:956354d:      * Return the number of available bytes.
1:956354d:      * The method assumes the specified length of the stream is correct.
1:956354d:      *
1:956354d:      * @return number of available bytes
1:956354d:      */
1:956354d:     public int available() {
1:956354d:         return (int)(specifiedLength - gOffset);
1:956354d:     }
1:956354d: 
1:956354d:     /**
1:956354d:      * Fetch the next array to read data from.
1:956354d:      * The reference in the <code>ArrayList</code> is cleared when the array
1:956354d:      * is "taken out".
1:956354d:      *
1:956354d:      * @return a <code>byte[]</code>-object, or <code>null</code> if there are
1:956354d:      *      no more arrays
1:956354d:      */
1:956354d:     private byte[] nextArray() {
1:956354d:         if (arrayIndex >= arrays.size()) {
1:956354d:             return null;
1:956354d:         }
1:956354d:         byte[] tmp = (byte[])arrays.get(arrayIndex);
1:956354d:         arrays.set(arrayIndex++, null);
1:956354d:         off = 0;
1:956354d:         return tmp;
1:956354d:     }
1:956354d: } // End of class ByteArrayCombinerStream
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4772c7e
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<byte[]> arrays;
/////////////////////////////////////////////////////////////////////////
1:     public ByteArrayCombinerStream(ArrayList<byte[]> arraysIn, long length) {
/////////////////////////////////////////////////////////////////////////
1:             arrays = new ArrayList<byte[]>(arrayCount);
1:                 tmpArray = arraysIn.get(i);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ef4a7ba
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * If there is less data available than the specified length, an exception is
1:  * thrown. Available data is determined by the length of the byte arrays, not
1:  * the contents of them. A byte array with all 0's is considered valid data.
1:  *
1:  * Besides from truncation, this stream does not change the underlying data in
1:  * any way.
1: 
/////////////////////////////////////////////////////////////////////////
1:     private int off = 0;
1: 
/////////////////////////////////////////////////////////////////////////
1:      *      this object. Note that the length specified can be shorter
1:      *      than the actual number of bytes in the byte arrays.
1:      * @throws IllegalArgumentException if there is less data available than
1:      *      specified by <code>length</code>, or <code>length</code> is
1:      *      negative.
1:         // Don't allow negative length.
1:         if (length < 0) {
1:             throw new IllegalArgumentException("Length cannot be negative: " +
1:                     length);
1:         }
1:         long tmpRemaining = length;
1:             for (int i=0; i < arrayCount && tmpRemaining > 0; i++) {
1:                     byte[] shrunkArray =
1:                     System.arraycopy(tmpArray, 0,
1:                     tmpRemaining -= shrunkArray.length;
/////////////////////////////////////////////////////////////////////////
1:         // If we don't have enough data, throw exception.
1:         if (tmpRemaining > 0) {
1:             throw new IllegalArgumentException("Not enough data, " + 
1:                     tmpRemaining + " bytes short of specified length " +
1:                     length);
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 toRead = Math.min(curArray.length - off, length - read);
commit:956354d
/////////////////////////////////////////////////////////////////////////
1: /*
1:     Derby - Class org.apache.derby.client.am.ByteArrayCombinerStream
1: 
1:     Licensed to the Apache Software Foundation (ASF) under one
1:     or more contributor license agreements.  See the NOTICE file
1:     distributed with this work for additional information
1:     regarding copyright ownership.  The ASF licenses this file
1:     to you under the Apache License, Version 2.0 (the
1:     "License"); you may not use this file except in compliance
1:     with the License.  You may obtain a copy of the License at
1: 
1:     http://www.apache.org/licenses/LICENSE-2.0
1: 
1:     Unless required by applicable law or agreed to in writing,
1:     software distributed under the License is distributed on an
1:     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:     KIND, either express or implied.  See the License for the
1:     specific language governing permissions and limitations
1:     under the License.
1: */
1: package org.apache.derby.client.am;
1: 
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: 
1: /**
1:  * A stream whose source is a list of byte arrays.
1:  *
1:  * This class was created when first implementing the JDBC 4 length less
1:  * overloads in the client driver. The reason was missing support for
1:  * streaming data with unknown length from the client to the server.
1:  *
1:  * The purpose of the stream is to avoid having to repeatedly copy data to grow
1:  * the byte buffer, or doing a single big copy to combine the byte arrays in
1:  * the end. This is important for the temporary solution, since we must
1:  * materialize the stream to find the length anyway.
1:  */
1: public class ByteArrayCombinerStream
1:     extends InputStream {
1:     
1:     /** A list of the arrays to combine. */
0:     private final ArrayList arrays;
1:     /** Length of the stream. */
1:     private final long specifiedLength;
1:     /** Global offset into the whole stream. */
1:     private long gOffset = 0;
1:     /** Index of the array we are currently reading from. */
1:     private int arrayIndex = 0;
1:     /** The array we are currently reading from. */
1:     private byte[] curArray;
1:     /** The local offset into the current array. */
0:     private int off = 0; 
1:     
1:     /**
1:      * Create a stream whose source is a list of byte arrays.
1:      *
1:      * @param arraysIn an <code>ArrayList</code> with references to the source
1:      *      byte arrays. The references are copied to a new
1:      *      <code>ArrayList</code> instance.
1:      * @param length the length of the stream. Never published outside
0:      *      this object
1:      */
0:     public ByteArrayCombinerStream(ArrayList arraysIn, long length) {
1:         this.specifiedLength = length;
1:         if (arraysIn != null && arraysIn.size() > 0) {
1:             // Copy references to the byte arrays to a new ArrayList.
1:             int arrayCount = arraysIn.size();
0:             long tmpRemaining = length;
1:             byte[] tmpArray;
0:             arrays = new ArrayList(arrayCount);
1:             // Truncate data if there are more bytes then specified.
1:             // Done to simplify boundary checking in the read-methods.
0:             for (int i=0; i < arrayCount; i++) {
0:                 tmpArray = (byte[])arraysIn.get(i);
1:                 if (tmpRemaining < tmpArray.length) {
1:                     // Create a new shrunk array.
0:                     byte[] shrunkArray = 
1:                         new byte[(int)(tmpRemaining)];
0:                     System.arraycopy(tmpArray, 0, 
1:                                      shrunkArray, 0, shrunkArray.length);
1:                     arrays.add(shrunkArray);
1:                     break;
1:                 } else {
1:                     // Add the whole array.
1:                     tmpRemaining -= tmpArray.length;
1:                     arrays.add(tmpArray);
1:                 }
1:             }
1:             // Set the first array as the current one.
1:             curArray = nextArray();
1:         } else {
1:             // Specify gOffset so available returns 0;
1:             gOffset = length;
1:             arrays = null;
1:         }
1:     }
1: 
1:     /**
1:      * Read a single byte.
1:      *
1:      * @return a byte, or <code>-1</code> if the end-of-stream is reached
1:      */
1:     public int read()
1:             throws IOException {
1:         if (curArray == null) {
1:             return -1;
1:         }
1:         if (off >= curArray.length) {
1:             curArray = nextArray();
1:             if (curArray == null) {
1:                 return -1;
1:             }
1:         }
1:         gOffset++;
1:         return curArray[off++];
1:     }
1: 
1:     /**
1:      * Reads up to len bytes of data from the input stream into an array of
1:      * bytes.
1:      * An attempt is made to read as many as <code>len</code> bytes, but
1:      * a smaller number may be read. The number of bytes actually read
1:      * is returned as an integer.
1:      *
1:      * @param buf the array to copy bytes into
1:      * @param offset offset into the array
1:      * @param length the maximum number of bytes to read
1:      * @return the number of bytes read, or <code>-1</code> if end-of-stream
1:      *      is reached
1:      */
1:     public int read(byte[] buf, int offset, int length)
1:             throws IOException {
1:         int read = 0;
1:         if (curArray == null) {
1:             return -1;
1:         }
1:         if (length <= (curArray.length - off)) {
1:             System.arraycopy(curArray, off, buf, offset, length);
1:             off += length;
1:             gOffset += length;
1:             read = length;
1:         } else {
1:             int toRead = 0;
1:             while (curArray != null && read < length) {
0:                 toRead = Math.min(curArray.length, length - read);
1:                 System.arraycopy(curArray, off, buf, offset + read, toRead);
1:                 read += toRead;
1:                 gOffset += toRead;
1:                 off += toRead;
1:                 if ( off < curArray.length) {
1:                     break;
1:                 }
1:                 curArray = nextArray();
1:             }
1:         }
1:         return read;
1:     }
1: 
1:     /**
1:      * Return the number of available bytes.
1:      * The method assumes the specified length of the stream is correct.
1:      *
1:      * @return number of available bytes
1:      */
1:     public int available() {
1:         return (int)(specifiedLength - gOffset);
1:     }
1: 
1:     /**
1:      * Fetch the next array to read data from.
1:      * The reference in the <code>ArrayList</code> is cleared when the array
1:      * is "taken out".
1:      *
1:      * @return a <code>byte[]</code>-object, or <code>null</code> if there are
1:      *      no more arrays
1:      */
1:     private byte[] nextArray() {
1:         if (arrayIndex >= arrays.size()) {
1:             return null;
1:         }
1:         byte[] tmp = (byte[])arrays.get(arrayIndex);
1:         arrays.set(arrayIndex++, null);
1:         off = 0;
1:         return tmp;
1:     }
1: } // End of class ByteArrayCombinerStream
============================================================================