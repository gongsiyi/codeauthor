1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
24:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.util;
1:67614ad: 
1:67614ad: import java.io.PrintStream;
1:67614ad: import java.io.PrintWriter;
1:67614ad: import java.io.File;
1:67614ad: import java.io.FileNotFoundException;
1:67614ad: import java.io.IOException;
1:67614ad: 
1:67614ad: import java.sql.Connection;
1:67614ad: import java.sql.DriverManager;
1:67614ad: import java.sql.SQLException;
1:67614ad: import java.sql.SQLWarning;
1:67614ad: import java.sql.Statement;
1:67614ad: import java.sql.PreparedStatement;
1:67614ad: import java.sql.ResultSet;
1:67614ad: import java.sql.ResultSetMetaData;
1:67614ad: import java.sql.Types;
1:67614ad: 
1:67614ad: import java.util.Properties;
1:67614ad: import java.util.Enumeration;
1:67614ad: import java.util.Vector;
1:67614ad: 
1:67614ad: 
1:67614ad: import org.apache.derby.impl.tools.ij.ijException;
1:67614ad: 
1:67614ad: import org.apache.derby.tools.JDBCDisplayUtil;
1:67614ad: 
2:67614ad: /**
1:67614ad:    Show common format for Network Server and Embedded Exceptions
1:67614ad: **/
1:67614ad: 
1:67614ad: public class JDBCTestDisplayUtil extends JDBCDisplayUtil {
1:67614ad: 
1:67614ad: 	/**
1:67614ad: 	   Show common format for Network Server and Embedded Exceptions
1:67614ad: 	   @param out PrintStream to write to
1:67614ad: 	   @param e Throwable to print
1:67614ad: 	*/
1:67614ad: 	
1:67614ad: 	static public void ShowCommonSQLException(PrintStream out, Throwable e) {
1:67614ad: 		if (e == null) return;
1:67614ad: 		
1:67614ad: 		if (e instanceof SQLException)
1:67614ad: 		{
1:67614ad: 			SQLException se = (SQLException)e;
1:67614ad: 			if (isDataConversionException(se))
1:67614ad: 				out.println ("Data Conversion SQLException");
1:67614ad: 			else if (isResultSetClosedException(se))
1:67614ad: 				out.println("Result Set Closed Exception");
1:67614ad: 			else if (isNullSQLStringException(se))
1:67614ad: 				out.println("Null SQL String Exception");
1:67614ad: 			else if (isInvalidParameterException(se))
1:67614ad: 					out.println("Invalid Parameter SQL Exception");
1:67614ad: 			else if (isValidOnScrollCursorsException(se))
1:67614ad: 				out.println("Method Only Valid On Scroll Cursors SQL Exception");
1:67614ad: 			else if (isInvalidMethodReturnException(se))
1:67614ad: 				out.println("Invalid Method Returning a ResultSet or Row Count SQL Exception");
1:67614ad: 			else if (isTableDoesNotExistException(se))
1:67614ad: 					out.println("Table Does Not Exist SQL Exception");
1:67614ad: 			else if (isReturnsInvalidResultSetException(se))
1:67614ad: 				out.println("Invalid Method Returning ResultSet SQL Exception");
1:67614ad: 			else 
1:67614ad: 				ShowSQLException(out, se);
1:67614ad: 		}
1:67614ad: 		else 
1:67614ad: 			ShowException(out, e);
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isDataConversionException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if ((se.getMessage() != null &&
1:67614ad: 			 se.getMessage().indexOf("Invalid data conversion") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("22018")
1:67614ad: 				 || se.getSQLState().equals("22005")
1:67614ad: 				 || se.getSQLState().equals("22007"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isResultSetClosedException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if ((se.getMessage() != null &&
1:67614ad: 			 se.getMessage().indexOf("Invalid operation: result set closed") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("XCL16"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isNullSQLStringException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if ((se.getMessage() != null &&
1:67614ad: 			 se.getMessage().indexOf("Null SQL string passed.") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("XJ067"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static private boolean isInvalidParameterException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if ((se.getMessage() != null &&
1:67614ad: 			 se.getMessage().indexOf("Invalid parameter value") >= 0)
1:67614ad: 			|| (se.getMessage().indexOf("Invalid fetch size") >= 0)
1:67614ad: 			|| (se.getMessage().indexOf("Invalid fetch direction") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("XJ066"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isValidOnScrollCursorsException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if ((se.getMessage() != null &&
1:67614ad: 			 se.getMessage().indexOf("' method is only allowed on scroll cursors.") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("XJ061"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isInvalidMethodReturnException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if (((se.getMessage() != null &&
1:67614ad: 			  se.getMessage().indexOf("executeQuery method cannot be used for update.") >= 0)
1:67614ad: 			 ||  se.getMessage().indexOf("executeUpdate method cannot be used for query.") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("X0Y78")
1:67614ad: 				 || se.getSQLState().equals("X0Y79"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isTableDoesNotExistException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if (se.getSQLState() != null &&
1:67614ad: 			se.getSQLState().equals("42X05"))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static private boolean isReturnsInvalidResultSetException(SQLException se)
1:67614ad: 	{
1:67614ad: 		if ((se.getMessage() != null &&
1:67614ad: 			 se.getMessage().indexOf("cannot be called with a statement that returns a ResultSet.") >= 0)
1:67614ad: 			|| (se.getSQLState() != null &&
1:67614ad: 				(se.getSQLState().equals("X0Y79"))))
1:67614ad: 			return true;
1:67614ad: 		return false;
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.PrintStream;
1: import java.io.PrintWriter;
1: import java.io.File;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.Types;
1: 
1: import java.util.Properties;
1: import java.util.Enumeration;
1: import java.util.Vector;
1: 
1: 
1: import org.apache.derby.impl.tools.ij.ijException;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:    Show common format for Network Server and Embedded Exceptions
1: **/
1: 
1: public class JDBCTestDisplayUtil extends JDBCDisplayUtil {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 	/**
1: 	   Show common format for Network Server and Embedded Exceptions
1: 	   @param out PrintStream to write to
1: 	   @param e Throwable to print
1: 	*/
1: 	
1: 	static public void ShowCommonSQLException(PrintStream out, Throwable e) {
1: 		if (e == null) return;
1: 		
1: 		if (e instanceof SQLException)
1: 		{
1: 			SQLException se = (SQLException)e;
1: 			if (isDataConversionException(se))
1: 				out.println ("Data Conversion SQLException");
1: 			else if (isResultSetClosedException(se))
1: 				out.println("Result Set Closed Exception");
1: 			else if (isNullSQLStringException(se))
1: 				out.println("Null SQL String Exception");
1: 			else if (isInvalidParameterException(se))
1: 					out.println("Invalid Parameter SQL Exception");
1: 			else if (isValidOnScrollCursorsException(se))
1: 				out.println("Method Only Valid On Scroll Cursors SQL Exception");
1: 			else if (isInvalidMethodReturnException(se))
1: 				out.println("Invalid Method Returning a ResultSet or Row Count SQL Exception");
1: 			else if (isTableDoesNotExistException(se))
1: 					out.println("Table Does Not Exist SQL Exception");
1: 			else if (isReturnsInvalidResultSetException(se))
1: 				out.println("Invalid Method Returning ResultSet SQL Exception");
1: 			else 
1: 				ShowSQLException(out, se);
1: 		}
1: 		else 
1: 			ShowException(out, e);
1: 	}
1: 	
1: 	static private boolean isDataConversionException(SQLException se)
1: 	{
1: 		if ((se.getMessage() != null &&
1: 			 se.getMessage().indexOf("Invalid data conversion") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("22018")
1: 				 || se.getSQLState().equals("22005")
1: 				 || se.getSQLState().equals("22007"))))
1: 			return true;
1: 		return false;
1: 	}
1: 	
1: 	static private boolean isResultSetClosedException(SQLException se)
1: 	{
1: 		if ((se.getMessage() != null &&
1: 			 se.getMessage().indexOf("Invalid operation: result set closed") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("XCL16"))))
1: 			return true;
1: 		return false;
1: 	}
1: 	
1: 	static private boolean isNullSQLStringException(SQLException se)
1: 	{
1: 		if ((se.getMessage() != null &&
1: 			 se.getMessage().indexOf("Null SQL string passed.") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("XJ067"))))
1: 			return true;
1: 		return false;
1: 	}
1: 
1: 	static private boolean isInvalidParameterException(SQLException se)
1: 	{
1: 		if ((se.getMessage() != null &&
1: 			 se.getMessage().indexOf("Invalid parameter value") >= 0)
1: 			|| (se.getMessage().indexOf("Invalid fetch size") >= 0)
1: 			|| (se.getMessage().indexOf("Invalid fetch direction") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("XJ066"))))
1: 			return true;
1: 		return false;
1: 	}
1: 	
1: 	static private boolean isValidOnScrollCursorsException(SQLException se)
1: 	{
1: 		if ((se.getMessage() != null &&
1: 			 se.getMessage().indexOf("' method is only allowed on scroll cursors.") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("XJ061"))))
1: 			return true;
1: 		return false;
1: 	}
1: 	
1: 	static private boolean isInvalidMethodReturnException(SQLException se)
1: 	{
1: 		if (((se.getMessage() != null &&
1: 			  se.getMessage().indexOf("executeQuery method cannot be used for update.") >= 0)
1: 			 ||  se.getMessage().indexOf("executeUpdate method cannot be used for query.") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("X0Y78")
1: 				 || se.getSQLState().equals("X0Y79"))))
1: 			return true;
1: 		return false;
1: 	}
1: 	
1: 	static private boolean isTableDoesNotExistException(SQLException se)
1: 	{
1: 		if (se.getSQLState() != null &&
1: 			se.getSQLState().equals("42X05"))
1: 			return true;
1: 		return false;
1: 	}
1: 	
1: 	static private boolean isReturnsInvalidResultSetException(SQLException se)
1: 	{
1: 		if ((se.getMessage() != null &&
1: 			 se.getMessage().indexOf("cannot be called with a statement that returns a ResultSet.") >= 0)
1: 			|| (se.getSQLState() != null &&
1: 				(se.getSQLState().equals("X0Y79"))))
1: 			return true;
1: 		return false;
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.util;
1: 
0: import java.io.PrintStream;
0: import java.io.PrintWriter;
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
1: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.Types;
1: 
0: import java.util.Properties;
0: import java.util.Enumeration;
0: import java.util.Vector;
1: 
1: 
0: import org.apache.derby.impl.tools.ij.ijException;
1: 
0: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
0: /**
0:    Show common format for Network Server and Embedded Exceptions
0: **/
1: 
0: public class JDBCTestDisplayUtil extends JDBCDisplayUtil {
1: 
0: 	/**
0: 	   Show common format for Network Server and Embedded Exceptions
0: 	   @param out PrintStream to write to
0: 	   @param e Throwable to print
0: 	*/
1: 	
0: 	static public void ShowCommonSQLException(PrintStream out, Throwable e) {
0: 		if (e == null) return;
1: 		
0: 		if (e instanceof SQLException)
0: 		{
0: 			SQLException se = (SQLException)e;
0: 			if (isDataConversionException(se))
0: 				out.println ("Data Conversion SQLException");
0: 			else if (isResultSetClosedException(se))
0: 				out.println("Result Set Closed Exception");
0: 			else if (isNullSQLStringException(se))
0: 				out.println("Null SQL String Exception");
0: 			else if (isInvalidParameterException(se))
0: 					out.println("Invalid Parameter SQL Exception");
0: 			else if (isValidOnScrollCursorsException(se))
0: 				out.println("Method Only Valid On Scroll Cursors SQL Exception");
0: 			else if (isInvalidMethodReturnException(se))
0: 				out.println("Invalid Method Returning a ResultSet or Row Count SQL Exception");
0: 			else if (isTableDoesNotExistException(se))
0: 					out.println("Table Does Not Exist SQL Exception");
0: 			else if (isReturnsInvalidResultSetException(se))
0: 				out.println("Invalid Method Returning ResultSet SQL Exception");
0: 			else 
0: 				ShowSQLException(out, se);
0: 		}
0: 		else 
0: 			ShowException(out, e);
0: 	}
1: 	
0: 	static private boolean isDataConversionException(SQLException se)
0: 	{
0: 		if ((se.getMessage() != null &&
0: 			 se.getMessage().indexOf("Invalid data conversion") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("22018")
0: 				 || se.getSQLState().equals("22005")
0: 				 || se.getSQLState().equals("22007"))))
0: 			return true;
0: 		return false;
0: 	}
1: 	
0: 	static private boolean isResultSetClosedException(SQLException se)
0: 	{
0: 		if ((se.getMessage() != null &&
0: 			 se.getMessage().indexOf("Invalid operation: result set closed") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("XCL16"))))
0: 			return true;
0: 		return false;
0: 	}
1: 	
0: 	static private boolean isNullSQLStringException(SQLException se)
0: 	{
0: 		if ((se.getMessage() != null &&
0: 			 se.getMessage().indexOf("Null SQL string passed.") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("XJ067"))))
0: 			return true;
0: 		return false;
0: 	}
1: 
0: 	static private boolean isInvalidParameterException(SQLException se)
0: 	{
0: 		if ((se.getMessage() != null &&
0: 			 se.getMessage().indexOf("Invalid parameter value") >= 0)
0: 			|| (se.getMessage().indexOf("Invalid fetch size") >= 0)
0: 			|| (se.getMessage().indexOf("Invalid fetch direction") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("XJ066"))))
0: 			return true;
0: 		return false;
0: 	}
1: 	
0: 	static private boolean isValidOnScrollCursorsException(SQLException se)
0: 	{
0: 		if ((se.getMessage() != null &&
0: 			 se.getMessage().indexOf("' method is only allowed on scroll cursors.") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("XJ061"))))
0: 			return true;
0: 		return false;
0: 	}
1: 	
0: 	static private boolean isInvalidMethodReturnException(SQLException se)
0: 	{
0: 		if (((se.getMessage() != null &&
0: 			  se.getMessage().indexOf("executeQuery method cannot be used for update.") >= 0)
0: 			 ||  se.getMessage().indexOf("executeUpdate method cannot be used for query.") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("X0Y78")
0: 				 || se.getSQLState().equals("X0Y79"))))
0: 			return true;
0: 		return false;
0: 	}
1: 	
0: 	static private boolean isTableDoesNotExistException(SQLException se)
0: 	{
0: 		if (se.getSQLState() != null &&
0: 			se.getSQLState().equals("42X05"))
0: 			return true;
0: 		return false;
0: 	}
1: 	
0: 	static private boolean isReturnsInvalidResultSetException(SQLException se)
0: 	{
0: 		if ((se.getMessage() != null &&
0: 			 se.getMessage().indexOf("cannot be called with a statement that returns a ResultSet.") >= 0)
0: 			|| (se.getSQLState() != null &&
0: 				(se.getSQLState().equals("X0Y79"))))
0: 			return true;
0: 		return false;
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
============================================================================