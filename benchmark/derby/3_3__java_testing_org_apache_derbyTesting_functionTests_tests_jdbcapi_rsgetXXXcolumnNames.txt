1:dff95a1: /*
1:dff95a1: 
1:dff95a1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.rsgetXXXcolumnNames
1:dff95a1: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:dff95a1: 
1:dff95a1:       http://www.apache.org/licenses/LICENSE-2.0
1:dff95a1: 
1:dff95a1:    Unless required by applicable law or agreed to in writing, software
1:dff95a1:    distributed under the License is distributed on an "AS IS" BASIS,
1:dff95a1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dff95a1:    See the License for the specific language governing permissions and
1:dff95a1:    limitations under the License.
1:dff95a1: 
1:dff95a1:  */
1:5bffaa5: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:5bffaa5: 
1:5bffaa5: 
1:5bffaa5: import java.sql.*;
1:5bffaa5: 
1:5bffaa5: import org.apache.derby.tools.ij;
1:5bffaa5: import org.apache.derby.tools.JDBCDisplayUtil;
1:5bffaa5: 
1:5ff5941: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:5ff5941: 
1:5bffaa5: public class rsgetXXXcolumnNames {
1:5bffaa5: 
1:5bffaa5:     public static void main(String[] args) {
1:5bffaa5:         test1(args);
1:5bffaa5:     }
1:5bffaa5:     
1:5bffaa5:         public static void test1(String []args) {   
1:5bffaa5:                 Connection con;
1:5bffaa5:                 ResultSet rs;
1:5bffaa5:                 Statement stmt = null;
1:5bffaa5:                 PreparedStatement stmt1 = null;
1:5bffaa5: 
1:5bffaa5:                 System.out.println("Test rsgetXXXcolumnNames starting");
1:5bffaa5: 
1:5bffaa5:                 try
1:5bffaa5:                 {
1:5bffaa5:                         // use the ij utility to read the property file and
1:5bffaa5:                         // make the initial connection.
1:5bffaa5:                         ij.getPropertyArg(args);
1:5bffaa5:                         con = ij.startJBMS();
1:5bffaa5: 					
1:5bffaa5: 
1:5bffaa5:                         stmt = con.createStatement(); 
1:5bffaa5: 
1:5ff5941:                         // first cleanup in case we're using useprocess false
1:5ff5941:                         String[] testObjects = {"table caseiscol"};
1:5ff5941:                         TestUtil.cleanUpTest(stmt, testObjects);
1:5ff5941: 
1:5ff5941: 			con.setAutoCommit(false);                        			              
1:5ff5941: 
1:5bffaa5: 			// create a table with two columns, their names differ in they being in different cases.
1:5bffaa5:                         stmt.executeUpdate("create table caseiscol(COL1 int ,\"col1\" int)");
1:5bffaa5: 
1:5bffaa5:    			con.commit();
1:5bffaa5:    			
1:5bffaa5: 			stmt.executeUpdate("insert into caseiscol values (1,346)");
1:5bffaa5: 
1:5bffaa5: 			con.commit();
1:5bffaa5: 
1:5bffaa5:                         // select data from this table for updating
1:5bffaa5: 			stmt1 = con.prepareStatement("select COL1, \"col1\" from caseiscol FOR UPDATE",ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1:5bffaa5: 		        rs = stmt1.executeQuery();
1:5bffaa5: 
1:5bffaa5: 			// Get the data and disply it before updating.
1:5bffaa5:                         System.out.println("Before updation...");
1:5bffaa5: 			while(rs.next()) {
1:5bffaa5: 			   System.out.println("ResultSet is: "+rs.getObject(1));
1:5bffaa5: 			   System.out.println("ResultSet is: "+rs.getObject(2));
1:5bffaa5: 			}
1:5bffaa5:                         rs.close();
1:5bffaa5: 			rs = stmt1.executeQuery();
1:5bffaa5: 			while(rs.next()) {
1:5bffaa5: 			   // Update the two columns with different data.
1:5bffaa5: 			   // Since update is case insensitive only the first column should get updated in both cases.
1:5bffaa5: 			   rs.updateInt("col1",100);
1:5bffaa5: 			   rs.updateInt("COL1",900);
1:5bffaa5: 			   rs.updateRow();
1:5bffaa5: 			}
1:5bffaa5: 			rs.close();
1:5bffaa5: 
1:5bffaa5: 			System.out.println("After update...");
1:5bffaa5: 			rs = stmt1.executeQuery();
1:5bffaa5: 
1:5bffaa5: 			// Display the data after updating. Only the first column should have the updated value.
1:5bffaa5: 			while(rs.next()) {
1:5bffaa5: 			   System.out.println("Column Number 1: "+rs.getInt(1));
1:5bffaa5: 			   System.out.println("Column Number 2: "+rs.getInt(2));
1:5bffaa5: 			}
1:5bffaa5: 			rs.close();
1:5bffaa5: 			rs = stmt1.executeQuery();
1:5bffaa5: 			while(rs.next()) {
1:5bffaa5: 			   // Again checking for case insensitive behaviour here, should display the data in the first column.
1:5bffaa5: 			   System.out.println("Col COL1: "+rs.getInt("COL1"));
1:5bffaa5: 			   System.out.println("Col col1: "+rs.getInt("col1"));
1:5bffaa5: 			}
1:5bffaa5: 			rs.close();
1:d029255:             stmt1.close();
1:d029255:             stmt.close();
1:d029255:             con.commit();
1:d029255:             con.close();
1:5bffaa5:  		} catch(SQLException sqle) {
1:5bffaa5:  		   dumpSQLExceptions(sqle);
1:5bffaa5:  		   sqle.printStackTrace();
1:5bffaa5:  		} catch(Throwable e) {
1:5bffaa5:  		   System.out.println("FAIL -- unexpected exception: "+e.getMessage());
1:5bffaa5:                    e.printStackTrace();
1:5bffaa5: 
1:5bffaa5:  		}
1:5bffaa5:      }
1:5bffaa5:      
1:5bffaa5:      static private void dumpSQLExceptions (SQLException se) {
1:5bffaa5:                 System.out.println("FAIL -- unexpected exception");
1:5bffaa5:                 while (se != null) {
1:5bffaa5:                         System.out.println("SQLSTATE("+se.getSQLState()+"): "+se.getMessage());
1:5bffaa5:                         se = se.getNextException();
1:5bffaa5:                 }
1:5bffaa5:         }
1:5bffaa5: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d029255
/////////////////////////////////////////////////////////////////////////
1:             stmt1.close();
1:             stmt.close();
1:             con.commit();
1:             con.close();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.rsgetXXXcolumnNames
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1:                         // first cleanup in case we're using useprocess false
1:                         String[] testObjects = {"table caseiscol"};
1:                         TestUtil.cleanUpTest(stmt, testObjects);
1: 
1: 			con.setAutoCommit(false);                        			              
1: 
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:5bffaa5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: 
1: import java.sql.*;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: public class rsgetXXXcolumnNames {
1: 
1:     public static void main(String[] args) {
1:         test1(args);
1:     }
1:     
1:         public static void test1(String []args) {   
1:                 Connection con;
1:                 ResultSet rs;
1:                 Statement stmt = null;
1:                 PreparedStatement stmt1 = null;
1: 
1:                 System.out.println("Test rsgetXXXcolumnNames starting");
1: 
1:                 try
1:                 {
1:                         // use the ij utility to read the property file and
1:                         // make the initial connection.
1:                         ij.getPropertyArg(args);
1:                         con = ij.startJBMS();
1: 					
0: 			con.setAutoCommit(false);                        			              
1: 
1:                         stmt = con.createStatement(); 
1: 
1: 			// create a table with two columns, their names differ in they being in different cases.
1:                         stmt.executeUpdate("create table caseiscol(COL1 int ,\"col1\" int)");
1: 
1:    			con.commit();
1:    			
1: 			stmt.executeUpdate("insert into caseiscol values (1,346)");
1: 
1: 			con.commit();
1: 
1:                         // select data from this table for updating
1: 			stmt1 = con.prepareStatement("select COL1, \"col1\" from caseiscol FOR UPDATE",ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1: 		        rs = stmt1.executeQuery();
1: 
1: 			// Get the data and disply it before updating.
1:                         System.out.println("Before updation...");
1: 			while(rs.next()) {
1: 			   System.out.println("ResultSet is: "+rs.getObject(1));
1: 			   System.out.println("ResultSet is: "+rs.getObject(2));
1: 			}
1:                         rs.close();
1: 			rs = stmt1.executeQuery();
1: 			while(rs.next()) {
1: 			   // Update the two columns with different data.
1: 			   // Since update is case insensitive only the first column should get updated in both cases.
1: 			   rs.updateInt("col1",100);
1: 			   rs.updateInt("COL1",900);
1: 			   rs.updateRow();
1: 			}
1: 			rs.close();
1: 
1: 			System.out.println("After update...");
1: 			rs = stmt1.executeQuery();
1: 
1: 			// Display the data after updating. Only the first column should have the updated value.
1: 			while(rs.next()) {
1: 			   System.out.println("Column Number 1: "+rs.getInt(1));
1: 			   System.out.println("Column Number 2: "+rs.getInt(2));
1: 			}
1: 			rs.close();
1: 			rs = stmt1.executeQuery();
1: 			while(rs.next()) {
1: 			   // Again checking for case insensitive behaviour here, should display the data in the first column.
1: 			   System.out.println("Col COL1: "+rs.getInt("COL1"));
1: 			   System.out.println("Col col1: "+rs.getInt("col1"));
1: 			}
1: 			rs.close();
1:  		} catch(SQLException sqle) {
1:  		   dumpSQLExceptions(sqle);
1:  		   sqle.printStackTrace();
1:  		} catch(Throwable e) {
1:  		   System.out.println("FAIL -- unexpected exception: "+e.getMessage());
1:                    e.printStackTrace();
1: 
1:  		}
1:      }
1:      
1:      static private void dumpSQLExceptions (SQLException se) {
1:                 System.out.println("FAIL -- unexpected exception");
1:                 while (se != null) {
1:                         System.out.println("SQLSTATE("+se.getSQLState()+"): "+se.getMessage());
1:                         se = se.getNextException();
1:                 }
1:         }
1: }
============================================================================