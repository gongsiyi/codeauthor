1:af1c18c: /*
1:af1c18c: 
1:af1c18c:    Derby - Class org.apache.derby.impl.sql.compile.AndNoShortCircuitNode
1:af1c18c: 
1:af1c18c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:af1c18c:    contributor license agreements.  See the NOTICE file distributed with
1:af1c18c:    this work for additional information regarding copyright ownership.
1:af1c18c:    The ASF licenses this file to you under the Apache License, Version 2.0
1:af1c18c:    (the "License"); you may not use this file except in compliance with
1:af1c18c:    the License.  You may obtain a copy of the License at
1:af1c18c: 
1:af1c18c:       http://www.apache.org/licenses/LICENSE-2.0
1:af1c18c: 
1:af1c18c:    Unless required by applicable law or agreed to in writing, software
1:af1c18c:    distributed under the License is distributed on an "AS IS" BASIS,
1:af1c18c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:af1c18c:    See the License for the specific language governing permissions and
1:af1c18c:    limitations under the License.
1:af1c18c: 
1:af1c18c:  */
1:af1c18c: 
1:af1c18c: package org.apache.derby.impl.sql.compile;
1:af1c18c: 
1:af1c18c: import org.apache.derby.iapi.error.StandardException;
1:af1c18c: import org.apache.derby.iapi.reference.ClassName;
1:af1c18c: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:af1c18c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:af1c18c: import org.apache.derby.iapi.services.context.ContextManager;
1:af1c18c: 
1:af1c18c: /**
1:af1c18c:  * Used for deferrable CHECK constraint. When we evaluate check constraints for
1:af1c18c:  * a row where at least one constraint is deferrable, we need to know exactly
1:af1c18c:  * which set of constraints violated the checks.  The normal evaluation of
1:af1c18c:  * check constraints is generated as one big (NOT c1) AND (NOT c2) AND ...  AND
1:af1c18c:  * (NOT cn) using short-circuited (McCarthy) boolean evaluation.
1:af1c18c:  * <p>
1:af1c18c:  * This kind of evaluation of the expression can only tell us the first failing
1:af1c18c:  * constraint, so we use full evaluation instead, as embodied in this node.
1:af1c18c:  * See also {@link
1:af1c18c:  * org.apache.derby.iapi.types.BooleanDataValue#throwExceptionIfImmediateAndFalse}.
1:af1c18c:  */
1:af1c18c: class AndNoShortCircuitNode extends AndNode
1:af1c18c: {
1:af1c18c:     /**
1:af1c18c:      * @param leftOperand The left operand of the AND
1:af1c18c:      * @param rightOperand The right operand of the AND
1:af1c18c:      * @param cm context manager
1:af1c18c:      * @throws StandardException standard error policy
1:af1c18c:      */
1:af1c18c:     AndNoShortCircuitNode(
1:af1c18c:             ValueNode leftOperand,
1:af1c18c:             ValueNode rightOperand,
1:af1c18c:             ContextManager cm) throws StandardException {
1:af1c18c:         super(leftOperand, rightOperand, "andnoshortcircuitnode", cm);
1:af1c18c:     }
1:af1c18c: 
1:af1c18c:     /**
1:af1c18c:      * Generate code for no short-circuiting AND operator. Used to evaluate
1:af1c18c:      * check constraints where at least one is deferrable, since we need to
1:af1c18c:      * know exactly which constraint(s) violated the checks.
1:af1c18c:      * @throws StandardException standard error policy
1:af1c18c:      */
1:af1c18c:     @Override
1:af1c18c:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:af1c18c:         throws StandardException
1:af1c18c:     {
1:af1c18c:         /*
1:af1c18c:         ** This generates the following code:
1:af1c18c:         **
1:af1c18c:         **   <leftOperand>.<and/or>(<rightOperand>)
1:af1c18c:         **/
1:af1c18c:         leftOperand.generateExpression(acb, mb);
1:af1c18c:         // stack - left
1:af1c18c:         mb.upCast(ClassName.BooleanDataValue);
1:af1c18c: 
1:af1c18c:         rightOperand.generateExpression(acb, mb);
1:af1c18c:         mb.upCast(ClassName.BooleanDataValue);
1:af1c18c: 
1:af1c18c:         // stack - left, right
1:af1c18c:         mb.callMethod(VMOpcode.INVOKEINTERFACE,
1:af1c18c:                       (String) null,
1:af1c18c:                       "and",
1:af1c18c:                       ClassName.BooleanDataValue,
1:af1c18c:                       1);
1:af1c18c:         // stack - result
1:af1c18c:     }
1:af1c18c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.AndNoShortCircuitNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: /**
1:  * Used for deferrable CHECK constraint. When we evaluate check constraints for
1:  * a row where at least one constraint is deferrable, we need to know exactly
1:  * which set of constraints violated the checks.  The normal evaluation of
1:  * check constraints is generated as one big (NOT c1) AND (NOT c2) AND ...  AND
1:  * (NOT cn) using short-circuited (McCarthy) boolean evaluation.
1:  * <p>
1:  * This kind of evaluation of the expression can only tell us the first failing
1:  * constraint, so we use full evaluation instead, as embodied in this node.
1:  * See also {@link
1:  * org.apache.derby.iapi.types.BooleanDataValue#throwExceptionIfImmediateAndFalse}.
1:  */
1: class AndNoShortCircuitNode extends AndNode
1: {
1:     /**
1:      * @param leftOperand The left operand of the AND
1:      * @param rightOperand The right operand of the AND
1:      * @param cm context manager
1:      * @throws StandardException standard error policy
1:      */
1:     AndNoShortCircuitNode(
1:             ValueNode leftOperand,
1:             ValueNode rightOperand,
1:             ContextManager cm) throws StandardException {
1:         super(leftOperand, rightOperand, "andnoshortcircuitnode", cm);
1:     }
1: 
1:     /**
1:      * Generate code for no short-circuiting AND operator. Used to evaluate
1:      * check constraints where at least one is deferrable, since we need to
1:      * know exactly which constraint(s) violated the checks.
1:      * @throws StandardException standard error policy
1:      */
1:     @Override
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:         throws StandardException
1:     {
1:         /*
1:         ** This generates the following code:
1:         **
1:         **   <leftOperand>.<and/or>(<rightOperand>)
1:         **/
1:         leftOperand.generateExpression(acb, mb);
1:         // stack - left
1:         mb.upCast(ClassName.BooleanDataValue);
1: 
1:         rightOperand.generateExpression(acb, mb);
1:         mb.upCast(ClassName.BooleanDataValue);
1: 
1:         // stack - left, right
1:         mb.callMethod(VMOpcode.INVOKEINTERFACE,
1:                       (String) null,
1:                       "and",
1:                       ClassName.BooleanDataValue,
1:                       1);
1:         // stack - result
1:     }
1: }
============================================================================