1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.T_Authorize
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
27:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.util;
1:67614ad: 
1:67614ad: import java.sql.Connection;
1:67614ad: import java.sql.DriverManager;
1:67614ad: import java.sql.PreparedStatement;
1:67614ad: import java.sql.ResultSet;
1:67614ad: import java.sql.ResultSetMetaData;
1:67614ad: import java.sql.SQLException;
1:67614ad: 
1:67614ad: /** Utility functions for testing authorization. */
1:67614ad: public class T_Authorize
1:67614ad: {
1:67614ad: 
1:67614ad: 	public static void verifyAccessRW(int k)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		verifyAccess(k, false);
1:67614ad: 	}
1:67614ad: 	public static void verifyAccessRO(int k)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		verifyAccess(k, true);
1:67614ad: 	}
1:67614ad: 
2:67614ad: 	/**
1:67614ad: 	  Verify that the database enforces the expected access mode appropriatly.
1:67614ad: 	  This function depends on DDL performed by the authorize.jsql test.
1:67614ad: 	  
1:67614ad: 	  @param k A key for adding/deleting rows in table t.
1:dbed020: 	  @param shouldBeReadOnly true -&gt; the connection should be ReadOnly
1:67614ad: 	  */
1:67614ad: 	private static void verifyAccess(int k, boolean shouldBeReadOnly)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		String qText,sText;
1:67614ad: 		int[] args = new int[2];
1:67614ad: 		int[] qArgs = new int[2];
1:67614ad: 		
1:67614ad: 		Connection c =
1:67614ad: 			DriverManager.getConnection("jdbc:default:connection");
1:67614ad: 
1:67614ad: 		if (c.isReadOnly() != shouldBeReadOnly)
1:67614ad: 			throw new Exception("Connection read-only mode does not match " + shouldBeReadOnly);
1:67614ad: 
1:67614ad: 		sText = "create table t2 (a int)";
1:67614ad: 		verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1:67614ad: 
1:67614ad:         if (!shouldBeReadOnly)
1:67614ad: 		{
1:67614ad: 			sText = "drop table t2";
1:67614ad: 			verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1:67614ad: 		}
1:67614ad: 		
1:67614ad: 		args[0] = k;
1:67614ad: 		sText = "insert into AUTH_TEST.t1 values ?";
1:67614ad: 		verifyExecute(c,sText,1,args,shouldBeReadOnly,1);
1:67614ad: 		qText = "select a from AUTH_TEST.t1 where a = ?";
1:67614ad: 		qArgs[0] = k;
1:67614ad: 		verifyResult(c,qText,1,qArgs,!shouldBeReadOnly,Integer.toString(k));
1:67614ad: 
1:67614ad: 		args[0] = -k;
1:67614ad: 		args[1] = k;
1:67614ad: 		sText = "update AUTH_TEST.t1 set a=? where a=?"; 
1:67614ad: 		verifyExecute(c,sText,2,args,shouldBeReadOnly,1);
1:67614ad: 		qArgs[0] = -k;
1:67614ad: 		verifyResult(c,qText,1,qArgs,!shouldBeReadOnly,Integer.toString(-k));
1:67614ad: 
1:67614ad: 		sText = "delete from AUTH_TEST.t1 where a=?";
1:67614ad: 	 	verifyExecute(c,sText,1,args,shouldBeReadOnly,1);
1:67614ad: 		verifyResult(c,qText,1,qArgs,false,null);
1:67614ad: 
1:67614ad: 		sText = "call sqlj.install_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v1','j1v1.jar', 'extinout/j1v1.jar'), 'APP.J1', 0)";
1:67614ad: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1:67614ad: 		qText = "select filename from sys.sysfiles where filename = 'J1'";
1:67614ad: 		verifyResult(c,qText,0,qArgs,!shouldBeReadOnly,"J1");
1:67614ad: 
1:67614ad: 		if (shouldBeReadOnly)
1:67614ad: 			sText = "call sqlj.replace_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v2','j1v2.jar', 'extinout/j1v2.jar'), 'APP.IMMUTABLE')";
1:67614ad: 		else
1:67614ad: 			sText = "call sqlj.replace_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v2','j1v2.jar', 'extinout/j1v2.jar'), 'APP.J1')";
1:67614ad: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1:67614ad: 		verifyResult(c,qText,0,qArgs,!shouldBeReadOnly,"J1"); //RESOLVE: verify jar content
1:67614ad: 
1:67614ad: 		if (shouldBeReadOnly)
1:67614ad: 			sText = "call sqlj.remove_jar('APP.IMMUTABLE', 0)";
1:67614ad: 		else
1:67614ad: 			sText = "call sqlj.remove_jar('APP.J1', 0)";
1:67614ad: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1:67614ad: 		verifyResult(c,qText,0,qArgs,false,null); 
1:67614ad: 
1:67614ad: 		c.close();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	private static void verifyExecute(Connection c,
1:67614ad: 									  String sText,
1:67614ad: 									  int paramCount,
1:67614ad: 									  int[] args,
1:67614ad: 									  boolean shouldBeReadOnly,
1:67614ad: 									  int expectRowCount)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 
1:67614ad: 		PreparedStatement ps = null;
1:67614ad: 		try {
1:67614ad: 			ps = c.prepareStatement(sText);
1:67614ad: 			for (int ix=0;ix<paramCount; ix++)
1:67614ad: 				ps.setInt(ix+1,args[ix]);
1:67614ad: 			int rc = ps.executeUpdate();
1:67614ad: 			if (shouldBeReadOnly)
1:67614ad: 				throw new Exception("operation incorrectly allowed for read only connection "+sText);
1:67614ad: 			if (rc != expectRowCount)
1:67614ad: 			{
1:67614ad: 				StringBuffer argSb = new StringBuffer();
1:67614ad: 				for (int ix=0;ix<paramCount;ix++)
1:67614ad: 				{
1:67614ad: 					if (ix!=0) argSb.append(",");
1:67614ad: 					argSb.append(args[ix]);
1:67614ad: 				}
1:67614ad: 				throw new Exception("Incorrect row count "+rc+
1:67614ad: 									" for "+sText+
1:67614ad: 									" with args "+argSb);
1:67614ad: 				
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		catch (SQLException sqle) {
1:67614ad: 			String sqlState = sqle.getSQLState();
1:67614ad: 			boolean authorizeError = sqlState.equals("25502") ||
1:67614ad: 									 sqlState.equals("25503") ||
1:67614ad: 									 sqlState.equals("25505");
1:67614ad: 			if (!(shouldBeReadOnly && authorizeError))
1:67614ad: 				throw new Exception("Unexpected exception for "+sText+
1:67614ad: 									" ("+sqle+")");
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		finally {
1:67614ad: 			if (ps != null)
1:67614ad: 				ps.close();
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	private static void verifyResult(Connection c,
1:67614ad: 									 String qText,
1:67614ad: 									 int paramCount,
1:67614ad: 									 int[] args,
1:67614ad: 									 boolean expectResult,
1:67614ad: 									 String expect)
1:67614ad: 		throws Exception
1:67614ad: 	{
1:67614ad: 		PreparedStatement ps = c.prepareStatement(qText);
1:67614ad: 		for (int ix=0;ix<paramCount; ix++)
1:67614ad: 			ps.setInt(ix+1,args[ix]);
1:67614ad: 		ResultSet rs = ps.executeQuery();
1:67614ad: 		boolean isRow = rs.next();
1:67614ad: 		if (expectResult)
1:67614ad: 		{
1:67614ad: 			if (!isRow) throw new Exception("incorrect row count");
1:67614ad: 			ResultSetMetaData rmd = rs.getMetaData();
1:67614ad: 			if (rmd.getColumnCount() != 1) new Exception("bad column count");
1:67614ad: 			String colVal = rs.getString(1);
1:67614ad: 			if (!expect.equals(colVal))
1:67614ad: 				throw new Exception("bad return column "+colVal);
1:67614ad: 			isRow = rs.next();
1:67614ad: 			if (isRow) throw new Exception("incorrect row count");
1:67614ad: 		}
1:67614ad: 		else
1:67614ad: 		{
1:67614ad: 			if (isRow) throw new Exception("incorrect row count");
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	  @param shouldBeReadOnly true -&gt; the connection should be ReadOnly
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
0: 	  @param shouldBeReadOnly true -> the connection should be ReadOnly
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: 
1: /** Utility functions for testing authorization. */
1: public class T_Authorize
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	public static void verifyAccessRW(int k)
1: 		 throws Exception
1: 	{
1: 		verifyAccess(k, false);
1: 	}
1: 	public static void verifyAccessRO(int k)
1: 		 throws Exception
1: 	{
1: 		verifyAccess(k, true);
1: 	}
1: 
1: 	/**
1: 	  Verify that the database enforces the expected access mode appropriatly.
1: 	  This function depends on DDL performed by the authorize.jsql test.
1: 	  
1: 	  @param k A key for adding/deleting rows in table t.
0: 	  @param shortReadOnly true -> the connection should be ReadOnly
1: 	  */
1: 	private static void verifyAccess(int k, boolean shouldBeReadOnly)
1: 		 throws Exception
1: 	{
1: 		String qText,sText;
1: 		int[] args = new int[2];
1: 		int[] qArgs = new int[2];
1: 		
1: 		Connection c =
1: 			DriverManager.getConnection("jdbc:default:connection");
1: 
1: 		if (c.isReadOnly() != shouldBeReadOnly)
1: 			throw new Exception("Connection read-only mode does not match " + shouldBeReadOnly);
1: 
1: 		sText = "create table t2 (a int)";
1: 		verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1: 
1:         if (!shouldBeReadOnly)
1: 		{
1: 			sText = "drop table t2";
1: 			verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1: 		}
1: 		
1: 		args[0] = k;
1: 		sText = "insert into AUTH_TEST.t1 values ?";
1: 		verifyExecute(c,sText,1,args,shouldBeReadOnly,1);
1: 		qText = "select a from AUTH_TEST.t1 where a = ?";
1: 		qArgs[0] = k;
1: 		verifyResult(c,qText,1,qArgs,!shouldBeReadOnly,Integer.toString(k));
1: 
1: 		args[0] = -k;
1: 		args[1] = k;
1: 		sText = "update AUTH_TEST.t1 set a=? where a=?"; 
1: 		verifyExecute(c,sText,2,args,shouldBeReadOnly,1);
1: 		qArgs[0] = -k;
1: 		verifyResult(c,qText,1,qArgs,!shouldBeReadOnly,Integer.toString(-k));
1: 
1: 		sText = "delete from AUTH_TEST.t1 where a=?";
1: 	 	verifyExecute(c,sText,1,args,shouldBeReadOnly,1);
1: 		verifyResult(c,qText,1,qArgs,false,null);
1: 
1: 		sText = "call sqlj.install_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v1','j1v1.jar', 'extinout/j1v1.jar'), 'APP.J1', 0)";
1: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1: 		qText = "select filename from sys.sysfiles where filename = 'J1'";
1: 		verifyResult(c,qText,0,qArgs,!shouldBeReadOnly,"J1");
1: 
1: 		if (shouldBeReadOnly)
1: 			sText = "call sqlj.replace_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v2','j1v2.jar', 'extinout/j1v2.jar'), 'APP.IMMUTABLE')";
1: 		else
1: 			sText = "call sqlj.replace_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v2','j1v2.jar', 'extinout/j1v2.jar'), 'APP.J1')";
1: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1: 		verifyResult(c,qText,0,qArgs,!shouldBeReadOnly,"J1"); //RESOLVE: verify jar content
1: 
1: 		if (shouldBeReadOnly)
1: 			sText = "call sqlj.remove_jar('APP.IMMUTABLE', 0)";
1: 		else
1: 			sText = "call sqlj.remove_jar('APP.J1', 0)";
1: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1: 		verifyResult(c,qText,0,qArgs,false,null); 
1: 
1: 		c.close();
1: 	}
1: 
1: 	private static void verifyExecute(Connection c,
1: 									  String sText,
1: 									  int paramCount,
1: 									  int[] args,
1: 									  boolean shouldBeReadOnly,
1: 									  int expectRowCount)
1: 		 throws Exception
1: 	{
1: 
1: 		PreparedStatement ps = null;
1: 		try {
1: 			ps = c.prepareStatement(sText);
1: 			for (int ix=0;ix<paramCount; ix++)
1: 				ps.setInt(ix+1,args[ix]);
1: 			int rc = ps.executeUpdate();
1: 			if (shouldBeReadOnly)
1: 				throw new Exception("operation incorrectly allowed for read only connection "+sText);
1: 			if (rc != expectRowCount)
1: 			{
1: 				StringBuffer argSb = new StringBuffer();
1: 				for (int ix=0;ix<paramCount;ix++)
1: 				{
1: 					if (ix!=0) argSb.append(",");
1: 					argSb.append(args[ix]);
1: 				}
1: 				throw new Exception("Incorrect row count "+rc+
1: 									" for "+sText+
1: 									" with args "+argSb);
1: 				
1: 			}
1: 		}
1: 
1: 		catch (SQLException sqle) {
1: 			String sqlState = sqle.getSQLState();
1: 			boolean authorizeError = sqlState.equals("25502") ||
1: 									 sqlState.equals("25503") ||
1: 									 sqlState.equals("25505");
1: 			if (!(shouldBeReadOnly && authorizeError))
1: 				throw new Exception("Unexpected exception for "+sText+
1: 									" ("+sqle+")");
1: 		}
1: 
1: 		finally {
1: 			if (ps != null)
1: 				ps.close();
1: 		}
1: 	}
1: 
1: 	private static void verifyResult(Connection c,
1: 									 String qText,
1: 									 int paramCount,
1: 									 int[] args,
1: 									 boolean expectResult,
1: 									 String expect)
1: 		throws Exception
1: 	{
1: 		PreparedStatement ps = c.prepareStatement(qText);
1: 		for (int ix=0;ix<paramCount; ix++)
1: 			ps.setInt(ix+1,args[ix]);
1: 		ResultSet rs = ps.executeQuery();
1: 		boolean isRow = rs.next();
1: 		if (expectResult)
1: 		{
1: 			if (!isRow) throw new Exception("incorrect row count");
1: 			ResultSetMetaData rmd = rs.getMetaData();
1: 			if (rmd.getColumnCount() != 1) new Exception("bad column count");
1: 			String colVal = rs.getString(1);
1: 			if (!expect.equals(colVal))
1: 				throw new Exception("bad return column "+colVal);
1: 			isRow = rs.next();
1: 			if (isRow) throw new Exception("incorrect row count");
1: 		}
1: 		else
1: 		{
1: 			if (isRow) throw new Exception("incorrect row count");
1: 		}
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.T_Authorize
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.util;
1: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
1: 
0: /** Utility functions for testing authorization. */
0: public class T_Authorize
0: {
1: 
0: 	public static void verifyAccessRW(int k)
0: 		 throws Exception
0: 	{
0: 		verifyAccess(k, false);
0: 	}
0: 	public static void verifyAccessRO(int k)
0: 		 throws Exception
0: 	{
0: 		verifyAccess(k, true);
0: 	}
1: 
0: 	/**
0: 	  Verify that the database enforces the expected access mode appropriatly.
0: 	  This function depends on DDL performed by the authorize.jsql test.
1: 	  
0: 	  @param k A key for adding/deleting rows in table t.
0: 	  @param shortReadOnly true -> the connection should be ReadOnly
0: 	  */
0: 	private static void verifyAccess(int k, boolean shouldBeReadOnly)
0: 		 throws Exception
0: 	{
0: 		String qText,sText;
0: 		int[] args = new int[2];
0: 		int[] qArgs = new int[2];
1: 		
0: 		Connection c =
0: 			DriverManager.getConnection("jdbc:default:connection");
1: 
0: 		if (c.isReadOnly() != shouldBeReadOnly)
0: 			throw new Exception("Connection read-only mode does not match " + shouldBeReadOnly);
1: 
0: 		sText = "create table t2 (a int)";
0: 		verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
1: 
0:         if (!shouldBeReadOnly)
0: 		{
0: 			sText = "drop table t2";
0: 			verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
0: 		}
1: 		
0: 		args[0] = k;
0: 		sText = "insert into AUTH_TEST.t1 values ?";
0: 		verifyExecute(c,sText,1,args,shouldBeReadOnly,1);
0: 		qText = "select a from AUTH_TEST.t1 where a = ?";
0: 		qArgs[0] = k;
0: 		verifyResult(c,qText,1,qArgs,!shouldBeReadOnly,Integer.toString(k));
1: 
0: 		args[0] = -k;
0: 		args[1] = k;
0: 		sText = "update AUTH_TEST.t1 set a=? where a=?"; 
0: 		verifyExecute(c,sText,2,args,shouldBeReadOnly,1);
0: 		qArgs[0] = -k;
0: 		verifyResult(c,qText,1,qArgs,!shouldBeReadOnly,Integer.toString(-k));
1: 
0: 		sText = "delete from AUTH_TEST.t1 where a=?";
0: 	 	verifyExecute(c,sText,1,args,shouldBeReadOnly,1);
0: 		verifyResult(c,qText,1,qArgs,false,null);
1: 
0: 		sText = "call sqlj.install_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v1','j1v1.jar', 'extinout/j1v1.jar'), 'APP.J1', 0)";
0: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
0: 		qText = "select filename from sys.sysfiles where filename = 'J1'";
0: 		verifyResult(c,qText,0,qArgs,!shouldBeReadOnly,"J1");
1: 
0: 		if (shouldBeReadOnly)
0: 			sText = "call sqlj.replace_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v2','j1v2.jar', 'extinout/j1v2.jar'), 'APP.IMMUTABLE')";
0: 		else
0: 			sText = "call sqlj.replace_jar(AUTH_TEST.resourcefile('org.apache.derbyTesting.functionTests.testData.v2','j1v2.jar', 'extinout/j1v2.jar'), 'APP.J1')";
0: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
0: 		verifyResult(c,qText,0,qArgs,!shouldBeReadOnly,"J1"); //RESOLVE: verify jar content
1: 
0: 		if (shouldBeReadOnly)
0: 			sText = "call sqlj.remove_jar('APP.IMMUTABLE', 0)";
0: 		else
0: 			sText = "call sqlj.remove_jar('APP.J1', 0)";
0: 	 	verifyExecute(c,sText,0,args,shouldBeReadOnly,0);
0: 		verifyResult(c,qText,0,qArgs,false,null); 
1: 
0: 		c.close();
0: 	}
1: 
0: 	private static void verifyExecute(Connection c,
0: 									  String sText,
0: 									  int paramCount,
0: 									  int[] args,
0: 									  boolean shouldBeReadOnly,
0: 									  int expectRowCount)
0: 		 throws Exception
0: 	{
1: 
0: 		PreparedStatement ps = null;
0: 		try {
0: 			ps = c.prepareStatement(sText);
0: 			for (int ix=0;ix<paramCount; ix++)
0: 				ps.setInt(ix+1,args[ix]);
0: 			int rc = ps.executeUpdate();
0: 			if (shouldBeReadOnly)
0: 				throw new Exception("operation incorrectly allowed for read only connection "+sText);
0: 			if (rc != expectRowCount)
0: 			{
0: 				StringBuffer argSb = new StringBuffer();
0: 				for (int ix=0;ix<paramCount;ix++)
0: 				{
0: 					if (ix!=0) argSb.append(",");
0: 					argSb.append(args[ix]);
0: 				}
0: 				throw new Exception("Incorrect row count "+rc+
0: 									" for "+sText+
0: 									" with args "+argSb);
1: 				
0: 			}
0: 		}
1: 
0: 		catch (SQLException sqle) {
0: 			String sqlState = sqle.getSQLState();
0: 			boolean authorizeError = sqlState.equals("25502") ||
0: 									 sqlState.equals("25503") ||
0: 									 sqlState.equals("25505");
0: 			if (!(shouldBeReadOnly && authorizeError))
0: 				throw new Exception("Unexpected exception for "+sText+
0: 									" ("+sqle+")");
0: 		}
1: 
0: 		finally {
0: 			if (ps != null)
0: 				ps.close();
0: 		}
0: 	}
1: 
0: 	private static void verifyResult(Connection c,
0: 									 String qText,
0: 									 int paramCount,
0: 									 int[] args,
0: 									 boolean expectResult,
0: 									 String expect)
0: 		throws Exception
0: 	{
0: 		PreparedStatement ps = c.prepareStatement(qText);
0: 		for (int ix=0;ix<paramCount; ix++)
0: 			ps.setInt(ix+1,args[ix]);
0: 		ResultSet rs = ps.executeQuery();
0: 		boolean isRow = rs.next();
0: 		if (expectResult)
0: 		{
0: 			if (!isRow) throw new Exception("incorrect row count");
0: 			ResultSetMetaData rmd = rs.getMetaData();
0: 			if (rmd.getColumnCount() != 1) new Exception("bad column count");
0: 			String colVal = rs.getString(1);
0: 			if (!expect.equals(colVal))
0: 				throw new Exception("bad return column "+colVal);
0: 			isRow = rs.next();
0: 			if (isRow) throw new Exception("incorrect row count");
0: 		}
0: 		else
0: 		{
0: 			if (isRow) throw new Exception("incorrect row count");
0: 		}
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.T_Authorize
0: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================