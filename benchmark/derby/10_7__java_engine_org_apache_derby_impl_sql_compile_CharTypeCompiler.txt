2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CharTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
39:eac0369: 
8:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:44fad02: import org.apache.derby.iapi.types.StringDataValue;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:1e9e925: /**
1:eac0369:  * This class implements TypeCompiler for the SQL char datatypes.
5:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class CharTypeCompiler extends BaseTypeCompiler
14:eac0369: {
8:eac0369: 	   /**
1:eac0369:          * Tell whether this type (char) can be converted to the given type.
1:eac0369:          *
1:eac0369: 		 * @see TypeCompiler#convertible
1:eac0369:          */
1:eac0369:         public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1:eac0369:         {
1:30fa79b:             if ( otherType.getBaseTypeId().isAnsiUDT() ) { return false; }
1:30fa79b:             
1:eac0369: 			// LONGVARCHAR can only be converted from  character types
1:07d1108: 			// or CLOB or boolean.
1:d7f7457: 			if (getTypeId().isLongVarcharTypeId())
1:eac0369: 			{
1:07d1108: 				return (otherType.isStringTypeId() || otherType.isBooleanTypeId());
14:eac0369: 			}
1:ba7683c: 
1:eac0369: 			// The double function can convert CHAR and VARCHAR
1:eac0369: 			if (forDataTypeFunction && otherType.isDoubleTypeId())
1:d7f7457: 				return (getTypeId().isStringTypeId());
1:ba7683c: 
1:eac0369: 			// can't CAST to CHAR and VARCHAR from REAL or DOUBLE
1:099e28f: 			// or binary types or XML
1:eac0369: 			// all other types are ok.
1:eac0369: 			if (otherType.isFloatingPointTypeId() || otherType.isBitTypeId() ||
1:099e28f: 				otherType.isBlobTypeId() || otherType.isXMLTypeId())
2:eac0369: 				return false;
1:eac0369: 						
3:eac0369: 			return true;
1:ba7683c:         }
1:eac0369: 	
1:eac0369: 
1:eac0369: 
1:3bb140c: 	/**
1:eac0369: 	 * Tell whether this type (char) is compatible with the given type.
1:44fad02: 	 *
3:eac0369: 	 * @param otherType     The TypeId of the other type.
1:1e9e925: 	 */
1:eac0369: 	public boolean compatible(TypeId otherType)
1:ba7683c: 	{
1:d7f7457: 		return (otherType.isStringTypeId() || (otherType.isDateTimeTimeStampTypeId() && !getTypeId().isLongVarcharTypeId()));
1:eac0369: 		
1:ba7683c: 	}
1:eac0369: 
1:1e9e925:     /**
1:3bb140c:      * Tell whether this type (char) can be stored into from the given type.
1:3bb140c:      *
1:3bb140c:      * @param otherType     The TypeId of the other type.
1:3bb140c:      * @param cf            A ClassFactory
1:3bb140c:      */
1:3bb140c: 
1:3bb140c:     public boolean storable(TypeId otherType, ClassFactory cf)
1:3bb140c:     {
1:3bb140c:         // Same rules as cast except we can't assign from numbers
1:3bb140c:         if (convertible(otherType,false) &&
1:3bb140c:                 !otherType.isBlobTypeId() &&
1:3bb140c:                 !otherType.isNumericTypeId())
1:3bb140c:             return true;
1:3bb140c: 
1:3bb140c:         /*
1:3bb140c:          ** If the other type is user-defined, use the java types to determine
1:3bb140c:          ** assignability.
1:1e9e925:          */
1:3bb140c:         return userTypeStorable(getTypeId(), otherType, cf);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /** @see TypeCompiler#interfaceName */
1:3bb140c:     public String interfaceName()
1:3bb140c:     {
1:3bb140c:         return ClassName.StringDataValue;
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     /**
1:3bb140c:      * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:3bb140c:      */
1:3bb140c: 
1:3bb140c:     public String getCorrespondingPrimitiveTypeName()
1:3bb140c:     {
1:3bb140c:         /* Only numerics and booleans get mapped to Java primitives */
1:3bb140c:         return "java.lang.String";
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     /**
1:3bb140c:      * @see TypeCompiler#getCastToCharWidth
1:3bb140c:      */
1:3bb140c:     public int getCastToCharWidth(DataTypeDescriptor dts)
1:3bb140c:     {
1:3bb140c:         return dts.getMaximumWidth();
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     String nullMethodName()
1:3bb140c:     {
1:3bb140c:         int formatId = getStoredFormatIdFromTypeId();
1:3bb140c:         switch (formatId)
1:ba7683c:         {
1:3bb140c:             case StoredFormatIds.CHAR_TYPE_ID:
1:3bb140c:                 return "getNullChar";
1:eac0369: 
1:3bb140c:             case StoredFormatIds.LONGVARCHAR_TYPE_ID:
1:3bb140c:                 return "getNullLongvarchar";
1:eac0369: 
1:3bb140c:             case StoredFormatIds.VARCHAR_TYPE_ID:
1:3bb140c:                 return "getNullVarchar";
1:92268ac: 
1:3bb140c:             default:
1:3bb140c:                 if (SanityManager.DEBUG)
1:eac0369:                 {
1:3bb140c:                     SanityManager.THROWASSERT(
1:3bb140c:                         "unexpected formatId in nullMethodName() - " +
1:3bb140c:                         formatId);
1:eac0369:                 }
1:3bb140c:                 return null;
1:3bb140c:         }
1:eac0369:     }
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * Push the collation type if it is not COLLATION_TYPE_UCS_BASIC.
1:3bb140c:      *
1:3bb140c:      * @param collationType Collation type of character values.
1:3bb140c:      * @return {@code true} collationType will be pushed, {@code
1:3bb140c:      *         false} collationType will be ignored.
1:3bb140c:      */
1:3bb140c:     @Override
1:3bb140c:     boolean pushCollationForDataValue(int collationType)
1:3bb140c:     {
1:3bb140c:         return collationType != StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     @Override
1:3bb140c:     String dataValueMethodName()
1:3bb140c:     {
1:3bb140c:         int formatId = getStoredFormatIdFromTypeId();
1:3bb140c:         switch (formatId)
1:44fad02:         {
1:3bb140c:             case StoredFormatIds.CHAR_TYPE_ID:
1:3bb140c:                 return "getCharDataValue";
1:3bb140c: 
1:3bb140c:             case StoredFormatIds.LONGVARCHAR_TYPE_ID:
1:3bb140c:                 return "getLongvarcharDataValue";
1:3bb140c: 
1:3bb140c:             case StoredFormatIds.VARCHAR_TYPE_ID:
1:3bb140c:                 return "getVarcharDataValue";
1:3bb140c: 
1:3bb140c:             default:
1:3bb140c:                 if (SanityManager.DEBUG)
1:eac0369:                 {
1:3bb140c:                     SanityManager.THROWASSERT(
1:3bb140c:                         "unexpected formatId in dataValueMethodName() - " +
1:3bb140c:                         formatId);
1:3bb140c:                 }
1:3bb140c:                 return null;
1:44fad02:         }
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tell whether this type (char) can be stored into from the given type.
1:      *
1:      * @param otherType     The TypeId of the other type.
1:      * @param cf            A ClassFactory
1:      */
1: 
1:     public boolean storable(TypeId otherType, ClassFactory cf)
1:     {
1:         // Same rules as cast except we can't assign from numbers
1:         if (convertible(otherType,false) &&
1:                 !otherType.isBlobTypeId() &&
1:                 !otherType.isNumericTypeId())
1:             return true;
1: 
1:         /*
1:          ** If the other type is user-defined, use the java types to determine
1:          ** assignability.
1:         return userTypeStorable(getTypeId(), otherType, cf);
1:     }
1:     /** @see TypeCompiler#interfaceName */
1:     public String interfaceName()
1:     {
1:         return ClassName.StringDataValue;
1:     }
1: 
1:     /**
1:      * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:      */
1: 
1:     public String getCorrespondingPrimitiveTypeName()
1:     {
1:         /* Only numerics and booleans get mapped to Java primitives */
1:         return "java.lang.String";
1:     }
1: 
1:     /**
1:      * @see TypeCompiler#getCastToCharWidth
1:      */
1:     public int getCastToCharWidth(DataTypeDescriptor dts)
1:     {
1:         return dts.getMaximumWidth();
1:     }
1: 
1:     String nullMethodName()
1:     {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         switch (formatId)
1:             case StoredFormatIds.CHAR_TYPE_ID:
1:                 return "getNullChar";
1:             case StoredFormatIds.LONGVARCHAR_TYPE_ID:
1:                 return "getNullLongvarchar";
1:             case StoredFormatIds.VARCHAR_TYPE_ID:
1:                 return "getNullVarchar";
1:             default:
1:                 if (SanityManager.DEBUG)
1:                     SanityManager.THROWASSERT(
1:                         "unexpected formatId in nullMethodName() - " +
1:                         formatId);
1:                 return null;
1:     }
1:     /**
1:      * Push the collation type if it is not COLLATION_TYPE_UCS_BASIC.
1:      *
1:      * @param collationType Collation type of character values.
1:      * @return {@code true} collationType will be pushed, {@code
1:      *         false} collationType will be ignored.
1:      */
1:     @Override
1:     boolean pushCollationForDataValue(int collationType)
1:     {
1:         return collationType != StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:     }
1:     @Override
1:     String dataValueMethodName()
1:     {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         switch (formatId)
1:             case StoredFormatIds.CHAR_TYPE_ID:
1:                 return "getCharDataValue";
1: 
1:             case StoredFormatIds.LONGVARCHAR_TYPE_ID:
1:                 return "getLongvarcharDataValue";
1: 
1:             case StoredFormatIds.VARCHAR_TYPE_ID:
1:                 return "getVarcharDataValue";
1: 
1:             default:
1:                 if (SanityManager.DEBUG)
1:                     SanityManager.THROWASSERT(
1:                         "unexpected formatId in dataValueMethodName() - " +
1:                         formatId);
1:                 return null;
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0:                         case StoredFormatIds.PASSWORD_TYPE_ID:
0:                                 return "getNullPassword";
1: 
commit:30fa79b
/////////////////////////////////////////////////////////////////////////
1:             if ( otherType.getBaseTypeId().isAnsiUDT() ) { return false; }
1:             
commit:07d1108
/////////////////////////////////////////////////////////////////////////
1: 			// or CLOB or boolean.
1: 				return (otherType.isStringTypeId() || otherType.isBooleanTypeId());
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:111785f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:869152f
/////////////////////////////////////////////////////////////////////////
0:     	/** @see TypeCompiler#generateDataValue(ExpressionClassBuilder, MethodBuilder, int, String, LocalField) */
0:     	public void generateDataValue(
0:     			ExpressionClassBuilder eb,
0: 				MethodBuilder mb, int collationType,
0:     		super.generateDataValue(eb, mb, collationType, className, field);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType, className);
0:     	/** @see TypeCompiler#generateNull(ExpressionClassBuilder, MethodBuilder, int, String)*/
0:     	public void generateNull(
0:     			ExpressionClassBuilder eb,
0: 				MethodBuilder mb, int collationType, 
0:     		super.generateNull(eb, mb, collationType, className);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType, className);
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
/////////////////////////////////////////////////////////////////////////
0:     	/** @see TypeCompiler#generateDataValue(MethodBuilder, int, String, LocalField) */
0:     	public void generateDataValue(MethodBuilder mb, int collationType,
0:     			String className, LocalField field)
1:     	{
0:     		super.generateDataValue(mb, collationType, className, field);
0:     		generateCollationSensitiveDataValue(mb, collationType, className);
1:     	}
1: 
0:     	/** @see TypeCompiler#generateNull(MethodBuilder, int, String) */
0:     	public void generateNull(MethodBuilder mb, int collationType, 
0:     			String className)
1:     	{
0:     		super.generateNull(mb, collationType, className);
0:     		generateCollationSensitiveDataValue(mb, collationType, className);
1:     	}
1: 
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a1aaa63
/////////////////////////////////////////////////////////////////////////
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
0:         String nullMethodName()
/////////////////////////////////////////////////////////////////////////
0:          * Push the collation type if it is not COLLATION_TYPE_UCS_BASIC.
1:          * 
0:          * @param collationType Collation type of character values.
0:          * @return true collationType will be pushed, false collationType will be ignored.
0:         boolean pushCollationForDataValue(int collationType)
1:         {
0:             return collationType != StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:         }
/////////////////////////////////////////////////////////////////////////
0:         String dataValueMethodName()
commit:1e9e925
/////////////////////////////////////////////////////////////////////////
1:         /**
0:          * Augment the parent's method by ensuring the generated
0:          * value is setup for collation if required.
0:          * @see BaseTypeCompiler#generateCollationSensitiveDataValue(ExpressionClassBuilder, MethodBuilder, int)
1:          */
0:      	public void generateDataValue(
/////////////////////////////////////////////////////////////////////////
1:         /**
0:          * Augment the parent's method by ensuring the generated
0:          * value is setup for collation if required.
0:          * @see BaseTypeCompiler#generateCollationSensitiveDataValue(ExpressionClassBuilder, MethodBuilder, int)
1:          */
commit:a57c280
/////////////////////////////////////////////////////////////////////////
0:     			LocalField field)
0:     		super.generateDataValue(eb, mb, collationType, field);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType);
0: 				MethodBuilder mb, int collationType)
0:     		super.generateNull(eb, mb, collationType);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType);
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
0: 			if (getTypeId().isLongConcatableTypeId() ||
/////////////////////////////////////////////////////////////////////////
0: 			return (otherType.userType() && otherTC.comparable(getTypeId(),
/////////////////////////////////////////////////////////////////////////
1: 			if (getTypeId().isLongVarcharTypeId())
1: 				return (getTypeId().isStringTypeId());
/////////////////////////////////////////////////////////////////////////
1: 		return (otherType.isStringTypeId() || (otherType.isDateTimeTimeStampTypeId() && !getTypeId().isLongVarcharTypeId()));
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CharTypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.util.StringUtil;
1: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
1: /**
1:  * This class implements TypeCompiler for the SQL char datatypes.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public final class CharTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:         /**
0:          * Tell whether this type (char) can be compared to the given type.
0: 		 * Long types can not be compared.
0: 		 * VARCHAR AND CHAR can be compared to CHAR/VARCHAR/DATE/TIME/TIMESTAMP
1: 		 *
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
1: 		{
1: 				
0: 			// Long Types cannot be compared
0: 			if (correspondingTypeId.isLongConcatableTypeId() ||
0: 				otherType.isLongConcatableTypeId())
1: 				return false;
1: 			
0: 			// CHAR and VARCHAR can compare to Strings or DATE/TIME/TIMESTAMP
0: 			if((otherType.isStringTypeId() ||
0: 				otherType.isDateTimeTimeStampTypeID() ||
0: 				otherType.isBooleanTypeId()))
1: 				return true;
1: 			
1: 			
0: 			TypeCompiler otherTC = getTypeCompiler(otherType);
0: 			return (otherType.userType() && otherTC.comparable(correspondingTypeId,
0: 															   forEquals, cf));
1: 		}
1: 	
1: 	
1: 	   /**
1:          * Tell whether this type (char) can be converted to the given type.
1:          *
1: 		 * @see TypeCompiler#convertible
1:          */
1:         public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1:         {
1: 			// LONGVARCHAR can only be converted from  character types
0: 			// or CLOB.
0: 			if (correspondingTypeId.isLongVarcharTypeId())
1: 			{
0: 				return (otherType.isStringTypeId());
1: 			}
1: 
1: 			// The double function can convert CHAR and VARCHAR
1: 			if (forDataTypeFunction && otherType.isDoubleTypeId())
0: 				return (correspondingTypeId.isStringTypeId());
1: 
1: 			// can't CAST to CHAR and VARCHAR from REAL or DOUBLE
0: 			// or binary types
1: 			// all other types are ok.
1: 			if (otherType.isFloatingPointTypeId() || otherType.isBitTypeId() ||
0: 				otherType.isBlobTypeId())
1: 				return false;
1: 						
1: 			return true;
1:         }
1: 	
1: 
1: 
1: 	/**
1: 	 * Tell whether this type (char) is compatible with the given type.
1: 	 *
1: 	 * @param otherType     The TypeId of the other type.
1: 	 */
1: 	public boolean compatible(TypeId otherType)
1: 	{
0: 		return (otherType.isStringTypeId() || (otherType.isDateTimeTimeStampTypeId() && !correspondingTypeId.isLongVarcharTypeId()));
1: 		
1: 	}
1: 
1:         /**
0:          * Tell whether this type (char) can be stored into from the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
0:          * @param cf            A ClassFactory
1:          */
1: 
0:         public boolean storable(TypeId otherType, ClassFactory cf)
1:         {
0: 				// Same rules as cast except we can't assign from numbers
0: 				if (convertible(otherType,false) && 
0: 					!otherType.isBlobTypeId() &&
0: 					!otherType.isNumericTypeId())
1: 						return true;
1: 
1:                 /*
0:                 ** If the other type is user-defined, use the java types to determine
0:                 ** assignability.
1:                 */
0:                 return userTypeStorable(getTypeId(), otherType, cf);
1:         }
1: 
0:         /** @see TypeCompiler#interfaceName */
0:         public String interfaceName()
1:         {
0:                 return ClassName.StringDataValue;
1:         }
1: 
1:         /**
0:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:          */
1: 
0:         public String getCorrespondingPrimitiveTypeName()
1:         {
0:                 /* Only numerics and booleans get mapped to Java primitives */
0:                 return "java.lang.String";
1:         }
1: 
1:         /**
0:          * @see TypeCompiler#getCastToCharWidth
1:          */
0:         public int getCastToCharWidth(DataTypeDescriptor dts)
1:         {
0:                 return dts.getMaximumWidth();
1:         }
1: 
0:         /** @see TypeCompiler#getMatchingNationalCharTypeName */
0:         public String getMatchingNationalCharTypeName()
1:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
1:                 {
0:                         case StoredFormatIds.CHAR_TYPE_ID:
0:                         case StoredFormatIds.NATIONAL_CHAR_TYPE_ID:
0:                                 return TypeId.NATIONAL_CHAR_NAME;
1: 
0:                         case StoredFormatIds.LONGVARCHAR_TYPE_ID:
0:                         case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID:
0:                                 return TypeId.NATIONAL_LONGVARCHAR_NAME;
1: 
0:                         case StoredFormatIds.VARCHAR_TYPE_ID:
0:                         case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID:
0:                                 return TypeId.NATIONAL_VARCHAR_NAME;
1: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
1:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in getMatchingNationalCharTypeName() - " + formatId);
1:                                 }
0:                                 return null;
1:                 }
1:         }
1: 
1: 
0:         protected String nullMethodName()
1:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
1:                 {
0:                         case StoredFormatIds.CHAR_TYPE_ID:
0:                                 return "getNullChar";
1: 
0:                         case StoredFormatIds.LONGVARCHAR_TYPE_ID:
0:                                 return "getNullLongvarchar";
1: 
0:                         case StoredFormatIds.NATIONAL_CHAR_TYPE_ID:
0:                                 return "getNullNationalChar";
1: 
0:                         case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID:
0:                                 return "getNullNationalLongvarchar";
1: 
0:                         case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID:
0:                                 return "getNullNationalVarchar";
1: 
0:                         case StoredFormatIds.VARCHAR_TYPE_ID:
0:                                 return "getNullVarchar";
1: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
1:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in nullMethodName() - " + formatId);
1:                                 }
0:                                 return null;
1:                 }
1:         }
1: 
0:         protected String dataValueMethodName()
1:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
1:                 {
0:                         case StoredFormatIds.CHAR_TYPE_ID:
0:                                 return "getCharDataValue";
1: 
0:                         case StoredFormatIds.LONGVARCHAR_TYPE_ID:
0:                                 return "getLongvarcharDataValue";
1: 
0:                         case StoredFormatIds.NATIONAL_CHAR_TYPE_ID:
0:                                 return "getNationalCharDataValue";
1: 
0:                         case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID:
0:                                 return "getNationalLongvarcharDataValue";
1: 
0:                         case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID:
0:                                 return "getNationalVarcharDataValue";
1: 
0:                         case StoredFormatIds.VARCHAR_TYPE_ID:
0:                                 return "getVarcharDataValue";
1: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
1:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in dataValueMethodName() - " + formatId);
1:                                 }
0:                                 return null;
1:                 }
1:         }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
1: 			// or binary types or XML
1: 				otherType.isBlobTypeId() || otherType.isXMLTypeId())
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
0: 
0: /**
0:  * This class implements TypeCompiler for the SQL char datatypes.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public final class CharTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:         /**
0:          * Tell whether this type (char) can be compared to the given type.
0: 		 * Long types can not be compared.
0: 		 * VARCHAR AND CHAR can be compared to CHAR/VARCHAR/DATE/TIME/TIMESTAMP
0: 		 *
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
0: 		{
0: 				
0: 			// Long Types cannot be compared
0: 			if (correspondingTypeId.isLongConcatableTypeId() ||
0: 				otherType.isLongConcatableTypeId())
0: 				return false;
0: 			
0: 			// CHAR and VARCHAR can compare to Strings or DATE/TIME/TIMESTAMP
0: 			if((otherType.isStringTypeId() ||
0: 				otherType.isDateTimeTimeStampTypeID() ||
0: 				otherType.isBooleanTypeId()))
0: 				return true;
0: 			
0: 			
0: 			TypeCompiler otherTC = getTypeCompiler(otherType);
0: 			return (otherType.userType() && otherTC.comparable(correspondingTypeId,
0: 															   forEquals, cf));
0: 		}
0: 	
0: 	
0: 	   /**
0:          * Tell whether this type (char) can be converted to the given type.
0:          *
0: 		 * @see TypeCompiler#convertible
0:          */
0:         public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
0:         {
0: 			// LONGVARCHAR can only be converted from  character types
0: 			// or CLOB.
0: 			if (correspondingTypeId.isLongVarcharTypeId())
0: 			{
0: 				return (otherType.isStringTypeId());
0: 			}
0: 
0: 			// The double function can convert CHAR and VARCHAR
0: 			if (forDataTypeFunction && otherType.isDoubleTypeId())
0: 				return (correspondingTypeId.isStringTypeId());
0: 
0: 			// can't CAST to CHAR and VARCHAR from REAL or DOUBLE
0: 			// or binary types
0: 			// all other types are ok.
0: 			if (otherType.isFloatingPointTypeId() || otherType.isBitTypeId() ||
0: 				otherType.isBlobTypeId())
0: 				return false;
0: 						
0: 			return true;
0:         }
0: 	
0: 
0: 
0: 	/**
0: 	 * Tell whether this type (char) is compatible with the given type.
0: 	 *
0: 	 * @param otherType     The TypeId of the other type.
0: 	 */
0: 	public boolean compatible(TypeId otherType)
0: 	{
0: 		return (otherType.isStringTypeId() || (otherType.isDateTimeTimeStampTypeId() && !correspondingTypeId.isLongVarcharTypeId()));
0: 		
0: 	}
0: 
0:         /**
0:          * Tell whether this type (char) can be stored into from the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          * @param cf            A ClassFactory
0:          */
0: 
0:         public boolean storable(TypeId otherType, ClassFactory cf)
0:         {
0: 				// Same rules as cast except we can't assign from numbers
0: 				if (convertible(otherType,false) && 
0: 					!otherType.isBlobTypeId() &&
0: 					!otherType.isNumericTypeId())
0: 						return true;
0: 
0:                 /*
0:                 ** If the other type is user-defined, use the java types to determine
0:                 ** assignability.
0:                 */
0:                 return userTypeStorable(getTypeId(), otherType, cf);
0:         }
0: 
0:         /** @see TypeCompiler#interfaceName */
0:         public String interfaceName()
0:         {
0:                 return ClassName.StringDataValue;
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0:          */
0: 
0:         public String getCorrespondingPrimitiveTypeName()
0:         {
0:                 /* Only numerics and booleans get mapped to Java primitives */
0:                 return "java.lang.String";
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCastToCharWidth
0:          */
0:         public int getCastToCharWidth(DataTypeDescriptor dts)
0:         {
0:                 return dts.getMaximumWidth();
0:         }
0: 
0:         /** @see TypeCompiler#getMatchingNationalCharTypeName */
0:         public String getMatchingNationalCharTypeName()
0:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
0:                 {
0:                         case StoredFormatIds.CHAR_TYPE_ID:
0:                         case StoredFormatIds.NATIONAL_CHAR_TYPE_ID:
0:                                 return TypeId.NATIONAL_CHAR_NAME;
0: 
0:                         case StoredFormatIds.LONGVARCHAR_TYPE_ID:
0:                         case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID:
0:                                 return TypeId.NATIONAL_LONGVARCHAR_NAME;
0: 
0:                         case StoredFormatIds.VARCHAR_TYPE_ID:
0:                         case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID:
0:                                 return TypeId.NATIONAL_VARCHAR_NAME;
0: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
0:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in getMatchingNationalCharTypeName() - " + formatId);
0:                                 }
0:                                 return null;
0:                 }
0:         }
0: 
0: 
0:         protected String nullMethodName()
0:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
0:                 {
0:                         case StoredFormatIds.CHAR_TYPE_ID:
0:                                 return "getNullChar";
0: 
0:                         case StoredFormatIds.LONGVARCHAR_TYPE_ID:
0:                                 return "getNullLongvarchar";
0: 
0:                         case StoredFormatIds.NATIONAL_CHAR_TYPE_ID:
0:                                 return "getNullNationalChar";
0: 
0:                         case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID:
0:                                 return "getNullNationalLongvarchar";
0: 
0:                         case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID:
0:                                 return "getNullNationalVarchar";
0: 
0:                         case StoredFormatIds.VARCHAR_TYPE_ID:
0:                                 return "getNullVarchar";
0: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
0:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in nullMethodName() - " + formatId);
0:                                 }
0:                                 return null;
0:                 }
0:         }
0: 
0:         protected String dataValueMethodName()
0:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
0:                 {
0:                         case StoredFormatIds.CHAR_TYPE_ID:
0:                                 return "getCharDataValue";
0: 
0:                         case StoredFormatIds.LONGVARCHAR_TYPE_ID:
0:                                 return "getLongvarcharDataValue";
0: 
0:                         case StoredFormatIds.NATIONAL_CHAR_TYPE_ID:
0:                                 return "getNationalCharDataValue";
0: 
0:                         case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID:
0:                                 return "getNationalLongvarcharDataValue";
0: 
0:                         case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID:
0:                                 return "getNationalVarcharDataValue";
0: 
0:                         case StoredFormatIds.VARCHAR_TYPE_ID:
0:                                 return "getVarcharDataValue";
0: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
0:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in dataValueMethodName() - " + formatId);
0:                                 }
0:                                 return null;
0:                 }
0:         }
0: }
============================================================================