1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.GenericExecutionContext
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
9:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:6c000e8: import org.apache.derby.iapi.error.ExceptionSeverity;
1:6c000e8: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.context.ContextImpl;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:6c000e8: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1:6c000e8: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
8:eac0369: /**
1:eac0369:  * ExecutionContext stores the result set factory to be used by
1:eac0369:  * the current connection, and manages execution-level connection
1:eac0369:  * activities.
1:eac0369:  * <p>
1:eac0369:  * An execution context is expected to be on the stack for the
1:eac0369:  * duration of the connection.
4:eac0369:  *
1:eac0369:  */
1:824ca0b: class GenericExecutionContext
1:eac0369: 	extends ContextImpl 
1:eac0369: 	implements ExecutionContext {
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class implementation
1:eac0369: 	//
1:824ca0b: 	private ExecutionFactory execFactory;
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ExecutionContext interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	public ExecutionFactory getExecutionFactory() {
1:eac0369: 		return execFactory;
10:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// Context interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
5:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void cleanupOnError(Throwable error) throws StandardException {
1:eac0369: 		if (error instanceof StandardException) {
1:eac0369: 
1:eac0369: 			StandardException se = (StandardException) error;
1:913815a:             int severity = se.getSeverity();
1:913815a:             if (severity >= ExceptionSeverity.SESSION_SEVERITY)
1:913815a:             {
1:913815a:                popMe();
1:913815a:                return;
1:913815a:             }
1:913815a: 			if (severity > ExceptionSeverity.STATEMENT_SEVERITY)
1:913815a:             {
1:913815a:  				return;
1:913815a:             }
1:eac0369: 
2:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:824ca0b: 	GenericExecutionContext(
1:eac0369: 			ContextManager cm,
1:eac0369: 			ExecutionFactory ef)
6:eac0369: 	{
1:eac0369: 
1:eac0369: 		super(cm, ExecutionContext.CONTEXT_ID);
1:eac0369: 		execFactory = ef;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:53ce71e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6c000e8
/////////////////////////////////////////////////////////////////////////
0: import java.util.Properties;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ResultSetStatisticsFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4119c42
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:913815a
/////////////////////////////////////////////////////////////////////////
1:             int severity = se.getSeverity();
1:             if (severity >= ExceptionSeverity.SESSION_SEVERITY)
1:             {
1:                popMe();
1:                return;
1:             }
1: 			if (severity > ExceptionSeverity.STATEMENT_SEVERITY)
1:             {
1:  				return;
1:             }
commit:824ca0b
/////////////////////////////////////////////////////////////////////////
1: class GenericExecutionContext
/////////////////////////////////////////////////////////////////////////
0: 	private ResultSetFactory rsFactory;
0: 	private ResultSetStatisticsFactory rssFactory;
1: 	private ExecutionFactory execFactory;
/////////////////////////////////////////////////////////////////////////
1: 	GenericExecutionContext(
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.GenericExecutionContext
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ResultSetFactory;
0: import org.apache.derby.iapi.sql.execute.ResultSetStatisticsFactory;
1: 
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.context.ContextImpl;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Properties;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
1: /**
1:  * ExecutionContext stores the result set factory to be used by
1:  * the current connection, and manages execution-level connection
1:  * activities.
1:  * <p>
1:  * An execution context is expected to be on the stack for the
1:  * duration of the connection.
1:  *
0:  * @author ames
1:  */
0: public class GenericExecutionContext
1: 	extends ContextImpl 
1: 	implements ExecutionContext {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
0: 	private ResultSet sourceRS;
1: 
1: 	//
1: 	// class implementation
1: 	//
0: 	protected ResultSetFactory rsFactory;
0: 	protected ResultSetStatisticsFactory rssFactory;
0: 	protected ExecutionFactory execFactory;
1: 
1: 	//
1: 	// ExecutionContext interface
1: 	//
1: 	/**
0: 	 * Get the ResultSetFactory from this ExecutionContext.
1: 	 *
0: 	 * @return	The result set factory associated with this
0: 	 *		ExecutionContext
1: 	 */
0: 	public ResultSetFactory getResultSetFactory() 
1: 	{
0: 		/* null rsFactory may have been passed to
0: 		 * constructor in order to speed up boot time.
1: 		 */
0: 		if (rsFactory == null)
1: 		{
0: 			rsFactory = execFactory.getResultSetFactory();
1: 		}
0: 		return rsFactory;
1: 	}
1: 
1: 	/**
0: 	 * Get the ResultSetStatisticsFactory from this ExecutionContext.
1: 	 *
0: 	 * @return	The result set statistics factory associated with this
0: 	 *		ExecutionContext
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ResultSetStatisticsFactory getResultSetStatisticsFactory()
0: 					throws StandardException {
0: 		if (rssFactory == null) {
0: 			rssFactory = (ResultSetStatisticsFactory)
0: 				Monitor.bootServiceModule(
0: 									false,
0: 									execFactory,
0: 									ResultSetStatisticsFactory.MODULE,
0: 									(Properties) null);
1: 		}
1: 
0: 		return rssFactory;
1: 	}
1: 
1: 	public ExecutionFactory getExecutionFactory() {
1: 		return execFactory;
1: 	}
1: 
1: 	/**
0: 	 * @see ExecutionContext#beginStatement
1: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	public void beginStatement(ResultSet sourceRS) throws StandardException {
0: 		this.sourceRS = sourceRS;
1: 	}
1: 
1: 	/**
0: 	 * @see ExecutionContext#endStatement
1: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	public void endStatement() throws StandardException {
0: 		sourceRS = null;
1: 	}
1: 
1: 	/**
0: 	 * @see ExecutionContext#siftForeignKeys
1: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	public	Object[]	siftForeignKeys( Object[] fullList ) throws StandardException
1: 	{
0: 		// for the Core Language, this routine is a NOP. The interesting
0: 		// cases occur during REFRESH and the initial boot of a Target
0: 		// database. See RepExecutionContext for the interesting cases.
1: 
0: 		return	fullList;
1: 	}
1: 
1: 	/**
0: 	 * @see ExecutionContext#siftTriggers
1: 	 * @exception StandardException Thrown on error
1: 	 */
0: 	public Object siftTriggers(Object triggerInfo) throws StandardException
1: 	{
0: 		// for the Core Language, this routine is a NOP. The interesting
0: 		// cases occur during REFRESH and the initial boot of a Target
0: 		// database. See RepExecutionContext for the interesting cases.
0: 		return	triggerInfo;
1: 	}
1: 
1: 	//
1: 	// Context interface
1: 	//
1: 
1: 	/**
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public void cleanupOnError(Throwable error) throws StandardException {
1: 		if (error instanceof StandardException) {
1: 
1: 			StandardException se = (StandardException) error;
0: 			if (se.getSeverity() > ExceptionSeverity.STATEMENT_SEVERITY)
1: 				return;
1: 
1: 
0: 			if (sourceRS != null)
1: 			{
0: 				sourceRS.close();
0: 				sourceRS = null;
1: 			}
1: 
0: 			endStatement();
1: 			return;
1: 		}
1: 	}
1: 
1: 	//
1: 	// class interface
1: 	//
0: 	public	GenericExecutionContext(
0: 		    ResultSetFactory rsf,
1: 			ContextManager cm,
1: 			ExecutionFactory ef)
1: 	{
1: 
1: 		super(cm, ExecutionContext.CONTEXT_ID);
0: 		rsFactory = rsf;
1: 		execFactory = ef;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ResultSetFactory;
0: import org.apache.derby.iapi.sql.execute.ResultSetStatisticsFactory;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.context.ContextImpl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Properties;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: /**
0:  * ExecutionContext stores the result set factory to be used by
0:  * the current connection, and manages execution-level connection
0:  * activities.
0:  * <p>
0:  * An execution context is expected to be on the stack for the
0:  * duration of the connection.
0:  *
0:  * @author ames
0:  */
0: public class GenericExecutionContext
0: 	extends ContextImpl 
0: 	implements ExecutionContext {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private ResultSet sourceRS;
0: 
0: 	//
0: 	// class implementation
0: 	//
0: 	protected ResultSetFactory rsFactory;
0: 	protected ResultSetStatisticsFactory rssFactory;
0: 	protected ExecutionFactory execFactory;
0: 
0: 	//
0: 	// ExecutionContext interface
0: 	//
0: 	/**
0: 	 * Get the ResultSetFactory from this ExecutionContext.
0: 	 *
0: 	 * @return	The result set factory associated with this
0: 	 *		ExecutionContext
0: 	 */
0: 	public ResultSetFactory getResultSetFactory() 
0: 	{
0: 		/* null rsFactory may have been passed to
0: 		 * constructor in order to speed up boot time.
0: 		 */
0: 		if (rsFactory == null)
0: 		{
0: 			rsFactory = execFactory.getResultSetFactory();
0: 		}
0: 		return rsFactory;
0: 	}
0: 
0: 	/**
0: 	 * Get the ResultSetStatisticsFactory from this ExecutionContext.
0: 	 *
0: 	 * @return	The result set statistics factory associated with this
0: 	 *		ExecutionContext
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ResultSetStatisticsFactory getResultSetStatisticsFactory()
0: 					throws StandardException {
0: 		if (rssFactory == null) {
0: 			rssFactory = (ResultSetStatisticsFactory)
0: 				Monitor.bootServiceModule(
0: 									false,
0: 									execFactory,
0: 									ResultSetStatisticsFactory.MODULE,
0: 									(Properties) null);
0: 		}
0: 
0: 		return rssFactory;
0: 	}
0: 
0: 	public ExecutionFactory getExecutionFactory() {
0: 		return execFactory;
0: 	}
0: 
0: 	/**
0: 	 * @see ExecutionContext#beginStatement
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void beginStatement(ResultSet sourceRS) throws StandardException {
0: 		this.sourceRS = sourceRS;
0: 	}
0: 
0: 	/**
0: 	 * @see ExecutionContext#endStatement
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void endStatement() throws StandardException {
0: 		sourceRS = null;
0: 	}
0: 
0: 	/**
0: 	 * @see ExecutionContext#siftForeignKeys
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public	Object[]	siftForeignKeys( Object[] fullList ) throws StandardException
0: 	{
0: 		// for the Core Language, this routine is a NOP. The interesting
0: 		// cases occur during REFRESH and the initial boot of a Target
0: 		// database. See RepExecutionContext for the interesting cases.
0: 
0: 		return	fullList;
0: 	}
0: 
0: 	/**
0: 	 * @see ExecutionContext#siftTriggers
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public Object siftTriggers(Object triggerInfo) throws StandardException
0: 	{
0: 		// for the Core Language, this routine is a NOP. The interesting
0: 		// cases occur during REFRESH and the initial boot of a Target
0: 		// database. See RepExecutionContext for the interesting cases.
0: 		return	triggerInfo;
0: 	}
0: 
0: 	//
0: 	// Context interface
0: 	//
0: 
0: 	/**
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void cleanupOnError(Throwable error) throws StandardException {
0: 		if (error instanceof StandardException) {
0: 
0: 			StandardException se = (StandardException) error;
0: 			if (se.getSeverity() > ExceptionSeverity.STATEMENT_SEVERITY)
0: 				return;
0: 
0: 
0: 			if (sourceRS != null)
0: 			{
0: 				sourceRS.close();
0: 				sourceRS = null;
0: 			}
0: 
0: 			endStatement();
0: 			return;
0: 		}
0: 	}
0: 
0: 	//
0: 	// class interface
0: 	//
0: 	public	GenericExecutionContext(
0: 		    ResultSetFactory rsf,
0: 			ContextManager cm,
0: 			ExecutionFactory ef)
0: 	{
0: 
0: 		super(cm, ExecutionContext.CONTEXT_ID);
0: 		rsFactory = rsf;
0: 		execFactory = ef;
0: 	}
0: 
0: }
============================================================================