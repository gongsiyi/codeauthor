1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.PageKey
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A key that identifies a BasePage. Used as the key for the caching mechanism.
1:eac0369: 
1:eac0369: 	<BR> MT - Immutable :
1:eac0369: */
1:eac0369: 
1:eac0369: 
1:f102dab: public final class PageKey
1:eac0369: {
1:eac0369: 	private final ContainerKey	container;
1:eac0369: 	private final long	pageNumber;		// page number
1:eac0369: 
1:eac0369: 	public PageKey(ContainerKey key, long pageNumber) {
1:eac0369: 		container = key;
1:eac0369: 		this.pageNumber = pageNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long getPageNumber() {
1:eac0369: 		return pageNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ContainerKey getContainerId() {
1:eac0369: 		return container;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods to read and write
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		container.writeExternal(out);
1:eac0369: 		CompressedNumber.writeLong(out, pageNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static PageKey read(ObjectInput in) throws IOException
1:eac0369: 	{
1:eac0369: 		ContainerKey c = ContainerKey.read(in);
1:eac0369: 		long pn = CompressedNumber.readLong(in);
1:eac0369: 
1:eac0369: 		return new PageKey(c, pn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of object
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 
1:eac0369: 		if (other instanceof PageKey) {
1:eac0369: 			PageKey otherKey = (PageKey) other;
1:eac0369: 
1:eac0369: 			return (pageNumber == otherKey.pageNumber) &&
1:eac0369: 				   container.equals(otherKey.container);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public int hashCode() {
1:b4d1d9c:         int hash = 7;
1:b4d1d9c:         hash = 79 * hash + container.hashCode();
1:b4d1d9c:         hash = 79 * hash + (int) (pageNumber ^ (pageNumber >>> 32));
1:b4d1d9c:         return hash;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString() {
1:eac0369: 		return "Page(" + pageNumber + "," + container.toString() + ")";
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b4d1d9c
/////////////////////////////////////////////////////////////////////////
1:         int hash = 7;
1:         hash = 79 * hash + container.hashCode();
1:         hash = 79 * hash + (int) (pageNumber ^ (pageNumber >>> 32));
1:         return hash;
commit:f102dab
/////////////////////////////////////////////////////////////////////////
1: public final class PageKey
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.PageKey
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 	A key that identifies a BasePage. Used as the key for the caching mechanism.
1: 
1: 	<BR> MT - Immutable :
1: */
1: 
1: 
0: public class PageKey
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	private final ContainerKey	container;
1: 	private final long	pageNumber;		// page number
1: 
1: 	public PageKey(ContainerKey key, long pageNumber) {
1: 		container = key;
1: 		this.pageNumber = pageNumber;
1: 	}
1: 
1: 	public long getPageNumber() {
1: 		return pageNumber;
1: 	}
1: 
1: 	public ContainerKey getContainerId() {
1: 		return container;
1: 	}
1: 
1: 	/*
1: 	** Methods to read and write
1: 	*/
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		container.writeExternal(out);
1: 		CompressedNumber.writeLong(out, pageNumber);
1: 	}
1: 
1: 	public static PageKey read(ObjectInput in) throws IOException
1: 	{
1: 		ContainerKey c = ContainerKey.read(in);
1: 		long pn = CompressedNumber.readLong(in);
1: 
1: 		return new PageKey(c, pn);
1: 	}
1: 
1: 
1: 	/*
1: 	** Methods of object
1: 	*/
1: 
1: 	public boolean equals(Object other) {
1: 
1: 		if (other instanceof PageKey) {
1: 			PageKey otherKey = (PageKey) other;
1: 
1: 			return (pageNumber == otherKey.pageNumber) &&
1: 				   container.equals(otherKey.container);
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 
1: 	public int hashCode() {
1: 
0: 		return (int) (pageNumber ^ container.hashCode());
1: 	}
1: 
1: 	public String toString() {
1: 		return "Page(" + pageNumber + "," + container.toString() + ")";
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 	A key that identifies a BasePage. Used as the key for the caching mechanism.
0: 
0: 	<BR> MT - Immutable :
0: */
0: 
0: 
0: public class PageKey
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private final ContainerKey	container;
0: 	private final long	pageNumber;		// page number
0: 
0: 	public PageKey(ContainerKey key, long pageNumber) {
0: 		container = key;
0: 		this.pageNumber = pageNumber;
0: 	}
0: 
0: 	public long getPageNumber() {
0: 		return pageNumber;
0: 	}
0: 
0: 	public ContainerKey getContainerId() {
0: 		return container;
0: 	}
0: 
0: 	/*
0: 	** Methods to read and write
0: 	*/
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		container.writeExternal(out);
0: 		CompressedNumber.writeLong(out, pageNumber);
0: 	}
0: 
0: 	public static PageKey read(ObjectInput in) throws IOException
0: 	{
0: 		ContainerKey c = ContainerKey.read(in);
0: 		long pn = CompressedNumber.readLong(in);
0: 
0: 		return new PageKey(c, pn);
0: 	}
0: 
0: 
0: 	/*
0: 	** Methods of object
0: 	*/
0: 
0: 	public boolean equals(Object other) {
0: 
0: 		if (other instanceof PageKey) {
0: 			PageKey otherKey = (PageKey) other;
0: 
0: 			return (pageNumber == otherKey.pageNumber) &&
0: 				   container.equals(otherKey.container);
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 
0: 	public int hashCode() {
0: 
0: 		return (int) (pageNumber ^ container.hashCode());
0: 	}
0: 
0: 	public String toString() {
0: 		return "Page(" + pageNumber + "," + container.toString() + ")";
0: 	}
0: 
0: }
============================================================================