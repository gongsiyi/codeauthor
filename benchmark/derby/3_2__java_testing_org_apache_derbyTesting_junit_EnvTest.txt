1:3b7ed34: /*
1:3b7ed34:  *
1:3b7ed34:  * Derby - Class org.apache.derbyTesting.junit.EnvTest
1:3b7ed34:  *
1:3b7ed34:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3b7ed34:  * contributor license agreements.  See the NOTICE file distributed with
1:3b7ed34:  * this work for additional information regarding copyright ownership.
1:3b7ed34:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3b7ed34:  * (the "License"); you may not use this file except in compliance with
1:3b7ed34:  * the License.  You may obtain a copy of the License at
1:3b7ed34:  *
1:3b7ed34:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3b7ed34:  *
1:3b7ed34:  * Unless required by applicable law or agreed to in writing, 
1:3b7ed34:  * software distributed under the License is distributed on an 
1:3b7ed34:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:3b7ed34:  * either express or implied. See the License for the specific 
1:3b7ed34:  * language governing permissions and limitations under the License.
1:3b7ed34:  */
1:3b7ed34: package org.apache.derbyTesting.junit;
1:3b7ed34: 
1:ce43340: import java.io.PrintStream;
1:ce43340: import java.security.AccessController;
1:ce43340: import java.security.MessageDigest;
1:ce43340: import java.security.NoSuchAlgorithmException;
1:ce43340: import java.security.PrivilegedAction;
1:ce43340: import java.util.ArrayList;
1:ce43340: import java.util.List;
1:ce43340: import java.util.Properties;
1:ce43340: 
1:3b7ed34: import junit.framework.TestCase;
1:3b7ed34: 
1:3b7ed34: /**
1:3b7ed34:  * Simple Junit "test" that runs a number of fixtures to
1:3b7ed34:  * show the environment a test would run in.
1:3b7ed34:  * A fixture changes its name based upon the return
1:3b7ed34:  * of a method that checks for some environmental condition,
1:3b7ed34:  * e.g. does this vm support JDBC 3.
1:3b7ed34:  * Meant as a simple aid to help determine any environment problems.
1:3b7ed34:  *
1:3b7ed34:  */
1:3b7ed34: public class EnvTest extends TestCase {
1:3b7ed34: 	
1:3b7ed34: 	public EnvTest(String name)
1:3b7ed34: 	{
1:3b7ed34: 		super(name);
2:3b7ed34: 	}
1:ce43340: 	
1:ce43340:     /**
1:ce43340:      * Print trace string.
1:ce43340:      * @param text String to print
1:ce43340:      */
1:ce43340:     public void traceit(final String text) {
1:ce43340:         setName(text);
1:ce43340:         PrintStream out = System.out;
1:ce43340:         String KEY_TRACE = "derby.tests.trace";
1:ce43340:         if (Boolean.valueOf(
1:ce43340:                 getSystemProperties().getProperty(KEY_TRACE)).
1:ce43340:                 booleanValue()) 
1:ce43340:         {
1:ce43340:             out.println(text);
1:ce43340:         }
1:ce43340:     }
1:ce43340:     
1:ce43340:     /**
1:ce43340:      * Get the system properties in a privileged block.
1:ce43340:      *
1:ce43340:      * @return the system properties.
1:ce43340:      */
1:ce43340:     public  static final Properties getSystemProperties() {
1:ce43340:         // Fetch system properties in a privileged block.
1:ce43340:         return AccessController.doPrivileged(
1:ce43340:                 new PrivilegedAction<Properties>() {
1:ce43340:             public Properties run() {
1:ce43340:                 return System.getProperties();
1:ce43340:             }
1:ce43340:         });
1:ce43340:     }
1:3b7ed34: 	/*
1:3b7ed34: 	** Tests of the JDBC.vmSupportsXXX to see which JDBC support is available.
1:3b7ed34: 	*/
1:3b7ed34: 	public void testJSR169() {
1:ce43340:         traceit(String.valueOf(JDBC.vmSupportsJSR169()) +
1:ce43340:             "_vmSupportsJSR169()");
1:3b7ed34: 	}
1:3b7ed34: 	public void testJDBC3() {
1:ce43340:         traceit(String.valueOf(JDBC.vmSupportsJDBC3()) +
1:ce43340:                 "_vmSupportsJDBC3()");
1:3b7ed34: 	}
1:ce43340:     public void testJDBC4() {
1:ce43340:         traceit(String.valueOf(JDBC.vmSupportsJDBC4()) +
1:ce43340:                 "_vmSupportsJDBC4()");
1:ce43340:     }
1:ce43340:     public void testJDBC41() {
1:ce43340:         traceit(String.valueOf(JDBC.vmSupportsJDBC41()) +
1:ce43340:                 "_vmSupportsJDBC41()");
1:ce43340:     }
1:ce43340:     public void testJDBC42() {
1:ce43340:         traceit(String.valueOf(JDBC.vmSupportsJDBC42()) +
1:ce43340:                 "_vmSupportsJDBC42()");
1:ce43340:     }
1:ce43340: 	
1:ce43340: 	
1:3b7ed34: 	/*
1:3b7ed34: 	** Tests of the Derby.hasXXX to see which Derby code is
1:3b7ed34: 	** available for the tests.
1:3b7ed34: 	*/
1:3b7ed34: 	public void testHasServer() {
1:ce43340:         traceit(String.valueOf(Derby.hasServer() + "_hasServer"));
1:3b7ed34: 	}
1:3b7ed34: 	public void testHasClient() {
1:ce43340:         traceit(String.valueOf(Derby.hasClient() + "_hasClient"));
1:3b7ed34: 	}
1:3b7ed34: 	public void testHasEmbedded() {
1:ce43340:         traceit(String.valueOf(Derby.hasEmbedded() + "_hasEmbedded"));
1:3b7ed34: 	}
1:3b7ed34: 	public void testHasTools() {
1:ce43340:         traceit(String.valueOf(Derby.hasTools() + "_hasTools"));
1:3b7ed34: 	}
1:8f1b7c5:     /*
1:8f1b7c5:     ** XML related tests
1:8f1b7c5:     */
1:8f1b7c5:     public void testClasspathHasXalanAndJAXP() {
1:ce43340:         traceit(String.valueOf(XML.classpathHasJAXP() + "_classpathHasJAXP"));
1:8f1b7c5:     }
1:8f1b7c5:     public void testClasspathMeetsXMLReqs() {
1:ce43340:         traceit(String.valueOf(XML.classpathMeetsXMLReqs() +
1:ce43340:                 "_classpathMeetsXMLReqs"));
1:ce43340:     }
1:ce43340:     public void testHasLuceneCoreJar() {
1:ce43340:         traceit(String.valueOf(JDBC.HAVE_LUCENE_CORE + "_hasLuceneCore"));
1:ce43340:     }
1:ce43340:     public void testHasLuceneQueryParserJar() {
1:ce43340:         traceit(String.valueOf(JDBC.HAVE_LUCENE_QUERYPARSER + 
1:ce43340:                 "_hasLuceneQueryParser"));
1:ce43340:     }
1:ce43340:     public void testHasLuceneAnalyzersJar() {
1:ce43340:         traceit(String.valueOf(JDBC.HAVE_LUCENE_ANALYZERS + 
1:ce43340:                 "_hasLuceneAnalyzers"));
1:ce43340:     }
1:ce43340:     
1:ce43340:     public void testHasLDAPConfig() {
1:ce43340:         // we need a bunch of properties for ldap testing
1:ce43340:         Properties props = getSystemProperties();
1:ce43340:         List<String> ldapSettings = new ArrayList<String>();
1:ce43340:         ldapSettings.add(props.getProperty("derbyTesting.ldapPassword"));
1:ce43340:         ldapSettings.add(props.getProperty("derbyTesting.ldapServer"));
1:ce43340:         ldapSettings.add(props.getProperty("derbyTesting.ldapPort"));
1:ce43340:         ldapSettings.add(props.getProperty("derbyTesting.dnString"));
1:ce43340:         ldapSettings.add(props.getProperty("derbyTesting.ldapContextFactory"));
1:ce43340:         boolean sofarsogood=true;
1:ce43340:         for (String s:ldapSettings) {
1:ce43340:             if (s == null || s.length()== 0 || s.isEmpty())
1:ce43340:             {
1:ce43340:                 sofarsogood=false;
1:ce43340:                 break;
1:ce43340:             }
1:ce43340:         }
1:ce43340:         traceit(String.valueOf(sofarsogood) + "_hasLDAPConfiguration");
1:ce43340:     }
1:ce43340:     
1:ce43340:     public void testHasJNDISupport() {
1:ce43340:         traceit(String.valueOf(JDBC.vmSupportsJNDI() + 
1:ce43340:                 "_classpathMeetsJNDIReqs"));
1:ce43340:     }
1:ce43340:     
1:ce43340:     public void testHasBasicEncryptionSupport() {
1:ce43340:         try {
1:ce43340:             // First check for the preferred default, and return it if present
1:ce43340:             MessageDigest.getInstance("SHA-256");
1:ce43340:             traceit("true_hasBasicEncryptionAlgorithmSupport");
1:ce43340:         } catch (NoSuchAlgorithmException nsae) {
1:ce43340:             // Couldn't find the preferred algorithm
1:ce43340:             traceit("false_hasBasicEncryptionAlgorithmSupport");
1:ce43340:         }
1:ce43340:     }
1:ce43340:     
1:ce43340:     public void testHasSubStandardEncryptionSupport() {
1:ce43340:         try {
1:ce43340:             // First check for the preferred default, and return it if present
1:ce43340:             MessageDigest.getInstance("SHA-1");
1:ce43340:             traceit("true_hasSubstandardEncryptionAlgorithmSupport");
1:ce43340:         } catch (NoSuchAlgorithmException nsae) {
1:ce43340:             traceit("false_hasSubStandardEncryptionAlgorithmSupport");
1:ce43340:         }
1:8f1b7c5:     }
1:3b7ed34: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:ce43340
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintStream;
1: import java.security.AccessController;
1: import java.security.MessageDigest;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.PrivilegedAction;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Properties;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	
1:     /**
1:      * Print trace string.
1:      * @param text String to print
1:      */
1:     public void traceit(final String text) {
1:         setName(text);
1:         PrintStream out = System.out;
1:         String KEY_TRACE = "derby.tests.trace";
1:         if (Boolean.valueOf(
1:                 getSystemProperties().getProperty(KEY_TRACE)).
1:                 booleanValue()) 
1:         {
1:             out.println(text);
1:         }
1:     }
1:     
1:     /**
1:      * Get the system properties in a privileged block.
1:      *
1:      * @return the system properties.
1:      */
1:     public  static final Properties getSystemProperties() {
1:         // Fetch system properties in a privileged block.
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<Properties>() {
1:             public Properties run() {
1:                 return System.getProperties();
1:             }
1:         });
1:     }
1:         traceit(String.valueOf(JDBC.vmSupportsJSR169()) +
1:             "_vmSupportsJSR169()");
1:         traceit(String.valueOf(JDBC.vmSupportsJDBC3()) +
1:                 "_vmSupportsJDBC3()");
1:     public void testJDBC4() {
1:         traceit(String.valueOf(JDBC.vmSupportsJDBC4()) +
1:                 "_vmSupportsJDBC4()");
1:     }
1:     public void testJDBC41() {
1:         traceit(String.valueOf(JDBC.vmSupportsJDBC41()) +
1:                 "_vmSupportsJDBC41()");
1:     }
1:     public void testJDBC42() {
1:         traceit(String.valueOf(JDBC.vmSupportsJDBC42()) +
1:                 "_vmSupportsJDBC42()");
1:     }
1: 	
1: 	
1:         traceit(String.valueOf(Derby.hasServer() + "_hasServer"));
1:         traceit(String.valueOf(Derby.hasClient() + "_hasClient"));
1:         traceit(String.valueOf(Derby.hasEmbedded() + "_hasEmbedded"));
1:         traceit(String.valueOf(Derby.hasTools() + "_hasTools"));
1:         traceit(String.valueOf(XML.classpathHasJAXP() + "_classpathHasJAXP"));
1:         traceit(String.valueOf(XML.classpathMeetsXMLReqs() +
1:                 "_classpathMeetsXMLReqs"));
1:     }
1:     public void testHasLuceneCoreJar() {
1:         traceit(String.valueOf(JDBC.HAVE_LUCENE_CORE + "_hasLuceneCore"));
1:     }
1:     public void testHasLuceneQueryParserJar() {
1:         traceit(String.valueOf(JDBC.HAVE_LUCENE_QUERYPARSER + 
1:                 "_hasLuceneQueryParser"));
1:     }
1:     public void testHasLuceneAnalyzersJar() {
1:         traceit(String.valueOf(JDBC.HAVE_LUCENE_ANALYZERS + 
1:                 "_hasLuceneAnalyzers"));
1:     }
1:     
1:     public void testHasLDAPConfig() {
1:         // we need a bunch of properties for ldap testing
1:         Properties props = getSystemProperties();
1:         List<String> ldapSettings = new ArrayList<String>();
1:         ldapSettings.add(props.getProperty("derbyTesting.ldapPassword"));
1:         ldapSettings.add(props.getProperty("derbyTesting.ldapServer"));
1:         ldapSettings.add(props.getProperty("derbyTesting.ldapPort"));
1:         ldapSettings.add(props.getProperty("derbyTesting.dnString"));
1:         ldapSettings.add(props.getProperty("derbyTesting.ldapContextFactory"));
1:         boolean sofarsogood=true;
1:         for (String s:ldapSettings) {
1:             if (s == null || s.length()== 0 || s.isEmpty())
1:             {
1:                 sofarsogood=false;
1:                 break;
1:             }
1:         }
1:         traceit(String.valueOf(sofarsogood) + "_hasLDAPConfiguration");
1:     }
1:     
1:     public void testHasJNDISupport() {
1:         traceit(String.valueOf(JDBC.vmSupportsJNDI() + 
1:                 "_classpathMeetsJNDIReqs"));
1:     }
1:     
1:     public void testHasBasicEncryptionSupport() {
1:         try {
1:             // First check for the preferred default, and return it if present
1:             MessageDigest.getInstance("SHA-256");
1:             traceit("true_hasBasicEncryptionAlgorithmSupport");
1:         } catch (NoSuchAlgorithmException nsae) {
1:             // Couldn't find the preferred algorithm
1:             traceit("false_hasBasicEncryptionAlgorithmSupport");
1:         }
1:     }
1:     
1:     public void testHasSubStandardEncryptionSupport() {
1:         try {
1:             // First check for the preferred default, and return it if present
1:             MessageDigest.getInstance("SHA-1");
1:             traceit("true_hasSubstandardEncryptionAlgorithmSupport");
1:         } catch (NoSuchAlgorithmException nsae) {
1:             traceit("false_hasSubStandardEncryptionAlgorithmSupport");
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5283796
/////////////////////////////////////////////////////////////////////////
0:         setName(XML.classpathHasJAXP() + "_classpathHasJAXP");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:8f1b7c5
/////////////////////////////////////////////////////////////////////////
1:     /*
1:     ** XML related tests
1:     */
1:     public void testClasspathHasXalanAndJAXP() {
0:         setName(XML.classpathHasXalanAndJAXP() + "_classpathHasXalanAndJAXP");
1:     }
1:     public void testClasspathMeetsXMLReqs() {
0:         setName(XML.classpathMeetsXMLReqs() + "_classpathMeetsXMLReqs");
1:     }
commit:3b7ed34
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.EnvTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * Simple Junit "test" that runs a number of fixtures to
1:  * show the environment a test would run in.
1:  * A fixture changes its name based upon the return
1:  * of a method that checks for some environmental condition,
1:  * e.g. does this vm support JDBC 3.
1:  * Meant as a simple aid to help determine any environment problems.
1:  *
1:  */
1: public class EnvTest extends TestCase {
1: 	
1: 	public EnvTest(String name)
1: 	{
1: 		super(name);
1: 	}
1: 	/*
1: 	** Tests of the JDBC.vmSupportsXXX to see which JDBC support is available.
1: 	*/
1: 	public void testJSR169() {
0: 		setName(JDBC.vmSupportsJSR169() + "_vmSupportsJSR169()");
1: 	}
1: 	public void testJDBC3() {
0: 		setName(JDBC.vmSupportsJDBC3() + "_vmSupportsJDBC3()");
1: 	}
0: 	public void testJDBC4() {
0: 		setName(JDBC.vmSupportsJDBC4() + "_vmSupportsJDBC4()");
1: 	}
1: 	/*
1: 	** Tests of the Derby.hasXXX to see which Derby code is
1: 	** available for the tests.
1: 	*/
1: 	public void testHasServer() {
0: 		setName(Derby.hasServer() + "_hasServer");
1: 	}
1: 	public void testHasClient() {
0: 		setName(Derby.hasClient() + "_hasClient");
1: 	}
1: 	public void testHasEmbedded() {
0: 		setName(Derby.hasEmbedded() + "_hasEmbedded");
1: 	}
1: 	public void testHasTools() {
0: 		setName(Derby.hasTools() + "_hasTools");
1: 	}
1: }
============================================================================