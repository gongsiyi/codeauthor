1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/BundleEvent.java,v 1.19 2007/02/20 00:14:12 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.EventObject;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * An event from the Framework describing a bundle lifecycle change.
1:a8b6921:  * <p>
1:a8b6921:  * <code>BundleEvent</code> objects are delivered to
1:a8b6921:  * <code>SynchronousBundleListener</code>s and <code>BundleListener</code>s
1:a8b6921:  * when a change occurs in a bundle's lifecycle. A type code is used to identify
1:a8b6921:  * the event type for future extendability.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * OSGi Alliance reserves the right to extend the set of types.
1:a8b6921:  * 
1:a8b6921:  * @Immutable
1:a8b6921:  * @see BundleListener
1:a8b6921:  * @see SynchronousBundleListener
1:a8b6921:  * @version $Revision: 1.19 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public class BundleEvent extends EventObject {
1:a8b6921: 	static final long		serialVersionUID	= 4080640865971756012L;
1:a8b6921: 	/**
1:a8b6921: 	 * Bundle that had a change occur in its lifecycle.
1:a8b6921: 	 */
1:a8b6921: 	private final Bundle	bundle;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Type of bundle lifecycle change.
1:a8b6921: 	 */
1:a8b6921: 	private final int		type;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been installed.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>INSTALLED</code> is 0x00000001.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see BundleContext#installBundle(String)
1:a8b6921: 	 */
1:a8b6921: 	public final static int	INSTALLED			= 0x00000001;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been started.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle's
1:a8b6921: 	 * {@link BundleActivator#start(BundleContext) BundleActivator start} method
1:a8b6921: 	 * has been executed if the bundle has a bundle activator class.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>STARTED</code> is 0x00000002.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#start()
1:a8b6921: 	 */
1:a8b6921: 	public final static int	STARTED				= 0x00000002;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been stopped.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle's
1:a8b6921: 	 * {@link BundleActivator#stop(BundleContext) BundleActivator stop} method
1:a8b6921: 	 * has been executed if the bundle has a bundle activator class.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>STOPPED</code> is 0x00000004.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#stop()
1:a8b6921: 	 */
1:a8b6921: 	public final static int	STOPPED				= 0x00000004;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been updated.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>UPDATED</code> is 0x00000008.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#update()
1:a8b6921: 	 */
1:a8b6921: 	public final static int	UPDATED				= 0x00000008;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been uninstalled.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>UNINSTALLED</code> is 0x00000010.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#uninstall
1:a8b6921: 	 */
1:a8b6921: 	public final static int	UNINSTALLED			= 0x00000010;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been resolved.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>RESOLVED</code> is 0x00000020.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#RESOLVED
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static int	RESOLVED			= 0x00000020;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle has been unresolved.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>UNRESOLVED</code> is 0x00000040.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#INSTALLED
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static int	UNRESOLVED			= 0x00000040;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle is about to be activated.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle's
1:a8b6921: 	 * {@link BundleActivator#start(BundleContext) BundleActivator start} method
1:a8b6921: 	 * is about to be called if the bundle has a bundle activator class. This
1:a8b6921: 	 * event is only delivered to {@link SynchronousBundleListener}s. It is not
1:a8b6921: 	 * delivered to <code>BundleListener</code>s.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>STARTING</code> is 0x00000080.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#start()
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static int	STARTING			= 0x00000080;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle is about to deactivated.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle's
1:a8b6921: 	 * {@link BundleActivator#stop(BundleContext) BundleActivator stop} method
1:a8b6921: 	 * is about to be called if the bundle has a bundle activator class. This
1:a8b6921: 	 * event is only delivered to {@link SynchronousBundleListener}s. It is not
1:a8b6921: 	 * delivered to <code>BundleListener</code>s.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>STOPPING</code> is 0x00000100.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Bundle#stop()
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static int	STOPPING			= 0x00000100;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The bundle will be lazily activated.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle has a {@link Constants#ACTIVATION_LAZY lazy activation policy}
1:a8b6921: 	 * and is waiting to be activated. It is now in the
1:a8b6921: 	 * {@link Bundle#STARTING STARTING} state and has a valid
1:a8b6921: 	 * <code>BundleContext</code>. This event is only delivered to
1:a8b6921: 	 * {@link SynchronousBundleListener}s. It is not delivered to
1:a8b6921: 	 * <code>BundleListener</code>s.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>LAZY_ACTIVATION</code> is 0x00000200.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.4
1:a8b6921: 	 */
1:a8b6921: 	public final static int	LAZY_ACTIVATION		= 0x00000200;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a bundle event of the specified type.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param type The event type.
1:a8b6921: 	 * @param bundle The bundle which had a lifecycle change.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public BundleEvent(int type, Bundle bundle) {
1:a8b6921: 		super(bundle);
1:a8b6921: 		this.bundle = bundle;
1:a8b6921: 		this.type = type;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the bundle which had a lifecycle change. This bundle is the
1:a8b6921: 	 * source of the event.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The bundle that had a change occur in its lifecycle.
1:a8b6921: 	 */
1:a8b6921: 	public Bundle getBundle() {
1:a8b6921: 		return bundle;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the type of lifecyle event. The type values are:
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li>{@link #INSTALLED}
1:a8b6921: 	 * <li>{@link #RESOLVED}
1:a8b6921: 	 * <li>{@link #LAZY_ACTIVATION}
1:a8b6921: 	 * <li>{@link #STARTING}
1:a8b6921: 	 * <li>{@link #STARTED}
1:a8b6921: 	 * <li>{@link #STOPPING}
1:a8b6921: 	 * <li>{@link #STOPPED}
1:a8b6921: 	 * <li>{@link #UPDATED}
1:a8b6921: 	 * <li>{@link #UNRESOLVED}
1:a8b6921: 	 * <li>{@link #UNINSTALLED}
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The type of lifecycle event.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public int getType() {
1:a8b6921: 		return type;
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/BundleEvent.java,v 1.19 2007/02/20 00:14:12 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.util.EventObject;
1: 
1: /**
1:  * An event from the Framework describing a bundle lifecycle change.
1:  * <p>
1:  * <code>BundleEvent</code> objects are delivered to
1:  * <code>SynchronousBundleListener</code>s and <code>BundleListener</code>s
1:  * when a change occurs in a bundle's lifecycle. A type code is used to identify
1:  * the event type for future extendability.
1:  * 
1:  * <p>
1:  * OSGi Alliance reserves the right to extend the set of types.
1:  * 
1:  * @Immutable
1:  * @see BundleListener
1:  * @see SynchronousBundleListener
1:  * @version $Revision: 1.19 $
1:  */
1: 
1: public class BundleEvent extends EventObject {
1: 	static final long		serialVersionUID	= 4080640865971756012L;
1: 	/**
1: 	 * Bundle that had a change occur in its lifecycle.
1: 	 */
1: 	private final Bundle	bundle;
1: 
1: 	/**
1: 	 * Type of bundle lifecycle change.
1: 	 */
1: 	private final int		type;
1: 
1: 	/**
1: 	 * The bundle has been installed.
1: 	 * <p>
1: 	 * The value of <code>INSTALLED</code> is 0x00000001.
1: 	 * 
1: 	 * @see BundleContext#installBundle(String)
1: 	 */
1: 	public final static int	INSTALLED			= 0x00000001;
1: 
1: 	/**
1: 	 * The bundle has been started.
1: 	 * <p>
1: 	 * The bundle's
1: 	 * {@link BundleActivator#start(BundleContext) BundleActivator start} method
1: 	 * has been executed if the bundle has a bundle activator class.
1: 	 * <p>
1: 	 * The value of <code>STARTED</code> is 0x00000002.
1: 	 * 
1: 	 * @see Bundle#start()
1: 	 */
1: 	public final static int	STARTED				= 0x00000002;
1: 
1: 	/**
1: 	 * The bundle has been stopped.
1: 	 * <p>
1: 	 * The bundle's
1: 	 * {@link BundleActivator#stop(BundleContext) BundleActivator stop} method
1: 	 * has been executed if the bundle has a bundle activator class.
1: 	 * <p>
1: 	 * The value of <code>STOPPED</code> is 0x00000004.
1: 	 * 
1: 	 * @see Bundle#stop()
1: 	 */
1: 	public final static int	STOPPED				= 0x00000004;
1: 
1: 	/**
1: 	 * The bundle has been updated.
1: 	 * <p>
1: 	 * The value of <code>UPDATED</code> is 0x00000008.
1: 	 * 
1: 	 * @see Bundle#update()
1: 	 */
1: 	public final static int	UPDATED				= 0x00000008;
1: 
1: 	/**
1: 	 * The bundle has been uninstalled.
1: 	 * <p>
1: 	 * The value of <code>UNINSTALLED</code> is 0x00000010.
1: 	 * 
1: 	 * @see Bundle#uninstall
1: 	 */
1: 	public final static int	UNINSTALLED			= 0x00000010;
1: 
1: 	/**
1: 	 * The bundle has been resolved.
1: 	 * <p>
1: 	 * The value of <code>RESOLVED</code> is 0x00000020.
1: 	 * 
1: 	 * @see Bundle#RESOLVED
1: 	 * @since 1.3
1: 	 */
1: 	public final static int	RESOLVED			= 0x00000020;
1: 
1: 	/**
1: 	 * The bundle has been unresolved.
1: 	 * <p>
1: 	 * The value of <code>UNRESOLVED</code> is 0x00000040.
1: 	 * 
1: 	 * @see Bundle#INSTALLED
1: 	 * @since 1.3
1: 	 */
1: 	public final static int	UNRESOLVED			= 0x00000040;
1: 
1: 	/**
1: 	 * The bundle is about to be activated.
1: 	 * <p>
1: 	 * The bundle's
1: 	 * {@link BundleActivator#start(BundleContext) BundleActivator start} method
1: 	 * is about to be called if the bundle has a bundle activator class. This
1: 	 * event is only delivered to {@link SynchronousBundleListener}s. It is not
1: 	 * delivered to <code>BundleListener</code>s.
1: 	 * <p>
1: 	 * The value of <code>STARTING</code> is 0x00000080.
1: 	 * 
1: 	 * @see Bundle#start()
1: 	 * @since 1.3
1: 	 */
1: 	public final static int	STARTING			= 0x00000080;
1: 
1: 	/**
1: 	 * The bundle is about to deactivated.
1: 	 * <p>
1: 	 * The bundle's
1: 	 * {@link BundleActivator#stop(BundleContext) BundleActivator stop} method
1: 	 * is about to be called if the bundle has a bundle activator class. This
1: 	 * event is only delivered to {@link SynchronousBundleListener}s. It is not
1: 	 * delivered to <code>BundleListener</code>s.
1: 	 * <p>
1: 	 * The value of <code>STOPPING</code> is 0x00000100.
1: 	 * 
1: 	 * @see Bundle#stop()
1: 	 * @since 1.3
1: 	 */
1: 	public final static int	STOPPING			= 0x00000100;
1: 
1: 	/**
1: 	 * The bundle will be lazily activated.
1: 	 * <p>
1: 	 * The bundle has a {@link Constants#ACTIVATION_LAZY lazy activation policy}
1: 	 * and is waiting to be activated. It is now in the
1: 	 * {@link Bundle#STARTING STARTING} state and has a valid
1: 	 * <code>BundleContext</code>. This event is only delivered to
1: 	 * {@link SynchronousBundleListener}s. It is not delivered to
1: 	 * <code>BundleListener</code>s.
1: 	 * <p>
1: 	 * The value of <code>LAZY_ACTIVATION</code> is 0x00000200.
1: 	 * 
1: 	 * @since 1.4
1: 	 */
1: 	public final static int	LAZY_ACTIVATION		= 0x00000200;
1: 
1: 	/**
1: 	 * Creates a bundle event of the specified type.
1: 	 * 
1: 	 * @param type The event type.
1: 	 * @param bundle The bundle which had a lifecycle change.
1: 	 */
1: 
1: 	public BundleEvent(int type, Bundle bundle) {
1: 		super(bundle);
1: 		this.bundle = bundle;
1: 		this.type = type;
1: 	}
1: 
1: 	/**
1: 	 * Returns the bundle which had a lifecycle change. This bundle is the
1: 	 * source of the event.
1: 	 * 
1: 	 * @return The bundle that had a change occur in its lifecycle.
1: 	 */
1: 	public Bundle getBundle() {
1: 		return bundle;
1: 	}
1: 
1: 	/**
1: 	 * Returns the type of lifecyle event. The type values are:
1: 	 * <ul>
1: 	 * <li>{@link #INSTALLED}
1: 	 * <li>{@link #RESOLVED}
1: 	 * <li>{@link #LAZY_ACTIVATION}
1: 	 * <li>{@link #STARTING}
1: 	 * <li>{@link #STARTED}
1: 	 * <li>{@link #STOPPING}
1: 	 * <li>{@link #STOPPED}
1: 	 * <li>{@link #UPDATED}
1: 	 * <li>{@link #UNRESOLVED}
1: 	 * <li>{@link #UNINSTALLED}
1: 	 * </ul>
1: 	 * 
1: 	 * @return The type of lifecycle event.
1: 	 */
1: 
1: 	public int getType() {
1: 		return type;
1: 	}
1: }
============================================================================