1:f047724: /*
4:f047724: 
1:f047724:    Derby - Class 
1:f047724:        org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest
1:f047724: 
1:f047724:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f047724:    contributor license agreements.  See the NOTICE file distributed with
1:f047724:    this work for additional information regarding copyright ownership.
1:f047724:    The ASF licenses this file to You under the Apache License, Version 2.0
1:f047724:    (the "License"); you may not use this file except in compliance with
1:f047724:    the License.  You may obtain a copy of the License at
1:f047724: 
1:f047724:       http://www.apache.org/licenses/LICENSE-2.0
1:f047724: 
1:f047724:    Unless required by applicable law or agreed to in writing, software
1:f047724:    distributed under the License is distributed on an "AS IS" BASIS,
1:f047724:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f047724:    See the License for the specific language governing permissions and
1:f047724:    limitations under the License.
1:f047724: 
1:f047724:  */
1:f047724: 
1:f047724: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:f047724: 
1:f047724: import java.sql.CallableStatement;
1:f047724: import java.sql.Connection;
1:f047724: import java.sql.DriverManager;
1:f047724: import java.sql.SQLException;
1:f047724: import javax.sql.DataSource;
1:f047724: import junit.framework.Test;
1:f047724: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f047724: import org.apache.derbyTesting.junit.JDBC;
1:f047724: import org.apache.derbyTesting.junit.JDBCDataSource;
1:f047724: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:f047724: import org.apache.derbyTesting.junit.TestConfiguration;
1:f047724: 
1:f047724: 
1:f047724: public class InvalidLDAPServerAuthenticationTest extends BaseJDBCTestCase {
1:f047724: 
1:f047724:     /** Creates a new instance of the Test */
1:f047724:     public InvalidLDAPServerAuthenticationTest(String name) {
1:f047724:         super(name);
2:f047724:     }
1:f047724: 
1:f047724:     /**
1:f047724:      * Ensure all connections are not in auto commit mode.
1:f047724:      */
1:f047724:     protected void initializeConnection(Connection conn) throws SQLException {
1:f047724:         conn.setAutoCommit(false);
1:f047724:     }
1:f047724: 
1:f047724:     public static Test suite() {
1:f047724:         if (JDBC.vmSupportsJSR169())
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "InvalidLDAPServerAuthenticationTest - cannot" +
1:f047724:                 " run with JSR169 - missing functionality for " +
1:f047724:                 "org.apache.derby.iapi.jdbc.AuthenticationService");
1:f047724:         
1:f047724:         // security manager would choke attempting to resolve to the invalid
1:f047724:         // LDAPServer, so run without
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("InvalidLDAPServerAuthenticationTest");
1:1ae02c9: 
1:f047724:         suite.addTest(SecurityManagerSetup.noSecurityManager(baseSuite(
1:f047724:                 "testInvalidLDAPServerConnectionError")));
1:f047724:         suite.addTest(TestConfiguration.clientServerDecorator(
1:f047724:                 SecurityManagerSetup.noSecurityManager(
1:f047724:                 baseSuite("testInvalidLDAPServerConnectionError"))));
1:f047724:         return suite;            
1:f047724:     }
1:f047724: 
1:f047724:     public static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:f047724:         Test test = new InvalidLDAPServerAuthenticationTest("testInvalidLDAPServerConnectionError");
1:f047724:         suite.addTest(test);
1:f047724: 
1:f047724:         // This test needs to run in a new single use database without connect
1:f047724:         // for shutdown after, as we're going to make the database unusable
1:f047724:         return TestConfiguration.singleUseDatabaseDecoratorNoShutdown(suite);
1:f047724:     }
1:f047724: 
1:f047724:     protected void setDatabaseProperty(
1:f047724:             String propertyName, String value, Connection conn) 
1:f047724:     throws SQLException {
1:f047724:         CallableStatement setDBP =  conn.prepareCall(
1:f047724:         "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:f047724:         setDBP.setString(1, propertyName);
1:f047724:         setDBP.setString(2, value);
1:f047724:         setDBP.execute();
1:f047724:         setDBP.close();
1:f047724:     }
1:f047724: 
1:f047724:     public void testInvalidLDAPServerConnectionError() throws SQLException {
1:f047724:         // setup 
1:f047724:         Connection conn = getConnection();
1:f047724:         // set the ldap properties
1:f047724:         setDatabaseProperty("derby.connection.requireAuthentication", "true", conn);
1:f047724:         setDatabaseProperty("derby.authentication.provider", "LDAP", conn);
1:69333bd:         setDatabaseProperty("derby.authentication.server", "noSuchServer.invalid", conn);
1:f047724:         setDatabaseProperty("derby.authentication.ldap.searchBase", "o=dnString", conn);
1:f047724:         setDatabaseProperty("derby.authentication.ldap.searchFilter","(&(objectClass=inetOrgPerson)(uid=%USERNAME%))", conn);
1:f047724:         commit();
1:f047724:         conn.setAutoCommit(true);
1:f047724:         conn.close();
1:f047724:         // shutdown the database as system, so the properties take effect
1:f047724:         TestConfiguration.getCurrent().shutdownDatabase();
1:f047724:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:f047724:         
1:f047724:         // actual test. 
1:f047724:         // first, try datasource connection
1:f047724:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:c35e4f0: 
1:f047724:         try {
1:f047724:             ds.getConnection();
1:f047724:             fail("expected java.net.UnknownHostException for datasource");
1:f047724:         } catch (SQLException se) {
1:c35e4f0:             if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:                 assertSQLState("08004", se);
1:c35e4f0:                 // with network server, the java.net.UnknownHostException will
1:c35e4f0:                 // be in derby.log, the client only gets a 08004 and somewhat
1:c35e4f0:                 // misleading warning ('Reason: userid or password invalid')
1:c35e4f0:                 println( "Saw SQLException with message = " + se.getMessage() );
1:c35e4f0: 
1:c35e4f0:                 if (usingEmbedded()) {
1:c35e4f0:                     assertTrue(se.getMessage().
1:c35e4f0:                                indexOf("java.net.UnknownHostException") > 1);
1:c35e4f0:                 }
1:c35e4f0:             } else {
1:c35e4f0:                 // Expect boot to fail, LDAP authentication requires JNDI
1:c35e4f0:                 assertSQLState("XJ040", se);
1:ea335da:             }
1:f047724:         }
1:c35e4f0: 
1:f047724:         // driver manager connection
1:f047724:         String url2 = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c35e4f0: 
1:f047724:         try {
1:f047724:             DriverManager.getConnection(url2,"user","password").close();
1:f047724:             fail("expected java.net.UnknownHostException for driver");
1:f047724:         } catch (SQLException se) {
1:c35e4f0:             if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:                 assertSQLState("08004", se);
1:c35e4f0:                 // with network server, the java.net.UnknownHostException will
1:c35e4f0:                 // be in derby.log, the client only gets a 08004 and somewhat
1:c35e4f0:                 // misleading warning ('Reason: userid or password invalid')
1:c35e4f0:                 if (usingEmbedded()) {
1:c35e4f0:                     assertTrue(se.getMessage().
1:c35e4f0:                                indexOf("java.net.UnknownHostException") > 1);
1:c35e4f0:                 }
1:c35e4f0:             } else {
1:c35e4f0:                 // Expect boot to fail, LDAP authentication requires JNDI
1:c35e4f0:                 assertSQLState("XJ040", se);
1:c35e4f0:             }
1:f047724:         }
1:f047724:         
1:f047724:         // we need to shutdown the system, or the failed connections
1:f047724:         // cling to db.lck causing cleanup to fail.
1:f047724:         // we *can* shutdown because we don't have authentication required
1:f047724:         // set at system level (only database level).
1:f047724:         shutdownSystem();
1:f047724:     }
1:f047724:     
1:f047724:     protected void shutdownSystem()throws SQLException {
1:f047724:         DataSource ds;
3:f047724:         if (usingEmbedded())
1:ea335da:         {
1:f047724:             ds = JDBCDataSource.getDataSource();
1:f047724:             JDBCDataSource.clearStringBeanProperty(ds, "databaseName");
1:f047724:         }
1:f047724:         else
2:f047724:         {
1:f047724:             // note: with network server/client, you can't set the databaseName
1:f047724:             // to null, that results in error 08001 - Required DataSource
1:f047724:             // property databaseName not set.
1:f047724:             // so, we rely on passing of an empty string for databaseName,
1:f047724:             // which in the current code is interpreted as system shutdown.
1:f047724:             ds = JDBCDataSource.getDataSource("");
1:f047724:         }
1:f047724:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:f047724:         try {
1:f047724:             ds.getConnection();
1:f047724:         } catch (SQLException e) {
1:f047724:             //do nothing;
1:69333bd:         }
1:f047724:     }
1:f047724: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
1:                 "InvalidLDAPServerAuthenticationTest - cannot" +
1:         BaseTestSuite suite =
1:             new BaseTestSuite("InvalidLDAPServerAuthenticationTest");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (JDBC.vmSupportsJNDI()) {
1:                 assertSQLState("08004", se);
1:                 // with network server, the java.net.UnknownHostException will
1:                 // be in derby.log, the client only gets a 08004 and somewhat
1:                 // misleading warning ('Reason: userid or password invalid')
1:                 println( "Saw SQLException with message = " + se.getMessage() );
1: 
1:                 if (usingEmbedded()) {
1:                     assertTrue(se.getMessage().
1:                                indexOf("java.net.UnknownHostException") > 1);
1:                 }
1:             } else {
1:                 // Expect boot to fail, LDAP authentication requires JNDI
1:                 assertSQLState("XJ040", se);
1: 
1: 
1:             if (JDBC.vmSupportsJNDI()) {
1:                 assertSQLState("08004", se);
1:                 // with network server, the java.net.UnknownHostException will
1:                 // be in derby.log, the client only gets a 08004 and somewhat
1:                 // misleading warning ('Reason: userid or password invalid')
1:                 if (usingEmbedded()) {
1:                     assertTrue(se.getMessage().
1:                                indexOf("java.net.UnknownHostException") > 1);
1:                 }
1:             } else {
1:                 // Expect boot to fail, LDAP authentication requires JNDI
1:                 assertSQLState("XJ040", se);
1:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ea335da
/////////////////////////////////////////////////////////////////////////
0:             println( "Saw SQLException with message = " + se.getMessage() );
1:             {
1:             }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:69333bd
/////////////////////////////////////////////////////////////////////////
1:         setDatabaseProperty("derby.authentication.server", "noSuchServer.invalid", conn);
/////////////////////////////////////////////////////////////////////////
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f047724
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class 
1:        org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: 
1: import javax.sql.DataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: public class InvalidLDAPServerAuthenticationTest extends BaseJDBCTestCase {
1: 
1:     /** Creates a new instance of the Test */
1:     public InvalidLDAPServerAuthenticationTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Ensure all connections are not in auto commit mode.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:     }
1: 
1:     public static Test suite() {
1:         if (JDBC.vmSupportsJSR169())
0:             return new TestSuite("InvalidLDAPServerAuthenticationTest - cannot" +
1:                 " run with JSR169 - missing functionality for " +
1:                 "org.apache.derby.iapi.jdbc.AuthenticationService");
1:         
1:         // security manager would choke attempting to resolve to the invalid
1:         // LDAPServer, so run without
0:         TestSuite suite = new TestSuite("InvalidLDAPServerAuthenticationTest");
1:         suite.addTest(SecurityManagerSetup.noSecurityManager(baseSuite(
1:                 "testInvalidLDAPServerConnectionError")));
1:         suite.addTest(TestConfiguration.clientServerDecorator(
1:                 SecurityManagerSetup.noSecurityManager(
1:                 baseSuite("testInvalidLDAPServerConnectionError"))));
1:         return suite;            
1:     }
1: 
1:     public static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         Test test = new InvalidLDAPServerAuthenticationTest("testInvalidLDAPServerConnectionError");
1:         suite.addTest(test);
1: 
1:         // This test needs to run in a new single use database without connect
1:         // for shutdown after, as we're going to make the database unusable
1:         return TestConfiguration.singleUseDatabaseDecoratorNoShutdown(suite);
1:     }
1: 
1:     protected void setDatabaseProperty(
1:             String propertyName, String value, Connection conn) 
1:     throws SQLException {
1:         CallableStatement setDBP =  conn.prepareCall(
1:         "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:         setDBP.setString(1, propertyName);
1:         setDBP.setString(2, value);
1:         setDBP.execute();
1:         setDBP.close();
1:     }
1: 
1:     public void testInvalidLDAPServerConnectionError() throws SQLException {
1:         // setup 
1:         Connection conn = getConnection();
1:         // set the ldap properties
1:         setDatabaseProperty("derby.connection.requireAuthentication", "true", conn);
1:         setDatabaseProperty("derby.authentication.provider", "LDAP", conn);
0:         setDatabaseProperty("derby.authentication.server", "noSuchServer", conn);
1:         setDatabaseProperty("derby.authentication.ldap.searchBase", "o=dnString", conn);
1:         setDatabaseProperty("derby.authentication.ldap.searchFilter","(&(objectClass=inetOrgPerson)(uid=%USERNAME%))", conn);
1:         commit();
1:         conn.setAutoCommit(true);
1:         conn.close();
1:         // shutdown the database as system, so the properties take effect
1:         TestConfiguration.getCurrent().shutdownDatabase();
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         
1:         // actual test. 
1:         // first, try datasource connection
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         try {
1:             ds.getConnection();
1:             fail("expected java.net.UnknownHostException for datasource");
1:         } catch (SQLException se) {
0:             assertSQLState("08004", se);
0:             // with network server, the java.net.UnknownHostException will be in 
0:             // derby.log, the client only gets a 08004 and somewhat misleading
0:             // warning ('Reason: userid or password invalid')
1:             if (usingEmbedded())
0:                 assertTrue(se.getMessage().indexOf("java.net.UnknownHostException")>1);
1:         }
1:         // driver manager connection
1:         String url2 = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         try {
1:             DriverManager.getConnection(url2,"user","password").close();
1:             fail("expected java.net.UnknownHostException for driver");
1:         } catch (SQLException se) {
0:             assertSQLState("08004", se);
0:             // with network server, the java.net.UnknownHostException will be in 
0:             // derby.log, the client only gets a 08004 and somewhat misleading
0:             // warning ('Reason: userid or password invalid')
1:             if (usingEmbedded())
0:                 assertTrue(se.getMessage().indexOf("java.net.UnknownHostException")>1);
1:         }
1:         
1:         // we need to shutdown the system, or the failed connections
1:         // cling to db.lck causing cleanup to fail.
1:         // we *can* shutdown because we don't have authentication required
1:         // set at system level (only database level).
1:         shutdownSystem();
1:     }
1:     
1:     protected void shutdownSystem()throws SQLException {
1:         DataSource ds;
1:         if (usingEmbedded())
1:         {
1:             ds = JDBCDataSource.getDataSource();
1:             JDBCDataSource.clearStringBeanProperty(ds, "databaseName");
1:         }
1:         else
1:         {
1:             // note: with network server/client, you can't set the databaseName
1:             // to null, that results in error 08001 - Required DataSource
1:             // property databaseName not set.
1:             // so, we rely on passing of an empty string for databaseName,
1:             // which in the current code is interpreted as system shutdown.
1:             ds = JDBCDataSource.getDataSource("");
1:         }
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         try {
1:             ds.getConnection();
1:         } catch (SQLException e) {
1:             //do nothing;
1:         }
1:     }
1: }
============================================================================