1:4df9f63: /*
5:4df9f63: 
1:4df9f63: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.wisconsin
1:4df9f63: 
1:dff95a1: Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1: contributor license agreements.  See the NOTICE file distributed with
1:dff95a1: this work for additional information regarding copyright ownership.
1:dff95a1: The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1: (the "License"); you may not use this file except in compliance with
1:dff95a1: the License.  You may obtain a copy of the License at
1:4df9f63: 
1:4df9f63:    http://www.apache.org/licenses/LICENSE-2.0
1:4df9f63: 
1:4df9f63: Unless required by applicable law or agreed to in writing, software
1:4df9f63: distributed under the License is distributed on an "AS IS" BASIS,
1:4df9f63: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4df9f63: See the License for the specific language governing permissions and
1:4df9f63: limitations under the License.
1:4df9f63: 
1:4df9f63: */
1:4df9f63: package org.apache.derbyTesting.functionTests.tests.lang;
1:4df9f63: 
1:4df9f63: import java.io.BufferedInputStream;
1:4df9f63: import java.io.FileInputStream;
1:4df9f63: import java.io.FileNotFoundException;
1:2d14fe7: import java.io.IOException;
1:2d14fe7: import java.io.InputStream;
1:2d14fe7: import java.net.URL;
1:2d14fe7: import java.security.AccessController;
1:2d14fe7: import java.security.PrivilegedActionException;
1:4df9f63: import java.sql.Connection;
1:ffb23e9: import java.sql.PreparedStatement;
1:4df9f63: import java.sql.SQLException;
1:4df9f63: import java.sql.Statement;
1:4df9f63: 
1:4df9f63: import org.apache.derby.impl.tools.ij.utilMain;
1:4df9f63: import org.apache.derby.tools.ij;
1:2d14fe7: 
1:4df9f63: 
1:4df9f63: public class wisconsin {
1:2d14fe7: 
1:4df9f63: 
1:4df9f63: 	public static void main(String[] args) throws Throwable{
1:4df9f63: 		ij.getPropertyArg(args); 
1:4df9f63:         Connection conn = ij.startJBMS();
1:4df9f63:         
1:4df9f63:         conn.setAutoCommit(false);
1:4df9f63:         conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:4df9f63:         
1:106ea47:         createTables(conn, true);
1:4df9f63:         
1:4df9f63:         BufferedInputStream inStream;
1:2d14fe7:         String resource = "org/apache/derbyTesting/functionTests/tests/" +
1:2d14fe7:                 "lang/wisc_setup.sql";  
1:2d14fe7:         // set input stream
1:2d14fe7:         URL sql = getTestResource(resource);
1:2d14fe7:         InputStream sqlIn = openTestResource(sql);
1:2d14fe7:         if (sqlIn == null ) {
1:2d14fe7:             throw new Exception("SQL Resource missing:" +
1:2d14fe7:                     resource);
1:2d14fe7:         }
1:4df9f63: 
1:2d14fe7:         inStream = new BufferedInputStream(sqlIn, 
1:2d14fe7:                 utilMain.BUFFEREDFILESIZE);		
1:4df9f63: 
1:251ec97: 		ij.runScript(conn, inStream, "US-ASCII",
1:2d14fe7: 			     System.out, (String) null );
1:251ec97: 		conn.commit();
1:4df9f63: 	}
1:2d14fe7: 	
1:106ea47: 	public static void createTables(Connection conn, boolean compress)
1:106ea47: 			throws SQLException {
1:130cfe6:                 createTables(conn, compress, 10000);
1:4df9f63:         }
1:130cfe6: 	public static void createTables(Connection conn, boolean compress, int numRows)
1:130cfe6: 			throws SQLException {
1:106ea47: 
1:4df9f63: 		Statement stmt = conn.createStatement();
1:4df9f63: 		
1:4df9f63: 		stmt.execute("create table TENKTUP1 ( unique1 int not null, " +
1:4df9f63: 											 "unique2 int not null, " +
1:4df9f63: 											 "two int, " +
1:4df9f63: 											 "four int, " +
1:4df9f63: 											 "ten int, " +
1:4df9f63: 											 "twenty int, " +
1:4df9f63: 											 "onePercent int, " +
1:4df9f63: 											 "tenPercent int, " +
1:4df9f63: 											 "twentyPercent int, " +
1:4df9f63: 											 "fiftyPercent int, " +
1:4df9f63: 											 "unique3 int, " +
1:4df9f63: 											 "evenOnePercent int, " +
1:4df9f63: 											 "oddOnePercent int, " +
1:4df9f63: 											 "stringu1 char(52) not null, " +
1:4df9f63: 											 "stringu2 char(52) not null, " +
1:4df9f63: 											 "string4 char(52) )");
1:130cfe6: 		//--insert numRows rows into TENKTUP1
1:4df9f63: 		WISCInsert wi = new WISCInsert();
1:130cfe6: 		wi.doWISCInsert(numRows, "TENKTUP1", conn);
1:4df9f63: 		
1:4df9f63: 		stmt.execute("create unique index TK1UNIQUE1 on TENKTUP1(unique1)");
1:4df9f63: 		stmt.execute("create unique index TK1UNIQUE2 on TENKTUP1(unique2)");
1:4df9f63: 		stmt.execute("create index TK1TWO on TENKTUP1(two)");
1:4df9f63: 		stmt.execute("create index TK1FOUR on TENKTUP1(four)");
1:4df9f63: 		stmt.execute("create index TK1TEN on TENKTUP1(ten)");
1:4df9f63: 		stmt.execute("create index TK1TWENTY on TENKTUP1(twenty)");
1:4df9f63: 		stmt.execute("create index TK1ONEPERCENT on TENKTUP1(onePercent)");
1:4df9f63: 		stmt.execute("create index TK1TWENTYPERCENT on TENKTUP1(twentyPercent)");
1:4df9f63: 		stmt.execute("create index TK1EVENONEPERCENT on TENKTUP1(evenOnePercent)");
1:4df9f63: 		stmt.execute("create index TK1ODDONEPERCENT on TENKTUP1(oddOnePercent)");
1:4df9f63: 		stmt.execute("create unique index TK1STRINGU1 on TENKTUP1(stringu1)");
1:4df9f63: 		stmt.execute("create unique index TK1STRINGU2 on TENKTUP1(stringu2)");
1:4df9f63: 		stmt.execute("create index TK1STRING4 on TENKTUP1(string4)");
1:4df9f63: 		
1:4df9f63: 		stmt.execute("create table TENKTUP2 (unique1 int not null, " +
1:4df9f63: 											"unique2 int not null, " +
1:4df9f63: 											"two int, " +
1:4df9f63: 											"four int, " +
1:4df9f63: 											"ten int, " +
1:4df9f63: 											"twenty int, " +
1:4df9f63: 											"onePercent int, " +
1:4df9f63: 											"tenPercent int, " +
1:4df9f63: 											"twentyPercent int, " +
1:4df9f63: 											"fiftyPercent int, " +
1:4df9f63: 											"unique3 int, " +
1:4df9f63: 											"evenOnePercent int, " +
1:4df9f63: 											"oddOnePercent int, " +
1:4df9f63: 											"stringu1 char(52), " +
1:4df9f63: 											"stringu2 char(52), " +
1:4df9f63: 											"string4 char(52) )");
1:130cfe6: 		//-- insert numRows rows into TENKTUP2
1:4df9f63: 		wi = new WISCInsert();
1:130cfe6: 		wi.doWISCInsert(numRows, "TENKTUP2", conn);
1:4df9f63: 		
1:4df9f63: 		stmt.execute("create unique index TK2UNIQUE1 on TENKTUP2(unique1)");
1:4df9f63: 		stmt.execute("create unique index TK2UNIQUE2 on TENKTUP2(unique2)");
1:4df9f63: 		
1:4df9f63: 		stmt.execute("create table ONEKTUP ( unique1 int not null, " +
1:4df9f63: 											"unique2 int not null, " +
1:4df9f63: 											"two int, " +
1:4df9f63: 											"four int, " +
1:4df9f63: 											"ten int, " +
1:4df9f63: 											"twenty int, " +
1:4df9f63: 											"onePercent int, " +
1:4df9f63: 											"tenPercent int, " +
1:4df9f63: 											"twentyPercent int, " +
1:4df9f63: 											"fiftyPercent int, " +
1:4df9f63: 											"unique3 int, " +
1:4df9f63: 											"evenOnePercent int, " +
1:4df9f63: 											"oddOnePercent int, " +
1:4df9f63: 											"stringu1 char(52), " +
1:4df9f63: 											"stringu2 char(52), " +
1:4df9f63: 											"string4 char(52) )");
1:4df9f63: 		
1:4df9f63: 		//-- insert 1000 rows into ONEKTUP
1:4df9f63: 		wi = new WISCInsert();
1:4df9f63: 		wi.doWISCInsert(1000, "ONEKTUP", conn);
1:4df9f63: 		
1:4df9f63: 		stmt.execute("create unique index ONEKUNIQUE1 on ONEKTUP(unique1)");
1:4df9f63: 		stmt.execute("create unique index ONEKUNIQUE2 on ONEKTUP(unique2)");
1:4df9f63: 
1:4df9f63: 		stmt.execute("create table BPRIME (	 unique1 int, " +
1:4df9f63: 										  	"unique2 int, " +
1:4df9f63: 											"two int, " +
1:4df9f63: 											"four int, " +
1:4df9f63: 											"ten int, " +
1:4df9f63: 											"twenty int, " +
1:4df9f63: 											"onePercent int, " +
1:4df9f63: 											"tenPercent int, " +
1:4df9f63: 											"twentyPercent int, " +
1:4df9f63: 											"fiftyPercent int, " +
1:4df9f63: 											"unique3 int, " +
1:4df9f63: 											"evenOnePercent int, " +
1:4df9f63: 											"oddOnePercent int, " +
1:4df9f63: 											"stringu1 char(52), " +
1:4df9f63: 											"stringu2 char(52), " +
1:4df9f63: 											"string4 char(52))");
1:4df9f63: 
1:4df9f63: 		stmt.execute("insert into BPRIME select * from TENKTUP2 where TENKTUP2.unique2 < 1000");
1:106ea47: 
1:4df9f63: 		conn.commit();
1:4df9f63: 
1:106ea47: 		if (!compress) {
1:106ea47: 			return;
1:106ea47: 		}
1:106ea47: 
1:ffb23e9: 		PreparedStatement ps2 = conn.prepareStatement
1:ffb23e9: 			("call SYSCS_UTIL.SYSCS_COMPRESS_TABLE(?, ?, ?)");
1:ffb23e9: 		ps2.setString(1, "APP");
1:ffb23e9: 		ps2.setString(2, "BPRIME");
1:ffb23e9: 		ps2.setInt(3, 0);
1:ffb23e9: 		ps2.executeUpdate();
1:ffb23e9: 		conn.commit();
1:4df9f63: 
1:ffb23e9: 		ps2.setString(1, "APP");
1:ffb23e9: 		ps2.setString(2, "TENKTUP1");
1:ffb23e9: 		ps2.setInt(3, 0);
1:ffb23e9: 		ps2.executeUpdate();
1:ffb23e9: 		conn.commit();
1:4df9f63: 		
1:ffb23e9: 		ps2.setString(1, "APP");
1:ffb23e9: 		ps2.setString(2, "TENKTUP2");
1:ffb23e9: 		ps2.setInt(3, 0);
1:ffb23e9: 		ps2.executeUpdate();
1:ffb23e9: 		conn.commit();
1:4df9f63: 
1:ffb23e9: 		ps2.setString(1, "APP");
1:ffb23e9: 		ps2.setString(2, "ONEKTUP");
1:ffb23e9: 		ps2.setInt(3, 0);
1:ffb23e9: 		ps2.executeUpdate();
1:ffb23e9: 		conn.commit();
1:4df9f63: 	}
1:4df9f63: 	
1:4df9f63: 	
1:2d14fe7:     /**
1:2d14fe7:      * Open the URL for a a test resource, e.g. a policy
1:2d14fe7:      * file or a SQL script.
1:2d14fe7:      * @param url URL obtained from getTestResource
1:2d14fe7:      * @return An open stream
1:2d14fe7:     */
1:2d14fe7:     protected static InputStream openTestResource(final URL url)
1:2d14fe7:         throws PrivilegedActionException
1:2d14fe7:     {
1:3f5c48a:         return AccessController.doPrivileged
1:3f5c48a:         (new java.security.PrivilegedExceptionAction<InputStream>(){
1:2d14fe7: 
1:3f5c48a:             public InputStream run() throws IOException {
1:2d14fe7:             return url.openStream();
1:2d14fe7: 
1:2d14fe7:             }
1:2d14fe7: 
1:2d14fe7:         }
1:2d14fe7:          );     
1:2d14fe7:     }
1:2d14fe7:     
1:2d14fe7:     /**
1:2d14fe7:      * Obtain the URL for a test resource, e.g. a policy
1:2d14fe7:      * file or a SQL script.
1:2d14fe7:      * @param name Resource name, typically - org.apache.derbyTesing.something
1:2d14fe7:      * @return URL to the resource, null if it does not exist.
1:2d14fe7:      */
1:2d14fe7:     protected static URL getTestResource(final String name)
1:2d14fe7:     {
1:2d14fe7: 
1:3f5c48a:     return AccessController.doPrivileged
1:3f5c48a:         (new java.security.PrivilegedAction<URL>(){
1:2d14fe7: 
1:3f5c48a:             public URL run(){
1:2d14fe7:             return this.getClass().getClassLoader().
1:2d14fe7:                 getResource(name);
1:2d14fe7: 
1:2d14fe7:             }
1:2d14fe7: 
1:2d14fe7:         }
1:2d14fe7:          );
1:2d14fe7:     }  
1:4df9f63: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged
1:         (new java.security.PrivilegedExceptionAction<InputStream>(){
1:             public InputStream run() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     return AccessController.doPrivileged
1:         (new java.security.PrivilegedAction<URL>(){
1:             public URL run(){
commit:106ea47
/////////////////////////////////////////////////////////////////////////
1:         createTables(conn, true);
/////////////////////////////////////////////////////////////////////////
1: 	public static void createTables(Connection conn, boolean compress)
1: 			throws SQLException {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 		if (!compress) {
1: 			return;
1: 		}
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2d14fe7
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         String resource = "org/apache/derbyTesting/functionTests/tests/" +
1:                 "lang/wisc_setup.sql";  
1:         // set input stream
1:         URL sql = getTestResource(resource);
1:         InputStream sqlIn = openTestResource(sql);
1:         if (sqlIn == null ) {
1:             throw new Exception("SQL Resource missing:" +
1:                     resource);
1:         }
1:         inStream = new BufferedInputStream(sqlIn, 
1:                 utilMain.BUFFEREDFILESIZE);		
1: 			     System.out, (String) null );
/////////////////////////////////////////////////////////////////////////
1: 	
1:     /**
1:      * Open the URL for a a test resource, e.g. a policy
1:      * file or a SQL script.
1:      * @param url URL obtained from getTestResource
1:      * @return An open stream
1:     */
1:     protected static InputStream openTestResource(final URL url)
1:         throws PrivilegedActionException
1:     {
0:         return (InputStream)AccessController.doPrivileged
0:         (new java.security.PrivilegedExceptionAction(){
1: 
0:             public Object run() throws IOException{
1:             return url.openStream();
1: 
1:             }
1: 
1:         }
1:          );     
1:     }
1:     
1:     /**
1:      * Obtain the URL for a test resource, e.g. a policy
1:      * file or a SQL script.
1:      * @param name Resource name, typically - org.apache.derbyTesing.something
1:      * @return URL to the resource, null if it does not exist.
1:      */
1:     protected static URL getTestResource(final String name)
1:     {
1: 
0:     return (URL)AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
1:             return this.getClass().getClassLoader().
1:                 getResource(name);
1: 
1:             }
1: 
1:         }
1:          );
1:     }  
commit:d0bd811
/////////////////////////////////////////////////////////////////////////
0: 		String filePath = "wisc_setup.sql";
commit:4df9f63
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.wisconsin
1: 
0: Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.FileInputStream;
1: import java.io.FileNotFoundException;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedInput;
0: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derby.impl.tools.ij.utilMain;
1: import org.apache.derby.tools.ij;
0: import java.util.Hashtable;
1: 
1: public class wisconsin {
1: 
1: 	public static void main(String[] args) throws Throwable{
1: 		ij.getPropertyArg(args); 
1:         Connection conn = ij.startJBMS();
1:         
1:         conn.setAutoCommit(false);
1:         conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:         
0:         createTables(conn);
1:         
0: 		utilMain	utilInstance;
0:         LocalizedInput is;
1:         BufferedInputStream inStream;
1:         
0: 		// set input stream
0: 		String filePath = "wisconsin.sql";
1: 
0: 		try 
0: 		{
0: 			inStream = new BufferedInputStream(new FileInputStream(filePath), 
0: 							utilMain.BUFFEREDFILESIZE);		
0: 		} catch (FileNotFoundException e)
0: 		{
0: 			System.out.println("unable to find input file "+filePath);
0: 			throw e;
1: 		}
0:         is = LocalizedResource.getInstance().getNewInput(inStream);
1: 
0: 		LocalizedInput [] in = { is };
0: 		LocalizedOutput out = new LocalizedOutput(System.out);
1: 		
1: 	
0: 		utilInstance = new utilMain(1, out, (Hashtable)null);
0: 		utilInstance.go(in, out, (java.util.Properties) null);
0: 		//log.flush();
0: 		out.flush();
1:         
1:         
1: 	}
1: 	
0: 	private static void createTables(Connection conn) throws SQLException{
1: 		Statement stmt = conn.createStatement();
1: 		
1: 		stmt.execute("create table TENKTUP1 ( unique1 int not null, " +
1: 											 "unique2 int not null, " +
1: 											 "two int, " +
1: 											 "four int, " +
1: 											 "ten int, " +
1: 											 "twenty int, " +
1: 											 "onePercent int, " +
1: 											 "tenPercent int, " +
1: 											 "twentyPercent int, " +
1: 											 "fiftyPercent int, " +
1: 											 "unique3 int, " +
1: 											 "evenOnePercent int, " +
1: 											 "oddOnePercent int, " +
1: 											 "stringu1 char(52) not null, " +
1: 											 "stringu2 char(52) not null, " +
1: 											 "string4 char(52) )");
0: 		//--insert 10000 rows into TENKTUP1
1: 		WISCInsert wi = new WISCInsert();
0: 		wi.doWISCInsert(10000, "TENKTUP1", conn);
1: 		
1: 		stmt.execute("create unique index TK1UNIQUE1 on TENKTUP1(unique1)");
1: 		stmt.execute("create unique index TK1UNIQUE2 on TENKTUP1(unique2)");
1: 		stmt.execute("create index TK1TWO on TENKTUP1(two)");
1: 		stmt.execute("create index TK1FOUR on TENKTUP1(four)");
1: 		stmt.execute("create index TK1TEN on TENKTUP1(ten)");
1: 		stmt.execute("create index TK1TWENTY on TENKTUP1(twenty)");
1: 		stmt.execute("create index TK1ONEPERCENT on TENKTUP1(onePercent)");
1: 		stmt.execute("create index TK1TWENTYPERCENT on TENKTUP1(twentyPercent)");
1: 		stmt.execute("create index TK1EVENONEPERCENT on TENKTUP1(evenOnePercent)");
1: 		stmt.execute("create index TK1ODDONEPERCENT on TENKTUP1(oddOnePercent)");
1: 		stmt.execute("create unique index TK1STRINGU1 on TENKTUP1(stringu1)");
1: 		stmt.execute("create unique index TK1STRINGU2 on TENKTUP1(stringu2)");
1: 		stmt.execute("create index TK1STRING4 on TENKTUP1(string4)");
1: 		
1: 		stmt.execute("create table TENKTUP2 (unique1 int not null, " +
1: 											"unique2 int not null, " +
1: 											"two int, " +
1: 											"four int, " +
1: 											"ten int, " +
1: 											"twenty int, " +
1: 											"onePercent int, " +
1: 											"tenPercent int, " +
1: 											"twentyPercent int, " +
1: 											"fiftyPercent int, " +
1: 											"unique3 int, " +
1: 											"evenOnePercent int, " +
1: 											"oddOnePercent int, " +
1: 											"stringu1 char(52), " +
1: 											"stringu2 char(52), " +
1: 											"string4 char(52) )");
0: 		//-- insert 10000 rows into TENKTUP2
1: 		wi = new WISCInsert();
0: 		wi.doWISCInsert(10000, "TENKTUP2", conn);
1: 		
1: 		stmt.execute("create unique index TK2UNIQUE1 on TENKTUP2(unique1)");
1: 		stmt.execute("create unique index TK2UNIQUE2 on TENKTUP2(unique2)");
1: 		
1: 		stmt.execute("create table ONEKTUP ( unique1 int not null, " +
1: 											"unique2 int not null, " +
1: 											"two int, " +
1: 											"four int, " +
1: 											"ten int, " +
1: 											"twenty int, " +
1: 											"onePercent int, " +
1: 											"tenPercent int, " +
1: 											"twentyPercent int, " +
1: 											"fiftyPercent int, " +
1: 											"unique3 int, " +
1: 											"evenOnePercent int, " +
1: 											"oddOnePercent int, " +
1: 											"stringu1 char(52), " +
1: 											"stringu2 char(52), " +
1: 											"string4 char(52) )");
1: 		
1: 		//-- insert 1000 rows into ONEKTUP
1: 		wi = new WISCInsert();
1: 		wi.doWISCInsert(1000, "ONEKTUP", conn);
1: 		
1: 		stmt.execute("create unique index ONEKUNIQUE1 on ONEKTUP(unique1)");
1: 		stmt.execute("create unique index ONEKUNIQUE2 on ONEKTUP(unique2)");
1: 
1: 		stmt.execute("create table BPRIME (	 unique1 int, " +
1: 										  	"unique2 int, " +
1: 											"two int, " +
1: 											"four int, " +
1: 											"ten int, " +
1: 											"twenty int, " +
1: 											"onePercent int, " +
1: 											"tenPercent int, " +
1: 											"twentyPercent int, " +
1: 											"fiftyPercent int, " +
1: 											"unique3 int, " +
1: 											"evenOnePercent int, " +
1: 											"oddOnePercent int, " +
1: 											"stringu1 char(52), " +
1: 											"stringu2 char(52), " +
1: 											"string4 char(52))");
1: 
1: 		stmt.execute("insert into BPRIME select * from TENKTUP2 where TENKTUP2.unique2 < 1000");
1: 
1: 		conn.commit();
1: 
1: 	}
1: 	
1: }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:130cfe6
/////////////////////////////////////////////////////////////////////////
1:                 createTables(conn, compress, 10000);
0:         }
1: 	public static void createTables(Connection conn, boolean compress, int numRows)
1: 			throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 		//--insert numRows rows into TENKTUP1
1: 		wi.doWISCInsert(numRows, "TENKTUP1", conn);
/////////////////////////////////////////////////////////////////////////
1: 		//-- insert numRows rows into TENKTUP2
1: 		wi.doWISCInsert(numRows, "TENKTUP2", conn);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:251ec97
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		ij.runScript(conn, inStream, "US-ASCII",
0: 				System.out, (String) null);
1: 		conn.commit();
commit:eb37b68
/////////////////////////////////////////////////////////////////////////
0:         utilInstance.initConnections();
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ffb23e9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
0: 		
1: 		PreparedStatement ps2 = conn.prepareStatement
1: 			("call SYSCS_UTIL.SYSCS_COMPRESS_TABLE(?, ?, ?)");
1: 		ps2.setString(1, "APP");
1: 		ps2.setString(2, "BPRIME");
1: 		ps2.setInt(3, 0);
1: 		ps2.executeUpdate();
1: 		conn.commit();
1: 		ps2.setString(1, "APP");
1: 		ps2.setString(2, "TENKTUP1");
1: 		ps2.setInt(3, 0);
1: 		ps2.executeUpdate();
1: 		conn.commit();
0: 		
1: 		ps2.setString(1, "APP");
1: 		ps2.setString(2, "TENKTUP2");
1: 		ps2.setInt(3, 0);
1: 		ps2.executeUpdate();
1: 		conn.commit();
0: 
1: 		ps2.setString(1, "APP");
1: 		ps2.setString(2, "ONEKTUP");
1: 		ps2.setInt(3, 0);
1: 		ps2.executeUpdate();
1: 		conn.commit();
============================================================================