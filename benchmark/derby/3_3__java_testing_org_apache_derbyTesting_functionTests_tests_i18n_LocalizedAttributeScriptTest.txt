1:678868b: /*
1:678868b:  *
1:678868b:  * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.LocalizedAttributeScriptTest
1:678868b:  *
1:678868b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:678868b:  * contributor license agreements.  See the NOTICE file distributed with
1:678868b:  * this work for additional information regarding copyright ownership.
1:678868b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:678868b:  * (the "License"); you may not use this file except in compliance with
1:678868b:  * the License.  You may obtain a copy of the License at
1:678868b:  *
1:678868b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:678868b:  *
1:678868b:  * Unless required by applicable law or agreed to in writing, 
1:678868b:  * software distributed under the License is distributed on an 
1:678868b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:678868b:  * either express or implied. See the License for the specific 
1:678868b:  * language governing permissions and limitations under the License.
2:678868b:  */
12:678868b: 
1:678868b: package org.apache.derbyTesting.functionTests.tests.i18n;
1:678868b: 
1:678868b: import java.util.Properties;
1:1ae02c9: import junit.framework.Test;
1:678868b: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:678868b: import org.apache.derbyTesting.junit.JDBC;
1:678868b: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:678868b: import org.apache.derbyTesting.junit.TestConfiguration;
1:678868b: 
2:678868b: /**
1:678868b:  * LocalizedAttributeScriptTest runs the ij scripts (.sql file) 
1:678868b:  * LocalizedConnectionAttribute.sql and compares the output to a canon file in
1:678868b:  * the standard master package.
1:678868b:  * <BR>
1:678868b:  * Its suite() method returns the test as an instance of
1:678868b:  * this class for the specific script wrapped in a decorator that sets the
1:678868b:  * specific encoding properties, surrounded by a clean database decorator.
1:678868b:  * <BR>
1:678868b:  * It can also be used as a command line program
1:678868b:  *
1:678868b:  */
1:678868b: public final class LocalizedAttributeScriptTest extends ScriptTestCase {
1:678868b:     
1:678868b:     /**
1:678868b:      * Run LocalizedConnectionAttribute.sql 
1:678868b:      * <code>
1:678868b:      * example
1:678868b:      * java org.apache.derbyTesting.functionTests.tests.i18n.LocalizedAttributeScriptTest
1:678868b:      * </code>
1:678868b:      */
1:452c95e:     public static void main(String[] args)
3:678868b:     {
1:678868b:         junit.textui.TestRunner.run(getSuite());
11:678868b:     }
1:678868b: 
1:678868b:     /**
1:678868b:      * Return the suite that runs the Localized script.
1:678868b:      */
1:678868b:     public static Test suite() {
1:678868b: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LocalizedScripts");
1:678868b: 
1:678868b:         // Note that it doesn't really make sense to run with network 
1:678868b:         // server/client, as LocalizedConnectionAttributes.sql has a hardcoded
1:678868b:         // connect with protocol, so we can test connect 'as' with a us-ascii
1:678868b:         // character. So only run with embedded. 
1:678868b:         // Similarly, the script cannot run with JSR169, because the connect
1:678868b:         // statement automatically invokes DriverManager.
1:678868b:         if (JDBC.vmSupportsJSR169())
2:678868b:             return suite;
1:1ae02c9:         BaseTestSuite localizedTests =
1:1ae02c9:             new BaseTestSuite("LocalizedScripts:embedded");
1:678868b:         localizedTests.addTest(getSuite());
1:678868b:         Test local = TestConfiguration.singleUseDatabaseDecoratorNoShutdown(
1:678868b:             localizedTests);
1:678868b: 
1:678868b:         // add those client tests into the top-level suite.
1:678868b:         suite.addTest(local);
1:678868b: 
1:678868b:         return suite;
1:678868b:     }
1:678868b: 
1:678868b:     /*
1:678868b:      * A single JUnit test that runs a single Localized script, specifying the
1:678868b:      * desired input encoding.
1:617d53c:      * Needs ISO-8859-1 encoding, or we get a syntax error on connecting to
1:678868b:      * the database with the u-umlaut in the 'as' clause.
1:678868b:      */
1:678868b:     private LocalizedAttributeScriptTest(String localizedTest){
1:678868b:         super(localizedTest, "ISO-8859-1");
1:678868b:     }
1:678868b: 
1:678868b:     /**
1:678868b:      * Return a suite of localized tests based on the 
1:678868b:      * script name. The test is surrounded in a decorator
1:678868b:      * that sets localization properties wrapped in a decorator
1:678868b:      * that cleans the database.
1:678868b:      */
1:678868b:     private static Test getSuite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("localized scripts");
1:678868b:         Properties uiProps = new Properties();
1:678868b: 
1:678868b:         uiProps.put("derby.ui.locale","de_DE");
1:678868b:         uiProps.put("derby.ui.codeset","ISO-8859-1");
1:678868b:         suite.addTest(new SystemPropertyTestSetup(
1:678868b:                 new LocalizedAttributeScriptTest("LocalizedConnectionAttribute"), uiProps));
1:678868b:         
1:678868b:         return getIJConfig(suite);
1:678868b:     }
1:678868b:     
1:678868b:     public void tearDown() throws Exception {
1:678868b:         // attempt to get rid of the extra database.
1:678868b:         // this also will get done if there are failures, and the database will
1:678868b:         // not be saved in the 'fail' directory.
1:678868b:         // We can't rely on an additionalDatabaseDecorator because 'detest'
1:678868b:         // is not just a logical, but a physical db name.
1:c393694:         removeDirectory(
1:c393694:             TestConfiguration.getCurrent().getDatabasePath("detest"));
1:678868b:         super.tearDown();
1:1ae02c9:     }    
1:678868b: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("LocalizedScripts");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite localizedTests =
1:             new BaseTestSuite("LocalizedScripts:embedded");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("localized scripts");
/////////////////////////////////////////////////////////////////////////
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         removeDirectory(
1:             TestConfiguration.getCurrent().getDatabasePath("detest"));
commit:bdef579
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:452c95e
/////////////////////////////////////////////////////////////////////////
1:     public static void main(String[] args)
commit:617d53c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Needs ISO-8859-1 encoding, or we get a syntax error on connecting to
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:70c969f
/////////////////////////////////////////////////////////////////////////
0:         super.setUp();
commit:678868b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.LocalizedAttributeScriptTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.i18n;
1: 
0: import java.io.File;
0: import java.security.AccessController;
1: import java.util.Properties;
1: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * LocalizedAttributeScriptTest runs the ij scripts (.sql file) 
1:  * LocalizedConnectionAttribute.sql and compares the output to a canon file in
1:  * the standard master package.
1:  * <BR>
1:  * Its suite() method returns the test as an instance of
1:  * this class for the specific script wrapped in a decorator that sets the
1:  * specific encoding properties, surrounded by a clean database decorator.
1:  * <BR>
1:  * It can also be used as a command line program
1:  *
1:  */
1: public final class LocalizedAttributeScriptTest extends ScriptTestCase {
1:     
1:     /**
1:      * Run LocalizedConnectionAttribute.sql 
1:      * <code>
1:      * example
1:      * java org.apache.derbyTesting.functionTests.tests.i18n.LocalizedAttributeScriptTest
1:      * </code>
1:      */
0:     public static void main()
1:     {
1:         junit.textui.TestRunner.run(getSuite());
1:     }
1: 
1:     /**
1:      * Return the suite that runs the Localized script.
1:      */
1:     public static Test suite() {
1: 
0:         TestSuite suite = new TestSuite("LocalizedScripts");
1: 
0:         // First ensure that we are running in english locale; the output
0:         // master has been created in that locale, and thus, running in any
0:         // other locale will fail.
0:         if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
1:             return suite;
1:         
1:         // Note that it doesn't really make sense to run with network 
1:         // server/client, as LocalizedConnectionAttributes.sql has a hardcoded
1:         // connect with protocol, so we can test connect 'as' with a us-ascii
1:         // character. So only run with embedded. 
1:         // Similarly, the script cannot run with JSR169, because the connect
1:         // statement automatically invokes DriverManager.
1:         if (JDBC.vmSupportsJSR169())
1:             return suite;
0:         TestSuite localizedTests = new TestSuite("LocalizedScripts:embedded");
1:         localizedTests.addTest(getSuite());
1:         Test local = TestConfiguration.singleUseDatabaseDecoratorNoShutdown(
1:             localizedTests);
1: 
1:         // add those client tests into the top-level suite.
1:         suite.addTest(local);
1: 
1:         return suite;
1:     }
1: 
1:     /*
1:      * A single JUnit test that runs a single Localized script, specifying the
1:      * desired input encoding.
0:      * Needs input encoding Cp850, or we get a syntax error on connecting to 
1:      * the database with the u-umlaut in the 'as' clause.
1:      */
1:     private LocalizedAttributeScriptTest(String localizedTest){
1:         super(localizedTest, "ISO-8859-1");
1:     }
1: 
1:     /**
1:      * Return a suite of localized tests based on the 
1:      * script name. The test is surrounded in a decorator
1:      * that sets localization properties wrapped in a decorator
1:      * that cleans the database.
1:      */
1:     private static Test getSuite() {
0:         TestSuite suite = new TestSuite("localized scripts");
1:         Properties uiProps = new Properties();
1: 
1:         uiProps.put("derby.ui.locale","de_DE");
1:         uiProps.put("derby.ui.codeset","ISO-8859-1");
1:         suite.addTest(new SystemPropertyTestSetup(
1:                 new LocalizedAttributeScriptTest("LocalizedConnectionAttribute"), uiProps));
1:         
1:         return getIJConfig(suite);
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         // attempt to get rid of the extra database.
1:         // this also will get done if there are failures, and the database will
1:         // not be saved in the 'fail' directory.
1:         // We can't rely on an additionalDatabaseDecorator because 'detest'
1:         // is not just a logical, but a physical db name.
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0:             public Object run() {
0:                     removeDatabase("detest");
0:                 return null;
1:             }
1:             
0:             void removeDatabase(String dbName)
1:             {
0:                 //TestConfiguration config = TestConfiguration.getCurrent();
0:                 dbName = dbName.replace('/', File.separatorChar);
0:                 String dsh = getSystemProperty("derby.system.home");
0:                 if (dsh == null) {
0:                     fail("not implemented");
0:                 } else {
0:                     dbName = dsh + File.separator + dbName;
1:                 }
0:                 removeDirectory(dbName);
1:             }
1: 
0:             void removeDirectory(String path)
1:             {
0:                 final File dir = new File(path);
0:                 removeDir(dir);
1:             }
1: 
0:             private void removeDir(File dir) {
1:                 
0:                 // Check if anything to do!
0:                 // Database may not have been created.
0:                 if (!dir.exists())
0:                     return;
1: 
0:                 String[] list = dir.list();
1: 
0:                 // Some JVMs return null for File.list() when the
0:                 // directory is empty.
0:                 if (list != null) {
0:                     for (int i = 0; i < list.length; i++) {
0:                         File entry = new File(dir, list[i]);
1: 
0:                         if (entry.isDirectory()) {
0:                             removeDir(entry);
0:                         } else {
0:                             entry.delete();
0:                             //assertTrue(entry.getPath(), entry.delete());
1:                         }
1:                     }
1:                 }
0:                 dir.delete();
0:                 //assertTrue(dir.getPath(), dir.delete());
1:             }
0:         });
0:         LocalizedResource.resetLocalizedResourceCache();
1:         super.tearDown();
1:     }    
1:     
1:     /**
0:      * Set up the test environment.
1:      */
0:     protected void setUp() {
0:         LocalizedResource.resetLocalizedResourceCache();
1:     }
1: }
============================================================================