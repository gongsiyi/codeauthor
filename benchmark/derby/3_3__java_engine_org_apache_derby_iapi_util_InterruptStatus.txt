1:794fc70: /*
1:794fc70: 
1:794fc70:    Derby - Class org.apache.derby.iapi.util.InterruptStatus
1:794fc70: 
1:794fc70:    Licensed to the Apache Software Foundation (ASF) under one or more
1:794fc70:    contributor license agreements.  See the NOTICE file distributed with
1:794fc70:    this work for additional information regarding copyright ownership.
1:794fc70:    The ASF licenses this file to you under the Apache License, Version 2.0
1:794fc70:    (the "License"); you may not use this file except in compliance with
1:794fc70:    the License.  You may obtain a copy of the License at
1:794fc70: 
1:794fc70:       http://www.apache.org/licenses/LICENSE-2.0
1:794fc70: 
1:794fc70:    Unless required by applicable law or agreed to in writing, software
1:794fc70:    distributed under the License is distributed on an "AS IS" BASIS,
1:794fc70:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:794fc70:    See the License for the specific language governing permissions and
1:794fc70:    limitations under the License.
1:794fc70: 
1:794fc70:  */
1:794fc70: 
1:3a6f4cf: package org.apache.derby.iapi.util;
1:3a6f4cf: 
1:a0dbbd7: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: 
1:3a6f4cf: import org.apache.derby.iapi.error.StandardException;
1:4b58cc0: import org.apache.derby.shared.common.error.ShutdownException;
1:3a6f4cf: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:3a6f4cf: import org.apache.derby.iapi.services.context.ContextService;
1:3a6f4cf: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:3a6f4cf: 
1:4e72f55: /**
1:3a6f4cf:  * Static methods to save and retrieve information about a (session) thread's
1:3a6f4cf:  * interrupt status flag. If during operation we notice an interrupt, Derby will
1:3a6f4cf:  * either:
1:3a6f4cf:  * <ul>
1:3a6f4cf:  *    <li>immediately throw an exception to cut execution short, also
1:3a6f4cf:  *        resurrecting the thread's interrupted status flag. This does not
1:3a6f4cf:  *        require use of this class.
1:3a6f4cf:  *
1:3a6f4cf:  *    <li>just note the fact using this class ({@code noteAndClearInterrupt},
1:3a6f4cf:  *        or ({@code setInterrupted})), and retry whatever got interrupted,
1:3a6f4cf:  *        continuing execution. To achieve this, Derby will always temporarily
1:3a6f4cf:  *        clear the interrupted status flag.
1:3a6f4cf:  *        Later, depending on the type of SQL statement, we may wish to
1:3a6f4cf:  *        interrupt execution by throwing an SQLException at a safe place, say,
1:3a6f4cf:  *        after a statement in a batch is complete ({@code throwIf}), or just
1:3a6f4cf:  *        let the execution run to completion, and then just prior to returning
1:3a6f4cf:  *        to the appliction, the thread's interrupted status flag will
1:3a6f4cf:  *        resurrected ({@code restoreIntrFlagIfSeen})
1:3a6f4cf:  *
1:3a6f4cf:  * </ul>
1:3a6f4cf:  * Normally, the information is saved away in the session's
1:3a6f4cf:  * LanguageConnectionContext, if available. If not, we save it in a thread
1:3a6f4cf:  * local variable.
1:3a6f4cf:  */
1:3a6f4cf: 
1:3a6f4cf: public class InterruptStatus {
1:3a6f4cf: 
1:3a6f4cf:     /**
1:abf8151:      * Constants used by code that retries file operations after seeing the
1:abf8151:      * NIO file channel closed due to interrupts.
1:abf8151:      */
1:abf8151:     public final static int MAX_INTERRUPT_RETRIES = 120;
1:abf8151:     public final static int INTERRUPT_RETRY_SLEEP = 500; // millis
1:abf8151: 
1:abf8151:     /**
1:3a6f4cf:      * Use thread local variable to store interrupt status flag *only* if we
1:ec9d167:      * don't have lcc, e.g. during database creation, shutdown etc.
1:3a6f4cf:      */
1:073b862:     private static final ThreadLocal<Exception> exception = new ThreadLocal<Exception>();
1:3a6f4cf: 
1:3a6f4cf:     /**
1:3a6f4cf:      * Make a note that this thread saw an interrupt. Thread's intr
1:bb8f25a:      * status flag is presumably off already, but we reset it here
1:3a6f4cf:      * also. Use lcc if available, else thread local variable.
1:3a6f4cf:      */
1:3a6f4cf:     public static void setInterrupted() {
1:16a0f6c:         LanguageConnectionContext lcc = null;
1:16a0f6c:         try {
1:a0dbbd7:             lcc = (LanguageConnectionContext)getContextOrNull(
2:3a6f4cf:                 LanguageConnectionContext.CONTEXT_ID);
1:3a6f4cf: 
1:16a0f6c:         } catch (ShutdownException e) {
1:16a0f6c:             // Ignore. Can happen when: a) background thread (RawStoreDaemon)
1:16a0f6c:             // is performing checkpointing and b) a user thread starts shutdown
1:16a0f6c:             // and interrupts the background thread. During recovery of the
1:16a0f6c:             // container we get here. DERBY-4920.
1:16a0f6c:         }
1:a0dbbd7: 
1:16a0f6c: 
1:3a6f4cf:         Thread.interrupted();
1:16a0f6c: 
1:3a6f4cf:         StandardException e =
1:3a6f4cf:             StandardException.newException(SQLState.CONN_INTERRUPT);
1:3a6f4cf: 
1:3a6f4cf:         if (lcc != null) {
1:3a6f4cf:             lcc.setInterruptedException(e);
1:3a6f4cf: 
1:3a6f4cf:         } else {
1:3a6f4cf:             exception.set(e);
1:3a6f4cf:         }
1:3a6f4cf:     }
1:3a6f4cf: 
1:a0dbbd7:     /**
1:4e72f55:      * Use when lcc is dying to save info in thread local instead. Useful under
1:4e72f55:      * shutdown.
1:4e72f55:      */
1:4e72f55:     public static void saveInfoFromLcc(LanguageConnectionContext lcc) {
1:4e72f55:         
1:4e72f55:         StandardException e = lcc.getInterruptedException();
1:4e72f55: 
1:4e72f55:         if (e != null) {
1:4e72f55:             exception.set(e);
1:4e72f55:         }
1:4e72f55:     }
1:4e72f55: 
1:3a6f4cf: 
1:3a6f4cf:     /**
1:3a6f4cf:      * Checks if the thread has been interrupted in NIO, presumably because we
1:3a6f4cf:      * saw an exception indicating this. Make a note of this and clear the
1:3a6f4cf:      * thread's interrupt status flag (NIO doesn't clear it when throwing) so
1:3a6f4cf:      * we can retry whatever we are doing. It will be set back ON before
1:3a6f4cf:      * control is transferred back to the application, cf. {@code
1:3a6f4cf:      * restoreIntrFlagIfSeen}.
1:3a6f4cf:      * <p/>
1:3a6f4cf:      * The note that we saw an interrupt is stored in the lcc if available, if
1:3a6f4cf:      * not, in thread local {@code exception}.
1:3a6f4cf:      *
1:3a6f4cf:      * @param s (debug info) whence
1:3a6f4cf:      * @param threadsInPageIO (debug info) number of threads inside the NIO
1:3a6f4cf:      *        code concurrently
1:3a6f4cf:      * @param hashCode (debug info) container id
1:3a6f4cf:      *
1:3a6f4cf:      * @return true if the thread's interrupt status flag was set
1:3a6f4cf:      */
1:3a6f4cf:     public static boolean noteAndClearInterrupt(String s,
1:3a6f4cf:                                                 int threadsInPageIO,
1:3a6f4cf:                                                 int hashCode) {
1:3a6f4cf:         if (Thread.currentThread().isInterrupted()) {
1:3a6f4cf: 
1:3a6f4cf:             setInterrupted();
1:3a6f4cf: 
1:3a6f4cf:             if (SanityManager.DEBUG) {
1:3a6f4cf: 
1:3a6f4cf:                 if (SanityManager.DEBUG_ON("DebugInterruptRecovery")) {
1:3a6f4cf:                     SanityManager.DEBUG_PRINT(
1:3a6f4cf:                         "DebugInterruptRecovery",
1:3a6f4cf:                         Thread.currentThread().getName() + " " +
1:3a6f4cf:                         Integer.toHexString(hashCode) +
1:3a6f4cf:                         "@Interrupted: " + s + " threadsInPageIO: " +
1:3a6f4cf:                         threadsInPageIO + "\n");
1:3a6f4cf:                 }
1:3a6f4cf:             }
1:3a6f4cf: 
1:3a6f4cf:             Thread.interrupted(); // clear status flag
1:3a6f4cf: 
1:3a6f4cf:             return true;
1:3a6f4cf:         } else {
1:3a6f4cf:             return false;
1:3a6f4cf:         }
1:3a6f4cf:     }
1:3a6f4cf: 
1:3a6f4cf: 
1:3a6f4cf:     /**
1:3a6f4cf:      * Check if the we ever noticed and reset the thread's interrupt status
1:3a6f4cf:      * flag to allow safe operation during execution.  Called from JDBC API
1:3a6f4cf:      * methods before returning control to user application. Typically, this
1:3a6f4cf:      * happens just prior to return in methods that catch {@code Throwable} and
1:3a6f4cf:      * invoke
1:3a6f4cf:      * {@code handleException} (directly or indirectly) on it, e.g.
1:3a6f4cf:      * <pre>
1:3a6f4cf:      *       :
1:3a6f4cf:      *       InterruptStatus.restoreIntrFlagIfSeen();
1:3a6f4cf:      *       return ...;
1:3a6f4cf:      *    } catch (Throwable t) {
1:3a6f4cf:      *       throw handleException(t);
1:3a6f4cf:      *    }
1:3a6f4cf:      * </pre>
1:3a6f4cf:      * {@code handleException} does its own calls to {@code
1:3a6f4cf:      * restoreIntrFlagIfSeen}. If {@code setupContextStack} has been called
1:3a6f4cf:      * consider using the overloaded variant of {@code restoreIntrFlagIfSeen}
1:3a6f4cf:      * with an lcc argument.
1:3a6f4cf:      * <p/>
1:3a6f4cf:      * If an interrupt status flag was seen, we set it back <em>on</em> here.
1:3a6f4cf:      */
1:3a6f4cf:     public static void restoreIntrFlagIfSeen() {
1:3a6f4cf: 
1:84814bc:         LanguageConnectionContext lcc = null;
1:84814bc:         try {
1:84814bc:             lcc =
1:a0dbbd7:                 (LanguageConnectionContext)getContextOrNull(
1:84814bc:                     LanguageConnectionContext.CONTEXT_ID);
1:84814bc:         } catch (ShutdownException e) {
1:84814bc:             // Ignore. DERBY-4911 Restoring interrupt flag is moot anyway if we
1:84814bc:             // are closing down.
1:84814bc:         }
1:3a6f4cf: 
1:3a6f4cf:         if (lcc == null) {
1:3a6f4cf:             // no lcc available for this thread, use thread local flag
1:3a6f4cf:             if (exception.get() != null) {
1:3a6f4cf: 
1:3a6f4cf:                 exception.set(null);
1:3a6f4cf: 
1:3a6f4cf:                 // Set thread's interrupt status flag back on before returning
1:3a6f4cf:                 // control to user application
2:3a6f4cf:                 Thread.currentThread().interrupt();
1:3a6f4cf:             }
1:3a6f4cf: 
1:3a6f4cf:         } else if (lcc.getInterruptedException() != null) {
1:3a6f4cf: 
1:3a6f4cf:             lcc.setInterruptedException(null);
1:3a6f4cf: 
1:3a6f4cf:             // Set thread's interrupt status flag back on before returning
1:3a6f4cf:             // control to user application
1:3a6f4cf:             Thread.currentThread().interrupt();
1:3a6f4cf:         }
1:3a6f4cf:     }
1:3a6f4cf: 
1:3a6f4cf:     /**
1:3a6f4cf:      * Same purpose as {@code restoreIntrFlagIfSeen()}. This variant presumes
1:3a6f4cf:      * we are sure we have a {@code lcc != null}, i.e. {@code
1:3a6f4cf:      * setupContextStack} has been called and not yet restored.  Note that we
1:3a6f4cf:      * cannot merge this code with {@code restoreContextStack}, since that is
1:3a6f4cf:      * typically called in a {@code finally} block, at which point in time, the
1:3a6f4cf:      * {@code lcc} may be gone due to errors of severity {@code
1:3a6f4cf:      * SESSION_SEVERITY} or {@code DATABASE_SEVERITY}.
1:3a6f4cf:      * <p/>
1:3a6f4cf:      * If no {@code lcc} is available, use the zero-arg variant. We only need
1:3a6f4cf:      * this variant for performance reasons.
1:3a6f4cf:      *
1:3a6f4cf:      * @param lcc the language connection context for this session
1:3a6f4cf:      */
1:3a6f4cf:     public static void restoreIntrFlagIfSeen(LanguageConnectionContext lcc) {
1:3a6f4cf: 
1:3a6f4cf:         if (SanityManager.DEBUG) {
1:16a0f6c:             LanguageConnectionContext ctxLcc = null;
1:16a0f6c:             try {
1:a0dbbd7:                 ctxLcc = (LanguageConnectionContext)
1:16a0f6c:                     getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1:3a6f4cf: 
1:16a0f6c:                 SanityManager.ASSERT(
1:16a0f6c:                     lcc == ctxLcc,
1:16a0f6c:                     "lcc=" + lcc + " getContextOrNull=" + ctxLcc);
1:16a0f6c: 
1:16a0f6c:             } catch (ShutdownException e) {
1:16a0f6c:                 // ignore
1:16a0f6c:             }
1:3a6f4cf:         }
1:3a6f4cf: 
1:3a6f4cf:         if (lcc.getInterruptedException() != null) {
1:3a6f4cf: 
1:3a6f4cf:             lcc.setInterruptedException(null);
2:3a6f4cf:             // Set thread's interrupt status flag back on.
1:3a6f4cf:             Thread.currentThread().interrupt();
1:3a6f4cf:         }
1:3a6f4cf:     }
1:3a6f4cf: 
1:3a6f4cf: 
1:3a6f4cf:     /**
1:3a6f4cf:      * Check if the we ever noticed and reset the thread's interrupt status
1:3abf75f:      * flag to allow safe operation during execution, or if the interrupt
1:3abf75f:      * status flag is set now.  Called when operations want to be prematurely
1:3abf75f:      * terminated due to interrupt.
1:3a6f4cf:      * <p/>
1:3abf75f:      * If an interrupt status flag was seen, but temporarily switched off, we
1:3abf75f:      * set it back ON here.
1:3a6f4cf:      *
1:3a6f4cf:      * @param lcc the language connection context for this session
1:3abf75f:      * @throws StandardException (session level SQLState.CONN_INTERRUPT) if
1:3abf75f:      *                           interrupt seen
1:3a6f4cf:      */
1:3a6f4cf:     public static void throwIf(LanguageConnectionContext lcc)
1:3a6f4cf:             throws StandardException {
1:3abf75f: 
1:3abf75f:         if (Thread.currentThread().isInterrupted()) {
1:3abf75f:             setInterrupted();
1:3abf75f:         }
1:3abf75f: 
1:3a6f4cf:         StandardException e = lcc.getInterruptedException();
1:3a6f4cf: 
1:3a6f4cf:         if (e != null) {
1:3a6f4cf:             lcc.setInterruptedException(null);
1:c8e3030:             // Set thread's interrupt status flag back on:
1:c8e3030:             // see TransactionResourceImpl#wrapInSQLException
1:3a6f4cf: 
1:3a6f4cf:             throw e;
1:3a6f4cf:         }
1:3abf75f: 
1:3a6f4cf:     }
1:3a6f4cf:     
1:3a6f4cf:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContextOrNull( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContextOrNull( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContextOrNull( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:3a6f4cf: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:4b58cc0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.error.ShutdownException;
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1:             lcc = (LanguageConnectionContext)getContextOrNull(
/////////////////////////////////////////////////////////////////////////
1:                 (LanguageConnectionContext)getContextOrNull(
/////////////////////////////////////////////////////////////////////////
1:                 ctxLcc = (LanguageConnectionContext)
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContextOrNull( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContextOrNull( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContextOrNull( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:073b862
/////////////////////////////////////////////////////////////////////////
1:     private static final ThreadLocal<Exception> exception = new ThreadLocal<Exception>();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:abf8151
/////////////////////////////////////////////////////////////////////////
1:      * Constants used by code that retries file operations after seeing the
1:      * NIO file channel closed due to interrupts.
1:      */
1:     public final static int MAX_INTERRUPT_RETRIES = 120;
1:     public final static int INTERRUPT_RETRY_SLEEP = 500; // millis
1: 
1:     /**
commit:c8e3030
/////////////////////////////////////////////////////////////////////////
1:             // Set thread's interrupt status flag back on:
1:             // see TransactionResourceImpl#wrapInSQLException
commit:4e72f55
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Use when lcc is dying to save info in thread local instead. Useful under
1:      * shutdown.
1:      */
1:     public static void saveInfoFromLcc(LanguageConnectionContext lcc) {
1:         
1:         StandardException e = lcc.getInterruptedException();
1: 
1:         if (e != null) {
1:             exception.set(e);
1:         }
1:     }
1: 
commit:ec9d167
/////////////////////////////////////////////////////////////////////////
1:      * don't have lcc, e.g. during database creation, shutdown etc.
commit:3abf75f
/////////////////////////////////////////////////////////////////////////
1:      * flag to allow safe operation during execution, or if the interrupt
1:      * status flag is set now.  Called when operations want to be prematurely
1:      * terminated due to interrupt.
1:      * If an interrupt status flag was seen, but temporarily switched off, we
1:      * set it back ON here.
1:      * @throws StandardException (session level SQLState.CONN_INTERRUPT) if
1:      *                           interrupt seen
1: 
1:         if (Thread.currentThread().isInterrupted()) {
1:             setInterrupted();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:16a0f6c
/////////////////////////////////////////////////////////////////////////
1:         LanguageConnectionContext lcc = null;
1:         try {
0:             lcc = (LanguageConnectionContext)ContextService.getContextOrNull(
1:         } catch (ShutdownException e) {
1:             // Ignore. Can happen when: a) background thread (RawStoreDaemon)
1:             // is performing checkpointing and b) a user thread starts shutdown
1:             // and interrupts the background thread. During recovery of the
1:             // container we get here. DERBY-4920.
1:         }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             LanguageConnectionContext ctxLcc = null;
1:             try {
0:                 ctxLcc = (LanguageConnectionContext)ContextService.
1:                     getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1:                 SanityManager.ASSERT(
1:                     lcc == ctxLcc,
1:                     "lcc=" + lcc + " getContextOrNull=" + ctxLcc);
1: 
1:             } catch (ShutdownException e) {
1:                 // ignore
1:             }
commit:84814bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.ShutdownException;
/////////////////////////////////////////////////////////////////////////
1:         LanguageConnectionContext lcc = null;
1:         try {
1:             lcc =
0:                 (LanguageConnectionContext)ContextService.getContextOrNull(
1:                     LanguageConnectionContext.CONTEXT_ID);
1:         } catch (ShutdownException e) {
1:             // Ignore. DERBY-4911 Restoring interrupt flag is moot anyway if we
1:             // are closing down.
1:         }
commit:bb8f25a
/////////////////////////////////////////////////////////////////////////
1:      * status flag is presumably off already, but we reset it here
commit:794fc70
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.util.InterruptStatus
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
commit:3a6f4cf
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.util;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: /**
1:  * Static methods to save and retrieve information about a (session) thread's
1:  * interrupt status flag. If during operation we notice an interrupt, Derby will
1:  * either:
1:  * <ul>
1:  *    <li>immediately throw an exception to cut execution short, also
1:  *        resurrecting the thread's interrupted status flag. This does not
1:  *        require use of this class.
1:  *
1:  *    <li>just note the fact using this class ({@code noteAndClearInterrupt},
1:  *        or ({@code setInterrupted})), and retry whatever got interrupted,
1:  *        continuing execution. To achieve this, Derby will always temporarily
1:  *        clear the interrupted status flag.
1:  *        Later, depending on the type of SQL statement, we may wish to
1:  *        interrupt execution by throwing an SQLException at a safe place, say,
1:  *        after a statement in a batch is complete ({@code throwIf}), or just
1:  *        let the execution run to completion, and then just prior to returning
1:  *        to the appliction, the thread's interrupted status flag will
1:  *        resurrected ({@code restoreIntrFlagIfSeen})
1:  *
1:  * </ul>
1:  * Normally, the information is saved away in the session's
1:  * LanguageConnectionContext, if available. If not, we save it in a thread
1:  * local variable.
1:  */
1: 
1: public class InterruptStatus {
1: 
1:     /**
1:      * Use thread local variable to store interrupt status flag *only* if we
0:      * don't have lcc, e.g. during database creation.
1:      */
0:     private static final ThreadLocal exception = new ThreadLocal ();
1: 
1:     /**
1:      * Make a note that this thread saw an interrupt. Thread's intr
0:      * status flag is presumably off alread, but we reset it here
1:      * also. Use lcc if available, else thread local variable.
1:      */
1:     public static void setInterrupted() {
0:         LanguageConnectionContext lcc =
0:             (LanguageConnectionContext)ContextService.getContextOrNull(
1:                 LanguageConnectionContext.CONTEXT_ID);
1: 
1:         Thread.interrupted();
1: 
1:         StandardException e =
1:             StandardException.newException(SQLState.CONN_INTERRUPT);
1: 
1:         if (lcc != null) {
1:             lcc.setInterruptedException(e);
1: 
1:         } else {
1:             exception.set(e);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Checks if the thread has been interrupted in NIO, presumably because we
1:      * saw an exception indicating this. Make a note of this and clear the
1:      * thread's interrupt status flag (NIO doesn't clear it when throwing) so
1:      * we can retry whatever we are doing. It will be set back ON before
1:      * control is transferred back to the application, cf. {@code
1:      * restoreIntrFlagIfSeen}.
1:      * <p/>
1:      * The note that we saw an interrupt is stored in the lcc if available, if
1:      * not, in thread local {@code exception}.
1:      *
1:      * @param s (debug info) whence
1:      * @param threadsInPageIO (debug info) number of threads inside the NIO
1:      *        code concurrently
1:      * @param hashCode (debug info) container id
1:      *
1:      * @return true if the thread's interrupt status flag was set
1:      */
1:     public static boolean noteAndClearInterrupt(String s,
1:                                                 int threadsInPageIO,
1:                                                 int hashCode) {
1:         if (Thread.currentThread().isInterrupted()) {
1: 
1:             setInterrupted();
1: 
1:             if (SanityManager.DEBUG) {
1: 
1:                 if (SanityManager.DEBUG_ON("DebugInterruptRecovery")) {
1:                     SanityManager.DEBUG_PRINT(
1:                         "DebugInterruptRecovery",
1:                         Thread.currentThread().getName() + " " +
1:                         Integer.toHexString(hashCode) +
1:                         "@Interrupted: " + s + " threadsInPageIO: " +
1:                         threadsInPageIO + "\n");
1:                 }
1:             }
1: 
1:             Thread.interrupted(); // clear status flag
1: 
1:             return true;
1:         } else {
1:             return false;
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Check if the we ever noticed and reset the thread's interrupt status
1:      * flag to allow safe operation during execution.  Called from JDBC API
1:      * methods before returning control to user application. Typically, this
1:      * happens just prior to return in methods that catch {@code Throwable} and
1:      * invoke
1:      * {@code handleException} (directly or indirectly) on it, e.g.
1:      * <pre>
1:      *       :
1:      *       InterruptStatus.restoreIntrFlagIfSeen();
1:      *       return ...;
1:      *    } catch (Throwable t) {
1:      *       throw handleException(t);
1:      *    }
1:      * </pre>
1:      * {@code handleException} does its own calls to {@code
1:      * restoreIntrFlagIfSeen}. If {@code setupContextStack} has been called
1:      * consider using the overloaded variant of {@code restoreIntrFlagIfSeen}
1:      * with an lcc argument.
1:      * <p/>
1:      * If an interrupt status flag was seen, we set it back <em>on</em> here.
1:      */
1:     public static void restoreIntrFlagIfSeen() {
1: 
0:         LanguageConnectionContext lcc =
0:             (LanguageConnectionContext)ContextService.getContextOrNull(
1:                 LanguageConnectionContext.CONTEXT_ID);
1: 
1:         if (lcc == null) {
1:             // no lcc available for this thread, use thread local flag
1:             if (exception.get() != null) {
1: 
1:                 exception.set(null);
1: 
1:                 // Set thread's interrupt status flag back on before returning
1:                 // control to user application
1:                 Thread.currentThread().interrupt();
1:             }
1: 
1:         } else if (lcc.getInterruptedException() != null) {
1: 
1:             lcc.setInterruptedException(null);
1: 
1:             // Set thread's interrupt status flag back on before returning
1:             // control to user application
1:             Thread.currentThread().interrupt();
1:         }
1:     }
1: 
1:     /**
1:      * Same purpose as {@code restoreIntrFlagIfSeen()}. This variant presumes
1:      * we are sure we have a {@code lcc != null}, i.e. {@code
1:      * setupContextStack} has been called and not yet restored.  Note that we
1:      * cannot merge this code with {@code restoreContextStack}, since that is
1:      * typically called in a {@code finally} block, at which point in time, the
1:      * {@code lcc} may be gone due to errors of severity {@code
1:      * SESSION_SEVERITY} or {@code DATABASE_SEVERITY}.
1:      * <p/>
1:      * If no {@code lcc} is available, use the zero-arg variant. We only need
1:      * this variant for performance reasons.
1:      *
1:      * @param lcc the language connection context for this session
1:      */
1:     public static void restoreIntrFlagIfSeen(LanguageConnectionContext lcc) {
1: 
1:         if (SanityManager.DEBUG) {
0:             LanguageConnectionContext ctxLcc =
0:                 (LanguageConnectionContext)ContextService.
0:                 getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1: 
0:             SanityManager.ASSERT(
0:                 lcc == ctxLcc,
0:                 "lcc=" + lcc + " getContextOrNull=" + ctxLcc);
1:         }
1: 
1:         if (lcc.getInterruptedException() != null) {
1: 
1:             lcc.setInterruptedException(null);
1:             // Set thread's interrupt status flag back on.
1:             Thread.currentThread().interrupt();
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Check if the we ever noticed and reset the thread's interrupt status
0:      * flag to allow safe operation during execution.  Called when operations
0:      * will be be prematurely terminated due to the interrupt.
1:      * <p/>
0:      * If an interrupt status flag was seen, we set it back ON here and throw
0:      * session level SQLState.CONN_INTERRUPT.
1:      *
1:      * @param lcc the language connection context for this session
0:      * @throws StandardException (SQLState.CONN_INTERRUPT)
1:      */
1:     public static void throwIf(LanguageConnectionContext lcc)
1:             throws StandardException {
1:         StandardException e = lcc.getInterruptedException();
1: 
1:         if (e != null) {
1:             lcc.setInterruptedException(null);
1:             // Set thread's interrupt status flag back on.
1:             Thread.currentThread().interrupt();
1: 
1:             throw e;
1:         }
1:     }
1: }
============================================================================