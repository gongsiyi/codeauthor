1:db69e70: /*
1:db69e70: 
1:db69e70:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LongMagnitude
1:db69e70: 
1:db69e70:    Licensed to the Apache Software Foundation (ASF) under one or more
1:db69e70:    contributor license agreements.  See the NOTICE file distributed with
1:db69e70:    this work for additional information regarding copyright ownership.
1:db69e70:    The ASF licenses this file to you under the Apache License, Version 2.0
1:db69e70:    (the "License"); you may not use this file except in compliance with
1:db69e70:    the License.  You may obtain a copy of the License at
1:db69e70: 
1:db69e70:      http://www.apache.org/licenses/LICENSE-2.0
1:db69e70: 
1:db69e70:    Unless required by applicable law or agreed to in writing, software
1:db69e70:    distributed under the License is distributed on an "AS IS" BASIS,
1:db69e70:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db69e70:    See the License for the specific language governing permissions and
1:db69e70:    limitations under the License.
1:db69e70: 
1:db69e70:  */
1:db69e70: 
1:db69e70: package org.apache.derbyTesting.functionTests.tests.lang;
1:db69e70: 
1:db69e70: import org.apache.derby.agg.Aggregator;
1:db69e70: 
1:db69e70: /**
1:db69e70:  * An aggregate which computes max(abs()), always returning a Long.
1:db69e70:  */
1:db69e70: public  class   LongMagnitude<V extends Number>    implements  Aggregator<V,Long,LongMagnitude<V>>
1:db69e70: {
1:db69e70:     private long    _magnitude;
1:db69e70:     private boolean _null = true;
1:db69e70: 
1:db69e70:     public  LongMagnitude() {}
1:db69e70: 
1:db69e70:     public  void    init() {}
1:db69e70:     public  void    accumulate( V value ) { more( value.longValue() ); }
1:db69e70:     public  void    merge( LongMagnitude<V> other ) { more( other._magnitude ); }
1:db69e70:     public  Long    terminate() { return _null ? null : _magnitude; }
1:db69e70:     
1:db69e70:     private void    more( long value )
1:db69e70:     {
1:db69e70:         value = value > 0 ? value : -value;
1:db69e70:         _magnitude = _magnitude > value ? _magnitude : value;
1:db69e70:         _null = false;
1:db69e70:     }
1:db69e70:     
1:db69e70: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:db69e70
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LongMagnitude
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import org.apache.derby.agg.Aggregator;
1: 
1: /**
1:  * An aggregate which computes max(abs()), always returning a Long.
1:  */
1: public  class   LongMagnitude<V extends Number>    implements  Aggregator<V,Long,LongMagnitude<V>>
1: {
1:     private long    _magnitude;
1:     private boolean _null = true;
1: 
1:     public  LongMagnitude() {}
1: 
1:     public  void    init() {}
1:     public  void    accumulate( V value ) { more( value.longValue() ); }
1:     public  void    merge( LongMagnitude<V> other ) { more( other._magnitude ); }
1:     public  Long    terminate() { return _null ? null : _magnitude; }
1:     
1:     private void    more( long value )
1:     {
1:         value = value > 0 ? value : -value;
1:         _magnitude = _magnitude > value ? _magnitude : value;
1:         _null = false;
1:     }
1:     
1: }
============================================================================