1:a4cbe6f: /*
1:a4cbe6f: 
1:a4cbe6f:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SequencePermsTest
1:a4cbe6f: 
1:a4cbe6f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a4cbe6f:    contributor license agreements.  See the NOTICE file distributed with
1:a4cbe6f:    this work for additional information regarding copyright ownership.
1:a4cbe6f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a4cbe6f:    (the "License"); you may not use this file except in compliance with
1:a4cbe6f:    the License.  You may obtain a copy of the License at
1:a4cbe6f: 
1:a4cbe6f:      http://www.apache.org/licenses/LICENSE-2.0
1:a4cbe6f: 
1:a4cbe6f:    Unless required by applicable law or agreed to in writing, software
1:a4cbe6f:    distributed under the License is distributed on an "AS IS" BASIS,
1:a4cbe6f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a4cbe6f:    See the License for the specific language governing permissions and
1:a4cbe6f:    limitations under the License.
1:a4cbe6f: 
1:a4cbe6f:  */
1:a4cbe6f: 
1:a4cbe6f: package org.apache.derbyTesting.functionTests.tests.lang;
1:a4cbe6f: 
1:a4cbe6f: import java.sql.Connection;
1:a4cbe6f: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a4cbe6f: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:a4cbe6f: 
1:a4cbe6f: /**
1:a4cbe6f:  * <p>
1:a4cbe6f:  * Test permissions on sequences. See DERBY-712.
1:a4cbe6f:  * </p>
1:a4cbe6f:  */
1:a4cbe6f: public class SequencePermsTest extends GeneratedColumnsHelper
1:a4cbe6f: {
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f:     //
1:a4cbe6f:     // CONSTANTS
1:a4cbe6f:     //
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f: 
1:a4cbe6f:     private static  final   String      TEST_DBO = "TEST_DBO";
1:a4cbe6f:     private static  final   String      RUTH = "RUTH";
1:a4cbe6f:     private static  final   String      ALICE = "ALICE";
1:a4cbe6f:     private static  final   String      FRANK = "FRANK";
1:a4cbe6f:     private static  final   String      IRMA = "IRMA";
1:a4cbe6f:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK, IRMA  };
1:a4cbe6f: 
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f:     //
1:a4cbe6f:     // STATE
1:a4cbe6f:     //
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f: 
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f:     //
1:a4cbe6f:     // CONSTRUCTOR
1:a4cbe6f:     //
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f: 
1:a4cbe6f:     /**
1:a4cbe6f:      * Create a new instance.
1:a4cbe6f:      */
1:a4cbe6f: 
1:a4cbe6f:     public SequencePermsTest(String name)
1:a4cbe6f:     {
1:a4cbe6f:         super(name);
1:a4cbe6f:     }
1:a4cbe6f: 
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f:     //
1:a4cbe6f:     // JUnit BEHAVIOR
1:a4cbe6f:     //
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f: 
1:a4cbe6f: 
1:a4cbe6f:     /**
1:a4cbe6f:      * Construct top level suite in this JUnit test
1:a4cbe6f:      */
1:a4cbe6f:     public static Test suite()
1:a4cbe6f:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             SequencePermsTest.class);
1:a4cbe6f: 
1:a4cbe6f:         Test        cleanTest = new CleanDatabaseTestSetup( suite );
1:a4cbe6f:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:a4cbe6f:             ( cleanTest, LEGAL_USERS, "sequencePermissions" );
1:a4cbe6f:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1:a4cbe6f: 
1:a4cbe6f:         return authorizedTest;
1:a4cbe6f:     }
1:a4cbe6f: 
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f:     //
1:a4cbe6f:     // TESTS
1:a4cbe6f:     //
1:a4cbe6f:     ///////////////////////////////////////////////////////////////////////////////////
1:a4cbe6f: 
1:a4cbe6f:     /**
1:a4cbe6f:      * <p>
1:a4cbe6f:      * Test that you need USAGE privilege on a sequence in order to issue a NEXT VALUE FOR
1:a4cbe6f:      * on it and in order to declare objects which mention that type.
1:a4cbe6f:      * </p>
1:a4cbe6f:      */
1:a4cbe6f:     public  void    test_001_basicGrant()
1:a4cbe6f:         throws Exception
1:a4cbe6f:     {
1:a4cbe6f:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:a4cbe6f:         Connection  ruthConnection = openUserConnection( RUTH );
1:a4cbe6f:         Connection  aliceConnection = openUserConnection( ALICE );
1:a4cbe6f:         Connection  frankConnection = openUserConnection( FRANK );
1:a4cbe6f: 
1:a4cbe6f:         //
1:a4cbe6f:         // Create a sequence and view. Make the view
1:a4cbe6f:         // public. Verify that it is still not generally usable because the
1:a4cbe6f:         // sequence is not public yet.
1:a4cbe6f:         //
1:a4cbe6f:         goodStatement
2:a4cbe6f:             (
2:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "create sequence seq_01\n"
2:a4cbe6f:              );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "create table t_01( c int )\n"
1:a4cbe6f:              );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "insert into t_01( c ) values ( 1 )\n"
1:a4cbe6f:              );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "create view v_01( a, b ) as select c, next value for seq_01 from t_01\n"
1:a4cbe6f:              );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "grant select on v_01 to alice\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         expectExecutionError
1:a4cbe6f:             (
1:a4cbe6f:              aliceConnection,
1:a4cbe6f:              LACK_USAGE_PRIV,
1:a4cbe6f:              "values ( next value for ruth.seq_01 )\n"
1:a4cbe6f:              );
1:a4cbe6f:         expectExecutionError
1:a4cbe6f:             (
1:a4cbe6f:              aliceConnection,
1:a4cbe6f:              LACK_COLUMN_PRIV,
1:a4cbe6f:              "select * from ruth.t_01\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         // but this succeeds because of definer's rights on the view
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "select * from ruth.v_01\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         //
1:a4cbe6f:         // The DBO however is almighty.
1:a4cbe6f:         //
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "values ( next value for ruth.seq_01 )\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         //
1:a4cbe6f:         // Now grant USAGE on the sequence. User Alice should now have all the
1:a4cbe6f:         // privileges she needs.
1:a4cbe6f:         //
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "grant usage on sequence seq_01 to alice\n"
1:a4cbe6f:              );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              aliceConnection,
1:a4cbe6f:              "values( next value for ruth.seq_01 )\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:     }
1:a4cbe6f:     
1:a4cbe6f:     /**
1:a4cbe6f:      * <p>
1:a4cbe6f:      * Test that you need USAGE privilege on a sequence in order to issue a NEXT VALUE FOR
1:a4cbe6f:      * on it the privilege can't be revoked while the object still exists.
1:a4cbe6f:      * </p>
1:a4cbe6f:      */
1:a4cbe6f:     public  void    test_002_basicRevoke()
1:a4cbe6f:         throws Exception
1:a4cbe6f:     {
1:a4cbe6f:         Connection  ruthConnection = openUserConnection( RUTH );
1:a4cbe6f:         Connection  frankConnection = openUserConnection( FRANK );
1:a4cbe6f:         
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "create sequence seq_02\n"
1:a4cbe6f:              );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
2:a4cbe6f:              frankConnection,
1:a4cbe6f:              "create table t_01( c int )\n"
1:a4cbe6f:              );
1:a4cbe6f:         expectExecutionError
1:a4cbe6f:             (
1:a4cbe6f:              frankConnection,
1:a4cbe6f:              LACK_USAGE_PRIV,
1:a4cbe6f:              "values ( next value for ruth.seq_02 )\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         //
1:a4cbe6f:         // Only RESTRICTed revokes allowed.
1:a4cbe6f:         //
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "grant usage on sequence seq_02 to public\n"
1:a4cbe6f:              );
1:a4cbe6f:         expectCompilationError( ruthConnection, SYNTAX_ERROR, "revoke usage on sequence seq_02 from public\n" );
1:a4cbe6f:         goodStatement
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              "revoke usage on sequence seq_02 from public restrict\n"
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         //
1:a4cbe6f:         // Now test revokes when objects depend on the sequence.
1:a4cbe6f:         //
1:a4cbe6f:         
1:a4cbe6f:         String grantUsage = "grant usage on sequence seq_02 to frank\n";
1:a4cbe6f:         String revokeUsage = "revoke usage on sequence seq_02 from frank restrict\n";
1:a4cbe6f:         String createStatement;
1:a4cbe6f:         String dropStatement;
1:a4cbe6f:         String badRevokeSQLState;
1:a4cbe6f:         
1:a4cbe6f:         // view
1:a4cbe6f:         createStatement = "create view v_01( a, b ) as select c, next value for ruth.seq_02 from t_01\n";
1:a4cbe6f:         dropStatement = "drop view v_01\n";
1:2f4a1a0:         badRevokeSQLState = VIEW_DEPENDENCY;
2:a4cbe6f:         verifyRevokePrivilege
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              frankConnection,
2:a4cbe6f:              grantUsage,
2:a4cbe6f:              revokeUsage,
2:a4cbe6f:              createStatement,
2:a4cbe6f:              dropStatement,
2:a4cbe6f:              badRevokeSQLState
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         // trigger
1:a4cbe6f:         createStatement = "create trigger trig_01 after update on t_01 for each statement insert into t_01( c ) values ( next value for ruth.seq_02 )\n";
1:a4cbe6f:         dropStatement = "drop trigger trig_01\n";
2:a4cbe6f:         badRevokeSQLState = OPERATION_FORBIDDEN;
1:a4cbe6f:         verifyRevokePrivilege
1:a4cbe6f:             (
1:a4cbe6f:              ruthConnection,
1:a4cbe6f:              frankConnection,
1:a4cbe6f:              grantUsage,
1:a4cbe6f:              revokeUsage,
1:a4cbe6f:              createStatement,
1:a4cbe6f:              dropStatement,
1:a4cbe6f:              badRevokeSQLState
1:a4cbe6f:              );
1:a4cbe6f: 
1:a4cbe6f:         // constraint
1:e671fc7:         //
1:e671fc7:         // no longer possible because syntax is illegal. see DERBY-4513
1:e671fc7:         //
1:e671fc7:         //        createStatement = "create table t_02( c int check ( ( next value for ruth.seq_02 ) < c ) )\n";
1:e671fc7:         //        dropStatement = "drop table t_02\n";
1:e671fc7:         //        badRevokeSQLState = OPERATION_FORBIDDEN;
1:e671fc7:         //        verifyRevokePrivilege
1:e671fc7:         //            (
1:e671fc7:         //             ruthConnection,
1:e671fc7:         //             frankConnection,
1:e671fc7:         //             grantUsage,
1:e671fc7:         //             revokeUsage,
1:e671fc7:         //             createStatement,
1:e671fc7:         //             dropStatement,
1:e671fc7:         //             badRevokeSQLState
1:e671fc7:         //             );
1:a4cbe6f: 
1:a4cbe6f:         
1:a4cbe6f:     }
1:a4cbe6f: 
1:a4cbe6f:   /**
1:a4cbe6f:      * <p>
1:a4cbe6f:      * Test that you can't drop a schema if it contains a sequence.
1:a4cbe6f:      * </p>
1:a4cbe6f:      */
1:a4cbe6f:     public  void    test_003_dropSchema()
1:a4cbe6f:         throws Exception
1:a4cbe6f:     {
1:a4cbe6f:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:a4cbe6f:         Connection  irmaConnection = openUserConnection( IRMA );
1:a4cbe6f: 
1:a4cbe6f:         goodStatement
1:a4cbe6f:             ( irmaConnection, "create sequence seq_01\n" );
1:a4cbe6f:         expectExecutionError( dboConnection, NON_EMPTY_SCHEMA, "drop schema irma restrict\n" );
1:a4cbe6f: 
1:a4cbe6f:         goodStatement
1:2f4a1a0:             (irmaConnection, "drop sequence seq_01 restrict\n" );
1:a4cbe6f:        goodStatement
1:a4cbe6f:             ( dboConnection, "drop schema irma restrict\n" );
1:a4cbe6f:     }
1:a4cbe6f: 
1:a4cbe6f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             SequencePermsTest.class);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2f4a1a0
/////////////////////////////////////////////////////////////////////////
1:         badRevokeSQLState = VIEW_DEPENDENCY;
/////////////////////////////////////////////////////////////////////////
1:             (irmaConnection, "drop sequence seq_01 restrict\n" );
commit:e671fc7
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // no longer possible because syntax is illegal. see DERBY-4513
1:         //
1:         //        createStatement = "create table t_02( c int check ( ( next value for ruth.seq_02 ) < c ) )\n";
1:         //        dropStatement = "drop table t_02\n";
1:         //        badRevokeSQLState = OPERATION_FORBIDDEN;
1:         //        verifyRevokePrivilege
1:         //            (
1:         //             ruthConnection,
1:         //             frankConnection,
1:         //             grantUsage,
1:         //             revokeUsage,
1:         //             createStatement,
1:         //             dropStatement,
1:         //             badRevokeSQLState
1:         //             );
commit:a4cbe6f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SequencePermsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.DriverManager;
0: import java.util.ArrayList;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.iapi.util.StringUtil;
0: import org.apache.derby.catalog.DefaultInfo;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * <p>
1:  * Test permissions on sequences. See DERBY-712.
1:  * </p>
1:  */
1: public class SequencePermsTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      RUTH = "RUTH";
1:     private static  final   String      ALICE = "ALICE";
1:     private static  final   String      FRANK = "FRANK";
1:     private static  final   String      IRMA = "IRMA";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK, IRMA  };
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public SequencePermsTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(SequencePermsTest.class);
1: 
1:         Test        cleanTest = new CleanDatabaseTestSetup( suite );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( cleanTest, LEGAL_USERS, "sequencePermissions" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1: 
1:         return authorizedTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that you need USAGE privilege on a sequence in order to issue a NEXT VALUE FOR
1:      * on it and in order to declare objects which mention that type.
1:      * </p>
1:      */
1:     public  void    test_001_basicGrant()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  ruthConnection = openUserConnection( RUTH );
1:         Connection  aliceConnection = openUserConnection( ALICE );
1:         Connection  frankConnection = openUserConnection( FRANK );
1: 
1:         //
1:         // Create a sequence and view. Make the view
1:         // public. Verify that it is still not generally usable because the
1:         // sequence is not public yet.
1:         //
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create sequence seq_01\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create table t_01( c int )\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "insert into t_01( c ) values ( 1 )\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create view v_01( a, b ) as select c, next value for seq_01 from t_01\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "grant select on v_01 to alice\n"
1:              );
1: 
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_USAGE_PRIV,
1:              "values ( next value for ruth.seq_01 )\n"
1:              );
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_COLUMN_PRIV,
1:              "select * from ruth.t_01\n"
1:              );
1: 
1:         // but this succeeds because of definer's rights on the view
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "select * from ruth.v_01\n"
1:              );
1: 
1:         //
1:         // The DBO however is almighty.
1:         //
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "values ( next value for ruth.seq_01 )\n"
1:              );
1: 
1:         //
1:         // Now grant USAGE on the sequence. User Alice should now have all the
1:         // privileges she needs.
1:         //
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "grant usage on sequence seq_01 to alice\n"
1:              );
1:         goodStatement
1:             (
1:              aliceConnection,
1:              "values( next value for ruth.seq_01 )\n"
1:              );
1: 
1:     }
1:     
1:     /**
1:      * <p>
1:      * Test that you need USAGE privilege on a sequence in order to issue a NEXT VALUE FOR
1:      * on it the privilege can't be revoked while the object still exists.
1:      * </p>
1:      */
1:     public  void    test_002_basicRevoke()
1:         throws Exception
1:     {
1:         Connection  ruthConnection = openUserConnection( RUTH );
1:         Connection  frankConnection = openUserConnection( FRANK );
1:         
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create sequence seq_02\n"
1:              );
1:         goodStatement
1:             (
1:              frankConnection,
1:              "create table t_01( c int )\n"
1:              );
1:         expectExecutionError
1:             (
1:              frankConnection,
1:              LACK_USAGE_PRIV,
1:              "values ( next value for ruth.seq_02 )\n"
1:              );
1: 
1:         //
1:         // Only RESTRICTed revokes allowed.
1:         //
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "grant usage on sequence seq_02 to public\n"
1:              );
1:         expectCompilationError( ruthConnection, SYNTAX_ERROR, "revoke usage on sequence seq_02 from public\n" );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "revoke usage on sequence seq_02 from public restrict\n"
1:              );
1: 
1:         //
1:         // Now test revokes when objects depend on the sequence.
1:         //
1:         
1:         String grantUsage = "grant usage on sequence seq_02 to frank\n";
1:         String revokeUsage = "revoke usage on sequence seq_02 from frank restrict\n";
1:         String createStatement;
1:         String dropStatement;
1:         String badRevokeSQLState;
1:         
1:         // view
1:         createStatement = "create view v_01( a, b ) as select c, next value for ruth.seq_02 from t_01\n";
1:         dropStatement = "drop view v_01\n";
0:         badRevokeSQLState = VIEW_DEPENDS_ON_PRIVILEGE;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              frankConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
1: 
1:         // trigger
1:         createStatement = "create trigger trig_01 after update on t_01 for each statement insert into t_01( c ) values ( next value for ruth.seq_02 )\n";
1:         dropStatement = "drop trigger trig_01\n";
1:         badRevokeSQLState = OPERATION_FORBIDDEN;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              frankConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
1: 
1:         // constraint
0:         createStatement = "create table t_02( c int check ( ( next value for ruth.seq_02 ) < c ) )\n";
0:         dropStatement = "drop table t_02\n";
1:         badRevokeSQLState = OPERATION_FORBIDDEN;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              frankConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
1: 
1:         
1:     }
1: 
1:   /**
1:      * <p>
1:      * Test that you can't drop a schema if it contains a sequence.
1:      * </p>
1:      */
1:     public  void    test_003_dropSchema()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  irmaConnection = openUserConnection( IRMA );
1: 
1:         goodStatement
1:             ( irmaConnection, "create sequence seq_01\n" );
1:         expectExecutionError( dboConnection, NON_EMPTY_SCHEMA, "drop schema irma restrict\n" );
1: 
1:         goodStatement
0:             (irmaConnection, "drop sequence seq_01\n" );
1:        goodStatement
1:             ( dboConnection, "drop schema irma restrict\n" );
1:     }
1: 
1: }
============================================================================