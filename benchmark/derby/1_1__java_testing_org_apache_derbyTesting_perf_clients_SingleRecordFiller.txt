1:106ea47: /*
1:106ea47: 
1:106ea47: Derby - Class org.apache.derbyTesting.perf.clients.SingleRecordFiller
1:106ea47: 
1:106ea47: Licensed to the Apache Software Foundation (ASF) under one or more
1:106ea47: contributor license agreements.  See the NOTICE file distributed with
1:106ea47: this work for additional information regarding copyright ownership.
1:106ea47: The ASF licenses this file to You under the Apache License, Version 2.0
1:106ea47: (the "License"); you may not use this file except in compliance with
1:106ea47: the License.  You may obtain a copy of the License at
1:106ea47: 
1:106ea47:    http://www.apache.org/licenses/LICENSE-2.0
1:106ea47: 
1:106ea47: Unless required by applicable law or agreed to in writing, software
1:106ea47: distributed under the License is distributed on an "AS IS" BASIS,
1:106ea47: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:106ea47: See the License for the specific language governing permissions and
1:106ea47: limitations under the License.
1:106ea47: 
1:106ea47: */
1:106ea47: 
1:106ea47: package org.apache.derbyTesting.perf.clients;
1:106ea47: 
1:6f53b7f: import java.io.ByteArrayInputStream;
1:6f53b7f: import java.io.StringReader;
1:106ea47: import java.sql.Connection;
1:106ea47: import java.sql.PreparedStatement;
1:106ea47: import java.sql.SQLException;
1:106ea47: import java.sql.Statement;
1:6f53b7f: import java.sql.Types;
1:106ea47: import java.util.Random;
1:4ea38fb: import org.apache.derbyTesting.functionTests.util.UniqueRandomSequence;
1:106ea47: 
1:106ea47: /**
1:106ea47:  * Class which generates and populates tables that can be used by
1:106ea47:  * {@code SingleRecordSelectClient} and {@code SingleRecordUpdateClient}.
1:106ea47:  * This tables contain rows with an int column (id) and a varchar(100) column
1:106ea47:  * (text). The id column is declared as primary key.
1:106ea47:  */
1:106ea47: public class SingleRecordFiller implements DBFiller {
1:106ea47: 
1:4ea38fb:     /** The number of tables to distribute the load over. */
1:106ea47:     private final int numberOfTables;
1:4ea38fb:     /** The number of rows in each table. */
1:106ea47:     private final int tableSize;
1:4ea38fb:     /**
1:4ea38fb:      * The data type of the text column (a constant from
1:4ea38fb:      * {@code java.sql.Types}).
1:4ea38fb:      */
1:6f53b7f:     private final int dataType;
1:4ea38fb:     /** SQL name of the data type specified by {@code dataType}. */
1:6f53b7f:     private final String dataTypeString;
1:4ea38fb:     /**
1:4ea38fb:      * Whether or not the table includes an integer column with unique values
1:4ea38fb:      * in random order. A UNIQUE index will be created for the column.
1:4ea38fb:      */
1:4ea38fb:     private final boolean withSecIndexColumn;
1:4ea38fb:     /**
1:4ea38fb:      * Whether or not the table includes an integer column with unique values
1:4ea38fb:      * in random order not backed by an index.
1:4ea38fb:      */
1:4ea38fb:     private final boolean withNonIndexedColumn;
1:106ea47: 
1:6f53b7f:     static final int TEXT_SIZE = 100;
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Generate a filler that creates the specified number of tables, each of
1:4ea38fb:      * which contains the specified number of records. When this constructor
1:4ea38fb:      * is used, the table only contains two columns: a primary key column (INT)
1:4ea38fb:      * and a text column (VARCHAR(100)).
1:4ea38fb:      *
1:4ea38fb:      * @param records the number of records in each table
1:4ea38fb:      * @param tables the number of tables to create
1:4ea38fb:      */
1:4ea38fb:     public SingleRecordFiller(int records, int tables) {
1:4ea38fb:         this(records, tables, Types.VARCHAR, false, false);
1:4ea38fb:     }
1:4ea38fb: 
1:4ea38fb:     /**
1:4ea38fb:      * Generate a filler that creates the specified number of tables, each of
1:106ea47:      * which contains the specified number of records.
1:106ea47:      *
1:106ea47:      * @param records the number of records in each table
1:106ea47:      * @param tables the number of tables to create
1:6f53b7f:      * @param type which SQL type to store the text as (one of
1:6f53b7f:      * {@code java.sql.Types.VARCHAR}, {@code java.sql.Types.BLOB} and
1:6f53b7f:      * {@code java.sql.Types.CLOB}.
1:106ea47:      */
1:4ea38fb:     public SingleRecordFiller(int records, int tables, int type,
1:4ea38fb:                               boolean withSecIndex, boolean withNonIndexed) {
1:106ea47:         tableSize = records;
1:106ea47:         numberOfTables = tables;
1:6f53b7f:         dataType = type;
1:6f53b7f:         switch (type) {
1:6f53b7f:             case Types.VARCHAR:
1:6f53b7f:                 dataTypeString = "VARCHAR";
1:6f53b7f:                 break;
1:6f53b7f:             case Types.BLOB:
1:6f53b7f:                 dataTypeString = "BLOB";
1:6f53b7f:                 break;
1:6f53b7f:             case Types.CLOB:
1:6f53b7f:                 dataTypeString = "CLOB";
1:6f53b7f:                 break;
1:6f53b7f:             default:
1:6f53b7f:                 throw new IllegalArgumentException("type = " + type);
1:6f53b7f:         }
1:4ea38fb:         withSecIndexColumn = withSecIndex;
1:4ea38fb:         withNonIndexedColumn = withNonIndexed;
1:106ea47:     }
1:106ea47: 
1:106ea47:     public void fill(Connection c) throws SQLException {
1:106ea47:         c.setAutoCommit(false);
1:106ea47:         Statement s = c.createStatement();
1:106ea47:         for (int table = 0; table < numberOfTables; table++) {
1:4ea38fb:             String tableName = getTableName(tableSize, table, dataType,
1:4ea38fb:                     withSecIndexColumn, withNonIndexedColumn);
1:106ea47:             WisconsinFiller.dropTable(c, tableName);
1:106ea47:             s.executeUpdate(
1:167094b:                     "CREATE TABLE " + tableName + "(ID INT NOT NULL, " +
1:4ea38fb:                     (withSecIndexColumn ? "SEC INT, " : "") +
1:4ea38fb:                     (withNonIndexedColumn ? "NI INT, " : "") +
1:6f53b7f:                     "TEXT " + dataTypeString + "(" + TEXT_SIZE + "))");
1:106ea47: 
1:4ea38fb:             String extraCols = "";
1:4ea38fb:             String extraParams = "";
1:4ea38fb:             if (withSecIndexColumn) {
1:4ea38fb:                 extraCols += ", SEC";
1:4ea38fb:                 extraParams += ", ?";
1:4ea38fb:             }
1:4ea38fb:             if (withNonIndexedColumn) {
1:4ea38fb:                 extraCols += ", NI";
1:4ea38fb:                 extraParams += ", ?";
1:4ea38fb:             }
1:4ea38fb: 
1:106ea47:             PreparedStatement ps =
1:106ea47:                 c.prepareStatement("INSERT INTO " + tableName +
1:4ea38fb:                                    "(ID, TEXT" + extraCols +
1:4ea38fb:                                    ") VALUES (?, ?" + extraParams + ")");
1:4ea38fb: 
1:4ea38fb:             UniqueRandomSequence secIdSequence = null;
1:4ea38fb:             if (withSecIndexColumn) {
1:4ea38fb:                 secIdSequence = new UniqueRandomSequence(tableSize);
1:4ea38fb:             }
1:4ea38fb: 
1:4ea38fb:             UniqueRandomSequence nonIndexedSequence = null;
1:4ea38fb:             if (withNonIndexedColumn) {
1:4ea38fb:                 nonIndexedSequence = new UniqueRandomSequence(tableSize);
1:4ea38fb:             }
1:106ea47: 
1:106ea47:             for (int i = 0; i < tableSize; i++) {
1:4ea38fb:                 int col = 1;
1:4ea38fb:                 ps.setInt(col++, i);
1:6f53b7f:                 if (dataType == Types.VARCHAR) {
1:4ea38fb:                     ps.setString(col++, randomString(i));
1:6f53b7f:                 } else if (dataType == Types.CLOB) {
1:6f53b7f:                     StringReader reader = new StringReader(randomString(i));
1:4ea38fb:                     ps.setCharacterStream(col++, reader, TEXT_SIZE);
1:6f53b7f:                 } else if (dataType == Types.BLOB) {
1:6f53b7f:                     ByteArrayInputStream stream =
1:6f53b7f:                             new ByteArrayInputStream(randomBytes(i));
1:4ea38fb:                     ps.setBinaryStream(col++, stream, TEXT_SIZE);
1:4ea38fb:                 }
1:4ea38fb:                 if (withSecIndexColumn) {
1:4ea38fb:                     ps.setInt(col++, secIdSequence.nextValue());
1:4ea38fb:                 }
1:4ea38fb:                 if (withNonIndexedColumn) {
1:4ea38fb:                     ps.setInt(col++, nonIndexedSequence.nextValue());
1:6f53b7f:                 }
1:106ea47:                 ps.executeUpdate();
1:106ea47:                 if ((i % 1000) == 0) {
1:106ea47:                     c.commit();
1:106ea47:                 }
1:106ea47:             }
1:106ea47: 
1:167094b:             s.executeUpdate("ALTER TABLE " + tableName + " ADD CONSTRAINT " +
1:167094b:                     tableName + "_PK PRIMARY KEY (ID)");
1:167094b: 
1:4ea38fb:             if (withSecIndexColumn) {
1:4ea38fb:                 s.executeUpdate(
1:4ea38fb:                         "CREATE INDEX " + tableName + "_SECONDARY_INDEX ON " +
1:4ea38fb:                         tableName + "(SEC)");
1:4ea38fb:             }
1:4ea38fb: 
1:106ea47:             ps.close();
1:106ea47:             c.commit();
1:106ea47:         }
1:106ea47: 
1:106ea47:         s.close();
1:106ea47:     }
1:106ea47: 
1:106ea47:     private static final String[] RANDOM_STRINGS = new String[16];
1:6f53b7f:     private static final byte[][] RANDOM_BYTES = new byte[16][TEXT_SIZE];
1:106ea47:     static {
1:106ea47:         final String alphabet = "abcdefghijklmnopqrstuvwxyz" +
1:106ea47:                                 "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
1:106ea47:                                 "01234567890_-+*/(){}[]&%$#!";
1:106ea47:         final Random r = new Random();
1:106ea47:         for (int i = 0; i < RANDOM_STRINGS.length; i++) {
1:106ea47:             StringBuffer buf = new StringBuffer(TEXT_SIZE);
1:106ea47:             for (int x = 0; x < TEXT_SIZE; x++) {
1:106ea47:                 buf.append(alphabet.charAt(r.nextInt(alphabet.length())));
1:106ea47:             }
1:106ea47:             RANDOM_STRINGS[i] = buf.toString();
1:6f53b7f:             for (int j = 0; j < TEXT_SIZE; j++) {
1:6f53b7f:                 RANDOM_BYTES[i][j] = (byte) RANDOM_STRINGS[i].charAt(j);
1:6f53b7f:             }
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Pick a random string.
1:106ea47:      *
1:106ea47:      * @param seed a seed used to decide which random string to pick
1:106ea47:      * @return a (somewhat) random string
1:106ea47:      */
1:106ea47:     static String randomString(int seed) {
1:106ea47:         return RANDOM_STRINGS[(seed & 0x7fffffff) % RANDOM_STRINGS.length];
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:6f53b7f:      * Pick a random byte string.
1:6f53b7f:      *
1:6f53b7f:      * @param seed a seed used to decide which random string to pick
1:6f53b7f:      * @return a (somewhat) random sequence of bytes
1:6f53b7f:      */
1:6f53b7f:     static byte[] randomBytes(int seed) {
1:6f53b7f:         return RANDOM_BYTES[(seed & 0x7fffffff) % RANDOM_BYTES.length];
1:6f53b7f:     }
1:6f53b7f: 
1:6f53b7f:     /**
1:106ea47:      * Get the name of a table generated by this class.
1:106ea47:      *
1:106ea47:      * @param records the number of records in the table
1:106ea47:      * @param table the number of the table, between 0 (inclusive) and the
1:106ea47:      * total number of tables (exclusive)
1:6f53b7f:      * @param dataType the {@code java.sql.Types} constant specifying the
1:6f53b7f:      * data type of the text column
1:106ea47:      * @return the name of the table specified by the arguments
1:106ea47:      */
1:4ea38fb:     static String getTableName(int records, int table, int dataType,
1:4ea38fb:                                boolean withSecIndex, boolean withNonIndexed) {
1:4ea38fb:         String name = "SINGLE_RECORD_" + records + "_" + table;
1:4ea38fb:         if (withSecIndex) {
1:4ea38fb:             name += "_SECIDX";
1:4ea38fb:         }
1:4ea38fb:         if (withNonIndexed) {
1:4ea38fb:             name += "_NONIDX";
1:4ea38fb:         }
1:6f53b7f:         if (dataType == Types.VARCHAR) {
1:4ea38fb:             name += "_VARCHAR";
1:6f53b7f:         } else if (dataType == Types.BLOB) {
1:4ea38fb:             name += "_BLOB";
1:6f53b7f:         } else if (dataType == Types.CLOB) {
1:4ea38fb:             name += "_CLOB";
1:6f53b7f:         } else {
1:6f53b7f:             throw new IllegalArgumentException("dataType = " + dataType);
1:6f53b7f:         }
1:4ea38fb:         return name;
1:106ea47:     }
1:106ea47: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:167094b
/////////////////////////////////////////////////////////////////////////
1:                     "CREATE TABLE " + tableName + "(ID INT NOT NULL, " +
/////////////////////////////////////////////////////////////////////////
1:             s.executeUpdate("ALTER TABLE " + tableName + " ADD CONSTRAINT " +
1:                     tableName + "_PK PRIMARY KEY (ID)");
1: 
commit:4ea38fb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.UniqueRandomSequence;
/////////////////////////////////////////////////////////////////////////
1:     /** The number of tables to distribute the load over. */
1:     /** The number of rows in each table. */
1:     /**
1:      * The data type of the text column (a constant from
1:      * {@code java.sql.Types}).
1:      */
1:     /** SQL name of the data type specified by {@code dataType}. */
1:     /**
1:      * Whether or not the table includes an integer column with unique values
1:      * in random order. A UNIQUE index will be created for the column.
1:      */
1:     private final boolean withSecIndexColumn;
1:     /**
1:      * Whether or not the table includes an integer column with unique values
1:      * in random order not backed by an index.
1:      */
1:     private final boolean withNonIndexedColumn;
1:      * which contains the specified number of records. When this constructor
1:      * is used, the table only contains two columns: a primary key column (INT)
1:      * and a text column (VARCHAR(100)).
1:      *
1:      * @param records the number of records in each table
1:      * @param tables the number of tables to create
1:      */
1:     public SingleRecordFiller(int records, int tables) {
1:         this(records, tables, Types.VARCHAR, false, false);
1:     }
1: 
1:     /**
1:      * Generate a filler that creates the specified number of tables, each of
/////////////////////////////////////////////////////////////////////////
1:     public SingleRecordFiller(int records, int tables, int type,
1:                               boolean withSecIndex, boolean withNonIndexed) {
/////////////////////////////////////////////////////////////////////////
1:         withSecIndexColumn = withSecIndex;
1:         withNonIndexedColumn = withNonIndexed;
1:             String tableName = getTableName(tableSize, table, dataType,
1:                     withSecIndexColumn, withNonIndexedColumn);
1:                     (withSecIndexColumn ? "SEC INT, " : "") +
1:                     (withNonIndexedColumn ? "NI INT, " : "") +
1:             String extraCols = "";
1:             String extraParams = "";
1:             if (withSecIndexColumn) {
1:                 extraCols += ", SEC";
1:                 extraParams += ", ?";
1:             }
1:             if (withNonIndexedColumn) {
1:                 extraCols += ", NI";
1:                 extraParams += ", ?";
1:             }
1: 
1:                                    "(ID, TEXT" + extraCols +
1:                                    ") VALUES (?, ?" + extraParams + ")");
1: 
1:             UniqueRandomSequence secIdSequence = null;
1:             if (withSecIndexColumn) {
1:                 secIdSequence = new UniqueRandomSequence(tableSize);
1:             }
1: 
1:             UniqueRandomSequence nonIndexedSequence = null;
1:             if (withNonIndexedColumn) {
1:                 nonIndexedSequence = new UniqueRandomSequence(tableSize);
1:             }
1:                 int col = 1;
1:                 ps.setInt(col++, i);
1:                     ps.setString(col++, randomString(i));
1:                     ps.setCharacterStream(col++, reader, TEXT_SIZE);
1:                     ps.setBinaryStream(col++, stream, TEXT_SIZE);
1:                 }
1:                 if (withSecIndexColumn) {
1:                     ps.setInt(col++, secIdSequence.nextValue());
1:                 }
1:                 if (withNonIndexedColumn) {
1:                     ps.setInt(col++, nonIndexedSequence.nextValue());
/////////////////////////////////////////////////////////////////////////
1:             if (withSecIndexColumn) {
1:                 s.executeUpdate(
1:                         "CREATE INDEX " + tableName + "_SECONDARY_INDEX ON " +
1:                         tableName + "(SEC)");
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:     static String getTableName(int records, int table, int dataType,
1:                                boolean withSecIndex, boolean withNonIndexed) {
1:         String name = "SINGLE_RECORD_" + records + "_" + table;
1:         if (withSecIndex) {
1:             name += "_SECIDX";
1:         }
1:         if (withNonIndexed) {
1:             name += "_NONIDX";
1:         }
1:             name += "_VARCHAR";
1:             name += "_BLOB";
1:             name += "_CLOB";
1:         return name;
commit:6f53b7f
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.StringReader;
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:     private final int dataType;
1:     private final String dataTypeString;
1:     static final int TEXT_SIZE = 100;
/////////////////////////////////////////////////////////////////////////
1:      * @param type which SQL type to store the text as (one of
1:      * {@code java.sql.Types.VARCHAR}, {@code java.sql.Types.BLOB} and
1:      * {@code java.sql.Types.CLOB}.
0:     public SingleRecordFiller(int records, int tables, int type) {
1:         dataType = type;
1:         switch (type) {
1:             case Types.VARCHAR:
1:                 dataTypeString = "VARCHAR";
1:                 break;
1:             case Types.BLOB:
1:                 dataTypeString = "BLOB";
1:                 break;
1:             case Types.CLOB:
1:                 dataTypeString = "CLOB";
1:                 break;
1:             default:
1:                 throw new IllegalArgumentException("type = " + type);
1:         }
0:             String tableName = getTableName(tableSize, table, dataType);
1:                     "TEXT " + dataTypeString + "(" + TEXT_SIZE + "))");
/////////////////////////////////////////////////////////////////////////
1:                 if (dataType == Types.VARCHAR) {
0:                     ps.setString(2, randomString(i));
1:                 } else if (dataType == Types.CLOB) {
1:                     StringReader reader = new StringReader(randomString(i));
0:                     ps.setCharacterStream(2, reader, TEXT_SIZE);
1:                 } else if (dataType == Types.BLOB) {
1:                     ByteArrayInputStream stream =
1:                             new ByteArrayInputStream(randomBytes(i));
0:                     ps.setBinaryStream(2, stream, TEXT_SIZE);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     private static final byte[][] RANDOM_BYTES = new byte[16][TEXT_SIZE];
/////////////////////////////////////////////////////////////////////////
1:             for (int j = 0; j < TEXT_SIZE; j++) {
1:                 RANDOM_BYTES[i][j] = (byte) RANDOM_STRINGS[i].charAt(j);
1:             }
/////////////////////////////////////////////////////////////////////////
1:      * Pick a random byte string.
1:      *
1:      * @param seed a seed used to decide which random string to pick
1:      * @return a (somewhat) random sequence of bytes
1:      */
1:     static byte[] randomBytes(int seed) {
1:         return RANDOM_BYTES[(seed & 0x7fffffff) % RANDOM_BYTES.length];
1:     }
1: 
1:     /**
1:      * @param dataType the {@code java.sql.Types} constant specifying the
1:      * data type of the text column
0:     static String getTableName(int records, int table, int dataType) {
0:         String suffix;
1:         if (dataType == Types.VARCHAR) {
0:             suffix = "";
1:         } else if (dataType == Types.BLOB) {
0:             suffix = "_BLOB";
1:         } else if (dataType == Types.CLOB) {
0:             suffix = "_CLOB";
1:         } else {
1:             throw new IllegalArgumentException("dataType = " + dataType);
1:         }
0:         return "SINGLE_RECORD_" + records + "_" + table + suffix;
commit:106ea47
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.SingleRecordFiller
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Random;
1: 
1: /**
1:  * Class which generates and populates tables that can be used by
1:  * {@code SingleRecordSelectClient} and {@code SingleRecordUpdateClient}.
1:  * This tables contain rows with an int column (id) and a varchar(100) column
1:  * (text). The id column is declared as primary key.
1:  */
1: public class SingleRecordFiller implements DBFiller {
1: 
1:     private final int numberOfTables;
1:     private final int tableSize;
1: 
0:     private static final int TEXT_SIZE = 100;
1: 
1:     /**
1:      * Generate a filler that creates the specified number of tables, each of
1:      * which contains the specified number of records.
1:      *
1:      * @param records the number of records in each table
1:      * @param tables the number of tables to create
1:      */
0:     public SingleRecordFiller(int records, int tables) {
1:         tableSize = records;
1:         numberOfTables = tables;
1:     }
1: 
1:     public void fill(Connection c) throws SQLException {
1:         c.setAutoCommit(false);
1:         Statement s = c.createStatement();
1:         for (int table = 0; table < numberOfTables; table++) {
0:             String tableName = getTableName(tableSize, table);
1:             WisconsinFiller.dropTable(c, tableName);
1:             s.executeUpdate(
0:                     "CREATE TABLE " + tableName + "(ID INT PRIMARY KEY, " +
0:                     "TEXT VARCHAR(" + TEXT_SIZE + "))");
1: 
1:             PreparedStatement ps =
1:                 c.prepareStatement("INSERT INTO " + tableName +
0:                                    "(ID, TEXT) VALUES (?, ?)");
1: 
1:             for (int i = 0; i < tableSize; i++) {
0:                 ps.setInt(1, i);
0:                 ps.setString(2, randomString(i));
1:                 ps.executeUpdate();
1:                 if ((i % 1000) == 0) {
1:                     c.commit();
1:                 }
1:             }
1: 
1:             ps.close();
1:             c.commit();
1:         }
1: 
1:         s.close();
1:     }
1: 
1:     private static final String[] RANDOM_STRINGS = new String[16];
1:     static {
1:         final String alphabet = "abcdefghijklmnopqrstuvwxyz" +
1:                                 "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
1:                                 "01234567890_-+*/(){}[]&%$#!";
1:         final Random r = new Random();
1:         for (int i = 0; i < RANDOM_STRINGS.length; i++) {
1:             StringBuffer buf = new StringBuffer(TEXT_SIZE);
1:             for (int x = 0; x < TEXT_SIZE; x++) {
1:                 buf.append(alphabet.charAt(r.nextInt(alphabet.length())));
1:             }
1:             RANDOM_STRINGS[i] = buf.toString();
1:         }
1:     }
1: 
1:     /**
1:      * Pick a random string.
1:      *
1:      * @param seed a seed used to decide which random string to pick
1:      * @return a (somewhat) random string
1:      */
1:     static String randomString(int seed) {
1:         return RANDOM_STRINGS[(seed & 0x7fffffff) % RANDOM_STRINGS.length];
1:     }
1: 
1:     /**
1:      * Get the name of a table generated by this class.
1:      *
1:      * @param records the number of records in the table
1:      * @param table the number of the table, between 0 (inclusive) and the
1:      * total number of tables (exclusive)
1:      * @return the name of the table specified by the arguments
1:      */
0:     static String getTableName(int records, int table) {
0:         return "SINGLE_RECORD_" + records + "_" + table;
1:     }
1: }
============================================================================