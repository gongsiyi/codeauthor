1:af2718a: /*
3:af2718a: 
1:af2718a:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DMDBugsTest
1:af2718a: 
1:af2718a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:af2718a:    contributor license agreements.  See the NOTICE file distributed with
1:af2718a:    this work for additional information regarding copyright ownership.
1:af2718a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:af2718a:    (the "License"); you may not use this file except in compliance with
1:af2718a:    the License.  You may obtain a copy of the License at
1:af2718a: 
1:af2718a:       http://www.apache.org/licenses/LICENSE-2.0
1:af2718a: 
1:af2718a:    Unless required by applicable law or agreed to in writing, software
1:af2718a:    distributed under the License is distributed on an "AS IS" BASIS,
1:af2718a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:af2718a:    See the License for the specific language governing permissions and
1:af2718a:    limitations under the License.
1:af2718a: 
1:af2718a:  */
1:af2718a: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:af2718a: 
1:af2718a: import java.io.IOException;
1:af2718a: import java.sql.DatabaseMetaData;
1:af2718a: import java.sql.ResultSet;
1:af2718a: import java.sql.SQLException;
1:af2718a: import java.sql.Statement;
1:af2718a: import junit.framework.Test;
1:af2718a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:af2718a: import org.apache.derbyTesting.junit.JDBC;
1:af2718a: import org.apache.derbyTesting.junit.TestConfiguration;
1:af2718a: 
1:af2718a: public class DMDBugsTest extends BaseJDBCTestCase {
1:af2718a: 
1:af2718a: 	public DMDBugsTest(String name) {
1:af2718a: 		super(name);
1:af2718a: 		// TODO Auto-generated constructor stub
2:af2718a: 	}
1:af2718a: 	
1:af2718a: 	public void testDerby3000() throws SQLException, IOException {
1:af2718a: 		ResultSet rs;
1:af2718a: 		// Derby-3000 make sure we process only valid TableType values and
1:af2718a: 		// process them correctly.
1:af2718a: 		DatabaseMetaData dmd = getConnection().getMetaData();
1:af2718a: 	
1:af2718a: 		Statement s = createStatement();
1:af2718a: 		s.executeUpdate("CREATE TABLE APP.TAB (i int)");
1:af2718a: 		s.executeUpdate("CREATE VIEW  APP.V  as SELECT * FROM TAB");
1:af2718a: 		s.executeUpdate("CREATE SYNONYM TSYN FOR APP.TAB");
1:af2718a: 	
1:af2718a: 		String[] withInvalidTableTypes = {"SYNONYM","TABLE","VIEW",
1:af2718a: 		"GLOBAL TEMPORARY"};
1:af2718a: 		// just ignore invalid types
1:af2718a: 		rs = dmd.getTables( "%", "%", "%", withInvalidTableTypes);			
1:af2718a: 		JDBC.assertFullResultSet(rs,
1:af2718a: 			new String[][] {{"","APP","TSYN","SYNONYM","",null,null,null,null,null},
1:af2718a: 			{"","APP","TAB","TABLE","",null,null,null,null,null},
1:af2718a: 			{"","APP","V","VIEW","",null,null,null,null,null}});
1:af2718a: 
1:af2718a: 
1:af2718a: 		rs = dmd.getTables("%", "%", "%", new String[] {"GLOBAL TEMPORARY"});
1:af2718a: 		JDBC.assertEmpty(rs);
1:af2718a: 		
1:af2718a: 		rs = dmd.getTables("%", "%", "%", new String[] {"VIEW"});
1:af2718a: 		JDBC.assertUnorderedResultSet(rs, new String[][] 
1:af2718a: 		            {{"","APP","V","VIEW","",null,null,null,null,null}});
1:af2718a: 
1:af2718a: 		
1:af2718a: 		rs = dmd.getTables("%", "%", "%", new String[] {"TABLE"});
1:af2718a: 		JDBC.assertUnorderedResultSet(rs,new String[][]
1:af2718a: 		          {{"","APP","TAB","TABLE","",null,null,null,null,null}} );
1:af2718a: 		
1:af2718a: 		rs = dmd.getTables("%", "%", "%", new String[] {"SYNONYM"});
1:af2718a: 		JDBC.assertUnorderedResultSet(rs, new String[][]
1:af2718a: 	                  {{"","APP","TSYN","SYNONYM","",null,null,null,null,null}});
1:af2718a: 
1:af2718a: 		rs = dmd.getTables( "%", "%", "%", new String[] {"SYSTEM TABLE"});
1:aa609d5: 		assertEquals(23, JDBC.assertDrainResults(rs));
1:af2718a: 		s.executeUpdate("DROP VIEW APP.V");
1:af2718a: 		s.executeUpdate("DROP TABLE APP.TAB");
1:af2718a: 		s.executeUpdate("DROP SYNONYM APP.TSYN");
1:af2718a: 	}
1:af2718a: 	   
1:af2718a: 		
1:af2718a: 	/* Default suite for running this test.
1:af2718a: 	 */
1:af2718a: 	public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DMDBugsTest");
1:af2718a: 		suite.addTest(
1:af2718a: 				TestConfiguration.defaultSuite(DMDBugsTest.class));
1:af2718a: 		return suite;
1:af2718a: 	        	
1:1ae02c9: 	}
1:af2718a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DMDBugsTest");
1: }
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
0: 		assertEquals(20, JDBC.assertDrainResults(rs));
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1: 		assertEquals(23, JDBC.assertDrainResults(rs));
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
0: 		assertEquals(22, JDBC.assertDrainResults(rs));
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:af2718a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DMDBugsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.IOException;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class DMDBugsTest extends BaseJDBCTestCase {
1: 
1: 	public DMDBugsTest(String name) {
1: 		super(name);
1: 		// TODO Auto-generated constructor stub
1: 	}
1: 	
1: 	public void testDerby3000() throws SQLException, IOException {
1: 		ResultSet rs;
1: 		// Derby-3000 make sure we process only valid TableType values and
1: 		// process them correctly.
1: 		DatabaseMetaData dmd = getConnection().getMetaData();
1: 	
1: 		Statement s = createStatement();
1: 		s.executeUpdate("CREATE TABLE APP.TAB (i int)");
1: 		s.executeUpdate("CREATE VIEW  APP.V  as SELECT * FROM TAB");
1: 		s.executeUpdate("CREATE SYNONYM TSYN FOR APP.TAB");
1: 	
1: 		String[] withInvalidTableTypes = {"SYNONYM","TABLE","VIEW",
1: 		"GLOBAL TEMPORARY"};
1: 		// just ignore invalid types
1: 		rs = dmd.getTables( "%", "%", "%", withInvalidTableTypes);			
1: 		JDBC.assertFullResultSet(rs,
1: 			new String[][] {{"","APP","TSYN","SYNONYM","",null,null,null,null,null},
1: 			{"","APP","TAB","TABLE","",null,null,null,null,null},
1: 			{"","APP","V","VIEW","",null,null,null,null,null}});
1: 
1: 
1: 		rs = dmd.getTables("%", "%", "%", new String[] {"GLOBAL TEMPORARY"});
1: 		JDBC.assertEmpty(rs);
1: 		
1: 		rs = dmd.getTables("%", "%", "%", new String[] {"VIEW"});
1: 		JDBC.assertUnorderedResultSet(rs, new String[][] 
1: 		            {{"","APP","V","VIEW","",null,null,null,null,null}});
1: 
1: 		
1: 		rs = dmd.getTables("%", "%", "%", new String[] {"TABLE"});
1: 		JDBC.assertUnorderedResultSet(rs,new String[][]
1: 		          {{"","APP","TAB","TABLE","",null,null,null,null,null}} );
1: 		
1: 		rs = dmd.getTables("%", "%", "%", new String[] {"SYNONYM"});
1: 		JDBC.assertUnorderedResultSet(rs, new String[][]
1: 	                  {{"","APP","TSYN","SYNONYM","",null,null,null,null,null}});
1: 
1: 		rs = dmd.getTables( "%", "%", "%", new String[] {"SYSTEM TABLE"});
0: 		assertEquals(19, JDBC.assertDrainResults(rs));
1: 		s.executeUpdate("DROP VIEW APP.V");
1: 		s.executeUpdate("DROP TABLE APP.TAB");
1: 		s.executeUpdate("DROP SYNONYM APP.TSYN");
1: 	}
1: 	   
1: 		
1: 	/* Default suite for running this test.
1: 	 */
1: 	public static Test suite() {
0: 		TestSuite suite = new TestSuite("DMDBugsTest");
1: 		suite.addTest(
1: 				TestConfiguration.defaultSuite(DMDBugsTest.class));
1: 		return suite;
1: 	        	
1: 	}
1: }
============================================================================