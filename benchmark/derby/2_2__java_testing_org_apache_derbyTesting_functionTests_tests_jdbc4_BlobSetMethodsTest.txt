1:b2b30ec: /*
2:b2b30ec: 
1:bb0c274:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest
1:bb0c274: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:bb0c274: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:bb0c274: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:bb0c274: 
1:bb0c274:  */
1:b2b30ec: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:b2b30ec: 
1:b2b30ec: import java.sql.Blob;
1:b2b30ec: import java.sql.Connection;
1:b2b30ec: import java.sql.PreparedStatement;
1:b2b30ec: import java.sql.ResultSet;
1:b2b30ec: import java.sql.SQLException;
1:b2b30ec: import java.sql.Statement;
1:b2b30ec: import junit.framework.Test;
1:b2b30ec: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:b2b30ec: import org.apache.derbyTesting.junit.TestConfiguration;
1:b2b30ec: 
1:b2b30ec: /**
1:b2b30ec:  * tests set methods of blob
2:b2b30ec:  */
1:b2b30ec: public class BlobSetMethodsTest extends BaseJDBCTestCase {
1:b2b30ec:     private static int BUFFER_SIZE = 1024;
1:b2b30ec:     private static int UPDATE_SIZE = 100;
1:b2b30ec: 
1:b2b30ec:     public BlobSetMethodsTest (String name) {
1:b2b30ec:         super (name);
5:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     protected void setUp() throws Exception {
1:b2b30ec:         Connection con = getConnection();
2:b2b30ec:         Statement stmt = con.createStatement();
1:b2b30ec:         stmt.execute ("create table blobtest (id integer, data Blob)");
2:b2b30ec:         stmt.close();
3:b2b30ec:         con.close();
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Create test suite.
1:b2b30ec:      */
1:b2b30ec:     public static Test suite() {
1:5d54436:         return TestConfiguration.defaultSuite (BlobSetMethodsTest.class);
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:5d54436:      * Tests large blob (more than 4k) to ensure LOBStreamControl uses file.
1:b2b30ec:      */
1:5d54436:     public void testSetBytesLargeBlob () throws SQLException {
1:b2b30ec:         Connection con = getConnection();
1:5d54436:         con.setAutoCommit (false);
1:5d54436:         PreparedStatement pstmt = con.prepareStatement("insert into " +
1:5d54436:                 "blobtest (id, data) values (?,?)");
1:5d54436:         Blob blob = con.createBlob();
1:5d54436:         byte [] data = new byte [BUFFER_SIZE];
1:5d54436:         for (int i = 0; i < BUFFER_SIZE; i++) {
1:5d54436:             data [i] = (byte) (i % 255);
1:b2b30ec:         }
1:5d54436:      //now add more than 4k so file get in use
1:5d54436:         for (int i = 0; i < 5; i++)
1:5d54436:             blob.setBytes (i * BUFFER_SIZE + 1, data);
1:5d54436:         assertEquals (BUFFER_SIZE * 5 , blob.length());
1:5d54436:                     //update blob in the middle
1:5d54436:         byte [] data1 = new byte [UPDATE_SIZE];
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             data1 [i] = 120;//just any value
1:5d54436:         blob.setBytes (BUFFER_SIZE + 1, data1);
1:5d54436:         blob.setBytes (BUFFER_SIZE * 5 + 1, data1);
1:5d54436:         assertEquals (5 * BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:5d54436:         //insert it into table
1:5d54436:         pstmt.setInt (1, 3);
1:5d54436:         pstmt.setBlob (2, blob);
1:5d54436:         pstmt.executeUpdate ();
1:5d54436:         Statement stmt = con.createStatement();
1:5d54436:         ResultSet rs = stmt.executeQuery("select data from blobtest where " +
1:5d54436:                                 "id = 3");
1:5d54436:         assertEquals(true, rs.next());
1:5d54436:         blob = rs.getBlob (1);
1:5d54436:         byte [] data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
1:5d54436:         assertEquals (5 * BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             assertEquals (data1 [i], data2 [i]);
1:5d54436:         data2 = blob.getBytes (5 * BUFFER_SIZE + 1, UPDATE_SIZE);
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             assertEquals (data1 [i], data2 [i]);
1:5d54436:         //test truncate
1:5d54436:         blob.truncate (BUFFER_SIZE);
1:5d54436:         assertEquals ("truncate failed", BUFFER_SIZE, blob.length());
1:5d54436:         rs.close();
1:5d54436:         con.commit();
1:5d54436:         stmt.close();
1:5d54436:         pstmt.close();
1:27be4fc:     }
1:b2b30ec: 
1:5d54436:     /**
1:5d54436:      * tests set bytes method of blob in memory only mode (less than 4k)
1:5d54436:      */
1:5d54436:     public void testSetBytesSmallBlob () throws SQLException {
1:b2b30ec:         Connection con = getConnection();
1:5d54436:         con.setAutoCommit (false);
1:5d54436:         PreparedStatement pstmt = con.prepareStatement("insert into " +
1:5d54436:                 "blobtest (id, data) values (?,?)");
1:5d54436:         pstmt.setInt (1,1);
1:5d54436:         Blob blob = con.createBlob();
1:5d54436:         //add 1024 bytes
1:5d54436:         byte [] data = new byte [BUFFER_SIZE];
1:5d54436:         for (int i = 0; i < BUFFER_SIZE; i++) {
1:5d54436:             data [i] = (byte) (i % 255);
1:5d54436:         }
1:5d54436:         blob.setBytes (1, data);
1:5d54436:         assertEquals (BUFFER_SIZE, blob.length());
1:5d54436:         pstmt.setBlob (2, blob);
1:5d54436:         pstmt.executeUpdate();
1:5d54436:         Statement stmt = con.createStatement();
1:5d54436:         ResultSet rs = stmt.executeQuery(
1:5d54436:                 "select data from blobtest where id = 1");
1:5d54436:         assertEquals(true, rs.next());
1:5d54436:         blob = rs.getBlob (1);
1:5d54436:         assertEquals (BUFFER_SIZE, blob.length());
1:5d54436:         //update blob in the middle
1:5d54436:         byte [] data1 = new byte [UPDATE_SIZE];
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             data1 [i] = 120;//just any value
1:5d54436:         blob.setBytes (UPDATE_SIZE, data1);
1:5d54436:         byte [] data2 = blob.getBytes (100, UPDATE_SIZE);
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             assertEquals (data1 [i], data2 [i]);
1:5d54436:         //update it at the end
1:5d54436:         blob.setBytes (BUFFER_SIZE + 1, data1);
1:5d54436:         assertEquals (BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:5d54436:         data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             assertEquals (data1 [i], data2 [i]);
1:5d54436:         //insert the blob and test again
1:5d54436:         pstmt.setInt (1, 2);
1:5d54436:         pstmt.setBlob (2, blob);
1:5d54436:         pstmt.executeUpdate();
1:5d54436:         rs = stmt.executeQuery("select data from blobtest where " +
1:5d54436:                 "id = 2");
1:5d54436:         assertEquals(true, rs.next());
1:5d54436:         blob = rs.getBlob (1);
1:5d54436:         assertEquals (BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:5d54436:         data2 = blob.getBytes (100, UPDATE_SIZE);
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             assertEquals (data1 [i], data2 [i]);
1:5d54436:         data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
1:5d54436:         for (int i = 0; i < UPDATE_SIZE; i++)
1:5d54436:             assertEquals (data1 [i], data2 [i]);
1:5d54436: 
1:5d54436:         //test truncate on small size blob
1:5d54436:         blob = con.createBlob();
1:5d54436:         data = new byte [100];
1:5d54436:         for (int i = 0; i < 100; i++) {
1:5d54436:             data [i] = (byte) i;
1:5d54436:         }
1:5d54436:         blob.setBytes (1, data);
1:5d54436:         assertEquals (blob.length(), 100);
1:5d54436:         blob.truncate (50);
1:5d54436:         assertEquals (blob.length(), 50);
1:5d54436:         blob.setBytes (1, data);
1:5d54436:         assertEquals ("set failed", blob.length(), 100);
1:5d54436:         blob.truncate (50);
1:5d54436:         assertEquals ("truncation failed", blob.length(), 50);
1:5d54436:         rs.close();
1:5d54436:         con.commit();
1:5d54436:         stmt.close();
1:5d54436:         pstmt.close();
1:5d54436:     }
1:5d54436: 
1:5d54436:     protected void tearDown() throws Exception {
1:5d54436:         Connection con = getConnection();
1:5d54436:         con.setAutoCommit (true);
1:b2b30ec:         Statement stmt = con.createStatement();
1:b2b30ec:         stmt.execute ("drop table blobtest");
1:b2b30ec:         stmt.close();
1:5d54436:         super.tearDown();
1:b2b30ec:     }
1:b2b30ec: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d54436
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite (BlobSetMethodsTest.class);
1:      * Tests large blob (more than 4k) to ensure LOBStreamControl uses file.
1:     public void testSetBytesLargeBlob () throws SQLException {
1:         con.setAutoCommit (false);
1:         PreparedStatement pstmt = con.prepareStatement("insert into " +
1:                 "blobtest (id, data) values (?,?)");
1:         Blob blob = con.createBlob();
1:         byte [] data = new byte [BUFFER_SIZE];
1:         for (int i = 0; i < BUFFER_SIZE; i++) {
1:             data [i] = (byte) (i % 255);
1:      //now add more than 4k so file get in use
1:         for (int i = 0; i < 5; i++)
1:             blob.setBytes (i * BUFFER_SIZE + 1, data);
1:         assertEquals (BUFFER_SIZE * 5 , blob.length());
1:                     //update blob in the middle
1:         byte [] data1 = new byte [UPDATE_SIZE];
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             data1 [i] = 120;//just any value
1:         blob.setBytes (BUFFER_SIZE + 1, data1);
1:         blob.setBytes (BUFFER_SIZE * 5 + 1, data1);
1:         assertEquals (5 * BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:         //insert it into table
1:         pstmt.setInt (1, 3);
1:         pstmt.setBlob (2, blob);
1:         pstmt.executeUpdate ();
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery("select data from blobtest where " +
1:                                 "id = 3");
1:         assertEquals(true, rs.next());
1:         blob = rs.getBlob (1);
1:         byte [] data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
1:         assertEquals (5 * BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             assertEquals (data1 [i], data2 [i]);
1:         data2 = blob.getBytes (5 * BUFFER_SIZE + 1, UPDATE_SIZE);
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             assertEquals (data1 [i], data2 [i]);
1:         //test truncate
1:         blob.truncate (BUFFER_SIZE);
1:         assertEquals ("truncate failed", BUFFER_SIZE, blob.length());
1:         rs.close();
1:         con.commit();
1:         stmt.close();
1:         pstmt.close();
1:     /**
1:      * tests set bytes method of blob in memory only mode (less than 4k)
1:      */
1:     public void testSetBytesSmallBlob () throws SQLException {
1:         con.setAutoCommit (false);
1:         PreparedStatement pstmt = con.prepareStatement("insert into " +
1:                 "blobtest (id, data) values (?,?)");
1:         pstmt.setInt (1,1);
1:         Blob blob = con.createBlob();
1:         //add 1024 bytes
1:         byte [] data = new byte [BUFFER_SIZE];
1:         for (int i = 0; i < BUFFER_SIZE; i++) {
1:             data [i] = (byte) (i % 255);
1:         }
1:         blob.setBytes (1, data);
1:         assertEquals (BUFFER_SIZE, blob.length());
1:         pstmt.setBlob (2, blob);
1:         pstmt.executeUpdate();
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select data from blobtest where id = 1");
1:         assertEquals(true, rs.next());
1:         blob = rs.getBlob (1);
1:         assertEquals (BUFFER_SIZE, blob.length());
1:         //update blob in the middle
1:         byte [] data1 = new byte [UPDATE_SIZE];
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             data1 [i] = 120;//just any value
1:         blob.setBytes (UPDATE_SIZE, data1);
1:         byte [] data2 = blob.getBytes (100, UPDATE_SIZE);
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             assertEquals (data1 [i], data2 [i]);
1:         //update it at the end
1:         blob.setBytes (BUFFER_SIZE + 1, data1);
1:         assertEquals (BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:         data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             assertEquals (data1 [i], data2 [i]);
1:         //insert the blob and test again
1:         pstmt.setInt (1, 2);
1:         pstmt.setBlob (2, blob);
1:         pstmt.executeUpdate();
1:         rs = stmt.executeQuery("select data from blobtest where " +
1:                 "id = 2");
1:         assertEquals(true, rs.next());
1:         blob = rs.getBlob (1);
1:         assertEquals (BUFFER_SIZE + UPDATE_SIZE, blob.length());
1:         data2 = blob.getBytes (100, UPDATE_SIZE);
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             assertEquals (data1 [i], data2 [i]);
1:         data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
1:         for (int i = 0; i < UPDATE_SIZE; i++)
1:             assertEquals (data1 [i], data2 [i]);
1: 
1:         //test truncate on small size blob
1:         blob = con.createBlob();
1:         data = new byte [100];
1:         for (int i = 0; i < 100; i++) {
1:             data [i] = (byte) i;
1:         }
1:         blob.setBytes (1, data);
1:         assertEquals (blob.length(), 100);
1:         blob.truncate (50);
1:         assertEquals (blob.length(), 50);
1:         blob.setBytes (1, data);
1:         assertEquals ("set failed", blob.length(), 100);
1:         blob.truncate (50);
1:         assertEquals ("truncation failed", blob.length(), 50);
1:         rs.close();
1:         con.commit();
1:         stmt.close();
1:         pstmt.close();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         Connection con = getConnection();
1:         con.setAutoCommit (true);
1:         super.tearDown();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
commit:ffb9317
/////////////////////////////////////////////////////////////////////////
commit:27be4fc
/////////////////////////////////////////////////////////////////////////
0:             //test truncate on small size blob
0:             blob = con.createBlob();
0:             data = new byte [100];
0:             for (int i = 0; i < 100; i++) {
0:                 data [i] = (byte) i;
1:             }
0:             blob.setBytes (1, data);
0:             assertEquals (blob.length(), 100);
0:             blob.truncate (50);
0:             assertEquals (blob.length(), 50);
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1: /*
0:  *
0:  * Derby - Class BlobSetMethodsTest
0:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
0:  * either express or implied. See the License for the specific
0:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.sql.Blob;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import junit.textui.TestRunner;
0: import org.apache.derbyTesting.functionTests.harness.RunSuite;
0: import org.apache.derbyTesting.functionTests.harness.RunTest;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * tests set methods of blob
1:  */
1: public class BlobSetMethodsTest extends BaseJDBCTestCase {
1:     private static int BUFFER_SIZE = 1024;
1:     private static int UPDATE_SIZE = 100;
1: 
1:     public BlobSetMethodsTest (String name) {
1:         super (name);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         Connection con = getConnection();
1:         Statement stmt = con.createStatement();
1:         stmt.execute ("create table blobtest (id integer, data Blob)");
1:         stmt.close();
1:         con.close();
1:     }
1: 
1:     /**
1:      * Create test suite.
1:      */
1:     public static Test suite() {
0:         return TestConfiguration.embeddedSuite(BlobSetMethodsTest.class);
1:     }
1: 
1:     /**
0:      * tests set bytes method of blob.
1:      */
0:     public void testSetBytes () throws SQLException {
1:         Connection con = getConnection();
0:         try {
0:             con.setAutoCommit (false);
0:             PreparedStatement pstmt = con.prepareStatement("insert into " +
0:                     "blobtest (id, data) values (?,?)");
0:             pstmt.setInt (1,1);
0:             Blob blob = con.createBlob();
0:             //add 1024 bytes
0:             byte [] data = new byte [BUFFER_SIZE];
0:             for (int i = 0; i < BUFFER_SIZE; i++) {
0:                 data [i] = (byte) (i % 255);
1:             }
0:             blob.setBytes (1, data);
0:             assertEquals (BUFFER_SIZE, blob.length());
0:             pstmt.setBlob (2, blob);
0:             pstmt.executeUpdate();
1:             Statement stmt = con.createStatement();
0:             ResultSet rs = stmt.executeQuery(
0:                     "select data from blobtest where id = 1");
0:             assertEquals(true, rs.next());
0:             blob = rs.getBlob (1);
0:             assertEquals (BUFFER_SIZE, blob.length());
0:             //update blob in the middle
0:             byte [] data1 = new byte [UPDATE_SIZE];
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 data1 [i] = 120;//just any value
0:             blob.setBytes (UPDATE_SIZE, data1);
0:             byte [] data2 = blob.getBytes (100, UPDATE_SIZE);
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 assertEquals (data1 [i], data2 [i]);
0:             //update it at the end
0:             blob.setBytes (BUFFER_SIZE + 1, data1);
0:             assertEquals (BUFFER_SIZE + UPDATE_SIZE, blob.length());
0:             data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 assertEquals (data1 [i], data2 [i]);
0:             //insert the blob and test again
0:             pstmt.setInt (1, 2);
0:             pstmt.setBlob (2, blob);
0:             pstmt.executeUpdate();
0:             rs = stmt.executeQuery("select data from blobtest where " +
0:                     "id = 2");
0:             assertEquals(true, rs.next());
0:             blob = rs.getBlob (1);
0:             assertEquals (BUFFER_SIZE + UPDATE_SIZE, blob.length());
0:             data2 = blob.getBytes (100, UPDATE_SIZE);
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 assertEquals (data1 [i], data2 [i]);
0:             data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 assertEquals (data1 [i], data2 [i]);
1: 
0:             //now add more than 4k so file get in use
0:             for (int i = 0; i < 5; i++)
0:                 blob.setBytes (i * BUFFER_SIZE + 1, data);
0:             assertEquals (BUFFER_SIZE * 5 , blob.length());
0:             blob.setBytes (BUFFER_SIZE + 1, data1);
0:             blob.setBytes (BUFFER_SIZE * 5 + 1, data1);
0:             assertEquals (5 * BUFFER_SIZE + UPDATE_SIZE, blob.length());
0:             //insert it into table
0:             pstmt.setInt (1, 3);
0:             pstmt.setBlob (2, blob);
0:             pstmt.executeUpdate ();
0:             rs = stmt.executeQuery("select data from blobtest where " +
0:                                     "id = 3");
0:             assertEquals(true, rs.next());
0:             blob = rs.getBlob (1);
0:             data2 = blob.getBytes (BUFFER_SIZE + 1, UPDATE_SIZE);
0:             assertEquals (5 * BUFFER_SIZE + UPDATE_SIZE, blob.length());
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 assertEquals (data1 [i], data2 [i]);
0:             data2 = blob.getBytes (5 * BUFFER_SIZE + 1, UPDATE_SIZE);
0:             for (int i = 0; i < UPDATE_SIZE; i++)
0:                 assertEquals (data1 [i], data2 [i]);
0:             //test truncate
0:             blob.truncate (BUFFER_SIZE);
0:             assertEquals (BUFFER_SIZE, blob.length());
0:             con.commit();
1:             stmt.close();
0:             pstmt.close();
1:         }
0:         finally {
0:             if (con != null) {
0:                 con.commit();
1:                 con.close();
1:             }
1:         }
1:     }
1: 
0:     protected void tearDown() throws SQLException {
1:         Connection con = getConnection();
1:         Statement stmt = con.createStatement();
1:         stmt.execute ("drop table blobtest");
1:         stmt.close();
1:         con.close();
1:     }
1: }
============================================================================