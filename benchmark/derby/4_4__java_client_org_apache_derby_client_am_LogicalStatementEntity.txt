1:1beab6c: /*
3:1beab6c: 
1:1beab6c:    Derby - Class org.apache.derby.client.am.LogicalStatementEntity
1:1beab6c: 
1:1beab6c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1beab6c:    contributor license agreements.  See the NOTICE file distributed with
1:1beab6c:    this work for additional information regarding copyright ownership.
1:1beab6c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1beab6c:    (the "License"); you may not use this file except in compliance with
1:1beab6c:    the License.  You may obtain a copy of the License at
1:1beab6c: 
1:1beab6c:       http://www.apache.org/licenses/LICENSE-2.0
1:1beab6c: 
1:1beab6c:    Unless required by applicable law or agreed to in writing, software
1:1beab6c:    distributed under the License is distributed on an "AS IS" BASIS,
1:1beab6c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1beab6c:    See the License for the specific language governing permissions and
1:1beab6c:    limitations under the License.
1:1beab6c: 
1:1beab6c:  */
1:1beab6c: package org.apache.derby.client.am;
1:1beab6c: 
1:69e3d06: import java.sql.CallableStatement;
1:69e3d06: import java.sql.PreparedStatement;
1:1beab6c: import java.sql.SQLException;
1:69e3d06: import java.sql.Statement;
1:1beab6c: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKey;
1:5ef7a0d: import org.apache.derby.shared.common.reference.SQLState;
1:1beab6c: import org.apache.derby.shared.common.sanity.SanityManager;
1:1beab6c: 
1:1beab6c: /**
1:1beab6c:  * Common class interacting with the JDBC statement cache for logical prepared
1:1beab6c:  * statements and logical callable statements.
1:1beab6c:  * <p>
1:1beab6c:  * Note that {@link #getPhysPs} and {@link #getPhysCs} takes care of checking if
1:1beab6c:  * the logical statement has been closed. The physical statement will take care
1:1beab6c:  * of validating itself.
1:1beab6c:  * <p>
1:1beab6c:  * Beside from the above, special treatment of logical entities happens
1:1beab6c:  * on close. This is the point where cache interaction takes place, and also
1:1beab6c:  * where the appropriate methods are called on the physical statement to perform
1:1beab6c:  * the necessary clean up for later reuse.
1:1beab6c:  * <p>
1:1beab6c:  * A note regarding the thread safety of this class, is that access to
1:1beab6c:  * {@code physicalPs} and {@code physicalCs} is guarded by the instance of this
1:1beab6c:  * class, but it is assumed that operation on/within the physical statement is
1:1beab6c:  * synchronized in the physical statement itself .
1:1beab6c:  */
1:1beab6c: //@ThreadSafe
1:142b9af: abstract class LogicalStatementEntity
1:69e3d06:         implements Statement {
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Tells if we're holding a callable statement or not.
1:1beab6c:      * <p>
1:1beab6c:      * Used for sanity checking.
1:1beab6c:      */
1:1beab6c:     private final boolean hasCallableStmt;
1:1beab6c:     /**
1:1beab6c:      * Associated physical prepared statement.
1:1beab6c:      * <p>
1:1beab6c:      * If this is {@code null}, the logical entity is closed.
1:1beab6c:      */
1:1beab6c:     //@GuardedBy("this")
1:69e3d06:     private PreparedStatement physicalPs;
1:1beab6c:     /**
1:69e3d06:      * Associated physical callable statement, if any.
1:1beab6c:      * <p>
1:1beab6c:      * This is a convenience reference, to avoid having to cast on every
1:69e3d06:      * invocation of {@link #getPhysCs} if the logical entity represents a
1:1beab6c:      * callable statement.
1:1beab6c:      */
1:1beab6c:     //@GuardedBy("this)
1:69e3d06:     private CallableStatement physicalCs;
1:77a3bd1:     /** The owner of this logical entity. */
1:77a3bd1:     private StatementCacheInteractor owner;
1:1beab6c:     /** The key for the associated statement. */
1:1beab6c:     private final StatementKey stmtKey;
1:1beab6c:     /** Cache for physical statements. */
1:1beab6c:     //@GuardedBy("this)
1:1beab6c:     private final JDBCStatementCache cache;
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Create a logical entity for a {@link java.sql.PreparedStatement}.
1:1beab6c:      *
1:1beab6c:      * @param physicalPs a physical {@link java.sql.PreparedStatement}
1:1beab6c:      * @param stmtKey cache key for the physical statement
1:d6cf884:      * @param cacheInteractor creating statement cache interactor
1:1beab6c:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:1beab6c:      */
1:69e3d06:     protected LogicalStatementEntity(PreparedStatement physicalPs,
1:1beab6c:                                      StatementKey stmtKey,
1:d6cf884:                                      StatementCacheInteractor cacheInteractor) {
1:d6cf884:         if (cacheInteractor.getCache() == null) {
1:1beab6c:             // Internal check, failure indicates programming error.
1:1beab6c:             // No need to localize error message.
1:1beab6c:             throw new IllegalArgumentException(
1:1beab6c:                     "statement cache reference cannot be <null>");
1:1beab6c:         }
1:1beab6c:         this.stmtKey = stmtKey;
1:d6cf884:         this.cache = cacheInteractor.getCache();
1:77a3bd1:         this.owner = cacheInteractor;
1:1beab6c:         this.physicalPs = physicalPs;
1:69e3d06:         if (physicalPs instanceof CallableStatement) {
1:1beab6c:             this.hasCallableStmt = true;
1:69e3d06:             this.physicalCs = (CallableStatement)physicalPs;
1:1beab6c:         } else {
1:1beab6c:             this.hasCallableStmt = false;
1:1beab6c:             this.physicalCs = null;
1:1beab6c:         }
1:69e3d06:         ((ClientPreparedStatement)physicalPs).setOwner(this);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Returns the associated physical prepared statement.
1:1beab6c:      *
1:1beab6c:      * @return A prepared statement.
1:1beab6c:      * @throws SQLException if the logical statement has been closed
1:1beab6c:      */
1:69e3d06:     synchronized PreparedStatement getPhysPs()
1:1beab6c:             throws SQLException {
1:1beab6c:         if (physicalPs == null) {
1:1beab6c:             throw (new SqlException(null,
1:1beab6c:                 new ClientMessageId(SQLState.ALREADY_CLOSED),
1:1beab6c:                                     "PreparedStatement")).getSQLException();
1:1beab6c:         }
1:1beab6c:         return physicalPs;
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Returns the associated physical callable statement.
1:1beab6c:      *
1:1beab6c:      * @return A callable statement.
1:1beab6c:      * @throws SQLException if the logical statement has been closed
1:1beab6c:      */
1:69e3d06:     synchronized CallableStatement getPhysCs()
1:1beab6c:             throws SQLException {
1:1beab6c:         if (SanityManager.DEBUG) {
1:1beab6c:             SanityManager.ASSERT(hasCallableStmt,
1:1beab6c:                     "called getPhysCs(), but created with PreparedStatement");
1:1beab6c:         }
1:1beab6c:         if (physicalCs == null) {
1:1beab6c:             throw (new SqlException(null,
1:1beab6c:                 new ClientMessageId(SQLState.ALREADY_CLOSED),
1:1beab6c:                                     "CallableStatement")).getSQLException();
1:1beab6c:         }
1:1beab6c:         return physicalCs;
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:de8ba18:      * Returns the associated physical statement.
1:de8ba18:      *
1:de8ba18:      * @return A statement.
1:de8ba18:      * @throws SQLException if the logical statement has been closed
1:de8ba18:      */
1:0326967:     private synchronized Statement getPhysStmt()
1:de8ba18:             throws SQLException
1:de8ba18:     {
1:de8ba18:         if ( hasCallableStmt ) { return getPhysCs(); }
1:de8ba18:         else { return getPhysPs(); }
1:de8ba18:     }
1:f26c60c: 
1:de8ba18:     /**
1:1beab6c:      * Close the logical statement.
1:1beab6c:      *
1:1beab6c:      * @throws SQLException if closing the statement fails
1:1beab6c:      */
1:1beab6c:     public synchronized void close() throws SQLException {
1:1beab6c:         if (physicalPs != null) {
1:69e3d06:             final ClientPreparedStatement temporaryPsRef =
1:69e3d06:                     (ClientPreparedStatement)physicalPs;
1:1beab6c:             // Nullify both references.
1:1beab6c:             physicalPs = null;
1:1beab6c:             physicalCs = null;
1:de8ba18: 
1:77a3bd1:             this.owner.markClosed(this);
1:77a3bd1:             // Nullify the reference, since the entity object might stick around
1:77a3bd1:             // for a while.
1:77a3bd1:             this.owner = null;
1:142b9af:             // Reset the owner of the physical statement.
1:142b9af:             temporaryPsRef.setOwner(null);
1:731ca06:             // NOTE: Accessing ps state directly below only to avoid tracing.
1:1beab6c:             // If the underlying statement has become closed, don't cache it.
1:731ca06:             if (!temporaryPsRef.openOnClient_) {
1:731ca06:                 return;
1:731ca06:             }
1:731ca06:             // If the poolable hint is false, don't cache it.
1:731ca06:             if (!temporaryPsRef.isPoolable) {
1:731ca06:                 temporaryPsRef.close();
1:1beab6c:                 return;
1:1beab6c:             }
1:142b9af: 
1:1beab6c:             // Reset the statement for reuse.
1:1beab6c:             try {
1:76af6ed:                 temporaryPsRef.resetForReuse();
1:1beab6c:             } catch (SqlException sqle) {
1:76af6ed:                 // Get a wrapper and throw it.
1:1beab6c:                 throw sqle.getSQLException();
1:1beab6c:             }
1:1beab6c: 
1:1beab6c:             // Try to insert the statement into the cache.
1:1beab6c:             if (!cache.cacheStatement(stmtKey, temporaryPsRef)) {
1:1beab6c:                 // Statement was already in the cache, discard this one.
1:1beab6c:                 temporaryPsRef.close();
1:1beab6c:             }
1:1beab6c:         }
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Tells if the logical entity is closed.
1:1beab6c:      * <p>
1:1beab6c:      * If this method is used to avoid the possibility of raising an exception
1:1beab6c:      * because the logical statement has been closed and then invoke a method on
1:1beab6c:      * the physical statement, one must synchronize on this instance in the
1:1beab6c:      * calling code.
1:1beab6c:      *
1:1beab6c:      * @return {@code true} if closed, {@code false} if open.
1:1beab6c:      */
1:1beab6c:     synchronized boolean isLogicalEntityClosed() {
1:1beab6c:         return (physicalPs == null);
1:1beab6c:     }
1:de8ba18:     
1:5ef7a0d:     // JDBC 4.0 java.sql.Wrapper interface methods
1:5ef7a0d: 
1:5ef7a0d:     /**
1:5ef7a0d:      * Check whether this instance wraps an object that implements the interface
1:5ef7a0d:      * specified by {@code iface}.
1:5ef7a0d:      *
1:5ef7a0d:      * @param iface a class defining an interface
1:5ef7a0d:      * @return {@code true} if this instance implements {@code iface}, or
1:5ef7a0d:      * {@code false} otherwise
1:5ef7a0d:      * @throws SQLException if an error occurs while determining if this
1:5ef7a0d:      * instance implements {@code iface}
1:5ef7a0d:      */
1:5ef7a0d:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:2ff02ef:         getPhysStmt(); // Just to check that the statement is not closed.
1:2ff02ef:         return iface.isInstance(this);
1:5ef7a0d:     }
1:5ef7a0d: 
1:5ef7a0d:     /**
1:5ef7a0d:      * Returns an instance of the specified interface if this instance is
1:5ef7a0d:      * a wrapper for the interface.
1:5ef7a0d:      *
1:5ef7a0d:      * @param  iface a class defining an interface
1:5ef7a0d:      * @return an object that implements the interface
1:5ef7a0d:      * @throws SQLException if no object is found that implements the
1:5ef7a0d:      * interface
1:5ef7a0d:      */
1:5ef7a0d:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:69e3d06:         if (((ClientStatement) getPhysStmt()).isClosed()) {
1:5ef7a0d:             throw new SqlException(null,
1:5ef7a0d:                 new ClientMessageId(SQLState.ALREADY_CLOSED),
1:5ef7a0d:                 hasCallableStmt ? "CallableStatement" : "PreparedStatement")
1:5ef7a0d:                     .getSQLException();
1:5ef7a0d:         }
1:5ef7a0d: 
1:5ef7a0d:         try {
1:5ef7a0d:             return iface.cast(this);
1:5ef7a0d:         } catch (ClassCastException cce) {
1:5ef7a0d:             throw new SqlException(null,
1:5ef7a0d:                 new ClientMessageId(SQLState.UNABLE_TO_UNWRAP), iface)
1:5ef7a0d:                     .getSQLException();
1:5ef7a0d:         }
1:5ef7a0d:     }
1:5ef7a0d: 
1:f26c60c:     ////////////////////////////////////////////////////////////////////
1:f26c60c:     //
1:de8ba18:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:de8ba18:     //
1:de8ba18:     ////////////////////////////////////////////////////////////////////
1:de8ba18: 
1:de8ba18:     public  void    closeOnCompletion() throws SQLException
1:de8ba18:     {
1:69e3d06:         ((ClientStatement) getPhysStmt()).closeOnCompletion();
1:de8ba18:     }
1:de8ba18: 
1:de8ba18:     public  boolean isCloseOnCompletion() throws SQLException
1:de8ba18:     {
1:69e3d06:         return ((ClientStatement) getPhysStmt()).isCloseOnCompletion();
1:de8ba18:     }
1:1beab6c: 
1:de8ba18:     ////////////////////////////////////////////////////////////////////
1:de8ba18:     //
1:f26c60c:     // INTRODUCED BY JDBC 4.2 IN JAVA 8
1:f26c60c:     //
1:f26c60c:     ////////////////////////////////////////////////////////////////////
1:f26c60c: 
1:0b0a105:     public  long[] executeLargeBatch() throws SQLException
1:0b0a105:     {
1:69e3d06:         return ((ClientStatement) getPhysStmt()).executeLargeBatch();
1:0b0a105:     }
1:f26c60c:     public  long executeLargeUpdate( String sql ) throws SQLException
1:f26c60c:     {
1:69e3d06:         return ((ClientStatement) getPhysStmt()).executeLargeUpdate( sql );
1:f26c60c:     }
1:f26c60c:     public  long executeLargeUpdate( String sql, int autoGeneratedKeys) throws SQLException
1:f26c60c:     {
1:69e3d06:         return ((ClientStatement)getPhysStmt()).
1:69e3d06:             executeLargeUpdate(sql, autoGeneratedKeys);
1:f26c60c:     }
1:f26c60c:     public  long executeLargeUpdate( String sql, int[] columnIndexes ) throws SQLException
1:f26c60c:     {
1:69e3d06:         return ((ClientStatement)getPhysStmt()).
1:69e3d06:             executeLargeUpdate(sql, columnIndexes);
1:f26c60c:     }
1:f26c60c:     public  long executeLargeUpdate( String sql, String[] columnNames ) throws SQLException
1:f26c60c:     {
1:69e3d06:         return ((ClientStatement)getPhysStmt()).
1:69e3d06:             executeLargeUpdate(sql, columnNames);
1:f26c60c:     }
1:f26c60c:     public  long getLargeUpdateCount() throws SQLException
1:f26c60c:     {
1:69e3d06:         return ((ClientStatement) getPhysStmt()).getLargeUpdateCount();
1:f26c60c:     }
1:47a8183:     public  long getLargeMaxRows() throws SQLException
1:47a8183:     {
1:69e3d06:         return ((ClientStatement) getPhysStmt()).getLargeMaxRows();
1:47a8183:     }
1:47a8183:     public  void    setLargeMaxRows(long maxRows) throws SQLException
1:47a8183:     {
1:69e3d06:         ((ClientStatement) getPhysStmt()).setLargeMaxRows( maxRows );
1:47a8183:     }
1:f26c60c: 
1:1beab6c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     private synchronized Statement getPhysStmt()
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
/////////////////////////////////////////////////////////////////////////
1:         implements Statement {
/////////////////////////////////////////////////////////////////////////
1:     private PreparedStatement physicalPs;
1:      * Associated physical callable statement, if any.
1:      * invocation of {@link #getPhysCs} if the logical entity represents a
1:     private CallableStatement physicalCs;
/////////////////////////////////////////////////////////////////////////
1:     protected LogicalStatementEntity(PreparedStatement physicalPs,
/////////////////////////////////////////////////////////////////////////
1:         if (physicalPs instanceof CallableStatement) {
1:             this.physicalCs = (CallableStatement)physicalPs;
1:         ((ClientPreparedStatement)physicalPs).setOwner(this);
/////////////////////////////////////////////////////////////////////////
1:     synchronized PreparedStatement getPhysPs()
/////////////////////////////////////////////////////////////////////////
1:     synchronized CallableStatement getPhysCs()
/////////////////////////////////////////////////////////////////////////
0:     synchronized Statement getPhysStmt()
/////////////////////////////////////////////////////////////////////////
1:             final ClientPreparedStatement temporaryPsRef =
1:                     (ClientPreparedStatement)physicalPs;
/////////////////////////////////////////////////////////////////////////
1:         if (((ClientStatement) getPhysStmt()).isClosed()) {
/////////////////////////////////////////////////////////////////////////
1:         ((ClientStatement) getPhysStmt()).closeOnCompletion();
1:         return ((ClientStatement) getPhysStmt()).isCloseOnCompletion();
/////////////////////////////////////////////////////////////////////////
1:         return ((ClientStatement) getPhysStmt()).executeLargeBatch();
1:         return ((ClientStatement) getPhysStmt()).executeLargeUpdate( sql );
1:         return ((ClientStatement)getPhysStmt()).
1:             executeLargeUpdate(sql, autoGeneratedKeys);
1:         return ((ClientStatement)getPhysStmt()).
1:             executeLargeUpdate(sql, columnIndexes);
1:         return ((ClientStatement)getPhysStmt()).
1:             executeLargeUpdate(sql, columnNames);
1:         return ((ClientStatement) getPhysStmt()).getLargeUpdateCount();
1:         return ((ClientStatement) getPhysStmt()).getLargeMaxRows();
1:         ((ClientStatement) getPhysStmt()).setLargeMaxRows( maxRows );
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0:                 (PreparedStatement)physicalPs;
/////////////////////////////////////////////////////////////////////////
0:         if (((Statement) getPhysStmt()).isClosed()) {
/////////////////////////////////////////////////////////////////////////
0:         ((Statement) getPhysStmt()).closeOnCompletion();
0:         return ((Statement) getPhysStmt()).isCloseOnCompletion();
/////////////////////////////////////////////////////////////////////////
0:         return ((Statement) getPhysStmt()).executeLargeBatch();
0:         return ((Statement) getPhysStmt()).executeLargeUpdate( sql );
0:         return ((Statement) getPhysStmt()).
0:             executeLargeUpdate( sql, autoGeneratedKeys );
0:         return ((Statement) getPhysStmt()).
0:             executeLargeUpdate( sql, columnIndexes );
0:         return ((Statement) getPhysStmt()).
0:             executeLargeUpdate( sql, columnNames );
0:         return ((Statement) getPhysStmt()).getLargeUpdateCount();
0:         return ((Statement) getPhysStmt()).getLargeMaxRows();
0:         ((Statement) getPhysStmt()).setLargeMaxRows( maxRows );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:47a8183
/////////////////////////////////////////////////////////////////////////
1:     public  long getLargeMaxRows() throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).getLargeMaxRows();
1:     }
1:     public  void    setLargeMaxRows(long maxRows) throws SQLException
1:     {
0:         ((org.apache.derby.client.am.Statement) getPhysStmt()).setLargeMaxRows( maxRows );
1:     }
commit:0b0a105
/////////////////////////////////////////////////////////////////////////
1:     public  long[] executeLargeBatch() throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).executeLargeBatch();
1:     }
commit:f26c60c
/////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.2 IN JAVA 8
1:     //
1:     ////////////////////////////////////////////////////////////////////
1: 
1:     public  long executeLargeUpdate( String sql ) throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).executeLargeUpdate( sql );
1:     }
1:     public  long executeLargeUpdate( String sql, int autoGeneratedKeys) throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).executeLargeUpdate( sql, autoGeneratedKeys );
1:     }
1:     public  long executeLargeUpdate( String sql, int[] columnIndexes ) throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).executeLargeUpdate( sql, columnIndexes );
1:     }
1:     public  long executeLargeUpdate( String sql, String[] columnNames ) throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).executeLargeUpdate( sql, columnNames );
1:     }
1:     public  long getLargeUpdateCount() throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).getLargeUpdateCount();
1:     }
1: 
commit:de8ba18
/////////////////////////////////////////////////////////////////////////
1:      * Returns the associated physical statement.
1:      *
1:      * @return A statement.
1:      * @throws SQLException if the logical statement has been closed
1:      */
0:     synchronized java.sql.Statement getPhysStmt()
1:             throws SQLException
1:     {
1:         if ( hasCallableStmt ) { return getPhysCs(); }
1:         else { return getPhysPs(); }
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:     //
1:     ////////////////////////////////////////////////////////////////////
1: 
1:     public  void    closeOnCompletion() throws SQLException
1:     {
0:         ((org.apache.derby.client.am.Statement) getPhysStmt()).closeOnCompletion();
1:     }
1: 
1:     public  boolean isCloseOnCompletion() throws SQLException
1:     {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt()).isCloseOnCompletion();
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2ff02ef
/////////////////////////////////////////////////////////////////////////
1:         getPhysStmt(); // Just to check that the statement is not closed.
1:         return iface.isInstance(this);
commit:5ef7a0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:     // JDBC 4.0 java.sql.Wrapper interface methods
1: 
1:     /**
1:      * Check whether this instance wraps an object that implements the interface
1:      * specified by {@code iface}.
1:      *
1:      * @param iface a class defining an interface
1:      * @return {@code true} if this instance implements {@code iface}, or
1:      * {@code false} otherwise
1:      * @throws SQLException if an error occurs while determining if this
1:      * instance implements {@code iface}
1:      */
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
0:         return ((org.apache.derby.client.am.Statement) getPhysStmt())
0:                 .isWrapperFor(iface);
1:     }
1: 
1:     /**
1:      * Returns an instance of the specified interface if this instance is
1:      * a wrapper for the interface.
1:      *
1:      * @param  iface a class defining an interface
1:      * @return an object that implements the interface
1:      * @throws SQLException if no object is found that implements the
1:      * interface
1:      */
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
0:         if (((org.apache.derby.client.am.Statement) getPhysStmt()).isClosed()) {
1:             throw new SqlException(null,
1:                 new ClientMessageId(SQLState.ALREADY_CLOSED),
1:                 hasCallableStmt ? "CallableStatement" : "PreparedStatement")
1:                     .getSQLException();
1:         }
1: 
1:         try {
1:             return iface.cast(this);
1:         } catch (ClassCastException cce) {
1:             throw new SqlException(null,
1:                 new ClientMessageId(SQLState.UNABLE_TO_UNWRAP), iface)
1:                     .getSQLException();
1:         }
1:     }
1: 
commit:7af858d
/////////////////////////////////////////////////////////////////////////
0:         if (physicalPs instanceof java.sql.CallableStatement) {
0:             this.physicalCs = (java.sql.CallableStatement)physicalPs;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:731ca06
/////////////////////////////////////////////////////////////////////////
1:             // NOTE: Accessing ps state directly below only to avoid tracing.
1:             if (!temporaryPsRef.openOnClient_) {
1:                 return;
1:             }
1:             // If the poolable hint is false, don't cache it.
1:             if (!temporaryPsRef.isPoolable) {
1:                 temporaryPsRef.close();
commit:76af6ed
/////////////////////////////////////////////////////////////////////////
1:                 temporaryPsRef.resetForReuse();
1:                 // Get a wrapper and throw it.
commit:77a3bd1
/////////////////////////////////////////////////////////////////////////
1:     /** The owner of this logical entity. */
1:     private StatementCacheInteractor owner;
/////////////////////////////////////////////////////////////////////////
1:         this.owner = cacheInteractor;
/////////////////////////////////////////////////////////////////////////
1:             this.owner.markClosed(this);
1:             // Nullify the reference, since the entity object might stick around
1:             // for a while.
1:             this.owner = null;
commit:142b9af
/////////////////////////////////////////////////////////////////////////
1: abstract class LogicalStatementEntity
0:         implements java.sql.Statement {
/////////////////////////////////////////////////////////////////////////
0:         ((PreparedStatement)physicalPs).setOwner(this);
/////////////////////////////////////////////////////////////////////////
1:             // Reset the owner of the physical statement.
1:             temporaryPsRef.setOwner(null);
1: 
commit:d6cf884
/////////////////////////////////////////////////////////////////////////
1:      * @param cacheInteractor creating statement cache interactor
1:                                      StatementCacheInteractor cacheInteractor) {
1:         if (cacheInteractor.getCache() == null) {
1:         this.cache = cacheInteractor.getCache();
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalStatementEntity
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * Common class interacting with the JDBC statement cache for logical prepared
1:  * statements and logical callable statements.
1:  * <p>
1:  * Note that {@link #getPhysPs} and {@link #getPhysCs} takes care of checking if
1:  * the logical statement has been closed. The physical statement will take care
1:  * of validating itself.
1:  * <p>
1:  * Beside from the above, special treatment of logical entities happens
1:  * on close. This is the point where cache interaction takes place, and also
1:  * where the appropriate methods are called on the physical statement to perform
1:  * the necessary clean up for later reuse.
1:  * <p>
1:  * A note regarding the thread safety of this class, is that access to
1:  * {@code physicalPs} and {@code physicalCs} is guarded by the instance of this
1:  * class, but it is assumed that operation on/within the physical statement is
1:  * synchronized in the physical statement itself .
1:  */
1: //@ThreadSafe
0: class LogicalStatementEntity {
1: 
1:     /**
1:      * Tells if we're holding a callable statement or not.
1:      * <p>
1:      * Used for sanity checking.
1:      */
1:     private final boolean hasCallableStmt;
1:     /**
1:      * Associated physical prepared statement.
1:      * <p>
1:      * If this is {@code null}, the logical entity is closed.
1:      */
1:     //@GuardedBy("this")
0:     private java.sql.PreparedStatement physicalPs;
1:     /**
0:      * Assoicated physical callable statement, if any.
1:      * <p>
1:      * This is a convenience reference, to avoid having to cast on every
0:      * invokation of {@link #getPhysCs} if the logical entity represents a
1:      * callable statement.
1:      */
1:     //@GuardedBy("this)
0:     private java.sql.CallableStatement physicalCs;
1:     /** The key for the associated statement. */
1:     private final StatementKey stmtKey;
1:     /** Cache for physical statements. */
1:     //@GuardedBy("this)
1:     private final JDBCStatementCache cache;
1: 
1:     /**
1:      * Create a logical entity for a {@link java.sql.PreparedStatement}.
1:      *
1:      * @param physicalPs a physical {@link java.sql.PreparedStatement}
1:      * @param stmtKey cache key for the physical statement
0:      * @param cache statement cache
1:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:      */
0:     protected LogicalStatementEntity(java.sql.PreparedStatement physicalPs,
1:                                      StatementKey stmtKey,
0:                                      JDBCStatementCache cache) {
0:         if (cache == null) {
1:             // Internal check, failure indicates programming error.
1:             // No need to localize error message.
1:             throw new IllegalArgumentException(
1:                     "statement cache reference cannot be <null>");
1:         }
1:         this.stmtKey = stmtKey;
0:         this.cache = cache;
1:         this.physicalPs = physicalPs;
0:         if (physicalPs instanceof CallableStatement) {
1:             this.hasCallableStmt = true;
0:             this.physicalCs = (CallableStatement)physicalPs;
1:         } else {
1:             this.hasCallableStmt = false;
1:             this.physicalCs = null;
1:         }
1:     }
1: 
1:     /**
1:      * Returns the associated physical prepared statement.
1:      *
1:      * @return A prepared statement.
1:      * @throws SQLException if the logical statement has been closed
1:      */
0:     synchronized java.sql.PreparedStatement getPhysPs()
1:             throws SQLException {
1:         if (physicalPs == null) {
1:             throw (new SqlException(null,
1:                 new ClientMessageId(SQLState.ALREADY_CLOSED),
1:                                     "PreparedStatement")).getSQLException();
1:         }
1:         return physicalPs;
1:     }
1: 
1:     /**
1:      * Returns the associated physical callable statement.
1:      *
1:      * @return A callable statement.
1:      * @throws SQLException if the logical statement has been closed
1:      */
0:     synchronized java.sql.CallableStatement getPhysCs()
1:             throws SQLException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(hasCallableStmt,
1:                     "called getPhysCs(), but created with PreparedStatement");
1:         }
1:         if (physicalCs == null) {
1:             throw (new SqlException(null,
1:                 new ClientMessageId(SQLState.ALREADY_CLOSED),
1:                                     "CallableStatement")).getSQLException();
1:         }
1:         return physicalCs;
1:     }
1: 
1:     /**
1:      * Close the logical statement.
1:      *
1:      * @throws SQLException if closing the statement fails
1:      */
1:     public synchronized void close() throws SQLException {
1:         if (physicalPs != null) {
0:             final PreparedStatement temporaryPsRef =
0:                     (org.apache.derby.client.am.PreparedStatement)physicalPs;
1:             // Nullify both references.
1:             physicalPs = null;
1:             physicalCs = null;
1: 
1:             // If the underlying statement has become closed, don't cache it.
0:             if (temporaryPsRef.isClosed()) {
1:                 return;
1:             }
1: 
1:             // Reset the statement for reuse.
1:             try {
0:                 // WARNING: This is just a placeholder and is incorrect!!!
0:                 //          A proper reset procedure must be implemented.
0:                 temporaryPsRef.reset(true);
1:             } catch (SqlException sqle) {
1:                 throw sqle.getSQLException();
1:             }
1: 
1:             // Try to insert the statement into the cache.
1:             if (!cache.cacheStatement(stmtKey, temporaryPsRef)) {
1:                 // Statement was already in the cache, discard this one.
1:                 temporaryPsRef.close();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Tells if the logical entity is closed.
1:      * <p>
1:      * If this method is used to avoid the possibility of raising an exception
1:      * because the logical statement has been closed and then invoke a method on
1:      * the physical statement, one must synchronize on this instance in the
1:      * calling code.
1:      *
1:      * @return {@code true} if closed, {@code false} if open.
1:      */
1:     synchronized boolean isLogicalEntityClosed() {
1:         return (physicalPs == null);
1:     }
1: }
============================================================================