1:5694a4b: /**
1:5694a4b:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SimpleTest
1:5694a4b:  *  
1:5694a4b:  * Licensed to the Apache Software Foundation (ASF) under one
1:5694a4b:  * or more contributor license agreements.  See the NOTICE file
1:5694a4b:  * distributed with this work for additional information
1:5694a4b:  * regarding copyright ownership.  The ASF licenses this file
1:5694a4b:  * to you under the Apache License, Version 2.0 (the
1:5694a4b:  * "License"); you may not use this file except in compliance
1:5694a4b:  * with the License.  You may obtain a copy of the License at
1:5694a4b:  *
1:5694a4b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5694a4b:  *
1:5694a4b:  * Unless required by applicable law or agreed to in writing,
1:5694a4b:  * software distributed under the License is distributed on an
1:5694a4b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5694a4b:  * KIND, either express or implied.  See the License for the
1:5694a4b:  * specific language governing permissions and limitations
1:5694a4b:  * under the License.
1:5694a4b:  */
1:5694a4b: 
1:5694a4b: package org.apache.derbyTesting.functionTests.tests.lang;
1:5694a4b: 
1:5694a4b: import java.sql.Connection;
1:5694a4b: import java.sql.PreparedStatement;
1:5694a4b: import java.sql.ResultSet;
1:5694a4b: import java.sql.ResultSetMetaData;
1:5694a4b: import java.sql.SQLException;
1:5694a4b: import java.sql.Statement;
1:5694a4b: 
1:5694a4b: import junit.framework.Test;
1:5694a4b: 
1:5694a4b: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:5694a4b: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:5694a4b: import org.apache.derbyTesting.junit.JDBC;
1:5694a4b: import org.apache.derbyTesting.junit.TestConfiguration;
1:5694a4b: 
1:5694a4b: public class SimpleTest extends BaseJDBCTestCase {
1:5694a4b: 
1:5694a4b:     public SimpleTest(String name) {
1:5694a4b:         super(name);
1:5694a4b:     
1:5694a4b:     }
1:5694a4b:     
1:5694a4b:     /**
1:5694a4b:      * converted from supersimple.sql.  Data limits seems a 
1:5694a4b:      * more relevant name.
1:5694a4b:      * 
1:5694a4b:      * @throws SQLException
1:5694a4b:      */
1:5694a4b:     public void testBasicOperations() throws SQLException {
1:5694a4b:         Connection conn = getConnection();
1:5694a4b:         Statement s = conn.createStatement();
1:5694a4b:         s.executeUpdate("create table b (si smallint,i int, bi bigint, r real, f float, d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), ch20 char(20),vc varchar(20), lvc long varchar, blobCol blob(1000),  clobCol clob(1000))");
1:5694a4b:         s.executeUpdate(" insert into b values(2,3,4,5.3,5.3,5.3,31.13,123456.123, 'one','one','one',cast(X'01ABCD' as blob(1000)),'one')");
1:5694a4b:         s.executeUpdate("insert into b values(-32768,-2147483648, -9223372036854775808 ,1.2E-37, 2.225E-307, +2.225E-307,-56.12, -123456.123,'one','one','one', cast(X'01ABCD' as blob(1000)),'one')");
1:5694a4b:         s.executeUpdate(" insert into b values(null,null,null,null,null,null,null,null,null,null,null,null,null)");
1:5694a4b:         s.executeUpdate(" insert into b values(32767,2147483647, 9223372036854775807 ,1.4 , 3.4028235E38 ,3.4028235E38  ,999.99, 9999999.999,'one','one','one',cast(X'01ABCD' as blob(1000)), 'one')");
1:5694a4b:         ResultSet rs = s.executeQuery("select * from b");
1:5694a4b:         String [][] expectedRows = {{"2","3","4","5.3","5.3","5.3","31.13","123456.123","one                 ","one","one","01abcd","one"},
1:5694a4b:         {"-32768","-2147483648","-9223372036854775808","1.2E-37","2.225E-307","2.225E-307","-56.12","-123456.123","one                 ","one","one","01abcd","one"},
1:5694a4b:         {null,null,null,null,null,null,null,null,null,null,null,null,null},
1:5694a4b:         {"32767","2147483647","9223372036854775807","1.4","3.4028235E38","3.4028235E38","999.99","9999999.999","one                 ","one","one","01abcd","one"},
1:5694a4b:         };
1:5694a4b:         
1:5694a4b:         JDBC.assertFullResultSet(rs,expectedRows);
1:5694a4b:         s.executeUpdate("drop table b");
1:5694a4b:         s.executeUpdate("create table c  (si smallint not null,i int not null , bi bigint not null, r real not null, f float not null, d double precision not null, n5_2 numeric(5,2) not null , dec10_3 decimal(10,3) not null, ch20 char(20) not null ,vc varchar(20) not null, lvc long varchar not null,  blobCol blob(1000) not null,  clobCol clob(1000) not null)");
1:5694a4b:         s.executeUpdate("insert into c values(2,3,4,5.3,5.3,5.3,31.13,123456.123, 'one','one','one', cast(X'01ABCD' as blob(1000)), 'one')");
1:5694a4b:         s.executeUpdate("insert into c values(-32768,-2147483648, -9223372036854775808 ,1.2E-37, 2.225E-307, +2.225E-307,-56.12, -123456.123,'one','one','one', cast(X'01ABCD' as blob(1000)),'one')");
1:5694a4b:         rs = s.executeQuery("select * from c");
1:5694a4b:         expectedRows = new String [][] {{"2","3","4","5.3","5.3","5.3","31.13","123456.123","one                 ","one","one","01abcd","one"},
1:5694a4b:                 {"-32768","-2147483648","-9223372036854775808","1.2E-37","2.225E-307","2.225E-307","-56.12","-123456.123","one                 ","one","one","01abcd","one"}};
1:5694a4b: 
1:5694a4b:         JDBC.assertFullResultSet(rs, expectedRows);
1:5694a4b:         s.executeUpdate("drop table c");
1:5694a4b:        
1:5694a4b:         // test large number of columns
1:5694a4b:         rs = s.executeQuery("values ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84)");
1:5694a4b:         expectedRows = new String[][] {{"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"}};
1:5694a4b:         JDBC.assertFullResultSet(rs, expectedRows);
1:5694a4b:         rs = s.executeQuery("values(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,91, 92, 93, 94, 95, 96, 97, 98, 99, 100)");
1:5694a4b:         expectedRows = new String[][] {{"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"}};
1:5694a4b:         JDBC.assertFullResultSet(rs, expectedRows);
1:5694a4b:        // test commit and rollback
1:5694a4b:         conn.setAutoCommit(false);
1:5694a4b:         s.executeUpdate("create table a (a int)");
1:5694a4b:         s.executeUpdate("insert into a values(1)");
1:5694a4b:         rs = s.executeQuery("select * from a");
1:5694a4b:         JDBC.assertFullResultSet(rs, new String [][] {{"1"}});
1:5694a4b:         conn.commit();
1:5694a4b:         s.executeUpdate("drop table a");
1:5694a4b:         conn.rollback();
1:5694a4b:         rs = s.executeQuery("select * from a");
1:5694a4b:         JDBC.assertFullResultSet(rs, new String [][] {{"1"}});
1:5694a4b:         s.executeUpdate("drop table a");
1:5694a4b:         conn.commit();            
1:5694a4b:     }
1:5694a4b:     
1:5694a4b:     
1:5694a4b:     public void testBugFixes() throws SQLException {
1:5694a4b:         Connection conn= getConnection();
1:5694a4b:         Statement s = conn.createStatement();
1:5694a4b:         // -- bug 4430 aliasinfo nullability problem
1:5694a4b:         ResultSet rs = s.executeQuery("select aliasinfo from sys.sysaliases where aliasinfo is null");
1:5694a4b:         JDBC.assertEmpty(rs);
1:5694a4b:         //-- test SQL Error with non-string arguments
1:5694a4b:         //-- Make sure connection still ok (Bug 4657)
1:5694a4b:         s.executeUpdate("create table a (a int)");
1:5694a4b:         assertStatementError("22003",s,"insert into a values(2342323423)");
1:5694a4b:         s.executeUpdate("drop table a");
1:5694a4b:       
1:5694a4b:         conn.setAutoCommit(false);
1:5694a4b:         
1:5694a4b:         // bug 4758 Store error does not return properly to client
1:5694a4b:         s.executeUpdate("create table t (i int)");
1:5694a4b:         s.executeUpdate("insert into t values(1)");
1:5694a4b:         conn.commit();
1:5694a4b:         s.executeUpdate("insert into t values(2)");
1:5694a4b:         conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:5694a4b:         Connection conn2 = openDefaultConnection();
1:5694a4b:         PreparedStatement ps2 = conn2.prepareStatement("select * from t");
1:5694a4b:         assertStatementError("40XL1",ps2);
1:5694a4b:         assertStatementError("40XL1",ps2);
1:5694a4b:         
1:5694a4b:         //-- Bug 5967 - Selecting from 2 lob columns w/ the first one having data of length 0
1:5694a4b:         Statement s2 = conn2.createStatement();
1:5694a4b:         s2.executeUpdate("create table t1 (c1 clob(10), c2 clob(10))");
1:5694a4b:         s2.executeUpdate("insert into t1 values ('', 'some clob')");
1:5694a4b:         rs = s.executeQuery("select * from t1");
1:5694a4b:         JDBC.assertFullResultSet(rs, new String[][]{{"","some clob"}});
1:5694a4b:         rs = s2.executeQuery("select c2 from t1");
1:5694a4b:         JDBC.assertFullResultSet(rs, new String[][]{{"some clob"}});
1:5694a4b:         s2.executeUpdate("drop table t1");
1:5694a4b:         conn2.commit();
1:5694a4b:         s2.close();
1:5694a4b:         ps2.close();
1:5694a4b:         conn2.close();
1:5694a4b:         
1:5694a4b:         s.executeUpdate("drop table t");
1:5694a4b:         s.close();
1:5694a4b:         conn.commit();
1:5694a4b:         conn.close();
1:5694a4b:     }
1:5694a4b: 
1:5694a4b:     public static Test suite() {
1:5694a4b:         Test suite = TestConfiguration.defaultSuite(SimpleTest.class);
1:5694a4b:         return DatabasePropertyTestSetup.setLockTimeouts(suite,3,3);
1:5694a4b:     }
1:5694a4b: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:5694a4b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SimpleTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class SimpleTest extends BaseJDBCTestCase {
1: 
1:     public SimpleTest(String name) {
1:         super(name);
1:     
1:     }
1:     
1:     /**
1:      * converted from supersimple.sql.  Data limits seems a 
1:      * more relevant name.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testBasicOperations() throws SQLException {
1:         Connection conn = getConnection();
1:         Statement s = conn.createStatement();
1:         s.executeUpdate("create table b (si smallint,i int, bi bigint, r real, f float, d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), ch20 char(20),vc varchar(20), lvc long varchar, blobCol blob(1000),  clobCol clob(1000))");
1:         s.executeUpdate(" insert into b values(2,3,4,5.3,5.3,5.3,31.13,123456.123, 'one','one','one',cast(X'01ABCD' as blob(1000)),'one')");
1:         s.executeUpdate("insert into b values(-32768,-2147483648, -9223372036854775808 ,1.2E-37, 2.225E-307, +2.225E-307,-56.12, -123456.123,'one','one','one', cast(X'01ABCD' as blob(1000)),'one')");
1:         s.executeUpdate(" insert into b values(null,null,null,null,null,null,null,null,null,null,null,null,null)");
1:         s.executeUpdate(" insert into b values(32767,2147483647, 9223372036854775807 ,1.4 , 3.4028235E38 ,3.4028235E38  ,999.99, 9999999.999,'one','one','one',cast(X'01ABCD' as blob(1000)), 'one')");
1:         ResultSet rs = s.executeQuery("select * from b");
1:         String [][] expectedRows = {{"2","3","4","5.3","5.3","5.3","31.13","123456.123","one                 ","one","one","01abcd","one"},
1:         {"-32768","-2147483648","-9223372036854775808","1.2E-37","2.225E-307","2.225E-307","-56.12","-123456.123","one                 ","one","one","01abcd","one"},
1:         {null,null,null,null,null,null,null,null,null,null,null,null,null},
1:         {"32767","2147483647","9223372036854775807","1.4","3.4028235E38","3.4028235E38","999.99","9999999.999","one                 ","one","one","01abcd","one"},
1:         };
1:         
1:         JDBC.assertFullResultSet(rs,expectedRows);
1:         s.executeUpdate("drop table b");
1:         s.executeUpdate("create table c  (si smallint not null,i int not null , bi bigint not null, r real not null, f float not null, d double precision not null, n5_2 numeric(5,2) not null , dec10_3 decimal(10,3) not null, ch20 char(20) not null ,vc varchar(20) not null, lvc long varchar not null,  blobCol blob(1000) not null,  clobCol clob(1000) not null)");
1:         s.executeUpdate("insert into c values(2,3,4,5.3,5.3,5.3,31.13,123456.123, 'one','one','one', cast(X'01ABCD' as blob(1000)), 'one')");
1:         s.executeUpdate("insert into c values(-32768,-2147483648, -9223372036854775808 ,1.2E-37, 2.225E-307, +2.225E-307,-56.12, -123456.123,'one','one','one', cast(X'01ABCD' as blob(1000)),'one')");
1:         rs = s.executeQuery("select * from c");
1:         expectedRows = new String [][] {{"2","3","4","5.3","5.3","5.3","31.13","123456.123","one                 ","one","one","01abcd","one"},
1:                 {"-32768","-2147483648","-9223372036854775808","1.2E-37","2.225E-307","2.225E-307","-56.12","-123456.123","one                 ","one","one","01abcd","one"}};
1: 
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         s.executeUpdate("drop table c");
1:        
1:         // test large number of columns
1:         rs = s.executeQuery("values ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84)");
1:         expectedRows = new String[][] {{"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"}};
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         rs = s.executeQuery("values(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,91, 92, 93, 94, 95, 96, 97, 98, 99, 100)");
1:         expectedRows = new String[][] {{"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"}};
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:        // test commit and rollback
1:         conn.setAutoCommit(false);
1:         s.executeUpdate("create table a (a int)");
1:         s.executeUpdate("insert into a values(1)");
1:         rs = s.executeQuery("select * from a");
1:         JDBC.assertFullResultSet(rs, new String [][] {{"1"}});
1:         conn.commit();
1:         s.executeUpdate("drop table a");
1:         conn.rollback();
1:         rs = s.executeQuery("select * from a");
1:         JDBC.assertFullResultSet(rs, new String [][] {{"1"}});
1:         s.executeUpdate("drop table a");
1:         conn.commit();            
1:     }
1:     
1:     
1:     public void testBugFixes() throws SQLException {
1:         Connection conn= getConnection();
1:         Statement s = conn.createStatement();
1:         // -- bug 4430 aliasinfo nullability problem
1:         ResultSet rs = s.executeQuery("select aliasinfo from sys.sysaliases where aliasinfo is null");
1:         JDBC.assertEmpty(rs);
1:         //-- test SQL Error with non-string arguments
1:         //-- Make sure connection still ok (Bug 4657)
1:         s.executeUpdate("create table a (a int)");
1:         assertStatementError("22003",s,"insert into a values(2342323423)");
1:         s.executeUpdate("drop table a");
1:       
1:         conn.setAutoCommit(false);
1:         
1:         // bug 4758 Store error does not return properly to client
1:         s.executeUpdate("create table t (i int)");
1:         s.executeUpdate("insert into t values(1)");
1:         conn.commit();
1:         s.executeUpdate("insert into t values(2)");
1:         conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:         Connection conn2 = openDefaultConnection();
1:         PreparedStatement ps2 = conn2.prepareStatement("select * from t");
1:         assertStatementError("40XL1",ps2);
1:         assertStatementError("40XL1",ps2);
1:         
1:         //-- Bug 5967 - Selecting from 2 lob columns w/ the first one having data of length 0
1:         Statement s2 = conn2.createStatement();
1:         s2.executeUpdate("create table t1 (c1 clob(10), c2 clob(10))");
1:         s2.executeUpdate("insert into t1 values ('', 'some clob')");
1:         rs = s.executeQuery("select * from t1");
1:         JDBC.assertFullResultSet(rs, new String[][]{{"","some clob"}});
1:         rs = s2.executeQuery("select c2 from t1");
1:         JDBC.assertFullResultSet(rs, new String[][]{{"some clob"}});
1:         s2.executeUpdate("drop table t1");
1:         conn2.commit();
1:         s2.close();
1:         ps2.close();
1:         conn2.close();
1:         
1:         s.executeUpdate("drop table t");
1:         s.close();
1:         conn.commit();
1:         conn.close();
1:     }
1: 
1:     public static Test suite() {
1:         Test suite = TestConfiguration.defaultSuite(SimpleTest.class);
1:         return DatabasePropertyTestSetup.setLockTimeouts(suite,3,3);
1:     }
1: }
============================================================================