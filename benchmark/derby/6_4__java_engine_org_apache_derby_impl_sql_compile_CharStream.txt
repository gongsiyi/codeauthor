1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CharStream
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This interface describes a character stream that maintains line and
1:eac0369:  * column number positions of the characters.  It also has the capability
1:eac0369:  * to backup the stream to some extent.  An implementation of this
1:eac0369:  * interface is used in the TokenManager implementation generated by
1:eac0369:  * JavaCCParser.
1:eac0369:  *
1:eac0369:  * All the methods except backup can be implemented in any fashion. backup
1:eac0369:  * needs to be implemented correctly for the correct operation of the lexer.
1:eac0369:  * Rest of the methods are all used to get information like line number,
1:eac0369:  * column number and the String that constitutes a token and are not used
1:eac0369:  * by the lexer. Hence their implementation won't affect the generated lexer's
1:eac0369:  * operation.
1:eac0369:  */
1:eac0369: 
1:b49cc55: interface CharStream {
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the next character from the selected input.  The method
1:eac0369:    * of selecting the input is the responsibility of the class
1:eac0369:    * implementing this interface.  Can throw any java.io.IOException.
1:eac0369:    */
1:eac0369:   char readChar() throws java.io.IOException;
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the column position of the character last read.
1:eac0369:    * @deprecated
1:eac0369:    * @see #getEndColumn
1:eac0369:    */
1:3bb140c:   @Deprecated
1:eac0369:   int getColumn();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the line number of the character last read.
1:eac0369:    * @deprecated
1:eac0369:    * @see #getEndLine
1:eac0369:    */
1:3bb140c:   @Deprecated
1:eac0369:   int getLine();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the column number of the last character for current token (being
1:eac0369:    * matched after the last call to BeginTOken).
1:eac0369:    */
1:eac0369:   int getEndColumn();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the line number of the last character for current token (being
1:eac0369:    * matched after the last call to BeginTOken).
1:eac0369:    */
1:eac0369:   int getEndLine();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the column number of the first character for current token (being
1:eac0369:    * matched after the last call to BeginTOken).
1:eac0369:    */
1:eac0369:   int getBeginColumn();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the line number of the first character for current token (being
1:eac0369:    * matched after the last call to BeginTOken).
1:eac0369:    */
1:eac0369:   int getBeginLine();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Backs up the input stream by amount steps. Lexer calls this method if it
1:eac0369:    * had already read some characters, but could not use them to match a
1:eac0369:    * (longer) token. So, they will be used again as the prefix of the next
1:eac0369:    * token and it is the implemetation's responsibility to do this right.
1:eac0369:    */
1:eac0369:   void backup(int amount);
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns the next character that marks the beginning of the next token.
1:eac0369:    * All characters must remain in the buffer between two successive calls
1:eac0369:    * to this method to implement backup correctly.
1:eac0369:    */
1:eac0369:   char BeginToken() throws java.io.IOException;
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns a string made up of characters from the marked token beginning
1:eac0369:    * to the current buffer position. Implementations have the choice of returning
1:eac0369:    * anything that they want to. For example, for efficiency, one might decide
1:eac0369:    * to just return null, which is a valid implementation.
1:eac0369:    */
1:eac0369:   String GetImage();
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns an array of characters that make up the suffix of length 'len' for
1:eac0369:    * the currently matched token. This is used to build up the matched string
1:eac0369:    * for use in actions in the case of MORE. A simple and inefficient
1:eac0369:    * implementation of this is as follows :
1:eac0369:    *
1:eac0369:    *   {
1:eac0369:    *      String t = GetImage();
1:eac0369:    *      return t.substring(t.length() - len, t.length()).toCharArray();
1:eac0369:    *   }
1:eac0369:    */
1:eac0369:   char[] GetSuffix(int len);
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * The lexer calls this function to indicate that it is done with the stream
1:eac0369:    * and hence implementations can free any resources held by this class.
1:eac0369:    * Again, the body of this function can be just empty and it will not
1:eac0369:    * affect the lexer's operation.
1:eac0369:    */
1:eac0369:   void Done();
1:eac0369: 
1:eac0369: 
1:eac0369:   // This method was added to support ability to get the input
1:eac0369:   // between two tokens.
1:eac0369:   abstract int getBeginOffset();
1:eac0369: 
1:eac0369:   // This method was added to support ability to get the input
1:eac0369:   // between two tokens.
1:eac0369:   abstract int getEndOffset();
1:eac0369: 
1:eac0369:   // These methods were added to support re-initialization of CharStreams
1:eac0369:   abstract void ReInit(java.io.Reader dstream,
1:eac0369: 						int startline, int startcolumn, int buffersize);
1:eac0369: 
1:eac0369:   abstract void ReInit(java.io.Reader dstream, int startline, int startcolumn);
1:eac0369: 
1:eac0369:   abstract void ReInit(java.io.InputStream dstream, int startline,
1:eac0369: 						int startcolumn, int buffersize);
1:eac0369: 
1:eac0369:   abstract void ReInit(java.io.InputStream dstream, int startline,
1:eac0369: 						int startcolumn);
1:eac0369: 
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1:   @Deprecated
/////////////////////////////////////////////////////////////////////////
1:   @Deprecated
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b49cc55
/////////////////////////////////////////////////////////////////////////
1: interface CharStream {
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CharStream
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: /**
1:  * This interface describes a character stream that maintains line and
1:  * column number positions of the characters.  It also has the capability
1:  * to backup the stream to some extent.  An implementation of this
1:  * interface is used in the TokenManager implementation generated by
1:  * JavaCCParser.
1:  *
1:  * All the methods except backup can be implemented in any fashion. backup
1:  * needs to be implemented correctly for the correct operation of the lexer.
1:  * Rest of the methods are all used to get information like line number,
1:  * column number and the String that constitutes a token and are not used
1:  * by the lexer. Hence their implementation won't affect the generated lexer's
1:  * operation.
1:  */
1: 
0: public interface CharStream {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:   /**
1:    * Returns the next character from the selected input.  The method
1:    * of selecting the input is the responsibility of the class
1:    * implementing this interface.  Can throw any java.io.IOException.
1:    */
1:   char readChar() throws java.io.IOException;
1: 
1:   /**
1:    * Returns the column position of the character last read.
1:    * @deprecated
1:    * @see #getEndColumn
1:    */
1:   int getColumn();
1: 
1:   /**
1:    * Returns the line number of the character last read.
1:    * @deprecated
1:    * @see #getEndLine
1:    */
1:   int getLine();
1: 
1:   /**
1:    * Returns the column number of the last character for current token (being
1:    * matched after the last call to BeginTOken).
1:    */
1:   int getEndColumn();
1: 
1:   /**
1:    * Returns the line number of the last character for current token (being
1:    * matched after the last call to BeginTOken).
1:    */
1:   int getEndLine();
1: 
1:   /**
1:    * Returns the column number of the first character for current token (being
1:    * matched after the last call to BeginTOken).
1:    */
1:   int getBeginColumn();
1: 
1:   /**
1:    * Returns the line number of the first character for current token (being
1:    * matched after the last call to BeginTOken).
1:    */
1:   int getBeginLine();
1: 
1:   /**
1:    * Backs up the input stream by amount steps. Lexer calls this method if it
1:    * had already read some characters, but could not use them to match a
1:    * (longer) token. So, they will be used again as the prefix of the next
1:    * token and it is the implemetation's responsibility to do this right.
1:    */
1:   void backup(int amount);
1: 
1:   /**
1:    * Returns the next character that marks the beginning of the next token.
1:    * All characters must remain in the buffer between two successive calls
1:    * to this method to implement backup correctly.
1:    */
1:   char BeginToken() throws java.io.IOException;
1: 
1:   /**
1:    * Returns a string made up of characters from the marked token beginning
1:    * to the current buffer position. Implementations have the choice of returning
1:    * anything that they want to. For example, for efficiency, one might decide
1:    * to just return null, which is a valid implementation.
1:    */
1:   String GetImage();
1: 
1:   /**
1:    * Returns an array of characters that make up the suffix of length 'len' for
1:    * the currently matched token. This is used to build up the matched string
1:    * for use in actions in the case of MORE. A simple and inefficient
1:    * implementation of this is as follows :
1:    *
1:    *   {
1:    *      String t = GetImage();
1:    *      return t.substring(t.length() - len, t.length()).toCharArray();
1:    *   }
1:    */
1:   char[] GetSuffix(int len);
1: 
1:   /**
1:    * The lexer calls this function to indicate that it is done with the stream
1:    * and hence implementations can free any resources held by this class.
1:    * Again, the body of this function can be just empty and it will not
1:    * affect the lexer's operation.
1:    */
1:   void Done();
1: 
1: 
1:   // This method was added to support ability to get the input
1:   // between two tokens.
1:   abstract int getBeginOffset();
1: 
1:   // This method was added to support ability to get the input
1:   // between two tokens.
1:   abstract int getEndOffset();
1: 
1:   // These methods were added to support re-initialization of CharStreams
1:   abstract void ReInit(java.io.Reader dstream,
1: 						int startline, int startcolumn, int buffersize);
1: 
1:   abstract void ReInit(java.io.Reader dstream, int startline, int startcolumn);
1: 
1:   abstract void ReInit(java.io.InputStream dstream, int startline,
1: 						int startcolumn, int buffersize);
1: 
1:   abstract void ReInit(java.io.InputStream dstream, int startline,
1: 						int startcolumn);
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: /**
0:  * This interface describes a character stream that maintains line and
0:  * column number positions of the characters.  It also has the capability
0:  * to backup the stream to some extent.  An implementation of this
0:  * interface is used in the TokenManager implementation generated by
0:  * JavaCCParser.
0:  *
0:  * All the methods except backup can be implemented in any fashion. backup
0:  * needs to be implemented correctly for the correct operation of the lexer.
0:  * Rest of the methods are all used to get information like line number,
0:  * column number and the String that constitutes a token and are not used
0:  * by the lexer. Hence their implementation won't affect the generated lexer's
0:  * operation.
0:  */
0: 
0: public interface CharStream {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:   /**
0:    * Returns the next character from the selected input.  The method
0:    * of selecting the input is the responsibility of the class
0:    * implementing this interface.  Can throw any java.io.IOException.
0:    */
0:   char readChar() throws java.io.IOException;
0: 
0:   /**
0:    * Returns the column position of the character last read.
0:    * @deprecated
0:    * @see #getEndColumn
0:    */
0:   int getColumn();
0: 
0:   /**
0:    * Returns the line number of the character last read.
0:    * @deprecated
0:    * @see #getEndLine
0:    */
0:   int getLine();
0: 
0:   /**
0:    * Returns the column number of the last character for current token (being
0:    * matched after the last call to BeginTOken).
0:    */
0:   int getEndColumn();
0: 
0:   /**
0:    * Returns the line number of the last character for current token (being
0:    * matched after the last call to BeginTOken).
0:    */
0:   int getEndLine();
0: 
0:   /**
0:    * Returns the column number of the first character for current token (being
0:    * matched after the last call to BeginTOken).
0:    */
0:   int getBeginColumn();
0: 
0:   /**
0:    * Returns the line number of the first character for current token (being
0:    * matched after the last call to BeginTOken).
0:    */
0:   int getBeginLine();
0: 
0:   /**
0:    * Backs up the input stream by amount steps. Lexer calls this method if it
0:    * had already read some characters, but could not use them to match a
0:    * (longer) token. So, they will be used again as the prefix of the next
0:    * token and it is the implemetation's responsibility to do this right.
0:    */
0:   void backup(int amount);
0: 
0:   /**
0:    * Returns the next character that marks the beginning of the next token.
0:    * All characters must remain in the buffer between two successive calls
0:    * to this method to implement backup correctly.
0:    */
0:   char BeginToken() throws java.io.IOException;
0: 
0:   /**
0:    * Returns a string made up of characters from the marked token beginning
0:    * to the current buffer position. Implementations have the choice of returning
0:    * anything that they want to. For example, for efficiency, one might decide
0:    * to just return null, which is a valid implementation.
0:    */
0:   String GetImage();
0: 
0:   /**
0:    * Returns an array of characters that make up the suffix of length 'len' for
0:    * the currently matched token. This is used to build up the matched string
0:    * for use in actions in the case of MORE. A simple and inefficient
0:    * implementation of this is as follows :
0:    *
0:    *   {
0:    *      String t = GetImage();
0:    *      return t.substring(t.length() - len, t.length()).toCharArray();
0:    *   }
0:    */
0:   char[] GetSuffix(int len);
0: 
0:   /**
0:    * The lexer calls this function to indicate that it is done with the stream
0:    * and hence implementations can free any resources held by this class.
0:    * Again, the body of this function can be just empty and it will not
0:    * affect the lexer's operation.
0:    */
0:   void Done();
0: 
0: 
0:   // This method was added to support ability to get the input
0:   // between two tokens.
0:   abstract int getBeginOffset();
0: 
0:   // This method was added to support ability to get the input
0:   // between two tokens.
0:   abstract int getEndOffset();
0: 
0:   // These methods were added to support re-initialization of CharStreams
0:   abstract void ReInit(java.io.Reader dstream,
0: 						int startline, int startcolumn, int buffersize);
0: 
0:   abstract void ReInit(java.io.Reader dstream, int startline, int startcolumn);
0: 
0:   abstract void ReInit(java.io.InputStream dstream, int startline,
0: 						int startcolumn, int buffersize);
0: 
0:   abstract void ReInit(java.io.InputStream dstream, int startline,
0: 						int startcolumn);
0: 
0: }
============================================================================