1:2c38f3c: /**
1:2c38f3c:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SimpleJsonTest
1:2c38f3c:  *  
1:2c38f3c:  * Licensed to the Apache Software Foundation (ASF) under one
1:2c38f3c:  * or more contributor license agreements.  See the NOTICE file
1:2c38f3c:  * distributed with this work for additional information
1:2c38f3c:  * regarding copyright ownership.  The ASF licenses this file
1:2c38f3c:  * to you under the Apache License, Version 2.0 (the
1:2c38f3c:  * "License"); you may not use this file except in compliance
1:2c38f3c:  * with the License.  You may obtain a copy of the License at
1:2c38f3c:  *
1:2c38f3c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2c38f3c:  *
1:2c38f3c:  * Unless required by applicable law or agreed to in writing,
1:2c38f3c:  * software distributed under the License is distributed on an
1:2c38f3c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2c38f3c:  * KIND, either express or implied.  See the License for the
1:2c38f3c:  * specific language governing permissions and limitations
1:2c38f3c:  * under the License.
1:2c38f3c:  */
1:2c38f3c: package org.apache.derbyTesting.functionTests.tests.lang;
1:2c38f3c: 
1:4394bdd: import java.io.File;
1:2c38f3c: import java.sql.Connection;
1:4394bdd: import java.sql.PreparedStatement;
1:4394bdd: import java.sql.ResultSet;
1:fd0d01f: import java.sql.SQLException;
1:2c38f3c: import java.util.Arrays;
1:2c38f3c: 
1:2c38f3c: import junit.framework.Test;
1:2c38f3c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:2c38f3c: import org.apache.derbyTesting.junit.BaseTestSuite;
1:2c38f3c: import org.apache.derbyTesting.junit.JDBC;
1:4394bdd: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:2c38f3c: import org.apache.derbyTesting.junit.TestConfiguration;
1:4394bdd: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:2c38f3c: 
1:2c38f3c: import org.json.simple.JSONArray;
1:2c38f3c: import org.json.simple.JSONObject;
1:2c38f3c: 
1:2c38f3c: /**
1:2c38f3c:  * <p>
1:2c38f3c:  * Basic test of the optional tool which provides JSON support functions
1:2c38f3c:  * which use the simple json library from https://code.google.com/p/json-simple/.
1:2c38f3c:  * </p>
1:2c38f3c:  */
1:2c38f3c: public class SimpleJsonTest extends BaseJDBCTestCase
1:2c38f3c: {
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // CONSTANTS
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     private static  final   String  TAB = "  ";
1:2c38f3c:     private static  final   String  USER_ERROR = "38000";
1:fd0d01f:     private static  final   String  OUT_OF_RANGE = "22003";
1:2c38f3c: 
1:4394bdd:     private static  final   String  THERMOSTAT_READINGS =
1:4394bdd:         "[\n" +
1:4394bdd:         " {\n" +
1:4394bdd:         "   \"id\": 1,\n" +
1:4394bdd:         "   \"temperature\": 70.3,\n" +
1:4394bdd:         "   \"fanOn\": true\n" +
1:4394bdd:         " },\n" +
1:4394bdd:         " {\n" +
1:4394bdd:         "   \"id\": 2,\n" +
1:4394bdd:         "   \"temperature\": 65.5,\n" +
1:4394bdd:         "   \"fanOn\": false\n" +
1:4394bdd:         " }\n" +
1:4394bdd:         "]";
1:4394bdd: 
1:4394bdd: 
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // CONSTRUCTORS
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c: 	public SimpleJsonTest(String name) {
1:2c38f3c: 		super(name);
1:2c38f3c: 	}
1:4394bdd: 	
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // JUnit MACHINERY
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     
1:2c38f3c: 	public static Test suite()
1:2c38f3c:     {
1:2c38f3c:         BaseTestSuite suite = new BaseTestSuite("SimpleJsonTest");
1:2c38f3c: 
1:2c38f3c:         suite.addTest( TestConfiguration.defaultSuite( SimpleJsonTest.class ) );
1:2c38f3c: 
1:4394bdd:         return new SupportFilesSetup
1:4394bdd:             (
1:4394bdd:              suite,
1:4394bdd:              new String[]
1:4394bdd:              { 
1:4394bdd:                 "functionTests/tests/lang/thermostatReadings.dat",
1:fd0d01f:                 "functionTests/tests/lang/json.dat",
1:4394bdd:              }
1:4394bdd:             );
1:2c38f3c: 	}
1:2c38f3c: 	
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // JUnit TESTS
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     
1:2c38f3c: 	public void testBasic_001() throws Exception
1:2c38f3c:     {
1:2c38f3c:         Connection  conn = getConnection();
1:2c38f3c: 
1:2c38f3c:         // create the json support types and functions
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:2c38f3c: 
1:2c38f3c:         createSchema_001( conn );
1:2c38f3c: 
1:2c38f3c:         assertResults
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "values prettyPrint( toJSON( " +
1:2c38f3c:              "'select * from thermostatReadings order by \"id\", \"sampleTime\"' ) )",
1:2c38f3c:              new String[][]
1:2c38f3c:              {
1:2c38f3c:                  {
1:2c38f3c:                      "[\n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"fanOn\" : false, \n" +
1:2c38f3c:                      "    \"id\" : 1, \n" +
1:2c38f3c:                      "    \"sampleTime\" : \"2015-07-08 04:03:20.0\", \n" +
1:2c38f3c:                      "    \"temperature\" : 65.5\n" +
1:2c38f3c:                      "  }, \n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"fanOn\" : true, \n" +
1:2c38f3c:                      "    \"id\" : 1, \n" +
1:2c38f3c:                      "    \"sampleTime\" : \"2015-07-08 13:03:20.0\", \n" +
1:2c38f3c:                      "    \"temperature\" : 70.1\n" +
1:2c38f3c:                      "  }, \n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"fanOn\" : false, \n" +
1:2c38f3c:                      "    \"id\" : 2, \n" +
1:2c38f3c:                      "    \"sampleTime\" : \"2015-07-08 03:03:20.0\", \n" +
1:2c38f3c:                      "    \"temperature\" : 64.5\n" +
1:2c38f3c:                      "  }, \n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"fanOn\" : true, \n" +
1:2c38f3c:                      "    \"id\" : 2, \n" +
1:2c38f3c:                      "    \"sampleTime\" : \"2015-07-08 16:03:20.0\", \n" +
1:2c38f3c:                      "    \"temperature\" : 72.1\n" +
1:2c38f3c:                      "  }\n" +
1:2c38f3c:                      "]"
1:2c38f3c:                  }
1:2c38f3c:              },
1:2c38f3c:              true
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         assertResults
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "values prettyPrint( toJSON( 'select \"id\", max( \"temperature\" ) \"maxTemp\" from thermostatReadings group by \"id\"' ) )",
1:2c38f3c:              new String[][]
1:2c38f3c:              {
1:2c38f3c:                  {
1:2c38f3c:                      "[\n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"id\" : 1, \n" +
1:2c38f3c:                      "    \"maxTemp\" : 70.1\n" +
1:2c38f3c:                      "  }, \n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"id\" : 2, \n" +
1:2c38f3c:                      "    \"maxTemp\" : 72.1\n" +
1:2c38f3c:                      "  }\n" +
1:2c38f3c:                      "]"
1:2c38f3c:                  }
1:2c38f3c:              },
1:2c38f3c:              true
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         assertResults
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "values prettyPrint( toJSON( 'select \"id\", max( \"temperature\" ) \"maxTemp\" from thermostatReadings where \"id\" = ? group by \"id\"', '2' ) )",
1:2c38f3c:              new String[][]
1:2c38f3c:              {
1:2c38f3c:                  {
1:2c38f3c:                      "[\n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"id\" : 2, \n" +
1:2c38f3c:                      "    \"maxTemp\" : 72.1\n" +
1:2c38f3c:                      "  }\n" +
1:2c38f3c:                      "]"
1:2c38f3c:                  }
1:2c38f3c:              },
1:2c38f3c:              true
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         dropSchema_001( conn );
1:2c38f3c:         
1:2c38f3c:         // drop the json support types and functions
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:2c38f3c: 	}
1:2c38f3c:     private void    createSchema_001( Connection conn ) throws Exception
1:2c38f3c:     {
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create table thermostatReadings\n" +
1:2c38f3c:              "(\n" +
1:2c38f3c:              "\"id\" int,\n" +
1:2c38f3c:              "\"temperature\" double,\n" +
1:2c38f3c:              "\"fanOn\" boolean,\n" +
1:2c38f3c:              "\"sampleTime\" timestamp,\n" +
1:2c38f3c:              "primary key( \"id\", \"sampleTime\" )\n" +
1:2c38f3c:              ")\n"
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "insert into thermostatReadings values\n" +
1:2c38f3c:              "( 1, 65.5, false, timestamp( '2015-07-08 04:03:20') ),\n" +
1:2c38f3c:              "( 1, 70.1, true, timestamp( '2015-07-08 13:03:20') ),\n" +
1:2c38f3c:              "( 2, 64.5, false, timestamp( '2015-07-08 03:03:20') ),\n" +
1:2c38f3c:              "( 2, 72.1, true, timestamp( '2015-07-08 16:03:20') )\n"
1:2c38f3c:              );
1:2c38f3c:         
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create function prettyPrint( doc JSONArray ) returns varchar( 32672 )\n" +
1:2c38f3c:              "language java parameter style java no sql\n" +
1:2c38f3c:              "external name '" + getClass().getName() + ".prettyPrint'\n"
1:2c38f3c:              );
1:2c38f3c:     }
1:2c38f3c:     private void    dropSchema_001( Connection conn ) throws Exception
1:2c38f3c:     {
1:2c38f3c:         goodStatement( conn, "drop function prettyPrint" );
1:2c38f3c:         goodStatement( conn, "drop table thermostatReadings" );
1:2c38f3c:     }
1:2c38f3c:     
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:fd0d01f:     /**
1:fd0d01f:      * <p>
1:2c38f3c:      * Test the jsonification of Derby's datatypes.
1:2c38f3c:      * </p>
1:2c38f3c:      */
1:2c38f3c: 	public void testDatatypes_002() throws Exception
1:2c38f3c:     {
1:2c38f3c:         Connection  conn = getConnection();
1:2c38f3c: 
1:2c38f3c:         // create the json support types and functions
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:2c38f3c: 
1:2c38f3c:         createSchema_002( conn );
1:2c38f3c: 
1:2c38f3c:         assertResults
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "values( prettyPrint( toJSON( 'select * from all_types order by key_col' ) ) )",
1:2c38f3c:              new String[][]
1:2c38f3c:              {
1:2c38f3c:                  {
1:2c38f3c:                      "[\n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"BIGINT_COL\" : 0, \n" +
1:2c38f3c:                      "    \"BLOB_COL\" : \"01\", \n" +
1:2c38f3c:                      "    \"CHAR_COL\" : \"0         \", \n" +
1:2c38f3c:                      "    \"CHAR_FOR_BIT_DATA_COL\" : \"de202020202020202020\", \n" +
1:2c38f3c:                      "    \"CLOB_COL\" : \"0\", \n" +
1:2c38f3c:                      "    \"DATE_COL\" : \"1994-02-23\", \n" +
1:2c38f3c:                      "    \"DECIMAL_COL\" : 0.0, \n" +
1:2c38f3c:                      "    \"DOUBLE_COL\" : 0.0, \n" +
1:2c38f3c:                      "    \"INT_COL\" : 0, \n" +
1:2c38f3c:                      "    \"JSON_ARRAY_COL\" : [\n" +
1:2c38f3c:                      "      {\n" +
1:2c38f3c:                      "        \"A\" : 1, \n" +
1:2c38f3c:                      "        \"B\" : true\n" +
1:2c38f3c:                      "      }, \n" +
1:2c38f3c:                      "      {\n" +
1:2c38f3c:                      "        \"A\" : 2, \n" +
1:2c38f3c:                      "        \"B\" : false\n" +
1:2c38f3c:                      "      }\n" +
1:2c38f3c:                      "    ], \n" +
1:2c38f3c:                      "    \"KEY_COL\" : 0, \n" +
1:2c38f3c:                      "    \"LONG_VARCHAR_COL\" : \"0\", \n" +
1:2c38f3c:                      "    \"LONG_VARCHAR_FOR_BIT_DATA_COL\" : \"de\", \n" +
1:2c38f3c:                      "    \"NUMERIC_COL\" : 0.0, \n" +
1:2c38f3c:                      "    \"PRICE_COL\" : \"Price( USD, 9.99000, 2009-10-16 14:24:43.0 )\", \n" +
1:2c38f3c:                      "    \"REAL_COL\" : 0.0, \n" +
1:2c38f3c:                      "    \"SMALLINT_COL\" : 0, \n" +
1:2c38f3c:                      "    \"TIMESTAMP_COL\" : \"1962-09-23 03:23:34.234\", \n" +
1:2c38f3c:                      "    \"TIME_COL\" : \"15:09:02\", \n" +
1:2c38f3c:                      "    \"VARCHAR_COL\" : \"0\", \n" +
1:2c38f3c:                      "    \"VARCHAR_FOR_BIT_DATA_COL\" : \"de\"\n" +
1:2c38f3c:                      "  }, \n" +
1:2c38f3c:                      "  {\n" +
1:2c38f3c:                      "    \"BIGINT_COL\" : null, \n" +
1:2c38f3c:                      "    \"BLOB_COL\" : null, \n" +
1:2c38f3c:                      "    \"CHAR_COL\" : null, \n" +
1:2c38f3c:                      "    \"CHAR_FOR_BIT_DATA_COL\" : null, \n" +
1:2c38f3c:                      "    \"CLOB_COL\" : null, \n" +
1:2c38f3c:                      "    \"DATE_COL\" : null, \n" +
1:2c38f3c:                      "    \"DECIMAL_COL\" : null, \n" +
1:2c38f3c:                      "    \"DOUBLE_COL\" : null, \n" +
1:2c38f3c:                      "    \"INT_COL\" : null, \n" +
1:2c38f3c:                      "    \"JSON_ARRAY_COL\" : null, \n" +
1:2c38f3c:                      "    \"KEY_COL\" : 1, \n" +
1:2c38f3c:                      "    \"LONG_VARCHAR_COL\" : null, \n" +
1:2c38f3c:                      "    \"LONG_VARCHAR_FOR_BIT_DATA_COL\" : null, \n" +
1:2c38f3c:                      "    \"NUMERIC_COL\" : null, \n" +
1:2c38f3c:                      "    \"PRICE_COL\" : null, \n" +
1:2c38f3c:                      "    \"REAL_COL\" : null, \n" +
1:2c38f3c:                      "    \"SMALLINT_COL\" : null, \n" +
1:2c38f3c:                      "    \"TIMESTAMP_COL\" : null, \n" +
1:2c38f3c:                      "    \"TIME_COL\" : null, \n" +
1:2c38f3c:                      "    \"VARCHAR_COL\" : null, \n" +
1:2c38f3c:                      "    \"VARCHAR_FOR_BIT_DATA_COL\" : null\n" +
1:2c38f3c:                      "  }\n" +
1:2c38f3c:                      "]"                                                                                                     }
1:2c38f3c:              },
1:2c38f3c:              true
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         dropSchema_002( conn );
1:2c38f3c: 
1:2c38f3c:         // drop the json support types and functions
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:2c38f3c:     }
1:2c38f3c:     private void createSchema_002( Connection conn ) throws Exception
1:2c38f3c:     {
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create type Price external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create function makePrice( currencyCode char( 3 ), amount decimal( 31, 5 ), timeInstant Timestamp )\n" +
1:2c38f3c:              "returns Price language java parameter style java no sql\n" +
1:2c38f3c:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create function makeSimpleBlob( ) returns blob\n" +
1:2c38f3c:              "language java parameter style java no sql deterministic\n" +
1:2c38f3c:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.BooleanValuesTest.makeSimpleBlob'\n"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create table dummy( a int, b boolean )"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "insert into dummy values ( 1, true ), ( 2, false )"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create table all_types\n" +
1:2c38f3c:              "(\n" +
1:2c38f3c:              "    key_col int,\n" +
1:2c38f3c:              "    bigint_col  BIGINT,\n" +
1:2c38f3c:              "    blob_col  BLOB(2147483647),\n" +
1:2c38f3c:              "    char_col  CHAR(10),\n" +
1:2c38f3c:              "    char_for_bit_data_col  CHAR (10) FOR BIT DATA,\n" +
1:2c38f3c:              "    clob_col  CLOB(2147483647),\n" +
1:2c38f3c:              "    date_col  DATE,\n" +
1:2c38f3c:              "    decimal_col  DECIMAL(5,2),\n" +
1:2c38f3c:              "    real_col  REAL,\n" +
1:2c38f3c:              "    double_col  DOUBLE,\n" +
1:2c38f3c:              "    int_col  INTEGER,\n" +
1:2c38f3c:              "    long_varchar_col  LONG VARCHAR,\n" +
1:2c38f3c:              "    long_varchar_for_bit_data_col  LONG VARCHAR FOR BIT DATA,\n" +
1:2c38f3c:              "    numeric_col  NUMERIC(5,2),\n" +
1:2c38f3c:              "    smallint_col  SMALLINT,\n" +
1:2c38f3c:              "    time_col  TIME,\n" +
1:2c38f3c:              "    timestamp_col  TIMESTAMP,\n" +
1:2c38f3c:              "    varchar_col  VARCHAR(10),\n" +
1:2c38f3c:              "    varchar_for_bit_data_col  VARCHAR (10) FOR BIT DATA,\n" +
1:2c38f3c:              "    price_col price,\n" +
1:2c38f3c:              "    json_array_col jsonArray\n" +
1:2c38f3c:              ")\n"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "insert into all_types( key_col ) values ( 1 )"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "insert into all_types\n" +
1:2c38f3c:              "(\n" +
1:2c38f3c:              "    key_col,\n" +
1:2c38f3c:              "    bigint_col,\n" +
1:2c38f3c:              "    blob_col,\n" +
1:2c38f3c:              "    char_col,\n" +
1:2c38f3c:              "    char_for_bit_data_col,\n" +
1:2c38f3c:              "    clob_col,\n" +
1:2c38f3c:              "    date_col,\n" +
1:2c38f3c:              "    decimal_col,\n" +
1:2c38f3c:              "    real_col,\n" +
1:2c38f3c:              "    double_col,\n" +
1:2c38f3c:              "    int_col,\n" +
1:2c38f3c:              "    long_varchar_col,\n" +
1:2c38f3c:              "    long_varchar_for_bit_data_col,\n" +
1:2c38f3c:              "    numeric_col,\n" +
1:2c38f3c:              "    smallint_col,\n" +
1:2c38f3c:              "    time_col,\n" +
1:2c38f3c:              "    timestamp_col,\n" +
1:2c38f3c:              "    varchar_col,\n" +
1:2c38f3c:              "    varchar_for_bit_data_col,\n" +
1:2c38f3c:              "    price_col,\n" +
1:2c38f3c:              "    json_array_col\n" +
1:2c38f3c:              ")\n" +
1:2c38f3c:              "values\n" +
1:2c38f3c:              "(\n" +
1:2c38f3c:              "    0,\n" +
1:2c38f3c:              "    0,\n" +
1:2c38f3c:              "    makeSimpleBlob(),\n" +
1:2c38f3c:              "    '0',\n" +
1:2c38f3c:              "    X'DE',\n" +
1:2c38f3c:              "    '0',\n" +
1:2c38f3c:              "    date('1994-02-23'),\n" +
1:2c38f3c:              "    0.00,\n" +
1:2c38f3c:              "    0.0,\n" +
1:2c38f3c:              "    0.0,\n" +
1:2c38f3c:              "    0,\n" +
1:2c38f3c:              "    '0',\n" +
1:2c38f3c:              "    X'DE',\n" +
1:2c38f3c:              "    0.00,\n" +
1:2c38f3c:              "    0,\n" +
1:2c38f3c:              "    time('15:09:02'),\n" +
1:2c38f3c:              "    timestamp('1962-09-23 03:23:34.234'),\n" +
1:2c38f3c:              "    '0',\n" +
1:2c38f3c:              "    X'DE',\n" +
1:2c38f3c:              "    makePrice( 'USD', cast( 9.99 as decimal( 31, 5 ) ), timestamp('2009-10-16 14:24:43') ),\n" +
1:2c38f3c:              "    toJSON( 'select * from dummy order by a' ) \n" +
1:2c38f3c:              ")\n"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "create function prettyPrint( doc JSONArray ) returns varchar( 32672 )\n" +
1:2c38f3c:              "language java parameter style java no sql\n" +
1:2c38f3c:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.SimpleJsonTest.prettyPrint'\n"
1:2c38f3c:              );
1:2c38f3c:     }
1:2c38f3c:     private void dropSchema_002( Connection conn ) throws Exception
1:2c38f3c:     {
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "drop function makePrice"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "drop function makeSimpleBlob"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "drop table all_types"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "drop type price restrict"
1:2c38f3c:              );
1:2c38f3c:         goodStatement
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              "drop function prettyPrint"
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:2c38f3c:      * Test errors.
1:2c38f3c:      * </p>
1:2c38f3c:      */
1:2c38f3c: 	public void testNegative_003() throws Exception
1:2c38f3c:     {
1:2c38f3c:         Connection  conn = getConnection();
1:2c38f3c: 
1:2c38f3c:         // can't load the tool redundantly
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:2c38f3c: 
1:2c38f3c:         expectExecutionError
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              USER_ERROR,
1:2c38f3c:              "call syscs_util.syscs_register_tool( 'simpleJson', true )"
1:2c38f3c:              );
1:2c38f3c:         
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:2c38f3c: 
1:2c38f3c:         // can't unload the tool redundantly
1:2c38f3c:         expectExecutionError
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              USER_ERROR,
1:2c38f3c:              "call syscs_util.syscs_register_tool( 'simpleJson', false )"
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         // need to specify all ? parameters
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:2c38f3c: 
1:2c38f3c:         expectExecutionError
1:2c38f3c:             (
1:2c38f3c:              conn,
1:2c38f3c:              USER_ERROR,
1:2c38f3c:              "values( toJSON( 'select * from sys.systables where tablename = ?' ) )"
1:2c38f3c:              );
1:2c38f3c: 
1:2c38f3c:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:4394bdd:      * Test the SimpleJsonVTI.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd: 	public void testVTI_004() throws Exception
1:4394bdd:     {
1:4394bdd:         Connection  conn = getConnection();
1:4394bdd: 
1:4394bdd:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:4394bdd: 
1:4394bdd:         // declare a table function for reading a string
1:4394bdd:         goodStatement
1:4394bdd:             (
1:4394bdd:              conn,
1:4394bdd:              "create function thermostatReadings( jsonDocument JSONArray )\n" +
1:4394bdd:              "returns table\n" +
1:4394bdd:              "(\n" +
1:4394bdd:              "\"id\" int,\n" +
1:4394bdd:              "\"temperature\" float,\n" +
1:4394bdd:              "\"fanOn\" boolean\n" +
1:4394bdd:              ")\n" +
1:4394bdd:              "language java parameter style derby_jdbc_result_set contains sql\n" +
1:4394bdd:              "external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray'\n"
1:4394bdd:              );
1:4394bdd: 
1:4394bdd:         PreparedStatement   ps;
1:4394bdd:         ResultSet           rs;
1:4394bdd: 
1:4394bdd:         // turn a JSON document string into a ResultSet
1:4394bdd:         ps = conn.prepareStatement
1:4394bdd:             (
1:4394bdd:              "select * from table\n" +
1:4394bdd:              "( thermostatReadings( readArrayFromString(?) ) ) t order by \"id\""
1:4394bdd:              );
1:4394bdd:         ps.setString( 1, THERMOSTAT_READINGS );
1:4394bdd:         rs = ps.executeQuery();
1:4394bdd:         assertResults
1:4394bdd:             (
1:4394bdd:              rs,
1:4394bdd:              new String[][]
1:4394bdd:              {
1:4394bdd:                  { "1", "70.3", "true" },
1:4394bdd:                  { "2", "65.5", "false" }
1:4394bdd:              },
1:4394bdd:              true
1:4394bdd:              );
1:4394bdd:         rs.close();
1:4394bdd:         ps.close();
1:4394bdd: 
1:4394bdd:         // make a ResultSet out of a file containing JSON text
1:4394bdd:         File    inputFile = SupportFilesSetup.getReadOnly( "thermostatReadings.dat" );
1:4394bdd:         String[][] fileReadings = new String[][]
1:4394bdd:             {
1:4394bdd:                 { "1", "70.3", "true" },
1:4394bdd:                 { "2", "65.5", "false" },
1:4394bdd:                 { "3", "60.5", "false" },
1:4394bdd:             };
1:4394bdd:         ps = conn.prepareStatement
1:4394bdd:             (
1:4394bdd:              "select * from table\n" +
1:4394bdd:              "( thermostatReadings( readArrayFromFile( ?, 'UTF-8' ) ) ) t order by \"id\""
1:4394bdd:              );
1:4394bdd:         ps.setString( 1, PrivilegedFileOpsForTests.getAbsolutePath( inputFile ) );
1:4394bdd:         rs = ps.executeQuery();
1:4394bdd:         assertResults(rs, fileReadings, true );
1:4394bdd:         rs.close();
1:4394bdd:         ps.close();
1:4394bdd: 
1:4394bdd:         // make a ResultSet out of an URL which points to a file containing JSON text
1:4394bdd:         ps = conn.prepareStatement
1:4394bdd:             (
1:4394bdd:              "select * from table\n" +
1:4394bdd:              "( thermostatReadings( readArrayFromURL( ?, 'UTF-8' ) ) ) t order by \"id\""
1:4394bdd:              );
1:4394bdd:         String  inputFileURL = PrivilegedFileOpsForTests.toURI(inputFile ).toURL().toString();
1:4394bdd:         ps.setString( 1, inputFileURL);
1:4394bdd:         rs = ps.executeQuery();
1:4394bdd:         assertResults(rs, fileReadings, true );
1:4394bdd:         rs.close();
1:4394bdd:         ps.close();
1:4394bdd: 
1:4394bdd:         goodStatement( conn, "drop function thermostatReadings" );
1:4394bdd:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:4394bdd:     }
1:4394bdd: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:fd0d01f:      * Test the datatypes understood by SimpleJsonVTI.
1:fd0d01f:      * </p>
1:fd0d01f:      */
1:fd0d01f: 	public void testVTIdatatypes005() throws Exception
1:fd0d01f:     {
1:fd0d01f:         Connection  conn = getConnection();
1:fd0d01f: 
1:fd0d01f:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:fd0d01f: 
1:fd0d01f:         vetDatatype_005
1:fd0d01f:             (
1:fd0d01f:              conn,
1:fd0d01f:              "smallint",
1:fd0d01f:              new String[][]
1:fd0d01f:              {
1:fd0d01f:                  { "abc","true", "127" },
1:fd0d01f:                  { "def", "false", "1" },
1:fd0d01f:                  { "ghi", null, "345" },
1:fd0d01f:                  { "lmn", "true", "-1" },    
1:fd0d01f:              }
1:fd0d01f:              );
1:fd0d01f:         vetDatatype_005
1:fd0d01f:             (
1:fd0d01f:              conn,
1:fd0d01f:              "int",
1:fd0d01f:              new String[][]
1:fd0d01f:              {
1:fd0d01f:                  { "abc","true", "127" },
1:fd0d01f:                  { "def", "false", "1" },
1:fd0d01f:                  { "ghi", null, "345" },
1:fd0d01f:                  { "lmn", "true", "-1" },    
1:fd0d01f:              }
1:fd0d01f:              );
1:fd0d01f:         vetDatatype_005
1:fd0d01f:             (
1:fd0d01f:              conn,
1:fd0d01f:              "bigint",
1:fd0d01f:              new String[][]
1:fd0d01f:              {
1:fd0d01f:                  { "abc","true", "127" },
1:fd0d01f:                  { "def", "false", "1" },
1:fd0d01f:                  { "ghi", null, "345" },
1:fd0d01f:                  { "lmn", "true", "9223372036854775807" },    
1:fd0d01f:              }
1:fd0d01f:              );
1:fd0d01f:         vetDatatype_005
1:fd0d01f:             (
1:fd0d01f:              conn,
1:fd0d01f:              "float",
1:fd0d01f:              new String[][]
1:fd0d01f:              {
1:fd0d01f:                  { "abc","true", "127.0" },
1:fd0d01f:                  { "def", "false", "1.2" },
1:fd0d01f:                  { "ghi", null, "345.67" },
1:fd0d01f:                  { "lmn", "true", "9.223372036854776E18" },    
1:fd0d01f:              }
1:fd0d01f:              );
1:fd0d01f:         vetDatatype_005
1:fd0d01f:             (
1:fd0d01f:              conn,
1:fd0d01f:              "double",
1:fd0d01f:              new String[][]
1:fd0d01f:              {
1:fd0d01f:                  { "abc","true", "127.0" },
1:fd0d01f:                  { "def", "false", "1.2" },
1:fd0d01f:                  { "ghi", null, "345.67" },
1:fd0d01f:                  { "lmn", "true", "9.223372036854776E18" },    
1:fd0d01f:              }
1:fd0d01f:              );
1:fd0d01f: 
1:fd0d01f:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:fd0d01f:     }
1:fd0d01f:     private void vetDatatype_005
1:fd0d01f:         (
1:fd0d01f:          Connection conn,
1:fd0d01f:          String datatype,
1:fd0d01f:          String[][] expectedResults
1:fd0d01f:          )
1:fd0d01f:         throws Exception
1:fd0d01f:     {
1:fd0d01f:         createFunction_005( conn, datatype );
1:fd0d01f: 
1:fd0d01f:         PreparedStatement   ps = conn.prepareStatement
1:fd0d01f:             (
1:fd0d01f:              "select * from table\n" +
1:fd0d01f:              "( f_" + datatype + "( readArrayFromFile( ?, 'UTF-8' ) )) t\n"
1:fd0d01f:              );
1:fd0d01f:         File    inputFile = SupportFilesSetup.getReadOnly( "json.dat" );
1:fd0d01f:         ps.setString( 1, PrivilegedFileOpsForTests.getAbsolutePath( inputFile ) );
1:fd0d01f: 
1:fd0d01f:         ResultSet           rs;
1:fd0d01f: 
1:fd0d01f:         rs = ps.executeQuery();
1:fd0d01f:         assertResults(rs, expectedResults, true );
1:fd0d01f:         rs.close();
1:fd0d01f: 
1:fd0d01f:         // the first two rows have numeric values which won't raise
1:fd0d01f:         // truncation exceptions when fetched into tinyint
1:fd0d01f:         rs = ps.executeQuery();
1:fd0d01f:         rs.next();
1:fd0d01f:         assertEquals( (byte) 127, rs.getByte( "NUM_COL" ) );
1:fd0d01f:         rs.next();
1:fd0d01f:         assertEquals( (byte) 1, rs.getByte( "NUM_COL" ) );
1:fd0d01f:         rs.close();
1:fd0d01f:         
1:fd0d01f:         ps.close();
1:fd0d01f: 
1:fd0d01f:         dropFunction_005( conn, datatype );
1:fd0d01f:     }
1:fd0d01f:     private void createFunction_005( Connection conn, String datatype )
1:fd0d01f:         throws Exception
1:fd0d01f:     {
1:fd0d01f:         goodStatement
1:fd0d01f:             (
1:fd0d01f:              conn,
1:fd0d01f:              "create function f_" + datatype + "( jsonArray JSONArray )\n" +
1:fd0d01f:              "returns table\n" +
1:fd0d01f:              "(\n" +
1:fd0d01f:              "  str_col varchar( 10 ),\n" +
1:fd0d01f:              "  bool_col boolean,\n" +
1:fd0d01f:              "  num_col " + datatype + "\n" +
1:fd0d01f:              ")\n" +
1:fd0d01f:              "language java parameter style derby_jdbc_result_set contains sql\n" +
1:fd0d01f:              "external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray'\n"
1:fd0d01f:              );
1:fd0d01f:     }
1:fd0d01f:     private void dropFunction_005( Connection conn, String datatype )
1:fd0d01f:         throws Exception
1:fd0d01f:     {
1:fd0d01f:         goodStatement( conn, "drop function f_" + datatype );
1:fd0d01f:     }
1:fd0d01f: 
1:961b0f4:     /**
1:961b0f4:      * <p>
1:961b0f4:      * Test the arrayToClob() function.
1:961b0f4:      * </p>
1:961b0f4:      */
1:961b0f4: 	public void testArrayToClob_006() throws Exception
1:961b0f4:     {
1:961b0f4:         Connection  conn = getConnection();
1:961b0f4: 
1:961b0f4:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:961b0f4:         goodStatement( conn, "create table employee( fullName varchar( 100 ) )" );
1:961b0f4:         goodStatement( conn, "create table docs( stringDoc varchar( 32672 ) )" );
1:961b0f4:         goodStatement( conn, "insert into employee values ( 'Fred Flintstone' ), ( 'Barney Rubble' )" );
1:961b0f4:         goodStatement( conn, "insert into docs values( arrayToClob( toJSON( 'select * from employee' ) ) )" );
1:961b0f4: 
1:961b0f4:         assertResults
1:961b0f4:             (
1:961b0f4:              conn,
1:961b0f4:              "select * from docs",
1:961b0f4:              new String[][]
1:961b0f4:              {
1:961b0f4:                  {
1:961b0f4:                      "[{\"FULLNAME\":\"Fred Flintstone\"},{\"FULLNAME\":\"Barney Rubble\"}]"
1:961b0f4:                  }
1:961b0f4:              },
1:961b0f4:              true
1:961b0f4:              );
1:961b0f4: 
1:961b0f4:         goodStatement( conn, "drop table docs" );
1:961b0f4:         goodStatement( conn, "drop table employee" );
1:961b0f4:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:961b0f4:     }
1:961b0f4: 
1:4394bdd:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // FUNCTIONS
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:2c38f3c:      * Pretty-print a JSONArray.
1:2c38f3c:      * </p>
1:2c38f3c:      */
1:2c38f3c:     public static String prettyPrint( JSONArray array )
1:2c38f3c:     {
1:2c38f3c:         StringBuilder   buffer = new StringBuilder();
1:2c38f3c: 
1:2c38f3c:         prettyPrintArray( buffer, 0, array );
1:2c38f3c:         
1:2c38f3c:         return buffer.toString();
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  void    prettyPrintArray
1:2c38f3c:         (
1:2c38f3c:          StringBuilder buffer,
1:2c38f3c:          int indentLevel,
1:2c38f3c:          JSONArray array
1:2c38f3c:          )
1:2c38f3c:     {
1:2c38f3c:         buffer.append( "[" );
1:2c38f3c:         int cellCount = array.size();
1:2c38f3c:         if ( cellCount > 0 )
1:2c38f3c:         {
1:2c38f3c:             for ( int i = 0; i < cellCount; i++ )
1:2c38f3c:             {
1:2c38f3c:                 if ( i > 0 ) { buffer.append( ", " ); }
1:2c38f3c:                 indent( buffer, indentLevel + 1 );
1:2c38f3c:                 prettyPrint( buffer, indentLevel + 1, array.get( i ) );
1:2c38f3c:             }
1:2c38f3c:             indent( buffer, indentLevel );
1:2c38f3c:         }
1:2c38f3c:         buffer.append( "]" );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  void    prettyPrintObject
1:2c38f3c:         (
1:2c38f3c:          StringBuilder buffer,
1:2c38f3c:          int indentLevel,
1:2c38f3c:          JSONObject obj
1:2c38f3c:          )
1:2c38f3c:     {
1:2c38f3c:         buffer.append( "{" );
1:2c38f3c:         int keyCount = obj.size();
1:2c38f3c:         if ( keyCount > 0 )
1:2c38f3c:         {
1:2c38f3c:             // alphabetize the keys
1:2c38f3c:             Object[]    keys = obj.keySet().toArray();
1:2c38f3c:             Arrays.sort( keys );
1:2c38f3c:             for ( int i = 0; i < keyCount; i++ )
1:2c38f3c:             {
1:2c38f3c:                 Object  key = keys[ i ];
1:2c38f3c:                 if ( i > 0 ) { buffer.append( ", " ); }
1:2c38f3c:                 indent( buffer, indentLevel + 1 );
1:2c38f3c:                 buffer.append( doubleQuote( (String) key ) );
1:2c38f3c:                 buffer.append( " : " );
1:2c38f3c:                 prettyPrint( buffer, indentLevel + 1, obj.get( key ) );
1:2c38f3c:             }
1:2c38f3c:             indent( buffer, indentLevel );
1:2c38f3c:         }
1:2c38f3c:         buffer.append( "}" );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static void prettyPrint
1:2c38f3c:         (
1:2c38f3c:          StringBuilder buffer,
1:2c38f3c:          int indentLevel,
1:2c38f3c:          Object obj
1:2c38f3c:          )
1:2c38f3c:     {
1:2c38f3c:         if ( obj == null ) { buffer.append( "null" ); }
1:2c38f3c:         else if ( obj instanceof JSONArray )
1:2c38f3c:         { prettyPrintArray( buffer, indentLevel, (JSONArray) obj ); }
1:2c38f3c:         else if ( obj instanceof JSONObject )
1:2c38f3c:         { prettyPrintObject( buffer, indentLevel, (JSONObject) obj ); }
1:2c38f3c:         else if ( (obj instanceof Number) || (obj instanceof Boolean) )
1:2c38f3c:         { buffer.append( obj.toString() ); }
1:2c38f3c:         else { buffer.append( doubleQuote( obj.toString() ) ); }
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  void indent( StringBuilder buffer, int indentLevel )
1:2c38f3c:     {
1:2c38f3c:         buffer.append( "\n" );
1:2c38f3c:         for ( int i = 0; i < indentLevel; i++ ) { buffer.append( TAB ); }
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  String  doubleQuote( String raw )
1:2c38f3c:     {
1:2c38f3c:         return "\"" + raw + "\"";
1:2c38f3c:     }
1:2c38f3c: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:961b0f4
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test the arrayToClob() function.
1:      * </p>
1:      */
1: 	public void testArrayToClob_006() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1:         goodStatement( conn, "create table employee( fullName varchar( 100 ) )" );
1:         goodStatement( conn, "create table docs( stringDoc varchar( 32672 ) )" );
1:         goodStatement( conn, "insert into employee values ( 'Fred Flintstone' ), ( 'Barney Rubble' )" );
1:         goodStatement( conn, "insert into docs values( arrayToClob( toJSON( 'select * from employee' ) ) )" );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "select * from docs",
1:              new String[][]
1:              {
1:                  {
1:                      "[{\"FULLNAME\":\"Fred Flintstone\"},{\"FULLNAME\":\"Barney Rubble\"}]"
1:                  }
1:              },
1:              true
1:              );
1: 
1:         goodStatement( conn, "drop table docs" );
1:         goodStatement( conn, "drop table employee" );
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:     }
1: 
commit:fd0d01f
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  OUT_OF_RANGE = "22003";
/////////////////////////////////////////////////////////////////////////
1:                 "functionTests/tests/lang/json.dat",
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test the datatypes understood by SimpleJsonVTI.
1:      * </p>
1:      */
1: 	public void testVTIdatatypes005() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1: 
1:         vetDatatype_005
1:             (
1:              conn,
1:              "smallint",
1:              new String[][]
1:              {
1:                  { "abc","true", "127" },
1:                  { "def", "false", "1" },
1:                  { "ghi", null, "345" },
1:                  { "lmn", "true", "-1" },    
1:              }
1:              );
1:         vetDatatype_005
1:             (
1:              conn,
1:              "int",
1:              new String[][]
1:              {
1:                  { "abc","true", "127" },
1:                  { "def", "false", "1" },
1:                  { "ghi", null, "345" },
1:                  { "lmn", "true", "-1" },    
1:              }
1:              );
1:         vetDatatype_005
1:             (
1:              conn,
1:              "bigint",
1:              new String[][]
1:              {
1:                  { "abc","true", "127" },
1:                  { "def", "false", "1" },
1:                  { "ghi", null, "345" },
1:                  { "lmn", "true", "9223372036854775807" },    
1:              }
1:              );
1:         vetDatatype_005
1:             (
1:              conn,
1:              "float",
1:              new String[][]
1:              {
1:                  { "abc","true", "127.0" },
1:                  { "def", "false", "1.2" },
1:                  { "ghi", null, "345.67" },
1:                  { "lmn", "true", "9.223372036854776E18" },    
1:              }
1:              );
1:         vetDatatype_005
1:             (
1:              conn,
1:              "double",
1:              new String[][]
1:              {
1:                  { "abc","true", "127.0" },
1:                  { "def", "false", "1.2" },
1:                  { "ghi", null, "345.67" },
1:                  { "lmn", "true", "9.223372036854776E18" },    
1:              }
1:              );
1: 
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:     }
1:     private void vetDatatype_005
1:         (
1:          Connection conn,
1:          String datatype,
1:          String[][] expectedResults
1:          )
1:         throws Exception
1:     {
1:         createFunction_005( conn, datatype );
1: 
1:         PreparedStatement   ps = conn.prepareStatement
1:             (
1:              "select * from table\n" +
1:              "( f_" + datatype + "( readArrayFromFile( ?, 'UTF-8' ) )) t\n"
1:              );
1:         File    inputFile = SupportFilesSetup.getReadOnly( "json.dat" );
1:         ps.setString( 1, PrivilegedFileOpsForTests.getAbsolutePath( inputFile ) );
1: 
1:         ResultSet           rs;
1: 
1:         rs = ps.executeQuery();
1:         assertResults(rs, expectedResults, true );
1:         rs.close();
1: 
1:         // the first two rows have numeric values which won't raise
1:         // truncation exceptions when fetched into tinyint
1:         rs = ps.executeQuery();
1:         rs.next();
1:         assertEquals( (byte) 127, rs.getByte( "NUM_COL" ) );
1:         rs.next();
1:         assertEquals( (byte) 1, rs.getByte( "NUM_COL" ) );
1:         rs.close();
1:         
1:         ps.close();
1: 
1:         dropFunction_005( conn, datatype );
1:     }
1:     private void createFunction_005( Connection conn, String datatype )
1:         throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "create function f_" + datatype + "( jsonArray JSONArray )\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "  str_col varchar( 10 ),\n" +
1:              "  bool_col boolean,\n" +
1:              "  num_col " + datatype + "\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set contains sql\n" +
1:              "external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray'\n"
1:              );
1:     }
1:     private void dropFunction_005( Connection conn, String datatype )
1:         throws Exception
1:     {
1:         goodStatement( conn, "drop function f_" + datatype );
1:     }
1: 
commit:4394bdd
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  THERMOSTAT_READINGS =
1:         "[\n" +
1:         " {\n" +
1:         "   \"id\": 1,\n" +
1:         "   \"temperature\": 70.3,\n" +
1:         "   \"fanOn\": true\n" +
1:         " },\n" +
1:         " {\n" +
1:         "   \"id\": 2,\n" +
1:         "   \"temperature\": 65.5,\n" +
1:         "   \"fanOn\": false\n" +
1:         " }\n" +
1:         "]";
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new SupportFilesSetup
1:             (
1:              suite,
1:              new String[]
1:              { 
1:                 "functionTests/tests/lang/thermostatReadings.dat",
1:              }
1:             );
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test the SimpleJsonVTI.
1:      * </p>
1:      */
1: 	public void testVTI_004() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1: 
1:         // declare a table function for reading a string
1:         goodStatement
1:             (
1:              conn,
1:              "create function thermostatReadings( jsonDocument JSONArray )\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "\"id\" int,\n" +
1:              "\"temperature\" float,\n" +
1:              "\"fanOn\" boolean\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set contains sql\n" +
1:              "external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray'\n"
1:              );
1: 
1:         PreparedStatement   ps;
1:         ResultSet           rs;
1: 
1:         // turn a JSON document string into a ResultSet
1:         ps = conn.prepareStatement
1:             (
1:              "select * from table\n" +
1:              "( thermostatReadings( readArrayFromString(?) ) ) t order by \"id\""
1:              );
1:         ps.setString( 1, THERMOSTAT_READINGS );
1:         rs = ps.executeQuery();
1:         assertResults
1:             (
1:              rs,
1:              new String[][]
1:              {
1:                  { "1", "70.3", "true" },
1:                  { "2", "65.5", "false" }
1:              },
1:              true
1:              );
1:         rs.close();
1:         ps.close();
1: 
1:         // make a ResultSet out of a file containing JSON text
1:         File    inputFile = SupportFilesSetup.getReadOnly( "thermostatReadings.dat" );
1:         String[][] fileReadings = new String[][]
1:             {
1:                 { "1", "70.3", "true" },
1:                 { "2", "65.5", "false" },
1:                 { "3", "60.5", "false" },
1:             };
1:         ps = conn.prepareStatement
1:             (
1:              "select * from table\n" +
1:              "( thermostatReadings( readArrayFromFile( ?, 'UTF-8' ) ) ) t order by \"id\""
1:              );
1:         ps.setString( 1, PrivilegedFileOpsForTests.getAbsolutePath( inputFile ) );
1:         rs = ps.executeQuery();
1:         assertResults(rs, fileReadings, true );
1:         rs.close();
1:         ps.close();
1: 
1:         // make a ResultSet out of an URL which points to a file containing JSON text
1:         ps = conn.prepareStatement
1:             (
1:              "select * from table\n" +
1:              "( thermostatReadings( readArrayFromURL( ?, 'UTF-8' ) ) ) t order by \"id\""
1:              );
1:         String  inputFileURL = PrivilegedFileOpsForTests.toURI(inputFile ).toURL().toString();
1:         ps.setString( 1, inputFileURL);
1:         rs = ps.executeQuery();
1:         assertResults(rs, fileReadings, true );
1:         rs.close();
1:         ps.close();
1: 
1:         goodStatement( conn, "drop function thermostatReadings" );
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
commit:2c38f3c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SimpleJsonTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.util.Arrays;
1: 
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: import org.json.simple.JSONArray;
1: import org.json.simple.JSONObject;
1: 
1: /**
1:  * <p>
1:  * Basic test of the optional tool which provides JSON support functions
1:  * which use the simple json library from https://code.google.com/p/json-simple/.
1:  * </p>
1:  */
1: public class SimpleJsonTest extends BaseJDBCTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String  TAB = "  ";
1:     private static  final   String  USER_ERROR = "38000";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public SimpleJsonTest(String name) {
1: 		super(name);
1: 	}
1: 	
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit MACHINERY
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1: 	public static Test suite()
1:     {
1:         BaseTestSuite suite = new BaseTestSuite("SimpleJsonTest");
1: 
1:         suite.addTest( TestConfiguration.defaultSuite( SimpleJsonTest.class ) );
1: 
0:         return suite;
1: 	}
1: 	
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1: 	public void testBasic_001() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         // create the json support types and functions
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1: 
1:         createSchema_001( conn );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "values prettyPrint( toJSON( " +
1:              "'select * from thermostatReadings order by \"id\", \"sampleTime\"' ) )",
1:              new String[][]
1:              {
1:                  {
1:                      "[\n" +
1:                      "  {\n" +
1:                      "    \"fanOn\" : false, \n" +
1:                      "    \"id\" : 1, \n" +
1:                      "    \"sampleTime\" : \"2015-07-08 04:03:20.0\", \n" +
1:                      "    \"temperature\" : 65.5\n" +
1:                      "  }, \n" +
1:                      "  {\n" +
1:                      "    \"fanOn\" : true, \n" +
1:                      "    \"id\" : 1, \n" +
1:                      "    \"sampleTime\" : \"2015-07-08 13:03:20.0\", \n" +
1:                      "    \"temperature\" : 70.1\n" +
1:                      "  }, \n" +
1:                      "  {\n" +
1:                      "    \"fanOn\" : false, \n" +
1:                      "    \"id\" : 2, \n" +
1:                      "    \"sampleTime\" : \"2015-07-08 03:03:20.0\", \n" +
1:                      "    \"temperature\" : 64.5\n" +
1:                      "  }, \n" +
1:                      "  {\n" +
1:                      "    \"fanOn\" : true, \n" +
1:                      "    \"id\" : 2, \n" +
1:                      "    \"sampleTime\" : \"2015-07-08 16:03:20.0\", \n" +
1:                      "    \"temperature\" : 72.1\n" +
1:                      "  }\n" +
1:                      "]"
1:                  }
1:              },
1:              true
1:              );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "values prettyPrint( toJSON( 'select \"id\", max( \"temperature\" ) \"maxTemp\" from thermostatReadings group by \"id\"' ) )",
1:              new String[][]
1:              {
1:                  {
1:                      "[\n" +
1:                      "  {\n" +
1:                      "    \"id\" : 1, \n" +
1:                      "    \"maxTemp\" : 70.1\n" +
1:                      "  }, \n" +
1:                      "  {\n" +
1:                      "    \"id\" : 2, \n" +
1:                      "    \"maxTemp\" : 72.1\n" +
1:                      "  }\n" +
1:                      "]"
1:                  }
1:              },
1:              true
1:              );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "values prettyPrint( toJSON( 'select \"id\", max( \"temperature\" ) \"maxTemp\" from thermostatReadings where \"id\" = ? group by \"id\"', '2' ) )",
1:              new String[][]
1:              {
1:                  {
1:                      "[\n" +
1:                      "  {\n" +
1:                      "    \"id\" : 2, \n" +
1:                      "    \"maxTemp\" : 72.1\n" +
1:                      "  }\n" +
1:                      "]"
1:                  }
1:              },
1:              true
1:              );
1: 
1:         dropSchema_001( conn );
1:         
1:         // drop the json support types and functions
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1: 	}
1:     private void    createSchema_001( Connection conn ) throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "create table thermostatReadings\n" +
1:              "(\n" +
1:              "\"id\" int,\n" +
1:              "\"temperature\" double,\n" +
1:              "\"fanOn\" boolean,\n" +
1:              "\"sampleTime\" timestamp,\n" +
1:              "primary key( \"id\", \"sampleTime\" )\n" +
1:              ")\n"
1:              );
1: 
1:         goodStatement
1:             (
1:              conn,
1:              "insert into thermostatReadings values\n" +
1:              "( 1, 65.5, false, timestamp( '2015-07-08 04:03:20') ),\n" +
1:              "( 1, 70.1, true, timestamp( '2015-07-08 13:03:20') ),\n" +
1:              "( 2, 64.5, false, timestamp( '2015-07-08 03:03:20') ),\n" +
1:              "( 2, 72.1, true, timestamp( '2015-07-08 16:03:20') )\n"
1:              );
1:         
1:         goodStatement
1:             (
1:              conn,
1:              "create function prettyPrint( doc JSONArray ) returns varchar( 32672 )\n" +
1:              "language java parameter style java no sql\n" +
1:              "external name '" + getClass().getName() + ".prettyPrint'\n"
1:              );
1:     }
1:     private void    dropSchema_001( Connection conn ) throws Exception
1:     {
1:         goodStatement( conn, "drop function prettyPrint" );
1:         goodStatement( conn, "drop table thermostatReadings" );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test the jsonification of Derby's datatypes.
1:      * </p>
1:      */
1: 	public void testDatatypes_002() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         // create the json support types and functions
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1: 
1:         createSchema_002( conn );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "values( prettyPrint( toJSON( 'select * from all_types order by key_col' ) ) )",
1:              new String[][]
1:              {
1:                  {
1:                      "[\n" +
1:                      "  {\n" +
1:                      "    \"BIGINT_COL\" : 0, \n" +
1:                      "    \"BLOB_COL\" : \"01\", \n" +
1:                      "    \"CHAR_COL\" : \"0         \", \n" +
1:                      "    \"CHAR_FOR_BIT_DATA_COL\" : \"de202020202020202020\", \n" +
1:                      "    \"CLOB_COL\" : \"0\", \n" +
1:                      "    \"DATE_COL\" : \"1994-02-23\", \n" +
1:                      "    \"DECIMAL_COL\" : 0.0, \n" +
1:                      "    \"DOUBLE_COL\" : 0.0, \n" +
1:                      "    \"INT_COL\" : 0, \n" +
1:                      "    \"JSON_ARRAY_COL\" : [\n" +
1:                      "      {\n" +
1:                      "        \"A\" : 1, \n" +
1:                      "        \"B\" : true\n" +
1:                      "      }, \n" +
1:                      "      {\n" +
1:                      "        \"A\" : 2, \n" +
1:                      "        \"B\" : false\n" +
1:                      "      }\n" +
1:                      "    ], \n" +
1:                      "    \"KEY_COL\" : 0, \n" +
1:                      "    \"LONG_VARCHAR_COL\" : \"0\", \n" +
1:                      "    \"LONG_VARCHAR_FOR_BIT_DATA_COL\" : \"de\", \n" +
1:                      "    \"NUMERIC_COL\" : 0.0, \n" +
1:                      "    \"PRICE_COL\" : \"Price( USD, 9.99000, 2009-10-16 14:24:43.0 )\", \n" +
1:                      "    \"REAL_COL\" : 0.0, \n" +
1:                      "    \"SMALLINT_COL\" : 0, \n" +
1:                      "    \"TIMESTAMP_COL\" : \"1962-09-23 03:23:34.234\", \n" +
1:                      "    \"TIME_COL\" : \"15:09:02\", \n" +
1:                      "    \"VARCHAR_COL\" : \"0\", \n" +
1:                      "    \"VARCHAR_FOR_BIT_DATA_COL\" : \"de\"\n" +
1:                      "  }, \n" +
1:                      "  {\n" +
1:                      "    \"BIGINT_COL\" : null, \n" +
1:                      "    \"BLOB_COL\" : null, \n" +
1:                      "    \"CHAR_COL\" : null, \n" +
1:                      "    \"CHAR_FOR_BIT_DATA_COL\" : null, \n" +
1:                      "    \"CLOB_COL\" : null, \n" +
1:                      "    \"DATE_COL\" : null, \n" +
1:                      "    \"DECIMAL_COL\" : null, \n" +
1:                      "    \"DOUBLE_COL\" : null, \n" +
1:                      "    \"INT_COL\" : null, \n" +
1:                      "    \"JSON_ARRAY_COL\" : null, \n" +
1:                      "    \"KEY_COL\" : 1, \n" +
1:                      "    \"LONG_VARCHAR_COL\" : null, \n" +
1:                      "    \"LONG_VARCHAR_FOR_BIT_DATA_COL\" : null, \n" +
1:                      "    \"NUMERIC_COL\" : null, \n" +
1:                      "    \"PRICE_COL\" : null, \n" +
1:                      "    \"REAL_COL\" : null, \n" +
1:                      "    \"SMALLINT_COL\" : null, \n" +
1:                      "    \"TIMESTAMP_COL\" : null, \n" +
1:                      "    \"TIME_COL\" : null, \n" +
1:                      "    \"VARCHAR_COL\" : null, \n" +
1:                      "    \"VARCHAR_FOR_BIT_DATA_COL\" : null\n" +
1:                      "  }\n" +
1:                      "]"                                                                                                     }
1:              },
1:              true
1:              );
1: 
1:         dropSchema_002( conn );
1: 
1:         // drop the json support types and functions
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:     }
1:     private void createSchema_002( Connection conn ) throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "create type Price external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create function makePrice( currencyCode char( 3 ), amount decimal( 31, 5 ), timeInstant Timestamp )\n" +
1:              "returns Price language java parameter style java no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create function makeSimpleBlob( ) returns blob\n" +
1:              "language java parameter style java no sql deterministic\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.BooleanValuesTest.makeSimpleBlob'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table dummy( a int, b boolean )"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "insert into dummy values ( 1, true ), ( 2, false )"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table all_types\n" +
1:              "(\n" +
1:              "    key_col int,\n" +
1:              "    bigint_col  BIGINT,\n" +
1:              "    blob_col  BLOB(2147483647),\n" +
1:              "    char_col  CHAR(10),\n" +
1:              "    char_for_bit_data_col  CHAR (10) FOR BIT DATA,\n" +
1:              "    clob_col  CLOB(2147483647),\n" +
1:              "    date_col  DATE,\n" +
1:              "    decimal_col  DECIMAL(5,2),\n" +
1:              "    real_col  REAL,\n" +
1:              "    double_col  DOUBLE,\n" +
1:              "    int_col  INTEGER,\n" +
1:              "    long_varchar_col  LONG VARCHAR,\n" +
1:              "    long_varchar_for_bit_data_col  LONG VARCHAR FOR BIT DATA,\n" +
1:              "    numeric_col  NUMERIC(5,2),\n" +
1:              "    smallint_col  SMALLINT,\n" +
1:              "    time_col  TIME,\n" +
1:              "    timestamp_col  TIMESTAMP,\n" +
1:              "    varchar_col  VARCHAR(10),\n" +
1:              "    varchar_for_bit_data_col  VARCHAR (10) FOR BIT DATA,\n" +
1:              "    price_col price,\n" +
1:              "    json_array_col jsonArray\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "insert into all_types( key_col ) values ( 1 )"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "insert into all_types\n" +
1:              "(\n" +
1:              "    key_col,\n" +
1:              "    bigint_col,\n" +
1:              "    blob_col,\n" +
1:              "    char_col,\n" +
1:              "    char_for_bit_data_col,\n" +
1:              "    clob_col,\n" +
1:              "    date_col,\n" +
1:              "    decimal_col,\n" +
1:              "    real_col,\n" +
1:              "    double_col,\n" +
1:              "    int_col,\n" +
1:              "    long_varchar_col,\n" +
1:              "    long_varchar_for_bit_data_col,\n" +
1:              "    numeric_col,\n" +
1:              "    smallint_col,\n" +
1:              "    time_col,\n" +
1:              "    timestamp_col,\n" +
1:              "    varchar_col,\n" +
1:              "    varchar_for_bit_data_col,\n" +
1:              "    price_col,\n" +
1:              "    json_array_col\n" +
1:              ")\n" +
1:              "values\n" +
1:              "(\n" +
1:              "    0,\n" +
1:              "    0,\n" +
1:              "    makeSimpleBlob(),\n" +
1:              "    '0',\n" +
1:              "    X'DE',\n" +
1:              "    '0',\n" +
1:              "    date('1994-02-23'),\n" +
1:              "    0.00,\n" +
1:              "    0.0,\n" +
1:              "    0.0,\n" +
1:              "    0,\n" +
1:              "    '0',\n" +
1:              "    X'DE',\n" +
1:              "    0.00,\n" +
1:              "    0,\n" +
1:              "    time('15:09:02'),\n" +
1:              "    timestamp('1962-09-23 03:23:34.234'),\n" +
1:              "    '0',\n" +
1:              "    X'DE',\n" +
1:              "    makePrice( 'USD', cast( 9.99 as decimal( 31, 5 ) ), timestamp('2009-10-16 14:24:43') ),\n" +
1:              "    toJSON( 'select * from dummy order by a' ) \n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create function prettyPrint( doc JSONArray ) returns varchar( 32672 )\n" +
1:              "language java parameter style java no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.SimpleJsonTest.prettyPrint'\n"
1:              );
1:     }
1:     private void dropSchema_002( Connection conn ) throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "drop function makePrice"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "drop function makeSimpleBlob"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "drop table all_types"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "drop type price restrict"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "drop function prettyPrint"
1:              );
1: 
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test errors.
1:      * </p>
1:      */
1: 	public void testNegative_003() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         // can't load the tool redundantly
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1: 
1:         expectExecutionError
1:             (
1:              conn,
1:              USER_ERROR,
1:              "call syscs_util.syscs_register_tool( 'simpleJson', true )"
1:              );
1:         
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1: 
1:         // can't unload the tool redundantly
1:         expectExecutionError
1:             (
1:              conn,
1:              USER_ERROR,
1:              "call syscs_util.syscs_register_tool( 'simpleJson', false )"
1:              );
1: 
1:         // need to specify all ? parameters
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', true )" );
1: 
1:         expectExecutionError
1:             (
1:              conn,
1:              USER_ERROR,
1:              "values( toJSON( 'select * from sys.systables where tablename = ?' ) )"
1:              );
1: 
1:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'simpleJson', false )" );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FUNCTIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Pretty-print a JSONArray.
1:      * </p>
1:      */
1:     public static String prettyPrint( JSONArray array )
1:     {
1:         StringBuilder   buffer = new StringBuilder();
1: 
1:         prettyPrintArray( buffer, 0, array );
1:         
1:         return buffer.toString();
1:     }
1: 
1:     private static  void    prettyPrintArray
1:         (
1:          StringBuilder buffer,
1:          int indentLevel,
1:          JSONArray array
1:          )
1:     {
1:         buffer.append( "[" );
1:         int cellCount = array.size();
1:         if ( cellCount > 0 )
1:         {
1:             for ( int i = 0; i < cellCount; i++ )
1:             {
1:                 if ( i > 0 ) { buffer.append( ", " ); }
1:                 indent( buffer, indentLevel + 1 );
1:                 prettyPrint( buffer, indentLevel + 1, array.get( i ) );
1:             }
1:             indent( buffer, indentLevel );
1:         }
1:         buffer.append( "]" );
1:     }
1: 
1:     private static  void    prettyPrintObject
1:         (
1:          StringBuilder buffer,
1:          int indentLevel,
1:          JSONObject obj
1:          )
1:     {
1:         buffer.append( "{" );
1:         int keyCount = obj.size();
1:         if ( keyCount > 0 )
1:         {
1:             // alphabetize the keys
1:             Object[]    keys = obj.keySet().toArray();
1:             Arrays.sort( keys );
1:             for ( int i = 0; i < keyCount; i++ )
1:             {
1:                 Object  key = keys[ i ];
1:                 if ( i > 0 ) { buffer.append( ", " ); }
1:                 indent( buffer, indentLevel + 1 );
1:                 buffer.append( doubleQuote( (String) key ) );
1:                 buffer.append( " : " );
1:                 prettyPrint( buffer, indentLevel + 1, obj.get( key ) );
1:             }
1:             indent( buffer, indentLevel );
1:         }
1:         buffer.append( "}" );
1:     }
1: 
1:     private static void prettyPrint
1:         (
1:          StringBuilder buffer,
1:          int indentLevel,
1:          Object obj
1:          )
1:     {
1:         if ( obj == null ) { buffer.append( "null" ); }
1:         else if ( obj instanceof JSONArray )
1:         { prettyPrintArray( buffer, indentLevel, (JSONArray) obj ); }
1:         else if ( obj instanceof JSONObject )
1:         { prettyPrintObject( buffer, indentLevel, (JSONObject) obj ); }
1:         else if ( (obj instanceof Number) || (obj instanceof Boolean) )
1:         { buffer.append( obj.toString() ); }
1:         else { buffer.append( doubleQuote( obj.toString() ) ); }
1:     }
1: 
1:     private static  void indent( StringBuilder buffer, int indentLevel )
1:     {
1:         buffer.append( "\n" );
1:         for ( int i = 0; i < indentLevel; i++ ) { buffer.append( TAB ); }
1:     }
1: 
1:     private static  String  doubleQuote( String raw )
1:     {
1:         return "\"" + raw + "\"";
1:     }
1: }
============================================================================