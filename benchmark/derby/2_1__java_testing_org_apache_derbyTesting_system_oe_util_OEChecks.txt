1:0d6b409: /*
2:0d6b409:  *
1:0d6b409:  * Derby - Class org.apache.derbyTesting.system.oe.util.OEChecks
1:0d6b409:  *
1:0d6b409:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d6b409:  * contributor license agreements.  See the NOTICE file distributed with
1:0d6b409:  * this work for additional information regarding copyright ownership.
1:0d6b409:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d6b409:  * (the "License"); you may not use this file except in compliance with
1:0d6b409:  * the License.  You may obtain a copy of the License at
1:0d6b409:  *
1:0d6b409:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0d6b409:  *
1:0d6b409:  * Unless required by applicable law or agreed to in writing, 
1:0d6b409:  * software distributed under the License is distributed on an 
1:0d6b409:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:0d6b409:  * either express or implied. See the License for the specific 
1:0d6b409:  * language governing permissions and limitations under the License.
1:0d6b409:  */
1:0d6b409: package org.apache.derbyTesting.system.oe.util;
1:0d6b409: 
1:0d6b409: import java.sql.SQLException;
1:0d6b409: import java.sql.ResultSet;
1:0d6b409: import java.sql.Statement;
1:0d6b409: import java.sql.Connection;
1:0d6b409: 
1:0d6b409: import org.apache.derbyTesting.system.oe.client.Load;
1:0d6b409: 
1:0d6b409: /**
1:0d6b409:  * Do some OEChecks on the Order Entry database.
1:0d6b409:  */
1:0d6b409: public class OEChecks  {
1:956dcad:     
1:956dcad:     /**
1:956dcad:      * How to report an error.
1:956dcad:      */
1:956dcad:     private HandleCheckError errorHandler;
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Warehouse scaling factor
1:0d6b409:      */
1:0d6b409:     private short scale = 1;
1:0d6b409: 
1:0d6b409:     private Connection conn = null;
1:0d6b409: 
1:956dcad:     public void initialize(HandleCheckError errorHandler,
1:956dcad:             Connection conn, short scale)
1:0d6b409:     throws Exception
1:0d6b409:     {
1:956dcad:         this.errorHandler = errorHandler;
1:0d6b409:         this.conn = conn;
1:0d6b409:         conn.setAutoCommit(false);
1:0d6b409:         this.scale = scale;
1:0d6b409:     }
1:0d6b409:     
1:0d6b409:     /**
1:0d6b409:      * Return suite of tests that OEChecks the row counts for all the tables in
1:0d6b409:      * the Order Entry bechmark.
1:0d6b409:      */
1:0d6b409:     public void checkAllRowCounts() throws Exception {
1:0d6b409:         testWarehouseRows();
1:0d6b409:         testStockRows();
1:0d6b409:         testItemRows();
1:0d6b409:         testCustomerRows();
1:0d6b409:         testDistrictRows();
1:0d6b409:         testOrdersRows();
1:0d6b409:         testNewOrdersRows();
1:0d6b409:         testOrderLineRows();
1:0d6b409:         testHistoryRows();
1:0d6b409:     }
1:0d6b409:     
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of WAREHOUSE table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testWarehouseRows() throws Exception {
1:0d6b409:         checkCountStar("WAREHOUSE", scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of STOCK table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testStockRows() throws Exception {
1:0d6b409:         checkCountStar("STOCK", Load.STOCK_COUNT_W * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of ORDERS table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testOrdersRows() throws Exception {
1:0d6b409:         checkCountStar("ORDERS", Load.ORDERS_COUNT_W * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of DISTRICT table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testDistrictRows() throws Exception {
1:0d6b409:         checkCountStar("DISTRICT", Load.DISTRICT_COUNT_W * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of CUSTOMER table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testCustomerRows() throws Exception {
1:0d6b409:         checkCountStar("CUSTOMER", Load.CUSTOMER_COUNT_W * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of ITEM table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testItemRows() throws Exception {
1:0d6b409:         checkCountStar("ITEM", Load.ITEM_COUNT);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of NEWORDERS table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testNewOrdersRows() throws Exception {
1:0d6b409:         checkCountStar("NEWORDERS", Load.NEWORDERS_COUNT_W * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of HISTORY table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testHistoryRows() throws Exception {
1:0d6b409:         checkCountStar("HISTORY", Load.HISTORY_COUNT_W * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Test cardinality of ORDERLINE table
1:0d6b409:      * 
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public void testOrderLineRows() throws Exception {
1:0d6b409:         checkWithinOnePercent("ORDERLINE", Load.ORDERLINE_COUNT_WV * scale);
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Check if number of rows in table is as expected
1:0d6b409:      * 
1:0d6b409:      * @param table -
1:0d6b409:      *            table on which to execute the query
1:0d6b409:      * @param expected -
1:0d6b409:      *            expected number of rows
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     private void checkCountStar(String table, int expected) throws Exception {
1:0d6b409:         if( expected != rowsInTable(table))
1:956dcad:             errorHandler.handleCheckError("ERROR:Number of rows loaded for " + table +
1:0d6b409:                     " not correct, expected="+expected +" rows found="+ 
1:0d6b409:                     rowsInTable(table));
1:0d6b409: 
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Return the number of rows in the table. A simple select count(*) from
1:0d6b409:      * tableName
1:0d6b409:      * 
1:0d6b409:      * @param tableName -
1:0d6b409:      *            name of the table
1:0d6b409:      * @throws SQLException
1:0d6b409:      */
1:0d6b409:     private int rowsInTable(String tableName) throws SQLException {
1:0d6b409:         Statement stmt = conn.createStatement();
1:0d6b409:         ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
1:0d6b409:         rs.next();
1:0d6b409:         int count = rs.getInt(1);
1:0d6b409:         conn.commit();
1:0d6b409:         rs.close();
1:0d6b409:         stmt.close();
1:0d6b409: 
1:0d6b409:         return count;
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Check if number of rows in table is within one percent of expected value
1:0d6b409:      * 
1:0d6b409:      * @param tableName -
1:0d6b409:      *            table on which to execute the query
1:0d6b409:      * @param expected -
1:0d6b409:      *            expected number of rows
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     private void checkWithinOnePercent(String tableName, int expected)
1:0d6b409:             throws Exception {
1:0d6b409: 
1:0d6b409:         double count = rowsInTable(tableName);
1:0d6b409:         double low = ((double) expected) * 0.99;
1:0d6b409:         double high = ((double) expected) * 1.01;
1:0d6b409:         if ( (count < low) || (count >high))
1:956dcad:             errorHandler.handleCheckError("ERROR! Initial rows" + count + " in " + 
1:0d6b409:                 tableName + " is out of range.[" + low + "-" + high + "]");
1:0d6b409:         
1:0d6b409:     }
1:0d6b409:     
1:0d6b409: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:956dcad
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * How to report an error.
1:      */
1:     private HandleCheckError errorHandler;
/////////////////////////////////////////////////////////////////////////
1:     public void initialize(HandleCheckError errorHandler,
1:             Connection conn, short scale)
1:         this.errorHandler = errorHandler;
/////////////////////////////////////////////////////////////////////////
1:             errorHandler.handleCheckError("ERROR:Number of rows loaded for " + table +
/////////////////////////////////////////////////////////////////////////
1:             errorHandler.handleCheckError("ERROR! Initial rows" + count + " in " + 
commit:0d6b409
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.util.OEChecks
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.util;
1: 
1: import java.sql.SQLException;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.oe.client.Load;
1: 
1: /**
1:  * Do some OEChecks on the Order Entry database.
1:  */
1: public class OEChecks  {
1: 
1:     /**
1:      * Warehouse scaling factor
1:      */
1:     private short scale = 1;
1: 
1:     private Connection conn = null;
1: 
0:     public void initialize(Connection conn, short scale)
1:     throws Exception
1:     {
1:         this.conn = conn;
1:         conn.setAutoCommit(false);
1:         this.scale = scale;
1:     }
1:     
1:     /**
1:      * Return suite of tests that OEChecks the row counts for all the tables in
1:      * the Order Entry bechmark.
1:      * 
0:      * @param scale
0:      * @return
1:      */
1:     public void checkAllRowCounts() throws Exception {
1:         testWarehouseRows();
1:         testStockRows();
1:         testItemRows();
1:         testCustomerRows();
1:         testDistrictRows();
1:         testOrdersRows();
1:         testNewOrdersRows();
1:         testOrderLineRows();
1:         testHistoryRows();
1:     }
1:     
1:     /**
1:      * Test cardinality of WAREHOUSE table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testWarehouseRows() throws Exception {
1:         checkCountStar("WAREHOUSE", scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of STOCK table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testStockRows() throws Exception {
1:         checkCountStar("STOCK", Load.STOCK_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of ORDERS table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testOrdersRows() throws Exception {
1:         checkCountStar("ORDERS", Load.ORDERS_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of DISTRICT table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testDistrictRows() throws Exception {
1:         checkCountStar("DISTRICT", Load.DISTRICT_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of CUSTOMER table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testCustomerRows() throws Exception {
1:         checkCountStar("CUSTOMER", Load.CUSTOMER_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of ITEM table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testItemRows() throws Exception {
1:         checkCountStar("ITEM", Load.ITEM_COUNT);
1:     }
1: 
1:     /**
1:      * Test cardinality of NEWORDERS table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testNewOrdersRows() throws Exception {
1:         checkCountStar("NEWORDERS", Load.NEWORDERS_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of HISTORY table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testHistoryRows() throws Exception {
1:         checkCountStar("HISTORY", Load.HISTORY_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of ORDERLINE table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testOrderLineRows() throws Exception {
1:         checkWithinOnePercent("ORDERLINE", Load.ORDERLINE_COUNT_WV * scale);
1:     }
1: 
1:     /**
1:      * Check if number of rows in table is as expected
1:      * 
1:      * @param table -
1:      *            table on which to execute the query
1:      * @param expected -
1:      *            expected number of rows
1:      * @throws Exception
1:      */
1:     private void checkCountStar(String table, int expected) throws Exception {
1:         if( expected != rowsInTable(table))
0:             System.out.println("ERROR:Number of rows loaded for " + table +
1:                     " not correct, expected="+expected +" rows found="+ 
1:                     rowsInTable(table));
1: 
1:     }
1: 
1:     /**
1:      * Return the number of rows in the table. A simple select count(*) from
1:      * tableName
1:      * 
1:      * @param tableName -
1:      *            name of the table
1:      * @throws SQLException
1:      */
1:     private int rowsInTable(String tableName) throws SQLException {
1:         Statement stmt = conn.createStatement();
1:         ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
1:         rs.next();
1:         int count = rs.getInt(1);
1:         conn.commit();
1:         rs.close();
1:         stmt.close();
1: 
1:         return count;
1:     }
1: 
1:     /**
1:      * Check if number of rows in table is within one percent of expected value
1:      * 
1:      * @param tableName -
1:      *            table on which to execute the query
1:      * @param expected -
1:      *            expected number of rows
1:      * @throws Exception
1:      */
1:     private void checkWithinOnePercent(String tableName, int expected)
1:             throws Exception {
1: 
1:         double count = rowsInTable(tableName);
1:         double low = ((double) expected) * 0.99;
1:         double high = ((double) expected) * 1.01;
1:         if ( (count < low) || (count >high))
0:             System.out.println("ERROR! Initial rows" + count + " in " + 
1:                 tableName + " is out of range.[" + low + "-" + high + "]");
1:         
1:     }
1:     
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
============================================================================