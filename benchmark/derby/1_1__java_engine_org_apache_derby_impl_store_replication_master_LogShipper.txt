1:eeeece4: /*
1:eeeece4:  
1:1bac3f3:    Derby - Class org.apache.derby.impl.store.replication.master.LogShipper
1:eeeece4:  
1:eeeece4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:eeeece4:    contributor license agreements.  See the NOTICE file distributed with
1:eeeece4:    this work for additional information regarding copyright ownership.
1:eeeece4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:eeeece4:    (the "License"); you may not use this file except in compliance with
1:eeeece4:    the License.  You may obtain a copy of the License at
1:eeeece4:  
1:eeeece4:       http://www.apache.org/licenses/LICENSE-2.0
1:eeeece4:  
1:eeeece4:    Unless required by applicable law or agreed to in writing, software
1:eeeece4:    distributed under the License is distributed on an "AS IS" BASIS,
1:eeeece4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eeeece4:    See the License for the specific language governing permissions and
1:eeeece4:    limitations under the License.
1:eeeece4:  
1:eeeece4:  */
1:eeeece4: 
1:1bac3f3: package org.apache.derby.impl.store.replication.master;
1:eeeece4: 
1:eeeece4: import java.io.IOException;
1:eeeece4: 
1:eeeece4: import org.apache.derby.iapi.error.StandardException;
1:eeeece4: 
1:eeeece4: /**
1:eeeece4:  *
1:eeeece4:  * This is the interface for the replication log shipper. The log shipper
1:eeeece4:  * is started by the master controller service. The log shipper is responsible
1:eeeece4:  * for shipping of the log chunks from the log buffer (on the master) to the
1:eeeece4:  * slave. The log shipper handles both periodic shipping of log records as well
1:eeeece4:  * as request based shipping. The request based shipping would be useful when
1:eeeece4:  * the log buffer becomes full and needs to be freed before it can store
1:eeeece4:  * subsequent log chunks.
1:eeeece4:  *
1:eeeece4:  */
1:eeeece4: interface LogShipper {
1:eeeece4:     /**
1:eeeece4:      * updates the information about the latest instance of the log record
1:eeeece4:      * that has been flushed to the disk.
1:eeeece4:      *
1:eeeece4:      * @param latestInstanceFlushedToDisk a long that contains the latest
1:eeeece4:      *        instance of the log record that has been flushed to the disk.
1:eeeece4:      */
1:eeeece4:     public void flushedInstance(long latestInstanceFlushedToDisk);
1:eeeece4:     
1:eeeece4:     /**
1:eeeece4:      * Ships the next log record chunk, if available, from the log buffer to
1:eeeece4:      * the slave.
1:eeeece4:      *
1:eeeece4:      * @throws IOException If an exception occurs while trying to ship the
1:eeeece4:      *                     replication message (containing the log records)
1:eeeece4:      *                     across the network.
1:eeeece4:      * @throws StandardException If an exception occurs while trying to read
1:eeeece4:      *                           log records from the log buffer.
1:eeeece4:      */
1:eeeece4:     public void forceFlush() throws IOException, StandardException;
1:0f8eece:     
1:0f8eece:     /**
1:0f8eece:      *
1:0f8eece:      * Transmits all the log records in the log buffer to the slave.
1:0f8eece:      *
1:0f8eece:      * @throws IOException If an exception occurs while trying to ship the
1:0f8eece:      *                     replication message (containing the log records)
1:0f8eece:      *                     across the network.
1:0f8eece:      * @throws StandardException If an exception occurs while trying to read
1:0f8eece:      *                           log records from the log buffer.
1:0f8eece:      *
1:0f8eece:      */
1:0f8eece:     public void flushBuffer() throws IOException, StandardException;
1:2146e78:     
1:2146e78:     /**
1:2146e78:      * Used to notify the log shipper that a log buffer element is full.
1:2146e78:      */
1:2146e78:     public void workToDo();
1:eeeece4: }
============================================================================
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.replication.master.LogShipper
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.store.replication.master;
commit:2146e78
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Used to notify the log shipper that a log buffer element is full.
1:      */
1:     public void workToDo();
commit:0f8eece
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      *
1:      * Transmits all the log records in the log buffer to the slave.
1:      *
1:      * @throws IOException If an exception occurs while trying to ship the
1:      *                     replication message (containing the log records)
1:      *                     across the network.
1:      * @throws StandardException If an exception occurs while trying to read
1:      *                           log records from the log buffer.
1:      *
1:      */
1:     public void flushBuffer() throws IOException, StandardException;
commit:eeeece4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0:    Derby - Class org.apache.derby.impl.services.replication.master.LogShipper
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
0: package org.apache.derby.impl.services.replication.master;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  *
1:  * This is the interface for the replication log shipper. The log shipper
1:  * is started by the master controller service. The log shipper is responsible
1:  * for shipping of the log chunks from the log buffer (on the master) to the
1:  * slave. The log shipper handles both periodic shipping of log records as well
1:  * as request based shipping. The request based shipping would be useful when
1:  * the log buffer becomes full and needs to be freed before it can store
1:  * subsequent log chunks.
1:  *
1:  */
1: interface LogShipper {
1:     /**
1:      * updates the information about the latest instance of the log record
1:      * that has been flushed to the disk.
1:      *
1:      * @param latestInstanceFlushedToDisk a long that contains the latest
1:      *        instance of the log record that has been flushed to the disk.
1:      */
1:     public void flushedInstance(long latestInstanceFlushedToDisk);
1:     
1:     /**
1:      * Ships the next log record chunk, if available, from the log buffer to
1:      * the slave.
1:      *
1:      * @throws IOException If an exception occurs while trying to ship the
1:      *                     replication message (containing the log records)
1:      *                     across the network.
1:      * @throws StandardException If an exception occurs while trying to read
1:      *                           log records from the log buffer.
1:      */
1:     public void forceFlush() throws IOException, StandardException;
1: }
============================================================================