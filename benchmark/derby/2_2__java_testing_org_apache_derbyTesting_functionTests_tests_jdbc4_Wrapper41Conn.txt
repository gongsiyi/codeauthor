1:795f705: /*
1:795f705:  
1:795f705:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.Wrapper41Conn
1:795f705:  
1:795f705:    Licensed to the Apache Software Foundation (ASF) under one or more
1:795f705:    contributor license agreements.  See the NOTICE file distributed with
1:795f705:    this work for additional information regarding copyright ownership.
1:795f705:    The ASF licenses this file to you under the Apache License, Version 2.0
1:795f705:    (the "License"); you may not use this file except in compliance with
1:795f705:    the License.  You may obtain a copy of the License at
1:795f705:  
1:795f705:       http://www.apache.org/licenses/LICENSE-2.0
1:795f705:  
1:795f705:    Unless required by applicable law or agreed to in writing, software
1:795f705:    distributed under the License is distributed on an "AS IS" BASIS,
1:795f705:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:795f705:    See the License for the specific language governing permissions and
1:795f705:    limitations under the License.
1:795f705:  
1:795f705:  */
1:795f705: 
1:795f705: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:795f705: 
1:795f705: import java.sql.Connection;
1:795f705: import java.sql.SQLException;
1:795f705: import java.util.concurrent.Executor;
1:795f705: 
1:863daa0: import org.apache.derby.impl.jdbc.EmbedConnection;
1:863daa0: import org.apache.derby.iapi.jdbc.BrokeredConnection;
1:9a0cdf1: import org.apache.derby.client.am.LogicalConnection;
1:9a0cdf1: import org.apache.derby.client.net.NetConnection;
1:795f705: 
1:795f705: /**
1:795f705:  * A wrapper around the abort(Executor) method added by JDBC 4.1.
1:795f705:  * We can eliminate this class after Java 7 goes GA and we are allowed
1:795f705:  * to use the Java 7 compiler to build our released versions of derbyTesting.jar.
1:795f705:  */
1:795f705: public  class   Wrapper41Conn
1:795f705: {
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705:     //
1:795f705:     // STATE
1:795f705:     //
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705: 
1:863daa0:     private EmbedConnection    _embedded;
1:9a0cdf1:     private NetConnection      _netclient;
1:863daa0:     private BrokeredConnection _brokeredConnection;
1:9a0cdf1:     private LogicalConnection _logicalConnection;
1:795f705:     
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705:     //
1:795f705:     // CONSTRUCTORS
1:795f705:     //
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705: 
1:795f705:     public Wrapper41Conn( Object wrapped ) throws Exception
1:795f705:     {
1:863daa0:         if ( wrapped instanceof EmbedConnection ) { _embedded = (EmbedConnection) wrapped; }
1:863daa0:         else if ( wrapped instanceof BrokeredConnection ) { _brokeredConnection = (BrokeredConnection) wrapped; }
1:9a0cdf1:         else if ( wrapped instanceof NetConnection) { _netclient = (NetConnection) wrapped; }
1:9a0cdf1:         else if ( wrapped instanceof LogicalConnection ) { _logicalConnection = (LogicalConnection) wrapped; }
1:795f705:         else { throw nothingWrapped(); }
1:795f705:     }
1:795f705:     
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705:     //
1:795f705:     // JDBC 4.1 BEHAVIOR
1:795f705:     //
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705: 
1:795f705:     public  void    abort( Executor executor ) throws SQLException
1:795f705:     {
1:795f705:         if ( _embedded != null ) { _embedded.abort( executor ); }
1:795f705:         else if ( _netclient != null ) { _netclient.abort( executor ); }
1:795f705:         else if ( _brokeredConnection != null ) { _brokeredConnection.abort( executor ); }
1:795f705:         else if ( _logicalConnection != null ) { _logicalConnection.abort( executor ); }
1:795f705:         else { throw nothingWrapped(); }
1:795f705:     }
1:795f705: 
1:1837822:     public  String    getSchema() throws SQLException
1:1837822:     {
1:1837822:         if ( _embedded != null ) { return _embedded.getSchema(); }
1:1837822:         else if ( _netclient != null ) { return _netclient.getSchema(); }
1:1837822:         else if ( _brokeredConnection != null ) { return _brokeredConnection.getSchema(); }
1:1837822:         else if ( _logicalConnection != null ) { return _logicalConnection.getSchema(); }
1:1837822:         else { throw nothingWrapped(); }
1:1837822:     }
1:1837822: 
1:1837822:     public  void    setSchema( String schemaName ) throws SQLException
1:1837822:     {
1:1837822:         if ( _embedded != null ) { _embedded.setSchema( schemaName ); }
1:1837822:         else if ( _netclient != null ) { _netclient.setSchema( schemaName ); }
1:1837822:         else if ( _brokeredConnection != null ) { _brokeredConnection.setSchema( schemaName ); }
1:1837822:         else if ( _logicalConnection != null ) { _logicalConnection.setSchema( schemaName ); }
1:1837822:         else { throw nothingWrapped(); }
1:1837822:     }
1:1837822: 
1:e749e12:     public  int    getNetworkTimeout() throws SQLException
1:e749e12:     {
1:e749e12:         if ( _embedded != null ) { return _embedded.getNetworkTimeout(); }
1:e749e12:         else if ( _netclient != null ) { return _netclient.getNetworkTimeout(); }
1:e749e12:         else if ( _brokeredConnection != null ) { return _brokeredConnection.getNetworkTimeout(); }
1:e749e12:         else if ( _logicalConnection != null ) { return _logicalConnection.getNetworkTimeout(); }
1:e749e12:         else { throw nothingWrapped(); }
1:e749e12:     }
1:e749e12: 
1:e749e12:     public  void    setNetworkTimeout( Executor executor, int milliseconds ) throws SQLException
1:e749e12:     {
1:e749e12:         if ( _embedded != null ) { _embedded.setNetworkTimeout( executor, milliseconds ); }
1:e749e12:         else if ( _netclient != null ) { _netclient.setNetworkTimeout( executor, milliseconds ); }
1:e749e12:         else if ( _brokeredConnection != null ) { _brokeredConnection.setNetworkTimeout( executor, milliseconds ); }
1:e749e12:         else if ( _logicalConnection != null ) { _logicalConnection.setNetworkTimeout( executor, milliseconds ); }
1:e749e12:         else { throw nothingWrapped(); }
1:e749e12:     }
1:e749e12: 
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705:     //
1:795f705:     // OTHER PUBLIC BEHAVIOR
1:795f705:     //
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705: 
1:795f705:     public Connection   getWrappedObject() throws SQLException
1:795f705:     {
1:795f705:         if ( _embedded != null ) { return _embedded; }
1:795f705:         else if ( _netclient != null ) { return _netclient; }
1:d79f538:         else if ( _brokeredConnection != null ) { return _brokeredConnection; }
1:d79f538:         else if ( _logicalConnection != null ) { return _logicalConnection; }
1:795f705:         else { throw nothingWrapped(); }
1:795f705:     }
1:795f705: 
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705:     //
1:795f705:     // MINIONS
1:795f705:     //
1:795f705:     ///////////////////////////////////////////////////////////////////////
1:795f705: 
1:795f705:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1:795f705: 
1:795f705: }
1:795f705: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:863daa0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.EmbedConnection;
1: import org.apache.derby.iapi.jdbc.BrokeredConnection;
/////////////////////////////////////////////////////////////////////////
1:     private EmbedConnection    _embedded;
1:     private BrokeredConnection _brokeredConnection;
/////////////////////////////////////////////////////////////////////////
1:         if ( wrapped instanceof EmbedConnection ) { _embedded = (EmbedConnection) wrapped; }
1:         else if ( wrapped instanceof BrokeredConnection ) { _brokeredConnection = (BrokeredConnection) wrapped; }
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.LogicalConnection;
1: import org.apache.derby.client.net.NetConnection;
/////////////////////////////////////////////////////////////////////////
1:     private NetConnection      _netclient;
1:     private LogicalConnection _logicalConnection;
/////////////////////////////////////////////////////////////////////////
1:         else if ( wrapped instanceof NetConnection) { _netclient = (NetConnection) wrapped; }
1:         else if ( wrapped instanceof LogicalConnection ) { _logicalConnection = (LogicalConnection) wrapped; }
commit:fd0edf9
/////////////////////////////////////////////////////////////////////////
0:         else if ( wrapped instanceof NetConnection40 ) { _netclient = (NetConnection40) wrapped; }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e749e12
/////////////////////////////////////////////////////////////////////////
1:     public  int    getNetworkTimeout() throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded.getNetworkTimeout(); }
1:         else if ( _netclient != null ) { return _netclient.getNetworkTimeout(); }
1:         else if ( _brokeredConnection != null ) { return _brokeredConnection.getNetworkTimeout(); }
1:         else if ( _logicalConnection != null ) { return _logicalConnection.getNetworkTimeout(); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     public  void    setNetworkTimeout( Executor executor, int milliseconds ) throws SQLException
1:     {
1:         if ( _embedded != null ) { _embedded.setNetworkTimeout( executor, milliseconds ); }
1:         else if ( _netclient != null ) { _netclient.setNetworkTimeout( executor, milliseconds ); }
1:         else if ( _brokeredConnection != null ) { _brokeredConnection.setNetworkTimeout( executor, milliseconds ); }
1:         else if ( _logicalConnection != null ) { _logicalConnection.setNetworkTimeout( executor, milliseconds ); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
commit:1837822
/////////////////////////////////////////////////////////////////////////
1:     public  String    getSchema() throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded.getSchema(); }
1:         else if ( _netclient != null ) { return _netclient.getSchema(); }
1:         else if ( _brokeredConnection != null ) { return _brokeredConnection.getSchema(); }
1:         else if ( _logicalConnection != null ) { return _logicalConnection.getSchema(); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     public  void    setSchema( String schemaName ) throws SQLException
1:     {
1:         if ( _embedded != null ) { _embedded.setSchema( schemaName ); }
1:         else if ( _netclient != null ) { _netclient.setSchema( schemaName ); }
1:         else if ( _brokeredConnection != null ) { _brokeredConnection.setSchema( schemaName ); }
1:         else if ( _logicalConnection != null ) { _logicalConnection.setSchema( schemaName ); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
commit:d79f538
/////////////////////////////////////////////////////////////////////////
1:         else if ( _brokeredConnection != null ) { return _brokeredConnection; }
1:         else if ( _logicalConnection != null ) { return _logicalConnection; }
commit:795f705
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.Wrapper41Conn
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.concurrent.Executor;
1: 
0: import org.apache.derby.impl.jdbc.EmbedConnection40;
0: import org.apache.derby.iapi.jdbc.BrokeredConnection40;
0: import org.apache.derby.client.net.NetConnection40;
0: import org.apache.derby.client.am.LogicalConnection40;
1: 
1: /**
1:  * A wrapper around the abort(Executor) method added by JDBC 4.1.
1:  * We can eliminate this class after Java 7 goes GA and we are allowed
1:  * to use the Java 7 compiler to build our released versions of derbyTesting.jar.
1:  */
1: public  class   Wrapper41Conn
1: {
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
0:     private EmbedConnection40    _embedded;
0:     private NetConnection40      _netclient;
0:     private BrokeredConnection40 _brokeredConnection;
0:     private LogicalConnection40 _logicalConnection;
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public Wrapper41Conn( Object wrapped ) throws Exception
1:     {
0:         if ( wrapped instanceof EmbedConnection40 ) { _embedded = (EmbedConnection40) wrapped; }
0:         else if ( wrapped instanceof NetConnection40 ) { _netclient = (NetConnection40) wrapped; }
0:         else if ( wrapped instanceof BrokeredConnection40 ) { _brokeredConnection = (BrokeredConnection40) wrapped; }
0:         else if ( wrapped instanceof LogicalConnection40 ) { _logicalConnection = (LogicalConnection40) wrapped; }
1:         else { throw nothingWrapped(); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // JDBC 4.1 BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public  void    abort( Executor executor ) throws SQLException
1:     {
1:         if ( _embedded != null ) { _embedded.abort( executor ); }
1:         else if ( _netclient != null ) { _netclient.abort( executor ); }
1:         else if ( _brokeredConnection != null ) { _brokeredConnection.abort( executor ); }
1:         else if ( _logicalConnection != null ) { _logicalConnection.abort( executor ); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public Connection   getWrappedObject() throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded; }
1:         else if ( _netclient != null ) { return _netclient; }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1: 
1: }
1: 
============================================================================