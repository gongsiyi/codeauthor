1:67614ad: /*
1:5f5e00d: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr
1:67614ad: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:67614ad: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
17:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:67614ad: 
1:67614ad: import java.sql.CallableStatement;
1:67614ad: import java.sql.Connection;
1:67614ad: import java.sql.PreparedStatement;
1:67614ad: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:5f5e00d: import junit.framework.Test;
1:5f5e00d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:5f5e00d: import org.apache.derbyTesting.junit.TestConfiguration;
1:5f5e00d: 
2:67614ad: /**
1:67614ad: 	This tests to see if the security manager is running.
1:67614ad: */
1:67614ad: 
1:5f5e00d: public class CheckSecurityManager extends BaseJDBCTestCase
4:67614ad: {
1:67614ad: 
1:5f5e00d: 	public static Test suite()
1:67614ad: 	{
1:5f5e00d: 		// only run testIllegalPropertySet,
1:5f5e00d: 		// testIllegalDBCreate disabled, see comments
1:5f5e00d: 	    return TestConfiguration.defaultSuite(CheckSecurityManager.class);
1:5f5e00d: 	}
1:5f5e00d: 	
1:5f5e00d: 	public CheckSecurityManager(String name)
1:5f5e00d: 	{
1:5f5e00d: 		super(name);
4:67614ad: 	}
1:5ff5941: 
1:5f5e00d: 	/*
1:5f5e00d: 	 * 
1:5f5e00d: 	 
1:67614ad: 	public static void testIllegalDBCreate() throws Exception
1:5ff5941: 	{
1:67614ad: 			System.out.println("Security Manager Test Starts");
1:67614ad: 			// Initialize JavaCommonClient Driver.
1:67614ad: 			Class.forName("com.ibm.db2.jcc.DB2Driver");
2:67614ad: 			Connection conn = null;
1:67614ad: 
1:67614ad: 			// This tries to create a database that is not allowed. 
1:67614ad: 			// To repro bug 6021 change to some disallowed file system.
1:67614ad: 			// There are two problems with this test.
1:67614ad: 			// 1) if set to a different file system than the test runs,
1:67614ad: 			//    (e.g. D:/wombat), a null pointer is thrown.
1:67614ad: 			// 2) If just set to a disallowed directory on the same file system.
1:67614ad: 			//    We seem to be able to create the database.
1:67614ad: 			// Ideally this test should attempt to create the database
1:67614ad: 			// ../wombat;create=true and get the security exception.
1:5ff5941: 			String hostName = TestUtil.getHostName();
1:5ff5941: 			String databaseURL;
1:5ff5941: 			if (hostName.equals("localhost"))
1:5ff5941: 			{
1:5ff5941: 				databaseURL = TestUtil.getJdbcUrlPrefix() + hostName + 
1:5ff5941: 				"/\"D:/wombat;create=true\"";
1:5ff5941: 			}
1:5ff5941: 			else
1:5ff5941: 			{
1:5ff5941: 				databaseURL = TestUtil.getJdbcUrlPrefix() + hostName + "wombat";
1:5ff5941: 			}
1:5ff5941: 			//System.out.println(databaseURL);
1:67614ad: 			java.util.Properties properties = new java.util.Properties();
1:67614ad: 			properties.put ("user", "cs");
1:67614ad: 			properties.put ("password", "cs");
1:67614ad: 
1:5ff5941: 			try {
1:67614ad: 				conn = DriverManager.getConnection(databaseURL, properties);
1:67614ad: 				System.out.println("FAILED: Expected Security Exception");
1:67614ad: 			}
1:67614ad: 			catch (SQLException se) {
2:67614ad: 				System.out.println("Expected Security Exception");
1:5ff5941: 				JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);			
1:67614ad: 			}
1:67614ad: 	}
1:5f5e00d: 	*/
1:67614ad: 
1:67614ad: 	
1:67614ad: 	/** Try to set a property in a stored procedure for which there is not
1:67614ad: 	 *  adequate permissions in the policy file
1:67614ad: 	 */
1:5f5e00d: 	public void testIllegalPropertySet() throws SQLException
1:67614ad: 	{
1:5f5e00d: 			Connection conn = getConnection();
1:67614ad: 			String createproc = "CREATE PROCEDURE setIllegalPropertyProc() DYNAMIC RESULT SETS 0 LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr.setIllegalPropertyProc' PARAMETER STYLE JAVA";
1:67614ad: 			PreparedStatement pstmt = conn.prepareStatement(createproc);
1:67614ad: 			pstmt.executeUpdate();
1:67614ad: 			CallableStatement cstmt = conn.prepareCall("{call setIllegalPropertyProc()}");
1:5f5e00d: 			try {
1:5f5e00d: 				cstmt.executeUpdate();
1:5f5e00d: 			} catch (SQLException e) {
1:5f5e00d: 				assertSQLState("38000", e);
1:5f5e00d: 			}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public static void setIllegalPropertyProc()
1:67614ad: 	{
1:67614ad: 		System.setProperty("notAllowed", "somevalue");
1:67614ad: 	}
1:67614ad: 
1:5f5e00d: 	public void tearDown() throws SQLException
1:67614ad: 	{
1:5f5e00d: 		Statement stmt = createStatement();
2:67614ad: 		try {
1:5ff5941: 			stmt.executeUpdate("drop procedure setIllegalPropertyProc");
1:5ff5941: 		} catch (SQLException se) {
1:5f5e00d: 			// ignore
1:5ff5941: 		}
1:5ff5941: 	}
1:5ff5941: 
1:67614ad: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Statement;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:5f5e00d
/////////////////////////////////////////////////////////////////////////
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: public class CheckSecurityManager extends BaseJDBCTestCase
1: 	public static Test suite()
1: 		// only run testIllegalPropertySet,
1: 		// testIllegalDBCreate disabled, see comments
1: 	    return TestConfiguration.defaultSuite(CheckSecurityManager.class);
1: 	}
1: 	
1: 	public CheckSecurityManager(String name)
1: 	{
1: 		super(name);
1: 	/*
1: 	 * 
1: 	 
/////////////////////////////////////////////////////////////////////////
1: 	*/
1: 	public void testIllegalPropertySet() throws SQLException
1: 			Connection conn = getConnection();
1: 			try {
1: 				cstmt.executeUpdate();
1: 			} catch (SQLException e) {
1: 				assertSQLState("38000", e);
1: 			}
/////////////////////////////////////////////////////////////////////////
1: 	public void tearDown() throws SQLException
1: 		Statement stmt = createStatement();
1: 			// ignore
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
0: 			cleanUp(conn);
/////////////////////////////////////////////////////////////////////////
1: 			String hostName = TestUtil.getHostName();
1: 			String databaseURL;
1: 			if (hostName.equals("localhost"))
1: 			{
1: 				databaseURL = TestUtil.getJdbcUrlPrefix() + hostName + 
1: 				"/\"D:/wombat;create=true\"";
1: 			}
1: 			else
1: 			{
1: 				databaseURL = TestUtil.getJdbcUrlPrefix() + hostName + "wombat";
1: 			}
1: 			//System.out.println(databaseURL);
/////////////////////////////////////////////////////////////////////////
1: 
0: 	public static void cleanUp(Connection conn) throws SQLException
1: 	{
0: 		Statement stmt = conn.createStatement();
1: 		try {
1: 			stmt.executeUpdate("drop procedure setIllegalPropertyProc");
1: 		} catch (SQLException se) {
1: 			JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);
1: 		}
1: 	}
1: 
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.tests.derbynet
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.Statement;
1: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil;
0: import org.apache.derby.impl.tools.ij.util;
1: 
1: /**
1: 	This tests to see if the security manager is running.
1: */
1: 
0: public class checkSecMgr
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
0: 	public static void main (String args[])
1: 	{
0: 		try
1: 		{
1: 			Connection conn = null;
0: 			util.getPropertyArg(args);
0: 			conn = util.startJBMS();
0: 			// bug 6021
0: 			// testIllegalDBCreate();
0: 			testIllegalPropertySet(conn);
1: 		}
0: 		catch (Exception e)
1: 		{
0: 			e.printStackTrace();
1: 		}
1: 	}
1: 
1: 	public static void testIllegalDBCreate() throws Exception
1: 	{
1: 			System.out.println("Security Manager Test Starts");
1: 			// Initialize JavaCommonClient Driver.
1: 			Class.forName("com.ibm.db2.jcc.DB2Driver");
1: 			Connection conn = null;
1: 
1: 			// This tries to create a database that is not allowed. 
1: 			// To repro bug 6021 change to some disallowed file system.
1: 			// There are two problems with this test.
1: 			// 1) if set to a different file system than the test runs,
1: 			//    (e.g. D:/wombat), a null pointer is thrown.
1: 			// 2) If just set to a disallowed directory on the same file system.
1: 			//    We seem to be able to create the database.
1: 			// Ideally this test should attempt to create the database
1: 			// ../wombat;create=true and get the security exception.
0: 			String databaseURL = "jdbc:derby:net://localhost/" + 
0: 				"\"D:/wombat;create=true\"";
0: 			System.out.println(databaseURL);
1: 			java.util.Properties properties = new java.util.Properties();
1: 			properties.put ("user", "cs");
1: 			properties.put ("password", "cs");
1: 
1: 			try {
1: 				conn = DriverManager.getConnection(databaseURL, properties);
1: 				System.out.println("FAILED: Expected Security Exception");
1: 			}
1: 			catch (SQLException se) {
1: 				System.out.println("Expected Security Exception");
0: 				JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);			
1: 			}
1: 	}
1: 
1: 	
1: 	/** Try to set a property in a stored procedure for which there is not
1: 	 *  adequate permissions in the policy file
1: 	 */
0: 	public static void testIllegalPropertySet(Connection conn)
1: 	{
0: 		System.out.println("testIllegalPropertySet");
1: 		try {
1: 			String createproc = "CREATE PROCEDURE setIllegalPropertyProc() DYNAMIC RESULT SETS 0 LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr.setIllegalPropertyProc' PARAMETER STYLE JAVA";
1: 			PreparedStatement pstmt = conn.prepareStatement(createproc);
1: 			pstmt.executeUpdate();
1: 			CallableStatement cstmt = conn.prepareCall("{call setIllegalPropertyProc()}");
0: 			System.out.println("execute the procedure setting illegal property");
0: 			cstmt.executeUpdate();
0: 			System.out.println("FAILED: Should have gotten security Exception");
0: 		} catch (SQLException se)
1: 		{
1: 			System.out.println("Expected Security Exception");
0: 			JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);
1: 		}
1: 	}
1: 
1: 	public static void setIllegalPropertyProc()
1: 	{
1: 		System.setProperty("notAllowed", "somevalue");
1: 	}
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0bbfdac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
/////////////////////////////////////////////////////////////////////////
0: 			String databaseURL = TestUtil.getJdbcUrlPrefix() + "localhost/" + 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import java.sql.CallableStatement;
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil;
0: import org.apache.derby.impl.tools.ij.util;
1: 
0: /**
0: 	This tests to see if the security manager is running.
0: */
1: 
0: public class checkSecMgr
0: {
1: 
0: 	public static void main (String args[])
0: 	{
0: 		try
0: 		{
0: 			Connection conn = null;
0: 			util.getPropertyArg(args);
0: 			conn = util.startJBMS();
0: 			// bug 6021
0: 			// testIllegalDBCreate();
0: 			testIllegalPropertySet(conn);
0: 		}
0: 		catch (Exception e)
0: 		{
0: 			e.printStackTrace();
0: 		}
0: 	}
1: 
0: 	public static void testIllegalDBCreate() throws Exception
0: 	{
0: 			System.out.println("Security Manager Test Starts");
0: 			// Initialize JavaCommonClient Driver.
0: 			Class.forName("com.ibm.db2.jcc.DB2Driver");
0: 			Connection conn = null;
1: 
0: 			// This tries to create a database that is not allowed. 
0: 			// To repro bug 6021 change to some disallowed file system.
0: 			// There are two problems with this test.
0: 			// 1) if set to a different file system than the test runs,
0: 			//    (e.g. D:/wombat), a null pointer is thrown.
0: 			// 2) If just set to a disallowed directory on the same file system.
0: 			//    We seem to be able to create the database.
0: 			// Ideally this test should attempt to create the database
0: 			// ../wombat;create=true and get the security exception.
0: 			String databaseURL = "jdbc:derby:net://localhost/" + 
0: 				"\"D:/wombat;create=true\"";
0: 			System.out.println(databaseURL);
0: 			java.util.Properties properties = new java.util.Properties();
0: 			properties.put ("user", "cs");
0: 			properties.put ("password", "cs");
1: 
0: 			try {
0: 				conn = DriverManager.getConnection(databaseURL, properties);
0: 				System.out.println("FAILED: Expected Security Exception");
0: 			}
0: 			catch (SQLException se) {
0: 				System.out.println("Expected Security Exception");
0: 				JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);			
0: 			}
0: 	}
1: 
1: 	
0: 	/** Try to set a property in a stored procedure for which there is not
0: 	 *  adequate permissions in the policy file
0: 	 */
0: 	public static void testIllegalPropertySet(Connection conn)
0: 	{
0: 		System.out.println("testIllegalPropertySet");
0: 		try {
0: 			String createproc = "CREATE PROCEDURE setIllegalPropertyProc() DYNAMIC RESULT SETS 0 LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr.setIllegalPropertyProc' PARAMETER STYLE JAVA";
0: 			PreparedStatement pstmt = conn.prepareStatement(createproc);
0: 			pstmt.executeUpdate();
0: 			CallableStatement cstmt = conn.prepareCall("{call setIllegalPropertyProc()}");
0: 			System.out.println("execute the procedure setting illegal property");
0: 			cstmt.executeUpdate();
0: 			System.out.println("FAILED: Should have gotten security Exception");
0: 		} catch (SQLException se)
0: 		{
0: 			System.out.println("Expected Security Exception");
0: 			JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);
0: 		}
0: 	}
1: 
0: 	public static void setIllegalPropertyProc()
0: 	{
0: 		System.setProperty("notAllowed", "somevalue");
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.checkSecMgr
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================