1:1998441: /*
1:1998441:  * Class org.apache.derbyTesting.functionTests.tests.lang.LikeTest
1:1998441:  *
1:1998441:  * Licensed to the Apache Software Foundation (ASF) under one
1:1998441:  * or more contributor license agreements.  See the NOTICE file
1:1998441:  * distributed with this work for additional information
1:1998441:  * regarding copyright ownership.  The ASF licenses this file
1:1998441:  * to you under the Apache License, Version 2.0 (the
1:1998441:  * "License"); you may not use this file except in compliance
1:1998441:  * with the License.  You may obtain a copy of the License at
1:1998441:  *
1:1998441:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1998441:  *
1:1998441:  * Unless required by applicable law or agreed to in writing,
1:1998441:  * software distributed under the License is distributed on an
1:1998441:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1998441:  * KIND, either express or implied.  See the License for the
1:1998441:  * specific language governing permissions and limitations
1:1998441:  * under the License.
1:1998441:  */
1:1998441: 
1:1998441: package org.apache.derbyTesting.functionTests.tests.lang;
1:1998441: 
1:1998441: import java.sql.SQLException;
1:1998441: import java.sql.Statement;
1:1998441: import junit.framework.Test;
1:1998441: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1998441: import org.apache.derbyTesting.junit.JDBC;
1:1998441: import org.apache.derbyTesting.junit.SQLUtilities;
1:1998441: import org.apache.derbyTesting.junit.TestConfiguration;
1:1998441: 
1:1998441: /**
1:1998441:  * Tests for statements with a LIKE clause.
1:1998441:  */
1:1998441: public class LikeTest extends BaseJDBCTestCase {
1:1998441:     public LikeTest(String name) {
1:1998441:         super(name);
1:1998441:     }
1:1998441: 
1:1998441:     public static Test suite() {
1:1998441:         return TestConfiguration.defaultSuite(LikeTest.class);
1:1998441:     }
1:1998441: 
1:1998441:     /**
1:1998441:      * Test that LIKE expressions are optimized and use indexes to limit the
1:1998441:      * scan if the arguments are concatenated string literals. DERBY-4791.
1:1998441:      */
1:1998441:     public void testOptimizeConcatenatedStringLiterals() throws SQLException {
1:1998441:         setAutoCommit(false);
1:1998441:         Statement s = createStatement();
1:1998441:         s.execute("create table t (x varchar(128) primary key, y int)");
1:1998441:         s.execute("insert into t(x) values " +
1:1998441:                   "'abc', 'def', 'ghi', 'ab', 'de', 'gh'");
1:1998441:         s.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:1998441: 
1:1998441:         // Check that an optimizable LIKE predicate (one that doesn't begin
1:1998441:         // with a wildcard) with a string literal picks an index scan.
1:1998441:         String[][] expectedRows = { {"ab", null}, {"abc", null} };
1:1998441:         JDBC.assertUnorderedResultSet(
1:1998441:                 s.executeQuery("select * from t where x like 'ab%'"),
1:1998441:                 expectedRows);
1:1998441:         assertTrue(SQLUtilities.getRuntimeStatisticsParser(s).usedIndexScan());
1:8ab61cc: 
1:1998441:         // Now do the same test, but concatenate two string literals instead
1:1998441:         // of using a single string literal. This should be optimized the
1:1998441:         // same way.
1:1998441:         JDBC.assertUnorderedResultSet(
1:1998441:                 s.executeQuery("select * from t where x like 'a'||'b'||'%'"),
1:1998441:                 expectedRows);
1:1998441:         assertTrue(SQLUtilities.getRuntimeStatisticsParser(s).usedIndexScan());
1:1998441:     }
1:1998441: 
1:8ab61cc:     public void testDerby6477() throws SQLException {
1:8ab61cc:         // DERBY-6477: This statement used to fail with an OutOfMemoryError.
1:8ab61cc:         JDBC.assertSingleValueResultSet(createStatement().executeQuery(
1:8ab61cc:                 "select javaclassname from sys.sysaliases where "
1:8ab61cc:                     + "javaclassname like "
1:8ab61cc:                     + "'org.apache.derby.catalog.Java5SystemProcedures%'"),
1:8ab61cc:                 "org.apache.derby.catalog.Java5SystemProcedures");
1:8ab61cc:     }
1:1998441: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8ab61cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testDerby6477() throws SQLException {
1:         // DERBY-6477: This statement used to fail with an OutOfMemoryError.
1:         JDBC.assertSingleValueResultSet(createStatement().executeQuery(
1:                 "select javaclassname from sys.sysaliases where "
1:                     + "javaclassname like "
1:                     + "'org.apache.derby.catalog.Java5SystemProcedures%'"),
1:                 "org.apache.derby.catalog.Java5SystemProcedures");
1:     }
commit:1998441
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Class org.apache.derbyTesting.functionTests.tests.lang.LikeTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests for statements with a LIKE clause.
1:  */
1: public class LikeTest extends BaseJDBCTestCase {
1:     public LikeTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(LikeTest.class);
1:     }
1: 
1:     /**
1:      * Test that LIKE expressions are optimized and use indexes to limit the
1:      * scan if the arguments are concatenated string literals. DERBY-4791.
1:      */
1:     public void testOptimizeConcatenatedStringLiterals() throws SQLException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1:         s.execute("create table t (x varchar(128) primary key, y int)");
1:         s.execute("insert into t(x) values " +
1:                   "'abc', 'def', 'ghi', 'ab', 'de', 'gh'");
1:         s.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 
1:         // Check that an optimizable LIKE predicate (one that doesn't begin
1:         // with a wildcard) with a string literal picks an index scan.
1:         String[][] expectedRows = { {"ab", null}, {"abc", null} };
1:         JDBC.assertUnorderedResultSet(
1:                 s.executeQuery("select * from t where x like 'ab%'"),
1:                 expectedRows);
1:         assertTrue(SQLUtilities.getRuntimeStatisticsParser(s).usedIndexScan());
1: 
1:         // Now do the same test, but concatenate two string literals instead
1:         // of using a single string literal. This should be optimized the
1:         // same way.
1:         JDBC.assertUnorderedResultSet(
1:                 s.executeQuery("select * from t where x like 'a'||'b'||'%'"),
1:                 expectedRows);
1:         assertTrue(SQLUtilities.getRuntimeStatisticsParser(s).usedIndexScan());
1:     }
1: }
============================================================================