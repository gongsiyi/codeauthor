1:146fd5c: /**
1:146fd5c:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.BlobMemTest
1:146fd5c:  *
1:146fd5c:  * Licensed to the Apache Software Foundation (ASF) under one
1:146fd5c:  * or more contributor license agreements.  See the NOTICE file
1:146fd5c:  * distributed with this work for additional information
1:146fd5c:  * regarding copyright ownership.  The ASF licenses this file
1:146fd5c:  * to you under the Apache License, Version 2.0 (the
1:146fd5c:  * "License"); you may not use this file except in compliance
1:146fd5c:  * with the License.  You may obtain a copy of the License at
1:146fd5c:  *
1:146fd5c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:146fd5c:  *
1:146fd5c:  * Unless required by applicable law or agreed to in writing,
1:146fd5c:  * software distributed under the License is distributed on an
1:146fd5c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:146fd5c:  * KIND, either express or implied.  See the License for the
1:146fd5c:  * specific language governing permissions and limitations
1:146fd5c:  * under the License.
1:146fd5c:  */
1:146fd5c: package org.apache.derbyTesting.functionTests.tests.memory;
1:7f0f775: 
1:146fd5c: import java.io.IOException;
1:146fd5c: import java.io.InputStream;
1:146fd5c: import java.lang.reflect.InvocationTargetException;
1:146fd5c: import java.lang.reflect.Method;
1:c2fe280: import java.sql.Blob;
1:c2fe280: import java.sql.PreparedStatement;
1:146fd5c: import java.sql.ResultSet;
1:146fd5c: import java.sql.SQLException;
1:146fd5c: import java.sql.Statement;
1:146fd5c: import java.util.Arrays;
1:146fd5c: import java.util.Properties;
1:146fd5c: import junit.framework.Test;
1:146fd5c: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:146fd5c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:146fd5c: import org.apache.derbyTesting.junit.JDBC;
1:146fd5c: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:146fd5c: import org.apache.derbyTesting.junit.TestConfiguration;
9:146fd5c: 
1:146fd5c: public class BlobMemTest extends BaseJDBCTestCase {
1:146fd5c: 
1:146fd5c:     private static final int LONG_BLOB_LENGTH = 18000000;
1:146fd5c:     private static final String LONG_BLOB_LENGTH_STRING= "18000000";
1:146fd5c:     private static final byte[] SHORT_BLOB_BYTES = new byte[] {0x01,0x02,0x03};
1:146fd5c: 
1:146fd5c:     public BlobMemTest(String name) {
1:146fd5c:         super(name);
1:146fd5c:     }
1:146fd5c: 
1:146fd5c:     /**
1:146fd5c:      * Insert a blob and test length.    
1:146fd5c:      * 
1:146fd5c:      * @param lengthless  if true use the lengthless setBinaryStream api
1:146fd5c:      * 
1:146fd5c:      * @throws SQLException
1:146fd5c:      * @throws IOException 
1:146fd5c:      * @throws InvocationTargetException 
1:146fd5c:      * @throws IllegalAccessException 
1:146fd5c:      * @throws IllegalArgumentException 
1:146fd5c:      */
1:c4229c9:     private void testBlobLength(boolean lengthless, int extraLen) throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
1:146fd5c:         setAutoCommit(false);
1:146fd5c:         Statement s = createStatement();
1:146fd5c:         s.executeUpdate("CREATE TABLE BLOBTAB (K INT CONSTRAINT PK PRIMARY KEY, B BLOB(" + LONG_BLOB_LENGTH + "))");
1:146fd5c:         
1:146fd5c:         PreparedStatement ps = prepareStatement("INSERT INTO BLOBTAB VALUES(?,?)");
1:146fd5c:         // We allocate 16MB for the test so use something bigger than that.
1:146fd5c:         ps.setInt(1,1);
1:c4229c9:         int blobLen = LONG_BLOB_LENGTH + extraLen;
1:c4229c9:         LoopingAlphabetStream stream = new LoopingAlphabetStream(blobLen);
1:146fd5c:         if (lengthless) {
1:146fd5c:             Method m = null;
1:146fd5c:             try {
1:3f5c48a:                 Class<?> c = ps.getClass();
1:146fd5c:                 m = c.getMethod("setBinaryStream",new Class[] {Integer.TYPE,
1:146fd5c:                             InputStream.class});                
1:146fd5c:             } catch (NoSuchMethodException e) {
1:146fd5c:                 // ignore method not found as method may not be present for 
1:146fd5c:                 // jdk's lower than 1.6.
1:146fd5c:                 println("Skipping lengthless insert because method is not available");
1:146fd5c:                 return;                
1:146fd5c:             }
1:39b3237:             m.invoke(ps, new Object[] {2,stream});
1:146fd5c:         }
1:146fd5c:         else
1:c4229c9:             ps.setBinaryStream(2, stream,blobLen);
1:c4229c9:         if (extraLen == 0)
1:c4229c9:         {
1:146fd5c:             ps.executeUpdate();
1:146fd5c:         }
1:c4229c9:         else
1:c4229c9:         {
1:c4229c9:             try
1:c4229c9:             {
2:c4229c9:                 ps.executeUpdate();
1:c4229c9:                 fail("Expected truncation error for blob too large");
1:c4229c9:             }
1:c4229c9:             catch (SQLException sqlE)
1:c4229c9:             {
1:c4229c9:                 assertSQLState("Wrong SQL State for truncation", "22001", sqlE);
1:c4229c9:             }
1:c4229c9:             // extraLen > 0 is just a way to force the truncation error. Once
1:c4229c9:             // we've forced that error, we're done testing, so return.
1:c4229c9:             return;
1:c4229c9:         }
1:146fd5c:         // insert a zero length blob.
1:146fd5c:         ps.setInt(1, 2);
1:146fd5c:         ps.setBytes(2, new byte[] {});
1:146fd5c:         ps.executeUpdate();
1:146fd5c:         // insert a null blob.
1:146fd5c:         ps.setInt(1, 3);
1:146fd5c:         ps.setBytes(2,null);
1:146fd5c:         ps.executeUpdate();
1:146fd5c:         // insert a short blob
1:146fd5c:         ps.setInt(1, 4);
1:146fd5c:         ps.setBytes(2, SHORT_BLOB_BYTES);
1:146fd5c:         ps.executeUpdate();
1:146fd5c:         // Currently need to use optimizer override to force use of the index.
1:146fd5c:         // Derby should use sort avoidance and do it automatically, but there
1:146fd5c:         // appears to be a bug.
1:146fd5c:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(B), B FROM BLOBTAB" +
1:146fd5c:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K"); 
1:146fd5c:         rs.next();
1:146fd5c:         assertEquals(LONG_BLOB_LENGTH_STRING,rs.getString(2));
1:146fd5c:         // make sure we can still access the blob after getting length.
1:146fd5c:         // It should be ok because we reset the stream
1:146fd5c:         InputStream rsstream = rs.getBinaryStream(3);
1:146fd5c:         int len= 0;
1:146fd5c:         byte[] buf = new byte[32672];
1:146fd5c:         for (;;)  {
1:146fd5c:                 int size = rsstream.read(buf);
1:146fd5c:                 if (size == -1)
1:146fd5c:                         break;
1:146fd5c:                 len += size;
1:146fd5c:                 int expectedValue = ((len -1) % 26) + 'a';
1:146fd5c:                 if (size != 0)
1:146fd5c:                     assertEquals(expectedValue,buf[size -1]);      
1:146fd5c:         }
1:146fd5c: 
1:146fd5c:         assertEquals(LONG_BLOB_LENGTH,len);
1:146fd5c:         // empty blob
1:146fd5c:         rs.next();
1:146fd5c:         assertEquals("0",rs.getString(2));
1:146fd5c:         byte[] bytes = rs.getBytes(3);
1:146fd5c:         assertEquals(0, bytes.length);
1:146fd5c:         // null blob
1:146fd5c:         rs.next();
1:146fd5c:         assertEquals(null,rs.getString(2));
1:146fd5c:         bytes = rs.getBytes(3);
1:146fd5c:         assertEquals(null,bytes);
1:146fd5c:         // short blob
1:146fd5c:         rs.next();
1:146fd5c:         assertEquals("3",rs.getString(2));
1:146fd5c:         bytes = rs.getBytes(3);
1:146fd5c:         assertTrue(Arrays.equals(SHORT_BLOB_BYTES, bytes));
1:146fd5c:         rs.close();         
1:146fd5c:         
1:146fd5c:         // Select just length without selecting the blob.
1:146fd5c:         rs = s.executeQuery("SELECT K, LENGTH(B)  FROM BLOBTAB " +
1:146fd5c:                 "ORDER BY K");
1:146fd5c:         JDBC.assertFullResultSet(rs, new String [][] {{"1",LONG_BLOB_LENGTH_STRING},{"2","0"},
1:146fd5c:                 {"3",null},{"4","3"}});
1:146fd5c:     }
1:146fd5c:     
1:146fd5c:     /**
1:146fd5c:      * Test the length after inserting with the setBinaryStream api 
1:146fd5c:      * that takes length.  In this case the length will be encoded at the
1:146fd5c:      * begining of the stream and the call should be fairly low overhead.
1:146fd5c:      * 
1:146fd5c:      * @throws SQLException
1:146fd5c:      * @throws IOException 
1:146fd5c:      * @throws InvocationTargetException 
1:146fd5c:      * @throws IllegalAccessException 
1:146fd5c:      * @throws IllegalArgumentException 
1:146fd5c:      */
1:146fd5c:     public void testBlobLength() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
1:c4229c9:         testBlobLength(false, 0);
1:146fd5c:     }
1:146fd5c:     
1:146fd5c:     /**
1:146fd5c:      * Test the length after inserting the blob value with the lengthless
1:146fd5c:      * setBinaryStream api. In this case we will have to read the whole 
1:146fd5c:      * stream to get the length.
1:146fd5c:      * 
1:146fd5c:      * @throws SQLException
1:146fd5c:      * @throws IOException 
1:146fd5c:      * @throws InvocationTargetException 
1:146fd5c:      * @throws IllegalAccessException 
1:146fd5c:      * @throws IllegalArgumentException 
1:146fd5c:      */
1:146fd5c:     public void testBlobLengthWithLengthlessInsert() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        
1:c4229c9:         testBlobLength(true, 0);  
1:146fd5c:     }
1:c4229c9:     /**
1:c4229c9:       * Simple test to excercise message 22001 as described in DERBY-961.
1:c4229c9:       */
1:c4229c9:     public void testBlobLengthTooLongDerby961() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        
1:c4229c9:         testBlobLength(false, 10000);  
1:c4229c9:     }
1:146fd5c:        public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =  new BaseTestSuite();
1:7f0f775:         // Just add Derby-6096 embedded as it takes time to run
1:7f0f775:         suite.addTest(new BlobMemTest("xtestderby6096BlobhashJoin"));
1:7f0f775:         suite.addTest(TestConfiguration.defaultSuite(BlobMemTest.class));
1:7f0f775:         
1:146fd5c:         Properties p = new Properties();
1:146fd5c:         // use small pageCacheSize so we don't run out of memory on the insert.
1:146fd5c:         p.setProperty("derby.storage.pageCacheSize", "100");
1:146fd5c:         return new SystemPropertyTestSetup(suite,p);
1:146fd5c:     }
1:146fd5c: 
1:55bc97f:     /**
1:55bc97f:      * Tests that a blob can be safely occur multiple times in a SQL select and
1:55bc97f:      * test that large objects streams are not being materialized when cloned.
1:55bc97f:      * <p/>
1:55bc97f:      * See DERBY-4477.
1:55bc97f:      * @see org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest#testDerby4477_3645_3646_Repro
1:55bc97f:      * @see ClobMemTest#testDerby4477_3645_3646_Repro_lowmem_clob
1:55bc97f:      */
1:55bc97f:     public void testDerby4477_3645_3646_Repro_lowmem()
1:55bc97f:             throws SQLException, IOException {
1:55bc97f: 
1:55bc97f:         setAutoCommit(false);
1:55bc97f: 
1:55bc97f:         Statement s = createStatement();
1:2d733d9:         int blobsize = LONG_BLOB_LENGTH;
1:146fd5c: 
1:55bc97f:         s.executeUpdate(
1:55bc97f:             "CREATE TABLE T_MAIN(" +
1:55bc97f:             "ID INT  GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
1:55bc97f:             "V BLOB(" + blobsize + ") )");
1:55bc97f: 
1:55bc97f:         PreparedStatement ps = prepareStatement(
1:55bc97f:             "INSERT INTO T_MAIN(V) VALUES (?)");
1:55bc97f: 
1:55bc97f:         int blobLen = blobsize;
1:55bc97f:         LoopingAlphabetStream stream = new LoopingAlphabetStream(blobLen);
1:55bc97f:         ps.setBinaryStream(1, stream, blobLen);
1:55bc97f: 
1:55bc97f:         ps.executeUpdate();
1:55bc97f:         ps.close();
1:55bc97f: 
1:55bc97f:         s.executeUpdate("CREATE TABLE T_COPY ( V1 BLOB(" + blobsize +
1:55bc97f:                         "), V2 BLOB(" + blobsize + "))");
1:55bc97f: 
1:55bc97f:         // This failed in the repro for DERBY-3645 solved as part of
1:55bc97f:         // DERBY-4477:
1:55bc97f:         s.executeUpdate("INSERT INTO T_COPY SELECT  V, V FROM T_MAIN");
1:55bc97f: 
1:55bc97f:         // Check that the two results are identical:
1:55bc97f:         ResultSet rs = s.executeQuery("SELECT * FROM T_COPY");
1:55bc97f:         rs.next();
1:55bc97f:         InputStream is = rs.getBinaryStream(1);
1:55bc97f: 
1:55bc97f:         stream.reset();
1:55bc97f:         assertEquals(stream, is);
1:55bc97f: 
1:55bc97f:         is = rs.getBinaryStream(2);
1:55bc97f: 
1:55bc97f:         stream.reset();
1:55bc97f:         assertEquals(stream, is);
1:55bc97f:         rs.close();
1:55bc97f: 
1:55bc97f:         // This failed in the repro for DERBY-3646 solved as part of
1:55bc97f:         // DERBY-4477 (repro slightly rewoked here):
1:55bc97f:         rs = s.executeQuery("SELECT 'I', V, ID, V from T_MAIN");
1:55bc97f:         rs.next();
1:55bc97f: 
1:55bc97f:         is = rs.getBinaryStream(2);
1:55bc97f:         stream.reset();
1:55bc97f:         assertEquals(stream, is);
1:55bc97f: 
1:55bc97f:         is = rs.getBinaryStream(4);
1:55bc97f:         stream.reset();
1:55bc97f:         assertEquals(stream, is);
1:55bc97f: 
1:55bc97f:         // clean up
1:55bc97f:         stream.close();
1:55bc97f:         is.close();
1:55bc97f:         s.close();
1:55bc97f:         rs.close();
1:55bc97f: 
1:55bc97f:         rollback();
1:55bc97f:     }
1:c2fe280: 
1:c2fe280:     /**
1:c2fe280:      * Test that a BLOB that goes through the sorter does not get materialized
1:c2fe280:      * twice in memory. It will still be materialized as part of the sorting,
1:c2fe280:      * but the fix for DERBY-5752 prevents the creation of a second copy when
1:c2fe280:      * accessing the BLOB after the sorting.
1:c2fe280:      */
1:c2fe280:     public void testDerby5752DoubleMaterialization() throws Exception {
1:c2fe280:         setAutoCommit(false);
1:c2fe280: 
1:c2fe280:         Statement s = createStatement();
1:c2fe280:         s.execute("create table d5752(id int, b blob)");
1:c2fe280: 
1:c2fe280:         int lobSize = 1000000;
1:c2fe280: 
1:c2fe280:         // Insert a single BLOB in the table.
1:c2fe280:         PreparedStatement insert =
1:c2fe280:                 prepareStatement("insert into d5752 values (1,?)");
1:c2fe280:         insert.setBinaryStream(1, new LoopingAlphabetStream(lobSize), lobSize);
1:c2fe280:         insert.execute();
1:c2fe280:         closeStatement(insert);
1:c2fe280: 
1:c2fe280:         Blob[] blobs = new Blob[15];
1:c2fe280: 
1:c2fe280:         // Repeatedly sort the table and keep a reference to the BLOB.
1:c2fe280:         for (int i = 0; i < blobs.length; i++) {
1:c2fe280:             ResultSet rs = s.executeQuery("select * from d5752 order by id");
1:c2fe280:             rs.next();
1:c2fe280:             // Used to get an OutOfMemoryError here because a new copy of the
1:c2fe280:             // BLOB was created in memory.
1:c2fe280:             blobs[i] = rs.getBlob(2);
1:c2fe280:             rs.close();
1:c2fe280:         }
1:c2fe280: 
1:c2fe280:         // Access the BLOBs here to make sure they are not garbage collected
1:c2fe280:         // earlier (in which case we wouldn't see the OOME in the loop above).
1:c2fe280:         for (int i = 0; i < blobs.length; i++) {
1:c2fe280:             assertEquals(lobSize, blobs[i].length());
1:c2fe280:         }
1:c2fe280:     }
1:7f0f775:     
1:7f0f775:     /**
1:7f0f775:      * 
1:7f0f775:      * DERBY-6096 Make blob hash join does not run out of memory.
1:7f0f775:      * Prior to fix blobs were estimated at 0. We will test with
1:7f0f775:      * 32K blobs even though the estimatedUsage is at 10k. The default
1:7f0f775:      * max memory per table is only 1MB.
1:7f0f775:      * 
1:7f0f775:      * @throws SQLException
1:7f0f775:      */
1:7f0f775:     public void xtestderby6096BlobhashJoin() throws SQLException {
1:7f0f775:         byte[] b = new byte[32000];
1:7f0f775:         Arrays.fill(b, (byte) 'a'); 
1:7f0f775:         Statement s = createStatement();
1:7f0f775:         s.execute("create table d6096(i int, b blob)");
1:7f0f775:         PreparedStatement ps = prepareStatement("insert into d6096 values (?, ?)");
1:7f0f775:         ps.setBytes(2, b);
1:7f0f775:         for (int i = 0; i < 2000; i++) {
1:7f0f775:             ps.setInt(1, i);
1:7f0f775:             ps.execute();
1:7f0f775:         }
1:7f0f775:         ResultSet rs = s.executeQuery("select * from d6096 t1, d6096 t2 where t1.i=t2.i");
1:7f0f775:         // just a single fetch will build the hash table and consume the memory.
1:7f0f775:         assertTrue(rs.next());
1:7f0f775:         // derby.tests.debug prints memory usage
1:90553c5:         if (TestConfiguration.getCurrent().isVerbose()) {
1:90553c5:             System.gc();
1:90553c5:             println("TotalMemory:" + Runtime.getRuntime().totalMemory()
1:90553c5:                     + " " + "Free Memory:"
1:90553c5:                     + Runtime.getRuntime().freeMemory());
1:90553c5:         }
1:7f0f775:         rs.close();
1:7f0f775:     }
1:7f0f775: 
1:146fd5c: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             m.invoke(ps, new Object[] {2,stream});
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =  new BaseTestSuite();
commit:2d733d9
/////////////////////////////////////////////////////////////////////////
1:         int blobsize = LONG_BLOB_LENGTH;
commit:55bc97f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tests that a blob can be safely occur multiple times in a SQL select and
1:      * test that large objects streams are not being materialized when cloned.
1:      * <p/>
1:      * See DERBY-4477.
1:      * @see org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest#testDerby4477_3645_3646_Repro
1:      * @see ClobMemTest#testDerby4477_3645_3646_Repro_lowmem_clob
1:      */
1:     public void testDerby4477_3645_3646_Repro_lowmem()
1:             throws SQLException, IOException {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
0:         // int blobsize = LONG_BLOB_LENGTH;
0:         int blobsize = 35000;
1: 
1:         s.executeUpdate(
1:             "CREATE TABLE T_MAIN(" +
1:             "ID INT  GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
1:             "V BLOB(" + blobsize + ") )");
1: 
1:         PreparedStatement ps = prepareStatement(
1:             "INSERT INTO T_MAIN(V) VALUES (?)");
1: 
1:         int blobLen = blobsize;
1:         LoopingAlphabetStream stream = new LoopingAlphabetStream(blobLen);
1:         ps.setBinaryStream(1, stream, blobLen);
1: 
1:         ps.executeUpdate();
1:         ps.close();
1: 
1:         s.executeUpdate("CREATE TABLE T_COPY ( V1 BLOB(" + blobsize +
1:                         "), V2 BLOB(" + blobsize + "))");
1: 
1:         // This failed in the repro for DERBY-3645 solved as part of
1:         // DERBY-4477:
1:         s.executeUpdate("INSERT INTO T_COPY SELECT  V, V FROM T_MAIN");
1: 
1:         // Check that the two results are identical:
1:         ResultSet rs = s.executeQuery("SELECT * FROM T_COPY");
1:         rs.next();
1:         InputStream is = rs.getBinaryStream(1);
1: 
1:         stream.reset();
1:         assertEquals(stream, is);
1: 
1:         is = rs.getBinaryStream(2);
1: 
1:         stream.reset();
1:         assertEquals(stream, is);
1:         rs.close();
1: 
1:         // This failed in the repro for DERBY-3646 solved as part of
1:         // DERBY-4477 (repro slightly rewoked here):
1:         rs = s.executeQuery("SELECT 'I', V, ID, V from T_MAIN");
1:         rs.next();
1: 
1:         is = rs.getBinaryStream(2);
1:         stream.reset();
1:         assertEquals(stream, is);
1: 
1:         is = rs.getBinaryStream(4);
1:         stream.reset();
1:         assertEquals(stream, is);
1: 
1:         // clean up
1:         stream.close();
1:         is.close();
1:         s.close();
1:         rs.close();
1: 
1:         rollback();
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:                 Class<?> c = ps.getClass();
commit:90553c5
/////////////////////////////////////////////////////////////////////////
1:         if (TestConfiguration.getCurrent().isVerbose()) {
1:             System.gc();
1:             println("TotalMemory:" + Runtime.getRuntime().totalMemory()
1:                     + " " + "Free Memory:"
1:                     + Runtime.getRuntime().freeMemory());
1:         }
commit:c2fe280
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Blob;
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Test that a BLOB that goes through the sorter does not get materialized
1:      * twice in memory. It will still be materialized as part of the sorting,
1:      * but the fix for DERBY-5752 prevents the creation of a second copy when
1:      * accessing the BLOB after the sorting.
1:      */
1:     public void testDerby5752DoubleMaterialization() throws Exception {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
1:         s.execute("create table d5752(id int, b blob)");
1: 
1:         int lobSize = 1000000;
1: 
1:         // Insert a single BLOB in the table.
1:         PreparedStatement insert =
1:                 prepareStatement("insert into d5752 values (1,?)");
1:         insert.setBinaryStream(1, new LoopingAlphabetStream(lobSize), lobSize);
1:         insert.execute();
1:         closeStatement(insert);
1: 
1:         Blob[] blobs = new Blob[15];
1: 
1:         // Repeatedly sort the table and keep a reference to the BLOB.
1:         for (int i = 0; i < blobs.length; i++) {
1:             ResultSet rs = s.executeQuery("select * from d5752 order by id");
1:             rs.next();
1:             // Used to get an OutOfMemoryError here because a new copy of the
1:             // BLOB was created in memory.
1:             blobs[i] = rs.getBlob(2);
1:             rs.close();
1:         }
1: 
1:         // Access the BLOBs here to make sure they are not garbage collected
1:         // earlier (in which case we wouldn't see the OOME in the loop above).
1:         for (int i = 0; i < blobs.length; i++) {
1:             assertEquals(lobSize, blobs[i].length());
1:         }
1:     }
commit:3d37865
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:7f0f775
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
1: 
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite =  new TestSuite();
1:         // Just add Derby-6096 embedded as it takes time to run
1:         suite.addTest(new BlobMemTest("xtestderby6096BlobhashJoin"));
1:         suite.addTest(TestConfiguration.defaultSuite(BlobMemTest.class));
1:         
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * 
1:      * DERBY-6096 Make blob hash join does not run out of memory.
1:      * Prior to fix blobs were estimated at 0. We will test with
1:      * 32K blobs even though the estimatedUsage is at 10k. The default
1:      * max memory per table is only 1MB.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void xtestderby6096BlobhashJoin() throws SQLException {
1:         byte[] b = new byte[32000];
1:         Arrays.fill(b, (byte) 'a'); 
1:         Statement s = createStatement();
1:         s.execute("create table d6096(i int, b blob)");
1:         PreparedStatement ps = prepareStatement("insert into d6096 values (?, ?)");
1:         ps.setBytes(2, b);
1:         for (int i = 0; i < 2000; i++) {
1:             ps.setInt(1, i);
1:             ps.execute();
1:         }
1:         ResultSet rs = s.executeQuery("select * from d6096 t1, d6096 t2 where t1.i=t2.i");
1:         // just a single fetch will build the hash table and consume the memory.
1:         assertTrue(rs.next());
1:         // derby.tests.debug prints memory usage
0:         System.gc();
0:         println("TotalMemory:" + Runtime.getRuntime().totalMemory()
0:                 + " " + "Free Memory:"
0:                 + Runtime.getRuntime().freeMemory());
1:         rs.close();
1:     }
1: 
commit:146fd5c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.BlobMemTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
0: import java.sql.PreparedStatement;
1: import java.util.Arrays;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.functionTests.harness.JavaVersionHolder;
0: import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class BlobMemTest extends BaseJDBCTestCase {
1: 
1:     private static final int LONG_BLOB_LENGTH = 18000000;
1:     private static final String LONG_BLOB_LENGTH_STRING= "18000000";
1:     private static final byte[] SHORT_BLOB_BYTES = new byte[] {0x01,0x02,0x03};
1: 
1:     public BlobMemTest(String name) {
1:         super(name);
1:     }
1: 
0:     public void tearDown() throws SQLException {
0:         rollback();
1:     }
1:     
1:     
1:     
1:     /**
1:      * Insert a blob and test length.    
1:      * 
1:      * @param lengthless  if true use the lengthless setBinaryStream api
1:      * 
1:      * @throws SQLException
1:      * @throws IOException 
1:      * @throws InvocationTargetException 
1:      * @throws IllegalAccessException 
1:      * @throws IllegalArgumentException 
1:      */
0:     private void testBlobLength(boolean lengthless) throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1:         s.executeUpdate("CREATE TABLE BLOBTAB (K INT CONSTRAINT PK PRIMARY KEY, B BLOB(" + LONG_BLOB_LENGTH + "))");
1:         
1:         PreparedStatement ps = prepareStatement("INSERT INTO BLOBTAB VALUES(?,?)");
1:         // We allocate 16MB for the test so use something bigger than that.
1:         ps.setInt(1,1);
0:         LoopingAlphabetStream stream = new LoopingAlphabetStream(LONG_BLOB_LENGTH);
1:         if (lengthless) {
1:             Method m = null;
1:             try {
0:                 Class c = ps.getClass();
1:                 m = c.getMethod("setBinaryStream",new Class[] {Integer.TYPE,
1:                             InputStream.class});                
1:             } catch (NoSuchMethodException e) {
1:                 // ignore method not found as method may not be present for 
1:                 // jdk's lower than 1.6.
1:                 println("Skipping lengthless insert because method is not available");
1:                 return;                
1:             }
0:             m.invoke(ps, new Object[] {new Integer(2),stream});
1:         }
1:         else
0:             ps.setBinaryStream(2, stream,LONG_BLOB_LENGTH);
1:         ps.executeUpdate();
1:         // insert a zero length blob.
1:         ps.setInt(1, 2);
1:         ps.setBytes(2, new byte[] {});
1:         ps.executeUpdate();
1:         // insert a null blob.
1:         ps.setInt(1, 3);
1:         ps.setBytes(2,null);
1:         ps.executeUpdate();
1:         // insert a short blob
1:         ps.setInt(1, 4);
1:         ps.setBytes(2, SHORT_BLOB_BYTES);
1:         ps.executeUpdate();
1:         // Currently need to use optimizer override to force use of the index.
1:         // Derby should use sort avoidance and do it automatically, but there
1:         // appears to be a bug.
1:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(B), B FROM BLOBTAB" +
1:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K"); 
1:         rs.next();
1:         assertEquals(LONG_BLOB_LENGTH_STRING,rs.getString(2));
1:         // make sure we can still access the blob after getting length.
1:         // It should be ok because we reset the stream
1:         InputStream rsstream = rs.getBinaryStream(3);
1:         int len= 0;
1:         byte[] buf = new byte[32672];
1:         for (;;)  {
1:                 int size = rsstream.read(buf);
1:                 if (size == -1)
1:                         break;
1:                 len += size;
1:                 int expectedValue = ((len -1) % 26) + 'a';
1:                 if (size != 0)
1:                     assertEquals(expectedValue,buf[size -1]);      
1:         }
1: 
1:         assertEquals(LONG_BLOB_LENGTH,len);
1:         // empty blob
1:         rs.next();
1:         assertEquals("0",rs.getString(2));
1:         byte[] bytes = rs.getBytes(3);
1:         assertEquals(0, bytes.length);
1:         // null blob
1:         rs.next();
1:         assertEquals(null,rs.getString(2));
1:         bytes = rs.getBytes(3);
1:         assertEquals(null,bytes);
1:         // short blob
1:         rs.next();
1:         assertEquals("3",rs.getString(2));
1:         bytes = rs.getBytes(3);
1:         assertTrue(Arrays.equals(SHORT_BLOB_BYTES, bytes));
1:         rs.close();         
1:         
1:         // Select just length without selecting the blob.
1:         rs = s.executeQuery("SELECT K, LENGTH(B)  FROM BLOBTAB " +
1:                 "ORDER BY K");
1:         JDBC.assertFullResultSet(rs, new String [][] {{"1",LONG_BLOB_LENGTH_STRING},{"2","0"},
1:                 {"3",null},{"4","3"}});
1:     }
1:     
1:     /**
1:      * Test the length after inserting with the setBinaryStream api 
1:      * that takes length.  In this case the length will be encoded at the
1:      * begining of the stream and the call should be fairly low overhead.
1:      * 
1:      * @throws SQLException
1:      * @throws IOException 
1:      * @throws InvocationTargetException 
1:      * @throws IllegalAccessException 
1:      * @throws IllegalArgumentException 
1:      */
1:     public void testBlobLength() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
0:         testBlobLength(false);
1:     }
1:     
1:     /**
1:      * Test the length after inserting the blob value with the lengthless
1:      * setBinaryStream api. In this case we will have to read the whole 
1:      * stream to get the length.
1:      * 
1:      * @throws SQLException
1:      * @throws IOException 
1:      * @throws InvocationTargetException 
1:      * @throws IllegalAccessException 
1:      * @throws IllegalArgumentException 
1:      */
1:     public void testBlobLengthWithLengthlessInsert() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        
0:         testBlobLength(true);  
1:     }
1:        public static Test suite() {
0:         Test suite =  TestConfiguration.defaultSuite(BlobMemTest.class);
1:         Properties p = new Properties();
1:         // use small pageCacheSize so we don't run out of memory on the insert.
1:         p.setProperty("derby.storage.pageCacheSize", "100");
1:         return new SystemPropertyTestSetup(suite,p);
1:     }
1: 
1:       
1: 
1: }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:c4229c9
/////////////////////////////////////////////////////////////////////////
1:     private void testBlobLength(boolean lengthless, int extraLen) throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
/////////////////////////////////////////////////////////////////////////
1:         int blobLen = LONG_BLOB_LENGTH + extraLen;
1:         LoopingAlphabetStream stream = new LoopingAlphabetStream(blobLen);
/////////////////////////////////////////////////////////////////////////
1:             ps.setBinaryStream(2, stream,blobLen);
1:         if (extraLen == 0)
1:         {
1:             ps.executeUpdate();
1:         }
1:         else
1:         {
1:             try
1:             {
1:                 ps.executeUpdate();
1:                 fail("Expected truncation error for blob too large");
1:             }
1:             catch (SQLException sqlE)
1:             {
1:                 assertSQLState("Wrong SQL State for truncation", "22001", sqlE);
1:             }
1:             // extraLen > 0 is just a way to force the truncation error. Once
1:             // we've forced that error, we're done testing, so return.
1:             return;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         testBlobLength(false, 0);
/////////////////////////////////////////////////////////////////////////
1:         testBlobLength(true, 0);  
0:     }
1:     /**
1:       * Simple test to excercise message 22001 as described in DERBY-961.
1:       */
1:     public void testBlobLengthTooLongDerby961() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        
1:         testBlobLength(false, 10000);  
============================================================================