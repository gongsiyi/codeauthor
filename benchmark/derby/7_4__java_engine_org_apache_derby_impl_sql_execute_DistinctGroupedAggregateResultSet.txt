1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DistinctGroupedAggregateResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:b31849d: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:b31849d: import org.apache.derby.iapi.sql.Activation;
1:b31849d: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This ResultSet evaluates grouped aggregates when there is 1 or more distinct aggregate.
1:eac0369:  * It will scan the entire source result set and calculate
1:eac0369:  * the grouped aggregates when scanning the source during the 
1:eac0369:  * first call to next().
1:eac0369:  *
1:eac0369:  * RESOLVE - This subclass is essentially empty.  Someday we will need to write 
1:eac0369:  * additional code for distinct grouped aggregates, especially when we support
1:eac0369:  * multiple distinct aggregates.
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class DistinctGroupedAggregateResultSet extends GroupedAggregateResultSet
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	 * Constructor
1:eac0369: 	 *
1:eac0369: 	 * @param	s			input result set
1:eac0369: 	 * @param	isInSortedOrder	true if the source results are in sorted order
1:eac0369: 	 * @param	aggregateItem	indicates the number of the
1:eac0369: 	 *		SavedObject off of the PreparedStatement that holds the
1:eac0369: 	 *		AggregatorInfoList used by this routine.  
1:eac0369: 	 * @param	orderingItem	indicates the number of the
1:eac0369: 	 *		SavedObject off of the PreparedStatement that holds the
1:eac0369: 	 *		ColumOrdering array used by this routine
1:eac0369: 	 * @param	a				activation
1:d868eed: 	 * @param	ra				saved object that builds an empty output row
1:eac0369: 	 * @param	maxRowSize		approx row size, passed to sorter
1:eac0369: 	 * @param	resultSetNumber	The resultSetNumber for this result set
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:f77f36d:     DistinctGroupedAggregateResultSet(NoPutResultSet s,
1:eac0369: 					boolean isInSortedOrder,
1:eac0369: 					int	aggregateItem,
1:eac0369: 					int	orderingItem,
1:eac0369: 					Activation a,
1:d868eed: 					int ra,
1:eac0369: 					int maxRowSize,
1:eac0369: 					int resultSetNumber,
1:b5105f3: 					double optimizerEstimatedRowCount,
1:b5105f3: 					double optimizerEstimatedCost,
1:b5105f3: 					boolean isRollup) throws StandardException 
1:eac0369: 	{
1:eac0369: 		super(s, isInSortedOrder, aggregateItem, orderingItem,
1:b5105f3: 			  a, ra, maxRowSize, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost, isRollup);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CursorResultSet interface
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// SCAN ABSTRACTION UTILITIES
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// AGGREGATION UTILITIES
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d868eed
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	ra				saved object that builds an empty output row
/////////////////////////////////////////////////////////////////////////
1: 					int ra,
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:b5105f3
/////////////////////////////////////////////////////////////////////////
1: 					double optimizerEstimatedRowCount,
1: 					double optimizerEstimatedCost,
1: 					boolean isRollup) throws StandardException 
1: 			  a, ra, maxRowSize, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost, isRollup);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b31849d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class DistinctGroupedAggregateResultSet extends GroupedAggregateResultSet
/////////////////////////////////////////////////////////////////////////
1:     DistinctGroupedAggregateResultSet(NoPutResultSet s,
/////////////////////////////////////////////////////////////////////////
0: 				    double optimizerEstimatedCost) throws StandardException 
0: 			  a, ra, maxRowSize, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DistinctGroupedAggregateResultSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ScanController;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.Enumeration;
1: 
1: /**
1:  * This ResultSet evaluates grouped aggregates when there is 1 or more distinct aggregate.
1:  * It will scan the entire source result set and calculate
1:  * the grouped aggregates when scanning the source during the 
1:  * first call to next().
1:  *
1:  * RESOLVE - This subclass is essentially empty.  Someday we will need to write 
1:  * additional code for distinct grouped aggregates, especially when we support
1:  * multiple distinct aggregates.
1:  *
0:  * @author jerry (broken out from SortResultSet)
1:  */
0: public class DistinctGroupedAggregateResultSet extends GroupedAggregateResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /**
1: 	 * Constructor
1: 	 *
1: 	 * @param	s			input result set
1: 	 * @param	isInSortedOrder	true if the source results are in sorted order
1: 	 * @param	aggregateItem	indicates the number of the
1: 	 *		SavedObject off of the PreparedStatement that holds the
1: 	 *		AggregatorInfoList used by this routine.  
1: 	 * @param	orderingItem	indicates the number of the
1: 	 *		SavedObject off of the PreparedStatement that holds the
1: 	 *		ColumOrdering array used by this routine
1: 	 * @param	a				activation
0: 	 * @param	ra				generated method to build an empty
0: 	 *	 	output row 
1: 	 * @param	maxRowSize		approx row size, passed to sorter
1: 	 * @param	resultSetNumber	The resultSetNumber for this result set
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
0:     public DistinctGroupedAggregateResultSet(NoPutResultSet s,
1: 					boolean isInSortedOrder,
1: 					int	aggregateItem,
1: 					int	orderingItem,
1: 					Activation a,
0: 					GeneratedMethod ra,
1: 					int maxRowSize,
1: 					int resultSetNumber,
0: 				    double optimizerEstimatedRowCount,
0: 				    double optimizerEstimatedCost,
0: 					GeneratedMethod c) throws StandardException 
1: 	{
1: 		super(s, isInSortedOrder, aggregateItem, orderingItem,
0: 			  a, ra, maxRowSize, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost, c);
1:     }
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// CursorResultSet interface
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// SCAN ABSTRACTION UTILITIES
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// AGGREGATION UTILITIES
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ScanController;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.Enumeration;
0: 
0: /**
0:  * This ResultSet evaluates grouped aggregates when there is 1 or more distinct aggregate.
0:  * It will scan the entire source result set and calculate
0:  * the grouped aggregates when scanning the source during the 
0:  * first call to next().
0:  *
0:  * RESOLVE - This subclass is essentially empty.  Someday we will need to write 
0:  * additional code for distinct grouped aggregates, especially when we support
0:  * multiple distinct aggregates.
0:  *
0:  * @author jerry (broken out from SortResultSet)
0:  */
0: public class DistinctGroupedAggregateResultSet extends GroupedAggregateResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /**
0: 	 * Constructor
0: 	 *
0: 	 * @param	s			input result set
0: 	 * @param	isInSortedOrder	true if the source results are in sorted order
0: 	 * @param	aggregateItem	indicates the number of the
0: 	 *		SavedObject off of the PreparedStatement that holds the
0: 	 *		AggregatorInfoList used by this routine.  
0: 	 * @param	orderingItem	indicates the number of the
0: 	 *		SavedObject off of the PreparedStatement that holds the
0: 	 *		ColumOrdering array used by this routine
0: 	 * @param	a				activation
0: 	 * @param	ra				generated method to build an empty
0: 	 *	 	output row 
0: 	 * @param	maxRowSize		approx row size, passed to sorter
0: 	 * @param	resultSetNumber	The resultSetNumber for this result set
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0:     public DistinctGroupedAggregateResultSet(NoPutResultSet s,
0: 					boolean isInSortedOrder,
0: 					int	aggregateItem,
0: 					int	orderingItem,
0: 					Activation a,
0: 					GeneratedMethod ra,
0: 					int maxRowSize,
0: 					int resultSetNumber,
0: 				    double optimizerEstimatedRowCount,
0: 				    double optimizerEstimatedCost,
0: 					GeneratedMethod c) throws StandardException 
0: 	{
0: 		super(s, isInSortedOrder, aggregateItem, orderingItem,
0: 			  a, ra, maxRowSize, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost, c);
0:     }
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// CursorResultSet interface
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// SCAN ABSTRACTION UTILITIES
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// AGGREGATION UTILITIES
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: }
============================================================================