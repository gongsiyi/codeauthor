1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.jdbc.BrokeredCallableStatement
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.jdbc;
1:eac0369: 
1:863daa0: import java.io.InputStream;
1:863daa0: import java.io.Reader;
1:eac0369: import java.sql.*;
1:eac0369: import java.math.BigDecimal;
1:eac0369: 
1:eac0369: import java.util.Calendar;
1:eac0369: import java.util.Map;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:863daa0:  * Brokered CallableStatement.
1:863daa0:  * This class implements the JDBC 4.1 interface.
1:eac0369:  */
1:863daa0: public class BrokeredCallableStatement extends BrokeredPreparedStatement
1:eac0369:           implements CallableStatement
1:eac0369: {
1:eac0369: 
1:3be5c9d: 	public BrokeredCallableStatement(BrokeredStatementControl control, String sql) throws SQLException {
1:f44e479:         super(control, sql, null);
1:eac0369: 	}
1:eac0369: 
1:f44e479:     // JDBC 2.0 methods
1:f44e479: 
1:eac0369:     public final void registerOutParameter(int parameterIndex,
1:eac0369:                                      int sqlType)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         getCallableStatement().registerOutParameter( parameterIndex, sqlType);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final void registerOutParameter(int parameterIndex,
1:eac0369:                                      int sqlType,
1:eac0369:                                      int scale)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         getCallableStatement().registerOutParameter( parameterIndex, sqlType, scale);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final boolean wasNull()
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().wasNull();
1:eac0369:     }
1:eac0369: 
1:f44e479:     @Override
1:5b78c4e:     public final void close() throws SQLException {
1:5b78c4e:         control.closeRealCallableStatement();
1:5b78c4e:     }
1:5b78c4e:     
1:eac0369:     public final String getString(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getString( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final boolean getBoolean(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getBoolean( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final byte getByte(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getByte( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final short getShort(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getShort( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final int getInt(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getInt( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final long getLong(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getLong( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final float getFloat(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getFloat( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final double getDouble(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getDouble( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:e24d8ef:     /** @deprecated */
1:eac0369:     public final BigDecimal getBigDecimal(int parameterIndex,
1:eac0369:                                               int scale)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getBigDecimal( parameterIndex, scale);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final byte[] getBytes(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getBytes( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Date getDate(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getDate( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Date getDate(int parameterIndex,
1:eac0369:                         Calendar cal)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getDate( parameterIndex, cal);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Time getTime(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getTime( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Timestamp getTimestamp(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getTimestamp( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Object getObject(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getObject( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final BigDecimal getBigDecimal(int parameterIndex)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getBigDecimal( parameterIndex);
1:eac0369:     }
1:eac0369: 
1:850aba4:     public final Object getObject(int i, Map<String, Class<?>> map)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getObject( i, map);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Ref getRef(int i)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getRef( i);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Blob getBlob(int i)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getBlob( i);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Clob getClob(int i)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getClob( i);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Array getArray(int i)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getArray( i);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Time getTime(int parameterIndex,
1:eac0369:                         Calendar cal)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getTime( parameterIndex, cal);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final Timestamp getTimestamp(int parameterIndex,
1:eac0369:                                   Calendar cal)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         return getCallableStatement().getTimestamp( parameterIndex, cal);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final void registerOutParameter(int paramIndex,
1:eac0369:                                      int sqlType,
1:eac0369:                                      String typeName)
1:eac0369:         throws SQLException
1:eac0369:     {
1:eac0369:         getCallableStatement().registerOutParameter( paramIndex, sqlType, typeName);
1:eac0369:     }
1:eac0369: 
1:f44e479:     // JDBC 3.0 methods
1:f44e479: 
1:f44e479:     public final void setURL(String parameterName, java.net.URL value) throws SQLException {
1:f44e479:         getCallableStatement().setURL(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setNull(String parameterName, int type) throws SQLException {
1:f44e479:         getCallableStatement().setNull(parameterName, type);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setBoolean(String parameterName, boolean value) throws SQLException {
1:f44e479:         getCallableStatement().setBoolean(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setByte(String parameterName, byte value) throws SQLException {
1:f44e479:         getCallableStatement().setByte(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setShort(String parameterName, short value) throws SQLException {
1:f44e479:         getCallableStatement().setShort(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setInt(String parameterName, int value) throws SQLException {
1:f44e479:         getCallableStatement().setInt(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setLong(String parameterName, long value) throws SQLException {
1:f44e479:         getCallableStatement().setLong(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setFloat(String parameterName, float value) throws SQLException {
1:f44e479:         getCallableStatement().setFloat(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setDouble(String parameterName, double value) throws SQLException {
1:f44e479:         getCallableStatement().setDouble(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setBigDecimal(String parameterName, BigDecimal value) throws SQLException {
1:f44e479:         getCallableStatement().setBigDecimal(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setString(String parameterName, String value) throws SQLException {
1:f44e479:         getCallableStatement().setString(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setBytes(String parameterName, byte[] value) throws SQLException {
1:f44e479:         getCallableStatement().setBytes(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setDate(String parameterName, Date value) throws SQLException {
1:f44e479:         getCallableStatement().setDate(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setTime(String parameterName, Time value) throws SQLException {
1:f44e479:         getCallableStatement().setTime(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setTimestamp(String parameterName, Timestamp value) throws SQLException {
1:f44e479:         getCallableStatement().setTimestamp(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setAsciiStream(String parameterName, java.io.InputStream value, int length) throws SQLException {
1:f44e479:         getCallableStatement().setAsciiStream(parameterName, value, length);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setBinaryStream(String parameterName, java.io.InputStream value, int length) throws SQLException {
1:f44e479:         getCallableStatement().setBinaryStream(parameterName, value, length);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setObject(String parameterName, Object value, int a, int b) throws SQLException {
1:f44e479:         getCallableStatement().setObject(parameterName, value, a, b);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setObject(String parameterName, Object value, int a) throws SQLException {
1:f44e479:         getCallableStatement().setObject(parameterName, value, a);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setObject(String parameterName, Object value) throws SQLException {
1:f44e479:         getCallableStatement().setObject(parameterName, value);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setCharacterStream(String parameterName, java.io.Reader value, int length) throws SQLException {
1:f44e479:         getCallableStatement().setCharacterStream(parameterName, value, length);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setDate(String parameterName, Date value, Calendar cal) throws SQLException {
1:f44e479:         getCallableStatement().setDate(parameterName, value, cal);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setTime(String parameterName, Time value, Calendar cal) throws SQLException {
1:f44e479:         getCallableStatement().setTime(parameterName, value, cal);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setTimestamp(String parameterName, Timestamp value, Calendar cal) throws SQLException {
1:f44e479:         getCallableStatement().setTimestamp(parameterName, value, cal);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void setNull(String parameterName, int a, String b) throws SQLException {
1:f44e479:         getCallableStatement().setNull(parameterName, a, b);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final String getString(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getString(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final boolean getBoolean(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getBoolean(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final byte getByte(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getByte(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final short getShort(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getShort(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final int getInt(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getInt(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final long getLong(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getLong(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final float getFloat(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getFloat(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final double getDouble(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getDouble(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final byte[] getBytes(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getBytes(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Date getDate(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getDate(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Time getTime(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getTime(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Timestamp getTimestamp(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getTimestamp(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Object getObject(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getObject(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final BigDecimal getBigDecimal(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getBigDecimal(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Object getObject(String parameterName, Map<String, Class<?>> map) throws SQLException {
1:f44e479:         return getCallableStatement().getObject(parameterName, map);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Ref getRef(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getRef(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Blob getBlob(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getBlob(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Clob getClob(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getClob(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Array getArray(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getArray(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Date getDate(String parameterName, Calendar cal) throws SQLException {
1:f44e479:         return getCallableStatement().getDate(parameterName, cal);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Time getTime(String parameterName, Calendar cal) throws SQLException {
1:f44e479:         return getCallableStatement().getTime(parameterName, cal);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
1:f44e479:         return getCallableStatement().getTimestamp(parameterName, cal);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final java.net.URL getURL(String parameterName) throws SQLException {
1:f44e479:         return getCallableStatement().getURL(parameterName);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final java.net.URL getURL(int i) throws SQLException {
1:f44e479:         return getCallableStatement().getURL(i);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void registerOutParameter(String a, int b) throws SQLException {
1:f44e479:         getCallableStatement().registerOutParameter(a, b);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void registerOutParameter(String a, int b, int c) throws SQLException {
1:f44e479:         getCallableStatement().registerOutParameter(a, b, c);
1:f44e479:     }
1:f44e479: 
1:f44e479:     public final void registerOutParameter(String a, int b, String c) throws SQLException {
1:f44e479:         getCallableStatement().registerOutParameter(a, b, c);
1:f44e479:     }
1:f44e479: 
1:863daa0:     // JDBC 4.0 methods
1:863daa0: 
1:863daa0:     public final Reader getCharacterStream(int parameterIndex)
1:863daa0:             throws SQLException {
1:863daa0:         return getCallableStatement().getCharacterStream(parameterIndex);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final Reader getCharacterStream(String parameterName)
1:863daa0:             throws SQLException {
1:863daa0:         return getCallableStatement().getCharacterStream(parameterName);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final Reader getNCharacterStream(int parameterIndex)
1:863daa0:             throws SQLException {
1:863daa0:         return getCallableStatement().getNCharacterStream(parameterIndex);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final Reader getNCharacterStream(String parameterName)
1:863daa0:             throws SQLException {
1:863daa0:         return getCallableStatement().getNCharacterStream(parameterName);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final String getNString(int parameterIndex)
1:863daa0:             throws SQLException {
1:863daa0:         return getCallableStatement().getNString(parameterIndex);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final String getNString(String parameterName)
1:863daa0:             throws SQLException {
1:863daa0:         return getCallableStatement().getNString(parameterName);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final RowId getRowId(int parameterIndex) throws SQLException {
1:863daa0:         return getCallableStatement().getRowId(parameterIndex);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final RowId getRowId(String parameterName) throws SQLException {
1:863daa0:         return getCallableStatement().getRowId(parameterName);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setRowId(String parameterName, RowId x)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setRowId(parameterName, x);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setBlob(String parameterName, Blob x)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setBlob(parameterName, x);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setClob(String parameterName, Clob x)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setClob(parameterName, x);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setNString(String parameterName, String value)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setNString(parameterName, value);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setNCharacterStream(String parameterName, Reader value)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setNCharacterStream(parameterName, value);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setNCharacterStream(String parameterName, Reader value,
1:863daa0:                                           long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setNCharacterStream(
1:863daa0:                 parameterName, value, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setNClob(String parameterName, NClob value)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setNClob(parameterName, value);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setClob(String parameterName, Reader reader)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setClob(parameterName, reader);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setClob(String parameterName, Reader reader, long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setClob(parameterName, reader, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setBlob(String parameterName, InputStream inputStream)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setBlob(parameterName, inputStream);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setBlob(String parameterName, InputStream inputStream,
1:863daa0:                               long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setBlob(parameterName, inputStream, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setNClob(String parameterName, Reader reader)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setNClob(parameterName, reader);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setNClob(String parameterName, Reader reader, long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setNClob(parameterName, reader, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public NClob getNClob(int i) throws SQLException {
1:863daa0:         return getCallableStatement().getNClob(i);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public NClob getNClob(String parameterName) throws SQLException {
1:863daa0:         return getCallableStatement().getNClob(parameterName);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setSQLXML(String parameterName, SQLXML xmlObject)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setSQLXML(parameterName, xmlObject);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public SQLXML getSQLXML(int parameterIndex) throws SQLException {
1:863daa0:         return getCallableStatement().getSQLXML(parameterIndex);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public SQLXML getSQLXML(String parametername) throws SQLException {
1:863daa0:         return getCallableStatement().getSQLXML(parametername);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setAsciiStream(String parameterName, InputStream x)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setAsciiStream(parameterName, x);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setAsciiStream(String parameterName, InputStream x,
1:863daa0:                                      long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setAsciiStream(parameterName, x, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setBinaryStream(String parameterName, InputStream x)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setBinaryStream(parameterName, x);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setBinaryStream(String parameterName, InputStream x,
1:863daa0:                                       long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setBinaryStream(parameterName, x, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setCharacterStream(String parameterName, Reader x)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setCharacterStream(parameterName, x);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final void setCharacterStream(String parameterName, Reader x,
1:863daa0:                                          long length)
1:863daa0:             throws SQLException {
1:863daa0:         getCallableStatement().setCharacterStream(parameterName, x, length);
1:863daa0:     }
1:863daa0: 
1:863daa0:     ////////////////////////////////////////////////////////////////////
1:863daa0:     //
1:863daa0:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:863daa0:     //
1:863daa0:     ////////////////////////////////////////////////////////////////////
1:863daa0:     public final <T> T getObject(int parameterIndex, Class<T> type)
1:863daa0:             throws SQLException {
1:863daa0:         return ((EngineCallableStatement) getCallableStatement())
1:863daa0:                 .getObject(parameterIndex, type);
1:863daa0:     }
1:863daa0: 
1:863daa0:     public final <T> T getObject(String parameterName, Class<T> type)
1:863daa0:             throws SQLException {
1:863daa0:         return ((EngineCallableStatement) getCallableStatement())
1:863daa0:                 .getObject(parameterName, type);
1:863daa0:     }
1:863daa0: 
1:eac0369: 	/*
1:eac0369: 	** Control methods
1:eac0369: 	*/
1:eac0369: 
1:e65be5b:     /**
1:e65be5b:      * Access the underlying CallableStatement. This method
1:e65be5b:      * is package protected to restrict access to the underlying
1:e65be5b:      * object to the brokered objects. Allowing the application to
1:e65be5b:      * access the underlying object thtough a public method would
1:e65be5b:      * 
1:e65be5b:      */
1:e65be5b:     final CallableStatement getCallableStatement() throws SQLException {
1:eac0369: 		return control.getRealCallableStatement();
1:eac0369: 	}
1:e65be5b: 	
1:e65be5b:     /**
1:e65be5b:      * Access the underlying PreparedStatement. This method
1:e65be5b:      * is package protected to restrict access to the underlying
1:e65be5b:      * object to the brokered objects. Allowing the application to
1:e65be5b:      * access the underlying object thtough a public method would
1:e65be5b:      * 
1:e65be5b:      */
1:f44e479:     @Override
1:e65be5b:     final PreparedStatement getPreparedStatement() throws SQLException {
1:eac0369: 		return getCallableStatement();
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Create a duplicate CalableStatement to this, including state, from the passed in Connection.
1:eac0369: 	*/
1:eac0369: 	public CallableStatement createDuplicateStatement(Connection conn, CallableStatement oldStatement) throws SQLException {
1:eac0369: 
1:f44e479:         CallableStatement newStatement = conn.prepareCall(
1:f44e479:             sql, resultSetType, resultSetConcurrency, resultSetHoldability);
1:eac0369: 
1:eac0369: 		setStatementState(oldStatement, newStatement);
1:eac0369: 
1:eac0369: 		return newStatement;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:863daa0
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.Reader;
/////////////////////////////////////////////////////////////////////////
1:  * Brokered CallableStatement.
1:  * This class implements the JDBC 4.1 interface.
1: public class BrokeredCallableStatement extends BrokeredPreparedStatement
/////////////////////////////////////////////////////////////////////////
1:     // JDBC 4.0 methods
1: 
1:     public final Reader getCharacterStream(int parameterIndex)
1:             throws SQLException {
1:         return getCallableStatement().getCharacterStream(parameterIndex);
1:     }
1: 
1:     public final Reader getCharacterStream(String parameterName)
1:             throws SQLException {
1:         return getCallableStatement().getCharacterStream(parameterName);
1:     }
1: 
1:     public final Reader getNCharacterStream(int parameterIndex)
1:             throws SQLException {
1:         return getCallableStatement().getNCharacterStream(parameterIndex);
1:     }
1: 
1:     public final Reader getNCharacterStream(String parameterName)
1:             throws SQLException {
1:         return getCallableStatement().getNCharacterStream(parameterName);
1:     }
1: 
1:     public final String getNString(int parameterIndex)
1:             throws SQLException {
1:         return getCallableStatement().getNString(parameterIndex);
1:     }
1: 
1:     public final String getNString(String parameterName)
1:             throws SQLException {
1:         return getCallableStatement().getNString(parameterName);
1:     }
1: 
1:     public final RowId getRowId(int parameterIndex) throws SQLException {
1:         return getCallableStatement().getRowId(parameterIndex);
1:     }
1: 
1:     public final RowId getRowId(String parameterName) throws SQLException {
1:         return getCallableStatement().getRowId(parameterName);
1:     }
1: 
1:     public final void setRowId(String parameterName, RowId x)
1:             throws SQLException {
1:         getCallableStatement().setRowId(parameterName, x);
1:     }
1: 
1:     public final void setBlob(String parameterName, Blob x)
1:             throws SQLException {
1:         getCallableStatement().setBlob(parameterName, x);
1:     }
1: 
1:     public final void setClob(String parameterName, Clob x)
1:             throws SQLException {
1:         getCallableStatement().setClob(parameterName, x);
1:     }
1: 
1:     public final void setNString(String parameterName, String value)
1:             throws SQLException {
1:         getCallableStatement().setNString(parameterName, value);
1:     }
1: 
1:     public final void setNCharacterStream(String parameterName, Reader value)
1:             throws SQLException {
1:         getCallableStatement().setNCharacterStream(parameterName, value);
1:     }
1: 
1:     public final void setNCharacterStream(String parameterName, Reader value,
1:                                           long length)
1:             throws SQLException {
1:         getCallableStatement().setNCharacterStream(
1:                 parameterName, value, length);
1:     }
1: 
1:     public final void setNClob(String parameterName, NClob value)
1:             throws SQLException {
1:         getCallableStatement().setNClob(parameterName, value);
1:     }
1: 
1:     public final void setClob(String parameterName, Reader reader)
1:             throws SQLException {
1:         getCallableStatement().setClob(parameterName, reader);
1:     }
1: 
1:     public final void setClob(String parameterName, Reader reader, long length)
1:             throws SQLException {
1:         getCallableStatement().setClob(parameterName, reader, length);
1:     }
1: 
1:     public final void setBlob(String parameterName, InputStream inputStream)
1:             throws SQLException {
1:         getCallableStatement().setBlob(parameterName, inputStream);
1:     }
1: 
1:     public final void setBlob(String parameterName, InputStream inputStream,
1:                               long length)
1:             throws SQLException {
1:         getCallableStatement().setBlob(parameterName, inputStream, length);
1:     }
1: 
1:     public final void setNClob(String parameterName, Reader reader)
1:             throws SQLException {
1:         getCallableStatement().setNClob(parameterName, reader);
1:     }
1: 
1:     public final void setNClob(String parameterName, Reader reader, long length)
1:             throws SQLException {
1:         getCallableStatement().setNClob(parameterName, reader, length);
1:     }
1: 
1:     public NClob getNClob(int i) throws SQLException {
1:         return getCallableStatement().getNClob(i);
1:     }
1: 
1:     public NClob getNClob(String parameterName) throws SQLException {
1:         return getCallableStatement().getNClob(parameterName);
1:     }
1: 
1:     public final void setSQLXML(String parameterName, SQLXML xmlObject)
1:             throws SQLException {
1:         getCallableStatement().setSQLXML(parameterName, xmlObject);
1:     }
1: 
1:     public SQLXML getSQLXML(int parameterIndex) throws SQLException {
1:         return getCallableStatement().getSQLXML(parameterIndex);
1:     }
1: 
1:     public SQLXML getSQLXML(String parametername) throws SQLException {
1:         return getCallableStatement().getSQLXML(parametername);
1:     }
1: 
1:     public final void setAsciiStream(String parameterName, InputStream x)
1:             throws SQLException {
1:         getCallableStatement().setAsciiStream(parameterName, x);
1:     }
1: 
1:     public final void setAsciiStream(String parameterName, InputStream x,
1:                                      long length)
1:             throws SQLException {
1:         getCallableStatement().setAsciiStream(parameterName, x, length);
1:     }
1: 
1:     public final void setBinaryStream(String parameterName, InputStream x)
1:             throws SQLException {
1:         getCallableStatement().setBinaryStream(parameterName, x);
1:     }
1: 
1:     public final void setBinaryStream(String parameterName, InputStream x,
1:                                       long length)
1:             throws SQLException {
1:         getCallableStatement().setBinaryStream(parameterName, x, length);
1:     }
1: 
1:     public final void setCharacterStream(String parameterName, Reader x)
1:             throws SQLException {
1:         getCallableStatement().setCharacterStream(parameterName, x);
1:     }
1: 
1:     public final void setCharacterStream(String parameterName, Reader x,
1:                                          long length)
1:             throws SQLException {
1:         getCallableStatement().setCharacterStream(parameterName, x, length);
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:     //
1:     ////////////////////////////////////////////////////////////////////
1:     public final <T> T getObject(int parameterIndex, Class<T> type)
1:             throws SQLException {
1:         return ((EngineCallableStatement) getCallableStatement())
1:                 .getObject(parameterIndex, type);
1:     }
1: 
1:     public final <T> T getObject(String parameterName, Class<T> type)
1:             throws SQLException {
1:         return ((EngineCallableStatement) getCallableStatement())
1:                 .getObject(parameterName, type);
1:     }
1: 
commit:f44e479
/////////////////////////////////////////////////////////////////////////
0:  * JDBC 3 brokered CallableStatement
0: public class BrokeredCallableStatement extends BrokeredPreparedStatement
1:         super(control, sql, null);
1:     // JDBC 2.0 methods
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     // JDBC 3.0 methods
1: 
1:     public final void setURL(String parameterName, java.net.URL value) throws SQLException {
1:         getCallableStatement().setURL(parameterName, value);
1:     }
1: 
1:     public final void setNull(String parameterName, int type) throws SQLException {
1:         getCallableStatement().setNull(parameterName, type);
1:     }
1: 
1:     public final void setBoolean(String parameterName, boolean value) throws SQLException {
1:         getCallableStatement().setBoolean(parameterName, value);
1:     }
1: 
1:     public final void setByte(String parameterName, byte value) throws SQLException {
1:         getCallableStatement().setByte(parameterName, value);
1:     }
1: 
1:     public final void setShort(String parameterName, short value) throws SQLException {
1:         getCallableStatement().setShort(parameterName, value);
1:     }
1: 
1:     public final void setInt(String parameterName, int value) throws SQLException {
1:         getCallableStatement().setInt(parameterName, value);
1:     }
1: 
1:     public final void setLong(String parameterName, long value) throws SQLException {
1:         getCallableStatement().setLong(parameterName, value);
1:     }
1: 
1:     public final void setFloat(String parameterName, float value) throws SQLException {
1:         getCallableStatement().setFloat(parameterName, value);
1:     }
1: 
1:     public final void setDouble(String parameterName, double value) throws SQLException {
1:         getCallableStatement().setDouble(parameterName, value);
1:     }
1: 
1:     public final void setBigDecimal(String parameterName, BigDecimal value) throws SQLException {
1:         getCallableStatement().setBigDecimal(parameterName, value);
1:     }
1: 
1:     public final void setString(String parameterName, String value) throws SQLException {
1:         getCallableStatement().setString(parameterName, value);
1:     }
1: 
1:     public final void setBytes(String parameterName, byte[] value) throws SQLException {
1:         getCallableStatement().setBytes(parameterName, value);
1:     }
1: 
1:     public final void setDate(String parameterName, Date value) throws SQLException {
1:         getCallableStatement().setDate(parameterName, value);
1:     }
1: 
1:     public final void setTime(String parameterName, Time value) throws SQLException {
1:         getCallableStatement().setTime(parameterName, value);
1:     }
1: 
1:     public final void setTimestamp(String parameterName, Timestamp value) throws SQLException {
1:         getCallableStatement().setTimestamp(parameterName, value);
1:     }
1: 
1:     public final void setAsciiStream(String parameterName, java.io.InputStream value, int length) throws SQLException {
1:         getCallableStatement().setAsciiStream(parameterName, value, length);
1:     }
1: 
1:     public final void setBinaryStream(String parameterName, java.io.InputStream value, int length) throws SQLException {
1:         getCallableStatement().setBinaryStream(parameterName, value, length);
1:     }
1: 
1:     public final void setObject(String parameterName, Object value, int a, int b) throws SQLException {
1:         getCallableStatement().setObject(parameterName, value, a, b);
1:     }
1: 
1:     public final void setObject(String parameterName, Object value, int a) throws SQLException {
1:         getCallableStatement().setObject(parameterName, value, a);
1:     }
1: 
1:     public final void setObject(String parameterName, Object value) throws SQLException {
1:         getCallableStatement().setObject(parameterName, value);
1:     }
1: 
1:     public final void setCharacterStream(String parameterName, java.io.Reader value, int length) throws SQLException {
1:         getCallableStatement().setCharacterStream(parameterName, value, length);
1:     }
1: 
1:     public final void setDate(String parameterName, Date value, Calendar cal) throws SQLException {
1:         getCallableStatement().setDate(parameterName, value, cal);
1:     }
1: 
1:     public final void setTime(String parameterName, Time value, Calendar cal) throws SQLException {
1:         getCallableStatement().setTime(parameterName, value, cal);
1:     }
1: 
1:     public final void setTimestamp(String parameterName, Timestamp value, Calendar cal) throws SQLException {
1:         getCallableStatement().setTimestamp(parameterName, value, cal);
1:     }
1: 
1:     public final void setNull(String parameterName, int a, String b) throws SQLException {
1:         getCallableStatement().setNull(parameterName, a, b);
1:     }
1: 
1:     public final String getString(String parameterName) throws SQLException {
1:         return getCallableStatement().getString(parameterName);
1:     }
1: 
1:     public final boolean getBoolean(String parameterName) throws SQLException {
1:         return getCallableStatement().getBoolean(parameterName);
1:     }
1: 
1:     public final byte getByte(String parameterName) throws SQLException {
1:         return getCallableStatement().getByte(parameterName);
1:     }
1: 
1:     public final short getShort(String parameterName) throws SQLException {
1:         return getCallableStatement().getShort(parameterName);
1:     }
1: 
1:     public final int getInt(String parameterName) throws SQLException {
1:         return getCallableStatement().getInt(parameterName);
1:     }
1: 
1:     public final long getLong(String parameterName) throws SQLException {
1:         return getCallableStatement().getLong(parameterName);
1:     }
1: 
1:     public final float getFloat(String parameterName) throws SQLException {
1:         return getCallableStatement().getFloat(parameterName);
1:     }
1: 
1:     public final double getDouble(String parameterName) throws SQLException {
1:         return getCallableStatement().getDouble(parameterName);
1:     }
1: 
1:     public final byte[] getBytes(String parameterName) throws SQLException {
1:         return getCallableStatement().getBytes(parameterName);
1:     }
1: 
1:     public final Date getDate(String parameterName) throws SQLException {
1:         return getCallableStatement().getDate(parameterName);
1:     }
1: 
1:     public final Time getTime(String parameterName) throws SQLException {
1:         return getCallableStatement().getTime(parameterName);
1:     }
1: 
1:     public final Timestamp getTimestamp(String parameterName) throws SQLException {
1:         return getCallableStatement().getTimestamp(parameterName);
1:     }
1: 
1:     public final Object getObject(String parameterName) throws SQLException {
1:         return getCallableStatement().getObject(parameterName);
1:     }
1: 
1:     public final BigDecimal getBigDecimal(String parameterName) throws SQLException {
1:         return getCallableStatement().getBigDecimal(parameterName);
1:     }
1: 
1:     public final Object getObject(String parameterName, Map<String, Class<?>> map) throws SQLException {
1:         return getCallableStatement().getObject(parameterName, map);
1:     }
1: 
1:     public final Ref getRef(String parameterName) throws SQLException {
1:         return getCallableStatement().getRef(parameterName);
1:     }
1: 
1:     public final Blob getBlob(String parameterName) throws SQLException {
1:         return getCallableStatement().getBlob(parameterName);
1:     }
1: 
1:     public final Clob getClob(String parameterName) throws SQLException {
1:         return getCallableStatement().getClob(parameterName);
1:     }
1: 
1:     public final Array getArray(String parameterName) throws SQLException {
1:         return getCallableStatement().getArray(parameterName);
1:     }
1: 
1:     public final Date getDate(String parameterName, Calendar cal) throws SQLException {
1:         return getCallableStatement().getDate(parameterName, cal);
1:     }
1: 
1:     public final Time getTime(String parameterName, Calendar cal) throws SQLException {
1:         return getCallableStatement().getTime(parameterName, cal);
1:     }
1: 
1:     public final Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
1:         return getCallableStatement().getTimestamp(parameterName, cal);
1:     }
1: 
1:     public final java.net.URL getURL(String parameterName) throws SQLException {
1:         return getCallableStatement().getURL(parameterName);
1:     }
1: 
1:     public final java.net.URL getURL(int i) throws SQLException {
1:         return getCallableStatement().getURL(i);
1:     }
1: 
1:     public final void registerOutParameter(String a, int b) throws SQLException {
1:         getCallableStatement().registerOutParameter(a, b);
1:     }
1: 
1:     public final void registerOutParameter(String a, int b, int c) throws SQLException {
1:         getCallableStatement().registerOutParameter(a, b, c);
1:     }
1: 
1:     public final void registerOutParameter(String a, int b, String c) throws SQLException {
1:         getCallableStatement().registerOutParameter(a, b, c);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         CallableStatement newStatement = conn.prepareCall(
1:             sql, resultSetType, resultSetConcurrency, resultSetHoldability);
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1:     public final Object getObject(int i, Map<String, Class<?>> map)
commit:e24d8ef
/////////////////////////////////////////////////////////////////////////
1:     /** @deprecated */
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
0: public abstract class BrokeredCallableStatement extends BrokeredPreparedStatement
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:5b78c4e
/////////////////////////////////////////////////////////////////////////
1:     public final void close() throws SQLException {
1:         control.closeRealCallableStatement();
1:     }
1:     
commit:3be5c9d
/////////////////////////////////////////////////////////////////////////
1: 	public BrokeredCallableStatement(BrokeredStatementControl control, String sql) throws SQLException {
0: 		super(control,sql);
commit:2e4a36f
/////////////////////////////////////////////////////////////////////////
0: 	public final PreparedStatement getPreparedStatement() throws SQLException {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:df380db
/////////////////////////////////////////////////////////////////////////
0: public abstract class BrokeredCallableStatement extends BrokeredPreparedStatement
commit:e65be5b
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Access the underlying CallableStatement. This method
1:      * is package protected to restrict access to the underlying
1:      * object to the brokered objects. Allowing the application to
1:      * access the underlying object thtough a public method would
1:      * 
1:      */
1:     final CallableStatement getCallableStatement() throws SQLException {
1: 	
1:     /**
1:      * Access the underlying PreparedStatement. This method
1:      * is package protected to restrict access to the underlying
1:      * object to the brokered objects. Allowing the application to
1:      * access the underlying object thtough a public method would
1:      * 
1:      */
1:     final PreparedStatement getPreparedStatement() throws SQLException {
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.jdbc.BrokeredCallableStatement
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.jdbc;
1: 
1: import java.sql.*;
1: import java.math.BigDecimal;
1: 
1: import java.util.Calendar;
1: import java.util.Map;
1: 
1: 
1: /**
0: 	JDBC 2 brokered CallableStatement
1:  */
0: public class BrokeredCallableStatement extends BrokeredPreparedStatement
1:           implements CallableStatement
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
0: 	public BrokeredCallableStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException {
0: 		super(control, jdbcLevel, sql);
1: 	}
1: 
1:     public final void registerOutParameter(int parameterIndex,
1:                                      int sqlType)
1:         throws SQLException
1:     {
1:         getCallableStatement().registerOutParameter( parameterIndex, sqlType);
1:     }
1: 
1:     public final void registerOutParameter(int parameterIndex,
1:                                      int sqlType,
1:                                      int scale)
1:         throws SQLException
1:     {
1:         getCallableStatement().registerOutParameter( parameterIndex, sqlType, scale);
1:     }
1: 
1:     public final boolean wasNull()
1:         throws SQLException
1:     {
1:         return getCallableStatement().wasNull();
1:     }
1: 
1:     public final String getString(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getString( parameterIndex);
1:     }
1: 
1:     public final boolean getBoolean(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getBoolean( parameterIndex);
1:     }
1: 
1:     public final byte getByte(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getByte( parameterIndex);
1:     }
1: 
1:     public final short getShort(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getShort( parameterIndex);
1:     }
1: 
1:     public final int getInt(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getInt( parameterIndex);
1:     }
1: 
1:     public final long getLong(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getLong( parameterIndex);
1:     }
1: 
1:     public final float getFloat(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getFloat( parameterIndex);
1:     }
1: 
1:     public final double getDouble(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getDouble( parameterIndex);
1:     }
1: 
1:     public final BigDecimal getBigDecimal(int parameterIndex,
1:                                               int scale)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getBigDecimal( parameterIndex, scale);
1:     }
1: 
1:     public final byte[] getBytes(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getBytes( parameterIndex);
1:     }
1: 
1:     public final Date getDate(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getDate( parameterIndex);
1:     }
1: 
1:     public final Date getDate(int parameterIndex,
1:                         Calendar cal)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getDate( parameterIndex, cal);
1:     }
1: 
1:     public final Time getTime(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getTime( parameterIndex);
1:     }
1: 
1:     public final Timestamp getTimestamp(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getTimestamp( parameterIndex);
1:     }
1: 
1:     public final Object getObject(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getObject( parameterIndex);
1:     }
1: 
1:     public final BigDecimal getBigDecimal(int parameterIndex)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getBigDecimal( parameterIndex);
1:     }
1: 
0:     public final Object getObject(int i,
0:                             Map map)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getObject( i, map);
1:     }
1: 
1:     public final Ref getRef(int i)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getRef( i);
1:     }
1: 
1:     public final Blob getBlob(int i)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getBlob( i);
1:     }
1: 
1:     public final Clob getClob(int i)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getClob( i);
1:     }
1: 
1:     public final Array getArray(int i)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getArray( i);
1:     }
1: 
1:     public final Time getTime(int parameterIndex,
1:                         Calendar cal)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getTime( parameterIndex, cal);
1:     }
1: 
1:     public final Timestamp getTimestamp(int parameterIndex,
1:                                   Calendar cal)
1:         throws SQLException
1:     {
1:         return getCallableStatement().getTimestamp( parameterIndex, cal);
1:     }
1: 
1:     public final void registerOutParameter(int paramIndex,
1:                                      int sqlType,
1:                                      String typeName)
1:         throws SQLException
1:     {
1:         getCallableStatement().registerOutParameter( paramIndex, sqlType, typeName);
1:     }
1: 
1: 	/*
1: 	** Control methods
1: 	*/
1: 
0: 	protected final CallableStatement getCallableStatement() throws SQLException {
1: 		return control.getRealCallableStatement();
1: 	}
0: 	protected final PreparedStatement getPreparedStatement() throws SQLException {
1: 		return getCallableStatement();
1: 	}
1: 	/**
1: 		Create a duplicate CalableStatement to this, including state, from the passed in Connection.
1: 	*/
1: 	public CallableStatement createDuplicateStatement(Connection conn, CallableStatement oldStatement) throws SQLException {
1: 
0: 		CallableStatement newStatement = conn.prepareCall(sql, resultSetType, resultSetConcurrency);
1: 
1: 		setStatementState(oldStatement, newStatement);
1: 
1: 		return newStatement;
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.jdbc;
0: 
0: import java.sql.*;
0: import java.math.BigDecimal;
0: 
0: import java.util.Calendar;
0: import java.util.Map;
0: 
0: 
0: /**
0: 	JDBC 2 brokered CallableStatement
0:  */
0: public class BrokeredCallableStatement extends BrokeredPreparedStatement
0:           implements CallableStatement
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	public BrokeredCallableStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException {
0: 		super(control, jdbcLevel, sql);
0: 	}
0: 
0:     public final void registerOutParameter(int parameterIndex,
0:                                      int sqlType)
0:         throws SQLException
0:     {
0:         getCallableStatement().registerOutParameter( parameterIndex, sqlType);
0:     }
0: 
0:     public final void registerOutParameter(int parameterIndex,
0:                                      int sqlType,
0:                                      int scale)
0:         throws SQLException
0:     {
0:         getCallableStatement().registerOutParameter( parameterIndex, sqlType, scale);
0:     }
0: 
0:     public final boolean wasNull()
0:         throws SQLException
0:     {
0:         return getCallableStatement().wasNull();
0:     }
0: 
0:     public final String getString(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getString( parameterIndex);
0:     }
0: 
0:     public final boolean getBoolean(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getBoolean( parameterIndex);
0:     }
0: 
0:     public final byte getByte(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getByte( parameterIndex);
0:     }
0: 
0:     public final short getShort(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getShort( parameterIndex);
0:     }
0: 
0:     public final int getInt(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getInt( parameterIndex);
0:     }
0: 
0:     public final long getLong(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getLong( parameterIndex);
0:     }
0: 
0:     public final float getFloat(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getFloat( parameterIndex);
0:     }
0: 
0:     public final double getDouble(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getDouble( parameterIndex);
0:     }
0: 
0:     public final BigDecimal getBigDecimal(int parameterIndex,
0:                                               int scale)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getBigDecimal( parameterIndex, scale);
0:     }
0: 
0:     public final byte[] getBytes(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getBytes( parameterIndex);
0:     }
0: 
0:     public final Date getDate(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getDate( parameterIndex);
0:     }
0: 
0:     public final Date getDate(int parameterIndex,
0:                         Calendar cal)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getDate( parameterIndex, cal);
0:     }
0: 
0:     public final Time getTime(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getTime( parameterIndex);
0:     }
0: 
0:     public final Timestamp getTimestamp(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getTimestamp( parameterIndex);
0:     }
0: 
0:     public final Object getObject(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getObject( parameterIndex);
0:     }
0: 
0:     public final BigDecimal getBigDecimal(int parameterIndex)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getBigDecimal( parameterIndex);
0:     }
0: 
0:     public final Object getObject(int i,
0:                             Map map)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getObject( i, map);
0:     }
0: 
0:     public final Ref getRef(int i)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getRef( i);
0:     }
0: 
0:     public final Blob getBlob(int i)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getBlob( i);
0:     }
0: 
0:     public final Clob getClob(int i)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getClob( i);
0:     }
0: 
0:     public final Array getArray(int i)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getArray( i);
0:     }
0: 
0:     public final Time getTime(int parameterIndex,
0:                         Calendar cal)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getTime( parameterIndex, cal);
0:     }
0: 
0:     public final Timestamp getTimestamp(int parameterIndex,
0:                                   Calendar cal)
0:         throws SQLException
0:     {
0:         return getCallableStatement().getTimestamp( parameterIndex, cal);
0:     }
0: 
0:     public final void registerOutParameter(int paramIndex,
0:                                      int sqlType,
0:                                      String typeName)
0:         throws SQLException
0:     {
0:         getCallableStatement().registerOutParameter( paramIndex, sqlType, typeName);
0:     }
0: 
0: 	/*
0: 	** Control methods
0: 	*/
0: 
0: 	protected final CallableStatement getCallableStatement() throws SQLException {
0: 		return control.getRealCallableStatement();
0: 	}
0: 	protected final PreparedStatement getPreparedStatement() throws SQLException {
0: 		return getCallableStatement();
0: 	}
0: 	/**
0: 		Create a duplicate CalableStatement to this, including state, from the passed in Connection.
0: 	*/
0: 	public CallableStatement createDuplicateStatement(Connection conn, CallableStatement oldStatement) throws SQLException {
0: 
0: 		CallableStatement newStatement = conn.prepareCall(sql, resultSetType, resultSetConcurrency);
0: 
0: 		setStatementState(oldStatement, newStatement);
0: 
0: 		return newStatement;
0: 	}
0: }
============================================================================