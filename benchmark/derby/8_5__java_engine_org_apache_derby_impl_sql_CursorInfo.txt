1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.CursorInfo
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecCursorTableReference;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:dda453e: import java.util.ArrayList;
1:dda453e: import java.util.Arrays;
1:dda453e: import java.util.List;
1:dda453e: 
2:eac0369: /**
1:eac0369:  * A basic holder for information about cursors
1:eac0369:  * for execution.
1:eac0369:  * 
1:eac0369:  */
1:eac0369: public class CursorInfo
1:eac0369: 	implements Formatable
9:eac0369: {
1:eac0369: 
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	ExecCursorTableReference	targetTable; 
1:71c8e86:     List<String>          updateColumns;
1:eac0369: 	int 						updateMode;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formatable
1:eac0369: 	 */
1:eac0369: 	public CursorInfo()
1:eac0369: 	{
9:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public CursorInfo
1:eac0369: 	(
1:eac0369: 		int							updateMode,
1:eac0369: 		ExecCursorTableReference	targetTable,
1:71c8e86:         List<String>             updateColumns
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		this.updateMode = updateMode;
1:eac0369: 		this.targetTable = targetTable;
1:dda453e:         this.updateColumns = (updateColumns == null) ?
1:71c8e86:                 updateColumns : new ArrayList<String>(updateColumns);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeInt(updateMode);
1:eac0369: 		out.writeObject(targetTable);
1:dda453e: 
1:dda453e:         // For backwards compatibility. Used to write an array of
1:dda453e:         // target column descriptors here.
1:dda453e:         ArrayUtil.writeArray(out, (Object[]) null);
1:dda453e: 
1:dda453e:         ArrayUtil.writeArray(out, updateColumns == null ?
1:dda453e:                 null : updateColumns.toArray());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		updateMode = in.readInt();
1:eac0369: 		targetTable = (ExecCursorTableReference)in.readObject();
1:dda453e: 
1:dda453e:         // For backwards compatibility. Read and discard array that's no
1:dda453e:         // longer used.
1:dda453e:         ArrayUtil.readObjectArray(in);
1:dda453e: 
1:dda453e:         int len = ArrayUtil.readArrayLength(in);
1:dda453e:         if (len > 0) {
1:dda453e:             updateColumns = Arrays.asList(ArrayUtil.readStringArray(in));
1:dda453e:         }
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.CURSOR_INFO_V01_ID; }
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:dda453e:             return "CursorInfo" +
1:eac0369: 				"\n\tupdateMode: "+updateMode+
1:eac0369: 				"\n\ttargetTable: "+targetTable+
1:dda453e:                 "\n\tupdateColumns: " + updateColumns + '\n';
1:eac0369: 		}
3:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     List<String>          updateColumns;
/////////////////////////////////////////////////////////////////////////
1:         List<String>             updateColumns
1:                 updateColumns : new ArrayList<String>(updateColumns);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dda453e
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
0:     List                        updateColumns;
/////////////////////////////////////////////////////////////////////////
0:         List                        updateColumns
1:         this.updateColumns = (updateColumns == null) ?
0:                 null : new ArrayList(updateColumns);
/////////////////////////////////////////////////////////////////////////
1: 
1:         // For backwards compatibility. Used to write an array of
1:         // target column descriptors here.
1:         ArrayUtil.writeArray(out, (Object[]) null);
1: 
1:         ArrayUtil.writeArray(out, updateColumns == null ?
1:                 null : updateColumns.toArray());
/////////////////////////////////////////////////////////////////////////
1: 
1:         // For backwards compatibility. Read and discard array that's no
1:         // longer used.
1:         ArrayUtil.readObjectArray(in);
1: 
1:         int len = ArrayUtil.readArrayLength(in);
1:         if (len > 0) {
1:             updateColumns = Arrays.asList(ArrayUtil.readStringArray(in));
1:         }
/////////////////////////////////////////////////////////////////////////
1:             return "CursorInfo" +
1:                 "\n\tupdateColumns: " + updateColumns + '\n';
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.CursorInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecCursorTableReference;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1:  * A basic holder for information about cursors
1:  * for execution.
1:  * 
0:  * @author jamie
1:  */
1: public class CursorInfo
1: 	implements Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	ExecCursorTableReference	targetTable; 
0: 	ResultColumnDescriptor[]	targetColumns; 
0: 	String[] 					updateColumns; 
1: 	int 						updateMode;
1: 
1: 	/**
1: 	 * Niladic constructor for Formatable
1: 	 */
1: 	public CursorInfo()
1: 	{
1: 	}
1: 
1: 	/**
1: 	 *
1: 	 */
1: 	public CursorInfo
1: 	(
1: 		int							updateMode,
1: 		ExecCursorTableReference	targetTable,
0: 		ResultColumnDescriptor[]	targetColumns,
0: 		String[]					updateColumns
1: 	)
1: 	{
1: 		this.updateMode = updateMode;
1: 		this.targetTable = targetTable;
0: 		this.targetColumns = targetColumns;
0: 		this.updateColumns = updateColumns;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeInt(updateMode);
1: 		out.writeObject(targetTable);
0: 		ArrayUtil.writeArray(out, targetColumns);
0: 		ArrayUtil.writeArray(out, updateColumns);
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		updateMode = in.readInt();
1: 		targetTable = (ExecCursorTableReference)in.readObject();
0: 		int len = ArrayUtil.readArrayLength(in);
0: 		if (len != 0)
1: 		{
0: 			targetColumns = new ResultColumnDescriptor[len];
0: 			ArrayUtil.readArrayItems(in, targetColumns);
1: 		}
0: 		len = ArrayUtil.readArrayLength(in);
0: 		if (len != 0)
1: 		{
0: 			updateColumns = new String[len];
0: 			ArrayUtil.readArrayItems(in, updateColumns);
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.CURSOR_INFO_V01_ID; }
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			StringBuffer strbuf = new StringBuffer();
1: 		
0: 			strbuf.append("CursorInfo"+
1: 				"\n\tupdateMode: "+updateMode+
1: 				"\n\ttargetTable: "+targetTable+
0: 				"\n\tupdateColumns: ");
1: 
0: 			if (updateColumns == null)
1: 			{
0: 				strbuf.append("NULL\n");
1: 			}
1: 			else
1: 			{
0: 				strbuf.append("{");
0: 				for (int i = 0; i < updateColumns.length; i++)
1: 				{
0: 					if (i > 0)
0: 						strbuf.append(",");
0: 					strbuf.append(updateColumns[i]);
1: 				}
0: 				strbuf.append(")\n");
1: 			}
1: 
0: 			strbuf.append("\tTargetColumnDescriptors: \n");
0: 			if (targetColumns == null)
1: 			{
0: 				strbuf.append("NULL");
1: 			}
1: 			else
1: 			{
0: 				for (int i = 0; i < targetColumns.length; i++)
1: 				{
0: 					strbuf.append(targetColumns[i]);
1: 				}
0: 				strbuf.append("\n");
1: 			}
0: 			return strbuf.toString();	
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.execute.ExecCursorTableReference;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0:  * A basic holder for information about cursors
0:  * for execution.
0:  * 
0:  * @author jamie
0:  */
0: public class CursorInfo
0: 	implements Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	ExecCursorTableReference	targetTable; 
0: 	ResultColumnDescriptor[]	targetColumns; 
0: 	String[] 					updateColumns; 
0: 	int 						updateMode;
0: 
0: 	/**
0: 	 * Niladic constructor for Formatable
0: 	 */
0: 	public CursorInfo()
0: 	{
0: 	}
0: 
0: 	/**
0: 	 *
0: 	 */
0: 	public CursorInfo
0: 	(
0: 		int							updateMode,
0: 		ExecCursorTableReference	targetTable,
0: 		ResultColumnDescriptor[]	targetColumns,
0: 		String[]					updateColumns
0: 	)
0: 	{
0: 		this.updateMode = updateMode;
0: 		this.targetTable = targetTable;
0: 		this.targetColumns = targetColumns;
0: 		this.updateColumns = updateColumns;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeInt(updateMode);
0: 		out.writeObject(targetTable);
0: 		ArrayUtil.writeArray(out, targetColumns);
0: 		ArrayUtil.writeArray(out, updateColumns);
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		updateMode = in.readInt();
0: 		targetTable = (ExecCursorTableReference)in.readObject();
0: 		int len = ArrayUtil.readArrayLength(in);
0: 		if (len != 0)
0: 		{
0: 			targetColumns = new ResultColumnDescriptor[len];
0: 			ArrayUtil.readArrayItems(in, targetColumns);
0: 		}
0: 		len = ArrayUtil.readArrayLength(in);
0: 		if (len != 0)
0: 		{
0: 			updateColumns = new String[len];
0: 			ArrayUtil.readArrayItems(in, updateColumns);
0: 		}
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.CURSOR_INFO_V01_ID; }
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			StringBuffer strbuf = new StringBuffer();
0: 		
0: 			strbuf.append("CursorInfo"+
0: 				"\n\tupdateMode: "+updateMode+
0: 				"\n\ttargetTable: "+targetTable+
0: 				"\n\tupdateColumns: ");
0: 
0: 			if (updateColumns == null)
0: 			{
0: 				strbuf.append("NULL\n");
0: 			}
0: 			else
0: 			{
0: 				strbuf.append("{");
0: 				for (int i = 0; i < updateColumns.length; i++)
0: 				{
0: 					if (i > 0)
0: 						strbuf.append(",");
0: 					strbuf.append(updateColumns[i]);
0: 				}
0: 				strbuf.append(")\n");
0: 			}
0: 
0: 			strbuf.append("\tTargetColumnDescriptors: \n");
0: 			if (targetColumns == null)
0: 			{
0: 				strbuf.append("NULL");
0: 			}
0: 			else
0: 			{
0: 				for (int i = 0; i < targetColumns.length; i++)
0: 				{
0: 					strbuf.append(targetColumns[i]);
0: 				}
0: 				strbuf.append("\n");
0: 			}
0: 			return strbuf.toString();	
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================