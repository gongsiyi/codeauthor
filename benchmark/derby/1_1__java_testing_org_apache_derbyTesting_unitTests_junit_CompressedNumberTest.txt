1:373cb84: /*
6:373cb84: 
1:d241e83:    Derby - Class org.apache.derbyTesting.unitTests.junit.CompressedNumberTest
1:373cb84: 
1:373cb84:    Licensed to the Apache Software Foundation (ASF) under one or more
1:373cb84:    contributor license agreements.  See the NOTICE file distributed with
1:373cb84:    this work for additional information regarding copyright ownership.
1:373cb84:    The ASF licenses this file to you under the Apache License, Version 2.0
1:373cb84:    (the "License"); you may not use this file except in compliance with
1:373cb84:    the License.  You may obtain a copy of the License at
1:373cb84: 
1:373cb84:       http://www.apache.org/licenses/LICENSE-2.0
1:373cb84: 
1:373cb84:    Unless required by applicable law or agreed to in writing, software
1:373cb84:    distributed under the License is distributed on an "AS IS" BASIS,
1:373cb84:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:373cb84:    See the License for the specific language governing permissions and
1:373cb84:    limitations under the License.
1:373cb84: 
1:373cb84:  */
1:373cb84: 
1:373cb84: package org.apache.derbyTesting.unitTests.junit;
1:373cb84: 
1:373cb84: import java.io.DataInput;
1:373cb84: import java.io.DataInputStream;
1:373cb84: import java.io.DataOutput;
1:373cb84: import java.io.DataOutputStream;
1:373cb84: import java.io.IOException;
1:373cb84: import java.io.InputStream;
1:373cb84: 
1:373cb84: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:373cb84: import org.apache.derby.iapi.services.io.ArrayOutputStream;
1:373cb84: import org.apache.derby.iapi.services.io.CompressedNumber;
1:373cb84: 
1:373cb84: import junit.framework.TestCase;
1:373cb84: 
1:373cb84: /**
1:373cb84:  * Test case for CompressedNumber.
1:373cb84:  */
1:373cb84: public class CompressedNumberTest extends TestCase {
1:373cb84:     private static byte[] holder = new byte[8];
1:373cb84:     private static  ArrayOutputStream aos = new ArrayOutputStream(holder);
1:373cb84:     private static  DataOutput out = new DataOutputStream(aos);
1:373cb84: 
1:373cb84:     private static  ArrayInputStream ais = new ArrayInputStream(holder);
1:373cb84:     private static  DataInput in = new DataInputStream(ais);
1:373cb84:     private static  InputStream in_stream = ais;
1:373cb84: 
1:373cb84:     /**
1:373cb84:      * Public constructor required for running test as stand alone JUnit.
1:373cb84:      *
1:373cb84:      * @param name
1:373cb84:      *            name to present this test case.
1:373cb84:      */
1:373cb84:     public CompressedNumberTest(String name) {
1:373cb84:         super(name);
1:373cb84:     }
1:373cb84: 
1:373cb84:     public void testLong() throws IOException{
1:373cb84:         long[] dataToTest = {0, 1, 2,
1:373cb84:                 0x3fff - 2, 0x3fff - 1,
1:373cb84:                 0x3fff,
1:373cb84:                 0x3fff + 1, 0x3fff + 2,
1:373cb84:                 0x3fffffff - 4, 0x3fffffff - 3, 0x3fffffff - 2, 0x3fffffff - 1,
1:373cb84:                 0x3fffffff,
1:373cb84:                 0x3fffffff + 1, 0x3fffffff + 2, 0x3fffffff + 3, 0x3fffffff + 4,
1:373cb84:                 0x70000000 - 2, 0x70000000 - 1,
1:373cb84:                 0x70000000,
1:373cb84:                 0x70000000 + 1, 0x70000000 + 2,
1:373cb84:                 Long.MAX_VALUE - 2, Long.MAX_VALUE - 1,
1:373cb84:                 Long.MAX_VALUE,
1:373cb84:                 };
1:d241e83:         int[] length = {2, 2, 2,
1:d241e83:                 2, 2,
1:d241e83:                 2,
1:d241e83:                 4, 4,
1:d241e83:                 4, 4, 4, 4,
1:d241e83:                 4,
1:d241e83:                 8, 8, 8, 8,
1:d241e83:                 8, 8,
1:d241e83:                 8,
1:d241e83:                 8, 8,
1:d241e83:                 8, 8,
1:d241e83:                 8,
1:d241e83:         };
1:373cb84: 
1:373cb84:         for(int i = 0; i < dataToTest.length; i++){
1:d241e83:             checkLong(dataToTest[i], length[i]);
1:373cb84:         }
1:373cb84:     }
1:373cb84: 
1:373cb84:     public void testLongWidely() throws IOException{
1:d241e83:         for (long l = 0; l < 0xf0000; l++){
1:d241e83:             if(l <= 0x3fff)
1:d241e83:                 checkLong(l, 2);
1:d241e83:             else if(l <= 0x3fffffff)
1:d241e83:                 checkLong(l, 4);
1:d241e83:             else
1:d241e83:                 checkLong(l, 8);
1:373cb84:         }
1:373cb84:     }
1:373cb84: 
1:373cb84:     public void testInt() throws IOException{
1:373cb84:         int[] dataToTest = {0, 1, 2,
1:373cb84:                 0x3f - 4, 0x3f - 3, 0x3f - 2, 0x3f - 1,
1:373cb84:                 0x3f,
1:373cb84:                 0x3f + 1, 0x3f + 2, 0x3f + 3, 0x3f + 4,
1:373cb84:                 0x3f80 - 4, 0x3f80 - 3, 0x3f80 - 2, 0x3f80 - 1,
1:373cb84:                 0x3f80,
1:373cb84:                 0x3f80 + 1, 0x3f80 + 2, 0x3f80 + 3, 0x3f80 + 4,
1:373cb84:                 0x3fff - 4, 0x3fff - 3, 0x3fff - 2, 0x3fff - 1,
1:373cb84:                 0x3fff,
1:373cb84:                 0x3fff + 1, 0x3fff + 2, 0x3fff + 3, 0x3fff + 4,
1:373cb84:                 Integer.MAX_VALUE - 4, Integer.MAX_VALUE - 3,
1:373cb84:                 Integer.MAX_VALUE - 2, Integer.MAX_VALUE - 1,
1:373cb84:                 Integer.MAX_VALUE,
1:373cb84:                 };
1:d241e83:         int[] length = { 1, 1, 1,
1:d241e83:                 1, 1, 1, 1,
1:d241e83:                 1,
1:d241e83:                 2, 2, 2, 2,
1:d241e83:                 2, 2, 2, 2,
1:d241e83:                 2,
1:d241e83:                 2, 2, 2, 2,
1:d241e83:                 2, 2, 2, 2,
1:d241e83:                 2,
1:d241e83:                 4, 4, 4, 4,
1:d241e83:                 4, 4,
1:d241e83:                 4, 4,
1:d241e83:                 4,
1:d241e83:         };
1:373cb84: 
1:373cb84:         for(int i = 0; i < dataToTest.length; i++){
1:d241e83:             checkInt(dataToTest[i], length[i]);
1:373cb84:         }
1:373cb84:     }
1:373cb84: 
1:373cb84:     public void testIntWidely() throws IOException{
2:373cb84:         for (int i = 0; i < 0xf0000; i++){
1:d241e83:             if(i <= 0x3f)
1:d241e83:                 checkInt(i, 1);
1:d241e83:             else if(i <= 0x3fff)
1:d241e83:                 checkInt(i, 2);
1:d241e83:             else
1:d241e83:                 checkInt(i, 4);
1:373cb84:         }
1:373cb84: 
1:373cb84:          //takes 30 minutes to run.
1:373cb84: //         for (int i = 0; i < Integer.MAX_VALUE; i++) {
1:d241e83: //             if(i <= 0x3f)
1:d241e83: //                 checkInt(i, 1);
1:d241e83: //             else if(i <= 0x3fff)
1:d241e83: //                 checkInt(i, 2);
1:d241e83: //             else
1:d241e83: //                 checkInt(i, 4);
1:373cb84: //         }
1:373cb84:     }
1:373cb84: 
1:373cb84:     /**
1:373cb84:      * Check whether CompressedNumber can work well on integer passed.
1:373cb84:      *
1:373cb84:      * @param i
1:373cb84:      *            the integer to be checked.
1:d241e83:      * @param expectedLength
1:d241e83:      *            the length expected of i after compressed.
1:373cb84:      * @throws IOException
1:373cb84:      */
1:d241e83:     private void checkInt(int i, int expectedLength) throws IOException {
1:373cb84:         aos.setPosition(0);
1:373cb84:         int length = CompressedNumber.writeInt(out, i);
1:d241e83:         assertEquals("Invalid length after compressed", expectedLength, length);
1:373cb84: 
1:373cb84:         assertEquals("MISMATCH written bytes", length, aos.getPosition());
1:373cb84: 
1:373cb84:         assertEquals("MISMATCH sizeInt() bytes", length,
1:373cb84:                      CompressedNumber.sizeInt(i));
1:373cb84: 
3:373cb84:         ais.setPosition(0);
1:373cb84:         assertEquals("MISMATCH value readInt(DataInput)", i,
1:373cb84:                      CompressedNumber.readInt(in));
1:373cb84: 
1:373cb84:         ais.setPosition(0);
1:373cb84:         assertEquals("MISMATCH value readInt(DataInput)", i,
1:373cb84:                      ais.readCompressedInt());
1:373cb84: 
1:373cb84:         ais.setPosition(0);
1:373cb84:         assertEquals("MISMATCH value in readInt(InputStream)", i,
1:373cb84:                      CompressedNumber.readInt(in_stream));
1:373cb84: 
1:373cb84:         assertEquals("MISMATCH frome readInt(byte[], offset)", i,
1:373cb84:                      CompressedNumber.readInt(holder, 0));
1:373cb84:     }
1:373cb84: 
1:373cb84: 
1:373cb84:     /**
1:373cb84:      * Check whether CompressedNumber can work well on long number passed.
1:373cb84:      *
1:373cb84:      * @param l
1:373cb84:      *            the long number to be checked.
1:d241e83:      * @param expectedLength
1:d241e83:      *            the length expected of l after compressed.
1:373cb84:      * @throws IOException
1:373cb84:      */
1:d241e83:     private void checkLong(long l, int expectedLength) throws IOException {
1:373cb84:         aos.setPosition(0);
1:373cb84:         int length = CompressedNumber.writeLong(out, l);
1:d241e83:         assertEquals("Invalid length after compressed", expectedLength, length);
1:373cb84: 
1:373cb84:         assertEquals("MISMATCH written bytes", length, aos.getPosition());
1:373cb84: 
1:373cb84:         assertEquals("MISMATCH sizeLong() bytes", length,
1:373cb84:                      CompressedNumber.sizeLong(l));
1:373cb84: 
1:373cb84:         assertEquals("MISMATCH in readLong(byte[], offset) value", l,
1:373cb84:                      CompressedNumber.readLong(holder, 0));
1:373cb84: 
1:373cb84:         ais.setPosition(0);
1:373cb84:         assertEquals("MISMATCH value in readLong(InputStream)", l,
1:373cb84:                      CompressedNumber.readLong(in_stream));
1:373cb84: 
1:373cb84:         ais.setPosition(0);
1:373cb84:         assertEquals("MISMATCH value in readLong(InputStream)", l, ais
1:373cb84:                 .readCompressedLong());
1:373cb84: 
1:373cb84:         ais.setPosition(0);
1:373cb84:         assertEquals("MISMATCH value in readLong(DataInput)", l,
1:373cb84:                      CompressedNumber.readLong(in));
1:373cb84:     }
1:373cb84: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cd822eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d241e83
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.CompressedNumberTest
/////////////////////////////////////////////////////////////////////////
1:         int[] length = {2, 2, 2,
1:                 2, 2,
1:                 2,
1:                 4, 4,
1:                 4, 4, 4, 4,
1:                 4,
1:                 8, 8, 8, 8,
1:                 8, 8,
1:                 8,
1:                 8, 8,
1:                 8, 8,
1:                 8,
1:         };
1:             checkLong(dataToTest[i], length[i]);
1:         for (long l = 0; l < 0xf0000; l++){
1:             if(l <= 0x3fff)
1:                 checkLong(l, 2);
1:             else if(l <= 0x3fffffff)
1:                 checkLong(l, 4);
1:             else
1:                 checkLong(l, 8);
/////////////////////////////////////////////////////////////////////////
1:         int[] length = { 1, 1, 1,
1:                 1, 1, 1, 1,
1:                 1,
1:                 2, 2, 2, 2,
1:                 2, 2, 2, 2,
1:                 2,
1:                 2, 2, 2, 2,
1:                 2, 2, 2, 2,
1:                 2,
1:                 4, 4, 4, 4,
1:                 4, 4,
1:                 4, 4,
1:                 4,
1:         };
1:             checkInt(dataToTest[i], length[i]);
1:             if(i <= 0x3f)
1:                 checkInt(i, 1);
1:             else if(i <= 0x3fff)
1:                 checkInt(i, 2);
1:             else
1:                 checkInt(i, 4);
1: //             if(i <= 0x3f)
1: //                 checkInt(i, 1);
1: //             else if(i <= 0x3fff)
1: //                 checkInt(i, 2);
1: //             else
1: //                 checkInt(i, 4);
/////////////////////////////////////////////////////////////////////////
1:      * @param expectedLength
1:      *            the length expected of i after compressed.
1:     private void checkInt(int i, int expectedLength) throws IOException {
1:         assertEquals("Invalid length after compressed", expectedLength, length);
/////////////////////////////////////////////////////////////////////////
1:      * @param expectedLength
1:      *            the length expected of l after compressed.
1:     private void checkLong(long l, int expectedLength) throws IOException {
1:         assertEquals("Invalid length after compressed", expectedLength, length);
commit:373cb84
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.unitTests.CompressedNumberTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: import org.apache.derby.iapi.services.io.ArrayOutputStream;
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * Test case for CompressedNumber.
1:  */
1: public class CompressedNumberTest extends TestCase {
1:     private static byte[] holder = new byte[8];
1:     private static  ArrayOutputStream aos = new ArrayOutputStream(holder);
1:     private static  DataOutput out = new DataOutputStream(aos);
1: 
1:     private static  ArrayInputStream ais = new ArrayInputStream(holder);
1:     private static  DataInput in = new DataInputStream(ais);
1:     private static  InputStream in_stream = ais;
1: 
1:     /**
1:      * Public constructor required for running test as stand alone JUnit.
1:      *
1:      * @param name
1:      *            name to present this test case.
1:      */
1:     public CompressedNumberTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testLong() throws IOException{
1:         long[] dataToTest = {0, 1, 2,
1:                 0x3fff - 2, 0x3fff - 1,
1:                 0x3fff,
1:                 0x3fff + 1, 0x3fff + 2,
1:                 0x3fffffff - 4, 0x3fffffff - 3, 0x3fffffff - 2, 0x3fffffff - 1,
1:                 0x3fffffff,
1:                 0x3fffffff + 1, 0x3fffffff + 2, 0x3fffffff + 3, 0x3fffffff + 4,
1:                 0x70000000 - 2, 0x70000000 - 1,
1:                 0x70000000,
1:                 0x70000000 + 1, 0x70000000 + 2,
1:                 Long.MAX_VALUE - 2, Long.MAX_VALUE - 1,
1:                 Long.MAX_VALUE,
1:                 };
1: 
1:         for(int i = 0; i < dataToTest.length; i++){
0:             checkLong(dataToTest[i]);
1:         }
1:     }
1: 
1:     public void testLongWidely() throws IOException{
1:         for (int i = 0; i < 0xf0000; i++){
0:             checkLong(i);
1:         }
1:     }
1: 
1:     public void testInt() throws IOException{
1:         int[] dataToTest = {0, 1, 2,
1:                 0x3f - 4, 0x3f - 3, 0x3f - 2, 0x3f - 1,
1:                 0x3f,
1:                 0x3f + 1, 0x3f + 2, 0x3f + 3, 0x3f + 4,
1:                 0x3f80 - 4, 0x3f80 - 3, 0x3f80 - 2, 0x3f80 - 1,
1:                 0x3f80,
1:                 0x3f80 + 1, 0x3f80 + 2, 0x3f80 + 3, 0x3f80 + 4,
1:                 0x3fff - 4, 0x3fff - 3, 0x3fff - 2, 0x3fff - 1,
1:                 0x3fff,
1:                 0x3fff + 1, 0x3fff + 2, 0x3fff + 3, 0x3fff + 4,
1:                 Integer.MAX_VALUE - 4, Integer.MAX_VALUE - 3,
1:                 Integer.MAX_VALUE - 2, Integer.MAX_VALUE - 1,
1:                 Integer.MAX_VALUE,
1:                 };
1: 
1:         for(int i = 0; i < dataToTest.length; i++){
0:             checkInt(dataToTest[i]);
1:         }
1:     }
1: 
1:     public void testIntWidely() throws IOException{
1:         for (int i = 0; i < 0xf0000; i++){
0:              checkInt(i);
1:         }
1: 
1:          //takes 30 minutes to run.
1: //         for (int i = 0; i < Integer.MAX_VALUE; i++) {
0: //             checkInt(i);
1: //         }
1:     }
1: 
1:     /**
1:      * Check whether CompressedNumber can work well on integer passed.
1:      *
1:      * @param i
1:      *            the integer to be checked.
1:      * @throws IOException
1:      */
0:     private void checkInt(int i) throws IOException {
1:         aos.setPosition(0);
1:         int length = CompressedNumber.writeInt(out, i);
1: 
1:         assertEquals("MISMATCH written bytes", length, aos.getPosition());
1: 
1:         assertEquals("MISMATCH sizeInt() bytes", length,
1:                      CompressedNumber.sizeInt(i));
1: 
1:         ais.setPosition(0);
1:         assertEquals("MISMATCH value readInt(DataInput)", i,
1:                      CompressedNumber.readInt(in));
1: 
1:         ais.setPosition(0);
1:         assertEquals("MISMATCH value readInt(DataInput)", i,
1:                      ais.readCompressedInt());
1: 
1:         ais.setPosition(0);
1:         assertEquals("MISMATCH value in readInt(InputStream)", i,
1:                      CompressedNumber.readInt(in_stream));
1: 
1:         assertEquals("MISMATCH frome readInt(byte[], offset)", i,
1:                      CompressedNumber.readInt(holder, 0));
1: 
1:         ais.setPosition(0);
0:         assertEquals("MISMATCH skip length", length,
0:                      CompressedNumber.skipInt(in));
1: 
0:         assertEquals("MISMATCH readIntAndReturnIntPlusOverhead() return",
0:                      length + i + 1,
0:                 CompressedNumber.readIntAndReturnIntPlusOverhead(holder, 0));
1: 
0:         assertEquals("MISMATCH skip position", length, ais.getPosition());
1:     }
1: 
1: 
1:     /**
1:      * Check whether CompressedNumber can work well on long number passed.
1:      *
1:      * @param l
1:      *            the long number to be checked.
1:      * @throws IOException
1:      */
0:     private void checkLong(long l) throws IOException {
1:         aos.setPosition(0);
1:         int length = CompressedNumber.writeLong(out, l);
1: 
1:         assertEquals("MISMATCH written bytes", length, aos.getPosition());
1: 
1:         assertEquals("MISMATCH sizeLong() bytes", length,
1:                      CompressedNumber.sizeLong(l));
1: 
1:         assertEquals("MISMATCH in readLong(byte[], offset) value", l,
1:                      CompressedNumber.readLong(holder, 0));
1: 
1:         ais.setPosition(0);
1:         assertEquals("MISMATCH value in readLong(InputStream)", l,
1:                      CompressedNumber.readLong(in_stream));
1: 
1:         ais.setPosition(0);
1:         assertEquals("MISMATCH value in readLong(InputStream)", l, ais
1:                 .readCompressedLong());
1: 
1:         ais.setPosition(0);
1:         assertEquals("MISMATCH value in readLong(DataInput)", l,
1:                      CompressedNumber.readLong(in));
1: 
1:         ais.setPosition(0);
0:         assertEquals("MISMATCH skip length", length,
0:                      CompressedNumber.skipLong(in));
1: 
0:         assertEquals("MISMATCH skip position", length, ais.getPosition());
1:     }
1: }
============================================================================