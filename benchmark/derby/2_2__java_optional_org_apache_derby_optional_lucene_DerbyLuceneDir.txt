1:5cf7a46: /*
3:5cf7a46: 
1:5cf7a46:    Class org.apache.derby.optional.lucene.LuceneSupport
1:5cf7a46: 
1:5cf7a46:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5cf7a46:    contributor license agreements.  See the NOTICE file distributed with
1:5cf7a46:    this work for additional information regarding copyright ownership.
1:5cf7a46:    The ASF licenses this file to You under the Apache License, Version 2.0
1:5cf7a46:    (the "License"); you may not use this file except in compliance with
1:5cf7a46:    the License.  You may obtain a copy of the License at
1:5cf7a46: 
1:5cf7a46:       http://www.apache.org/licenses/LICENSE-2.0
1:5cf7a46: 
1:5cf7a46:    Unless required by applicable law or agreed to in writing, software
1:5cf7a46:    distributed under the License is distributed on an "AS IS" BASIS,
1:5cf7a46:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5cf7a46:    See the License for the specific language governing permissions and
1:5cf7a46:    limitations under the License.
1:5cf7a46: 
1:5cf7a46: */
1:5cf7a46: 
1:5cf7a46: package org.apache.derby.optional.lucene;
1:5cf7a46: 
1:5cf7a46: import java.io.FileNotFoundException;
1:5cf7a46: import java.io.IOException;
1:5cf7a46: import java.security.AccessController;
1:5cf7a46: import java.security.PrivilegedActionException;
1:5cf7a46: import java.security.PrivilegedExceptionAction;
1:5cf7a46: import java.sql.SQLException;
1:5cf7a46: import java.util.Collection;
1:5cf7a46: import java.util.HashMap;
1:5cf7a46: 
1:5cf7a46: import org.apache.lucene.store.Directory;
1:5cf7a46: import org.apache.lucene.store.IOContext;
1:5658bae: import org.apache.lucene.store.Lock;
1:5658bae: import org.apache.lucene.store.LockFactory;
1:5cf7a46: import org.apache.lucene.store.SingleInstanceLockFactory;
1:5cf7a46: 
1:502ed2e: import org.apache.derby.database.Database;
1:5cf7a46: import org.apache.derby.io.StorageFactory;
1:5cf7a46: import org.apache.derby.io.StorageFile;
1:5cf7a46: import org.apache.derby.shared.common.reference.SQLState;
1:5cf7a46: 
1:6b8ad38: import org.apache.derby.optional.utils.ToolUtilities;
1:6b8ad38: 
1:5cf7a46: /**
1:5cf7a46:  * <p>
1:5cf7a46:  * Derby implementation of Lucene Directory.
1:5cf7a46:  * </p>
1:5cf7a46:  */
1:5cf7a46: class DerbyLuceneDir extends Directory
1:5cf7a46: {
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  CONSTANTS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  STATE
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     // constructor args
1:5cf7a46:     private final   StorageFactory  _storageFactory;
1:5cf7a46:     private final   StorageFile     _directory;
1:502ed2e:     private final   String              _schema;
1:502ed2e:     private final   String              _table;
1:502ed2e:     private final   String              _textcol;
1:5cf7a46: 
1:5cf7a46:     // files open for output which may need to be sync'd
1:5cf7a46:     private HashMap<String,DerbyIndexOutput>    _outputFiles = new HashMap<String,DerbyIndexOutput>();
1:5cf7a46: 
1:5658bae:     // Lucene lock factory
1:5658bae:     private LockFactory             _lockFactory;
1:5658bae:     
1:5cf7a46:     private boolean _closed = false;
1:5cf7a46: 
1:5cf7a46:     // only supply one DerbyLuceneDir per database
1:5cf7a46:     private static  HashMap<String,DerbyLuceneDir>  _openDirectories = new HashMap<String,DerbyLuceneDir>();
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  CONSTRUCTOR AND FACTORY METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Lookup a directory, creating its path as necessary.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:502ed2e:     static  synchronized    DerbyLuceneDir  getDirectory
1:502ed2e:         ( StorageFactory storageFactory, String schema, String table, String textcol )
1:5cf7a46:         throws SQLException
1:5cf7a46:     {
1:502ed2e:         DerbyLuceneDir  candidate = new DerbyLuceneDir( storageFactory, schema, table, textcol );
1:5cf7a46:         String              key = getKey( candidate );
1:5cf7a46:         DerbyLuceneDir  result = _openDirectories.get( key );
1:5cf7a46: 
1:5cf7a46:         if ( result == null )
1:5cf7a46:         {
1:5cf7a46:             result = candidate;
1:5cf7a46:             result.setLockFactory( new SingleInstanceLockFactory() );
1:5cf7a46:             _openDirectories.put( key, result );
1:5cf7a46:         }
1:5cf7a46: 
1:5cf7a46:         return result;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Remove a directory from the map.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:5cf7a46:     private static  synchronized    void    removeDir( DerbyLuceneDir dir )
1:5cf7a46:     {
1:5cf7a46:         _openDirectories.remove( getKey( dir ) );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Get the key associated with a directory */
1:502ed2e:     private static  String  getKey( DerbyLuceneDir dir )
1:502ed2e:     {
1:502ed2e:         return dir._directory.getPath();
1:502ed2e:     }
1:5cf7a46:     
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Construct from the database StorageFactory and a directory path
1:5cf7a46:      * of the form lucene/$schemaName/$tableName/$columnName.
1:5cf7a46:      * Creates the directory if it does not already exist.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:502ed2e:     private DerbyLuceneDir( StorageFactory storageFactory, String schema, String table, String textcol )
1:7234498:         throws SQLException
1:5cf7a46:     {
1:5cf7a46:         _storageFactory = storageFactory;
1:502ed2e:         _schema = schema;
1:502ed2e:         _table = table;
1:502ed2e:         _textcol = textcol;
1:502ed2e:         _directory = createPath( _storageFactory, _schema, _table, _textcol );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  WRAPPERS FOR StorageFactory METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Get a file in this directory.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:5cf7a46:     StorageFile     getFile( String fileName )
1:5cf7a46:     {
1:5cf7a46:         return _storageFactory.newStorageFile( _directory, fileName );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Get the Derby directory backing this Lucene directory.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:5cf7a46:     StorageFile getDirectory()
1:5cf7a46:     {
1:5cf7a46:         return _directory;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  Directory METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5658bae:     /** Set the lock factory used by this Directory. */
1:5658bae:     public  void    setLockFactory( LockFactory lockFactory ) { _lockFactory = lockFactory; }
1:5658bae:     
1:5658bae:     /** Get the lock factory used by this Directory. */
1:5658bae:     public  LockFactory getLockFactory() { return _lockFactory; }
1:5658bae: 
1:5658bae:     /** Clear the lock */
1:5658bae:     public void clearLock( String name )
1:5658bae:         throws IOException
1:5658bae:     {
1:5658bae:         _lockFactory.clearLock( name );
1:5658bae:     }
1:5658bae: 
1:5658bae:     /** Make a lock */
1:5658bae:     public Lock makeLock( String name )
1:5658bae:     {
1:5658bae:         return _lockFactory.makeLock( name );
1:5658bae:     }
1:5658bae: 
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Close this directory and remove it from the map of open directories.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:5cf7a46:     public void close()    throws IOException
1:5cf7a46:     {
1:5cf7a46:         // close the output files
1:5cf7a46:         for ( String fileName : _outputFiles.keySet() )
1:5cf7a46:         {
1:5cf7a46:             _outputFiles.get( fileName ).close();
1:5cf7a46:         }
1:5cf7a46: 
1:5cf7a46:         _outputFiles.clear();
1:5cf7a46:         _closed = true;
1:5cf7a46:         removeDir( this );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /**  Create a new, empty file for writing */
1:5cf7a46:     public DerbyIndexOutput createOutput
1:5cf7a46:         ( String name, IOContext context )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:5cf7a46: 
1:5cf7a46:         DerbyIndexOutput    indexOutput = _outputFiles.get( name );
1:5cf7a46:         if ( indexOutput != null )
1:5cf7a46:         {
1:5cf7a46:             indexOutput.close();
1:5cf7a46:         }
1:5cf7a46: 
1:5cf7a46:         StorageFile file = getStorageFile( name );
1:5cf7a46:         if ( file.exists() ) { deleteFile( name ); }
1:5cf7a46:         
1:5cf7a46:         indexOutput = new DerbyIndexOutput( file, this );
1:5cf7a46:         _outputFiles.put( name, indexOutput );
1:5cf7a46: 
1:5cf7a46:         return indexOutput;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public void deleteFile( String name ) throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:5cf7a46:         
1:5cf7a46:         StorageFile file = getStorageFile( name );
1:5cf7a46: 
1:5cf7a46:         if ( file.exists() )
1:5cf7a46:         {
1:5cf7a46:             if ( !file.delete() )
1:5cf7a46:             {
1:5cf7a46:                 throw newIOException( SQLState.UNABLE_TO_DELETE_FILE, file.getPath() );
1:5cf7a46:             }
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public boolean fileExists( String name )  throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:5cf7a46:         
1:5cf7a46:         return getStorageFile( name ).exists();
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public long fileLength( String name ) throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:5cf7a46:         
1:5cf7a46:         DerbyIndexInput indexInput = openInput( name, null );
1:5cf7a46: 
1:5cf7a46:         try {
1:5cf7a46:             return indexInput.length();
1:5cf7a46:         }
1:5cf7a46:         finally
1:5cf7a46:         {
1:5cf7a46:             indexInput.close();
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public String[] listAll()   throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:5cf7a46:         
1:5cf7a46:         return _directory.list();
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public DerbyIndexInput openInput
1:5cf7a46:         ( String name, IOContext context )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:5cf7a46:         
1:5cf7a46:         StorageFile file = getStorageFile( name );
1:5cf7a46:         if ( !file.exists() )
1:5cf7a46:         {
1:5cf7a46:             throw new FileNotFoundException( file.getPath() );
1:5cf7a46:         }
1:5cf7a46: 
1:5cf7a46:         return getIndexInput( file );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public void sync( Collection<String> names )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         for ( String name : names )
1:5cf7a46:         {
1:5cf7a46:             DerbyIndexOutput    indexOutput = _outputFiles.get( name );
1:5cf7a46: 
1:5cf7a46:             if ( indexOutput != null )
1:5cf7a46:             {
1:5cf7a46:                 indexOutput.flush();
1:5cf7a46:             }
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  FOR USE WHEN CLOSING CHILD FILES
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /** Remove the named file from the list of output files */
1:5cf7a46:     void    removeIndexOutput( String name )
1:5cf7a46:     {
1:5cf7a46:         _outputFiles.remove( name );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  MINIONS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /** Get a DerbyIndexInput on the named file */
1:5cf7a46:     private DerbyIndexInput getIndexInput( String name )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         return getIndexInput( getStorageFile( name ) );
1:5cf7a46:     }
1:5cf7a46:     private DerbyIndexInput getIndexInput( StorageFile file )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         return new DerbyIndexInput( file );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Turn a file name into a StorageFile handle */
1:5cf7a46:     private StorageFile getStorageFile( String name )
1:5cf7a46:     {
1:5cf7a46:         return _storageFactory.newStorageFile( _directory, name );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Make an IOException with the given SQLState and args */
1:5cf7a46:     private IOException newIOException( String sqlState, Object... args )
1:5cf7a46:     {
1:6b8ad38:         return new IOException( ToolUtilities.newSQLException( sqlState, args ).getMessage() );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Raise an exception if this directory is closed */
1:5cf7a46:     private void    checkIfClosed() throws IOException
1:5cf7a46:     {
1:5cf7a46:         if ( _closed )
1:5cf7a46:         {
1:5cf7a46:             throw newIOException( SQLState.DATA_CONTAINER_CLOSED );
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46: 	/**
1:5cf7a46: 	 * Create the path if necessary.
1:5cf7a46: 	 */
1:502ed2e:     private static StorageFile createPath
1:502ed2e:         ( final StorageFactory storageFactory, final String schema, final String table, final String textcol )
1:7234498:         throws SQLException
1:5cf7a46:     {
1:502ed2e:         StorageFile    luceneDir = createPathLeg( storageFactory, null, Database.LUCENE_DIR );
1:502ed2e:         StorageFile    schemaDir = createPathLeg( storageFactory, luceneDir, schema );
1:502ed2e:         StorageFile    tableDir = createPathLeg( storageFactory, schemaDir, table );
1:502ed2e:         StorageFile    indexDir = createPathLeg( storageFactory, tableDir, textcol );
1:502ed2e: 
1:502ed2e:         return indexDir;
1:502ed2e:     }
1:502ed2e: 
1:502ed2e: 	/**
1:502ed2e: 	 * Create the path if necessary.
1:502ed2e: 	 */
1:502ed2e:     private static StorageFile createPathLeg
1:502ed2e:         ( final StorageFactory storageFactory, final StorageFile parentDir, final String fileName )
1:7234498:         throws SQLException
1:502ed2e:     {
1:5cf7a46:         try {
1:7234498:             return AccessController.doPrivileged(
1:502ed2e:              new PrivilegedExceptionAction<StorageFile>()
1:5cf7a46:              {
1:7234498:                  public StorageFile run() throws SQLException
1:5cf7a46:                  {
1:6b8ad38:                      String         normalizedName = ToolUtilities.derbyIdentifier( fileName );
1:502ed2e:                      StorageFile    file = parentDir == null ?
1:502ed2e:                          storageFactory.newStorageFile( normalizedName  ) :
1:502ed2e:                          storageFactory.newStorageFile( parentDir, normalizedName );
1:502ed2e: 
1:502ed2e:                      if ( !file.exists() ) { file.mkdir(); }
1:502ed2e:                      if ( !file.exists() )
1:502ed2e:                      {
1:6b8ad38:                          throw ToolUtilities.newSQLException
1:6b8ad38:                              ( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, normalizedName );
1:502ed2e:                      }
1:502ed2e:                      else { return file; }
1:5cf7a46:                  }
1:5cf7a46:              }
1:5cf7a46:              );
1:7234498:         } catch (PrivilegedActionException pae) {
1:7234498:             throw (SQLException) pae.getCause();
1:5cf7a46:         }
1:5cf7a46:     }
1:502ed2e:     
1:5cf7a46: }
1:5cf7a46: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.utils.ToolUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new IOException( ToolUtilities.newSQLException( sqlState, args ).getMessage() );
/////////////////////////////////////////////////////////////////////////
1:                      String         normalizedName = ToolUtilities.derbyIdentifier( fileName );
/////////////////////////////////////////////////////////////////////////
1:                          throw ToolUtilities.newSQLException
1:                              ( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, normalizedName );
commit:5658bae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.store.Lock;
1: import org.apache.lucene.store.LockFactory;
/////////////////////////////////////////////////////////////////////////
1:     // Lucene lock factory
1:     private LockFactory             _lockFactory;
1:     
/////////////////////////////////////////////////////////////////////////
1:     /** Set the lock factory used by this Directory. */
1:     public  void    setLockFactory( LockFactory lockFactory ) { _lockFactory = lockFactory; }
1:     
1:     /** Get the lock factory used by this Directory. */
1:     public  LockFactory getLockFactory() { return _lockFactory; }
1: 
1:     /** Clear the lock */
1:     public void clearLock( String name )
1:         throws IOException
1:     {
1:         _lockFactory.clearLock( name );
1:     }
1: 
1:     /** Make a lock */
1:     public Lock makeLock( String name )
1:     {
1:         return _lockFactory.makeLock( name );
1:     }
1: 
commit:502ed2e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.database.Database;
/////////////////////////////////////////////////////////////////////////
1:     private final   String              _schema;
1:     private final   String              _table;
1:     private final   String              _textcol;
/////////////////////////////////////////////////////////////////////////
1:     static  synchronized    DerbyLuceneDir  getDirectory
1:         ( StorageFactory storageFactory, String schema, String table, String textcol )
1:             DerbyLuceneDir  candidate = new DerbyLuceneDir( storageFactory, schema, table, textcol );
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static  String  getKey( DerbyLuceneDir dir )
1:     {
1:         return dir._directory.getPath();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     private DerbyLuceneDir( StorageFactory storageFactory, String schema, String table, String textcol )
0:         throws IOException, PrivilegedActionException, SQLException
1:         _schema = schema;
1:         _table = table;
1:         _textcol = textcol;
1:         _directory = createPath( _storageFactory, _schema, _table, _textcol );
/////////////////////////////////////////////////////////////////////////
1:     private static StorageFile createPath
1:         ( final StorageFactory storageFactory, final String schema, final String table, final String textcol )
0:         throws SQLException, IOException, PrivilegedActionException
1:         StorageFile    luceneDir = createPathLeg( storageFactory, null, Database.LUCENE_DIR );
1:         StorageFile    schemaDir = createPathLeg( storageFactory, luceneDir, schema );
1:         StorageFile    tableDir = createPathLeg( storageFactory, schemaDir, table );
1:         StorageFile    indexDir = createPathLeg( storageFactory, tableDir, textcol );
1: 
1:         return indexDir;
1:     }
1: 
1: 	/**
1: 	 * Create the path if necessary.
1: 	 */
1:     private static StorageFile createPathLeg
1:         ( final StorageFactory storageFactory, final StorageFile parentDir, final String fileName )
0:         throws SQLException, IOException, PrivilegedActionException
1:     {
0:         return AccessController.doPrivileged
1:              new PrivilegedExceptionAction<StorageFile>()
0:                  public StorageFile run() throws IOException, SQLException
0:                      String         normalizedName = LuceneSupport.derbyIdentifier( fileName );
1:                      StorageFile    file = parentDir == null ?
1:                          storageFactory.newStorageFile( normalizedName  ) :
1:                          storageFactory.newStorageFile( parentDir, normalizedName );
1: 
1:                      if ( !file.exists() ) { file.mkdir(); }
1:                      if ( !file.exists() )
1:                      {
0:                          throw LuceneSupport.newSQLException( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, normalizedName );
1:                      }
1:                      else { return file; }
1:     
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Class org.apache.derby.optional.lucene.LuceneSupport
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.optional.lucene;
1: 
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: import java.sql.SQLException;
1: import java.util.Collection;
1: import java.util.HashMap;
1: 
1: import org.apache.lucene.store.Directory;
0: import org.apache.lucene.store.IndexInput;
0: import org.apache.lucene.store.IndexOutput;
1: import org.apache.lucene.store.IOContext;
1: import org.apache.lucene.store.SingleInstanceLockFactory;
1: 
1: import org.apache.derby.io.StorageFactory;
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: /**
1:  * <p>
1:  * Derby implementation of Lucene Directory.
1:  * </p>
1:  */
1: class DerbyLuceneDir extends Directory
1: {
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     // constructor args
1:     private final   StorageFactory  _storageFactory;
1:     private final   StorageFile     _directory;
1: 
1:     // files open for output which may need to be sync'd
1:     private HashMap<String,DerbyIndexOutput>    _outputFiles = new HashMap<String,DerbyIndexOutput>();
1: 
1:     private boolean _closed = false;
1: 
1:     // only supply one DerbyLuceneDir per database
1:     private static  HashMap<String,DerbyLuceneDir>  _openDirectories = new HashMap<String,DerbyLuceneDir>();
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTOR AND FACTORY METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Lookup a directory, creating its path as necessary.
1:      * </p>
1:      */
0:     static  synchronized    DerbyLuceneDir  getDirectory( StorageFactory storageFactory, String directoryPath )
1:         throws SQLException
1:     {
1:         try {
0:             DerbyLuceneDir  candidate = new DerbyLuceneDir( storageFactory, directoryPath );
1:             String              key = getKey( candidate );
1:             DerbyLuceneDir  result = _openDirectories.get( key );
1: 
1:             if ( result == null )
1:             {
1:                 result = candidate;
1:                 result.setLockFactory( new SingleInstanceLockFactory() );
1:                 _openDirectories.put( key, result );
1:             }
1: 
0:             createPath( result._directory );
1: 
1:             return result;
1:         }
0:         catch (IOException ioe) { throw LuceneSupport.wrap( ioe ); }
0:         catch (PrivilegedActionException pae) { throw LuceneSupport.wrap( pae ); }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Remove a directory from the map.
1:      * </p>
1:      */
1:     private static  synchronized    void    removeDir( DerbyLuceneDir dir )
1:     {
1:         _openDirectories.remove( getKey( dir ) );
1:     }
1: 
1:     /** Get the key associated with a directory */
0:     private static  String  getKey( DerbyLuceneDir dir ) { return dir._directory.getPath(); }
1:     
1:     /**
1:      * <p>
1:      * Construct from the database StorageFactory and a directory path
1:      * of the form lucene/$schemaName/$tableName/$columnName.
1:      * Creates the directory if it does not already exist.
1:      * </p>
1:      */
0:     private DerbyLuceneDir( StorageFactory storageFactory, String directoryPath )
1:     {
1:         _storageFactory = storageFactory;
0:         _directory = _storageFactory.newStorageFile( directoryPath );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  WRAPPERS FOR StorageFactory METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get a file in this directory.
1:      * </p>
1:      */
1:     StorageFile     getFile( String fileName )
1:     {
1:         return _storageFactory.newStorageFile( _directory, fileName );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the Derby directory backing this Lucene directory.
1:      * </p>
1:      */
1:     StorageFile getDirectory()
1:     {
1:         return _directory;
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  Directory METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Close this directory and remove it from the map of open directories.
1:      * </p>
1:      */
1:     public void close()    throws IOException
1:     {
1:         // close the output files
1:         for ( String fileName : _outputFiles.keySet() )
1:         {
1:             _outputFiles.get( fileName ).close();
1:         }
1: 
1:         _outputFiles.clear();
1:         _closed = true;
1:         removeDir( this );
1:     }
1: 
1:     /**  Create a new, empty file for writing */
1:     public DerbyIndexOutput createOutput
1:         ( String name, IOContext context )
1:         throws IOException
1:     {
1:         checkIfClosed();
1: 
1:         DerbyIndexOutput    indexOutput = _outputFiles.get( name );
1:         if ( indexOutput != null )
1:         {
1:             indexOutput.close();
1:         }
1: 
1:         StorageFile file = getStorageFile( name );
1:         if ( file.exists() ) { deleteFile( name ); }
1:         
1:         indexOutput = new DerbyIndexOutput( file, this );
1:         _outputFiles.put( name, indexOutput );
1: 
1:         return indexOutput;
1:     }
1: 
1:     public void deleteFile( String name ) throws IOException
1:     {
1:         checkIfClosed();
1:         
1:         StorageFile file = getStorageFile( name );
1: 
1:         if ( file.exists() )
1:         {
1:             if ( !file.delete() )
1:             {
1:                 throw newIOException( SQLState.UNABLE_TO_DELETE_FILE, file.getPath() );
1:             }
1:         }
1:     }
1: 
1:     public boolean fileExists( String name )  throws IOException
1:     {
1:         checkIfClosed();
1:         
1:         return getStorageFile( name ).exists();
1:     }
1: 
1:     public long fileLength( String name ) throws IOException
1:     {
1:         checkIfClosed();
1:         
1:         DerbyIndexInput indexInput = openInput( name, null );
1: 
1:         try {
1:             return indexInput.length();
1:         }
1:         finally
1:         {
1:             indexInput.close();
1:         }
1:     }
1: 
1:     public String[] listAll()   throws IOException
1:     {
1:         checkIfClosed();
1:         
1:         return _directory.list();
1:     }
1: 
1:     public DerbyIndexInput openInput
1:         ( String name, IOContext context )
1:         throws IOException
1:     {
1:         checkIfClosed();
1:         
1:         StorageFile file = getStorageFile( name );
1:         if ( !file.exists() )
1:         {
1:             throw new FileNotFoundException( file.getPath() );
1:         }
1: 
1:         return getIndexInput( file );
1:     }
1: 
1:     public void sync( Collection<String> names )
1:         throws IOException
1:     {
1:         for ( String name : names )
1:         {
1:             DerbyIndexOutput    indexOutput = _outputFiles.get( name );
1: 
1:             if ( indexOutput != null )
1:             {
1:                 indexOutput.flush();
1:             }
1:         }
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  FOR USE WHEN CLOSING CHILD FILES
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Remove the named file from the list of output files */
1:     void    removeIndexOutput( String name )
1:     {
1:         _outputFiles.remove( name );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Get a DerbyIndexInput on the named file */
1:     private DerbyIndexInput getIndexInput( String name )
1:         throws IOException
1:     {
1:         return getIndexInput( getStorageFile( name ) );
1:     }
1:     private DerbyIndexInput getIndexInput( StorageFile file )
1:         throws IOException
1:     {
1:         return new DerbyIndexInput( file );
1:     }
1: 
1:     /** Turn a file name into a StorageFile handle */
1:     private StorageFile getStorageFile( String name )
1:     {
1:         return _storageFactory.newStorageFile( _directory, name );
1:     }
1: 
1:     /** Make an IOException with the given SQLState and args */
1:     private IOException newIOException( String sqlState, Object... args )
1:     {
0:         return new IOException( LuceneSupport.newSQLException( sqlState, args ).getMessage() );
1:     }
1: 
1:     /** Raise an exception if this directory is closed */
1:     private void    checkIfClosed() throws IOException
1:     {
1:         if ( _closed )
1:         {
1:             throw newIOException( SQLState.DATA_CONTAINER_CLOSED );
1:         }
1:     }
1: 
1: 	/**
1: 	 * Create the path if necessary.
1: 	 */
0:     private static void createPath( final StorageFile directory )
0:         throws IOException, PrivilegedActionException
1:     {
0:         AccessController.doPrivileged
0:             (
0:              new PrivilegedExceptionAction<Object>()
1:              {
0:                  public Object run() throws IOException
1:                  {
0:                      directory.mkdirs();
0:                      return null;
1:                  }
1:              }
1:              );
1:     }
1: 
1: }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7234498
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         DerbyLuceneDir  candidate = new DerbyLuceneDir( storageFactory, schema, table, textcol );
0:         String              key = getKey( candidate );
0:         DerbyLuceneDir  result = _openDirectories.get( key );
0:         if ( result == null )
0:         {
0:             result = candidate;
0:             result.setLockFactory( new SingleInstanceLockFactory() );
0:             _openDirectories.put( key, result );
0: 
0:         return result;
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException
0:         try {
1:             return AccessController.doPrivileged(
1:                  public StorageFile run() throws SQLException
/////////////////////////////////////////////////////////////////////////
1:         } catch (PrivilegedActionException pae) {
1:             throw (SQLException) pae.getCause();
0:         }
============================================================================