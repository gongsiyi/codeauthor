1:3d7af4e: /*
1:3d7af4e:  *
1:3d7af4e:  * Derby - Class 
1:a535ea9:  *   org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest
1:3d7af4e:  *
1:3d7af4e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3d7af4e:  * contributor license agreements.  See the NOTICE file distributed with
1:3d7af4e:  * this work for additional information regarding copyright ownership.
1:3d7af4e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3d7af4e:  * (the "License"); you may not use this file except in compliance with
1:3d7af4e:  * the License.  You may obtain a copy of the License at
1:3d7af4e:  *
1:3d7af4e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3d7af4e:  *
1:3d7af4e:  * Unless required by applicable law or agreed to in writing,
1:3d7af4e:  * software distributed under the License is distributed on an
1:3d7af4e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:3d7af4e:  * either express or implied. See the License for the specific
1:3d7af4e:  * language governing permissions and limitations under the License.
1:3d7af4e:  */
1:3d7af4e: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
4:3d7af4e: 
1:3d7af4e: import java.io.InputStream;
1:3d7af4e: import java.sql.Blob;
1:3d7af4e: import java.sql.PreparedStatement;
1:3d7af4e: import java.sql.ResultSet;
1:3d7af4e: import java.sql.Statement;
1:3d7af4e: import junit.framework.Test;
1:3d7af4e: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:3d7af4e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:3d7af4e: import org.apache.derbyTesting.junit.TestConfiguration;
1:3d7af4e: 
1:3d7af4e: /**
1:a535ea9:  * Test if blob stream updates itself to point to LOBInputStream
1:3d7af4e:  * if the blob is updated after fetching the stream.
1:3d7af4e:  */
1:a535ea9: public class BlobUpdatableStreamTest extends BaseJDBCTestCase {
1:a535ea9:     public BlobUpdatableStreamTest (String name) {
1:3d7af4e:         super (name);
3:3d7af4e:     }
1:a535ea9: 
1:a535ea9:     public void testUpdatableBlob () throws Exception {
1:3d7af4e:         getConnection().setAutoCommit (false);
1:3d7af4e:         PreparedStatement ps = prepareStatement ("insert into testblob " +
1:3d7af4e:                 "values (?)");
1:a535ea9:         //insert a large blob to ensure dvd gives out a stream and not
1:3d7af4e:         //a byte array
1:3d7af4e:         ps.setBinaryStream (1, new LoopingAlphabetStream (1024 * 1024), 1024 * 1024);
1:3d7af4e:         ps.executeUpdate();
1:3d7af4e:         ps.close();
1:3d7af4e:         Statement stmt = createStatement ();
1:3d7af4e:         ResultSet rs = stmt.executeQuery("select * from testblob");
1:3d7af4e:         rs.next();
1:3d7af4e:         Blob blob = rs.getBlob (1);
1:3d7af4e:         InputStream is = blob.getBinaryStream();
1:3d7af4e:         long l = is.skip (20);
1:3d7af4e:         //truncate blob after accessing original stream
1:3d7af4e:         blob.truncate (l);
1:3d7af4e:         int ret = is.read();
1:3d7af4e:         //should not be able to read after truncated value
1:a535ea9:         assertEquals ("stream update failed", -1, ret);
1:3d7af4e:         byte [] buffer = new byte [1024];
1:3d7af4e:         for (int i = 0; i < buffer.length; i++)
1:3d7af4e:             buffer [i] = (byte) (i % 255);
1:3d7af4e:         blob.setBytes (blob.length() + 1, buffer);
1:3d7af4e:         byte [] buff = new byte [1024];
1:3d7af4e:         int toRead = 1024;
1:3d7af4e:         while (toRead != 0 ) {
1:3d7af4e:             long read = is.read (buff, 1024 - toRead, toRead);
1:3d7af4e:             if (read < 0)
1:3d7af4e:                 fail ("couldn't retrieve updated value");
1:3d7af4e:             toRead -= read;
1:3d7af4e:         }
1:3d7af4e:         for (int i = 0; i < buffer.length; i++) {
1:3d7af4e:             assertEquals ("value retrieved is not same as updated value",
1:3d7af4e:                 buffer [i], buff [i]);
1:3d7af4e:         }
1:3d7af4e:         blob = null;
1:3d7af4e:         rs.close();
1:3d7af4e:         stmt.close();
1:3d7af4e:         commit();
1:3d7af4e:     }
1:a535ea9: 
1:3d7af4e:     public static Test suite () {
1:a8908bd:         return TestConfiguration.defaultSuite (
1:a535ea9:                 BlobUpdatableStreamTest.class);
1:3d7af4e:     }
1:a535ea9: 
1:3d7af4e:     public void setUp() throws  Exception {
1:3d7af4e:         Statement stmt = createStatement();
1:3d7af4e:         stmt.execute ("create table testblob (data blob)");
1:3d7af4e:         stmt.close();
1:a535ea9:     }
1:3d7af4e: 
1:3d7af4e:     protected void tearDown() throws Exception {
1:3d7af4e:         Statement stmt = createStatement();
1:3d7af4e:         stmt.execute ("drop table testblob");
1:3d7af4e:         stmt.close();
1:3d7af4e:         commit ();
1:3d7af4e:         super.tearDown();
1:a535ea9:     }
1:3d7af4e: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:a535ea9
/////////////////////////////////////////////////////////////////////////
1:  *   org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest
/////////////////////////////////////////////////////////////////////////
1:  * Test if blob stream updates itself to point to LOBInputStream
1: public class BlobUpdatableStreamTest extends BaseJDBCTestCase {
1:     public BlobUpdatableStreamTest (String name) {
1: 
1:     public void testUpdatableBlob () throws Exception {
1:         //insert a large blob to ensure dvd gives out a stream and not
/////////////////////////////////////////////////////////////////////////
1:         assertEquals ("stream update failed", -1, ret);
/////////////////////////////////////////////////////////////////////////
1: 
1:                 BlobUpdatableStreamTest.class);
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
1:     }
commit:3d7af4e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class 
0:  *   org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdateableStreamTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.InputStream;
1: import java.sql.Blob;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
0:  * Test if blob stream updates itself to point to LOBInputStream 
1:  * if the blob is updated after fetching the stream.
1:  */
0: public class BlobUpdateableStreamTest extends BaseJDBCTestCase {
0:     public BlobUpdateableStreamTest (String name) {
1:         super (name);
1:     }
1:     
0:     public void testUpdateableBlob () throws Exception {
1:         getConnection().setAutoCommit (false);
1:         PreparedStatement ps = prepareStatement ("insert into testblob " +
1:                 "values (?)");
0:         //insert a large blob to ensure dvd gives out a stream and not 
1:         //a byte array
1:         ps.setBinaryStream (1, new LoopingAlphabetStream (1024 * 1024), 1024 * 1024);
1:         ps.executeUpdate();
1:         ps.close();
1:         Statement stmt = createStatement ();
1:         ResultSet rs = stmt.executeQuery("select * from testblob");
1:         rs.next();
1:         Blob blob = rs.getBlob (1);
1:         InputStream is = blob.getBinaryStream();
1:         long l = is.skip (20);
1:         //truncate blob after accessing original stream
1:         blob.truncate (l);
1:         int ret = is.read();
1:         //should not be able to read after truncated value
0:         assertEquals ("stream update falield", -1, ret);
1:         byte [] buffer = new byte [1024];
1:         for (int i = 0; i < buffer.length; i++)
1:             buffer [i] = (byte) (i % 255);
1:         blob.setBytes (blob.length() + 1, buffer);
1:         byte [] buff = new byte [1024];
1:         int toRead = 1024;
1:         while (toRead != 0 ) {
1:             long read = is.read (buff, 1024 - toRead, toRead);
1:             if (read < 0)
1:                 fail ("couldn't retrieve updated value");
1:             toRead -= read;
1:         }
1:         for (int i = 0; i < buffer.length; i++) {
1:             assertEquals ("value retrieved is not same as updated value",
1:                 buffer [i], buff [i]);
1:         }
1:         blob = null;
1:         rs.close();
1:         stmt.close();
1:         commit();
1:     }
1:     
1:     public static Test suite () {
0:         return TestConfiguration.embeddedSuite (
0:                 BlobUpdateableStreamTest.class);
1:     }
1:     
1:     public void setUp() throws  Exception {
1:         Statement stmt = createStatement();
1:         stmt.execute ("create table testblob (data blob)");
1:         stmt.close();
1:     }    
1: 
1:     protected void tearDown() throws Exception {
1:         Statement stmt = createStatement();
1:         stmt.execute ("drop table testblob");
1:         stmt.close();
1:         commit ();
1:         super.tearDown();
1:     }       
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite (
============================================================================