1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.execute.xplain.XPLAINFactory
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.execute.xplain;
1:48a9884: 
1:48a9884: import java.sql.SQLException;
1:48a9884: 
1:48a9884: import org.apache.derby.iapi.error.StandardException;
1:48a9884: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:48a9884: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINFactoryIF;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:48a9884: 
1:48a9884: /**
1:48a9884:  * This is the module implementation of the XPLAINFactoryIF. It gets lazy-loaded
1:48a9884:  * when needed. The factory method determines which visitor to use. 
1:48a9884:  * The visitor is cached in this factory for later reuse. 
1:48a9884:  *
1:48a9884:  */
1:48a9884: public class XPLAINFactory implements XPLAINFactoryIF {
1:48a9884:     
1:48a9884:     /** the last instance of a visitor is cached */
1:48a9884:     private XPLAINVisitor currentVisitor = new XPLAINDefaultVisitor();
1:48a9884:     
1:48a9884:     /** the current cached schema */ 
1:48a9884:     private String       currentSchema = null;
1:48a9884:     
1:48a9884:     public XPLAINFactory(){
1:48a9884:     }
1:48a9884:     
1:48a9884:     /**
1:48a9884:      * the factory method, which gets called to determine 
1:48a9884:      * and return an appropriate XPLAINVisitor instance
1:48a9884:      */
1:48a9884:     public XPLAINVisitor getXPLAINVisitor()
1:48a9884:         throws StandardException
1:48a9884:     {
1:48a9884:         try
1:48a9884:         {
1:48a9884:             LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:48a9884:             String schema = lcc.getXplainSchema();
1:48a9884:             if (schema != currentSchema)
1:48a9884:             {
1:48a9884:                 currentSchema = schema;
1:48a9884:                 if (currentSchema == null)
1:48a9884:                     currentVisitor = new XPLAINDefaultVisitor();
1:48a9884:                 else
1:48a9884:                     currentVisitor = new XPLAINSystemTableVisitor();
1:48a9884:             }
1:48a9884:         }
1:48a9884:         catch (SQLException e)
1:48a9884:         {
1:48a9884:             throw StandardException.plainWrapException(e);
1:48a9884:         }
1:48a9884:         return currentVisitor;
1:48a9884:     }
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * uncache the visitor and reset the factory state
1:48a9884:      */
1:48a9884:     public void freeResources() {
1:48a9884:         // let the garbage collector destroy the visitor and schema
1:48a9884:         currentVisitor = null;
1:48a9884:         currentSchema = null;
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.xplain.XPLAINFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.execute.xplain;
1: 
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINFactoryIF;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
1: /**
1:  * This is the module implementation of the XPLAINFactoryIF. It gets lazy-loaded
1:  * when needed. The factory method determines which visitor to use. 
1:  * The visitor is cached in this factory for later reuse. 
1:  *
1:  */
1: public class XPLAINFactory implements XPLAINFactoryIF {
1:     
1:     /** the last instance of a visitor is cached */
1:     private XPLAINVisitor currentVisitor = new XPLAINDefaultVisitor();
1:     
1:     /** the current cached schema */ 
1:     private String       currentSchema = null;
1:     
1:     public XPLAINFactory(){
1:     }
1:     
1:     /**
1:      * the factory method, which gets called to determine 
1:      * and return an appropriate XPLAINVisitor instance
1:      */
1:     public XPLAINVisitor getXPLAINVisitor()
1:         throws StandardException
1:     {
1:         try
1:         {
1:             LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:             String schema = lcc.getXplainSchema();
1:             if (schema != currentSchema)
1:             {
1:                 currentSchema = schema;
1:                 if (currentSchema == null)
1:                     currentVisitor = new XPLAINDefaultVisitor();
1:                 else
1:                     currentVisitor = new XPLAINSystemTableVisitor();
1:             }
1:         }
1:         catch (SQLException e)
1:         {
1:             throw StandardException.plainWrapException(e);
1:         }
1:         return currentVisitor;
1:     }
1: 
1:     /**
1:      * uncache the visitor and reset the factory state
1:      */
1:     public void freeResources() {
1:         // let the garbage collector destroy the visitor and schema
1:         currentVisitor = null;
1:         currentSchema = null;
1:     }
1: 
1: }
============================================================================