1:5cf7a46: /*
2:5cf7a46: 
1:5cf7a46:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneInMemoryTest
1:5cf7a46: 
1:5cf7a46:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5cf7a46:    contributor license agreements.  See the NOTICE file distributed with
1:5cf7a46:    this work for additional information regarding copyright ownership.
1:5cf7a46:    The ASF licenses this file to you under the Apache License, Version 2.0
1:5cf7a46:    (the "License"); you may not use this file except in compliance with
1:5cf7a46:    the License.  You may obtain a copy of the License at
1:5cf7a46: 
1:5cf7a46:      http://www.apache.org/licenses/LICENSE-2.0
1:5cf7a46: 
1:5cf7a46:    Unless required by applicable law or agreed to in writing, software
1:5cf7a46:    distributed under the License is distributed on an "AS IS" BASIS,
1:5cf7a46:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5cf7a46:    See the License for the specific language governing permissions and
1:5cf7a46:    limitations under the License.
1:5cf7a46: 
1:5cf7a46:  */
1:5cf7a46: 
1:5cf7a46: package org.apache.derbyTesting.functionTests.tests.lang;
1:5cf7a46: 
1:5cf7a46: import java.sql.Connection;
1:5cf7a46: import junit.framework.Test;
1:5cf7a46: import org.apache.derbyTesting.functionTests.tests.memorydb.MemoryDbManager;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:5cf7a46: 
1:5cf7a46: /**
1:5cf7a46:  * <p>
1:5cf7a46:  * Test permissions on objects created by the optional Lucene support tool.
1:5cf7a46:  * </p>
1:5cf7a46:  */
1:5cf7a46: public class LuceneInMemoryTest extends GeneratedColumnsHelper
1:5cf7a46: {
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     // CONSTANTS
1:5cf7a46:     //
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:5cf7a46:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:5cf7a46:     private static  final   String      INDEX_POEMS =
1:a4e6298:         "call LuceneSupport.createIndex( 'app', 'poems', 'poemText', '" + LuceneCoarseAuthorizationTest.ENGLISH_ANALYZER + "' )";
1:5cf7a46:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'app', 'poems', 'poemText' )";
1:5cf7a46: 
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     // STATE
1:5cf7a46:     //
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * Helper for dealing with memory databases. For now we use a single
1:5cf7a46:      * instance for all test classes / cases, as the tests are run single
1:5cf7a46:      * threaded.
1:5cf7a46:      */
1:5cf7a46:     private static final MemoryDbManager dbm = MemoryDbManager.getSharedInstance();
1:5cf7a46: 
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     // CONSTRUCTOR
1:5cf7a46:     //
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * Create a new instance.
1:5cf7a46:      */
1:5cf7a46: 
1:5cf7a46:     public LuceneInMemoryTest(String name)
1:5cf7a46:     {
1:5cf7a46:         super( name );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     // JUnit BEHAVIOR
1:5cf7a46:     //
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46: 
1:5cf7a46:     public static Test suite()
1:5cf7a46:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite( "LuceneInMemoryTest" );
1:5cf7a46:         
1:5cf7a46:         Test    baseTest = TestConfiguration.embeddedSuite( LuceneInMemoryTest.class );
1:5cf7a46: 		suite.addTest( SecurityManagerSetup.noSecurityManager( baseTest) );
1:5cf7a46: 
1:5cf7a46:         return suite;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * Closes all opened statements and connections that are known, and also
1:5cf7a46:      * deletes all known in-memory databases.
1:5cf7a46:      *
1:5cf7a46:      * @throws Exception if something goes wrong
1:5cf7a46:      */
1:5cf7a46:     public void tearDown()  throws Exception
1:5cf7a46:     {
1:5cf7a46:         dbm.cleanUp();
1:5cf7a46:         super.tearDown();
1:5cf7a46:     }
1:5cf7a46:     
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     // TESTS
1:5cf7a46:     //
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /**
1:5cf7a46:      * <p>
1:5cf7a46:      * Test that you can create lucene indexes in an in-memory database.
1:5cf7a46:      * </p>
1:5cf7a46:      */
1:5cf7a46:     public  void    test_001_basic()
1:5cf7a46:         throws Exception
1:5cf7a46:     {
1:5cf7a46:         Connection  conn = dbm.createDatabase( "luceneMemDB" );
1:5cf7a46: 
1:5cf7a46:         LuceneCoarseAuthorizationTest.createSchema( conn );
1:5cf7a46: 
1:5cf7a46:         goodStatement( conn, LOAD_TOOL );
1:5cf7a46:         goodStatement( conn, INDEX_POEMS );
1:5cf7a46: 
1:5cf7a46:         String  readPoemsIndex =
1:5cf7a46:             "select p.originalAuthor, i.score\n" +
1:a4e6298:             "from poems p, table ( poems__poemText( 'star', 1000, null ) ) i\n" +
1:5cf7a46:             "where p.poemID = i.poemID and p.versionStamp = i.versionStamp\n" +
1:5cf7a46:             "order by i.score desc\n";
1:5cf7a46:         String[][]  defaultPoemResults =
1:5cf7a46:             new String[][]
1:5cf7a46:             {
1:5cf7a46:                 { "Walt Whitman", "0.26756266" },
1:5cf7a46:                 { "Lord Byron", "0.22933942" },
1:5cf7a46:                 { "John Milton", "0.22933942" },
1:5cf7a46:             };
1:5cf7a46: 
1:5cf7a46:         assertResults
1:5cf7a46:             (
1:5cf7a46:              conn,
1:5cf7a46:              readPoemsIndex,
1:5cf7a46:              defaultPoemResults,
1:5cf7a46:              false
1:5cf7a46:              );
1:5cf7a46: 
1:5cf7a46:         String  listIndexes =
1:a4e6298:             "select schemaName, tableName, columnName, indexDescriptorMaker from table( LuceneSupport.listIndexes() ) l";
1:5cf7a46:         String[][]  defaultIndexList =
1:5cf7a46:             new String[][]
1:5cf7a46:             {
1:a4e6298:                 { "APP", "POEMS", "POEMTEXT", LuceneCoarseAuthorizationTest.ENGLISH_ANALYZER },
1:5cf7a46:             };
1:5cf7a46: 
1:5cf7a46:         assertResults
1:5cf7a46:             (
1:5cf7a46:              conn,
1:5cf7a46:              listIndexes,
1:5cf7a46:              defaultIndexList,
1:5cf7a46:              false
1:5cf7a46:              );
1:5cf7a46: 
1:5cf7a46:         goodStatement( conn, DROP_POEMS_INDEX );
1:5cf7a46:         goodStatement( conn, UNLOAD_TOOL );
1:5cf7a46: 
1:5cf7a46:         LuceneCoarseAuthorizationTest.dropSchema( conn );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46: 
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     // MINIONS
1:5cf7a46:     //
1:5cf7a46:     ///////////////////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46: 
1:5cf7a46: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite( "LuceneInMemoryTest" );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1:         "call LuceneSupport.createIndex( 'app', 'poems', 'poemText', '" + LuceneCoarseAuthorizationTest.ENGLISH_ANALYZER + "' )";
/////////////////////////////////////////////////////////////////////////
1:             "from poems p, table ( poems__poemText( 'star', 1000, null ) ) i\n" +
/////////////////////////////////////////////////////////////////////////
1:             "select schemaName, tableName, columnName, indexDescriptorMaker from table( LuceneSupport.listIndexes() ) l";
1:                 { "APP", "POEMS", "POEMTEXT", LuceneCoarseAuthorizationTest.ENGLISH_ANALYZER },
commit:4cedf31
/////////////////////////////////////////////////////////////////////////
0:             "from poems p, table ( poems__poemText( 'star', null, 1000, null ) ) i\n" +
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneInMemoryTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
1: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.util.Properties;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.functionTests.tests.memorydb.MemoryDbManager;
1: 
1: /**
1:  * <p>
1:  * Test permissions on objects created by the optional Lucene support tool.
1:  * </p>
1:  */
1: public class LuceneInMemoryTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     private static  final   String      ENGLISH_ANALYZER =
0:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getEnglishAnalyzer";
1: 
1:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:     private static  final   String      INDEX_POEMS =
0:         "call LuceneSupport.createIndex( 'app', 'poems', 'poemText', '" + ENGLISH_ANALYZER + "' )";
1:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'app', 'poems', 'poemText' )";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Helper for dealing with memory databases. For now we use a single
1:      * instance for all test classes / cases, as the tests are run single
1:      * threaded.
1:      */
1:     private static final MemoryDbManager dbm = MemoryDbManager.getSharedInstance();
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public LuceneInMemoryTest(String name)
1:     {
1:         super( name );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public static Test suite()
1:     {
0: 		TestSuite suite = new TestSuite( "LuceneInMemoryTest" );
1:         
1:         Test    baseTest = TestConfiguration.embeddedSuite( LuceneInMemoryTest.class );
1: 		suite.addTest( SecurityManagerSetup.noSecurityManager( baseTest) );
1: 
1:         return suite;
1:     }
1: 
1:     /**
1:      * Closes all opened statements and connections that are known, and also
1:      * deletes all known in-memory databases.
1:      *
1:      * @throws Exception if something goes wrong
1:      */
1:     public void tearDown()  throws Exception
1:     {
1:         dbm.cleanUp();
1:         super.tearDown();
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that you can create lucene indexes in an in-memory database.
1:      * </p>
1:      */
1:     public  void    test_001_basic()
1:         throws Exception
1:     {
1:         Connection  conn = dbm.createDatabase( "luceneMemDB" );
1: 
1:         LuceneCoarseAuthorizationTest.createSchema( conn );
1: 
1:         goodStatement( conn, LOAD_TOOL );
1:         goodStatement( conn, INDEX_POEMS );
1: 
1:         String  readPoemsIndex =
1:             "select p.originalAuthor, i.score\n" +
0:             "from poems p, table ( poems__poemText( 'star', null, 1000, 0 ) ) i\n" +
1:             "where p.poemID = i.poemID and p.versionStamp = i.versionStamp\n" +
1:             "order by i.score desc\n";
1:         String[][]  defaultPoemResults =
1:             new String[][]
1:             {
1:                 { "Walt Whitman", "0.26756266" },
1:                 { "Lord Byron", "0.22933942" },
1:                 { "John Milton", "0.22933942" },
1:             };
1: 
1:         assertResults
1:             (
1:              conn,
1:              readPoemsIndex,
1:              defaultPoemResults,
1:              false
1:              );
1: 
1:         String  listIndexes =
0:             "select schemaName, tableName, columnName, analyzerMaker from table( LuceneSupport.listIndexes() ) l";
1:         String[][]  defaultIndexList =
1:             new String[][]
1:             {
0:                 { "APP", "POEMS", "POEMTEXT", ENGLISH_ANALYZER },
1:             };
1: 
1:         assertResults
1:             (
1:              conn,
1:              listIndexes,
1:              defaultIndexList,
1:              false
1:              );
1: 
1:         goodStatement( conn, DROP_POEMS_INDEX );
1:         goodStatement( conn, UNLOAD_TOOL );
1: 
1:         LuceneCoarseAuthorizationTest.dropSchema( conn );
1:     }
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================