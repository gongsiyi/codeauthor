1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.BinaryToRawStream
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.EOFException;
1:eac0369: 
2:eac0369: /**
1:94f158a: 	Converts a stream containing the Derby stored binary form
1:eac0369: 	to one that just contains the application's data.
1:5c20522: 	Simply read and save the length information.
1:eac0369: */
1:168957e: class BinaryToRawStream
1:eac0369: extends java.io.FilterInputStream
1:1f9b9c4: {
1:5c20522:     /**
1:5c20522:      * Length of the value represented by this stream.
1:5c20522:      * Set to -1 if the length is unknown.
1:5c20522:      */
1:5c20522:     private int length;
1:eac0369: 
1:eac0369:     // used by caller to insure that parent can not be GC'd until this
1:eac0369:     // stream is no longer being used.
1:eac0369:     private Object          parent;
1:eac0369: 
1:5c20522: 	BinaryToRawStream(InputStream in, Object parent) 
1:eac0369:         throws IOException
2:eac0369: 	{
1:eac0369: 		super(in);
1:eac0369: 
1:eac0369: 		this.parent     = parent;
1:eac0369: 
1:eac0369: 		int bl = in.read();
1:5c20522: 		if (bl == -1)
1:eac0369: 			throw new java.io.EOFException();
1:eac0369: 
1:eac0369: 		if ((bl & 0x80) != 0)
1:eac0369: 		{
1:eac0369: 			if (bl == 0xC0)
1:eac0369: 			{
1:eac0369: 				int v1 = in.read();
1:eac0369: 				int v2 = in.read();
1:eac0369: 				int v3 = in.read();
1:eac0369: 				int v4 = in.read();
1:eac0369: 
1:5c20522: 				if (v1 == -1 || v2 == -1 || v3 == -1 || v4 == -1)
1:eac0369: 					throw new java.io.EOFException();
1:5c20522:                 length = (((v1 & 0xff) << 24) |
1:5c20522:                           ((v2 & 0xff) << 16) |
1:5c20522:                           ((v3 & 0xff) << 8)  |
1:5c20522:                            (v4 & 0xff));
1:eac0369: 
1:eac0369: 			}
1:eac0369: 			else if (bl == 0xA0)
1:eac0369: 			{
1:eac0369: 				// read an unsigned short
1:eac0369: 				int v1 = in.read();
1:eac0369: 				int v2 = in.read();
1:5c20522: 				if (v1 == -1 || v2 == -1)
1:eac0369: 					throw new java.io.EOFException();
1:5c20522:                 length = (((v1 & 0xff) << 8) + (v2 & 0xff));
1:eac0369: 
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:5c20522: 				length = bl & 0x1F;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			// old length in bits
1:eac0369: 			int v2 = in.read();
1:eac0369: 			int v3 = in.read();
1:eac0369: 			int v4 = in.read();
1:5c20522: 			if (v2 == -1 || v3 == -1 || v4 == -1)
1:eac0369: 				throw new java.io.EOFException();
1:5c20522:             int lenInBits = (((bl & 0xff) << 24) | ((v2 & 0xff) << 16) | ((v3 & 0xff) << 8) | (v4 & 0xff));
1:eac0369: 
1:5c20522: 			length = lenInBits / 8;
1:5c20522: 			if ((lenInBits % 8) != 0)
1:5c20522: 			    length++;
1:5c20522:             
1:5c20522:             // Signifies unknown length
1:5c20522:             if (length == 0)
1:5c20522:                 length = -1;
1:eac0369: 		}
1:eac0369: 	}
1:5c20522:     
1:5c20522:     /**
1:5c20522:      * Return the length of the value in thie stream in bytes.
1:5c20522:      * If the value is unknown then -1 is returned.
1:5c20522:      */
1:5c20522:     int getLength()
1:5c20522:     {
1:5c20522:         return length;
1:5c20522:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:168957e
/////////////////////////////////////////////////////////////////////////
1: class BinaryToRawStream
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	Converts a stream containing the Derby stored binary form
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:5c20522
/////////////////////////////////////////////////////////////////////////
1: 	Simply read and save the length information.
1:     /**
1:      * Length of the value represented by this stream.
1:      * Set to -1 if the length is unknown.
1:      */
1:     private int length;
1: 	BinaryToRawStream(InputStream in, Object parent) 
1: 		if (bl == -1)
/////////////////////////////////////////////////////////////////////////
1: 				if (v1 == -1 || v2 == -1 || v3 == -1 || v4 == -1)
1:                 length = (((v1 & 0xff) << 24) |
1:                           ((v2 & 0xff) << 16) |
1:                           ((v3 & 0xff) << 8)  |
1:                            (v4 & 0xff));
/////////////////////////////////////////////////////////////////////////
1: 				if (v1 == -1 || v2 == -1)
1:                 length = (((v1 & 0xff) << 8) + (v2 & 0xff));
1: 				length = bl & 0x1F;
/////////////////////////////////////////////////////////////////////////
1: 			if (v2 == -1 || v3 == -1 || v4 == -1)
1:             int lenInBits = (((bl & 0xff) << 24) | ((v2 & 0xff) << 16) | ((v3 & 0xff) << 8) | (v4 & 0xff));
1: 			length = lenInBits / 8;
1: 			if ((lenInBits % 8) != 0)
1: 			    length++;
1:             
1:             // Signifies unknown length
1:             if (length == 0)
1:                 length = -1;
1:     
1:     /**
1:      * Return the length of the value in thie stream in bytes.
1:      * If the value is unknown then -1 is returned.
1:      */
1:     int getLength()
1:     {
1:         return length;
1:     }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.BinaryToRawStream
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
1: {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.io.EOFException;
1: 
1: /**
0: 	Converts a stream containing the Cloudscape stored binary form
1: 	to one that just contains the application's data.
0: 	Simply remove the length information.
1: */
0: final class BinaryToRawStream
1: extends java.io.FilterInputStream
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1:     // used by caller to insure that parent can not be GC'd until this
1:     // stream is no longer being used.
1:     private Object          parent;
1: 
0: 	public BinaryToRawStream(InputStream in, Object parent) 
1:         throws IOException
1: 	{
1: 		super(in);
1: 
1: 		this.parent     = parent;
1: 
0: 		// no need to calculate the actual length
0: 		// int len = 0;
1: 		int bl = in.read();
0: 		if (bl < 0)
1: 			throw new java.io.EOFException();
1: 
1: 		if ((bl & 0x80) != 0)
1: 		{
1: 			if (bl == 0xC0)
1: 			{
1: 				int v1 = in.read();
1: 				int v2 = in.read();
1: 				int v3 = in.read();
1: 				int v4 = in.read();
1: 
0: 				if (v1 < 0 || v2 < 0 || v3 < 0 || v4 < 0)
1: 					throw new java.io.EOFException();
0:                 //len = (((v1 & 0xff) << 24) | ((v2 & 0xff) << 16) | ((v3 & 0xff) << 8) | (v4 & 0xff));
1: 
1: 			}
1: 			else if (bl == 0xA0)
1: 			{
1: 				// read an unsigned short
1: 				int v1 = in.read();
1: 				int v2 = in.read();
0: 				if (v1 < 0 || v2 < 0)
1: 					throw new java.io.EOFException();
0:                 //len = (((v1 & 0xff) << 8) + (v2 & 0xff));
1: 
1: 			}
1: 			else
1: 			{
0: 				// len = bl & 0x1F;
1: 			}
1: 		}
1: 		else
1: 		{
1: 			// old length in bits
1: 			int v2 = in.read();
1: 			int v3 = in.read();
1: 			int v4 = in.read();
0: 			if (v2 < 0 || v3 < 0 || v4 < 0)
1: 				throw new java.io.EOFException();
0:             //int lenInBits = (((bl & 0xff) << 24) | ((v2 & 0xff) << 16) | ((v3 & 0xff) << 8) | (v4 & 0xff));
1: 
0: 			//len = lenInBits / 8;
0: 			//if ((lenInBits % 8) != 0)
0: 			//	len++;
1: 		}
1: 	}
1: }
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:da10c02
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:947123b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.Resetable;
0: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0: 
0: 	If source stream implements Resetable interface , 
0: 	the source can be shared among other objects and 
0: 	not closed when close method of this class was called.
0: 
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:     public void close() throws IOException{
0: 	
0: 	//Escape from closing source InputStream ,
0: 	//because source InputStream can be shared between other stream.
0: 	
0: 	if(in instanceof Resetable){
0: 	    try{
0: 		((Resetable) in).resetStream();
0: 		
0: 	    }catch(StandardException e){
0: 		e.printStackTrace();
0: 		throw new IOException(e.getMessage());
0: 	    }
0: 	    
0: 	}else{
0: 	    super.close();
0: 	    
0: 	}
0:     }
0:     
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.InputStream;
0: import java.io.IOException;
0: import java.io.EOFException;
0: 
0: /**
0: 	Converts a stream containing the Cloudscape stored binary form
0: 	to one that just contains the application's data.
0: 	Simply remove the length information.
0: */
0: final class BinaryToRawStream
0: extends java.io.FilterInputStream
0: { 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     // used by caller to insure that parent can not be GC'd until this
0:     // stream is no longer being used.
0:     private Object          parent;
0: 
0: 	public BinaryToRawStream(InputStream in, Object parent) 
0:         throws IOException
0: 	{
0: 		super(in);
0: 
0: 		this.parent     = parent;
0: 
0: 		// no need to calculate the actual length
0: 		// int len = 0;
0: 		int bl = in.read();
0: 		if (bl < 0)
0: 			throw new java.io.EOFException();
0: 
0: 		if ((bl & 0x80) != 0)
0: 		{
0: 			if (bl == 0xC0)
0: 			{
0: 				int v1 = in.read();
0: 				int v2 = in.read();
0: 				int v3 = in.read();
0: 				int v4 = in.read();
0: 
0: 				if (v1 < 0 || v2 < 0 || v3 < 0 || v4 < 0)
0: 					throw new java.io.EOFException();
0:                 //len = (((v1 & 0xff) << 24) | ((v2 & 0xff) << 16) | ((v3 & 0xff) << 8) | (v4 & 0xff));
0: 
0: 			}
0: 			else if (bl == 0xA0)
0: 			{
0: 				// read an unsigned short
0: 				int v1 = in.read();
0: 				int v2 = in.read();
0: 				if (v1 < 0 || v2 < 0)
0: 					throw new java.io.EOFException();
0:                 //len = (((v1 & 0xff) << 8) + (v2 & 0xff));
0: 
0: 			}
0: 			else
0: 			{
0: 				// len = bl & 0x1F;
0: 			}
0: 		}
0: 		else
0: 		{
0: 			// old length in bits
0: 			int v2 = in.read();
0: 			int v3 = in.read();
0: 			int v4 = in.read();
0: 			if (v2 < 0 || v3 < 0 || v4 < 0)
0: 				throw new java.io.EOFException();
0:             //int lenInBits = (((bl & 0xff) << 24) | ((v2 & 0xff) << 16) | ((v3 & 0xff) << 8) | (v4 & 0xff));
0: 
0: 			//len = lenInBits / 8;
0: 			//if ((lenInBits % 8) != 0)
0: 			//	len++;
0: 		}
0: 	}
0: }
============================================================================