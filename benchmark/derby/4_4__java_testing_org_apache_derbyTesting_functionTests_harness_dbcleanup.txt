1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.dbcleanup
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
39:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.sql.Connection;
1:67614ad: import java.sql.DriverManager;
1:67614ad: import java.sql.Statement;
1:67614ad: import java.sql.ResultSet;
1:67614ad: import java.sql.SQLException;
1:67614ad: import java.io.*;
1:67614ad: import java.util.*;
1:67614ad: 
1:67614ad: import org.apache.derby.tools.JDBCDisplayUtil;
1:67614ad: 
1:67614ad: /*
1:67614ad:  **
1:67614ad:  ** dbcleanup
1:67614ad:  **
1:67614ad:  ** Preliminary version:
1:67614ad:  **	gets rid of all the items in a database except those that
1:67614ad:  **	are present when a fresh database is created.  There are
1:67614ad:  **	some gaps still-- sync objects, and I have not done SYSFILES.
1:67614ad:  **	I have probably missed other things as well.  At present this
1:67614ad:  **	is hardwired for jdbc:derby:wombat, the focus of our
1:67614ad:  **	attention in the embedded tests.
1:67614ad:  **
1:67614ad:  */
1:67614ad: public class dbcleanup {
1:67614ad: 
1:67614ad: 	static String dbURL = "jdbc:derby:wombat";
1:67614ad: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1:67614ad: 	static boolean dbIsDirty = false;
1:67614ad: 
1:67614ad: 	int thread_id;
1:67614ad: 	int ind = 0;
1:67614ad: 
1:67614ad: 	public static void main(String[] args) throws SQLException, IOException,
1:67614ad: 		InterruptedException, Exception {
1:67614ad: 		doit(true);
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public static void doit(boolean dbIsNew) throws SQLException, IOException,
1:67614ad: 		InterruptedException, Exception {
1:67614ad: 
1:67614ad: 		Connection conn = null;
1:67614ad: 		Statement s = null;
1:67614ad: 		ResultSet rs = null;
1:67614ad: 		boolean finished = false;	
1:67614ad: 		Date d = new Date();
1:67614ad: 
1:67614ad:         	Properties dbclProps = System.getProperties();
1:67614ad: 		String systemHome = dbclProps.getProperty("user.dir") + File.separatorChar +
1:67614ad: 			"testCSHome";
1:67614ad:         	dbclProps.put("derby.system.home", systemHome);
1:67614ad:         	System.setProperties(dbclProps);
1:67614ad: 
1:67614ad: 		boolean useprocess = true;
1:67614ad: 		String up = dbclProps.getProperty("useprocess");
1:67614ad: 		if (up != null && up.equals("false"))
1:67614ad: 			useprocess = false;		
1:67614ad: 		
1:67614ad:     		PrintStream stdout = System.out;
1:67614ad:     		PrintStream stderr = System.err;
1:67614ad: 
1:4469400:             Class<?> clazz = Class.forName(driver);
1:4469400:             clazz.getConstructor().newInstance();
1:67614ad: 
1:67614ad: 		if (dbIsNew) {
1:67614ad: 		try {
1:67614ad: 			conn = DriverManager.getConnection(dbURL +
1:67614ad: 				";create=true");
1:67614ad: 			conn.setAutoCommit(false);
1:67614ad: 			System.out.println("created " + dbURL + " " + d);
1:67614ad: //FIX: temporarily we will always cleanup, so skip the shutdown
1:67614ad: //			conn.close();
1:67614ad: 			// shutdown required only if 2 processes access database
1:67614ad: //			if (useprocess) doshutdown();
1:67614ad: 		//	return;
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			System.out.println("connect failed for " + dbURL);
1:67614ad: 			JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 			System.exit(1);
1:67614ad: 		}
1:67614ad: 		}
1:67614ad: 		else {
1:67614ad: 		try {
1:67614ad: 			conn = DriverManager.getConnection(dbURL);
1:67614ad: 			conn.setAutoCommit(false);
1:67614ad: 			System.out.println("connected to " + dbURL + " " + d);
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			System.out.println("connect failed for " + dbURL);
1:67614ad: 			JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 			System.exit(1);
1:67614ad: 		}
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		d = new Date();
1:67614ad: 		System.out.println("dbcleanup starting: " + d);
1:67614ad: 
1:67614ad: 		Enumeration schemalist = null;
1:67614ad: 		Enumeration list = null;
1:3f5c48a: 		Vector<String> schemavec = new Vector<String>();
1:3f5c48a: 		Vector<String> tablevec = null;
1:67614ad: 		// get a list of the user schemas
1:67614ad: 		try {
1:67614ad: 			s = conn.createStatement();
1:67614ad: 			rs = s.executeQuery( " select schemaname from sys.sysschemas " +
1:67614ad: 				" where schemaname <> 'SYS'"); 
1:67614ad: 			while (rs.next()) { 
1:67614ad: 				schemavec.addElement(new String(rs.getString(1)));
1:67614ad: 			}
1:67614ad: 			rs.close();
1:67614ad: 			if (schemavec.size() > 1) {
1:67614ad: 				// there is at least one schema to clean up
1:67614ad: 				dbIsDirty = true;
1:67614ad: 			}
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			System.out.println("select schemas: FAIL -- unexpected exception:");
1:67614ad: 			JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 			System.exit(1);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		// for each user schema, drop the objects
1:67614ad: 		String schema = null;
1:67614ad: 		String n = null;
1:67614ad: 		boolean viewdependencyFound = false;
1:67614ad: 		boolean tabledependencyFound = false;
1:3f5c48a: 		Vector<String> viewvec = null;
1:67614ad: 		int count = 0;
1:67614ad: 		for (schemalist = schemavec.elements(); schemalist.hasMoreElements();) {
1:67614ad: 			schema = (String)schemalist.nextElement();
1:67614ad: 			for (viewdependencyFound = true; viewdependencyFound;){
1:67614ad: 				viewdependencyFound = false;
1:67614ad: 				viewvec = findTables(conn, s, 'V', schema);
1:67614ad: 				//for (list = viewvec.elements(); list.hasMoreElements();)
1:67614ad: 				//	System.out.println("\t" + list.nextElement());
1:67614ad: 				if (viewvec.size() > 0) {
1:67614ad: 					System.out.println("schema " + schema);
1:67614ad: 					viewdependencyFound = dropTables(conn, s, viewvec, "view");
1:67614ad: 				}
1:67614ad: 			}
1:67614ad: 
1:67614ad: 			for (tabledependencyFound = true; tabledependencyFound;){
1:67614ad: 				tabledependencyFound = false;
1:67614ad: 				tablevec = findTables(conn, s, 'T', schema);
1:67614ad: 				if (tablevec.size() > 0) {
1:67614ad: 					System.out.println("schema " + schema);
1:67614ad: 					tabledependencyFound = 
1:67614ad: 						dropTables(conn, s, tablevec, "table");
1:67614ad: 				}
1:67614ad: 			}
1:67614ad: 
1:3f5c48a: 			Vector<String> stmtvec = new Vector<String>();
1:67614ad: 			try {
1:67614ad: 				rs = s.executeQuery( " select stmtname " +
1:67614ad: 					" from sys.sysstatements t, sys.sysschemas  s " +
1:67614ad: 					" where t.schemaid = s.schemaid " +
1:67614ad: 					" and s.schemaname = '" + schema + "'");
1:67614ad: 				for (count = 0; rs.next(); count++) { 
1:67614ad: 					dbIsDirty = true;
1:67614ad: 					stmtvec.addElement(new String(rs.getString(1)));
1:67614ad: 				}
1:67614ad: 				rs.close();
1:67614ad: 			} catch (SQLException  se) {
1:67614ad: 				System.out.println("select statements: FAIL -- unexpected exception:");
1:67614ad: 				JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 				System.exit(1);
1:67614ad: 			}
1:67614ad: 
1:67614ad: 			if (count > 1) {
1:67614ad: 			try {
1:67614ad: 				System.out.println("schema " + schema);
1:67614ad: 				System.out.println("dropping leftover statements: ");
1:67614ad: 				for (list = stmtvec.elements(); list.hasMoreElements();) {
1:67614ad: 					n = (String)list.nextElement();
1:67614ad: 					s.execute("drop statement " + n);
1:67614ad: 					conn.commit();
1:67614ad: 					System.out.println("\t" + n);
1:67614ad: 				}
1:67614ad: 			} catch (SQLException  se) {
1:67614ad: 				System.out.println("drop statement: FAIL -- unexpected exception:");
1:67614ad: 				JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 				System.exit(1);
1:67614ad: 			}
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 		// drop every user schema except APP
1:67614ad: 		if (schemavec.size() > 1) {
1:67614ad: 		System.out.println("dropping extra user schemas: ");
1:67614ad: 		schemalist = null;
1:67614ad: 		for (schemalist = schemavec.elements(); schemalist.hasMoreElements();) {
1:67614ad: 			schema = (String)schemalist.nextElement();
1:67614ad: 			if (schema.equals("APP")) continue;
1:67614ad: 			if (schema == null) {
1:67614ad: 				System.out.println("null schema in schemalist");
1:67614ad: 				continue;
1:67614ad: 			}
1:67614ad: 			try {
1:67614ad: 				System.out.println("\t" + schema);
1:67614ad: 				s.execute("drop schema \"" + schema + "\"");
1:67614ad: 			} catch (SQLException  se) {
1:67614ad: 				System.out.println("drop schema: FAIL -- unexpected exception:");
1:67614ad: 				JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 				System.exit(1);
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 		}
1:67614ad: 		// drop all method aliases
1:67614ad: 		dropAliases(conn, 'M');
1:67614ad: 		dropAliases(conn, 'C');
1:67614ad: 
1:67614ad: 		// DEBUG: help figure out what's going on with extra entries in sysdepends
1:67614ad: 		try {
1:67614ad: 			rs = s.executeQuery("select count (*) from sys.sysdepends");
1:67614ad: 			if (rs.next()) {
1:67614ad: 				int i = rs.getInt(1);
1:67614ad: 				if (i > 0)
1:67614ad: 					System.out.println("found " + i + " leftover dependencies");
1:67614ad: 			}
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			System.out.println("drop schema: FAIL -- unexpected exception:");
1:67614ad: 			JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 			System.exit(1);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		// shutdown required only if 2 processes access database
1:67614ad: 		if (useprocess) doshutdown();
1:67614ad: 		//conn.close();
1:67614ad: 		d = new Date();
1:67614ad: 		System.out.println("dbcleanup finished: " + d);
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void doshutdown() {
1:67614ad: 		Connection conn = null;
1:67614ad: 		try {
1:67614ad: 			conn = DriverManager.getConnection(dbURL +
1:67614ad: 				";shutdown=true");
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			if (se.getSQLState().equals("08006")){
1:67614ad: 				System.out.println("shutting down " + dbURL);
1:67614ad: 			}
1:67614ad: 			else {
1:67614ad: 				System.out.println("shutdown failed for " + dbURL);
1:67614ad: 				JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 				System.exit(1);
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static boolean dropTables(Connection conn, Statement s, Vector tablevec,
1:67614ad: 		String tabletype) throws Exception {
1:67614ad: 
1:67614ad: 		boolean dependencyFound = false;
1:67614ad: 		String n = null;
1:67614ad: 
1:67614ad: 		String objtype = null;
1:67614ad: 		System.out.println("dropping " + tabletype + "(s)");
1:67614ad: 
1:67614ad: 		for (Enumeration list = tablevec.elements(); list.hasMoreElements();) {
1:67614ad: 			n = (String)list.nextElement();
1:67614ad: 			try {
1:67614ad: 				s.execute("drop " + tabletype + " " + n);
1:67614ad: 				conn.commit();
1:67614ad: 				System.out.println("\t" + n);
1:67614ad: 			} catch (SQLException  se) {
1:67614ad: 				if (se.getSQLState().equals("X0Y25")){
1:67614ad: 					dependencyFound=true;
1:67614ad: 					//System.out.println("error X0Y25: " + se.getMessage());
1:67614ad: 					System.out.println(n + " not droped due to dependency, will retry a bit later");
1:67614ad: 				}
1:67614ad: 				else if (se.getSQLState().equals("X0Y23")){
1:67614ad: 					dependencyFound=true;
1:67614ad: 					//System.out.println("error X0Y23: " + se.getMessage());
1:67614ad: 					System.out.println(n + " not droped due to dependency, will retry a bit later");
1:67614ad: 				}
1:67614ad: 				else {
1:67614ad: 					System.out.println("drop table: FAIL -- unexpected exception:");
1:67614ad: 					JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 					System.exit(1);
1:67614ad: 		//FIX exits
1:67614ad: 				}
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 		return(dependencyFound);
1:67614ad: 	}
1:67614ad: 
1:3f5c48a: 	static  Vector<String> findTables(Connection conn, Statement s, char c, String schema) throws Exception {
1:67614ad: 
1:67614ad: 		ResultSet rs = null;
1:3f5c48a: 		Vector<String> tableviewvec = new Vector<String>();
1:67614ad: 
1:67614ad: 		try {
1:67614ad: 			rs = s.executeQuery( " select t.tablename " +
1:67614ad: 				" from sys.systables t, sys.sysschemas  s " +
1:67614ad: 				" where t.schemaid = s.schemaid " +
1:67614ad: 				" and t.tabletype = '" + c + "'" +
1:67614ad: 				" and s.schemaname = '" + schema + "'" );
1:67614ad: 			while (rs.next()) { 
1:67614ad: 				dbIsDirty = true;
1:67614ad: 				tableviewvec.addElement(new String(rs.getString(1)));
1:67614ad: 			}
1:67614ad: 			rs.close();
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			System.out.println("select tables: FAIL -- unexpected exception:");
1:67614ad: 			JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 			System.exit(1);
1:67614ad: 		//FIX exits
1:67614ad: 		}
1:67614ad: 		return(tableviewvec);
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void dropAliases (Connection conn, char aliastype) throws Exception {
1:67614ad: 		
1:67614ad: 		ResultSet rs = null;
1:67614ad: 		Statement s = null;
1:67614ad: 		String typestring = null;
1:3f5c48a: 		Vector<String> aliasvec = new Vector<String>();
1:67614ad: 		String n = null;
1:67614ad: 		int count = 0;
1:67614ad: 
1:67614ad: 		if (aliastype == 'M') typestring = "method";
1:67614ad: 		else if (aliastype == 'C') typestring = "class";
1:67614ad: 
1:67614ad: 		try {
1:67614ad: 			s = conn.createStatement();
1:67614ad: 			rs = s.executeQuery("select alias, aliastype from sys.sysaliases " +
1:67614ad: 				" where systemalias = false " + 
1:67614ad: 				" and aliastype = '" + aliastype + "'");
1:67614ad: 			for (count = 0; rs.next(); count++) {
1:67614ad: 				dbIsDirty = true;
1:67614ad: 				aliasvec.addElement(new String(rs.getString(1)));
1:67614ad: 			}
1:67614ad: 			rs.close();
1:67614ad: 			conn.commit();
1:67614ad: 		} catch (SQLException  se) {
1:67614ad: 			System.out.println("drop alias: FAIL -- unexpected exception:");
1:67614ad: 			JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 			System.exit(1);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		if (count > 1) {
1:67614ad: 		System.out.println("dropping user aliases, type " + typestring + ": ");
1:67614ad: 		for (Enumeration list = aliasvec.elements(); list.hasMoreElements();) {
1:67614ad: 			n = (String)list.nextElement();
1:67614ad: 			try {
1:67614ad: 				s.execute("drop " + typestring + " alias " + n);
1:67614ad: 			} catch (SQLException  se) {
1:67614ad: 				System.out.println("drop alias: FAIL -- unexpected exception:");
1:67614ad: 				JDBCDisplayUtil.ShowException(System.out, se);
1:67614ad: 				System.exit(1);
1:67614ad: 			}
1:67614ad: 			conn.commit();
1:67614ad: 			System.out.println("\t" + n);
1:67614ad: 		}
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName(driver);
1:             clazz.getConstructor().newInstance();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		Vector<String> schemavec = new Vector<String>();
1: 		Vector<String> tablevec = null;
/////////////////////////////////////////////////////////////////////////
1: 		Vector<String> viewvec = null;
/////////////////////////////////////////////////////////////////////////
1: 			Vector<String> stmtvec = new Vector<String>();
/////////////////////////////////////////////////////////////////////////
1: 	static  Vector<String> findTables(Connection conn, Statement s, char c, String schema) throws Exception {
1: 		Vector<String> tableviewvec = new Vector<String>();
/////////////////////////////////////////////////////////////////////////
1: 		Vector<String> aliasvec = new Vector<String>();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.Statement;
0: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.io.*;
1: import java.util.*;
0: import java.lang.Long;
0: import java.util.Vector;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /*
1:  **
1:  ** dbcleanup
1:  **
1:  ** Preliminary version:
1:  **	gets rid of all the items in a database except those that
1:  **	are present when a fresh database is created.  There are
1:  **	some gaps still-- sync objects, and I have not done SYSFILES.
1:  **	I have probably missed other things as well.  At present this
1:  **	is hardwired for jdbc:derby:wombat, the focus of our
1:  **	attention in the embedded tests.
1:  **
1:  */
1: public class dbcleanup {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	static String dbURL = "jdbc:derby:wombat";
1: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1: 	static boolean dbIsDirty = false;
1: 
1: 	int thread_id;
1: 	int ind = 0;
1: 
1: 	public static void main(String[] args) throws SQLException, IOException,
1: 		InterruptedException, Exception {
1: 		doit(true);
1: 	}
1: 
1: 	public static void doit(boolean dbIsNew) throws SQLException, IOException,
1: 		InterruptedException, Exception {
1: 
1: 		Connection conn = null;
1: 		Statement s = null;
1: 		ResultSet rs = null;
1: 		boolean finished = false;	
1: 		Date d = new Date();
1: 
1:         	Properties dbclProps = System.getProperties();
1: 		String systemHome = dbclProps.getProperty("user.dir") + File.separatorChar +
1: 			"testCSHome";
1:         	dbclProps.put("derby.system.home", systemHome);
1:         	System.setProperties(dbclProps);
1: 
1: 		boolean useprocess = true;
1: 		String up = dbclProps.getProperty("useprocess");
1: 		if (up != null && up.equals("false"))
1: 			useprocess = false;		
1: 		
1:     		PrintStream stdout = System.out;
1:     		PrintStream stderr = System.err;
1: 
0: 		Class.forName(driver).newInstance();
1: 
1: 		if (dbIsNew) {
1: 		try {
1: 			conn = DriverManager.getConnection(dbURL +
1: 				";create=true");
1: 			conn.setAutoCommit(false);
1: 			System.out.println("created " + dbURL + " " + d);
1: //FIX: temporarily we will always cleanup, so skip the shutdown
1: //			conn.close();
1: 			// shutdown required only if 2 processes access database
1: //			if (useprocess) doshutdown();
1: 		//	return;
1: 		} catch (SQLException  se) {
1: 			System.out.println("connect failed for " + dbURL);
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			System.exit(1);
1: 		}
1: 		}
1: 		else {
1: 		try {
1: 			conn = DriverManager.getConnection(dbURL);
1: 			conn.setAutoCommit(false);
1: 			System.out.println("connected to " + dbURL + " " + d);
1: 		} catch (SQLException  se) {
1: 			System.out.println("connect failed for " + dbURL);
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			System.exit(1);
1: 		}
1: 		}
1: 
1: 		d = new Date();
1: 		System.out.println("dbcleanup starting: " + d);
1: 
1: 		Enumeration schemalist = null;
1: 		Enumeration list = null;
0: 		Vector schemavec = new Vector();
0: 		Vector tablevec = null;
1: 		// get a list of the user schemas
1: 		try {
1: 			s = conn.createStatement();
1: 			rs = s.executeQuery( " select schemaname from sys.sysschemas " +
1: 				" where schemaname <> 'SYS'"); 
1: 			while (rs.next()) { 
1: 				schemavec.addElement(new String(rs.getString(1)));
1: 			}
1: 			rs.close();
1: 			if (schemavec.size() > 1) {
1: 				// there is at least one schema to clean up
1: 				dbIsDirty = true;
1: 			}
1: 		} catch (SQLException  se) {
1: 			System.out.println("select schemas: FAIL -- unexpected exception:");
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			System.exit(1);
1: 		}
1: 
1: 		// for each user schema, drop the objects
1: 		String schema = null;
1: 		String n = null;
1: 		boolean viewdependencyFound = false;
1: 		boolean tabledependencyFound = false;
0: 		Vector viewvec = null;
1: 		int count = 0;
1: 		for (schemalist = schemavec.elements(); schemalist.hasMoreElements();) {
1: 			schema = (String)schemalist.nextElement();
1: 			for (viewdependencyFound = true; viewdependencyFound;){
1: 				viewdependencyFound = false;
1: 				viewvec = findTables(conn, s, 'V', schema);
1: 				//for (list = viewvec.elements(); list.hasMoreElements();)
1: 				//	System.out.println("\t" + list.nextElement());
1: 				if (viewvec.size() > 0) {
1: 					System.out.println("schema " + schema);
1: 					viewdependencyFound = dropTables(conn, s, viewvec, "view");
1: 				}
1: 			}
1: 
1: 			for (tabledependencyFound = true; tabledependencyFound;){
1: 				tabledependencyFound = false;
1: 				tablevec = findTables(conn, s, 'T', schema);
1: 				if (tablevec.size() > 0) {
1: 					System.out.println("schema " + schema);
1: 					tabledependencyFound = 
1: 						dropTables(conn, s, tablevec, "table");
1: 				}
1: 			}
1: 
0: 			Vector stmtvec = new Vector();
1: 			try {
1: 				rs = s.executeQuery( " select stmtname " +
1: 					" from sys.sysstatements t, sys.sysschemas  s " +
1: 					" where t.schemaid = s.schemaid " +
1: 					" and s.schemaname = '" + schema + "'");
1: 				for (count = 0; rs.next(); count++) { 
1: 					dbIsDirty = true;
1: 					stmtvec.addElement(new String(rs.getString(1)));
1: 				}
1: 				rs.close();
1: 			} catch (SQLException  se) {
1: 				System.out.println("select statements: FAIL -- unexpected exception:");
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 				System.exit(1);
1: 			}
1: 
1: 			if (count > 1) {
1: 			try {
1: 				System.out.println("schema " + schema);
1: 				System.out.println("dropping leftover statements: ");
1: 				for (list = stmtvec.elements(); list.hasMoreElements();) {
1: 					n = (String)list.nextElement();
1: 					s.execute("drop statement " + n);
1: 					conn.commit();
1: 					System.out.println("\t" + n);
1: 				}
1: 			} catch (SQLException  se) {
1: 				System.out.println("drop statement: FAIL -- unexpected exception:");
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 				System.exit(1);
1: 			}
1: 			}
1: 		}
1: 		// drop every user schema except APP
1: 		if (schemavec.size() > 1) {
1: 		System.out.println("dropping extra user schemas: ");
1: 		schemalist = null;
1: 		for (schemalist = schemavec.elements(); schemalist.hasMoreElements();) {
1: 			schema = (String)schemalist.nextElement();
1: 			if (schema.equals("APP")) continue;
1: 			if (schema == null) {
1: 				System.out.println("null schema in schemalist");
1: 				continue;
1: 			}
1: 			try {
1: 				System.out.println("\t" + schema);
1: 				s.execute("drop schema \"" + schema + "\"");
1: 			} catch (SQLException  se) {
1: 				System.out.println("drop schema: FAIL -- unexpected exception:");
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 				System.exit(1);
1: 			}
1: 		}
1: 		}
1: 		// drop all method aliases
1: 		dropAliases(conn, 'M');
1: 		dropAliases(conn, 'C');
1: 
1: 		// DEBUG: help figure out what's going on with extra entries in sysdepends
1: 		try {
1: 			rs = s.executeQuery("select count (*) from sys.sysdepends");
1: 			if (rs.next()) {
1: 				int i = rs.getInt(1);
1: 				if (i > 0)
1: 					System.out.println("found " + i + " leftover dependencies");
1: 			}
1: 		} catch (SQLException  se) {
1: 			System.out.println("drop schema: FAIL -- unexpected exception:");
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			System.exit(1);
1: 		}
1: 
1: 		// shutdown required only if 2 processes access database
1: 		if (useprocess) doshutdown();
1: 		//conn.close();
1: 		d = new Date();
1: 		System.out.println("dbcleanup finished: " + d);
1: 	}
1: 
1: 	static void doshutdown() {
1: 		Connection conn = null;
1: 		try {
1: 			conn = DriverManager.getConnection(dbURL +
1: 				";shutdown=true");
1: 		} catch (SQLException  se) {
1: 			if (se.getSQLState().equals("08006")){
1: 				System.out.println("shutting down " + dbURL);
1: 			}
1: 			else {
1: 				System.out.println("shutdown failed for " + dbURL);
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 				System.exit(1);
1: 			}
1: 		}
1: 	}
1: 
1: 	static boolean dropTables(Connection conn, Statement s, Vector tablevec,
1: 		String tabletype) throws Exception {
1: 
1: 		boolean dependencyFound = false;
1: 		String n = null;
1: 
1: 		String objtype = null;
1: 		System.out.println("dropping " + tabletype + "(s)");
1: 
1: 		for (Enumeration list = tablevec.elements(); list.hasMoreElements();) {
1: 			n = (String)list.nextElement();
1: 			try {
1: 				s.execute("drop " + tabletype + " " + n);
1: 				conn.commit();
1: 				System.out.println("\t" + n);
1: 			} catch (SQLException  se) {
1: 				if (se.getSQLState().equals("X0Y25")){
1: 					dependencyFound=true;
1: 					//System.out.println("error X0Y25: " + se.getMessage());
1: 					System.out.println(n + " not droped due to dependency, will retry a bit later");
1: 				}
1: 				else if (se.getSQLState().equals("X0Y23")){
1: 					dependencyFound=true;
1: 					//System.out.println("error X0Y23: " + se.getMessage());
1: 					System.out.println(n + " not droped due to dependency, will retry a bit later");
1: 				}
1: 				else {
1: 					System.out.println("drop table: FAIL -- unexpected exception:");
1: 					JDBCDisplayUtil.ShowException(System.out, se);
1: 					System.exit(1);
1: 		//FIX exits
1: 				}
1: 			}
1: 		}
1: 		return(dependencyFound);
1: 	}
1: 
0: 	static  Vector findTables(Connection conn, Statement s, char c, String schema) throws Exception {
1: 
1: 		ResultSet rs = null;
0: 		Vector tableviewvec = new Vector();
1: 
1: 		try {
1: 			rs = s.executeQuery( " select t.tablename " +
1: 				" from sys.systables t, sys.sysschemas  s " +
1: 				" where t.schemaid = s.schemaid " +
1: 				" and t.tabletype = '" + c + "'" +
1: 				" and s.schemaname = '" + schema + "'" );
1: 			while (rs.next()) { 
1: 				dbIsDirty = true;
1: 				tableviewvec.addElement(new String(rs.getString(1)));
1: 			}
1: 			rs.close();
1: 		} catch (SQLException  se) {
1: 			System.out.println("select tables: FAIL -- unexpected exception:");
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			System.exit(1);
1: 		//FIX exits
1: 		}
1: 		return(tableviewvec);
1: 	}
1: 
1: 	static void dropAliases (Connection conn, char aliastype) throws Exception {
1: 		
1: 		ResultSet rs = null;
1: 		Statement s = null;
1: 		String typestring = null;
0: 		Vector aliasvec = new Vector();
1: 		String n = null;
1: 		int count = 0;
1: 
1: 		if (aliastype == 'M') typestring = "method";
1: 		else if (aliastype == 'C') typestring = "class";
1: 
1: 		try {
1: 			s = conn.createStatement();
1: 			rs = s.executeQuery("select alias, aliastype from sys.sysaliases " +
1: 				" where systemalias = false " + 
1: 				" and aliastype = '" + aliastype + "'");
1: 			for (count = 0; rs.next(); count++) {
1: 				dbIsDirty = true;
1: 				aliasvec.addElement(new String(rs.getString(1)));
1: 			}
1: 			rs.close();
1: 			conn.commit();
1: 		} catch (SQLException  se) {
1: 			System.out.println("drop alias: FAIL -- unexpected exception:");
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 			System.exit(1);
1: 		}
1: 
1: 		if (count > 1) {
1: 		System.out.println("dropping user aliases, type " + typestring + ": ");
1: 		for (Enumeration list = aliasvec.elements(); list.hasMoreElements();) {
1: 			n = (String)list.nextElement();
1: 			try {
1: 				s.execute("drop " + typestring + " alias " + n);
1: 			} catch (SQLException  se) {
1: 				System.out.println("drop alias: FAIL -- unexpected exception:");
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 				System.exit(1);
1: 			}
1: 			conn.commit();
1: 			System.out.println("\t" + n);
1: 		}
1: 		}
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.dbcleanup
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
0: import java.io.*;
0: import java.util.*;
0: import java.lang.Long;
0: import java.util.Vector;
1: 
0: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
0: /*
0:  **
0:  ** dbcleanup
0:  **
0:  ** Preliminary version:
0:  **	gets rid of all the items in a database except those that
0:  **	are present when a fresh database is created.  There are
0:  **	some gaps still-- sync objects, and I have not done SYSFILES.
0:  **	I have probably missed other things as well.  At present this
0:  **	is hardwired for jdbc:derby:wombat, the focus of our
0:  **	attention in the embedded tests.
0:  **
0:  */
0: public class dbcleanup {
1: 
0: 	static String dbURL = "jdbc:derby:wombat";
0: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
0: 	static boolean dbIsDirty = false;
1: 
0: 	int thread_id;
0: 	int ind = 0;
1: 
0: 	public static void main(String[] args) throws SQLException, IOException,
0: 		InterruptedException, Exception {
0: 		doit(true);
0: 	}
1: 
0: 	public static void doit(boolean dbIsNew) throws SQLException, IOException,
0: 		InterruptedException, Exception {
1: 
0: 		Connection conn = null;
0: 		Statement s = null;
0: 		ResultSet rs = null;
0: 		boolean finished = false;	
0: 		Date d = new Date();
1: 
0:         	Properties dbclProps = System.getProperties();
0: 		String systemHome = dbclProps.getProperty("user.dir") + File.separatorChar +
0: 			"testCSHome";
0:         	dbclProps.put("derby.system.home", systemHome);
0:         	System.setProperties(dbclProps);
1: 
0: 		boolean useprocess = true;
0: 		String up = dbclProps.getProperty("useprocess");
0: 		if (up != null && up.equals("false"))
0: 			useprocess = false;		
1: 		
0:     		PrintStream stdout = System.out;
0:     		PrintStream stderr = System.err;
1: 
0: 		Class.forName(driver).newInstance();
1: 
0: 		if (dbIsNew) {
0: 		try {
0: 			conn = DriverManager.getConnection(dbURL +
0: 				";create=true");
0: 			conn.setAutoCommit(false);
0: 			System.out.println("created " + dbURL + " " + d);
0: //FIX: temporarily we will always cleanup, so skip the shutdown
0: //			conn.close();
0: 			// shutdown required only if 2 processes access database
0: //			if (useprocess) doshutdown();
0: 		//	return;
0: 		} catch (SQLException  se) {
0: 			System.out.println("connect failed for " + dbURL);
0: 			JDBCDisplayUtil.ShowException(System.out, se);
0: 			System.exit(1);
0: 		}
0: 		}
0: 		else {
0: 		try {
0: 			conn = DriverManager.getConnection(dbURL);
0: 			conn.setAutoCommit(false);
0: 			System.out.println("connected to " + dbURL + " " + d);
0: 		} catch (SQLException  se) {
0: 			System.out.println("connect failed for " + dbURL);
0: 			JDBCDisplayUtil.ShowException(System.out, se);
0: 			System.exit(1);
0: 		}
0: 		}
1: 
0: 		d = new Date();
0: 		System.out.println("dbcleanup starting: " + d);
1: 
0: 		Enumeration schemalist = null;
0: 		Enumeration list = null;
0: 		Vector schemavec = new Vector();
0: 		Vector tablevec = null;
0: 		// get a list of the user schemas
0: 		try {
0: 			s = conn.createStatement();
0: 			rs = s.executeQuery( " select schemaname from sys.sysschemas " +
0: 				" where schemaname <> 'SYS'"); 
0: 			while (rs.next()) { 
0: 				schemavec.addElement(new String(rs.getString(1)));
0: 			}
0: 			rs.close();
0: 			if (schemavec.size() > 1) {
0: 				// there is at least one schema to clean up
0: 				dbIsDirty = true;
0: 			}
0: 		} catch (SQLException  se) {
0: 			System.out.println("select schemas: FAIL -- unexpected exception:");
0: 			JDBCDisplayUtil.ShowException(System.out, se);
0: 			System.exit(1);
0: 		}
1: 
0: 		// for each user schema, drop the objects
0: 		String schema = null;
0: 		String n = null;
0: 		boolean viewdependencyFound = false;
0: 		boolean tabledependencyFound = false;
0: 		Vector viewvec = null;
0: 		int count = 0;
0: 		for (schemalist = schemavec.elements(); schemalist.hasMoreElements();) {
0: 			schema = (String)schemalist.nextElement();
0: 			for (viewdependencyFound = true; viewdependencyFound;){
0: 				viewdependencyFound = false;
0: 				viewvec = findTables(conn, s, 'V', schema);
0: 				//for (list = viewvec.elements(); list.hasMoreElements();)
0: 				//	System.out.println("\t" + list.nextElement());
0: 				if (viewvec.size() > 0) {
0: 					System.out.println("schema " + schema);
0: 					viewdependencyFound = dropTables(conn, s, viewvec, "view");
0: 				}
0: 			}
1: 
0: 			for (tabledependencyFound = true; tabledependencyFound;){
0: 				tabledependencyFound = false;
0: 				tablevec = findTables(conn, s, 'T', schema);
0: 				if (tablevec.size() > 0) {
0: 					System.out.println("schema " + schema);
0: 					tabledependencyFound = 
0: 						dropTables(conn, s, tablevec, "table");
0: 				}
0: 			}
1: 
0: 			Vector stmtvec = new Vector();
0: 			try {
0: 				rs = s.executeQuery( " select stmtname " +
0: 					" from sys.sysstatements t, sys.sysschemas  s " +
0: 					" where t.schemaid = s.schemaid " +
0: 					" and s.schemaname = '" + schema + "'");
0: 				for (count = 0; rs.next(); count++) { 
0: 					dbIsDirty = true;
0: 					stmtvec.addElement(new String(rs.getString(1)));
0: 				}
0: 				rs.close();
0: 			} catch (SQLException  se) {
0: 				System.out.println("select statements: FAIL -- unexpected exception:");
0: 				JDBCDisplayUtil.ShowException(System.out, se);
0: 				System.exit(1);
0: 			}
1: 
0: 			if (count > 1) {
0: 			try {
0: 				System.out.println("schema " + schema);
0: 				System.out.println("dropping leftover statements: ");
0: 				for (list = stmtvec.elements(); list.hasMoreElements();) {
0: 					n = (String)list.nextElement();
0: 					s.execute("drop statement " + n);
0: 					conn.commit();
0: 					System.out.println("\t" + n);
0: 				}
0: 			} catch (SQLException  se) {
0: 				System.out.println("drop statement: FAIL -- unexpected exception:");
0: 				JDBCDisplayUtil.ShowException(System.out, se);
0: 				System.exit(1);
0: 			}
0: 			}
0: 		}
0: 		// drop every user schema except APP
0: 		if (schemavec.size() > 1) {
0: 		System.out.println("dropping extra user schemas: ");
0: 		schemalist = null;
0: 		for (schemalist = schemavec.elements(); schemalist.hasMoreElements();) {
0: 			schema = (String)schemalist.nextElement();
0: 			if (schema.equals("APP")) continue;
0: 			if (schema == null) {
0: 				System.out.println("null schema in schemalist");
0: 				continue;
0: 			}
0: 			try {
0: 				System.out.println("\t" + schema);
0: 				s.execute("drop schema \"" + schema + "\"");
0: 			} catch (SQLException  se) {
0: 				System.out.println("drop schema: FAIL -- unexpected exception:");
0: 				JDBCDisplayUtil.ShowException(System.out, se);
0: 				System.exit(1);
0: 			}
0: 		}
0: 		}
0: 		// drop all method aliases
0: 		dropAliases(conn, 'M');
0: 		dropAliases(conn, 'C');
1: 
0: 		// DEBUG: help figure out what's going on with extra entries in sysdepends
0: 		try {
0: 			rs = s.executeQuery("select count (*) from sys.sysdepends");
0: 			if (rs.next()) {
0: 				int i = rs.getInt(1);
0: 				if (i > 0)
0: 					System.out.println("found " + i + " leftover dependencies");
0: 			}
0: 		} catch (SQLException  se) {
0: 			System.out.println("drop schema: FAIL -- unexpected exception:");
0: 			JDBCDisplayUtil.ShowException(System.out, se);
0: 			System.exit(1);
0: 		}
1: 
0: 		// shutdown required only if 2 processes access database
0: 		if (useprocess) doshutdown();
0: 		//conn.close();
0: 		d = new Date();
0: 		System.out.println("dbcleanup finished: " + d);
0: 	}
1: 
0: 	static void doshutdown() {
0: 		Connection conn = null;
0: 		try {
0: 			conn = DriverManager.getConnection(dbURL +
0: 				";shutdown=true");
0: 		} catch (SQLException  se) {
0: 			if (se.getSQLState().equals("08006")){
0: 				System.out.println("shutting down " + dbURL);
0: 			}
0: 			else {
0: 				System.out.println("shutdown failed for " + dbURL);
0: 				JDBCDisplayUtil.ShowException(System.out, se);
0: 				System.exit(1);
0: 			}
0: 		}
0: 	}
1: 
0: 	static boolean dropTables(Connection conn, Statement s, Vector tablevec,
0: 		String tabletype) throws Exception {
1: 
0: 		boolean dependencyFound = false;
0: 		String n = null;
1: 
0: 		String objtype = null;
0: 		System.out.println("dropping " + tabletype + "(s)");
1: 
0: 		for (Enumeration list = tablevec.elements(); list.hasMoreElements();) {
0: 			n = (String)list.nextElement();
0: 			try {
0: 				s.execute("drop " + tabletype + " " + n);
0: 				conn.commit();
0: 				System.out.println("\t" + n);
0: 			} catch (SQLException  se) {
0: 				if (se.getSQLState().equals("X0Y25")){
0: 					dependencyFound=true;
0: 					//System.out.println("error X0Y25: " + se.getMessage());
0: 					System.out.println(n + " not droped due to dependency, will retry a bit later");
0: 				}
0: 				else if (se.getSQLState().equals("X0Y23")){
0: 					dependencyFound=true;
0: 					//System.out.println("error X0Y23: " + se.getMessage());
0: 					System.out.println(n + " not droped due to dependency, will retry a bit later");
0: 				}
0: 				else {
0: 					System.out.println("drop table: FAIL -- unexpected exception:");
0: 					JDBCDisplayUtil.ShowException(System.out, se);
0: 					System.exit(1);
0: 		//FIX exits
0: 				}
0: 			}
0: 		}
0: 		return(dependencyFound);
0: 	}
1: 
0: 	static  Vector findTables(Connection conn, Statement s, char c, String schema) throws Exception {
1: 
0: 		ResultSet rs = null;
0: 		Vector tableviewvec = new Vector();
1: 
0: 		try {
0: 			rs = s.executeQuery( " select t.tablename " +
0: 				" from sys.systables t, sys.sysschemas  s " +
0: 				" where t.schemaid = s.schemaid " +
0: 				" and t.tabletype = '" + c + "'" +
0: 				" and s.schemaname = '" + schema + "'" );
0: 			while (rs.next()) { 
0: 				dbIsDirty = true;
0: 				tableviewvec.addElement(new String(rs.getString(1)));
0: 			}
0: 			rs.close();
0: 		} catch (SQLException  se) {
0: 			System.out.println("select tables: FAIL -- unexpected exception:");
0: 			JDBCDisplayUtil.ShowException(System.out, se);
0: 			System.exit(1);
0: 		//FIX exits
0: 		}
0: 		return(tableviewvec);
0: 	}
1: 
0: 	static void dropAliases (Connection conn, char aliastype) throws Exception {
1: 		
0: 		ResultSet rs = null;
0: 		Statement s = null;
0: 		String typestring = null;
0: 		Vector aliasvec = new Vector();
0: 		String n = null;
0: 		int count = 0;
1: 
0: 		if (aliastype == 'M') typestring = "method";
0: 		else if (aliastype == 'C') typestring = "class";
1: 
0: 		try {
0: 			s = conn.createStatement();
0: 			rs = s.executeQuery("select alias, aliastype from sys.sysaliases " +
0: 				" where systemalias = false " + 
0: 				" and aliastype = '" + aliastype + "'");
0: 			for (count = 0; rs.next(); count++) {
0: 				dbIsDirty = true;
0: 				aliasvec.addElement(new String(rs.getString(1)));
0: 			}
0: 			rs.close();
0: 			conn.commit();
0: 		} catch (SQLException  se) {
0: 			System.out.println("drop alias: FAIL -- unexpected exception:");
0: 			JDBCDisplayUtil.ShowException(System.out, se);
0: 			System.exit(1);
0: 		}
1: 
0: 		if (count > 1) {
0: 		System.out.println("dropping user aliases, type " + typestring + ": ");
0: 		for (Enumeration list = aliasvec.elements(); list.hasMoreElements();) {
0: 			n = (String)list.nextElement();
0: 			try {
0: 				s.execute("drop " + typestring + " alias " + n);
0: 			} catch (SQLException  se) {
0: 				System.out.println("drop alias: FAIL -- unexpected exception:");
0: 				JDBCDisplayUtil.ShowException(System.out, se);
0: 				System.exit(1);
0: 			}
0: 			conn.commit();
0: 			System.out.println("\t" + n);
0: 		}
0: 		}
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.dbcleanup
0: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
============================================================================