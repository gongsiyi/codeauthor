1:eac0369: /*
8:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.LengthOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import java.sql.Types;
1:3bb140c: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This node represents a unary XXX_length operator
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class LengthOperatorNode extends UnaryOperatorNode
5:eac0369: {
1:eac0369: 	private int parameterType;
1:eac0369: 	private int parameterWidth;
1:eac0369: 
1:3bb140c:     LengthOperatorNode(ValueNode operator, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(operator, cm);
1:3bb140c: 
1:2706d1f:         String op = "char_length";
1:2706d1f:         String methodNam = "charLength";
1:2706d1f:         parameterType = Types.VARCHAR;
1:2706d1f:         parameterWidth = TypeId.VARCHAR_MAXWIDTH;
1:eac0369: 
1:3bb140c:         setOperator(op);
1:3bb140c:         setMethodName(methodNam);
1:3bb140c: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this operator
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		TypeId	operandType;
1:eac0369: 
1:09c2697:         bindOperand(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Check the type of the operand - this function is allowed only on
1:eac0369: 		** string value types.  
1:eac0369: 		*/
1:eac0369: 		operandType = operand.getTypeId();
1:eac0369: 		switch (operandType.getJDBCTypeId())
1:eac0369: 		{
1:eac0369: 				case Types.CHAR:
1:eac0369: 				case Types.VARCHAR:
1:eac0369: 				case Types.BINARY:
1:eac0369: 				case Types.VARBINARY:
1:eac0369: 				case Types.LONGVARBINARY:
1:eac0369: 				case Types.LONGVARCHAR:
1:1a4ea31:                 case Types.BLOB:
1:1a4ea31:                 case Types.CLOB:
1:eac0369: 					break;
1:eac0369: 			
1:eac0369: 				default:
1:eac0369: 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
1:eac0369: 											getOperatorString(),
1:eac0369: 											operandType.getSQLTypeName());
5:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** The result type of XXX_length is int.
1:eac0369: 		*/
1:eac0369: 		setType(new DataTypeDescriptor(
1:eac0369: 							TypeId.INTEGER_ID,
1:eac0369: 							operand.getTypeServices().isNullable()
1:eac0369: 						)
1:eac0369: 				);
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind a ? parameter operand of the XXX_length function.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	void bindParameter()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** According to the SQL standard, if XXX_length has a ? operand,
1:eac0369: 		** its type is varchar with the implementation-defined maximum length
1:eac0369: 		** for a varchar.
1:3988564: 		** Also, for XXX_length, it doesn't matter what is VARCHAR's collation 
1:3988564: 		** (since for XXX_length, no collation sensitive processing is 
1:3988564: 		** is required) and hence we will not worry about the collation setting
1:eac0369: 		*/
1:eac0369: 
1:d5bc20f: 		operand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(parameterType, true, 
1:eac0369: 												parameterWidth));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This is a length operator node.  Overrides this method
1:eac0369: 	 * in UnaryOperatorNode for code generation purposes.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getReceiverInterfaceName() {
1:eac0369: 	    return ClassName.ConcatableDataValue;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         String op = "char_length";
1:         String methodNam = "charLength";
1:         parameterType = Types.VARCHAR;
1:         parameterWidth = TypeId.VARCHAR_MAXWIDTH;
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: import java.util.List;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:     LengthOperatorNode(ValueNode operator, ContextManager cm)
1:             throws StandardException {
1:         super(operator, cm);
0:         setNodeType(C_NodeTypes.CHAR_LENGTH_OPERATOR_NODE);
1:     }
1: 
1:     @Override
0:     void setNodeType(int nodeType)
0:         String op = null;
0:         String methodNam = null;
0:                 op = "char_length";
0:                 methodNam = "charLength";
/////////////////////////////////////////////////////////////////////////
1:         setOperator(op);
1:         setMethodName(methodNam);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     String getReceiverInterfaceName() {
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 case Types.BLOB:
1:                 case Types.CLOB:
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 		bindOperand(fromList, subqueryList,
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.LengthOperatorNode
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.ConcatableDataValue;
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
0: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node represents a unary XXX_length operator
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public final class LengthOperatorNode extends UnaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	private int parameterType;
1: 	private int parameterWidth;
1: 
0: 	public void setNodeType(int nodeType)
1: 	{
0: 		String operator = null;
0: 		String methodName = null;
1: 
0: 		if (nodeType == C_NodeTypes.CHAR_LENGTH_OPERATOR_NODE)
1: 		{
0: 				operator = "char_length";
0: 				methodName = "charLength";
0: 				parameterType = Types.VARCHAR;
0: 				parameterWidth = TypeId.VARCHAR_MAXWIDTH;
1: 		}
0: 		else
1: 		{
0: 				if (SanityManager.DEBUG)
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + nodeType);
1: 				}
1: 		}
0: 		setOperator(operator);
0: 		setMethodName(methodName);
0: 		super.setNodeType(nodeType);
1: 	}
1: 
1: 	/**
1: 	 * Bind this operator
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
1: 		TypeId	operandType;
1: 
0: 		super.bindExpression(fromList, subqueryList,
0: 				aggregateVector);
1: 
1: 		/*
1: 		** Check the type of the operand - this function is allowed only on
1: 		** string value types.  
1: 		*/
1: 		operandType = operand.getTypeId();
1: 		switch (operandType.getJDBCTypeId())
1: 		{
1: 				case Types.CHAR:
1: 				case Types.VARCHAR:
1: 				case Types.BINARY:
1: 				case Types.VARBINARY:
1: 				case Types.LONGVARBINARY:
1: 				case Types.LONGVARCHAR:
0:                 case JDBC20Translation.SQL_TYPES_BLOB:
0:                 case JDBC20Translation.SQL_TYPES_CLOB:
1: 					break;
1: 			
1: 				default:
1: 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
1: 											getOperatorString(),
1: 											operandType.getSQLTypeName());
1: 		}
1: 
1: 		/*
1: 		** The result type of XXX_length is int.
1: 		*/
1: 		setType(new DataTypeDescriptor(
1: 							TypeId.INTEGER_ID,
1: 							operand.getTypeServices().isNullable()
1: 						)
1: 				);
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Bind a ? parameter operand of the XXX_length function.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	void bindParameter()
1: 			throws StandardException
1: 	{
1: 		/*
1: 		** According to the SQL standard, if XXX_length has a ? operand,
1: 		** its type is varchar with the implementation-defined maximum length
1: 		** for a varchar.
1: 		*/
1: 
0: 		((ParameterNode) operand).setDescriptor(
0: 							DataTypeDescriptor.getBuiltInDataTypeDescriptor(parameterType, true, 
1: 												parameterWidth));
1: 	}
1: 
1: 	/**
1: 	 * This is a length operator node.  Overrides this method
1: 	 * in UnaryOperatorNode for code generation purposes.
1: 	 */
0: 	public String getReceiverInterfaceName() {
1: 	    return ClassName.ConcatableDataValue;
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:3988564
/////////////////////////////////////////////////////////////////////////
1: 		** Also, for XXX_length, it doesn't matter what is VARCHAR's collation 
1: 		** (since for XXX_length, no collation sensitive processing is 
1: 		** is required) and hence we will not worry about the collation setting
commit:f63b7da
/////////////////////////////////////////////////////////////////////////
0: 		//collation of ? operand should be same as the compilation schema
0: 		operand.setCollationUsingCompilationSchema(
commit:7c5fbc4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
0: 		//collation of ? operand should be same as the current schema
0: 		operand.getTypeServices().setCollationDerivation(
0: 				StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 		operand.getTypeServices().setCollationType(
0: 				getLanguageConnectionContext().getDefaultSchema()
0: 						.getCollationType());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 		operand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(parameterType, true, 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.ConcatableDataValue;
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node represents a unary XXX_length operator
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public final class LengthOperatorNode extends UnaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private int parameterType;
0: 	private int parameterWidth;
0: 
0: 	public void setNodeType(int nodeType)
0: 	{
0: 		String operator = null;
0: 		String methodName = null;
0: 
0: 		if (nodeType == C_NodeTypes.CHAR_LENGTH_OPERATOR_NODE)
0: 		{
0: 				operator = "char_length";
0: 				methodName = "charLength";
0: 				parameterType = Types.VARCHAR;
0: 				parameterWidth = TypeId.VARCHAR_MAXWIDTH;
0: 		}
0: 		else
0: 		{
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + nodeType);
0: 				}
0: 		}
0: 		setOperator(operator);
0: 		setMethodName(methodName);
0: 		super.setNodeType(nodeType);
0: 	}
0: 
0: 	/**
0: 	 * Bind this operator
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0: 		TypeId	operandType;
0: 
0: 		super.bindExpression(fromList, subqueryList,
0: 				aggregateVector);
0: 
0: 		/*
0: 		** Check the type of the operand - this function is allowed only on
0: 		** string value types.  
0: 		*/
0: 		operandType = operand.getTypeId();
0: 		switch (operandType.getJDBCTypeId())
0: 		{
0: 				case Types.CHAR:
0: 				case Types.VARCHAR:
0: 				case Types.BINARY:
0: 				case Types.VARBINARY:
0: 				case Types.LONGVARBINARY:
0: 				case Types.LONGVARCHAR:
0:                 case JDBC20Translation.SQL_TYPES_BLOB:
0:                 case JDBC20Translation.SQL_TYPES_CLOB:
0: 					break;
0: 			
0: 				default:
0: 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
0: 											getOperatorString(),
0: 											operandType.getSQLTypeName());
0: 		}
0: 
0: 		/*
0: 		** The result type of XXX_length is int.
0: 		*/
0: 		setType(new DataTypeDescriptor(
0: 							TypeId.INTEGER_ID,
0: 							operand.getTypeServices().isNullable()
0: 						)
0: 				);
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind a ? parameter operand of the XXX_length function.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	void bindParameter()
0: 			throws StandardException
0: 	{
0: 		/*
0: 		** According to the SQL standard, if XXX_length has a ? operand,
0: 		** its type is varchar with the implementation-defined maximum length
0: 		** for a varchar.
0: 		*/
0: 
0: 		((ParameterNode) operand).setDescriptor(
0: 							DataTypeDescriptor.getBuiltInDataTypeDescriptor(parameterType, true, 
0: 												parameterWidth));
0: 	}
0: 
0: 	/**
0: 	 * This is a length operator node.  Overrides this method
0: 	 * in UnaryOperatorNode for code generation purposes.
0: 	 */
0: 	public String getReceiverInterfaceName() {
0: 	    return ClassName.ConcatableDataValue;
0: 	}
0: }
============================================================================