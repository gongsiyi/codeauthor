1:9f04bd3: /*
1:9f04bd3:  *
1:9f04bd3:  * Derby - Class org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest
1:9f04bd3:  *
1:9f04bd3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f04bd3:  * contributor license agreements.  See the NOTICE file distributed with
1:9f04bd3:  * this work for additional information regarding copyright ownership.
1:9f04bd3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f04bd3:  * (the "License"); you may not use this file ecept in compliance with
1:9f04bd3:  * the License.  You may obtain a copy of the License at
1:9f04bd3:  *
1:9f04bd3:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9f04bd3:  *
1:9f04bd3:  * Unless required by applicable law or agreed to in writing, 
1:9f04bd3:  * software distributed under the License is distributed on an 
1:9f04bd3:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:9f04bd3:  * either express or implied. See the License for the specific 
1:9f04bd3:  * language governing permissions and limitations under the License.
1:9f04bd3:  */
1:9f04bd3: package org.apache.derbyTesting.functionTests.tests.demo;
2:9f04bd3: 
1:9f04bd3: import java.io.FileNotFoundException;
1:9f04bd3: import java.io.IOException;
1:9f04bd3: import java.security.AccessController;
1:9f04bd3: import java.security.PrivilegedActionException;
1:9f04bd3: import java.security.PrivilegedExceptionAction;
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:9f04bd3: import junit.framework.Test;
1:9f04bd3: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:9f04bd3: import org.apache.derbyTesting.junit.JDBC;
1:9f04bd3: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:9f04bd3: import toursdb.insertMaps;
1:9f04bd3: 
1:9f04bd3: /**
1:9f04bd3:  * This test is for testing the ToursDB database and functions
1:9f04bd3:  */
1:9f04bd3: public class CheckToursDBTest extends BaseJDBCTestCase {
1:9f04bd3:     /**
1:9f04bd3:      * Public constructor required for running test as standalone JUnit.
1:9f04bd3:      * @param name
1:9f04bd3:      */
1:9f04bd3:     public CheckToursDBTest(String name) {
1:9f04bd3:         super(name);
1:9f04bd3:     }
1:9f04bd3: 
1:9f04bd3:    public static Test basesuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(CheckToursDBTest.class, name);
1:9f04bd3:         Test test = new SupportFilesSetup(suite, new String[] {
1:a5c9ae8:                 "functionTests/tests/demo/cupisle.gif",
1:a5c9ae8:                 "functionTests/tests/demo/smallisle.gif",
1:a5c9ae8:                 "functionTests/tests/demo/witchisle.gif" });
1:9f04bd3:         return test;
1:9f04bd3:     }
1:9f04bd3: 
1:9f04bd3:     public static Test suite() {
1:160d395:         if ( JDBC.vmSupportsJSR169())
1:160d395:             // Test executes PreparedStatement.setBigDecimal, which
1:160d395:             // is not supported with JSR169
1:1ae02c9:                         return new BaseTestSuite(
1:1ae02c9:                 "empty CheckToursDBTest - *.setBigDecimal " +
1:1ae02c9:                 "not supported with JSR169");
1:160d395:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("CheckToursDBTest");
1:9f04bd3:         suite.addTest(basesuite("CheckToursDBTest:embedded"));
1:9f04bd3:         suite.addTest(TestConfiguration
1:9f04bd3:                 .clientServerDecorator(basesuite("CheckToursDBTest:client")));
1:9f04bd3:         return suite;
1:9f04bd3: 
1:9f04bd3:     }
1:9f04bd3: 
1:9f04bd3:    /**
1:9f04bd3:     * Tear-down the fixture by removing the tables
1:9f04bd3:     * @throws Exception
1:9f04bd3:     */    protected void tearDown() throws Exception {
1:9f04bd3:         Statement st = createStatement();
1:9f04bd3:         st.execute("DROP TABLE AIRLINES");                
1:9f04bd3:         st.execute("DROP TABLE CITIES");
1:9f04bd3:         st.execute("DROP TABLE COUNTRIES");
1:9f04bd3:         st.execute("DROP TABLE FLIGHTAVAILABILITY");
1:9f04bd3:         st.execute("DROP TABLE FLIGHTS");
1:9f04bd3:         st.execute("DROP TABLE MAPS");
1:9f04bd3:         st.execute("DROP TABLE FLIGHTS_HISTORY");                      
1:9f04bd3:         st.close();
1:9f04bd3:         commit();
1:9f04bd3:         super.tearDown();
1:9f04bd3:     }
1:9f04bd3: 
1:9f04bd3:     /**
1:9f04bd3:      * Test insert, update and delete on ToursDB tables 
1:9f04bd3:      * @throws Exception
1:9f04bd3:      */
1:9f04bd3:     public void testToursDB() throws Exception {
1:9f04bd3:         String[] dbfiles = { "ToursDB_schema.sql", "loadCOUNTRIES.sql",
1:9f04bd3:                 "loadCITIES.sql", "loadAIRLINES.sql", "loadFLIGHTS1.sql",
1:9f04bd3:                 "loadFLIGHTS2.sql", "loadFLIGHTAVAILABILITY1.sql",
1:9f04bd3:                 "loadFLIGHTAVAILABILITY2.sql" };
1:9f04bd3: 
1:9f04bd3:         for (int i = 0; i < dbfiles.length; i++) {
1:9f04bd3:             runScript("org/apache/derbyTesting/functionTests/tests/demo/"
1:9f04bd3:                     + dbfiles[i], "US-ASCII");
1:9f04bd3:         }
1:9f04bd3:         insertMapsPrivileged();
1:9f04bd3:         doSelect();
1:9f04bd3:         doUpdate();
1:9f04bd3:         doDelete();
1:9f04bd3: 
1:9f04bd3:     }
1:9f04bd3: /**
1:9f04bd3:  * Method to delete rows from the ToursDB tables 
1:9f04bd3:  * @throws Exception
1:9f04bd3:  */
1:9f04bd3:     private void doDelete() throws Exception {
1:9f04bd3:         String tableName[] = { "AIRLINES", "CITIES", "COUNTRIES",
1:9f04bd3:                 "FLIGHTAVAILABILITY", "FLIGHTS", "MAPS" };
1:9f04bd3:         int expectedRows[] = { 2, 87, 114, 518, 542, 3 };
1:9f04bd3:         PreparedStatement ps = null;
1:9f04bd3:         for (int i = 0; i < 6; i++) {
1:9f04bd3:             ps = prepareStatement("delete from " + tableName[i]);
1:9f04bd3:             assertEquals(ps.executeUpdate(), expectedRows[i]);
1:9f04bd3:         }
1:9f04bd3: 
1:9f04bd3:         // now quickly checking FLIGHTS_HISTORY -
1:9f04bd3:         // should now have a 2nd row because of trigger2
1:9f04bd3:         ps = prepareStatement("select STATUS from FLIGHTS_HISTORY where FLIGHT_ID IS NULL and STATUS <> 'over'");
1:9f04bd3:         // don't care if there are more than 1 rows...
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:9f04bd3:                 "INSERTED FROM TRIG2");
1:9f04bd3:         ps = prepareStatement("delete from FLIGHTS_HISTORY");
1:9f04bd3:         assertEquals(ps.executeUpdate(), 2);
1:9f04bd3: 
1:9f04bd3:     }
1:9f04bd3: /**
1:9f04bd3:  * Method to update the rows in the ToursDB tables.
1:9f04bd3:  * @throws SQLException
1:9f04bd3:  */
1:9f04bd3:     private void doUpdate() throws SQLException {
1:9f04bd3:         PreparedStatement ps = null;
1:9f04bd3:         ps = prepareStatement("select ECONOMY_SEATS from AIRLINES where AIRLINE = 'AA'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "20");
1:9f04bd3:         Statement stmt = createStatement();
1:9f04bd3:         stmt.execute("update AIRLINES set ECONOMY_SEATS=108 where AIRLINE = 'AA'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "108");
1:9f04bd3:         ps = prepareStatement("select COUNTRY from COUNTRIES where COUNTRY_ISO_CODE = 'US'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "United States");
1:9f04bd3:         stmt.execute("update COUNTRIES set COUNTRY='United States of America' where COUNTRY_ISO_CODE = 'US'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:9f04bd3:                 "United States of America");
1:9f04bd3:         ps = prepareStatement("select COUNTRY from CITIES where CITY_ID = 52");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "United States");
1:9f04bd3:         stmt.execute("update CITIES set COUNTRY='United States of America' where COUNTRY='United States'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:9f04bd3:                 "United States of America");
1:9f04bd3:         ps = prepareStatement("select ECONOMY_SEATS_TAKEN from FLIGHTAVAILABILITY where FLIGHT_ID = 'AA1134' and FLIGHT_DATE='2004-03-31'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "2");
1:9f04bd3:         stmt.execute("update FLIGHTAVAILABILITY set ECONOMY_SEATS_TAKEN=20 where FLIGHT_ID = 'AA1134' and FLIGHT_DATE='2004-03-31'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "20");
1:9f04bd3:         ps = prepareStatement("select AIRCRAFT from FLIGHTS where FLIGHT_ID = 'AA1183'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "B747");
1:9f04bd3:         stmt.execute("update FLIGHTS set AIRCRAFT='B777' where FLIGHT_ID = 'AA1134'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "B747");
1:a5c9ae8:         ps = prepareStatement("select REGION from MAPS where MAP_NAME = 'North Ocean'");
1:a5c9ae8:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "Cup Island");
1:a720567:         stmt.execute("update MAPS set REGION='Coffee Cup Island' where MAP_NAME = 'North Ocean'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:a720567:                 "Coffee Cup Island");
1:9f04bd3:         // Flight_history is now has 1 row, because of TRIG1
1:9f04bd3:         ps = prepareStatement("select STATUS from FLIGHTS_HISTORY where FLIGHT_ID = 'AA1134'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:9f04bd3:                 "INSERTED FROM TRIG1");
1:9f04bd3:         stmt.execute("update FLIGHTS_HISTORY set STATUS='over' where FLIGHT_ID='AA1134'");
1:9f04bd3:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "over");
1:9f04bd3: 
1:9f04bd3:     }
1:9f04bd3: /**
1:9f04bd3:  * Inserts rows in the Maps table. Calls insertMaps().
1:9f04bd3:  * @throws Exception
1:9f04bd3:  */
1:9f04bd3:     public void insertMapsPrivileged() throws Exception {
1:9f04bd3:         try {
1:9f04bd3: 
1:eec86ed:             AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
1:9f04bd3:                 public Object run() throws SQLException, FileNotFoundException,
1:9f04bd3:                         IOException {
1:9f04bd3:                     insertMaps();
1:9f04bd3:                     return null;
1:9f04bd3:                 }
1:9f04bd3:             });
1:9f04bd3:         } catch (PrivilegedActionException e) {
1:9f04bd3:             throw e.getException();
1:9f04bd3:         }
1:9f04bd3:     }
1:9f04bd3: /**
1:9f04bd3:  * Method to select rows from ToursDB tables
1:9f04bd3:  * @throws SQLException
1:9f04bd3:  */
1:9f04bd3:     private void doSelect() throws SQLException {
1:9f04bd3:         String expectedRows[] = { "2", "114", "87", "518", "542", "3", "0" };
1:9f04bd3:         // now ensure we can select from all the tables
1:9f04bd3:         PreparedStatement ps = null;
1:9f04bd3:         String tableName[] = { "AIRLINES", "COUNTRIES", "CITIES",
1:9f04bd3:                 "FLIGHTAVAILABILITY", "FLIGHTS", "MAPS", "FLIGHTS_HISTORY" };
1:9f04bd3:         for (int i = 0; i < 7; i++) {
1:9f04bd3:             ps = prepareStatement("select count(*) from " + tableName[i]);
1:9f04bd3:             JDBC.assertSingleValueResultSet(ps.executeQuery(), expectedRows[i]);
1:9f04bd3:            }
1:9f04bd3:        
1:9f04bd3:     }
1:9f04bd3: /**
1:9f04bd3:  * Inserts 3 rows in the Maps table. 
1:9f04bd3:  * @throws SQLException
1:9f04bd3:  * @throws FileNotFoundException
1:9f04bd3:  * @throws IOException
1:9f04bd3:  */
1:9f04bd3:     private void insertMaps() 
1:9f04bd3:     throws SQLException, FileNotFoundException, IOException {
1:9f04bd3:         Connection conn = getConnection();
1:9f04bd3:         assertEquals(insertMaps.insertRows("extin", conn), 3);
1:9f04bd3:     }
1:9f04bd3: 
1:9f04bd3: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(CheckToursDBTest.class, name);
/////////////////////////////////////////////////////////////////////////
1:                         return new BaseTestSuite(
1:                 "empty CheckToursDBTest - *.setBigDecimal " +
1:                 "not supported with JSR169");
1:         BaseTestSuite suite = new BaseTestSuite("CheckToursDBTest");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1:             AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:160d395
/////////////////////////////////////////////////////////////////////////
1:         if ( JDBC.vmSupportsJSR169())
1:             // Test executes PreparedStatement.setBigDecimal, which
1:             // is not supported with JSR169
0:             return new TestSuite("empty CheckToursDBTest - *.setBigDecimal not supported with JSR169");
1:         
commit:a720567
/////////////////////////////////////////////////////////////////////////
1:         stmt.execute("update MAPS set REGION='Coffee Cup Island' where MAP_NAME = 'North Ocean'");
1:                 "Coffee Cup Island");
commit:a5c9ae8
/////////////////////////////////////////////////////////////////////////
1:                 "functionTests/tests/demo/cupisle.gif",
1:                 "functionTests/tests/demo/smallisle.gif",
1:                 "functionTests/tests/demo/witchisle.gif" });
/////////////////////////////////////////////////////////////////////////
1:         ps = prepareStatement("select REGION from MAPS where MAP_NAME = 'North Ocean'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "Cup Island");
0:         stmt.execute("update MAPS set REGION='Northern Ocean' where MAP_NAME = 'North Ocean'");
0:                 "Northern Ocean");
commit:9f04bd3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file ecept in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.demo;
1: 
0: import java.sql.PreparedStatement;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.sql.Statement;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: import toursdb.insertMaps;
1: 
1: /**
1:  * This test is for testing the ToursDB database and functions
1:  */
1: public class CheckToursDBTest extends BaseJDBCTestCase {
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name
1:      */
1:     public CheckToursDBTest(String name) {
1:         super(name);
1:     }
1: 
1:    public static Test basesuite(String name) {
0:         TestSuite suite = new TestSuite(CheckToursDBTest.class, name);
1:         Test test = new SupportFilesSetup(suite, new String[] {
0:                 "functionTests/tests/demo/BART.gif",
0:                 "functionTests/tests/demo/Caltrain.gif" });
1:         return test;
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("CheckToursDBTest");
1:         suite.addTest(basesuite("CheckToursDBTest:embedded"));
1:         suite.addTest(TestConfiguration
1:                 .clientServerDecorator(basesuite("CheckToursDBTest:client")));
1:         return suite;
1: 
1:     }
1: 
1:    /**
1:     * Tear-down the fixture by removing the tables
1:     * @throws Exception
1:     */    protected void tearDown() throws Exception {
1:         Statement st = createStatement();
1:         st.execute("DROP TABLE AIRLINES");                
1:         st.execute("DROP TABLE CITIES");
1:         st.execute("DROP TABLE COUNTRIES");
1:         st.execute("DROP TABLE FLIGHTAVAILABILITY");
1:         st.execute("DROP TABLE FLIGHTS");
1:         st.execute("DROP TABLE MAPS");
1:         st.execute("DROP TABLE FLIGHTS_HISTORY");                      
1:         st.close();
1:         commit();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Test insert, update and delete on ToursDB tables 
1:      * @throws Exception
1:      */
1:     public void testToursDB() throws Exception {
1:         String[] dbfiles = { "ToursDB_schema.sql", "loadCOUNTRIES.sql",
1:                 "loadCITIES.sql", "loadAIRLINES.sql", "loadFLIGHTS1.sql",
1:                 "loadFLIGHTS2.sql", "loadFLIGHTAVAILABILITY1.sql",
1:                 "loadFLIGHTAVAILABILITY2.sql" };
1: 
1:         for (int i = 0; i < dbfiles.length; i++) {
1:             runScript("org/apache/derbyTesting/functionTests/tests/demo/"
1:                     + dbfiles[i], "US-ASCII");
1:         }
1:         insertMapsPrivileged();
1:         doSelect();
1:         doUpdate();
1:         doDelete();
1: 
1:     }
1: /**
1:  * Method to delete rows from the ToursDB tables 
1:  * @throws Exception
1:  */
1:     private void doDelete() throws Exception {
1:         String tableName[] = { "AIRLINES", "CITIES", "COUNTRIES",
1:                 "FLIGHTAVAILABILITY", "FLIGHTS", "MAPS" };
1:         int expectedRows[] = { 2, 87, 114, 518, 542, 3 };
1:         PreparedStatement ps = null;
1:         for (int i = 0; i < 6; i++) {
1:             ps = prepareStatement("delete from " + tableName[i]);
1:             assertEquals(ps.executeUpdate(), expectedRows[i]);
1:         }
1: 
1:         // now quickly checking FLIGHTS_HISTORY -
1:         // should now have a 2nd row because of trigger2
1:         ps = prepareStatement("select STATUS from FLIGHTS_HISTORY where FLIGHT_ID IS NULL and STATUS <> 'over'");
1:         // don't care if there are more than 1 rows...
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:                 "INSERTED FROM TRIG2");
1:         ps = prepareStatement("delete from FLIGHTS_HISTORY");
1:         assertEquals(ps.executeUpdate(), 2);
1: 
1:     }
1: /**
1:  * Method to update the rows in the ToursDB tables.
1:  * @throws SQLException
1:  */
1:     private void doUpdate() throws SQLException {
1:         PreparedStatement ps = null;
1:         ps = prepareStatement("select ECONOMY_SEATS from AIRLINES where AIRLINE = 'AA'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "20");
1:         Statement stmt = createStatement();
1:         stmt.execute("update AIRLINES set ECONOMY_SEATS=108 where AIRLINE = 'AA'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "108");
1:         ps = prepareStatement("select COUNTRY from COUNTRIES where COUNTRY_ISO_CODE = 'US'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "United States");
1:         stmt.execute("update COUNTRIES set COUNTRY='United States of America' where COUNTRY_ISO_CODE = 'US'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:                 "United States of America");
1:         ps = prepareStatement("select COUNTRY from CITIES where CITY_ID = 52");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "United States");
1:         stmt.execute("update CITIES set COUNTRY='United States of America' where COUNTRY='United States'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:                 "United States of America");
1:         ps = prepareStatement("select ECONOMY_SEATS_TAKEN from FLIGHTAVAILABILITY where FLIGHT_ID = 'AA1134' and FLIGHT_DATE='2004-03-31'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "2");
1:         stmt.execute("update FLIGHTAVAILABILITY set ECONOMY_SEATS_TAKEN=20 where FLIGHT_ID = 'AA1134' and FLIGHT_DATE='2004-03-31'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "20");
1:         ps = prepareStatement("select AIRCRAFT from FLIGHTS where FLIGHT_ID = 'AA1183'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "B747");
1:         stmt.execute("update FLIGHTS set AIRCRAFT='B777' where FLIGHT_ID = 'AA1134'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "B747");
0:         ps = prepareStatement("select REGION from MAPS where MAP_NAME = 'BART'");
0:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "Bay Area");
0:         stmt.execute("update MAPS set REGION='San Francisco Bay Area' where MAP_NAME = 'BART'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
0:                 "San Francisco Bay Area");
1:         // Flight_history is now has 1 row, because of TRIG1
1:         ps = prepareStatement("select STATUS from FLIGHTS_HISTORY where FLIGHT_ID = 'AA1134'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:                 "INSERTED FROM TRIG1");
1:         stmt.execute("update FLIGHTS_HISTORY set STATUS='over' where FLIGHT_ID='AA1134'");
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), "over");
1: 
1:     }
1: /**
1:  * Inserts rows in the Maps table. Calls insertMaps().
1:  * @throws Exception
1:  */
1:     public void insertMapsPrivileged() throws Exception {
1:         try {
1: 
0:             AccessController.doPrivileged(new PrivilegedExceptionAction() {
1:                 public Object run() throws SQLException, FileNotFoundException,
1:                         IOException {
1:                     insertMaps();
1:                     return null;
1:                 }
1:             });
1:         } catch (PrivilegedActionException e) {
1:             throw e.getException();
1:         }
1:     }
1: /**
1:  * Method to select rows from ToursDB tables
1:  * @throws SQLException
1:  */
1:     private void doSelect() throws SQLException {
1:         String expectedRows[] = { "2", "114", "87", "518", "542", "3", "0" };
1:         // now ensure we can select from all the tables
1:         PreparedStatement ps = null;
1:         String tableName[] = { "AIRLINES", "COUNTRIES", "CITIES",
1:                 "FLIGHTAVAILABILITY", "FLIGHTS", "MAPS", "FLIGHTS_HISTORY" };
1:         for (int i = 0; i < 7; i++) {
1:             ps = prepareStatement("select count(*) from " + tableName[i]);
1:             JDBC.assertSingleValueResultSet(ps.executeQuery(), expectedRows[i]);
1:            }
1:        
1:     }
1: /**
1:  * Inserts 3 rows in the Maps table. 
1:  * @throws SQLException
1:  * @throws FileNotFoundException
1:  * @throws IOException
1:  */
1:     private void insertMaps() 
1:     throws SQLException, FileNotFoundException, IOException {
1:         Connection conn = getConnection();
1:         assertEquals(insertMaps.insertRows("extin", conn), 3);
1:     }
1: 
1: }
============================================================================