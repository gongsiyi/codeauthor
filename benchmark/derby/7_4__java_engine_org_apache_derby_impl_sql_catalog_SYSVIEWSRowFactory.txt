1:fd46794: /*
19:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory
1:fd46794: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:7dd08d1: import java.sql.Types;
1:7dd08d1: 
1:6fbf669: import org.apache.derby.catalog.UUID;
1:6fbf669: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:6fbf669: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:6fbf669: import org.apache.derby.iapi.types.DataValueDescriptor;
1:6fbf669: import org.apache.derby.iapi.types.DataValueFactory;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:6fbf669: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSVIEWS row.
7:eac0369:  *
4:eac0369:  */
1:345de35: 
1:eac0369: public class SYSVIEWSRowFactory extends CatalogRowFactory
4:eac0369: {
1:eac0369: 	private  static final String	TABLENAME_STRING = "SYSVIEWS";
1:345de35: 
1:eac0369: 	protected static final int		SYSVIEWS_COLUMN_COUNT = 4;
1:eac0369: 	protected static final int		SYSVIEWS_TABLEID = 1;
1:eac0369: 	protected static final int		SYSVIEWS_VIEWDEFINITION = 2;
1:eac0369: 	protected static final int		SYSVIEWS_CHECKOPTION = 3;
1:eac0369: 	protected static final int		SYSVIEWS_COMPILATION_SCHEMAID = 4;
1:eac0369: 
1:eac0369: 	// Column widths
1:eac0369: 	protected static final int		SYSVIEWS_TABLEID_WIDTH = 36;
1:eac0369: 
1:eac0369: 	protected static final int		SYSVIEWS_INDEX1_ID = 0;
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSVIEWS_TABLEID}
2:eac0369: 	};
1:eac0369: 
1:eac0369: 
1:eac0369: 	// if you add a non-unique index allocate this array.
1:eac0369:     private	static	final	boolean[]	uniqueness = null;
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "8000004d-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1:eac0369: 		,"80000050-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1:eac0369: 		,"8000004f-00d0-fd77-3ed8-000a0a0b1900"	// SYSVIEWS_INDEX1
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSVIEWSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		initInfo(SYSVIEWS_COLUMN_COUNT, TABLENAME_STRING, 
1:c2ff613: 				 indexColumnPositions, uniqueness, uuids );
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSVIEWS row
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSVIEWS.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 		throws StandardException 
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		ExecRow    				row;
1:eac0369: 		String					tableID = null;
1:eac0369: 		String					compSchemaId = null;
1:eac0369: 		String					viewText = null;
1:eac0369: 		String	   				checkSType = null;
1:eac0369: 		int	   					checkIType;
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			UUID	tableUUID;
1:eac0369: 			ViewDescriptor vd = (ViewDescriptor)td;
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** We only allocate a new UUID if the descriptor doesn't already have one.
1:eac0369: 			** For descriptors replicated from a Source system, we already have an UUID.
1:eac0369: 			*/
1:eac0369: 			tableUUID = vd.getUUID();
1:eac0369: 			if ( tableUUID == null )
1:eac0369: 		    {
1:eac0369: 				tableUUID = getUUIDFactory().createUUID();
1:eac0369: 				vd.setUUID(tableUUID);
1:eac0369: 			}
1:eac0369: 			tableID = tableUUID.toString();
1:eac0369: 			viewText = vd.getViewText();
1:eac0369: 
1:eac0369: 			/* RESOLVE - check constraints not supported yet */
1:eac0369: 			checkIType = vd.getCheckOptionType();
1:eac0369: 
2:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				if (checkIType != ViewDescriptor.NO_CHECK_OPTION)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("checkIType expected to be " + 
1:eac0369: 						ViewDescriptor.NO_CHECK_OPTION +
1:eac0369: 						", not " + checkIType);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			checkSType = "N";
1:eac0369: 
1:eac0369: 			UUID tmpId = vd.getCompSchemaId();
1:eac0369: 			compSchemaId = (tmpId == null) ? null : tmpId.toString();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Insert info into sysviews */
1:eac0369: 
1:eac0369: 		/* RESOLVE - It would be nice to require less knowledge about sysviews
1:eac0369: 		 * and have this be more table driven.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Build the row to insert  */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSVIEWS_COLUMN_COUNT);
1:eac0369: 
1:eac0369: 		/* 1st column is TABLEID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSVIEWS_TABLEID, new SQLChar(tableID));
1:eac0369: 
1:eac0369: 		/* 2nd column is VIEWDEFINITION */
1:eac0369: 		row.setColumn(SYSVIEWS_VIEWDEFINITION,
1:eac0369: 				dvf.getLongvarcharDataValue(viewText));
1:eac0369: 
1:eac0369: 		/* 3rd column is CHECKOPTION (char(1)) */
1:eb47bdb: 		row.setColumn(SYSVIEWS_CHECKOPTION, new SQLChar(checkSType));
1:eac0369: 
1:eac0369: 		/* 4th column is COMPILATIONSCHEMAID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSVIEWS_COMPILATION_SCHEMAID, new SQLChar(compSchemaId));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:7aa6fa8:     
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a ViewDescriptor out of a SYSVIEWS row
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSVIEWS row
1:eac0369: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		ViewDescriptor vd = null;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(
1:eac0369: 				row.nColumns() == SYSVIEWS_COLUMN_COUNT, 
1:eac0369: 				"Wrong number of columns for a SYSVIEWS row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		DataDescriptorGenerator ddg;
1:eac0369: 		int					checkIType;
1:eac0369: 		String				checkSType;
1:eac0369: 		String				tableID;
1:eac0369: 		String				compSchemaId;
1:eac0369: 		String				viewDefinition;
1:eac0369: 		UUID				tableUUID;
1:eac0369: 		UUID				compSchemaUUID = null;
1:eac0369: 
1:eac0369: 		ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		/* 1st column is TABLEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSVIEWS_TABLEID);
1:eac0369: 		tableID = col.getString();
1:eac0369: 		tableUUID = getUUIDFactory().recreateUUID(tableID);
1:eac0369: 
1:eac0369: 		/* 2nd column is VIEWDEFINITION */
1:eac0369: 		col = row.getColumn(SYSVIEWS_VIEWDEFINITION);
1:eac0369: 		viewDefinition = col.getString();
1:eac0369: 
1:eac0369: 		/* 3rd column is CHECKOPTION (char(1)) */
1:eac0369: 		col = row.getColumn(SYSVIEWS_CHECKOPTION);
1:eac0369: 		checkSType = col.getString();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!checkSType.equals("N"))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("checkSType expected to be 'N', not " + checkSType);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* RESOLVE - no check options for now */
1:eac0369: 		checkIType = ViewDescriptor.NO_CHECK_OPTION;
1:eac0369: 
1:eac0369: 		/* 4th column is COMPILATIONSCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSVIEWS_COMPILATION_SCHEMAID);
1:eac0369: 		compSchemaId = col.getString();
1:eac0369: 		if (compSchemaId != null)
1:eac0369: 		{
1:eac0369: 			compSchemaUUID = getUUIDFactory().recreateUUID(compSchemaId);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* now build and return the descriptor */
1:eac0369: 		vd = ddg.newViewDescriptor(tableUUID, null, viewDefinition, 
1:eac0369: 				checkIType, compSchemaUUID);
1:eac0369: 		return vd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[]	buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:7dd08d1:             return new SystemColumn[] {
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:7dd08d1:                 SystemColumnImpl.getColumn("VIEWDEFINITION", Types.LONGVARCHAR,
1:7dd08d1:                         false, TypeId.LONGVARCHAR_MAXWIDTH),
1:7dd08d1:                 SystemColumnImpl.getIndicatorColumn("CHECKOPTION"),
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("COMPILATIONSCHEMAID", true),
1:7dd08d1:                         
1:7dd08d1:             };
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:16c8b88
/////////////////////////////////////////////////////////////////////////
0: 							true,				// nullability
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSVIEWSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:7dd08d1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new SystemColumn[] {
1:                 SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:                 SystemColumnImpl.getColumn("VIEWDEFINITION", Types.LONGVARCHAR,
1:                         false, TypeId.LONGVARCHAR_MAXWIDTH),
1:                 SystemColumnImpl.getIndicatorColumn("CHECKOPTION"),
1:                 SystemColumnImpl.getUUIDColumn("COMPILATIONSCHEMAID", true),
1:                         
1:             };
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(SYSVIEWS_TABLEID, new SQLChar(tableID));
1: 		row.setColumn(SYSVIEWS_CHECKOPTION, new SQLChar(checkSType));
1: 		row.setColumn(SYSVIEWS_COMPILATION_SCHEMAID, new SQLChar(compSchemaId));
commit:6fbf669
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.TypeId;
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
commit:d5744b8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 indexColumnPositions, uniqueness, uuids );
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:345de35
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 2000, 2001WESTHAM
1: 
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.catalog.IndexDescriptor;
1: 
0: import java.util.Properties;
1: 
1: /**
1:  * Factory for creating a SYSVIEWS row.
1:  *
0:  * @author jerry
1:  */
1: 
1: public class SYSVIEWSRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
1: 	private  static final String	TABLENAME_STRING = "SYSVIEWS";
1: 
1: 	protected static final int		SYSVIEWS_COLUMN_COUNT = 4;
1: 	protected static final int		SYSVIEWS_TABLEID = 1;
1: 	protected static final int		SYSVIEWS_VIEWDEFINITION = 2;
1: 	protected static final int		SYSVIEWS_CHECKOPTION = 3;
1: 	protected static final int		SYSVIEWS_COMPILATION_SCHEMAID = 4;
1: 
1: 	// Column widths
1: 	protected static final int		SYSVIEWS_TABLEID_WIDTH = 36;
1: 
1: 	protected static final int		SYSVIEWS_INDEX1_ID = 0;
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{SYSVIEWS_TABLEID}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"TABLEID"}
1: 	};
1: 
1: 	// if you add a non-unique index allocate this array.
1:     private	static	final	boolean[]	uniqueness = null;
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "8000004d-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1: 		,"80000050-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1: 		,"8000004f-00d0-fd77-3ed8-000a0a0b1900"	// SYSVIEWS_INDEX1
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSVIEWSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSVIEWS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids );
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1: 	 * Make a SYSVIEWS row
1: 	 *
0: 	 * @param emptyRow		Make an empty row if this parameter is true
0: 	 * @param vd			View descriptor
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSVIEWS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 		throws StandardException 
1: 	{
1: 		DataValueDescriptor		col;
1: 		ExecRow    				row;
1: 		String					tableID = null;
1: 		String					compSchemaId = null;
1: 		String					viewText = null;
1: 		String	   				checkSType = null;
1: 		int	   					checkIType;
1: 
1: 		if (td != null)
1: 		{
1: 			UUID	tableUUID;
1: 			ViewDescriptor vd = (ViewDescriptor)td;
1: 
1: 			/*
1: 			** We only allocate a new UUID if the descriptor doesn't already have one.
1: 			** For descriptors replicated from a Source system, we already have an UUID.
1: 			*/
1: 			tableUUID = vd.getUUID();
1: 			if ( tableUUID == null )
1: 		    {
1: 				tableUUID = getUUIDFactory().createUUID();
1: 				vd.setUUID(tableUUID);
1: 			}
1: 			tableID = tableUUID.toString();
1: 			viewText = vd.getViewText();
1: 
1: 			/* RESOLVE - check constraints not supported yet */
1: 			checkIType = vd.getCheckOptionType();
1: 
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				if (checkIType != ViewDescriptor.NO_CHECK_OPTION)
1: 				{
1: 					SanityManager.THROWASSERT("checkIType expected to be " + 
1: 						ViewDescriptor.NO_CHECK_OPTION +
1: 						", not " + checkIType);
1: 				}
1: 			}
1: 			checkSType = "N";
1: 
1: 			UUID tmpId = vd.getCompSchemaId();
1: 			compSchemaId = (tmpId == null) ? null : tmpId.toString();
1: 		}
1: 
1: 		/* Insert info into sysviews */
1: 
1: 		/* RESOLVE - It would be nice to require less knowledge about sysviews
1: 		 * and have this be more table driven.
1: 		 */
1: 
1: 		/* Build the row to insert  */
1: 		row = getExecutionFactory().getValueRow(SYSVIEWS_COLUMN_COUNT);
1: 
1: 		/* 1st column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(SYSVIEWS_TABLEID, dvf.getCharDataValue(tableID));
1: 
1: 		/* 2nd column is VIEWDEFINITION */
1: 		row.setColumn(SYSVIEWS_VIEWDEFINITION,
1: 				dvf.getLongvarcharDataValue(viewText));
1: 
1: 		/* 3rd column is CHECKOPTION (char(1)) */
0: 		row.setColumn(SYSVIEWS_CHECKOPTION, dvf.getCharDataValue(checkSType));
1: 
1: 		/* 4th column is COMPILATIONSCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSVIEWS_COMPILATION_SCHEMAID, dvf.getCharDataValue(compSchemaId));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
0: 			checkIndexNumber(indexNumber);
0: 		/* Build the row  */
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(2);
1: 
0: 		/* 1st column is TABLEID (char(36)) */
0: 		row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 		row.setColumn(2, rowLocation);
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a ViewDescriptor out of a SYSVIEWS row
1: 	 *
1: 	 * @param row a SYSVIEWS row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		ViewDescriptor vd = null;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(
1: 				row.nColumns() == SYSVIEWS_COLUMN_COUNT, 
1: 				"Wrong number of columns for a SYSVIEWS row");
1: 		}
1: 
1: 		DataValueDescriptor	col;
1: 		DataDescriptorGenerator ddg;
1: 		int					checkIType;
1: 		String				checkSType;
1: 		String				tableID;
1: 		String				compSchemaId;
1: 		String				viewDefinition;
1: 		UUID				tableUUID;
1: 		UUID				compSchemaUUID = null;
1: 
1: 		ddg = dd.getDataDescriptorGenerator();
1: 
1: 		/* 1st column is TABLEID (UUID - char(36)) */
1: 		col = row.getColumn(SYSVIEWS_TABLEID);
1: 		tableID = col.getString();
1: 		tableUUID = getUUIDFactory().recreateUUID(tableID);
1: 
1: 		/* 2nd column is VIEWDEFINITION */
1: 		col = row.getColumn(SYSVIEWS_VIEWDEFINITION);
1: 		viewDefinition = col.getString();
1: 
1: 		/* 3rd column is CHECKOPTION (char(1)) */
1: 		col = row.getColumn(SYSVIEWS_CHECKOPTION);
1: 		checkSType = col.getString();
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!checkSType.equals("N"))
1: 			{
1: 				SanityManager.THROWASSERT("checkSType expected to be 'N', not " + checkSType);
1: 			}
1: 		}
1: 
1: 		/* RESOLVE - no check options for now */
1: 		checkIType = ViewDescriptor.NO_CHECK_OPTION;
1: 
1: 		/* 4th column is COMPILATIONSCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(SYSVIEWS_COMPILATION_SCHEMAID);
1: 		compSchemaId = col.getString();
1: 		if (compSchemaId != null)
1: 		{
1: 			compSchemaUUID = getUUIDFactory().recreateUUID(compSchemaId);
1: 		}
1: 
1: 		/* now build and return the descriptor */
1: 		vd = ddg.newViewDescriptor(tableUUID, null, viewDefinition, 
1: 				checkIType, compSchemaUUID);
1: 		return vd;
1: 	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		SystemColumn[]			columnList = new SystemColumn[SYSVIEWS_COLUMN_COUNT];
1: 
0: 		columnList[0] = new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// name 
0: 							SYSVIEWS_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 		// describe columns
1: 
0: 		columnList[1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "VIEWDEFINITION"),		// column name
0: 							SYSVIEWS_VIEWDEFINITION,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"LONG VARCHAR",	    // dataType
0: 							true,				// built-in type
0: 							TypeId.LONGVARCHAR_MAXWIDTH // maxLength
0: 			               );
0: 		columnList[2] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "CHECKOPTION"),		// column name
0: 							SYSVIEWS_CHECKOPTION,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 		                   );
1: 
0: 		columnList[3] = new SystemColumnImpl(	
0: 							convertIdCase( "COMPILATIONSCHEMAID"),	// name 
0: 							SYSVIEWS_COMPILATION_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 		return	columnList;
1: 	}
1: 
0: 	public int heapColumnCount()
1: 	{
0: 		return SYSVIEWS_COLUMN_COUNT;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.catalog.IndexDescriptor;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * Factory for creating a SYSVIEWS row.
0:  *
0:  * @author jerry
0:  */
0: 
0: public class SYSVIEWSRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
0: 	private  static final String	TABLENAME_STRING = "SYSVIEWS";
0: 
0: 	protected static final int		SYSVIEWS_COLUMN_COUNT = 4;
0: 	protected static final int		SYSVIEWS_TABLEID = 1;
0: 	protected static final int		SYSVIEWS_VIEWDEFINITION = 2;
0: 	protected static final int		SYSVIEWS_CHECKOPTION = 3;
0: 	protected static final int		SYSVIEWS_COMPILATION_SCHEMAID = 4;
0: 
0: 	// Column widths
0: 	protected static final int		SYSVIEWS_TABLEID_WIDTH = 36;
0: 
0: 	protected static final int		SYSVIEWS_INDEX1_ID = 0;
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{SYSVIEWS_TABLEID}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"TABLEID"}
0: 	};
0: 
0: 	// if you add a non-unique index allocate this array.
0:     private	static	final	boolean[]	uniqueness = null;
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "8000004d-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
0: 		,"80000050-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
0: 		,"8000004f-00d0-fd77-3ed8-000a0a0b1900"	// SYSVIEWS_INDEX1
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSVIEWSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSVIEWS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids );
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0: 	 * Make a SYSVIEWS row
0: 	 *
0: 	 * @param emptyRow		Make an empty row if this parameter is true
0: 	 * @param vd			View descriptor
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSVIEWS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 		throws StandardException 
0: 	{
0: 		DataValueDescriptor		col;
0: 		ExecRow    				row;
0: 		String					tableID = null;
0: 		String					compSchemaId = null;
0: 		String					viewText = null;
0: 		String	   				checkSType = null;
0: 		int	   					checkIType;
0: 
0: 		if (td != null)
0: 		{
0: 			UUID	tableUUID;
0: 			ViewDescriptor vd = (ViewDescriptor)td;
0: 
0: 			/*
0: 			** We only allocate a new UUID if the descriptor doesn't already have one.
0: 			** For descriptors replicated from a Source system, we already have an UUID.
0: 			*/
0: 			tableUUID = vd.getUUID();
0: 			if ( tableUUID == null )
0: 		    {
0: 				tableUUID = getUUIDFactory().createUUID();
0: 				vd.setUUID(tableUUID);
0: 			}
0: 			tableID = tableUUID.toString();
0: 			viewText = vd.getViewText();
0: 
0: 			/* RESOLVE - check constraints not supported yet */
0: 			checkIType = vd.getCheckOptionType();
0: 
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (checkIType != ViewDescriptor.NO_CHECK_OPTION)
0: 				{
0: 					SanityManager.THROWASSERT("checkIType expected to be " + 
0: 						ViewDescriptor.NO_CHECK_OPTION +
0: 						", not " + checkIType);
0: 				}
0: 			}
0: 			checkSType = "N";
0: 
0: 			UUID tmpId = vd.getCompSchemaId();
0: 			compSchemaId = (tmpId == null) ? null : tmpId.toString();
0: 		}
0: 
0: 		/* Insert info into sysviews */
0: 
0: 		/* RESOLVE - It would be nice to require less knowledge about sysviews
0: 		 * and have this be more table driven.
0: 		 */
0: 
0: 		/* Build the row to insert  */
0: 		row = getExecutionFactory().getValueRow(SYSVIEWS_COLUMN_COUNT);
0: 
0: 		/* 1st column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(SYSVIEWS_TABLEID, dvf.getCharDataValue(tableID));
0: 
0: 		/* 2nd column is VIEWDEFINITION */
0: 		row.setColumn(SYSVIEWS_VIEWDEFINITION,
0: 				dvf.getLongvarcharDataValue(viewText));
0: 
0: 		/* 3rd column is CHECKOPTION (char(1)) */
0: 		row.setColumn(SYSVIEWS_CHECKOPTION, dvf.getCharDataValue(checkSType));
0: 
0: 		/* 4th column is COMPILATIONSCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSVIEWS_COMPILATION_SCHEMAID, dvf.getCharDataValue(compSchemaId));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			checkIndexNumber(indexNumber);
0: 		/* Build the row  */
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(2);
0: 
0: 		/* 1st column is TABLEID (char(36)) */
0: 		row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 		row.setColumn(2, rowLocation);
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a ViewDescriptor out of a SYSVIEWS row
0: 	 *
0: 	 * @param row a SYSVIEWS row
0: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		ViewDescriptor vd = null;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(
0: 				row.nColumns() == SYSVIEWS_COLUMN_COUNT, 
0: 				"Wrong number of columns for a SYSVIEWS row");
0: 		}
0: 
0: 		DataValueDescriptor	col;
0: 		DataDescriptorGenerator ddg;
0: 		int					checkIType;
0: 		String				checkSType;
0: 		String				tableID;
0: 		String				compSchemaId;
0: 		String				viewDefinition;
0: 		UUID				tableUUID;
0: 		UUID				compSchemaUUID = null;
0: 
0: 		ddg = dd.getDataDescriptorGenerator();
0: 
0: 		/* 1st column is TABLEID (UUID - char(36)) */
0: 		col = row.getColumn(SYSVIEWS_TABLEID);
0: 		tableID = col.getString();
0: 		tableUUID = getUUIDFactory().recreateUUID(tableID);
0: 
0: 		/* 2nd column is VIEWDEFINITION */
0: 		col = row.getColumn(SYSVIEWS_VIEWDEFINITION);
0: 		viewDefinition = col.getString();
0: 
0: 		/* 3rd column is CHECKOPTION (char(1)) */
0: 		col = row.getColumn(SYSVIEWS_CHECKOPTION);
0: 		checkSType = col.getString();
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!checkSType.equals("N"))
0: 			{
0: 				SanityManager.THROWASSERT("checkSType expected to be 'N', not " + checkSType);
0: 			}
0: 		}
0: 
0: 		/* RESOLVE - no check options for now */
0: 		checkIType = ViewDescriptor.NO_CHECK_OPTION;
0: 
0: 		/* 4th column is COMPILATIONSCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(SYSVIEWS_COMPILATION_SCHEMAID);
0: 		compSchemaId = col.getString();
0: 		if (compSchemaId != null)
0: 		{
0: 			compSchemaUUID = getUUIDFactory().recreateUUID(compSchemaId);
0: 		}
0: 
0: 		/* now build and return the descriptor */
0: 		vd = ddg.newViewDescriptor(tableUUID, null, viewDefinition, 
0: 				checkIType, compSchemaUUID);
0: 		return vd;
0: 	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		SystemColumn[]			columnList = new SystemColumn[SYSVIEWS_COLUMN_COUNT];
0: 
0: 		columnList[0] = new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// name 
0: 							SYSVIEWS_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 		// describe columns
0: 
0: 		columnList[1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "VIEWDEFINITION"),		// column name
0: 							SYSVIEWS_VIEWDEFINITION,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"LONG VARCHAR",	    // dataType
0: 							true,				// built-in type
0: 							TypeId.LONGVARCHAR_MAXWIDTH // maxLength
0: 			               );
0: 		columnList[2] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "CHECKOPTION"),		// column name
0: 							SYSVIEWS_CHECKOPTION,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 		                   );
0: 
0: 		columnList[3] = new SystemColumnImpl(	
0: 							convertIdCase( "COMPILATIONSCHEMAID"),	// name 
0: 							SYSVIEWS_COMPILATION_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 		return	columnList;
0: 	}
0: 
0: 	public int heapColumnCount()
0: 	{
0: 		return SYSVIEWS_COLUMN_COUNT;
0: 	}
0: }
============================================================================