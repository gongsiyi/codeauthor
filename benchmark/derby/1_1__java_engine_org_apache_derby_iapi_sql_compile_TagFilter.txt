1:070d37e: /*
1:070d37e: 
1:070d37e:    Derby - Class org.apache.derby.iapi.sql.compile.TagFilter
1:070d37e: 
1:070d37e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:070d37e:    contributor license agreements.  See the NOTICE file distributed with
1:070d37e:    this work for additional information regarding copyright ownership.
1:070d37e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:070d37e:    (the "License"); you may not use this file except in compliance with
1:070d37e:    the License.  You may obtain a copy of the License at
1:070d37e: 
1:070d37e:       http://www.apache.org/licenses/LICENSE-2.0
1:070d37e: 
1:070d37e:    Unless required by applicable law or agreed to in writing, software
1:070d37e:    distributed under the License is distributed on an "AS IS" BASIS,
1:070d37e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:070d37e:    See the License for the specific language governing permissions and
1:070d37e:    limitations under the License.
1:070d37e: 
1:070d37e:  */
1:070d37e: 
1:070d37e: package org.apache.derby.iapi.sql.compile;
1:070d37e: 
1:070d37e: import java.util.List;
1:070d37e: 
1:070d37e: import org.apache.derby.iapi.error.StandardException;
1:070d37e: 
1:070d37e: /**
1:070d37e:  * Filter which passes Visitables which have been marked with a given tag.
1:070d37e:  *
1:070d37e:  */
1:070d37e: public class TagFilter implements VisitableFilter
1:070d37e: {
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e:     //
1:070d37e:     //  CONSTANTS
1:070d37e:     //
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e: 
1:070d37e:     /** Tag placed on QueryTreeNodes which need privilege checks for UPDATE statements */
1:070d37e:     public  static  final   String      NEED_PRIVS_FOR_UPDATE_STMT = "updatePrivs";
1:070d37e: 
1:3e77b5a:     /** Tag placed on the original ColumnReferences in an UPDATE, before unreferenced columns are added */
1:3e77b5a:     public  static  final   String      ORIG_UPDATE_COL = "origUpdateCol";
1:3e77b5a: 
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e:     //
1:070d37e:     //  STATE
1:070d37e:     //
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e:     
1:070d37e:     private String  _tag;
1:070d37e:     
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e:     //
1:070d37e:     //  CONSTRUCTOR
1:070d37e:     //
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e: 
1:070d37e:     /** Construct a filter for the given tag. */
1:070d37e:     public  TagFilter( String tag ) { _tag = tag; }
1:070d37e:     
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e:     //
1:070d37e:     //  VisitableFilter BEHAVIOR
1:070d37e:     //
1:070d37e:     ///////////////////////////////////////////////////////////////////////////
1:070d37e:     
1:070d37e: 	public  boolean accept( Visitable visitable ) 
1:070d37e: 		throws StandardException
1:070d37e:     {
1:070d37e:         return visitable.taggedWith( _tag );
1:070d37e:     }
1:070d37e:     
1:070d37e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3e77b5a
/////////////////////////////////////////////////////////////////////////
1:     /** Tag placed on the original ColumnReferences in an UPDATE, before unreferenced columns are added */
1:     public  static  final   String      ORIG_UPDATE_COL = "origUpdateCol";
1: 
commit:070d37e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.compile.TagFilter
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import java.util.List;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Filter which passes Visitables which have been marked with a given tag.
1:  *
1:  */
1: public class TagFilter implements VisitableFilter
1: {
1:     ///////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////
1: 
1:     /** Tag placed on QueryTreeNodes which need privilege checks for UPDATE statements */
1:     public  static  final   String      NEED_PRIVS_FOR_UPDATE_STMT = "updatePrivs";
1: 
1:     ///////////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////
1:     
1:     private String  _tag;
1:     
1:     ///////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct a filter for the given tag. */
1:     public  TagFilter( String tag ) { _tag = tag; }
1:     
1:     ///////////////////////////////////////////////////////////////////////////
1:     //
1:     //  VisitableFilter BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////
1:     
1: 	public  boolean accept( Visitable visitable ) 
1: 		throws StandardException
1:     {
1:         return visitable.taggedWith( _tag );
1:     }
1:     
1: }
============================================================================