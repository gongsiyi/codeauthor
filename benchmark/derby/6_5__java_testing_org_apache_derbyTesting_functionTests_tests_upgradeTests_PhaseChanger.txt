1:10e07a5: /*
15:10e07a5: 
1:10e07a5: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger
1:10e07a5: 
1:10e07a5: Licensed to the Apache Software Foundation (ASF) under one or more
1:10e07a5: contributor license agreements.  See the NOTICE file distributed with
1:10e07a5: this work for additional information regarding copyright ownership.
1:10e07a5: The ASF licenses this file to You under the Apache License, Version 2.0
1:10e07a5: (the "License"); you may not use this file except in compliance with
1:10e07a5: the License.  You may obtain a copy of the License at
1:10e07a5: 
1:10e07a5:    http://www.apache.org/licenses/LICENSE-2.0
1:10e07a5: 
1:10e07a5: Unless required by applicable law or agreed to in writing, software
1:10e07a5: distributed under the License is distributed on an "AS IS" BASIS,
1:10e07a5: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10e07a5: See the License for the specific language governing permissions and
1:10e07a5: limitations under the License.
1:10e07a5: 
1:10e07a5: */
1:10e07a5: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:10e07a5: 
1:c34c1d2: import java.lang.reflect.Field;
1:f89c1b5: import java.lang.reflect.Method;
1:10e07a5: import java.sql.SQLException;
1:09ecd71: import java.util.Set;
1:10e07a5: 
1:10e07a5: import javax.sql.DataSource;
1:10e07a5: 
1:10e07a5: import junit.framework.Test;
1:10e07a5: 
1:daa4827: import org.apache.derbyTesting.junit.BaseTestCase;
1:23c0fed: import org.apache.derbyTesting.junit.BaseTestSetup;
1:493b80e: import org.apache.derbyTesting.junit.ClassLoaderTestSetup;
1:f89c1b5: import org.apache.derbyTesting.junit.JDBC;
1:daf5fa3: import org.apache.derbyTesting.junit.JDBCDataSource;
1:ca1a8f2: import org.apache.derbyTesting.junit.TestConfiguration;
1:daf5fa3: 
1:10e07a5: /**
1:10e07a5:  * Decorator that sets the phase of the upgrade process
1:10e07a5:  * for a suite of upgrade tests.
1:10e07a5:  */
1:23c0fed: final class PhaseChanger extends BaseTestSetup {
1:10e07a5: 
1:10e07a5:     private final int phase;
1:10e07a5:     private final int[] version;
1:10e07a5:     private ClassLoader loader;
1:10e07a5:     private ClassLoader previousLoader;
1:daa4827:     private boolean trace = false;
1:000d4bc:     private String upgradeAttributes="upgrade=true";
1:10e07a5:     
1:10e07a5:     public PhaseChanger(Test test, int phase,
1:000d4bc:             ClassLoader loader, int[] version, boolean useCreateOnUpgrade) {
1:10e07a5:         super(test);
1:10e07a5:         this.phase = phase;
1:10e07a5:         this.loader = loader;
1:10e07a5:         this.version = version;
1:000d4bc:         if (useCreateOnUpgrade) {
1:000d4bc:             upgradeAttributes += ";create=true";
1:000d4bc:         }
1:daf5fa3:     }
1:10e07a5:     
1:10e07a5:     /**
1:10e07a5:      * Set the phase and boot the database, creating it
1:10e07a5:      * or upgrading it as required. The thread context
1:10e07a5:      * class loader is changed to point to the old
1:10e07a5:      * jar files if required for the phase.
1:10e07a5:      */
1:10e07a5:     protected void setUp() throws SQLException
2:10e07a5:     {
1:e18f54b:         UpgradeChange.phase.set(phase);
1:10e07a5:         UpgradeChange.oldVersion.set(version);
1:aaa1403:         
1:daa4827:         TestConfiguration config = TestConfiguration.getCurrent();
1:daa4827:         trace = config.doTrace();
1:daa4827:         if ( trace )
1:daa4827:         {
1:daa4827:             String versStr = ((int[]) UpgradeChange.oldVersion.get())[0] 
1:daa4827:                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[1]
1:daa4827:                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[2]
1:daa4827:                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[3];
1:daa4827:             BaseTestCase.traceit("Test upgrade from: " + versStr + ", phase: " 
1:daa4827:                     + UpgradeChange.PHASES[phase]);
1:2133a29:             if (UpgradeChange.PHASES[phase].equals("UPGRADE")) {
1:2133a29:                 BaseTestCase.traceit("Upgrade attributes = " + upgradeAttributes);
1:2133a29:             }
1:daa4827:         }
1:10e07a5:         
1:10e07a5:         if (loader != null) {
1:10e07a5:             previousLoader = Thread.currentThread().getContextClassLoader();
1:493b80e:             ClassLoaderTestSetup.setThreadLoader(loader);
1:ca1a8f2:         }
1:10e07a5:          
2:10e07a5:         DataSource ds = JDBCDataSource.getDataSource();
1:10e07a5:         switch (phase)
1:ca1a8f2:         {
1:10e07a5:         case UpgradeChange.PH_POST_HARD_UPGRADE:
1:10e07a5:             // Post hard upgrade is expected to fail
1:10e07a5:             // since the database cannot be accessed
1:10e07a5:             // by the old version anymore. This will
1:10e07a5:             // be explictly tested eslewhere rather than
1:10e07a5:             // in a setup method.
1:10e07a5:             return;
1:ca1a8f2:             
1:10e07a5:         case UpgradeChange.PH_CREATE:
1:10e07a5:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:10e07a5:             break;
1:ca1a8f2:             
1:10e07a5:         case UpgradeChange.PH_HARD_UPGRADE:
1:10e07a5:             JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
1:000d4bc:                     upgradeAttributes);
1:10e07a5:             break;
1:10e07a5:         default:
1:10e07a5:             break;
1:ca1a8f2:         }
1:10e07a5:         
1:ca1a8f2:         // Ensure the database exists or upgrade it.
1:aaa1403:         ds.getConnection().close();
1:aaa1403: 
1:aaa1403:     }
1:ca1a8f2:     
1:10e07a5:     /**
1:e39eee7:      * Shutdown the database engine and reset the class loader.
1:e39eee7:      * @throws SQLException if the engine couldn't be stopped
1:10e07a5:      */
1:f89c1b5:     protected void tearDown() throws Exception
1:10e07a5:     {
1:daa4827:         if ( trace ) BaseTestCase.traceit(" Test upgrade done.");
1:e966609: 
1:e966609:         // Get a handle to the old engine's ContextService if this version is
1:e966609:         // affected by DERBY-23. The actual workaround for DERBY-23 must be
1:e966609:         // done after the engine has been shut down, but we fetch the handle
1:e966609:         // to the service before shutdown, while it's still easily available.
1:e966609:         Object contextService = getDerby23ContextService();
1:e966609: 
1:e39eee7:         DataSource ds = JDBCDataSource.getDataSource();
1:e39eee7:         JDBCDataSource.shutEngine(ds);
1:f89c1b5: 
1:eb60359:         // When shutting down the old engine for good, make sure that it's
1:eb60359:         // made eligible for garbage collection by working around bugs in
1:eb60359:         // some of the old versions.
1:c34c1d2:         if (phase == UpgradeChange.PH_POST_HARD_UPGRADE) {
1:eb60359:             // Workaround for DERBY-2905. Some versions don't deregister the
1:eb60359:             // JDBC driver when shutting down the engine.
1:eb60359:             deregisterDriver();
1:eb60359: 
1:eb60359:             // Workaround for DERBY-4895, which prevented the engine classes
1:eb60359:             // from being garbage collected.
1:c34c1d2:             clearDerby4895ThreadLocal();
1:aaa1403:         }
1:c34c1d2: 
1:e966609:         // Workaround for DERBY-23, continued. If this is one of the affected
1:e966609:         // versions, clear the fields that prevent the engine from being
1:e966609:         // garbage collected.
1:e966609:         clearDerby23ThreadLocals(contextService);
1:e966609: 
1:10e07a5:         if (loader != null)
1:493b80e:             ClassLoaderTestSetup.setThreadLoader(previousLoader);
1:10e07a5:         loader = null;
1:10e07a5:         previousLoader = null;
1:ca1a8f2:         
1:10e07a5:         UpgradeChange.phase.set(null);
1:10e07a5:         UpgradeChange.oldVersion.set(null);
1:c34c1d2:     }
1:f89c1b5: 
1:f89c1b5:     /**
1:eb60359:      * Make sure the JDBC driver in the class loader associated with this
1:eb60359:      * version is deregistered. This is a workaround for DERBY-2905, which
1:eb60359:      * affected Derby 10.2 - 10.7, and it is needed to make the old engine
1:eb60359:      * classes eligible for garbage collection.
1:f89c1b5:      */
1:f89c1b5:     private void deregisterDriver() throws Exception {
1:eb60359:         boolean isAffectedVersion =
1:eb60359:                 UpgradeRun.lessThan(new int[] {10,2,0,0}, version) &&
1:eb60359:                 UpgradeRun.lessThan(version, new int[] {10,8,0,0});
1:eb60359: 
1:eb60359:         if (JDBC.vmSupportsJDBC3()) {
1:eb60359:             // DriverManager only allows deregistering of drivers from classes
1:eb60359:             // that live in a class loader that is able to load the driver. So
1:eb60359:             // create an instance of DriverUnloader in the old driver's class
1:eb60359:             // loader.
1:e18f54b:             Class<?> unloader = Class.forName(
1:eb60359:                     DriverUnloader.class.getName(), true, loader);
1:eb60359:             Method m = unloader.getMethod("unload", (Class[]) null);
1:eb60359:             Boolean res = (Boolean) m.invoke(null, (Object[]) null);
1:eb60359: 
1:eb60359:             // Check that there weren't any drivers to unload except in the
1:eb60359:             // versions affected by DERBY-2905.
1:eb60359:             assertEquals("Unexpected result from driver unloading",
1:eb60359:                          isAffectedVersion, res.booleanValue());
1:eb60359:         }
1:f89c1b5:     }
1:c34c1d2: 
1:c34c1d2:     /**
1:c34c1d2:      * Clear a static ThreadLocal field in TableDescriptor so that the engine
1:c34c1d2:      * classes can be garbage collected when they are no longer used. This is
1:c34c1d2:      * a workaround for DERBY-4895, which affects Derby 10.5 and 10.6.
1:c34c1d2:      */
1:c34c1d2:     private void clearDerby4895ThreadLocal() throws Exception {
1:c34c1d2:         boolean isAffectedVersion =
1:c34c1d2:             (UpgradeRun.lessThan(new int[] {10,5,0,0}, version) &&
1:c34c1d2:              UpgradeRun.lessThan(version, new int[] {10,5,3,2}))
1:c34c1d2:             ||
1:c34c1d2:             (UpgradeRun.lessThan(new int[] {10,6,0,0}, version) &&
1:c34c1d2:              UpgradeRun.lessThan(version, new int[] {10,6,2,3}));
1:c34c1d2: 
1:c34c1d2:         if (!isAffectedVersion) {
1:c34c1d2:             // Nothing to work around in this version.
1:c34c1d2:             return;
1:c34c1d2:         }
1:c34c1d2: 
1:c34c1d2:         Class td = Class.forName(
1:c34c1d2:                 "org.apache.derby.iapi.sql.dictionary.TableDescriptor",
1:c34c1d2:                 true, loader);
1:e966609:         clearField(td, "referencedColumnMap", null);
1:e966609:     }
1:e966609: 
1:e966609:     /**
1:e966609:      * Clear a field that is possibly private or final.
1:e966609:      *
1:e966609:      * @param cls the class in which the field lives
1:e966609:      * @param name the name of the field to clear
1:e966609:      * @param instance the instance whose field should be cleared,
1:e966609:      *                 or null if the field is static
1:e966609:      */
1:e966609:     private static void clearField(Class cls, String name, Object instance)
1:e966609:             throws Exception {
1:e966609:         Field f = cls.getDeclaredField(name);
1:c34c1d2:         f.setAccessible(true);
1:e966609:         f.set(instance, null);
1:e966609:     }
1:e966609: 
1:e966609:     /**
1:e966609:      * Get a handle to the ContextService in the old engine if the version
1:e966609:      * is affected by DERBY-23.
1:e966609:      *
1:e966609:      * @return the ContextService, if this version is affected by DERBY-23,
1:e966609:      * or null otherwise
1:e966609:      */
1:e966609:     private Object getDerby23ContextService() throws Exception {
1:e966609:         if (loader != null &&
1:e966609:                 UpgradeRun.lessThan(version, new int[] {10,2,1,6})) {
1:e966609:             Class cls = Class.forName(
1:e966609:                     "org.apache.derby.iapi.services.context.ContextService",
1:e966609:                     true, loader);
1:e966609:             Field f = cls.getDeclaredField("factory");
1:e966609:             f.setAccessible(true);
1:e966609:             return f.get(null);
1:e966609:         }
1:e966609: 
1:e966609:         return null;
1:e966609:     }
1:e966609: 
1:e966609:     /**
1:e966609:      * Clear some fields in ContextService to allow the engine to be garbage
1:e966609:      * collected. This is a workaround for DERBY-23.
1:e966609:      *
1:e966609:      * @param contextService the context service for an engine that has been
1:e966609:      * shut down, or null if this version of the engine doesn't suffer from
1:e966609:      * DERBY-23
1:e966609:      */
1:e966609:     private void clearDerby23ThreadLocals(Object contextService)
1:e966609:             throws Exception {
1:e966609:         if (contextService != null) {
1:e966609:             Class cls = contextService.getClass();
1:09ecd71: 
1:09ecd71:             // DERBY-5343: Ideally, we'd just set the two fields to null
1:09ecd71:             // like this:
1:09ecd71:             //
1:09ecd71:             //     clearField(cls, "threadContextList", contextService);
1:09ecd71:             //     clearField(cls, "allContexts", contextService);
1:09ecd71:             //
1:09ecd71:             // However, the fields are final in the versions that suffer from
1:09ecd71:             // DERBY-23, and Java versions prior to Java 5 don't allow us to
1:09ecd71:             // modify final fields. So let's take a different approach to make
1:09ecd71:             // it work on Java 1.4.2 and Foundation Profile 1.1 as well.
1:09ecd71: 
1:09ecd71:             // The field threadContextList is a ThreadLocal. Clear it in the
1:09ecd71:             // current thread. Assuming all other threads that have accessed
1:09ecd71:             // the database engine (background threads and any helper threads
1:09ecd71:             // started by the test cases) are stopped and made eligible for
1:09ecd71:             // garbage collection, this should be a sufficient replacement for
1:09ecd71:             // setting the field to null.
1:09ecd71:             Field tclField = cls.getDeclaredField("threadContextList");
1:09ecd71:             tclField.setAccessible(true);
1:e18f54b:             ThreadLocal<?> tcl = (ThreadLocal) tclField.get(contextService);
1:09ecd71:             tcl.set(null);
1:09ecd71: 
1:09ecd71:             // The field allContexts is a HashSet. Calling clear() should be
1:09ecd71:             // equivalent to setting it to null in terms of making its elements
1:09ecd71:             // eligible for garbage collection.
1:09ecd71:             Field acField = cls.getDeclaredField("allContexts");
1:09ecd71:             acField.setAccessible(true);
1:09ecd71:             Set ac = (Set) acField.get(contextService);
1:09ecd71:             ac.clear();
1:e966609:         }
1:c34c1d2:     }
1:f89c1b5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:493b80e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.ClassLoaderTestSetup;
/////////////////////////////////////////////////////////////////////////
1:             ClassLoaderTestSetup.setThreadLoader(loader);
/////////////////////////////////////////////////////////////////////////
1:             ClassLoaderTestSetup.setThreadLoader(previousLoader);
commit:aaa1403
/////////////////////////////////////////////////////////////////////////
0:                     UpgradeRun.ADDITIONAL_DBS[i].logicalName);
1: 
0:                 if (UpgradeRun.ADDITIONAL_DBS[i].shutDown) {
0:                     boolean shutdown = true;
0:                     try {
1:                         ds.getConnection().close();
0:                     } catch (SQLException e) {
0:                         // if the database was never created
0:                         // don't bother shutting it down
0:                         String sqlState = e.getSQLState();
0:                         if ("XJ004".equals(sqlState) ||
0:                                 "XJ040".equals(sqlState)) {
0:                             shutdown = false;
1:                         }
1:                     }
1: 
0:                     if (shutdown)
0:                         JDBCDataSource.shutdownDatabase(ds);
0:                 } // else done by test
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:         UpgradeChange.phase.set(phase);
/////////////////////////////////////////////////////////////////////////
1:             Class<?> unloader = Class.forName(
/////////////////////////////////////////////////////////////////////////
1:             ThreadLocal<?> tcl = (ThreadLocal) tclField.get(contextService);
commit:09ecd71
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 
1:             // DERBY-5343: Ideally, we'd just set the two fields to null
1:             // like this:
1:             //
1:             //     clearField(cls, "threadContextList", contextService);
1:             //     clearField(cls, "allContexts", contextService);
1:             //
1:             // However, the fields are final in the versions that suffer from
1:             // DERBY-23, and Java versions prior to Java 5 don't allow us to
1:             // modify final fields. So let's take a different approach to make
1:             // it work on Java 1.4.2 and Foundation Profile 1.1 as well.
1: 
1:             // The field threadContextList is a ThreadLocal. Clear it in the
1:             // current thread. Assuming all other threads that have accessed
1:             // the database engine (background threads and any helper threads
1:             // started by the test cases) are stopped and made eligible for
1:             // garbage collection, this should be a sufficient replacement for
1:             // setting the field to null.
1:             Field tclField = cls.getDeclaredField("threadContextList");
1:             tclField.setAccessible(true);
0:             ThreadLocal tcl = (ThreadLocal) tclField.get(contextService);
1:             tcl.set(null);
1: 
1:             // The field allContexts is a HashSet. Calling clear() should be
1:             // equivalent to setting it to null in terms of making its elements
1:             // eligible for garbage collection.
1:             Field acField = cls.getDeclaredField("allContexts");
1:             acField.setAccessible(true);
1:             Set ac = (Set) acField.get(contextService);
1:             ac.clear();
commit:e966609
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Get a handle to the old engine's ContextService if this version is
1:         // affected by DERBY-23. The actual workaround for DERBY-23 must be
1:         // done after the engine has been shut down, but we fetch the handle
1:         // to the service before shutdown, while it's still easily available.
1:         Object contextService = getDerby23ContextService();
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Workaround for DERBY-23, continued. If this is one of the affected
1:         // versions, clear the fields that prevent the engine from being
1:         // garbage collected.
1:         clearDerby23ThreadLocals(contextService);
1: 
/////////////////////////////////////////////////////////////////////////
1:         clearField(td, "referencedColumnMap", null);
1:     }
1: 
1:     /**
1:      * Clear a field that is possibly private or final.
1:      *
1:      * @param cls the class in which the field lives
1:      * @param name the name of the field to clear
1:      * @param instance the instance whose field should be cleared,
1:      *                 or null if the field is static
1:      */
1:     private static void clearField(Class cls, String name, Object instance)
1:             throws Exception {
1:         Field f = cls.getDeclaredField(name);
1:         f.set(instance, null);
1:     }
1: 
1:     /**
1:      * Get a handle to the ContextService in the old engine if the version
1:      * is affected by DERBY-23.
1:      *
1:      * @return the ContextService, if this version is affected by DERBY-23,
1:      * or null otherwise
1:      */
1:     private Object getDerby23ContextService() throws Exception {
1:         if (loader != null &&
1:                 UpgradeRun.lessThan(version, new int[] {10,2,1,6})) {
1:             Class cls = Class.forName(
1:                     "org.apache.derby.iapi.services.context.ContextService",
1:                     true, loader);
1:             Field f = cls.getDeclaredField("factory");
1:             f.setAccessible(true);
1:             return f.get(null);
1:         }
1: 
1:         return null;
1:     }
1: 
1:     /**
1:      * Clear some fields in ContextService to allow the engine to be garbage
1:      * collected. This is a workaround for DERBY-23.
1:      *
1:      * @param contextService the context service for an engine that has been
1:      * shut down, or null if this version of the engine doesn't suffer from
1:      * DERBY-23
1:      */
1:     private void clearDerby23ThreadLocals(Object contextService)
1:             throws Exception {
1:         if (contextService != null) {
1:             Class cls = contextService.getClass();
0:             clearField(cls, "threadContextList", contextService);
0:             clearField(cls, "allContexts", contextService);
1:         }
commit:eb60359
/////////////////////////////////////////////////////////////////////////
1:         // When shutting down the old engine for good, make sure that it's
1:         // made eligible for garbage collection by working around bugs in
1:         // some of the old versions.
1:             // Workaround for DERBY-2905. Some versions don't deregister the
1:             // JDBC driver when shutting down the engine.
1:             deregisterDriver();
1: 
1:             // Workaround for DERBY-4895, which prevented the engine classes
1:             // from being garbage collected.
/////////////////////////////////////////////////////////////////////////
1:      * Make sure the JDBC driver in the class loader associated with this
1:      * version is deregistered. This is a workaround for DERBY-2905, which
1:      * affected Derby 10.2 - 10.7, and it is needed to make the old engine
1:      * classes eligible for garbage collection.
1:         boolean isAffectedVersion =
1:                 UpgradeRun.lessThan(new int[] {10,2,0,0}, version) &&
1:                 UpgradeRun.lessThan(version, new int[] {10,8,0,0});
1: 
1:         if (JDBC.vmSupportsJDBC3()) {
1:             // DriverManager only allows deregistering of drivers from classes
1:             // that live in a class loader that is able to load the driver. So
1:             // create an instance of DriverUnloader in the old driver's class
1:             // loader.
0:             Class unloader = Class.forName(
1:                     DriverUnloader.class.getName(), true, loader);
1:             Method m = unloader.getMethod("unload", (Class[]) null);
1:             Boolean res = (Boolean) m.invoke(null, (Object[]) null);
1: 
1:             // Check that there weren't any drivers to unload except in the
1:             // versions affected by DERBY-2905.
1:             assertEquals("Unexpected result from driver unloading",
1:                          isAffectedVersion, res.booleanValue());
1:         }
commit:c34c1d2
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
/////////////////////////////////////////////////////////////////////////
0:         // Workaround for DERBY-4895, which prevented the engine classes from
0:         // being garbage collected.
1:         if (phase == UpgradeChange.PH_POST_HARD_UPGRADE) {
1:             clearDerby4895ThreadLocal();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Clear a static ThreadLocal field in TableDescriptor so that the engine
1:      * classes can be garbage collected when they are no longer used. This is
1:      * a workaround for DERBY-4895, which affects Derby 10.5 and 10.6.
1:      */
1:     private void clearDerby4895ThreadLocal() throws Exception {
1:         boolean isAffectedVersion =
1:             (UpgradeRun.lessThan(new int[] {10,5,0,0}, version) &&
1:              UpgradeRun.lessThan(version, new int[] {10,5,3,2}))
1:             ||
1:             (UpgradeRun.lessThan(new int[] {10,6,0,0}, version) &&
1:              UpgradeRun.lessThan(version, new int[] {10,6,2,3}));
1: 
1:         if (!isAffectedVersion) {
1:             // Nothing to work around in this version.
1:             return;
1:         }
1: 
1:         Class td = Class.forName(
1:                 "org.apache.derby.iapi.sql.dictionary.TableDescriptor",
1:                 true, loader);
0:         Field f = td.getDeclaredField("referencedColumnMap");
1:         f.setAccessible(true);
0:         f.set(null, null);
1:     }
commit:f89c1b5
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception
0:         // When we're done with the old driver, make sure it's deregistered
0:         // from the DriverManager (if running on a platform that has the
0:         // DriverManager class). The shutEngine() should also deregister the
0:         // driver, but on some versions it doesn't (DERBY-2905, DERBY-5316).
0:         if (phase == UpgradeChange.PH_POST_HARD_UPGRADE &&
0:                 JDBC.vmSupportsJDBC3()) {
0:             deregisterDriver();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Deregister all JDBC drivers in the class loader associated with this
0:      * version.
1:      */
1:     private void deregisterDriver() throws Exception {
0:         // DriverManager only allows deregistering of drivers from classes
0:         // that live in a class loader that is able to load the driver. So
0:         // create an instance of DriverUnloader in the old driver's class
0:         // loader.
0:         Class unloader = Class.forName(
0:                 DriverUnloader.class.getName(), true, loader);
0:         Method m = unloader.getMethod("unload", (Class[]) null);
0:         m.invoke(null, (Object[]) null);
1:     }
commit:e39eee7
/////////////////////////////////////////////////////////////////////////
1:      * Shutdown the database engine and reset the class loader.
1:      * @throws SQLException if the engine couldn't be stopped
0:     protected void tearDown() throws SQLException
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         JDBCDataSource.shutEngine(ds);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2133a29
/////////////////////////////////////////////////////////////////////////
1:             if (UpgradeChange.PHASES[phase].equals("UPGRADE")) {
1:                 BaseTestCase.traceit("Upgrade attributes = " + upgradeAttributes);
1:             }
commit:000d4bc
/////////////////////////////////////////////////////////////////////////
1:     private String upgradeAttributes="upgrade=true";
1:             ClassLoader loader, int[] version, boolean useCreateOnUpgrade) {
1:         if (useCreateOnUpgrade) {
1:             upgradeAttributes += ";create=true";
1:         }
/////////////////////////////////////////////////////////////////////////
1:                     upgradeAttributes);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e65365e
/////////////////////////////////////////////////////////////////////////
0:             UpgradeClassLoader.setThreadLoader(loader);
/////////////////////////////////////////////////////////////////////////
0:             UpgradeClassLoader.setThreadLoader(previousLoader);       
/////////////////////////////////////////////////////////////////////////
commit:daa4827
/////////////////////////////////////////////////////////////////////////
0: import java.io.PrintStream;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
1:     private boolean trace = false;
/////////////////////////////////////////////////////////////////////////
1:         TestConfiguration config = TestConfiguration.getCurrent();
1:         trace = config.doTrace();
1:         if ( trace )
1:         {
1:             String versStr = ((int[]) UpgradeChange.oldVersion.get())[0] 
1:                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[1]
1:                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[2]
1:                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[3];
1:             BaseTestCase.traceit("Test upgrade from: " + versStr + ", phase: " 
1:                     + UpgradeChange.PHASES[phase]);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if ( trace ) BaseTestCase.traceit(" Test upgrade done.");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:7fe51c3
/////////////////////////////////////////////////////////////////////////
commit:9cf3fb5
/////////////////////////////////////////////////////////////////////////
0:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:23c0fed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSetup;
/////////////////////////////////////////////////////////////////////////
1: final class PhaseChanger extends BaseTestSetup {
commit:918e8b0
/////////////////////////////////////////////////////////////////////////
0:                     // don't bother shutting it down
0:                     String sqlState = e.getSQLState();
0:                     if ("XJ004".equals(sqlState) || "XJ040".equals(sqlState))
commit:ca1a8f2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         // Ensure the database exists or upgrade it.
0:         ds.getConnection().close();
1: 
0:      * Shutdown the database(s) and reset the class loader.
/////////////////////////////////////////////////////////////////////////
1: 
0:             for (int i = 0; i < UpgradeRun.ADDITIONAL_DBS.length; i++)
1:             {
0:                 ds = JDBCDataSource.getDataSourceLogical(
0:                         UpgradeRun.ADDITIONAL_DBS[i]);
1:                 
0:                 boolean shutdown = true;
0:                 try {
0:                     ds.getConnection().close();
0:                 } catch (SQLException e) {
0:                     // if the database was never created
0:                     // don't bother shutting it down.
0:                     if ("XJ004".equals(e.getSQLState()))
0:                         shutdown = false;
1:                 }
1:                 
0:                 if (shutdown)
0:                     JDBCDataSource.shutdownDatabase(ds);
1:             }
commit:daf5fa3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: 
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             ds.getConnection().close();
0:         } catch (SQLException e) {
0:             // TODO Auto-generated catch block
0:             do {
0:                 e.printStackTrace();
0:                 e = e.getNextException();
0:             } while (e != null);
0:             //throw e;
1:         }
commit:10e07a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
0: import java.security.AccessController;
0: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
1: import javax.sql.DataSource;
1: 
0: import org.apache.derbyTesting.junit.JDBCDataSource;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: 
1: /**
1:  * Decorator that sets the phase of the upgrade process
1:  * for a suite of upgrade tests.
1:  */
0: final class PhaseChanger extends TestSetup {
1: 
1:     private final int phase;
1:     private final int[] version;
1:     private ClassLoader loader;
1:     private ClassLoader previousLoader;
1:     
1:     public PhaseChanger(Test test, int phase,
0:             ClassLoader loader, int[] version) {
1:         super(test);
1:         this.phase = phase;
1:         this.loader = loader;
1:         this.version = version;
0:     }
1:     
1:     /**
1:      * Set the phase and boot the database, creating it
1:      * or upgrading it as required. The thread context
1:      * class loader is changed to point to the old
1:      * jar files if required for the phase.
1:      */
1:     protected void setUp() throws SQLException
1:     {
0:         UpgradeChange.phase.set(new Integer(phase));
1:         UpgradeChange.oldVersion.set(version);
1:         
1:         
1:         if (loader != null) {
1:             previousLoader = Thread.currentThread().getContextClassLoader();
0:             setThreadLoader(loader);
0:         }
1:          
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         switch (phase)
1:         {
1:         case UpgradeChange.PH_POST_HARD_UPGRADE:
1:             // Post hard upgrade is expected to fail
1:             // since the database cannot be accessed
1:             // by the old version anymore. This will
1:             // be explictly tested eslewhere rather than
1:             // in a setup method.
1:             return;
1:             
1:         case UpgradeChange.PH_CREATE:
1:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:             break;
1:             
1:         case UpgradeChange.PH_HARD_UPGRADE:
1:             JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
0:                     "upgrade=true");
1:             break;
1:         default:
1:             break;
0:         }
1:         
0:         ds.getConnection().close();
0:     }
1:     
1:     /**
0:      * Shutdown the database and reset the class loader.
0:      * @throws InterruptedException 
1:      */
0:     protected void tearDown() throws InterruptedException
1:     {
0:         if (phase != UpgradeChange.PH_POST_HARD_UPGRADE) {
1:             DataSource ds = JDBCDataSource.getDataSource();
0:             JDBCDataSource.shutdownDatabase(ds);
0:         }
1:         
1:        
1:         if (loader != null)
0:             setThreadLoader(previousLoader);       
1:         loader = null;
1:         previousLoader = null;
1:         
1:         UpgradeChange.phase.set(null);
1:         UpgradeChange.oldVersion.set(null);
0:     }
1:     
0:     private void setThreadLoader(final ClassLoader which) {
1: 
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run()  { 
0:                 java.lang.Thread.currentThread().setContextClassLoader(which);
0:               return null;
0:             }
0:         });
0:     }
1:     
0:     private ClassLoader getThreadLoader() {
1: 
0:         return (ClassLoader) AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run()  { 
0:                 return Thread.currentThread().getContextClassLoader();
0:             }
0:         });
0:     }
0: }
============================================================================