1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.crypto.CipherProvider
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.crypto;
1:eac0369: 
1:eac0369: import java.security.Key;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A CipherProvider is a wrapper for a Cipher class in JCE.
1:eac0369: 
1:eac0369: 	This service is only available when run on JDK1.2 or beyond.
1:eac0369: 	To use this service, either the SunJCE or an alternative clean room
1:eac0369:     implementation of the JCE must be installed.
1:eac0369: 
1:eac0369: 	To use a CipherProvider to encrypt or decrypt, it needs 3 things:
1:eac0369: 	1) A CipherProvider that is initialized to ENCRYPT or DECRYPT
1:eac0369: 	2) A secret Key for the encryption/decryption
1:eac0369: 	3) An Initialization Vector (IvParameterSpec) that is used to create some
1:eac0369: 		randomness in the encryption
1:eac0369: 
1:eac0369:     See $WS/docs/funcspec/mulan/configurableEncryption.html
1:eac0369: 
1:eac0369: 	See http://java.sun.com/products/JDK/1.1/docs/guide/security/CryptoSpec.html
1:eac0369: 	See http://java.sun.com/products/JDK/1.2/docs/guide/security/CryptoSpec.html
1:eac0369: 	See http://java.sun.com/products/jdk/1.2/jce/index.html
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface CipherProvider
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Encrypt data - use only with Cipher that has been initialized with
1:eac0369: 		CipherFactory.ENCRYPT.
1:eac0369: 
1:eac0369: 		@return The number of bytes stored in ciphertext.
1:eac0369: 
1:eac0369: 		@param cleartext the byte array containing the cleartext
1:eac0369: 		@param offset encrypt from this byte offset in the cleartext
1:eac0369: 		@param length encrypt this many bytes starting from offset
1:eac0369: 		@param ciphertext the byte array to store the ciphertext
1:eac0369: 		@param outputOffset the offset into the ciphertext array the output
1:eac0369: 				should go
1:eac0369: 
1:eac0369: 		If cleartext and ciphertext are the same array, caller must be careful
1:eac0369: 		to not overwrite the cleartext before it is scrambled.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	 */
1:eac0369: 	int encrypt(byte[] cleartext, int offset, int length,
1:eac0369: 				byte[] ciphertext, int outputOffset)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Decrypt data - use only with Cipher that has been initialized with
1:eac0369: 		CipherFactory.DECRYPT.
1:eac0369: 
1:eac0369: 		@return The number of bytes stored in cleartext.
1:eac0369: 
1:eac0369: 		@param ciphertext the byte array containing the ciphertext
1:eac0369: 		@param offset decrypt from this byte offset in the ciphertext
1:eac0369: 		@param length decrypt this many bytes starting from offset
1:eac0369: 		@param cleartext the byte array to store the cleartext
1:eac0369: 		@param outputOffset the offset into the cleartext array the output
1:eac0369: 				should go
1:eac0369: 
1:eac0369: 		If cleartext and ciphertext are the same array, caller must be careful
1:eac0369: 		to not overwrite the ciphertext before it is un-scrambled.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	 */
1:eac0369: 	int decrypt(byte[] ciphertext, int offset, int length,
1:eac0369: 				byte[] cleartext, int outputOffset)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 	Returns the encryption block size used during creation of the encrypted database
1:eac0369: 	 */
1:eac0369: 	public int getEncryptionBlockSize();
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.crypto.CipherProvider
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.crypto
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.crypto;
1: 
1: import java.security.Key;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	A CipherProvider is a wrapper for a Cipher class in JCE.
1: 
1: 	This service is only available when run on JDK1.2 or beyond.
1: 	To use this service, either the SunJCE or an alternative clean room
1:     implementation of the JCE must be installed.
1: 
1: 	To use a CipherProvider to encrypt or decrypt, it needs 3 things:
1: 	1) A CipherProvider that is initialized to ENCRYPT or DECRYPT
1: 	2) A secret Key for the encryption/decryption
1: 	3) An Initialization Vector (IvParameterSpec) that is used to create some
1: 		randomness in the encryption
1: 
1:     See $WS/docs/funcspec/mulan/configurableEncryption.html
1: 
1: 	See http://java.sun.com/products/JDK/1.1/docs/guide/security/CryptoSpec.html
1: 	See http://java.sun.com/products/JDK/1.2/docs/guide/security/CryptoSpec.html
1: 	See http://java.sun.com/products/jdk/1.2/jce/index.html
1:  */
1: 
1: public interface CipherProvider
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/**
1: 		Encrypt data - use only with Cipher that has been initialized with
1: 		CipherFactory.ENCRYPT.
1: 
1: 		@return The number of bytes stored in ciphertext.
1: 
1: 		@param cleartext the byte array containing the cleartext
1: 		@param offset encrypt from this byte offset in the cleartext
1: 		@param length encrypt this many bytes starting from offset
1: 		@param ciphertext the byte array to store the ciphertext
1: 		@param outputOffset the offset into the ciphertext array the output
1: 				should go
1: 
1: 		If cleartext and ciphertext are the same array, caller must be careful
1: 		to not overwrite the cleartext before it is scrambled.
1: 
0: 		@exception StandardException Standard Cloudscape Error Policy
1: 	 */
1: 	int encrypt(byte[] cleartext, int offset, int length,
1: 				byte[] ciphertext, int outputOffset)
1: 		 throws StandardException;
1: 
1: 	/**
1: 		Decrypt data - use only with Cipher that has been initialized with
1: 		CipherFactory.DECRYPT.
1: 
1: 		@return The number of bytes stored in cleartext.
1: 
1: 		@param ciphertext the byte array containing the ciphertext
1: 		@param offset decrypt from this byte offset in the ciphertext
1: 		@param length decrypt this many bytes starting from offset
1: 		@param cleartext the byte array to store the cleartext
1: 		@param outputOffset the offset into the cleartext array the output
1: 				should go
1: 
1: 		If cleartext and ciphertext are the same array, caller must be careful
1: 		to not overwrite the ciphertext before it is un-scrambled.
1: 
0: 		@exception StandardException Standard Cloudscape Error Policy
1: 	 */
1: 	int decrypt(byte[] ciphertext, int offset, int length,
1: 				byte[] cleartext, int outputOffset)
1: 		 throws StandardException;
1: 
1: 
1: 	/**
1: 	 	Returns the encryption block size used during creation of the encrypted database
1: 	 */
1: 	public int getEncryptionBlockSize();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.crypto
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.crypto;
0: 
0: import java.security.Key;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	A CipherProvider is a wrapper for a Cipher class in JCE.
0: 
0: 	This service is only available when run on JDK1.2 or beyond.
0: 	To use this service, either the SunJCE or an alternative clean room
0:     implementation of the JCE must be installed.
0: 
0: 	To use a CipherProvider to encrypt or decrypt, it needs 3 things:
0: 	1) A CipherProvider that is initialized to ENCRYPT or DECRYPT
0: 	2) A secret Key for the encryption/decryption
0: 	3) An Initialization Vector (IvParameterSpec) that is used to create some
0: 		randomness in the encryption
0: 
0:     See $WS/docs/funcspec/mulan/configurableEncryption.html
0: 
0: 	See http://java.sun.com/products/JDK/1.1/docs/guide/security/CryptoSpec.html
0: 	See http://java.sun.com/products/JDK/1.2/docs/guide/security/CryptoSpec.html
0: 	See http://java.sun.com/products/jdk/1.2/jce/index.html
0:  */
0: 
0: public interface CipherProvider
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Encrypt data - use only with Cipher that has been initialized with
0: 		CipherFactory.ENCRYPT.
0: 
0: 		@return The number of bytes stored in ciphertext.
0: 
0: 		@param cleartext the byte array containing the cleartext
0: 		@param offset encrypt from this byte offset in the cleartext
0: 		@param length encrypt this many bytes starting from offset
0: 		@param ciphertext the byte array to store the ciphertext
0: 		@param outputOffset the offset into the ciphertext array the output
0: 				should go
0: 
0: 		If cleartext and ciphertext are the same array, caller must be careful
0: 		to not overwrite the cleartext before it is scrambled.
0: 
0: 		@exception StandardException Standard Cloudscape Error Policy
0: 	 */
0: 	int encrypt(byte[] cleartext, int offset, int length,
0: 				byte[] ciphertext, int outputOffset)
0: 		 throws StandardException;
0: 
0: 	/**
0: 		Decrypt data - use only with Cipher that has been initialized with
0: 		CipherFactory.DECRYPT.
0: 
0: 		@return The number of bytes stored in cleartext.
0: 
0: 		@param ciphertext the byte array containing the ciphertext
0: 		@param offset decrypt from this byte offset in the ciphertext
0: 		@param length decrypt this many bytes starting from offset
0: 		@param cleartext the byte array to store the cleartext
0: 		@param outputOffset the offset into the cleartext array the output
0: 				should go
0: 
0: 		If cleartext and ciphertext are the same array, caller must be careful
0: 		to not overwrite the ciphertext before it is un-scrambled.
0: 
0: 		@exception StandardException Standard Cloudscape Error Policy
0: 	 */
0: 	int decrypt(byte[] ciphertext, int offset, int length,
0: 				byte[] cleartext, int outputOffset)
0: 		 throws StandardException;
0: 
0: 
0: 	/**
0: 	 	Returns the encryption block size used during creation of the encrypted database
0: 	 */
0: 	public int getEncryptionBlockSize();
0: }
============================================================================