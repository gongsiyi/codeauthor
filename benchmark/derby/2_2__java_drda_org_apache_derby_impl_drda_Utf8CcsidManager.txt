1:cdfb2d1: /*
1:cdfb2d1: 
1:cdfb2d1:    Derby - Class org.apache.derby.impl.drda.Utf8CcsidManager
1:cdfb2d1: 
1:cdfb2d1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:cdfb2d1:    contributor license agreements.  See the NOTICE file distributed with
1:cdfb2d1:    this work for additional information regarding copyright ownership.
1:cdfb2d1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:cdfb2d1:    (the "License"); you may not use this file except in compliance with
1:cdfb2d1:    the License.  You may obtain a copy of the License at
1:cdfb2d1: 
1:cdfb2d1:       http://www.apache.org/licenses/LICENSE-2.0
1:cdfb2d1: 
1:cdfb2d1:    Unless required by applicable law or agreed to in writing, software
1:cdfb2d1:    distributed under the License is distributed on an "AS IS" BASIS,
1:cdfb2d1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdfb2d1:    See the License for the specific language governing permissions and
1:cdfb2d1:    limitations under the License.
1:cdfb2d1: 
1:cdfb2d1:  */
1:cdfb2d1: package org.apache.derby.impl.drda;
1:cdfb2d1: 
1:cdfb2d1: import java.io.UnsupportedEncodingException;
1:cdfb2d1: import java.nio.ByteBuffer;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:cdfb2d1: 
1:cdfb2d1: public class Utf8CcsidManager extends CcsidManager {
1:cdfb2d1: 
1:cdfb2d1:     public Utf8CcsidManager() {
1:cdfb2d1:         super((byte)' ',
1:cdfb2d1:               (byte)'.',
1:cdfb2d1:               new byte[] {
1:cdfb2d1:               //      '0',       '1',      '2',        '3',      '4',
1:cdfb2d1:                 (byte)0xf0,(byte)0xf1,(byte)0xf2,(byte)0xf3,(byte)0xf4,
1:cdfb2d1:               //      '5',       '6',       '7',       '8',      '9',
1:cdfb2d1:                 (byte)0xf5,(byte)0xf6,(byte)0xf7,(byte)0xf8,(byte)0xf9,
1:cdfb2d1:               //      'A',       'B',       'C',       'D',      'E',
1:cdfb2d1:                 (byte)0xc1,(byte)0xc2,(byte)0xc3,(byte)0xc4,(byte)0xc5,
1:cdfb2d1:               //      'F',       'G',       'H',      'I',       'J',
1:cdfb2d1:                 (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
1:cdfb2d1:               //     'K',        'L',       'M',       'N',      'O',
1:cdfb2d1:                 (byte)0xd2,(byte)0xd3,(byte)0xd4,(byte)0xd5,(byte)0xd6,
1:cdfb2d1:               //     'P'
1:cdfb2d1:                 (byte)0xd7
1:cdfb2d1:               });
1:cdfb2d1:     }
1:cdfb2d1:     
1:cdfb2d1:     public byte[] convertFromJavaString(String sourceString){
1:cdfb2d1:         try {
1:cdfb2d1:             return sourceString.getBytes("UTF-8");
1:cdfb2d1:         } catch (UnsupportedEncodingException e) {
1:802cd1c:             if (SanityManager.DEBUG) {
1:802cd1c:                 SanityManager.THROWASSERT("Could not convert Java String to byte[] in UTF-8", e);
1:802cd1c:             }
1:cdfb2d1:         }
1:cdfb2d1:         return null;
1:cdfb2d1:     }
1:cdfb2d1:     
1:cdfb2d1:     public String convertToJavaString(byte[] sourceBytes) {
1:cdfb2d1:        try {
1:cdfb2d1:            return new String(sourceBytes,"UTF-8");
1:cdfb2d1:         } catch (UnsupportedEncodingException e) {
1:802cd1c:             if (SanityManager.DEBUG) {
1:802cd1c:                 SanityManager.THROWASSERT("Could not convert byte[] to Java String using UTF-8 encoding", e);
1:802cd1c:             }
1:cdfb2d1:         }
1:cdfb2d1:         return null;
1:cdfb2d1:     }
1:cdfb2d1: 
1:9b816c6:     /**
1:9b816c6:      * Offset and numToConvert are given in terms of bytes! Not characters!
1:9b816c6:      */
1:cdfb2d1:     public String convertToJavaString(byte[] sourceBytes, int offset, int numToConvert) {
1:cdfb2d1:         try {
1:9b816c6:             return new String(sourceBytes, offset, numToConvert, "UTF-8");
1:cdfb2d1:         } catch (UnsupportedEncodingException e) {
1:802cd1c:             if (SanityManager.DEBUG) {
1:802cd1c:                 SanityManager.THROWASSERT("Could not convert byte[] to Java String using UTF-8 encoding with offset",e);
1:802cd1c:             }
1:cdfb2d1:         }
1:cdfb2d1:         return null;
1:cdfb2d1:     }
1:cdfb2d1: 
1:cdfb2d1:     /* Keeping this method out for now.
1:cdfb2d1:      * The CcsidManager for **client** has this method as abstract
1:cdfb2d1:      * but the one for the server doesn't seem to have it.
1:cdfb2d1:      */
1:cdfb2d1:     /*int maxBytesPerChar() {
1:cdfb2d1:         return 4;
1:cdfb2d1:     }*/
1:cdfb2d1: 
1:cdfb2d1:     public void convertFromJavaString(String sourceString, ByteBuffer buffer) {
1:cdfb2d1:         buffer.put(convertFromJavaString(sourceString));
1:cdfb2d1:     }
1:cdfb2d1: 
1:9b816c6:     int getByteLength(String str) {
1:9b816c6:         try {
1:9b816c6:             return str.getBytes("UTF-8").length;
1:9b816c6:         } catch (UnsupportedEncodingException e) {
1:9b816c6:             if (SanityManager.DEBUG) {
1:9b816c6:                 SanityManager.THROWASSERT("Could not obtain byte length of Java String in Utf8CcsidManager",e);
1:9b816c6:             }
1:9b816c6:         }
1:9b816c6:         return -1;
1:9b816c6:     }
1:9b816c6: 
1:cdfb2d1: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:9b816c6
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Offset and numToConvert are given in terms of bytes! Not characters!
1:      */
1:             return new String(sourceBytes, offset, numToConvert, "UTF-8");
/////////////////////////////////////////////////////////////////////////
1:     int getByteLength(String str) {
1:         try {
1:             return str.getBytes("UTF-8").length;
1:         } catch (UnsupportedEncodingException e) {
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT("Could not obtain byte length of Java String in Utf8CcsidManager",e);
1:             }
1:         }
1:         return -1;
1:     }
1: 
commit:802cd1c
/////////////////////////////////////////////////////////////////////////
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT("Could not convert Java String to byte[] in UTF-8", e);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT("Could not convert byte[] to Java String using UTF-8 encoding", e);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT("Could not convert byte[] to Java String using UTF-8 encoding with offset",e);
1:             }
commit:cdfb2d1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.Utf8CcsidManager
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.drda;
1: 
1: import java.io.UnsupportedEncodingException;
1: import java.nio.ByteBuffer;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: public class Utf8CcsidManager extends CcsidManager {
1: 
1:     public Utf8CcsidManager() {
1:         super((byte)' ',
1:               (byte)'.',
1:               new byte[] {
1:               //      '0',       '1',      '2',        '3',      '4',
1:                 (byte)0xf0,(byte)0xf1,(byte)0xf2,(byte)0xf3,(byte)0xf4,
1:               //      '5',       '6',       '7',       '8',      '9',
1:                 (byte)0xf5,(byte)0xf6,(byte)0xf7,(byte)0xf8,(byte)0xf9,
1:               //      'A',       'B',       'C',       'D',      'E',
1:                 (byte)0xc1,(byte)0xc2,(byte)0xc3,(byte)0xc4,(byte)0xc5,
1:               //      'F',       'G',       'H',      'I',       'J',
1:                 (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
1:               //     'K',        'L',       'M',       'N',      'O',
1:                 (byte)0xd2,(byte)0xd3,(byte)0xd4,(byte)0xd5,(byte)0xd6,
1:               //     'P'
1:                 (byte)0xd7
1:               });
1:     }
1:     
1:     public byte[] convertFromJavaString(String sourceString){
1:         try {
1:             return sourceString.getBytes("UTF-8");
1:         } catch (UnsupportedEncodingException e) {
0:             SanityManager.THROWASSERT("Could not convert UCS2 (String) to UTF-8 (byte[])", e);
1:         }
1:         return null;
1:     }
1:     
1:     public String convertToJavaString(byte[] sourceBytes) {
1:        try {
1:            return new String(sourceBytes,"UTF-8");
1:         } catch (UnsupportedEncodingException e) {
0:             SanityManager.THROWASSERT("Could not convert UCS2 (byte[]) to UTF-8 (String)", e);
1:         }
1:         return null;
1:     }
1: 
1:     public String convertToJavaString(byte[] sourceBytes, int offset, int numToConvert) {
1:         try {
0:             return new String(sourceBytes,"UTF-8").substring(offset, offset+numToConvert);
1:         } catch (UnsupportedEncodingException e) {
0:             SanityManager.THROWASSERT("Could not convert UCS2 (byte[]) to UTF-8 (String) with offset",e);
1:         }
1:         return null;
1:     }
1: 
1:     /* Keeping this method out for now.
1:      * The CcsidManager for **client** has this method as abstract
1:      * but the one for the server doesn't seem to have it.
1:      */
1:     /*int maxBytesPerChar() {
1:         return 4;
1:     }*/
1: 
1:     public void convertFromJavaString(String sourceString, ByteBuffer buffer) {
1:         buffer.put(convertFromJavaString(sourceString));
1:     }
1: 
1: }
============================================================================