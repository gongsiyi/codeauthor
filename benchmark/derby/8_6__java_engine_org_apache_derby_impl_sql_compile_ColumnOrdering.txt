2:eac0369: /*
8:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.ColumnOrdering
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:c7000cb: import java.util.ArrayList;
1:eac0369: import org.apache.derby.iapi.sql.compile.RowOrdering;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:61070a6: class ColumnOrdering {
1:eac0369: 
1:b153b24:     /** See {@link RowOrdering} for possible values. */
1:eac0369: 	int	myDirection;
1:eac0369: 
1:b153b24:     /** A list of column numbers (Integers). */
1:71c8e86:     private final ArrayList<Integer> columns = new ArrayList<Integer>();
1:eac0369: 
1:b153b24:     /**
1:b153b24:      * A list of table numbers (Integers), corresponding to the {@code columns}
1:b153b24:      * list by position.
1:b153b24:      */
1:71c8e86:     private final ArrayList<Integer> tables = new ArrayList<Integer>();
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * @param direction	See RowOrdering for possible values
1:eac0369: 	 */
1:eac0369: 	ColumnOrdering(int direction) {
1:eac0369: 		myDirection = direction;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this ColumnOrdering contain the given column in the given table
1:eac0369: 	 * in the right direction?
1:eac0369: 	 *
1:eac0369: 	 * @param direction		See RowOrdering for possible values
1:eac0369: 	 * @param tableNumber	The number of the table in question
1:eac0369: 	 * @param columnNumber	The column number in the table (one-based)
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the column is found here in the right direction
1:eac0369: 	 */
1:eac0369: 	boolean ordered(int direction, int tableNumber, int columnNumber) {
1:eac0369: 		/*
1:eac0369: 		** Check the direction only if the direction isn't DONTCARE
1:eac0369: 		*/
1:eac0369: 		if (direction != RowOrdering.DONTCARE) {
1:eac0369: 			if (direction != myDirection)
4:eac0369: 				return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* The direction matches - see if the column is in this ordering */
1:eac0369: 		return contains(tableNumber, columnNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this ColumnOrdering contain the given column?
1:eac0369: 	 *
1:eac0369: 	 * @param tableNumber	The number of table in question
1:eac0369: 	 * @param columnNumber	The column number in the table (one-based)
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the column is found here in the right direction
1:eac0369: 	 */
1:eac0369: 	boolean contains(int tableNumber, int columnNumber)
1:eac0369: 	{
1:eac0369: 		for (int i = 0; i < columns.size(); i++) {
1:71c8e86: 			Integer col = columns.get(i);
1:71c8e86: 			Integer tab = tables.get(i);
1:eac0369: 
1:eac0369: 			if (tab.intValue() == tableNumber &&
1:eac0369: 				col.intValue() == columnNumber) {
1:eac0369: 
2:eac0369: 				return true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the direction of this ColumnOrdering
1:eac0369: 	 */
1:eac0369: 	int direction()
1:eac0369: 	{
1:eac0369: 		return myDirection;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Add a column in a table to this ColumnOrdering
1:eac0369: 	 *
1:eac0369: 	 * @param tableNumber	The number of table in question
1:eac0369: 	 * @param columnNumber	The column number in the table (one-based)
1:eac0369: 	 */
1:eac0369: 	void addColumn(int tableNumber, int columnNumber)
1:eac0369: 	{
1:bb5be6f:         tables.add(tableNumber);
1:bb5be6f:         columns.add(columnNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Remove all columns with the given table number
1:eac0369: 	 */
1:eac0369: 	void removeColumns(int tableNumber)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** Walk the list backwards, so we can remove elements
1:eac0369: 		** by position.
1:eac0369: 		*/
1:eac0369: 		for (int i = tables.size() - 1; i >= 0; i--)
1:eac0369: 		{
1:71c8e86: 			Integer tab = tables.get(i);
2:eac0369: 			if (tab.intValue() == tableNumber)
1:eac0369: 			{
1:a32eb9f: 				tables.remove(i);
1:a32eb9f: 				columns.remove(i);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether this ColumnOrdering has no elements.
1:eac0369: 	 */
1:eac0369: 	boolean empty()
1:eac0369: 	{
1:c7000cb: 		return tables.isEmpty();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Return a clone of this ColumnOrdering */
1:eac0369: 	ColumnOrdering cloneMe() {
1:eac0369: 		ColumnOrdering retval = new ColumnOrdering(myDirection);
1:eac0369: 
1:eac0369: 		for (int i = 0; i < columns.size(); i++) {
1:eac0369: 			/* Integers are immutable, so just copy the pointers */
1:c7000cb: 			retval.columns.add(columns.get(i));
1:c7000cb: 			retval.tables.add(tables.get(i));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Is the given table number in this ColumnOrdering? */
1:eac0369: 	boolean hasTable(int tableNumber) {
1:bb5be6f:         return tables.contains(tableNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Is there any table other than the given one in this ColumnOrdering? */
1:eac0369: 	boolean hasAnyOtherTable(int tableNumber) {
1:eac0369: 
2:eac0369: 		for (int i = 0; i < tables.size(); i++) {
1:71c8e86: 			Integer tab = tables.get(i);
1:eac0369: 			
1:eac0369: 			if (tab.intValue() != tableNumber)
1:eac0369: 				return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     @Override
1:eac0369: 	public String toString() {
1:eac0369: 		String retval = "";
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			retval += "Direction: " + myDirection;
1:eac0369: 
1:eac0369: 			for (int i = 0; i < columns.size(); i++) {
1:a32eb9f: 				retval += " Table " + tables.get(i) +
1:a32eb9f: 							", Column " + columns.get(i);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bb5be6f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         tables.add(tableNumber);
1:         columns.add(columnNumber);
/////////////////////////////////////////////////////////////////////////
1:         return tables.contains(tableNumber);
commit:b153b24
/////////////////////////////////////////////////////////////////////////
1:     /** See {@link RowOrdering} for possible values. */
1:     /** A list of column numbers (Integers). */
1:     /**
1:      * A list of table numbers (Integers), corresponding to the {@code columns}
1:      * list by position.
1:      */
commit:c7000cb
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
0: import org.apache.derby.iapi.util.ReuseFactory;
/////////////////////////////////////////////////////////////////////////
0:     private final ArrayList columns = new ArrayList();
0:     private final ArrayList tables = new ArrayList();
/////////////////////////////////////////////////////////////////////////
0:         tables.add(ReuseFactory.getInteger(tableNumber));
0:         columns.add(ReuseFactory.getInteger(columnNumber));
/////////////////////////////////////////////////////////////////////////
1: 		return tables.isEmpty();
/////////////////////////////////////////////////////////////////////////
1: 			retval.columns.add(columns.get(i));
1: 			retval.tables.add(tables.get(i));
/////////////////////////////////////////////////////////////////////////
0:         return tables.contains(ReuseFactory.getInteger(tableNumber));
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
0: 			Integer col = (Integer) columns.get(i);
0: 			Integer tab = (Integer) tables.get(i);
/////////////////////////////////////////////////////////////////////////
0: 		tables.add(new Integer(tableNumber));
0: 		columns.add(new Integer(columnNumber));
/////////////////////////////////////////////////////////////////////////
0: 			Integer tab = (Integer) tables.get(i);
1: 				tables.remove(i);
1: 				columns.remove(i);
/////////////////////////////////////////////////////////////////////////
0: 			retval.columns.addElement(columns.get(i));
0: 			retval.tables.addElement(tables.get(i));
/////////////////////////////////////////////////////////////////////////
0: 			Integer tab = (Integer) tables.get(i);
/////////////////////////////////////////////////////////////////////////
0: 			Integer tab = (Integer) tables.get(i);
/////////////////////////////////////////////////////////////////////////
1: 				retval += " Table " + tables.get(i) +
1: 							", Column " + columns.get(i);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<Integer> columns = new ArrayList<Integer>();
1:     private final ArrayList<Integer> tables = new ArrayList<Integer>();
/////////////////////////////////////////////////////////////////////////
1: 			Integer col = columns.get(i);
1: 			Integer tab = tables.get(i);
/////////////////////////////////////////////////////////////////////////
1: 			Integer tab = tables.get(i);
/////////////////////////////////////////////////////////////////////////
1: 			Integer tab = tables.get(i);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.ColumnOrdering
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
1: class ColumnOrdering {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.RowOrdering;
0: import org.apache.derby.iapi.sql.compile.Optimizable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.util.Vector;
1: 
0: class ColumnOrdering { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
0: 	/* See RowOrdering for possible values */
1: 	int	myDirection;
1: 
0: 	/* A vector of column numbers (Integers) */
0: 	Vector columns = new Vector();
1: 
1: 	/*
0: 	** A vector of table numbers (Integers), corresponding to the column
0: 	** vector by position.
1: 	*/
0: 	Vector tables = new Vector();
1: 
1: 	/**
1: 	 * @param direction	See RowOrdering for possible values
1: 	 */
1: 	ColumnOrdering(int direction) {
1: 		myDirection = direction;
1: 	}
1: 
1: 	/**
1: 	 * Does this ColumnOrdering contain the given column in the given table
1: 	 * in the right direction?
1: 	 *
1: 	 * @param direction		See RowOrdering for possible values
1: 	 * @param tableNumber	The number of the table in question
1: 	 * @param columnNumber	The column number in the table (one-based)
1: 	 *
1: 	 * @return	true if the column is found here in the right direction
1: 	 */
1: 	boolean ordered(int direction, int tableNumber, int columnNumber) {
1: 		/*
1: 		** Check the direction only if the direction isn't DONTCARE
1: 		*/
1: 		if (direction != RowOrdering.DONTCARE) {
1: 			if (direction != myDirection)
1: 				return false;
1: 		}
1: 
1: 		/* The direction matches - see if the column is in this ordering */
1: 		return contains(tableNumber, columnNumber);
1: 	}
1: 
1: 	/**
1: 	 * Does this ColumnOrdering contain the given column?
1: 	 *
1: 	 * @param tableNumber	The number of table in question
1: 	 * @param columnNumber	The column number in the table (one-based)
1: 	 *
1: 	 * @return	true if the column is found here in the right direction
1: 	 */
1: 	boolean contains(int tableNumber, int columnNumber)
1: 	{
1: 		for (int i = 0; i < columns.size(); i++) {
0: 			Integer col = (Integer) columns.elementAt(i);
0: 			Integer tab = (Integer) tables.elementAt(i);
1: 
1: 			if (tab.intValue() == tableNumber &&
1: 				col.intValue() == columnNumber) {
1: 
1: 				return true;
1: 			}
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Get the direction of this ColumnOrdering
1: 	 */
1: 	int direction()
1: 	{
1: 		return myDirection;
1: 	}
1: 
1: 	/**
1: 	 * Add a column in a table to this ColumnOrdering
1: 	 *
1: 	 * @param tableNumber	The number of table in question
1: 	 * @param columnNumber	The column number in the table (one-based)
1: 	 */
1: 	void addColumn(int tableNumber, int columnNumber)
1: 	{
0: 		tables.addElement(new Integer(tableNumber));
0: 		columns.addElement(new Integer(columnNumber));
1: 	}
1: 
1: 	/**
1: 	 * Remove all columns with the given table number
1: 	 */
1: 	void removeColumns(int tableNumber)
1: 	{
1: 		/*
1: 		** Walk the list backwards, so we can remove elements
1: 		** by position.
1: 		*/
1: 		for (int i = tables.size() - 1; i >= 0; i--)
1: 		{
0: 			Integer tab = (Integer) tables.elementAt(i);
1: 			if (tab.intValue() == tableNumber)
1: 			{
0: 				tables.removeElementAt(i);
0: 				columns.removeElementAt(i);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Tell whether this ColumnOrdering has no elements.
1: 	 */
1: 	boolean empty()
1: 	{
0: 		return (tables.size() == 0);
1: 	}
1: 
1: 	/** Return a clone of this ColumnOrdering */
1: 	ColumnOrdering cloneMe() {
1: 		ColumnOrdering retval = new ColumnOrdering(myDirection);
1: 
1: 		for (int i = 0; i < columns.size(); i++) {
1: 			/* Integers are immutable, so just copy the pointers */
0: 			retval.columns.addElement(columns.elementAt(i));
0: 			retval.tables.addElement(tables.elementAt(i));
1: 		}
1: 
1: 		return retval;
1: 	}
1: 
1: 	/** Is the given table number in this ColumnOrdering? */
1: 	boolean hasTable(int tableNumber) {
0: 		if (tables.size() == 0)
1: 			return false;
1: 
1: 		for (int i = 0; i < tables.size(); i++) {
0: 			Integer tab = (Integer) tables.elementAt(i);
1: 			
1: 			if (tab.intValue() == tableNumber)
1: 				return true;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/** Is there any table other than the given one in this ColumnOrdering? */
1: 	boolean hasAnyOtherTable(int tableNumber) {
0: 		if (tables.size() == 0)
1: 			return false;
1: 
1: 		for (int i = 0; i < tables.size(); i++) {
0: 			Integer tab = (Integer) tables.elementAt(i);
1: 			
1: 			if (tab.intValue() != tableNumber)
1: 				return true;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	public String toString() {
1: 		String retval = "";
1: 
1: 		if (SanityManager.DEBUG) {
1: 			retval += "Direction: " + myDirection;
1: 
1: 			for (int i = 0; i < columns.size(); i++) {
0: 				retval += " Table " + tables.elementAt(i) +
0: 							", Column " + columns.elementAt(i);
1: 			}
1: 		}
1: 
1: 		return retval;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.RowOrdering;
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Vector;
0: 
0: class ColumnOrdering { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/* See RowOrdering for possible values */
0: 	int	myDirection;
0: 
0: 	/* A vector of column numbers (Integers) */
0: 	Vector columns = new Vector();
0: 
0: 	/*
0: 	** A vector of table numbers (Integers), corresponding to the column
0: 	** vector by position.
0: 	*/
0: 	Vector tables = new Vector();
0: 
0: 	/**
0: 	 * @param direction	See RowOrdering for possible values
0: 	 */
0: 	ColumnOrdering(int direction) {
0: 		myDirection = direction;
0: 	}
0: 
0: 	/**
0: 	 * Does this ColumnOrdering contain the given column in the given table
0: 	 * in the right direction?
0: 	 *
0: 	 * @param direction		See RowOrdering for possible values
0: 	 * @param tableNumber	The number of the table in question
0: 	 * @param columnNumber	The column number in the table (one-based)
0: 	 *
0: 	 * @return	true if the column is found here in the right direction
0: 	 */
0: 	boolean ordered(int direction, int tableNumber, int columnNumber) {
0: 		/*
0: 		** Check the direction only if the direction isn't DONTCARE
0: 		*/
0: 		if (direction != RowOrdering.DONTCARE) {
0: 			if (direction != myDirection)
0: 				return false;
0: 		}
0: 
0: 		/* The direction matches - see if the column is in this ordering */
0: 		return contains(tableNumber, columnNumber);
0: 	}
0: 
0: 	/**
0: 	 * Does this ColumnOrdering contain the given column?
0: 	 *
0: 	 * @param tableNumber	The number of table in question
0: 	 * @param columnNumber	The column number in the table (one-based)
0: 	 *
0: 	 * @return	true if the column is found here in the right direction
0: 	 */
0: 	boolean contains(int tableNumber, int columnNumber)
0: 	{
0: 		for (int i = 0; i < columns.size(); i++) {
0: 			Integer col = (Integer) columns.elementAt(i);
0: 			Integer tab = (Integer) tables.elementAt(i);
0: 
0: 			if (tab.intValue() == tableNumber &&
0: 				col.intValue() == columnNumber) {
0: 
0: 				return true;
0: 			}
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Get the direction of this ColumnOrdering
0: 	 */
0: 	int direction()
0: 	{
0: 		return myDirection;
0: 	}
0: 
0: 	/**
0: 	 * Add a column in a table to this ColumnOrdering
0: 	 *
0: 	 * @param tableNumber	The number of table in question
0: 	 * @param columnNumber	The column number in the table (one-based)
0: 	 */
0: 	void addColumn(int tableNumber, int columnNumber)
0: 	{
0: 		tables.addElement(new Integer(tableNumber));
0: 		columns.addElement(new Integer(columnNumber));
0: 	}
0: 
0: 	/**
0: 	 * Remove all columns with the given table number
0: 	 */
0: 	void removeColumns(int tableNumber)
0: 	{
0: 		/*
0: 		** Walk the list backwards, so we can remove elements
0: 		** by position.
0: 		*/
0: 		for (int i = tables.size() - 1; i >= 0; i--)
0: 		{
0: 			Integer tab = (Integer) tables.elementAt(i);
0: 			if (tab.intValue() == tableNumber)
0: 			{
0: 				tables.removeElementAt(i);
0: 				columns.removeElementAt(i);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Tell whether this ColumnOrdering has no elements.
0: 	 */
0: 	boolean empty()
0: 	{
0: 		return (tables.size() == 0);
0: 	}
0: 
0: 	/** Return a clone of this ColumnOrdering */
0: 	ColumnOrdering cloneMe() {
0: 		ColumnOrdering retval = new ColumnOrdering(myDirection);
0: 
0: 		for (int i = 0; i < columns.size(); i++) {
0: 			/* Integers are immutable, so just copy the pointers */
0: 			retval.columns.addElement(columns.elementAt(i));
0: 			retval.tables.addElement(tables.elementAt(i));
0: 		}
0: 
0: 		return retval;
0: 	}
0: 
0: 	/** Is the given table number in this ColumnOrdering? */
0: 	boolean hasTable(int tableNumber) {
0: 		if (tables.size() == 0)
0: 			return false;
0: 
0: 		for (int i = 0; i < tables.size(); i++) {
0: 			Integer tab = (Integer) tables.elementAt(i);
0: 			
0: 			if (tab.intValue() == tableNumber)
0: 				return true;
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/** Is there any table other than the given one in this ColumnOrdering? */
0: 	boolean hasAnyOtherTable(int tableNumber) {
0: 		if (tables.size() == 0)
0: 			return false;
0: 
0: 		for (int i = 0; i < tables.size(); i++) {
0: 			Integer tab = (Integer) tables.elementAt(i);
0: 			
0: 			if (tab.intValue() != tableNumber)
0: 				return true;
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	public String toString() {
0: 		String retval = "";
0: 
0: 		if (SanityManager.DEBUG) {
0: 			retval += "Direction: " + myDirection;
0: 
0: 			for (int i = 0; i < columns.size(); i++) {
0: 				retval += " Table " + tables.elementAt(i) +
0: 							", Column " + columns.elementAt(i);
0: 			}
0: 		}
0: 
0: 		return retval;
0: 	}
0: }
============================================================================