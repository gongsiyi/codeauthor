1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_CacheUser
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.cache.*;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.reference.SQLState;
1:2bc809f: 
1:2bc809f: public class T_CacheUser implements Runnable {
1:2bc809f: 
1:2bc809f: 	protected CacheManager	cm;
1:2bc809f: 	protected int           iterations;
1:2bc809f: 	protected HeaderPrintWriter out;
1:2bc809f: 	protected T_CacheService parent;
1:2bc809f: 
1:2bc809f: 	public T_CacheUser(CacheManager cm, int iterations, T_CacheService parent, HeaderPrintWriter out) {
1:2bc809f: 		this.cm = cm;
1:2bc809f: 		this.iterations = iterations;
1:2bc809f: 		this.parent = parent;
1:2bc809f: 		this.out = out;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public void run() {
1:2bc809f: 		try {
1:2bc809f: 			thrashCache();
1:2bc809f: 		} catch (T_Fail tf) {
1:2bc809f: 			parent.setChildException(tf);
1:2bc809f: 		} catch (StandardException se) {
1:2bc809f: 			parent.setChildException(T_Fail.exceptionFail(se));
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 	/**
1:2bc809f: 		T_CachedInteger range - 0 - 100
1:2bc809f: 
1:2bc809f: 		pick a key randomly
1:2bc809f: 					48%/48%/4% chance of Int/String/invalid key
1:2bc809f: 					90%/5%/5% chance of can find / can't find / raise exception
1:2bc809f: 					50%/30%/20% find/findCached/create
1:2bc809f: 					
1:2bc809f: 
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 		@exception T_Fail  Some error
1:2bc809f: 				
1:2bc809f: 		
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public void thrashCache() throws StandardException, T_Fail {
1:2bc809f: 
1:2bc809f: 		// stats
1:2bc809f: 		int f = 0, fs = 0, ff = 0, fe = 0;
1:2bc809f: 		int fc = 0, fcs = 0, fcf = 0;
1:2bc809f: 		int c = 0, cs = 0, cf = 0, ce = 0, cse = 0;
1:2bc809f: 		int cleanAll = 0, ageOut = 0;
1:2bc809f: 		int release = 0, remove = 0;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 		for (int i = 0; i < iterations; i++) {
1:2bc809f: 
1:2bc809f: 			if ((i % 100) == 0)
1:2bc809f: 				out.printlnWithHeader("iteration " + i);
1:2bc809f: 
1:2bc809f: 			T_Key tkey = T_Key.randomKey();
1:2bc809f: 
1:2bc809f: 			double rand = Math.random();
1:2bc809f: 			T_Cacheable e = null;
1:2bc809f: 			if (rand < 0.5) {
1:2bc809f: 				f++;
1:2bc809f: 
1:2bc809f: 				try {
1:2bc809f: 
1:2bc809f: 					e = (T_Cacheable) cm.find(tkey);
1:2bc809f: 					if (e == null) {
1:2bc809f: 						ff++;
1:2bc809f: 						continue;
1:2bc809f: 					}
1:2bc809f: 
1:2bc809f: 					fs++;
1:2bc809f: 
1:2bc809f: 				} catch (T_CacheException tc) {
1:2bc809f: 					if (tc.getType() == T_CacheException.ERROR)
1:2bc809f: 						throw tc;
1:2bc809f: 
1:2bc809f: 					// acceptable error
1:2bc809f: 					fe++;
1:2bc809f: 					continue;
1:2bc809f: 				}			
1:2bc809f: 			} else if (rand < 0.8)  {
1:2bc809f: 
1:2bc809f: 				fc++;
1:2bc809f: 
1:2bc809f: 				e = (T_Cacheable) cm.findCached(tkey);
1:2bc809f: 				if (e == null) {
1:2bc809f: 					fcf++;
1:2bc809f: 					continue;
1:2bc809f: 				}
1:2bc809f: 				fcs++;
1:2bc809f: 
1:2bc809f: 			} else {
1:2bc809f: 				c++;
1:2bc809f: 
1:2bc809f: 				try {
1:2bc809f: 
1:2bc809f: 					e = (T_Cacheable) cm.create(tkey, Thread.currentThread());
1:2bc809f: 					if (e == null) {
1:2bc809f: 						cf++;
1:2bc809f: 						continue;
1:2bc809f: 					}
1:2bc809f: 
1:2bc809f: 					cs++;
1:2bc809f:  
1:2bc809f: 				} catch (T_CacheException tc) {
1:2bc809f: 					if (tc.getType() == T_CacheException.ERROR)
1:2bc809f: 						throw tc;
1:2bc809f: 
1:2bc809f: 					// acceptable error
1:2bc809f: 					ce++;
1:2bc809f: 					continue;
1:2bc809f: 				} catch (StandardException se) {
1:2bc809f: 
1:2bc809f: 					if (se.getMessageId().equals(SQLState.OBJECT_EXISTS_IN_CACHE)) {
1:2bc809f: 						cse++;
1:2bc809f: 						continue;
1:2bc809f: 					}
1:2bc809f: 					throw se;
1:2bc809f: 				}			
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			// ensure we can find it cached and that the key matches
1:2bc809f: 			cm.release(parent.t_findCachedSucceed(cm, tkey));
1:2bc809f: 
1:2bc809f: 			if (Math.random() < 0.25)
1:2bc809f: 				e.setDirty();
1:2bc809f: 
1:2bc809f: 			if (Math.random() < 0.75)
1:2bc809f: 				Thread.yield();
1:2bc809f: 
1:2bc809f: 			if ((Math.random() < 0.10) && (e.canRemove())) {
1:2bc809f: 				remove++;
1:2bc809f: 				cm.remove(e);
1:2bc809f: 			} else {
1:2bc809f: 				release++;
1:2bc809f: 				cm.release(e);
1:2bc809f: 			}
1:2bc809f: 			e = null;
1:2bc809f: 
1:2bc809f: 			double rand2 = Math.random();
1:2bc809f: 			
1:2bc809f: 			if (rand2 < 0.02) {
1:2bc809f: 				cleanAll++;
1:2bc809f: 				cm.cleanAll();
1:2bc809f: 			}
1:2bc809f: 			else if (rand2 < 0.04) {
1:2bc809f: 				ageOut++;
1:2bc809f: 				cm.ageOut();
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		// ensure all our output in grouped.
1:2bc809f: 		synchronized (parent) {
1:2bc809f: 			out.printlnWithHeader("find()       calls " + f  + " : found/not found/exception : " + fs + "/" + ff + "/" + fe);
1:2bc809f: 			out.printlnWithHeader("findCached() calls " + fc + " : found/not found           : " + fcs + "/" + fcf);
1:2bc809f: 			out.printlnWithHeader("create()     calls " + c  + " : found/not found/exception/standard exception : " + cs + "/" + cf + "/" + ce + "/" + cse);
1:2bc809f: 			out.printlnWithHeader("release()    calls " + release);
1:2bc809f: 			out.printlnWithHeader("remove()     calls " + remove);
1:2bc809f: 			out.printlnWithHeader("cleanAll()   calls " + cleanAll);
1:2bc809f: 			out.printlnWithHeader("ageOut()     calls " + ageOut);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_CacheUser
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derby.iapi.services.cache.*;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: public class T_CacheUser implements Runnable {
1: 
1: 	protected CacheManager	cm;
1: 	protected int           iterations;
1: 	protected HeaderPrintWriter out;
1: 	protected T_CacheService parent;
1: 
1: 	public T_CacheUser(CacheManager cm, int iterations, T_CacheService parent, HeaderPrintWriter out) {
1: 		this.cm = cm;
1: 		this.iterations = iterations;
1: 		this.parent = parent;
1: 		this.out = out;
1: 	}
1: 
1: 
1: 	public void run() {
1: 		try {
1: 			thrashCache();
1: 		} catch (T_Fail tf) {
1: 			parent.setChildException(tf);
1: 		} catch (StandardException se) {
1: 			parent.setChildException(T_Fail.exceptionFail(se));
1: 		}
1: 	}
1: 	/**
1: 		T_CachedInteger range - 0 - 100
1: 
1: 		pick a key randomly
1: 					48%/48%/4% chance of Int/String/invalid key
1: 					90%/5%/5% chance of can find / can't find / raise exception
1: 					50%/30%/20% find/findCached/create
1: 					
1: 
1: 		@exception StandardException  Standard Derby Error policy
1: 		@exception T_Fail  Some error
1: 				
1: 		
1: 	*/
1: 
1: 	public void thrashCache() throws StandardException, T_Fail {
1: 
1: 		// stats
1: 		int f = 0, fs = 0, ff = 0, fe = 0;
1: 		int fc = 0, fcs = 0, fcf = 0;
1: 		int c = 0, cs = 0, cf = 0, ce = 0, cse = 0;
1: 		int cleanAll = 0, ageOut = 0;
1: 		int release = 0, remove = 0;
1: 
1: 
1: 		for (int i = 0; i < iterations; i++) {
1: 
1: 			if ((i % 100) == 0)
1: 				out.printlnWithHeader("iteration " + i);
1: 
1: 			T_Key tkey = T_Key.randomKey();
1: 
1: 			double rand = Math.random();
1: 			T_Cacheable e = null;
1: 			if (rand < 0.5) {
1: 				f++;
1: 
1: 				try {
1: 
1: 					e = (T_Cacheable) cm.find(tkey);
1: 					if (e == null) {
1: 						ff++;
1: 						continue;
1: 					}
1: 
1: 					fs++;
1: 
1: 				} catch (T_CacheException tc) {
1: 					if (tc.getType() == T_CacheException.ERROR)
1: 						throw tc;
1: 
1: 					// acceptable error
1: 					fe++;
1: 					continue;
1: 				}			
1: 			} else if (rand < 0.8)  {
1: 
1: 				fc++;
1: 
1: 				e = (T_Cacheable) cm.findCached(tkey);
1: 				if (e == null) {
1: 					fcf++;
1: 					continue;
1: 				}
1: 				fcs++;
1: 
1: 			} else {
1: 				c++;
1: 
1: 				try {
1: 
1: 					e = (T_Cacheable) cm.create(tkey, Thread.currentThread());
1: 					if (e == null) {
1: 						cf++;
1: 						continue;
1: 					}
1: 
1: 					cs++;
1:  
1: 				} catch (T_CacheException tc) {
1: 					if (tc.getType() == T_CacheException.ERROR)
1: 						throw tc;
1: 
1: 					// acceptable error
1: 					ce++;
1: 					continue;
1: 				} catch (StandardException se) {
1: 
1: 					if (se.getMessageId().equals(SQLState.OBJECT_EXISTS_IN_CACHE)) {
1: 						cse++;
1: 						continue;
1: 					}
1: 					throw se;
1: 				}			
1: 			}
1: 
1: 			// ensure we can find it cached and that the key matches
1: 			cm.release(parent.t_findCachedSucceed(cm, tkey));
1: 
1: 			if (Math.random() < 0.25)
1: 				e.setDirty();
1: 
1: 			if (Math.random() < 0.75)
1: 				Thread.yield();
1: 
1: 			if ((Math.random() < 0.10) && (e.canRemove())) {
1: 				remove++;
1: 				cm.remove(e);
1: 			} else {
1: 				release++;
1: 				cm.release(e);
1: 			}
1: 			e = null;
1: 
1: 			double rand2 = Math.random();
1: 			
1: 			if (rand2 < 0.02) {
1: 				cleanAll++;
1: 				cm.cleanAll();
1: 			}
1: 			else if (rand2 < 0.04) {
1: 				ageOut++;
1: 				cm.ageOut();
1: 			}
1: 		}
1: 
1: 		// ensure all our output in grouped.
1: 		synchronized (parent) {
1: 			out.printlnWithHeader("find()       calls " + f  + " : found/not found/exception : " + fs + "/" + ff + "/" + fe);
1: 			out.printlnWithHeader("findCached() calls " + fc + " : found/not found           : " + fcs + "/" + fcf);
1: 			out.printlnWithHeader("create()     calls " + c  + " : found/not found/exception/standard exception : " + cs + "/" + cf + "/" + ce + "/" + cse);
1: 			out.printlnWithHeader("release()    calls " + release);
1: 			out.printlnWithHeader("remove()     calls " + remove);
1: 			out.printlnWithHeader("cleanAll()   calls " + cleanAll);
1: 			out.printlnWithHeader("ageOut()     calls " + ageOut);
1: 		}
1: 
1: 	}
1: }
============================================================================