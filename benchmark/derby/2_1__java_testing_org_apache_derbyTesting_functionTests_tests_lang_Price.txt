1:d039ced: /*
1:d039ced: 
1:d039ced:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Price
1:d039ced: 
1:d039ced:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d039ced:    contributor license agreements.  See the NOTICE file distributed with
1:d039ced:    this work for additional information regarding copyright ownership.
1:d039ced:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d039ced:    (the "License"); you may not use this file except in compliance with
1:d039ced:    the License.  You may obtain a copy of the License at
1:d039ced: 
1:d039ced:      http://www.apache.org/licenses/LICENSE-2.0
1:d039ced: 
1:d039ced:    Unless required by applicable law or agreed to in writing, software
1:d039ced:    distributed under the License is distributed on an "AS IS" BASIS,
1:d039ced:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d039ced:    See the License for the specific language governing permissions and
1:d039ced:    limitations under the License.
1:d039ced: 
1:d039ced:  */
1:d039ced: 
1:d039ced: package org.apache.derbyTesting.functionTests.tests.lang;
1:d039ced: 
1:d039ced: import java.io.Externalizable;
1:d039ced: import java.io.IOException;
1:d039ced: import java.io.ObjectInput;
1:d039ced: import java.io.ObjectOutput;
1:d039ced: import java.math.BigDecimal;
1:d039ced: import java.sql.Timestamp;
1:d039ced: 
1:d039ced: /**
1:d039ced:  * Sample UDT for tests.
1:d039ced:  */
1:d039ced: public class Price implements Externalizable
1:d039ced: {
1:e316d23:     // this changed between 10.9 and 10.10 so require the 10.9 value
1:e316d23:     private static final long serialVersionUID = 102726277789621992L;
1:e316d23:     
1:d039ced:     // initial version id
1:d039ced:     private static final int FIRST_VERSION = 0;
1:d039ced:     private static final int TIMESTAMPED_VERSION = FIRST_VERSION + 1;
1:d039ced: 
1:d039ced:     private static final Timestamp DEFAULT_TIMESTAMP = new Timestamp( 0L );
1:d039ced: 
1:d039ced:     private static Price _savedPrice;
1:d039ced: 
1:d039ced:     public String currencyCode;
1:d039ced:     public BigDecimal amount;
1:d039ced:     public Timestamp timeInstant;
1:d039ced: 
1:d039ced:     // methods to be registered as functions
1:7cfb7e6:     public static Price makePrice( ) { return makePrice( BigDecimal.valueOf(1L) ); }
1:7cfb7e6:     public static Price makePrice( BigDecimal cost ) { return new Price( "USD", cost, DEFAULT_TIMESTAMP ); }
1:d039ced:     public static Price makePrice( String currencyCode, BigDecimal amount, Timestamp timeInstant ) { return new Price( currencyCode, amount, timeInstant ); }
1:d039ced:     public static String getCurrencyCode( Price price ) { return price.currencyCode; }
1:d039ced:     public static BigDecimal getAmount( Price price ) { return price.amount; }
1:d039ced:     public static Timestamp getTimeInstant( Price price ) { return price.timeInstant; }
1:d039ced:     public static void savePrice( Price price ) { _savedPrice = price; }
1:d039ced:     public static Price getSavedPrice() { return _savedPrice; }
1:d039ced: 
1:d039ced:     // 0-arg constructor needed by Externalizable machinery
1:d039ced:     public Price() {}
1:d039ced: 
1:d039ced:     public Price( String currencyCode, BigDecimal amount, Timestamp timeInstant )
1:d039ced:     {
1:d039ced:         this.currencyCode = currencyCode;
1:d039ced:         this.amount = amount;
1:d039ced:         this.timeInstant = timeInstant;
1:d039ced:     }
1:d039ced: 
1:d039ced:     public String toString()
1:d039ced:     {
1:989beca:         StringBuffer buffer = new StringBuffer();
1:989beca: 
1:989beca:         buffer.append( "Price( " + currencyCode + ", " + amount + ", "  );
1:989beca:         if ( DEFAULT_TIMESTAMP.equals( timeInstant ) ) { buffer.append( "XXX" ); }
1:989beca:         else { buffer.append( timeInstant ); }
1:989beca:         buffer.append( " )" );
1:989beca: 
1:989beca:         return buffer.toString();
1:d039ced:     }
1:d039ced: 
1:d039ced:     public boolean equals( Object other )
1:d039ced:     {
1:d039ced:         if ( other == null )  { return false; }
1:d039ced:         if ( !(other instanceof Price) ) { return false; }
1:d039ced: 
1:d039ced:         Price that = (Price) other;
1:d039ced: 
1:d039ced:         return this.toString().equals( that.toString() );
1:d039ced:     }
1:d039ced: 
1:d039ced:     // Externalizable implementation
1:d039ced:     public void writeExternal(ObjectOutput out) throws IOException
1:d039ced:     {
1:d039ced:         // first write the version id
1:edea8ab:         out.writeInt( TIMESTAMPED_VERSION );
1:d039ced: 
1:d039ced:         // now write the state
1:d039ced:         out.writeObject( currencyCode );
1:d039ced:         out.writeObject( amount );
1:d039ced:         out.writeObject( timeInstant );
1:d039ced:     }  
1:d039ced:     public void readExternal(ObjectInput in)throws IOException, ClassNotFoundException
1:d039ced:     {
1:d039ced:         // read the version id
1:d039ced:         int oldVersion = in.readInt();
1:d039ced:         if ( oldVersion < FIRST_VERSION ) { throw new IOException( "Corrupt data stream." ); }
1:d039ced:         if ( oldVersion > TIMESTAMPED_VERSION ) { throw new IOException( "Can't deserialize from the future." ); }
1:d039ced: 
1:d039ced:         currencyCode = (String) in.readObject();
1:d039ced:         amount = (BigDecimal) in.readObject();
1:d039ced: 
1:d039ced:         if ( oldVersion >= TIMESTAMPED_VERSION ) { timeInstant = (Timestamp) in.readObject(); }
1:d039ced:         else { timeInstant = DEFAULT_TIMESTAMP; }
1:d039ced:     }
1:d039ced: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e316d23
/////////////////////////////////////////////////////////////////////////
1:     // this changed between 10.9 and 10.10 so require the 10.9 value
1:     private static final long serialVersionUID = 102726277789621992L;
1:     
commit:7cfb7e6
/////////////////////////////////////////////////////////////////////////
1:     public static Price makePrice( ) { return makePrice( BigDecimal.valueOf(1L) ); }
1:     public static Price makePrice( BigDecimal cost ) { return new Price( "USD", cost, DEFAULT_TIMESTAMP ); }
commit:989beca
/////////////////////////////////////////////////////////////////////////
1:         StringBuffer buffer = new StringBuffer();
1: 
1:         buffer.append( "Price( " + currencyCode + ", " + amount + ", "  );
1:         if ( DEFAULT_TIMESTAMP.equals( timeInstant ) ) { buffer.append( "XXX" ); }
1:         else { buffer.append( timeInstant ); }
1:         buffer.append( " )" );
1: 
1:         return buffer.toString();
commit:d6c2047
/////////////////////////////////////////////////////////////////////////
0:     public static Price makePrice( ) { return new Price( "USD", new BigDecimal( 1 ), DEFAULT_TIMESTAMP ); }
commit:edea8ab
/////////////////////////////////////////////////////////////////////////
1:         out.writeInt( TIMESTAMPED_VERSION );
commit:d039ced
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Price
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.math.BigDecimal;
1: import java.sql.Timestamp;
1: 
1: /**
1:  * Sample UDT for tests.
1:  */
1: public class Price implements Externalizable
1: {
1:     // initial version id
1:     private static final int FIRST_VERSION = 0;
1:     private static final int TIMESTAMPED_VERSION = FIRST_VERSION + 1;
1: 
1:     private static final Timestamp DEFAULT_TIMESTAMP = new Timestamp( 0L );
1: 
1:     private static Price _savedPrice;
1: 
1:     public String currencyCode;
1:     public BigDecimal amount;
1:     public Timestamp timeInstant;
1: 
1:     // methods to be registered as functions
1:     public static Price makePrice( String currencyCode, BigDecimal amount, Timestamp timeInstant ) { return new Price( currencyCode, amount, timeInstant ); }
1:     public static String getCurrencyCode( Price price ) { return price.currencyCode; }
1:     public static BigDecimal getAmount( Price price ) { return price.amount; }
1:     public static Timestamp getTimeInstant( Price price ) { return price.timeInstant; }
1:     public static void savePrice( Price price ) { _savedPrice = price; }
1:     public static Price getSavedPrice() { return _savedPrice; }
1: 
1:     // 0-arg constructor needed by Externalizable machinery
1:     public Price() {}
1: 
1:     public Price( String currencyCode, BigDecimal amount, Timestamp timeInstant )
1:     {
1:         this.currencyCode = currencyCode;
1:         this.amount = amount;
1:         this.timeInstant = timeInstant;
1:     }
1: 
1:     public String toString()
1:     {
0:         return "Price( " + currencyCode + ", " + amount + ", " + timeInstant + " )";
1:     }
1: 
1:     public boolean equals( Object other )
1:     {
1:         if ( other == null )  { return false; }
1:         if ( !(other instanceof Price) ) { return false; }
1: 
1:         Price that = (Price) other;
1: 
1:         return this.toString().equals( that.toString() );
1:     }
1: 
1:     // Externalizable implementation
1:     public void writeExternal(ObjectOutput out) throws IOException
1:     {
1:         // first write the version id
0:         out.writeInt( FIRST_VERSION );
1: 
1:         // now write the state
1:         out.writeObject( currencyCode );
1:         out.writeObject( amount );
1:         out.writeObject( timeInstant );
1:     }  
1:     public void readExternal(ObjectInput in)throws IOException, ClassNotFoundException
1:     {
1:         // read the version id
1:         int oldVersion = in.readInt();
1:         if ( oldVersion < FIRST_VERSION ) { throw new IOException( "Corrupt data stream." ); }
1:         if ( oldVersion > TIMESTAMPED_VERSION ) { throw new IOException( "Can't deserialize from the future." ); }
1: 
1:         currencyCode = (String) in.readObject();
1:         amount = (BigDecimal) in.readObject();
1: 
1:         if ( oldVersion >= TIMESTAMPED_VERSION ) { timeInstant = (Timestamp) in.readObject(); }
1:         else { timeInstant = DEFAULT_TIMESTAMP; }
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:54b4e5f
/////////////////////////////////////////////////////////////////////////
0:     public static Price makePrice( ) { return new Price( "USD", BigDecimal.valueOf(1L), DEFAULT_TIMESTAMP ); }
============================================================================