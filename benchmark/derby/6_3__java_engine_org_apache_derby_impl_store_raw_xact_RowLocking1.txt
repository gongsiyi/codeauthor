1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLocking1
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.RowLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369: 	A locking policy that implements row level locking with isolation degree 1.
1:eac0369: 
1:eac0369:     This is an implementation of Gray's degree 1 isolation, read uncommitted,
1:eac0369:     or often referred to as dirty reads.  Basically read operations are 
1:eac0369:     done with no locking.
1:eac0369: 
1:eac0369:     This locking policy is only to be used for read operations.
1:eac0369: 
1:eac0369:     The approach is to place all "write" container and row locks on the 
1:eac0369:     transaction group lock list.  Locks on this group will last until end
1:eac0369:     of transaction.  
1:eac0369: 
1:eac0369:     This implementation will still get table level intent locks.  This is to
1:eac0369:     prevent hard cases where the container otherwise could be deleted while
1:eac0369:     read uncommitted reader is still accessing it.  In order to not get table
1:eac0369:     level intent locks some sort of other ddl level lock would have to be
1:eac0369:     implemented.
1:eac0369: 
1:eac0369:     All "read" row locks will be not be requested.
1:eac0369: 
1:eac0369:     Note that write operations extend from the RowLocking3 implementations.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1:eac0369: */
1:eac0369: public class RowLocking1 extends RowLocking2
2:eac0369: {
1:eac0369: 
1:eac0369: 	protected RowLocking1(LockFactory lf) 
1:eac0369:     {
1:eac0369: 		super(lf);
2:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Obtain lock on record being read.
3:eac0369:      * <p>
2:eac0369:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
2:eac0369:      * or Update lock on the row, depending on the "forUpdate" parameter.
1:eac0369:      * <p>
1:eac0369:      * Read lock will be placed on separate group from transaction.
3:eac0369:      *
1:eac0369:      * @param t             The transaction to associate the lock with.
2:eac0369:      * @param record        The record to be locked.
1:eac0369:      * @param waitForLock   Should lock request wait until granted?
2:eac0369:      * @param forUpdate     Whether to open for read or write access.
1:eac0369:      *
1:eac0369:      * @return true if the lock was granted, false if waitForLock was false 
1:eac0369:      * and the lock could not be granted.
1:eac0369:      *
2:eac0369: 	 * @exception  StandardException  Standard exception policy.
2:eac0369:      **/
1:eac0369: 	public boolean lockRecordForRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container_handle,
2:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         waitForLock,
2:eac0369:     boolean         forUpdate)
2:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369:         return(
1:eac0369:             !forUpdate ?
1:eac0369:                 true : 
1:eac0369:                 super.lockRecordForRead(
1:eac0369:                     t, container_handle, record, waitForLock, forUpdate));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void unlockRecordAfterRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container_handle,
1:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         forUpdate,
1:eac0369:     boolean         row_qualified)
1:eac0369:         throws StandardException
1:eac0369: 	{
2:eac0369:         if (forUpdate)
1:eac0369:         {
1:eac0369:             super.unlockRecordAfterRead(
1:eac0369:                 t, container_handle, record, forUpdate, row_qualified);
1:eac0369:         }
1:eac0369:         return;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLocking1
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.RowLock;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 	A locking policy that implements row level locking with isolation degree 1.
1: 
1:     This is an implementation of Gray's degree 1 isolation, read uncommitted,
1:     or often referred to as dirty reads.  Basically read operations are 
1:     done with no locking.
1: 
1:     This locking policy is only to be used for read operations.
1: 
1:     The approach is to place all "write" container and row locks on the 
1:     transaction group lock list.  Locks on this group will last until end
1:     of transaction.  
1: 
1:     This implementation will still get table level intent locks.  This is to
1:     prevent hard cases where the container otherwise could be deleted while
1:     read uncommitted reader is still accessing it.  In order to not get table
1:     level intent locks some sort of other ddl level lock would have to be
1:     implemented.
1: 
1:     All "read" row locks will be not be requested.
1: 
1:     Note that write operations extend from the RowLocking3 implementations.
1: 
1: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1: */
1: public class RowLocking1 extends RowLocking2
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	protected RowLocking1(LockFactory lf) 
1:     {
1: 		super(lf);
1: 	}
1: 
1:     /**
1:      * Obtain lock on record being read.
1:      * <p>
1:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
1:      * or Update lock on the row, depending on the "forUpdate" parameter.
1:      * <p>
1:      * Read lock will be placed on separate group from transaction.
1:      *
1:      * @param t             The transaction to associate the lock with.
1:      * @param record        The record to be locked.
1:      * @param waitForLock   Should lock request wait until granted?
1:      * @param forUpdate     Whether to open for read or write access.
1:      *
1:      * @return true if the lock was granted, false if waitForLock was false 
1:      * and the lock could not be granted.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public boolean lockRecordForRead(
1:     Transaction     t, 
1:     ContainerHandle container_handle,
1:     RecordHandle    record, 
1:     boolean         waitForLock,
1:     boolean         forUpdate)
1: 		throws StandardException
1: 	{
1: 
1:         return(
1:             !forUpdate ?
1:                 true : 
1:                 super.lockRecordForRead(
1:                     t, container_handle, record, waitForLock, forUpdate));
1: 	}
1: 
1:     /**
0:      * Obtain lock on record being read while holding a latch.
1:      * <p>
1:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
1:      * or Update lock on the row, depending on the "forUpdate" parameter.
1:      * <p>
1:      *
0:      * @param latch         The latch being held.
1:      * @param record        The record to be locked.
1:      * @param forUpdate     Whether to open for read or write access.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0: 	public void lockRecordForRead(
0:     Latch			latch, 
1:     RecordHandle    record, 
1:     boolean         forUpdate)
1: 		throws StandardException
1: 	{
1:         if (forUpdate)
0:             super.lockRecordForRead(latch, record, forUpdate);
1: 	}
1: 
1: 	public void unlockRecordAfterRead(
1:     Transaction     t, 
1:     ContainerHandle container_handle,
1:     RecordHandle    record, 
1:     boolean         forUpdate,
1:     boolean         row_qualified)
1:         throws StandardException
1: 	{
1:         if (forUpdate)
1:         {
1:             super.unlockRecordAfterRead(
1:                 t, container_handle, record, forUpdate, row_qualified);
1:         }
1:         return;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.RowLock;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 	A locking policy that implements row level locking with isolation degree 1.
0: 
0:     This is an implementation of Gray's degree 1 isolation, read uncommitted,
0:     or often referred to as dirty reads.  Basically read operations are 
0:     done with no locking.
0: 
0:     This locking policy is only to be used for read operations.
0: 
0:     The approach is to place all "write" container and row locks on the 
0:     transaction group lock list.  Locks on this group will last until end
0:     of transaction.  
0: 
0:     This implementation will still get table level intent locks.  This is to
0:     prevent hard cases where the container otherwise could be deleted while
0:     read uncommitted reader is still accessing it.  In order to not get table
0:     level intent locks some sort of other ddl level lock would have to be
0:     implemented.
0: 
0:     All "read" row locks will be not be requested.
0: 
0:     Note that write operations extend from the RowLocking3 implementations.
0: 
0: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
0: */
0: public class RowLocking1 extends RowLocking2
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	protected RowLocking1(LockFactory lf) 
0:     {
0: 		super(lf);
0: 	}
0: 
0:     /**
0:      * Obtain lock on record being read.
0:      * <p>
0:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
0:      * or Update lock on the row, depending on the "forUpdate" parameter.
0:      * <p>
0:      * Read lock will be placed on separate group from transaction.
0:      *
0:      * @param t             The transaction to associate the lock with.
0:      * @param record        The record to be locked.
0:      * @param waitForLock   Should lock request wait until granted?
0:      * @param forUpdate     Whether to open for read or write access.
0:      *
0:      * @return true if the lock was granted, false if waitForLock was false 
0:      * and the lock could not be granted.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public boolean lockRecordForRead(
0:     Transaction     t, 
0:     ContainerHandle container_handle,
0:     RecordHandle    record, 
0:     boolean         waitForLock,
0:     boolean         forUpdate)
0: 		throws StandardException
0: 	{
0: 
0:         return(
0:             !forUpdate ?
0:                 true : 
0:                 super.lockRecordForRead(
0:                     t, container_handle, record, waitForLock, forUpdate));
0: 	}
0: 
0:     /**
0:      * Obtain lock on record being read while holding a latch.
0:      * <p>
0:      * Assumes that a table level IS has been acquired.  Will acquire a Shared
0:      * or Update lock on the row, depending on the "forUpdate" parameter.
0:      * <p>
0:      *
0:      * @param latch         The latch being held.
0:      * @param record        The record to be locked.
0:      * @param forUpdate     Whether to open for read or write access.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public void lockRecordForRead(
0:     Latch			latch, 
0:     RecordHandle    record, 
0:     boolean         forUpdate)
0: 		throws StandardException
0: 	{
0:         if (forUpdate)
0:             super.lockRecordForRead(latch, record, forUpdate);
0: 	}
0: 
0: 	public void unlockRecordAfterRead(
0:     Transaction     t, 
0:     ContainerHandle container_handle,
0:     RecordHandle    record, 
0:     boolean         forUpdate,
0:     boolean         row_qualified)
0:         throws StandardException
0: 	{
0:         if (forUpdate)
0:         {
0:             super.unlockRecordAfterRead(
0:                 t, container_handle, record, forUpdate, row_qualified);
0:         }
0:         return;
0: 	}
0: }
============================================================================