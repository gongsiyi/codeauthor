1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_SecondaryIndexRow
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derby.impl.store.access.conglomerate.*;
1:2bc809f: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.io.Storable;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.DataValueDescriptor;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.RowLocation;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: This class implements a row which will be stored in a secondary index on 
1:2bc809f: a heap table.  
1:2bc809f: <p>
1:2bc809f: This class creates a new DataValueDescriptor array which will be the row used 
1:2bc809f: to insert into the secondary index.  The fields of this object array are made 
1:2bc809f: up of references to DataValueDescriptors provided by the caller: the 
1:2bc809f: DataValueDescriptors in the template and a RowLocation.
1:2bc809f: The interface is designed to support the standard access method interface
1:2bc809f: where callers provide a single template and then read rows into that template
1:2bc809f: over and over.  This class keeps a reference to the objects in the template
1:2bc809f: and the rowlocation, 
1:2bc809f: so the state of this object changes whenever the caller changes the template.
1:2bc809f: The caller provides a template which will contain a heap row,
1:2bc809f: and a RowLocation which provides the location of the row within the heap table.
1:2bc809f: <p>
1:2bc809f: So for example to create an index from a base table by reading the base table
1:2bc809f: and inserting each row one at a time into the secondary index you would 
1:2bc809f: do something like:
1:2bc809f: 
1:2bc809f: DataValueDescriptors[] template = get_template_for_base_table();
1:2bc809f: RowLocation            rowloc   = ScanController_var.newRowLocationTemplate();
1:2bc809f: T_SecondaryIndexRow    indrow   = new T_SecondaryIndexRow();
1:2bc809f: 
1:2bc809f: indrow.init(template, rowloc, numcols_in_index);
1:2bc809f: 
1:2bc809f: while (ScanController_variable.next())
1:2bc809f: { 
1:2bc809f:     fetch(template)
1:2bc809f:     fetchLocation(rowloc)
1:2bc809f: 
1:2bc809f:     ConglomerateController_on_btree.insert(indrow.getRow());
1:2bc809f: }
1:2bc809f: 
1:2bc809f: **/
1:2bc809f: 
1:2bc809f: public class T_SecondaryIndexRow
1:2bc809f: {
1:2bc809f: 
1:2bc809f:     DataValueDescriptor[]     row;
1:2bc809f:     RowLocation  init_rowlocation = null;
1:2bc809f: 
1:2bc809f:     /* Constructors for This class: */
1:2bc809f:     public T_SecondaryIndexRow(){}
1:2bc809f: 
1:2bc809f:     /* Private/Protected methods of This class: */
1:2bc809f:     /* Public Methods of T_SecondaryIndexRow class: */
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * get the rows location field.
1:2bc809f:      *
1:2bc809f: 	 * @return The base table row location field from the secondary index.
1:2bc809f:      *
1:2bc809f: 	 * @exception  StandardException  Standard exception policy.
1:2bc809f:      **/
1:2bc809f:     /*
1:2bc809f:     private RowLocation getRowLocationField()
1:2bc809f: 		throws StandardException
1:2bc809f:     {
1:2bc809f:         return(init_rowlocation);
1:2bc809f:     }
1:2bc809f:     */
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * Initialize the class.
1:2bc809f:      * <p>
1:2bc809f:      * Save away pointers to the base table template row, and the rowlocation
1:2bc809f:      * class.  Build default map of base columns to key columns, this map
1:2bc809f:      * can be changed with setMap().
1:2bc809f:      * <p>
1:2bc809f:      *
1:2bc809f:      * @param template    The template for the base table row.
1:2bc809f:      * @param rowlocation The template for the row location.
1:2bc809f:      * @param numkeys     The total number of columns in the secondary index
1:2bc809f:      *                    including the rowlocation column.
1:2bc809f:      *
1:2bc809f: 	 * @exception  StandardException  Standard exception policy.
1:2bc809f:      **/
1:2bc809f:     public void init(
1:2bc809f:     DataValueDescriptor[]   template,
1:2bc809f:     RowLocation             rowlocation,
1:2bc809f:     int                     numkeys)
1:2bc809f:         throws StandardException
1:2bc809f:     {
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:         {
1:2bc809f:             if (numkeys != (template.length + 1))
1:2bc809f:                 SanityManager.THROWASSERT(
1:2bc809f:                     "numkeys = " + numkeys + 
1:2bc809f:                     " template.length = " + template.length);
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         init_rowlocation = rowlocation;
1:2bc809f: 
1:2bc809f:         /* create new object array for the row, and copy all object references 
1:2bc809f:          * from template row to new secondary index row.
1:2bc809f:          */
1:2bc809f:         row = new DataValueDescriptor[numkeys];
1:2bc809f: 
1:2bc809f:         System.arraycopy(template, 0, row, 0, template.length);
1:2bc809f: 
1:2bc809f:         /* add the reference to the row location column as the last column */
1:2bc809f:         row[row.length - 1] = rowlocation;
1:2bc809f:     }
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * Return the secondary index row.
1:2bc809f:      * <p>
1:2bc809f:      * Return the DataValueDescriptor array that represents the branch row, 
1:2bc809f:      * for use in raw store calls to fetch, insert, and update.
1:2bc809f:      * <p>
1:2bc809f:      *
1:2bc809f: 	 * @return The branch row object array.
1:2bc809f:      **/
1:2bc809f:     public DataValueDescriptor[] getRow()
1:2bc809f:     {
1:2bc809f:         return(this.row);
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 	public String toString()
1:2bc809f: 	{
1:2bc809f: 		String s = "{ ";
1:2bc809f: 		for (int colid = 0; colid < row.length; colid++)
1:2bc809f: 		{
1:2bc809f: 			s += row[colid];
1:2bc809f: 			if (colid < (row.length - 1))
1:2bc809f: 				s += ", ";
1:2bc809f: 		}
1:2bc809f: 		s += " }";
1:2bc809f: 		return s;
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_SecondaryIndexRow
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derby.impl.store.access.conglomerate.*;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: 
1: /**
1: This class implements a row which will be stored in a secondary index on 
1: a heap table.  
1: <p>
1: This class creates a new DataValueDescriptor array which will be the row used 
1: to insert into the secondary index.  The fields of this object array are made 
1: up of references to DataValueDescriptors provided by the caller: the 
1: DataValueDescriptors in the template and a RowLocation.
1: The interface is designed to support the standard access method interface
1: where callers provide a single template and then read rows into that template
1: over and over.  This class keeps a reference to the objects in the template
1: and the rowlocation, 
1: so the state of this object changes whenever the caller changes the template.
1: The caller provides a template which will contain a heap row,
1: and a RowLocation which provides the location of the row within the heap table.
1: <p>
1: So for example to create an index from a base table by reading the base table
1: and inserting each row one at a time into the secondary index you would 
1: do something like:
1: 
1: DataValueDescriptors[] template = get_template_for_base_table();
1: RowLocation            rowloc   = ScanController_var.newRowLocationTemplate();
1: T_SecondaryIndexRow    indrow   = new T_SecondaryIndexRow();
1: 
1: indrow.init(template, rowloc, numcols_in_index);
1: 
1: while (ScanController_variable.next())
1: { 
1:     fetch(template)
1:     fetchLocation(rowloc)
1: 
1:     ConglomerateController_on_btree.insert(indrow.getRow());
1: }
1: 
1: **/
1: 
1: public class T_SecondaryIndexRow
1: {
1: 
1:     DataValueDescriptor[]     row;
1:     RowLocation  init_rowlocation = null;
1: 
1:     /* Constructors for This class: */
1:     public T_SecondaryIndexRow(){}
1: 
1:     /* Private/Protected methods of This class: */
1:     /* Public Methods of T_SecondaryIndexRow class: */
1: 
1:     /**
1:      * get the rows location field.
1:      *
1: 	 * @return The base table row location field from the secondary index.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     /*
1:     private RowLocation getRowLocationField()
1: 		throws StandardException
1:     {
1:         return(init_rowlocation);
1:     }
1:     */
1: 
1:     /**
1:      * Initialize the class.
1:      * <p>
1:      * Save away pointers to the base table template row, and the rowlocation
1:      * class.  Build default map of base columns to key columns, this map
1:      * can be changed with setMap().
1:      * <p>
1:      *
1:      * @param template    The template for the base table row.
1:      * @param rowlocation The template for the row location.
1:      * @param numkeys     The total number of columns in the secondary index
1:      *                    including the rowlocation column.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void init(
1:     DataValueDescriptor[]   template,
1:     RowLocation             rowlocation,
1:     int                     numkeys)
1:         throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             if (numkeys != (template.length + 1))
1:                 SanityManager.THROWASSERT(
1:                     "numkeys = " + numkeys + 
1:                     " template.length = " + template.length);
1:         }
1: 
1:         init_rowlocation = rowlocation;
1: 
1:         /* create new object array for the row, and copy all object references 
1:          * from template row to new secondary index row.
1:          */
1:         row = new DataValueDescriptor[numkeys];
1: 
1:         System.arraycopy(template, 0, row, 0, template.length);
1: 
1:         /* add the reference to the row location column as the last column */
1:         row[row.length - 1] = rowlocation;
1:     }
1: 
1:     /**
1:      * Return the secondary index row.
1:      * <p>
1:      * Return the DataValueDescriptor array that represents the branch row, 
1:      * for use in raw store calls to fetch, insert, and update.
1:      * <p>
1:      *
1: 	 * @return The branch row object array.
1:      **/
1:     public DataValueDescriptor[] getRow()
1:     {
1:         return(this.row);
1:     }
1: 
1: 	public String toString()
1: 	{
1: 		String s = "{ ";
1: 		for (int colid = 0; colid < row.length; colid++)
1: 		{
1: 			s += row[colid];
1: 			if (colid < (row.length - 1))
1: 				s += ", ";
1: 		}
1: 		s += " }";
1: 		return s;
1: 	}
1: }
============================================================================