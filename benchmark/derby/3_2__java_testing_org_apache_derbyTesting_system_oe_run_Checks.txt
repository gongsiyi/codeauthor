1:7a0c00a: /*
4:7a0c00a:  *
1:7a0c00a:  * Derby - Class org.apache.derbyTesting.system.oe.test.Checks
1:7a0c00a:  *
1:7a0c00a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a0c00a:  * contributor license agreements.  See the NOTICE file distributed with
1:7a0c00a:  * this work for additional information regarding copyright ownership.
1:7a0c00a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a0c00a:  * (the "License"); you may not use this file except in compliance with
1:7a0c00a:  * the License.  You may obtain a copy of the License at
1:7a0c00a:  *
1:7a0c00a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7a0c00a:  *
1:7a0c00a:  * Unless required by applicable law or agreed to in writing, 
1:7a0c00a:  * software distributed under the License is distributed on an 
1:7a0c00a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:7a0c00a:  * either express or implied. See the License for the specific 
1:7a0c00a:  * language governing permissions and limitations under the License.
4:7a0c00a:  */
1:7a0c00a: package org.apache.derbyTesting.system.oe.run;
12:7a0c00a: 
1:7a0c00a: import java.sql.ResultSet;
1:956dcad: import java.sql.SQLException;
1:7a0c00a: import java.sql.Statement;
1:7a0c00a: import junit.framework.Assert;
1:7a0c00a: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7a0c00a: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:956dcad: import org.apache.derbyTesting.system.oe.util.HandleCheckError;
1:0d6b409: import org.apache.derbyTesting.system.oe.util.OEChecks;
1:7a0c00a: 
4:7a0c00a: /**
1:7a0c00a:  * Do some checks on the Order Entry database.
1:7a0c00a:  */
1:7a0c00a: public class Checks extends JDBCPerfTestCase {
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Warehouse scaling factor
1:7a0c00a:      */
1:7a0c00a:     private short scale = 1;
1:0d6b409:     
1:0d6b409:     /**
1:0d6b409:      * Run checks on OE database
1:0d6b409:      */
1:0d6b409:     private OEChecks check = null;
1:0d6b409:     
1:0d6b409:     public Checks(String name)
1:0d6b409:     {
1:7a0c00a:         super(name);
4:7a0c00a:     }
1:7a0c00a:     /**
1:7a0c00a:      * @param name -
1:7a0c00a:      *            test name
1:7a0c00a:      * @param scale
1:7a0c00a:      *            -warehouse scale factor
1:7a0c00a:      */
1:7a0c00a:     public Checks(String name, short scale) {
1:7a0c00a:         super(name);
1:7a0c00a:         this.scale = scale;
1:7a0c00a: 
1:7a0c00a:     }
1:7a0c00a: 
1:0d6b409:     public void setUp() throws Exception
1:0d6b409:     {
1:0d6b409:         this.check = new OEChecks();
1:956dcad:         check.initialize(new HandleCheckError() {
1:956dcad:             public void handleCheckError(String error) {
1:956dcad:                 fail(error);
1:956dcad:             }
1:956dcad:         }, getConnection(),scale);
1:0d6b409:     }
1:7a0c00a:     /**
1:7a0c00a:      * Return suite of tests that checks the row counts for all the tables in
1:7a0c00a:      * the Order Entry bechmark.
1:7a0c00a:      * 
1:7a0c00a:      * @param scale
1:7a0c00a:      */
1:7a0c00a:     public static Test checkAllRowCounts(short scale) {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("Order Entry -Check Row Counts");
1:1ae02c9: 
1:7a0c00a:         suite.addTest(new Checks("testWarehouseRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testStockRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testItemRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testCustomerRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testDistrictRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testOrdersRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testNewOrdersRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testOrderLineRows", scale));
1:7a0c00a:         suite.addTest(new Checks("testHistoryRows", scale));
1:7a0c00a: 
1:7a0c00a:         return suite;
1:7a0c00a: 
1:7a0c00a:     }
1:7a0c00a:     
1:7a0c00a:     /**
1:7a0c00a:      * Consistency checks per Section 3.3.2 of TPC-C spec
1:7a0c00a:      */
1:7a0c00a:     public static Test consistencyChecks()
1:7a0c00a:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("Order Entry -Consistency checks");
1:1ae02c9: 
1:7a0c00a:         suite.addTest(new Checks("testCondition1"));
1:7a0c00a:         suite.addTest(new Checks("testCondition2"));
1:7a0c00a:         suite.addTest(new Checks("testCondition3"));
1:7a0c00a:         suite.addTest(new Checks("testCondition4"));
1:7a0c00a:         
1:7a0c00a:         return suite;
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * @return suite of tests that perform certain consistency checks on the OE
1:7a0c00a:      *         database
1:7a0c00a:      */
1:7a0c00a:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("OrderEntry - checks");
1:7a0c00a:         suite.addTest(checkAllRowCounts((short) 1));
1:7a0c00a:         suite.addTest(consistencyChecks());
1:7a0c00a:         
1:7a0c00a:         return suite;
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Section 3.3.2.1 of TPC-C specification. Entries in the WAREHOUSE and
1:7a0c00a:      * DISTRICT tables must satisfy the relationship: W_YTD = sum(D_YTD) for
1:7a0c00a:      * each warehouse defined by (W_ID = D_W_ID).
1:7a0c00a:      */
1:7a0c00a:     public void testCondition1() throws SQLException {
1:7a0c00a:         Statement s = createStatement();
1:7a0c00a:         ResultSet rs = s.executeQuery("SELECT W.W_ID,W.W_YTD, SUM(D.D_YTD) " +
1:7a0c00a:                         "from WAREHOUSE W , DISTRICT D where W.W_ID=D.D_W_ID" +
1:7a0c00a:                         " GROUP BY W.W_ID,W.W_YTD");
1:7a0c00a:         while (rs.next()) {
1:7a0c00a:             println("W_ID"+ rs.getShort(1)+ "W_YTD)="
1:7a0c00a:                     + rs.getString(2)
1:7a0c00a:                     + "SUM(D_YTD)=" + rs.getString(3));
1:7a0c00a:             // retrieve decimal values as string.
1:7a0c00a:             // to allow Order Entry to be
1:7a0c00a:             // run on J2ME/CDC/Foundation which does not support BigDecimal.
1:7a0c00a:             Assert.assertEquals(
1:7a0c00a:                     "Condition#1: W_YTD = sum(D_YTD) not " +
1:7a0c00a:                     "satisfied for W_ID="+ rs.getShort(1),
1:7a0c00a:                     rs.getString(2),rs.getString(3));
1:7a0c00a:         }
1:7a0c00a:         commit();
2:7a0c00a:         rs.close();
1:7a0c00a:         s.close();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Section 3.3.2.2 Consistency Condition 2 (TPC-C spec) Entries in the
1:7a0c00a:      * DISTRICT, ORDER, and NEW-ORDER tables must satisfy the relationship:
1:7a0c00a:      * D_NEXT_O_ID - 1 = max(O_ID) = max(NO_O_ID) for each district defined by
1:7a0c00a:      * (D_W_ID = O_W_ID = NO_W_ID) and (D_ID = O_D_ID = NO_D_ID). This condition
1:7a0c00a:      * does not apply to the NEW-ORDER table for any districts which have no
1:7a0c00a:      * outstanding new orders (i.e., the number of rows is zero).
1:7a0c00a:      */
1:7a0c00a:     public void testCondition2() throws SQLException {
1:7a0c00a:         Statement s = createStatement();
1:7a0c00a:         ResultSet rs = s.executeQuery("SELECT D.D_ID, D.D_W_ID,D.D_NEXT_O_ID, "+
1:7a0c00a:                         "MAX(O.O_ID),MAX(N.NO_O_ID) FROM NEWORDERS N, " +
1:7a0c00a:                         "DISTRICT D, ORDERS O WHERE D.D_W_ID=O.O_W_ID " +
1:7a0c00a:                         "AND D.D_W_ID = N.NO_W_ID AND D.D_ID = O.O_D_ID " +
1:7a0c00a:                         "AND D.D_ID = N.NO_D_ID GROUP BY " +
1:7a0c00a:                         "D.D_ID,D.D_W_ID,D.D_NEXT_O_ID");
1:7a0c00a:         
1:7a0c00a:         while ( rs.next() )
1:7a0c00a:         {
1:7a0c00a:             println("D_ID="+rs.getShort(1)+"D_W_ID="+rs.getShort(2) +
1:7a0c00a:                     "D_NEXT_O_ID="+ rs.getInt(3) +"MAX(O.O_ID)="+rs.getInt(4) +
1:7a0c00a:                     "MAX(N.NO_O_ID)="+rs.getInt(5));
1:7a0c00a:             Assert.assertEquals("Condition#2 (a), (D_NEXT_O_ID -1) = MAX(O_ID) " +
1:7a0c00a:                     "not satisfied for D_ID="+rs.getShort(1)+
1:7a0c00a:                     "D_W_ID="+rs.getShort(2)
1:7a0c00a:                     , (rs.getInt(3)-1),rs.getInt(4));
1:7a0c00a:             Assert.assertEquals("Condition#2 (b), (D_NEXT_O_ID -1 = MAX(NO_O_ID) " +
1:7a0c00a:                     "not satisfied for D_ID="+rs.getShort(1)+
1:7a0c00a:                     " D_W_ID="+rs.getShort(2)
1:7a0c00a:                     , (rs.getInt(3)-1),rs.getInt(5));
1:7a0c00a:             Assert.assertEquals("Condition#2 (c), MAX(O_ID) = MAX(NO_O_ID) " +
1:7a0c00a:                     " not satisfied for D_ID="+rs.getShort(1)+
1:7a0c00a:                     " D_W_ID="+rs.getShort(2)
1:7a0c00a:                     , rs.getInt(4),rs.getInt(5));
1:7a0c00a:         }
1:7a0c00a:         commit();
1:7a0c00a:         rs.close();
1:7a0c00a:         s.close();
1:7a0c00a:             
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * 3.3.2.3 Consistency Condition 3 
1:7a0c00a:      * Entries in the NEW-ORDER table must
1:7a0c00a:      * satisfy the relationship: max(NO_O_ID) - min(NO_O_ID) + 1 = [number of
1:7a0c00a:      * rows in the NEW-ORDER table for this district] for each district defined
1:7a0c00a:      * by NO_W_ID and NO_D_ID. This condition does not apply to any districts
1:7a0c00a:      * which have no outstanding new orders (i.e., the number of rows is zero).
1:7a0c00a:      */
1:7a0c00a:     public void testCondition3() throws SQLException {
1:7a0c00a:         Statement s = createStatement();
1:7a0c00a:         ResultSet rs = s.executeQuery("SELECT NO_W_ID,NO_D_ID," +
1:7a0c00a:                         "MAX(NO_O_ID) - MIN(NO_O_ID) +1, COUNT(*)" +
1:7a0c00a:                         " FROM NEWORDERS GROUP BY NO_W_ID,NO_D_ID");
1:7a0c00a:         while (rs.next()) {
1:7a0c00a:             println("NO_W_ID=" + rs.getShort(1) + ",NO_D_ID="
1:7a0c00a:                     + rs.getShort(2) + "Max(NO_O_ID)-MIN(NO_O_ID)+1 ="
1:7a0c00a:                     + rs.getInt(3) + " Num_rows_NO for this district="
1:7a0c00a:                     + rs.getInt(4));
1:7a0c00a:             Assert.assertEquals(
1:7a0c00a:                     "Condition#3 (max(NO_O_ID) - min(NO_O_ID) + 1) = [number of"+
1:7a0c00a:                     " rows in the NEW-ORDER table for district] not satisfied " +
1:7a0c00a:                     "for NO_W_ID="+rs.getShort(1)+" NO_D_ID="+rs.getShort(2),
1:7a0c00a:                     rs.getInt(3),rs.getInt(4));
1:7a0c00a:         }
1:7a0c00a:         commit();
1:7a0c00a:         rs.close();
1:7a0c00a:         s.close();
1:7a0c00a: 
1:7a0c00a:     }
1:7a0c00a:     
1:7a0c00a:    /**
1:7a0c00a:      * 3.3.2.4 Consistency Condition 4 
1:7a0c00a:      * Entries in the ORDER and ORDER-LINE
1:7a0c00a:      * tables must satisfy the relationship: sum(O_OL_CNT) = [number of rows in
1:7a0c00a:      * the ORDER-LINE table for this district] for each district defined by
1:7a0c00a:      * (O_W_ID = OL_W_ID) and (O_D_ID = OL_D_ID).
1:7a0c00a:      */
1:7a0c00a:     public void testCondition4() throws SQLException {
1:7a0c00a:         
1:7a0c00a:         Statement s = createStatement();
1:7a0c00a:         ResultSet rs = s.executeQuery("SELECT " +
1:7a0c00a:                         "T1.SUM_OL_CNT,T2.NUM_OL_ROWS, T1.O_W_ID," +
1:7a0c00a:                         "T1.O_D_ID FROM " +
1:7a0c00a:                         "(SELECT O.O_W_ID, O.O_D_ID, " +
1:7a0c00a:                         "SUM(CAST(O.O_OL_CNT AS BIGINT)) AS " +
1:7a0c00a:                         "SUM_OL_CNT FROM ORDERS " +
1:7a0c00a:                         "O GROUP BY O.O_W_ID,O.O_D_ID) T1 ," +
1:7a0c00a:                         "(SELECT OL_W_ID,OL_D_ID,COUNT(*) AS " +
1:7a0c00a:                         "NUM_OL_ROWS FROM ORDERLINE " +
1:7a0c00a:                         "OL GROUP BY OL.OL_W_ID,OL.OL_D_ID) T2" +
1:7a0c00a:                         " WHERE (T1.O_W_ID = T2.OL_W_ID) AND" +
1:7a0c00a:                         " (T1.O_D_ID = T2.OL_D_ID)");    
1:7a0c00a:         while(rs.next())
1:7a0c00a:         {
1:7a0c00a:             println("Sum of ol_cnt"+ rs.getLong(1) 
1:7a0c00a:                     +" Num_rows_OL="+rs.getInt(1));
1:7a0c00a:             Assert.assertEquals("Condition#4 sum(O_OL_CNT) = [number of rows"
1:7a0c00a:                     +" in the ORDER-LINE table for this district]not satisfied"
1:7a0c00a:                     +"for O_W_ID="+rs.getShort(3)+",O_D_ID="+rs.getShort(4),
1:7a0c00a:                     rs.getLong(1),rs.getLong(2));
1:7a0c00a:         }
1:7a0c00a:         commit();
1:7a0c00a:         rs.close();
1:7a0c00a:         s.close();
1:7a0c00a: 
1:7a0c00a:     }
1:7a0c00a:     
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of WAREHOUSE table
1:7a0c00a:      * 
3:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testWarehouseRows() throws Exception {
1:0d6b409:         check.testWarehouseRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of STOCK table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testStockRows() throws Exception {
1:0d6b409:         check.testStockRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of ORDERS table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testOrdersRows() throws Exception {
1:0d6b409:         check.testOrdersRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of DISTRICT table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testDistrictRows() throws Exception {
1:0d6b409:         check.testDistrictRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of CUSTOMER table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testCustomerRows() throws Exception {
1:0d6b409:         check.testCustomerRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of ITEM table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testItemRows() throws Exception {
1:0d6b409:         check.testItemRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of NEWORDERS table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testNewOrdersRows() throws Exception {
1:0d6b409:         check.testNewOrdersRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of HISTORY table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testHistoryRows() throws Exception {
1:0d6b409:         check.testHistoryRows();
1:7a0c00a:     }
1:7a0c00a: 
1:7a0c00a:     /**
1:7a0c00a:      * Test cardinality of ORDERLINE table
1:7a0c00a:      * 
1:7a0c00a:      * @throws Exception
1:7a0c00a:      */
1:7a0c00a:     public void testOrderLineRows() throws Exception {
1:0d6b409:         check.testOrderLineRows();
1:7a0c00a:     }
1:7a0c00a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("Order Entry -Check Row Counts");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("Order Entry -Consistency checks");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("OrderEntry - checks");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:956dcad
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.util.HandleCheckError;
/////////////////////////////////////////////////////////////////////////
1:         check.initialize(new HandleCheckError() {
1:             public void handleCheckError(String error) {
1:                 fail(error);
1:             }
1:         }, getConnection(),scale);
commit:0d6b409
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.util.OEChecks;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Run checks on OE database
1:      */
1:     private OEChecks check = null;
1:     
1:     public Checks(String name)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public void setUp() throws Exception
1:     {
1:         this.check = new OEChecks();
0:         check.initialize(getConnection(),scale);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         check.testWarehouseRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testStockRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testOrdersRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testDistrictRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testCustomerRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testItemRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testNewOrdersRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testHistoryRows();
/////////////////////////////////////////////////////////////////////////
1:         check.testOrderLineRows();
commit:7a0c00a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.test.Checks
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.run;
1: 
0: import java.sql.SQLException;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: 
1: import junit.framework.Assert;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
0: import org.apache.derbyTesting.system.oe.client.Load;
1: 
1: /**
1:  * Do some checks on the Order Entry database.
1:  */
1: public class Checks extends JDBCPerfTestCase {
1: 
1:     /**
1:      * Warehouse scaling factor
1:      */
1:     private short scale = 1;
1: 
0:     public Checks(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * @param name -
1:      *            test name
1:      * @param scale
1:      *            -warehouse scale factor
1:      */
1:     public Checks(String name, short scale) {
1:         super(name);
1:         this.scale = scale;
1: 
1:     }
1: 
1:     /**
1:      * Return suite of tests that checks the row counts for all the tables in
1:      * the Order Entry bechmark.
1:      * 
1:      * @param scale
0:      * @return
1:      */
1:     public static Test checkAllRowCounts(short scale) {
0:         TestSuite suite = new TestSuite("Order Entry -Check Row Counts");
1:         suite.addTest(new Checks("testWarehouseRows", scale));
1:         suite.addTest(new Checks("testStockRows", scale));
1:         suite.addTest(new Checks("testItemRows", scale));
1:         suite.addTest(new Checks("testCustomerRows", scale));
1:         suite.addTest(new Checks("testDistrictRows", scale));
1:         suite.addTest(new Checks("testOrdersRows", scale));
1:         suite.addTest(new Checks("testNewOrdersRows", scale));
1:         suite.addTest(new Checks("testOrderLineRows", scale));
1:         suite.addTest(new Checks("testHistoryRows", scale));
1: 
1:         return suite;
1: 
1:     }
1:     
1:     /**
1:      * Consistency checks per Section 3.3.2 of TPC-C spec
0:      * @return
1:      */
1:     public static Test consistencyChecks()
1:     {
0:         TestSuite suite = new TestSuite("Order Entry -Consistency checks");
1:         suite.addTest(new Checks("testCondition1"));
1:         suite.addTest(new Checks("testCondition2"));
1:         suite.addTest(new Checks("testCondition3"));
1:         suite.addTest(new Checks("testCondition4"));
1:         
1:         return suite;
1:     }
1: 
1:     /**
1:      * @return suite of tests that perform certain consistency checks on the OE
1:      *         database
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("OrderEntry - checks");
1:         suite.addTest(checkAllRowCounts((short) 1));
1:         suite.addTest(consistencyChecks());
1:         
1:         return suite;
1:     }
1: 
1:     /**
1:      * Section 3.3.2.1 of TPC-C specification. Entries in the WAREHOUSE and
1:      * DISTRICT tables must satisfy the relationship: W_YTD = sum(D_YTD) for
1:      * each warehouse defined by (W_ID = D_W_ID).
1:      */
1:     public void testCondition1() throws SQLException {
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("SELECT W.W_ID,W.W_YTD, SUM(D.D_YTD) " +
1:                         "from WAREHOUSE W , DISTRICT D where W.W_ID=D.D_W_ID" +
1:                         " GROUP BY W.W_ID,W.W_YTD");
1:         while (rs.next()) {
1:             println("W_ID"+ rs.getShort(1)+ "W_YTD)="
1:                     + rs.getString(2)
1:                     + "SUM(D_YTD)=" + rs.getString(3));
1:             // retrieve decimal values as string.
1:             // to allow Order Entry to be
1:             // run on J2ME/CDC/Foundation which does not support BigDecimal.
1:             Assert.assertEquals(
1:                     "Condition#1: W_YTD = sum(D_YTD) not " +
1:                     "satisfied for W_ID="+ rs.getShort(1),
1:                     rs.getString(2),rs.getString(3));
1:         }
1:         commit();
1:         rs.close();
1:         s.close();
1:     }
1: 
1:     /**
1:      * Section 3.3.2.2 Consistency Condition 2 (TPC-C spec) Entries in the
1:      * DISTRICT, ORDER, and NEW-ORDER tables must satisfy the relationship:
1:      * D_NEXT_O_ID - 1 = max(O_ID) = max(NO_O_ID) for each district defined by
1:      * (D_W_ID = O_W_ID = NO_W_ID) and (D_ID = O_D_ID = NO_D_ID). This condition
1:      * does not apply to the NEW-ORDER table for any districts which have no
1:      * outstanding new orders (i.e., the number of rows is zero).
1:      */
1:     public void testCondition2() throws SQLException {
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("SELECT D.D_ID, D.D_W_ID,D.D_NEXT_O_ID, "+
1:                         "MAX(O.O_ID),MAX(N.NO_O_ID) FROM NEWORDERS N, " +
1:                         "DISTRICT D, ORDERS O WHERE D.D_W_ID=O.O_W_ID " +
1:                         "AND D.D_W_ID = N.NO_W_ID AND D.D_ID = O.O_D_ID " +
1:                         "AND D.D_ID = N.NO_D_ID GROUP BY " +
1:                         "D.D_ID,D.D_W_ID,D.D_NEXT_O_ID");
1:         
1:         while ( rs.next() )
1:         {
1:             println("D_ID="+rs.getShort(1)+"D_W_ID="+rs.getShort(2) +
1:                     "D_NEXT_O_ID="+ rs.getInt(3) +"MAX(O.O_ID)="+rs.getInt(4) +
1:                     "MAX(N.NO_O_ID)="+rs.getInt(5));
1:             Assert.assertEquals("Condition#2 (a), (D_NEXT_O_ID -1) = MAX(O_ID) " +
1:                     "not satisfied for D_ID="+rs.getShort(1)+
1:                     "D_W_ID="+rs.getShort(2)
1:                     , (rs.getInt(3)-1),rs.getInt(4));
1:             Assert.assertEquals("Condition#2 (b), (D_NEXT_O_ID -1 = MAX(NO_O_ID) " +
1:                     "not satisfied for D_ID="+rs.getShort(1)+
1:                     " D_W_ID="+rs.getShort(2)
1:                     , (rs.getInt(3)-1),rs.getInt(5));
1:             Assert.assertEquals("Condition#2 (c), MAX(O_ID) = MAX(NO_O_ID) " +
1:                     " not satisfied for D_ID="+rs.getShort(1)+
1:                     " D_W_ID="+rs.getShort(2)
1:                     , rs.getInt(4),rs.getInt(5));
1:         }
1:         commit();
1:         rs.close();
1:         s.close();
1:             
1:     }
1: 
1:     /**
1:      * 3.3.2.3 Consistency Condition 3 
1:      * Entries in the NEW-ORDER table must
1:      * satisfy the relationship: max(NO_O_ID) - min(NO_O_ID) + 1 = [number of
1:      * rows in the NEW-ORDER table for this district] for each district defined
1:      * by NO_W_ID and NO_D_ID. This condition does not apply to any districts
1:      * which have no outstanding new orders (i.e., the number of rows is zero).
1:      */
1:     public void testCondition3() throws SQLException {
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("SELECT NO_W_ID,NO_D_ID," +
1:                         "MAX(NO_O_ID) - MIN(NO_O_ID) +1, COUNT(*)" +
1:                         " FROM NEWORDERS GROUP BY NO_W_ID,NO_D_ID");
1:         while (rs.next()) {
1:             println("NO_W_ID=" + rs.getShort(1) + ",NO_D_ID="
1:                     + rs.getShort(2) + "Max(NO_O_ID)-MIN(NO_O_ID)+1 ="
1:                     + rs.getInt(3) + " Num_rows_NO for this district="
1:                     + rs.getInt(4));
1:             Assert.assertEquals(
1:                     "Condition#3 (max(NO_O_ID) - min(NO_O_ID) + 1) = [number of"+
1:                     " rows in the NEW-ORDER table for district] not satisfied " +
1:                     "for NO_W_ID="+rs.getShort(1)+" NO_D_ID="+rs.getShort(2),
1:                     rs.getInt(3),rs.getInt(4));
1:         }
1:         commit();
1:         rs.close();
1:         s.close();
1: 
1:     }
1:     
1:    /**
1:      * 3.3.2.4 Consistency Condition 4 
1:      * Entries in the ORDER and ORDER-LINE
1:      * tables must satisfy the relationship: sum(O_OL_CNT) = [number of rows in
1:      * the ORDER-LINE table for this district] for each district defined by
1:      * (O_W_ID = OL_W_ID) and (O_D_ID = OL_D_ID).
1:      */
1:     public void testCondition4() throws SQLException {
1:         
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("SELECT " +
1:                         "T1.SUM_OL_CNT,T2.NUM_OL_ROWS, T1.O_W_ID," +
1:                         "T1.O_D_ID FROM " +
1:                         "(SELECT O.O_W_ID, O.O_D_ID, " +
1:                         "SUM(CAST(O.O_OL_CNT AS BIGINT)) AS " +
1:                         "SUM_OL_CNT FROM ORDERS " +
1:                         "O GROUP BY O.O_W_ID,O.O_D_ID) T1 ," +
1:                         "(SELECT OL_W_ID,OL_D_ID,COUNT(*) AS " +
1:                         "NUM_OL_ROWS FROM ORDERLINE " +
1:                         "OL GROUP BY OL.OL_W_ID,OL.OL_D_ID) T2" +
1:                         " WHERE (T1.O_W_ID = T2.OL_W_ID) AND" +
1:                         " (T1.O_D_ID = T2.OL_D_ID)");    
1:         while(rs.next())
1:         {
1:             println("Sum of ol_cnt"+ rs.getLong(1) 
1:                     +" Num_rows_OL="+rs.getInt(1));
1:             Assert.assertEquals("Condition#4 sum(O_OL_CNT) = [number of rows"
1:                     +" in the ORDER-LINE table for this district]not satisfied"
1:                     +"for O_W_ID="+rs.getShort(3)+",O_D_ID="+rs.getShort(4),
1:                     rs.getLong(1),rs.getLong(2));
1:         }
1:         commit();
1:         rs.close();
1:         s.close();
1: 
1:     }
1:     
1:     /**
1:      * Test cardinality of WAREHOUSE table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testWarehouseRows() throws Exception {
0:         checkCountStar("WAREHOUSE", scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of STOCK table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testStockRows() throws Exception {
0:         checkCountStar("STOCK", Load.STOCK_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of ORDERS table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testOrdersRows() throws Exception {
0:         checkCountStar("ORDERS", Load.ORDERS_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of DISTRICT table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testDistrictRows() throws Exception {
0:         checkCountStar("DISTRICT", Load.DISTRICT_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of CUSTOMER table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testCustomerRows() throws Exception {
0:         checkCountStar("CUSTOMER", Load.CUSTOMER_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of ITEM table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testItemRows() throws Exception {
0:         checkCountStar("ITEM", Load.ITEM_COUNT);
1:     }
1: 
1:     /**
1:      * Test cardinality of NEWORDERS table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testNewOrdersRows() throws Exception {
0:         checkCountStar("NEWORDERS", Load.NEWORDERS_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of HISTORY table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testHistoryRows() throws Exception {
0:         checkCountStar("HISTORY", Load.HISTORY_COUNT_W * scale);
1:     }
1: 
1:     /**
1:      * Test cardinality of ORDERLINE table
1:      * 
1:      * @throws Exception
1:      */
1:     public void testOrderLineRows() throws Exception {
0:         checkWithinOnePercent("ORDERLINE", Load.ORDERLINE_COUNT_WV * scale);
1:     }
1: 
1:     /**
0:      * Check if number of rows in table is as expected
1:      * 
0:      * @param table -
0:      *            table on which to execute the query
0:      * @param expected -
0:      *            expected number of rows
1:      * @throws Exception
1:      */
0:     private void checkCountStar(String table, int expected) throws Exception {
0:         Assert.assertEquals("Number of rows loaded for " + table
0:                 + " not correct", expected, rowsInTable(table));
1: 
1:     }
1: 
1:     /**
0:      * Return the number of rows in the table. A simple select count(*) from
0:      * tableName
1:      * 
0:      * @param tableName -
0:      *            name of the table
0:      * @throws SQLException
1:      */
0:     private int rowsInTable(String tableName) throws SQLException {
0:         Statement stmt = createStatement();
0:         ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
0:         rs.next();
0:         int count = rs.getInt(1);
1:         rs.close();
0:         stmt.close();
1: 
0:         return count;
1:     }
1: 
1:     /**
0:      * Check if number of rows in table is within one percent of expected value
1:      * 
0:      * @param tableName -
0:      *            table on which to execute the query
0:      * @param expected -
0:      *            expected number of rows
1:      * @throws Exception
1:      */
0:     private void checkWithinOnePercent(String tableName, int expected)
0:             throws Exception {
1: 
0:         double count = rowsInTable(tableName);
0:         double low = ((double) expected) * 0.99;
0:         double high = ((double) expected) * 1.01;
0:         Assert.assertEquals("Initial rows" + count + " in " + tableName
0:                 + " is out of range.[" + low + "-" + high + "]", false,
0:                 ((count < low) || (count > high)));
1:     }
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================