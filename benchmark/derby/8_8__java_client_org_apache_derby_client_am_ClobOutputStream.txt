1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.ClobOutputStream
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:ee33904: 
1:b13b17c: import java.io.IOException;
1:b13b17c: import java.io.OutputStream;
1:33776ff: 
1:33776ff: 
1:b13b17c: class ClobOutputStream extends OutputStream {
1:69e3d06:     private ClientClob clob_;
1:33776ff:     private long offset_;
1:33776ff: 
1:69e3d06:     ClobOutputStream(ClientClob clob, long offset) throws SqlException {
1:33776ff:         clob_ = clob;
1:33776ff:         offset_ = offset;
1:cbd0ff1:         
1:cbd0ff1:         /*
1:cbd0ff1:             offset_ starts from 1 while sqlLenth_=0
1:cbd0ff1:             in the case of a empty Clob hence check from
1:cbd0ff1:             offset_-1
1:cbd0ff1:          */
1:2ef245a:         if ((offset_-1) > clob_.sqlLength()) {
1:33776ff:             throw new IndexOutOfBoundsException();
2:33776ff:         }
1:33776ff:     }
1:33776ff: 
1:b13b17c:     public void write(int b) throws IOException {
1:5c0964b:         byte[] newByte = new byte[1];
1:5c0964b:         newByte[0] = (byte)b;
1:2ef245a:         writeBytes(newByte);
1:33776ff:     }
1:33776ff: 
1:b13b17c:     public void write(byte b[], int off, int len) throws IOException {
1:33776ff:         if (b == null) {
1:33776ff:             throw new NullPointerException();
1:70f7692:         } else if ((off < 0) || (off > b.length) || (len < 0) ||
1:33776ff:                 ((off + len) > b.length) || ((off + len) < 0)) {
1:33776ff:             throw new IndexOutOfBoundsException();
1:70f7692:         } else if (len == 0) {
1:33776ff:             return;
1:33776ff:         }
1:33776ff: 
1:33776ff:         byte[] newByte = new byte[len];
1:70f7692:         System.arraycopy(b, off, newByte, 0, len);
1:2ef245a:         writeBytes(newByte);
1:2ef245a:     }
1:2ef245a: 
1:2ef245a: 
1:b13b17c:     private void writeBytes(byte b[])  throws IOException
1:2ef245a:     {
1:d3aad54:         // Since this is an OutputStream returned by Clob.setAsciiStream 
1:d3aad54:         // use Ascii encoding when creating the String from bytes
1:faf6742:         String str = new String(b, "ISO-8859-1");
1:c784df5:         clob_.reInitForNonLocator(
1:c784df5:                 clob_.string_.substring(0, (int) offset_ - 1).concat(str));
1:2ef245a:         offset_ += b.length;
1:33776ff:     }
1:33776ff: }
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1:     private ClientClob clob_;
1:     ClobOutputStream(ClientClob clob, long offset) throws SqlException {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.OutputStream;
1: class ClobOutputStream extends OutputStream {
/////////////////////////////////////////////////////////////////////////
1:     public void write(int b) throws IOException {
1:     public void write(byte b[], int off, int len) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     private void writeBytes(byte b[])  throws IOException
commit:ee33904
/////////////////////////////////////////////////////////////////////////
1: 
0: class ClobOutputStream extends java.io.OutputStream {
0:     ClobOutputStream(Clob clob, long offset) throws SqlException {
commit:2ef245a
/////////////////////////////////////////////////////////////////////////
1:         if ((offset_-1) > clob_.sqlLength()) {
/////////////////////////////////////////////////////////////////////////
1:         writeBytes(newByte);
/////////////////////////////////////////////////////////////////////////
1:         writeBytes(newByte);
1:     }
1: 
1: 
0:     private void writeBytes(byte b[])  throws java.io.IOException
1:     {
0:         String str = new String(b, "US-ASCII");
0:         clob_.unicodeStream_ 
0:             = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.setSqlLength(clob_.string_.length());
1:         offset_ += b.length;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c784df5
/////////////////////////////////////////////////////////////////////////
1:         clob_.reInitForNonLocator(
1:                 clob_.string_.substring(0, (int) offset_ - 1).concat(str));
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:faf6742
/////////////////////////////////////////////////////////////////////////
1:         String str = new String(b, "ISO-8859-1");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
1:         
1:         /*
1:             offset_ starts from 1 while sqlLenth_=0
1:             in the case of a empty Clob hence check from
1:             offset_-1
1:          */
0:         if ((offset_-1) > clob_.sqlLength_) {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:d3aad54
/////////////////////////////////////////////////////////////////////////
1:         // Since this is an OutputStream returned by Clob.setAsciiStream 
1:         // use Ascii encoding when creating the String from bytes
0:         clob_.string_ = clob_.string_.concat(new String(newByte, "US-ASCII"));
/////////////////////////////////////////////////////////////////////////
0:         // Since this is an OutputStream returned by Clob.setAsciiStream 
0:         // use Ascii encoding when creating the String from bytes
0:         String str = new String(newByte, "US-ASCII");
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:5c0964b
/////////////////////////////////////////////////////////////////////////
1:         byte[] newByte = new byte[1];
1:         newByte[0] = (byte)b;
0:         clob_.string_ = clob_.string_.concat(new String(newByte));
0:         offset_++;
/////////////////////////////////////////////////////////////////////////
0:         offset_ += len;
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.ClobOutputStream
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
1: 
0: public class ClobOutputStream extends java.io.OutputStream
0: {
0:   private Clob clob_;
1:   private long offset_;
1: 
0:   public ClobOutputStream (Clob clob, long offset) throws SqlException
0:   {
1:     clob_ = clob;
1:     offset_ = offset;
0:     if (offset_ > clob_.sqlLength_)
1:       throw new IndexOutOfBoundsException();
1:   }
1: 
0:   public void write (int b) throws java.io.IOException
0:   {
0:     clob_.string_ = clob_.string_.substring(0, (int)offset_ - 1);
0:     clob_.string_ = clob_.string_.concat("" + b + "");
0:     clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_. characterStream_ = new java.io.StringReader(clob_.string_);
0:     clob_.sqlLength_ = clob_.string_.length();
1:   }
1: 
1: 
0:   public void write (byte b[], int off, int len) throws java.io.IOException
0:   {
1:     if (b == null) {
1:         throw new NullPointerException();
1:     }
0:     else if ((off < 0) || (off > b.length) || (len < 0) ||
1:                ((off + len) > b.length) || ((off + len) < 0)) {
1:         throw new IndexOutOfBoundsException();
1:     }
0:     else if (len == 0) {
1:         return;
1:     }
1: 
1:     byte[] newByte = new byte[len];
0:     System.arraycopy(b,off,newByte,0,len);
0:     String str = new String (newByte);
0:     clob_.string_ = clob_.string_.substring(0, (int)offset_ - 1);
0:     clob_.string_ = clob_.string_.concat(str);
0:     clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_. characterStream_ = new java.io.StringReader(clob_.string_);
0:     clob_.sqlLength_ = clob_.string_.length();
1:   }
1: }
1: 
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class ClobOutputStream extends java.io.OutputStream {
0:     private Clob clob_;
0:     private long offset_;
0:     public ClobOutputStream(Clob clob, long offset) throws SqlException {
0:         clob_ = clob;
0:         offset_ = offset;
0:         if (offset_ > clob_.sqlLength_) {
0:             throw new IndexOutOfBoundsException();
0:         }
0:     public void write(int b) throws java.io.IOException {
0:         clob_.string_ = clob_.string_.substring(0, (int) offset_ - 1);
0:         clob_.string_ = clob_.string_.concat("" + b + "");
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.sqlLength_ = clob_.string_.length();
0:     }
0: 
0: 
0:     public void write(byte b[], int off, int len) throws java.io.IOException {
0:         if (b == null) {
0:             throw new NullPointerException();
1:         } else if ((off < 0) || (off > b.length) || (len < 0) ||
0:                 ((off + len) > b.length) || ((off + len) < 0)) {
0:             throw new IndexOutOfBoundsException();
1:         } else if (len == 0) {
0:             return;
0:         }
0: 
0:         byte[] newByte = new byte[len];
1:         System.arraycopy(b, off, newByte, 0, len);
0:         String str = new String(newByte);
0:         clob_.string_ = clob_.string_.substring(0, (int) offset_ - 1);
0:         clob_.string_ = clob_.string_.concat(str);
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.sqlLength_ = clob_.string_.length();
0:     }
============================================================================