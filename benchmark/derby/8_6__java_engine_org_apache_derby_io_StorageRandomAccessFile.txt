1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.io.StorageRandomAccessFile
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.io;
1:eac0369: 
1:eac0369: import java.io.DataInput;
1:eac0369: import java.io.DataOutput;
1:eac0369: import java.io.FileNotFoundException;
1:eac0369: import java.io.EOFException;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This interface abstracts an object that implements reading and writing on a random access
1:eac0369:  * file. It extends DataInput and DataOutput, so it implicitly contains all the methods of those
1:eac0369:  * interfaces. Any method in this interface that also appears in the java.io.RandomAccessFile class
1:eac0369:  * should behave as the java.io.RandomAccessFile method does.
1:eac0369:  *<p>
1:eac0369:  * Each StorageRandomAccessFile has an associated file pointer, a byte offset in the file. All reading and writing takes
1:eac0369:  * place at the file pointer offset and advances it.
1:eac0369:  *<p>
1:eac0369:  * An implementation of StorageRandomAccessFile need not be thread safe. The database engine
1:eac0369:  * single-threads access to each StorageRandomAccessFile instance. Two threads will not access the
1:eac0369:  * same StorageRandomAccessFile instance at the same time.
1:eac0369:  *<p>
1:eac0369:  * @see <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html">java.io.RandomAccessFile</a>
1:eac0369:  */
1:eac0369: public interface StorageRandomAccessFile extends DataInput, DataOutput
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Closes this file.
1:eac0369:      *
1:eac0369:      * @exception IOException - if an I/O error occurs.
1:eac0369:      */
1:eac0369:     public void close() throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the current offset in this file.
1:eac0369:      *
1:eac0369:      * @return the current file pointer. 
1:eac0369:      *
1:eac0369:      * @exception IOException - if an I/O error occurs.
1:eac0369:      */
1:eac0369:     public long getFilePointer() throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Gets the length of this file.
1:eac0369:      *
1:eac0369:      * @return the number of bytes this file. 
1:eac0369:      *
1:eac0369:      * @exception IOException - if an I/O error occurs.
1:eac0369:      */
1:eac0369:     public long length() throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Set the file pointer. It may be moved beyond the end of the file, but this does not change
1:eac0369:      * the length of the file. The length of the file is not changed until data is actually written..
1:eac0369:      *
1:eac0369:      * @param newFilePointer the new file pointer, measured in bytes from the beginning of the file.
1:eac0369:      *
1:eac0369:      * @exception IOException - if newFilePointer is less than 0 or an I/O error occurs.
1:eac0369:      */
1:eac0369:     public void seek(long newFilePointer) throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Sets the length of this file, either extending or truncating it.
1:eac0369:      *<p>
1:eac0369:      * If the file is extended then the contents of the extension are not defined.
1:eac0369:      *<p>
1:eac0369:      * If the file is truncated and the file pointer is greater than the new length then the file pointer
1:eac0369:      * is set to the new length.
1:eac0369:      *
1:eac0369:      * @param newLength The new file length.
1:eac0369:      *
1:eac0369:      * @exception IOException If an I/O error occurs.
1:eac0369:      */
1:eac0369:     public void setLength(long newLength) throws IOException;
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Force any changes out to the persistent store. If the database is to be transient, that is, if the database
1:eac0369:      * does not survive a restart, then the sync method implementation need not do anything.
1:eac0369:      *
1:eac0369:      *
1:f668d94:      * @exception java.io.SyncFailedException if a possibly recoverable error occurs.
1:eac0369:      * @exception IOException If an IO error occurs.
1:eac0369:      */
1:a552fe6:     public void sync() throws IOException;
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Reads up to <code>len</code> bytes of data from this file into an
1:b2b30ec:      * array of bytes. This method blocks until at least one byte of input
1:b2b30ec:      * is available.
1:b2b30ec:      * <p>
1:b2b30ec:      *
1:b2b30ec:      * @param b     the buffer into which the data is read.
1:b2b30ec:      * @param off   the start offset in array <code>b</code>
1:b2b30ec:      *                   at which the data is written.
1:b2b30ec:      * @param len   the maximum number of bytes read.
1:b2b30ec:      * @return the total number of bytes read into the buffer, or
1:b2b30ec:      *             <code>-1</code> if there is no more data because the end of
1:b2b30ec:      *             the file has been reached.
1:b2b30ec:      * @exception IOException If the first byte cannot be read for any reason
1:b2b30ec:      * other than end of file, or if the random access file has been closed, or
1:b2b30ec:      * if some other I/O error occurs.
1:b2b30ec:      * @exception NullPointerException If <code>b</code> is <code>null</code>.
1:b2b30ec:      * @exception IndexOutOfBoundsException If <code>off</code> is negative,
1:b2b30ec:      * <code>len</code> is negative, or <code>len</code> is greater than
1:b2b30ec:      * <code>b.length - off</code>
1:b2b30ec:      */
1:b2b30ec:     public int read(byte[] b, int off, int len) throws IOException;
1:5cf7a46: 
1:5cf7a46:     /** Clone this file abstraction */
1:5cf7a46:     public  StorageRandomAccessFile clone();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Clone this file abstraction */
1:     public  StorageRandomAccessFile clone();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      * @exception java.io.SyncFailedException if a possibly recoverable error occurs.
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a552fe6
/////////////////////////////////////////////////////////////////////////
1:     public void sync() throws IOException;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Reads up to <code>len</code> bytes of data from this file into an
1:      * array of bytes. This method blocks until at least one byte of input
1:      * is available.
1:      * <p>
1:      *
1:      * @param b     the buffer into which the data is read.
1:      * @param off   the start offset in array <code>b</code>
1:      *                   at which the data is written.
1:      * @param len   the maximum number of bytes read.
1:      * @return the total number of bytes read into the buffer, or
1:      *             <code>-1</code> if there is no more data because the end of
1:      *             the file has been reached.
1:      * @exception IOException If the first byte cannot be read for any reason
1:      * other than end of file, or if the random access file has been closed, or
1:      * if some other I/O error occurs.
1:      * @exception NullPointerException If <code>b</code> is <code>null</code>.
1:      * @exception IndexOutOfBoundsException If <code>off</code> is negative,
1:      * <code>len</code> is negative, or <code>len</code> is greater than
1:      * <code>b.length - off</code>
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.io.StorageRandomAccessFile
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.io;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.FileNotFoundException;
1: import java.io.EOFException;
1: import java.io.IOException;
1: 
1: /**
1:  * This interface abstracts an object that implements reading and writing on a random access
1:  * file. It extends DataInput and DataOutput, so it implicitly contains all the methods of those
1:  * interfaces. Any method in this interface that also appears in the java.io.RandomAccessFile class
1:  * should behave as the java.io.RandomAccessFile method does.
1:  *<p>
1:  * Each StorageRandomAccessFile has an associated file pointer, a byte offset in the file. All reading and writing takes
1:  * place at the file pointer offset and advances it.
1:  *<p>
1:  * An implementation of StorageRandomAccessFile need not be thread safe. The database engine
1:  * single-threads access to each StorageRandomAccessFile instance. Two threads will not access the
1:  * same StorageRandomAccessFile instance at the same time.
1:  *<p>
1:  * @see <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html">java.io.RandomAccessFile</a>
1:  */
1: public interface StorageRandomAccessFile extends DataInput, DataOutput
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1:     /**
1:      * Closes this file.
1:      *
1:      * @exception IOException - if an I/O error occurs.
1:      */
1:     public void close() throws IOException;
1: 
1:     /**
1:      * Get the current offset in this file.
1:      *
1:      * @return the current file pointer. 
1:      *
1:      * @exception IOException - if an I/O error occurs.
1:      */
1:     public long getFilePointer() throws IOException;
1: 
1:     /**
1:      * Gets the length of this file.
1:      *
1:      * @return the number of bytes this file. 
1:      *
1:      * @exception IOException - if an I/O error occurs.
1:      */
1:     public long length() throws IOException;
1: 
1:     /**
1:      * Set the file pointer. It may be moved beyond the end of the file, but this does not change
1:      * the length of the file. The length of the file is not changed until data is actually written..
1:      *
1:      * @param newFilePointer the new file pointer, measured in bytes from the beginning of the file.
1:      *
1:      * @exception IOException - if newFilePointer is less than 0 or an I/O error occurs.
1:      */
1:     public void seek(long newFilePointer) throws IOException;
1: 
1:     /**
1:      * Sets the length of this file, either extending or truncating it.
1:      *<p>
1:      * If the file is extended then the contents of the extension are not defined.
1:      *<p>
1:      * If the file is truncated and the file pointer is greater than the new length then the file pointer
1:      * is set to the new length.
1:      *
1:      * @param newLength The new file length.
1:      *
1:      * @exception IOException If an I/O error occurs.
1:      */
1:     public void setLength(long newLength) throws IOException;
1:     
1:     /**
1:      * Force any changes out to the persistent store. If the database is to be transient, that is, if the database
1:      * does not survive a restart, then the sync method implementation need not do anything.
1:      *
0:      * @param metaData If true then this method must force both changes to the file's
0:      *          contents and metadata to be written to storage; if false, it need only force file content changes
0:      *          to be written. The implementation is allowed to ignore this parameter and always force out
0:      *          metadata changes.
1:      *
0:      * @exception SyncFailedException if a possibly recoverable error occurs.
1:      * @exception IOException If an IO error occurs.
1:      */
0:     public void sync( boolean metaData) throws IOException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.io;
0: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
0: import java.io.FileNotFoundException;
0: import java.io.EOFException;
0: import java.io.IOException;
0: 
0: /**
0:  * This interface abstracts an object that implements reading and writing on a random access
0:  * file. It extends DataInput and DataOutput, so it implicitly contains all the methods of those
0:  * interfaces. Any method in this interface that also appears in the java.io.RandomAccessFile class
0:  * should behave as the java.io.RandomAccessFile method does.
0:  *<p>
0:  * Each StorageRandomAccessFile has an associated file pointer, a byte offset in the file. All reading and writing takes
0:  * place at the file pointer offset and advances it.
0:  *<p>
0:  * An implementation of StorageRandomAccessFile need not be thread safe. The database engine
0:  * single-threads access to each StorageRandomAccessFile instance. Two threads will not access the
0:  * same StorageRandomAccessFile instance at the same time.
0:  *<p>
0:  * @see <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html">java.io.RandomAccessFile</a>
0:  */
0: public interface StorageRandomAccessFile extends DataInput, DataOutput
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     /**
0:      * Closes this file.
0:      *
0:      * @exception IOException - if an I/O error occurs.
0:      */
0:     public void close() throws IOException;
0: 
0:     /**
0:      * Get the current offset in this file.
0:      *
0:      * @return the current file pointer. 
0:      *
0:      * @exception IOException - if an I/O error occurs.
0:      */
0:     public long getFilePointer() throws IOException;
0: 
0:     /**
0:      * Gets the length of this file.
0:      *
0:      * @return the number of bytes this file. 
0:      *
0:      * @exception IOException - if an I/O error occurs.
0:      */
0:     public long length() throws IOException;
0: 
0:     /**
0:      * Set the file pointer. It may be moved beyond the end of the file, but this does not change
0:      * the length of the file. The length of the file is not changed until data is actually written..
0:      *
0:      * @param newFilePointer the new file pointer, measured in bytes from the beginning of the file.
0:      *
0:      * @exception IOException - if newFilePointer is less than 0 or an I/O error occurs.
0:      */
0:     public void seek(long newFilePointer) throws IOException;
0: 
0:     /**
0:      * Sets the length of this file, either extending or truncating it.
0:      *<p>
0:      * If the file is extended then the contents of the extension are not defined.
0:      *<p>
0:      * If the file is truncated and the file pointer is greater than the new length then the file pointer
0:      * is set to the new length.
0:      *
0:      * @param newLength The new file length.
0:      *
0:      * @exception IOException If an I/O error occurs.
0:      */
0:     public void setLength(long newLength) throws IOException;
0:     
0:     /**
0:      * Force any changes out to the persistent store. If the database is to be transient, that is, if the database
0:      * does not survive a restart, then the sync method implementation need not do anything.
0:      *
0:      * @param metaData If true then this method must force both changes to the file's
0:      *          contents and metadata to be written to storage; if false, it need only force file content changes
0:      *          to be written. The implementation is allowed to ignore this parameter and always force out
0:      *          metadata changes.
0:      *
0:      * @exception SyncFailedException if a possibly recoverable error occurs.
0:      * @exception IOException If an IO error occurs.
0:      */
0:     public void sync( boolean metaData) throws IOException;
0: }
============================================================================