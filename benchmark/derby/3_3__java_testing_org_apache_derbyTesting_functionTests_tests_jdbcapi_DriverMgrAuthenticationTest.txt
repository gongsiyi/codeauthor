1:c774a1c: /*
6:c774a1c: 
1:c774a1c:    Derby - Class 
1:c774a1c:        org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest
1:c774a1c: 
1:c774a1c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c774a1c:    contributor license agreements.  See the NOTICE file distributed with
1:c774a1c:    this work for additional information regarding copyright ownership.
1:c774a1c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c774a1c:    (the "License"); you may not use this file except in compliance with
1:c774a1c:    the License.  You may obtain a copy of the License at
1:c774a1c: 
1:c774a1c:       http://www.apache.org/licenses/LICENSE-2.0
1:c774a1c: 
1:c774a1c:    Unless required by applicable law or agreed to in writing, software
1:c774a1c:    distributed under the License is distributed on an "AS IS" BASIS,
1:c774a1c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c774a1c:    See the License for the specific language governing permissions and
1:c774a1c:    limitations under the License.
1:c774a1c: 
1:c774a1c:  */
1:c774a1c: 
1:c774a1c: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:c774a1c: 
1:c774a1c: import java.sql.DriverManager;
1:c774a1c: import java.sql.SQLException;
1:c774a1c: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c774a1c: import org.apache.derbyTesting.junit.JDBC;
1:c774a1c: import org.apache.derbyTesting.junit.TestConfiguration;
1:c774a1c: 
1:c774a1c: 
1:c774a1c: // Extends AuthenticationTest.java which only holds DataSource calls
1:c774a1c: // this class uses some of the same methods but uses DriverManager to
1:c774a1c: // obtain connections
1:c774a1c: public class DriverMgrAuthenticationTest extends AuthenticationTest {
1:c774a1c: 
1:c774a1c:     /** Creates a new instance of the Test */
1:c774a1c:     public DriverMgrAuthenticationTest(String name) {
1:c774a1c:         super(name);
5:c774a1c:     }
1:c774a1c: 
1:c774a1c:     public static Test suite() {
1:c774a1c:         // This test uses driverManager and so is not suitable for JSR169
1:c774a1c:         if (JDBC.vmSupportsJSR169())
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "DriverManager not available with JSR169;" +
1:c774a1c:                 "empty DriverMgrAuthenticationTest");
1:c774a1c:         else {
1:1ae02c9:             BaseTestSuite suite =
1:1ae02c9:                 new BaseTestSuite("DriverMgrAuthenticationTest");
1:c774a1c:             suite.addTest(
1:c774a1c:                 baseSuite("DriverMgrAuthenticationTest:embedded"));
1:c774a1c:             suite.addTest(TestConfiguration.clientServerDecorator(
1:c774a1c:                 baseSuite("DriverMgrAuthenticationTest:client")));
1:c774a1c:             return suite;
1:c774a1c:         }
1:c774a1c:     }
1:1b46090: 
1:1b46090:     // baseSuite takes advantage of setting system properties as defined
1:1b46090:     // in AuthenticationTest
1:c774a1c:     public static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("DriverMgrAuthenticationTest");
1:c774a1c:         
1:c774a1c:         Test test = new DriverMgrAuthenticationTest(
1:c774a1c:             "testConnectShutdownAuthentication");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c:         
1:c774a1c:         test = new DriverMgrAuthenticationTest("testUserFunctions");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c: 
1:c774a1c:         test = new DriverMgrAuthenticationTest("testNotFullAccessUsers");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c:         
1:c774a1c:         test = new DriverMgrAuthenticationTest(
1:c774a1c:             "testChangePasswordAndDatabasePropertiesOnly");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c: 
1:c774a1c:         // only part of this fixture runs with network server / client
1:c774a1c:         test = new DriverMgrAuthenticationTest("testGreekCharacters");
1:1b46090:         setBaseProps(suite, test);
1:1b46090: 
1:1b46090:         test = new DriverMgrAuthenticationTest("testSystemShutdown");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c:         
1:c774a1c:         // The test needs to run in a new single use database as we're
1:c774a1c:         // setting a number of properties
1:c774a1c:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:c774a1c:     }
1:c774a1c:     
1:c774a1c:     protected void assertConnectionOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:f178a86:         DriverManager.getConnection(url, user, password).close();
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     // getConnection(), using url connection attributes
1:c774a1c:     protected void assertConnectionWOUPOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         String url2 = url + ";user=" + user + ";password=" + password;
1:f178a86:         DriverManager.getConnection(url2).close();
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertConnectionFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:1b46090:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
3:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url, user, password);
1:c774a1c:             fail("Connection should've been refused/failed");
1:c774a1c:         }
3:c774a1c:         catch (SQLException e) {
1:c774a1c:                 assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c: 
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertConnectionWOUPFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         String url2 = url + ";user=" + user + ";password=" + password;
1:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url2);
1:c774a1c:             fail("Connection should've been refused/failed");
1:c774a1c:         }
1:c774a1c:         catch (SQLException e) {
1:c774a1c:                 assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:c774a1c:     protected void assertShutdownOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException {
1:c774a1c: 
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName) +
1:c774a1c:         ";shutdown=true";
1:c774a1c:     try {
1:c774a1c:         DriverManager.getConnection(url, user, password);
1:c774a1c:             fail ("expected a failed shutdown connection");
1:c774a1c:         } catch (SQLException e) {
1:c774a1c:             // expect 08006 on successful shutdown
1:c774a1c:             assertSQLState("08006", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     // differs from assertShutdownOK by using getConnection(url)
1:c774a1c:     protected void assertShutdownWOUPOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException {
1:c774a1c: 
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         url = url + ";shutdown=true;user=" + user + ";password=" + password;
1:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url, null);
1:c774a1c:             fail ("expected a error after shutdown connection");
1:c774a1c:         } catch (SQLException e) {
1:c774a1c:             // expect 08006 on successful shutdown
1:c774a1c:             assertSQLState("08006", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:c774a1c:     protected void assertShutdownFail(
1:c774a1c:             String expectedSqlState, String dbName, String user, String password) 
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName) +
1:c774a1c:             ";shutdown=true";      
1:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url, user, password);
1:c774a1c:             fail("expected failed shutdown");
1:c774a1c:         } catch (SQLException e) {
1:c774a1c:             assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     // differs from assertShutdownFail in using getConnection(url)
1:c774a1c:     protected void assertShutdownWOUPFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password) 
1:c774a1c:     throws SQLException 
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         String url2 = 
1:c774a1c:             url + ";user=" + user + ";password=" + password + ";shutdown=true";
1:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url2);
1:c774a1c:             fail("expected failed shutdown");
1:c774a1c:         } catch (SQLException e) {
1:c774a1c:             assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertSystemShutdownOK(
1:c774a1c:         String dbName, String user, String password) 
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         if (usingDerbyNetClient() && dbName=="")
1:1b46090:             // The junit test harness that kicked off the test will hang when 
1:c774a1c:             // we attempt to shutdown the system - most likely because we're
1:c774a1c:             // shutting down the system while the network server thread is
1:c774a1c:             // still alive, so it gets confused...
1:c774a1c:             return;
1:c774a1c:         String url2 = 
1:c774a1c:             url + ";user=" + user + ";password=" + password + ";shutdown=true";
1:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url2);
1:c774a1c:             fail("expected successful shutdown");
1:c774a1c:         } catch (SQLException e) {
1:c774a1c:             assertSQLState("XJ015", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:c774a1c:     protected void assertSystemShutdownFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password) 
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         if (usingDerbyNetClient() && dbName=="")
1:1b46090:             // The junit test harness that kicked off the test will hang when 
1:c774a1c:             // we attempt to shutdown the system - most likely because we're
1:c774a1c:             // shutting down the system while the network server thread is
1:c774a1c:             // still alive, so it gets confused...
1:c774a1c:             return;
1:c774a1c:         String url2 = 
1:c774a1c:             url + ";user=" + user + ";password=" + password + ";shutdown=true";
1:c774a1c:         try {
1:1b46090:             //DriverManager.getConnection(url2, user, password);
1:1b46090:             DriverManager.getConnection(url2);
1:c774a1c:             fail("expected failed shutdown");
1:c774a1c:         } catch (SQLException e) {
1:c774a1c:             assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     public void assertConnectionFail(String dbName) throws SQLException {
1:c774a1c:         // this method needs to not use default user/pwd (APP, APP).
1:c774a1c:         
1:c774a1c:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c774a1c:         try {
1:c774a1c:             DriverManager.getConnection(url);
1:c774a1c:             fail("expected connection to fail");
1:c774a1c:         }
1:c774a1c:         catch (SQLException e) {
1:c774a1c:             assertSQLState("08004", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
1:                 "DriverManager not available with JSR169;" +
1:             BaseTestSuite suite =
1:                 new BaseTestSuite("DriverMgrAuthenticationTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("DriverMgrAuthenticationTest");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f178a86
/////////////////////////////////////////////////////////////////////////
1:         DriverManager.getConnection(url, user, password).close();
/////////////////////////////////////////////////////////////////////////
1:         DriverManager.getConnection(url2).close();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:1b46090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     // baseSuite takes advantage of setting system properties as defined
1:     // in AuthenticationTest
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1: 
1:         test = new DriverMgrAuthenticationTest("testSystemShutdown");
1:         setBaseProps(suite, test);
/////////////////////////////////////////////////////////////////////////
1:             // The junit test harness that kicked off the test will hang when 
/////////////////////////////////////////////////////////////////////////
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:             // The junit test harness that kicked off the test will hang when 
/////////////////////////////////////////////////////////////////////////
1:             //DriverManager.getConnection(url2, user, password);
1:             DriverManager.getConnection(url2);
commit:c774a1c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class 
1:        org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
0: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: // Extends AuthenticationTest.java which only holds DataSource calls
1: // this class uses some of the same methods but uses DriverManager to
1: // obtain connections
1: public class DriverMgrAuthenticationTest extends AuthenticationTest {
1: 
1:     /** Creates a new instance of the Test */
1:     public DriverMgrAuthenticationTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // This test uses driverManager and so is not suitable for JSR169
1:         if (JDBC.vmSupportsJSR169())
0:             return new TestSuite("DriverManager not available with JSR169;" +
1:                 "empty DriverMgrAuthenticationTest");
1:         else {
0:             TestSuite suite = new TestSuite("DriverMgrAuthenticationTest");
1:             suite.addTest(
1:                 baseSuite("DriverMgrAuthenticationTest:embedded"));
1:             suite.addTest(TestConfiguration.clientServerDecorator(
1:                 baseSuite("DriverMgrAuthenticationTest:client")));
1:             return suite;
1:         }
1:     }
1:     
1:     public static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite("DriverMgrAuthenticationTest");
1: 
0:         // set a user at system level
0:         java.lang.System.setProperty("derby.user.system", "admin");
0:         java.lang.System.setProperty("derby.user.mickey", "mouse");
1:         
0:         // Use DatabasePropertyTestSetup decorator to set the user properties
0:         // required by this test (and shutdown the database for the
0:         // property to take effect).
0:         Properties props = new Properties();
0:         props.setProperty("derby.infolog.append", "true");
0:         props.setProperty("derby.debug.true", "AuthenticationTrace");
1: 
1:         Test test = new DriverMgrAuthenticationTest(
1:             "testConnectShutdownAuthentication");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:         
0:         // DatabasePropertyTestSsetup uses SYSCS_SET_DATABASE_PROPERTY
0:         // so that is database level setting.
1:         test = new DriverMgrAuthenticationTest("testUserFunctions");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1: 
1:         test = new DriverMgrAuthenticationTest("testNotFullAccessUsers");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:         
1:         test = new DriverMgrAuthenticationTest(
1:             "testChangePasswordAndDatabasePropertiesOnly");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1: 
1:         // only part of this fixture runs with network server / client
1:         test = new DriverMgrAuthenticationTest("testGreekCharacters");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:         
1:         // The test needs to run in a new single use database as we're
1:         // setting a number of properties
1:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:     }
1:     
1:     protected void assertConnectionOK(
1:         String dbName, String user, String password)
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         try {
0:             assertNotNull(DriverManager.getConnection(url, user, password));
1:         }
1:         catch (SQLException e) {
0:                 throw e;
1:         }
1:     }
1: 
1:     // getConnection(), using url connection attributes
1:     protected void assertConnectionWOUPOK(
1:         String dbName, String user, String password)
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         String url2 = url + ";user=" + user + ";password=" + password;
1:         try {
0:             assertNotNull(DriverManager.getConnection(url2));
1:         }
1:         catch (SQLException e) {
0:                 throw e;
1:         }
1:     }
1: 
1:     protected void assertConnectionFail(
1:         String expectedSqlState, String dbName, String user, String password)
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         try {
1:             DriverManager.getConnection(url, user, password);
1:             fail("Connection should've been refused/failed");
1:         }
1:         catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:         }
1: 
1:     }
1: 
1:     protected void assertConnectionWOUPFail(
1:         String expectedSqlState, String dbName, String user, String password)
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         String url2 = url + ";user=" + user + ";password=" + password;
1:         try {
1:             DriverManager.getConnection(url2);
1:             fail("Connection should've been refused/failed");
1:         }
1:         catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:         }
1:     }
1:     
1:     protected void assertShutdownOK(
1:         String dbName, String user, String password)
1:     throws SQLException {
1: 
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName) +
1:         ";shutdown=true";
1:     try {
1:         DriverManager.getConnection(url, user, password);
1:             fail ("expected a failed shutdown connection");
1:         } catch (SQLException e) {
1:             // expect 08006 on successful shutdown
1:             assertSQLState("08006", e);
1:         }
1:     }
1: 
1:     // differs from assertShutdownOK by using getConnection(url)
1:     protected void assertShutdownWOUPOK(
1:         String dbName, String user, String password)
1:     throws SQLException {
1: 
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         url = url + ";shutdown=true;user=" + user + ";password=" + password;
1:         try {
1:             DriverManager.getConnection(url, null);
1:             fail ("expected a error after shutdown connection");
1:         } catch (SQLException e) {
1:             // expect 08006 on successful shutdown
1:             assertSQLState("08006", e);
1:         }
1:     }
1:     
1:     protected void assertShutdownFail(
1:             String expectedSqlState, String dbName, String user, String password) 
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName) +
1:             ";shutdown=true";      
1:         try {
1:             DriverManager.getConnection(url, user, password);
1:             fail("expected failed shutdown");
1:         } catch (SQLException e) {
1:             assertSQLState(expectedSqlState, e);
1:         }
1:     }
1: 
1:     // differs from assertShutdownFail in using getConnection(url)
1:     protected void assertShutdownWOUPFail(
1:         String expectedSqlState, String dbName, String user, String password) 
1:     throws SQLException 
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         String url2 = 
1:             url + ";user=" + user + ";password=" + password + ";shutdown=true";
1:         try {
1:             DriverManager.getConnection(url2);
1:             fail("expected failed shutdown");
1:         } catch (SQLException e) {
1:             assertSQLState(expectedSqlState, e);
1:         }
1:     }
1: 
1:     protected void assertSystemShutdownOK(
1:         String dbName, String user, String password) 
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         if (usingDerbyNetClient() && dbName=="")
0:             // The junit test harness has kicked off the test will hang when 
1:             // we attempt to shutdown the system - most likely because we're
1:             // shutting down the system while the network server thread is
1:             // still alive, so it gets confused...
1:             return;
1:         String url2 = 
1:             url + ";user=" + user + ";password=" + password + ";shutdown=true";
1:         try {
1:             DriverManager.getConnection(url2);
1:             fail("expected successful shutdown");
1:         } catch (SQLException e) {
1:             assertSQLState("XJ015", e);
1:         }
1:     }
1:     
1:     protected void assertSystemShutdownFail(
1:         String expectedSqlState, String dbName, String user, String password) 
1:     throws SQLException
1:     {
0:         String url = TestConfiguration.getCurrent().getJDBCUrl();
1:         if (usingDerbyNetClient() && dbName=="")
0:             // The junit test harness has kicked off the test will hang when 
1:             // we attempt to shutdown the system - most likely because we're
1:             // shutting down the system while the network server thread is
1:             // still alive, so it gets confused...
1:             return;
1:         String url2 = 
1:             url + ";user=" + user + ";password=" + password + ";shutdown=true";
1:         try {
0:             DriverManager.getConnection(url2, user, password);
1:             fail("expected failed shutdown");
1:         } catch (SQLException e) {
1:             assertSQLState(expectedSqlState, e);
1:         }
1:     }
1: 
1:     public void assertConnectionFail(String dbName) throws SQLException {
1:         // this method needs to not use default user/pwd (APP, APP).
1:         
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         try {
1:             DriverManager.getConnection(url);
1:             fail("expected connection to fail");
1:         }
1:         catch (SQLException e) {
1:             assertSQLState("08004", e);
1:         }
1:     }
1: }
============================================================================