1:a0e4e78: /*
1:a0e4e78: 
1:a0e4e78:    Derby - Class org.apache.derby.impl.sql.execute.VarPAggregator
1:a0e4e78: 
1:a0e4e78:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a0e4e78:    contributor license agreements.  See the NOTICE file distributed with
1:a0e4e78:    this work for additional information regarding copyright ownership.
1:a0e4e78:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a0e4e78:    (the "License"); you may not use this file except in compliance with
1:a0e4e78:    the License.  You may obtain a copy of the License at
1:a0e4e78: 
1:a0e4e78:       http://www.apache.org/licenses/LICENSE-2.0
1:a0e4e78: 
1:a0e4e78:    Unless required by applicable law or agreed to in writing, software
1:a0e4e78:    distributed under the License is distributed on an "AS IS" BASIS,
1:a0e4e78:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0e4e78:    See the License for the specific language governing permissions and
1:a0e4e78:    limitations under the License.
1:a0e4e78: 
1:a0e4e78:  */
1:a0e4e78: 
1:a0e4e78: package org.apache.derby.impl.sql.execute;
1:a0e4e78: 
1:a0e4e78: import java.io.Externalizable;
1:a0e4e78: import java.io.IOException;
1:a0e4e78: import java.io.ObjectInput;
1:a0e4e78: import java.io.ObjectOutput;
1:a0e4e78: 
1:a0e4e78: import org.apache.derby.agg.Aggregator;
1:a0e4e78: 
1:a0e4e78: /**
1:a0e4e78:  * <p>
1:a0e4e78:  * This class implements the SQL Standard VAR_POP() aggregator,
1:a0e4e78:  * computing a population's variance.  It uses the IBM formula described
1:a0e4e78:  * <a href="http://www-01.ibm.com/support/knowledgecenter/ssw_ibm_i_71/db2/rbafzcolvar.htm">here</a>:
1:a0e4e78:  * </p>
1:a0e4e78:  *
1:a0e4e78:  * <blockquote><pre><b>
1:a0e4e78:  * sum(x<sub>i</sub><sup>2</sup>)/n - m<sup>2</sup>
1:a0e4e78:  * 
1:a0e4e78:  * where
1:a0e4e78:  * 
1:a0e4e78:  * n is the number of items in the population
1:a0e4e78:  * m is the population average
1:a0e4e78:  * x<sub>1</sub> ... x<sub>n</sub> are the items in the population
1:a0e4e78:  * </b></pre></blockquote>
1:a0e4e78:  *
1:a0e4e78:  * <p>
1:a0e4e78:  * The IBM formula can be computed without buffering up an arbitrarily
1:a0e4e78:  * long list of items. The IBM formula is algebraically equivalent
1:a0e4e78:  * to the textbook formula for population variance:
1:a0e4e78:  * </p>
1:a0e4e78:  *
1:a0e4e78:  * <blockquote><pre><b>
1:a0e4e78:  * sum( (x<sub>i</sub> - m)<sup>2</sup> )/n
1:a0e4e78:  * </b></pre></blockquote>
1:a0e4e78:  */
1:a0e4e78: public class VarPAggregator<V extends Number> implements Aggregator<V, Double, VarPAggregator<V>>, Externalizable {
1:a0e4e78: 
1:a0e4e78: 	private static final long serialVersionUID = 239794626052067761L;
1:a0e4e78: 
1:a0e4e78: 	public static class Sums {
1:a0e4e78: 		double x = 0;
1:a0e4e78: 		double x2 = 0;		
1:a0e4e78: 	}
1:a0e4e78: 	
1:a0e4e78: 	protected Sums sums;
1:a0e4e78: 	protected int count;
1:a0e4e78: 	
1:a0e4e78: 	@Override
1:a0e4e78: 	public void init() {
1:a0e4e78: 		this.sums = new Sums();
1:a0e4e78: 		this.count = 0;
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: 	@Override
1:a0e4e78: 	public void accumulate(V value) {
1:a0e4e78: 		double itemd = value.doubleValue();
1:a0e4e78: 		sums.x += itemd;
1:a0e4e78: 		sums.x2 += Math.pow(itemd,2);
1:a0e4e78:         count++;
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: 	@Override
1:a0e4e78: 	public void merge(VarPAggregator<V> otherAggregator) {
1:a0e4e78: 		this.sums.x += otherAggregator.sums.x;
1:a0e4e78: 		this.sums.x2 += otherAggregator.sums.x2;
1:a0e4e78: 		this.count += otherAggregator.count;
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: 	protected Double computeVar() {
1:a0e4e78: 		if (count == 0) return null;
1:a0e4e78: 		// See IBM formula: http://www-01.ibm.com/support/knowledgecenter/ssw_ibm_i_71/db2/rbafzcolvar.htm
1:a0e4e78: 		return (sums.x2 / count) - Math.pow(sums.x / count, 2.0); 
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: 	@Override
1:a0e4e78: 	public Double terminate() {
1:a0e4e78: 		return computeVar();
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: 	@Override
1:a0e4e78: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
1:a0e4e78: 		this.count = in.readInt();
1:a0e4e78: 		this.sums = (Sums) in.readObject();
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: 	@Override
1:a0e4e78: 	public void writeExternal(ObjectOutput out) throws IOException {
1:a0e4e78: 		out.writeInt(this.count);
1:a0e4e78: 		out.writeObject(this.sums);
1:a0e4e78: 	}
1:a0e4e78: 
1:a0e4e78: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0e4e78
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.VarPAggregator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: import org.apache.derby.agg.Aggregator;
1: 
1: /**
1:  * <p>
1:  * This class implements the SQL Standard VAR_POP() aggregator,
1:  * computing a population's variance.  It uses the IBM formula described
1:  * <a href="http://www-01.ibm.com/support/knowledgecenter/ssw_ibm_i_71/db2/rbafzcolvar.htm">here</a>:
1:  * </p>
1:  *
1:  * <blockquote><pre><b>
1:  * sum(x<sub>i</sub><sup>2</sup>)/n - m<sup>2</sup>
1:  * 
1:  * where
1:  * 
1:  * n is the number of items in the population
1:  * m is the population average
1:  * x<sub>1</sub> ... x<sub>n</sub> are the items in the population
1:  * </b></pre></blockquote>
1:  *
1:  * <p>
1:  * The IBM formula can be computed without buffering up an arbitrarily
1:  * long list of items. The IBM formula is algebraically equivalent
1:  * to the textbook formula for population variance:
1:  * </p>
1:  *
1:  * <blockquote><pre><b>
1:  * sum( (x<sub>i</sub> - m)<sup>2</sup> )/n
1:  * </b></pre></blockquote>
1:  */
1: public class VarPAggregator<V extends Number> implements Aggregator<V, Double, VarPAggregator<V>>, Externalizable {
1: 
1: 	private static final long serialVersionUID = 239794626052067761L;
1: 
1: 	public static class Sums {
1: 		double x = 0;
1: 		double x2 = 0;		
1: 	}
1: 	
1: 	protected Sums sums;
1: 	protected int count;
1: 	
1: 	@Override
1: 	public void init() {
1: 		this.sums = new Sums();
1: 		this.count = 0;
1: 	}
1: 
1: 	@Override
1: 	public void accumulate(V value) {
1: 		double itemd = value.doubleValue();
1: 		sums.x += itemd;
1: 		sums.x2 += Math.pow(itemd,2);
1:         count++;
1: 	}
1: 
1: 	@Override
1: 	public void merge(VarPAggregator<V> otherAggregator) {
1: 		this.sums.x += otherAggregator.sums.x;
1: 		this.sums.x2 += otherAggregator.sums.x2;
1: 		this.count += otherAggregator.count;
1: 	}
1: 
1: 	protected Double computeVar() {
1: 		if (count == 0) return null;
1: 		// See IBM formula: http://www-01.ibm.com/support/knowledgecenter/ssw_ibm_i_71/db2/rbafzcolvar.htm
1: 		return (sums.x2 / count) - Math.pow(sums.x / count, 2.0); 
1: 	}
1: 
1: 	@Override
1: 	public Double terminate() {
1: 		return computeVar();
1: 	}
1: 
1: 	@Override
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
1: 		this.count = in.readInt();
1: 		this.sums = (Sums) in.readObject();
1: 	}
1: 
1: 	@Override
1: 	public void writeExternal(ObjectOutput out) throws IOException {
1: 		out.writeInt(this.count);
1: 		out.writeObject(this.sums);
1: 	}
1: 
1: }
============================================================================