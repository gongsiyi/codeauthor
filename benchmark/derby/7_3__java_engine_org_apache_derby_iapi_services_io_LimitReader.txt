1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.LimitReader
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.Reader;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: /**
1:eac0369: 	A  Reader that provides methods to limit the range that
1:eac0369: 	can be read from the reader.
1:eac0369: */
1:4dbb0ff: public final class LimitReader extends Reader implements Limit 
1:eac0369: {
1:4dbb0ff: 	private int remainingCharacters;
1:4dbb0ff: 	private boolean limitInPlace;
1:eac0369: 	private	Reader	reader;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Construct a LimitReader and call the clearLimit() method.
1:eac0369: 	*/
1:eac0369: 	public LimitReader(Reader reader) 
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 		this.reader = reader;
1:eac0369: 		clearLimit();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int read() throws IOException 
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (!limitInPlace)
1:eac0369: 			return reader.read();
1:eac0369: 		
1:4dbb0ff: 		if (remainingCharacters == 0)
1:eac0369: 			return -1; // end of file
1:eac0369: 
1:eac0369: 		
1:eac0369: 		int value = reader.read();
1:eac0369: 		if (value >= 0)
1:4dbb0ff: 			remainingCharacters--;
1:eac0369: 		return value;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int read(char c[], int off, int len) throws IOException 
1:eac0369: 	{
1:eac0369: 		if (!limitInPlace)
1:eac0369: 			return reader.read(c, off, len);
1:eac0369: 
1:4dbb0ff: 		if (remainingCharacters == 0)
1:eac0369: 			return -1;
1:eac0369: 
1:4dbb0ff: 		if (remainingCharacters < len) 
1:eac0369: 		{
1:4dbb0ff: 			len = remainingCharacters; // end of file
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		len = reader.read(c, off, len);
1:eac0369: 		if (len >= 0)
1:4dbb0ff: 			remainingCharacters -= len;
1:eac0369: 		return len;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long skip(long count)
1:eac0369: 		throws IOException 
1:eac0369: 	{
1:eac0369: 		if (!limitInPlace)
1:eac0369: 			return reader.skip(count);
1:eac0369: 
1:4dbb0ff: 		if (remainingCharacters == 0)
1:eac0369: 			return 0; // end of file
1:eac0369: 
1:4dbb0ff: 		if (remainingCharacters < count)
1:4dbb0ff: 			count = remainingCharacters;
1:eac0369: 
1:eac0369: 		count = reader.skip(count);
1:4dbb0ff: 		remainingCharacters -= count;
1:eac0369: 		return count;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void close()
1:eac0369: 		throws IOException 
1:eac0369: 	{
1:eac0369: 		reader.close();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the limit of the stream that can be read. After this
1:4dbb0ff: 		call up to and including length characters can be read from
1:4dbb0ff:         or skipped in the stream.
1:4dbb0ff:         Any attempt to read more than length characters will
1:eac0369: 		result in an EOFException
1:eac0369: 	*/
1:eac0369: 	public void setLimit(int length) 
1:eac0369: 	{
1:4dbb0ff: 		remainingCharacters = length;
1:eac0369: 		limitInPlace = true;
1:eac0369: 	}
1:eac0369:     
1:eac0369:     /**
1:a4e8535:      * return limit of the stream that can be read without throwing
1:a4e8535:      * EOFException
1:4dbb0ff:      * @return the remaining characters left to be read from the stream
1:eac0369:      */
1:a4e8535:     public final int getLimit()
1:a4e8535:     {
1:4dbb0ff:         return remainingCharacters;
1:a4e8535:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clear any limit set by setLimit. After this call no limit checking
1:eac0369: 		will be made on any read until a setLimit()) call is made.
1:eac0369: 
1:eac0369: 		@return the number of bytes within the limit that have not been read.
1:eac0369: 		-1 if not limit was set.
1:eac0369: 	*/
1:eac0369: 	public int clearLimit() 
1:eac0369: 	{
1:4dbb0ff: 		int leftOver = remainingCharacters;
1:eac0369: 		limitInPlace = false;
1:4dbb0ff: 		remainingCharacters = -1;
1:eac0369: 		return leftOver;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4dbb0ff
/////////////////////////////////////////////////////////////////////////
1: public final class LimitReader extends Reader implements Limit 
1: 	private int remainingCharacters;
1: 	private boolean limitInPlace;
/////////////////////////////////////////////////////////////////////////
1: 		if (remainingCharacters == 0)
1: 			remainingCharacters--;
/////////////////////////////////////////////////////////////////////////
1: 		if (remainingCharacters == 0)
1: 		if (remainingCharacters < len) 
1: 			len = remainingCharacters; // end of file
1: 			remainingCharacters -= len;
/////////////////////////////////////////////////////////////////////////
1: 		if (remainingCharacters == 0)
1: 		if (remainingCharacters < count)
1: 			count = remainingCharacters;
1: 		remainingCharacters -= count;
/////////////////////////////////////////////////////////////////////////
1: 		call up to and including length characters can be read from
1:         or skipped in the stream.
1:         Any attempt to read more than length characters will
/////////////////////////////////////////////////////////////////////////
1: 		remainingCharacters = length;
/////////////////////////////////////////////////////////////////////////
1:      * @return the remaining characters left to be read from the stream
1:         return remainingCharacters;
/////////////////////////////////////////////////////////////////////////
1: 		int leftOver = remainingCharacters;
1: 		remainingCharacters = -1;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.LimitReader
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.Reader;
1: import java.io.IOException;
1: 
1: /**
1: 	A  Reader that provides methods to limit the range that
1: 	can be read from the reader.
1: */
0: public class LimitReader extends Reader implements Limit 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected int remainingBytes;
0: 	protected boolean limitInPlace;
1: 	private	Reader	reader;
1: 
1: 	/**
1: 		Construct a LimitReader and call the clearLimit() method.
1: 	*/
1: 	public LimitReader(Reader reader) 
1: 	{
1: 		super();
1: 		this.reader = reader;
1: 		clearLimit();
1: 	}
1: 
1: 	public int read() throws IOException 
1: 	{
1: 
1: 		if (!limitInPlace)
1: 			return reader.read();
1: 		
0: 		if (remainingBytes == 0)
1: 			return -1; // end of file
1: 
1: 		
1: 		int value = reader.read();
1: 		if (value >= 0)
0: 			remainingBytes--;
1: 		return value;
1: 
1: 	}
1: 
1: 	public int read(char c[], int off, int len) throws IOException 
1: 	{
1: 		if (!limitInPlace)
1: 			return reader.read(c, off, len);
1: 
0: 		if (remainingBytes == 0)
1: 			return -1;
1: 
0: 		if (remainingBytes < len) 
1: 		{
0: 			len = remainingBytes; // end of file
1: 		}
1: 
1: 		len = reader.read(c, off, len);
1: 		if (len >= 0)
0: 			remainingBytes -= len;
1: 		return len;
1: 	}
1: 
1: 	public long skip(long count)
1: 		throws IOException 
1: 	{
1: 		if (!limitInPlace)
1: 			return reader.skip(count);
1: 
0: 		if (remainingBytes == 0)
1: 			return 0; // end of file
1: 
0: 		if (remainingBytes < count)
0: 			count = remainingBytes;
1: 
1: 		count = reader.skip(count);
0: 		remainingBytes -= count;
1: 		return count;
1: 	}
1: 
1: 	public void close()
1: 		throws IOException 
1: 	{
1: 		reader.close();
1: 	}
1: 
1: 	/**
1: 		Set the limit of the stream that can be read. After this
0: 		call up to and including length bytes can be read from or skipped in
0: 		the stream. Any attempt to read more than length bytes will
1: 		result in an EOFException
1: 
0: 		@return The value of length.
0: 		@exception IOException IOException from some underlying stream
0: 		@exception EOFException The set limit would exceed
0: 		the available data in the stream.
1: 	*/
1: 	public void setLimit(int length) 
1: 	{
0: 		remainingBytes = length;
1: 		limitInPlace = true;
0: 		return;
1: 	}
1: 
1: 	/**
1: 		Clear any limit set by setLimit. After this call no limit checking
1: 		will be made on any read until a setLimit()) call is made.
1: 
1: 		@return the number of bytes within the limit that have not been read.
1: 		-1 if not limit was set.
1: 	*/
1: 	public int clearLimit() 
1: 	{
0: 		int leftOver = remainingBytes;
1: 		limitInPlace = false;
0: 		remainingBytes = -1;
1: 		return leftOver;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:a4e8535
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * return limit of the stream that can be read without throwing
1:      * EOFException
0:      * @return the remaining bytes left to be read from the stream
0:      */
1:     public final int getLimit()
1:     {
0:         return remainingBytes;
1:     }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.Reader;
0: import java.io.IOException;
0: 
0: /**
0: 	A  Reader that provides methods to limit the range that
0: 	can be read from the reader.
0: */
0: public class LimitReader extends Reader implements Limit 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected int remainingBytes;
0: 	protected boolean limitInPlace;
0: 	private	Reader	reader;
0: 
0: 	/**
0: 		Construct a LimitReader and call the clearLimit() method.
0: 	*/
0: 	public LimitReader(Reader reader) 
0: 	{
0: 		super();
0: 		this.reader = reader;
0: 		clearLimit();
0: 	}
0: 
0: 	public int read() throws IOException 
0: 	{
0: 
0: 		if (!limitInPlace)
0: 			return reader.read();
0: 		
0: 		if (remainingBytes == 0)
0: 			return -1; // end of file
0: 
0: 		
0: 		int value = reader.read();
0: 		if (value >= 0)
0: 			remainingBytes--;
0: 		return value;
0: 
0: 	}
0: 
0: 	public int read(char c[], int off, int len) throws IOException 
0: 	{
0: 		if (!limitInPlace)
0: 			return reader.read(c, off, len);
0: 
0: 		if (remainingBytes == 0)
0: 			return -1;
0: 
0: 		if (remainingBytes < len) 
0: 		{
0: 			len = remainingBytes; // end of file
0: 		}
0: 
0: 		len = reader.read(c, off, len);
0: 		if (len >= 0)
0: 			remainingBytes -= len;
0: 		return len;
0: 	}
0: 
0: 	public long skip(long count)
0: 		throws IOException 
0: 	{
0: 		if (!limitInPlace)
0: 			return reader.skip(count);
0: 
0: 		if (remainingBytes == 0)
0: 			return 0; // end of file
0: 
0: 		if (remainingBytes < count)
0: 			count = remainingBytes;
0: 
0: 		count = reader.skip(count);
0: 		remainingBytes -= count;
0: 		return count;
0: 	}
0: 
0: 	public void close()
0: 		throws IOException 
0: 	{
0: 		reader.close();
0: 	}
0: 
0: 	/**
0: 		Set the limit of the stream that can be read. After this
0: 		call up to and including length bytes can be read from or skipped in
0: 		the stream. Any attempt to read more than length bytes will
0: 		result in an EOFException
0: 
0: 		@return The value of length.
0: 		@exception IOException IOException from some underlying stream
0: 		@exception EOFException The set limit would exceed
0: 		the available data in the stream.
0: 	*/
0: 	public void setLimit(int length) 
0: 	{
0: 		remainingBytes = length;
0: 		limitInPlace = true;
0: 		return;
0: 	}
0: 
0: 	/**
0: 		Clear any limit set by setLimit. After this call no limit checking
0: 		will be made on any read until a setLimit()) call is made.
0: 
0: 		@return the number of bytes within the limit that have not been read.
0: 		-1 if not limit was set.
0: 	*/
0: 	public int clearLimit() 
0: 	{
0: 		int leftOver = remainingBytes;
0: 		limitInPlace = false;
0: 		remainingBytes = -1;
0: 		return leftOver;
0: 	}
0: }
============================================================================