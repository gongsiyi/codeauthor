1:33776ff: /*
10:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.CcsidManager
1:ffe112b: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:ffe112b: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:018948a: import java.nio.ByteBuffer;
1:018948a: import java.nio.CharBuffer;
1:018948a: import org.apache.derby.client.am.Agent;
1:018948a: import org.apache.derby.client.am.SqlException;
1:018948a: 
1:33776ff: // Performs character conversions as required to send and receive PROTOCOL control data.
1:33776ff: // User data uses the JVM's built in converters, i18n.jar,
1:33776ff: 
1:0326967: abstract class CcsidManager {
1:0326967:     byte space_; // ' ' character
1:70f7692:     byte dot_;   // '.' character
1:33776ff: 
1:70f7692:     // Byte array used to convert numbers into
1:70f7692:     // bytes containing the character representation "value" for the particular ccsid.
1:70f7692:     byte[] numToCharRepresentation_;
1:33776ff: 
1:70f7692:     // Special byte array to convert first half byte of CRRTKNs TCPIP address and port number
1:70f7692:     // to a character.  This is required for SNA hopping.
1:70f7692:     // This was specifically added to help build the CRRTKNs.
1:70f7692:     byte[] numToSnaRequiredCrrtknChar_;
1:70f7692: 
1:1451af7:     /* DRDA CCSID levels for UTF8 and EBCDIC */
1:0326967:     static final int UTF8_CCSID = 1208;
1:1451af7:     
1:70f7692:     CcsidManager(byte space,
1:70f7692:                  byte dot,
1:70f7692:                  byte[] numToCharRepresentation,
1:70f7692:                  byte[] numToSnaRequiredCrrtknChar) {
1:70f7692:         space_ = space;
1:70f7692:         dot_ = dot;
1:70f7692:         numToCharRepresentation_ = numToCharRepresentation;
1:70f7692:         numToSnaRequiredCrrtknChar_ = numToSnaRequiredCrrtknChar;
1:70f7692:     }
1:33776ff: 
1:33776ff: 
2:70f7692:     // Convert a Java String into bytes for a particular ccsid.
4:70f7692:     //
1:70f7692:     // @param sourceString A Java String to convert.
1:70f7692:     // @return A new byte array representing the String in a particular ccsid.
1:b13b17c:     public abstract byte[] convertFromJavaString(
1:b13b17c:         String sourceString,
1:b13b17c:         Agent agent) throws SqlException;
1:33776ff: 
2:70f7692:     // Convert a byte array representing characters in a particular ccsid into a Java String.
1:70f7692:     //
2:70f7692:     // @param sourceBytes An array of bytes to be converted.
1:70f7692:     // @param offset  An offset indicating first byte to convert.
1:70f7692:     // @param numToConvert The number of bytes to be converted.
1:70f7692:     // @return A new Java String Object created after conversion.
1:b9687fb:     abstract String convertToJavaString(byte[] sourceBytes, int offset, int numToConvert);
1:33776ff: 
1:ffe112b:     /**
1:018948a:      * Initialize this instance for encoding a new string. This method resets
1:018948a:      * any internal state that may be left after earlier calls to
1:26b866a:      * {@link #encode} on this instance. For example, it may reset the
1:018948a:      * internal {@code java.nio.charset.CharsetEncoder}, if the implementation
1:018948a:      * uses one to do the encoding.
1:b9687fb:      */
1:018948a:     public abstract void startEncoding();
1:ffe112b: 
1:b9687fb:     /**
1:018948a:      * Encode the contents of a {@code CharBuffer} into a {@code ByteBuffer}.
1:018948a:      * The method will return {@code true} if all the characters were encoded
1:018948a:      * and copied to the destination. If the receiving byte buffer is too small
1:018948a:      * to hold the entire encoded representation of the character buffer, the
1:018948a:      * method will return {@code false}. The caller should then allocate a
1:018948a:      * larger byte buffer, copy the contents from the old byte buffer to the
1:018948a:      * new one, and then call this method again to get the remaining characters
1:018948a:      * encoded.
1:018948a:      *
1:018948a:      * @param src buffer holding the characters to encode
1:018948a:      * @param dest buffer receiving the encoded bytes
1:018948a:      * @param agent where to report errors
1:018948a:      * @return {@code true} if all characters were encoded, {@code false} if
1:018948a:      * the destination buffer is full and there still are more characters to
1:018948a:      * encode
1:018948a:      * @throws SqlException if the characters cannot be encoded using this
1:018948a:      * CCSID manager's character encoding
1:ffe112b:      */
1:018948a:     public abstract boolean encode(
1:018948a:             CharBuffer src, ByteBuffer dest, Agent agent) throws SqlException;
2:33776ff: }
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: abstract class CcsidManager {
1:     byte space_; // ' ' character
/////////////////////////////////////////////////////////////////////////
1:     static final int UTF8_CCSID = 1208;
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1:     public abstract byte[] convertFromJavaString(
1:         String sourceString,
1:         Agent agent) throws SqlException;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:26b866a
/////////////////////////////////////////////////////////////////////////
1:      * {@link #encode} on this instance. For example, it may reset the
commit:018948a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.nio.CharBuffer;
1: import org.apache.derby.client.am.Agent;
1: import org.apache.derby.client.am.SqlException;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Initialize this instance for encoding a new string. This method resets
1:      * any internal state that may be left after earlier calls to
0:      * {@link #encode()} on this instance. For example, it may reset the
1:      * internal {@code java.nio.charset.CharsetEncoder}, if the implementation
1:      * uses one to do the encoding.
1:     public abstract void startEncoding();
1:      * Encode the contents of a {@code CharBuffer} into a {@code ByteBuffer}.
1:      * The method will return {@code true} if all the characters were encoded
1:      * and copied to the destination. If the receiving byte buffer is too small
1:      * to hold the entire encoded representation of the character buffer, the
1:      * method will return {@code false}. The caller should then allocate a
1:      * larger byte buffer, copy the contents from the old byte buffer to the
1:      * new one, and then call this method again to get the remaining characters
1:      * encoded.
1:      *
1:      * @param src buffer holding the characters to encode
1:      * @param dest buffer receiving the encoded bytes
1:      * @param agent where to report errors
1:      * @return {@code true} if all characters were encoded, {@code false} if
1:      * the destination buffer is full and there still are more characters to
1:      * encode
1:      * @throws SqlException if the characters cannot be encoded using this
1:      * CCSID manager's character encoding
1:     public abstract boolean encode(
1:             CharBuffer src, ByteBuffer dest, Agent agent) throws SqlException;
author:Tiago Aur¨¦lio Rodrigues Espinha
-------------------------------------------------------------------------------
commit:3785c8a
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1451af7
/////////////////////////////////////////////////////////////////////////
1:     /* DRDA CCSID levels for UTF8 and EBCDIC */
0:     public static final int UTF8_CCSID = 1208;
1:     
commit:ffe112b
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     /**
0:      * 
0:      * @return Maximum number of bytes per character
1:      */
0:     abstract int maxBytesPerChar();
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:b9687fb
/////////////////////////////////////////////////////////////////////////
0:     public abstract byte[] convertFromJavaString(String sourceString, org.apache.derby.client.am.Agent agent) throws org.apache.derby.client.am.SqlException;
/////////////////////////////////////////////////////////////////////////
0:     public abstract int convertFromJavaString(String sourceString,
0:                                               byte[] buffer,
0:                                               int offset,
0:                                               org.apache.derby.client.am.Agent agent) throws org.apache.derby.client.am.SqlException;
0:     abstract String convertToJavaString(byte[] sourceBytes);
/////////////////////////////////////////////////////////////////////////
1:     abstract String convertToJavaString(byte[] sourceBytes, int offset, int numToConvert);
0:     abstract char convertToJavaChar(byte sourceByte);
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Get length in bytes for string s
0:      * @param s The string from which to obtain the length
0:      * @return The length of s in bytes
1:      */
0:     abstract int getByteLength(String s);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public abstract class CcsidManager {
0:     public byte space_; // ' ' character
1:     byte dot_;   // '.' character
1:     // Byte array used to convert numbers into
1:     // bytes containing the character representation "value" for the particular ccsid.
1:     byte[] numToCharRepresentation_;
1:     // Special byte array to convert first half byte of CRRTKNs TCPIP address and port number
1:     // to a character.  This is required for SNA hopping.
1:     // This was specifically added to help build the CRRTKNs.
1:     byte[] numToSnaRequiredCrrtknChar_;
1: 
1:     CcsidManager(byte space,
1:                  byte dot,
1:                  byte[] numToCharRepresentation,
1:                  byte[] numToSnaRequiredCrrtknChar) {
1:         space_ = space;
1:         dot_ = dot;
1:         numToCharRepresentation_ = numToCharRepresentation;
1:         numToSnaRequiredCrrtknChar_ = numToSnaRequiredCrrtknChar;
1:     }
1:     // Convert a Java String into bytes for a particular ccsid.
1:     //
1:     // @param sourceString A Java String to convert.
1:     // @return A new byte array representing the String in a particular ccsid.
0:     public abstract byte[] convertFromUCS2(String sourceString, org.apache.derby.client.am.Agent agent) throws org.apache.derby.client.am.SqlException;
1:     // Convert a Java String into bytes for a particular ccsid.
0:     // The String is converted into a buffer provided by the caller.
1:     //
0:     // @param sourceString  A Java String to convert.
0:     // @param buffer        The buffer to convert the String into.
0:     // @param offset        Offset in buffer to start putting output.
0:     // @return An int containing the buffer offset after conversion.
0:     public abstract int convertFromUCS2(String sourceString,
0:                                         byte[] buffer,
0:                                         int offset,
0:                                         org.apache.derby.client.am.Agent agent) throws org.apache.derby.client.am.SqlException;
1:     // Convert a byte array representing characters in a particular ccsid into a Java String.
1:     //
1:     // @param sourceBytes An array of bytes to be converted.
0:     // @return String A new Java String Object created after conversion.
0:     abstract String convertToUCS2(byte[] sourceBytes);
1:     // Convert a byte array representing characters in a particular ccsid into a Java String.
1:     //
1:     // @param sourceBytes An array of bytes to be converted.
1:     // @param offset  An offset indicating first byte to convert.
1:     // @param numToConvert The number of bytes to be converted.
1:     // @return A new Java String Object created after conversion.
0:     abstract String convertToUCS2(byte[] sourceBytes, int offset, int numToConvert);
0:     // Convert a byte representing a char in a particular ccsid into a Java char.
1:     //
0:     // @param sourceByte The byte to be converted
0:     // @return The converted Java char.
0:     abstract char convertToUCS2Char(byte sourceByte);
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.CcsidManager
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
1: // Performs character conversions as required to send and receive PROTOCOL control data.
1: // User data uses the JVM's built in converters, i18n.jar,
0: public abstract class CcsidManager
0: {
0:   public byte space_; // ' ' character
0:   byte dot_;   // '.' character
1: 
0:   // Byte array used to convert numbers into
0:   // bytes containing the character representation "value" for the particular ccsid.
0:   byte[] numToCharRepresentation_;
1: 
0:   // Special byte array to convert first half byte of CRRTKNs TCPIP address and port number
0:   // to a character.  This is required for SNA hopping.
0:   // This was specifically added to help build the CRRTKNs.
0:   byte[] numToSnaRequiredCrrtknChar_;
1: 
0:   CcsidManager (byte space,
0:                 byte dot,
0:                 byte[] numToCharRepresentation,
0:                 byte[] numToSnaRequiredCrrtknChar)
0:   {
0:     space_ = space;
0:     dot_ = dot;
0:     numToCharRepresentation_ = numToCharRepresentation;
0:     numToSnaRequiredCrrtknChar_ = numToSnaRequiredCrrtknChar;
1:   }
1: 
1: 
0:   // Convert a Java String into bytes for a particular ccsid.
0:   //
0:   // @param sourceString A Java String to convert.
0:   // @return A new byte array representing the String in a particular ccsid.
0:   public abstract byte[] convertFromUCS2 (String sourceString, org.apache.derby.client.am.Agent agent) throws org.apache.derby.client.am.SqlException;
1: 
1: 
0:   // Convert a Java String into bytes for a particular ccsid.
0:   // The String is converted into a buffer provided by the caller.
0:   //
0:   // @param sourceString  A Java String to convert.
0:   // @param buffer        The buffer to convert the String into.
0:   // @param offset        Offset in buffer to start putting output.
0:   // @return An int containing the buffer offset after conversion.
0:   public abstract int convertFromUCS2 (String sourceString,
0:                                 byte[] buffer,
0:                                 int offset,
0:                                 org.apache.derby.client.am.Agent agent) throws org.apache.derby.client.am.SqlException;
1: 
0:   // Convert a byte array representing characters in a particular ccsid into a Java String.
0:   //
0:   // @param sourceBytes An array of bytes to be converted.
0:   // @return String A new Java String Object created after conversion.
0:   abstract String convertToUCS2 (byte[] sourceBytes);
1: 
1: 
0:   // Convert a byte array representing characters in a particular ccsid into a Java String.
0:   //
0:   // @param sourceBytes An array of bytes to be converted.
0:   // @param offset  An offset indicating first byte to convert.
0:   // @param numToConvert The number of bytes to be converted.
0:   // @return A new Java String Object created after conversion.
0:   abstract String convertToUCS2 (byte[] sourceBytes, int offset, int numToConvert);
1: 
1: 
0:   // Convert a byte representing a char in a particular ccsid into a Java char.
0:   //
0:   // @param sourceByte The byte to be converted
0:   // @return The converted Java char.
0:   abstract char convertToUCS2Char (byte sourceByte);
1: 
1: }
1: 
============================================================================