1:5a9d596: /*
7:5a9d596: 
1:5a9d596:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest
1:5a9d596: 
1:5a9d596:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5a9d596:    contributor license agreements.  See the NOTICE file distributed with
1:5a9d596:    this work for additional information regarding copyright ownership.
1:5a9d596:    The ASF licenses this file to You under the Apache License, Version 2.0
1:5a9d596:    (the "License"); you may not use this file except in compliance with
1:5a9d596:    the License.  You may obtain a copy of the License at
1:5a9d596: 
1:5a9d596:       http://www.apache.org/licenses/LICENSE-2.0
1:5a9d596: 
1:5a9d596:    Unless required by applicable law or agreed to in writing, software
1:5a9d596:    distributed under the License is distributed on an "AS IS" BASIS,
1:5a9d596:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a9d596:    See the License for the specific language governing permissions and
1:5a9d596:    limitations under the License.
1:5a9d596: 
2:5a9d596:  */
1:5a9d596: 
1:5a9d596: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:5a9d596: 
1:5a9d596: import java.sql.Connection;
1:5a9d596: import java.sql.SQLException;
1:b2efa02: import javax.sql.DataSource;
1:5a9d596: import junit.framework.Test;
1:5a9d596: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:5a9d596: import org.apache.derbyTesting.junit.Derby;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBCDataSource;
1:5a9d596: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:5a9d596: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:5a9d596: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:5a9d596: import org.apache.derbyTesting.junit.TestConfiguration;
1:5a9d596: 
1:5a9d596: 
2:5a9d596: /**
1:5a9d596:  * Tests connects to an SSL server
1:5a9d596:  */
1:5a9d596: 
1:5a9d596: public class SSLTest extends BaseJDBCTestCase
2:5a9d596: {
1:5a9d596:     // Constructors
1:5a9d596: 
1:5a9d596:     public SSLTest(String testName)
1:5a9d596:     {
1:5a9d596:         super(testName);
3:5a9d596:     }
1:5a9d596:     
1:5a9d596:     // JUnit machinery
1:5a9d596:     
1:5a9d596:     /**
1:5a9d596:      * Tests to run.
1:5a9d596:      */
1:5a9d596:     public static Test suite()
1:5a9d596:     {
1:5a9d596:         //NetworkServerTestSetup.setWaitTime(10000L);
1:5a9d596:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SSLTest");
1:5a9d596:         
1:5a9d596:         // Server booting requires that we run from the jar files
1:5a9d596:         if (!TestConfiguration.loadingFromJars()) { return suite; }
1:5a9d596:         
1:5a9d596:         // Need derbynet.jar in the classpath!
1:5a9d596:         if (!Derby.hasServer())
1:5a9d596:             return suite;
1:5a9d596:         
1:5a9d596:         suite.addTest(decorateTest("testSSLBasicDSConnect"));
1:5a9d596:         suite.addTest(decorateTest("testSSLBasicDSPlainConnect"));
1:5a9d596:         return suite;
1:a63ab5e:     }   
1:5a9d596: 
1:5a9d596:     // Test decoration
1:5a9d596:     
1:5a9d596:     /**
1:5a9d596:      * <p>
1:5a9d596:      * Compose the required decorators to bring up the server in the correct
1:5a9d596:      * configuration.
1:5a9d596:      * </p>
1:5a9d596:      */
1:5a9d596:     private static Test decorateTest(String testName)
1:5a9d596:     {
1:5a9d596:         SSLTest sslTest = 
1:5a9d596:             new SSLTest(testName);
1:5a9d596:         
1:5a9d596:         String[] startupProperties = 
1:5a9d596:             getStartupProperties();
1:5a9d596: 
1:5a9d596:         String[] startupArgs = new String[]{};
1:5a9d596:         
1:5a9d596:         NetworkServerTestSetup networkServerTestSetup =
1:5a9d596:             new NetworkServerTestSetup(sslTest,
1:5a9d596:                                        startupProperties,
1:5a9d596:                                        startupArgs,
1:a63ab5e:                                        true);
1:5a9d596:         
1:5a9d596:         Test testSetup =
1:5a9d596:             SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
1:5a9d596:         
1:5a9d596:         testSetup = 
1:5a9d596:             new SupportFilesSetup(testSetup,
1:5a9d596:                                   null,
1:5a9d596:                                   new String[] 
1:5a9d596:                                   {"functionTests/tests/derbynet/SSLTestServerKey.key"},
1:5a9d596:                                   null,
1:5a9d596:                                   new String[] 
1:5a9d596:                                   {"SSLTestServerKey.key"}
1:5a9d596:                                   );
1:5a9d596:         Test test = TestConfiguration.defaultServerDecorator(testSetup);
1:5a9d596: 
1:5a9d596:         test = TestConfiguration.changeSSLDecorator(test, "basic");
1:5a9d596: 
1:5a9d596:         return test;
1:5a9d596:     }
1:5a9d596:     
1:5a9d596:     /**
1:5a9d596:      * <p>
1:5a9d596:      * Return a set of startup properties suitable for SSLTest.
1:5a9d596:      * </p>
1:5a9d596:      */
1:5a9d596:     private static  String[]  getStartupProperties()
1:5a9d596:     {
1:9d44c9e:         return new String[] {
1:9d44c9e:             "javax.net.ssl.keyStore=extinout/SSLTestServerKey.key",
1:9d44c9e:             "javax.net.ssl.keyStorePassword=qwerty",
1:9d44c9e:         };
1:5a9d596:     }
1:5a9d596:     
1:5a9d596:     // JUnit Tests
1:5a9d596:     
1:5a9d596:     /**
1:5a9d596:      * Test that a basic SSL connect succeeds.
1:5a9d596:      **/
1:5a9d596: 
1:5a9d596:     public void testSSLBasicDSConnect()
1:5a9d596:         throws Exception
1:5a9d596:     {   
1:5a9d596:         DataSource ds = JDBCDataSource.getDataSource();
1:5a9d596:         JDBCDataSource.setBeanProperty(ds,"createDatabase","create");
1:5a9d596:         JDBCDataSource.setBeanProperty(ds,"ssl","basic");
1:5a9d596:         Connection c1 = ds.getConnection();
1:5a9d596:         c1.close();
1:5a9d596:     }
1:5a9d596: 
1:5a9d596:     /**
1:5a9d596:      * Test that a plaintext connect will fail.
1:5a9d596:      **/
1:5a9d596: 
1:5a9d596:     public void testSSLBasicDSPlainConnect()
1:5a9d596:         throws Exception
1:5a9d596:     {   
1:5a9d596:         DataSource ds = JDBCDataSource.getDataSource();
1:5a9d596:         JDBCDataSource.setBeanProperty(ds,"createDatabase","create");
1:5a9d596:         
1:5a9d596:         try {
1:5a9d596:             Connection c2 = ds.getConnection();
1:5a9d596:             c2.close();
1:5a9d596:             fail();
1:5a9d596:         } catch (SQLException e) {
1:05efdaf:             assertSQLState("08006", e);
1:5a9d596:         }
1:5a9d596:     }
1:5a9d596: }
1:5a9d596: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SSLTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new String[] {
1:             "javax.net.ssl.keyStore=extinout/SSLTestServerKey.key",
1:             "javax.net.ssl.keyStorePassword=qwerty",
1:         };
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b2efa02
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a63ab5e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }   
/////////////////////////////////////////////////////////////////////////
1:                                        true);
commit:433c058
/////////////////////////////////////////////////////////////////////////
commit:e55cf9a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:05efdaf
/////////////////////////////////////////////////////////////////////////
1:             assertSQLState("08006", e);
commit:137e3a1
/////////////////////////////////////////////////////////////////////////
0:             assertSQLState("8006", e);
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5a9d596
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import java.io.InputStream;
0: import java.io.PrintWriter;
0: import java.io.StringWriter;
0: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.Properties;
0: import java.sql.DriverManager;
1: import java.sql.Connection;
0: import javax.sql.DataSource;
1: import java.sql.SQLException;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.Derby;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.ServerSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.JDBCDataSource;
1: 
0: import org.apache.derby.drda.NetworkServerControl;
1: 
1: /**
1:  * Tests connects to an SSL server
1:  */
1: 
1: public class SSLTest extends BaseJDBCTestCase
1: {
0:     // helper state for intercepting server error messages
0:     private InputStream[]  _inputStreamHolder;
0:     /** Reference to the enclosing NetworkServerTestSetup. */
0:     private NetworkServerTestSetup nsTestSetup;
1: 
1:     // Constructors
1: 
1:     public SSLTest(String testName)
1:     {
1:         super(testName);
0:         _inputStreamHolder = new InputStream[1];
1:     }
1:     
1:     // JUnit machinery
1:     
1:     /**
1:      * Tests to run.
1:      */
1:     public static Test suite()
1:     {
1:         //NetworkServerTestSetup.setWaitTime(10000L);
1:         
0:         TestSuite suite = new TestSuite("SSLTest");
1:         
1:         // Server booting requires that we run from the jar files
1:         if (!TestConfiguration.loadingFromJars()) { return suite; }
1:         
1:         // Need derbynet.jar in the classpath!
1:         if (!Derby.hasServer())
1:             return suite;
1:         
1:         suite.addTest(decorateTest("testSSLBasicDSConnect"));
1:         suite.addTest(decorateTest("testSSLBasicDSPlainConnect"));
1:         return suite;
1:     }
1:     
1:     /**
0:      * Release resources.
1:      */
1: 
0:     protected void tearDown() throws Exception
1:     {
0:         _inputStreamHolder = null;
1:     }
1:     
1: 
1:     // Test decoration
1:     
1:     /**
1:      * <p>
1:      * Compose the required decorators to bring up the server in the correct
1:      * configuration.
1:      * </p>
1:      */
1:     private static Test decorateTest(String testName)
1:     {
1:         SSLTest sslTest = 
1:             new SSLTest(testName);
1:         
1:         String[] startupProperties = 
1:             getStartupProperties();
1: 
1:         String[] startupArgs = new String[]{};
1:         
1:         NetworkServerTestSetup networkServerTestSetup =
1:             new NetworkServerTestSetup(sslTest,
1:                                        startupProperties,
1:                                        startupArgs,
0:                                        true,
0:                                        true, 
0:                                        sslTest._inputStreamHolder);
1:         
0:         sslTest.nsTestSetup = networkServerTestSetup;
1:         
1:         Test testSetup =
1:             SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
1:         
1:         testSetup = 
1:             new SupportFilesSetup(testSetup,
1:                                   null,
1:                                   new String[] 
1:                                   {"functionTests/tests/derbynet/SSLTestServerKey.key"},
1:                                   null,
1:                                   new String[] 
1:                                   {"SSLTestServerKey.key"}
1:                                   );
1:         Test test = TestConfiguration.defaultServerDecorator(testSetup);
1: 
1:         test = TestConfiguration.changeSSLDecorator(test, "basic");
1: 
1:         return test;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Return a set of startup properties suitable for SSLTest.
1:      * </p>
1:      */
1:     private static  String[]  getStartupProperties()
1:     {
0:         ArrayList list = new ArrayList();
0:         list.add("javax.net.ssl.keyStore=extinout/SSLTestServerKey.key");
0:         list.add("javax.net.ssl.keyStorePassword=qwerty");
0:         String[] result = new String[ list.size()];
0:         list.toArray(result);
0:         return result;
1:     }
1:     
1:     // JUnit Tests
1:     
1:     /**
1:      * Test that a basic SSL connect succeeds.
1:      **/
1: 
1:     public void testSSLBasicDSConnect()
1:         throws Exception
1:     {   
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         JDBCDataSource.setBeanProperty(ds,"createDatabase","create");
1:         JDBCDataSource.setBeanProperty(ds,"ssl","basic");
1:         Connection c1 = ds.getConnection();
1:         c1.close();
1:     }
1: 
1:     /**
1:      * Test that a plaintext connect will fail.
1:      **/
1: 
1:     public void testSSLBasicDSPlainConnect()
1:         throws Exception
1:     {   
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         JDBCDataSource.setBeanProperty(ds,"createDatabase","create");
1:         
1:         try {
1:             Connection c2 = ds.getConnection();
1:             c2.close();
1:             fail();
1:         } catch (SQLException e) {
0:             assertSQLState("58009", e);
1:         }
1:     }
1: }
1: 
============================================================================