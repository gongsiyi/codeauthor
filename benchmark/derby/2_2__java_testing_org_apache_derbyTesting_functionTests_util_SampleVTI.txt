1:063dd55: /*
2:063dd55: 
1:063dd55:    Derby - Class org.apache.derbyTesting.functionTests.util.SampleVTI
1:063dd55: 
1:063dd55:    Licensed to the Apache Software Foundation (ASF) under one or more
1:063dd55:    contributor license agreements.  See the NOTICE file distributed with
1:063dd55:    this work for additional information regarding copyright ownership.
1:063dd55:    The ASF licenses this file to You under the Apache License, Version 2.0
1:063dd55:    (the "License"); you may not use this file except in compliance with
1:063dd55:    the License.  You may obtain a copy of the License at
1:063dd55: 
1:063dd55:       http://www.apache.org/licenses/LICENSE-2.0
1:063dd55: 
1:063dd55:    Unless required by applicable law or agreed to in writing, software
1:063dd55:    distributed under the License is distributed on an "AS IS" BASIS,
1:063dd55:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:063dd55:    See the License for the specific language governing permissions and
1:063dd55:    limitations under the License.
1:063dd55: 
1:063dd55:  */
1:063dd55: package org.apache.derbyTesting.functionTests.util;
1:063dd55: 
1:063dd55: import java.io.InputStream;
1:063dd55: import java.io.Reader;
1:063dd55: import java.sql.ResultSet;
1:063dd55: import java.sql.SQLException;
1:063dd55: 
1:063dd55: import org.apache.derby.vti.VTITemplate;
1:063dd55: 
1:063dd55: /**
1:063dd55:  * A very simple, read-only, sample VTI.
1:063dd55:  * <p>
1:063dd55:  * This VTI is incomplete and has its quirks - it is intended for basic testing
1:063dd55:  * only! Supported getters:
1:063dd55:  * <ul> <li>getString</li>
1:063dd55:  *      <li>getInt</li>
1:063dd55:  * </ul>
1:063dd55:  */
1:063dd55: public class SampleVTI
1:063dd55:     extends VTITemplate {
1:063dd55: 
1:063dd55:     private static final String[][] oneColData = new String[][] {
1:063dd55:             {"one"}, {"two"}, {"three"}, {"four"}, {"five"}
1:063dd55:         };
1:063dd55: 
1:063dd55:     /** Returns a sample VTI that is empty (has zero rows). */
1:063dd55:     public static ResultSet emptySampleVTI() {
1:063dd55:         return new SampleVTI(new String[0][0]);
2:063dd55:     }
1:063dd55: 
1:063dd55:     /**
1:063dd55:      * Returns a sample VTI with the some test data.
1:063dd55:      *
1:063dd55:      *@return A result set with a single column with string data (five rows).
1:063dd55:      */
1:063dd55:     public static ResultSet oneColSampleVTI() {
1:063dd55:         return new SampleVTI(oneColData);
1:063dd55:     }
1:063dd55: 
1:063dd55:     public static String[][] oneColSampleVTIData() {
1:063dd55:         return (String[][])oneColData.clone();
1:063dd55:     }
1:063dd55: 
1:063dd55:     private final String[][] data;
1:063dd55:     private final int rows;
1:063dd55:     private final int cols;
1:063dd55:     private int index = -1;
1:063dd55:     private boolean wasNull;
1:063dd55:     private boolean closed;
1:063dd55: 
1:063dd55:     private SampleVTI(String[][] data) {
1:063dd55:         this.data = data;
1:063dd55:         this.rows = data.length;
1:063dd55:         this.cols = rows == 0 ? 0 : data[0].length;
1:063dd55:     }
1:063dd55: 
1:063dd55:     private String getColumn(int columnIndex)
1:063dd55:             throws SQLException {
1:063dd55:         if (closed) {
1:063dd55:             throw new SQLException("result set closed");
1:063dd55:         }
1:063dd55:         if (columnIndex < 1 || columnIndex > cols) {
1:063dd55:             throw new SQLException("column value out of range");
1:063dd55:         }
1:063dd55:         String val = data[index][columnIndex -1];
1:063dd55:         wasNull = val == null;
1:063dd55:         return val;
1:063dd55:     }
1:063dd55: 
2:063dd55:     //@Override
1:063dd55:     public boolean next() throws SQLException {
1:063dd55:         if (closed) {
1:063dd55:             throw new SQLException("result set closed");
1:063dd55:         }
1:063dd55:         return ++index < rows;
1:063dd55:     }
1:063dd55: 
1:063dd55:     //@Override
1:063dd55:     public void close() throws SQLException {
1:063dd55:         this.closed = true;
1:063dd55:     }
1:063dd55: 
1:063dd55:     //@Override
1:063dd55:     public String getString(int columnIndex)
1:063dd55:             throws SQLException {
1:063dd55:         return getColumn(columnIndex);
1:063dd55:     }
1:063dd55: 
1:063dd55:     //@Override
1:063dd55:     public int getInt(int columnIndex)
1:063dd55:             throws SQLException {
1:063dd55:         String raw = getColumn(columnIndex);
1:063dd55:         if (wasNull) {
1:063dd55:             raw = "0";
1:063dd55:         }
1:063dd55:         try {
1:063dd55:             return Integer.parseInt(raw);
1:063dd55:         } catch (NumberFormatException nfe) {
1:063dd55:             throw new SQLException("cannot get value as int");
1:063dd55:         }
1:063dd55:     }
1:063dd55: 
1:063dd55:     //@Override
1:063dd55:     public boolean wasNull() {
1:063dd55:         return wasNull;
1:063dd55:     }
1:063dd55: 
1:063dd55:     public int getHoldability() throws SQLException {
2:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public boolean isClosed() throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNString(int columnIndex, String nString) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNString(String columnLabel, String nString) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public String getNString(int columnIndex) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public String getNString(String columnLabel) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public Reader getNCharacterStream(int columnIndex) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public Reader getNCharacterStream(String columnLabel) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateClob(int columnIndex, Reader reader) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateClob(String columnLabel, Reader reader) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNClob(int columnIndex, Reader reader) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:063dd55:     public void updateNClob(String columnLabel, Reader reader) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:3f5c48a:     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: 
1:3f5c48a:     public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
1:063dd55:         throw new UnsupportedOperationException("Not supported yet.");
1:063dd55:     }
1:063dd55: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
1:     public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
commit:ca998af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:063dd55
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.SampleVTI
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.vti.VTITemplate;
1: 
1: /**
1:  * A very simple, read-only, sample VTI.
1:  * <p>
1:  * This VTI is incomplete and has its quirks - it is intended for basic testing
1:  * only! Supported getters:
1:  * <ul> <li>getString</li>
1:  *      <li>getInt</li>
1:  * </ul>
1:  */
1: public class SampleVTI
1:     extends VTITemplate {
1: 
1:     private static final String[][] oneColData = new String[][] {
1:             {"one"}, {"two"}, {"three"}, {"four"}, {"five"}
1:         };
1: 
1:     /** Returns a sample VTI that is empty (has zero rows). */
1:     public static ResultSet emptySampleVTI() {
1:         return new SampleVTI(new String[0][0]);
1:     }
1: 
1:     /**
1:      * Returns a sample VTI with the some test data.
1:      *
1:      *@return A result set with a single column with string data (five rows).
1:      */
1:     public static ResultSet oneColSampleVTI() {
1:         return new SampleVTI(oneColData);
1:     }
1: 
1:     public static String[][] oneColSampleVTIData() {
1:         return (String[][])oneColData.clone();
1:     }
1: 
1:     private final String[][] data;
1:     private final int rows;
1:     private final int cols;
1:     private int index = -1;
1:     private boolean wasNull;
1:     private boolean closed;
1: 
1:     private SampleVTI(String[][] data) {
1:         this.data = data;
1:         this.rows = data.length;
1:         this.cols = rows == 0 ? 0 : data[0].length;
1:     }
1: 
1:     private String getColumn(int columnIndex)
1:             throws SQLException {
1:         if (closed) {
1:             throw new SQLException("result set closed");
1:         }
1:         if (columnIndex < 1 || columnIndex > cols) {
1:             throw new SQLException("column value out of range");
1:         }
1:         String val = data[index][columnIndex -1];
1:         wasNull = val == null;
1:         return val;
1:     }
1: 
1:     //@Override
0:     public ResultSetMetaData getMetaData() throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     //@Override
1:     public boolean next() throws SQLException {
1:         if (closed) {
1:             throw new SQLException("result set closed");
1:         }
1:         return ++index < rows;
1:     }
1: 
1:     //@Override
1:     public void close() throws SQLException {
1:         this.closed = true;
1:     }
1: 
1:     //@Override
1:     public String getString(int columnIndex)
1:             throws SQLException {
1:         return getColumn(columnIndex);
1:     }
1: 
1:     //@Override
1:     public int getInt(int columnIndex)
1:             throws SQLException {
1:         String raw = getColumn(columnIndex);
1:         if (wasNull) {
1:             raw = "0";
1:         }
1:         try {
1:             return Integer.parseInt(raw);
1:         } catch (NumberFormatException nfe) {
1:             throw new SQLException("cannot get value as int");
1:         }
1:     }
1: 
1:     //@Override
1:     public boolean wasNull() {
1:         return wasNull;
1:     }
1: 
1:     public int getHoldability() throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public boolean isClosed() throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNString(int columnIndex, String nString) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNString(String columnLabel, String nString) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public String getNString(int columnIndex) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public String getNString(String columnLabel) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public Reader getNCharacterStream(int columnIndex) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public Reader getNCharacterStream(String columnLabel) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateClob(int columnIndex, Reader reader) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateClob(String columnLabel, Reader reader) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNClob(int columnIndex, Reader reader) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
1:     public void updateNClob(String columnLabel, Reader reader) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
0:     public Object getObject(int columnIndex, Class type) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: 
0:     public Object getObject(String columnLabel, Class type) throws SQLException {
1:         throw new UnsupportedOperationException("Not supported yet.");
1:     }
1: }
============================================================================