2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.UniqueIndexSortObserver
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:f6d02c9: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:0c5bc3a: import org.apache.derby.iapi.reference.SQLState;
1:0c5bc3a: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:0c5bc3a: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:0c5bc3a: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Unique index aggregator.  Enforces uniqueness when
1:eac0369:  * creating a unique index or constraint.
2:eac0369:  *
1:eac0369:  */
1:eac0369: class UniqueIndexSortObserver extends BasicSortObserver 
1:eac0369: {
1:0c5bc3a:     private final boolean                   deferrable;
1:0c5bc3a:     private final boolean                   deferred;
1:0c5bc3a:     private final String                    indexOrConstraintName;
1:0c5bc3a:     private final String                    tableName;
1:0c5bc3a:     private final LanguageConnectionContext lcc;
1:f6d02c9:     private final UUID                      constraintId;
1:af1c18c:     private BackingStoreHashtable           deferredDuplicates;
1:eac0369: 
1:0c5bc3a:     public UniqueIndexSortObserver(
1:0c5bc3a:             LanguageConnectionContext lcc,
1:f6d02c9:             UUID constraintId,
1:0c5bc3a:             boolean doClone,
1:0c5bc3a:             boolean deferrable,
1:0c5bc3a:             boolean deferred,
1:0c5bc3a:             String indexOrConstraintName,
1:0c5bc3a:             ExecRow execRow,
1:0c5bc3a:             boolean reuseWrappers,
1:0c5bc3a:             String tableName)
1:eac0369: 	{
1:0c5bc3a:         super(doClone, !deferred, execRow, reuseWrappers);
1:0c5bc3a:         this.lcc = lcc;
1:f6d02c9:         this.constraintId = constraintId;
1:0c5bc3a:         this.deferrable = deferrable;
1:0c5bc3a:         this.deferred = deferred;
1:eac0369: 		this.indexOrConstraintName = indexOrConstraintName;
1:eac0369: 		this.tableName = tableName;
1:eac0369: 	}
1:eac0369: 
1:0c5bc3a:     @Override
1:eac0369: 	public DataValueDescriptor[] insertDuplicateKey(
1:eac0369:     DataValueDescriptor[]   in, 
1:eac0369:     DataValueDescriptor[]   dup)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		StandardException se = null;
1:eac0369: 		se = StandardException.newException(
1:eac0369: 				SQLState.LANG_DUPLICATE_KEY_CONSTRAINT, indexOrConstraintName, tableName);
1:eac0369: 		throw se;
1:eac0369: 	}
1:eac0369: 
1:0c5bc3a:     @Override
1:0c5bc3a:     public boolean deferred() {
1:0c5bc3a:         return deferred;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     @Override
1:0c5bc3a:     public boolean deferrable() {
1:0c5bc3a:         return deferrable;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     @Override
1:0c5bc3a:     public void rememberDuplicate(DataValueDescriptor[] row)
1:0c5bc3a:             throws StandardException {
1:af1c18c:         deferredDuplicates = DeferredConstraintsMemory.rememberDuplicate(
1:af1c18c:                 lcc,
1:af1c18c:                 deferredDuplicates,
1:f6d02c9:                 constraintId,
1:af1c18c:                 row);
1:0c5bc3a:     }
1:0c5bc3a: 
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
1:     private final UUID                      constraintId;
1:             UUID constraintId,
/////////////////////////////////////////////////////////////////////////
1:         this.constraintId = constraintId;
/////////////////////////////////////////////////////////////////////////
1:                 constraintId,
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     private BackingStoreHashtable           deferredDuplicates;
/////////////////////////////////////////////////////////////////////////
1:         deferredDuplicates = DeferredConstraintsMemory.rememberDuplicate(
1:                 lcc,
1:                 deferredDuplicates,
0:                 indexCID,
1:                 row);
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.iapi.store.access.TransactionController;
/////////////////////////////////////////////////////////////////////////
1:     private final boolean                   deferrable;
1:     private final boolean                   deferred;
1:     private final String                    indexOrConstraintName;
1:     private final String                    tableName;
0:     private final TransactionController     tc;
1:     private final LanguageConnectionContext lcc;
0:     private final long                      indexCID;
0:     private BackingStoreHashtable           deferredRowsHashTable;
1:     public UniqueIndexSortObserver(
0:             TransactionController tc,
1:             LanguageConnectionContext lcc,
0:             long indexCID,
1:             boolean doClone,
1:             boolean deferrable,
1:             boolean deferred,
1:             String indexOrConstraintName,
1:             ExecRow execRow,
1:             boolean reuseWrappers,
1:             String tableName)
1:         super(doClone, !deferred, execRow, reuseWrappers);
0:         this.tc = tc;
1:         this.lcc = lcc;
0:         this.indexCID = indexCID;
1:         this.deferrable = deferrable;
1:         this.deferred = deferred;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean deferred() {
1:         return deferred;
1:     }
1: 
1:     @Override
1:     public boolean deferrable() {
1:         return deferrable;
1:     }
1: 
1:     @Override
1:     public void rememberDuplicate(DataValueDescriptor[] row)
1:             throws StandardException {
0:         deferredRowsHashTable = DeferredDuplicates.rememberDuplicate(
0:                     tc,
0:                     indexCID,
0:                     deferredRowsHashTable,
0:                     lcc,
0:                     row);
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.UniqueIndexSortObserver
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.access.SortObserver;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1:  * Unique index aggregator.  Enforces uniqueness when
1:  * creating a unique index or constraint.
1:  *
0:  * @author jerry
1:  */
1: class UniqueIndexSortObserver extends BasicSortObserver 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private boolean		isConstraint;
0: 	private String		indexOrConstraintName;
0: 	private String 		tableName;
1: 
0: 	public UniqueIndexSortObserver(boolean doClone, boolean isConstraint, 
0: 				String indexOrConstraintName, ExecRow execRow, 
0: 				boolean reuseWrappers, String tableName)
1: 	{
0: 		super(doClone, true, execRow, reuseWrappers);
0: 		this.isConstraint = isConstraint;
1: 		this.indexOrConstraintName = indexOrConstraintName;
1: 		this.tableName = tableName;
1: 	}
1: 
1: 	/*
0: 	 * Overridden from BasicSortObserver
1: 	 */
1: 
1: 	/**
0: 	 * @see AggregateSortObserver#insertDuplicateKey
1: 	 *
0: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public DataValueDescriptor[] insertDuplicateKey(
1:     DataValueDescriptor[]   in, 
1:     DataValueDescriptor[]   dup)
1: 		throws StandardException
1: 	{
1: 		StandardException se = null;
1: 		se = StandardException.newException(
1: 				SQLState.LANG_DUPLICATE_KEY_CONSTRAINT, indexOrConstraintName, tableName);
1: 		throw se;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.SortObserver;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: /**
0:  * Unique index aggregator.  Enforces uniqueness when
0:  * creating a unique index or constraint.
0:  *
0:  * @author jerry
0:  */
0: class UniqueIndexSortObserver extends BasicSortObserver 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private boolean		isConstraint;
0: 	private String		indexOrConstraintName;
0: 	private String 		tableName;
0: 
0: 	public UniqueIndexSortObserver(boolean doClone, boolean isConstraint, 
0: 				String indexOrConstraintName, ExecRow execRow, 
0: 				boolean reuseWrappers, String tableName)
0: 	{
0: 		super(doClone, true, execRow, reuseWrappers);
0: 		this.isConstraint = isConstraint;
0: 		this.indexOrConstraintName = indexOrConstraintName;
0: 		this.tableName = tableName;
0: 	}
0: 
0: 	/*
0: 	 * Overridden from BasicSortObserver
0: 	 */
0: 
0: 	/**
0: 	 * @see AggregateSortObserver#insertDuplicateKey
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public DataValueDescriptor[] insertDuplicateKey(
0:     DataValueDescriptor[]   in, 
0:     DataValueDescriptor[]   dup)
0: 		throws StandardException
0: 	{
0: 		StandardException se = null;
0: 		se = StandardException.newException(
0: 				SQLState.LANG_DUPLICATE_KEY_CONSTRAINT, indexOrConstraintName, tableName);
0: 		throw se;
0: 	}
0: 
0: }
============================================================================