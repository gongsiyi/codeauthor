1:b8d1d8a: /*
1:b8d1d8a: 
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.tester.Tester3
1:b8d1d8a: 
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a: 
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a: 
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a: 
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.tester;
1:b8d1d8a: 
1:b8d1d8a: import java.sql.Connection;
1:b8d1d8a: 
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.NsTest;
1:b8d1d8a: 
1:b8d1d8a: /**
1:b8d1d8a:  * Tester3 - Threads that opens/closes the connection to the database after each query
1:b8d1d8a:  */
1:b8d1d8a: public class Tester3 extends TesterObject {
1:b8d1d8a: 
1:b8d1d8a: 	//*******************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// Constructor. Get's the name of the thread running this for use in messages
1:b8d1d8a: 	//
1:b8d1d8a: 	//*******************************************************************************
1:b8d1d8a: 	public Tester3(String name) {
1:b8d1d8a: 		super(name);
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	//*********************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// This starts the acutal test operations.  Overrides the startTesting() of parent.
1:b8d1d8a: 	// Tester3 profile -
1:b8d1d8a: 	//     Query only kind of client that deals with a large result
1:b8d1d8a: 	//     set based on a select query that returns a large number of
1:b8d1d8a: 	//     rows (stress condition).  Connection is closed after each
1:b8d1d8a: 	//     query. The query will need to run in a DIRTY_READ mode, i.e.
1:b8d1d8a: 	//     READ UNCOMMITTED isolation level.  We work over the untouched
1:b8d1d8a: 	//		portion of rows in the table (i.e. serialkey 1 to NUM_UNTOUCHED_ROWS)
1:b8d1d8a: 	//
1:b8d1d8a: 	//*********************************************************************************
1:b8d1d8a: 	public void startTesting() {
1:b8d1d8a: 
1:b8d1d8a: 		//The following loop will be done nstest.MAX_ITERATIONS times after which we exit the thread
1:b8d1d8a: 		// Note that a different connection is used for each operation.  The purpose of this client is
1:b8d1d8a: 		// to work on a large set of data as defined by the parameter NUM_HIGH_STRESS_ROWS
1:b8d1d8a: 		// This thread could be made to pause (sleep) for a bit between each iteration.
1:b8d1d8a: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1:b8d1d8a: 			//Get the connection.  It will be closed at the end of the loop
1:b8d1d8a: 			connex = getConnection();
1:b8d1d8a: 			if (connex == null) {
1:c043274: 				NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 						+ " could not get the database connection");
1:b8d1d8a: 				return; //quit
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			// set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED to reduce number of
1:b8d1d8a: 			// deadlocks/lock issues
1:b8d1d8a: 			setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1:b8d1d8a: 
1:b8d1d8a: 			//Now select nstest.NUM_HIGH_STRESS_ROWS number of rows
1:b8d1d8a: 			try {
1:b8d1d8a: 				int numSelected = doSelectOperation(NsTest.NUM_HIGH_STRESS_ROWS);
1:c043274: 				NsTest.logger.println(getThread_id()+" Tester3: Rows selected "+numSelected);
1:b8d1d8a: 			} catch (Exception e) {
1:c043274: 				NsTest.logger.println("doSelect in thread " + getThread_id()
1:b8d1d8a: 						+ " threw ");
1:b8d1d8a: 				printException("doSelectOperation() in Tester3 of "+getThread_id(), e);
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			//close the connection
1:b8d1d8a: 			closeConnection();
1:b8d1d8a: 
1:b8d1d8a: 			//Thread.sleep(10 * 60000); //10 minutes
1:b8d1d8a: 
1:b8d1d8a: 		}//end of for (int i=0;...)
1:b8d1d8a: 
1:c043274: 		NsTest.logger.println("Thread " + getThread_id() + " is now terminating");
1:b8d1d8a: 
1:b8d1d8a: 	}//end of startTesting()
1:b8d1d8a: 
1:b8d1d8a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println(getThread_id()+" Tester3: Rows selected "+numSelected);
1: 				NsTest.logger.println("doSelect in thread " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 		NsTest.logger.println("Thread " + getThread_id() + " is now terminating");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.tester.Tester3
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.tester;
1: 
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
1: /**
1:  * Tester3 - Threads that opens/closes the connection to the database after each query
1:  */
1: public class Tester3 extends TesterObject {
1: 
1: 	//*******************************************************************************
1: 	//
1: 	// Constructor. Get's the name of the thread running this for use in messages
1: 	//
1: 	//*******************************************************************************
1: 	public Tester3(String name) {
1: 		super(name);
1: 	}
1: 
1: 	//*********************************************************************************
1: 	//
1: 	// This starts the acutal test operations.  Overrides the startTesting() of parent.
1: 	// Tester3 profile -
1: 	//     Query only kind of client that deals with a large result
1: 	//     set based on a select query that returns a large number of
1: 	//     rows (stress condition).  Connection is closed after each
1: 	//     query. The query will need to run in a DIRTY_READ mode, i.e.
1: 	//     READ UNCOMMITTED isolation level.  We work over the untouched
1: 	//		portion of rows in the table (i.e. serialkey 1 to NUM_UNTOUCHED_ROWS)
1: 	//
1: 	//*********************************************************************************
1: 	public void startTesting() {
1: 
1: 		//The following loop will be done nstest.MAX_ITERATIONS times after which we exit the thread
1: 		// Note that a different connection is used for each operation.  The purpose of this client is
1: 		// to work on a large set of data as defined by the parameter NUM_HIGH_STRESS_ROWS
1: 		// This thread could be made to pause (sleep) for a bit between each iteration.
1: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1: 			//Get the connection.  It will be closed at the end of the loop
1: 			connex = getConnection();
1: 			if (connex == null) {
0: 				System.out.println("FAIL: " + getThread_id()
1: 						+ " could not get the database connection");
1: 				return; //quit
1: 			}
1: 
1: 			// set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED to reduce number of
1: 			// deadlocks/lock issues
1: 			setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1: 
1: 			//Now select nstest.NUM_HIGH_STRESS_ROWS number of rows
1: 			try {
1: 				int numSelected = doSelectOperation(NsTest.NUM_HIGH_STRESS_ROWS);
0: 				System.out.println(getThread_id()+" Tester3: Rows selected "+numSelected);
1: 			} catch (Exception e) {
0: 				System.out.println("doSelect in thread " + getThread_id()
1: 						+ " threw ");
1: 				printException("doSelectOperation() in Tester3 of "+getThread_id(), e);
1: 			}
1: 
1: 			//close the connection
1: 			closeConnection();
1: 
1: 			//Thread.sleep(10 * 60000); //10 minutes
1: 
1: 		}//end of for (int i=0;...)
1: 
0: 		System.out.println("Thread " + getThread_id() + " is now terminating");
1: 
1: 	}//end of startTesting()
1: 
1: }
============================================================================