1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitable; 
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Replace all aggregates with result columns.
1:eac0369:  *
1:eac0369:  */
1:3bb140c: class ReplaceAggregatesWithCRVisitor implements Visitor
1:eac0369: {
1:eac0369: 	private ResultColumnList rcl;
1:e1f49ca:     private Class<?> skipOverClass;
1:eac0369: 	private int tableNumber;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Replace all aggregates with column references.  Add
1:eac0369: 	 * the reference to the RCL.  Delegates most work to
1:eac0369: 	 * AggregateNode.replaceAggregatesWithColumnReferences(rcl, tableNumber).
1:eac0369: 	 *
1:eac0369: 	 * @param rcl the result column list
1:eac0369: 	 * @param tableNumber	The tableNumber for the new CRs
1:eac0369: 	 */
1:3bb140c:     ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, int tableNumber)
1:eac0369: 	{
1:d5ef906: 		this(rcl, tableNumber, null);
1:d5ef906: 	}
1:d5ef906: 
1:3bb140c:     ReplaceAggregatesWithCRVisitor(
1:e1f49ca:         ResultColumnList rcl, int tableNumber, Class<?> skipOverClass)
1:d5ef906: 	{
1:eac0369: 		this.rcl = rcl;
1:eac0369: 		this.tableNumber = tableNumber;
1:d5ef906: 		this.skipOverClass = skipOverClass;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Replace all aggregates with column references.  Add
1:eac0369: 	 * the reference to the RCL.  Delegates most work to
1:eac0369: 	 * AggregateNode.replaceAggregatesWithColumnReferences(rcl).
1:eac0369: 	 * Doesn't traverse below the passed in class.
1:eac0369: 	 *
1:eac0369: 	 * @param rcl the result column list
2:eac0369: 	 * @param nodeToSkip don't examine anything below nodeToSkip
1:eac0369: 	 */
1:e1f49ca:     ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, Class<?> nodeToSkip)
1:eac0369: 	{
1:eac0369: 		this.rcl = rcl;
1:eac0369: 		this.skipOverClass = nodeToSkip;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// VISITOR INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Don't do anything unless we have an aggregate
1:eac0369: 	 * node.
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 *
1:eac0369: 	 * @return me
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public Visitable visit(Visitable node)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (node instanceof AggregateNode)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Let aggregateNode replace itself.
1:eac0369: 			*/
1:eac0369: 			node = ((AggregateNode)node).replaceAggregatesWithColumnReferences(rcl, tableNumber);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return node;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Don't visit children under the skipOverClass
1:eac0369: 	 * node, if it isn't null.
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	public boolean skipChildren(Visitable node)
1:eac0369: 	{
1:eac0369: 		return (skipOverClass == null) ?
1:eac0369: 				false:
1:eac0369: 				skipOverClass.isInstance(node);
1:eac0369: 	}
1:eac0369: 	
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:dd2f5a8: 	}
1:dd2f5a8: 
1:eac0369: 	public boolean stopTraversal()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:     private Class<?> skipOverClass;
/////////////////////////////////////////////////////////////////////////
1:         ResultColumnList rcl, int tableNumber, Class<?> skipOverClass)
/////////////////////////////////////////////////////////////////////////
1:     ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, Class<?> nodeToSkip)
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: class ReplaceAggregatesWithCRVisitor implements Visitor
/////////////////////////////////////////////////////////////////////////
1:     ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, int tableNumber)
1:     ReplaceAggregatesWithCRVisitor(
0:         ResultColumnList rcl, int tableNumber, Class skipOverClass)
/////////////////////////////////////////////////////////////////////////
0:     ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, Class nodeToSkip)
/////////////////////////////////////////////////////////////////////////
1:      * Don't visit children under the skipOverClass
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
1: 
author:Army
-------------------------------------------------------------------------------
commit:d5ef906
/////////////////////////////////////////////////////////////////////////
1: 		this(rcl, tableNumber, null);
1: 	}
1: 
0: 	public ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, int tableNumber, Class skipOverClass)
1: 	{
1: 		this.skipOverClass = skipOverClass;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.Visitable; 
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Replace all aggregates with result columns.
1:  *
0:  * @author jamie
1:  */
0: public class ReplaceAggregatesWithCRVisitor implements Visitor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private ResultColumnList rcl;
0: 	private Class skipOverClass;
1: 	private int tableNumber;
1: 
1: 	/**
1: 	 * Replace all aggregates with column references.  Add
1: 	 * the reference to the RCL.  Delegates most work to
1: 	 * AggregateNode.replaceAggregatesWithColumnReferences(rcl, tableNumber).
1: 	 *
1: 	 * @param rcl the result column list
1: 	 * @param tableNumber	The tableNumber for the new CRs
1: 	 * @param nodeToSkip don't examine anything below nodeToSkip
1: 	 */
0: 	public ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, int tableNumber)
1: 	{
1: 		this.rcl = rcl;
1: 		this.tableNumber = tableNumber;
1: 	}
1: 
1: 	/**
1: 	 * Replace all aggregates with column references.  Add
1: 	 * the reference to the RCL.  Delegates most work to
1: 	 * AggregateNode.replaceAggregatesWithColumnReferences(rcl).
1: 	 * Doesn't traverse below the passed in class.
1: 	 *
1: 	 * @param rcl the result column list
1: 	 * @param nodeToSkip don't examine anything below nodeToSkip
1: 	 */
0: 	public ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, Class nodeToSkip)
1: 	{
1: 		this.rcl = rcl;
1: 		this.skipOverClass = nodeToSkip;
1: 	}
1: 
1: 
1: 	////////////////////////////////////////////////
1: 	//
1: 	// VISITOR INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Don't do anything unless we have an aggregate
1: 	 * node.
1: 	 *
1: 	 * @param node 	the node to process
1: 	 *
1: 	 * @return me
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public Visitable visit(Visitable node)
1: 		throws StandardException
1: 	{
1: 		if (node instanceof AggregateNode)
1: 		{
1: 			/*
1: 			** Let aggregateNode replace itself.
1: 			*/
1: 			node = ((AggregateNode)node).replaceAggregatesWithColumnReferences(rcl, tableNumber);
1: 		}
1: 
1: 		return node;
1: 	}
1: 
1: 	/**
0: 	 * Don't visit childen under the skipOverClass
1: 	 * node, if it isn't null.
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean skipChildren(Visitable node)
1: 	{
1: 		return (skipOverClass == null) ?
1: 				false:
1: 				skipOverClass.isInstance(node);
1: 	}
1: 	
1: 	public boolean stopTraversal()
1: 	{
1: 		return false;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.Visitable; 
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * Replace all aggregates with result columns.
0:  *
0:  * @author jamie
0:  */
0: public class ReplaceAggregatesWithCRVisitor implements Visitor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private ResultColumnList rcl;
0: 	private Class skipOverClass;
0: 	private int tableNumber;
0: 
0: 	/**
0: 	 * Replace all aggregates with column references.  Add
0: 	 * the reference to the RCL.  Delegates most work to
0: 	 * AggregateNode.replaceAggregatesWithColumnReferences(rcl, tableNumber).
0: 	 *
0: 	 * @param rcl the result column list
0: 	 * @param tableNumber	The tableNumber for the new CRs
0: 	 * @param nodeToSkip don't examine anything below nodeToSkip
0: 	 */
0: 	public ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, int tableNumber)
0: 	{
0: 		this.rcl = rcl;
0: 		this.tableNumber = tableNumber;
0: 	}
0: 
0: 	/**
0: 	 * Replace all aggregates with column references.  Add
0: 	 * the reference to the RCL.  Delegates most work to
0: 	 * AggregateNode.replaceAggregatesWithColumnReferences(rcl).
0: 	 * Doesn't traverse below the passed in class.
0: 	 *
0: 	 * @param rcl the result column list
0: 	 * @param nodeToSkip don't examine anything below nodeToSkip
0: 	 */
0: 	public ReplaceAggregatesWithCRVisitor(ResultColumnList rcl, Class nodeToSkip)
0: 	{
0: 		this.rcl = rcl;
0: 		this.skipOverClass = nodeToSkip;
0: 	}
0: 
0: 
0: 	////////////////////////////////////////////////
0: 	//
0: 	// VISITOR INTERFACE
0: 	//
0: 	////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Don't do anything unless we have an aggregate
0: 	 * node.
0: 	 *
0: 	 * @param node 	the node to process
0: 	 *
0: 	 * @return me
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public Visitable visit(Visitable node)
0: 		throws StandardException
0: 	{
0: 		if (node instanceof AggregateNode)
0: 		{
0: 			/*
0: 			** Let aggregateNode replace itself.
0: 			*/
0: 			node = ((AggregateNode)node).replaceAggregatesWithColumnReferences(rcl, tableNumber);
0: 		}
0: 
0: 		return node;
0: 	}
0: 
0: 	/**
0: 	 * Don't visit childen under the skipOverClass
0: 	 * node, if it isn't null.
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean skipChildren(Visitable node)
0: 	{
0: 		return (skipOverClass == null) ?
0: 				false:
0: 				skipOverClass.isInstance(node);
0: 	}
0: 	
0: 	public boolean stopTraversal()
0: 	{
0: 		return false;
0: 	}
0: }
============================================================================