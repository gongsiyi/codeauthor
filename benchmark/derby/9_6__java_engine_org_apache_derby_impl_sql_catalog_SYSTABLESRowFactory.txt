1:fd46794: /*
9:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory
1:fd46794: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:e4ada41: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Factory for creating a SYSTABLES row.
5:eac0369:  *
1:eac0369:  *
1:eac0369:  * @version 0.1
3:eac0369:  */
1:345de35: 
1:7aa6fa8: class SYSTABLESRowFactory extends CatalogRowFactory
2:eac0369: {
1:eac0369: 	private static final String		TABLENAME_STRING = "SYSTABLES";
1:345de35: 
1:eac0369: 	protected static final int		SYSTABLES_COLUMN_COUNT = 5;
1:eac0369: 	/* Column #s for systables (1 based) */
1:eac0369: 	protected static final int		SYSTABLES_TABLEID = 1;
1:eac0369: 	protected static final int		SYSTABLES_TABLENAME = 2;
1:eac0369: 	protected static final int		SYSTABLES_TABLETYPE = 3;
1:eac0369: 	protected static final int		SYSTABLES_SCHEMAID = 4;
1:eac0369: 	protected static final int		SYSTABLES_LOCKGRANULARITY = 5;
1:eac0369: 
1:eac0369: 	protected static final int		SYSTABLES_INDEX1_ID = 0;
1:eac0369: 	protected static final int		SYSTABLES_INDEX1_TABLENAME = 1;
1:eac0369: 	protected static final int		SYSTABLES_INDEX1_SCHEMAID = 2;
1:eac0369: 
1:eac0369: 	protected static final int		SYSTABLES_INDEX2_ID = 1;
1:eac0369: 	protected static final int		SYSTABLES_INDEX2_TABLEID = 1;
1:eac0369: 	
1:eac0369: 	// all indexes are unique.
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "80000018-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1:eac0369: 		,"80000028-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1:eac0369: 		,"8000001a-00d0-fd77-3ed8-000a0a0b1900"	// SYSTABLES_INDEX1
1:eac0369: 		,"8000001c-00d0-fd77-3ed8-000a0a0b1900"	// SYSTABLES_INDEX2
2:eac0369: 	};
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions = 
1:eac0369: 	{ 
1:eac0369: 		{ SYSTABLES_TABLENAME, SYSTABLES_SCHEMAID},
1:eac0369: 		{ SYSTABLES_TABLEID }
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSTABLESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:c2ff613: 		initInfo(SYSTABLES_COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, (boolean[]) null, uuids);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a SYSTABLES row
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSTABLES.
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td,
1:eac0369: 						   TupleDescriptor	parent)
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		UUID						oid;
1:eac0369: 		String	   				tabSType = null;
1:eac0369: 		int	   					tabIType;
1:eac0369: 		ExecRow        			row;
1:eac0369: 		String					lockGranularity = null;
1:eac0369: 		String					tableID = null;
1:eac0369: 		String					schemaID = null;
1:eac0369: 		String					tableName = null;
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** We only allocate a new UUID if the descriptor doesn't already have one.
1:eac0369: 			** For descriptors replicated from a Source system, we already have an UUID.
1:eac0369: 			*/
1:eac0369: 			TableDescriptor descriptor = (TableDescriptor)td;
1:eac0369: 			SchemaDescriptor schema = (SchemaDescriptor)parent;
1:eac0369: 
1:eac0369: 			oid = descriptor.getUUID();
1:eac0369: 			if ( oid == null )
1:eac0369: 		    {
1:eac0369: 				oid = getUUIDFactory().createUUID();
1:eac0369: 				descriptor.setUUID(oid);
1:eac0369: 			}
1:eac0369: 			tableID = oid.toString();
1:eac0369: 			
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				SanityManager.ASSERT(schema != null, 
1:eac0369: 							"Schema should not be null unless empty row is true");
1:eac0369: 				if (schema.getUUID() == null)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("schema " + schema + " has a null OID");
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		
1:eac0369: 			schemaID = schema.getUUID().toString();
1:eac0369: 
1:eac0369: 			tableName = descriptor.getName();
1:eac0369: 
1:eac0369: 			/* RESOLVE - Table Type should really be a char in the descriptor
1:582425f: 			 * T, S, V, S instead of 0, 1, 2, 3
1:eac0369: 			 */
1:eac0369: 			tabIType = descriptor.getTableType();
1:eac0369: 			switch (tabIType)
1:eac0369: 			{
1:eac0369: 			    case TableDescriptor.BASE_TABLE_TYPE:
1:eac0369: 					tabSType = "T";
1:eac0369: 					break;
1:eac0369: 			    case TableDescriptor.SYSTEM_TABLE_TYPE:
1:eac0369: 					tabSType = "S";
1:eac0369: 					break;
1:eac0369: 			    case TableDescriptor.VIEW_TYPE:
1:eac0369: 					tabSType = "V";
1:eac0369: 					break;		
1:eac0369: 
1:582425f: 			    case TableDescriptor.SYNONYM_TYPE:
1:582425f: 					tabSType = "A";
1:582425f: 					break;		
1:eac0369: 
1:eac0369: 			    default:
1:eac0369: 					if (SanityManager.DEBUG)
1:eac0369: 						SanityManager.THROWASSERT("invalid table type");
1:eac0369: 			}
1:eac0369: 			char[] lockGChar = new char[1];
1:eac0369: 			lockGChar[0] = descriptor.getLockGranularity();
1:eac0369: 			lockGranularity = new String(lockGChar);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Insert info into systables */
1:eac0369: 
1:eac0369: 		/* RESOLVE - It would be nice to require less knowledge about systables
1:eac0369: 		 * and have this be more table driven.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Build the row to insert  */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSTABLES_COLUMN_COUNT);
1:eac0369: 
1:eac0369: 		/* 1st column is TABLEID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSTABLES_TABLEID, new SQLChar(tableID));
1:eac0369: 
1:eac0369: 		/* 2nd column is NAME (varchar(30)) */
1:eb47bdb: 		row.setColumn(SYSTABLES_TABLENAME, new SQLVarchar(tableName));
1:eac0369: 
1:eac0369: 		/* 3rd column is TABLETYPE (char(1)) */
1:eb47bdb: 		row.setColumn(SYSTABLES_TABLETYPE, new SQLChar(tabSType));
1:eac0369: 
1:eac0369: 		/* 4th column is SCHEMAID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSTABLES_SCHEMAID, new SQLChar(schemaID));
1:eac0369: 
1:eac0369: 		/* 5th column is LOCKGRANULARITY (char(1)) */
1:eb47bdb: 		row.setColumn(SYSTABLES_LOCKGRANULARITY, new SQLChar(lockGranularity));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds an empty index row.
1:eac0369: 	 *
1:eac0369: 	 *	@param	indexNumber	Index to build empty row for.
1:eac0369: 	 *  @param  rowLocation	Row location for last column of index row
1:eac0369: 	 *
1:eac0369: 	 * @return corresponding empty index row
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:7aa6fa8: 	ExecIndexRow	buildEmptyIndexRow( int indexNumber,
1:eac0369: 											RowLocation rowLocation)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		int ncols = getIndexColumnCount(indexNumber);
1:eac0369: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1:eac0369: 
1:eac0369: 		row.setColumn(ncols + 1, rowLocation);
1:eac0369: 
1:eac0369: 		switch( indexNumber )
1:eac0369: 		{
1:eac0369: 		    case SYSTABLES_INDEX1_ID:
1:eac0369: 				/* 1st column is TABLENAME (varchar(128)) */
1:eb47bdb: 				row.setColumn(1, new SQLVarchar());
1:eac0369: 
1:eac0369: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
1:eb47bdb: 				row.setColumn(2, new SQLChar());
1:eac0369: 
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 		    case SYSTABLES_INDEX2_ID:
1:eac0369: 				/* 1st column is TABLEID (UUID - char(36)) */
1:eb47bdb: 				row.setColumn(1,new SQLChar());
1:eac0369: 				break;
1:eac0369: 		}	// end switch
1:eac0369: 
1:eac0369: 		return	row;
1:eac0369: 	}
1:eac0369: 
1:e4ada41: 	/**
1:e4ada41: 	 * Make a TableDescriptor out of a SYSTABLES row
1:e4ada41: 	 *
1:e4ada41: 	 * @param row a SYSTABLES row
1:e4ada41: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:e4ada41: 	 * @param dd dataDictionary
1:e4ada41: 	 * @param isolationLevel use this explicit isolation level. Only
1:e4ada41: 	 *                       ISOLATION_REPEATABLE_READ (normal usage)
1:e4ada41: 	 *                       or ISOLATION_READ_UNCOMMITTED (corner
1:e4ada41: 	 *                       cases) supported for now.
1:e4ada41: 	 * @exception   StandardException thrown on failure
1:e4ada41: 	 */
1:e4ada41: 	TupleDescriptor buildDescriptor(
1:e4ada41: 		ExecRow					row,
1:e4ada41: 		TupleDescriptor			parentTupleDescriptor,
1:e4ada41: 		DataDictionary 			dd,
1:e4ada41: 		int                     isolationLevel)
1:e4ada41: 					throws StandardException
1:e4ada41: 	{
1:e4ada41: 		return buildDescriptorBody(row,
1:e4ada41: 								   parentTupleDescriptor,
1:e4ada41: 								   dd,
1:e4ada41: 								   isolationLevel);
1:e4ada41: 	}
1:e4ada41: 
1:e4ada41: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a TableDescriptor out of a SYSTABLES row
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSTABLES row
1:eac0369: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @return	a table descriptor equivalent to a SYSTABLES row
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:e4ada41: 		return buildDescriptorBody(
1:e4ada41: 			row,
1:e4ada41: 			parentTupleDescriptor,
1:e4ada41: 			dd,
1:e4ada41: 			TransactionController.ISOLATION_REPEATABLE_READ);
1:e4ada41: 	}
1:e4ada41: 
1:e4ada41: 
1:e4ada41: 	public TupleDescriptor buildDescriptorBody(
1:e4ada41: 		ExecRow					row,
1:e4ada41: 		TupleDescriptor			parentTupleDescriptor,
1:e4ada41: 		DataDictionary 			dd,
1:e4ada41: 		int                     isolationLevel)
1:e4ada41: 					throws StandardException
1:e4ada41: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(row.nColumns() == SYSTABLES_COLUMN_COUNT, "Wrong number of columns for a SYSTABLES row");
1:eac0369: 
1:eac0369: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		String	tableUUIDString; 
1:eac0369: 		String	schemaUUIDString; 
1:eac0369: 		int		tableTypeEnum;
1:eac0369: 		String	lockGranularity;
1:eac0369: 		String	tableName, tableType;
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		UUID		tableUUID;
1:eac0369: 		UUID		schemaUUID;
1:eac0369: 		SchemaDescriptor	schema;
1:eac0369: 		TableDescriptor		tabDesc;
1:eac0369: 
1:eac0369: 		/* 1st column is TABLEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSTABLES_TABLEID);
1:eac0369: 		tableUUIDString = col.getString();
1:eac0369: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLENAME (varchar(128)) */
1:eac0369: 		col = row.getColumn(SYSTABLES_TABLENAME);
1:eac0369: 		tableName = col.getString();
1:eac0369: 
1:eac0369: 		/* 3rd column is TABLETYPE (char(1)) */
1:eac0369: 		col = row.getColumn(SYSTABLES_TABLETYPE);
1:eac0369: 		tableType = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(tableType.length() == 1, "Fourth column type incorrect");
1:eac0369: 		}
1:eac0369: 		switch (tableType.charAt(0))
1:eac0369: 		{
1:eac0369: 			case 'T' : 
1:eac0369: 				tableTypeEnum = TableDescriptor.BASE_TABLE_TYPE;
1:eac0369: 				break;
1:eac0369: 			case 'S' :
1:eac0369: 				tableTypeEnum = TableDescriptor.SYSTEM_TABLE_TYPE;
1:eac0369: 				break;
1:eac0369: 			case 'V' :
1:eac0369: 				tableTypeEnum = TableDescriptor.VIEW_TYPE;
1:eac0369: 				break;
1:582425f: 			case 'A' :
1:582425f: 				tableTypeEnum = TableDescriptor.SYNONYM_TYPE;
1:582425f: 				break;
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.THROWASSERT("Fourth column value invalid");
1:eac0369: 				tableTypeEnum = -1;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 4th column is SCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSTABLES_SCHEMAID);
1:eac0369: 		schemaUUIDString = col.getString();
1:eac0369: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
1:eac0369: 		
1:e4ada41: 		schema = dd.getSchemaDescriptor(schemaUUID, isolationLevel, null);
1:eac0369: 
1:eac0369: 		/* 5th column is LOCKGRANULARITY (char(1)) */
1:eac0369: 		col = row.getColumn(SYSTABLES_LOCKGRANULARITY);
1:eac0369: 		lockGranularity = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(lockGranularity.length() == 1, "Fifth column type incorrect");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// RESOLVE - Deal with lock granularity
1:eac0369: 		tabDesc = ddg.newTableDescriptor(tableName, schema, tableTypeEnum, lockGranularity.charAt(0));
1:eac0369: 		tabDesc.setUUID(tableUUID);
1:eac0369: 		return tabDesc;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Get the table name out of this SYSTABLES row
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSTABLES row
1:eac0369: 	 *
1:eac0369: 	 * @return	string, the table name
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	protected String getTableName(ExecRow	row)
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 
1:eac0369: 		col = row.getColumn(SYSTABLES_TABLENAME);
1:eac0369: 		return col.getString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[]	buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:082459a:         return new SystemColumn[] {
1:082459a:             SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:082459a:             SystemColumnImpl.getIdentifierColumn("TABLENAME", false),
1:082459a:             SystemColumnImpl.getIndicatorColumn("TABLETYPE"),
1:082459a:             SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:082459a:             SystemColumnImpl.getIndicatorColumn("LOCKGRANULARITY"),
1:082459a:         };
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e4ada41
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.access.TransactionController;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Make a TableDescriptor out of a SYSTABLES row
1: 	 *
1: 	 * @param row a SYSTABLES row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 * @param isolationLevel use this explicit isolation level. Only
1: 	 *                       ISOLATION_REPEATABLE_READ (normal usage)
1: 	 *                       or ISOLATION_READ_UNCOMMITTED (corner
1: 	 *                       cases) supported for now.
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd,
1: 		int                     isolationLevel)
1: 					throws StandardException
1: 	{
1: 		return buildDescriptorBody(row,
1: 								   parentTupleDescriptor,
1: 								   dd,
1: 								   isolationLevel);
1: 	}
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 		return buildDescriptorBody(
1: 			row,
1: 			parentTupleDescriptor,
1: 			dd,
1: 			TransactionController.ISOLATION_REPEATABLE_READ);
1: 	}
1: 
1: 
1: 	public TupleDescriptor buildDescriptorBody(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd,
1: 		int                     isolationLevel)
1: 					throws StandardException
1: 	{
/////////////////////////////////////////////////////////////////////////
1: 		schema = dd.getSchemaDescriptor(schemaUUID, isolationLevel, null);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSTABLESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:082459a
/////////////////////////////////////////////////////////////////////////
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:             SystemColumnImpl.getIdentifierColumn("TABLENAME", false),
1:             SystemColumnImpl.getIndicatorColumn("TABLETYPE"),
1:             SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:             SystemColumnImpl.getIndicatorColumn("LOCKGRANULARITY"),
1:         };
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(SYSTABLES_TABLEID, new SQLChar(tableID));
1: 		row.setColumn(SYSTABLES_TABLENAME, new SQLVarchar(tableName));
1: 		row.setColumn(SYSTABLES_TABLETYPE, new SQLChar(tabSType));
1: 		row.setColumn(SYSTABLES_SCHEMAID, new SQLChar(schemaID));
1: 		row.setColumn(SYSTABLES_LOCKGRANULARITY, new SQLChar(lockGranularity));
/////////////////////////////////////////////////////////////////////////
1: 				row.setColumn(1, new SQLVarchar());
1: 				row.setColumn(2, new SQLChar());
1: 				row.setColumn(1,new SQLChar());
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
1: class SYSTABLESRowFactory extends CatalogRowFactory
/////////////////////////////////////////////////////////////////////////
0:     SYSTABLESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
/////////////////////////////////////////////////////////////////////////
1: 	ExecIndexRow	buildEmptyIndexRow( int indexNumber,
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		initInfo(SYSTABLES_COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, (boolean[]) null, uuids);
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:345de35
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 2000, 2001WESTHAM
1: 
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: 
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: /**
1:  * Factory for creating a SYSTABLES row.
1:  *
1:  *
1:  * @version 0.1
0:  * @author Rick Hillegas (extracted from DataDictionaryImpl).
1:  */
1: 
0: public class SYSTABLESRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
1: 	private static final String		TABLENAME_STRING = "SYSTABLES";
1: 
1: 	protected static final int		SYSTABLES_COLUMN_COUNT = 5;
1: 	/* Column #s for systables (1 based) */
1: 	protected static final int		SYSTABLES_TABLEID = 1;
1: 	protected static final int		SYSTABLES_TABLENAME = 2;
1: 	protected static final int		SYSTABLES_TABLETYPE = 3;
1: 	protected static final int		SYSTABLES_SCHEMAID = 4;
1: 	protected static final int		SYSTABLES_LOCKGRANULARITY = 5;
1: 
1: 	protected static final int		SYSTABLES_INDEX1_ID = 0;
1: 	protected static final int		SYSTABLES_INDEX1_TABLENAME = 1;
1: 	protected static final int		SYSTABLES_INDEX1_SCHEMAID = 2;
1: 
1: 	protected static final int		SYSTABLES_INDEX2_ID = 1;
1: 	protected static final int		SYSTABLES_INDEX2_TABLEID = 1;
1: 	
1: 	// all indexes are unique.
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "80000018-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1: 		,"80000028-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1: 		,"8000001a-00d0-fd77-3ed8-000a0a0b1900"	// SYSTABLES_INDEX1
1: 		,"8000001c-00d0-fd77-3ed8-000a0a0b1900"	// SYSTABLES_INDEX2
1: 	};
1: 
1: 	private static final int[][] indexColumnPositions = 
1: 	{ 
1: 		{ SYSTABLES_TABLENAME, SYSTABLES_SCHEMAID},
1: 		{ SYSTABLES_TABLEID }
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"TABLENAME", "SCHEMAID"},
0: 		{"TABLEID"}
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSTABLESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                 boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSTABLES_COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexColumnNames, (boolean[]) null, uuids);
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a SYSTABLES row
1: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param descriptor	Table descriptor
0: 	 * @param schema	Schema descriptor
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSTABLES.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeRow(TupleDescriptor td,
1: 						   TupleDescriptor	parent)
1: 					throws StandardException
1: 	{
1: 		UUID						oid;
1: 		String	   				tabSType = null;
1: 		int	   					tabIType;
1: 		ExecRow        			row;
1: 		String					lockGranularity = null;
1: 		String					tableID = null;
1: 		String					schemaID = null;
1: 		String					tableName = null;
1: 
1: 
1: 		if (td != null)
1: 		{
1: 			/*
1: 			** We only allocate a new UUID if the descriptor doesn't already have one.
1: 			** For descriptors replicated from a Source system, we already have an UUID.
1: 			*/
1: 			TableDescriptor descriptor = (TableDescriptor)td;
1: 			SchemaDescriptor schema = (SchemaDescriptor)parent;
1: 
1: 			oid = descriptor.getUUID();
1: 			if ( oid == null )
1: 		    {
1: 				oid = getUUIDFactory().createUUID();
1: 				descriptor.setUUID(oid);
1: 			}
1: 			tableID = oid.toString();
1: 			
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				SanityManager.ASSERT(schema != null, 
1: 							"Schema should not be null unless empty row is true");
1: 				if (schema.getUUID() == null)
1: 				{
1: 					SanityManager.THROWASSERT("schema " + schema + " has a null OID");
1: 				}
1: 			}
1: 		
1: 			schemaID = schema.getUUID().toString();
1: 
1: 			tableName = descriptor.getName();
1: 
1: 			/* RESOLVE - Table Type should really be a char in the descriptor
0: 			 * T, S, V instead of 0, 1, 2
1: 			 */
1: 			tabIType = descriptor.getTableType();
1: 			switch (tabIType)
1: 			{
1: 			    case TableDescriptor.BASE_TABLE_TYPE:
1: 					tabSType = "T";
1: 					break;
1: 			    case TableDescriptor.SYSTEM_TABLE_TYPE:
1: 					tabSType = "S";
1: 					break;
1: 			    case TableDescriptor.VIEW_TYPE:
1: 					tabSType = "V";
1: 					break;		
1: 
1: 			    default:
1: 					if (SanityManager.DEBUG)
1: 						SanityManager.THROWASSERT("invalid table type");
1: 			}
1: 			char[] lockGChar = new char[1];
1: 			lockGChar[0] = descriptor.getLockGranularity();
1: 			lockGranularity = new String(lockGChar);
1: 		}
1: 
1: 		/* Insert info into systables */
1: 
1: 		/* RESOLVE - It would be nice to require less knowledge about systables
1: 		 * and have this be more table driven.
1: 		 */
1: 
1: 		/* Build the row to insert  */
1: 		row = getExecutionFactory().getValueRow(SYSTABLES_COLUMN_COUNT);
1: 
1: 		/* 1st column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(SYSTABLES_TABLEID, dvf.getCharDataValue(tableID));
1: 
1: 		/* 2nd column is NAME (varchar(30)) */
0: 		row.setColumn(SYSTABLES_TABLENAME, dvf.getVarcharDataValue(tableName));
1: 
1: 		/* 3rd column is TABLETYPE (char(1)) */
0: 		row.setColumn(SYSTABLES_TABLETYPE, dvf.getCharDataValue(tabSType));
1: 
1: 		/* 4th column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSTABLES_SCHEMAID, dvf.getCharDataValue(schemaID));
1: 
1: 		/* 5th column is LOCKGRANULARITY (char(1)) */
0: 		row.setColumn(SYSTABLES_LOCKGRANULARITY, dvf.getCharDataValue(lockGranularity));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
1: 	 * Builds an empty index row.
1: 	 *
1: 	 *	@param	indexNumber	Index to build empty row for.
1: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
1: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
1: 											RowLocation rowLocation)
1: 			throws StandardException
1: 	{
1: 		int ncols = getIndexColumnCount(indexNumber);
1: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1: 
1: 		row.setColumn(ncols + 1, rowLocation);
1: 
1: 		switch( indexNumber )
1: 		{
1: 		    case SYSTABLES_INDEX1_ID:
1: 				/* 1st column is TABLENAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
1: 
1: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
1: 
1: 				break;
1: 
1: 		    case SYSTABLES_INDEX2_ID:
1: 				/* 1st column is TABLEID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 				break;
1: 		}	// end switch
1: 
1: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a TableDescriptor out of a SYSTABLES row
1: 	 *
1: 	 * @param row a SYSTABLES row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @return	a table descriptor equivalent to a SYSTABLES row
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(row.nColumns() == SYSTABLES_COLUMN_COUNT, "Wrong number of columns for a SYSTABLES row");
1: 
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		String	tableUUIDString; 
1: 		String	schemaUUIDString; 
1: 		int		tableTypeEnum;
1: 		String	lockGranularity;
1: 		String	tableName, tableType;
1: 		DataValueDescriptor	col;
1: 		UUID		tableUUID;
1: 		UUID		schemaUUID;
1: 		SchemaDescriptor	schema;
1: 		TableDescriptor		tabDesc;
1: 
1: 		/* 1st column is TABLEID (UUID - char(36)) */
1: 		col = row.getColumn(SYSTABLES_TABLEID);
1: 		tableUUIDString = col.getString();
1: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1: 
1: 
1: 		/* 2nd column is TABLENAME (varchar(128)) */
1: 		col = row.getColumn(SYSTABLES_TABLENAME);
1: 		tableName = col.getString();
1: 
1: 		/* 3rd column is TABLETYPE (char(1)) */
1: 		col = row.getColumn(SYSTABLES_TABLETYPE);
1: 		tableType = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(tableType.length() == 1, "Fourth column type incorrect");
1: 		}
1: 		switch (tableType.charAt(0))
1: 		{
1: 			case 'T' : 
1: 				tableTypeEnum = TableDescriptor.BASE_TABLE_TYPE;
1: 				break;
1: 			case 'S' :
1: 				tableTypeEnum = TableDescriptor.SYSTEM_TABLE_TYPE;
1: 				break;
1: 			case 'V' :
1: 				tableTypeEnum = TableDescriptor.VIEW_TYPE;
1: 				break;
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				SanityManager.THROWASSERT("Fourth column value invalid");
1: 				tableTypeEnum = -1;
1: 		}
1: 
1: 		/* 4th column is SCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(SYSTABLES_SCHEMAID);
1: 		schemaUUIDString = col.getString();
1: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
1: 		
0: 		schema = dd.getSchemaDescriptor(schemaUUID, null);
1: 
1: 		/* 5th column is LOCKGRANULARITY (char(1)) */
1: 		col = row.getColumn(SYSTABLES_LOCKGRANULARITY);
1: 		lockGranularity = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(lockGranularity.length() == 1, "Fifth column type incorrect");
1: 		}
1: 
1: 		// RESOLVE - Deal with lock granularity
1: 		tabDesc = ddg.newTableDescriptor(tableName, schema, tableTypeEnum, lockGranularity.charAt(0));
1: 		tabDesc.setUUID(tableUUID);
1: 		return tabDesc;
1: 	}
1: 
1: 	/**
1: 	 *	Get the table name out of this SYSTABLES row
1: 	 *
1: 	 * @param row a SYSTABLES row
1: 	 *
1: 	 * @return	string, the table name
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	protected String getTableName(ExecRow	row)
1: 					throws StandardException
1: 	{
1: 		DataValueDescriptor	col;
1: 
1: 		col = row.getColumn(SYSTABLES_TABLENAME);
1: 		return col.getString();
1: 	}
1: 
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		SystemColumn[]			columnList = new SystemColumn[SYSTABLES_COLUMN_COUNT];
1: 
0: 		// describe columns
1: 
0: 		columnList[0] = new SystemColumnImpl(	
0: 								convertIdCase( "TABLEID"),			// column name
0: 								SYSTABLES_TABLEID,	// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
1: 
0: 		columnList[1] = new SystemColumnImpl(		// SQLIDENTIFIER
0: 								convertIdCase( "TABLENAME"),		// column name
0: 								SYSTABLES_TABLENAME, 	// column number
0: 								false				// nullability
0: 			                   );
1: 
0: 		columnList[2] = new SystemColumnImpl(	
0: 								convertIdCase( "TABLETYPE"),		// column name
0: 								SYSTABLES_TABLETYPE,// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								1					// maxLength
0: 			                   );
1: 
0: 		columnList[3] = new SystemColumnImpl(	
0: 								convertIdCase( "SCHEMAID"),			// column name
0: 								SYSTABLES_SCHEMAID,	// schema number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
1: 
0: 		columnList[4] = new SystemColumnImpl(	
0: 								convertIdCase( "LOCKGRANULARITY"),		// column name
0: 								SYSTABLES_LOCKGRANULARITY,// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								1					// maxLength
0: 			                   );
1: 
0: 		return	columnList;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:582425f
/////////////////////////////////////////////////////////////////////////
1: 			 * T, S, V, S instead of 0, 1, 2, 3
/////////////////////////////////////////////////////////////////////////
1: 			    case TableDescriptor.SYNONYM_TYPE:
1: 					tabSType = "A";
1: 					break;		
0: 
/////////////////////////////////////////////////////////////////////////
1: 			case 'A' :
1: 				tableTypeEnum = TableDescriptor.SYNONYM_TYPE;
1: 				break;
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: /**
0:  * Factory for creating a SYSTABLES row.
0:  *
0:  *
0:  * @version 0.1
0:  * @author Rick Hillegas (extracted from DataDictionaryImpl).
0:  */
0: 
0: public class SYSTABLESRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
0: 	private static final String		TABLENAME_STRING = "SYSTABLES";
0: 
0: 	protected static final int		SYSTABLES_COLUMN_COUNT = 5;
0: 	/* Column #s for systables (1 based) */
0: 	protected static final int		SYSTABLES_TABLEID = 1;
0: 	protected static final int		SYSTABLES_TABLENAME = 2;
0: 	protected static final int		SYSTABLES_TABLETYPE = 3;
0: 	protected static final int		SYSTABLES_SCHEMAID = 4;
0: 	protected static final int		SYSTABLES_LOCKGRANULARITY = 5;
0: 
0: 	protected static final int		SYSTABLES_INDEX1_ID = 0;
0: 	protected static final int		SYSTABLES_INDEX1_TABLENAME = 1;
0: 	protected static final int		SYSTABLES_INDEX1_SCHEMAID = 2;
0: 
0: 	protected static final int		SYSTABLES_INDEX2_ID = 1;
0: 	protected static final int		SYSTABLES_INDEX2_TABLEID = 1;
0: 	
0: 	// all indexes are unique.
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "80000018-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
0: 		,"80000028-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
0: 		,"8000001a-00d0-fd77-3ed8-000a0a0b1900"	// SYSTABLES_INDEX1
0: 		,"8000001c-00d0-fd77-3ed8-000a0a0b1900"	// SYSTABLES_INDEX2
0: 	};
0: 
0: 	private static final int[][] indexColumnPositions = 
0: 	{ 
0: 		{ SYSTABLES_TABLENAME, SYSTABLES_SCHEMAID},
0: 		{ SYSTABLES_TABLEID }
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"TABLENAME", "SCHEMAID"},
0: 		{"TABLEID"}
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSTABLESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                 boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSTABLES_COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexColumnNames, (boolean[]) null, uuids);
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a SYSTABLES row
0: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param descriptor	Table descriptor
0: 	 * @param schema	Schema descriptor
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSTABLES.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ExecRow makeRow(TupleDescriptor td,
0: 						   TupleDescriptor	parent)
0: 					throws StandardException
0: 	{
0: 		UUID						oid;
0: 		String	   				tabSType = null;
0: 		int	   					tabIType;
0: 		ExecRow        			row;
0: 		String					lockGranularity = null;
0: 		String					tableID = null;
0: 		String					schemaID = null;
0: 		String					tableName = null;
0: 
0: 
0: 		if (td != null)
0: 		{
0: 			/*
0: 			** We only allocate a new UUID if the descriptor doesn't already have one.
0: 			** For descriptors replicated from a Source system, we already have an UUID.
0: 			*/
0: 			TableDescriptor descriptor = (TableDescriptor)td;
0: 			SchemaDescriptor schema = (SchemaDescriptor)parent;
0: 
0: 			oid = descriptor.getUUID();
0: 			if ( oid == null )
0: 		    {
0: 				oid = getUUIDFactory().createUUID();
0: 				descriptor.setUUID(oid);
0: 			}
0: 			tableID = oid.toString();
0: 			
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				SanityManager.ASSERT(schema != null, 
0: 							"Schema should not be null unless empty row is true");
0: 				if (schema.getUUID() == null)
0: 				{
0: 					SanityManager.THROWASSERT("schema " + schema + " has a null OID");
0: 				}
0: 			}
0: 		
0: 			schemaID = schema.getUUID().toString();
0: 
0: 			tableName = descriptor.getName();
0: 
0: 			/* RESOLVE - Table Type should really be a char in the descriptor
0: 			 * T, S, V instead of 0, 1, 2
0: 			 */
0: 			tabIType = descriptor.getTableType();
0: 			switch (tabIType)
0: 			{
0: 			    case TableDescriptor.BASE_TABLE_TYPE:
0: 					tabSType = "T";
0: 					break;
0: 			    case TableDescriptor.SYSTEM_TABLE_TYPE:
0: 					tabSType = "S";
0: 					break;
0: 			    case TableDescriptor.VIEW_TYPE:
0: 					tabSType = "V";
0: 					break;		
0: 
0: 			    default:
0: 					if (SanityManager.DEBUG)
0: 						SanityManager.THROWASSERT("invalid table type");
0: 			}
0: 			char[] lockGChar = new char[1];
0: 			lockGChar[0] = descriptor.getLockGranularity();
0: 			lockGranularity = new String(lockGChar);
0: 		}
0: 
0: 		/* Insert info into systables */
0: 
0: 		/* RESOLVE - It would be nice to require less knowledge about systables
0: 		 * and have this be more table driven.
0: 		 */
0: 
0: 		/* Build the row to insert  */
0: 		row = getExecutionFactory().getValueRow(SYSTABLES_COLUMN_COUNT);
0: 
0: 		/* 1st column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(SYSTABLES_TABLEID, dvf.getCharDataValue(tableID));
0: 
0: 		/* 2nd column is NAME (varchar(30)) */
0: 		row.setColumn(SYSTABLES_TABLENAME, dvf.getVarcharDataValue(tableName));
0: 
0: 		/* 3rd column is TABLETYPE (char(1)) */
0: 		row.setColumn(SYSTABLES_TABLETYPE, dvf.getCharDataValue(tabSType));
0: 
0: 		/* 4th column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSTABLES_SCHEMAID, dvf.getCharDataValue(schemaID));
0: 
0: 		/* 5th column is LOCKGRANULARITY (char(1)) */
0: 		row.setColumn(SYSTABLES_LOCKGRANULARITY, dvf.getCharDataValue(lockGranularity));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation)
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1, rowLocation);
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSTABLES_INDEX1_ID:
0: 				/* 1st column is TABLENAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 
0: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    case SYSTABLES_INDEX2_ID:
0: 				/* 1st column is TABLEID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a TableDescriptor out of a SYSTABLES row
0: 	 *
0: 	 * @param row a SYSTABLES row
0: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @return	a table descriptor equivalent to a SYSTABLES row
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(row.nColumns() == SYSTABLES_COLUMN_COUNT, "Wrong number of columns for a SYSTABLES row");
0: 
0: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
0: 
0: 		String	tableUUIDString; 
0: 		String	schemaUUIDString; 
0: 		int		tableTypeEnum;
0: 		String	lockGranularity;
0: 		String	tableName, tableType;
0: 		DataValueDescriptor	col;
0: 		UUID		tableUUID;
0: 		UUID		schemaUUID;
0: 		SchemaDescriptor	schema;
0: 		TableDescriptor		tabDesc;
0: 
0: 		/* 1st column is TABLEID (UUID - char(36)) */
0: 		col = row.getColumn(SYSTABLES_TABLEID);
0: 		tableUUIDString = col.getString();
0: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
0: 
0: 
0: 		/* 2nd column is TABLENAME (varchar(128)) */
0: 		col = row.getColumn(SYSTABLES_TABLENAME);
0: 		tableName = col.getString();
0: 
0: 		/* 3rd column is TABLETYPE (char(1)) */
0: 		col = row.getColumn(SYSTABLES_TABLETYPE);
0: 		tableType = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(tableType.length() == 1, "Fourth column type incorrect");
0: 		}
0: 		switch (tableType.charAt(0))
0: 		{
0: 			case 'T' : 
0: 				tableTypeEnum = TableDescriptor.BASE_TABLE_TYPE;
0: 				break;
0: 			case 'S' :
0: 				tableTypeEnum = TableDescriptor.SYSTEM_TABLE_TYPE;
0: 				break;
0: 			case 'V' :
0: 				tableTypeEnum = TableDescriptor.VIEW_TYPE;
0: 				break;
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Fourth column value invalid");
0: 				tableTypeEnum = -1;
0: 		}
0: 
0: 		/* 4th column is SCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(SYSTABLES_SCHEMAID);
0: 		schemaUUIDString = col.getString();
0: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
0: 		
0: 		schema = dd.getSchemaDescriptor(schemaUUID, null);
0: 
0: 		/* 5th column is LOCKGRANULARITY (char(1)) */
0: 		col = row.getColumn(SYSTABLES_LOCKGRANULARITY);
0: 		lockGranularity = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(lockGranularity.length() == 1, "Fifth column type incorrect");
0: 		}
0: 
0: 		// RESOLVE - Deal with lock granularity
0: 		tabDesc = ddg.newTableDescriptor(tableName, schema, tableTypeEnum, lockGranularity.charAt(0));
0: 		tabDesc.setUUID(tableUUID);
0: 		return tabDesc;
0: 	}
0: 
0: 	/**
0: 	 *	Get the table name out of this SYSTABLES row
0: 	 *
0: 	 * @param row a SYSTABLES row
0: 	 *
0: 	 * @return	string, the table name
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	protected String getTableName(ExecRow	row)
0: 					throws StandardException
0: 	{
0: 		DataValueDescriptor	col;
0: 
0: 		col = row.getColumn(SYSTABLES_TABLENAME);
0: 		return col.getString();
0: 	}
0: 
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		SystemColumn[]			columnList = new SystemColumn[SYSTABLES_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 
0: 		columnList[0] = new SystemColumnImpl(	
0: 								convertIdCase( "TABLEID"),			// column name
0: 								SYSTABLES_TABLEID,	// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
0: 
0: 		columnList[1] = new SystemColumnImpl(		// SQLIDENTIFIER
0: 								convertIdCase( "TABLENAME"),		// column name
0: 								SYSTABLES_TABLENAME, 	// column number
0: 								false				// nullability
0: 			                   );
0: 
0: 		columnList[2] = new SystemColumnImpl(	
0: 								convertIdCase( "TABLETYPE"),		// column name
0: 								SYSTABLES_TABLETYPE,// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								1					// maxLength
0: 			                   );
0: 
0: 		columnList[3] = new SystemColumnImpl(	
0: 								convertIdCase( "SCHEMAID"),			// column name
0: 								SYSTABLES_SCHEMAID,	// schema number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
0: 
0: 		columnList[4] = new SystemColumnImpl(	
0: 								convertIdCase( "LOCKGRANULARITY"),		// column name
0: 								SYSTABLES_LOCKGRANULARITY,// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								1					// maxLength
0: 			                   );
0: 
0: 		return	columnList;
0: 	}
0: 
0: }
============================================================================