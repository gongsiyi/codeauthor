1:6de7104: /*
4:6de7104: 
1:6de7104:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.TestRoutines
1:6de7104: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:6de7104: 
1:6de7104:       http://www.apache.org/licenses/LICENSE-2.0
1:6de7104: 
1:6de7104:    Unless required by applicable law or agreed to in writing, software
1:6de7104:    distributed under the License is distributed on an "AS IS" BASIS,
1:6de7104:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6de7104:    See the License for the specific language governing permissions and
1:6de7104:    limitations under the License.
1:6de7104: 
1:6de7104:  */
1:6de7104: 
1:6de7104: package org.apache.derbyTesting.functionTests.util;
1:6de7104: 
1:8fd20be: import java.security.AccessController;
1:8fd20be: import java.security.PrivilegedAction;
1:f8d398b: import java.security.PrivilegedActionException;
1:f8d398b: import java.security.PrivilegedExceptionAction;
1:6de7104: import java.sql.*;
1:6de7104: import java.io.*;
1:f8d398b: 
1:6de7104: 
1:6de7104: /**
1:6de7104: 	Utility methods for tests routines, in order to bring some consistency to test output.
1:6de7104: 	Any routines added here should be general purpose in nature, not specific to
1:6de7104: 	a single test.
1:6de7104: 
1:6de7104: 	Add a public static method for the test and then add its creation as a procedure
1:6de7104: 	or function in installRoutines.
1:6de7104: */
1:6de7104: public class TestRoutines {
1:6de7104: 
1:6de7104: 	/**
1:6de7104: 		A single procedure to create all the routines in this file.
1:6de7104: 		The script to run this is in testRoutines.sql
1:6de7104: 	*/
1:6de7104: 	public static void installRoutines() throws SQLException {
1:6de7104: 
1:6de7104: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
1:6de7104: 
1:6de7104: 		TestRoutines.installRoutines(conn);
1:6de7104: 
1:6de7104: 	}
1:6de7104: 
1:6de7104: 	/**
1:6de7104: 		Easy way to install all the routines from a Java test program.
1:6de7104: 		Just call with a valid connection.
1:6de7104: 		org.apache.derbyTesting.functionTests.util.TestRoutines.installRoutines(conn);
1:6de7104: 	*/
1:6de7104: 	public static void installRoutines(Connection conn) throws SQLException {
1:6de7104: 
1:6de7104: 		Statement s = conn.createStatement();
1:6de7104: 
1:6de7104: 		// setSystemProperty
1:6de7104: 		s.execute("CREATE PROCEDURE TESTROUTINE.SET_SYSTEM_PROPERTY(IN PROPERTY_KEY VARCHAR(32000), IN PROPERTY_VALUE VARCHAR(32000)) NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.setSystemProperty' language java parameter style java");
1:6de7104: 
1:6de7104: 		// sleep
1:6de7104: 		s.execute("CREATE PROCEDURE TESTROUTINE.SLEEP(IN SLEEP_TIME_MS BIGINT) NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.sleep' language java parameter style java");
1:6de7104: 
1:f32e51e: 		s.execute("CREATE FUNCTION TESTROUTINE.HAS_SECURITY_MANAGER() RETURNS INT NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.hasSecurityManager' language java parameter style java");
1:f32e51e: 
1:f8d398b: 		s.execute("CREATE FUNCTION TESTROUTINE.READ_FILE(FILE_NAME VARCHAR(60), ENCODING VARCHAR(60)) RETURNS VARCHAR(32000) NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.readFile' language java parameter style java");
1:6de7104: 		s.close();
1:6de7104: 	}
1:6de7104: 
1:6de7104: 
1:6de7104: 	/**
1:6de7104: 		TESTROUTINE.SET_SYSTEM_PROPERTY(IN PROPERTY_KEY VARCHAR(32000), IN PROPERTY_VALUE VARCHAR(32000))
1:6de7104: 		Set a system property
1:6de7104: 	*/
1:8fd20be: 	public static void setSystemProperty(final String key, final String value) {
1:8fd20be: 		
1:8fd20be: 		// needs to run in a privileged block as it will be
1:8fd20be: 		// called through a SQL statement and thus a generated
1:8fd20be: 		// class. The generated class on the stack has no permissions
1:8fd20be: 		// granted to it.
1:3f5c48a: 		AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:3f5c48a:             public Void run() {
1:8fd20be:             	System.setProperty(key, value);
1:8fd20be:                 return null; // nothing to return
1:8fd20be:             }
1:8fd20be:         });
1:8fd20be: 		
1:6de7104: 	}
1:6de7104: 	/**
1:6de7104: 		TESTROUTINE.SLEEP(IN TIME_MS BIGINT)
1:6de7104: 		Sleep for a number of milli-seconds.
1:6de7104: 	*/
1:6de7104: 	public static void sleep(long ms) throws InterruptedException {
1:6de7104: 
1:6de7104: 		Thread.sleep(ms);
1:6de7104: 	}
1:f32e51e: 	
1:f32e51e: 	/**
1:f32e51e: 	 * TESTROUTINE.HAS_SECURITY_MANAGER()
1:df4020d: 	 * @return 0 if no security manager is installed, 1 if one is.
1:f32e51e: 	 */
1:f32e51e: 	public static int hasSecurityManager()
1:f32e51e: 	{
1:f32e51e: 		return System.getSecurityManager() == null ? 0 : 1;
1:f32e51e: 	}
1:f8d398b: 	
1:f8d398b: 	/**
1:f8d398b: 	TESTROUTINE.READ_FILE(FILE_NAME VARCHAR(60), ENCODING VARCHAR(60)) RETURNS VARCHAR(32000)
1:f8d398b: 	Read a file using the passed in encoding display its contents
1:f8d398b: 	as ASCII with unicode esacpes..
1:f8d398b: 	 * @throws PrivilegedActionException 
1:f8d398b: 	 * @throws IOException 
1:f8d398b:    */
1:f8d398b:     public static String readFile(final String fileName, final String encoding)
1:f8d398b:     throws PrivilegedActionException, IOException
1:f8d398b:     {
1:f8d398b: 
1:f8d398b: 		// needs to run in a privileged block as it will be
1:f8d398b: 		// called through a SQL statement and thus a generated
1:f8d398b: 		// class. The generated class on the stack has no permissions
1:f8d398b: 		// granted to it.
1:3f5c48a:         FileInputStream fin = AccessController.doPrivileged(
1:3f5c48a:         new PrivilegedExceptionAction<FileInputStream>() {
1:3f5c48a:             public FileInputStream run() throws FileNotFoundException {
1:f8d398b: 				return new FileInputStream(fileName); // nothing to return
1:f8d398b: 			}
1:f8d398b: 		});
1:f8d398b:     	
1:f8d398b:     	InputStreamReader isr = new InputStreamReader(
1:f8d398b:     			new BufferedInputStream(fin, 32*1024), encoding);
1:f8d398b:     	    	
1:f8d398b:     	StringBuffer sb = new StringBuffer();
1:f8d398b:     	for (;;)
1:f8d398b:     	{
1:f8d398b:     		int ci = isr.read();
1:f8d398b:     		if (ci < 0)
1:f8d398b:     			break;
1:f8d398b:     		
1:f8d398b:     		if (ci <= 0x7f)
1:f8d398b:     		{
1:f8d398b:     			sb.append((char) ci);
1:f8d398b:     		}
1:f8d398b:     		else
1:f8d398b:     		{
1:f8d398b:     			sb.append("\\u");
1:f8d398b:     			String hex = Integer.toHexString(ci);
1:f8d398b:     			   			
1:f8d398b:     			switch (hex.length())
1:f8d398b:     			{
1:f8d398b:     			case 2:
1:f8d398b:     				sb.append("00");
1:f8d398b:     				break;
1:f8d398b:     			case 3:
1:f8d398b:     				sb.append("0");
1:f8d398b:     				break;
1:f8d398b:     			}
1:f8d398b:     			sb.append(hex);
1:f8d398b:     		}
1:f8d398b:       	}
1:f8d398b: 
1:f8d398b:     	return sb.toString();
1:f8d398b: 	}
1:6de7104: }
1:6de7104: 
1:6de7104: 
1:6de7104: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:             public Void run() {
/////////////////////////////////////////////////////////////////////////
1:         FileInputStream fin = AccessController.doPrivileged(
1:         new PrivilegedExceptionAction<FileInputStream>() {
1:             public FileInputStream run() throws FileNotFoundException {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
1: 	 * @return 0 if no security manager is installed, 1 if one is.
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f8d398b
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		s.execute("CREATE FUNCTION TESTROUTINE.READ_FILE(FILE_NAME VARCHAR(60), ENCODING VARCHAR(60)) RETURNS VARCHAR(32000) NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.readFile' language java parameter style java");
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	TESTROUTINE.READ_FILE(FILE_NAME VARCHAR(60), ENCODING VARCHAR(60)) RETURNS VARCHAR(32000)
1: 	Read a file using the passed in encoding display its contents
1: 	as ASCII with unicode esacpes..
1: 	 * @throws PrivilegedActionException 
1: 	 * @throws IOException 
1:    */
1:     public static String readFile(final String fileName, final String encoding)
1:     throws PrivilegedActionException, IOException
1:     {
1: 
1: 		// needs to run in a privileged block as it will be
1: 		// called through a SQL statement and thus a generated
1: 		// class. The generated class on the stack has no permissions
1: 		// granted to it.
0:     	FileInputStream fin = (FileInputStream)
0:     	    AccessController.doPrivileged(new PrivilegedExceptionAction() {
0: 			public Object run() throws FileNotFoundException {
1: 				return new FileInputStream(fileName); // nothing to return
1: 			}
1: 		});
1:     	
1:     	InputStreamReader isr = new InputStreamReader(
1:     			new BufferedInputStream(fin, 32*1024), encoding);
1:     	    	
1:     	StringBuffer sb = new StringBuffer();
1:     	for (;;)
1:     	{
1:     		int ci = isr.read();
1:     		if (ci < 0)
1:     			break;
1:     		
1:     		if (ci <= 0x7f)
1:     		{
1:     			sb.append((char) ci);
1:     		}
1:     		else
1:     		{
1:     			sb.append("\\u");
1:     			String hex = Integer.toHexString(ci);
1:     			   			
1:     			switch (hex.length())
1:     			{
1:     			case 2:
1:     				sb.append("00");
1:     				break;
1:     			case 3:
1:     				sb.append("0");
1:     				break;
1:     			}
1:     			sb.append(hex);
1:     		}
1:       	}
1: 
1:     	return sb.toString();
1: 	}
commit:f32e51e
/////////////////////////////////////////////////////////////////////////
1: 		s.execute("CREATE FUNCTION TESTROUTINE.HAS_SECURITY_MANAGER() RETURNS INT NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.hasSecurityManager' language java parameter style java");
1: 
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * TESTROUTINE.HAS_SECURITY_MANAGER()
0: 	 * Return 0 is no security manager is installed, 1 if one is.
0: 	 * @return
1: 	 */
1: 	public static int hasSecurityManager()
1: 	{
1: 		return System.getSecurityManager() == null ? 0 : 1;
1: 	}
commit:8fd20be
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 	public static void setSystemProperty(final String key, final String value) {
1: 		
1: 		// needs to run in a privileged block as it will be
1: 		// called through a SQL statement and thus a generated
1: 		// class. The generated class on the stack has no permissions
1: 		// granted to it.
0: 		AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
1:             	System.setProperty(key, value);
1:                 return null; // nothing to return
1:             }
1:         });
1: 		
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6de7104
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.TestRoutines
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.sql.*;
1: import java.io.*;
0: import org.apache.derby.iapi.reference.JDBC30Translation;
1: 
1: 
1: /**
1: 	Utility methods for tests routines, in order to bring some consistency to test output.
1: 	Any routines added here should be general purpose in nature, not specific to
1: 	a single test.
1: 
1: 	Add a public static method for the test and then add its creation as a procedure
1: 	or function in installRoutines.
1: */
1: public class TestRoutines {
1: 
1: 	/**
1: 		A single procedure to create all the routines in this file.
1: 		The script to run this is in testRoutines.sql
1: 	*/
1: 	public static void installRoutines() throws SQLException {
1: 
1: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
1: 
1: 		TestRoutines.installRoutines(conn);
1: 
1: 	}
1: 
1: 	/**
1: 		Easy way to install all the routines from a Java test program.
1: 		Just call with a valid connection.
1: 		org.apache.derbyTesting.functionTests.util.TestRoutines.installRoutines(conn);
1: 	*/
1: 	public static void installRoutines(Connection conn) throws SQLException {
1: 
1: 		Statement s = conn.createStatement();
1: 
1: 		// setSystemProperty
1: 		s.execute("CREATE PROCEDURE TESTROUTINE.SET_SYSTEM_PROPERTY(IN PROPERTY_KEY VARCHAR(32000), IN PROPERTY_VALUE VARCHAR(32000)) NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.setSystemProperty' language java parameter style java");
1: 
1: 		// sleep
1: 		s.execute("CREATE PROCEDURE TESTROUTINE.SLEEP(IN SLEEP_TIME_MS BIGINT) NO SQL EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestRoutines.sleep' language java parameter style java");
1: 
1: 		s.close();
1: 	}
1: 
1: 
1: 	/**
1: 		TESTROUTINE.SET_SYSTEM_PROPERTY(IN PROPERTY_KEY VARCHAR(32000), IN PROPERTY_VALUE VARCHAR(32000))
1: 		Set a system property
1: 	*/
0: 	public static void setSystemProperty(String key, String value) {
1: 
0: 		System.getProperties().put(key, value);
1: 	}
1: 	/**
1: 		TESTROUTINE.SLEEP(IN TIME_MS BIGINT)
1: 		Sleep for a number of milli-seconds.
1: 	*/
1: 	public static void sleep(long ms) throws InterruptedException {
1: 
1: 		Thread.sleep(ms);
1: 	}
1: }
1: 
1: 
1: 
============================================================================