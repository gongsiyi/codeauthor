1:306fdfe: /*
11:306fdfe: 
1:306fdfe: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test
1:306fdfe: 
1:306fdfe: Licensed to the Apache Software Foundation (ASF) under one or more
1:306fdfe: contributor license agreements.  See the NOTICE file distributed with
1:306fdfe: this work for additional information regarding copyright ownership.
1:306fdfe: The ASF licenses this file to You under the Apache License, Version 2.0
1:306fdfe: (the "License"); you may not use this file except in compliance with
1:306fdfe: the License.  You may obtain a copy of the License at
1:306fdfe: 
1:306fdfe:    http://www.apache.org/licenses/LICENSE-2.0
1:306fdfe: 
1:306fdfe: Unless required by applicable law or agreed to in writing, software
1:306fdfe: distributed under the License is distributed on an "AS IS" BASIS,
1:306fdfe: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:306fdfe: See the License for the specific language governing permissions and
1:306fdfe: limitations under the License.
1:306fdfe: 
2:306fdfe: */
1:306fdfe: 
1:306fdfe: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:306fdfe: 
1:1ae02c9: import java.math.BigDecimal;
1:306fdfe: import java.sql.CallableStatement;
1:1ae02c9: import java.sql.Connection;
1:306fdfe: import java.sql.ParameterMetaData;
1:306fdfe: import java.sql.PreparedStatement;
1:306fdfe: import java.sql.ResultSet;
1:306fdfe: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1e90bf4: import java.sql.Timestamp;
1:306fdfe: import java.sql.Types;
1:1ae02c9: import junit.framework.Test;
1:306fdfe: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:306fdfe: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:306fdfe: import org.apache.derbyTesting.junit.JDBC;
1:306fdfe: import org.apache.derbyTesting.junit.TestConfiguration;
1:306fdfe: 
3:306fdfe: /**
1:5110b31:  * Test the ParameterMetaData class in JDBC 30.
1:5110b31:  * This test converts the old jdbcapi/parameterMetaDataJdbc30.java 
1:5110b31:  * test to JUnit. 
1:306fdfe:  */
1:5110b31: 
1:306fdfe: public class ParameterMetaDataJdbc30Test extends BaseJDBCTestCase {
1:306fdfe: 
1:5110b31: 	/**
1:5110b31:          * Create a test with the given name.
1:5110b31:          *
1:5110b31:          * @param name name of the test.
1:5110b31:          */
1:5110b31: 
1:5110b31:         public ParameterMetaDataJdbc30Test(String name) {
1:5110b31:                 super(name);
2:306fdfe:         }
1:306fdfe:         
1:9a62527: 	/**
1:5110b31:          * Create suite containing client and embedded tests and to run
1:5110b31: 	 * all tests in this class
1:5110b31:          */
1:306fdfe: 	public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ParameterMetaDataJdbc30Test");
1:1ae02c9: 
1:1ae02c9:         if (JDBC.vmSupportsJSR169()) {
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "Empty ParameterMetaDataJDBC30. " +
1:1ae02c9:                 "JSR169 does not support ParameterMetaData");
1:1ae02c9:         } else {
1:ed7a4d6:         		suite.addTest(baseSuite("ParameterMetaDataJdbc30Test:embedded"));
1:ed7a4d6:         		suite.addTest(
1:ed7a4d6:                 		TestConfiguration.clientServerDecorator(
1:ed7a4d6:                         		baseSuite("ParameterMetaDataJdbc30Test:client")));
1:ed7a4d6: 		}
1:306fdfe:         	return suite;
1:306fdfe:     	}
1:306fdfe: 
1:306fdfe: 	private static Test baseSuite(String name)
1:306fdfe:     	{
1:1ae02c9:             BaseTestSuite suite = new BaseTestSuite(name);
1:306fdfe: 
1:306fdfe:         	suite.addTestSuite(ParameterMetaDataJdbc30Test.class);
1:306fdfe: 
1:306fdfe:         	return new CleanDatabaseTestSetup(suite) {
1:5110b31: 			/**
1:306fdfe:              		 * Creates the tables and the stored procedures used in the test
1:306fdfe:              		 * cases.
1:5110b31: 			 *
1:306fdfe:              		 * @exception SQLException if a database error occurs
1:306fdfe:              		 */
1:306fdfe:             		protected void decorateSQL(Statement stmt) throws SQLException {
1:306fdfe:             		
1:306fdfe: 				Connection conn = getConnection();
1:306fdfe: 
1:00306c2:                 // Create procedure used by
1:00306c2:                 // testParameterMetadataWithDECIMALParameters() and
1:00306c2:                 // testParameterMetadataWithLITERALParameters().
1:00306c2:                 stmt.execute(
1:00306c2:                     "CREATE PROCEDURE PMDD(IN pmdI_1 DECIMAL(5,3), " +
1:00306c2:                     "IN pmdI_2 DECIMAL(4,2), INOUT pmdI_3 DECIMAL(9,0), " +
1:00306c2:                     "OUT pmdI_4 DECIMAL(10,2)) language java " +
1:00306c2:                     "parameter style java external name " +
1:00306c2:                     "'org.apache.derbyTesting.functionTests.tests.jdbcapi." +
1:00306c2:                     "ParameterMetaDataJdbc30Test.dummyDecimal'");
1:00306c2: 
1:5110b31: 				/**
1:306fdfe: 		                 * Creates the table used in the test cases.
2:306fdfe:                			 *
1:306fdfe:                  		 */
1:306fdfe:                 		stmt.execute("create table t ( "+
1:306fdfe:                           		/* 1 */ "c char(5), "+
1:306fdfe:                           		/* 2 */ "iNoNull int not null, "+
1:306fdfe:                           		/* 3 */ "i int, "+
1:306fdfe:                           		/* 4 */ "de decimal, "+
1:306fdfe:                           		/* 5 */ "d date)");
1:306fdfe:                 		stmt.executeUpdate("create function RDB(P1 INT) " +
1:306fdfe:                                 		   "RETURNS DECIMAL(10,2) " +
1:306fdfe:                                   		   "language java external name " +
1:306fdfe:                                   		   "'org.apache.derbyTesting.functionTests." +
1:306fdfe:                                   		   "tests.lang.outparams30.returnsBigDecimal' " +
1:306fdfe:                                    		   "parameter style java");
1:306fdfe:             		}
1:306fdfe:         	};
1:306fdfe:   	}
1:306fdfe: 
1:306fdfe:        /**
1:5110b31:      	* Testing a callable statement by calling a SQL procedure with 
1:5110b31: 	* IN parameters, OUT parameters and IN_OUT parameters.
1:5110b31:         *
1:5110b31: 	* @exception SQLException if error occurs
1:306fdfe:      	*/
1:306fdfe: 	public void testCallableStatement () throws SQLException {
1:306fdfe: 
3:306fdfe:         	Statement stmt = createStatement();
1:306fdfe: 
1:306fdfe:         	stmt.executeUpdate("create procedure dummyint( " + 
1:306fdfe: 				   "in a integer, in b integer, " + 
1:306fdfe: 				   "out c integer, inout d integer) " + 
1:306fdfe: 				   "language java external name "+ 
1:306fdfe: 				   "'org.apache.derbyTesting.functionTests." +
1:306fdfe: 				   "tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint' " +
1:306fdfe: 				   "parameter style java");
1:306fdfe:        		CallableStatement cs = prepareCall("CALL dummyint(?,?,?,?)");
1:306fdfe: 		// parameters 1 and 2 are input only
1:306fdfe:       		cs.setInt(1,1);
1:306fdfe:       		cs.setInt(2,1);
1:306fdfe:       		//parameter 3 is output only
1:306fdfe:       		cs.registerOutParameter(3,Types.INTEGER);
1:306fdfe:       		// parameter 4 is input and output
1:39b3237:       		Object x = 1;
1:306fdfe:       		cs.setObject(4,x, Types.INTEGER);
1:306fdfe:       		cs.registerOutParameter(4,Types.INTEGER);
1:306fdfe: 
1:306fdfe:       		//verify the meta data for the parameters
1:306fdfe:       		ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array	
1:306fdfe: 		String [][] parameterMetaDataArray0 = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"},
1:306fdfe: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"}};
1:306fdfe: 			
1:306fdfe: 		testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:       		cs.execute();
1:306fdfe: 
1:5110b31: 		/*
1:5110b31: 		/* bug 4450 - parameter meta data info for the return parameter was giving
1:5110b31:       		/* null pointer exception. In the past, we didn't need to keep the return
1:5110b31:       		/* parameter info for callable statement execution and hence we never
1:5110b31:       		/* generated the meta data for it. To fix the problem, at the parsing time,
1:5110b31:       		/* I set a flag if the call statement is of ? = form. If so, the first
1:5110b31:       		/* parameter is a return parameter and save it's meta data rather than
1:5110b31:       		/* discarding it.
1:5110b31: 	 	 */	
1:5110b31: 	
1:306fdfe:       		cs = prepareCall("? = call RDB(?)");
1:306fdfe:       		paramMetaData = cs.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray1 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "31", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray1);
1:306fdfe: 
1:03e7a1b:         stmt.execute("drop procedure dummyint");
1:03e7a1b: 
2:306fdfe: 		stmt.close();
1:306fdfe: 		cs.close();
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * Testing a prepared statement.
1:5110b31:      	 *
1:5110b31: 	 * @exception SQLException if database access errors or other errors occur
1:5110b31:          */
1:306fdfe: 	public void testPreparedStatement () throws SQLException {
1:306fdfe: 		//next testing a prepared statement
1:306fdfe:       		PreparedStatement ps = prepareStatement("insert into t values(?, ?, ?, ?, ?)");
1:306fdfe:       		ps.setNull(1, java.sql.Types.CHAR);
1:306fdfe:       		ps.setInt(2, 1);
1:306fdfe:       		ps.setNull(3, java.sql.Types.INTEGER);
1:306fdfe:       		ps.setBigDecimal(4,new BigDecimal("1"));
1:306fdfe:       		ps.setNull(5, java.sql.Types.DATE);
1:306fdfe: 
1:306fdfe:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 5, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String [][] parameterMetaDataArray0 = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "5", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "5", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "10", "0", "91", "DATE", "java.sql.Date", "PARAMETER_MODE_IN"}};
1:5110b31: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:306fdfe: 	
1:5110b31: 		/*
1:5110b31:       		 *  JCC seems to report these parameters as MODE_UNKNOWN, where as Derby uses MODE_IN
1:5110b31:       		 *  JCC behaviour with network server matches its behaviour with DB2
1:5110b31:       		 *  getPrecision() returns 0 for CHAR/DATE/BIT types for Derby. JCC shows maxlen
1:5110b31: 		 */
1:306fdfe:       		ps.execute();
1:306fdfe: 
1:5110b31: 		/*
1:5110b31: 		 * bug 4533 - associated parameters should not be included in the parameter meta data list
1:5110b31:       		 * Following statement systab will generate 4 associated parameters for the 2
1:5110b31:       		 * user parameters. This results in total 6 parameters for the prepared statement
1:5110b31:       		 * internally. But we should only show 2 user visible parameters through
1:5110b31:       		 * getParameterMetaData().
1:5110b31: 		 */
1:306fdfe:       		ps = prepareStatement("select * from sys.systables where " +
1:96c3cce:              			      " CAST(tablename AS VARCHAR(128)) like ? and CAST(tableID AS CHAR(36)) like ?");
1:306fdfe:       		ps.setString (1, "SYS%");
1:306fdfe:       		ps.setString (2, "8000001%");
1:306fdfe:       		paramMetaData = ps.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray1 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "128", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "36", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray1);
1:306fdfe: 
1:306fdfe:       		ps.execute();
1:306fdfe: 
1:306fdfe: 		ps.close();
1:306fdfe: 	}
1:c71c5e4: 
1:4bad559: 	/**
1:9a62527:          * Test boolean parameters
1:9a62527:      	 *
1:9a62527: 	 * @exception SQLException if database access errors or other errors occur
1:9a62527:          */
1:9a62527: 	public void testBooleanParameters() throws SQLException
1:9a62527:     {
1:9a62527:         Statement stmt = createStatement();
1:9a62527:         stmt.executeUpdate
1:9a62527:             (
1:9a62527:              "create function booleanValue( b boolean )\n" +
1:9a62527:              "returns varchar( 100 ) language java parameter style java no sql\n" +
1:9a62527:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.BooleanValuesTest.booleanValue'\n"
1:9a62527:              );
1:c71c5e4:         stmt.executeUpdate
1:c71c5e4:             (
1:c71c5e4:              "create table t_boolean( b boolean )"
1:c71c5e4:              );
1:9a62527:         stmt.close();
1:c71c5e4: 
1:c71c5e4:         //
1:c71c5e4:         // Test metadata for parameters to boolean-valued functions.
1:c71c5e4:         //
1:9a62527:         PreparedStatement ps = prepareStatement("values( booleanValue( ? ) )");
1:9a62527: 
1:9a62527:         ParameterMetaData paramMetaData = ps.getParameterMetaData();
1:9a62527: 		assertEquals("Unexpected parameter count", 1, paramMetaData.getParameterCount());
1:9a62527: 
1:9a62527: 		//expected values to be stored in a 2dim. array
1:9a62527:         String [][] parameterMetaDataArray0 =
1:9a62527:             {
1:9a62527:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:9a62527:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN"},
1:9a62527:             };
1:9a62527: 
1:9a62527:         testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:9a62527: 
1:9a62527: 		ps.close();
1:9a62527: 
1:c71c5e4:         //
1:c71c5e4:         // Test metadata for boolean-valued columns.
1:c71c5e4:         //
1:c71c5e4:         ps = prepareStatement("insert into t_boolean values(?)");
1:c71c5e4:         ps.setBoolean(1, true);
1:c71c5e4: 
1:c71c5e4:         paramMetaData = ps.getParameterMetaData();
1:c71c5e4: 		assertEquals("Unexpected parameter count", 1, paramMetaData.getParameterCount());
1:c71c5e4:         parameterMetaDataArray0 = new String[][]
1:c71c5e4:             {
1:c71c5e4:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:c71c5e4:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN"},
1:c71c5e4:             };
1:c71c5e4:         testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:c71c5e4: 
1:c71c5e4:         ps.close();
1:9a62527: 	}
1:306fdfe: 
1:5110b31:     /**
1:4bad559:      * Testing a callable statement by calling a SQL procedure with 
1:4bad559:      * boolean IN parameters, OUT parameters and IN_OUT parameters.
1:4bad559:      */
1:4bad559: 	public void testBooleanProcedureArgs() throws Exception
1:4bad559:     {
1:4bad559:         Statement stmt = createStatement();
1:4bad559: 
1:4bad559:         stmt.executeUpdate("create procedure booleanProc" + 
1:4bad559:                            "( in inarg boolean, out outarg boolean, inout inoutarg boolean )" + 
1:4bad559:                            "language java external name "+ 
1:4bad559:                            "'org.apache.derbyTesting.functionTests." +
1:4bad559:                            "tests.jdbcapi.ParameterMetaDataJdbc30Test.booleanProc' " +
1:4bad559:                            "parameter style java");
1:4bad559:         
1:4bad559:         CallableStatement cs = prepareCall("CALL booleanProc(?,?,?)");
1:4bad559:         cs.registerOutParameter(2,Types.BOOLEAN);
1:4bad559:         cs.registerOutParameter(3,Types.BOOLEAN);
1:4bad559: 
1:4bad559:         //verify the meta data for the parameters
1:4bad559:         ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:4bad559: 		assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1:4bad559:         
1:4bad559: 		//expected values to be stored in a 2dim. array	
1:4bad559: 		String [][] parameterMetaDataArray0 =
1:4bad559:             {
1:4bad559:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:4bad559:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN"},
1:4bad559:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_OUT"},
1:4bad559:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN_OUT"},
1:4bad559:             };
1:4bad559:         
1:4bad559: 		testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:4bad559: 
1:4bad559:         cs.setBoolean( 1,  true );
1:4bad559:         cs.setBoolean( 3, true );
1:4bad559:         cs.execute();
1:4bad559:         assertEquals( true, cs.getBoolean( 2 ) );
1:4bad559:         assertEquals( false, cs.getBoolean( 3 ) );
1:4bad559: 
1:4bad559:         cs.setObject( 1,  Boolean.FALSE );
1:4bad559:         cs.setObject( 3, Boolean.FALSE );
1:4bad559:         cs.execute();
1:4bad559:         assertEquals( false, cs.getBoolean( 2 ) );
1:4bad559:         assertEquals( true, cs.getBoolean( 3 ) );
1:4bad559: 
1:4bad559: 		stmt.close();
1:4bad559: 		cs.close();
1:4bad559: 	}
1:4bad559: 
1:5110b31: 	/** 
1:5110b31: 	 * DERBY-44 added support for SELECT ... WHERE column LIKE ? ESCAPE ?
1:5110b31:          * This test case tests
1:306fdfe:          *   a) that such a statement compiles, and
1:306fdfe:          *   b) that we get the correct error message if the escape
1:306fdfe:          *      sequence is an empty string (at one point this would
1:306fdfe:          *      lead to a StringIndexOutOfBoundsException)`
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe: 	 */
1:306fdfe: 	public void testLikeEscaleStatement () throws SQLException {
1:306fdfe: 
1:306fdfe:       		//variation 1, testing DERBY-44 
1:306fdfe:       		PreparedStatement ps = prepareStatement("select * from sys.systables " +
1:96c3cce: 							"where CAST(tablename AS VARCHAR(128)) like ? escape CAST(? AS VARCHAR(128))");
1:306fdfe:       		ps.setString (1, "SYS%");
1:306fdfe:       		ps.setString (2, "");
1:306fdfe:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "128", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "128", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:       		try {
1:306fdfe:           		ResultSet rs = ps.executeQuery();
1:306fdfe:           		rs.next();
1:306fdfe: 			fail("DERBY-44 failed (didn't get SQLSTATE 22019)");
1:306fdfe:           		rs.close();
1:306fdfe:       		} catch (SQLException e) {
1:67e1463: 			assertSQLState("22019", e);
1:306fdfe:       		}
1:306fdfe: 		ps.close();
1:306fdfe: 	}
1:306fdfe: 
1:5110b31: 	 /** 
1:5110b31:           * test execute statements that no parameters would be returned if 
1:5110b31:           * prepareStatement("execute statement systab using values('SYS%','8000001%')");
1:5110b31: 	  *
1:5110b31: 	  * @exception SQLException if error occurs
1:306fdfe:           */
1:306fdfe: 
1:306fdfe: 	public void testExecuteStatementUsing () throws SQLException {
1:5110b31: 	
1:5110b31: 		/*
1:5110b31: 		 * the test no longer tests 4552, but kept as an interesting test scenario
1:5110b31:                  * bug 4552 - no parameters would be returned for execute statement using
1:5110b31:                  * System.out.println("Bug 4552 - no parameters would be returned for execute statement using");
1:5110b31:                  * orig: ps = con.prepareStatement("execute statement systab using values('SYS%','8000001%')");
1:5110b31: 		 */
1:306fdfe:       		PreparedStatement ps = prepareStatement("select * from sys.systables " + 
1:96c3cce: 							"where CAST(tablename AS VARCHAR(128)) like 'SYS%' and " + 
1:96c3cce: 							"CAST(tableID AS VARCHAR(128)) like '8000001%'");
1:306fdfe: 
1:306fdfe:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 0, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = null;
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:       		ps.execute();
1:306fdfe: 
1:306fdfe: 		ps.close();
1:306fdfe: 	}
1:306fdfe: 	/** 
1:5110b31:          * testing SELECT statements for BOOLEANs (1 for true, 0 for false) 
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe: 	 */ 
1:306fdfe: 	public void testSelectStatementUsingBoolean () throws SQLException {
1:306fdfe: 
1:5110b31: 		/*
1:5110b31: 		 * Bug 4654 - Null Pointer exception while executuing a select with a
1:5110b31:          	 * where clause parameter of type 'TRUE' or 'FALSE' constants. The existing prior to
1:5110b31:          	 * exposing parameter metadata didn't need to fill in metadata information for where
1:5110b31:          	 * clause parameter in the example above.
1:5110b31:          	 * This no longer makes sense, for we cannot take BOOLEANs anymore.
1:5110b31:          	 * replace with a simple where 1 = ?. Which would take either 1 for true, or 0 for false
1:5110b31: 		 */
1:306fdfe:       		PreparedStatement ps = prepareStatement("select * from t "+  
1:306fdfe: 							"where 1=? for update");
1:306fdfe: 
1:306fdfe:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 1, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:       		dumpParameterMetaDataNegative(paramMetaData);
1:306fdfe:       		ps.setInt(1,1);
1:306fdfe:       		ps.execute();
1:306fdfe: 
1:306fdfe: 		ps.close();
1:306fdfe: 	}
1:306fdfe: 	/** 
1:5110b31:          * test: no parameter for the statement and then do getParameterMetaData() 
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe:          */
1:306fdfe: 	public void testSelectStatementUsingNoParameter () throws SQLException {
1:306fdfe: 
1:306fdfe:       		PreparedStatement ps = prepareStatement("select * from t");
1:306fdfe:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 0, paramMetaData.getParameterCount());
1:306fdfe: 		
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = null; 
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:       		ps.execute();
1:306fdfe: 
1:306fdfe: 		ps.close();
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * test: the scale returned should be the one set by registerOutParameter 
1:5110b31: 	 *
1:5110b31:  	 * @exception SQLException
1:306fdfe:          */
1:306fdfe: 	public void testCallableStatementReturnedScale () throws SQLException {
1:306fdfe: 
1:5110b31: 		/*
1:306fdfe:                  *  DERBY-2810 - getParameterType behavior is different in Embedded and 
1:306fdfe:                  *  Network Client when set by registerOutParameter 
1:306fdfe:                  *  temporarily disabling Network Client.
1:306fdfe:                  */
1:306fdfe: 		if (!usingDerbyNetClient()) {
1:306fdfe: 			Statement stmt = createStatement();
1:306fdfe:       			stmt.executeUpdate("create procedure dummy_numeric_Proc(out a NUMERIC(30,15), out b NUMERIC(30,15)) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummy_numeric_Proc'");
1:306fdfe:       			CallableStatement cs = prepareCall("CALL dummy_numeric_Proc(?,?)");
1:306fdfe:       			cs.registerOutParameter(1, Types.NUMERIC);
1:306fdfe:       			cs.registerOutParameter(2, Types.NUMERIC,15);
1:306fdfe:       			cs.execute();
1:306fdfe: 			assertEquals("Unexpected parameter count", 2, cs.getParameterMetaData().getParameterCount());
1:306fdfe: 
1:306fdfe: 			//expected values to be stored in a 2dim. array
1:306fdfe:                 	String parameterMetaDataArray0 [][] = {
1:306fdfe:                 	//isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 	{"PARAMETER_NULLABLE", "true", "30", "15", "2", "NUMERIC", "java.math.BigDecimal", "PARAMETER_MODE_OUT"},
1:306fdfe:                 	{"PARAMETER_NULLABLE", "true", "30", "15", "2", "NUMERIC", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe:                 	testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:306fdfe: 		
1:306fdfe: 			cs.close();
1:306fdfe: 		}
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * test behaviour of meta data and out params after re-compile 
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe:          */
1:306fdfe: 	public void testMetatdataAfterProcRecompile () throws SQLException {
1:03e7a1b: 
1:306fdfe: 		Statement stmt = createStatement();
1:306fdfe: 
1:03e7a1b:         stmt.executeUpdate("create procedure dummyint( "
1:03e7a1b:                 + "in a integer, in b integer, "
1:03e7a1b:                 + "out c integer, inout d integer) "
1:03e7a1b:                 + "language java external name "
1:03e7a1b:                 + "'org.apache.derbyTesting.functionTests."
1:03e7a1b:                 + "tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint' "
1:03e7a1b:                 + "parameter style java");
1:03e7a1b: 
1:306fdfe:       		CallableStatement cs = prepareCall("CALL dummyint(?,?,?,?)");
1:306fdfe:           	cs.registerOutParameter(3,Types.INTEGER);
1:306fdfe:       		cs.registerOutParameter(4,Types.INTEGER);
1:306fdfe:       		cs.setInt(1,1);
1:306fdfe:       		cs.setInt(2,1);
1:306fdfe:           	cs.setInt(4,4);
1:306fdfe: 	
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe: 		String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:           	cs.execute();
1:306fdfe: 		assertEquals("Unexpected DUMMYINT alias returned", 11111, cs.getInt(4));
1:306fdfe: 
1:5110b31: 		/* 
1:306fdfe: 		 *  DERBY-2786 - Behaviour of inout parameters in Embedded and Network client is
1:306fdfe:          	 *  different if parameters are set but the CallableStatment is not executed.
1:306fdfe: 		 *  temporarily disabling Network Client. 
1:306fdfe:          	 */
1:306fdfe: 		if (!usingDerbyNetClient()) {
1:306fdfe:       			stmt.executeUpdate("drop procedure dummyint");
1:306fdfe:       			stmt.executeUpdate("create procedure dummyint(in a integer, in b integer, out c integer, inout d integer) language java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint2' parameter style java");
1:306fdfe:       			cs.execute();
1:306fdfe: 
1:306fdfe: 			String parameterMetaDataArray1 [][] = {
1:306fdfe:                 	//isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"},
1:306fdfe:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"}};
1:306fdfe: 
1:306fdfe:                 	testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray1);
1:306fdfe: 
1:306fdfe:       			cs.setInt(4, 6);
1:306fdfe:       			// following is incorrect sequence, should execute first, then get
1:306fdfe:       			// but leaving it in as an additional negative test. see beetle 5886
1:306fdfe: 			assertEquals("Unexpected DUMMYINT alias returned", 6, cs.getInt(4));
1:306fdfe: 
1:306fdfe:       			cs.execute();
1:306fdfe: 			assertEquals("Unexpected DUMMYINT alias returned", 22222, cs.getInt(4));
1:306fdfe: 		}
1:306fdfe:       		cs.close();
1:03e7a1b: 
1:03e7a1b:         stmt.execute("drop procedure dummyint");
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * test ParameterMetaData for Java procedures with INTEGER parameters 
1:5110b31: 	 * 
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe:          */
1:306fdfe: 	public void testParameterMetadataWithINTParameters () throws SQLException {
1:306fdfe: 
1:306fdfe: 		Statement stmt = createStatement();
1:306fdfe:        		stmt.execute("CREATE PROCEDURE PMDI(IN pmdI_1 INTEGER, IN pmdI_2 INTEGER, INOUT pmdI_3 INTEGER, OUT pmdI_4 INTEGER) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint'");
1:306fdfe:       		CallableStatement cs = prepareCall("CALL PMDI(?, ?, ?, ?)");
1:306fdfe: 	
1:306fdfe: 		// parameters 1 and 2 are input only
1:306fdfe:                	cs.setInt(1,1);
1:306fdfe:         	cs.setInt(2,1);
1:306fdfe: 		// parameter 3 is input and output
1:39b3237:                 Object x = 1;
1:306fdfe:                 cs.setObject(3,x, Types.INTEGER);
1:306fdfe:                 cs.registerOutParameter(3,Types.INTEGER);
1:306fdfe:                	//parameter 4 is output only
1:306fdfe:                	cs.registerOutParameter(4,Types.INTEGER);
1:306fdfe: 
1:306fdfe:                	//verify the meta data for the parameters
1:306fdfe:                	ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:306fdfe:                	assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:306fdfe: 			
1:306fdfe:        		cs.close();
1:306fdfe:        		stmt.execute("DROP PROCEDURE PMDI");
1:306fdfe:             stmt.close();
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * test ParameterMetaData for Java procedures with CHAR parameters
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe:          */
1:306fdfe: 	 public void testParameterMetadataWithCHARParameters () throws SQLException {
1:306fdfe: 
1:306fdfe: 		Statement stmt = createStatement();
1:306fdfe:        		stmt.execute("CREATE PROCEDURE PMDC(IN pmdI_1 CHAR(10), IN pmdI_2 VARCHAR(25), INOUT pmdI_3 CHAR(19), OUT pmdI_4 VARCHAR(32)) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyString'");
1:306fdfe:       		CallableStatement cs = prepareCall("CALL PMDC(?, ?, ?, ?)");
1:306fdfe: 		// parameters 1 and 2 are input only	
1:306fdfe: 		cs.setString(1, "TEST0");
1:306fdfe: 		cs.setString(2, "TEST1");
1:306fdfe: 		// parameter 3 is input and output
1:306fdfe:                 Object x = new String("TEST");
1:306fdfe:                 cs.setObject(3,x, Types.CHAR);
1:306fdfe:                 cs.registerOutParameter(3,Types.CHAR);
1:306fdfe:                 //parameter 4 is output only
1:306fdfe:                 cs.registerOutParameter(4,Types.CHAR);
1:306fdfe:  		//verify the meta data for the parameters
1:306fdfe:                	ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1:306fdfe: 	
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "10", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "25", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "19", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "false", "32", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe: 		testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:        		cs.close();
1:306fdfe:        		stmt.execute("DROP PROCEDURE PMDC");
1:306fdfe:             stmt.close();
1:306fdfe: 	}
1:1e90bf4: 
1:1e90bf4: 	/**
1:1e90bf4:          * test ParameterMetaData for Java procedures with TIMESTAMP parameters
1:1e90bf4: 	 *
1:1e90bf4: 	 * @exception SQLException if error occurs
1:1e90bf4:          */
1:1e90bf4:     public void testParameterMetadataWithTimestampParameters () throws SQLException
1:1e90bf4:     {
1:1e90bf4:         Statement stmt = createStatement();
1:1e90bf4:         stmt.execute("CREATE PROCEDURE PMDT(IN pmdI_1 TIMESTAMP, INOUT pmdI_2 TIMESTAMP, OUT pmdI_3 TIMESTAMP) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyString'");
1:1e90bf4:         CallableStatement cs = prepareCall("CALL PMDT(?, ?, ?)");
1:1e90bf4:         // parameter 1 is input only	
1:1e90bf4:         cs.setTimestamp(1, new Timestamp( 0L ) );
1:1e90bf4:         // parameter 2 is input and output
1:1e90bf4:         Object x = new Timestamp( 2L );
1:1e90bf4:         cs.setObject(2,x, Types.CHAR);
1:1e90bf4:         cs.registerOutParameter(2,Types.TIMESTAMP);
1:1e90bf4:         //parameter 3 is output only
1:1e90bf4:         cs.registerOutParameter(3,Types.TIMESTAMP);
1:1e90bf4:         //verify the meta data for the parameters
1:1e90bf4:         ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:1e90bf4:         assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1:1e90bf4:         
1:1e90bf4:         //expected values to be stored in a 2dim. array
1:1e90bf4:         String parameterMetaDataArray0 [][] = {
1:1e90bf4:             //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:1e90bf4:             {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_IN"},
1:1e90bf4:             {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_IN_OUT"},
1:1e90bf4:             {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_OUT"}};
1:1e90bf4:         
1:1e90bf4:         testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:1e90bf4:         
1:1e90bf4:         cs.close();
1:1e90bf4:         stmt.execute("DROP PROCEDURE PMDT");
1:1e90bf4:         stmt.close();
1:1e90bf4:     }
1:1e90bf4:     
1:306fdfe: 	/**
1:306fdfe:          *  test ParameterMetaData for Java procedures with DECIMAL parameters
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe:          */
1:306fdfe: 	public void testParameterMetadataWithDECIMALParameters () throws SQLException {
1:306fdfe: 
1:306fdfe:       		CallableStatement cs = prepareCall("CALL PMDD(?, ?, ?, ?)");
1:306fdfe: 
1:306fdfe: 		// parameters 1 and 2 are input only
1:306fdfe:                 cs.setBigDecimal(1,new BigDecimal("1"));;
1:306fdfe:                 cs.setBigDecimal(2,new BigDecimal("1"));;
1:306fdfe:                 // parameter 3 is input and output
1:306fdfe:                 Object x = new BigDecimal(1.1);
1:306fdfe:                 cs.setObject(3,x, Types.DECIMAL);
1:306fdfe:                 cs.registerOutParameter(3,Types.DECIMAL);
1:306fdfe:                 //parameter 4 is output only
1:306fdfe:                 cs.registerOutParameter(4,Types.DECIMAL);
1:306fdfe: 		//verify the meta data for the parameters
1:306fdfe:               	ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "5", "3", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "4", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:        		cs.close();
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * test ParameterMetaData for Java procedures with some literal parameters
1:5110b31: 	 *
1:5110b31: 	 * @exception SQLException if error occurs
1:306fdfe:          */
1:306fdfe: 	public void testParameterMetadataWithLITERALParameters () throws SQLException {
1:306fdfe: 
1:306fdfe:       		CallableStatement cs = prepareCall("CALL PMDD(32.4, ?, ?, ?)");
1:306fdfe: 		// parameters 2 is input only
1:306fdfe:                 cs.setBigDecimal(1,new BigDecimal("1"));;
1:306fdfe:                 // parameter 3 is input and output
1:306fdfe:                 Object x = new BigDecimal(1.1);
1:306fdfe:                 cs.setObject(2,x, Types.DECIMAL);
1:306fdfe:                 cs.registerOutParameter(2,Types.DECIMAL);
1:306fdfe:                 //parameter 4 is output only
1:306fdfe:                 cs.registerOutParameter(3,Types.DECIMAL);
1:306fdfe: 
1:306fdfe: 		//verify the meta data for the parameters
1:306fdfe:                 ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:306fdfe:                 assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray0 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "4", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:306fdfe: 
1:306fdfe:           	cs.close();
1:306fdfe: 
1:306fdfe:       		cs = prepareCall("CALL PMDD(32.4, 47.9, ?, ?)");
1:306fdfe: 		// parameter 3 is input and output
1:306fdfe:                 Object y = new BigDecimal(1.1);
1:306fdfe:                 cs.setObject(1,y, Types.DECIMAL);
1:306fdfe:                 cs.registerOutParameter(1,Types.DECIMAL);
1:306fdfe:                 //parameter 4 is output only
1:306fdfe:                 cs.registerOutParameter(2,Types.DECIMAL);
1:306fdfe: 		paramMetaData = cs.getParameterMetaData();
1:306fdfe:                 assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray1 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray1);
1:306fdfe: 
1:306fdfe:           	cs.close();
1:306fdfe: 
1:306fdfe:       		cs = prepareCall("CALL PMDD(?, 38.2, ?, ?)");
1:306fdfe: 		// parameters 1 is input only
1:306fdfe:                 cs.setBigDecimal(1,new BigDecimal("1"));;
1:306fdfe:                 // parameter 3 is input and output
1:306fdfe:                 Object z = new BigDecimal(1.1);
1:306fdfe:                 cs.setObject(2,z, Types.DECIMAL);
1:306fdfe:                 cs.registerOutParameter(2,Types.DECIMAL);
1:306fdfe:                 //parameter 4 is output only
1:306fdfe:                 cs.registerOutParameter(3,Types.DECIMAL);
1:306fdfe: 
1:306fdfe: 		//verify the meta data for the parameters
1:306fdfe:                 paramMetaData = cs.getParameterMetaData();
1:306fdfe: 		assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1:306fdfe: 
1:306fdfe: 		//expected values to be stored in a 2dim. array
1:306fdfe:                 String parameterMetaDataArray2 [][] = {
1:306fdfe:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "5", "3", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:306fdfe:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1:306fdfe: 
1:306fdfe:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray2);
1:306fdfe: 
1:306fdfe:           	cs.close();
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * print the parameter isNullable value in human readable form
1:5110b31: 	 *
1:5110b31: 	 * @param nullabilityValue 
1:306fdfe:          */
1:5110b31: 	// @return the nullability status of the given parameter
1:306fdfe: 	static String parameterIsNullableInStringForm(int nullabilityValue){
1:306fdfe: 		if (nullabilityValue ==  ParameterMetaData.parameterNoNulls)
1:306fdfe: 				  return("PARAMETER_NO_NULLS");
1:306fdfe: 		else if (nullabilityValue ==  ParameterMetaData.parameterNullable)
1:306fdfe: 				  return("PARAMETER_NULLABLE");
1:306fdfe: 		else if (nullabilityValue ==  ParameterMetaData.parameterNullableUnknown)
1:306fdfe: 				  return("PARAMETER_NULLABLE_UNKNOWN");
1:306fdfe: 		else
1:306fdfe: 				  return("ERROR: donot recognize this parameter isNullable() value");
1:306fdfe:   	}
1:306fdfe: 
1:5110b31: 	/**
1:5110b31:          * print the parameter mode in human readable form
1:5110b31:          *
1:5110b31:          * @param mode identifies parameter's mode (IN, OUT, or IN_OUT)
1:5110b31: 	 * @return     the parameter mode in readable form
1:5110b31:          *             
1:5110b31:          */
1:306fdfe: 	static String parameterModeInStringForm(int mode){
1:306fdfe: 		if (mode ==  ParameterMetaData.parameterModeIn)
1:306fdfe: 				  return("PARAMETER_MODE_IN");
1:306fdfe: 		else if (mode ==  ParameterMetaData.parameterModeInOut )
1:306fdfe: 				  return("PARAMETER_MODE_IN_OUT");
1:306fdfe: 		else if (mode ==  ParameterMetaData.parameterModeOut)
1:306fdfe: 				  return("PARAMETER_MODE_OUT");
1:306fdfe: 		else if (mode ==  ParameterMetaData.parameterModeUnknown)
1:306fdfe: 				  return("PARAMETER_MODE_UNKNOWN");
1:306fdfe: 		else
1:306fdfe: 				  return("ERROR: donot recognize this parameter mode");
1:306fdfe:   	}
1:5110b31: 	/**
1:5110b31:          * tests parameterMetaData and reports error if the ParameterMetaData results
1:5110b31: 	 * does not match the expected results.
1:5110b31:          *
1:5110b31:          * @param paramMetaData ParameterMetadata object
1:5110b31: 	 * @param paramMetaDataArray 2 dimensional array containing expected test results. 
1:5110b31: 	 * @exception SQLException if any error occurs
1:5110b31:          */
1:306fdfe: 	static void testParameterMetaData(ParameterMetaData paramMetaData, String [][] paramMetaDataArray) throws SQLException {
1:306fdfe: 		int numParam = paramMetaData.getParameterCount();
1:306fdfe: 		
1:306fdfe: 		for (int i=0, j=0; i<numParam; i++) {	
1:306fdfe:                        	assertEquals("Unexpected parameter isNullable", paramMetaDataArray[i][j++], parameterIsNullableInStringForm(paramMetaData.isNullable(i+1)));
1:306fdfe:                        	assertEquals("Unexpected parameter isSigned", Boolean.valueOf(paramMetaDataArray[i][j++]).booleanValue(), paramMetaData.isSigned(i+1));
1:306fdfe:                        	assertEquals("Unexpected parameter getPrecision", Integer.parseInt(paramMetaDataArray[i][j++]) ,  paramMetaData.getPrecision(i+1));
1:306fdfe:                        	assertEquals("Unexpected parameter getScale", Integer.parseInt(paramMetaDataArray[i][j++]) , paramMetaData.getScale(i+1));
1:306fdfe:                        	assertEquals("Unexpected parameter getParameterType", Integer.parseInt(paramMetaDataArray[i][j++]) , paramMetaData.getParameterType(i+1));
1:306fdfe:                        	assertEquals("Unexpected parameter getParameterTypeName", paramMetaDataArray[i][j++] , paramMetaData.getParameterTypeName(i+1));
1:306fdfe:                        	assertEquals("Unexpected parameter getParameterClassName", paramMetaDataArray[i][j++] , paramMetaData.getParameterClassName(i+1));
1:306fdfe:                        	assertEquals("Unexpected parameter getParameterMode", paramMetaDataArray[i][j++] , parameterModeInStringForm(paramMetaData.getParameterMode(i+1)));
1:306fdfe: 			
1:306fdfe: 			j=0;
1:306fdfe: 		}
1:306fdfe: 	}
1:5110b31:  	/**
1:5110b31:          * ParameterMetaData Negative Test 
1:5110b31:          *
1:5110b31:          * @param paramMetaData ParameterMetadata object
1:5110b31:          * @exception SQLException if any error occurs
1:5110b31:          */	
1:306fdfe: 	static void dumpParameterMetaDataNegative(ParameterMetaData paramMetaData) throws SQLException {
1:67e1463: 
1:306fdfe:                 int numParam = paramMetaData.getParameterCount();
1:306fdfe: 
1:67e1463: 		/*
1:67e1463:                 *  DERBY-3039 - ParameterMetaData.isNullable() returns differenet SQLState in Embedded  
1:67e1463:                 *  and Network Client 
1:67e1463:                 */
1:67e1463: 		String expectedSQLState = (usingEmbedded())?"XCL13":"XCL14";
1:67e1463: 	
1:306fdfe: 		try {
1:306fdfe:        			paramMetaData.isNullable(-1);
1:306fdfe:        			fail("parameterMetaData.isNullable(-1) should have failed");
1:306fdfe:    		} catch (SQLException se)
1:306fdfe:        		{
1:67e1463:        			assertSQLState(expectedSQLState, se);
1:306fdfe:        		}
1:306fdfe: 		try {
1:306fdfe:                         paramMetaData.isNullable(0);
1:306fdfe:                         fail("parameterMetaData.isNullable(0) should have failed");
1:306fdfe:                 } catch (SQLException se)
1:306fdfe:                 {
1:67e1463:                         assertSQLState(expectedSQLState, se);
1:306fdfe:                 }
1:306fdfe: 		try {
1:306fdfe:                         paramMetaData.isNullable(numParam+1);
1:306fdfe:                         fail("parameterMetaData.isNullable("+(numParam+1)+") should have failed");
1:306fdfe:                 } catch (SQLException se)
1:306fdfe:                 {
1:67e1463:                         assertSQLState(expectedSQLState, se);
1:306fdfe:                 }
1:306fdfe: 
1:306fdfe: 	}
1:306fdfe: 	/**
1:5110b31:          * A simple method to test callable statement. This is the Java method 
1:5110b31: 	 * for procedure dummyint.
1:5110b31:          *
1:5110b31:          * @param in_param 
1:5110b31: 	 * @param in_param2  
1:5110b31: 	 * @param in_param3 
1:5110b31: 	 * @param in_param4
1:5110b31:          * @exception SQLException
1:5110b31:          */
1:306fdfe:         public static void dummyint (int in_param, int in_param2, int[] in_param3, int[] in_param4)
1:306fdfe:                                                                    throws SQLException {
1:306fdfe: 
1:306fdfe:                 in_param4[0] = 11111;
1:306fdfe:         }
1:5110b31: 
1:5110b31: 	/**
1:5110b31:          *  This is the Java method for procedure dummyint.
1:5110b31:          *
1:5110b31:          * @param in_param  
1:5110b31:          * @param in_param2 
1:5110b31:          * @param in_param3 
1:5110b31:          * @param in_param4 
1:5110b31:          * @exception SQLException
1:5110b31:          */
1:306fdfe:         public static void dummyint2 (int in_param, int in_param2, int[] in_param3, int[] in_param4)
1:306fdfe:                                                                    throws SQLException {
1:306fdfe:                 in_param4[0] = 22222;
1:306fdfe:         }
1:306fdfe: 
1:5110b31: 	/**
1:5110b31: 	 * A really simple method to test callable statement. This is the Java method
1:5110b31:          * for procedure dummy_numeric_Proc.
1:5110b31:          *
1:5110b31:          * @param max_param  
1:5110b31:          * @param min_param  
1:5110b31:          * @exception SQLException
1:5110b31:          */
1:306fdfe:         public static void dummy_numeric_Proc (BigDecimal[] max_param,BigDecimal[] min_param)
1:306fdfe:                                                                  throws SQLException {
1:306fdfe:         }
1:5110b31: 	
1:5110b31: 	/**
1:5110b31:          * Java method for procedure PMDC which tests ParameterMetaData for Java procedures 
1:5110b31:          * with CHAR parameters.  
1:5110b31: 	 * 
1:5110b31:          * @param in_param 
1:5110b31:          * @param in_param2
1:5110b31:          * @param in_param3 
1:5110b31:          * @param in_param4 
1:5110b31:          */
1:306fdfe:         public static void dummyString (String in_param, String in_param2, String[] in_param3, String[] in_param4) {
1:306fdfe:         }
1:5110b31: 	
1:5110b31: 	/**
1:1e90bf4:      * Java method for procedure PMDT which tests ParameterMetaData for Java procedures 
1:1e90bf4:      * with TIMESTAMP parameters.  
1:1e90bf4:      */
1:1e90bf4:     public static void dummyString (Timestamp in_param1, Timestamp[] inout_param2, Timestamp[] out_param3) {}
1:1e90bf4: 
1:1e90bf4: 	
1:1e90bf4: 	/**
1:5110b31:          * Java method for procedure PMDD which tests ParameterMetaData for Java procedures
1:5110b31: 	 * with DECIMAL parameters. 
1:5110b31:          *
1:5110b31:          * @param in_param  
1:5110b31:          * @param in_param2 
1:5110b31:          * @param in_param3 
1:5110b31:          * @param in_param4 
1:5110b31:          */
1:306fdfe:         public static void dummyDecimal(BigDecimal in_param, BigDecimal in_param2, BigDecimal[] in_param3, BigDecimal[] in_param4) {
1:67e1463: 	 }
1:4bad559: 
1:4bad559:     /** Java method for testing procedures with boolean args */
1:4bad559:     public static void booleanProc( boolean inarg, boolean[] outarg, boolean[] inoutarg )
1:4bad559:     {
1:4bad559:         outarg[ 0 ] = inarg;
1:4bad559:         inoutarg[ 0 ] = !inoutarg[ 0 ];
1:4bad559:     }
1:306fdfe: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:       		Object x = 1;
/////////////////////////////////////////////////////////////////////////
1:                 Object x = 1;
commit:1e90bf4
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Timestamp;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1:          * test ParameterMetaData for Java procedures with TIMESTAMP parameters
1: 	 *
1: 	 * @exception SQLException if error occurs
1:          */
1:     public void testParameterMetadataWithTimestampParameters () throws SQLException
1:     {
1:         Statement stmt = createStatement();
1:         stmt.execute("CREATE PROCEDURE PMDT(IN pmdI_1 TIMESTAMP, INOUT pmdI_2 TIMESTAMP, OUT pmdI_3 TIMESTAMP) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyString'");
1:         CallableStatement cs = prepareCall("CALL PMDT(?, ?, ?)");
1:         // parameter 1 is input only	
1:         cs.setTimestamp(1, new Timestamp( 0L ) );
1:         // parameter 2 is input and output
1:         Object x = new Timestamp( 2L );
1:         cs.setObject(2,x, Types.CHAR);
1:         cs.registerOutParameter(2,Types.TIMESTAMP);
1:         //parameter 3 is output only
1:         cs.registerOutParameter(3,Types.TIMESTAMP);
1:         //verify the meta data for the parameters
1:         ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:         assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1:         
1:         //expected values to be stored in a 2dim. array
1:         String parameterMetaDataArray0 [][] = {
1:             //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:             {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_IN"},
1:             {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_IN_OUT"},
1:             {"PARAMETER_NULLABLE", "false", "29", "9", "93", "TIMESTAMP", "java.sql.Timestamp", "PARAMETER_MODE_OUT"}};
1:         
1:         testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1:         
1:         cs.close();
1:         stmt.execute("DROP PROCEDURE PMDT");
1:         stmt.close();
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:      * Java method for procedure PMDT which tests ParameterMetaData for Java procedures 
1:      * with TIMESTAMP parameters.  
1:      */
1:     public static void dummyString (Timestamp in_param1, Timestamp[] inout_param2, Timestamp[] out_param3) {}
1: 
1: 	
1: 	/**
commit:c71c5e4
/////////////////////////////////////////////////////////////////////////
1:         stmt.executeUpdate
1:             (
1:              "create table t_boolean( b boolean )"
1:              );
1: 
1:         //
1:         // Test metadata for parameters to boolean-valued functions.
1:         //
/////////////////////////////////////////////////////////////////////////
1: 
1:         //
1:         // Test metadata for boolean-valued columns.
1:         //
1:         ps = prepareStatement("insert into t_boolean values(?)");
1:         ps.setBoolean(1, true);
1: 
1:         paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 1, paramMetaData.getParameterCount());
1:         parameterMetaDataArray0 = new String[][]
1:             {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN"},
1:             };
1:         testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1:         ps.close();
commit:4bad559
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Testing a callable statement by calling a SQL procedure with 
1:      * boolean IN parameters, OUT parameters and IN_OUT parameters.
1:      */
1: 	public void testBooleanProcedureArgs() throws Exception
1:     {
1:         Statement stmt = createStatement();
1: 
1:         stmt.executeUpdate("create procedure booleanProc" + 
1:                            "( in inarg boolean, out outarg boolean, inout inoutarg boolean )" + 
1:                            "language java external name "+ 
1:                            "'org.apache.derbyTesting.functionTests." +
1:                            "tests.jdbcapi.ParameterMetaDataJdbc30Test.booleanProc' " +
1:                            "parameter style java");
1:         
1:         CallableStatement cs = prepareCall("CALL booleanProc(?,?,?)");
1:         cs.registerOutParameter(2,Types.BOOLEAN);
1:         cs.registerOutParameter(3,Types.BOOLEAN);
1: 
1:         //verify the meta data for the parameters
1:         ParameterMetaData paramMetaData = cs.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1:         
1: 		//expected values to be stored in a 2dim. array	
1: 		String [][] parameterMetaDataArray0 =
1:             {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_OUT"},
1:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN_OUT"},
1:             };
1:         
1: 		testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1:         cs.setBoolean( 1,  true );
1:         cs.setBoolean( 3, true );
1:         cs.execute();
1:         assertEquals( true, cs.getBoolean( 2 ) );
1:         assertEquals( false, cs.getBoolean( 3 ) );
1: 
1:         cs.setObject( 1,  Boolean.FALSE );
1:         cs.setObject( 3, Boolean.FALSE );
1:         cs.execute();
1:         assertEquals( false, cs.getBoolean( 2 ) );
1:         assertEquals( true, cs.getBoolean( 3 ) );
1: 
1: 		stmt.close();
1: 		cs.close();
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Java method for testing procedures with boolean args */
1:     public static void booleanProc( boolean inarg, boolean[] outarg, boolean[] inoutarg )
1:     {
1:         outarg[ 0 ] = inarg;
1:         inoutarg[ 0 ] = !inoutarg[ 0 ];
1:     }
commit:9a62527
/////////////////////////////////////////////////////////////////////////
1: 	/**
1:          * Test boolean parameters
1:      	 *
1: 	 * @exception SQLException if database access errors or other errors occur
1:          */
1: 	public void testBooleanParameters() throws SQLException
1:     {
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate
1:             (
1:              "create function booleanValue( b boolean )\n" +
1:              "returns varchar( 100 ) language java parameter style java no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.BooleanValuesTest.booleanValue'\n"
1:              );
1:         stmt.close();
1:         PreparedStatement ps = prepareStatement("values( booleanValue( ? ) )");
1: 
1:         ParameterMetaData paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 1, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:         String [][] parameterMetaDataArray0 =
1:             {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "1", "0", "16", "BOOLEAN", "java.lang.Boolean", "PARAMETER_MODE_IN"},
1:             };
1: 
1:         testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1: 		ps.close();
1: 	}
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ParameterMetaDataJdbc30Test");
1: 
1:         if (JDBC.vmSupportsJSR169()) {
1:             return new BaseTestSuite(
1:                 "Empty ParameterMetaDataJDBC30. " +
1:                 "JSR169 does not support ParameterMetaData");
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             BaseTestSuite suite = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00306c2
/////////////////////////////////////////////////////////////////////////
1:                 // Create procedure used by
1:                 // testParameterMetadataWithDECIMALParameters() and
1:                 // testParameterMetadataWithLITERALParameters().
1:                 stmt.execute(
1:                     "CREATE PROCEDURE PMDD(IN pmdI_1 DECIMAL(5,3), " +
1:                     "IN pmdI_2 DECIMAL(4,2), INOUT pmdI_3 DECIMAL(9,0), " +
1:                     "OUT pmdI_4 DECIMAL(10,2)) language java " +
1:                     "parameter style java external name " +
1:                     "'org.apache.derbyTesting.functionTests.tests.jdbcapi." +
1:                     "ParameterMetaDataJdbc30Test.dummyDecimal'");
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:03e7a1b
/////////////////////////////////////////////////////////////////////////
1:         stmt.execute("drop procedure dummyint");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         stmt.executeUpdate("create procedure dummyint( "
1:                 + "in a integer, in b integer, "
1:                 + "out c integer, inout d integer) "
1:                 + "language java external name "
1:                 + "'org.apache.derbyTesting.functionTests."
1:                 + "tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint' "
1:                 + "parameter style java");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         stmt.execute("drop procedure dummyint");
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:67e1463
/////////////////////////////////////////////////////////////////////////
1: 			assertSQLState("22019", e);
/////////////////////////////////////////////////////////////////////////
1: 
1: 		/*
1:                 *  DERBY-3039 - ParameterMetaData.isNullable() returns differenet SQLState in Embedded  
1:                 *  and Network Client 
1:                 */
1: 		String expectedSQLState = (usingEmbedded())?"XCL13":"XCL14";
1: 	
1:        			assertSQLState(expectedSQLState, se);
1:                         assertSQLState(expectedSQLState, se);
1:                         assertSQLState(expectedSQLState, se);
/////////////////////////////////////////////////////////////////////////
1: 	 }
commit:96c3cce
/////////////////////////////////////////////////////////////////////////
1:              			      " CAST(tablename AS VARCHAR(128)) like ? and CAST(tableID AS CHAR(36)) like ?");
/////////////////////////////////////////////////////////////////////////
1: 							"where CAST(tablename AS VARCHAR(128)) like ? escape CAST(? AS VARCHAR(128))");
/////////////////////////////////////////////////////////////////////////
1: 							"where CAST(tablename AS VARCHAR(128)) like 'SYS%' and " + 
1: 							"CAST(tableID AS VARCHAR(128)) like '8000001%'");
commit:ed7a4d6
/////////////////////////////////////////////////////////////////////////
0: 		 if (JDBC.vmSupportsJSR169())
0: 			return new TestSuite("Empty ParameterMetaDataJDBC30. JSR169 does not support ParameterMetaData");
0: 		else {	
1:         		suite.addTest(baseSuite("ParameterMetaDataJdbc30Test:embedded"));
1:         		suite.addTest(
1:                 		TestConfiguration.clientServerDecorator(
1:                         		baseSuite("ParameterMetaDataJdbc30Test:client")));
1: 		}
commit:5110b31
/////////////////////////////////////////////////////////////////////////
1:  * Test the ParameterMetaData class in JDBC 30.
1:  * This test converts the old jdbcapi/parameterMetaDataJdbc30.java 
1:  * test to JUnit. 
1: 
1: 	/**
1:          * Create a test with the given name.
1:          *
1:          * @param name name of the test.
1:          */
1: 
1:         public ParameterMetaDataJdbc30Test(String name) {
1:                 super(name);
1: 	/**
1:          * Create suite containing client and embedded tests and to run
1: 	 * all tests in this class
1:          */
/////////////////////////////////////////////////////////////////////////
1: 			 *
/////////////////////////////////////////////////////////////////////////
1:      	* Testing a callable statement by calling a SQL procedure with 
1: 	* IN parameters, OUT parameters and IN_OUT parameters.
1:         *
1: 	* @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1: 		/*
1: 		/* bug 4450 - parameter meta data info for the return parameter was giving
1:       		/* null pointer exception. In the past, we didn't need to keep the return
1:       		/* parameter info for callable statement execution and hence we never
1:       		/* generated the meta data for it. To fix the problem, at the parsing time,
1:       		/* I set a flag if the call statement is of ? = form. If so, the first
1:       		/* parameter is a return parameter and save it's meta data rather than
1:       		/* discarding it.
1: 	 	 */	
1: 	
/////////////////////////////////////////////////////////////////////////
1:          * Testing a prepared statement.
1:      	 *
1: 	 * @exception SQLException if database access errors or other errors occur
1:          */
/////////////////////////////////////////////////////////////////////////
1: 	
1: 		/*
1:       		 *  JCC seems to report these parameters as MODE_UNKNOWN, where as Derby uses MODE_IN
1:       		 *  JCC behaviour with network server matches its behaviour with DB2
1:       		 *  getPrecision() returns 0 for CHAR/DATE/BIT types for Derby. JCC shows maxlen
1: 		 */
1: 		/*
1: 		 * bug 4533 - associated parameters should not be included in the parameter meta data list
1:       		 * Following statement systab will generate 4 associated parameters for the 2
1:       		 * user parameters. This results in total 6 parameters for the prepared statement
1:       		 * internally. But we should only show 2 user visible parameters through
1:       		 * getParameterMetaData().
1: 		 */
/////////////////////////////////////////////////////////////////////////
1: 	/** 
1: 	 * DERBY-44 added support for SELECT ... WHERE column LIKE ? ESCAPE ?
1:          * This test case tests
1: 	 *
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1: 	 /** 
1:           * test execute statements that no parameters would be returned if 
1:           * prepareStatement("execute statement systab using values('SYS%','8000001%')");
1: 	  *
1: 	  * @exception SQLException if error occurs
1: 	
1: 		/*
1: 		 * the test no longer tests 4552, but kept as an interesting test scenario
1:                  * bug 4552 - no parameters would be returned for execute statement using
1:                  * System.out.println("Bug 4552 - no parameters would be returned for execute statement using");
1:                  * orig: ps = con.prepareStatement("execute statement systab using values('SYS%','8000001%')");
1: 		 */
/////////////////////////////////////////////////////////////////////////
1: 	/** 
1:          * testing SELECT statements for BOOLEANs (1 for true, 0 for false) 
1: 	 *
1: 	 * @exception SQLException if error occurs
1: 		/*
1: 		 * Bug 4654 - Null Pointer exception while executuing a select with a
1:          	 * where clause parameter of type 'TRUE' or 'FALSE' constants. The existing prior to
1:          	 * exposing parameter metadata didn't need to fill in metadata information for where
1:          	 * clause parameter in the example above.
1:          	 * This no longer makes sense, for we cannot take BOOLEANs anymore.
1:          	 * replace with a simple where 1 = ?. Which would take either 1 for true, or 0 for false
1: 		 */
/////////////////////////////////////////////////////////////////////////
1:          * test: no parameter for the statement and then do getParameterMetaData() 
1: 	 *
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1:          * test: the scale returned should be the one set by registerOutParameter 
1: 	 *
1:  	 * @exception SQLException
1: 		/*
/////////////////////////////////////////////////////////////////////////
1:          * test behaviour of meta data and out params after re-compile 
1: 	 *
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1: 		/* 
/////////////////////////////////////////////////////////////////////////
1:          * test ParameterMetaData for Java procedures with INTEGER parameters 
1: 	 * 
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1:          * test ParameterMetaData for Java procedures with CHAR parameters
1: 	 *
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1: 	 *
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1:          * test ParameterMetaData for Java procedures with some literal parameters
1: 	 *
1: 	 * @exception SQLException if error occurs
/////////////////////////////////////////////////////////////////////////
1:          * print the parameter isNullable value in human readable form
1: 	 *
1: 	 * @param nullabilityValue 
1: 	// @return the nullability status of the given parameter
/////////////////////////////////////////////////////////////////////////
1: 	/**
1:          * print the parameter mode in human readable form
1:          *
1:          * @param mode identifies parameter's mode (IN, OUT, or IN_OUT)
1: 	 * @return     the parameter mode in readable form
1:          *             
1:          */
/////////////////////////////////////////////////////////////////////////
1: 	/**
1:          * tests parameterMetaData and reports error if the ParameterMetaData results
1: 	 * does not match the expected results.
1:          *
1:          * @param paramMetaData ParameterMetadata object
1: 	 * @param paramMetaDataArray 2 dimensional array containing expected test results. 
1: 	 * @exception SQLException if any error occurs
1:          */
/////////////////////////////////////////////////////////////////////////
1:  	/**
1:          * ParameterMetaData Negative Test 
1:          *
1:          * @param paramMetaData ParameterMetadata object
1:          * @exception SQLException if any error occurs
1:          */	
/////////////////////////////////////////////////////////////////////////
1: 	/**
1:          * A simple method to test callable statement. This is the Java method 
1: 	 * for procedure dummyint.
1:          *
1:          * @param in_param 
1: 	 * @param in_param2  
1: 	 * @param in_param3 
1: 	 * @param in_param4
1:          * @exception SQLException
1:          */
1: 
1: 	/**
1:          *  This is the Java method for procedure dummyint.
1:          *
1:          * @param in_param  
1:          * @param in_param2 
1:          * @param in_param3 
1:          * @param in_param4 
1:          * @exception SQLException
1:          */
1: 	/**
1: 	 * A really simple method to test callable statement. This is the Java method
1:          * for procedure dummy_numeric_Proc.
1:          *
1:          * @param max_param  
1:          * @param min_param  
1:          * @exception SQLException
1:          */
1: 	
1: 	/**
1:          * Java method for procedure PMDC which tests ParameterMetaData for Java procedures 
1:          * with CHAR parameters.  
1: 	 * 
1:          * @param in_param 
1:          * @param in_param2
1:          * @param in_param3 
1:          * @param in_param4 
1:          */
1: 	
1: 	/**
1:          * Java method for procedure PMDD which tests ParameterMetaData for Java procedures
1: 	 * with DECIMAL parameters. 
1:          *
1:          * @param in_param  
1:          * @param in_param2 
1:          * @param in_param3 
1:          * @param in_param4 
1:          */
commit:306fdfe
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.sql.Connection;
0: import java.sql.Driver;
0: import java.sql.DriverManager;
0: import java.util.Properties;
1: import java.sql.CallableStatement;
1: import java.sql.ParameterMetaData;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: import java.sql.Types;
0: import java.math.BigDecimal;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseTestCase;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestCase;
0: import junit.framework.TestResult;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  *
1:  */
1: public class ParameterMetaDataJdbc30Test extends BaseJDBCTestCase {
1: 
0:         public ParameterMetaDataJdbc30Test(String arg0) {
0:                 super(arg0);
1:         }
1:         
0:       	// to run all tests in this class
1: 	public static Test suite() {
0:         	TestSuite suite = new TestSuite("ParameterMetaDataJdbc30Test");
1: 
0:         	suite.addTest(baseSuite("ParameterMetaDataJdbc30Test:embedded"));
1: 
0:         	suite.addTest(
0:                 	TestConfiguration.clientServerDecorator(
0:                         	baseSuite("ParameterMetaDataJdbc30Test:client")));
1: 		
1:         	return suite;
1:     	}
1: 
1: 	private static Test baseSuite(String name)
1:     	{
0:         	TestSuite suite = new TestSuite(name);
1: 
1:         	suite.addTestSuite(ParameterMetaDataJdbc30Test.class);
1: 
1:         	return new CleanDatabaseTestSetup(suite) {
1: 			/**
1:              		 * Creates the tables and the stored procedures used in the test
1:              		 * cases.
1:              		 * @exception SQLException if a database error occurs
1:              		 */
1:             		protected void decorateSQL(Statement stmt) throws SQLException {
1:             		
1: 				Connection conn = getConnection();
1: 
1: 				/**
1: 		                 * Creates the table used in the test cases.
1:                			 *
1:                  		 */
1:                 		stmt.execute("create table t ( "+
1:                           		/* 1 */ "c char(5), "+
1:                           		/* 2 */ "iNoNull int not null, "+
1:                           		/* 3 */ "i int, "+
1:                           		/* 4 */ "de decimal, "+
1:                           		/* 5 */ "d date)");
1:                 		stmt.executeUpdate("create function RDB(P1 INT) " +
1:                                 		   "RETURNS DECIMAL(10,2) " +
1:                                   		   "language java external name " +
1:                                   		   "'org.apache.derbyTesting.functionTests." +
1:                                   		   "tests.lang.outparams30.returnsBigDecimal' " +
1:                                    		   "parameter style java");
1:             		}
1:         	};
1:   	}
1: 
1:        /**
0:      	* testing a callable statement.
1:      	*/
1: 	public void testCallableStatement () throws SQLException {
1: 
1:         	Statement stmt = createStatement();
1: 
1:         	stmt.executeUpdate("create procedure dummyint( " + 
1: 				   "in a integer, in b integer, " + 
1: 				   "out c integer, inout d integer) " + 
1: 				   "language java external name "+ 
1: 				   "'org.apache.derbyTesting.functionTests." +
1: 				   "tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint' " +
1: 				   "parameter style java");
1:        		CallableStatement cs = prepareCall("CALL dummyint(?,?,?,?)");
1: 		// parameters 1 and 2 are input only
1:       		cs.setInt(1,1);
1:       		cs.setInt(2,1);
1:       		//parameter 3 is output only
1:       		cs.registerOutParameter(3,Types.INTEGER);
1:       		// parameter 4 is input and output
0:       		Object x = new Integer(1);
1:       		cs.setObject(4,x, Types.INTEGER);
1:       		cs.registerOutParameter(4,Types.INTEGER);
1: 
1:       		//verify the meta data for the parameters
1:       		ParameterMetaData paramMetaData = cs.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array	
1: 		String [][] parameterMetaDataArray0 = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"},
1: 		{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"}};
1: 			
1: 		testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
0:       		// TODO: Some of the OUT params are getting reported as IN_OUT for embedded.
0:       		// Network server reports it correctly.
1:       		cs.execute();
1: 
0: 		//bug 4450 - parameter meta data info for the return parameter was giving
0:       		//null pointer exception. In the past, we didn't need to keep the return
0:       		//parameter info for callable statement execution and hence we never
0:       		//generated the meta data for it. To fix the problem, at the parsing time,
0:       		//I set a flag if the call statement is of ? = form. If so, the first
0:       		//parameter is a return parameter and save it's meta data rather than
0:       		//discarding it.
1:       		cs = prepareCall("? = call RDB(?)");
1:       		paramMetaData = cs.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray1 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "31", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"}};
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray1);
1: 
1: 		stmt.close();
1: 		cs.close();
1: 	}
1: 	/**
0:         * testing a prepared statement.
1:         */
1: 	public void testPreparedStatement () throws SQLException {
1: 		//next testing a prepared statement
1:       		PreparedStatement ps = prepareStatement("insert into t values(?, ?, ?, ?, ?)");
1:       		ps.setNull(1, java.sql.Types.CHAR);
1:       		ps.setInt(2, 1);
1:       		ps.setNull(3, java.sql.Types.INTEGER);
1:       		ps.setBigDecimal(4,new BigDecimal("1"));
1:       		ps.setNull(5, java.sql.Types.DATE);
1: 
1:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 5, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String [][] parameterMetaDataArray0 = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "5", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "5", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "false", "10", "0", "91", "DATE", "java.sql.Date", "PARAMETER_MODE_IN"}};
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
0:       		// JCC seems to report these parameters as MODE_UNKNOWN, where as Derby uses MODE_IN
0:       		// JCC behaviour with network server matches its behaviour with DB2
0:       		// getPrecision() returns 0 for CHAR/DATE/BIT types for Derby. JCC shows maxlen
1:       		ps.execute();
1: 
0: 		//bug 4533 - associated parameters should not be included in the parameter meta data list
0:       		//Following statement systab will generate 4 associated parameters for the 2
0:       		//user parameters. This results in total 6 parameters for the prepared statement
0:       		//internally. But we should only show 2 user visible parameters through
0:       		//getParameterMetaData().
1:       		ps = prepareStatement("select * from sys.systables where " +
0:              			      " tablename like ? and tableID like ?");
1:       		ps.setString (1, "SYS%");
1:       		ps.setString (2, "8000001%");
1:       		paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray1 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "128", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "false", "36", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN"}};
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray1);
1: 
1:       		ps.execute();
1: 
1: 		ps.close();
1: 	}
1: 
0: 	/** DERBY-44 added support for SELECT ... WHERE column LIKE ? ESCAPE ?
0:          *  This test case tests
1:          *   a) that such a statement compiles, and
1:          *   b) that we get the correct error message if the escape
1:          *      sequence is an empty string (at one point this would
1:          *      lead to a StringIndexOutOfBoundsException)`
1: 	 */
1: 	public void testLikeEscaleStatement () throws SQLException {
1: 
1:       		//variation 1, testing DERBY-44 
1:       		PreparedStatement ps = prepareStatement("select * from sys.systables " +
0: 							"where tablename like ? escape ?");
1:       		ps.setString (1, "SYS%");
1:       		ps.setString (2, "");
1:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "128", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "false", "128", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"}};
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1:       		try {
1:           		ResultSet rs = ps.executeQuery();
1:           		rs.next();
1: 			fail("DERBY-44 failed (didn't get SQLSTATE 22019)");
1:           		rs.close();
1:       		} catch (SQLException e) {
0: 			assertSQLState("22019", e.getSQLState(), e);
1:       		}
1: 		ps.close();
1: 	}
1: 
0: 	 /** the test no longer tests 4552, but kept as an interesting test scenario
0:           * bug 4552 - no parameters would be returned for execute statement using
0:           * System.out.println("Bug 4552 - no parameters would be returned for execute statement using");
0:           * orig: ps = con.prepareStatement("execute statement systab using values('SYS%','8000001%')");
1:           */
1: 
1: 	public void testExecuteStatementUsing () throws SQLException {
1: 
1:       		PreparedStatement ps = prepareStatement("select * from sys.systables " + 
0: 							"where tablename like 'SYS%' and " + 
0: 							"tableID like '8000001%'");
1: 
1:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 0, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = null;
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1: 
1:       		ps.execute();
1: 
1: 		ps.close();
1: 	}
0: 	/** Bug 4654 - Null Pointer exception while executuing a select with a
0:          *  where clause parameter of type 'TRUE' or 'FALSE' constants. The existing prior to
0:          *  exposing parameter metadata didn't need to fill in metadata information for where
0:          *  clause parameter in the example above.
0:          *  This no longer makes sense, for we cannot take BOOLEANs anymore.
0:          *  replace with a simple where 1 = ?. Which would take either 1 for true, or 0 for false
1: 	 */ 
1: 	public void testSelectStatementUsingBoolean () throws SQLException {
1: 
0:       		//Bug 4654 - fill in where clause parameter type info
1:       		PreparedStatement ps = prepareStatement("select * from t "+  
1: 							"where 1=? for update");
1: 
1:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 1, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"}};
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1:       		dumpParameterMetaDataNegative(paramMetaData);
1:       		ps.setInt(1,1);
1:       		ps.execute();
1: 
1: 		ps.close();
1: 	}
1: 	/** 
0:          *  test: no parameter for the statement and then do getParameterMetaData() 
1:          */
1: 	public void testSelectStatementUsingNoParameter () throws SQLException {
1: 
1:       		PreparedStatement ps = prepareStatement("select * from t");
1:       		ParameterMetaData paramMetaData = ps.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 0, paramMetaData.getParameterCount());
1: 		
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = null; 
1: 
1:                 testParameterMetaData(paramMetaData, parameterMetaDataArray0);
1: 
1:       		ps.execute();
1: 
1: 		ps.close();
1: 	}
1: 	/**
0:          *  test: the scale returned should be the one set by registerOutParameter 
1:          */
1: 	public void testCallableStatementReturnedScale () throws SQLException {
1: 
1: 		/**
1:                  *  DERBY-2810 - getParameterType behavior is different in Embedded and 
1:                  *  Network Client when set by registerOutParameter 
1:                  *  temporarily disabling Network Client.
1:                  */
1: 		if (!usingDerbyNetClient()) {
1: 			Statement stmt = createStatement();
1:       			stmt.executeUpdate("create procedure dummy_numeric_Proc(out a NUMERIC(30,15), out b NUMERIC(30,15)) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummy_numeric_Proc'");
1:       			CallableStatement cs = prepareCall("CALL dummy_numeric_Proc(?,?)");
1:       			cs.registerOutParameter(1, Types.NUMERIC);
1:       			cs.registerOutParameter(2, Types.NUMERIC,15);
1:       			cs.execute();
1: 			assertEquals("Unexpected parameter count", 2, cs.getParameterMetaData().getParameterCount());
1: 
1: 			//expected values to be stored in a 2dim. array
1:                 	String parameterMetaDataArray0 [][] = {
1:                 	//isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 	{"PARAMETER_NULLABLE", "true", "30", "15", "2", "NUMERIC", "java.math.BigDecimal", "PARAMETER_MODE_OUT"},
1:                 	{"PARAMETER_NULLABLE", "true", "30", "15", "2", "NUMERIC", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1: 
1:                 	testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1: 		
1: 			cs.close();
1: 		}
1: 	}
1: 	/**
0:          *  test behaviour of meta data and out params after re-compile 
1:          */
1: 	public void testMetatdataAfterProcRecompile () throws SQLException {
1: 
1: 		Statement stmt = createStatement();
1:       		CallableStatement cs = prepareCall("CALL dummyint(?,?,?,?)");
1:           	cs.registerOutParameter(3,Types.INTEGER);
1:       		cs.registerOutParameter(4,Types.INTEGER);
1:       		cs.setInt(1,1);
1:       		cs.setInt(2,1);
1:           	cs.setInt(4,4);
1: 	
1: 		//expected values to be stored in a 2dim. array
1: 		String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"}};
1: 
1:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1: 
1:           	cs.execute();
1: 		assertEquals("Unexpected DUMMYINT alias returned", 11111, cs.getInt(4));
1: 
1: 		/** 
1: 		 *  DERBY-2786 - Behaviour of inout parameters in Embedded and Network client is
1:          	 *  different if parameters are set but the CallableStatment is not executed.
1: 		 *  temporarily disabling Network Client. 
1:          	 */
1: 		if (!usingDerbyNetClient()) {
1:       			stmt.executeUpdate("drop procedure dummyint");
1:       			stmt.executeUpdate("create procedure dummyint(in a integer, in b integer, out c integer, inout d integer) language java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint2' parameter style java");
1:       			cs.execute();
1: 
1: 			String parameterMetaDataArray1 [][] = {
1:                 	//isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"},
1:                 	{"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"}};
1: 
1:                 	testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray1);
1: 
1:       			cs.setInt(4, 6);
1:       			// following is incorrect sequence, should execute first, then get
1:       			// but leaving it in as an additional negative test. see beetle 5886
1: 			assertEquals("Unexpected DUMMYINT alias returned", 6, cs.getInt(4));
1: 
1:       			cs.execute();
1: 			assertEquals("Unexpected DUMMYINT alias returned", 22222, cs.getInt(4));
1: 		}
1:       		cs.close();
1: 	}
1: 	/**
0:          *  test ParameterMetaData for Java procedures with INTEGER parameters 
1:          */
1: 	public void testParameterMetadataWithINTParameters () throws SQLException {
1: 
1: 		Statement stmt = createStatement();
1:        		stmt.execute("CREATE PROCEDURE PMDI(IN pmdI_1 INTEGER, IN pmdI_2 INTEGER, INOUT pmdI_3 INTEGER, OUT pmdI_4 INTEGER) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint'");
1:       		CallableStatement cs = prepareCall("CALL PMDI(?, ?, ?, ?)");
1: 	
1: 		// parameters 1 and 2 are input only
1:                	cs.setInt(1,1);
1:         	cs.setInt(2,1);
1: 		// parameter 3 is input and output
0:                 Object x = new Integer(1);
1:                 cs.setObject(3,x, Types.INTEGER);
1:                 cs.registerOutParameter(3,Types.INTEGER);
1:                	//parameter 4 is output only
1:                	cs.registerOutParameter(4,Types.INTEGER);
1: 
1:                	//verify the meta data for the parameters
1:                	ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:                	assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_IN_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "0", "4", "INTEGER", "java.lang.Integer", "PARAMETER_MODE_OUT"}};
1: 
1:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1: 			
1:        		cs.close();
1:        		stmt.execute("DROP PROCEDURE PMDI");
1:             stmt.close();
1: 	}
1: 	/**
0:          *  test ParameterMetaData for Java procedures with CHAR parameters
1:          */
1: 	 public void testParameterMetadataWithCHARParameters () throws SQLException {
1: 
1: 		Statement stmt = createStatement();
1:        		stmt.execute("CREATE PROCEDURE PMDC(IN pmdI_1 CHAR(10), IN pmdI_2 VARCHAR(25), INOUT pmdI_3 CHAR(19), OUT pmdI_4 VARCHAR(32)) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyString'");
1:       		CallableStatement cs = prepareCall("CALL PMDC(?, ?, ?, ?)");
1: 		// parameters 1 and 2 are input only	
1: 		cs.setString(1, "TEST0");
1: 		cs.setString(2, "TEST1");
1: 		// parameter 3 is input and output
1:                 Object x = new String("TEST");
1:                 cs.setObject(3,x, Types.CHAR);
1:                 cs.registerOutParameter(3,Types.CHAR);
1:                 //parameter 4 is output only
1:                 cs.registerOutParameter(4,Types.CHAR);
1:  		//verify the meta data for the parameters
1:                	ParameterMetaData paramMetaData = cs.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1: 	
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "false", "10", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "false", "25", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "false", "19", "0", "1", "CHAR", "java.lang.String", "PARAMETER_MODE_IN_OUT"},
1:                 {"PARAMETER_NULLABLE", "false", "32", "0", "12", "VARCHAR", "java.lang.String", "PARAMETER_MODE_OUT"}};
1: 
1: 		testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1: 
1:        		cs.close();
1:        		stmt.execute("DROP PROCEDURE PMDC");
1:             stmt.close();
1: 	}
1: 	/**
1:          *  test ParameterMetaData for Java procedures with DECIMAL parameters
1:          */
1: 	public void testParameterMetadataWithDECIMALParameters () throws SQLException {
1: 
1: 		Statement stmt = createStatement();
0:        		stmt.execute("CREATE PROCEDURE PMDD(IN pmdI_1 DECIMAL(5,3), IN pmdI_2 DECIMAL(4,2), INOUT pmdI_3 DECIMAL(9,0), OUT pmdI_4 DECIMAL(10,2)) language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyDecimal'");
1:       		CallableStatement cs = prepareCall("CALL PMDD(?, ?, ?, ?)");
1: 
1: 		// parameters 1 and 2 are input only
1:                 cs.setBigDecimal(1,new BigDecimal("1"));;
1:                 cs.setBigDecimal(2,new BigDecimal("1"));;
1:                 // parameter 3 is input and output
1:                 Object x = new BigDecimal(1.1);
1:                 cs.setObject(3,x, Types.DECIMAL);
1:                 cs.registerOutParameter(3,Types.DECIMAL);
1:                 //parameter 4 is output only
1:                 cs.registerOutParameter(4,Types.DECIMAL);
1: 		//verify the meta data for the parameters
1:               	ParameterMetaData paramMetaData = cs.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 4, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "5", "3", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "4", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1: 
1:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1: 
1:        		cs.close();
1: 	}
1: 	/**
0:          *  test ParameterMetaData for Java procedures with some literal parameters
1:          */
1: 	public void testParameterMetadataWithLITERALParameters () throws SQLException {
1: 
1: 		Statement stmt = createStatement();
1:       		CallableStatement cs = prepareCall("CALL PMDD(32.4, ?, ?, ?)");
1: 		// parameters 2 is input only
1:                 cs.setBigDecimal(1,new BigDecimal("1"));;
1:                 // parameter 3 is input and output
1:                 Object x = new BigDecimal(1.1);
1:                 cs.setObject(2,x, Types.DECIMAL);
1:                 cs.registerOutParameter(2,Types.DECIMAL);
1:                 //parameter 4 is output only
1:                 cs.registerOutParameter(3,Types.DECIMAL);
1: 
1: 		//verify the meta data for the parameters
1:                 ParameterMetaData paramMetaData = cs.getParameterMetaData();
1:                 assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray0 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "4", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1: 
1:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray0);
1: 
1:           	cs.close();
1: 
1:       		cs = prepareCall("CALL PMDD(32.4, 47.9, ?, ?)");
1: 		// parameter 3 is input and output
1:                 Object y = new BigDecimal(1.1);
1:                 cs.setObject(1,y, Types.DECIMAL);
1:                 cs.registerOutParameter(1,Types.DECIMAL);
1:                 //parameter 4 is output only
1:                 cs.registerOutParameter(2,Types.DECIMAL);
1: 		paramMetaData = cs.getParameterMetaData();
1:                 assertEquals("Unexpected parameter count", 2, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray1 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1: 
1:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray1);
1: 
1:           	cs.close();
1: 
1:       		cs = prepareCall("CALL PMDD(?, 38.2, ?, ?)");
1: 		// parameters 1 is input only
1:                 cs.setBigDecimal(1,new BigDecimal("1"));;
1:                 // parameter 3 is input and output
1:                 Object z = new BigDecimal(1.1);
1:                 cs.setObject(2,z, Types.DECIMAL);
1:                 cs.registerOutParameter(2,Types.DECIMAL);
1:                 //parameter 4 is output only
1:                 cs.registerOutParameter(3,Types.DECIMAL);
1: 
1: 		//verify the meta data for the parameters
1:                 paramMetaData = cs.getParameterMetaData();
1: 		assertEquals("Unexpected parameter count", 3, paramMetaData.getParameterCount());
1: 
1: 		//expected values to be stored in a 2dim. array
1:                 String parameterMetaDataArray2 [][] = {
1:                 //isNullable, isSigned, getPrecision, getScale, getParameterType, getParameterTypeName, getParameterClassName, getParameterMode
1:                 {"PARAMETER_NULLABLE", "true", "5", "3", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN"},
1:                 {"PARAMETER_NULLABLE", "true", "9", "0", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_IN_OUT"},
1:                 {"PARAMETER_NULLABLE", "true", "10", "2", "3", "DECIMAL", "java.math.BigDecimal", "PARAMETER_MODE_OUT"}};
1: 
1:                 testParameterMetaData(cs.getParameterMetaData(), parameterMetaDataArray2);
1: 
1: 
1:           	cs.close();
0:           	stmt.execute("DROP PROCEDURE PMDD");
1:             stmt.close();
1: 	}
1: 	/**
0:          *  print the parameter isNullable value in human readable form
1:          */
1: 	static String parameterIsNullableInStringForm(int nullabilityValue){
1: 		if (nullabilityValue ==  ParameterMetaData.parameterNoNulls)
1: 				  return("PARAMETER_NO_NULLS");
1: 		else if (nullabilityValue ==  ParameterMetaData.parameterNullable)
1: 				  return("PARAMETER_NULLABLE");
1: 		else if (nullabilityValue ==  ParameterMetaData.parameterNullableUnknown)
1: 				  return("PARAMETER_NULLABLE_UNKNOWN");
1: 		else
1: 				  return("ERROR: donot recognize this parameter isNullable() value");
1:   	}
1: 
0: 	//print the parameter mode in human readable form
1: 	static String parameterModeInStringForm(int mode){
1: 		if (mode ==  ParameterMetaData.parameterModeIn)
1: 				  return("PARAMETER_MODE_IN");
1: 		else if (mode ==  ParameterMetaData.parameterModeInOut )
1: 				  return("PARAMETER_MODE_IN_OUT");
1: 		else if (mode ==  ParameterMetaData.parameterModeOut)
1: 				  return("PARAMETER_MODE_OUT");
1: 		else if (mode ==  ParameterMetaData.parameterModeUnknown)
1: 				  return("PARAMETER_MODE_UNKNOWN");
1: 		else
1: 				  return("ERROR: donot recognize this parameter mode");
1:   	}
1: 	static void testParameterMetaData(ParameterMetaData paramMetaData, String [][] paramMetaDataArray) throws SQLException {
1: 		int numParam = paramMetaData.getParameterCount();
1: 		
1: 		for (int i=0, j=0; i<numParam; i++) {	
1:                        	assertEquals("Unexpected parameter isNullable", paramMetaDataArray[i][j++], parameterIsNullableInStringForm(paramMetaData.isNullable(i+1)));
1:                        	assertEquals("Unexpected parameter isSigned", Boolean.valueOf(paramMetaDataArray[i][j++]).booleanValue(), paramMetaData.isSigned(i+1));
1:                        	assertEquals("Unexpected parameter getPrecision", Integer.parseInt(paramMetaDataArray[i][j++]) ,  paramMetaData.getPrecision(i+1));
1:                        	assertEquals("Unexpected parameter getScale", Integer.parseInt(paramMetaDataArray[i][j++]) , paramMetaData.getScale(i+1));
1:                        	assertEquals("Unexpected parameter getParameterType", Integer.parseInt(paramMetaDataArray[i][j++]) , paramMetaData.getParameterType(i+1));
1:                        	assertEquals("Unexpected parameter getParameterTypeName", paramMetaDataArray[i][j++] , paramMetaData.getParameterTypeName(i+1));
1:                        	assertEquals("Unexpected parameter getParameterClassName", paramMetaDataArray[i][j++] , paramMetaData.getParameterClassName(i+1));
1:                        	assertEquals("Unexpected parameter getParameterMode", paramMetaDataArray[i][j++] , parameterModeInStringForm(paramMetaData.getParameterMode(i+1)));
1: 			
1: 			j=0;
1: 		}
1: 	}
1: 	static void dumpParameterMetaDataNegative(ParameterMetaData paramMetaData) throws SQLException {
1: 
1:                 int numParam = paramMetaData.getParameterCount();
1: 		try {
1:        			paramMetaData.isNullable(-1);
1:        			fail("parameterMetaData.isNullable(-1) should have failed");
1:    		} catch (SQLException se)
1:        		{
0:        			assertSQLState("XCL13",se.getSQLState(), se);
1:        		}
1: 		try {
1:                         paramMetaData.isNullable(0);
1:                         fail("parameterMetaData.isNullable(0) should have failed");
1:                 } catch (SQLException se)
1:                 {
0:                         assertSQLState("XCL13",se.getSQLState(), se);
1:                 }
1: 		try {
1:                         paramMetaData.isNullable(numParam+1);
1:                         fail("parameterMetaData.isNullable("+(numParam+1)+") should have failed");
1:                 } catch (SQLException se)
1:                 {
0:                         assertSQLState("XCL13",se.getSQLState(), se);
1:                 }
1: 
1: 	}
0: 	//A really simple method to test callable statement
1:         public static void dummyint (int in_param, int in_param2, int[] in_param3, int[] in_param4)
1:                                                                    throws SQLException {
1: 
1:                 in_param4[0] = 11111;
1:         }
1:         public static void dummyint2 (int in_param, int in_param2, int[] in_param3, int[] in_param4)
1:                                                                    throws SQLException {
1:                 in_param4[0] = 22222;
1:         }
1: 
1:         public static void dummy_numeric_Proc (BigDecimal[] max_param,BigDecimal[] min_param)
1:                                                                  throws SQLException {
1:         }
1: 
1:         public static void dummyString (String in_param, String in_param2, String[] in_param3, String[] in_param4) {
1:         }
1:         public static void dummyDecimal(BigDecimal in_param, BigDecimal in_param2, BigDecimal[] in_param3, BigDecimal[] in_param4) {
1:         }
1: }
============================================================================