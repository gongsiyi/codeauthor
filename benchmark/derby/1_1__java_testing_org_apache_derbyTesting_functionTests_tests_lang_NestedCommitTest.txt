1:748a5b6: /**
1:748a5b6:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NestedCommitTest
1:748a5b6:  *
1:748a5b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:748a5b6:  * or more contributor license agreements.  See the NOTICE file
1:748a5b6:  * distributed with this work for additional information
1:748a5b6:  * regarding copyright ownership.  The ASF licenses this file
1:748a5b6:  * to you under the Apache License, Version 2.0 (the
1:748a5b6:  * "License"); you may not use this file except in compliance
1:748a5b6:  * with the License.  You may obtain a copy of the License at
1:748a5b6:  *
1:748a5b6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:748a5b6:  *
1:748a5b6:  * Unless required by applicable law or agreed to in writing,
1:748a5b6:  * software distributed under the License is distributed on an
1:748a5b6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:748a5b6:  * KIND, either express or implied.  See the License for the
1:748a5b6:  * specific language governing permissions and limitations
1:748a5b6:  * under the License.
1:748a5b6:  */
1:748a5b6: 
1:748a5b6: package org.apache.derbyTesting.functionTests.tests.lang;
1:748a5b6: 
1:748a5b6: import java.sql.CallableStatement;
1:748a5b6: import java.sql.ResultSet;
1:748a5b6: import java.sql.SQLException;
1:748a5b6: import java.sql.Statement;
1:748a5b6: import junit.framework.Test;
1:748a5b6: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:748a5b6: import org.apache.derbyTesting.junit.JDBC;
1:748a5b6: import org.apache.derbyTesting.junit.TestConfiguration;
1:748a5b6: 
1:748a5b6: /**
1:748a5b6:  * Test nested commit
1:748a5b6:  */
1:748a5b6: 
1:748a5b6: public final class NestedCommitTest extends BaseJDBCTestCase {
1:748a5b6: 
1:748a5b6:     /**
1:748a5b6:      * Public constructor required for running test as standalone JUnit.
1:748a5b6:      * @param name test name
1:748a5b6:      */
1:748a5b6:     public NestedCommitTest(String name)
1:748a5b6:     {
1:748a5b6:         super(name);
1:748a5b6:     }
1:748a5b6: 
1:748a5b6:     public static Test suite()
1:748a5b6:     {
1:748a5b6:         return TestConfiguration.defaultSuite(NestedCommitTest.class);
1:748a5b6:     }
1:748a5b6: 
1:748a5b6:     public void testNestedCommit() throws Exception
1:748a5b6:     {
1:748a5b6:         ResultSet rs;
1:748a5b6:         CallableStatement cSt;
1:748a5b6:         Statement st = createStatement();
1:748a5b6: 
1:748a5b6:         String [][] expRS;
1:748a5b6:         String [] expColNames;
1:748a5b6: 
1:748a5b6:         st.getConnection().setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:748a5b6: 
1:748a5b6:         try {
1:748a5b6:             // Make sure that we cannot do a commit/rollback on a nested
1:748a5b6:             // connection when we are in the middle of something that has to be
1:748a5b6:             // atomic (e.g. DML). commit/rollback on a nested connection is
1:748a5b6:             // only permitted when we are doing something simple like CALL
1:748a5b6:             // myMethod() or VALUES myMethod().
1:748a5b6: 
1:748a5b6:             st.executeUpdate("CREATE PROCEDURE doConnCommit() "
1:748a5b6:                     + "       DYNAMIC RESULT SETS 0 LANGUAGE JAVA "
1:748a5b6:                     + "       EXTERNAL NAME "
1:748a5b6:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:748a5b6:                     + ".doConnCommit' "
1:748a5b6:                     + "    CONTAINS SQL"
1:748a5b6:                     + "       PARAMETER STYLE JAVA");
1:748a5b6: 
1:748a5b6:             st.executeUpdate("CREATE PROCEDURE doConnRollback() "
1:748a5b6:                     + "       DYNAMIC RESULT SETS 0 LANGUAGE JAVA "
1:748a5b6:                     + "       EXTERNAL NAME "
1:748a5b6:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:748a5b6:                     + ".doConnRollback' "
1:748a5b6:                     + "    CONTAINS SQL"
1:748a5b6:                     + "       PARAMETER STYLE JAVA");
1:748a5b6: 
1:748a5b6:             st.executeUpdate("CREATE PROCEDURE doConnStmt(IN TEXT CHAR(50)) "
1:748a5b6:                     + "       DYNAMIC RESULT SETS 0 LANGUAGE JAVA "
1:748a5b6:                     + "       EXTERNAL NAME "
1:748a5b6:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:78227e4:                     + ".doConnStmt' "
1:748a5b6:                     + "    CONTAINS SQL"
1:748a5b6:                     + "       PARAMETER STYLE JAVA");
1:748a5b6: 
1:748a5b6:             st.executeUpdate("CREATE FUNCTION doConnCommitInt() "
1:748a5b6:                     + "       RETURNS INT EXTERNAL NAME "
1:748a5b6:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:748a5b6:                     + ".doConnCommitInt' "
1:748a5b6:                     + "       LANGUAGE JAVA PARAMETER STYLE JAVA");
1:748a5b6: 
1:748a5b6:             st.executeUpdate("CREATE FUNCTION doConnStmtInt(TEXT CHAR(50)) "
1:748a5b6:                     + "       RETURNS INT EXTERNAL NAME "
1:748a5b6:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:78227e4:                     + ".doConnStmtInt' "
1:748a5b6:                     + "       LANGUAGE JAVA PARAMETER STYLE JAVA");
1:748a5b6: 
1:748a5b6:             st.executeUpdate("create table x (x int)");
1:748a5b6:             st.executeUpdate("insert into x values 1,2,3,4");
1:748a5b6: 
1:748a5b6:             setAutoCommit(false);
1:748a5b6: 
1:748a5b6:             // All the following calls should succeed
1:748a5b6:             //
1:748a5b6:             cSt = prepareCall("call doConnCommit()");
1:748a5b6:             assertUpdateCount(cSt, 0);
1:748a5b6: 
1:748a5b6:             cSt = prepareCall("call doConnRollback()");
1:748a5b6:             assertUpdateCount(cSt, 0);
1:748a5b6: 
1:748a5b6:             // No longer supported as language statements.
1:748a5b6:             // call doConnStmt('commit'); call doConnStmt('rollback');
1:748a5b6: 
1:748a5b6:             cSt = prepareCall("call doConnStmt('call doConnCommit()')");
1:748a5b6:             assertUpdateCount(cSt, 0);
1:748a5b6: 
1:748a5b6:             cSt = prepareCall("call doConnStmt('call doConnRollback()')");
1:748a5b6:             assertUpdateCount(cSt, 0);
1:748a5b6: 
1:748a5b6:             // call doConnStmt('call doConnStmt(''call
1:748a5b6:             // doConnStmt(''''commit'''')'')');
1:748a5b6: 
1:748a5b6:             rs = st.executeQuery("values doConnCommitInt()");
1:748a5b6:             assertTrue(rs.next());
1:748a5b6:             try {
1:748a5b6:                 rs.getString(1);
1:748a5b6:             } catch (SQLException e) {
1:748a5b6:                 assertSQLState("XCL16", e);
1:748a5b6:             }
1:748a5b6: 
1:748a5b6:             // values doConnStmtInt('commit');
1:748a5b6:             // values doConnStmtInt('rollback');
1:748a5b6:             // values doConnStmtInt('call doConnStmt(
1:748a5b6:             //                     ''call doConnStmt(''''commit'''')'')');
1:748a5b6: 
1:748a5b6:             rs = st.executeQuery(
1:748a5b6:                     "values doConnStmtInt('values doConnCommitInt()')");
1:748a5b6:             JDBC.assertFullResultSet(rs, new String [][]{{"1"}}, true);
1:748a5b6: 
1:748a5b6:             // fail
1:748a5b6: 
1:748a5b6:             assertStatementError(
1:748a5b6:                     "38000", st,
1:748a5b6:                     "insert into x select x+doConnCommitInt() from x");
1:748a5b6: 
1:748a5b6:             assertStatementError(
1:748a5b6:                     "38000", st,
1:748a5b6:                     "delete from x where x in (select x+doConnCommitInt() from x)");
1:748a5b6: 
1:748a5b6:             assertStatementError(
1:748a5b6:                     "38000", st,
1:748a5b6:                     "delete from x where x = doConnCommitInt()");
1:748a5b6: 
1:748a5b6:             assertStatementError(
1:748a5b6:                     "38000", st,
1:748a5b6:                     "update x set x = doConnCommitInt()");
1:748a5b6: 
1:748a5b6:             // insert into x values doConnStmtInt(
1:748a5b6:             //          'call doConnStmt(''call doConnStmt(''''commit'''')'')');
1:748a5b6:             // select doConnStmtInt('call doConnStmt(
1:748a5b6:             //          ''call doConnStmt(''''rollback'''')'')') from x;
1:748a5b6: 
1:748a5b6:             assertStatementError(
1:748a5b6:                     "38000", st,
1:748a5b6:                     "select doConnStmtInt('call doConnStmt(" +
1:748a5b6:                             "''call doConnCommit()'')') from x");
1:748a5b6: 
1:748a5b6:             cSt = prepareCall(
1:748a5b6:                 "call doConnStmt('set isolation serializable')");
1:748a5b6:             assertUpdateCount(cSt, 0);
1:748a5b6: 
1:748a5b6:         } finally {
1:748a5b6:             // clean up
1:748a5b6:             dontThrow(st, "drop table x");
1:748a5b6:             dontThrow(st, "drop procedure doConnCommit");
1:748a5b6:             dontThrow(st, "drop procedure doConnRollback");
1:748a5b6:             dontThrow(st, "drop function doConnCommitInt");
1:748a5b6:             dontThrow(st, "drop procedure doConnStmt");
1:748a5b6:             dontThrow(st, "drop function doConnStmtInt");
1:748a5b6:             commit();
1:748a5b6:         }
1:748a5b6:     }
1:748a5b6: 
1:748a5b6:     private void dontThrow(Statement st, String stm) {
1:748a5b6:         try {
1:748a5b6:             st.executeUpdate(stm);
1:748a5b6:         } catch (SQLException e) {
1:748a5b6:             // ignore, best effort here
1:748a5b6:         }
1:748a5b6:     }
1:748a5b6: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:78227e4
/////////////////////////////////////////////////////////////////////////
1:                     + ".doConnStmt' "
/////////////////////////////////////////////////////////////////////////
1:                     + ".doConnStmtInt' "
commit:748a5b6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NestedCommitTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test nested commit
1:  */
1: 
1: public final class NestedCommitTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name test name
1:      */
1:     public NestedCommitTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
1:         return TestConfiguration.defaultSuite(NestedCommitTest.class);
1:     }
1: 
1:     public void testNestedCommit() throws Exception
1:     {
1:         ResultSet rs;
1:         CallableStatement cSt;
1:         Statement st = createStatement();
1: 
1:         String [][] expRS;
1:         String [] expColNames;
1: 
1:         st.getConnection().setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 
1:         try {
1:             // Make sure that we cannot do a commit/rollback on a nested
1:             // connection when we are in the middle of something that has to be
1:             // atomic (e.g. DML). commit/rollback on a nested connection is
1:             // only permitted when we are doing something simple like CALL
1:             // myMethod() or VALUES myMethod().
1: 
1:             st.executeUpdate("CREATE PROCEDURE doConnCommit() "
1:                     + "       DYNAMIC RESULT SETS 0 LANGUAGE JAVA "
1:                     + "       EXTERNAL NAME "
1:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:                     + ".doConnCommit' "
1:                     + "    CONTAINS SQL"
1:                     + "       PARAMETER STYLE JAVA");
1: 
1:             st.executeUpdate("CREATE PROCEDURE doConnRollback() "
1:                     + "       DYNAMIC RESULT SETS 0 LANGUAGE JAVA "
1:                     + "       EXTERNAL NAME "
1:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:                     + ".doConnRollback' "
1:                     + "    CONTAINS SQL"
1:                     + "       PARAMETER STYLE JAVA");
1: 
1:             st.executeUpdate("CREATE PROCEDURE doConnStmt(IN TEXT CHAR(50)) "
1:                     + "       DYNAMIC RESULT SETS 0 LANGUAGE JAVA "
1:                     + "       EXTERNAL NAME "
1:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
0:                     + ".doConnStmtNoRS' "
1:                     + "    CONTAINS SQL"
1:                     + "       PARAMETER STYLE JAVA");
1: 
1:             st.executeUpdate("CREATE FUNCTION doConnCommitInt() "
1:                     + "       RETURNS INT EXTERNAL NAME "
1:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
1:                     + ".doConnCommitInt' "
1:                     + "       LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 
1:             st.executeUpdate("CREATE FUNCTION doConnStmtInt(TEXT CHAR(50)) "
1:                     + "       RETURNS INT EXTERNAL NAME "
1:                     + "'org.apache.derbyTesting.functionTests.util.Triggers"
0:                     + ".doConnStmtIntNoRS' "
1:                     + "       LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 
1:             st.executeUpdate("create table x (x int)");
1:             st.executeUpdate("insert into x values 1,2,3,4");
1: 
1:             setAutoCommit(false);
1: 
1:             // All the following calls should succeed
1:             //
1:             cSt = prepareCall("call doConnCommit()");
1:             assertUpdateCount(cSt, 0);
1: 
1:             cSt = prepareCall("call doConnRollback()");
1:             assertUpdateCount(cSt, 0);
1: 
1:             // No longer supported as language statements.
1:             // call doConnStmt('commit'); call doConnStmt('rollback');
1: 
1:             cSt = prepareCall("call doConnStmt('call doConnCommit()')");
1:             assertUpdateCount(cSt, 0);
1: 
1:             cSt = prepareCall("call doConnStmt('call doConnRollback()')");
1:             assertUpdateCount(cSt, 0);
1: 
1:             // call doConnStmt('call doConnStmt(''call
1:             // doConnStmt(''''commit'''')'')');
1: 
1:             rs = st.executeQuery("values doConnCommitInt()");
1:             assertTrue(rs.next());
1:             try {
1:                 rs.getString(1);
1:             } catch (SQLException e) {
1:                 assertSQLState("XCL16", e);
1:             }
1: 
1:             // values doConnStmtInt('commit');
1:             // values doConnStmtInt('rollback');
1:             // values doConnStmtInt('call doConnStmt(
1:             //                     ''call doConnStmt(''''commit'''')'')');
1: 
1:             rs = st.executeQuery(
1:                     "values doConnStmtInt('values doConnCommitInt()')");
1:             JDBC.assertFullResultSet(rs, new String [][]{{"1"}}, true);
1: 
1:             // fail
1: 
1:             assertStatementError(
1:                     "38000", st,
1:                     "insert into x select x+doConnCommitInt() from x");
1: 
1:             assertStatementError(
1:                     "38000", st,
1:                     "delete from x where x in (select x+doConnCommitInt() from x)");
1: 
1:             assertStatementError(
1:                     "38000", st,
1:                     "delete from x where x = doConnCommitInt()");
1: 
1:             assertStatementError(
1:                     "38000", st,
1:                     "update x set x = doConnCommitInt()");
1: 
1:             // insert into x values doConnStmtInt(
1:             //          'call doConnStmt(''call doConnStmt(''''commit'''')'')');
1:             // select doConnStmtInt('call doConnStmt(
1:             //          ''call doConnStmt(''''rollback'''')'')') from x;
1: 
1:             assertStatementError(
1:                     "38000", st,
1:                     "select doConnStmtInt('call doConnStmt(" +
1:                             "''call doConnCommit()'')') from x");
1: 
1:             cSt = prepareCall(
1:                 "call doConnStmt('set isolation serializable')");
1:             assertUpdateCount(cSt, 0);
1: 
1:         } finally {
1:             // clean up
1:             dontThrow(st, "drop table x");
1:             dontThrow(st, "drop procedure doConnCommit");
1:             dontThrow(st, "drop procedure doConnRollback");
1:             dontThrow(st, "drop function doConnCommitInt");
1:             dontThrow(st, "drop procedure doConnStmt");
1:             dontThrow(st, "drop function doConnStmtInt");
1:             commit();
1:         }
1:     }
1: 
1:     private void dontThrow(Statement st, String stm) {
1:         try {
1:             st.executeUpdate(stm);
1:         } catch (SQLException e) {
1:             // ignore, best effort here
1:         }
1:     }
1: }
============================================================================