2:eac0369: /*
1:985fc85: 
1:3abc7d4:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Table
1:985fc85: 
1:20cdca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:20cdca3:    contributor license agreements.  See the NOTICE file distributed with
1:20cdca3:    this work for additional information regarding copyright ownership.
1:20cdca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:20cdca3:    (the "License"); you may not use this file except in compliance with
1:20cdca3:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
4:eac0369: 
3:eac0369:  */
1:eac0369: 
1:3abc7d4: package org.apache.derby.impl.tools.dblook;
1:eac0369: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.Statement;
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: 
1:eac0369: import java.util.HashMap;
1:fc54674: import java.util.Map;
1:eac0369: import java.util.Set;
1:eac0369: import java.util.Iterator;
1:eac0369: 
1:eac0369: import org.apache.derby.tools.dblook;
1:eac0369: 
1:eac0369: public class DB_Table {
1:eac0369: 
1:eac0369: 	// Prepared statements use throughout the DDL
1:eac0369: 	// generation process.
1:eac0369: 	private static PreparedStatement getColumnInfoStmt;
1:eac0369: 	private static PreparedStatement getColumnTypeStmt;
1:eac0369: 	private static PreparedStatement getAutoIncStmt;
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate the DDL for all user tables in a given
1:eac0369: 	 * database.
1:eac0369: 	 * @param conn Connection to the source database.
1:eac0369: 	 * @param tableIdToNameMap Mapping of table ids to table
1:eac0369: 	 *  names, for quicker reference.
1:eac0369: 	 * @return The DDL for the tables has been written
1:eac0369: 	 *  to output via Logs.java.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void doTables(Connection conn, HashMap tableIdToNameMap)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		// Prepare some statements for general use by this class.
1:eac0369: 
1:eac0369: 		getColumnInfoStmt =
1:eac0369: 			conn.prepareStatement("SELECT C.COLUMNNAME, C.REFERENCEID, " +
1:eac0369: 			"C.COLUMNNUMBER FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T WHERE T.TABLEID = ? " +
1:eac0369: 			"AND T.TABLEID = C.REFERENCEID ORDER BY C.COLUMNNUMBER");
1:eac0369: 
1:eac0369: 		getColumnTypeStmt = 
1:eac0369: 			conn.prepareStatement("SELECT COLUMNDATATYPE, COLUMNDEFAULT FROM SYS.SYSCOLUMNS " +
1:eac0369: 			"WHERE REFERENCEID = ? AND COLUMNNAME = ?");
1:eac0369: 
1:eac0369: 		getAutoIncStmt = 
1:eac0369: 			conn.prepareStatement("SELECT AUTOINCREMENTSTART, " +
1:c859dcc: 			"AUTOINCREMENTINC, COLUMNNAME, REFERENCEID, COLUMNDEFAULT FROM SYS.SYSCOLUMNS " +
1:eac0369: 			"WHERE COLUMNNAME = ? AND REFERENCEID = ?");
1:eac0369: 
1:eac0369: 		// Walk through list of tables and generate the DDL for
1:eac0369: 		// each one.
1:eac0369: 
1:eac0369: 		boolean firstTime = true;
1:fc54674: 		Set entries = tableIdToNameMap.entrySet();
1:fc54674: 		for (Iterator itr = entries.iterator(); itr.hasNext(); ) {
1:eac0369: 
1:fc54674:             Map.Entry entry = (Map.Entry)itr.next();
1:fc54674: 			String tableId = (String)entry.getKey();
1:fc54674: 			String tableName = (String)entry.getValue();
1:eac0369: 			if (dblook.isExcludedTable(tableName))
1:eac0369: 			// table isn't included in user-given list; skip it.
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			if (firstTime) {
1:eac0369: 				Logs.reportString("----------------------------------------------");
1:19c10b5: 				Logs.reportMessage("DBLOOK_TablesHeader");
1:eac0369: 				Logs.reportString("----------------------------------------------\n");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			Logs.writeToNewDDL("CREATE TABLE " + tableName + " (");
1:eac0369: 
1:eac0369: 			// Get column list, and write DDL for each column.
1:eac0369: 			boolean firstCol = true;
1:eac0369: 			getColumnInfoStmt.setString(1, tableId);
1:eac0369: 			ResultSet columnRS = getColumnInfoStmt.executeQuery();
1:eac0369: 			while (columnRS.next()) {
1:eac0369: 				String colName = dblook.addQuotes(columnRS.getString(1));
1:eac0369: 				String createColString = createColumn(colName, columnRS.getString(2),
1:eac0369: 					columnRS.getInt(3));
1:eac0369: 				if (!firstCol)
1:eac0369: 					createColString = ", " + createColString;
1:eac0369: 
1:eac0369: 				Logs.writeToNewDDL(createColString);
1:eac0369: 				firstCol = false;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			columnRS.close();
1:eac0369: 			Logs.writeToNewDDL(")");
1:eac0369: 			Logs.writeStmtEndToNewDDL();
1:eac0369: 			Logs.writeNewlineToNewDDL();
1:eac0369: 			firstTime = false;
1:eac0369: 
1:eac0369: 		} // outer while.
1:eac0369: 
1:eac0369: 		getColumnInfoStmt.close();
1:eac0369: 		getColumnTypeStmt.close();
1:eac0369: 		getAutoIncStmt.close();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate the DDL for a specific column of the
1:eac0369: 	 * the table corresponding to the received tableId.
1:eac0369: 	 * @param colName the name of the column to generate.
1:eac0369: 	 * @param tableId Which table the column belongs to.
1:eac0369: 	 * @param colNum the number of the column to generate (1 =>
1:eac0369: 	 *  1st column, 2 => 2nd column, etc)
1:eac0369: 	 * @return The generated DDL, as a string.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	private static String createColumn(String colName, String tableId,
1:eac0369: 		int colNum) throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		getColumnTypeStmt.setString(1, tableId);
1:eac0369: 		getColumnTypeStmt.setString(2, dblook.stripQuotes(colName));
1:eac0369: 
1:eac0369: 		ResultSet rs = getColumnTypeStmt.executeQuery();
1:eac0369: 		StringBuffer colDef = new StringBuffer();
1:eac0369: 		if (rs.next()) {
1:eac0369: 
1:eac0369: 			colDef.append(dblook.addQuotes(dblook.expandDoubleQuotes(
1:eac0369: 				dblook.stripQuotes(colName))));
1:eac0369: 			colDef.append(" ");
1:eac0369: 			colDef.append(rs.getString(1));
1:3b9e2f0: 			if (!reinstateAutoIncrement(colName, tableId, colDef) &&
1:3b9e2f0: 						 rs.getString(2) != null) {
1:95a483d: 
1:95a483d:                 String defaultText = rs.getString(2);
1:95a483d: 
1:95a483d:                 if ( defaultText.startsWith( "GENERATED ALWAYS AS" ) )
1:95a483d:                 { colDef.append( " " ); }
1:95a483d: 				else { colDef.append(" DEFAULT "); }
1:95a483d:                 
1:95a483d: 				colDef.append( defaultText );
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		rs.close();
1:eac0369: 		return colDef.toString();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:3b9e2f0: 	 * Generate autoincrement DDL for a given column and write it to
1:3b9e2f0: 	 * received StringBuffer
1:eac0369: 	 * @param colName: Name of column that is autoincrement.
1:eac0369: 	 * @param tableId: Id of table in which column exists.
1:eac0369: 	 * @param colDef: StringBuffer to which DDL will be added.
1:3b9e2f0: 	 * @return True if autoincrement DDL has been generated.
1:eac0369: 	 ****/
1:eac0369: 
1:3b9e2f0: 	public static boolean reinstateAutoIncrement(String colName,
1:eac0369: 		String tableId, StringBuffer colDef) throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		getAutoIncStmt.setString(1, dblook.stripQuotes(colName));
1:eac0369: 		getAutoIncStmt.setString(2, tableId);
1:eac0369: 		ResultSet autoIncCols = getAutoIncStmt.executeQuery();
1:eac0369: 		if (autoIncCols.next()) {
1:eac0369: 
1:eac0369: 			long start = autoIncCols.getLong(1);
1:eac0369: 			if (!autoIncCols.wasNull()) {
1:c859dcc: 				colDef.append(" GENERATED ");
1:c859dcc: 				colDef.append(autoIncCols.getObject(5) == null ? 
1:c859dcc: 					      "ALWAYS ":"BY DEFAULT ");
1:c859dcc: 				colDef.append("AS IDENTITY (START WITH ");
1:eac0369: 				colDef.append(autoIncCols.getLong(1));
1:eac0369: 				colDef.append(", INCREMENT BY ");
1:eac0369: 				colDef.append(autoIncCols.getLong(2));
1:eac0369: 				colDef.append(")");
1:3b9e2f0: 				return true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:3b9e2f0: 		return false;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:fc54674
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 		Set entries = tableIdToNameMap.entrySet();
1: 		for (Iterator itr = entries.iterator(); itr.hasNext(); ) {
1:             Map.Entry entry = (Map.Entry)itr.next();
1: 			String tableId = (String)entry.getKey();
1: 			String tableName = (String)entry.getValue();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:95a483d
/////////////////////////////////////////////////////////////////////////
1: 
1:                 String defaultText = rs.getString(2);
1: 
1:                 if ( defaultText.startsWith( "GENERATED ALWAYS AS" ) )
1:                 { colDef.append( " " ); }
1: 				else { colDef.append(" DEFAULT "); }
1:                 
1: 				colDef.append( defaultText );
author:David Van Couvering
-------------------------------------------------------------------------------
commit:20cdca3
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:3b9e2f0
/////////////////////////////////////////////////////////////////////////
1: 			if (!reinstateAutoIncrement(colName, tableId, colDef) &&
1: 						 rs.getString(2) != null) {
/////////////////////////////////////////////////////////////////////////
1: 	 * Generate autoincrement DDL for a given column and write it to
1: 	 * received StringBuffer
1: 	 * @return True if autoincrement DDL has been generated.
1: 	public static boolean reinstateAutoIncrement(String colName,
/////////////////////////////////////////////////////////////////////////
1: 				return true;
1: 		return false;
commit:c859dcc
/////////////////////////////////////////////////////////////////////////
1: 			"AUTOINCREMENTINC, COLUMNNAME, REFERENCEID, COLUMNDEFAULT FROM SYS.SYSCOLUMNS " +
/////////////////////////////////////////////////////////////////////////
1: 				colDef.append(" GENERATED ");
1: 				colDef.append(autoIncCols.getObject(5) == null ? 
1: 					      "ALWAYS ":"BY DEFAULT ");
1: 				colDef.append("AS IDENTITY (START WITH ");
commit:89cd70b
/////////////////////////////////////////////////////////////////////////
0: 				Logs.reportMessage("CSLOOK_TablesHeader");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:19c10b5
/////////////////////////////////////////////////////////////////////////
1: 				Logs.reportMessage("DBLOOK_TablesHeader");
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Table
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.dblook;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.tools.cslook.DB_Table
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.impl.tools.cslook;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.ResultSetMetaData;
1: 
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.Iterator;
1: 
1: import org.apache.derby.tools.dblook;
1: 
1: public class DB_Table {
1: 
1: 	/* 
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 	// Prepared statements use throughout the DDL
1: 	// generation process.
1: 	private static PreparedStatement getColumnInfoStmt;
1: 	private static PreparedStatement getColumnTypeStmt;
1: 	private static PreparedStatement getAutoIncStmt;
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for all user tables in a given
1: 	 * database.
1: 	 * @param conn Connection to the source database.
1: 	 * @param tableIdToNameMap Mapping of table ids to table
1: 	 *  names, for quicker reference.
1: 	 * @return The DDL for the tables has been written
1: 	 *  to output via Logs.java.
1: 	 ****/
1: 
1: 	public static void doTables(Connection conn, HashMap tableIdToNameMap)
1: 		throws SQLException
1: 	{
1: 
1: 		// Prepare some statements for general use by this class.
1: 
1: 		getColumnInfoStmt =
1: 			conn.prepareStatement("SELECT C.COLUMNNAME, C.REFERENCEID, " +
1: 			"C.COLUMNNUMBER FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T WHERE T.TABLEID = ? " +
1: 			"AND T.TABLEID = C.REFERENCEID ORDER BY C.COLUMNNUMBER");
1: 
1: 		getColumnTypeStmt = 
1: 			conn.prepareStatement("SELECT COLUMNDATATYPE, COLUMNDEFAULT FROM SYS.SYSCOLUMNS " +
1: 			"WHERE REFERENCEID = ? AND COLUMNNAME = ?");
1: 
1: 		getAutoIncStmt = 
1: 			conn.prepareStatement("SELECT AUTOINCREMENTSTART, " +
0: 			"AUTOINCREMENTINC, COLUMNNAME, REFERENCEID FROM SYS.SYSCOLUMNS " +
1: 			"WHERE COLUMNNAME = ? AND REFERENCEID = ?");
1: 
1: 		// Walk through list of tables and generate the DDL for
1: 		// each one.
1: 
1: 		boolean firstTime = true;
0: 		Set tableIds = tableIdToNameMap.keySet();
0: 		for (Iterator itr = tableIds.iterator(); itr.hasNext(); ) {
1: 
0: 			String tableId = (String)itr.next();
0: 			String tableName = (String)(tableIdToNameMap.get(tableId));
1: 			if (dblook.isExcludedTable(tableName))
1: 			// table isn't included in user-given list; skip it.
1: 				continue;
1: 
1: 			if (firstTime) {
1: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage("CSLOOK_Header", "tables");
1: 				Logs.reportString("----------------------------------------------\n");
1: 			}
1: 
1: 			Logs.writeToNewDDL("CREATE TABLE " + tableName + " (");
1: 
1: 			// Get column list, and write DDL for each column.
1: 			boolean firstCol = true;
1: 			getColumnInfoStmt.setString(1, tableId);
1: 			ResultSet columnRS = getColumnInfoStmt.executeQuery();
1: 			while (columnRS.next()) {
1: 				String colName = dblook.addQuotes(columnRS.getString(1));
1: 				String createColString = createColumn(colName, columnRS.getString(2),
1: 					columnRS.getInt(3));
1: 				if (!firstCol)
1: 					createColString = ", " + createColString;
1: 
1: 				Logs.writeToNewDDL(createColString);
1: 				firstCol = false;
1: 			}
1: 
1: 			columnRS.close();
1: 			Logs.writeToNewDDL(")");
1: 			Logs.writeStmtEndToNewDDL();
1: 			Logs.writeNewlineToNewDDL();
1: 			firstTime = false;
1: 
1: 		} // outer while.
1: 
1: 		getColumnInfoStmt.close();
1: 		getColumnTypeStmt.close();
1: 		getAutoIncStmt.close();
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for a specific column of the
1: 	 * the table corresponding to the received tableId.
1: 	 * @param colName the name of the column to generate.
1: 	 * @param tableId Which table the column belongs to.
1: 	 * @param colNum the number of the column to generate (1 =>
1: 	 *  1st column, 2 => 2nd column, etc)
1: 	 * @return The generated DDL, as a string.
1: 	 ****/
1: 
1: 	private static String createColumn(String colName, String tableId,
1: 		int colNum) throws SQLException
1: 	{
1: 
1: 		getColumnTypeStmt.setString(1, tableId);
1: 		getColumnTypeStmt.setString(2, dblook.stripQuotes(colName));
1: 
1: 		ResultSet rs = getColumnTypeStmt.executeQuery();
1: 		StringBuffer colDef = new StringBuffer();
1: 		if (rs.next()) {
1: 
1: 			colDef.append(dblook.addQuotes(dblook.expandDoubleQuotes(
1: 				dblook.stripQuotes(colName))));
1: 			colDef.append(" ");
1: 			colDef.append(rs.getString(1));
0: 			if (rs.getString(2) != null) {
0: 				colDef.append(" DEFAULT ");
0: 				colDef.append(rs.getString(2));
1: 			}
0: 			reinstateAutoIncrement(colName, tableId, colDef);
1: 		}
1: 
1: 		rs.close();
1: 		return colDef.toString();
1: 
1: 	}
1: 
1: 	/* ************************************************
0: 	 * Generate autoincrement DDL for a given column.
1: 	 * @param colName: Name of column that is autoincrement.
1: 	 * @param tableId: Id of table in which column exists.
1: 	 * @param colDef: StringBuffer to which DDL will be added.
0: 	 * @return The DDL for all autoincrement columns
0: 	 *  has been written to the received string buffer.
1: 	 ****/
1: 
0: 	public static void reinstateAutoIncrement(String colName,
1: 		String tableId, StringBuffer colDef) throws SQLException
1: 	{
1: 
1: 		getAutoIncStmt.setString(1, dblook.stripQuotes(colName));
1: 		getAutoIncStmt.setString(2, tableId);
1: 		ResultSet autoIncCols = getAutoIncStmt.executeQuery();
1: 		if (autoIncCols.next()) {
1: 
1: 			long start = autoIncCols.getLong(1);
1: 			if (!autoIncCols.wasNull()) {
0: 				colDef.append(" GENERATED ALWAYS AS IDENTITY (START WITH ");
1: 				colDef.append(autoIncCols.getLong(1));
1: 				colDef.append(", INCREMENT BY ");
1: 				colDef.append(autoIncCols.getLong(2));
1: 				colDef.append(")");
1: 			}
1: 		}
1: 
0: 		return;
1: 
1: 	}
1: 
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.cslook;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.ResultSetMetaData;
0: 
0: import java.util.HashMap;
0: import java.util.Set;
0: import java.util.Iterator;
0: 
0: import org.apache.derby.tools.dblook;
0: 
0: public class DB_Table {
0: 
0: 	/* 
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	// Prepared statements use throughout the DDL
0: 	// generation process.
0: 	private static PreparedStatement getColumnInfoStmt;
0: 	private static PreparedStatement getColumnTypeStmt;
0: 	private static PreparedStatement getAutoIncStmt;
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for all user tables in a given
0: 	 * database.
0: 	 * @param conn Connection to the source database.
0: 	 * @param tableIdToNameMap Mapping of table ids to table
0: 	 *  names, for quicker reference.
0: 	 * @return The DDL for the tables has been written
0: 	 *  to output via Logs.java.
0: 	 ****/
0: 
0: 	public static void doTables(Connection conn, HashMap tableIdToNameMap)
0: 		throws SQLException
0: 	{
0: 
0: 		// Prepare some statements for general use by this class.
0: 
0: 		getColumnInfoStmt =
0: 			conn.prepareStatement("SELECT C.COLUMNNAME, C.REFERENCEID, " +
0: 			"C.COLUMNNUMBER FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T WHERE T.TABLEID = ? " +
0: 			"AND T.TABLEID = C.REFERENCEID ORDER BY C.COLUMNNUMBER");
0: 
0: 		getColumnTypeStmt = 
0: 			conn.prepareStatement("SELECT COLUMNDATATYPE, COLUMNDEFAULT FROM SYS.SYSCOLUMNS " +
0: 			"WHERE REFERENCEID = ? AND COLUMNNAME = ?");
0: 
0: 		getAutoIncStmt = 
0: 			conn.prepareStatement("SELECT AUTOINCREMENTSTART, " +
0: 			"AUTOINCREMENTINC, COLUMNNAME, REFERENCEID FROM SYS.SYSCOLUMNS " +
0: 			"WHERE COLUMNNAME = ? AND REFERENCEID = ?");
0: 
0: 		// Walk through list of tables and generate the DDL for
0: 		// each one.
0: 
0: 		boolean firstTime = true;
0: 		Set tableIds = tableIdToNameMap.keySet();
0: 		for (Iterator itr = tableIds.iterator(); itr.hasNext(); ) {
0: 
0: 			String tableId = (String)itr.next();
0: 			String tableName = (String)(tableIdToNameMap.get(tableId));
0: 			if (dblook.isExcludedTable(tableName))
0: 			// table isn't included in user-given list; skip it.
0: 				continue;
0: 
0: 			if (firstTime) {
0: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage("CSLOOK_Header", "tables");
0: 				Logs.reportString("----------------------------------------------\n");
0: 			}
0: 
0: 			Logs.writeToNewDDL("CREATE TABLE " + tableName + " (");
0: 
0: 			// Get column list, and write DDL for each column.
0: 			boolean firstCol = true;
0: 			getColumnInfoStmt.setString(1, tableId);
0: 			ResultSet columnRS = getColumnInfoStmt.executeQuery();
0: 			while (columnRS.next()) {
0: 				String colName = dblook.addQuotes(columnRS.getString(1));
0: 				String createColString = createColumn(colName, columnRS.getString(2),
0: 					columnRS.getInt(3));
0: 				if (!firstCol)
0: 					createColString = ", " + createColString;
0: 
0: 				Logs.writeToNewDDL(createColString);
0: 				firstCol = false;
0: 			}
0: 
0: 			columnRS.close();
0: 			Logs.writeToNewDDL(")");
0: 			Logs.writeStmtEndToNewDDL();
0: 			Logs.writeNewlineToNewDDL();
0: 			firstTime = false;
0: 
0: 		} // outer while.
0: 
0: 		getColumnInfoStmt.close();
0: 		getColumnTypeStmt.close();
0: 		getAutoIncStmt.close();
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for a specific column of the
0: 	 * the table corresponding to the received tableId.
0: 	 * @param colName the name of the column to generate.
0: 	 * @param tableId Which table the column belongs to.
0: 	 * @param colNum the number of the column to generate (1 =>
0: 	 *  1st column, 2 => 2nd column, etc)
0: 	 * @return The generated DDL, as a string.
0: 	 ****/
0: 
0: 	private static String createColumn(String colName, String tableId,
0: 		int colNum) throws SQLException
0: 	{
0: 
0: 		getColumnTypeStmt.setString(1, tableId);
0: 		getColumnTypeStmt.setString(2, dblook.stripQuotes(colName));
0: 
0: 		ResultSet rs = getColumnTypeStmt.executeQuery();
0: 		StringBuffer colDef = new StringBuffer();
0: 		if (rs.next()) {
0: 
0: 			colDef.append(dblook.addQuotes(dblook.expandDoubleQuotes(
0: 				dblook.stripQuotes(colName))));
0: 			colDef.append(" ");
0: 			colDef.append(rs.getString(1));
0: 			if (rs.getString(2) != null) {
0: 				colDef.append(" DEFAULT ");
0: 				colDef.append(rs.getString(2));
0: 			}
0: 			reinstateAutoIncrement(colName, tableId, colDef);
0: 		}
0: 
0: 		rs.close();
0: 		return colDef.toString();
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Generate autoincrement DDL for a given column.
0: 	 * @param colName: Name of column that is autoincrement.
0: 	 * @param tableId: Id of table in which column exists.
0: 	 * @param colDef: StringBuffer to which DDL will be added.
0: 	 * @return The DDL for all autoincrement columns
0: 	 *  has been written to the received string buffer.
0: 	 ****/
0: 
0: 	public static void reinstateAutoIncrement(String colName,
0: 		String tableId, StringBuffer colDef) throws SQLException
0: 	{
0: 
0: 		getAutoIncStmt.setString(1, dblook.stripQuotes(colName));
0: 		getAutoIncStmt.setString(2, tableId);
0: 		ResultSet autoIncCols = getAutoIncStmt.executeQuery();
0: 		if (autoIncCols.next()) {
0: 
0: 			long start = autoIncCols.getLong(1);
0: 			if (!autoIncCols.wasNull()) {
0: 				colDef.append(" GENERATED ALWAYS AS IDENTITY (START WITH ");
0: 				colDef.append(autoIncCols.getLong(1));
0: 				colDef.append(", INCREMENT BY ");
0: 				colDef.append(autoIncCols.getLong(2));
0: 				colDef.append(")");
0: 			}
0: 		}
0: 
0: 		return;
0: 
0: 	}
0: 
0: }
0: 
============================================================================