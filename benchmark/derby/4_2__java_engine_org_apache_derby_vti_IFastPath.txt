1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.vti.IFastPath
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.vti;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An internal api for VTIs to allow VTI's written
1:eac0369: 	in terms of the datatype system, e.g. returning rows.
1:eac0369: 	This allows passing of data from the VTI into the
1:eac0369: 	query engine without a conversion through a JDBC ResultSet.
1:eac0369: */
1:eac0369: public interface IFastPath {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Indicates nextRow() has completed its scan.
1:eac0369: 	*/
1:eac0369: 	public int SCAN_COMPLETED = -1;
1:eac0369: 	/**
1:eac0369: 		Indicates nextRow() found a row..
1:eac0369: 	*/
1:eac0369: 	public int GOT_ROW = 0;
1:eac0369: 	/**
1:eac0369: 		Indicates nextRow() has completed its scan but executeQuery must be called to
1:eac0369: 		complete the query.
1:eac0369: 	*/
1:eac0369: 	public int NEED_RS = 1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a query.
1:eac0369: 		Returns true if the VTI will start
1:eac0369: 		out as a fast path query and thus rows will be returned
1:eac0369: 		by nextRow().
1:eac0369: 		Returns false if the engine must call the VTI's PreparedStatement.executeQuery()
1:eac0369: 		method to execute as a regular ResultSet VTI.
1:eac0369: 	*/
1:eac0369: 	public boolean executeAsFastPath()
1:eac0369: 		throws StandardException, SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		When operating in fast path mode return the next row into the passed in row parameter.
1:eac0369: 		Returns GOT_ROW if a valid row is found.
1:eac0369: 		Returns SCAN_COMPLETED if the scan is complete.
1:eac0369: 		Returns NEED_RS if the rest of the query must be handled as a regular ResultSet VTI by
1:eac0369: 		the engine calling the VTI's PreparedStatement.executeQuery()
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public int nextRow(DataValueDescriptor[] row)
1:eac0369: 		throws StandardException, SQLException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A call from the VTI execution layer back into the supplied VTI.
1:eac0369: 		Presents the row just processed as an array of DataValueDescriptors.
1:eac0369: 		This only called when the VTI is being executed as a regular ResultSet VTI
1:eac0369: 	*/
1:eac0369: 	public void currentRow(ResultSet rs, DataValueDescriptor[] row)
1:eac0369: 		throws StandardException, SQLException;
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369: 		Called once the ResultSet returned by executeQuery() has emptied all of its
1:eac0369: 		rows (next() has returned false).
1:eac0369:      */
1:eac0369:     public void rowsDone() throws StandardException, SQLException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.vti.IFastPath
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /**
1: 	An internal api for VTIs to allow VTI's written
1: 	in terms of the datatype system, e.g. returning rows.
1: 	This allows passing of data from the VTI into the
1: 	query engine without a conversion through a JDBC ResultSet.
1: */
1: public interface IFastPath {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0:     public static String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 	/**
1: 		Indicates nextRow() has completed its scan.
1: 	*/
1: 	public int SCAN_COMPLETED = -1;
1: 	/**
1: 		Indicates nextRow() found a row..
1: 	*/
1: 	public int GOT_ROW = 0;
1: 	/**
1: 		Indicates nextRow() has completed its scan but executeQuery must be called to
1: 		complete the query.
1: 	*/
1: 	public int NEED_RS = 1;
1: 
1: 	/**
1: 		Start a query.
1: 		Returns true if the VTI will start
1: 		out as a fast path query and thus rows will be returned
1: 		by nextRow().
1: 		Returns false if the engine must call the VTI's PreparedStatement.executeQuery()
1: 		method to execute as a regular ResultSet VTI.
1: 	*/
1: 	public boolean executeAsFastPath()
1: 		throws StandardException, SQLException;
1: 
1: 	/**
1: 		When operating in fast path mode return the next row into the passed in row parameter.
1: 		Returns GOT_ROW if a valid row is found.
1: 		Returns SCAN_COMPLETED if the scan is complete.
1: 		Returns NEED_RS if the rest of the query must be handled as a regular ResultSet VTI by
1: 		the engine calling the VTI's PreparedStatement.executeQuery()
1: 
1: 	*/
1: 	public int nextRow(DataValueDescriptor[] row)
1: 		throws StandardException, SQLException;
1: 
1: 
1: 	/**
1: 		A call from the VTI execution layer back into the supplied VTI.
1: 		Presents the row just processed as an array of DataValueDescriptors.
1: 		This only called when the VTI is being executed as a regular ResultSet VTI
1: 	*/
1: 	public void currentRow(ResultSet rs, DataValueDescriptor[] row)
1: 		throws StandardException, SQLException;
1: 
1: 
1:     /**
1: 		Called once the ResultSet returned by executeQuery() has emptied all of its
1: 		rows (next() has returned false).
1:      */
1:     public void rowsDone() throws StandardException, SQLException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.vti;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: /**
0: 	An internal api for VTIs to allow VTI's written
0: 	in terms of the datatype system, e.g. returning rows.
0: 	This allows passing of data from the VTI into the
0: 	query engine without a conversion through a JDBC ResultSet.
0: */
0: public interface IFastPath {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0:     public static String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	/**
0: 		Indicates nextRow() has completed its scan.
0: 	*/
0: 	public int SCAN_COMPLETED = -1;
0: 	/**
0: 		Indicates nextRow() found a row..
0: 	*/
0: 	public int GOT_ROW = 0;
0: 	/**
0: 		Indicates nextRow() has completed its scan but executeQuery must be called to
0: 		complete the query.
0: 	*/
0: 	public int NEED_RS = 1;
0: 
0: 	/**
0: 		Start a query.
0: 		Returns true if the VTI will start
0: 		out as a fast path query and thus rows will be returned
0: 		by nextRow().
0: 		Returns false if the engine must call the VTI's PreparedStatement.executeQuery()
0: 		method to execute as a regular ResultSet VTI.
0: 	*/
0: 	public boolean executeAsFastPath()
0: 		throws StandardException, SQLException;
0: 
0: 	/**
0: 		When operating in fast path mode return the next row into the passed in row parameter.
0: 		Returns GOT_ROW if a valid row is found.
0: 		Returns SCAN_COMPLETED if the scan is complete.
0: 		Returns NEED_RS if the rest of the query must be handled as a regular ResultSet VTI by
0: 		the engine calling the VTI's PreparedStatement.executeQuery()
0: 
0: 	*/
0: 	public int nextRow(DataValueDescriptor[] row)
0: 		throws StandardException, SQLException;
0: 
0: 
0: 	/**
0: 		A call from the VTI execution layer back into the supplied VTI.
0: 		Presents the row just processed as an array of DataValueDescriptors.
0: 		This only called when the VTI is being executed as a regular ResultSet VTI
0: 	*/
0: 	public void currentRow(ResultSet rs, DataValueDescriptor[] row)
0: 		throws StandardException, SQLException;
0: 
0: 
0:     /**
0: 		Called once the ResultSet returned by executeQuery() has emptied all of its
0: 		rows (next() has returned false).
0:      */
0:     public void rowsDone() throws StandardException, SQLException;
0: }
============================================================================