1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.locks.ShExLockable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.locks;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: import org.apache.derby.iapi.services.locks.Latch;
1:eac0369: import org.apache.derby.iapi.services.locks.VirtualLockTable;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:eac0369: 
1:eac0369: public class ShExLockable implements Lockable
1:eac0369: {
1:eac0369: 
1:eac0369: 	public ShExLockable()
1:eac0369: 	{		
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Lockable#lockerAlwaysCompatible */
1:eac0369: 	public boolean lockerAlwaysCompatible()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Lockable#requestCompatible */
1:eac0369: 	public boolean requestCompatible(Object requestedQualifier,
1:eac0369: 											Object grantedQualifier)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(requestedQualifier instanceof ShExQual))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 				"requestedQualifier is a " +
1:eac0369: 				requestedQualifier.getClass().getName() +
1:eac0369: 				"instead of a ShExQual.");
1:eac0369: 
1:eac0369: 			if (!(grantedQualifier instanceof ShExQual))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 				"grantedQualifier is a " +
1:eac0369: 				grantedQualifier.getClass().getName() +
1:eac0369: 				"instead of a ShExQual.");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ShExQual requested = (ShExQual) requestedQualifier;
1:eac0369: 		ShExQual granted = (ShExQual) grantedQualifier;
1:eac0369: 
1:eac0369: 		return (requested.getLockState() == ShExQual.SHARED) &&
1:eac0369: 				(granted.getLockState() == ShExQual.SHARED);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Lockable#lockEvent */
1:eac0369: 	public void lockEvent(Latch lockInfo)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(lockInfo.getQualifier() instanceof ShExQual))
1:eac0369: 				SanityManager.THROWASSERT("qualifier is a " + lockInfo.getQualifier().getClass().getName() +
1:eac0369: 				"instead of a ShExQual.");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Lockable#unlockEvent */
1:eac0369: 	public void unlockEvent(Latch lockInfo)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(lockInfo.getQualifier() instanceof ShExQual))
1:eac0369: 				SanityManager.THROWASSERT("qualifier is a " + lockInfo.getQualifier().getClass().getName() +
1:eac0369: 				"instead of a ShExQual.");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
2:eac0369:     /**
1:eac0369:      * This lockable want to participate in the Virtual LockTable
1:eac0369:      * when we want to print LATCH information.
1:eac0369:      * Any lockable object which DOES NOT want to participate should
1:eac0369:      * override this function.
1:eac0369:      */
1:996ca72: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes)
1:eac0369: 	{
1:eac0369:         if((flag & VirtualLockTable.SHEXLOCK) == 0)
1:eac0369:             return false;
1:eac0369:         // No containerId, but need something in there so it can print
1:ce40a31: 		attributes.put(VirtualLockTable.CONTAINERID, -1); 
1:eac0369: 
1:eac0369: 		attributes.put(VirtualLockTable.LOCKNAME, this.toString() );
1:eac0369: 
1:eac0369: 		attributes.put(VirtualLockTable.LOCKTYPE, "ShExLockable");
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(VirtualLockTable.CONTAINERID, -1); 
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes)
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.locks.ShExLockable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.locks;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: import org.apache.derby.iapi.services.locks.Latch;
1: import org.apache.derby.iapi.services.locks.VirtualLockTable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.util.Hashtable;
1: 
1: public class ShExLockable implements Lockable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	public ShExLockable()
1: 	{		
1: 	}
1: 
1: 	/** @see Lockable#lockerAlwaysCompatible */
1: 	public boolean lockerAlwaysCompatible()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/** @see Lockable#requestCompatible */
1: 	public boolean requestCompatible(Object requestedQualifier,
1: 											Object grantedQualifier)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(requestedQualifier instanceof ShExQual))
1: 				SanityManager.THROWASSERT(
1: 				"requestedQualifier is a " +
1: 				requestedQualifier.getClass().getName() +
1: 				"instead of a ShExQual.");
1: 
1: 			if (!(grantedQualifier instanceof ShExQual))
1: 				SanityManager.THROWASSERT(
1: 				"grantedQualifier is a " +
1: 				grantedQualifier.getClass().getName() +
1: 				"instead of a ShExQual.");
1: 		}
1: 
1: 		ShExQual requested = (ShExQual) requestedQualifier;
1: 		ShExQual granted = (ShExQual) grantedQualifier;
1: 
1: 		return (requested.getLockState() == ShExQual.SHARED) &&
1: 				(granted.getLockState() == ShExQual.SHARED);
1: 	}
1: 
1: 	/** @see Lockable#lockEvent */
1: 	public void lockEvent(Latch lockInfo)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(lockInfo.getQualifier() instanceof ShExQual))
1: 				SanityManager.THROWASSERT("qualifier is a " + lockInfo.getQualifier().getClass().getName() +
1: 				"instead of a ShExQual.");
1: 		}
1: 	}
1: 
1: 	/** @see Lockable#unlockEvent */
1: 	public void unlockEvent(Latch lockInfo)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(lockInfo.getQualifier() instanceof ShExQual))
1: 				SanityManager.THROWASSERT("qualifier is a " + lockInfo.getQualifier().getClass().getName() +
1: 				"instead of a ShExQual.");
1: 		}
1: 	}
1: 
1:     /**
1:      * This lockable want to participate in the Virtual LockTable
1:      * when we want to print LATCH information.
1:      * Any lockable object which DOES NOT want to participate should
1:      * override this function.
1:      */
0: 	public boolean lockAttributes(int flag, Hashtable attributes)
1: 	{
1:         if((flag & VirtualLockTable.SHEXLOCK) == 0)
1:             return false;
1:         // No containerId, but need something in there so it can print
0: 		attributes.put(VirtualLockTable.CONTAINERID, new Long(-1) ); 
1: 
1: 		attributes.put(VirtualLockTable.LOCKNAME, this.toString() );
1: 
1: 		attributes.put(VirtualLockTable.LOCKTYPE, "ShExLockable");
1: 
1: 		return true;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.locks;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: import org.apache.derby.iapi.services.locks.Latch;
0: import org.apache.derby.iapi.services.locks.VirtualLockTable;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Hashtable;
0: 
0: public class ShExLockable implements Lockable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	public ShExLockable()
0: 	{		
0: 	}
0: 
0: 	/** @see Lockable#lockerAlwaysCompatible */
0: 	public boolean lockerAlwaysCompatible()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/** @see Lockable#requestCompatible */
0: 	public boolean requestCompatible(Object requestedQualifier,
0: 											Object grantedQualifier)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(requestedQualifier instanceof ShExQual))
0: 				SanityManager.THROWASSERT(
0: 				"requestedQualifier is a " +
0: 				requestedQualifier.getClass().getName() +
0: 				"instead of a ShExQual.");
0: 
0: 			if (!(grantedQualifier instanceof ShExQual))
0: 				SanityManager.THROWASSERT(
0: 				"grantedQualifier is a " +
0: 				grantedQualifier.getClass().getName() +
0: 				"instead of a ShExQual.");
0: 		}
0: 
0: 		ShExQual requested = (ShExQual) requestedQualifier;
0: 		ShExQual granted = (ShExQual) grantedQualifier;
0: 
0: 		return (requested.getLockState() == ShExQual.SHARED) &&
0: 				(granted.getLockState() == ShExQual.SHARED);
0: 	}
0: 
0: 	/** @see Lockable#lockEvent */
0: 	public void lockEvent(Latch lockInfo)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(lockInfo.getQualifier() instanceof ShExQual))
0: 				SanityManager.THROWASSERT("qualifier is a " + lockInfo.getQualifier().getClass().getName() +
0: 				"instead of a ShExQual.");
0: 		}
0: 	}
0: 
0: 	/** @see Lockable#unlockEvent */
0: 	public void unlockEvent(Latch lockInfo)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(lockInfo.getQualifier() instanceof ShExQual))
0: 				SanityManager.THROWASSERT("qualifier is a " + lockInfo.getQualifier().getClass().getName() +
0: 				"instead of a ShExQual.");
0: 		}
0: 	}
0: 
0:     /**
0:      * This lockable want to participate in the Virtual LockTable
0:      * when we want to print LATCH information.
0:      * Any lockable object which DOES NOT want to participate should
0:      * override this function.
0:      */
0: 	public boolean lockAttributes(int flag, Hashtable attributes)
0: 	{
0:         if((flag & VirtualLockTable.SHEXLOCK) == 0)
0:             return false;
0:         // No containerId, but need something in there so it can print
0: 		attributes.put(VirtualLockTable.CONTAINERID, new Long(-1) ); 
0: 
0: 		attributes.put(VirtualLockTable.LOCKNAME, this.toString() );
0: 
0: 		attributes.put(VirtualLockTable.LOCKTYPE, "ShExLockable");
0: 
0: 		return true;
0: 	}
0: 
0: }
============================================================================