1:9148a9a: /*
2:9148a9a:  *
1:9148a9a:  * Derby - Class ScrollResultSetTest
1:9148a9a:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:9148a9a:  *
1:9148a9a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9148a9a:  *
1:9148a9a:  * Unless required by applicable law or agreed to in writing, 
1:9148a9a:  * software distributed under the License is distributed on an 
1:9148a9a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:9148a9a:  * either express or implied. See the License for the specific 
1:9148a9a:  * language governing permissions and limitations under the License.
1:9148a9a:  */
1:9148a9a: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
6:9148a9a: 
1:1ae02c9: import java.sql.Connection;
1:012a4ed: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:9148a9a: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:3bd1dd8: import org.apache.derbyTesting.junit.JDBC;
1:985662b: import org.apache.derbyTesting.junit.TestConfiguration;
1:3bd1dd8: 
1:9148a9a: /**
1:9148a9a:  * Tests scrollable result sets
1:9148a9a:  *
1:9148a9a:  *
1:9148a9a:  * Tests:
1:9148a9a:  * - testNextOnLastRowForwardOnly: tests that the result set is closed when all
1:012a4ed:  * rows have been retrieved and next has been called from the last row,
1:9148a9a:  * autocommit = true, the result set is not holdable and type forward 
1:9148a9a:  * only. (DERBY-1295)
1:9148a9a:  * - testNextOnLastRowScrollable: tests that the result set is not closed when 
1:9148a9a:  * next is called while the result set is positioned in the last row, 
1:9148a9a:  * autocommit = true, the result set is not holdable type scrollable 
1:9148a9a:  * insensitive. (DERBY-1295)
1:012a4ed:  * - testDerby6737: tests that a LOB can be accessed after using an absolute
1:012a4ed:  * positioning method to move the position to the row on which the result set
1:012a4ed:  * is currently positioned. (DERBY-6737)
1:9148a9a:  *
1:9148a9a:  */
1:9148a9a: public class ScrollResultSetTest extends BaseJDBCTestCase {
1:2fd14fb:     
1:9148a9a:     /** Creates a new instance of ScrollResultSetTest */
1:9148a9a:     public ScrollResultSetTest(String name) {
1:9148a9a:         super(name);
3:9148a9a:     }
1:2fd14fb:     
1:2fd14fb:     public static Test suite() {
1:2fd14fb:                 
1:2fd14fb:         // Requires holdability
1:2fd14fb:         if (JDBC.vmSupportsJDBC3() || JDBC.vmSupportsJSR169()) {
1:985662b:             // Run embedded and client
1:985662b:         	return TestConfiguration.defaultSuite(ScrollResultSetTest.class);
1:2fd14fb:         }
1:2fd14fb:         
1:985662b:         // empty suite, no holdability supported.
1:1ae02c9:         return new BaseTestSuite(
1:2f625cd:                 "Empty ScrollResultSetTest suite, no support for holdability");
1:2fd14fb:     }
1:9148a9a: 
1:9148a9a:     /**
1:9148a9a:      * Set up the connection to the database.
1:9148a9a:      */
1:9148a9a:     public void setUp() throws  Exception {       
1:03a99e2:         Connection con = getConnection();
1:9148a9a:         con.setAutoCommit(true);
1:9148a9a: 
1:9148a9a:         String createTableWithPK = "CREATE TABLE tableWithPK (" +
1:9148a9a:                 "c1 int primary key," +
1:9148a9a:                 "c2 int)";
1:9148a9a:         String insertData = "INSERT INTO tableWithPK values " +
1:9148a9a:                 "(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)";
1:9148a9a:         Statement stmt = con.createStatement();
1:9148a9a:         stmt.execute(createTableWithPK);
1:9148a9a:         
1:9148a9a:         stmt.execute(insertData);
1:a6464f2:         stmt.close();
1:9148a9a:     }
1:9148a9a:     
1:9148a9a:     /**
1:9148a9a:      * Drop the table
1:9148a9a:      */
1:9148a9a:     public void tearDown() throws Exception {
1:9148a9a:         println("TearDown");
1:03a99e2:         Statement s = getConnection().createStatement();
1:9148a9a:         try { 
1:a6464f2:             
1:a6464f2:             s.executeUpdate("DROP TABLE tableWithPK");
1:a6464f2:          } catch (SQLException e) {
1:9148a9a:             printStackTrace(e);
1:a6464f2:         }    
1:a6464f2:         s.close();
1:ffe3f66:         super.tearDown();
1:ffe3f66: 
1:9148a9a:     }
1:9148a9a:     
1:9148a9a:     /**
1:9148a9a:      * Test that moving to next row after positioned at the last row on a 
1:9148a9a:      * forward only result set will close the result set
1:9148a9a:      */
1:9148a9a:     public void testNextOnLastRowForwardOnly()  throws SQLException{
1:9148a9a: 
1:03a99e2:         Connection con = getConnection();
1:9148a9a:         con.setAutoCommit(true);
1:9148a9a:         con.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:9148a9a:         Statement roStmt = con.createStatement(
1:9148a9a:                 ResultSet.TYPE_FORWARD_ONLY, 
1:9148a9a:                 ResultSet.CONCUR_READ_ONLY);
1:9148a9a: 
1:9148a9a:         ResultSet rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:9148a9a: 
1:9148a9a:         // call next until positioned after last
1:9148a9a:         while (rs.next());
1:9148a9a:         
1:9148a9a:         try {
1:9148a9a:             // forward only result set should be closed now, an exception will
1:9148a9a:             // be thrown
1:9148a9a:             rs.next();
1:9148a9a:             assertTrue("Excepted exception to be thrown - result set is closed", 
1:9148a9a:                        false);
1:9148a9a:         } catch (SQLException se) {
1:9148a9a:                 assertSQLState("Unexpected SQL State",
1:9148a9a:                                SQLStateConstants.RESULT_SET_IS_CLOSED, se);
1:9148a9a:         }
1:9148a9a:     }
1:9148a9a: 
1:9148a9a:     /**
1:9148a9a:      * Test that moving to next row after positioned at the last row on a 
1:9148a9a:      * scrollable result set will not close the result set
1:9148a9a:      */
1:9148a9a:     public void testNextOnLastRowScrollable()  throws SQLException{
1:9148a9a: 
1:03a99e2:         Connection con = getConnection();
1:9148a9a:         con.setAutoCommit(true);
1:9148a9a:         con.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:9148a9a:         Statement roStmt = con.createStatement(
1:9148a9a:                 ResultSet.TYPE_SCROLL_INSENSITIVE, 
1:9148a9a:                 ResultSet.CONCUR_READ_ONLY);
1:9148a9a: 
1:9148a9a:         ResultSet rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:9148a9a:         // move to last position and then call next
1:9148a9a:         rs.last();
1:9148a9a:         rs.next();
1:9148a9a:         
1:9148a9a:         // scrollable result set should still be open and not throw no 
1:9148a9a:         // exception will be thrown
1:9148a9a:         assertFalse("Calling next while positioned after last returns " +
1:9148a9a:                 "false", rs.next());
1:9148a9a:         assertTrue("Moving to absolute(2) returns true", rs.absolute(2));
1:9148a9a:         rs.close();
1:012a4ed: 
1:9148a9a:     }
1:9148a9a: 
1:012a4ed:     /**
1:012a4ed:      * <p>
1:012a4ed:      * Test that it is possible to access LOBs after moving the position of
1:012a4ed:      * a scrollable result set from one row to the same row. Before DERBY-6737
1:012a4ed:      * the following sequence of calls
1:012a4ed:      * </p>
1:012a4ed:      *
1:012a4ed:      * <pre>
1:012a4ed:      * rs.last();
1:012a4ed:      * rs.first();
1:012a4ed:      * rs.getClob(1).length();
1:012a4ed:      * </pre>
1:012a4ed:      *
1:012a4ed:      * <p>
1:012a4ed:      * would fail with 'invalid locator' on the client, if the result set
1:012a4ed:      * contained only one row.
1:012a4ed:      * </p>
1:012a4ed:      */
1:012a4ed:     public void testDerby6737() throws SQLException {
1:012a4ed:         Statement s = createStatement();
1:012a4ed:         s.execute("create table d6737(c clob)");
1:012a4ed:         s.execute("insert into d6737 values 'abc'");
1:012a4ed: 
1:012a4ed:         PreparedStatement ps = prepareStatement("select * from d6737",
1:012a4ed:                 ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
1:012a4ed: 
1:012a4ed:         ResultSet rs = ps.executeQuery();
1:012a4ed:         assertTrue(rs.last());
1:012a4ed:         assertTrue(rs.first());
1:012a4ed:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:012a4ed:         rs.close();
1:012a4ed: 
1:012a4ed:         rs = ps.executeQuery();
1:012a4ed:         assertTrue(rs.next());
1:012a4ed:         assertTrue(rs.first());
1:012a4ed:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:012a4ed:         rs.close();
1:012a4ed: 
1:012a4ed:         rs = ps.executeQuery();
1:012a4ed:         assertTrue(rs.first());
1:012a4ed:         assertTrue(rs.last());
1:012a4ed:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:012a4ed:         rs.close();
1:012a4ed: 
1:012a4ed:         rs = ps.executeQuery();
1:012a4ed:         assertTrue(rs.last());
1:012a4ed:         assertTrue(rs.absolute(1));
1:012a4ed:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:012a4ed:         rs.close();
1:012a4ed: 
1:012a4ed:         // This case, where the CLOB had been accessed, but not explicitly
1:012a4ed:         // freed before the result set was repositioned, passed even before
1:012a4ed:         // the fix.
1:012a4ed:         rs = ps.executeQuery();
1:012a4ed:         assertTrue(rs.last());
1:012a4ed:         assertEquals(3, rs.getClob(1).length());
1:012a4ed:         assertTrue(rs.first());
1:012a4ed:         assertEquals(3, rs.getClob(1).length());
1:012a4ed:         rs.close();
1:012a4ed: 
1:012a4ed:         // But it failed if the CLOB was explicitly freed before repositioning.
1:012a4ed:         rs = ps.executeQuery();
1:012a4ed:         assertTrue(rs.last());
1:012a4ed:         rs.getClob(1).free();
1:012a4ed:         assertTrue(rs.first());
1:012a4ed:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:012a4ed:         rs.close();
1:012a4ed:     }
1:9148a9a: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:012a4ed
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1:  * rows have been retrieved and next has been called from the last row,
1:  * - testDerby6737: tests that a LOB can be accessed after using an absolute
1:  * positioning method to move the position to the row on which the result set
1:  * is currently positioned. (DERBY-6737)
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that it is possible to access LOBs after moving the position of
1:      * a scrollable result set from one row to the same row. Before DERBY-6737
1:      * the following sequence of calls
1:      * </p>
1:      *
1:      * <pre>
1:      * rs.last();
1:      * rs.first();
1:      * rs.getClob(1).length();
1:      * </pre>
1:      *
1:      * <p>
1:      * would fail with 'invalid locator' on the client, if the result set
1:      * contained only one row.
1:      * </p>
1:      */
1:     public void testDerby6737() throws SQLException {
1:         Statement s = createStatement();
1:         s.execute("create table d6737(c clob)");
1:         s.execute("insert into d6737 values 'abc'");
1: 
1:         PreparedStatement ps = prepareStatement("select * from d6737",
1:                 ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
1: 
1:         ResultSet rs = ps.executeQuery();
1:         assertTrue(rs.last());
1:         assertTrue(rs.first());
1:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:         rs.close();
1: 
1:         rs = ps.executeQuery();
1:         assertTrue(rs.next());
1:         assertTrue(rs.first());
1:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:         rs.close();
1: 
1:         rs = ps.executeQuery();
1:         assertTrue(rs.first());
1:         assertTrue(rs.last());
1:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:         rs.close();
1: 
1:         rs = ps.executeQuery();
1:         assertTrue(rs.last());
1:         assertTrue(rs.absolute(1));
1:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:         rs.close();
1: 
1:         // This case, where the CLOB had been accessed, but not explicitly
1:         // freed before the result set was repositioned, passed even before
1:         // the fix.
1:         rs = ps.executeQuery();
1:         assertTrue(rs.last());
1:         assertEquals(3, rs.getClob(1).length());
1:         assertTrue(rs.first());
1:         assertEquals(3, rs.getClob(1).length());
1:         rs.close();
1: 
1:         // But it failed if the CLOB was explicitly freed before repositioning.
1:         rs = ps.executeQuery();
1:         assertTrue(rs.last());
1:         rs.getClob(1).free();
1:         assertTrue(rs.first());
1:         assertEquals(3, rs.getClob(1).length()); // used to fail on client
1:         rs.close();
1:     }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7dc89cf
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cd1bd2a
/////////////////////////////////////////////////////////////////////////
0:             if (!usingDB2Client()) {
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         return new TestSuite(
1:                 "Empty ScrollResultSetTest suite, no support for holdability");
commit:985662b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:             // Run embedded and client
1:         	return TestConfiguration.defaultSuite(ScrollResultSetTest.class);
1:         // empty suite, no holdability supported.
0:         return new TestSuite();
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         Statement s = getConnection().createStatement();
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
commit:ffe3f66
/////////////////////////////////////////////////////////////////////////
0:         Connection con = getXConnection();
/////////////////////////////////////////////////////////////////////////
0:         Statement s = getXConnection().createStatement();
/////////////////////////////////////////////////////////////////////////
1:         super.tearDown();
1: 
/////////////////////////////////////////////////////////////////////////
0:         Connection con = getXConnection();
/////////////////////////////////////////////////////////////////////////
0:         Connection con = getXConnection();
/////////////////////////////////////////////////////////////////////////
commit:a6464f2
/////////////////////////////////////////////////////////////////////////
1:         stmt.close();
/////////////////////////////////////////////////////////////////////////
0:         Statement s = con.createStatement();
1:             
1:             s.executeUpdate("DROP TABLE tableWithPK");
1:          } catch (SQLException e) {
1:         }    
1:         s.close();
0:         JDBC.cleanup(con);
0:         con = null;
commit:2fd14fb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.JDBC;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite();
1:                 
1:         // Requires holdability
1:         if (JDBC.vmSupportsJDBC3() || JDBC.vmSupportsJSR169()) {
0:         	suite.addTestSuite(ScrollResultSetTest.class);
1:         }
1:         
0:         return suite;
1:     }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:9148a9a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class ScrollResultSetTest
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
0: import junit.framework.*;
0: import java.sql.*;
1: 
1: /**
1:  * Tests scrollable result sets
1:  *
0:  * @author Fernanda Pizzorno
1:  *
1:  * Tests:
1:  * - testNextOnLastRowForwardOnly: tests that the result set is closed when all
0:  * rows have been retreived and next has been called from the last row, 
1:  * autocommit = true, the result set is not holdable and type forward 
1:  * only. (DERBY-1295)
1:  * - testNextOnLastRowScrollable: tests that the result set is not closed when 
1:  * next is called while the result set is positioned in the last row, 
1:  * autocommit = true, the result set is not holdable type scrollable 
1:  * insensitive. (DERBY-1295)
1:  *
1:  */
1: public class ScrollResultSetTest extends BaseJDBCTestCase {
1:     
1:     /** Creates a new instance of ScrollResultSetTest */
1:     public ScrollResultSetTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Set up the connection to the database.
1:      */
1:     public void setUp() throws  Exception {       
0:         con = getConnection();
1:         con.setAutoCommit(true);
1: 
1:         String createTableWithPK = "CREATE TABLE tableWithPK (" +
1:                 "c1 int primary key," +
1:                 "c2 int)";
1:         String insertData = "INSERT INTO tableWithPK values " +
1:                 "(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)";
1:         Statement stmt = con.createStatement();
1:         stmt.execute(createTableWithPK);
1:         
1:         stmt.execute(insertData);
1:     }
1:     
1:     /**
1:      * Drop the table
1:      */
1:     public void tearDown() throws Exception {
1:         println("TearDown");
1:         try { 
0:             con.createStatement().executeUpdate("DROP TABLE tableWithPK");
0:             con.commit();
0:             con.close();
0:         } catch (SQLException e) {
1:             printStackTrace(e);
1:         }      
1:     }
1:     
1:     /**
1:      * Test that moving to next row after positioned at the last row on a 
1:      * forward only result set will close the result set
1:      */
1:     public void testNextOnLastRowForwardOnly()  throws SQLException{
1: 
1:         con.setAutoCommit(true);
1:         con.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:         Statement roStmt = con.createStatement(
1:                 ResultSet.TYPE_FORWARD_ONLY, 
1:                 ResultSet.CONCUR_READ_ONLY);
1: 
1:         ResultSet rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
1: 
1:         // call next until positioned after last
1:         while (rs.next());
1:         
1:         try {
1:             // forward only result set should be closed now, an exception will
1:             // be thrown
1:             rs.next();
1:             assertTrue("Excepted exception to be thrown - result set is closed", 
1:                        false);
1:         } catch (SQLException se) {
0:             if (!usingDerbyNet()) {
1:                 assertSQLState("Unexpected SQL State",
1:                                SQLStateConstants.RESULT_SET_IS_CLOSED, se);
1:             }
1:         }
1: 
1:     }
1: 
1:     /**
1:      * Test that moving to next row after positioned at the last row on a 
1:      * scrollable result set will not close the result set
1:      */
1:     public void testNextOnLastRowScrollable()  throws SQLException{
1: 
1:         con.setAutoCommit(true);
1:         con.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:         Statement roStmt = con.createStatement(
1:                 ResultSet.TYPE_SCROLL_INSENSITIVE, 
1:                 ResultSet.CONCUR_READ_ONLY);
1: 
1:         ResultSet rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:         // move to last position and then call next
1:         rs.last();
1:         rs.next();
1:         
1:         // scrollable result set should still be open and not throw no 
1:         // exception will be thrown
1:         assertFalse("Calling next while positioned after last returns " +
1:                 "false", rs.next());
1:         assertTrue("Moving to absolute(2) returns true", rs.absolute(2));
1:         rs.close();
1: 
1:     }
1: 
0:     /* Connection established in setUp() */
0:     protected Connection con = null;
1:        
1: }
============================================================================