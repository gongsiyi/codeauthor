1:db8dae7: /*
1:db8dae7:  
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.IOException;
1:db8dae7: import java.sql.Connection;
1:db8dae7: import java.sql.DriverManager;
1:db8dae7: import java.sql.SQLException;
1:db8dae7: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:db8dae7: import org.apache.derbyTesting.junit.TestConfiguration;
1:db8dae7: 
1:db8dae7: /**
1:db8dae7:  * Test behaviour when doing stopMaster after master and slave 
1:db8dae7:  * has got into replication mode.
1:db8dae7:  */
1:db8dae7: public class TestPostStartedMasterAndSlave_StopMaster extends ClientRunner
1:db8dae7: {
1:db8dae7:     
1:db8dae7:     public TestPostStartedMasterAndSlave_StopMaster(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public static Test suite()
1:db8dae7:         throws Exception
1:db8dae7:     {
1:db8dae7:         System.out.println("**** TestPostStartedMasterAndSlave_StopMaster.suite()");
1:db8dae7:         
1:db8dae7:         initEnvironment();
1:db8dae7:         
1:db8dae7:         // String masterHostName = System.getProperty("test.serverHost", "localhost");
1:db8dae7:         // int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:db8dae7:         
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("TestPostStartedMasterAndSlave_StopMaster");
1:db8dae7:                 
1:db8dae7:         suite.addTest(TestPostStartedMasterAndSlave_StopMaster.suite(slaveServerHost, slaveServerPort)); // master?
1:db8dae7:         System.out.println("*** Done suite.addTest(TestPostStartedMasterAndSlave_StopMaster.suite())");
1:db8dae7:         
1:db8dae7:         return (Test)suite;
1:db8dae7:     }
1:db8dae7: 
1:db8dae7:     /**
1:db8dae7:      * Adds this class to the *existing server* suite.
1:db8dae7:      */
1:db8dae7:     public static Test suite(String serverHost, int serverPort)
1:db8dae7:     {
1:db8dae7:         System.out.println("*** TestPostStartedMasterAndSlave_StopMaster.suite(serverHost,serverPort)");
1:db8dae7:      
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(TestPostStartedMasterAndSlave_StopMaster.class,false,serverHost,serverPort);
1:db8dae7:         System.out.println("*** Done TestConfiguration.existingServerSuite(TestPostStartedMasterAndSlave_StopMaster.class,false,serverHost,serverPort)");
1:db8dae7:         return t;
1:db8dae7:    }
1:db8dae7: 
1:db8dae7:     /**
1:db8dae7:      *
1:db8dae7:      *
1:db8dae7:      * @throws SQLException, IOException, InterruptedException
1:db8dae7:      */
1:db8dae7:     public void testStopMaster()
1:db8dae7:     throws SQLException, IOException, InterruptedException
1:db8dae7:     {
1:db8dae7:         System.out.println("**** TestPostStartedMasterAndSlave_StopMaster.testStopMaster() "+
1:db8dae7:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:db8dae7:         
1:db8dae7:         Connection conn = null;
1:db8dae7:         String db = null;
1:db8dae7:         String connectionURL = null;
1:db8dae7:         
1:db8dae7:         // 1. Add attempt to perform stopMaster on slave. Should fail.
1:db8dae7:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:db8dae7:         connectionURL = "jdbc:derby:"  
1:db8dae7:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:db8dae7:                 + db
1:db8dae7:                 + ";stopMaster=true";
1:db8dae7:         System.out.println("1. " + connectionURL);
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:db8dae7:             System.out.println("Unexpectedly connected as: " + connectionURL);
1:db8dae7:             assertTrue("Unexpectedly connected as: " + connectionURL,false);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             //  SQLCODE: -1, SQLSTATE: 08004
1:db8dae7:             assertSQLState(msg, "08004", se);
1:db8dae7:             System.out.println("stopMaster on slave failed as expected: " + connectionURL + " " + msg);
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:         // 2. stopMaster on master: OK
1:db8dae7:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:db8dae7:         connectionURL = "jdbc:derby:"  
1:db8dae7:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:db8dae7:                 + db
1:db8dae7:                 + ";stopMaster=true";
1:db8dae7:         System.out.println("2. " + connectionURL);
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:db8dae7:             System.out.println("Connected as expected: " + connectionURL);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             assertTrue("stopMaster on master failed: " + connectionURL + " " + msg,false);
1:db8dae7:             System.out.println("stopMaster on master failed: " + connectionURL + " " + msg);
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:         // 3. stopMaster on slave which now is in non-replicating mode should fail.
1:db8dae7:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:db8dae7:         connectionURL = "jdbc:derby:"  
1:db8dae7:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:db8dae7:                 + db
1:db8dae7:                 + ";stopMaster=true";
1:db8dae7:         System.out.println("3. " + connectionURL);
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:db8dae7:             System.out.println("Unexpectedly connected: " + connectionURL);
1:db8dae7:             assertTrue("Unexpectedly connected: " + connectionURL,false);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             System.out.println("DERBY-????: stopMaster on slave failed: " + connectionURL + " " + msg); // FIXME when DERBY-????
1:db8dae7:             //  DERBY-????: SQLCODE: 40000, SQLSTATE: 08004
1:db8dae7:             assertSQLState(msg, "08004", se); // assertTrue("stopMaster on slave failed: " + connectionURL + " " + msg, false);
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:         // 4. Attempt to do stopmaster on master which now is in non-replicating mode should fail.
1:db8dae7:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:db8dae7:         connectionURL = "jdbc:derby:"  
1:db8dae7:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:db8dae7:                 + db
1:db8dae7:                 + ";stopMaster=true";
1:db8dae7:         System.out.println("4. " + connectionURL);
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:db8dae7:             System.out.println("DERBY-????: Unexpectedly connected: " + connectionURL); // FIXME when DERBY-????
1:db8dae7:             // DERBY-???? - assertTrue("Unexpectedly connected: " + connectionURL,false);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             assertTrue("stopMaster on server not in master mode failed as expected: " + connectionURL + " " + msg,false);
1:db8dae7:             System.out.println("stopMaster on server not in master mode failed as expected: " + connectionURL + " " + msg);
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public void verify()
1:db8dae7:     throws SQLException, IOException, InterruptedException
1:db8dae7:     {
1:db8dae7: 
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("TestPostStartedMasterAndSlave_StopMaster");
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test behaviour when doing stopMaster after master and slave 
1:  * has got into replication mode.
1:  */
1: public class TestPostStartedMasterAndSlave_StopMaster extends ClientRunner
1: {
1:     
1:     public TestPostStartedMasterAndSlave_StopMaster(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:         throws Exception
1:     {
1:         System.out.println("**** TestPostStartedMasterAndSlave_StopMaster.suite()");
1:         
1:         initEnvironment();
1:         
1:         // String masterHostName = System.getProperty("test.serverHost", "localhost");
1:         // int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:         
0:         TestSuite suite = new TestSuite("TestPostStartedMasterAndSlave_StopMaster");
1:                 
1:         suite.addTest(TestPostStartedMasterAndSlave_StopMaster.suite(slaveServerHost, slaveServerPort)); // master?
1:         System.out.println("*** Done suite.addTest(TestPostStartedMasterAndSlave_StopMaster.suite())");
1:         
1:         return (Test)suite;
1:     }
1: 
1:     /**
1:      * Adds this class to the *existing server* suite.
1:      */
1:     public static Test suite(String serverHost, int serverPort)
1:     {
1:         System.out.println("*** TestPostStartedMasterAndSlave_StopMaster.suite(serverHost,serverPort)");
1:      
1:         Test t = TestConfiguration.existingServerSuite(TestPostStartedMasterAndSlave_StopMaster.class,false,serverHost,serverPort);
1:         System.out.println("*** Done TestConfiguration.existingServerSuite(TestPostStartedMasterAndSlave_StopMaster.class,false,serverHost,serverPort)");
1:         return t;
1:    }
1: 
1:     /**
1:      *
1:      *
1:      * @throws SQLException, IOException, InterruptedException
1:      */
1:     public void testStopMaster()
1:     throws SQLException, IOException, InterruptedException
1:     {
1:         System.out.println("**** TestPostStartedMasterAndSlave_StopMaster.testStopMaster() "+
1:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:         
1:         Connection conn = null;
1:         String db = null;
1:         String connectionURL = null;
1:         
1:         // 1. Add attempt to perform stopMaster on slave. Should fail.
1:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         System.out.println("1. " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:             System.out.println("Unexpectedly connected as: " + connectionURL);
1:             assertTrue("Unexpectedly connected as: " + connectionURL,false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             //  SQLCODE: -1, SQLSTATE: 08004
1:             assertSQLState(msg, "08004", se);
1:             System.out.println("stopMaster on slave failed as expected: " + connectionURL + " " + msg);
1:         }
1:         
1:         // 2. stopMaster on master: OK
1:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         System.out.println("2. " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:             System.out.println("Connected as expected: " + connectionURL);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             assertTrue("stopMaster on master failed: " + connectionURL + " " + msg,false);
1:             System.out.println("stopMaster on master failed: " + connectionURL + " " + msg);
1:         }
1:         
1:         // 3. stopMaster on slave which now is in non-replicating mode should fail.
1:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         System.out.println("3. " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:             System.out.println("Unexpectedly connected: " + connectionURL);
1:             assertTrue("Unexpectedly connected: " + connectionURL,false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             System.out.println("DERBY-????: stopMaster on slave failed: " + connectionURL + " " + msg); // FIXME when DERBY-????
1:             //  DERBY-????: SQLCODE: 40000, SQLSTATE: 08004
1:             assertSQLState(msg, "08004", se); // assertTrue("stopMaster on slave failed: " + connectionURL + " " + msg, false);
1:         }
1:         
1:         // 4. Attempt to do stopmaster on master which now is in non-replicating mode should fail.
1:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         System.out.println("4. " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL); // From anywhere against masterServerHost?
1:             System.out.println("DERBY-????: Unexpectedly connected: " + connectionURL); // FIXME when DERBY-????
1:             // DERBY-???? - assertTrue("Unexpectedly connected: " + connectionURL,false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             assertTrue("stopMaster on server not in master mode failed as expected: " + connectionURL + " " + msg,false);
1:             System.out.println("stopMaster on server not in master mode failed as expected: " + connectionURL + " " + msg);
1:         }
1:         
1:     }
1:     
1:     public void verify()
1:     throws SQLException, IOException, InterruptedException
1:     {
1: 
1:     }
1: }
============================================================================