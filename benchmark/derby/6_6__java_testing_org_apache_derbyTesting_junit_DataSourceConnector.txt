1:cef7d1e: /*
1:cef7d1e:  *
1:cef7d1e:  * Derby - Class org.apache.derbyTesting.junit.DataSourceConnector
1:cef7d1e:  *
1:cef7d1e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cef7d1e:  * contributor license agreements.  See the NOTICE file distributed with
1:cef7d1e:  * this work for additional information regarding copyright ownership.
1:cef7d1e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cef7d1e:  * (the "License"); you may not use this file except in compliance with
1:cef7d1e:  * the License.  You may obtain a copy of the License at
1:cef7d1e:  *
1:cef7d1e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cef7d1e:  *
1:cef7d1e:  * Unless required by applicable law or agreed to in writing, 
1:cef7d1e:  * software distributed under the License is distributed on an 
1:cef7d1e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:cef7d1e:  * either express or implied. See the License for the specific 
1:cef7d1e:  * language governing permissions and limitations under the License.
1:cef7d1e:  */
1:cef7d1e: package org.apache.derbyTesting.junit;
1:cef7d1e: 
1:cef7d1e: import java.sql.Connection;
1:cef7d1e: import java.sql.SQLException;
1:cef7d1e: import java.util.HashMap;
1:2510115: import java.util.Map;
1:47f286f: import java.util.Properties;
1:cef7d1e: 
1:cef7d1e: import javax.sql.DataSource;
1:51e6268: import org.apache.derby.shared.common.sanity.SanityManager;
1:cef7d1e: 
1:cef7d1e: 
1:cef7d1e: /**
1:cef7d1e:  * Connection factory using javax.sql.DataSource.
1:cef7d1e:  * Should work for an Derby data source, including JSR169 support.
1:cef7d1e:  *
1:cef7d1e:  */
1:cef7d1e: public class DataSourceConnector implements Connector {
1:cef7d1e:     
1:cef7d1e:     private TestConfiguration config;
1:cef7d1e:     /**
1:cef7d1e:      * DataSource that maps to the database for the
1:cef7d1e:      * configuration. The no-arg getConnection() method
1:cef7d1e:      * maps to the default user and password for the
1:cef7d1e:      * configuration.
1:cef7d1e:      */
1:cef7d1e:     private DataSource ds;
1:cef7d1e: 
1:cef7d1e:     public void setConfiguration(TestConfiguration config) {
1:cef7d1e:         
1:cef7d1e:         this.config = config;
1:cef7d1e:         ds = JDBCDataSource.getDataSource(config, (HashMap) null);
1:cef7d1e:     }
1:eb47230: 
1:cef7d1e:     public Connection openConnection() throws SQLException {
1:cef7d1e:         try {
1:cef7d1e:             return ds.getConnection();
1:cef7d1e:         } catch (SQLException e) {
1:cef7d1e:             // Expected state for database not found.
1:cef7d1e:             // For the client the generic 08004 is returned,
1:cef7d1e:             // will just retry on that.
1:cef7d1e:             String expectedState = 
1:cef7d1e:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1:cef7d1e: 
1:cef7d1e:             // If there is a database not found exception
1:cef7d1e:             // then retry the connection request with
1:cef7d1e:             // a new DataSource with the createDtabase property set.
1:cef7d1e:             if (!expectedState.equals(e.getSQLState()))
1:cef7d1e:                 throw e;
1:47f286f:             return singleUseDS( makeCreateDBAttributes( config ) ).getConnection(); 
1:cef7d1e:        }
1:cef7d1e:     }
1:cef7d1e: 
1:3df869c:     public Connection openConnection(String databaseName) throws SQLException {
1:3df869c:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:3df869c:         try {
1:3df869c:             return ds.getConnection();
1:3df869c:         } catch (SQLException e) {
1:3df869c:             // Expected state for database not found.
1:3df869c:             // For the client the generic 08004 is returned,
1:3df869c:             // will just retry on that.
1:3df869c:             String expectedState = 
1:3df869c:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1:3df869c: 
1:3df869c:             // If there is a database not found exception
1:3df869c:             // then retry the connection request with
1:3df869c:             // a new DataSource with the createDtabase property set.
1:3df869c:             if (!expectedState.equals(e.getSQLState()))
1:3df869c:                 throw e;
1:47f286f:             DataSource tmpDs = singleUseDS( makeCreateDBAttributes( config ) );
1:3df869c:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:3df869c:             return tmpDs.getConnection();
1:3df869c:        }
1:3df869c:     }
1:3df869c: 
1:cef7d1e:     public Connection openConnection(String user, String password)
1:3df869c:             throws SQLException {
1:cef7d1e:         try {
1:cef7d1e:             return ds.getConnection(user, password);
1:cef7d1e:         } catch (SQLException e) {
1:cef7d1e:             // If there is a database not found exception
1:cef7d1e:             // then retry the connection request with
1:cef7d1e:             // a new DataSource with the createDatabase property set.
1:cef7d1e:             if (!"XJ004".equals(e.getSQLState()))
1:cef7d1e:                 throw e;
1:47f286f:             return singleUseDS( makeCreateDBAttributes( config ) ).getConnection
1:47f286f:                 (user, password); 
1:cef7d1e:        }
1:cef7d1e:     }
1:cef7d1e: 
1:3df869c:     public Connection openConnection(String databaseName, String user, String password)
1:47f286f:             throws SQLException
1:47f286f:     {
1:47f286f:         return openConnection( databaseName, user, password, null );
1:47f286f:     }
1:47f286f:     
1:47f286f:     public  Connection openConnection
1:47f286f:         (String databaseName, String user, String password, Properties connectionProperties)
1:47f286f:          throws SQLException
1:47f286f:     {
1:3df869c:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:3df869c:         try {
1:3df869c:             return ds.getConnection(user, password);
1:3df869c:         } catch (SQLException e) {
1:3df869c:             // If there is a database not found exception
1:3df869c:             // then retry the connection request with
1:3df869c:             // a new DataSource with the createDatabase property set.
1:3df869c:             if (!"XJ004".equals(e.getSQLState()))
1:3df869c:                 throw e;
1:2510115:             HashMap<String, Object> hm = makeCreateDBAttributes( config );
1:2510115:             copyProperties(connectionProperties, hm);
1:47f286f:             DataSource tmpDs = singleUseDS( hm );
1:3df869c:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:3df869c:             return tmpDs.getConnection(user, password); 
1:3df869c:        }
1:3df869c:     }
1:eb47230:     
1:3df869c: 
1:cef7d1e:     public void shutDatabase() throws SQLException {
1:47f286f:         singleUseDS( makeShutdownDBAttributes( config ) ).getConnection();
1:eb47230:         config.waitForShutdownComplete(getDatabaseName());
1:cef7d1e:     }
1:cef7d1e: 
1:51e6268:     public void shutEngine(boolean deregisterDriver) throws SQLException {
1:51e6268:         if (SanityManager.DEBUG) {
1:51e6268:              // "false" only used with driver manager
1:51e6268:             SanityManager.ASSERT(deregisterDriver);
1:51e6268:         }
1:51e6268: 
1:47f286f:         DataSource tmpDs = singleUseDS( makeShutdownDBAttributes( config ) );
1:d51a6d7:         JDBCDataSource.setBeanProperty(tmpDs, "databaseName", "");
1:d51a6d7:         tmpDs.getConnection();
1:cef7d1e:     }
1:cef7d1e:     
1:25c1e7b:     public void setLoginTimeout( int seconds ) throws SQLException
1:25c1e7b:     {
1:25c1e7b:         ds.setLoginTimeout( seconds );
1:25c1e7b:     }
1:25c1e7b:     
1:25c1e7b:     public int getLoginTimeout() throws SQLException
1:25c1e7b:     {
1:25c1e7b:         return ds.getLoginTimeout();
1:25c1e7b:     }
1:25c1e7b:     
1:cef7d1e:     /**
1:cef7d1e:      * Get a connection from a single use DataSource configured
1:cef7d1e:      * from the configuration but with the passed in property set.
1:cef7d1e:      */
1:47f286f:     private DataSource singleUseDS( HashMap hm )
2:cef7d1e:        throws SQLException {
1:cef7d1e:         DataSource sds = JDBCDataSource.getDataSource(config, hm);
1:cef7d1e:         return sds;
1:cef7d1e:     }
1:cef7d1e: 
1:2510115:     static HashMap<String, Object> makeCreateDBAttributes( TestConfiguration configuration )
1:47f286f:     {
1:2510115:         HashMap<String, Object> hm = JDBCDataSource.getDataSourceProperties( configuration );
1:47f286f:         hm.put( "createDatabase", "create" );
1:47f286f: 
1:47f286f:         return hm;
1:47f286f:     }
1:47f286f: 
1:2510115:     static HashMap<String, Object> makeShutdownDBAttributes( TestConfiguration configuration )
1:47f286f:     {
1:2510115:         HashMap<String, Object> hm = JDBCDataSource.getDataSourceProperties( configuration );
1:47f286f:         hm.put( "shutdownDatabase", "shutdown" );
1:47f286f: 
1:47f286f:         return hm;
1:47f286f:     }
1:47f286f:     
1:eb47230:     public String getDatabaseName() {
1:eb47230:         String databaseName=null;
1:eb47230:         try {
1:eb47230:             // get the physical database name
1:eb47230:             databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
1:eb47230:         } catch (Exception e) {
1:eb47230:             e.printStackTrace();
1:eb47230:         }
1:eb47230:         return databaseName;
1:eb47230:     }
1:cef7d1e: 
1:2510115:     /**
1:2510115:      * Copy attributes from a {@code Properties} object to a {@code Map}.
1:2510115:      */
1:2510115:     static void copyProperties(Properties src, Map<String, Object> dest) {
1:2510115:         if (src != null) {
1:2510115:             for (String key : src.stringPropertyNames()) {
1:2510115:                 dest.put(key, src.getProperty(key));
1:2510115:             }
1:2510115:         }
1:2510115:     }
1:2510115: 
1:cef7d1e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:51e6268
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:     public void shutEngine(boolean deregisterDriver) throws SQLException {
1:         if (SanityManager.DEBUG) {
1:              // "false" only used with driver manager
1:             SanityManager.ASSERT(deregisterDriver);
1:         }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2510115
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, Object> hm = makeCreateDBAttributes( config );
1:             copyProperties(connectionProperties, hm);
/////////////////////////////////////////////////////////////////////////
1:     static HashMap<String, Object> makeCreateDBAttributes( TestConfiguration configuration )
1:         HashMap<String, Object> hm = JDBCDataSource.getDataSourceProperties( configuration );
1:     static HashMap<String, Object> makeShutdownDBAttributes( TestConfiguration configuration )
1:         HashMap<String, Object> hm = JDBCDataSource.getDataSourceProperties( configuration );
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Copy attributes from a {@code Properties} object to a {@code Map}.
1:      */
1:     static void copyProperties(Properties src, Map<String, Object> dest) {
1:         if (src != null) {
1:             for (String key : src.stringPropertyNames()) {
1:                 dest.put(key, src.getProperty(key));
1:             }
1:         }
1:     }
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:25c1e7b
/////////////////////////////////////////////////////////////////////////
1:     public void setLoginTimeout( int seconds ) throws SQLException
1:     {
1:         ds.setLoginTimeout( seconds );
1:     }
1:     
1:     public int getLoginTimeout() throws SQLException
1:     {
1:         return ds.getLoginTimeout();
1:     }
1:     
commit:47f286f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:             return singleUseDS( makeCreateDBAttributes( config ) ).getConnection(); 
/////////////////////////////////////////////////////////////////////////
1:             DataSource tmpDs = singleUseDS( makeCreateDBAttributes( config ) );
/////////////////////////////////////////////////////////////////////////
1:             return singleUseDS( makeCreateDBAttributes( config ) ).getConnection
1:                 (user, password); 
1:             throws SQLException
1:     {
1:         return openConnection( databaseName, user, password, null );
1:     }
1:     
1:     public  Connection openConnection
1:         (String databaseName, String user, String password, Properties connectionProperties)
1:          throws SQLException
1:     {
/////////////////////////////////////////////////////////////////////////
0:             HashMap hm = makeCreateDBAttributes( config );
0:             if ( connectionProperties != null ) { hm.putAll( connectionProperties ); }
1:             DataSource tmpDs = singleUseDS( hm );
1:         singleUseDS( makeShutdownDBAttributes( config ) ).getConnection();     
1:         DataSource tmpDs = singleUseDS( makeShutdownDBAttributes( config ) );
/////////////////////////////////////////////////////////////////////////
1:     private DataSource singleUseDS( HashMap hm )
0:     static  HashMap makeCreateDBAttributes( TestConfiguration configuration )
1:     {
0:         HashMap hm = JDBCDataSource.getDataSourceProperties( configuration );
1:         hm.put( "createDatabase", "create" );
1: 
1:         return hm;
1:     }
1: 
0:     static  HashMap makeShutdownDBAttributes( TestConfiguration configuration )
1:     {
0:         HashMap hm = JDBCDataSource.getDataSourceProperties( configuration );
1:         hm.put( "shutdownDatabase", "shutdown" );
1: 
1:         return hm;
1:     }
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:eb47230
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:     
0:         singleUseDS( makeShutdownDBAttributes( config ) ).getConnection();
1:         config.waitForShutdownComplete(getDatabaseName());
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getDatabaseName() {
1:         String databaseName=null;
1:         try {
1:             // get the physical database name
1:             databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:         return databaseName;
1:     }
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:d51a6d7
/////////////////////////////////////////////////////////////////////////
0:         DataSource tmpDs = singleUseDS("shutdownDatabase", "shutdown");
1:         JDBCDataSource.setBeanProperty(tmpDs, "databaseName", "");
1:         tmpDs.getConnection();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3df869c
/////////////////////////////////////////////////////////////////////////
1:     public Connection openConnection(String databaseName) throws SQLException {
1:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:         try {
1:             return ds.getConnection();
1:         } catch (SQLException e) {
1:             // Expected state for database not found.
1:             // For the client the generic 08004 is returned,
1:             // will just retry on that.
1:             String expectedState = 
1:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1: 
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDtabase property set.
1:             if (!expectedState.equals(e.getSQLState()))
1:                 throw e;
0:             DataSource tmpDs = singleUseDS("createDatabase", "create");
1:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:             return tmpDs.getConnection();
1:        }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Connection openConnection(String databaseName, String user, String password)
1:             throws SQLException {
1:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:         try {
1:             return ds.getConnection(user, password);
1:         } catch (SQLException e) {
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDatabase property set.
1:             if (!"XJ004".equals(e.getSQLState()))
1:                 throw e;
0:             DataSource tmpDs = singleUseDS("createDatabase", "create");
1:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:             return tmpDs.getConnection(user, password); 
1:        }
1:     }
1: 
commit:cef7d1e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.DataSourceConnector
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.HashMap;
1: 
1: import javax.sql.DataSource;
1: 
0: import junit.framework.Assert;
1: 
1: /**
1:  * Connection factory using javax.sql.DataSource.
1:  * Should work for an Derby data source, including JSR169 support.
1:  *
1:  */
1: public class DataSourceConnector implements Connector {
1:     
1:     private TestConfiguration config;
1:     /**
1:      * DataSource that maps to the database for the
1:      * configuration. The no-arg getConnection() method
1:      * maps to the default user and password for the
1:      * configuration.
1:      */
1:     private DataSource ds;
1: 
1:     public void setConfiguration(TestConfiguration config) {
1:         
1:         this.config = config;
1:         ds = JDBCDataSource.getDataSource(config, (HashMap) null);
1:     }
1: 
1:     public Connection openConnection() throws SQLException {
1:         try {
1:             return ds.getConnection();
1:         } catch (SQLException e) {
1:             // Expected state for database not found.
1:             // For the client the generic 08004 is returned,
1:             // will just retry on that.
1:             String expectedState = 
1:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1: 
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDtabase property set.
1:             if (!expectedState.equals(e.getSQLState()))
1:                 throw e;
0:             return singleUseDS("createDatabase", "create").getConnection(); 
1:        }
1:     }
1: 
1:     public Connection openConnection(String user, String password)
1:             throws SQLException {
1:         try {
1:             return ds.getConnection(user, password);
1:         } catch (SQLException e) {
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDatabase property set.
1:             if (!"XJ004".equals(e.getSQLState()))
1:                 throw e;
0:             return singleUseDS(
0:                     "createDatabase", "create").getConnection(user, password); 
1:        }
1:     }
1: 
1:     public void shutDatabase() throws SQLException {
0:         singleUseDS("shutdownDatabase", "shutdown").getConnection();     
1:     }
1: 
0:     public void shutEngine() throws SQLException {
0:         Assert.fail("shutdown engine not implemened");
1:     }
1:     
1:     /**
1:      * Get a connection from a single use DataSource configured
1:      * from the configuration but with the passed in property set.
1:      */
0:     private DataSource singleUseDS(String property, String value)
1:        throws SQLException {
0:         HashMap hm = JDBCDataSource.getDataSourceProperties(config);
0:         hm.put(property, value);
1:         DataSource sds = JDBCDataSource.getDataSource(config, hm);
1:         return sds;
1:     }
1: 
1: }
============================================================================