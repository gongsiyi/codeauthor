1:31cc815: /*
1:31cc815: 
1:31cc815:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9dee15
1:31cc815: 
1:31cc815:    Licensed to the Apache Software Foundation (ASF) under one or more
1:31cc815:    contributor license agreements.  See the NOTICE file distributed with
1:31cc815:    this work for additional information regarding copyright ownership.
1:31cc815:    The ASF licenses this file to You under the Apache License, Version 2.0
1:31cc815:    (the "License"); you may not use this file except in compliance with
1:31cc815:    the License.  You may obtain a copy of the License at
1:31cc815: 
1:31cc815:       http://www.apache.org/licenses/LICENSE-2.0
1:31cc815: 
1:31cc815:    Unless required by applicable law or agreed to in writing, software
1:31cc815:    distributed under the License is distributed on an "AS IS" BASIS,
1:31cc815:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31cc815:    See the License for the specific language governing permissions and
1:31cc815:    limitations under the License.
1:31cc815: 
1:31cc815:  */
1:31cc815: 
1:31cc815: package org.apache.derbyTesting.functionTests.harness;
1:31cc815: 
1:31cc815: import java.util.Vector;
1:31cc815: import java.util.StringTokenizer;
1:31cc815: import java.util.Properties;
1:31cc815: 
1:31cc815: 
1:31cc815: /**
1:31cc815:   <p>This class is for IBM's J9 jdk 1.5 subset - 2.4
1:31cc815: 
1:31cc815:  */
1:31cc815: public class j9dee15 extends jvm {
1:31cc815: 
1:31cc815: 	public String getName(){return "j9dee15";}
1:31cc815:     public j9dee15(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:31cc815:     long ss, long oss, long ms, long mx, String classpath, String prof,
1:3f5c48a:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:31cc815:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1:31cc815: 		verify,noverify,nojit,D);
1:31cc815:     }
1:31cc815:     // more typical use:
1:3f5c48a:     public j9dee15(String classpath, Vector<String> D) {
1:31cc815:         super(classpath,D);
1:31cc815:     }
1:31cc815:     // more typical use:
1:3f5c48a:     public j9dee15(long ms, long mx, String classpath, Vector<String> D) {
1:31cc815:         super(ms,mx,classpath,D);
1:31cc815:     }
1:31cc815:     // actual use
1:31cc815:     public j9dee15() {
1:31cc815: 	Properties sp = System.getProperties();
1:31cc815: 	String srvJvm = sp.getProperty("serverJvm");
1:31cc815: 	if ((srvJvm!=null) && (srvJvm.toUpperCase().startsWith("J9")))
1:31cc815: 	{
1:31cc815: 		String wshome = guessWSHome();
1:31cc815: 		// note, may have to switch to sep instead of hardcoding the slashes...
1:31cc815:         setJavaCmd(wshome+"/bin/j9");
1:31cc815: 	}
1:31cc815: 	else
1:31cc815: 		setJavaCmd("j9");
1:31cc815:     }
1:31cc815: 
1:31cc815:     // return the command line to invoke this VM.  The caller then adds
1:31cc815:     // the class and program arguments.
1:3f5c48a:     public Vector<String> getCommandLine()
1:31cc815:     {
1:31cc815: 
1:31cc815:         StringBuffer sb = new StringBuffer();
1:3f5c48a:         Vector<String> v = super.getCommandLine();
1:31cc815: 
1:31cc815:         appendOtherFlags(sb);
1:31cc815:         String s = sb.toString();
1:31cc815:         StringTokenizer st = new StringTokenizer(s);
1:31cc815:         while (st.hasMoreTokens())
1:31cc815:         {
1:31cc815:             v.addElement(st.nextToken());
1:31cc815:         }
1:31cc815:         return v;
1:31cc815: 	}
1:31cc815: 
1:31cc815: 	public void appendOtherFlags(StringBuffer sb)
1:31cc815: 	{
1:31cc815: 
1:31cc815: 	Properties sp = System.getProperties();
1:31cc815: 	String srvJvm = sp.getProperty("serverJvm");
1:31cc815: 	
1:31cc815:         if (noasyncgc) warn("j9dee15 does not support noasyncgc");
1:31cc815:         if (verbosegc) sb.append(" -verbose:gc");
1:31cc815:         if (noclassgc) warn("j9dee15 does not support noclassgc");
1:31cc815:         if (ss>=0) warn("j9dee15 does not support ss");
1:31cc815:         if (oss>=0) warn("j9dee15 does not support oss");
1:31cc815:         if (ms>=0) {
1:31cc815:           sb.append(" -Xss");
1:31cc815:           sb.append(ms);
1:31cc815: 		  //sb.append("k");
1:31cc815:         }
1:31cc815:         if (mx>=0) {
1:31cc815:           sb.append(" -Xmx");
1:31cc815:           sb.append(mx);
1:31cc815: 		  //sb.append("k");
1:31cc815:         }
1:31cc815:         if (classpath!=null) warn("j9dee15 does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
1:31cc815:         if (prof!=null) warn("j9dee15 does not support prof");
1:31cc815:         if (verify) sb.append(" -verify");
1:31cc815:         if (noverify) warn("j9dee15 does not support noverify");
1:31cc815:         if (nojit) sb.append(" -Xnojit");
1:31cc815:         if (D != null)
1:31cc815:           for (int i=0; i<D.size();i++) {
1:31cc815: 	        sb.append(" -D");
1:31cc815: 	        sb.append((String)(D.elementAt(i)));
1:31cc815:           }
1:31cc815:     }
1:31cc815: 	public String getDintro() { return "-D"; }
1:31cc815: 
1:31cc815: 
1:31cc815: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:     public j9dee15(String classpath, Vector<String> D) {
1:     public j9dee15(long ms, long mx, String classpath, Vector<String> D) {
/////////////////////////////////////////////////////////////////////////
1:     public Vector<String> getCommandLine()
1:         Vector<String> v = super.getCommandLine();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:31cc815
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9dee15
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Vector;
1: import java.util.StringTokenizer;
1: import java.util.Properties;
1: 
1: 
1: /**
1:   <p>This class is for IBM's J9 jdk 1.5 subset - 2.4
1: 
1:  */
1: public class j9dee15 extends jvm {
1: 
1: 	public String getName(){return "j9dee15";}
1:     public j9dee15(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:     long ss, long oss, long ms, long mx, String classpath, String prof,
0:     boolean verify, boolean noverify, boolean nojit, Vector D) {
1:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1: 		verify,noverify,nojit,D);
1:     }
1:     // more typical use:
0:     public j9dee15(String classpath, Vector D) {
1:         super(classpath,D);
1:     }
1:     // more typical use:
0:     public j9dee15(long ms, long mx, String classpath, Vector D) {
1:         super(ms,mx,classpath,D);
1:     }
1:     // actual use
1:     public j9dee15() {
1: 	Properties sp = System.getProperties();
1: 	String srvJvm = sp.getProperty("serverJvm");
1: 	if ((srvJvm!=null) && (srvJvm.toUpperCase().startsWith("J9")))
1: 	{
1: 		String wshome = guessWSHome();
1: 		// note, may have to switch to sep instead of hardcoding the slashes...
1:         setJavaCmd(wshome+"/bin/j9");
1: 	}
1: 	else
1: 		setJavaCmd("j9");
1:     }
1: 
1:     // return the command line to invoke this VM.  The caller then adds
1:     // the class and program arguments.
0:     public Vector getCommandLine() 
1:     {
1: 
1:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
1: 
1:         appendOtherFlags(sb);
1:         String s = sb.toString();
1:         StringTokenizer st = new StringTokenizer(s);
1:         while (st.hasMoreTokens())
1:         {
1:             v.addElement(st.nextToken());
1:         }
1:         return v;
1: 	}
1: 
1: 	public void appendOtherFlags(StringBuffer sb)
1: 	{
1: 
1: 	Properties sp = System.getProperties();
1: 	String srvJvm = sp.getProperty("serverJvm");
1: 	
1:         if (noasyncgc) warn("j9dee15 does not support noasyncgc");
1:         if (verbosegc) sb.append(" -verbose:gc");
1:         if (noclassgc) warn("j9dee15 does not support noclassgc");
1:         if (ss>=0) warn("j9dee15 does not support ss");
1:         if (oss>=0) warn("j9dee15 does not support oss");
1:         if (ms>=0) {
1:           sb.append(" -Xss");
1:           sb.append(ms);
1: 		  //sb.append("k");
1:         }
1:         if (mx>=0) {
1:           sb.append(" -Xmx");
1:           sb.append(mx);
1: 		  //sb.append("k");
1:         }
1:         if (classpath!=null) warn("j9dee15 does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
1:         if (prof!=null) warn("j9dee15 does not support prof");
1:         if (verify) sb.append(" -verify");
1:         if (noverify) warn("j9dee15 does not support noverify");
1:         if (nojit) sb.append(" -Xnojit");
1:         if (D != null)
1:           for (int i=0; i<D.size();i++) {
1: 	        sb.append(" -D");
1: 	        sb.append((String)(D.elementAt(i)));
1:           }
1:     }
1: 	public String getDintro() { return "-D"; }
1: 
1: 
1: }
============================================================================