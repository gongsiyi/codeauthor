1:69a192a: /*
1:69a192a: 
1:69a192a:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealRowCountStatistics
1:69a192a: 
1:69a192a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:69a192a:    contributor license agreements.  See the NOTICE file distributed with
1:69a192a:    this work for additional information regarding copyright ownership.
1:69a192a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:69a192a:    (the "License"); you may not use this file except in compliance with
1:69a192a:    the License.  You may obtain a copy of the License at
1:69a192a: 
1:69a192a:       http://www.apache.org/licenses/LICENSE-2.0
1:69a192a: 
1:69a192a:    Unless required by applicable law or agreed to in writing, software
1:69a192a:    distributed under the License is distributed on an "AS IS" BASIS,
1:69a192a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69a192a:    See the License for the specific language governing permissions and
1:69a192a:    limitations under the License.
1:69a192a: 
1:69a192a: */
1:69a192a: 
1:69a192a: package org.apache.derby.impl.sql.execute.rts;
1:69a192a: 
1:69a192a: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:69a192a: import org.apache.derby.iapi.services.i18n.MessageService;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:69a192a: import org.apache.derby.iapi.reference.SQLState;
1:69a192a: 
1:69a192a: import java.util.Vector;
1:69a192a: 
1:69a192a: public class RealRowCountStatistics
1:69a192a:     extends RealNoPutResultSetStatistics
1:69a192a: {
1:69a192a: 
1:69a192a:     /* Leave these fields public for object inspectors */
1:69a192a:     public ResultSetStatistics childResultSetStatistics;
1:69a192a: 
1:69a192a:     // CONSTRUCTORS
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Statistics for the RowCountResultSet
1:69a192a:      */
1:69a192a:     public  RealRowCountStatistics(
1:69a192a:         int numOpens,
1:69a192a:         int rowsSeen,
1:69a192a:         int rowsFiltered,
1:69a192a:         long constructorTime,
1:69a192a:         long openTime,
1:69a192a:         long nextTime,
1:69a192a:         long closeTime,
1:69a192a:         int resultSetNumber,
1:69a192a:         double optimizerEstimatedRowCount,
1:69a192a:         double optimizerEstimatedCost,
1:69a192a:         ResultSetStatistics childResultSetStatistics)
1:69a192a:     {
1:69a192a:         super(
1:69a192a:             numOpens,
1:69a192a:             rowsSeen,
1:69a192a:             rowsFiltered,
1:69a192a:             constructorTime,
1:69a192a:             openTime,
1:69a192a:             nextTime,
1:69a192a:             closeTime,
1:69a192a:             resultSetNumber,
1:69a192a:             optimizerEstimatedRowCount,
1:69a192a:             optimizerEstimatedCost
1:69a192a:             );
1:69a192a:         this.childResultSetStatistics = childResultSetStatistics;
1:69a192a:     }
1:69a192a: 
1:69a192a:     // ResultSetStatistics methods
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Return the statement execution plan as a String.
1:69a192a:      *
1:69a192a:      * @param depth     Indentation level.
1:69a192a:      *
1:69a192a:      * @return String   The statement execution plan as a String.
1:69a192a:      */
1:69a192a:     public String getStatementExecutionPlanText(int depth) {
1:69a192a: 
1:69a192a:         String subqueryInfo = "";
1:69a192a: 
1:69a192a:         initFormatInfo(depth);
1:69a192a: 
1:69a192a:         return
1:69a192a:             subqueryInfo +
1:69a192a:             indent + MessageService.getTextMessage(SQLState.RTS_RC_RS) +
1:69a192a:                 " (" +  resultSetNumber + "):" + "\n" +
1:69a192a:             indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
1:69a192a:                 " = " + numOpens + "\n" +
1:69a192a:             indent + MessageService.getTextMessage(SQLState.RTS_ROWS_SEEN) +
1:69a192a:                 " = " + rowsSeen + "\n" +
1:69a192a:             indent + MessageService.getTextMessage(
1:69a192a:                                                 SQLState.RTS_ROWS_FILTERED) +
1:69a192a:                 " = " + rowsFiltered + "\n" +
1:69a192a:             dumpTimeStats(indent, subIndent) + "\n" +
1:69a192a:             dumpEstimatedCosts(subIndent) + "\n" +
1:69a192a:             indent + MessageService.getTextMessage(SQLState.RTS_SOURCE_RS) +
1:69a192a:                 ":" + "\n" +
1:69a192a:             childResultSetStatistics.getStatementExecutionPlanText(sourceDepth);
1:69a192a:     }
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Return information on the scan nodes from the statement execution
1:69a192a:      * plan as a String.
1:69a192a:      *
1:69a192a:      * @param depth     Indentation level.
1:69a192a:      * @param tableName if not NULL then print information for this table only
1:69a192a:      *
1:69a192a:      * @return String   The information on the scan nodes from the
1:69a192a:      *                  statement execution plan as a String.
1:69a192a:      */
1:69a192a:     public String getScanStatisticsText(String tableName, int depth) {
1:69a192a:         return childResultSetStatistics.getScanStatisticsText(tableName, depth);
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a: 
1:69a192a:     // Class implementation
1:69a192a: 
1:69a192a:     public String toString() {
1:69a192a:         return getStatementExecutionPlanText(0);
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * @see RealBasicNoPutResultSetStatistics#getChildren
1:69a192a:      */
1:9d5bd0e:     public Vector<ResultSetStatistics> getChildren() {
1:9d5bd0e:         Vector<ResultSetStatistics> children = new Vector<ResultSetStatistics>();
1:69a192a:         children.addElement(childResultSetStatistics);
1:69a192a: 
1:69a192a:         return children;
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * @see RealBasicNoPutResultSetStatistics#getNodeName
1:69a192a:      */
1:69a192a:     public String getNodeName() {
1:69a192a:         return MessageService.getTextMessage(SQLState.RTS_RC);
1:69a192a:     }
1:48a9884: 
1:48a9884:     public void accept(XPLAINVisitor visitor) {
1:48a9884:         visitor.setNumberOfChildren(1);
1:48a9884:         visitor.visit(this);
1:48a9884:         childResultSetStatistics.accept(visitor);
1:48a9884:     }
1:48a9884:     public String getRSXplainType() { return XPLAINUtil.OP_ROW_COUNT; }
1:69a192a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:     public Vector<ResultSetStatistics> getChildren() {
1:         Vector<ResultSetStatistics> children = new Vector<ResultSetStatistics>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void accept(XPLAINVisitor visitor) {
1:         visitor.setNumberOfChildren(1);
1:         visitor.visit(this);
1:         childResultSetStatistics.accept(visitor);
1:     }
1:     public String getRSXplainType() { return XPLAINUtil.OP_ROW_COUNT; }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69a192a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealRowCountStatistics
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import java.util.Vector;
1: 
1: public class RealRowCountStatistics
1:     extends RealNoPutResultSetStatistics
1: {
1: 
1:     /* Leave these fields public for object inspectors */
1:     public ResultSetStatistics childResultSetStatistics;
1: 
1:     // CONSTRUCTORS
1: 
1:     /**
1:      * Statistics for the RowCountResultSet
1:      */
1:     public  RealRowCountStatistics(
1:         int numOpens,
1:         int rowsSeen,
1:         int rowsFiltered,
1:         long constructorTime,
1:         long openTime,
1:         long nextTime,
1:         long closeTime,
1:         int resultSetNumber,
1:         double optimizerEstimatedRowCount,
1:         double optimizerEstimatedCost,
1:         ResultSetStatistics childResultSetStatistics)
1:     {
1:         super(
1:             numOpens,
1:             rowsSeen,
1:             rowsFiltered,
1:             constructorTime,
1:             openTime,
1:             nextTime,
1:             closeTime,
1:             resultSetNumber,
1:             optimizerEstimatedRowCount,
1:             optimizerEstimatedCost
1:             );
1:         this.childResultSetStatistics = childResultSetStatistics;
1:     }
1: 
1:     // ResultSetStatistics methods
1: 
1:     /**
1:      * Return the statement execution plan as a String.
1:      *
1:      * @param depth     Indentation level.
1:      *
1:      * @return String   The statement execution plan as a String.
1:      */
1:     public String getStatementExecutionPlanText(int depth) {
1: 
1:         String subqueryInfo = "";
1: 
1:         initFormatInfo(depth);
1: 
1:         return
1:             subqueryInfo +
1:             indent + MessageService.getTextMessage(SQLState.RTS_RC_RS) +
1:                 " (" +  resultSetNumber + "):" + "\n" +
1:             indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
1:                 " = " + numOpens + "\n" +
1:             indent + MessageService.getTextMessage(SQLState.RTS_ROWS_SEEN) +
1:                 " = " + rowsSeen + "\n" +
1:             indent + MessageService.getTextMessage(
1:                                                 SQLState.RTS_ROWS_FILTERED) +
1:                 " = " + rowsFiltered + "\n" +
1:             dumpTimeStats(indent, subIndent) + "\n" +
1:             dumpEstimatedCosts(subIndent) + "\n" +
1:             indent + MessageService.getTextMessage(SQLState.RTS_SOURCE_RS) +
1:                 ":" + "\n" +
1:             childResultSetStatistics.getStatementExecutionPlanText(sourceDepth);
1:     }
1: 
1:     /**
1:      * Return information on the scan nodes from the statement execution
1:      * plan as a String.
1:      *
1:      * @param depth     Indentation level.
1:      * @param tableName if not NULL then print information for this table only
1:      *
1:      * @return String   The information on the scan nodes from the
1:      *                  statement execution plan as a String.
1:      */
1:     public String getScanStatisticsText(String tableName, int depth) {
1:         return childResultSetStatistics.getScanStatisticsText(tableName, depth);
1:     }
1: 
1: 
1: 
1:     // Class implementation
1: 
1:     public String toString() {
1:         return getStatementExecutionPlanText(0);
1:     }
1: 
1: 
1:     /**
1:      * @see RealBasicNoPutResultSetStatistics#getChildren
1:      */
0:     public Vector getChildren() {
0:         Vector children = new Vector();
1:         children.addElement(childResultSetStatistics);
1: 
1:         return children;
1:     }
1: 
1: 
1:     /**
1:      * @see RealBasicNoPutResultSetStatistics#getNodeName
1:      */
1:     public String getNodeName() {
1:         return MessageService.getTextMessage(SQLState.RTS_RC);
1:     }
1: }
============================================================================