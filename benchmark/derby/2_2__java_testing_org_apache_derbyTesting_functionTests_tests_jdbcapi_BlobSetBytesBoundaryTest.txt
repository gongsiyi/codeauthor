1:2d3a136: /*
2:2d3a136:  
1:2d3a136:    Derby - Class BlobSetBytesBoundaryTest
1:2d3a136:     
1:2d3a136:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d3a136:    contributor license agreements.  See the NOTICE file distributed with
1:2d3a136:    this work for additional information regarding copyright ownership.
1:2d3a136:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d3a136:    (the "License"); you may not use this file except in compliance with
1:2d3a136:    the License.  You may obtain a copy of the License at
1:2d3a136:  
1:2d3a136:       http://www.apache.org/licenses/LICENSE-2.0
1:2d3a136:  
1:2d3a136:    Unless required by applicable law or agreed to in writing, software
1:2d3a136:    distributed under the License is distributed on an "AS IS" BASIS,
1:2d3a136:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2d3a136:    See the License for the specific language governing permissions and
1:2d3a136:    limitations under the License.
1:2d3a136:  
1:2d3a136:  */
1:2d3a136: 
1:2d3a136: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:2d3a136: 
1:2d3a136: import java.sql.Blob;
1:2d3a136: import java.sql.Connection;
1:2d3a136: import java.sql.PreparedStatement;
1:2d3a136: import java.sql.ResultSet;
1:2d3a136: import java.sql.SQLException;
1:2d3a136: import java.sql.Statement;
1:2d3a136: 
1:2d3a136: import junit.framework.Test;
1:2d3a136: 
1:2d3a136: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:2d3a136: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:2d3a136: import org.apache.derbyTesting.junit.TestConfiguration;
1:2d3a136: 
1:2d3a136: 
1:2d3a136: /**
1:2d3a136:  * Boundary tests for Blob.setBytes(). see DERBY-3898.
1:2d3a136:  *
1:2d3a136:  */
1:2d3a136: public class BlobSetBytesBoundaryTest extends BaseJDBCTestCase {
1:2d3a136: 
1:2d3a136:     private static final byte[] BOLB_CONTENT = "test".getBytes();;
1:2d3a136: 
1:2d3a136:     public BlobSetBytesBoundaryTest(String name) {
1:2d3a136:         super(name);
1:2d3a136:     }
1:2d3a136: 
1:2d3a136:     public static Test suite() {
1:2d3a136:         Test suite = TestConfiguration.defaultSuite(
1:2d3a136:                 BlobSetBytesBoundaryTest.class, false); 
1:2d3a136:         
1:2d3a136:         return new CleanDatabaseTestSetup(suite) {
1:2d3a136:             protected void decorateSQL(Statement stmt)
1:2d3a136:                     throws SQLException {
1:2d3a136:                     initializeBlobData(stmt);
1:2d3a136:             }
1:2d3a136:         };
1:2d3a136:     }
1:2d3a136:         
1:2d3a136:     public void testSetBytesWithTooLongLength() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(1, new byte[] {0x69}, 0, 2);
1:2d3a136:             fail("Wrong long length is not accepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ079", sqle);
1:2d3a136:         }
1:24400cd:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:     
1:2d3a136:     public void testSetBytesByBadLengthAndOffset() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136: 
1:2d3a136:         try {
1:2d3a136:             //length adding offset will be bigger than the length of the byte array.
1:2d3a136:             blob.setBytes(1, new byte[] {0x69, 0x4e, 0x47, 0x55}, 1, 4);
1:2d3a136:             fail("Wrong offset and length is not accepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ079", sqle);
1:2d3a136:         }
1:2d3a136: 
1:24400cd:         // Also check that we fail with the expected error if the sum of
1:24400cd:         // offset and length is greater than Integer.MAX_VALUE.
1:24400cd:         try {
1:24400cd:             blob.setBytes(1, new byte[100], 10, Integer.MAX_VALUE);
1:24400cd:             fail("setBytes() should fail when offset+length > bytes.length");
1:24400cd:         } catch (SQLException sqle) {
1:24400cd:             assertSQLState("XJ079", sqle);
1:24400cd:         }
1:24400cd: 
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:     
1:2d3a136:     public void testSetBytesWithZeroLength() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136:         
1:2d3a136:         int actualLength = blob.setBytes(1, new byte[] {0x69}, 0, 0);
1:2d3a136:         assertEquals("return zero for zero length", 0, actualLength);            
1:2d3a136:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:     
1:2d3a136:     public void testSetBytesWithNonPositiveLength() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136:         
1:2d3a136:         try{
1:2d3a136:             blob.setBytes(1, new byte[] {0x69}, 0, -1);
1:2d3a136:             fail("Nonpositive Length is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ071", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:         
1:2d3a136:     public void testSetBytesWithInvalidOffset() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(1, new byte[] {0xb}, -1, 1);
1:2d3a136:             fail("Invalid offset Length is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ078", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(1, new byte[] {0xb}, 2, 1);
1:2d3a136:             fail("Invalid offset Length is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ078", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(1, new byte[] {0xb, 0xe}, Integer.MAX_VALUE, 1);
1:2d3a136:             fail("Invalid offset Length is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ078", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:     
1:2d3a136:     public void testSetBytesWithEmptyBytes() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136:         
1:2d3a136:         assertEquals(0, blob.setBytes(1, new byte[0]));
1:2d3a136:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:     
1:2d3a136:     public void testSetBytesWithTooBigPos() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136: 
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(Integer.MAX_VALUE, new byte[] {0xf});
1:2d3a136:             fail("Too big position is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ076", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(BOLB_CONTENT.length + 2, new byte[] {0xf});
1:2d3a136:             fail("Too big position is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ076", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136:     
1:2d3a136:     public void testSetBytesWithNonpositivePos() throws SQLException {
1:2d3a136:         Statement stmt = getConnection().createStatement();
1:2d3a136:         ResultSet rs = stmt.executeQuery(
1:2d3a136:                 "select dBlob, length from BlobTable");
1:2d3a136:         rs.next();
1:2d3a136:         Blob blob = rs.getBlob(1);
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(0, new byte[] {0xf});
1:2d3a136:             fail("Nonpositive position is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ070", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         try {
1:2d3a136:             blob.setBytes(-1, new byte[] {0xf});
1:2d3a136:             fail("Nonpositive position is not sccepted!");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("XJ070", sqle);
1:2d3a136:         }
1:2d3a136:         
1:2d3a136:         stmt.close();
1:2d3a136:     }
1:2d3a136: 
1:2d3a136:     /**
1:2d3a136:      * Generates test data. 
1:2d3a136:      */
1:2d3a136:     private static void initializeBlobData(Statement stmt)
1:2d3a136:             throws SQLException {
1:2d3a136:         Connection con = stmt.getConnection();
1:2d3a136:         con.setAutoCommit(false);
1:2d3a136: 
1:2d3a136:         try {
1:2d3a136:             stmt.executeUpdate("drop table BlobTable");
1:2d3a136:         } catch (SQLException sqle) {
1:2d3a136:             assertSQLState("42Y55", sqle);
1:2d3a136:         }
1:2d3a136: 
1:2d3a136:         stmt.executeUpdate("create table BlobTable (dBlob Blob, length int)");
1:2d3a136: 
1:2d3a136:         PreparedStatement smallBlobInsert = con
1:2d3a136:                 .prepareStatement("insert into BlobTable values (?,?)");
1:2d3a136:         // Insert just one record.
1:2d3a136:         
1:2d3a136:         smallBlobInsert.setBytes(1, BOLB_CONTENT );
1:2d3a136:         smallBlobInsert.setInt(2, BOLB_CONTENT.length);
1:2d3a136:         smallBlobInsert.executeUpdate();
1:2d3a136: 
1:2d3a136:         con.commit();
1:2d3a136:     }
1:2d3a136: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:24400cd
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Also check that we fail with the expected error if the sum of
1:         // offset and length is greater than Integer.MAX_VALUE.
1:         try {
1:             blob.setBytes(1, new byte[100], 10, Integer.MAX_VALUE);
1:             fail("setBytes() should fail when offset+length > bytes.length");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ079", sqle);
1:         }
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:2d3a136
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class BlobSetBytesBoundaryTest
1:     
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Blob;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: /**
1:  * Boundary tests for Blob.setBytes(). see DERBY-3898.
1:  *
1:  */
1: public class BlobSetBytesBoundaryTest extends BaseJDBCTestCase {
1: 
1:     private static final byte[] BOLB_CONTENT = "test".getBytes();;
1: 
1:     public BlobSetBytesBoundaryTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         Test suite = TestConfiguration.defaultSuite(
1:                 BlobSetBytesBoundaryTest.class, false); 
1:         
1:         return new CleanDatabaseTestSetup(suite) {
1:             protected void decorateSQL(Statement stmt)
1:                     throws SQLException {
1:                     initializeBlobData(stmt);
1:             }
1:         };
1:     }
1:         
1:     public void testSetBytesWithTooLongLength() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         
1:         try {
1:             blob.setBytes(1, new byte[] {0x69}, 0, 2);
1:             fail("Wrong long length is not accepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ079", sqle);
1:         }
1:         
1:         stmt.close();
1:     }
1:     
1:     public void testSetBytesByBadLengthAndOffset() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1: 
1:         try {
1:             //length adding offset will be bigger than the length of the byte array.
1:             blob.setBytes(1, new byte[] {0x69, 0x4e, 0x47, 0x55}, 1, 4);
1:             fail("Wrong offset and length is not accepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ079", sqle);
1:         }
1:         
1:         stmt.close();
1:     }
1:     
1:     public void testSetBytesWithZeroLength() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         
1:         int actualLength = blob.setBytes(1, new byte[] {0x69}, 0, 0);
1:         assertEquals("return zero for zero length", 0, actualLength);            
1:         
1:         stmt.close();
1:     }
1:     
1:     public void testSetBytesWithNonPositiveLength() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         
1:         try{
1:             blob.setBytes(1, new byte[] {0x69}, 0, -1);
1:             fail("Nonpositive Length is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ071", sqle);
1:         }
1:         
1:         stmt.close();
1:     }
1:         
1:     public void testSetBytesWithInvalidOffset() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         
1:         try {
1:             blob.setBytes(1, new byte[] {0xb}, -1, 1);
1:             fail("Invalid offset Length is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ078", sqle);
1:         }
1:         
1:         try {
1:             blob.setBytes(1, new byte[] {0xb}, 2, 1);
1:             fail("Invalid offset Length is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ078", sqle);
1:         }
1:         
1:         try {
1:             blob.setBytes(1, new byte[] {0xb, 0xe}, Integer.MAX_VALUE, 1);
1:             fail("Invalid offset Length is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ078", sqle);
1:         }
1:         
1:         stmt.close();
1:     }
1:     
1:     public void testSetBytesWithEmptyBytes() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         
1:         assertEquals(0, blob.setBytes(1, new byte[0]));
1:         
1:         stmt.close();
1:     }
1:     
1:     public void testSetBytesWithTooBigPos() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1: 
1:         try {
1:             blob.setBytes(Integer.MAX_VALUE, new byte[] {0xf});
1:             fail("Too big position is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ076", sqle);
1:         }
1:         
1:         try {
1:             blob.setBytes(BOLB_CONTENT.length + 2, new byte[] {0xf});
1:             fail("Too big position is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ076", sqle);
1:         }
1:         
1:         stmt.close();
1:     }
1:     
1:     public void testSetBytesWithNonpositivePos() throws SQLException {
1:         Statement stmt = getConnection().createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, length from BlobTable");
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         
1:         try {
1:             blob.setBytes(0, new byte[] {0xf});
1:             fail("Nonpositive position is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ070", sqle);
1:         }
1:         
1:         try {
1:             blob.setBytes(-1, new byte[] {0xf});
1:             fail("Nonpositive position is not sccepted!");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ070", sqle);
1:         }
1:         
1:         stmt.close();
1:     }
1: 
1:     /**
1:      * Generates test data. 
1:      */
1:     private static void initializeBlobData(Statement stmt)
1:             throws SQLException {
1:         Connection con = stmt.getConnection();
1:         con.setAutoCommit(false);
1: 
1:         try {
1:             stmt.executeUpdate("drop table BlobTable");
1:         } catch (SQLException sqle) {
1:             assertSQLState("42Y55", sqle);
1:         }
1: 
1:         stmt.executeUpdate("create table BlobTable (dBlob Blob, length int)");
1: 
1:         PreparedStatement smallBlobInsert = con
1:                 .prepareStatement("insert into BlobTable values (?,?)");
1:         // Insert just one record.
1:         
1:         smallBlobInsert.setBytes(1, BOLB_CONTENT );
1:         smallBlobInsert.setInt(2, BOLB_CONTENT.length);
1:         smallBlobInsert.executeUpdate();
1: 
1:         con.commit();
1:     }
1: }
============================================================================