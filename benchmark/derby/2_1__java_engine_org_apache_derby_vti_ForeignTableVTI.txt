1:e081c85: /*
26:e081c85: 
1:e081c85:    Derby - Class org.apache.derby.vti.ForeignTableVTI
1:e081c85: 
1:e081c85:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e081c85:    contributor license agreements.  See the NOTICE file distributed with
1:e081c85:    this work for additional information regarding copyright ownership.
1:e081c85:    The ASF licenses this file to You under the Apache License, Version 2.0
1:e081c85:    (the "License"); you may not use this file except in compliance with
1:e081c85:    the License.  You may obtain a copy of the License at
1:e081c85: 
1:e081c85:       http://www.apache.org/licenses/LICENSE-2.0
1:e081c85: 
1:e081c85:    Unless required by applicable law or agreed to in writing, software
1:e081c85:    distributed under the License is distributed on an "AS IS" BASIS,
1:e081c85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e081c85:    See the License for the specific language governing permissions and
1:e081c85:    limitations under the License.
1:e081c85: 
1:e081c85:  */
1:e081c85: 
1:e081c85: package org.apache.derby.vti;
1:e081c85: 
1:e081c85: import java.io.InputStream;
1:e081c85: import java.io.Reader;
1:e081c85: import java.math.BigDecimal;
1:e081c85: import java.sql.Blob;
1:e081c85: import java.sql.Clob;
1:e081c85: import java.sql.Connection;
1:e081c85: import java.sql.Date;
1:e081c85: import java.sql.DatabaseMetaData;
1:e081c85: import java.sql.DriverManager;
1:e081c85: import java.sql.PreparedStatement;
1:e081c85: import java.sql.ResultSet;
1:e081c85: import java.sql.ResultSetMetaData;
1:e081c85: import java.sql.SQLException;
1:e081c85: import java.sql.Time;
1:e081c85: import java.sql.Timestamp;
1:e081c85: import java.sql.Types;
1:e081c85: import java.util.Calendar;
1:e081c85: import java.util.HashMap;
1:e081c85: import java.util.Map;
1:e081c85: 
1:80d6162: import org.apache.derby.iapi.services.io.ArrayUtil;
1:e081c85: import org.apache.derby.iapi.util.IdUtil;
1:e081c85: 
1:e081c85: /**
1:e081c85:  * <p>
1:e081c85:  * This class contains a table function which can be used to bulk-import data
1:e081c85:  * from a foreign database. Because the table function is a RestrictedVTI, it
1:e081c85:  * can also be used to periodically and efficiently integrate data streams from
1:e081c85:  * a foreign database.
1:e081c85:  * </p>
1:e081c85:  *
1:e081c85:  * <p>
1:e081c85:  * If you need to siphon data out of the foreign database on an ongoing basis, you
1:e081c85:  * can restrict the data you SELECT. Note that the local views are backed by
1:e081c85:  * RestrictedVTIs. That means that the actual query sent to the foreign database
1:e081c85:  * will only involve the columns you SELECT. In addition, the query will include the WHERE clause,
1:e081c85:  * provided that it is simple enough (see the javadoc for RestrictedVTI):
1:e081c85:  * </p>
1:e081c85:  *
1:e081c85:  * <p>
1:e081c85:  * The following script shows how to use this table function:
1:e081c85:  * </p>
1:e081c85:  *
1:e081c85:  * <pre>
1:e081c85:  * -- create a foreign database with a table in it
1:e081c85:  * connect 'jdbc:derby:memory:db;create=true;user=test_dbo;password=test_dbopassword';
1:e081c85:  * 
1:e081c85:  * call syscs_util.syscs_create_user( 'test_dbo', 'test_dbopassword' );
1:e081c85:  * 
1:e081c85:  * create table employee
1:e081c85:  * (
1:e081c85:  *     firstName   varchar( 50 ),
1:e081c85:  *     lastName    varchar( 50 ),
1:e081c85:  *     employeeID  int primary key
1:e081c85:  * );
1:e081c85:  * 
1:e081c85:  * insert into employee values ( 'Billy', 'Goatgruff', 1 );
1:e081c85:  * insert into employee values ( 'Mary', 'Hadalittlelamb', 2 );
1:e081c85:  * 
1:e081c85:  * connect 'jdbc:derby:memory:db;shutdown=true';
1:e081c85:  * 
1:e081c85:  * -- now create the database where we will do our work
1:e081c85:  * connect 'jdbc:derby:memory:db1;create=true';
1:e081c85:  * 
1:e081c85:  * -- register a table function with the shape of the foreign table
1:e081c85:  * create function employeeFunction
1:e081c85:  * (
1:e081c85:  *     schemaName  varchar( 32672 ),
1:e081c85:  *     tableName   varchar( 32672 ),
1:e081c85:  *     connectionURL        varchar( 32672 )
1:e081c85:  * )
1:e081c85:  * returns table
1:e081c85:  * (
1:e081c85:  *     firstName   varchar( 50 ),
1:e081c85:  *     lastName    varchar( 50 ),
1:e081c85:  *     employeeID  int    
1:e081c85:  * )
1:e081c85:  * language java parameter style derby_jdbc_result_set no sql
1:e081c85:  * external name 'org.apache.derby.vti.ForeignTableVTI.readForeignTable'
1:e081c85:  * ;
1:e081c85:  * 
1:e081c85:  * -- create a convenience view to factor out the function parameters
1:e081c85:  * create view foreignEmployee
1:e081c85:  * as select firstName, lastName, employeeID
1:e081c85:  * from table
1:e081c85:  * (
1:e081c85:  *     employeeFunction
1:e081c85:  *     (
1:e081c85:  *         'TEST_DBO',
1:e081c85:  *         'EMPLOYEE',
1:e081c85:  *         'jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword'
1:e081c85:  *     )
1:e081c85:  * ) s;
1:e081c85:  * 
1:e081c85:  * -- now select from the view as though it were a local table
1:e081c85:  * select * from foreignEmployee;
1:e081c85:  * select lastName from foreignEmployee where employeeID = 2;
1:e081c85:  * </pre>
1:e081c85:  */
1:10df8a5: public	class   ForeignTableVTI extends ForwardingVTI implements  RestrictedVTI
1:e081c85: {
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	CONSTANTS
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	STATE
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:bbc882f:     private static  HashMap<String,Connection> _connections = new HashMap<String,Connection>();
1:e081c85: 
1:e081c85:     private String  _foreignSchemaName;
1:e081c85:     private String  _foreignTableName;
1:10df8a5:     
1:e081c85:     private String  _connectionURL;
1:10df8a5:     private Connection  _foreignConnection;     // if null, we use _connectionURL to make a Connection
1:e081c85: 
1:e081c85:     private String[]    _columnNames;
1:e081c85:     private Restriction _restriction;
1:e081c85: 
1:e081c85:     // this maps Derby columns (0-based) to foreign column numbers (1-based) in
1:e081c85:     // the actual query
1:e081c85:     private int[]               _columnNumberMap;
1:e081c85:     private PreparedStatement   _foreignPreparedStatement;
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	CONSTRUCTOR
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Construct from the foreign schema and table name and a foreign connection.
1:10df8a5:      * </p>
1:10df8a5:      */
1:10df8a5:     public  ForeignTableVTI
1:10df8a5:         (
1:10df8a5:          String foreignSchemaName,
1:10df8a5:          String foreignTableName,
1:10df8a5:          Connection foreignConnection
1:10df8a5:          )
1:10df8a5:     {
1:10df8a5:         _foreignSchemaName = foreignSchemaName;
1:10df8a5:         _foreignTableName = foreignTableName;
1:10df8a5:         _foreignConnection = foreignConnection;
1:10df8a5:     }
1:10df8a5:     
1:e081c85:     protected  ForeignTableVTI
1:e081c85:         (
1:e081c85:          String foreignSchemaName,
1:e081c85:          String foreignTableName,
1:e081c85:          String connectionURL
1:e081c85:          )
1:e081c85:     {
1:e081c85:         _foreignSchemaName = foreignSchemaName;
1:e081c85:         _foreignTableName = foreignTableName;
1:e081c85:         _connectionURL = connectionURL;
1:e081c85:     }
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	TABLE FUNCTION
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     /**
1:e081c85:      * <p>
1:e081c85:      * Table function to read a table in a foreign database.
1:e081c85:      * </p>
1:e081c85:      *
1:e081c85:      * @param   foreignSchemaName   Case-sensitive name of foreign schema
1:e081c85:      * @param   foreignTableName    Case-sensitive name of foreign table
1:e081c85:      * @param   connectionURL       URL for connecting to foreign database via DriverManager.getConnection()
1:e081c85:      */
1:e081c85:     public  static  ForeignTableVTI readForeignTable
1:e081c85:         (
1:e081c85:          String foreignSchemaName,
1:e081c85:          String foreignTableName,
1:e081c85:          String connectionURL
1:e081c85:          )
1:e081c85:     {
1:e081c85:         return new ForeignTableVTI( foreignSchemaName, foreignTableName, connectionURL );
1:e081c85:     }
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:b412f10:     //	SUPPORT FUNCTIONS
1:b412f10:     //
1:b412f10:     ////////////////////////////////////////////////////////////////////////
1:b412f10: 
1:b412f10:     /**
1:b412f10:      * <p>
1:b412f10:      * Remove the cached connection to the foreign database. This method is called
1:b412f10:      * by ForeignDBViews.unloadTool().
1:b412f10:      * </p>
1:b412f10:      */
1:b412f10:     public  static  void    dropConnection( String connectionURL )
1:b412f10:     {
1:b412f10:         _connections.remove( connectionURL );
1:b412f10:     }
1:b412f10: 
1:b412f10:     /**
1:b412f10:      * <p>
1:b412f10:      * This function is useful for verifying that the connection to the foreign
1:b412f10:      * database was dropped when the foreignViews tool was unloaded.
1:b412f10:      * </p>
1:b412f10:      */
1:b412f10:     public  static  int countConnections()
1:b412f10:     {
1:b412f10:         return _connections.size();
1:b412f10:     }
1:b412f10: 
1:b412f10:     ////////////////////////////////////////////////////////////////////////
1:b412f10:     //
1:e081c85:     //	ResultSet BEHAVIOR
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     public  void    close() throws SQLException
1:e081c85:     {
1:e081c85:         if ( !isClosed() )
1:e081c85:         {
1:e081c85:             _foreignSchemaName = null;
1:e081c85:             _foreignTableName = null;
1:e081c85:             _connectionURL = null;
1:e081c85:             _columnNames = null;
1:e081c85:             _restriction = null;
1:e081c85:             _columnNumberMap = null;
1:e081c85: 
1:10df8a5:             if ( getWrappedResultSet() != null ) { getWrappedResultSet().close(); }
1:e081c85:             if ( _foreignPreparedStatement != null ) { _foreignPreparedStatement.close(); }
1:e081c85: 
1:10df8a5:             wrapResultSet( null );
1:e081c85:             _foreignPreparedStatement = null;
1:10df8a5:             _foreignConnection = null;
1:e081c85:         }
1:e081c85:     }
1:e081c85: 
1:e081c85:     public  boolean next()  throws SQLException
1:e081c85:     {
1:10df8a5:         if ( !isClosed() && (getWrappedResultSet() == null) )
1:e081c85:         {
1:e081c85:             _foreignPreparedStatement = prepareStatement
1:10df8a5:                 ( getForeignConnection( _connectionURL, _foreignConnection ), makeQuery() );
1:10df8a5:             wrapResultSet( _foreignPreparedStatement.executeQuery() );
1:e081c85:         }
1:e081c85: 
1:10df8a5:         return getWrappedResultSet().next();
1:e081c85:     }
1:e081c85: 
1:10df8a5:     public boolean isClosed() { return ( (_connectionURL == null) && (_foreignConnection == null) ); }
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	RestrictedVTI BEHAVIOR
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     public  void    initScan
1:e081c85:         ( String[] columnNames, Restriction restriction )
1:e081c85:         throws SQLException
1:e081c85:     {
1:80d6162:         _columnNames = ArrayUtil.copy( columnNames );
1:e081c85:         _restriction = restriction;
1:e081c85: 
1:e081c85:         int columnCount = _columnNames.length;
1:e081c85: 
1:e081c85:         _columnNumberMap = new int[ columnCount ];
1:e081c85:         int foreignColumnID = 1;
1:e081c85:         for ( int i = 0; i < columnCount; i++ )
1:e081c85:         {
1:80d6162:             if ( _columnNames[ i ] != null ) { _columnNumberMap[ i ] = foreignColumnID++; }
1:e081c85:         }
1:e081c85:     }
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	Connection MANAGEMENT
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     private static  Connection  getForeignConnection
1:10df8a5:         ( String connectionURL, Connection foreignConnection )
1:e081c85:         throws SQLException
1:e081c85:     {
1:10df8a5:         if ( foreignConnection != null ) { return foreignConnection; }
1:10df8a5:         
1:bbc882f:         Connection  conn = _connections.get( connectionURL );
1:e081c85: 
1:e081c85:         if ( conn == null )
1:e081c85:         {
1:e081c85:             conn = DriverManager.getConnection( connectionURL );
1:e081c85: 
1:e081c85:             if ( conn != null ) { _connections.put( connectionURL, conn ); }
1:e081c85:         }
1:e081c85: 
1:e081c85:         return conn;
1:e081c85:     }
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	QUERY FACTORY
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     /**
1:e081c85:      * <p>
1:e081c85:      * Build the query which will be sent to the foreign database.
1:e081c85:      * </p>
1:e081c85:      */
1:e081c85:     private String  makeQuery()
1:e081c85:     {
1:e081c85:         StringBuilder    buffer = new StringBuilder();
1:e081c85: 
1:e081c85:         buffer.append( "select " );
1:e081c85: 
1:e081c85:         int possibleCount = _columnNames.length;
1:e081c85:         int actualCount = 0;
1:e081c85:         for ( int i = 0; i < possibleCount; i++ )
1:e081c85:         {
1:e081c85:             String  rawName = _columnNames[ i ];
1:e081c85:             if ( rawName == null ) { continue; }
1:e081c85: 
1:e081c85:             if ( actualCount > 0 ) { buffer.append( ", " ); }
1:e081c85:             actualCount++;
1:e081c85:             
1:e081c85:             buffer.append( delimitedID( rawName ) );
1:e081c85:         }
1:e081c85: 
1:e081c85:         buffer.append( "\nfrom " );
1:e081c85:         buffer.append( delimitedID( _foreignSchemaName ) );
1:e081c85:         buffer.append( '.' );
1:e081c85:         buffer.append( delimitedID( _foreignTableName ) );
1:e081c85: 
1:e081c85:         if ( _restriction != null )
1:e081c85:         {
1:e081c85:             String  clause = _restriction.toSQL();
1:e081c85: 
1:e081c85:             if (clause != null)
1:e081c85:             {
1:e081c85:                 clause = clause.trim();
1:e081c85:                 if ( clause.length() != 0 )
1:e081c85:                 {
1:e081c85:                     buffer.append( "\nwhere " + clause );
1:e081c85:                 }
1:e081c85:             }
1:e081c85:         }
1:e081c85: 
1:e081c85:         return buffer.toString();
1:e081c85:     }
1:e081c85: 
1:e081c85:     private static  String  delimitedID( String text )  { return IdUtil.normalToDelimited( text ); }
1:e081c85: 
1:e081c85:     private static  PreparedStatement   prepareStatement
1:e081c85:         ( Connection conn, String text )
1:e081c85:         throws SQLException
1:e081c85:     {
1:e081c85:         return conn.prepareStatement( text );
1:e081c85:     }
1:e081c85: 
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85:     //
1:e081c85:     //	UTILITY METHODS
1:e081c85:     //
1:e081c85:     ////////////////////////////////////////////////////////////////////////
1:e081c85: 
1:e081c85:     /**
1:e081c85:      * <p>
1:e081c85:      * Map a 1-based Derby column number to a 1-based column number in the
1:e081c85:      * foreign query.
1:e081c85:      * </p>
1:e081c85:      */
1:10df8a5:     @Override
1:10df8a5:     protected int mapColumnNumber( int derbyNumber )
1:e081c85:     {
1:e081c85:         return _columnNumberMap[ derbyNumber - 1 ];
1:e081c85:     }
1:e081c85: }
1:e081c85: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:10df8a5
/////////////////////////////////////////////////////////////////////////
1: public	class   ForeignTableVTI extends ForwardingVTI implements  RestrictedVTI
/////////////////////////////////////////////////////////////////////////
1:     
1:     private Connection  _foreignConnection;     // if null, we use _connectionURL to make a Connection
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Construct from the foreign schema and table name and a foreign connection.
1:      * </p>
1:      */
1:     public  ForeignTableVTI
1:         (
1:          String foreignSchemaName,
1:          String foreignTableName,
1:          Connection foreignConnection
1:          )
1:     {
1:         _foreignSchemaName = foreignSchemaName;
1:         _foreignTableName = foreignTableName;
1:         _foreignConnection = foreignConnection;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:             if ( getWrappedResultSet() != null ) { getWrappedResultSet().close(); }
1:             wrapResultSet( null );
1:             _foreignConnection = null;
1:         if ( !isClosed() && (getWrappedResultSet() == null) )
1:                 ( getForeignConnection( _connectionURL, _foreignConnection ), makeQuery() );
1:             wrapResultSet( _foreignPreparedStatement.executeQuery() );
1:         return getWrappedResultSet().next();
1:     public boolean isClosed() { return ( (_connectionURL == null) && (_foreignConnection == null) ); }
/////////////////////////////////////////////////////////////////////////
1:         ( String connectionURL, Connection foreignConnection )
1:         if ( foreignConnection != null ) { return foreignConnection; }
1:         
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected int mapColumnNumber( int derbyNumber )
commit:b412f10
/////////////////////////////////////////////////////////////////////////
1:     //	SUPPORT FUNCTIONS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Remove the cached connection to the foreign database. This method is called
1:      * by ForeignDBViews.unloadTool().
1:      * </p>
1:      */
1:     public  static  void    dropConnection( String connectionURL )
1:     {
1:         _connections.remove( connectionURL );
1:     }
1: 
1:     /**
1:      * <p>
1:      * This function is useful for verifying that the connection to the foreign
1:      * database was dropped when the foreignViews tool was unloaded.
1:      * </p>
1:      */
1:     public  static  int countConnections()
1:     {
1:         return _connections.size();
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
commit:ab098e2
/////////////////////////////////////////////////////////////////////////
0: @SuppressWarnings("deprecation")
commit:bbc882f
/////////////////////////////////////////////////////////////////////////
1:     private static  HashMap<String,Connection> _connections = new HashMap<String,Connection>();
/////////////////////////////////////////////////////////////////////////
1:         Connection  conn = _connections.get( connectionURL );
commit:80d6162
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1:         _columnNames = ArrayUtil.copy( columnNames );
/////////////////////////////////////////////////////////////////////////
1:             if ( _columnNames[ i ] != null ) { _columnNumberMap[ i ] = foreignColumnID++; }
commit:e081c85
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.vti.ForeignTableVTI
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.math.BigDecimal;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Connection;
1: import java.sql.Date;
1: import java.sql.DatabaseMetaData;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.sql.Types;
1: import java.util.Calendar;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.derby.iapi.util.IdUtil;
1: 
1: /**
1:  * <p>
1:  * This class contains a table function which can be used to bulk-import data
1:  * from a foreign database. Because the table function is a RestrictedVTI, it
1:  * can also be used to periodically and efficiently integrate data streams from
1:  * a foreign database.
1:  * </p>
1:  *
1:  * <p>
1:  * If you need to siphon data out of the foreign database on an ongoing basis, you
1:  * can restrict the data you SELECT. Note that the local views are backed by
1:  * RestrictedVTIs. That means that the actual query sent to the foreign database
1:  * will only involve the columns you SELECT. In addition, the query will include the WHERE clause,
1:  * provided that it is simple enough (see the javadoc for RestrictedVTI):
1:  * </p>
1:  *
1:  * <p>
1:  * The following script shows how to use this table function:
1:  * </p>
1:  *
1:  * <pre>
1:  * -- create a foreign database with a table in it
1:  * connect 'jdbc:derby:memory:db;create=true;user=test_dbo;password=test_dbopassword';
1:  * 
1:  * call syscs_util.syscs_create_user( 'test_dbo', 'test_dbopassword' );
1:  * 
1:  * create table employee
1:  * (
1:  *     firstName   varchar( 50 ),
1:  *     lastName    varchar( 50 ),
1:  *     employeeID  int primary key
1:  * );
1:  * 
1:  * insert into employee values ( 'Billy', 'Goatgruff', 1 );
1:  * insert into employee values ( 'Mary', 'Hadalittlelamb', 2 );
1:  * 
1:  * connect 'jdbc:derby:memory:db;shutdown=true';
1:  * 
1:  * -- now create the database where we will do our work
1:  * connect 'jdbc:derby:memory:db1;create=true';
1:  * 
1:  * -- register a table function with the shape of the foreign table
1:  * create function employeeFunction
1:  * (
1:  *     schemaName  varchar( 32672 ),
1:  *     tableName   varchar( 32672 ),
1:  *     connectionURL        varchar( 32672 )
1:  * )
1:  * returns table
1:  * (
1:  *     firstName   varchar( 50 ),
1:  *     lastName    varchar( 50 ),
1:  *     employeeID  int    
1:  * )
1:  * language java parameter style derby_jdbc_result_set no sql
1:  * external name 'org.apache.derby.vti.ForeignTableVTI.readForeignTable'
1:  * ;
1:  * 
1:  * -- create a convenience view to factor out the function parameters
1:  * create view foreignEmployee
1:  * as select firstName, lastName, employeeID
1:  * from table
1:  * (
1:  *     employeeFunction
1:  *     (
1:  *         'TEST_DBO',
1:  *         'EMPLOYEE',
1:  *         'jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword'
1:  *     )
1:  * ) s;
1:  * 
1:  * -- now select from the view as though it were a local table
1:  * select * from foreignEmployee;
1:  * select lastName from foreignEmployee where employeeID = 2;
1:  * </pre>
1:  */
0: public	class   ForeignTableVTI extends VTITemplate implements  RestrictedVTI
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
0:     private static  HashMap _connections = new HashMap();
1: 
1:     private String  _foreignSchemaName;
1:     private String  _foreignTableName;
1:     private String  _connectionURL;
1: 
1:     private String[]    _columnNames;
1:     private Restriction _restriction;
1: 
1:     // this maps Derby columns (0-based) to foreign column numbers (1-based) in
1:     // the actual query
1:     private int[]               _columnNumberMap;
1:     private PreparedStatement   _foreignPreparedStatement;
0:     private ResultSet           _foreignResultSet;
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     protected  ForeignTableVTI
1:         (
1:          String foreignSchemaName,
1:          String foreignTableName,
1:          String connectionURL
1:          )
1:     {
1:         _foreignSchemaName = foreignSchemaName;
1:         _foreignTableName = foreignTableName;
1:         _connectionURL = connectionURL;
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	TABLE FUNCTION
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Table function to read a table in a foreign database.
1:      * </p>
1:      *
1:      * @param   foreignSchemaName   Case-sensitive name of foreign schema
1:      * @param   foreignTableName    Case-sensitive name of foreign table
1:      * @param   connectionURL       URL for connecting to foreign database via DriverManager.getConnection()
1:      */
1:     public  static  ForeignTableVTI readForeignTable
1:         (
1:          String foreignSchemaName,
1:          String foreignTableName,
1:          String connectionURL
1:          )
1:     {
1:         return new ForeignTableVTI( foreignSchemaName, foreignTableName, connectionURL );
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	ResultSet BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    close() throws SQLException
1:     {
1:         if ( !isClosed() )
1:         {
1:             _foreignSchemaName = null;
1:             _foreignTableName = null;
1:             _connectionURL = null;
1:             _columnNames = null;
1:             _restriction = null;
1:             _columnNumberMap = null;
1: 
0:             if ( _foreignResultSet != null ) { _foreignResultSet.close(); }
1:             if ( _foreignPreparedStatement != null ) { _foreignPreparedStatement.close(); }
1: 
0:             _foreignResultSet = null;
1:             _foreignPreparedStatement = null;
1:         }
1:     }
1: 
1:     public  boolean next()  throws SQLException
1:     {
0:         if ( !isClosed() && (_foreignResultSet == null) )
1:         {
1:             _foreignPreparedStatement = prepareStatement
0:                 ( getForeignConnection( _connectionURL ), makeQuery() );
0:             _foreignResultSet = _foreignPreparedStatement.executeQuery();
1:         }
1: 
0:         return _foreignResultSet.next();
1:     }
1: 
0:     public boolean isClosed() { return (_connectionURL == null); }
1: 
0:     public  boolean wasNull()   throws SQLException
0:     { return _foreignResultSet.wasNull(); }
1: 
0:     public  ResultSetMetaData   getMetaData()   throws SQLException
0:     { return _foreignResultSet.getMetaData(); }
1: 
0:     public  InputStream 	getAsciiStream(int i) throws SQLException
0:     { return _foreignResultSet.getAsciiStream( mapColumnNumber( i ) ); }
1:     
0:     public  BigDecimal 	getBigDecimal(int i) throws SQLException
0:     { return _foreignResultSet.getBigDecimal( mapColumnNumber( i ) ); }
1:     
0:     public  BigDecimal 	getBigDecimal(int i, int scale) throws SQLException
0:     { return _foreignResultSet.getBigDecimal( mapColumnNumber( i ), scale ); }
1:     
0:     public  InputStream 	getBinaryStream(int i)  throws SQLException
0:     { return _foreignResultSet.getBinaryStream( mapColumnNumber( i ) ); }
1:     
0:     public  Blob 	getBlob(int i)  throws SQLException
0:     { return _foreignResultSet.getBlob( mapColumnNumber( i ) ); }
1:     
0:     public  boolean 	getBoolean(int i) throws SQLException
0:     { return _foreignResultSet.getBoolean( mapColumnNumber( i ) ); }
1:     
0:     public  byte 	getByte(int i)    throws SQLException
0:     { return _foreignResultSet.getByte( mapColumnNumber( i ) ); }
1:     
0:     public  byte[] 	getBytes(int i) throws SQLException
0:     { return _foreignResultSet.getBytes( mapColumnNumber( i ) ); }
1:     
0:     public  Reader 	getCharacterStream(int i) throws SQLException
0:     { return _foreignResultSet.getCharacterStream( mapColumnNumber( i ) ); }
1: 
0:     public  Clob 	getClob(int i)  throws SQLException
0:     { return _foreignResultSet.getClob( mapColumnNumber( i ) ); }
1: 
0:     public  Date 	getDate(int i)  throws SQLException
0:     { return _foreignResultSet.getDate( mapColumnNumber( i ) ); }
1: 
0:     public  Date 	getDate(int i, Calendar cal)    throws SQLException
0:     { return _foreignResultSet.getDate( mapColumnNumber( i ), cal ); }
1: 
0:     public  double 	getDouble(int i)    throws SQLException
0:     { return _foreignResultSet.getDouble( mapColumnNumber( i ) ); }
1: 
0:     public  float 	getFloat(int i) throws SQLException
0:     { return _foreignResultSet.getFloat( mapColumnNumber( i ) ); }
1: 
0:     public  int 	getInt(int i)   throws SQLException
0:     { return _foreignResultSet.getInt( mapColumnNumber( i ) ); }
1: 
0:     public  long 	getLong(int i)  throws SQLException
0:     { return _foreignResultSet.getLong( mapColumnNumber( i ) ); }
1: 
0:     public  Object 	getObject(int i)    throws SQLException
0:     { return _foreignResultSet.getObject( mapColumnNumber( i ) ); }
1: 
0:     public  short 	getShort(int i) throws SQLException
0:     { return _foreignResultSet.getShort( mapColumnNumber( i ) ); }
1: 
0:     public  String 	getString(int i)    throws SQLException
0:     { return _foreignResultSet.getString( mapColumnNumber( i ) ); }
1: 
0:     public  Time 	getTime(int i)  throws SQLException
0:     { return _foreignResultSet.getTime( mapColumnNumber( i ) ); }
1: 
0:     public  Time 	getTime(int i, Calendar cal)    throws SQLException
0:     { return _foreignResultSet.getTime( mapColumnNumber( i ), cal ); }
1: 
0:     public  Timestamp 	getTimestamp(int i) throws SQLException
0:     { return _foreignResultSet.getTimestamp( mapColumnNumber( i ) ); }
1: 
0:     public  Timestamp 	getTimestamp(int i, Calendar cal)   throws SQLException
0:     { return _foreignResultSet.getTimestamp( mapColumnNumber( i ), cal ); }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	RestrictedVTI BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    initScan
1:         ( String[] columnNames, Restriction restriction )
1:         throws SQLException
1:     {
0:         _columnNames = columnNames;
1:         _restriction = restriction;
1: 
1:         int columnCount = _columnNames.length;
1: 
1:         _columnNumberMap = new int[ columnCount ];
1:         int foreignColumnID = 1;
1:         for ( int i = 0; i < columnCount; i++ )
1:         {
0:             if ( columnNames[ i ] != null ) { _columnNumberMap[ i ] = foreignColumnID++; }
1:         }
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	Connection MANAGEMENT
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private static  Connection  getForeignConnection
0:         ( String connectionURL )
1:         throws SQLException
1:     {
0:         Connection  conn = (Connection) _connections.get( connectionURL );
1: 
1:         if ( conn == null )
1:         {
1:             conn = DriverManager.getConnection( connectionURL );
1: 
1:             if ( conn != null ) { _connections.put( connectionURL, conn ); }
1:         }
1: 
1:         return conn;
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	QUERY FACTORY
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Build the query which will be sent to the foreign database.
1:      * </p>
1:      */
1:     private String  makeQuery()
1:     {
1:         StringBuilder    buffer = new StringBuilder();
1: 
1:         buffer.append( "select " );
1: 
1:         int possibleCount = _columnNames.length;
1:         int actualCount = 0;
1:         for ( int i = 0; i < possibleCount; i++ )
1:         {
1:             String  rawName = _columnNames[ i ];
1:             if ( rawName == null ) { continue; }
1: 
1:             if ( actualCount > 0 ) { buffer.append( ", " ); }
1:             actualCount++;
1:             
1:             buffer.append( delimitedID( rawName ) );
1:         }
1: 
1:         buffer.append( "\nfrom " );
1:         buffer.append( delimitedID( _foreignSchemaName ) );
1:         buffer.append( '.' );
1:         buffer.append( delimitedID( _foreignTableName ) );
1: 
1:         if ( _restriction != null )
1:         {
1:             String  clause = _restriction.toSQL();
1: 
1:             if (clause != null)
1:             {
1:                 clause = clause.trim();
1:                 if ( clause.length() != 0 )
1:                 {
1:                     buffer.append( "\nwhere " + clause );
1:                 }
1:             }
1:         }
1: 
1:         return buffer.toString();
1:     }
1: 
1:     private static  String  delimitedID( String text )  { return IdUtil.normalToDelimited( text ); }
1: 
1:     private static  PreparedStatement   prepareStatement
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         return conn.prepareStatement( text );
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	UTILITY METHODS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Map a 1-based Derby column number to a 1-based column number in the
1:      * foreign query.
1:      * </p>
1:      */
0:     private int mapColumnNumber( int derbyNumber )
1:     {
1:         return _columnNumberMap[ derbyNumber - 1 ];
1:     }
1: }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f9a152b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Deprecated
============================================================================