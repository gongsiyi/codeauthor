1:eac0369: /*
1:cd3749b: 
1:cd3749b:    Derby - Class org.apache.derbyBuild.splitmessages
1:cd3749b: 
1:de243e0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:de243e0:    contributor license agreements.  See the NOTICE file distributed with
1:de243e0:    this work for additional information regarding copyright ownership.
1:de243e0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:de243e0:    (the "License"); you may not use this file except in compliance with
1:de243e0:    the License.  You may obtain a copy of the License at
1:cd3749b: 
1:cd3749b:       http://www.apache.org/licenses/LICENSE-2.0
1:cd3749b: 
1:cd3749b:    Unless required by applicable law or agreed to in writing, software
1:cd3749b:    distributed under the License is distributed on an "AS IS" BASIS,
1:cd3749b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd3749b:    See the License for the specific language governing permissions and
1:cd3749b:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derbyBuild;
1:eac0369: 
1:eac0369: import java.io.*;
1:eac0369: import java.util.*;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:4ac6a1c: import org.apache.derby.shared.common.reference.SQLState;
1:eac0369: 
1:50d75f3: public class splitmessages {
2:eac0369: 	/**
1:eac0369: 		arg[0] is the destination directory
1:eac0369: 		arg[1] is the source file.
1:eac0369: 	*/
1:daecc5d:     
1:daecc5d:     /** 
1:daecc5d:      *  This is the list of message ids that are shared between
1:daecc5d:      *  the network client and the engine.  This is used to generate
1:daecc5d:      *  a set of 'shared' messages.  This avoids us having to maintain
1:daecc5d:      *  two separate message files.
1:daecc5d:      *
1:daecc5d:      *  NOTE: We already assume all message ids starting with XJ are shared.
1:daecc5d:      *  This covers 90% of the cases.  Only add ids here if you have a 
1:daecc5d:      *  message id that is not in the XJ class.
1:daecc5d:      */
1:38b9499:     private static TreeSet<String> clientMessageIds = new TreeSet<String>();
1:daecc5d:     
1:daecc5d:     /**
1:2e35afd:      * Initialize the set of message ids that the network client will use.  
1:2e35afd:      * <p>
1:2e35afd:      * Note that all message ids that start with "XJ" are automatically added, 
1:2e35afd:      * these are just for message ids that have a different prefix.
1:daecc5d:      */
1:9d78190:     static
1:daecc5d:     {
1:4ac6a1c:         // Add message ids that don't start with XJ here
1:4ac6a1c:         clientMessageIds.add(SQLState.NO_CURRENT_CONNECTION);
1:59d98b8:         clientMessageIds.add(SQLState.NOT_IMPLEMENTED);
1:e4ba4e1:         clientMessageIds.add(SQLState.CANNOT_CLOSE_ACTIVE_CONNECTION);
1:a53b758:         clientMessageIds.add(SQLState.XACT_SAVEPOINT_RELEASE_ROLLBACK_FAIL);
1:3d650b1:         clientMessageIds.add(SQLState.UNSUPPORTED_ENCODING);
1:3d650b1:         clientMessageIds.add(SQLState.LANG_FORMAT_EXCEPTION);
1:3d650b1:         clientMessageIds.add(SQLState.LANG_DATA_TYPE_GET_MISMATCH);
1:3d650b1:         clientMessageIds.add(SQLState.LANG_DATA_TYPE_SET_MISMATCH);
1:3d650b1:         clientMessageIds.add(SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:3d650b1:         clientMessageIds.add(SQLState.CHARACTER_CONVERTER_NOT_AVAILABLE);
1:3d650b1:         clientMessageIds.add(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE);
1:ed225ae:         clientMessageIds.add(SQLState.LANG_STATEMENT_CLOSED_NO_REASON);
1:ed225ae:         clientMessageIds.add(SQLState.LANG_INVALID_COLUMN_POSITION);
1:ed225ae:         clientMessageIds.add(SQLState.INVALID_COLUMN_NAME);
1:1128268:         clientMessageIds.add(SQLState.HOLDABLE_RESULT_SET_NOT_AVAILABLE);
1:1d87ff4:         clientMessageIds.add(SQLState.LANG_NULL_INTO_NON_NULL);
1:2e35afd:         clientMessageIds.add(SQLState.JDBC_METHOD_NOT_IMPLEMENTED);
1:178ae9d:         clientMessageIds.add(SQLState.JDBC_METHOD_NOT_SUPPORTED_BY_SERVER);
1:2e35afd:         clientMessageIds.add(SQLState.DRDA_NO_AUTOCOMMIT_UNDER_XA);
1:2e35afd:         clientMessageIds.add(SQLState.DRDA_INVALID_XA_STATE_ON_COMMIT_OR_ROLLBACK);
1:2e35afd:         clientMessageIds.add(SQLState.HOLDABLE_RESULT_SET_NOT_AVAILABLE);
1:2e35afd:         clientMessageIds.add(SQLState.INVALID_RESULTSET_TYPE);
1:2e35afd:         clientMessageIds.add(SQLState.SCROLL_SENSITIVE_NOT_SUPPORTED);
1:2e35afd:         clientMessageIds.add(SQLState.UNABLE_TO_OBTAIN_MESSAGE_TEXT_FROM_SERVER );
1:2e35afd:         clientMessageIds.add(SQLState.NUMBER_OF_ROWS_TOO_LARGE_FOR_INT);
1:2e35afd:         clientMessageIds.add(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION);
1:2e35afd:         clientMessageIds.add(SQLState.LOB_METHOD_ON_CLOSED_CONNECTION);
1:4777f5c:         clientMessageIds.add(SQLState.QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET);
1:d8383bd:         clientMessageIds.add(SQLState.MULTIPLE_RESULTS_ON_EXECUTE_QUERY);
1:d8383bd:         clientMessageIds.add(SQLState.USE_EXECUTE_UPDATE_WITH_NO_RESULTS);
1:5d2e2bd:         clientMessageIds.add(SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
1:5d2e2bd:         clientMessageIds.add(SQLState.LANG_CANT_INVALIDATE_OPEN_RESULT_SET);
1:5d2e2bd:         clientMessageIds.add(SQLState.YEAR_EXCEEDS_MAXIMUM);
1:1d87ff4:         clientMessageIds.add(SQLState.LANG_INVALID_PARAM_POSITION);
1:1d87ff4:         clientMessageIds.add(SQLState.LANG_MISSING_PARMS);
1:1d87ff4:         clientMessageIds.add(SQLState.LANG_NO_CURRENT_ROW);
1:1d87ff4:         clientMessageIds.add(SQLState.LANG_STREAM_RETRIEVED_ALREADY);
1:5d2e2bd:         clientMessageIds.add(SQLState.CONNECTION_FAILED_ON_RESET);
1:5d2e2bd:         clientMessageIds.add(SQLState.DECIMAL_TOO_MANY_DIGITS);
1:5d2e2bd:         clientMessageIds.add(SQLState.NUMERIC_OVERFLOW);
1:5d2e2bd:         clientMessageIds.add(SQLState.UNSUPPORTED_HOLDABILITY_PROPERTY);
1:5d2e2bd:         clientMessageIds.add(SQLState.CANCEL_NOT_SUPPORTED_BY_SERVER);
1:5d2e2bd:         clientMessageIds.add(SQLState.LANG_INVALID_CALL_STATEMENT);
1:5d2e2bd:         clientMessageIds.add(SQLState.LANG_INVALID_SQL_IN_BATCH);
1:c9687fc:         clientMessageIds.add(SQLState.LANG_RESULT_SET_NOT_OPEN);
1:6e08d50:         clientMessageIds.add(SQLState.CANT_CONVERT_UNICODE_TO_EBCDIC);
1:1b39163:         clientMessageIds.add(SQLState.SECMECH_NOT_SUPPORTED);
1:1b39163:         clientMessageIds.add(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED);
1:054fa3a:         clientMessageIds.add(SQLState.DATA_TYPE_NOT_SUPPORTED);
1:2dcbe06:         clientMessageIds.add(SQLState.JDBC_DRIVER_REGISTER);
1:4777f5c:         clientMessageIds.add(SQLState.NO_CURRENT_ROW);
1:f271471:         clientMessageIds.add(SQLState.LANG_IDENTIFIER_TOO_LONG);
1:f271471:         clientMessageIds.add(SQLState.DRDA_CURSOR_NOT_OPEN);
1:348f4cd:         clientMessageIds.add(SQLState.PROPERTY_UNSUPPORTED_CHANGE);
1:348f4cd:         clientMessageIds.add(SQLState.NET_INVALID_JDBC_TYPE_FOR_PARAM);
1:348f4cd:         clientMessageIds.add(SQLState.UNRECOGNIZED_JAVA_SQL_TYPE);
1:348f4cd:         clientMessageIds.add(SQLState.NET_UNRECOGNIZED_JDBC_TYPE);
1:348f4cd:         clientMessageIds.add(SQLState.NET_SQLCDTA_INVALID_FOR_RDBCOLID);
1:348f4cd:         clientMessageIds.add(SQLState.NET_SQLCDTA_INVALID_FOR_PKGID);
1:348f4cd:         clientMessageIds.add(SQLState.NET_PGNAMCSN_INVALID_AT_SQLAM);
1:348f4cd:         clientMessageIds.add(SQLState.NET_VCM_VCS_LENGTHS_INVALID);
1:6a925a3:         clientMessageIds.add(SQLState.LANG_STRING_TOO_LONG);
1:aadfc18:         clientMessageIds.add(SQLState.INVALID_COLUMN_ARRAY_LENGTH);
1:f9f8329:         clientMessageIds.add(SQLState.PROPERTY_INVALID_VALUE);
1:1e5b2aa:         clientMessageIds.add(SQLState.LANG_SUBSTR_START_ADDING_LEN_OUT_OF_RANGE);
1:65d5b52:         clientMessageIds.add(SQLState.LANG_CURSOR_NOT_FOUND);
1:9d78190:     };
1:eac0369: 
1:eac0369: 	public static void main(String[] args) throws Exception {
1:eac0369: 
1:eac0369: 		Properties p = new Properties();
1:eac0369: 
1:eac0369: 		File dir = new File(args[0]);
1:eac0369: 
1:eac0369: 		File source = new File(args[1]);
1:daecc5d:         
1:eac0369: 		String s = source.getName();
1:eac0369: 		// loose the suffix
1:eac0369: 		s = s.substring(0, s.lastIndexOf('.'));
1:eac0369: 		// now get the locale
1:eac0369: 		String locale = s.substring(s.indexOf('_'));
1:eac0369: 
1:eac0369: 		boolean addBase = "_en".equals(locale);
1:eac0369: 
1:eac0369: 
1:eac0369: 		InputStream is = new BufferedInputStream(new FileInputStream(source), 64 * 1024);
1:eac0369: 
1:eac0369: 		p.load(is);
1:eac0369: 		is.close();
1:daecc5d: 
1:eac0369:         
1:eac0369: 		Properties[] c = new Properties[50];
1:eac0369: 		for (int i = 0; i < 50; i++) {
1:eac0369: 			c[i] = new Properties();
1:daecc5d: 		}
1:daecc5d:         
1:daecc5d:         Properties clientProps = new Properties();
1:daecc5d: 
1:f28de92:         String clientPropsFileName = "clientmessages" + locale + ".properties";
1:daecc5d: 
1:eac0369: 		for (Enumeration e = p.keys(); e.hasMoreElements(); ) {
1:eac0369: 			String key = (String) e.nextElement();
1:eac0369: 
1:eac0369: 			c[MessageService.hashString50(key)].put(key, p.getProperty(key));
1:daecc5d:             
1:daecc5d:             // If we have a match, add it to the list of client messages
1:daecc5d:             if ( isClientMessage(key) )
1:daecc5d:             {
1:daecc5d:                 clientProps.put(key, p.getProperty(key));
1:daecc5d:             }
1:daecc5d: 		}
1:eac0369: 
1:eac0369: 		for (int i = 0; i < 50; i++) {
1:eac0369: 			if (c[i].size() == 0)
1:eac0369: 				continue;
1:eac0369: 			OutputStream fos = new BufferedOutputStream(
1:eac0369: 				new FileOutputStream(new File(dir, "m"+i+locale+".properties")), 16 * 1024);
1:daecc5d: 
1:eac0369:             
1:129b076: 			c[i].store(fos, (String) null);
1:eac0369: 			fos.flush();
1:eac0369: 			fos.close();
1:daecc5d:             
1:eac0369: 			if (addBase) {
1:eac0369: 				// add duplicate english file as the base
1:eac0369: 				fos = new BufferedOutputStream(
1:eac0369: 					new FileOutputStream(new File(dir, "m"+i+".properties")), 16 * 1024);
1:129b076: 				c[i].store(fos, (String) null);
1:eac0369: 				fos.flush();
1:eac0369: 				fos.close();
1:daecc5d: 			}
1:eac0369: 
1:eac0369: 
4:eac0369: 		}
1:eac0369:         
1:eac0369: 		System.out.println("split messages" + locale);
1:daecc5d: 
1:daecc5d:         // Save the client messages (the combination of what was already
1:daecc5d:         // there and what we added from the engine properties file) into
1:daecc5d:         // the Derby locales directory
1:daecc5d:         OutputStream clientOutStream = new BufferedOutputStream(
1:daecc5d:             new FileOutputStream(new File(dir, clientPropsFileName)), 
1:daecc5d:             16 * 1024);
1:daecc5d: 
1:129b076:         clientProps.store(clientOutStream, (String)null);
1:daecc5d:         clientOutStream.flush();
1:daecc5d:         clientOutStream.close();
1:daecc5d:         
1:daecc5d:         if ( addBase )
1:daecc5d:         {
1:daecc5d:             // Save the English messages as the base
1:daecc5d:             clientOutStream = new BufferedOutputStream(
1:f28de92:                 new FileOutputStream(new File(dir, "clientmessages.properties")), 
1:daecc5d:                 16 * 1024);
1:daecc5d: 
1:129b076:             clientProps.store(clientOutStream, (String)null);
1:daecc5d:             clientOutStream.flush();
1:daecc5d:             clientOutStream.close();            
1:daecc5d:         }
1:daecc5d:         System.out.println("Copied client messages for " + locale);
1:eac0369: 	}
1:daecc5d:     
1:daecc5d:     /**
1:daecc5d:      * Determine if this is a message that the client is using
1:daecc5d:      *
1:1b39163:      * There are some classes of ids that we assume are client messages
1:1b39163:      * (see code below for the definitive list).
1:daecc5d:      *
1:daecc5d:      * All other shared message ids should be added to the static array
1:daecc5d:      * clientMessageIds, defined at the top of this class
1:daecc5d:      */
1:daecc5d:     static boolean isClientMessage(String messageId)
1:daecc5d:     {
1:1b39163:         // Look for message ids that we assume are likely to be used
1:1b39163:         // on the client.  These ones don't need to be explicitly added
1:1b39163:         // to clientMessageIds
1:1b39163:         if ( messageId.startsWith("XJ") || messageId.startsWith("J")  ||
1:1b39163:              messageId.startsWith("XN") || messageId.startsWith("58") ||
1:25c1e7b:              messageId.startsWith("57") || messageId.startsWith("08") ||
1:25c1e7b:              messageId.startsWith( "XBD" ) )
3:daecc5d:         {
1:daecc5d:             return true;
1:daecc5d:         }
1:daecc5d:         
1:daecc5d:         if ( clientMessageIds.contains(messageId))
1:daecc5d:         {
1:daecc5d:             return true;
1:daecc5d:         }
1:daecc5d:         
1:daecc5d:         return false;
1:daecc5d:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:25c1e7b
/////////////////////////////////////////////////////////////////////////
1:              messageId.startsWith("57") || messageId.startsWith("08") ||
1:              messageId.startsWith( "XBD" ) )
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:ae40e9f
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dc97960
/////////////////////////////////////////////////////////////////////////
commit:9d78190
/////////////////////////////////////////////////////////////////////////
1:     static
/////////////////////////////////////////////////////////////////////////
1:     };
commit:38b9499
/////////////////////////////////////////////////////////////////////////
1:     private static TreeSet<String> clientMessageIds = new TreeSet<String>();
commit:129b076
/////////////////////////////////////////////////////////////////////////
1: 			c[i].store(fos, (String) null);
/////////////////////////////////////////////////////////////////////////
1: 				c[i].store(fos, (String) null);
/////////////////////////////////////////////////////////////////////////
1:         clientProps.store(clientOutStream, (String)null);
/////////////////////////////////////////////////////////////////////////
1:             clientProps.store(clientOutStream, (String)null);
commit:960054b
/////////////////////////////////////////////////////////////////////////
commit:dcfa036
/////////////////////////////////////////////////////////////////////////
commit:054fa3a
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.DATA_TYPE_NOT_SUPPORTED);
commit:d8383bd
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.MULTIPLE_RESULTS_ON_EXECUTE_QUERY);
1:         clientMessageIds.add(SQLState.USE_EXECUTE_UPDATE_WITH_NO_RESULTS);
commit:178ae9d
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.JDBC_METHOD_NOT_SUPPORTED_BY_SERVER);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:65d5b52
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_CURSOR_NOT_FOUND);
commit:c9687fc
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_RESULT_SET_NOT_OPEN);
commit:f9f8329
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.PROPERTY_INVALID_VALUE);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1e5b2aa
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_SUBSTR_START_ADDING_LEN_OUT_OF_RANGE);
commit:aadfc18
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.INVALID_COLUMN_ARRAY_LENGTH);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:de243e0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6a925a3
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_STRING_TOO_LONG);
commit:f271471
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_IDENTIFIER_TOO_LONG);
1:         clientMessageIds.add(SQLState.DRDA_CURSOR_NOT_OPEN);
commit:348f4cd
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.PROPERTY_UNSUPPORTED_CHANGE);
1:         clientMessageIds.add(SQLState.NET_INVALID_JDBC_TYPE_FOR_PARAM);
1:         clientMessageIds.add(SQLState.UNRECOGNIZED_JAVA_SQL_TYPE);
1:         clientMessageIds.add(SQLState.NET_UNRECOGNIZED_JDBC_TYPE);
1:         clientMessageIds.add(SQLState.NET_SQLCDTA_INVALID_FOR_RDBCOLID);
1:         clientMessageIds.add(SQLState.NET_SQLCDTA_INVALID_FOR_PKGID);
1:         clientMessageIds.add(SQLState.NET_PGNAMCSN_INVALID_AT_SQLAM);
1:         clientMessageIds.add(SQLState.NET_VCM_VCS_LENGTHS_INVALID);
commit:4777f5c
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET);
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.NO_CURRENT_ROW);
commit:2dcbe06
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.JDBC_DRIVER_REGISTER);
commit:1b39163
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.SECMECH_NOT_SUPPORTED);
1:         clientMessageIds.add(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED);
/////////////////////////////////////////////////////////////////////////
1:      * There are some classes of ids that we assume are client messages
1:      * (see code below for the definitive list).
1:         // Look for message ids that we assume are likely to be used
1:         // on the client.  These ones don't need to be explicitly added
1:         // to clientMessageIds
1:         if ( messageId.startsWith("XJ") || messageId.startsWith("J")  ||
1:              messageId.startsWith("XN") || messageId.startsWith("58") ||
0:              messageId.startsWith("57") || messageId.startsWith("08"))
commit:6e08d50
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.CANT_CONVERT_UNICODE_TO_EBCDIC);
commit:5d2e2bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_INVALID_CALL_TO_EXECUTE_UPDATE);
1:         clientMessageIds.add(SQLState.LANG_CANT_INVALIDATE_OPEN_RESULT_SET);
1:         clientMessageIds.add(SQLState.YEAR_EXCEEDS_MAXIMUM);
1:         clientMessageIds.add(SQLState.CONNECTION_FAILED_ON_RESET);
1:         clientMessageIds.add(SQLState.DECIMAL_TOO_MANY_DIGITS);
1:         clientMessageIds.add(SQLState.NUMERIC_OVERFLOW);
1:         clientMessageIds.add(SQLState.UNSUPPORTED_HOLDABILITY_PROPERTY);
1:         clientMessageIds.add(SQLState.CANCEL_NOT_SUPPORTED_BY_SERVER);
1:         clientMessageIds.add(SQLState.LANG_INVALID_CALL_STATEMENT);
0:         clientMessageIds.add(SQLState.LOSS_OF_PRECISION_EXCEPTION);
1:         clientMessageIds.add(SQLState.LANG_INVALID_SQL_IN_BATCH);
/////////////////////////////////////////////////////////////////////////
0:      * We assume all message ids starting with "XJ" or "J" are client messages
0:      * of explicitly adding each XJ or J shared message, and covers 90% of the
/////////////////////////////////////////////////////////////////////////
0:         if ( messageId.startsWith("XJ") || messageId.startsWith("J") )
commit:5d14a2c
/////////////////////////////////////////////////////////////////////////
0:         clientMessageIds.add(SQLState.CLIENT_RESULT_SET_NOT_OPEN);
commit:1d87ff4
/////////////////////////////////////////////////////////////////////////
0:         clientMessageIds.add(SQLState.LANG_RETURN_OUTPUT_PARAM_CANNOT_BE_SET);
1:         clientMessageIds.add(SQLState.LANG_NULL_INTO_NON_NULL);
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_INVALID_PARAM_POSITION);
1:         clientMessageIds.add(SQLState.LANG_MISSING_PARMS);
1:         clientMessageIds.add(SQLState.LANG_NO_CURRENT_ROW);
1:         clientMessageIds.add(SQLState.LANG_STREAM_RETRIEVED_ALREADY);
commit:2e35afd
/////////////////////////////////////////////////////////////////////////
1:      * Initialize the set of message ids that the network client will use.  
1:      * <p>
1:      * Note that all message ids that start with "XJ" are automatically added, 
1:      * these are just for message ids that have a different prefix.
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.JDBC_METHOD_NOT_IMPLEMENTED);
1:         clientMessageIds.add(SQLState.DRDA_NO_AUTOCOMMIT_UNDER_XA);
1:         clientMessageIds.add(SQLState.DRDA_INVALID_XA_STATE_ON_COMMIT_OR_ROLLBACK);
1:         clientMessageIds.add(SQLState.HOLDABLE_RESULT_SET_NOT_AVAILABLE);
1:         clientMessageIds.add(SQLState.INVALID_RESULTSET_TYPE);
0:         clientMessageIds.add(SQLState.INVALID_RESULTSET_CONCURRENCY);
1:         clientMessageIds.add(SQLState.SCROLL_SENSITIVE_NOT_SUPPORTED);
0:         clientMessageIds.add(SQLState.INSENSITIVE_UPDATABLE_NOT_SUPPORTED);
1:         clientMessageIds.add(SQLState.UNABLE_TO_OBTAIN_MESSAGE_TEXT_FROM_SERVER );
1:         clientMessageIds.add(SQLState.NUMBER_OF_ROWS_TOO_LARGE_FOR_INT);
1:         clientMessageIds.add(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION);
1:         clientMessageIds.add(SQLState.LOB_METHOD_ON_CLOSED_CONNECTION);
/////////////////////////////////////////////////////////////////////////
commit:e6936ea
/////////////////////////////////////////////////////////////////////////
0:         clientMessageIds.add("J104");
commit:ed225ae
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.LANG_STATEMENT_CLOSED_NO_REASON);
1:         clientMessageIds.add(SQLState.LANG_INVALID_COLUMN_POSITION);
1:         clientMessageIds.add(SQLState.INVALID_COLUMN_NAME);
commit:3d650b1
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.UNSUPPORTED_ENCODING);
1:         clientMessageIds.add(SQLState.LANG_FORMAT_EXCEPTION);
1:         clientMessageIds.add(SQLState.LANG_DATA_TYPE_GET_MISMATCH);
1:         clientMessageIds.add(SQLState.LANG_DATA_TYPE_SET_MISMATCH);
1:         clientMessageIds.add(SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:         clientMessageIds.add(SQLState.CHARACTER_CONVERTER_NOT_AVAILABLE);
1:         clientMessageIds.add(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE);
commit:e4ba4e1
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.CANNOT_CLOSE_ACTIVE_CONNECTION);
commit:a53b758
/////////////////////////////////////////////////////////////////////////
0:         clientMessageIds.add(SQLState.CANNOT_CLOSE_ACTIVE_XA_CONNECTION);
1:         clientMessageIds.add(SQLState.XACT_SAVEPOINT_RELEASE_ROLLBACK_FAIL);
commit:59d98b8
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.NOT_IMPLEMENTED);
commit:4ac6a1c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:         // Add message ids that don't start with XJ here
1:         clientMessageIds.add(SQLState.NO_CURRENT_CONNECTION);
commit:f28de92
/////////////////////////////////////////////////////////////////////////
1:         String clientPropsFileName = "clientmessages" + locale + ".properties";
/////////////////////////////////////////////////////////////////////////
1:                 new FileOutputStream(new File(dir, "clientmessages.properties")), 
commit:daecc5d
/////////////////////////////////////////////////////////////////////////
0:    Copyright 2000, 2006 The Apache Software Foundation or its licensors, as applicable.
/////////////////////////////////////////////////////////////////////////
1:     
1:     /** 
1:      *  This is the list of message ids that are shared between
1:      *  the network client and the engine.  This is used to generate
1:      *  a set of 'shared' messages.  This avoids us having to maintain
1:      *  two separate message files.
1:      *
1:      *  NOTE: We already assume all message ids starting with XJ are shared.
1:      *  This covers 90% of the cases.  Only add ids here if you have a 
1:      *  message id that is not in the XJ class.
1:      */
0:     private static TreeSet clientMessageIds = new TreeSet();
1:     
1:     /**
0:      * Initialize the set of shared message ids
1:      */
0:     static void initClientMessageIds()
1:     {
0:         // right now, no message ids that don't start with "XJ",
0:         // so nothing to do here.  Once we have some that don't
0:         // start with XJ, add here using clientMessageIds.add()
1:     }
0:         initClientMessageIds();
0:         File clientDir = new File(args[2]);
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:         
1:         Properties clientProps = new Properties();
1: 
0:         // Open the client properties file for the given locale
0:         // from the client locales directory, and then intialize
0:         // clientProps with what we find in there
0:         String clientPropsFileName = "client-messages" + locale + ".properties";
0:         try
1:         {
0:             InputStream clientInStream = new FileInputStream(
0:                     new File(clientDir, clientPropsFileName));
0:             clientProps.load(clientInStream);
0:             clientInStream.close();
1:         }
0:         catch ( FileNotFoundException fnfe )
1:         {
0:             // That's fine, it just means there are no client-specfic messages
0:             // for this locale yet
1:         }
1:             
1:             // If we have a match, add it to the list of client messages
1:             if ( isClientMessage(key) )
1:             {
1:                 clientProps.put(key, p.getProperty(key));
1:             }
/////////////////////////////////////////////////////////////////////////
1:             
1:             
/////////////////////////////////////////////////////////////////////////
1:         
1: 
1:         // Save the client messages (the combination of what was already
1:         // there and what we added from the engine properties file) into
1:         // the Derby locales directory
1:         OutputStream clientOutStream = new BufferedOutputStream(
1:             new FileOutputStream(new File(dir, clientPropsFileName)), 
1:             16 * 1024);
1: 
0:         clientProps.save(clientOutStream, (String)null);
1:         clientOutStream.flush();
1:         clientOutStream.close();
1:         
1:         if ( addBase )
1:         {
1:             // Save the English messages as the base
1:             clientOutStream = new BufferedOutputStream(
0:                 new FileOutputStream(new File(dir, "client-messages.properties")), 
1:                 16 * 1024);
1: 
0:             clientProps.save(clientOutStream, (String)null);
1:             clientOutStream.flush();
1:             clientOutStream.close();            
1:         }
1:         System.out.println("Copied client messages for " + locale);
1:     
1:     /**
1:      * Determine if this is a message that the client is using
1:      *
0:      * We assume all message ids starting with "XJ" are client messages
0:      * (even though many of them may not be, it saves the coder the effort
0:      * of explicitly adding each XJ shared message, and covers 90% of the
0:      * shared messages
1:      *
1:      * All other shared message ids should be added to the static array
1:      * clientMessageIds, defined at the top of this class
1:      */
1:     static boolean isClientMessage(String messageId)
1:     {
0:         if ( messageId.startsWith("XJ") )
1:         {
1:             return true;
1:         }
1:         
1:         if ( clientMessageIds.contains(messageId))
1:         {
1:             return true;
1:         }
1:         
1:         return false;
1:     }
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:c247315
/////////////////////////////////////////////////////////////////////////
0: 	clientMessageIds.add(SQLState.QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1128268
/////////////////////////////////////////////////////////////////////////
1:         clientMessageIds.add(SQLState.HOLDABLE_RESULT_SET_NOT_AVAILABLE);
commit:cd3749b
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyBuild.splitmessages
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:50d75f3
/////////////////////////////////////////////////////////////////////////
1: public class splitmessages {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyBuild
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyBuild;
1: 
1: import java.io.*;
1: import java.util.*;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
1: 
0: public class splitmessages { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	/**
1: 		arg[0] is the destination directory
1: 		arg[1] is the source file.
1: 	*/
1: 
1: 	public static void main(String[] args) throws Exception {
1: 
1: 
1: 		Properties p = new Properties();
1: 
1: 		File dir = new File(args[0]);
1: 
1: 		File source = new File(args[1]);
1: 		String s = source.getName();
1: 		// loose the suffix
1: 		s = s.substring(0, s.lastIndexOf('.'));
1: 		// now get the locale
1: 		String locale = s.substring(s.indexOf('_'));
1: 
1: 		boolean addBase = "_en".equals(locale);
1: 
1: 
1: 		InputStream is = new BufferedInputStream(new FileInputStream(source), 64 * 1024);
1: 
1: 		p.load(is);
1: 		is.close();
1: 
1: 
1: 		Properties[] c = new Properties[50];
1: 		for (int i = 0; i < 50; i++) {
1: 			c[i] = new Properties();
1: 		}
1: 
1: 		for (Enumeration e = p.keys(); e.hasMoreElements(); ) {
1: 			String key = (String) e.nextElement();
1: 
1: 			c[MessageService.hashString50(key)].put(key, p.getProperty(key));
1: 		}
1: 
1: 		for (int i = 0; i < 50; i++) {
1: 			if (c[i].size() == 0)
1: 				continue;
1: 			OutputStream fos = new BufferedOutputStream(
1: 				new FileOutputStream(new File(dir, "m"+i+locale+".properties")), 16 * 1024);
1: 
0: 			c[i].save(fos, (String) null);
1: 			fos.flush();
1: 			fos.close();
1: 
1: 			if (addBase) {
1: 				// add duplicate english file as the base
1: 				fos = new BufferedOutputStream(
1: 					new FileOutputStream(new File(dir, "m"+i+".properties")), 16 * 1024);
0: 				c[i].save(fos, (String) null);
1: 				fos.flush();
1: 				fos.close();
1: 			}
1: 
1: 
1: 		}
1: 
1: 		System.out.println("split messages" + locale);
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyBuild
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derbyBuild;
0: 
0: import java.io.*;
0: import java.util.*;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 
0: public class splitmessages { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	/**
0: 		arg[0] is the destination directory
0: 		arg[1] is the source file.
0: 	*/
0: 
0: 	public static void main(String[] args) throws Exception {
0: 
0: 
0: 		Properties p = new Properties();
0: 
0: 		File dir = new File(args[0]);
0: 
0: 		File source = new File(args[1]);
0: 		String s = source.getName();
0: 		// loose the suffix
0: 		s = s.substring(0, s.lastIndexOf('.'));
0: 		// now get the locale
0: 		String locale = s.substring(s.indexOf('_'));
0: 
0: 		boolean addBase = "_en".equals(locale);
0: 
0: 
0: 		InputStream is = new BufferedInputStream(new FileInputStream(source), 64 * 1024);
0: 
0: 		p.load(is);
0: 		is.close();
0: 
0: 
0: 		Properties[] c = new Properties[50];
0: 		for (int i = 0; i < 50; i++) {
0: 			c[i] = new Properties();
0: 		}
0: 
0: 		for (Enumeration e = p.keys(); e.hasMoreElements(); ) {
0: 			String key = (String) e.nextElement();
0: 
0: 			c[MessageService.hashString50(key)].put(key, p.getProperty(key));
0: 		}
0: 
0: 		for (int i = 0; i < 50; i++) {
0: 			if (c[i].size() == 0)
0: 				continue;
0: 			OutputStream fos = new BufferedOutputStream(
0: 				new FileOutputStream(new File(dir, "m"+i+locale+".properties")), 16 * 1024);
0: 
0: 			c[i].save(fos, (String) null);
0: 			fos.flush();
0: 			fos.close();
0: 
0: 			if (addBase) {
0: 				// add duplicate english file as the base
0: 				fos = new BufferedOutputStream(
0: 					new FileOutputStream(new File(dir, "m"+i+".properties")), 16 * 1024);
0: 				c[i].save(fos, (String) null);
0: 				fos.flush();
0: 				fos.close();
0: 			}
0: 
0: 
0: 		}
0: 
0: 		System.out.println("split messages" + locale);
0: 	}
0: }
============================================================================