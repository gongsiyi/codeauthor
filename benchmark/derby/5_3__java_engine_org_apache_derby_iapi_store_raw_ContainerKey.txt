1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.ContainerKey
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.Matchable;
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: import org.apache.derby.iapi.services.locks.Latch;
1:eac0369: import org.apache.derby.iapi.services.locks.VirtualLockTable;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A key that identifies a Container within the RawStore.
1:eac0369: 	<BR> MT - Immutable
1:eac0369: */
1:eac0369: public final class ContainerKey implements Matchable, Lockable
1:eac0369: {
1:eac0369: 	private final long	segmentId;		// segment identifier
1:eac0369: 	private final long	containerId;	// container identifier
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create a new ContainerKey
1:eac0369: 	*/
1:eac0369: 	public ContainerKey(long segmentId, long containerId) {
1:eac0369: 		this.segmentId = segmentId;
1:eac0369: 		this.containerId = containerId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my identifier within the segment
1:eac0369: 	*/
1:eac0369: 	public long getContainerId() {
1:eac0369: 		return containerId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my segment identifier
1:eac0369: 	*/
1:eac0369: 	public long getSegmentId() {
1:eac0369: 		return segmentId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods to read and write ContainerKeys.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		CompressedNumber.writeLong(out, segmentId);
1:eac0369: 		CompressedNumber.writeLong(out, containerId);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static ContainerKey read(ObjectInput in) throws IOException
1:eac0369: 	{
1:eac0369: 		long sid = CompressedNumber.readLong(in);
1:eac0369: 		long cid = CompressedNumber.readLong(in);
1:eac0369: 
1:eac0369: 		return new ContainerKey(sid, cid);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Object
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (other == this)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		if (other instanceof ContainerKey) {
1:eac0369: 			ContainerKey otherKey = (ContainerKey) other;
1:eac0369: 
1:eac0369: 			return (containerId == otherKey.containerId) &&
1:eac0369: 					(segmentId == otherKey.segmentId);
1:eac0369: 		} else {
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode() {
1:eac0369: 
1:eac0369: 		return (int) (segmentId ^ containerId);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString() {
1:eac0369: 
1:eac0369: 		return "Container(" + segmentId + ", " + containerId + ")";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** methods of Matchable
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public boolean match(Object key) {
1:eac0369: 		// instance of ContainerKey?
1:eac0369: 		if (equals(key))
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		if (key instanceof PageKey)
1:eac0369: 			return equals(((PageKey) key).getContainerId());
1:eac0369: 
1:eac0369: 		if (key instanceof RecordHandle) {
1:eac0369: 			return equals(((RecordHandle) key).getContainerId());
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 	/*
1:eac0369: 	** Methods of Lockable
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public void lockEvent(Latch lockInfo) {
1:eac0369: 	}
1:eac0369: 	 
1:eac0369: 
1:eac0369: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(requestedQualifier instanceof ContainerLock);
1:eac0369: 			SanityManager.ASSERT(grantedQualifier instanceof ContainerLock);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ContainerLock clRequested = (ContainerLock) requestedQualifier;
1:eac0369: 		ContainerLock clGranted  = (ContainerLock) grantedQualifier;
1:eac0369: 
1:eac0369: 		return clRequested.isCompatible(clGranted);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This method will only be called if requestCompatible returned false.
1:eac0369: 		This results from two cases, some other compatabilty space has some
1:eac0369: 		lock that would conflict with the request, or this compatability space
1:eac0369: 		has a lock tha
1:eac0369: 	*/
1:eac0369: 	public boolean lockerAlwaysCompatible() {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void unlockEvent(Latch lockInfo) {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This lockable wants to participate in the Virtual Lock table.
1:eac0369: 	 */
1:073b862: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(attributes != null, 
1:eac0369: 				"cannot call lockProperties with null attribute list");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if ((flag & VirtualLockTable.TABLE_AND_ROWLOCK) == 0)
1:eac0369: 			return false;
1:eac0369: 
1:ce40a31: 		attributes.put(VirtualLockTable.CONTAINERID,getContainerId());
1:eac0369: 		attributes.put(VirtualLockTable.LOCKNAME, "Tablelock");
1:eac0369: 		attributes.put(VirtualLockTable.LOCKTYPE, "TABLE");
1:eac0369: 
1:eac0369: 		// attributes.put(VirtualLockTable.SEGMENTID, new Long(identity.getSegmentId()));
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(VirtualLockTable.CONTAINERID,getContainerId());
commit:073b862
/////////////////////////////////////////////////////////////////////////
1: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes)
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.ContainerKey
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.util.Matchable;
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.locks.Lockable;
1: import org.apache.derby.iapi.services.locks.Latch;
1: import org.apache.derby.iapi.services.locks.VirtualLockTable;
1: 
1: import java.util.Hashtable;
1: 
1: /**
1: 	A key that identifies a Container within the RawStore.
1: 	<BR> MT - Immutable
1: */
1: public final class ContainerKey implements Matchable, Lockable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private final long	segmentId;		// segment identifier
1: 	private final long	containerId;	// container identifier
1: 
1: 	/**
1: 		Create a new ContainerKey
1: 	*/
1: 	public ContainerKey(long segmentId, long containerId) {
1: 		this.segmentId = segmentId;
1: 		this.containerId = containerId;
1: 	}
1: 
1: 	/**
1: 		Return my identifier within the segment
1: 	*/
1: 	public long getContainerId() {
1: 		return containerId;
1: 	}
1: 
1: 	/**
1: 		Return my segment identifier
1: 	*/
1: 	public long getSegmentId() {
1: 		return segmentId;
1: 	}
1: 
1: 	/*
1: 	** Methods to read and write ContainerKeys.
1: 	*/
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		CompressedNumber.writeLong(out, segmentId);
1: 		CompressedNumber.writeLong(out, containerId);
1: 	}
1: 
1: 	public static ContainerKey read(ObjectInput in) throws IOException
1: 	{
1: 		long sid = CompressedNumber.readLong(in);
1: 		long cid = CompressedNumber.readLong(in);
1: 
1: 		return new ContainerKey(sid, cid);
1: 	}
1: 
1: 	/*
1: 	** Methods of Object
1: 	*/
1: 
1: 	public boolean equals(Object other) {
1: 		if (other == this)
1: 			return true;
1: 
1: 		if (other instanceof ContainerKey) {
1: 			ContainerKey otherKey = (ContainerKey) other;
1: 
1: 			return (containerId == otherKey.containerId) &&
1: 					(segmentId == otherKey.segmentId);
1: 		} else {
1: 			return false;
1: 		}
1: 	}
1: 
1: 	public int hashCode() {
1: 
1: 		return (int) (segmentId ^ containerId);
1: 	}
1: 
1: 	public String toString() {
1: 
1: 		return "Container(" + segmentId + ", " + containerId + ")";
1: 	}
1: 
1: 	/*
1: 	** methods of Matchable
1: 	*/
1: 
1: 	public boolean match(Object key) {
1: 		// instance of ContainerKey?
1: 		if (equals(key))
1: 			return true;
1: 
1: 		if (key instanceof PageKey)
1: 			return equals(((PageKey) key).getContainerId());
1: 
1: 		if (key instanceof RecordHandle) {
1: 			return equals(((RecordHandle) key).getContainerId());
1: 		}
1: 		return false;
1: 	}
1: 	/*
1: 	** Methods of Lockable
1: 	*/
1: 
1: 	public void lockEvent(Latch lockInfo) {
1: 	}
1: 	 
1: 
1: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(requestedQualifier instanceof ContainerLock);
1: 			SanityManager.ASSERT(grantedQualifier instanceof ContainerLock);
1: 		}
1: 
1: 		ContainerLock clRequested = (ContainerLock) requestedQualifier;
1: 		ContainerLock clGranted  = (ContainerLock) grantedQualifier;
1: 
1: 		return clRequested.isCompatible(clGranted);
1: 	}
1: 
1: 	/**
1: 		This method will only be called if requestCompatible returned false.
1: 		This results from two cases, some other compatabilty space has some
1: 		lock that would conflict with the request, or this compatability space
1: 		has a lock tha
1: 	*/
1: 	public boolean lockerAlwaysCompatible() {
1: 		return true;
1: 	}
1: 
1: 	public void unlockEvent(Latch lockInfo) {
1: 	}
1: 
1: 	/**
1: 		This lockable wants to participate in the Virtual Lock table.
1: 	 */
0: 	public boolean lockAttributes(int flag, Hashtable attributes)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(attributes != null, 
1: 				"cannot call lockProperties with null attribute list");
1: 		}
1: 
1: 		if ((flag & VirtualLockTable.TABLE_AND_ROWLOCK) == 0)
1: 			return false;
1: 
0: 		attributes.put(VirtualLockTable.CONTAINERID, 
0: 					   new Long(getContainerId()));
1: 		attributes.put(VirtualLockTable.LOCKNAME, "Tablelock");
1: 		attributes.put(VirtualLockTable.LOCKTYPE, "TABLE");
1: 
1: 		// attributes.put(VirtualLockTable.SEGMENTID, new Long(identity.getSegmentId()));
1: 
1: 		return true;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.util.Matchable;
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.locks.Lockable;
0: import org.apache.derby.iapi.services.locks.Latch;
0: import org.apache.derby.iapi.services.locks.VirtualLockTable;
0: 
0: import java.util.Hashtable;
0: 
0: /**
0: 	A key that identifies a Container within the RawStore.
0: 	<BR> MT - Immutable
0: */
0: public final class ContainerKey implements Matchable, Lockable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private final long	segmentId;		// segment identifier
0: 	private final long	containerId;	// container identifier
0: 
0: 	/**
0: 		Create a new ContainerKey
0: 	*/
0: 	public ContainerKey(long segmentId, long containerId) {
0: 		this.segmentId = segmentId;
0: 		this.containerId = containerId;
0: 	}
0: 
0: 	/**
0: 		Return my identifier within the segment
0: 	*/
0: 	public long getContainerId() {
0: 		return containerId;
0: 	}
0: 
0: 	/**
0: 		Return my segment identifier
0: 	*/
0: 	public long getSegmentId() {
0: 		return segmentId;
0: 	}
0: 
0: 	/*
0: 	** Methods to read and write ContainerKeys.
0: 	*/
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		CompressedNumber.writeLong(out, segmentId);
0: 		CompressedNumber.writeLong(out, containerId);
0: 	}
0: 
0: 	public static ContainerKey read(ObjectInput in) throws IOException
0: 	{
0: 		long sid = CompressedNumber.readLong(in);
0: 		long cid = CompressedNumber.readLong(in);
0: 
0: 		return new ContainerKey(sid, cid);
0: 	}
0: 
0: 	/*
0: 	** Methods of Object
0: 	*/
0: 
0: 	public boolean equals(Object other) {
0: 		if (other == this)
0: 			return true;
0: 
0: 		if (other instanceof ContainerKey) {
0: 			ContainerKey otherKey = (ContainerKey) other;
0: 
0: 			return (containerId == otherKey.containerId) &&
0: 					(segmentId == otherKey.segmentId);
0: 		} else {
0: 			return false;
0: 		}
0: 	}
0: 
0: 	public int hashCode() {
0: 
0: 		return (int) (segmentId ^ containerId);
0: 	}
0: 
0: 	public String toString() {
0: 
0: 		return "Container(" + segmentId + ", " + containerId + ")";
0: 	}
0: 
0: 	/*
0: 	** methods of Matchable
0: 	*/
0: 
0: 	public boolean match(Object key) {
0: 		// instance of ContainerKey?
0: 		if (equals(key))
0: 			return true;
0: 
0: 		if (key instanceof PageKey)
0: 			return equals(((PageKey) key).getContainerId());
0: 
0: 		if (key instanceof RecordHandle) {
0: 			return equals(((RecordHandle) key).getContainerId());
0: 		}
0: 		return false;
0: 	}
0: 	/*
0: 	** Methods of Lockable
0: 	*/
0: 
0: 	public void lockEvent(Latch lockInfo) {
0: 	}
0: 	 
0: 
0: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(requestedQualifier instanceof ContainerLock);
0: 			SanityManager.ASSERT(grantedQualifier instanceof ContainerLock);
0: 		}
0: 
0: 		ContainerLock clRequested = (ContainerLock) requestedQualifier;
0: 		ContainerLock clGranted  = (ContainerLock) grantedQualifier;
0: 
0: 		return clRequested.isCompatible(clGranted);
0: 	}
0: 
0: 	/**
0: 		This method will only be called if requestCompatible returned false.
0: 		This results from two cases, some other compatabilty space has some
0: 		lock that would conflict with the request, or this compatability space
0: 		has a lock tha
0: 	*/
0: 	public boolean lockerAlwaysCompatible() {
0: 		return true;
0: 	}
0: 
0: 	public void unlockEvent(Latch lockInfo) {
0: 	}
0: 
0: 	/**
0: 		This lockable wants to participate in the Virtual Lock table.
0: 	 */
0: 	public boolean lockAttributes(int flag, Hashtable attributes)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(attributes != null, 
0: 				"cannot call lockProperties with null attribute list");
0: 		}
0: 
0: 		if ((flag & VirtualLockTable.TABLE_AND_ROWLOCK) == 0)
0: 			return false;
0: 
0: 		attributes.put(VirtualLockTable.CONTAINERID, 
0: 					   new Long(getContainerId()));
0: 		attributes.put(VirtualLockTable.LOCKNAME, "Tablelock");
0: 		attributes.put(VirtualLockTable.LOCKTYPE, "TABLE");
0: 
0: 		// attributes.put(VirtualLockTable.SEGMENTID, new Long(identity.getSegmentId()));
0: 
0: 		return true;
0: 	}
0: }
============================================================================