1:9a9b932: /*
3:9a9b932: 
1:9a9b932:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsPermsTest
1:9a9b932: 
1:9a9b932:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9a9b932:    contributor license agreements.  See the NOTICE file distributed with
1:9a9b932:    this work for additional information regarding copyright ownership.
1:9a9b932:    The ASF licenses this file to you under the Apache License, Version 2.0
1:9a9b932:    (the "License"); you may not use this file except in compliance with
1:9a9b932:    the License.  You may obtain a copy of the License at
1:9a9b932: 
1:9a9b932:      http://www.apache.org/licenses/LICENSE-2.0
1:9a9b932: 
1:9a9b932:    Unless required by applicable law or agreed to in writing, software
1:9a9b932:    distributed under the License is distributed on an "AS IS" BASIS,
1:9a9b932:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a9b932:    See the License for the specific language governing permissions and
1:9a9b932:    limitations under the License.
1:9a9b932: 
1:9a9b932:  */
1:9a9b932: 
1:9a9b932: package org.apache.derbyTesting.functionTests.tests.lang;
1:9a9b932: 
1:9a9b932: import java.sql.Connection;
1:9a9b932: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:9a9b932: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:9a9b932: 
1:9a9b932: /**
1:9a9b932:  * <p>
1:9a9b932:  * Test permissions on generated columns. See DERBY-481.
1:9a9b932:  * </p>
1:9a9b932:  */
1:9a9b932: public class GeneratedColumnsPermsTest extends GeneratedColumnsHelper
1:9a9b932: {
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932:     //
1:9a9b932:     // CONSTANTS
1:9a9b932:     //
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932: 
1:9a9b932:     private static  final   String      TEST_DBO = "TEST_DBO";
1:9a9b932:     private static  final   String      JANET = "JANET";
1:9a9b932:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, JANET };
1:9a9b932: 
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932:     //
1:9a9b932:     // STATE
1:9a9b932:     //
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932: 
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932:     //
1:9a9b932:     // CONSTRUCTOR
1:9a9b932:     //
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932: 
1:9a9b932: 
1:9a9b932:     /**
1:9a9b932:      * Create a new instance.
1:9a9b932:      */
1:9a9b932: 
1:9a9b932:     public GeneratedColumnsPermsTest(String name)
1:9a9b932:     {
1:9a9b932:         super(name);
1:9a9b932:     }
1:9a9b932: 
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932:     //
1:9a9b932:     // JUnit BEHAVIOR
1:9a9b932:     //
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932: 
1:9a9b932: 
1:06ac9fb:     /**
1:9a9b932:      * Construct top level suite in this JUnit test
1:9a9b932:      */
1:9a9b932:     public static Test suite()
1:9a9b932:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             GeneratedColumnsPermsTest.class);
1:9a9b932: 
1:9a9b932:         Test        cleanTest = new CleanDatabaseTestSetup( suite );
1:9a9b932:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:9a9b932:             ( cleanTest, LEGAL_USERS, "generatedColumnsPermissions" );
1:9a9b932:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1:9a9b932: 
1:9a9b932:         return authorizedTest;
1:9a9b932:     }
1:9a9b932: 
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932:     //
1:9a9b932:     // TESTS
1:9a9b932:     //
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932: 
1:9a9b932:     /**
1:06ac9fb:      * <p>
1:9a9b932:      * Test that you need select/insert/update/delete privileges on a generated column and not just on
1:9a9b932:      * the columns it references.
1:9a9b932:      * </p>
1:9a9b932:      */
1:9a9b932:     public  void    test_001_basicPermissions()
1:9a9b932:         throws Exception
1:9a9b932:     {
1:9a9b932:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:9a9b932:         Connection  janetConnection = openUserConnection( JANET );
1:9a9b932: 
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when have granted only SELECT and UPDATE on the referenced column.
1:9a9b932:         //
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "create table t_bp_1( a int, b int generated always as ( -a ) )"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "insert into t_bp_1( a ) values ( 1 )"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant select ( a ) on t_bp_1 to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant update ( a ) on t_bp_1 to public"
1:9a9b932:              );
1:070d37e: 
5:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
1:9a9b932:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:9a9b932:              );
1:070d37e:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "update test_dbo.t_bp_1 set a = a+ 1"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
2:9a9b932:              "delete from test_dbo.t_bp_1 where a = 2"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
3:9a9b932:              LACK_COLUMN_PRIV,
1:9a9b932:              "select * from test_dbo.t_bp_1 order by a"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select a from test_dbo.t_bp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:070d37e:                  { "2", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932:         
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when we also grant SELECT on the generated column.
1:9a9b932:         //
1:070d37e:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant select ( b ) on t_bp_1 to public"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
1:9a9b932:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "update test_dbo.t_bp_1 set a = a+ 1"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
1:9a9b932:              "delete from test_dbo.t_bp_1 where a = 2"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select * from test_dbo.t_bp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:070d37e:                  { "3", "-3", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932:         
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when we also grant UPDATE on the generated column.
1:9a9b932:         //
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant update ( b ) on t_bp_1 to public"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
1:9a9b932:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "update test_dbo.t_bp_1 set a = a+ 1"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
1:9a9b932:              "delete from test_dbo.t_bp_1 where a = 2"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select * from test_dbo.t_bp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:070d37e:                  { "4", "-4", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932:         
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when we also grant INSERT on the table.
1:9a9b932:         //
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant insert on t_bp_1 to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:9a9b932:              );
1:9a9b932:         expectExecutionError
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              LACK_TABLE_PRIV,
1:9a9b932:              "delete from test_dbo.t_bp_1 where a = 2"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select * from test_dbo.t_bp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:070d37e:                  { "4", "-4", },
2:9a9b932:                  { "100", "-100", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932:         
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when we also grant DELETE on the table.
1:9a9b932:         //
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant delete on t_bp_1 to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:070d37e:              "delete from test_dbo.t_bp_1 where a = 4"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select * from test_dbo.t_bp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:9a9b932:                  { "100", "-100", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932:    }
1:9a9b932: 
1:01aa176:     /**
1:01aa176:      * <p>
1:3d2d88b:      * Test that you DON'T need execute privilege to run functions mentioned in
1:3d2d88b:      * generation clauses. That privilege is needed by the user who declared
1:3d2d88b:      * the generation clause.
1:9a9b932:      * </p>
1:9a9b932:      */
1:9a9b932:     public  void    test_002_functionPermissions()
1:9a9b932:         throws Exception
1:9a9b932:     {
1:9a9b932:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:9a9b932:         Connection  janetConnection = openUserConnection( JANET );
1:9a9b932: 
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when EXECUTE privilege is not granted.
1:9a9b932:         //
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "create function f_fp_minus\n" +
1:9a9b932:              "(\n" +
1:9a9b932:              "    a int\n" +
1:9a9b932:              ")\n" +
1:9a9b932:              "returns int\n" +
1:9a9b932:              "language java\n" +
1:9a9b932:              "deterministic\n" +
1:9a9b932:              "parameter style java\n" +
1:9a9b932:              "no sql\n" +
1:9a9b932:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "create table t_fp_1( a int, b int generated always as ( test_dbo.f_fp_minus( a ) ) )"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant update on t_fp_1 to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant insert on t_fp_1 to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant select on t_fp_1 to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "insert into test_dbo.t_fp_1( a ) values ( 100 )"
1:9a9b932:              );
1:06ac9fb: 
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "create function f_fp_minus\n" +
1:9a9b932:              "(\n" +
1:9a9b932:              "    a int\n" +
1:9a9b932:              ")\n" +
1:9a9b932:              "returns int\n" +
1:9a9b932:              "language java\n" +
1:9a9b932:              "deterministic\n" +
1:9a9b932:              "parameter style java\n" +
1:9a9b932:              "no sql\n" +
1:9a9b932:              "external name 'java.lang.Math.abs'\n"
1:9a9b932:              );
1:070d37e:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "update test_dbo.t_fp_1 set a = a + 1"
1:9a9b932:              );
1:070d37e: 
1:3d2d88b:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "insert into test_dbo.t_fp_1( a ) values ( 200 )"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select * from test_dbo.t_fp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:070d37e:                  { "101", "-101", },
1:3d2d88b:                  { "200", "-200", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932: 
1:9a9b932:         //
1:9a9b932:         // Verify correct behavior when EXECUTE privilege is granted.
1:9a9b932:         //
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              dboConnection,
1:9a9b932:              "grant execute on function f_fp_minus to public"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "update test_dbo.t_fp_1 set a = a + 1"
1:9a9b932:              );
1:9a9b932:         goodStatement
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "insert into test_dbo.t_fp_1( a ) values ( 200 )"
1:9a9b932:              );
1:9a9b932:         assertResults
1:9a9b932:             (
1:9a9b932:              janetConnection,
1:9a9b932:              "select * from test_dbo.t_fp_1 order by a",
1:9a9b932:              new String[][]
1:9a9b932:              {
1:070d37e:                  { "102", "-102", },
1:9a9b932:                  { "200", "-200", },
1:3d2d88b:                  { "201", "-201", },
1:9a9b932:              },
1:9a9b932:              false
1:9a9b932:              );
1:9a9b932:     }
1:9a9b932:     
1:9a9b932:     /**
1:9a9b932:      * <p>
1:9a9b932:      * Test ddl that can only be issued when authorization is turned on.
1:9a9b932:      * </p>
1:9a9b932:      */
1:9a9b932:     public  void    test_003_ddl()
1:9a9b932:         throws Exception
1:9a9b932:     {
1:9a9b932:         Connection  conn = getConnection();
1:9a9b932: 
1:9a9b932:         //
1:9a9b932:         // Verify that current_role is not allowed in generation clauses.
1:9a9b932:         //
1:9a9b932:         expectCompilationError
1:9a9b932:             (
1:9a9b932:              UNSTABLE_RESULTS,
1:9a9b932:              "create table t_ddl_1( a int, b varchar( 128 ) generated always as ( current_role ) )"
1:9a9b932:              );
1:9a9b932:     }
1:9a9b932:     
1:9a9b932:     /**
1:9a9b932:      * <p>
1:01aa176:      * Test that unqualified function references in generation clauses resolve
1:01aa176:      * to the current schema in effect when the generated column was added.
1:01aa176:      * See DERBY-3945.
1:01aa176:      * </p>
1:01aa176:      */
1:01aa176:     public  void    test_004_functionSchema()
1:01aa176:         throws Exception
1:01aa176:     {
1:01aa176:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:01aa176:         Connection  janetConnection = openUserConnection( JANET );
1:01aa176: 
1:01aa176:         //
1:01aa176:         // Schema.
1:01aa176:         //
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "create function f_fsch_1\n" +
1:01aa176:              "(\n" +
1:01aa176:              "    a int\n" +
1:01aa176:              ")\n" +
1:01aa176:              "returns int\n" +
1:01aa176:              "language java\n" +
1:01aa176:              "deterministic\n" +
1:01aa176:              "parameter style java\n" +
1:01aa176:              "no sql\n" +
1:01aa176:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "create table t_fsch_1( a int, b generated always as ( f_fsch_1( a ) ) )"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "create table t_fsch_2( a int )"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "alter table t_fsch_2 add column b generated always as ( f_fsch_1( a ) )"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant execute on function f_fsch_1 to public"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant select on t_fsch_1 to public"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant insert on t_fsch_1 to public"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant update on t_fsch_1 to public"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant select on t_fsch_2 to public"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant insert on t_fsch_2 to public"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "grant update on t_fsch_2 to public"
1:01aa176:              );
1:01aa176: 
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "create function f_fsch_1\n" +
1:01aa176:              "(\n" +
1:01aa176:              "    a int\n" +
1:01aa176:              ")\n" +
1:01aa176:              "returns int\n" +
1:01aa176:              "language java\n" +
1:01aa176:              "deterministic\n" +
1:01aa176:              "parameter style java\n" +
1:01aa176:              "no sql\n" +
1:01aa176:              "external name 'java.lang.Math.abs'\n"
1:01aa176:              );
1:01aa176: 
1:01aa176:         //
1:01aa176:         // Populate
1:01aa176:         //
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "insert into test_dbo.t_fsch_1( a ) values ( 1 )"
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              dboConnection,
1:01aa176:              "insert into test_dbo.t_fsch_2( a ) values ( 2 )"
1:01aa176:              );
1:01aa176: 
1:01aa176:         //
1:01aa176:         // Verify insert by other user
1:01aa176:         //
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "insert into test_dbo.t_fsch_1( a ) values ( 1 )"
1:01aa176:              );
1:01aa176:         assertResults
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "select * from test_dbo.t_fsch_1 order by a",
1:01aa176:              new String[][]
1:01aa176:              {
1:01aa176:                  { "1", "-1", },
1:01aa176:                  { "1", "-1", },
1:01aa176:              },
1:01aa176:              false
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "insert into test_dbo.t_fsch_2( a ) values ( 2 )"
1:01aa176:              );
1:01aa176:         assertResults
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "select * from test_dbo.t_fsch_2 order by a",
1:01aa176:              new String[][]
1:01aa176:              {
1:01aa176:                  { "2", "-2", },
1:01aa176:                  { "2", "-2", },
1:01aa176:              },
1:01aa176:              false
1:01aa176:              );
1:01aa176: 
1:01aa176:         //
1:01aa176:         // Verify update by other user
1:01aa176:         //
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "update test_dbo.t_fsch_1 set a = 100 + a"
1:01aa176:              );
1:01aa176:         assertResults
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "select * from test_dbo.t_fsch_1 order by a",
1:01aa176:              new String[][]
1:01aa176:              {
1:01aa176:                  { "101", "-101", },
1:01aa176:                  { "101", "-101", },
1:01aa176:              },
1:01aa176:              false
1:01aa176:              );
1:01aa176:         goodStatement
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "update test_dbo.t_fsch_2 set a = 100 + a"
1:01aa176:              );
1:01aa176:         assertResults
1:01aa176:             (
1:01aa176:              janetConnection,
1:01aa176:              "select * from test_dbo.t_fsch_2 order by a",
1:01aa176:              new String[][]
1:01aa176:              {
1:01aa176:                  { "102", "-102", },
1:01aa176:                  { "102", "-102", },
1:01aa176:              },
1:01aa176:              false
1:01aa176:              );
1:01aa176: 
1:01aa176:     }
1:01aa176:     
1:9a9b932:     /**
1:9a9b932:      * <p>
1:06ac9fb:      * Test that unqualified function references in check constraints resolve
1:06ac9fb:      * to the current schema in effect when the constraint was declared.
1:06ac9fb:      * See DERBY-3944, which is related to the bug above, DERBY-3945.
1:06ac9fb:      * </p>
1:06ac9fb:      */
1:06ac9fb:     public  void    test_005_functionSchema()
1:06ac9fb:         throws Exception
1:06ac9fb:     {
1:06ac9fb:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:06ac9fb:         Connection  janetConnection = openUserConnection( JANET );
1:06ac9fb: 
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "create function f_3944\n" +
1:06ac9fb:              "(\n" +
1:06ac9fb:              "    a int\n" +
1:06ac9fb:              ")\n" +
1:06ac9fb:              "returns int\n" +
1:06ac9fb:              "language java\n" +
1:06ac9fb:              "deterministic\n" +
1:06ac9fb:              "parameter style java\n" +
1:06ac9fb:              "no sql\n" +
1:06ac9fb:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "create table t_3944( a int, constraint t_3944_check check ( f_3944( a ) < 0 ) )"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "grant insert on t_3944 to public"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "grant execute on function f_3944 to public"
1:06ac9fb:              );
1:06ac9fb: 
1:06ac9fb:         expectExecutionError
1:06ac9fb:             (
1:06ac9fb:              janetConnection,
1:06ac9fb:              CONSTRAINT_VIOLATION,
1:06ac9fb:              "insert into test_dbo.t_3944( a ) values ( -100 )"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              janetConnection,
1:06ac9fb:              "insert into test_dbo.t_3944( a ) values ( 200 )"
1:06ac9fb:              );
1:06ac9fb:         assertResults
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "select * from t_3944 order by a",
1:06ac9fb:              new String[][]
1:06ac9fb:              {
1:06ac9fb:                  { "200", },
1:06ac9fb:              },
1:06ac9fb:              false
1:06ac9fb:              );
1:06ac9fb:     }
1:06ac9fb: 
1:06ac9fb:    /**
1:06ac9fb:      * <p>
1:06ac9fb:      * Test that unqualified function references in views resolve
1:06ac9fb:      * to the view's schema.
1:06ac9fb:      * See DERBY-3953, which is related to the bugs above, DERBY-3944 and DERBY-3945.
1:06ac9fb:      * </p>
1:06ac9fb:      */
1:06ac9fb:     public  void    test_006_functionSchema()
1:06ac9fb:         throws Exception
1:06ac9fb:     {
1:06ac9fb:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:06ac9fb:         Connection  janetConnection = openUserConnection( JANET );
1:06ac9fb: 
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "create function f_3953\n" +
1:06ac9fb:              "(\n" +
1:06ac9fb:              "    a int\n" +
1:06ac9fb:              ")\n" +
1:06ac9fb:              "returns int\n" +
1:06ac9fb:              "language java\n" +
1:06ac9fb:              "deterministic\n" +
1:06ac9fb:              "parameter style java\n" +
1:06ac9fb:              "no sql\n" +
1:06ac9fb:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "create view v_3953( a, b ) as values ( f_3953( 1 ), f_3953( 2 ) )"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "grant select on v_3953 to public"
1:06ac9fb:              );
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              dboConnection,
1:06ac9fb:              "grant execute on function f_3953 to public"
1:06ac9fb:              );
1:06ac9fb:         
1:06ac9fb:         goodStatement
1:06ac9fb:             (
1:06ac9fb:              janetConnection,
1:06ac9fb:              "create function f_3953\n" +
1:06ac9fb:              "(\n" +
1:06ac9fb:              "    a int\n" +
1:06ac9fb:              ")\n" +
1:06ac9fb:              "returns int\n" +
1:06ac9fb:              "language java\n" +
1:06ac9fb:              "deterministic\n" +
1:06ac9fb:              "parameter style java\n" +
1:06ac9fb:              "no sql\n" +
1:06ac9fb:              "external name 'java.lang.Math.abs'\n"
1:06ac9fb:              );
1:9a9b932:         
1:06ac9fb:         assertResults
1:06ac9fb:             (
1:06ac9fb:              janetConnection,
1:06ac9fb:              "values ( f_3953( 1 ), f_3953( 2 ) )",
1:06ac9fb:              new String[][]
1:06ac9fb:              {
1:06ac9fb:                  { "1", "2" },
1:06ac9fb:              },
1:06ac9fb:              false
1:06ac9fb:              );
1:06ac9fb:         assertResults
1:06ac9fb:             (
1:06ac9fb:              janetConnection,
1:06ac9fb:              "select * from test_dbo.v_3953",
1:06ac9fb:              new String[][]
1:06ac9fb:              {
1:06ac9fb:                  { "-1", "-2" },
1:06ac9fb:              },
1:06ac9fb:              false
1:06ac9fb:              );
1:06ac9fb:     }
1:06ac9fb: 
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932:     //
1:9a9b932:     // MINIONS
1:9a9b932:     //
1:9a9b932:     ///////////////////////////////////////////////////////////////////////////////////
1:9a9b932: 
1:9a9b932: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             GeneratedColumnsPermsTest.class);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3d2d88b
/////////////////////////////////////////////////////////////////////////
1:      * Test that you DON'T need execute privilege to run functions mentioned in
1:      * generation clauses. That privilege is needed by the user who declared
1:      * the generation clause.
/////////////////////////////////////////////////////////////////////////
1:         goodStatement
/////////////////////////////////////////////////////////////////////////
1:                  { "200", "-200", },
/////////////////////////////////////////////////////////////////////////
1:                  { "201", "-201", },
commit:070d37e
/////////////////////////////////////////////////////////////////////////
1: 
1:         goodStatement
/////////////////////////////////////////////////////////////////////////
1:                  { "2", },
/////////////////////////////////////////////////////////////////////////
1:         goodStatement
/////////////////////////////////////////////////////////////////////////
1:                  { "3", "-3", },
/////////////////////////////////////////////////////////////////////////
1:                  { "4", "-4", },
/////////////////////////////////////////////////////////////////////////
1:                  { "4", "-4", },
/////////////////////////////////////////////////////////////////////////
1:              "delete from test_dbo.t_bp_1 where a = 4"
/////////////////////////////////////////////////////////////////////////
1:         goodStatement
1: 
0:         // this is a wrong result. see DERBY-6434
/////////////////////////////////////////////////////////////////////////
1:                  { "101", "-101", },
/////////////////////////////////////////////////////////////////////////
1:                  { "102", "-102", },
commit:06ac9fb
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test that unqualified function references in check constraints resolve
1:      * to the current schema in effect when the constraint was declared.
1:      * See DERBY-3944, which is related to the bug above, DERBY-3945.
1:      * </p>
1:      */
1:     public  void    test_005_functionSchema()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function f_3944\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create table t_3944( a int, constraint t_3944_check check ( f_3944( a ) < 0 ) )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant insert on t_3944 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant execute on function f_3944 to public"
1:              );
1: 
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              CONSTRAINT_VIOLATION,
1:              "insert into test_dbo.t_3944( a ) values ( -100 )"
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "insert into test_dbo.t_3944( a ) values ( 200 )"
1:              );
1:         assertResults
1:             (
1:              dboConnection,
1:              "select * from t_3944 order by a",
1:              new String[][]
1:              {
1:                  { "200", },
1:              },
1:              false
1:              );
1:     }
1: 
1:    /**
1:      * <p>
1:      * Test that unqualified function references in views resolve
1:      * to the view's schema.
1:      * See DERBY-3953, which is related to the bugs above, DERBY-3944 and DERBY-3945.
1:      * </p>
1:      */
1:     public  void    test_006_functionSchema()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function f_3953\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create view v_3953( a, b ) as values ( f_3953( 1 ), f_3953( 2 ) )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant select on v_3953 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant execute on function f_3953 to public"
1:              );
1:         
1:         goodStatement
1:             (
1:              janetConnection,
1:              "create function f_3953\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'java.lang.Math.abs'\n"
1:              );
1:         
1:         assertResults
1:             (
1:              janetConnection,
1:              "values ( f_3953( 1 ), f_3953( 2 ) )",
1:              new String[][]
1:              {
1:                  { "1", "2" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.v_3953",
1:              new String[][]
1:              {
1:                  { "-1", "-2" },
1:              },
1:              false
1:              );
1:     }
1: 
commit:01aa176
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test that unqualified function references in generation clauses resolve
1:      * to the current schema in effect when the generated column was added.
1:      * See DERBY-3945.
1:      * </p>
1:      */
1:     public  void    test_004_functionSchema()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         //
1:         // Schema.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function f_fsch_1\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create table t_fsch_1( a int, b generated always as ( f_fsch_1( a ) ) )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create table t_fsch_2( a int )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "alter table t_fsch_2 add column b generated always as ( f_fsch_1( a ) )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant execute on function f_fsch_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant select on t_fsch_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant insert on t_fsch_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant update on t_fsch_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant select on t_fsch_2 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant insert on t_fsch_2 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant update on t_fsch_2 to public"
1:              );
1: 
1:         goodStatement
1:             (
1:              janetConnection,
1:              "create function f_fsch_1\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'java.lang.Math.abs'\n"
1:              );
1: 
1:         //
1:         // Populate
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "insert into test_dbo.t_fsch_1( a ) values ( 1 )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "insert into test_dbo.t_fsch_2( a ) values ( 2 )"
1:              );
1: 
1:         //
1:         // Verify insert by other user
1:         //
1:         goodStatement
1:             (
1:              janetConnection,
1:              "insert into test_dbo.t_fsch_1( a ) values ( 1 )"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_fsch_1 order by a",
1:              new String[][]
1:              {
1:                  { "1", "-1", },
1:                  { "1", "-1", },
1:              },
1:              false
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "insert into test_dbo.t_fsch_2( a ) values ( 2 )"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_fsch_2 order by a",
1:              new String[][]
1:              {
1:                  { "2", "-2", },
1:                  { "2", "-2", },
1:              },
1:              false
1:              );
1: 
1:         //
1:         // Verify update by other user
1:         //
1:         goodStatement
1:             (
1:              janetConnection,
1:              "update test_dbo.t_fsch_1 set a = 100 + a"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_fsch_1 order by a",
1:              new String[][]
1:              {
1:                  { "101", "-101", },
1:                  { "101", "-101", },
1:              },
1:              false
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "update test_dbo.t_fsch_2 set a = 100 + a"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_fsch_2 order by a",
1:              new String[][]
1:              {
1:                  { "102", "-102", },
1:                  { "102", "-102", },
1:              },
1:              false
1:              );
1: 
1:     }
1:     
commit:9a9b932
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsPermsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.DriverManager;
0: import java.util.ArrayList;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.iapi.util.StringUtil;
0: import org.apache.derby.catalog.DefaultInfo;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
0: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: 
1: /**
1:  * <p>
1:  * Test permissions on generated columns. See DERBY-481.
1:  * </p>
1:  */
1: public class GeneratedColumnsPermsTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      JANET = "JANET";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, JANET };
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public GeneratedColumnsPermsTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(GeneratedColumnsPermsTest.class);
1: 
1:         Test        cleanTest = new CleanDatabaseTestSetup( suite );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( cleanTest, LEGAL_USERS, "generatedColumnsPermissions" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1: 
1:         return authorizedTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that you need select/insert/update/delete privileges on a generated column and not just on
1:      * the columns it references.
1:      * </p>
1:      */
1:     public  void    test_001_basicPermissions()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         //
1:         // Verify correct behavior when have granted only SELECT and UPDATE on the referenced column.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create table t_bp_1( a int, b int generated always as ( -a ) )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "insert into t_bp_1( a ) values ( 1 )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant select ( a ) on t_bp_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant update ( a ) on t_bp_1 to public"
1:              );
1:         
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_COLUMN_PRIV,
1:              "update test_dbo.t_bp_1 set a = a+ 1"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "delete from test_dbo.t_bp_1 where a = 2"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_COLUMN_PRIV,
1:              "select * from test_dbo.t_bp_1 order by a"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select a from test_dbo.t_bp_1 order by a",
1:              new String[][]
1:              {
0:                  { "1", },
1:              },
1:              false
1:              );
1:         
1:         //
1:         // Verify correct behavior when we also grant SELECT on the generated column.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant select ( b ) on t_bp_1 to public"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_COLUMN_PRIV,
1:              "update test_dbo.t_bp_1 set a = a+ 1"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "delete from test_dbo.t_bp_1 where a = 2"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_bp_1 order by a",
1:              new String[][]
1:              {
0:                  { "1", "-1", },
1:              },
1:              false
1:              );
1:         
1:         //
1:         // Verify correct behavior when we also grant UPDATE on the generated column.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant update ( b ) on t_bp_1 to public"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "update test_dbo.t_bp_1 set a = a+ 1"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "delete from test_dbo.t_bp_1 where a = 2"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_bp_1 order by a",
1:              new String[][]
1:              {
0:                  { "2", "-2", },
1:              },
1:              false
1:              );
1:         
1:         //
1:         // Verify correct behavior when we also grant INSERT on the table.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant insert on t_bp_1 to public"
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "insert into test_dbo.t_bp_1( a ) values ( 100 )"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
1:              LACK_TABLE_PRIV,
1:              "delete from test_dbo.t_bp_1 where a = 2"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_bp_1 order by a",
1:              new String[][]
1:              {
0:                  { "2", "-2", },
1:                  { "100", "-100", },
1:              },
1:              false
1:              );
1:         
1:         //
1:         // Verify correct behavior when we also grant DELETE on the table.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant delete on t_bp_1 to public"
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "delete from test_dbo.t_bp_1 where a = 2"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_bp_1 order by a",
1:              new String[][]
1:              {
1:                  { "100", "-100", },
1:              },
1:              false
1:              );
1:    }
1: 
1:     /**
1:      * <p>
0:      * Test that you need execute privilege to run functions mentioned in
0:      * generation clauses.
1:      * </p>
1:      */
1:     public  void    test_002_functionPermissions()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         //
1:         // Verify correct behavior when EXECUTE privilege is not granted.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function f_fp_minus\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create table t_fp_1( a int, b int generated always as ( test_dbo.f_fp_minus( a ) ) )"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant update on t_fp_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant insert on t_fp_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant select on t_fp_1 to public"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "insert into test_dbo.t_fp_1( a ) values ( 100 )"
1:              );
1: 
1:         goodStatement
1:             (
1:              janetConnection,
1:              "create function f_fp_minus\n" +
1:              "(\n" +
1:              "    a int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "deterministic\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'java.lang.Math.abs'\n"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
0:              LACK_EXECUTE_PRIV,
1:              "update test_dbo.t_fp_1 set a = a + 1"
1:              );
1:         expectExecutionError
1:             (
1:              janetConnection,
0:              LACK_EXECUTE_PRIV,
1:              "insert into test_dbo.t_fp_1( a ) values ( 200 )"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_fp_1 order by a",
1:              new String[][]
1:              {
1:                  { "100", "-100", },
1:              },
1:              false
1:              );
1: 
1:         //
1:         // Verify correct behavior when EXECUTE privilege is granted.
1:         //
1:         goodStatement
1:             (
1:              dboConnection,
1:              "grant execute on function f_fp_minus to public"
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "update test_dbo.t_fp_1 set a = a + 1"
1:              );
1:         goodStatement
1:             (
1:              janetConnection,
1:              "insert into test_dbo.t_fp_1( a ) values ( 200 )"
1:              );
1:         assertResults
1:             (
1:              janetConnection,
1:              "select * from test_dbo.t_fp_1 order by a",
1:              new String[][]
1:              {
0:                  { "101", "-101", },
1:                  { "200", "-200", },
1:              },
1:              false
1:              );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Test ddl that can only be issued when authorization is turned on.
1:      * </p>
1:      */
1:     public  void    test_003_ddl()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         //
1:         // Verify that current_role is not allowed in generation clauses.
1:         //
1:         expectCompilationError
1:             (
1:              UNSTABLE_RESULTS,
1:              "create table t_ddl_1( a int, b varchar( 128 ) generated always as ( current_role ) )"
1:              );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: }
============================================================================