1:01217c2: /*
1:01217c2: 
1:01217c2:    Derby - Class org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor
1:01217c2: 
1:01217c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:01217c2:    contributor license agreements.  See the NOTICE file distributed with
1:01217c2:    this work for additional information regarding copyright ownership.
1:01217c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:01217c2:    (the "License"); you may not use this file except in compliance with
1:01217c2:    the License.  You may obtain a copy of the License at
1:01217c2: 
1:01217c2:       http://www.apache.org/licenses/LICENSE-2.0
1:01217c2: 
1:01217c2:    Unless required by applicable law or agreed to in writing, software
1:01217c2:    distributed under the License is distributed on an "AS IS" BASIS,
1:01217c2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01217c2:    See the License for the specific language governing permissions and
1:01217c2:    limitations under the License.
1:01217c2: 
1:01217c2:  */
1:01217c2: package org.apache.derby.impl.sql.compile;
1:01217c2: 
1:01217c2: import org.apache.derby.iapi.error.StandardException;
1:01217c2: import org.apache.derby.iapi.sql.compile.Visitable;
1:01217c2: import org.apache.derby.iapi.sql.compile.Visitor;
1:01217c2: 
1:01217c2: /**
1:01217c2:  * Replaces a <em>source</em> expression with a <em>target</em>
1:01217c2:  * expression.  
1:01217c2:  * 
1:01217c2:  */
1:01217c2: class SubstituteExpressionVisitor implements Visitor 
1:01217c2: {
1:01217c2: 	private ValueNode source;
1:01217c2: 	private ValueNode target;
1:e1f49ca:     private Class<?>  skipOverClass;
1:01217c2: 	
1:01217c2: 	SubstituteExpressionVisitor(
1:e1f49ca:             ValueNode s, ValueNode t, Class<?> skipThisClass)
1:01217c2: 	{
1:01217c2: 		source = s;
1:01217c2: 		target = t;
1:01217c2: 		skipOverClass = skipThisClass;
1:01217c2: 	}
1:01217c2: 
1:31d80c0: 	/**
1:31d80c0: 	 * used by GroupByNode to process expressions by complexity level.
1:31d80c0: 	 */
1:3bb140c:     ValueNode getSource()
1:31d80c0: 	{
1:31d80c0: 		return source;
1:31d80c0: 	}
1:31d80c0: 
1:01217c2: 	public Visitable visit(Visitable node) throws StandardException 
1:01217c2: 	{
1:01217c2: 		if (!(node instanceof ValueNode))
1:01217c2: 		{
1:01217c2: 			return node;
1:01217c2: 		}
1:01217c2: 		
1:01217c2: 		ValueNode nd = (ValueNode)node;
1:01217c2: 		if (nd.isEquivalent(source)) 
1:01217c2: 		{
1:01217c2: 			return target;
1:01217c2: 		} 
1:01217c2: 		else 
1:01217c2: 		{
1:01217c2: 			return node;
1:01217c2: 		}
1:01217c2: 	}
1:01217c2: 
1:01217c2: 	public boolean stopTraversal() 
1:01217c2: 	{
1:01217c2: 		return false;
1:01217c2: 	}
1:01217c2: 
1:01217c2: 	public boolean skipChildren(Visitable node) 
1:01217c2: 	{
1:01217c2: 		return (skipOverClass == null) ?
1:01217c2: 				false:
1:01217c2: 				skipOverClass.isInstance(node);
1:01217c2: 	}
1:dd2f5a8: 
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:dd2f5a8: 	}
1:01217c2: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:     private Class<?>  skipOverClass;
1:             ValueNode s, ValueNode t, Class<?> skipThisClass)
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1:     ValueNode getSource()
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:31d80c0
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * used by GroupByNode to process expressions by complexity level.
1: 	 */
0: 	public ValueNode getSource()
1: 	{
1: 		return source;
1: 	}
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
1: /**
1:  * Replaces a <em>source</em> expression with a <em>target</em>
1:  * expression.  
1:  * 
0:  * @author manish
1:  */
1: class SubstituteExpressionVisitor implements Visitor 
1: {
1: 	private ValueNode source;
1: 	private ValueNode target;
0: 	private Class     skipOverClass;
1: 	
1: 	SubstituteExpressionVisitor(
0: 			ValueNode s, ValueNode t, Class skipThisClass)  
1: 	{
1: 		source = s;
1: 		target = t;
1: 		skipOverClass = skipThisClass;
1: 	}
1: 
1: 	public Visitable visit(Visitable node) throws StandardException 
1: 	{
1: 		if (!(node instanceof ValueNode))
1: 		{
1: 			return node;
1: 		}
1: 		
1: 		ValueNode nd = (ValueNode)node;
1: 		if (nd.isEquivalent(source)) 
1: 		{
1: 			return target;
1: 		} 
1: 		else 
1: 		{
1: 			return node;
1: 		}
1: 	}
1: 
1: 	public boolean stopTraversal() 
1: 	{
1: 		return false;
1: 	}
1: 
1: 	public boolean skipChildren(Visitable node) 
1: 	{
1: 		return (skipOverClass == null) ?
1: 				false:
1: 				skipOverClass.isInstance(node);
1: 	}
1: }
============================================================================