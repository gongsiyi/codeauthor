1:232d09a: /*
1:232d09a: 
1:232d09a:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines
1:232d09a: 
1:232d09a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:232d09a:    contributor license agreements.  See the NOTICE file distributed with
1:232d09a:    this work for additional information regarding copyright ownership.
1:232d09a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:232d09a:    (the "License"); you may not use this file except in compliance with
1:232d09a:    the License.  You may obtain a copy of the License at
1:232d09a: 
1:232d09a:      http://www.apache.org/licenses/LICENSE-2.0
1:232d09a: 
1:232d09a:    Unless required by applicable law or agreed to in writing, software
1:232d09a:    distributed under the License is distributed on an "AS IS" BASIS,
1:232d09a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:232d09a:    See the License for the specific language governing permissions and
1:232d09a:    limitations under the License.
1:232d09a: 
1:232d09a:  */
1:232d09a: 
1:232d09a: package org.apache.derbyTesting.functionTests.tests.lang;
1:232d09a: 
1:8a818c8: import java.math.BigDecimal;
1:8a818c8: import java.sql.Blob;
1:8a818c8: import java.sql.Clob;
1:8a818c8: import java.sql.Date;
1:8a818c8: import java.sql.ResultSet;
1:8a818c8: import java.sql.Time;
1:8a818c8: import java.sql.Timestamp;
1:8a818c8: import java.sql.SQLException;
1:8a818c8: 
1:232d09a: import java.text.MessageFormat;
1:1653bcc: import java.util.ArrayList;
1:1653bcc: import java.util.StringTokenizer;
1:232d09a: 
1:8a818c8: import org.apache.derby.iapi.types.HarmonySerialBlob;
1:8a818c8: import org.apache.derby.iapi.types.HarmonySerialClob;
1:8a818c8: 
1:232d09a: /**
1:232d09a:  * <p>
1:232d09a:  * Varargs routines used by VarargsTest.
1:232d09a:  * </p>
1:232d09a:  */
1:232d09a: public  class   VarargsRoutines
1:232d09a: {
1:232d09a:     ///////////////////////////////////////////////////////////////////////////////////
1:232d09a:     //
1:232d09a:     // CONSTANTS
1:232d09a:     //
1:232d09a:     ///////////////////////////////////////////////////////////////////////////////////
1:232d09a: 
1:232d09a:     ///////////////////////////////////////////////////////////////////////////////////
1:232d09a:     //
1:232d09a:     // STATE
1:232d09a:     //
1:232d09a:     ///////////////////////////////////////////////////////////////////////////////////
1:232d09a: 
1:232d09a:     ///////////////////////////////////////////////////////////////////////////////////
1:232d09a:     //
1:232d09a:     // SQL ROUTINES
1:232d09a:     //
1:232d09a:     ///////////////////////////////////////////////////////////////////////////////////
1:232d09a: 
1:ba70926:     //////////////////
1:ba70926:     //
1:ba70926:     // SIMPLE ROUTINES
1:ba70926:     //
1:ba70926:     //////////////////
1:ba70926: 
1:232d09a:     /** Compute the maximum of a series of ints */
1:232d09a:     public  static  Integer max( Integer... values )
1:232d09a:     {
1:232d09a:         if ( values == null ) { return null; }
1:232d09a:         if ( values.length == 0 ) { return null; }
1:232d09a: 
1:232d09a:         int     result = Integer.MIN_VALUE;
1:232d09a: 
1:232d09a:         for ( Integer value : values )
1:232d09a:         {
1:232d09a:             if ( value ==  null ) { return null; }
1:232d09a:             result = Math.max( result, value.intValue() );
1:232d09a:         }
1:232d09a: 
1:232d09a:         return result;
1:232d09a:     }
1:232d09a: 
1:232d09a:     /** Format a message */
1:232d09a:     public  static  String  formatMessage( String message, String... args )
1:232d09a:     {
1:232d09a:         return MessageFormat.format( message, args );
1:232d09a:     }
1:232d09a: 
1:ba70926:     //////////////////////////
1:ba70926:     //
1:ba70926:     // PRIMITIVES VS OBJECTS
1:ba70926:     //
1:ba70926:     //////////////////////////
1:ba70926: 
1:ba70926:     public  static  String  ambiguousTypes( int... a )    { return "primitive";}
1:ba70926:     public  static  String  ambiguousTypes( Integer... a )    { return "wrapper";}
1:ba70926: 
1:ba70926:     public  static  Integer maxInts( int... values )
1:ba70926:     {
1:ba70926:         if ( values == null ) { return null; }
1:ba70926:         if ( values.length == 0 ) { return null; }
1:ba70926: 
1:ba70926:         int     result = Integer.MIN_VALUE;
1:ba70926: 
1:ba70926:         for ( int value : values )  { result = Math.max( result, value ); }
1:ba70926: 
1:ba70926:         return result;
1:ba70926:     }
1:ba70926: 
1:ba70926:     //////////////////////////
1:ba70926:     //
1:ba70926:     // NON-VARARGS METHODS
1:ba70926:     //
1:ba70926:     //////////////////////////
1:ba70926: 
1:ba70926:     public  static  String  nonVarargsMethod( int a )    { return "shouldn't be resolved";}
1:ba70926:     public  static  String  nonVarargsMethod( int[] a )    { return "shouldn't be resolved";}
1:ba70926: 
1:ba70926:     //////////////////////////
1:ba70926:     //
1:ba70926:     // VARARGS & NON-VARARGS RESOLUTIONS
1:ba70926:     //
1:ba70926:     //////////////////////////
1:ba70926: 
1:ba70926:     public  static  Integer vnvr( int a )    { return -a;}
1:ba70926:     public  static  Integer vnvr( int... a )    { return maxInts( a );}
1:ba70926: 
1:ba70926:     //////////////////////////
1:ba70926:     //
1:ba70926:     // LEADING NON-VARARGS
1:ba70926:     //
1:ba70926:     //////////////////////////
1:ba70926: 
1:ba70926:     public  static  Integer lnv( int... a ) { return maxInts( a );}
1:ba70926:     public  static  Integer lnv( int first, int...a ) { return maxInts( a );}
1:ba70926:     public  static  Integer lnv( int first, int second, int...a ) { return maxInts( a );}
1:ba70926: 
1:ba70926:     //////////////////////////
1:ba70926:     //
1:ba70926:     // IN, OUT, IN/OUT PARAMETERS
1:ba70926:     //
1:ba70926:     //////////////////////////
1:ba70926: 
1:ba70926:     public  static  void    inVarargs( String[] result, int... values )
1:ba70926:     {
1:ba70926:         String  retval;
1:ba70926:         if ( values == null ) { retval = null; }
1:ba70926:         else if ( values.length == 0 ) { retval = null; }
1:ba70926:         else
1:ba70926:         {
1:ba70926:             StringBuilder   buffer = new StringBuilder();
1:ba70926: 
1:ba70926:             buffer.append( "RESULT: " );
1:ba70926:             
1:ba70926:             for ( int value : values )
1:ba70926:             {
1:ba70926:                 buffer.append( " " + Integer.toString( value ) );
1:ba70926:             }
1:ba70926: 
1:ba70926:             retval = buffer.toString();
1:ba70926:         }
1:ba70926: 
1:ba70926:         result[ 0 ] = retval;
1:ba70926:     }
1:ba70926: 
1:ba70926:     public  static  void    outVarargs( int seed, int[]... values )
1:ba70926:         throws Exception
1:ba70926:     {
1:ba70926:         String  retval;
1:ba70926:         if ( values == null ) { return; }
1:ba70926:         else
1:ba70926:         {
1:ba70926:             for ( int i = 0; i < values.length; i++ )
1:ba70926:             {
1:ba70926:                 values[ i ][ 0 ] = seed + i;
1:ba70926:             }
1:ba70926:         }
1:ba70926:     }
1:ba70926: 
1:ba70926:     public  static  void    inoutVarargs( int seed, int[]... values )
1:ba70926:         throws Exception
1:ba70926:     {
1:ba70926:         String  retval;
1:ba70926:         if ( values == null ) { return; }
1:ba70926:         else
1:ba70926:         {
1:ba70926:             for ( int i = 0; i < values.length; i++ )
1:ba70926:             {
1:ba70926:                 values[ i ][ 0 ] += seed;
1:ba70926:             }
1:ba70926:         }
1:ba70926:     }
1:ba70926: 
1:ba70926:     ////////////////////////
1:ba70926:     //
1:ba70926:     // DATATYPE COVERAGE
1:ba70926:     //
1:ba70926:     ////////////////////////
1:ba70926: 
1:8a818c8:     public  static  String  add( String seed, int... values )
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:ba70926: 
1:8a818c8:         int     result = 0;
1:8a818c8: 
1:8a818c8:         for ( int value : values ) { result += value; }
1:8a818c8: 
1:8a818c8:         return "int " + seed + " " + result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     public  static  String  add( String seed, long... values )
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( long value : values ) { result += value; }
1:8a818c8: 
1:8a818c8:         return "long " + seed + " " + result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     public  static  String  add( String seed, short... values )
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         short     result = 0;
1:8a818c8: 
1:8a818c8:         for ( short value : values ) { result += value; }
1:8a818c8: 
1:8a818c8:         return "short " + seed + " " + result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     public  static  String  add( String seed, Blob... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( Blob value : values ) { result += addBytes( value.getBytes( 1L, (int) value.length() ) ); }
1:8a818c8: 
1:8a818c8:         return "blob " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, boolean... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         int     result = 0;
1:8a818c8: 
1:8a818c8:         for ( boolean value : values )  { if ( value ) {  result++; } }
1:8a818c8: 
1:8a818c8:         return "boolean " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, String... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         String  result = "";
1:8a818c8: 
1:8a818c8:         for ( String value : values )  { result += value; }
1:8a818c8: 
1:8a818c8:         return "String " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, byte[]... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         int result = 0;
1:8a818c8: 
1:8a818c8:         for ( byte[] value : values ) { result += addBytes( value ); }
1:8a818c8: 
1:8a818c8:         return "byte[] " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, Clob... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         String  result = "";
1:8a818c8: 
1:8a818c8:         for ( Clob value : values ) { result += value.getSubString( 1L, (int) value.length() ); }
1:8a818c8: 
1:8a818c8:         return "clob " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, Date... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( Object value : values ) { result ++; }
1:8a818c8: 
1:8a818c8:         return "date " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, Time... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( Object value : values ) { result ++; }
1:8a818c8: 
1:8a818c8:         return "time " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, Timestamp... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( Object value : values ) { result ++; }
1:8a818c8: 
1:8a818c8:         return "timestamp " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  String  add( String seed, BigDecimal... values )
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( BigDecimal value : values ) { result += value.longValue(); }
1:8a818c8: 
1:8a818c8:         return "bigdecimal " + seed + " " + result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     public  static  String  add( String seed, double... values )
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         double     result = 0.0;
1:8a818c8: 
1:8a818c8:         for ( double value : values ) { result += value; }
1:8a818c8: 
1:8a818c8:         return "double " + seed + " " + result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     public  static  String  add( String seed, float... values )
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         float     result = 0.0F;
1:8a818c8: 
1:8a818c8:         for ( float value : values ) { result += value; }
1:8a818c8: 
1:8a818c8:         return "float " + seed + " " + result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     public  static  String  add( String seed, Price... values )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         if ( values == null ) { return null; }
1:8a818c8:         if ( values.length == 0 ) { return null; }
1:8a818c8: 
1:8a818c8:         long     result = 0;
1:8a818c8: 
1:8a818c8:         for ( Object value : values ) { result ++; }
1:8a818c8: 
1:8a818c8:         return "Price " + seed + " " + result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     private static  int addChars( String value )
1:8a818c8:     {
1:8a818c8:         int result = 0;
1:8a818c8: 
1:8a818c8:         for ( int i = 0; i < value.length(); i++ ) { result += value.charAt( i ); }
1:8a818c8: 
1:8a818c8:         return result;
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     public  static  Blob    makeBlob( String contents )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         return new HarmonySerialBlob( makeBytes( contents ) );
1:8a818c8:     }
1:8a818c8:     public  static  byte[]    makeBytes( String contents )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         int count = contents.length();
1:8a818c8:         byte[]  bytes = new byte[ count ];
1:8a818c8: 
1:8a818c8:         for ( int i = 0; i < count; i++ ) { bytes[ i ] = (byte) (contents.charAt( i ) - '0'); }
1:8a818c8: 
1:8a818c8:         return bytes;
1:8a818c8:     }
1:8a818c8:     public  static  Clob    makeClob( String contents )
1:8a818c8:         throws SQLException
1:8a818c8:     {
1:8a818c8:         return new HarmonySerialClob( contents );
1:8a818c8:     }
1:8a818c8: 
1:8a818c8:     private static  int addBytes( byte[] value )
1:8a818c8:     {
1:8a818c8:         int result = 0;
1:8a818c8: 
1:8a818c8:         for ( byte b : value ) { result += b; }
1:8a818c8: 
1:8a818c8:         return result;
1:8a818c8:     }
1:8a818c8:     
1:8a818c8:     //////////////////////////
1:8a818c8:     //
1:8a818c8:     // TABLE FUNCTIONS
1:8a818c8:     //
1:8a818c8:     //////////////////////////
1:8a818c8: 
1:8a818c8:     public  static  ResultSet   oneColumnRows( String... values )
1:8a818c8:     {
1:8a818c8:         String[]    columnNames = new String[] { "COL1" };
1:8a818c8:         String[][]  rows;
1:8a818c8: 
1:8a818c8:         if ( (values == null) || (values.length == 0) ) { rows = new String[0][]; }
1:8a818c8:         else
1:8a818c8:         {
1:8a818c8:             int count = values.length;
1:8a818c8: 
1:8a818c8:             rows = new String[ count ][];
1:8a818c8:             for ( int i = 0; i < count; i++ ) { rows[ i ] = new String[] { values[ i ] }; }
1:8a818c8:         }
1:8a818c8: 
1:8a818c8:         return new StringArrayVTI( columnNames, rows );
1:8a818c8:     }
1:1653bcc: 
1:1653bcc:     /**
1:1653bcc:      * <p>
1:1653bcc:      * This is a table function which creates a StringArrayVTI out of
1:1653bcc:      * a space separated list of column names, and a varargs of rows.
1:1653bcc:      * Each row is a space separated list of column values. Here is
1:1653bcc:      * a sample usage:
1:1653bcc:      * </p>
1:1653bcc:      *
1:1653bcc:      * <pre>
1:1653bcc:      * connect 'jdbc:derby:memory:db;create=true';
1:1653bcc:      * 
1:1653bcc:      * create function leftTable
1:1653bcc:      * (
1:1653bcc:      *     columnNames varchar( 32672 ),
1:1653bcc:      *     rowContents varchar( 32672 ) ...
1:1653bcc:      * )
1:1653bcc:      * returns table
1:1653bcc:      * (
1:1653bcc:      *     a   varchar( 5 ),
1:1653bcc:      *     b   varchar( 5 )
1:1653bcc:      * )
1:1653bcc:      * language java parameter style derby_jdbc_result_set no sql
1:1653bcc:      * external name 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines.stringArrayTable';
1:1653bcc:      * 
1:1653bcc:      * select * from table( leftTable( 'A B', 'APP T', 'APP S' ) ) l;
1:1653bcc:      * </pre>
1:1653bcc:      */
1:1653bcc:     public  static  ResultSet   stringArrayTable
1:1653bcc:         (
1:1653bcc:          String columnNames,
1:1653bcc:          String... rows
1:1653bcc:          )
1:1653bcc:     {
1:1653bcc:         ArrayList<String>   columnList = new ArrayList<String>();
1:1653bcc:         StringTokenizer colToks = new StringTokenizer( columnNames );
1:1653bcc:         while( colToks.hasMoreTokens() ) { columnList.add( colToks.nextToken()  ); }
1:1653bcc:         String[]    colNameArg = new String[ columnList.size() ];
1:1653bcc:         columnList.toArray( colNameArg );
1:1653bcc: 
1:1653bcc:         ArrayList<String[]> rowList = new ArrayList<String[]>();
1:1653bcc:         for ( String row : rows )
1:1653bcc:         {
1:1653bcc:             ArrayList<String>   valueList = new ArrayList<String>();
1:1653bcc:             StringTokenizer valueToks = new StringTokenizer( row );
1:1653bcc:             while( valueToks.hasMoreTokens() ) { valueList.add( valueToks.nextToken() ); }
1:1653bcc:             String[]    valueRow = new String[ valueList.size() ];
1:1653bcc:             valueList.toArray( valueRow );
1:1653bcc:             rowList.add( valueRow );
1:1653bcc:         }
1:1653bcc: 
1:1653bcc:         String[][]  rowsArg = new String[ rowList.size() ][];
1:1653bcc:         rowList.toArray( rowsArg );
1:1653bcc: 
1:1653bcc:         return new StringArrayVTI( colNameArg, rowsArg );
1:1653bcc:     }
1:1653bcc:     
1:232d09a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:1653bcc
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.StringTokenizer;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * This is a table function which creates a StringArrayVTI out of
1:      * a space separated list of column names, and a varargs of rows.
1:      * Each row is a space separated list of column values. Here is
1:      * a sample usage:
1:      * </p>
1:      *
1:      * <pre>
1:      * connect 'jdbc:derby:memory:db;create=true';
1:      * 
1:      * create function leftTable
1:      * (
1:      *     columnNames varchar( 32672 ),
1:      *     rowContents varchar( 32672 ) ...
1:      * )
1:      * returns table
1:      * (
1:      *     a   varchar( 5 ),
1:      *     b   varchar( 5 )
1:      * )
1:      * language java parameter style derby_jdbc_result_set no sql
1:      * external name 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines.stringArrayTable';
1:      * 
1:      * select * from table( leftTable( 'A B', 'APP T', 'APP S' ) ) l;
1:      * </pre>
1:      */
1:     public  static  ResultSet   stringArrayTable
1:         (
1:          String columnNames,
1:          String... rows
1:          )
1:     {
1:         ArrayList<String>   columnList = new ArrayList<String>();
1:         StringTokenizer colToks = new StringTokenizer( columnNames );
1:         while( colToks.hasMoreTokens() ) { columnList.add( colToks.nextToken()  ); }
1:         String[]    colNameArg = new String[ columnList.size() ];
1:         columnList.toArray( colNameArg );
1: 
1:         ArrayList<String[]> rowList = new ArrayList<String[]>();
1:         for ( String row : rows )
1:         {
1:             ArrayList<String>   valueList = new ArrayList<String>();
1:             StringTokenizer valueToks = new StringTokenizer( row );
1:             while( valueToks.hasMoreTokens() ) { valueList.add( valueToks.nextToken() ); }
1:             String[]    valueRow = new String[ valueList.size() ];
1:             valueList.toArray( valueRow );
1:             rowList.add( valueRow );
1:         }
1: 
1:         String[][]  rowsArg = new String[ rowList.size() ][];
1:         rowList.toArray( rowsArg );
1: 
1:         return new StringArrayVTI( colNameArg, rowsArg );
1:     }
1:     
commit:8a818c8
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Date;
1: import java.sql.ResultSet;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.types.HarmonySerialBlob;
1: import org.apache.derby.iapi.types.HarmonySerialClob;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public  static  String  add( String seed, int... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1:         int     result = 0;
1: 
1:         for ( int value : values ) { result += value; }
1: 
1:         return "int " + seed + " " + result;
1:     }
1:     
1:     public  static  String  add( String seed, long... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( long value : values ) { result += value; }
1: 
1:         return "long " + seed + " " + result;
1:     }
1:     
1:     public  static  String  add( String seed, short... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         short     result = 0;
1: 
1:         for ( short value : values ) { result += value; }
1: 
1:         return "short " + seed + " " + result;
1:     }
1:     
1:     public  static  String  add( String seed, Blob... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( Blob value : values ) { result += addBytes( value.getBytes( 1L, (int) value.length() ) ); }
1: 
1:         return "blob " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, boolean... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         int     result = 0;
1: 
1:         for ( boolean value : values )  { if ( value ) {  result++; } }
1: 
1:         return "boolean " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, String... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         String  result = "";
1: 
1:         for ( String value : values )  { result += value; }
1: 
1:         return "String " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, byte[]... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         int result = 0;
1: 
1:         for ( byte[] value : values ) { result += addBytes( value ); }
1: 
1:         return "byte[] " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, Clob... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         String  result = "";
1: 
1:         for ( Clob value : values ) { result += value.getSubString( 1L, (int) value.length() ); }
1: 
1:         return "clob " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, Date... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( Object value : values ) { result ++; }
1: 
1:         return "date " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, Time... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( Object value : values ) { result ++; }
1: 
1:         return "time " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, Timestamp... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( Object value : values ) { result ++; }
1: 
1:         return "timestamp " + seed + " " + result;
1:     }
1: 
1:     public  static  String  add( String seed, BigDecimal... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( BigDecimal value : values ) { result += value.longValue(); }
1: 
1:         return "bigdecimal " + seed + " " + result;
1:     }
1:     
1:     public  static  String  add( String seed, double... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         double     result = 0.0;
1: 
1:         for ( double value : values ) { result += value; }
1: 
1:         return "double " + seed + " " + result;
1:     }
1:     
1:     public  static  String  add( String seed, float... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         float     result = 0.0F;
1: 
1:         for ( float value : values ) { result += value; }
1: 
1:         return "float " + seed + " " + result;
1:     }
1:     
1:     public  static  String  add( String seed, Price... values )
1:         throws SQLException
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         long     result = 0;
1: 
1:         for ( Object value : values ) { result ++; }
1: 
1:         return "Price " + seed + " " + result;
1:     }
1: 
1:     private static  int addChars( String value )
1:     {
1:         int result = 0;
1: 
1:         for ( int i = 0; i < value.length(); i++ ) { result += value.charAt( i ); }
1: 
1:         return result;
1:     }
1: 
1:     public  static  Blob    makeBlob( String contents )
1:         throws SQLException
1:     {
1:         return new HarmonySerialBlob( makeBytes( contents ) );
1:     }
1:     public  static  byte[]    makeBytes( String contents )
1:         throws SQLException
1:     {
1:         int count = contents.length();
1:         byte[]  bytes = new byte[ count ];
1: 
1:         for ( int i = 0; i < count; i++ ) { bytes[ i ] = (byte) (contents.charAt( i ) - '0'); }
1: 
1:         return bytes;
1:     }
1:     public  static  Clob    makeClob( String contents )
1:         throws SQLException
1:     {
1:         return new HarmonySerialClob( contents );
1:     }
1: 
1:     private static  int addBytes( byte[] value )
1:     {
1:         int result = 0;
1: 
1:         for ( byte b : value ) { result += b; }
1: 
1:         return result;
1:     }
1:     
1:     //////////////////////////
1:     //
1:     // TABLE FUNCTIONS
1:     //
1:     //////////////////////////
1: 
1:     public  static  ResultSet   oneColumnRows( String... values )
1:     {
1:         String[]    columnNames = new String[] { "COL1" };
1:         String[][]  rows;
1: 
1:         if ( (values == null) || (values.length == 0) ) { rows = new String[0][]; }
1:         else
1:         {
1:             int count = values.length;
1: 
1:             rows = new String[ count ][];
1:             for ( int i = 0; i < count; i++ ) { rows[ i ] = new String[] { values[ i ] }; }
1:         }
1: 
1:         return new StringArrayVTI( columnNames, rows );
1:     }
commit:ba70926
/////////////////////////////////////////////////////////////////////////
1:     //////////////////
1:     //
1:     // SIMPLE ROUTINES
1:     //
1:     //////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     //////////////////////////
1:     //
1:     // PRIMITIVES VS OBJECTS
1:     //
1:     //////////////////////////
1: 
1:     public  static  String  ambiguousTypes( int... a )    { return "primitive";}
1:     public  static  String  ambiguousTypes( Integer... a )    { return "wrapper";}
1: 
1:     public  static  Integer maxInts( int... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         int     result = Integer.MIN_VALUE;
1: 
1:         for ( int value : values )  { result = Math.max( result, value ); }
1: 
1:         return result;
1:     }
1: 
1:     //////////////////////////
1:     //
1:     // NON-VARARGS METHODS
1:     //
1:     //////////////////////////
1: 
1:     public  static  String  nonVarargsMethod( int a )    { return "shouldn't be resolved";}
1:     public  static  String  nonVarargsMethod( int[] a )    { return "shouldn't be resolved";}
1: 
1:     //////////////////////////
1:     //
1:     // VARARGS & NON-VARARGS RESOLUTIONS
1:     //
1:     //////////////////////////
1: 
1:     public  static  Integer vnvr( int a )    { return -a;}
1:     public  static  Integer vnvr( int... a )    { return maxInts( a );}
1: 
1:     //////////////////////////
1:     //
1:     // LEADING NON-VARARGS
1:     //
1:     //////////////////////////
1: 
1:     public  static  Integer lnv( int... a ) { return maxInts( a );}
1:     public  static  Integer lnv( int first, int...a ) { return maxInts( a );}
1:     public  static  Integer lnv( int first, int second, int...a ) { return maxInts( a );}
1: 
1:     //////////////////////////
1:     //
1:     // IN, OUT, IN/OUT PARAMETERS
1:     //
1:     //////////////////////////
1: 
1:     public  static  void    inVarargs( String[] result, int... values )
1:     {
1:         String  retval;
1:         if ( values == null ) { retval = null; }
1:         else if ( values.length == 0 ) { retval = null; }
1:         else
1:         {
1:             StringBuilder   buffer = new StringBuilder();
1: 
1:             buffer.append( "RESULT: " );
1:             
1:             for ( int value : values )
1:             {
1:                 buffer.append( " " + Integer.toString( value ) );
1:             }
1: 
1:             retval = buffer.toString();
1:         }
1: 
1:         result[ 0 ] = retval;
1:     }
1: 
1:     public  static  void    outVarargs( int seed, int[]... values )
1:         throws Exception
1:     {
1:         String  retval;
1:         if ( values == null ) { return; }
1:         else
1:         {
1:             for ( int i = 0; i < values.length; i++ )
1:             {
1:                 values[ i ][ 0 ] = seed + i;
1:             }
1:         }
1:     }
1: 
1:     public  static  void    inoutVarargs( int seed, int[]... values )
1:         throws Exception
1:     {
1:         String  retval;
1:         if ( values == null ) { return; }
1:         else
1:         {
1:             for ( int i = 0; i < values.length; i++ )
1:             {
1:                 values[ i ][ 0 ] += seed;
1:             }
1:         }
1:     }
1: 
1:     ////////////////////////
1:     //
1:     // DATATYPE COVERAGE
1:     //
1:     ////////////////////////
1: 
1: 
commit:232d09a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.text.MessageFormat;
1: 
1: /**
1:  * <p>
1:  * Varargs routines used by VarargsTest.
1:  * </p>
1:  */
1: public  class   VarargsRoutines
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // SQL ROUTINES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Compute the maximum of a series of ints */
1:     public  static  Integer max( Integer... values )
1:     {
1:         if ( values == null ) { return null; }
1:         if ( values.length == 0 ) { return null; }
1: 
1:         int     result = Integer.MIN_VALUE;
1: 
1:         for ( Integer value : values )
1:         {
1:             if ( value ==  null ) { return null; }
1:             result = Math.max( result, value.intValue() );
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /** Format a message */
1:     public  static  String  formatMessage( String message, String... args )
1:     {
1:         return MessageFormat.format( message, args );
1:     }
1: 
1: }
============================================================================