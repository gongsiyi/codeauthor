1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.userDefMethods
1:67614ad: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
14:8f23548: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:8f23548: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.tests.lang;
1:67614ad: import java.sql.*;
1:67614ad: import java.util.Vector;
1:67614ad: 
1:67614ad: 
1:67614ad: //This class defines miscelanious test java methods to be called from sql.
1:67614ad: //These are not generic methods, typically  used by a particular tests.
1:67614ad: public class userDefMethods
1:67614ad: {
1:67614ad:  
1:67614ad: 	//method that does a delete of rows on table t1 based on values from triggers.
1:67614ad:     public static void deleteFromATable() throws SQLException
1:67614ad:     {
1:67614ad: 		Connection con = DriverManager.getConnection("jdbc:default:connection");
1:67614ad:         PreparedStatement statement = null;
1:67614ad:         Statement s = con.createStatement();
1:67614ad:         ResultSet rs = s.executeQuery("SELECT c1 from new org.apache.derby.catalog.TriggerOldTransitionRows() AS EQ");
1:3f5c48a:         Vector<Long> keys = new Vector<Long>();
1:67614ad:         while(rs.next()){
1:39b3237:             keys.addElement(rs.getLong(1));
1:67614ad:         }
1:67614ad:         rs.close();
1:67614ad: 
1:67614ad:         statement = 
1:67614ad:         con.prepareStatement("delete from t1  where c1  = ?");
1:3f5c48a:         for (long key : keys) {
1:67614ad:            statement.setLong(1, key);
1:67614ad:            statement.executeUpdate();
1:67614ad: 		}
1:67614ad:         statement.close();
1:67614ad:     }
1:67614ad: 
1:67614ad: 
1:67614ad: 	public static void deleteFromParent() throws SQLException
1:67614ad:     {
1:67614ad: 		Connection con = DriverManager.getConnection("jdbc:default:connection");
1:67614ad:         String sqlstmt;
1:67614ad: 		Statement stmt = con.createStatement();
1:67614ad: 		sqlstmt = "SELECT a FROM new org.apache.derby.catalog.TriggerOldTransitionRows() AS EQ";
1:67614ad: 		ResultSet rs = stmt.executeQuery(sqlstmt);
1:67614ad: 		sqlstmt = "delete from parent where a = ? ";
1:67614ad: 		PreparedStatement pstmt = con.prepareStatement(sqlstmt);
1:67614ad: 		while(rs.next()){
1:67614ad: 			long value = rs.getLong(1);
1:67614ad: 			if(value == 1 || value == 3)
1:67614ad: 				value = 4;
1:67614ad: 			else
1:67614ad: 				value = 5;
1:67614ad: 			pstmt.setLong(1,value);
1:67614ad: 			pstmt.executeUpdate();
1:67614ad: 		}
1:67614ad: 		rs.close();
1:67614ad: 		stmt.close();
1:67614ad: 		pstmt.close();
1:67614ad: 	}
1:67614ad: 
1:67614ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             keys.addElement(rs.getLong(1));
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:8a59583
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:         Vector<Long> keys = new Vector<Long>();
/////////////////////////////////////////////////////////////////////////
1:         for (long key : keys) {
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5e4e33b
/////////////////////////////////////////////////////////////////////////
0: 			"	REFERENCING NEW AS N_ROW FOR EACH ROW" +
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.tests.lang
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: import java.sql.*;
1: import java.util.Vector;
1: 
1: 
1: //This class defines miscelanious test java methods to be called from sql.
1: //These are not generic methods, typically  used by a particular tests.
1: public class userDefMethods
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1:  
1: 	//method that does a delete of rows on table t1 based on values from triggers.
1:     public static void deleteFromATable() throws SQLException
1:     {
1: 		Connection con = DriverManager.getConnection("jdbc:default:connection");
1:         PreparedStatement statement = null;
0:         String delStr = null;
1:         Statement s = con.createStatement();
1:         ResultSet rs = s.executeQuery("SELECT c1 from new org.apache.derby.catalog.TriggerOldTransitionRows() AS EQ");
0:         Vector keys = new Vector();
1:         while(rs.next()){
0:             keys.addElement(new Long(rs.getLong(1)));
1:         }
1:         rs.close();
1: 
1:         statement = 
1:         con.prepareStatement("delete from t1  where c1  = ?");
0:         for(int i = 0; i < keys.size() ; i++){ 
0:            long key = ((Long)keys.elementAt(i)).longValue();
1:            statement.setLong(1, key);
1:            statement.executeUpdate();
1: 		}
1:         statement.close();
1:     }
1: 
1: 
1: 	public static void deleteFromParent() throws SQLException
1:     {
1: 		Connection con = DriverManager.getConnection("jdbc:default:connection");
1:         String sqlstmt;
1: 		Statement stmt = con.createStatement();
1: 		sqlstmt = "SELECT a FROM new org.apache.derby.catalog.TriggerOldTransitionRows() AS EQ";
1: 		ResultSet rs = stmt.executeQuery(sqlstmt);
1: 		sqlstmt = "delete from parent where a = ? ";
1: 		PreparedStatement pstmt = con.prepareStatement(sqlstmt);
1: 		while(rs.next()){
1: 			long value = rs.getLong(1);
1: 			if(value == 1 || value == 3)
1: 				value = 4;
1: 			else
1: 				value = 5;
1: 			pstmt.setLong(1,value);
1: 			pstmt.executeUpdate();
1: 		}
1: 		rs.close();
1: 		stmt.close();
1: 		pstmt.close();
1: 	}
1: 
1: 
1: }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:8f23548
/////////////////////////////////////////////////////////////////////////
0: 	/* ****
0: 	 * Derby-388: When a set of inserts & updates is performed on a table
0: 	 * and each update fires a trigger that in turn performs other updates,
0: 	 * Derby will sometimes try to recompile the trigger in the middle
0: 	 * of the update process and will throw an NPE when doing so.
0: 	 */
0: 	public static void derby388() throws SQLException
0: 	{
0: 		System.out.println("Running DERBY-388 Test.");
0: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
0: 		boolean needCommit = !conn.getAutoCommit();
0: 		Statement s = conn.createStatement();
1: 
0: 		// Create our objects.
0: 		s.execute("CREATE TABLE D388_T1 (ID INT)");
0: 		s.execute("CREATE TABLE D388_T2 (ID_2 INT)");
0: 		s.execute(
0: 			"CREATE TRIGGER D388_TRIG1 AFTER UPDATE OF ID ON D388_T1" +
0: 			"	REFERENCING NEW AS N_ROW FOR EACH ROW MODE DB2SQL" +
0: 			"	UPDATE D388_T2" +
0: 			"	SET ID_2 = " +
0: 			"	  CASE WHEN (N_ROW.ID <= 0) THEN N_ROW.ID" +
0: 			"	  ELSE 6 END " +
0: 			"   WHERE N_ROW.ID < ID_2"
0: 		);
1: 
0: 		if (needCommit)
0: 			conn.commit();
1: 
0: 		// Statement to insert into D388_T1.
0: 		PreparedStatement ps1 = conn.prepareStatement(
0: 			"INSERT INTO D388_T1 VALUES (?)");
1: 
0: 		// Statement to insert into D388_T2.
0: 		PreparedStatement ps2 = conn.prepareStatement(
0: 			"INSERT INTO D388_T2(ID_2) VALUES (?)");
1: 
0: 		// Statement that will cause the trigger to fire.
0: 		Statement st = conn.createStatement();
0: 		for (int i = 0; i < 20; i++) {
1: 
0: 			for (int id = 0; id < 10; id++) {
1: 
0: 				ps2.setInt(1, id);
0: 				ps2.executeUpdate();
0: 				ps1.setInt(1, 2*id);
0: 				ps1.executeUpdate();
1: 
0: 				if (needCommit)
0: 					conn.commit();
1: 
0: 			}
1: 
0: 			// Execute an update, which will fire the trigger.
0: 			// Note that having the update here is important
0: 			// for the reproduction.  If we try to remove the
0: 			// outer loop and just insert lots of rows followed
0: 			// by a single UPDATE, the problem won't reproduce.
0: 			st.execute("UPDATE D388_T1 SET ID=5");
0: 			if (needCommit)
0: 				conn.commit();
1: 				
0: 		}
1: 
0: 		// Clean up.
0: 		s.execute("DROP TABLE D388_T1");
0: 		s.execute("DROP TABLE D388_T2");
1: 
0: 		if (needCommit)
0: 			conn.commit();
1: 				
0: 		st.close();
0: 		ps1.close();
0: 		ps2.close();
1: 
0: 		System.out.println("DERBY-388 Test Passed.");
0: 	}
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.userDefMethods
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1:       http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.lang;
0: import java.sql.*;
0: import java.util.Vector;
0: 
0: 
0: //This class defines miscelanious test java methods to be called from sql.
0: //These are not generic methods, typically  used by a particular tests.
0: public class userDefMethods
0: {
0:  
0: 	//method that does a delete of rows on table t1 based on values from triggers.
0:     public static void deleteFromATable() throws SQLException
0:     {
0: 		Connection con = DriverManager.getConnection("jdbc:default:connection");
0:         PreparedStatement statement = null;
0:         String delStr = null;
0:         Statement s = con.createStatement();
0:         ResultSet rs = s.executeQuery("SELECT c1 from new org.apache.derby.catalog.TriggerOldTransitionRows() AS EQ");
0:         Vector keys = new Vector();
0:         while(rs.next()){
0:             keys.addElement(new Long(rs.getLong(1)));
0:         }
0:         rs.close();
0: 
0:         statement = 
0:         con.prepareStatement("delete from t1  where c1  = ?");
0:         for(int i = 0; i < keys.size() ; i++){ 
0:            long key = ((Long)keys.elementAt(i)).longValue();
0:            statement.setLong(1, key);
0:            statement.executeUpdate();
0: 		}
0:         statement.close();
0:     }
0: 
0: 
0: 	public static void deleteFromParent() throws SQLException
0:     {
0: 		Connection con = DriverManager.getConnection("jdbc:default:connection");
0:         String sqlstmt;
0: 		Statement stmt = con.createStatement();
0: 		sqlstmt = "SELECT a FROM new org.apache.derby.catalog.TriggerOldTransitionRows() AS EQ";
0: 		ResultSet rs = stmt.executeQuery(sqlstmt);
0: 		sqlstmt = "delete from parent where a = ? ";
0: 		PreparedStatement pstmt = con.prepareStatement(sqlstmt);
0: 		while(rs.next()){
0: 			long value = rs.getLong(1);
0: 			if(value == 1 || value == 3)
0: 				value = 4;
0: 			else
0: 				value = 5;
0: 			pstmt.setLong(1,value);
0: 			pstmt.executeUpdate();
0: 		}
0: 		rs.close();
0: 		stmt.close();
0: 		pstmt.close();
0: 	}
0: 
0: 
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.userDefMethods
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
============================================================================