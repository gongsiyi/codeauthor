1:6950a39: /*
12:6950a39: 
1:6950a39:    Derby - Class org.apache.derby.impl.sql.conn.SQLSessionContextImpl
1:9f60172: 
1:6950a39:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6950a39:    contributor license agreements.  See the NOTICE file distributed with
1:6950a39:    this work for additional information regarding copyright ownership.
1:6950a39:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6950a39:    (the "License"); you may not use this file except in compliance with
1:6950a39:    the License.  You may obtain a copy of the License at
1:9f60172: 
1:6950a39:       http://www.apache.org/licenses/LICENSE-2.0
1:6950a39: 
1:6950a39:    Unless required by applicable law or agreed to in writing, software
1:6950a39:    distributed under the License is distributed on an "AS IS" BASIS,
1:6950a39:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6950a39:    See the License for the specific language governing permissions and
1:6950a39:    limitations under the License.
1:6950a39: 
1:0c5bc3a:  */
1:0c5bc3a: 
1:6950a39: package org.apache.derby.impl.sql.conn;
1:0c5bc3a: 
1:0c5bc3a: import java.util.HashMap;
1:af1c18c: import org.apache.derby.catalog.UUID;
1:6950a39: import org.apache.derby.iapi.sql.conn.SQLSessionContext;
1:6950a39: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:0c5bc3a: 
1:6950a39: public class SQLSessionContextImpl implements SQLSessionContext {
1:0c5bc3a: 
1:9f60172:     private String currentUser;
1:6950a39:     private String currentRole;
1:6950a39:     private SchemaDescriptor currentDefaultSchema;
1:af1c18c: 
1:af1c18c:     /**
1:f6d02c9:      * Maps a constraint id (key) into a Boolean for deferrable
2:af1c18c:      * constraints.
1:af1c18c:      * If the Boolean value is {@code FALSE}, we have immediate
1:af1c18c:      * checking, if it is {@code TRUE} we have deferred checking. Cf. SQL
1:af1c18c:      * SET CONSTRAINT.
1:af1c18c:      */
1:f6d02c9:     private HashMap<UUID, Boolean> constraintModes;
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * True if all deferrable constraints are deferred in this transaction.
1:0c5bc3a:      */
1:0c5bc3a:     private Boolean deferredAll;
1:0c5bc3a: 
1:0c5bc3a:     public SQLSessionContextImpl (
1:0c5bc3a:             SchemaDescriptor sd,
1:0c5bc3a:             String currentUser) {
1:6950a39:         currentRole = null;
1:6950a39:         currentDefaultSchema = sd;
1:9f60172:         this.currentUser = currentUser;
1:0c5bc3a:     }
1:0c5bc3a: 
1:6950a39:     public void setRole(String role) {
1:6950a39:         currentRole = role;
3:0c5bc3a:     }
1:0c5bc3a: 
1:6950a39:     public String getRole() {
1:6950a39:         return currentRole;
1:0c5bc3a:     }
1:0c5bc3a: 
1:9f60172:     public void setUser(String user) {
1:9f60172:         currentUser = user;
1:0c5bc3a:     }
1:0c5bc3a: 
1:9f60172:     public String getCurrentUser() {
1:9f60172:         return currentUser;
1:0c5bc3a:     }
1:0c5bc3a: 
1:6950a39:     public void setDefaultSchema(SchemaDescriptor sd) {
1:6950a39:         currentDefaultSchema = sd;
1:0c5bc3a:     }
1:0c5bc3a: 
1:6950a39:     public SchemaDescriptor getDefaultSchema() {
1:6950a39:         return currentDefaultSchema;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:f6d02c9:     public HashMap<UUID, Boolean> getConstraintModes() {
1:f6d02c9:         return constraintModes != null ?
1:f6d02c9:             new HashMap<UUID, Boolean>(constraintModes) :
1:af1c18c:             null;
1:af1c18c:     }
1:af1c18c: 
2:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:f6d02c9:     public void setConstraintModes(HashMap<UUID, Boolean> hm) {
1:f6d02c9:         this.constraintModes = hm != null ?
1:af1c18c:                 new HashMap<UUID, Boolean>(hm) : null;
1:af1c18c:     }
1:af1c18c: 
1:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:af1c18c:     public void setDeferred(UUID constraintId, boolean deferred) {
1:f6d02c9:         if (constraintModes == null) {
1:f6d02c9:             constraintModes = new HashMap<UUID, Boolean>();
1:af1c18c:         }
1:af1c18c: 
1:f6d02c9:         constraintModes.put(constraintId, Boolean.valueOf(deferred));
1:af1c18c:     }
1:af1c18c: 
1:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:af1c18c:     public Boolean isDeferred(UUID constraintId) {
1:af1c18c:         Boolean v = null;
1:af1c18c: 
1:f6d02c9:         if (constraintModes != null) {
1:f6d02c9:             v = constraintModes.get(constraintId);
1:af1c18c:         }
1:af1c18c: 
1:af1c18c:         if (v != null) {
1:af1c18c:             return v; // Trumps ALL setting since it must have been
1:af1c18c:                       // set later otherwise it would have been
1:af1c18c:                       // deleted
1:af1c18c:         } else {
1:af1c18c:             return deferredAll;
1:af1c18c:         }
1:af1c18c:     }
1:af1c18c: 
1:af1c18c: 
1:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:0c5bc3a:     public void resetConstraintModes() {
1:f6d02c9:         if (constraintModes != null) {
1:f6d02c9:             constraintModes.clear();
1:af1c18c:         }
1:af1c18c: 
1:0c5bc3a:         deferredAll = null;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:0c5bc3a:     public void setDeferredAll(Boolean deferred) {
1:0c5bc3a:         deferredAll = deferred;
1:0c5bc3a:         // This now overrides any individual constraint setting, so
1:0c5bc3a:         // clear those.
1:f6d02c9:         if (constraintModes != null) {
1:f6d02c9:             constraintModes.clear();
1:af1c18c:         }
1:0c5bc3a:     }
1:af1c18c: 
1:0c5bc3a:     /**
1:0c5bc3a:      * {@inheritDoc}
1:0c5bc3a:      */
1:0c5bc3a:     public Boolean getDeferredAll() {
2:0c5bc3a:         return deferredAll;
1:0c5bc3a:     }
1:0c5bc3a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1:      * Maps a constraint id (key) into a Boolean for deferrable
1:     private HashMap<UUID, Boolean> constraintModes;
/////////////////////////////////////////////////////////////////////////
1:     public HashMap<UUID, Boolean> getConstraintModes() {
1:         return constraintModes != null ?
1:             new HashMap<UUID, Boolean>(constraintModes) :
1:     public void setConstraintModes(HashMap<UUID, Boolean> hm) {
1:         this.constraintModes = hm != null ?
1:         if (constraintModes == null) {
1:             constraintModes = new HashMap<UUID, Boolean>();
1:         constraintModes.put(constraintId, Boolean.valueOf(deferred));
1:         if (constraintModes != null) {
1:             v = constraintModes.get(constraintId);
/////////////////////////////////////////////////////////////////////////
1:         if (constraintModes != null) {
1:             constraintModes.clear();
/////////////////////////////////////////////////////////////////////////
1:         if (constraintModes != null) {
1:             constraintModes.clear();
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
0:      * Maps a conglomerate id (key) into a Boolean for deferrable primary/unique
1:      * constraints.
0:     private HashMap<Long, Boolean> uniquePKConstraintModes;
1: 
1:     /**
0:      * Maps a constraint id (key) into a Boolean for deferrable check
1:      * constraints.
1:      * If the Boolean value is {@code FALSE}, we have immediate
1:      * checking, if it is {@code TRUE} we have deferred checking. Cf. SQL
1:      * SET CONSTRAINT.
1:      */
0:     private HashMap<UUID, Boolean> checkConstraintModes;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public HashMap<Long, Boolean> getUniquePKConstraintModes() {
0:         return uniquePKConstraintModes != null ?
0:             new HashMap<Long, Boolean>(uniquePKConstraintModes) :
1:             null;
1:     }
1: 
0:     public HashMap<UUID, Boolean> getCheckConstraintModes() {
0:         return checkConstraintModes != null ?
0:             new HashMap<UUID, Boolean>(checkConstraintModes) :
/////////////////////////////////////////////////////////////////////////
0:         this.uniquePKConstraintModes = hm != null ?
0:     public void setCheckConstraintModes(HashMap<UUID, Boolean> hm) {
0:         this.checkConstraintModes = hm != null ?
1:                 new HashMap<UUID, Boolean>(hm) : null;
1:     }
1: 
0:         if (uniquePKConstraintModes == null) {
0:             uniquePKConstraintModes = new HashMap<Long, Boolean>();
0:         uniquePKConstraintModes.put(Long.valueOf(conglomId),
1:     public void setDeferred(UUID constraintId, boolean deferred) {
0:         if (checkConstraintModes == null) {
0:             checkConstraintModes = new HashMap<UUID, Boolean>();
1:         }
1: 
0:         checkConstraintModes.put(constraintId, Boolean.valueOf(deferred));
1:     }
1: 
0:         if (uniquePKConstraintModes != null) {
0:             v = uniquePKConstraintModes.get(Long.valueOf(conglomId));
/////////////////////////////////////////////////////////////////////////
1:     public Boolean isDeferred(UUID constraintId) {
1:         Boolean v = null;
1: 
0:         if (checkConstraintModes != null) {
0:             v = checkConstraintModes.get(constraintId);
1:         }
1: 
1:         if (v != null) {
1:             return v; // Trumps ALL setting since it must have been
1:                       // set later otherwise it would have been
1:                       // deleted
1:         } else {
1:             return deferredAll;
1:         }
1:     }
1: 
1: 
0:         if (uniquePKConstraintModes != null) {
0:             uniquePKConstraintModes.clear();
1:         }
1: 
0:         if (checkConstraintModes != null) {
0:             checkConstraintModes.clear();
/////////////////////////////////////////////////////////////////////////
0:         if (uniquePKConstraintModes != null) {
0:             uniquePKConstraintModes.clear();
1:         }
1: 
0:         if (checkConstraintModes != null) {
0:             checkConstraintModes.clear();
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Maps a conglomerate id (key) into a Boolean for deferrable constraints.
0:      * There is a 1-1 correspondence for these backing indexes, they are not
0:      * shared). If the Boolean value is {@code FALSE}, we have immediate
0:      * checking, if it is {@code TRUE} we have deferred checking. Cf. SQL
0:      * SET CONSTRAINT.
1:      */
0:     private HashMap<Long, Boolean> constraintModes;
1: 
1:     /**
1:      * True if all deferrable constraints are deferred in this transaction.
1:      */
1:     private Boolean deferredAll;
1: 
1:     public SQLSessionContextImpl (
1:             SchemaDescriptor sd,
1:             String currentUser) {
1: 
0:         if (constraintModes != null) {
0:             this.constraintModes = new HashMap<Long,Boolean>(constraintModes);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
0:     public HashMap<Long, Boolean> getConstraintModes() {
0:         return constraintModes != null ?
0:             new HashMap<Long, Boolean>(constraintModes) :
0:             null;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
0:     public void setConstraintModes(HashMap<Long, Boolean> hm) {
0:         this.constraintModes = hm != null ?
0:                 new HashMap<Long, Boolean>(hm) : null;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
0:     public void setDeferred(long conglomId, boolean deferred) {
0:         if (constraintModes == null) {
0:             constraintModes = new HashMap<Long, Boolean>();
1:         }
1: 
0:         constraintModes.put(Long.valueOf(conglomId),
0:                                 Boolean.valueOf(deferred));
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
0:     public Boolean isDeferred(long conglomId) {
0:         Boolean v = null;
1: 
0:         if (constraintModes != null) {
0:             v = constraintModes.get(Long.valueOf(conglomId));
1:         }
1: 
0:         if (v != null) {
0:             return v; // Trumps ALL setting since it must have been
0:                       // set later otherwise it would have been
0:                       // deleted
0:         } else {
1:             return deferredAll;
1:         }
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public void resetConstraintModes() {
0:         if (constraintModes != null) {
0:             constraintModes.clear();
1:         }
1: 
1:         deferredAll = null;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public void setDeferredAll(Boolean deferred) {
1:         deferredAll = deferred;
1:         // This now overrides any individual constraint setting, so
1:         // clear those.
0:         if (constraintModes != null) {
0:             constraintModes.clear();
1:         }
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public Boolean getDeferredAll() {
1:         return deferredAll;
1:     }
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:     private String currentUser;
0:     public SQLSessionContextImpl (SchemaDescriptor sd, String currentUser) {
1:         this.currentUser = currentUser;
/////////////////////////////////////////////////////////////////////////
1:     public void setUser(String user) {
1:         currentUser = user;
0:     }
1: 
1:     public String getCurrentUser() {
1:         return currentUser;
0:     }
1: 
commit:6950a39
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.conn.SQLSessionContextImpl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
1: package org.apache.derby.impl.sql.conn;
1: 
0: import java.lang.String;
1: import org.apache.derby.iapi.sql.conn.SQLSessionContext;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
1: public class SQLSessionContextImpl implements SQLSessionContext {
1: 
1:     private String currentRole;
1:     private SchemaDescriptor currentDefaultSchema;
1: 
0:     public SQLSessionContextImpl (SchemaDescriptor sd) {
1:         currentRole = null;
1:         currentDefaultSchema = sd;
0:     }
1: 
1:     public void setRole(String role) {
1:         currentRole = role;
0:     }
1: 
1:     public String getRole() {
1:         return currentRole;
0:     }
1: 
1:     public void setDefaultSchema(SchemaDescriptor sd) {
1:         currentDefaultSchema = sd;
0:     }
1: 
1:     public SchemaDescriptor getDefaultSchema() {
1:         return currentDefaultSchema;
0:     }
0: }
============================================================================