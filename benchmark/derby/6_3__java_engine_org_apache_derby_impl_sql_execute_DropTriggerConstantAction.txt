1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropTriggerConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:1e2aae0: import org.apache.derby.iapi.error.StandardException;
1:1e2aae0: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:1e2aae0: import org.apache.derby.iapi.sql.Activation;
1:1e2aae0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:1e2aae0: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:1e2aae0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:1e2aae0: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
1:1e2aae0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:1e2aae0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:1e2aae0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:1e2aae0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:1e2aae0: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	DROP TRIGGER Statement at Execution time.
1:eac0369:  *
1:eac0369:  */
1:08313de: public class DropTriggerConstantAction extends DDLSingleTableConstantAction
4:eac0369: {
1:eac0369: 
1:eac0369: 	private final String			triggerName;
1:eac0369: 	private final SchemaDescriptor	sd;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a DROP TRIGGER statement.
1:eac0369: 	 *
1:eac0369: 	 * @param	sd					Schema that stored prepared statement lives in.
1:eac0369: 	 * @param	triggerName			Name of the Trigger
1:eac0369: 	 * @param	tableId				The table upon which the trigger is defined
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	DropTriggerConstantAction
2:eac0369: 	(
1:eac0369: 		SchemaDescriptor	sd,
1:eac0369: 		String				triggerName,
1:eac0369: 		UUID				tableId
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		super(tableId);
1:eac0369: 		this.sd = sd;
1:eac0369: 		this.triggerName = triggerName;
1:eac0369: 
2:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(sd != null, "SchemaDescriptor is null");
4:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for DROP STATEMENT.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		TriggerDescriptor 			triggerd;
1:eac0369: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		TableDescriptor td = dd.getTableDescriptor(tableId);
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(
1:eac0369: 								SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION,
1:eac0369: 								tableId.toString());
1:eac0369: 		}
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 		lockTableForDDL(tc, td.getHeapConglomerateId(), true);
1:eac0369: 		// get td again in case table shape is changed before lock is acquired
1:eac0369: 		td = dd.getTableDescriptor(tableId);
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(
1:eac0369: 								SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION,
1:eac0369: 								tableId.toString());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 
1:eac0369: 		** Get the trigger descriptor.  We're responsible for raising
1:eac0369: 		** the error if it isn't found 
1:eac0369: 		*/
1:eac0369: 		triggerd = dd.getTriggerDescriptor(triggerName, sd);
1:eac0369: 
1:eac0369: 		if (triggerd == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND_DURING_EXECUTION, "TRIGGER",
1:eac0369: 					(sd.getSchemaName() + "." + triggerName));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 
1:eac0369: 	 	** Prepare all dependents to invalidate.  (This is there chance
1:eac0369: 		** to say that they can't be invalidated.  For example, an open
1:eac0369: 		** cursor referencing a table/trigger that the user is attempting to
1:eac0369: 		** drop.) If no one objects, then invalidate any dependent objects.
1:eac0369: 		*/
1:9213b42:         triggerd.drop(lcc);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "DROP TRIGGER "+triggerName;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9213b42
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         triggerd.drop(lcc);
commit:1e2aae0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.store.access.TransactionController;
commit:08313de
/////////////////////////////////////////////////////////////////////////
1: public class DropTriggerConstantAction extends DDLSingleTableConstantAction
/////////////////////////////////////////////////////////////////////////
0: 	public static void dropTriggerDescriptor
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropTriggerConstantAction
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	DROP TRIGGER Statement at Execution time.
1:  *
0:  *	@author Jamie
1:  */
0: class DropTriggerConstantAction extends DDLSingleTableConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private final String			triggerName;
1: 	private final SchemaDescriptor	sd;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 *	Make the ConstantAction for a DROP TRIGGER statement.
1: 	 *
1: 	 * @param	sd					Schema that stored prepared statement lives in.
1: 	 * @param	triggerName			Name of the Trigger
1: 	 * @param	tableId				The table upon which the trigger is defined
1: 	 *
1: 	 */
1: 	DropTriggerConstantAction
1: 	(
1: 		SchemaDescriptor	sd,
1: 		String				triggerName,
1: 		UUID				tableId
1: 	)
1: 	{
1: 		super(tableId);
1: 		this.sd = sd;
1: 		this.triggerName = triggerName;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(sd != null, "SchemaDescriptor is null");
1: 		}
1: 	}
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for DROP STATEMENT.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		TriggerDescriptor 			triggerd;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
1: 
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		TableDescriptor td = dd.getTableDescriptor(tableId);
1: 		if (td == null)
1: 		{
1: 			throw StandardException.newException(
1: 								SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION,
1: 								tableId.toString());
1: 		}
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 		lockTableForDDL(tc, td.getHeapConglomerateId(), true);
1: 		// get td again in case table shape is changed before lock is acquired
1: 		td = dd.getTableDescriptor(tableId);
1: 		if (td == null)
1: 		{
1: 			throw StandardException.newException(
1: 								SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION,
1: 								tableId.toString());
1: 		}
1: 
1: 		/* 
1: 		** Get the trigger descriptor.  We're responsible for raising
1: 		** the error if it isn't found 
1: 		*/
1: 		triggerd = dd.getTriggerDescriptor(triggerName, sd);
1: 
1: 		if (triggerd == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND_DURING_EXECUTION, "TRIGGER",
1: 					(sd.getSchemaName() + "." + triggerName));
1: 		}
1: 
1: 		/* 
1: 	 	** Prepare all dependents to invalidate.  (This is there chance
1: 		** to say that they can't be invalidated.  For example, an open
1: 		** cursor referencing a table/trigger that the user is attempting to
1: 		** drop.) If no one objects, then invalidate any dependent objects.
1: 		*/
0: 		dropTriggerDescriptor(lcc, dm, dd, tc, triggerd, activation);
1: 	}
1: 
0: 	static void dropTriggerDescriptor
1: 	(
0: 		LanguageConnectionContext	lcc,
0: 		DependencyManager 			dm,
0: 		DataDictionary				dd,
0: 		TransactionController		tc,
0: 		TriggerDescriptor			triggerd,
0: 		Activation					activation
0: 	) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(triggerd!=null, "trigger descriptor is null");
1: 		}
1: 
0: 		dm.invalidateFor(triggerd, DependencyManager.DROP_TRIGGER, lcc);
1: 
0: 		// Drop the trigger
0: 		dd.dropTriggerDescriptor(triggerd, tc);
1: 
0: 		// Clear the dependencies for the trigger 
0: 		dm.clearDependencies(lcc, triggerd);
1: 
0: 		// Drop the spses
0: 		SPSDescriptor spsd = dd.getSPSDescriptor(triggerd.getActionId());
1: 
0: 		// there shouldn't be any dependencies, but in case
0: 		// there are, lets clear them
0: 		dm.invalidateFor(spsd, DependencyManager.DROP_TRIGGER, lcc);
0: 		dm.clearDependencies(lcc, spsd);
0: 		dd.dropSPSDescriptor(spsd, tc);
1: 		
0: 		if (triggerd.getWhenClauseId() != null)
1: 		{	
0: 			spsd = dd.getSPSDescriptor(triggerd.getWhenClauseId());
0: 			dm.invalidateFor(spsd, DependencyManager.DROP_TRIGGER, lcc);
0: 			dm.clearDependencies(lcc, spsd);
0: 			dd.dropSPSDescriptor(spsd, tc);
1: 		}
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "DROP TRIGGER "+triggerName;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	DROP TRIGGER Statement at Execution time.
0:  *
0:  *	@author Jamie
0:  */
0: class DropTriggerConstantAction extends DDLSingleTableConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private final String			triggerName;
0: 	private final SchemaDescriptor	sd;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a DROP TRIGGER statement.
0: 	 *
0: 	 * @param	sd					Schema that stored prepared statement lives in.
0: 	 * @param	triggerName			Name of the Trigger
0: 	 * @param	tableId				The table upon which the trigger is defined
0: 	 *
0: 	 */
0: 	DropTriggerConstantAction
0: 	(
0: 		SchemaDescriptor	sd,
0: 		String				triggerName,
0: 		UUID				tableId
0: 	)
0: 	{
0: 		super(tableId);
0: 		this.sd = sd;
0: 		this.triggerName = triggerName;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(sd != null, "SchemaDescriptor is null");
0: 		}
0: 	}
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP STATEMENT.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		TriggerDescriptor 			triggerd;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		TableDescriptor td = dd.getTableDescriptor(tableId);
0: 		if (td == null)
0: 		{
0: 			throw StandardException.newException(
0: 								SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION,
0: 								tableId.toString());
0: 		}
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 		lockTableForDDL(tc, td.getHeapConglomerateId(), true);
0: 		// get td again in case table shape is changed before lock is acquired
0: 		td = dd.getTableDescriptor(tableId);
0: 		if (td == null)
0: 		{
0: 			throw StandardException.newException(
0: 								SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION,
0: 								tableId.toString());
0: 		}
0: 
0: 		/* 
0: 		** Get the trigger descriptor.  We're responsible for raising
0: 		** the error if it isn't found 
0: 		*/
0: 		triggerd = dd.getTriggerDescriptor(triggerName, sd);
0: 
0: 		if (triggerd == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND_DURING_EXECUTION, "TRIGGER",
0: 					(sd.getSchemaName() + "." + triggerName));
0: 		}
0: 
0: 		/* 
0: 	 	** Prepare all dependents to invalidate.  (This is there chance
0: 		** to say that they can't be invalidated.  For example, an open
0: 		** cursor referencing a table/trigger that the user is attempting to
0: 		** drop.) If no one objects, then invalidate any dependent objects.
0: 		*/
0: 		dropTriggerDescriptor(lcc, dm, dd, tc, triggerd, activation);
0: 	}
0: 
0: 	static void dropTriggerDescriptor
0: 	(
0: 		LanguageConnectionContext	lcc,
0: 		DependencyManager 			dm,
0: 		DataDictionary				dd,
0: 		TransactionController		tc,
0: 		TriggerDescriptor			triggerd,
0: 		Activation					activation
0: 	) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(triggerd!=null, "trigger descriptor is null");
0: 		}
0: 
0: 		dm.invalidateFor(triggerd, DependencyManager.DROP_TRIGGER, lcc);
0: 
0: 		// Drop the trigger
0: 		dd.dropTriggerDescriptor(triggerd, tc);
0: 
0: 		// Clear the dependencies for the trigger 
0: 		dm.clearDependencies(lcc, triggerd);
0: 
0: 		// Drop the spses
0: 		SPSDescriptor spsd = dd.getSPSDescriptor(triggerd.getActionId());
0: 
0: 		// there shouldn't be any dependencies, but in case
0: 		// there are, lets clear them
0: 		dm.invalidateFor(spsd, DependencyManager.DROP_TRIGGER, lcc);
0: 		dm.clearDependencies(lcc, spsd);
0: 		dd.dropSPSDescriptor(spsd, tc);
0: 		
0: 		if (triggerd.getWhenClauseId() != null)
0: 		{	
0: 			spsd = dd.getSPSDescriptor(triggerd.getWhenClauseId());
0: 			dm.invalidateFor(spsd, DependencyManager.DROP_TRIGGER, lcc);
0: 			dm.clearDependencies(lcc, spsd);
0: 			dd.dropSPSDescriptor(spsd, tc);
0: 		}
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "DROP TRIGGER "+triggerName;
0: 	}
0: }
============================================================================