1:3a2db6b: /*
1:3a2db6b: 
1:3a2db6b:    Derby - Class org.apache.derby.iapi.types.CollatorSQLLongvarchar
1:3a2db6b:  
1:3a2db6b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3a2db6b:    contributor license agreements.  See the NOTICE file distributed with
1:3a2db6b:    this work for additional information regarding copyright ownership.
1:3a2db6b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:3a2db6b:    (the "License"); you may not use this file except in compliance with
1:3a2db6b:    the License.  You may obtain a copy of the License at
1:3a2db6b: 
1:3a2db6b:       http://www.apache.org/licenses/LICENSE-2.0
1:3a2db6b: 
1:3a2db6b:    Unless required by applicable law or agreed to in writing, software
1:3a2db6b:    distributed under the License is distributed on an "AS IS" BASIS,
1:3a2db6b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a2db6b:    See the License for the specific language governing permissions and
1:3a2db6b:    limitations under the License.
1:3a2db6b: 
1:3a2db6b:  */
1:3a2db6b: 
1:3a2db6b: package org.apache.derby.iapi.types;
1:3a2db6b: 
1:3a2db6b: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3a2db6b: 
1:3a2db6b: import java.text.RuleBasedCollator;
1:3a2db6b: 
1:3a2db6b: /**
1:3a2db6b:  * CollatorSQLLongvarchar class differs from SQLLongvarchar based on how the 2 classes  
1:3a2db6b:  * use different collations to collate their data. SQLLongvarchar uses Derby's 
1:3a2db6b:  * default collation which is UCS_BASIC. Whereas, this class uses the 
1:3a2db6b:  * RuleBasedCollator object that was passed to it in it's constructor and that 
1:3a2db6b:  * RuleBasedCollator object decides the collation.
1:3a2db6b:  * 
1:3a2db6b:  * In Derby 10.3, this class will be passed a RuleBasedCollator which is based 
1:3a2db6b:  * on the database's territory. In future releases of Derby, this class can be 
1:3a2db6b:  * used to do other kinds of collations like case-insensitive collation etc by  
1:3a2db6b:  * just passing an appropriate RuleBasedCollator object for that kind of 
1:3a2db6b:  * collation.
1:3a2db6b:  */
1:403684d: class CollatorSQLLongvarchar extends SQLLongvarchar implements CollationElementsInterface
3:3a2db6b: {
1:726b66f: 	private WorkHorseForCollatorDatatypes holderForCollationSensitiveInfo;
1:3a2db6b: 
1:3a2db6b: 	/*
1:3a2db6b: 	 * constructors
1:3a2db6b: 	 */
1:3a2db6b: 
1:726b66f: 
1:3a2db6b:     /**
1:726b66f:      * Create SQL LONG VARCHAR value initially set to NULL that
1:726b66f:      * performs collation according to collatorForCharacterDatatypes 
1:3a2db6b:      */
1:726b66f: 	CollatorSQLLongvarchar(RuleBasedCollator collatorForCharacterDatatypes)
1:3a2db6b: 	{
1:726b66f:         setCollator(collatorForCharacterDatatypes);
3:3a2db6b: 	}
1:3a2db6b:     
1:3a2db6b:     /**
1:726b66f:      * Create SQL LONG VARCHAR value initially set to value that
1:726b66f:      * performs collation according to collatorForCharacterDatatypes 
1:3a2db6b:      */
1:726b66f: 	CollatorSQLLongvarchar(String val, RuleBasedCollator collatorForCharacterDatatypes)
1:3a2db6b: 	{
1:3a2db6b: 		super(val);
1:726b66f: 		setCollator(collatorForCharacterDatatypes);
1:3a2db6b: 	}
1:3a2db6b: 
1:3a2db6b: 	/**
1:3a2db6b: 	 * Set the RuleBasedCollator for this instance of CollatorSQLLongvarchar. 
1:3a2db6b: 	 * It will be used to do the collation.
1:3a2db6b: 	 */
1:0cab10f: 	protected void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
1:3a2db6b: 	{
2:3a2db6b: 		holderForCollationSensitiveInfo = 
2:3a2db6b: 			new WorkHorseForCollatorDatatypes(collatorForCharacterDatatypes, this);
1:3a2db6b: 	}
1:9460d4c: 
1:9460d4c: 	/**
1:9460d4c: 	 * Get the RuleBasedCollator for this instance of CollatorSQLLongvarchar. 
1:9460d4c: 	 * It will be used to do the collation.
1:9460d4c: 	 * 
1:9460d4c: 	 * @return	The Collator object which should be used for collation 
1:9460d4c: 	 * operation on this object
1:9460d4c: 	 */
1:9460d4c: 	protected RuleBasedCollator getCollatorForCollation() throws StandardException
1:9460d4c: 	{
1:9460d4c: 		return holderForCollationSensitiveInfo.getCollatorForCollation();
1:9460d4c: 	}
1:3a2db6b: 	
1:cf42729:     // Implementation of CollationElementsInterface interface
1:3a2db6b: 
1:cf42729:     public boolean hasSingleCollationElement() throws StandardException {
1:cf42729:         return holderForCollationSensitiveInfo.hasSingleCollationElement();
1:cf42729:     }
1:3a2db6b: 
1:3a2db6b: 	/*
1:3a2db6b: 	 * DataValueDescriptor interface
1:3a2db6b: 	 */
1:3a2db6b: 
1:854dd10:     /**
1:854dd10:      * @see DataValueDescriptor#cloneValue
1:854dd10:      */
1:854dd10:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:3a2db6b: 	{
1:3a2db6b: 		try
1:3a2db6b: 		{
1:3a2db6b: 			return new CollatorSQLLongvarchar(getString(), 
1:3a2db6b: 					holderForCollationSensitiveInfo.getCollatorForCollation());
1:3a2db6b: 		}
1:3a2db6b: 		catch (StandardException se)
1:3a2db6b: 		{
1:3a2db6b: 			if (SanityManager.DEBUG)
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", se);
1:3a2db6b: 			return null;
1:3a2db6b: 		}
1:3a2db6b: 	}
1:3a2db6b: 
1:3a2db6b: 	/**
1:3a2db6b: 	 * @see DataValueDescriptor#getNewNull
1:3a2db6b: 	 */
1:3a2db6b: 	public DataValueDescriptor getNewNull()
1:3a2db6b: 	{
1:726b66f: 		CollatorSQLLongvarchar result = new CollatorSQLLongvarchar(
1:3a2db6b: 				holderForCollationSensitiveInfo.getCollatorForCollation());
1:3a2db6b: 		return result;
1:3a2db6b: 	}
1:3a2db6b: 
1:3a2db6b: 	/**
1:0cab10f: 	 * We do not anticipate this method on collation sensitive DVD to be
1:0cab10f: 	 * ever called in Derby 10.3 In future, when Derby will start supporting
1:0cab10f: 	 * SQL standard COLLATE clause, this method might get called on the
1:0cab10f: 	 * collation sensitive DVDs.
1:0cab10f: 	 *  
1:0cab10f: 	 * @see StringDataValue#getValue(RuleBasedCollator) 
1:0cab10f: 	 */
1:0cab10f: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1:0cab10f: 	{
1:0cab10f: 		if (collatorForComparison != null)
1:0cab10f: 		{
1:0cab10f: 			//non-null collatorForComparison means use this collator sensitive
1:0cab10f: 			//implementation of SQLLongvarchar
1:0cab10f: 		    setCollator(collatorForComparison);
1:0cab10f: 		    return this;			
1:0cab10f: 		} else {
1:0cab10f: 			//null collatorForComparison means use UCS_BASIC for collation.
1:0cab10f: 			//For that, we need to use the base class SQLLongvarchar
1:0cab10f: 			SQLLongvarchar s = new SQLLongvarchar();
1:0cab10f: 			s.copyState(this);
1:0cab10f: 			return s;
1:0cab10f: 		}
1:0cab10f: 	}
1:3841b98: 	
1:7076568: 	/** @see SQLChar#stringCompare(SQLChar, SQLChar) */
1:3841b98: 	 protected int stringCompare(SQLChar char1, SQLChar char2)
1:3841b98: 	 throws StandardException
1:3841b98: 	 {
1:7076568: 		 return holderForCollationSensitiveInfo.stringCompare(char1, char2);
1:3841b98: 	 }
1:0cab10f: 
1:9294126:     /**
1:9294126:       * Return a hash code that is consistent with
1:9294126:       * {@link #stringCompare(SQLChar, SQLChar)}.
1:9294126:       *
1:9294126:       * @return hash code
1:9294126:       */
1:9294126:      public int hashCode() {
1:9294126:          return hashCodeForCollation();
1:9294126:      }
1:9294126: 
1:0cab10f: 	/**
1:3a2db6b: 	 * This method implements the like function for char (with no escape value).
1:3a2db6b: 	 * The difference in this method and the same method in superclass is that
1:3a2db6b: 	 * here we use special Collator object to do the comparison rather than
1:3a2db6b: 	 * using the Collator object associated with the default jvm locale.
1:3a2db6b: 	 *
1:3a2db6b: 	 * @param pattern		The pattern to use
1:3a2db6b: 	 *
1:3a2db6b: 	 * @return	A SQL boolean value telling whether the first operand is
1:3a2db6b: 	 *			like the second operand
1:3a2db6b: 	 *
1:3a2db6b: 	 * @exception StandardException		Thrown on error
1:3a2db6b: 	 */
1:3a2db6b: 	public BooleanDataValue like(DataValueDescriptor pattern)
1:3a2db6b: 								throws StandardException
1:3a2db6b: 	{
1:3a2db6b: 		return(holderForCollationSensitiveInfo.like(pattern));
1:3a2db6b: 	}
1:3841b98: 	
1:3841b98: 	/**
1:3841b98: 	 * This method implements the like function for char with an escape value.
1:3841b98: 	 * 
1:3841b98: 	 * @param pattern		The pattern to use
1:3841b98: 	 * 								 
1:3841b98: 	 * @return	A SQL boolean value telling whether the first operand is
1:3841b98: 	 * like the second operand
1:3841b98: 	 *
1:3841b98: 	 * @exception StandardException		Thrown on error
1:3841b98: 	 */
1:3841b98: 	public BooleanDataValue like(DataValueDescriptor pattern,
1:3841b98: 			DataValueDescriptor escape) throws StandardException
1:3841b98: 	{
1:3841b98: 		return(holderForCollationSensitiveInfo.like(pattern, escape));
1:3841b98: 	}
1:3a2db6b: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cf42729
/////////////////////////////////////////////////////////////////////////
1:     // Implementation of CollationElementsInterface interface
1:     public boolean hasSingleCollationElement() throws StandardException {
1:         return holderForCollationSensitiveInfo.hasSingleCollationElement();
1:     }
commit:9294126
/////////////////////////////////////////////////////////////////////////
1:     /**
1:       * Return a hash code that is consistent with
1:       * {@link #stringCompare(SQLChar, SQLChar)}.
1:       *
1:       * @return hash code
1:       */
1:      public int hashCode() {
1:          return hashCodeForCollation();
1:      }
1: 
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", se);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see DataValueDescriptor#cloneValue
1:      */
1:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:9460d4c
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get the RuleBasedCollator for this instance of CollatorSQLLongvarchar. 
1: 	 * It will be used to do the collation.
1: 	 * 
1: 	 * @return	The Collator object which should be used for collation 
1: 	 * operation on this object
1: 	 */
1: 	protected RuleBasedCollator getCollatorForCollation() throws StandardException
1: 	{
1: 		return holderForCollationSensitiveInfo.getCollatorForCollation();
1: 	}
commit:7076568
/////////////////////////////////////////////////////////////////////////
1: 	/** @see SQLChar#stringCompare(SQLChar, SQLChar) */
1: 		 return holderForCollationSensitiveInfo.stringCompare(char1, char2);
commit:3841b98
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	/** @see SQLChar.stringCompare(SQLChar, SQLChar) */
1: 	 protected int stringCompare(SQLChar char1, SQLChar char2)
1: 	 throws StandardException
1: 	 {
0: 		 return holderForCollationSensitiveInfo.stringCompare(char2);
1: 	 }
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * This method implements the like function for char with an escape value.
1: 	 * 
1: 	 * @param pattern		The pattern to use
1: 	 * 								 
1: 	 * @return	A SQL boolean value telling whether the first operand is
1: 	 * like the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public BooleanDataValue like(DataValueDescriptor pattern,
1: 			DataValueDescriptor escape) throws StandardException
1: 	{
1: 		return(holderForCollationSensitiveInfo.like(pattern, escape));
1: 	}
commit:0cab10f
/////////////////////////////////////////////////////////////////////////
1: 	protected void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
/////////////////////////////////////////////////////////////////////////
1: 	 * We do not anticipate this method on collation sensitive DVD to be
1: 	 * ever called in Derby 10.3 In future, when Derby will start supporting
1: 	 * SQL standard COLLATE clause, this method might get called on the
1: 	 * collation sensitive DVDs.
1: 	 *  
1: 	 * @see StringDataValue#getValue(RuleBasedCollator) 
1: 	 */
1: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1: 	{
1: 		if (collatorForComparison != null)
1: 		{
1: 			//non-null collatorForComparison means use this collator sensitive
1: 			//implementation of SQLLongvarchar
1: 		    setCollator(collatorForComparison);
1: 		    return this;			
1: 		} else {
1: 			//null collatorForComparison means use UCS_BASIC for collation.
1: 			//For that, we need to use the base class SQLLongvarchar
1: 			SQLLongvarchar s = new SQLLongvarchar();
1: 			s.copyState(this);
1: 			return s;
1: 		}
1: 	}
1: 
1: 	/**
commit:3a2db6b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.CollatorSQLLongvarchar
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.text.RuleBasedCollator;
1: 
1: /**
1:  * CollatorSQLLongvarchar class differs from SQLLongvarchar based on how the 2 classes  
1:  * use different collations to collate their data. SQLLongvarchar uses Derby's 
1:  * default collation which is UCS_BASIC. Whereas, this class uses the 
1:  * RuleBasedCollator object that was passed to it in it's constructor and that 
1:  * RuleBasedCollator object decides the collation.
1:  * 
1:  * In Derby 10.3, this class will be passed a RuleBasedCollator which is based 
1:  * on the database's territory. In future releases of Derby, this class can be 
1:  * used to do other kinds of collations like case-insensitive collation etc by  
1:  * just passing an appropriate RuleBasedCollator object for that kind of 
1:  * collation.
1:  */
0: public class CollatorSQLLongvarchar extends SQLLongvarchar implements CollationElementsInterface
1: {
0: 	WorkHorseForCollatorDatatypes holderForCollationSensitiveInfo;
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 
1: 	/**
0: 		no-arg constructor, required by Formattable.
1: 	*/
0: 	public CollatorSQLLongvarchar()
1: 	{
1: 	}
1: 
0: 	public CollatorSQLLongvarchar(String val, RuleBasedCollator collatorForCharacterDatatypes)
1: 	{
1: 		super(val);
1: 		holderForCollationSensitiveInfo = 
1: 			new WorkHorseForCollatorDatatypes(collatorForCharacterDatatypes, this);
1: 	}
1: 
1: 	/**
1: 	 * Set the RuleBasedCollator for this instance of CollatorSQLLongvarchar. 
1: 	 * It will be used to do the collation.
1: 	 */
0: 	private void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
1: 	{
1: 		holderForCollationSensitiveInfo = 
1: 			new WorkHorseForCollatorDatatypes(collatorForCharacterDatatypes, this);
1: 	}
1: 	
0: 	/** @see CollationElementsInterface#getCollationElementsForString */
0: 	public int[] getCollationElementsForString() throws StandardException 
1: 	{
0: 		return holderForCollationSensitiveInfo.getCollationElementsForString();
1: 	}
1: 
0: 	/** @see CollationElementsInterface#getCountOfCollationElements */
0: 	public int getCountOfCollationElements()
1: 	{
0: 		return holderForCollationSensitiveInfo.getCountOfCollationElements();
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#getClone
1: 	 */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		try
1: 		{
1: 			return new CollatorSQLLongvarchar(getString(), 
1: 					holderForCollationSensitiveInfo.getCollatorForCollation());
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
1: 			return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
0: 		CollatorSQLLongvarchar result = new CollatorSQLLongvarchar();
0: 		result.setCollator(
1: 				holderForCollationSensitiveInfo.getCollatorForCollation());
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the like function for char (with no escape value).
1: 	 * The difference in this method and the same method in superclass is that
1: 	 * here we use special Collator object to do the comparison rather than
1: 	 * using the Collator object associated with the default jvm locale.
1: 	 *
1: 	 * @param pattern		The pattern to use
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is
1: 	 *			like the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public BooleanDataValue like(DataValueDescriptor pattern)
1: 								throws StandardException
1: 	{
1: 		return(holderForCollationSensitiveInfo.like(pattern));
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:726b66f
/////////////////////////////////////////////////////////////////////////
1: 	private WorkHorseForCollatorDatatypes holderForCollationSensitiveInfo;
0:     /**
1:      * Create SQL LONG VARCHAR value initially set to NULL that
1:      * performs collation according to collatorForCharacterDatatypes 
0:      */
1: 	CollatorSQLLongvarchar(RuleBasedCollator collatorForCharacterDatatypes)
0: 	{
1:         setCollator(collatorForCharacterDatatypes);
0: 	}
1:     
0:     /**
1:      * Create SQL LONG VARCHAR value initially set to value that
1:      * performs collation according to collatorForCharacterDatatypes 
0:      */
1: 	CollatorSQLLongvarchar(String val, RuleBasedCollator collatorForCharacterDatatypes)
1: 		setCollator(collatorForCharacterDatatypes);
/////////////////////////////////////////////////////////////////////////
1: 		CollatorSQLLongvarchar result = new CollatorSQLLongvarchar(
commit:403684d
/////////////////////////////////////////////////////////////////////////
1: class CollatorSQLLongvarchar extends SQLLongvarchar implements CollationElementsInterface
============================================================================