1:492f85a: /*
1:492f85a: 
1:492f85a:    Derby - Class org.apache.derbyTesting.unitTests.junit.CharacterStreamDescriptorTest
1:492f85a: 
1:492f85a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:492f85a:    contributor license agreements.  See the NOTICE file distributed with
1:492f85a:    this work for additional information regarding copyright ownership.
1:492f85a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:492f85a:    (the "License"); you may not use this file except in compliance with
1:492f85a:    the License.  You may obtain a copy of the License at
1:492f85a: 
1:492f85a:       http://www.apache.org/licenses/LICENSE-2.0
1:492f85a: 
1:492f85a:    Unless required by applicable law or agreed to in writing, software
1:492f85a:    distributed under the License is distributed on an "AS IS" BASIS,
1:492f85a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:492f85a:    See the License for the specific language governing permissions and
1:492f85a:    limitations under the License.
1:492f85a: 
1:492f85a:  */
1:492f85a: package org.apache.derbyTesting.unitTests.junit;
1:492f85a: 
1:f07a7c3: import java.io.ByteArrayInputStream;
1:f07a7c3: import java.io.IOException;
1:f07a7c3: import java.io.InputStream;
1:492f85a: import junit.framework.Test;
1:f07a7c3: import org.apache.derby.iapi.error.StandardException;
1:492f85a: import org.apache.derby.iapi.jdbc.CharacterStreamDescriptor;
1:f07a7c3: import org.apache.derby.iapi.types.PositionedStream;
1:492f85a: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:492f85a: 
1:492f85a: /**
1:492f85a:  * Simple tests of the character stream descriptor class.
1:492f85a:  */
1:492f85a: public class CharacterStreamDescriptorTest
1:492f85a:     extends BaseTestCase {
1:492f85a: 
1:492f85a:     public CharacterStreamDescriptorTest(String name) {
1:492f85a:         super(name);
2:492f85a:     }
1:492f85a: 
1:492f85a:     /**
1:492f85a:      * Tests the default values set by the builder.
1:492f85a:      */
1:492f85a:     public void testDefaultValues() {
1:f07a7c3:         InputStream emptyStream = new ByteArrayInputStream(new byte[] {});
1:492f85a:         CharacterStreamDescriptor.Builder b =
1:f07a7c3:                 new CharacterStreamDescriptor.Builder().stream(emptyStream);
1:492f85a:         CharacterStreamDescriptor csd = b.build();
1:492f85a: 
1:492f85a:         // Test the default values.
1:492f85a:         assertEquals(false, csd.isBufferable());
1:492f85a:         assertEquals(false, csd.isPositionAware());
1:492f85a:         assertEquals(0, csd.getDataOffset());
1:492f85a:         assertEquals(0, csd.getCurBytePos());
1:492f85a:         assertEquals(1, csd.getCurCharPos());
1:492f85a:         assertEquals(0, csd.getByteLength());
1:492f85a:         assertEquals(0, csd.getCharLength());
1:492f85a:         assertEquals(Long.MAX_VALUE, csd.getMaxCharLength());
1:492f85a:     }
1:492f85a: 
1:492f85a:     public void testSetValues() {
1:f07a7c3:         final long charLength = 1023;
1:f07a7c3:         final long byteLength = 1023*2;
1:492f85a:         final long curBytePos = 4;
1:492f85a:         final long curCharPos = 2;
1:492f85a:         final long dataOffset = 2;
1:f07a7c3:         final long maxCharLen = 2459;
1:f07a7c3:         InputStream emptyStream = new ByteArrayInputStream(new byte[] {});
1:492f85a: 
1:492f85a:         CharacterStreamDescriptor.Builder b =
1:492f85a:                 new CharacterStreamDescriptor.Builder().bufferable(true).
1:492f85a:                 byteLength(byteLength).charLength(charLength).
1:492f85a:                 curBytePos(curBytePos).curCharPos(curCharPos).
1:f07a7c3:                 dataOffset(dataOffset).maxCharLength(maxCharLen).
1:f07a7c3:                 stream(emptyStream);
1:492f85a:         CharacterStreamDescriptor csd = b.build();
1:492f85a: 
1:492f85a:         // Test the values.
1:492f85a:         assertEquals(true, csd.isBufferable());
1:492f85a:         assertEquals(false, csd.isPositionAware());
1:492f85a:         assertEquals(dataOffset, csd.getDataOffset());
1:492f85a:         assertEquals(curBytePos, csd.getCurBytePos());
1:492f85a:         assertEquals(curCharPos, csd.getCurCharPos());
1:492f85a:         assertEquals(byteLength, csd.getByteLength());
1:492f85a:         assertEquals(charLength, csd.getCharLength());
1:492f85a:         assertEquals(maxCharLen, csd.getMaxCharLength());
1:492f85a: 
1:f07a7c3:         PositionedStream emptyPS = new PositionedTestStream(curBytePos);
1:492f85a:         // Set only a few values.
1:492f85a:         csd = new CharacterStreamDescriptor.Builder().bufferable(true).
1:f07a7c3:                 positionAware(true). maxCharLength(maxCharLen).
1:f07a7c3:                 stream(emptyPS.asInputStream()).build();
1:492f85a:         assertEquals(true, csd.isBufferable());
1:492f85a:         assertEquals(true, csd.isPositionAware());
1:492f85a:         assertEquals(maxCharLen, csd.getMaxCharLength());
1:492f85a: 
1:492f85a:         // Set data offset and update the character position accordingly.
1:492f85a:         csd = new CharacterStreamDescriptor.Builder().bufferable(true).
1:492f85a:                 positionAware(true).dataOffset(dataOffset).
1:f07a7c3:                 curCharPos(CharacterStreamDescriptor.BEFORE_FIRST).
1:f07a7c3:                 stream(emptyPS.asInputStream()).build();
1:492f85a:         assertEquals(true, csd.isBufferable());
1:492f85a:         assertEquals(true, csd.isPositionAware());
1:492f85a:         assertEquals(dataOffset, csd.getDataOffset());
1:492f85a:         assertEquals(CharacterStreamDescriptor.BEFORE_FIRST,
1:492f85a:                 csd.getCurCharPos());
1:492f85a: 
1:492f85a:     }
1:492f85a: 
1:f07a7c3:     public void testCopyState() {
1:f07a7c3:         final long charLength = 1023;
1:f07a7c3:         final long byteLength = 1023*2;
1:f07a7c3:         final long curBytePos = 4;
1:f07a7c3:         final long curCharPos = 2;
1:f07a7c3:         final long dataOffset = 2;
1:f07a7c3:         final long maxCharLen = 3021;
1:f07a7c3:         InputStream emptyStream = new ByteArrayInputStream(new byte[] {});
1:f07a7c3: 
1:f07a7c3:         CharacterStreamDescriptor.Builder b1 =
1:f07a7c3:                 new CharacterStreamDescriptor.Builder().bufferable(true).
1:f07a7c3:                 byteLength(byteLength).charLength(charLength).
1:f07a7c3:                 curBytePos(curBytePos).curCharPos(curCharPos).
1:f07a7c3:                 dataOffset(dataOffset).maxCharLength(maxCharLen).
1:f07a7c3:                 stream(emptyStream);
1:f07a7c3:         CharacterStreamDescriptor csd1 = b1.build();
1:f07a7c3:         CharacterStreamDescriptor.Builder b2 =
1:f07a7c3:                 new CharacterStreamDescriptor.Builder().copyState(csd1);
1:f07a7c3:         CharacterStreamDescriptor csd2 = b2.build();
1:f07a7c3: 
1:f07a7c3:         // Test the values.
1:f07a7c3:         assertEquals(csd2.isBufferable(), csd1.isBufferable());
1:f07a7c3:         assertEquals(csd2.isPositionAware(), csd1.isPositionAware());
1:f07a7c3:         assertEquals(csd2.getDataOffset(), csd1.getDataOffset());
1:f07a7c3:         assertEquals(csd2.getCurBytePos(), csd1.getCurBytePos());
1:f07a7c3:         assertEquals(csd2.getCurCharPos(), csd1.getCurCharPos());
1:f07a7c3:         assertEquals(csd2.getByteLength(), csd1.getByteLength());
1:f07a7c3:         assertEquals(csd2.getCharLength(), csd1.getCharLength());
1:f07a7c3:         assertEquals(csd2.getMaxCharLength(), csd1.getMaxCharLength());
1:f07a7c3:         assertTrue(csd2.getStream() == csd1.getStream());
1:f07a7c3: 
1:f07a7c3:         // Override one value.
1:f07a7c3:         CharacterStreamDescriptor.Builder b3 =
1:f07a7c3:                 new CharacterStreamDescriptor.Builder().copyState(csd1).
1:f07a7c3:                 maxCharLength(8765);
1:f07a7c3:         CharacterStreamDescriptor csd3 = b3.build();
1:f07a7c3:         assertEquals(8765, csd3.getMaxCharLength());
1:f07a7c3: 
1:f07a7c3:         // Demonstrate that copying the state after setting a value explicitly
1:f07a7c3:         // overwrites the the set value.
1:f07a7c3:         CharacterStreamDescriptor.Builder b4 =
1:f07a7c3:                 new CharacterStreamDescriptor.Builder().
1:f07a7c3:                 maxCharLength(8765).
1:f07a7c3:                 copyState(csd1);
1:f07a7c3:         CharacterStreamDescriptor csd4 = b4.build();
1:f07a7c3:         assertEquals(csd1.getMaxCharLength(), csd4.getMaxCharLength());
1:f07a7c3:     }
1:f07a7c3: 
1:492f85a:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(CharacterStreamDescriptorTest.class,
1:492f85a:                 "CharacterStreamDescriptorTest suite");
1:492f85a:     }
1:f07a7c3: 
1:f07a7c3:     /**
1:f07a7c3:      * A test stream that implements the {@code PositionedStream} interface.
1:f07a7c3:      * The stream is not functional, it always returns {@code -1}.
1:f07a7c3:      */
1:f07a7c3:     private static class PositionedTestStream
1:f07a7c3:             extends InputStream
1:f07a7c3:             implements PositionedStream {
1:f07a7c3: 
1:f07a7c3:             private final long pos;
1:f07a7c3: 
1:f07a7c3:             PositionedTestStream(long pos) {
1:f07a7c3:                 this.pos = pos;
1:f07a7c3:             }
1:f07a7c3: 
1:f07a7c3:             public int read() throws IOException {
1:f07a7c3:                 return -1;
1:f07a7c3:             }
1:f07a7c3: 
1:f07a7c3:             public InputStream asInputStream() {
1:f07a7c3:                 return this;
1:f07a7c3:             }
1:f07a7c3: 
1:f07a7c3:             public long getPosition() {
1:f07a7c3:                 // Return the position specified in constructor.
1:f07a7c3:                 return pos;
1:f07a7c3:             }
1:f07a7c3: 
1:f07a7c3:             public void reposition(long requestedPos)
1:f07a7c3:                     throws IOException, StandardException {
1:f07a7c3:                 // Do nothing, this is not a functional stream.
1:f07a7c3:             }
1:f07a7c3:         }
1:f07a7c3:     }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(CharacterStreamDescriptorTest.class,
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:f07a7c3
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.types.PositionedStream;
/////////////////////////////////////////////////////////////////////////
1:         InputStream emptyStream = new ByteArrayInputStream(new byte[] {});
1:                 new CharacterStreamDescriptor.Builder().stream(emptyStream);
/////////////////////////////////////////////////////////////////////////
1:         final long charLength = 1023;
1:         final long byteLength = 1023*2;
1:         final long maxCharLen = 2459;
1:         InputStream emptyStream = new ByteArrayInputStream(new byte[] {});
1:                 dataOffset(dataOffset).maxCharLength(maxCharLen).
1:                 stream(emptyStream);
/////////////////////////////////////////////////////////////////////////
1:         PositionedStream emptyPS = new PositionedTestStream(curBytePos);
1:                 positionAware(true). maxCharLength(maxCharLen).
1:                 stream(emptyPS.asInputStream()).build();
/////////////////////////////////////////////////////////////////////////
1:                 curCharPos(CharacterStreamDescriptor.BEFORE_FIRST).
1:                 stream(emptyPS.asInputStream()).build();
/////////////////////////////////////////////////////////////////////////
1:     public void testCopyState() {
1:         final long charLength = 1023;
1:         final long byteLength = 1023*2;
1:         final long curBytePos = 4;
1:         final long curCharPos = 2;
1:         final long dataOffset = 2;
1:         final long maxCharLen = 3021;
1:         InputStream emptyStream = new ByteArrayInputStream(new byte[] {});
1: 
1:         CharacterStreamDescriptor.Builder b1 =
1:                 new CharacterStreamDescriptor.Builder().bufferable(true).
1:                 byteLength(byteLength).charLength(charLength).
1:                 curBytePos(curBytePos).curCharPos(curCharPos).
1:                 dataOffset(dataOffset).maxCharLength(maxCharLen).
1:                 stream(emptyStream);
1:         CharacterStreamDescriptor csd1 = b1.build();
1:         CharacterStreamDescriptor.Builder b2 =
1:                 new CharacterStreamDescriptor.Builder().copyState(csd1);
1:         CharacterStreamDescriptor csd2 = b2.build();
1: 
1:         // Test the values.
1:         assertEquals(csd2.isBufferable(), csd1.isBufferable());
1:         assertEquals(csd2.isPositionAware(), csd1.isPositionAware());
1:         assertEquals(csd2.getDataOffset(), csd1.getDataOffset());
1:         assertEquals(csd2.getCurBytePos(), csd1.getCurBytePos());
1:         assertEquals(csd2.getCurCharPos(), csd1.getCurCharPos());
1:         assertEquals(csd2.getByteLength(), csd1.getByteLength());
1:         assertEquals(csd2.getCharLength(), csd1.getCharLength());
1:         assertEquals(csd2.getMaxCharLength(), csd1.getMaxCharLength());
1:         assertTrue(csd2.getStream() == csd1.getStream());
1: 
1:         // Override one value.
1:         CharacterStreamDescriptor.Builder b3 =
1:                 new CharacterStreamDescriptor.Builder().copyState(csd1).
1:                 maxCharLength(8765);
1:         CharacterStreamDescriptor csd3 = b3.build();
1:         assertEquals(8765, csd3.getMaxCharLength());
1: 
1:         // Demonstrate that copying the state after setting a value explicitly
1:         // overwrites the the set value.
1:         CharacterStreamDescriptor.Builder b4 =
1:                 new CharacterStreamDescriptor.Builder().
1:                 maxCharLength(8765).
1:                 copyState(csd1);
1:         CharacterStreamDescriptor csd4 = b4.build();
1:         assertEquals(csd1.getMaxCharLength(), csd4.getMaxCharLength());
1:     }
1: 
1: 
1:     /**
1:      * A test stream that implements the {@code PositionedStream} interface.
1:      * The stream is not functional, it always returns {@code -1}.
1:      */
1:     private static class PositionedTestStream
1:             extends InputStream
1:             implements PositionedStream {
1: 
1:             private final long pos;
1: 
1:             PositionedTestStream(long pos) {
1:                 this.pos = pos;
1:             }
1: 
1:             public int read() throws IOException {
1:                 return -1;
1:             }
1: 
1:             public InputStream asInputStream() {
1:                 return this;
1:             }
1: 
1:             public long getPosition() {
1:                 // Return the position specified in constructor.
1:                 return pos;
1:             }
1: 
1:             public void reposition(long requestedPos)
1:                     throws IOException, StandardException {
1:                 // Do nothing, this is not a functional stream.
1:             }
1:         }
1:     }
commit:492f85a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.CharacterStreamDescriptorTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derby.iapi.jdbc.CharacterStreamDescriptor;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Simple tests of the character stream descriptor class.
1:  */
1: public class CharacterStreamDescriptorTest
1:     extends BaseTestCase {
1: 
1:     public CharacterStreamDescriptorTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Tests the default values set by the builder.
1:      */
1:     public void testDefaultValues() {
1:         CharacterStreamDescriptor.Builder b =
0:                 new CharacterStreamDescriptor.Builder();
1:         CharacterStreamDescriptor csd = b.build();
1: 
1:         // Test the default values.
1:         assertEquals(false, csd.isBufferable());
1:         assertEquals(false, csd.isPositionAware());
1:         assertEquals(0, csd.getDataOffset());
1:         assertEquals(0, csd.getCurBytePos());
1:         assertEquals(1, csd.getCurCharPos());
1:         assertEquals(0, csd.getByteLength());
1:         assertEquals(0, csd.getCharLength());
1:         assertEquals(Long.MAX_VALUE, csd.getMaxCharLength());
0:         assertEquals(-1, csd.getStreamId());
1:     }
1: 
1:     public void testSetValues() {
0:         final long byteLength = 1023;
0:         final long charLength = 1023*2;
1:         final long curBytePos = 4;
1:         final long curCharPos = 2;
1:         final long dataOffset = 2;
0:         final long maxCharLen = 768;
0:         final int streamId = this.hashCode();
1: 
1:         CharacterStreamDescriptor.Builder b =
1:                 new CharacterStreamDescriptor.Builder().bufferable(true).
1:                 byteLength(byteLength).charLength(charLength).
1:                 curBytePos(curBytePos).curCharPos(curCharPos).
0:                 dataOffset(dataOffset).maxCharLength(maxCharLen).id(streamId);
1:         CharacterStreamDescriptor csd = b.build();
1: 
1:         // Test the values.
1:         assertEquals(true, csd.isBufferable());
1:         assertEquals(false, csd.isPositionAware());
1:         assertEquals(dataOffset, csd.getDataOffset());
1:         assertEquals(curBytePos, csd.getCurBytePos());
1:         assertEquals(curCharPos, csd.getCurCharPos());
1:         assertEquals(byteLength, csd.getByteLength());
1:         assertEquals(charLength, csd.getCharLength());
1:         assertEquals(maxCharLen, csd.getMaxCharLength());
0:         assertEquals(streamId, csd.getStreamId());
1: 
1:         // Set only a few values.
1:         csd = new CharacterStreamDescriptor.Builder().bufferable(true).
0:                 positionAware(true). maxCharLength(maxCharLen).build();
1:         assertEquals(true, csd.isBufferable());
1:         assertEquals(true, csd.isPositionAware());
1:         assertEquals(maxCharLen, csd.getMaxCharLength());
1: 
1:         // Set data offset and update the character position accordingly.
1:         csd = new CharacterStreamDescriptor.Builder().bufferable(true).
1:                 positionAware(true).dataOffset(dataOffset).
0:                 curCharPos(CharacterStreamDescriptor.BEFORE_FIRST).build();
1:         assertEquals(true, csd.isBufferable());
1:         assertEquals(true, csd.isPositionAware());
1:         assertEquals(dataOffset, csd.getDataOffset());
1:         assertEquals(CharacterStreamDescriptor.BEFORE_FIRST,
1:                 csd.getCurCharPos());
1: 
1:     }
1: 
1:     public static Test suite() {
0:         return new TestSuite(CharacterStreamDescriptorTest.class,
1:                 "CharacterStreamDescriptorTest suite");
1:     }
1: }
============================================================================