1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.log.CheckpointOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.log;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.Externalizable;
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A Log Operation that represents a checkpoint.
1:eac0369: 	@see Loggable
1:eac0369: */
1:eac0369: 
1:eac0369: public class CheckpointOperation implements Loggable 
8:eac0369: {
1:eac0369: 
1:eac0369: 	// redo LWM
1:eac0369: 	protected long	redoLWM;
1:eac0369: 
1:eac0369: 	// undo LWM
1:eac0369: 	protected long	undoLWM;
1:eac0369: 
1:eac0369: 	protected Formatable transactionTable;
1:eac0369: 
1:a5bdbd4: 	public CheckpointOperation(long redoLWM, long undoLWM, Formatable ttab)
1:eac0369: 	{
1:eac0369: 		this.redoLWM = redoLWM;
1:eac0369: 		this.undoLWM = undoLWM;
1:eac0369: 		this.transactionTable = ttab;
8:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public CheckpointOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		CompressedNumber.writeLong(out, redoLWM);
1:eac0369: 		CompressedNumber.writeLong(out, undoLWM);
1:a5bdbd4: 		// RESOLVE: Following write Not needed, keeping it to avoid upgrade/downgrade issues.
1:a5bdbd4: 		CompressedNumber.writeInt(out, 0);	// no other truncation LWM
1:eac0369: 
1:eac0369: 		if (transactionTable == null)
1:eac0369: 			CompressedNumber.writeInt(out, 0);
3:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			CompressedNumber.writeInt(out, 1);
1:eac0369: 			out.writeObject(transactionTable);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		redoLWM = CompressedNumber.readLong(in);
1:eac0369: 		undoLWM = CompressedNumber.readLong(in);
1:eac0369: 
1:a5bdbd4: 		// RESOLVE: Following read Not required, keeping it to avoid upgrade/downgrade issues.
1:eac0369: 		int tsize = CompressedNumber.readInt(in); // is there any truncationLWM?
1:eac0369: 
1:eac0369: 		int haveTTab = CompressedNumber.readInt(in);
1:eac0369: 		if (haveTTab == 1)
1:eac0369: 			transactionTable = (Formatable)in.readObject();
1:eac0369: 		else
1:eac0369: 			transactionTable = (Formatable)null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_CHECKPOINT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Loggable methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Nothing to do unless we are rollforward recovery;
1:eac0369: 	 *  Redoing of checkpoints during rollforward recovery allows us to restart
1:eac0369: 	 *  the  roll-forward recovery from the last checkpoint redone during rollforward recovery, if
1:eac0369: 	 *  we happen to crash during the roll-forward recovery process.
1:eac0369: 	 *  Another reason why we need to do this is dropped table stub files
1:eac0369: 	 *  removed at checkpoint because the containerids may have been reused
1:eac0369: 	 *  after a checkpoint if the system was rebooted.
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) throws StandardException
1:eac0369: 	{
1:eac0369: 		//redo the checkpoint if we are in roll-forward recovery only
1:eac0369: 		if(((RawTransaction)xact).inRollForwardRecovery())
1:eac0369: 		{
1:a292c89: 			((RawTransaction)xact).
1:a292c89: 				checkpointInRollForwardRecovery(instant, redoLWM, undoLWM);
1:eac0369: 		}
1:eac0369: 		return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the default for prepared log is always null for all the operations
1:eac0369: 		that don't have optionalData.  If an operation has optional data,
1:eac0369: 		the operation need to prepare the optional data for this method.
1:eac0369: 
1:eac0369: 		Checkpoint has no optional data to write out
1:eac0369: 	*/
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return (ByteArray) null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Checkpoint does not need to be redone unless
1:eac0369: 		we are doing rollforward recovery.
1:eac0369: 	*/
1:eac0369: 	public boolean needsRedo(Transaction xact)
1:eac0369: 	{
1:eac0369: 		
1:eac0369: 		if(((RawTransaction)xact).inRollForwardRecovery())
1:eac0369: 			return true;
1:eac0369: 		else
1:eac0369: 			return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Checkpoint has not resource to release
1:eac0369: 	*/
1:eac0369: 	public void releaseResource(Transaction xact)
1:eac0369: 	{}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Checkpoint is a raw store operation
1:eac0369: 	*/
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return Loggable.RAWSTORE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Access attributes of the checkpoint record
1:eac0369: 	*/
1:eac0369: 	public long redoLWM() 
1:eac0369: 	{
1:eac0369: 		return redoLWM;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long undoLWM() 
1:eac0369: 	{
1:eac0369: 		return undoLWM;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public Formatable getTransactionTable()
1:eac0369: 	{
1:eac0369: 		return transactionTable;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  DEBUG: Print self.
1:eac0369: 	*/
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			LogCounter undolwm = new LogCounter(undoLWM);
1:eac0369: 			LogCounter redolwm = new LogCounter(redoLWM);
1:eac0369: 
1:eac0369: 			StringBuffer str = new StringBuffer(1000)
1:eac0369: 				.append("Checkpoint : \tredoLWM ")
1:eac0369: 				.append(redolwm.toString())
1:eac0369: 				.append("\n\t\tundoLWM ").append(undolwm.toString());
1:eac0369: 
1:eac0369: 			if (transactionTable != null)
1:eac0369: 			{
1:eac0369: 				str.append(transactionTable.toString());
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			return str.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:a292c89
/////////////////////////////////////////////////////////////////////////
1: 			((RawTransaction)xact).
1: 				checkpointInRollForwardRecovery(instant, redoLWM, undoLWM);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:965be70
/////////////////////////////////////////////////////////////////////////
commit:a5bdbd4
/////////////////////////////////////////////////////////////////////////
1: 	public CheckpointOperation(long redoLWM, long undoLWM, Formatable ttab)
/////////////////////////////////////////////////////////////////////////
1: 		// RESOLVE: Following write Not needed, keeping it to avoid upgrade/downgrade issues.
1: 		CompressedNumber.writeInt(out, 0);	// no other truncation LWM
/////////////////////////////////////////////////////////////////////////
1: 		// RESOLVE: Following read Not required, keeping it to avoid upgrade/downgrade issues.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.log.CheckpointOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.Externalizable;
1: import java.io.OutputStream;
1: import java.io.InputStream;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	A Log Operation that represents a checkpoint.
1: 	@see Loggable
1: */
1: 
1: public class CheckpointOperation implements Loggable 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	// redo LWM
1: 	protected long	redoLWM;
1: 
1: 	// undo LWM
1: 	protected long	undoLWM;
1: 
0: 	// other log trunaction points - after the checkpoint is read from the log
0: 	// after a recovery, the array is then used to populate the in memory
0: 	// truncation lwm table.
0: 	protected TruncationPoint[]	truncationLWM;
1: 
1: 	protected Formatable transactionTable;
1: 
0: 	public CheckpointOperation(long redoLWM, long undoLWM, 
0: 							   TruncationPoint[] tpoints, Formatable ttab)
1: 	{
1: 		this.redoLWM = redoLWM;
1: 		this.undoLWM = undoLWM;
0: 		this.truncationLWM = tpoints;
1: 		this.transactionTable = ttab;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public CheckpointOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		CompressedNumber.writeLong(out, redoLWM);
1: 		CompressedNumber.writeLong(out, undoLWM);
0: 		if (truncationLWM == null)
0: 			CompressedNumber.writeInt(out, 0);	// no other truncation LWM
1: 		else
1: 		{
0: 			CompressedNumber.writeInt(out, truncationLWM.length);
0: 			for (int i = 0; i < truncationLWM.length; i++)
1: 			{
0: 				out.writeObject(truncationLWM[i].getName());
1: 
0: 				LogCounter l = (LogCounter)(truncationLWM[i].getLogInstant());
0: 				CompressedNumber.writeLong(out,l.getValueAsLong());
1: 			}
1: 		}
1: 
1: 		if (transactionTable == null)
1: 			CompressedNumber.writeInt(out, 0);
1: 		else
1: 		{
1: 			CompressedNumber.writeInt(out, 1);
1: 			out.writeObject(transactionTable);
1: 		}
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1: 	{
1: 		redoLWM = CompressedNumber.readLong(in);
1: 		undoLWM = CompressedNumber.readLong(in);
1: 
1: 		int tsize = CompressedNumber.readInt(in); // is there any truncationLWM?
0: 		if (tsize == 0)
0: 			truncationLWM = null;
1: 		else
1: 		{
0: 			truncationLWM = new TruncationPoint[tsize];
0: 			UUID name;
0: 			LogInstant instant;
1: 
0: 			for (int i = 0; i < tsize; i++)
1: 			{
0: 				name = (UUID)in.readObject();
1: 
0: 				long l = CompressedNumber.readLong(in);
0: 				truncationLWM[i] = new TruncationPoint(name, new LogCounter(l));
1: 			}
1: 		}
1: 
1: 		int haveTTab = CompressedNumber.readInt(in);
1: 		if (haveTTab == 1)
1: 			transactionTable = (Formatable)in.readObject();
1: 		else
1: 			transactionTable = (Formatable)null;
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_CHECKPOINT;
1: 	}
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1: 	/**
1: 	 *	Nothing to do unless we are rollforward recovery;
1: 	 *  Redoing of checkpoints during rollforward recovery allows us to restart
1: 	 *  the  roll-forward recovery from the last checkpoint redone during rollforward recovery, if
1: 	 *  we happen to crash during the roll-forward recovery process.
1: 	 *  Another reason why we need to do this is dropped table stub files
1: 	 *  removed at checkpoint because the containerids may have been reused
1: 	 *  after a checkpoint if the system was rebooted.
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) throws StandardException
1: 	{
1: 		//redo the checkpoint if we are in roll-forward recovery only
1: 		if(((RawTransaction)xact).inRollForwardRecovery())
1: 		{
0: 			((RawTransaction)xact).checkpointInRollForwardRecovery(instant, redoLWM);
1: 		}
1: 		return;
1: 	}
1: 
1: 	/**
1: 		the default for prepared log is always null for all the operations
1: 		that don't have optionalData.  If an operation has optional data,
1: 		the operation need to prepare the optional data for this method.
1: 
1: 		Checkpoint has no optional data to write out
1: 
0: 		@param out Where and how to write to optional data.
1: 		
1: 	*/
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (ByteArray) null;
1: 	}
1: 
1: 	/**
1: 		Checkpoint does not need to be redone unless
1: 		we are doing rollforward recovery.
1: 	*/
1: 	public boolean needsRedo(Transaction xact)
1: 	{
1: 		
1: 		if(((RawTransaction)xact).inRollForwardRecovery())
1: 			return true;
1: 		else
1: 			return false;
1: 	}
1: 
1: 
1: 	/**
1: 	  Checkpoint has not resource to release
1: 	*/
1: 	public void releaseResource(Transaction xact)
1: 	{}
1: 
1: 	/**
1: 		Checkpoint is a raw store operation
1: 	*/
1: 	public int group()
1: 	{
1: 		return Loggable.RAWSTORE;
1: 	}
1: 
1: 	/**
1: 		Access attributes of the checkpoint record
1: 	*/
1: 	public long redoLWM() 
1: 	{
1: 		return redoLWM;
1: 	}
1: 
1: 	public long undoLWM() 
1: 	{
1: 		return undoLWM;
1: 	}
1: 
0: 	public TruncationPoint[] truncationLWM()
1: 	{
0: 		return truncationLWM;
1: 	}
1: 
1: 	public Formatable getTransactionTable()
1: 	{
1: 		return transactionTable;
1: 	}
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			LogCounter undolwm = new LogCounter(undoLWM);
1: 			LogCounter redolwm = new LogCounter(redoLWM);
1: 
1: 			StringBuffer str = new StringBuffer(1000)
1: 				.append("Checkpoint : \tredoLWM ")
1: 				.append(redolwm.toString())
1: 				.append("\n\t\tundoLWM ").append(undolwm.toString());
1: 
0: 			if (truncationLWM != null)
1: 			{
0: 				LogCounter logLWM;
0: 				for (int i = truncationLWM.length-1; i >= 0; i--)
1: 				{
0: 					logLWM = (LogCounter)(truncationLWM[i].getLogInstant());
0: 					str.append(" truncation point ").append(i)
0: 						.append(" ").append(logLWM.toString());
1: 				}
1: 			}
1: 
1: 			if (transactionTable != null)
1: 			{
1: 				str.append(transactionTable.toString());
1: 			}
1: 
1: 			return str.toString();
1: 		}
1: 		else
1: 			return null;
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.log;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.log.LogFactory;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.Externalizable;
0: import java.io.OutputStream;
0: import java.io.InputStream;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	A Log Operation that represents a checkpoint.
0: 	@see Loggable
0: */
0: 
0: public class CheckpointOperation implements Loggable 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	// redo LWM
0: 	protected long	redoLWM;
0: 
0: 	// undo LWM
0: 	protected long	undoLWM;
0: 
0: 	// other log trunaction points - after the checkpoint is read from the log
0: 	// after a recovery, the array is then used to populate the in memory
0: 	// truncation lwm table.
0: 	protected TruncationPoint[]	truncationLWM;
0: 
0: 	protected Formatable transactionTable;
0: 
0: 	public CheckpointOperation(long redoLWM, long undoLWM, 
0: 							   TruncationPoint[] tpoints, Formatable ttab)
0: 	{
0: 		this.redoLWM = redoLWM;
0: 		this.undoLWM = undoLWM;
0: 		this.truncationLWM = tpoints;
0: 		this.transactionTable = ttab;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public CheckpointOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		CompressedNumber.writeLong(out, redoLWM);
0: 		CompressedNumber.writeLong(out, undoLWM);
0: 		if (truncationLWM == null)
0: 			CompressedNumber.writeInt(out, 0);	// no other truncation LWM
0: 		else
0: 		{
0: 			CompressedNumber.writeInt(out, truncationLWM.length);
0: 			for (int i = 0; i < truncationLWM.length; i++)
0: 			{
0: 				out.writeObject(truncationLWM[i].getName());
0: 
0: 				LogCounter l = (LogCounter)(truncationLWM[i].getLogInstant());
0: 				CompressedNumber.writeLong(out,l.getValueAsLong());
0: 			}
0: 		}
0: 
0: 		if (transactionTable == null)
0: 			CompressedNumber.writeInt(out, 0);
0: 		else
0: 		{
0: 			CompressedNumber.writeInt(out, 1);
0: 			out.writeObject(transactionTable);
0: 		}
0: 	}
0: 
0: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
0: 	{
0: 		redoLWM = CompressedNumber.readLong(in);
0: 		undoLWM = CompressedNumber.readLong(in);
0: 
0: 		int tsize = CompressedNumber.readInt(in); // is there any truncationLWM?
0: 		if (tsize == 0)
0: 			truncationLWM = null;
0: 		else
0: 		{
0: 			truncationLWM = new TruncationPoint[tsize];
0: 			UUID name;
0: 			LogInstant instant;
0: 
0: 			for (int i = 0; i < tsize; i++)
0: 			{
0: 				name = (UUID)in.readObject();
0: 
0: 				long l = CompressedNumber.readLong(in);
0: 				truncationLWM[i] = new TruncationPoint(name, new LogCounter(l));
0: 			}
0: 		}
0: 
0: 		int haveTTab = CompressedNumber.readInt(in);
0: 		if (haveTTab == 1)
0: 			transactionTable = (Formatable)in.readObject();
0: 		else
0: 			transactionTable = (Formatable)null;
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_CHECKPOINT;
0: 	}
0: 
0: 	/**
0: 		Loggable methods
0: 	*/
0: 
0: 	/**
0: 	 *	Nothing to do unless we are rollforward recovery;
0: 	 *  Redoing of checkpoints during rollforward recovery allows us to restart
0: 	 *  the  roll-forward recovery from the last checkpoint redone during rollforward recovery, if
0: 	 *  we happen to crash during the roll-forward recovery process.
0: 	 *  Another reason why we need to do this is dropped table stub files
0: 	 *  removed at checkpoint because the containerids may have been reused
0: 	 *  after a checkpoint if the system was rebooted.
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) throws StandardException
0: 	{
0: 		//redo the checkpoint if we are in roll-forward recovery only
0: 		if(((RawTransaction)xact).inRollForwardRecovery())
0: 		{
0: 			((RawTransaction)xact).checkpointInRollForwardRecovery(instant, redoLWM);
0: 		}
0: 		return;
0: 	}
0: 
0: 	/**
0: 		the default for prepared log is always null for all the operations
0: 		that don't have optionalData.  If an operation has optional data,
0: 		the operation need to prepare the optional data for this method.
0: 
0: 		Checkpoint has no optional data to write out
0: 
0: 		@param out Where and how to write to optional data.
0: 		
0: 	*/
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return (ByteArray) null;
0: 	}
0: 
0: 	/**
0: 		Checkpoint does not need to be redone unless
0: 		we are doing rollforward recovery.
0: 	*/
0: 	public boolean needsRedo(Transaction xact)
0: 	{
0: 		
0: 		if(((RawTransaction)xact).inRollForwardRecovery())
0: 			return true;
0: 		else
0: 			return false;
0: 	}
0: 
0: 
0: 	/**
0: 	  Checkpoint has not resource to release
0: 	*/
0: 	public void releaseResource(Transaction xact)
0: 	{}
0: 
0: 	/**
0: 		Checkpoint is a raw store operation
0: 	*/
0: 	public int group()
0: 	{
0: 		return Loggable.RAWSTORE;
0: 	}
0: 
0: 	/**
0: 		Access attributes of the checkpoint record
0: 	*/
0: 	public long redoLWM() 
0: 	{
0: 		return redoLWM;
0: 	}
0: 
0: 	public long undoLWM() 
0: 	{
0: 		return undoLWM;
0: 	}
0: 
0: 	public TruncationPoint[] truncationLWM()
0: 	{
0: 		return truncationLWM;
0: 	}
0: 
0: 	public Formatable getTransactionTable()
0: 	{
0: 		return transactionTable;
0: 	}
0: 
0: 	/**
0: 	  DEBUG: Print self.
0: 	*/
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			LogCounter undolwm = new LogCounter(undoLWM);
0: 			LogCounter redolwm = new LogCounter(redoLWM);
0: 
0: 			StringBuffer str = new StringBuffer(1000)
0: 				.append("Checkpoint : \tredoLWM ")
0: 				.append(redolwm.toString())
0: 				.append("\n\t\tundoLWM ").append(undolwm.toString());
0: 
0: 			if (truncationLWM != null)
0: 			{
0: 				LogCounter logLWM;
0: 				for (int i = truncationLWM.length-1; i >= 0; i--)
0: 				{
0: 					logLWM = (LogCounter)(truncationLWM[i].getLogInstant());
0: 					str.append(" truncation point ").append(i)
0: 						.append(" ").append(logLWM.toString());
0: 				}
0: 			}
0: 
0: 			if (transactionTable != null)
0: 			{
0: 				str.append(transactionTable.toString());
0: 			}
0: 
0: 			return str.toString();
0: 		}
0: 		else
0: 			return null;
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================