1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby - Class org.apache.derbyBuild.eclipse.DerbyEclipsePlugin
1:aaea357: 
1:de243e0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:de243e0:    contributor license agreements.  See the NOTICE file distributed with
1:de243e0:    this work for additional information regarding copyright ownership.
1:de243e0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:de243e0:    (the "License"); you may not use this file except in compliance with
1:de243e0:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyBuild.eclipse;
1:aaea357: 
1:aaea357: import java.util.*;
1:aaea357: import java.io.File;
1:aaea357: import java.io.FileOutputStream;
1:aaea357: import java.io.FileWriter;
1:aaea357: import java.io.InputStream;
1:aaea357: import org.apache.derby.iapi.services.info.ProductGenusNames;
1:aaea357: import org.apache.derby.iapi.services.info.PropertyNames;
1:aaea357: 
1:aaea357: /**
1:aaea357:  * This class provides the functionality to create the build related
1:aaea357:  * related properties, which are used for creating the Derby plug-in
1:aaea357:  * for Eclipse by the ANT script.
1:aaea357:  *
1:aaea357:  * - The Eclipse plugin will be called 'Apache Derby Core Plug-in for Eclipse'
1:aaea357:  *
1:aaea357:  * - The plugin can be build from the main build.xml using 'ant' with the 'plugin'
1:aaea357:  *   argument.
1:aaea357:  *
1:aaea357:  * - The package name for the Derby plug-in will
1:aaea357:  *   be: org.apache.derby.core_<major>.<minor>.<interim> (example: org.apache.derby.core_10.1.0).
1:aaea357:  *
1:aaea357:  * - The plugin.xml in the Derby plug-in will show the actual version of the
1:aaea357:  *   the Derby build (example: 10.1.0.0 (111545M) ). This can be viewed from
1:aaea357:  *   Help - About Eclipse Platform - Plug-in Details of Eclipse of the Eclipse IDE
1:aaea357:  *
1:aaea357:  * - The zip file created for the DerbyEclipse under the jars directory will have the name:
1:aaea357:  *   derby_core_plugin_<major>.<minor>.<interim>.zip (example:derby_core_plugin_10.1.0.zip)
1:aaea357:  *
1:aaea357:  * - The current packaging includes derby.jar, derbynet.jar and
1:aaea357:  *   derbytools.jar. The locale jars for Derby are not included yet.
1:aaea357:  *
1:aaea357:  */
1:aaea357: public class DerbyEclipsePlugin{
1:aaea357: 	/*
1:aaea357: 	 * Derby plug-in package property and name
1:aaea357: 	 */
1:aaea357: 	private static String PLUGIN_PKG="plugin.derby.core";
1:aaea357: 	private static String PLUGIN_PKG_NAME="org.apache.derby.core";
1:aaea357: 	/*
1:aaea357: 	 * Derby plug-in zip file property and name
1:aaea357: 	 */
1:aaea357: 	private static String PLUGIN_ZIP_FILE="plugin.derby.core.zipfile";
1:aaea357: 	private static String PLUGIN_ZIP_FILE_NAME="derby_core_plugin";
1:aaea357: 	/*
1:aaea357: 	 * Derby plug-in build properties and name
1:aaea357: 	 */
1:aaea357: 	private static String PLUGIN_VERSION="plugin.derby.version";
1:aaea357: 	private static String PLUGIN_VERSION_BUILD_NUMBER="plugin.derby.version.build.number";
1:aaea357: 	private static int MAINT_DIV=1000000;
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * plugin.xml file information, split into three parts
1:aaea357: 	 */
1:aaea357: 	private static String part_1="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+
1:aaea357: 				      "<?eclipse version=\"3.0\"?> \n"+
1:aaea357: 				      "<plugin \n" +
1:aaea357:    				      "\t id=\"org.apache.derby.core\" \n" +
1:aaea357:    				      "\t name=\"Apache Derby Core Plug-in for Eclipse\" \n" +
1:aaea357:    				      "\t version=\"";
1:aaea357: 
1:aaea357: 	private static String part_2="\n\t provider-name=\"";
1:aaea357: 	private static String part_3="\n\t <runtime> \n" +
1:aaea357:       				      "\t\t <library name=\"derby.jar\"> \n" +
1:aaea357:          			      "\t\t\t <export name=\"*\"/> \n" +
1:aaea357:       				      "\t\t </library> \n" +
1:aaea357:                                       "\t\t <library name=\"derbyclient.jar\"> \n" +
1:aaea357:                                       "\t\t\t <export name=\"*\"/> \n" +
1:aaea357:                                       "\t\t </library> \n" +
1:aaea357:       				      "\t\t <library name=\"derbytools.jar\"> \n" +
1:aaea357:          			      "\t\t\t <export name=\"*\"/> \n"+
1:aaea357:       				      "\t\t </library> \n"+
1:aaea357:       				      "\t\t <library name=\"derbynet.jar\"> \n"+
1:aaea357:          			      "\t\t\t <export name=\"*\"/> \n"+
1:aaea357:       				      "\t\t </library> \n"+
1:aaea357:    				      "\t </runtime> \n"+
1:aaea357:    				      "\t <requires> \n"+
1:aaea357:    				      "\t </requires> \n"+
1:aaea357:    				      "</plugin>";
1:aaea357: 
1:aaea357: 	private String version="";
1:aaea357: 	private String tmpPropFile="plugintmp.properties";
1:aaea357: 	private static File tmpFileLocation=null;
1:aaea357: 	private static Properties tmpProp=new Properties();
1:aaea357: 	private String pluginXMLFile="plugin.xml";
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * The public main() method to test the working of this class. A valid destination
1:aaea357: 	 * String is all that is needed as an argument for running this class.
1:aaea357: 	 * <p>
1:aaea357: 	 * example: java DerbyEclipsePlugin <destination>
1:aaea357: 	 * <p>
1:aaea357: 	 */
1:aaea357: 
1:aaea357: 	public static void main(String [] args){
1:aaea357: 		if(args.length<=0){
1:aaea357: 			System.out.println("Incorrect number of arguments.");
1:aaea357: 			return;
1:aaea357: 		}
1:aaea357: 		try{
1:aaea357: 			tmpFileLocation=new File(args[0]);
1:aaea357: 			DerbyEclipsePlugin dep = new DerbyEclipsePlugin();
1:aaea357: 			dep.getProps();
1:aaea357: 			dep.createTmpFiles();
1:aaea357: 		}catch(Exception e)
1:aaea357: 		{
1:aaea357: 			e.printStackTrace();
1:aaea357: 		}
1:aaea357: 
1:aaea357: 
1:aaea357: 
1:aaea357: 
1:aaea357: 	}
1:aaea357: 	/*
1:aaea357: 	 * For internal use only.
1:aaea357: 	 * getProps() generates the required Properties from the DBMS.properties file.
1:aaea357: 	 *
1:aaea357: 	 * @exception	Exception if there is an error
1:aaea357: 	 */
1:aaea357: 	private void getProps() throws Exception{
1:aaea357: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
1:aaea357: 		Properties prop=new Properties();
1:aaea357: 		prop.load(versionStream);
1:aaea357: 
1:aaea357: 		//create the tmp Prop file
1:aaea357: 		tmpProp.put(PLUGIN_PKG,PLUGIN_PKG_NAME);			//package name
1:aaea357: 		tmpProp.put(PLUGIN_ZIP_FILE,PLUGIN_ZIP_FILE_NAME);	//zip file name
1:aaea357: 		tmpProp.put(PropertyNames.PRODUCT_VENDOR_NAME,prop.getProperty(PropertyNames.PRODUCT_VENDOR_NAME));
1:aaea357: 		int maint=Integer.parseInt(prop.getProperty(PropertyNames.PRODUCT_MAINT_VERSION));
1:aaea357: 		version=prop.getProperty(PropertyNames.PRODUCT_MAJOR_VERSION)+"."+prop.getProperty(PropertyNames.PRODUCT_MINOR_VERSION)+"."+maint/MAINT_DIV;
1:aaea357: 		tmpProp.put(PLUGIN_VERSION,version);
1:aaea357: 
1:aaea357: 		//With Eclipse 3.1M5a release, adding '(PRODUCT_BUILD_NUMBER)' to the 'version' info in
1:aaea357: 		//the plugin.xml creates some issues while loading. It has been removed and only the
1:aaea357: 		//MAJOR.Minor.interim.point has been added to the plugin.xml.
1:aaea357: 		//The actual Derby build version can be obtained using the 'sysinfo' tool.
1:aaea357: 		
1:aaea357: 		version+="."+maint%MAINT_DIV;
1:aaea357: 		tmpProp.put(PLUGIN_VERSION_BUILD_NUMBER,version+" ("+prop.getProperty(PropertyNames.PRODUCT_BUILD_NUMBER)+")");
1:aaea357: 
1:aaea357: 		//add info to plugin.xml strings
1:aaea357: 		part_1+=version+"\"";
1:aaea357: 		part_2+=tmpProp.getProperty(PropertyNames.PRODUCT_VENDOR_NAME)+"\">\n";
1:aaea357: 
1:aaea357: 	}
1:aaea357: 	/*
1:aaea357: 	 * For internal use only.
1:aaea357: 	 * createTmpFiles() create the temporary files with the build properties at the specified location.
1:aaea357: 	 *
1:aaea357: 	 * @exception	Exception if there is an error
1:aaea357: 	 */
1:aaea357: 	private void createTmpFiles() throws Exception{
1:aaea357: 		File file=new File(tmpFileLocation.getAbsolutePath()+File.separator+tmpPropFile);
1:aaea357: 		FileOutputStream fo=new FileOutputStream(file);
1:aaea357: 		tmpProp.store(fo,null);
1:aaea357: 		fo.close();
1:aaea357: 		file=new File(tmpFileLocation.getAbsolutePath()+File.separator+pluginXMLFile);
1:aaea357: 		FileWriter fw=new FileWriter(file);
1:aaea357: 		fw.write(part_1+part_2+part_3);
1:aaea357: 		fw.close();
1:aaea357: 
1:aaea357: 	}
1:aaea357: }
1:aaea357: 
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:de243e0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.eclipse.DerbyEclipsePlugin
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyBuild.eclipse;
1: 
1: import java.util.*;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.FileWriter;
1: import java.io.InputStream;
1: import org.apache.derby.iapi.services.info.ProductGenusNames;
1: import org.apache.derby.iapi.services.info.PropertyNames;
1: 
1: /**
1:  * This class provides the functionality to create the build related
1:  * related properties, which are used for creating the Derby plug-in
1:  * for Eclipse by the ANT script.
1:  *
1:  * - The Eclipse plugin will be called 'Apache Derby Core Plug-in for Eclipse'
1:  *
1:  * - The plugin can be build from the main build.xml using 'ant' with the 'plugin'
1:  *   argument.
1:  *
1:  * - The package name for the Derby plug-in will
1:  *   be: org.apache.derby.core_<major>.<minor>.<interim> (example: org.apache.derby.core_10.1.0).
1:  *
1:  * - The plugin.xml in the Derby plug-in will show the actual version of the
1:  *   the Derby build (example: 10.1.0.0 (111545M) ). This can be viewed from
1:  *   Help - About Eclipse Platform - Plug-in Details of Eclipse of the Eclipse IDE
1:  *
1:  * - The zip file created for the DerbyEclipse under the jars directory will have the name:
1:  *   derby_core_plugin_<major>.<minor>.<interim>.zip (example:derby_core_plugin_10.1.0.zip)
1:  *
1:  * - The current packaging includes derby.jar, derbynet.jar and
1:  *   derbytools.jar. The locale jars for Derby are not included yet.
1:  *
0:  * @author Rajesh Kartha
1:  */
1: public class DerbyEclipsePlugin{
1: 	/*
1: 	 * Derby plug-in package property and name
1: 	 */
1: 	private static String PLUGIN_PKG="plugin.derby.core";
1: 	private static String PLUGIN_PKG_NAME="org.apache.derby.core";
1: 	/*
1: 	 * Derby plug-in zip file property and name
1: 	 */
1: 	private static String PLUGIN_ZIP_FILE="plugin.derby.core.zipfile";
1: 	private static String PLUGIN_ZIP_FILE_NAME="derby_core_plugin";
1: 	/*
1: 	 * Derby plug-in build properties and name
1: 	 */
1: 	private static String PLUGIN_VERSION="plugin.derby.version";
1: 	private static String PLUGIN_VERSION_BUILD_NUMBER="plugin.derby.version.build.number";
1: 	private static int MAINT_DIV=1000000;
1: 
1: 	/*
1: 	 * plugin.xml file information, split into three parts
1: 	 */
1: 	private static String part_1="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+
1: 				      "<?eclipse version=\"3.0\"?> \n"+
1: 				      "<plugin \n" +
1:    				      "\t id=\"org.apache.derby.core\" \n" +
1:    				      "\t name=\"Apache Derby Core Plug-in for Eclipse\" \n" +
1:    				      "\t version=\"";
1: 
1: 	private static String part_2="\n\t provider-name=\"";
1: 	private static String part_3="\n\t <runtime> \n" +
1:       				      "\t\t <library name=\"derby.jar\"> \n" +
1:          			      "\t\t\t <export name=\"*\"/> \n" +
1:       				      "\t\t </library> \n" +
1:                                       "\t\t <library name=\"derbyclient.jar\"> \n" +
1:                                       "\t\t\t <export name=\"*\"/> \n" +
1:                                       "\t\t </library> \n" +
1:       				      "\t\t <library name=\"derbytools.jar\"> \n" +
1:          			      "\t\t\t <export name=\"*\"/> \n"+
1:       				      "\t\t </library> \n"+
1:       				      "\t\t <library name=\"derbynet.jar\"> \n"+
1:          			      "\t\t\t <export name=\"*\"/> \n"+
1:       				      "\t\t </library> \n"+
1:    				      "\t </runtime> \n"+
1:    				      "\t <requires> \n"+
1:    				      "\t </requires> \n"+
1:    				      "</plugin>";
1: 
1: 	private String version="";
1: 	private String tmpPropFile="plugintmp.properties";
1: 	private static File tmpFileLocation=null;
1: 	private static Properties tmpProp=new Properties();
1: 	private String pluginXMLFile="plugin.xml";
1: 
1: 	/*
1: 	 * The public main() method to test the working of this class. A valid destination
1: 	 * String is all that is needed as an argument for running this class.
1: 	 * <p>
1: 	 * example: java DerbyEclipsePlugin <destination>
1: 	 * <p>
1: 	 */
1: 
1: 	public static void main(String [] args){
1: 		if(args.length<=0){
1: 			System.out.println("Incorrect number of arguments.");
1: 			return;
1: 		}
1: 		try{
1: 			tmpFileLocation=new File(args[0]);
1: 			DerbyEclipsePlugin dep = new DerbyEclipsePlugin();
1: 			dep.getProps();
1: 			dep.createTmpFiles();
1: 		}catch(Exception e)
1: 		{
1: 			e.printStackTrace();
1: 		}
1: 
1: 
1: 
1: 
1: 	}
1: 	/*
1: 	 * For internal use only.
1: 	 * getProps() generates the required Properties from the DBMS.properties file.
1: 	 *
1: 	 * @exception	Exception if there is an error
1: 	 */
1: 	private void getProps() throws Exception{
1: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
1: 		Properties prop=new Properties();
1: 		prop.load(versionStream);
1: 
1: 		//create the tmp Prop file
1: 		tmpProp.put(PLUGIN_PKG,PLUGIN_PKG_NAME);			//package name
1: 		tmpProp.put(PLUGIN_ZIP_FILE,PLUGIN_ZIP_FILE_NAME);	//zip file name
1: 		tmpProp.put(PropertyNames.PRODUCT_VENDOR_NAME,prop.getProperty(PropertyNames.PRODUCT_VENDOR_NAME));
1: 		int maint=Integer.parseInt(prop.getProperty(PropertyNames.PRODUCT_MAINT_VERSION));
1: 		version=prop.getProperty(PropertyNames.PRODUCT_MAJOR_VERSION)+"."+prop.getProperty(PropertyNames.PRODUCT_MINOR_VERSION)+"."+maint/MAINT_DIV;
1: 		tmpProp.put(PLUGIN_VERSION,version);
1: 
1: 		//With Eclipse 3.1M5a release, adding '(PRODUCT_BUILD_NUMBER)' to the 'version' info in
1: 		//the plugin.xml creates some issues while loading. It has been removed and only the
1: 		//MAJOR.Minor.interim.point has been added to the plugin.xml.
1: 		//The actual Derby build version can be obtained using the 'sysinfo' tool.
1: 		
1: 		version+="."+maint%MAINT_DIV;
1: 		tmpProp.put(PLUGIN_VERSION_BUILD_NUMBER,version+" ("+prop.getProperty(PropertyNames.PRODUCT_BUILD_NUMBER)+")");
1: 
1: 		//add info to plugin.xml strings
1: 		part_1+=version+"\"";
1: 		part_2+=tmpProp.getProperty(PropertyNames.PRODUCT_VENDOR_NAME)+"\">\n";
1: 
1: 	}
1: 	/*
1: 	 * For internal use only.
1: 	 * createTmpFiles() create the temporary files with the build properties at the specified location.
1: 	 *
1: 	 * @exception	Exception if there is an error
1: 	 */
1: 	private void createTmpFiles() throws Exception{
1: 		File file=new File(tmpFileLocation.getAbsolutePath()+File.separator+tmpPropFile);
1: 		FileOutputStream fo=new FileOutputStream(file);
1: 		tmpProp.store(fo,null);
1: 		fo.close();
1: 		file=new File(tmpFileLocation.getAbsolutePath()+File.separator+pluginXMLFile);
1: 		FileWriter fw=new FileWriter(file);
1: 		fw.write(part_1+part_2+part_3);
1: 		fw.close();
1: 
1: 	}
1: }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:5e4cc6f
/////////////////////////////////////////////////////////////////////////
0:                                       "\t\t <library name=\"derbyclient.jar\"> \n" +
0:                                       "\t\t\t <export name=\"*\"/> \n" +
0:                                       "\t\t </library> \n" +
0:       				      "\t\t <library name=\"derbytools.jar\"> \n" +
commit:86be837
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyBuild.eclipse.DerbyEclipsePlugin
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyBuild.eclipse;
0: 
0: import java.util.*;
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.FileWriter;
0: import java.io.InputStream;
0: import org.apache.derby.iapi.services.info.ProductGenusNames;
0: import org.apache.derby.iapi.services.info.PropertyNames;
0: 
0: /**
0:  * This class provides the functionality to create the build related
0:  * related properties, which are used for creating the Derby plug-in
0:  * for Eclipse by the ANT script.
0:  *
0:  * - The Eclipse plugin will be called 'Apache Derby Core Plug-in for Eclipse'
0:  *
0:  * - The plugin can be build from the main build.xml using 'ant' with the 'plugin'
0:  *   argument.
0:  *
0:  * - The package name for the Derby plug-in will
0:  *   be: org.apache.derby.core_<major>.<minor>.<interim> (example: org.apache.derby.core_10.1.0).
0:  *
0:  * - The plugin.xml in the Derby plug-in will show the actual version of the
0:  *   the Derby build (example: 10.1.0.0 (111545M) ). This can be viewed from
0:  *   Help - About Eclipse Platform - Plug-in Details of Eclipse of the Eclipse IDE
0:  *
0:  * - The zip file created for the DerbyEclipse under the jars directory will have the name:
0:  *   derby_core_plugin_<major>.<minor>.<interim>.zip (example:derby_core_plugin_10.1.0.zip)
0:  *
0:  * - The current packaging includes derby.jar, derbynet.jar and
0:  *   derbytools.jar. The locale jars for Derby are not included yet.
0:  *
0:  * @author Rajesh Kartha
0:  */
0: public class DerbyEclipsePlugin{
0: 	/*
0: 	 * Derby plug-in package property and name
0: 	 */
0: 	private static String PLUGIN_PKG="plugin.derby.core";
0: 	private static String PLUGIN_PKG_NAME="org.apache.derby.core";
0: 	/*
0: 	 * Derby plug-in zip file property and name
0: 	 */
0: 	private static String PLUGIN_ZIP_FILE="plugin.derby.core.zipfile";
0: 	private static String PLUGIN_ZIP_FILE_NAME="derby_core_plugin";
0: 	/*
0: 	 * Derby plug-in build properties and name
0: 	 */
0: 	private static String PLUGIN_VERSION="plugin.derby.version";
0: 	private static String PLUGIN_VERSION_BUILD_NUMBER="plugin.derby.version.build.number";
0: 	private static int MAINT_DIV=1000000;
0: 
0: 	/*
0: 	 * plugin.xml file information, split into three parts
0: 	 */
0: 	private static String part_1="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+
0: 				      "<?eclipse version=\"3.0\"?> \n"+
0: 				      "<plugin \n" +
0:    				      "\t id=\"org.apache.derby.core\" \n" +
0:    				      "\t name=\"Apache Derby Core Plug-in for Eclipse\" \n" +
0:    				      "\t version=\"";
0: 
0: 	private static String part_2="\n\t provider-name=\"";
0: 	private static String part_3="\n\t <runtime> \n" +
0:       				      "\t\t <library name=\"derby.jar\"> \n" +
0:          			      "\t\t\t <export name=\"*\"/> \n" +
0:       				      "\t\t </library> \n" +
0:       				      "\t\t <library name=\"derbytools.jar\"> \n"+
0:          			      "\t\t\t <export name=\"*\"/> \n"+
0:       				      "\t\t </library> \n"+
0:       				      "\t\t <library name=\"derbynet.jar\"> \n"+
0:          			      "\t\t\t <export name=\"*\"/> \n"+
0:       				      "\t\t </library> \n"+
0:    				      "\t </runtime> \n"+
0:    				      "\t <requires> \n"+
0:    				      "\t </requires> \n"+
0:    				      "</plugin>";
0: 
0: 	private String version="";
0: 	private String tmpPropFile="plugintmp.properties";
0: 	private static File tmpFileLocation=null;
0: 	private static Properties tmpProp=new Properties();
0: 	private String pluginXMLFile="plugin.xml";
0: 
0: 	/*
0: 	 * The public main() method to test the working of this class. A valid destination
0: 	 * String is all that is needed as an argument for running this class.
0: 	 * <p>
0: 	 * example: java DerbyEclipsePlugin <destination>
0: 	 * <p>
0: 	 */
0: 
0: 	public static void main(String [] args){
0: 		if(args.length<=0){
0: 			System.out.println("Incorrect number of arguments.");
0: 			return;
0: 		}
0: 		try{
0: 			tmpFileLocation=new File(args[0]);
0: 			DerbyEclipsePlugin dep = new DerbyEclipsePlugin();
0: 			dep.getProps();
0: 			dep.createTmpFiles();
0: 		}catch(Exception e)
0: 		{
0: 			e.printStackTrace();
0: 		}
0: 
0: 
0: 
0: 
0: 	}
0: 	/*
0: 	 * For internal use only.
0: 	 * getProps() generates the required Properties from the DBMS.properties file.
0: 	 *
0: 	 * @exception	Exception if there is an error
0: 	 */
0: 	private void getProps() throws Exception{
0: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
0: 		Properties prop=new Properties();
0: 		prop.load(versionStream);
0: 
0: 		//create the tmp Prop file
0: 		tmpProp.put(PLUGIN_PKG,PLUGIN_PKG_NAME);			//package name
0: 		tmpProp.put(PLUGIN_ZIP_FILE,PLUGIN_ZIP_FILE_NAME);	//zip file name
0: 		tmpProp.put(PropertyNames.PRODUCT_VENDOR_NAME,prop.getProperty(PropertyNames.PRODUCT_VENDOR_NAME));
0: 		int maint=Integer.parseInt(prop.getProperty(PropertyNames.PRODUCT_MAINT_VERSION));
0: 		version=prop.getProperty(PropertyNames.PRODUCT_MAJOR_VERSION)+"."+prop.getProperty(PropertyNames.PRODUCT_MINOR_VERSION)+"."+maint/MAINT_DIV;
0: 		tmpProp.put(PLUGIN_VERSION,version);
0: 
0: 		//With Eclipse 3.1M5a release, adding '(PRODUCT_BUILD_NUMBER)' to the 'version' info in
0: 		//the plugin.xml creates some issues while loading. It has been removed and only the
0: 		//MAJOR.Minor.interim.point has been added to the plugin.xml.
0: 		//The actual Derby build version can be obtained using the 'sysinfo' tool.
0: 		
0: 		version+="."+maint%MAINT_DIV;
0: 		tmpProp.put(PLUGIN_VERSION_BUILD_NUMBER,version+" ("+prop.getProperty(PropertyNames.PRODUCT_BUILD_NUMBER)+")");
0: 
0: 		//add info to plugin.xml strings
0: 		part_1+=version+"\"";
0: 		part_2+=tmpProp.getProperty(PropertyNames.PRODUCT_VENDOR_NAME)+"\">\n";
0: 
0: 	}
0: 	/*
0: 	 * For internal use only.
0: 	 * createTmpFiles() create the temporary files with the build properties at the specified location.
0: 	 *
0: 	 * @exception	Exception if there is an error
0: 	 */
0: 	private void createTmpFiles() throws Exception{
0: 		File file=new File(tmpFileLocation.getAbsolutePath()+File.separator+tmpPropFile);
0: 		FileOutputStream fo=new FileOutputStream(file);
0: 		tmpProp.store(fo,null);
0: 		fo.close();
0: 		file=new File(tmpFileLocation.getAbsolutePath()+File.separator+pluginXMLFile);
0: 		FileWriter fw=new FileWriter(file);
0: 		fw.write(part_1+part_2+part_3);
0: 		fw.close();
0: 
0: 	}
0: }
0: 
commit:1101462
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyBuild.eclipse.DerbyEclipsePlugin
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyBuild.eclipse;
0: 
0: import java.util.*;
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.FileWriter;
0: import java.io.InputStream;
0: import org.apache.derby.iapi.services.info.ProductGenusNames;
0: import org.apache.derby.iapi.services.info.PropertyNames;
0: 
0: /**
0:  * This class provides the functionality to create the build related
0:  * related properties, which are used for creating the Derby plug-in
0:  * for Eclipse by the ANT script.
0:  *
0:  * - The Eclipse plugin will be called 'Apache Derby Core Plug-in for Eclipse'
0:  *
0:  * - The plugin can be build from the main build.xml using 'ant' with the 'plugin'
0:  *   argument.
0:  *
0:  * - The package name for the Derby plug-in will
0:  *   be: org.apache.derby.core_<major>.<minor>.<interim> (example: org.apache.derby.core_10.1.0).
0:  *
0:  * - The plugin.xml in the Derby plug-in will show the actual version of the
0:  *   the Derby build (example: 10.1.0.0 (111545M) ). This can be viewed from
0:  *   Help - About Eclipse Platform - Plug-in Details of Eclipse of the Eclipse IDE
0:  *
0:  * - The zip file created for the DerbyEclipse under the jars directory will have the name:
0:  *   derby_core_plugin_<major>.<minor>.<interim>.zip (example:derby_core_plugin_10.1.0.zip)
0:  *
0:  * - The current packaging includes derby.jar, derbynet.jar and
0:  *   derbytools.jar. The locale jars for Derby are not included yet.
0:  *
0:  * @author Rajesh Kartha
0:  */
0: public class DerbyEclipsePlugin{
0: 	/*
0: 	 * Derby plug-in package property and name
0: 	 */
0: 	private static String PLUGIN_PKG="plugin.derby.core";
0: 	private static String PLUGIN_PKG_NAME="org.apache.derby.core";
0: 	/*
0: 	 * Derby plug-in zip file property and name
0: 	 */
0: 	private static String PLUGIN_ZIP_FILE="plugin.derby.core.zipfile";
0: 	private static String PLUGIN_ZIP_FILE_NAME="derby_core_plugin";
0: 	/*
0: 	 * Derby plug-in build properties and name
0: 	 */
0: 	private static String PLUGIN_VERSION="plugin.derby.version";
0: 	private static String PLUGIN_VERSION_BUILD_NUMBER="plugin.derby.version.build.number";
0: 	private static int MAINT_DIV=1000000;
0: 
0: 	/*
0: 	 * plugin.xml file information, split into three parts
0: 	 */
0: 	private static String part_1="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+
0: 				      "<?eclipse version=\"3.0\"?> \n"+
0: 				      "<plugin \n" +
0:    				      "\t id=\"org.apache.derby.core\" \n" +
0:    				      "\t name=\"Apache Derby Core Plug-in for Eclipse\" \n" +
0:    				      "\t version=\"";
0: 
0: 	private static String part_2="\n\t provider-name=\"";
0: 	private static String part_3="\n\t <runtime> \n" +
0:       				      "\t\t <library name=\"derby.jar\"> \n" +
0:          			      "\t\t\t <export name=\"*\"/> \n" +
0:       				      "\t\t </library> \n" +
0:       				      "\t\t <library name=\"derbytools.jar\"> \n"+
0:          			      "\t\t\t <export name=\"*\"/> \n"+
0:       				      "\t\t </library> \n"+
0:       				      "\t\t <library name=\"derbynet.jar\"> \n"+
0:          			      "\t\t\t <export name=\"*\"/> \n"+
0:       				      "\t\t </library> \n"+
0:    				      "\t </runtime> \n"+
0:    				      "\t <requires> \n"+
0:    				      "\t </requires> \n"+
0:    				      "</plugin>";
0: 
0: 	private String version="";
0: 	private String tmpPropFile="plugintmp.properties";
0: 	private static File tmpFileLocation=null;
0: 	private static Properties tmpProp=new Properties();
0: 	private String pluginXMLFile="plugin.xml";
0: 
0: 	/*
0: 	 * The public main() method to test the working of this class. A valid destination
0: 	 * String is all that is needed as an argument for running this class.
0: 	 * <p>
0: 	 * example: java DerbyEclipsePlugin <destination>
0: 	 * <p>
0: 	 */
0: 
0: 	public static void main(String [] args){
0: 		if(args.length<=0){
0: 			System.out.println("Incorrect number of arguments.");
0: 			return;
0: 		}
0: 		try{
0: 			tmpFileLocation=new File(args[0]);
0: 			DerbyEclipsePlugin dep = new DerbyEclipsePlugin();
0: 			dep.getProps();
0: 			dep.createTmpFiles();
0: 		}catch(Exception e)
0: 		{
0: 			e.printStackTrace();
0: 		}
0: 
0: 
0: 
0: 
0: 	}
0: 	/*
0: 	 * For internal use only.
0: 	 * getProps() generates the required Properties from the DBMS.properties file.
0: 	 *
0: 	 * @exception	Exception if there is an error
0: 	 */
0: 	private void getProps() throws Exception{
0: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
0: 		Properties prop=new Properties();
0: 		prop.load(versionStream);
0: 
0: 		//create the tmp Prop file
0: 		tmpProp.put(PLUGIN_PKG,PLUGIN_PKG_NAME);			//package name
0: 		tmpProp.put(PLUGIN_ZIP_FILE,PLUGIN_ZIP_FILE_NAME);	//zip file name
0: 		tmpProp.put(PropertyNames.PRODUCT_VENDOR_NAME,prop.getProperty(PropertyNames.PRODUCT_VENDOR_NAME));
0: 		int maint=Integer.parseInt(prop.getProperty(PropertyNames.PRODUCT_MAINT_VERSION));
0: 		version=prop.getProperty(PropertyNames.PRODUCT_MAJOR_VERSION)+"."+prop.getProperty(PropertyNames.PRODUCT_MINOR_VERSION)+"."+maint/MAINT_DIV;
0: 		tmpProp.put(PLUGIN_VERSION,version);
0: 
0: 		//initially thought of using
0: 		//version+="."+maint%MAINT_DIV+"_v"+prop.getProperty(PropertyNames.PRODUCT_BUILD_NUMBER);
0: 		version+="."+maint%MAINT_DIV+" ("+prop.getProperty(PropertyNames.PRODUCT_BUILD_NUMBER)+")";
0: 		tmpProp.put(PLUGIN_VERSION_BUILD_NUMBER,version);
0: 
0: 		//add info to plugin.xml strings
0: 		part_1+=version+"\"";
0: 		part_2+=tmpProp.getProperty(PropertyNames.PRODUCT_VENDOR_NAME)+"\">\n";
0: 
0: 	}
0: 	/*
0: 	 * For internal use only.
0: 	 * createTmpFiles() create the temporary files with the build properties at the specified location.
0: 	 *
0: 	 * @exception	Exception if there is an error
0: 	 */
0: 	private void createTmpFiles() throws Exception{
0: 		File file=new File(tmpFileLocation.getAbsolutePath()+File.separator+tmpPropFile);
0: 		FileOutputStream fo=new FileOutputStream(file);
0: 		tmpProp.store(fo,null);
0: 		fo.close();
0: 		file=new File(tmpFileLocation.getAbsolutePath()+File.separator+pluginXMLFile);
0: 		FileWriter fw=new FileWriter(file);
0: 		fw.write(part_1+part_2+part_3);
0: 		fw.close();
0: 
0: 	}
0: }
0: 
============================================================================