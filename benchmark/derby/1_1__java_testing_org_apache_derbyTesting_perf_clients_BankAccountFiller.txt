1:19a32c4: /*
2:19a32c4: 
1:19a32c4: Derby - Class org.apache.derbyTesting.perf.clients.BankAccountFiller
1:19a32c4: 
1:19a32c4: Licensed to the Apache Software Foundation (ASF) under one or more
1:19a32c4: contributor license agreements.  See the NOTICE file distributed with
1:19a32c4: this work for additional information regarding copyright ownership.
1:19a32c4: The ASF licenses this file to You under the Apache License, Version 2.0
1:19a32c4: (the "License"); you may not use this file except in compliance with
1:19a32c4: the License.  You may obtain a copy of the License at
1:19a32c4: 
1:19a32c4:    http://www.apache.org/licenses/LICENSE-2.0
1:19a32c4: 
1:19a32c4: Unless required by applicable law or agreed to in writing, software
1:19a32c4: distributed under the License is distributed on an "AS IS" BASIS,
1:19a32c4: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:19a32c4: See the License for the specific language governing permissions and
1:19a32c4: limitations under the License.
1:19a32c4: 
1:19a32c4: */
1:19a32c4: 
1:19a32c4: package org.apache.derbyTesting.perf.clients;
1:19a32c4: 
1:19a32c4: import java.sql.Connection;
1:19a32c4: import java.sql.PreparedStatement;
1:19a32c4: import java.sql.Statement;
1:19a32c4: import java.sql.SQLException;
1:19a32c4: 
1:19a32c4: import java.util.Arrays;
1:19a32c4: 
1:19a32c4: /**
1:19a32c4:  * This class creates and populates tables that can be used by the
1:19a32c4:  * bank transactions test clients. It attempts to create tables that
1:19a32c4:  * follow the rules defined by the TPC-B benchmark specification.
1:19a32c4:  */
1:19a32c4: public class BankAccountFiller implements DBFiller {
1:19a32c4: 
1:19a32c4:     /** Name of the account table. */
1:f02a9f2:     static final String ACCOUNT_TABLE = "ACCOUNTS";
1:19a32c4:     /** Name of the branch table. */
1:f02a9f2:     static final String BRANCH_TABLE = "BRANCHES";
1:19a32c4:     /** Name of the teller table. */
1:f02a9f2:     static final String TELLER_TABLE = "TELLERS";
1:19a32c4:     /** Name of the history table. */
1:f02a9f2:     static final String HISTORY_TABLE = "HISTORY";
1:f02a9f2: 
1:f02a9f2:     /** The number of tellers per branch, if not specified. */
1:f02a9f2:     static final int DEFAULT_TELLERS_PER_BRANCH = 10;
1:f02a9f2:     /** The number of accounts per branch, if not specified. */
1:f02a9f2:     static final int DEFAULT_ACCOUNTS_PER_BRANCH = 100000;
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Number of extra bytes needed to make the rows in the account
1:19a32c4:      * table at least 100 bytes, as required by the TPC-B spec. The
1:19a32c4:      * table has two INT columns (4 bytes each) and one BIGINT column
1:19a32c4:      * (8 bytes).
1:19a32c4:      */
1:19a32c4:     private static final int ACCOUNT_EXTRA = 100 - 4 - 4 - 8;
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Number of extra bytes needed to make the rows in the branch
1:19a32c4:      * table at least 100 bytes, as required by the TPC-B spec. The
1:19a32c4:      * table has one INT column (4 bytes) and one BIGINT column (8
1:19a32c4:      * bytes).
1:19a32c4:      */
1:19a32c4:     private static final int BRANCH_EXTRA = 100 - 4 - 8;
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Number of extra bytes needed to make the rows in the teller
1:19a32c4:      * table at least 100 bytes, as required by the TPC-B spec. The
1:19a32c4:      * table has two INT columns (4 bytes each) and one BIGINT column
1:19a32c4:      * (8 bytes).
1:19a32c4:      */
1:19a32c4:     private static final int TELLER_EXTRA = 100 - 4 - 4 - 8;
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Number of extra bytes needed to make the rows in the history
1:19a32c4:      * table at least 50 bytes, as required by the TPC-B spec. The
1:19a32c4:      * table has three INT columns (4 bytes each), one BIGINT column
1:19a32c4:      * (8 bytes) and one TIMESTAMP column (12 bytes).
1:19a32c4:      */
1:f02a9f2:     static final int HISTORY_EXTRA = 50 - 4 - 4 - 4 - 8 - 12;
1:19a32c4: 
1:19a32c4:     /** Number of records in the branch table. */
1:f02a9f2:     private final int branches;
1:f02a9f2:     /** Number of tellers per branch. */
1:f02a9f2:     private final int tellersPerBranch;
1:f02a9f2:     /** Number of accounts per branch. */
1:f02a9f2:     private final int accountsPerBranch;
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Create a filler that generates tables with the given sizes.
1:19a32c4:      *
1:f02a9f2:      * @param branches number of branches
1:f02a9f2:      * @param tellersPerBranch number of tellers per branch
1:f02a9f2:      * @param accountsPerBranch number of accounts per branch
1:19a32c4:      */
1:f02a9f2:     public BankAccountFiller(int branches, int tellersPerBranch,
1:f02a9f2:                              int accountsPerBranch) {
1:f02a9f2:         if (branches <= 0 || tellersPerBranch <= 0 || accountsPerBranch <= 0) {
1:19a32c4:             throw new IllegalArgumentException(
1:19a32c4:                 "all arguments must be greater than 0");
2:19a32c4:         }
1:f02a9f2:         this.branches = branches;
1:f02a9f2:         this.tellersPerBranch = tellersPerBranch;
1:f02a9f2:         this.accountsPerBranch = accountsPerBranch;
1:19a32c4:     }
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Create a filler that generate tables which have correct sizes
1:19a32c4:      * relative to each other. With scale factor 1, the account table
1:19a32c4:      * has 100000 rows, the teller table has 10 rows and the branch
1:19a32c4:      * table has 1 row. If the scale factor is different from 1, the
1:19a32c4:      * number of rows is multiplied with the scale factor.
1:19a32c4:      *
1:f02a9f2:      * @param scale the scale factor for this database
1:19a32c4:      */
1:f02a9f2:     public BankAccountFiller(int scale) {
1:f02a9f2:         this(scale, DEFAULT_TELLERS_PER_BRANCH, DEFAULT_ACCOUNTS_PER_BRANCH);
1:19a32c4:     }
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Populate the database.
1:19a32c4:      */
1:19a32c4:     public void fill(Connection c) throws SQLException {
1:19a32c4:         c.setAutoCommit(false);
1:19a32c4:         dropTables(c);
1:19a32c4:         createTables(c);
1:19a32c4:         fillTables(c);
1:19a32c4:     }
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Drop the tables if they exits.
1:19a32c4:      */
1:19a32c4:     private static void dropTables(Connection c) throws SQLException {
1:19a32c4:         WisconsinFiller.dropTable(c, ACCOUNT_TABLE);
1:19a32c4:         WisconsinFiller.dropTable(c, BRANCH_TABLE);
1:19a32c4:         WisconsinFiller.dropTable(c, TELLER_TABLE);
1:19a32c4:         WisconsinFiller.dropTable(c, HISTORY_TABLE);
1:19a32c4:         c.commit();
1:19a32c4:     }
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Create the tables.
1:19a32c4:      */
1:19a32c4:     private static void createTables(Connection c) throws SQLException {
1:19a32c4:         Statement s = c.createStatement();
1:19a32c4: 
1:19a32c4:         s.executeUpdate("CREATE TABLE " + ACCOUNT_TABLE +
1:167094b:                         "(ACCOUNT_ID INT NOT NULL, " +
1:19a32c4:                         "BRANCH_ID INT NOT NULL, " +
1:19a32c4:                         // The balance column must be able to hold 10
1:19a32c4:                         // digits and sign per TPC-B spec, so BIGINT
1:19a32c4:                         // is needed.
1:19a32c4:                         "ACCOUNT_BALANCE BIGINT NOT NULL, " +
1:19a32c4:                         "EXTRA_DATA CHAR(" + ACCOUNT_EXTRA + ") NOT NULL)");
1:19a32c4: 
1:19a32c4:         s.executeUpdate("CREATE TABLE " + BRANCH_TABLE +
1:167094b:                         "(BRANCH_ID INT NOT NULL, " +
1:19a32c4:                         // The balance column must be able to hold 10
1:19a32c4:                         // digits and sign per TPC-B spec, so BIGINT
1:19a32c4:                         // is needed.
1:19a32c4:                         "BRANCH_BALANCE BIGINT NOT NULL, " +
1:19a32c4:                         "EXTRA_DATA CHAR(" + BRANCH_EXTRA + ") NOT NULL)");
1:19a32c4: 
1:19a32c4:         s.executeUpdate("CREATE TABLE " + TELLER_TABLE +
1:167094b:                         "(TELLER_ID INT NOT NULL, " +
1:19a32c4:                         "BRANCH_ID INT NOT NULL, " +
1:19a32c4:                         // The balance column must be able to hold 10
1:19a32c4:                         // digits and sign per TPC-B spec, so BIGINT
1:19a32c4:                         // is needed.
1:19a32c4:                         "TELLER_BALANCE INT NOT NULL, " +
1:19a32c4:                         "EXTRA_DATA CHAR(" + TELLER_EXTRA + ") NOT NULL)");
1:19a32c4: 
1:19a32c4:         s.executeUpdate("CREATE TABLE " + HISTORY_TABLE +
1:19a32c4:                         "(ACCOUNT_ID INT NOT NULL, " +
1:19a32c4:                         "TELLER_ID INT NOT NULL, " +
1:19a32c4:                         "BRANCH_ID INT NOT NULL, " +
1:19a32c4:                         // The amount column must be able to hold 10
1:19a32c4:                         // digits and sign per TPC-B spec, so BIGINT
1:19a32c4:                         // is needed.
1:19a32c4:                         "AMOUNT BIGINT NOT NULL, " +
1:19a32c4:                         "TIME_STAMP TIMESTAMP NOT NULL, " +
1:19a32c4:                         "EXTRA_DATA CHAR(" + HISTORY_EXTRA + ") NOT NULL)");
1:19a32c4: 
1:19a32c4:         s.close();
1:19a32c4:         c.commit();
1:19a32c4:     }
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Fill the tables with rows.
1:19a32c4:      */
1:19a32c4:     private void fillTables(Connection c) throws SQLException {
1:167094b: 
1:167094b:         Statement s = c.createStatement();
1:19a32c4: 
1:19a32c4:         PreparedStatement atIns =
1:19a32c4:             c.prepareStatement("INSERT INTO " + ACCOUNT_TABLE +
1:19a32c4:                                "(ACCOUNT_ID, BRANCH_ID, ACCOUNT_BALANCE, " +
1:19a32c4:                                "EXTRA_DATA) VALUES (?, ?, 0, ?)");
1:19a32c4:         atIns.setString(3, createJunk(ACCOUNT_EXTRA)); // same for all rows
1:f02a9f2:         for (int id = 0; id < accountsPerBranch * branches; id++) {
1:19a32c4:             atIns.setInt(1, id);
1:f02a9f2:             atIns.setInt(2, id / accountsPerBranch);
1:19a32c4:             atIns.executeUpdate();
1:19a32c4:         }
1:19a32c4:         atIns.close();
1:167094b: 
1:167094b:         s.executeUpdate("ALTER TABLE " + ACCOUNT_TABLE + " ADD CONSTRAINT " +
1:167094b:                 ACCOUNT_TABLE + "_PK PRIMARY KEY (ACCOUNT_ID)");
1:167094b: 
1:19a32c4:         c.commit();
1:19a32c4: 
1:19a32c4:         PreparedStatement btIns =
1:19a32c4:             c.prepareStatement("INSERT INTO " + BRANCH_TABLE +
1:19a32c4:                                "(BRANCH_ID, BRANCH_BALANCE, EXTRA_DATA) " +
1:19a32c4:                                "VALUES (?, 0, ?)");
1:19a32c4:         btIns.setString(2, createJunk(BRANCH_EXTRA)); // same for all rows
1:f02a9f2:         for (int id = 0; id < branches; id++) {
1:19a32c4:             btIns.setInt(1, id);
1:19a32c4:             btIns.executeUpdate();
1:19a32c4:         }
1:19a32c4:         btIns.close();
1:167094b: 
1:167094b:         s.executeUpdate("ALTER TABLE " + BRANCH_TABLE + " ADD CONSTRAINT " +
1:167094b:                 BRANCH_TABLE + "_PK PRIMARY KEY (BRANCH_ID)");
1:167094b: 
1:19a32c4:         c.commit();
1:19a32c4: 
1:19a32c4:         PreparedStatement ttIns =
1:19a32c4:             c.prepareStatement("INSERT INTO " + TELLER_TABLE +
1:19a32c4:                                "(TELLER_ID, BRANCH_ID, TELLER_BALANCE, " +
1:19a32c4:                                "EXTRA_DATA) VALUES (?, ?, 0, ?)");
1:19a32c4:         ttIns.setString(3, createJunk(TELLER_EXTRA)); // same for all rows
1:f02a9f2:         for (int id = 0; id < tellersPerBranch * branches; id++) {
1:19a32c4:             ttIns.setInt(1, id);
1:f02a9f2:             ttIns.setInt(2, id / tellersPerBranch);
1:19a32c4:             ttIns.executeUpdate();
1:19a32c4:         }
1:19a32c4:         ttIns.close();
1:167094b: 
1:167094b:         s.executeUpdate("ALTER TABLE " + TELLER_TABLE + " ADD CONSTRAINT " +
1:167094b:                 TELLER_TABLE + "_PK PRIMARY KEY (TELLER_ID)");
1:167094b: 
1:19a32c4:         c.commit();
1:167094b: 
1:167094b:         s.close();
1:19a32c4:     }
1:19a32c4: 
1:19a32c4:     /**
1:19a32c4:      * Return a string of the specified length that can be used to
1:19a32c4:      * increase the size of the rows. The string only contains
1:19a32c4:      * x's. The rows have a defined minimum size in bytes, whereas the
1:19a32c4:      * string length is in characters. For now, we assume that one
1:19a32c4:      * character maps to one byte on the disk as long as the string
1:19a32c4:      * only contains ASCII characters.
1:19a32c4:      *
1:19a32c4:      * @param length the length of the string
1:19a32c4:      * @return a string of the specified length
1:19a32c4:      */
1:f02a9f2:     static String createJunk(int length) {
1:19a32c4:         char[] junk = new char[length];
1:19a32c4:         Arrays.fill(junk, 'x');
1:19a32c4:         return new String(junk);
1:19a32c4:     }
1:19a32c4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:167094b
/////////////////////////////////////////////////////////////////////////
1:                         "(ACCOUNT_ID INT NOT NULL, " +
/////////////////////////////////////////////////////////////////////////
1:                         "(BRANCH_ID INT NOT NULL, " +
/////////////////////////////////////////////////////////////////////////
1:                         "(TELLER_ID INT NOT NULL, " +
/////////////////////////////////////////////////////////////////////////
1:         Statement s = c.createStatement();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         s.executeUpdate("ALTER TABLE " + ACCOUNT_TABLE + " ADD CONSTRAINT " +
1:                 ACCOUNT_TABLE + "_PK PRIMARY KEY (ACCOUNT_ID)");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         s.executeUpdate("ALTER TABLE " + BRANCH_TABLE + " ADD CONSTRAINT " +
1:                 BRANCH_TABLE + "_PK PRIMARY KEY (BRANCH_ID)");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         s.executeUpdate("ALTER TABLE " + TELLER_TABLE + " ADD CONSTRAINT " +
1:                 TELLER_TABLE + "_PK PRIMARY KEY (TELLER_ID)");
1: 
1: 
1:         s.close();
commit:f02a9f2
/////////////////////////////////////////////////////////////////////////
1:     static final String ACCOUNT_TABLE = "ACCOUNTS";
1:     static final String BRANCH_TABLE = "BRANCHES";
1:     static final String TELLER_TABLE = "TELLERS";
1:     static final String HISTORY_TABLE = "HISTORY";
1: 
1:     /** The number of tellers per branch, if not specified. */
1:     static final int DEFAULT_TELLERS_PER_BRANCH = 10;
1:     /** The number of accounts per branch, if not specified. */
1:     static final int DEFAULT_ACCOUNTS_PER_BRANCH = 100000;
/////////////////////////////////////////////////////////////////////////
1:     static final int HISTORY_EXTRA = 50 - 4 - 4 - 4 - 8 - 12;
1:     private final int branches;
1:     /** Number of tellers per branch. */
1:     private final int tellersPerBranch;
1:     /** Number of accounts per branch. */
1:     private final int accountsPerBranch;
1:      * @param branches number of branches
1:      * @param tellersPerBranch number of tellers per branch
1:      * @param accountsPerBranch number of accounts per branch
1:     public BankAccountFiller(int branches, int tellersPerBranch,
1:                              int accountsPerBranch) {
1:         if (branches <= 0 || tellersPerBranch <= 0 || accountsPerBranch <= 0) {
1:         this.branches = branches;
1:         this.tellersPerBranch = tellersPerBranch;
1:         this.accountsPerBranch = accountsPerBranch;
/////////////////////////////////////////////////////////////////////////
1:      * @param scale the scale factor for this database
1:     public BankAccountFiller(int scale) {
1:         this(scale, DEFAULT_TELLERS_PER_BRANCH, DEFAULT_ACCOUNTS_PER_BRANCH);
/////////////////////////////////////////////////////////////////////////
1:         for (int id = 0; id < accountsPerBranch * branches; id++) {
1:             atIns.setInt(2, id / accountsPerBranch);
/////////////////////////////////////////////////////////////////////////
1:         for (int id = 0; id < branches; id++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int id = 0; id < tellersPerBranch * branches; id++) {
1:             ttIns.setInt(2, id / tellersPerBranch);
/////////////////////////////////////////////////////////////////////////
1:     static String createJunk(int length) {
commit:19a32c4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.BankAccountFiller
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
1: import java.util.Arrays;
1: 
1: /**
1:  * This class creates and populates tables that can be used by the
1:  * bank transactions test clients. It attempts to create tables that
1:  * follow the rules defined by the TPC-B benchmark specification.
1:  */
1: public class BankAccountFiller implements DBFiller {
1: 
1:     /** Name of the account table. */
0:     private static final String ACCOUNT_TABLE = "ACCOUNTS";
1:     /** Name of the branch table. */
0:     private static final String BRANCH_TABLE = "BRANCHES";
1:     /** Name of the teller table. */
0:     private static final String TELLER_TABLE = "TELLERS";
1:     /** Name of the history table. */
0:     private static final String HISTORY_TABLE = "HISTORY";
1: 
1:     /**
1:      * Number of extra bytes needed to make the rows in the account
1:      * table at least 100 bytes, as required by the TPC-B spec. The
1:      * table has two INT columns (4 bytes each) and one BIGINT column
1:      * (8 bytes).
1:      */
1:     private static final int ACCOUNT_EXTRA = 100 - 4 - 4 - 8;
1: 
1:     /**
1:      * Number of extra bytes needed to make the rows in the branch
1:      * table at least 100 bytes, as required by the TPC-B spec. The
1:      * table has one INT column (4 bytes) and one BIGINT column (8
1:      * bytes).
1:      */
1:     private static final int BRANCH_EXTRA = 100 - 4 - 8;
1: 
1:     /**
1:      * Number of extra bytes needed to make the rows in the teller
1:      * table at least 100 bytes, as required by the TPC-B spec. The
1:      * table has two INT columns (4 bytes each) and one BIGINT column
1:      * (8 bytes).
1:      */
1:     private static final int TELLER_EXTRA = 100 - 4 - 4 - 8;
1: 
1:     /**
1:      * Number of extra bytes needed to make the rows in the history
1:      * table at least 50 bytes, as required by the TPC-B spec. The
1:      * table has three INT columns (4 bytes each), one BIGINT column
1:      * (8 bytes) and one TIMESTAMP column (12 bytes).
1:      */
0:     private static final int HISTORY_EXTRA = 50 - 4 - 4 - 4 - 8 - 12;
1: 
0:     /** Number of records in the account table. */
0:     private final int accountRecords;
0:     /** Number of records in the teller table. */
0:     private final int tellerRecords;
1:     /** Number of records in the branch table. */
0:     private final int branchRecords;
1: 
1:     /**
1:      * Create a filler that generates tables with the given sizes.
1:      *
0:      * @param accounts number of records in the account table
0:      * @param tellers number of records in the teller table
0:      * @param branches number of records in the branch table
1:      */
0:     public BankAccountFiller(int accounts, int tellers, int branches) {
0:         if (accounts <= 0 || tellers <= 0 || branches <= 0) {
1:             throw new IllegalArgumentException(
1:                 "all arguments must be greater than 0");
1:         }
0:         accountRecords = accounts;
0:         tellerRecords = tellers;
0:         branchRecords = branches;
1:     }
1: 
1:     /**
1:      * Create a filler that generate tables which have correct sizes
1:      * relative to each other. With scale factor 1, the account table
1:      * has 100000 rows, the teller table has 10 rows and the branch
1:      * table has 1 row. If the scale factor is different from 1, the
1:      * number of rows is multiplied with the scale factor.
1:      *
0:      * @param tps the scale factor for this database
1:      */
0:     public BankAccountFiller(int tps) {
0:         this(tps * 100000, tps * 10, tps * 1);
1:     }
1: 
1:     /**
1:      * Populate the database.
1:      */
1:     public void fill(Connection c) throws SQLException {
1:         c.setAutoCommit(false);
1:         dropTables(c);
1:         createTables(c);
1:         fillTables(c);
1:     }
1: 
1:     /**
1:      * Drop the tables if they exits.
1:      */
1:     private static void dropTables(Connection c) throws SQLException {
1:         WisconsinFiller.dropTable(c, ACCOUNT_TABLE);
1:         WisconsinFiller.dropTable(c, BRANCH_TABLE);
1:         WisconsinFiller.dropTable(c, TELLER_TABLE);
1:         WisconsinFiller.dropTable(c, HISTORY_TABLE);
1:         c.commit();
1:     }
1: 
1:     /**
1:      * Create the tables.
1:      */
1:     private static void createTables(Connection c) throws SQLException {
1:         Statement s = c.createStatement();
1: 
1:         s.executeUpdate("CREATE TABLE " + ACCOUNT_TABLE +
0:                         "(ACCOUNT_ID INT PRIMARY KEY, " +
1:                         "BRANCH_ID INT NOT NULL, " +
1:                         // The balance column must be able to hold 10
1:                         // digits and sign per TPC-B spec, so BIGINT
1:                         // is needed.
1:                         "ACCOUNT_BALANCE BIGINT NOT NULL, " +
1:                         "EXTRA_DATA CHAR(" + ACCOUNT_EXTRA + ") NOT NULL)");
1: 
1:         s.executeUpdate("CREATE TABLE " + BRANCH_TABLE +
0:                         "(BRANCH_ID INT PRIMARY KEY, " +
1:                         // The balance column must be able to hold 10
1:                         // digits and sign per TPC-B spec, so BIGINT
1:                         // is needed.
1:                         "BRANCH_BALANCE BIGINT NOT NULL, " +
1:                         "EXTRA_DATA CHAR(" + BRANCH_EXTRA + ") NOT NULL)");
1: 
1:         s.executeUpdate("CREATE TABLE " + TELLER_TABLE +
0:                         "(TELLER_ID INT PRIMARY KEY, " +
1:                         "BRANCH_ID INT NOT NULL, " +
1:                         // The balance column must be able to hold 10
1:                         // digits and sign per TPC-B spec, so BIGINT
1:                         // is needed.
1:                         "TELLER_BALANCE INT NOT NULL, " +
1:                         "EXTRA_DATA CHAR(" + TELLER_EXTRA + ") NOT NULL)");
1: 
1:         s.executeUpdate("CREATE TABLE " + HISTORY_TABLE +
1:                         "(ACCOUNT_ID INT NOT NULL, " +
1:                         "TELLER_ID INT NOT NULL, " +
1:                         "BRANCH_ID INT NOT NULL, " +
1:                         // The amount column must be able to hold 10
1:                         // digits and sign per TPC-B spec, so BIGINT
1:                         // is needed.
1:                         "AMOUNT BIGINT NOT NULL, " +
1:                         "TIME_STAMP TIMESTAMP NOT NULL, " +
1:                         "EXTRA_DATA CHAR(" + HISTORY_EXTRA + ") NOT NULL)");
1: 
1:         s.close();
1:         c.commit();
1:     }
1: 
1:     /**
1:      * Fill the tables with rows.
1:      */
1:     private void fillTables(Connection c) throws SQLException {
1: 
1:         PreparedStatement atIns =
1:             c.prepareStatement("INSERT INTO " + ACCOUNT_TABLE +
1:                                "(ACCOUNT_ID, BRANCH_ID, ACCOUNT_BALANCE, " +
1:                                "EXTRA_DATA) VALUES (?, ?, 0, ?)");
1:         atIns.setString(3, createJunk(ACCOUNT_EXTRA)); // same for all rows
0:         for (int id = 0; id < accountRecords; id++) {
1:             atIns.setInt(1, id);
0:             atIns.setInt(2, id % branchRecords);
1:             atIns.executeUpdate();
1:         }
1:         atIns.close();
1:         c.commit();
1: 
1:         PreparedStatement btIns =
1:             c.prepareStatement("INSERT INTO " + BRANCH_TABLE +
1:                                "(BRANCH_ID, BRANCH_BALANCE, EXTRA_DATA) " +
1:                                "VALUES (?, 0, ?)");
1:         btIns.setString(2, createJunk(BRANCH_EXTRA)); // same for all rows
0:         for (int id = 0; id < branchRecords; id++) {
1:             btIns.setInt(1, id);
1:             btIns.executeUpdate();
1:         }
1:         btIns.close();
1:         c.commit();
1: 
1:         PreparedStatement ttIns =
1:             c.prepareStatement("INSERT INTO " + TELLER_TABLE +
1:                                "(TELLER_ID, BRANCH_ID, TELLER_BALANCE, " +
1:                                "EXTRA_DATA) VALUES (?, ?, 0, ?)");
1:         ttIns.setString(3, createJunk(TELLER_EXTRA)); // same for all rows
0:         for (int id = 0; id < tellerRecords; id++) {
1:             ttIns.setInt(1, id);
0:             ttIns.setInt(2, id % branchRecords);
1:             ttIns.executeUpdate();
1:         }
1:         ttIns.close();
1:         c.commit();
1:     }
1: 
1:     /**
1:      * Return a string of the specified length that can be used to
1:      * increase the size of the rows. The string only contains
1:      * x's. The rows have a defined minimum size in bytes, whereas the
1:      * string length is in characters. For now, we assume that one
1:      * character maps to one byte on the disk as long as the string
1:      * only contains ASCII characters.
1:      *
1:      * @param length the length of the string
1:      * @return a string of the specified length
1:      */
0:     private static String createJunk(int length) {
1:         char[] junk = new char[length];
1:         Arrays.fill(junk, 'x');
1:         return new String(junk);
1:     }
1: 
0:     // For testing until the test client that uses the database has
0:     // been written.
0:     public static void main(String[] args) throws Exception {
0:         Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
0:         Connection c = java.sql.DriverManager.getConnection(
0:             "jdbc:derby:wombat;create=true");
0:         DBFiller f = new BankAccountFiller(4000, 20, 3);
0:         System.out.print("filling...");
0:         f.fill(c);
0:         System.out.println("done!");
1:     }
1: }
============================================================================