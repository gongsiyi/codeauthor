1:efa5857: /*
2:efa5857: 
1:0746b5a:    Derby - Class org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources
1:efa5857: 
1:efa5857:    Licensed to the Apache Software Foundation (ASF) under one or more
1:efa5857:    contributor license agreements.  See the NOTICE file distributed with
1:efa5857:    this work for additional information regarding copyright ownership.
1:efa5857:    The ASF licenses this file to You under the Apache License, Version 2.0
1:efa5857:    (the "License"); you may not use this file except in compliance with
1:efa5857:    the License.  You may obtain a copy of the License at
1:efa5857: 
1:efa5857:       http://www.apache.org/licenses/LICENSE-2.0
1:efa5857: 
1:efa5857:    Unless required by applicable law or agreed to in writing, software
1:efa5857:    distributed under the License is distributed on an "AS IS" BASIS,
1:efa5857:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efa5857:    See the License for the specific language governing permissions and
1:efa5857:    limitations under the License.
1:efa5857: 
1:efa5857:  */
1:0746b5a: package org.apache.derbyTesting.functionTests.testData.serializedDataSources;
1:efa5857: 
1:efa5857: import java.io.File;
1:efa5857: import java.io.FileInputStream;
1:efa5857: import java.io.FileOutputStream;
1:efa5857: import java.io.InputStream;
1:efa5857: import java.io.IOException;
1:efa5857: import java.io.ObjectInputStream;
1:efa5857: import java.io.ObjectOutputStream;
1:efa5857: import java.io.OutputStream;
1:c35e4f0: import java.lang.reflect.InvocationTargetException;
1:c35e4f0: import java.lang.reflect.Method;
1:efa5857: 
1:efa5857: import javax.naming.NamingException;
1:efa5857: import javax.sql.DataSource;
1:efa5857: 
1:efa5857: import org.apache.derby.tools.sysinfo;
1:efa5857: 
1:efa5857: /**
1:efa5857:  * Serializes and writes data sources to file, or prints information about
1:efa5857:  * a file assumed to be written by this program.
1:efa5857:  * <p>
1:efa5857:  * Four entities are written to the stream:
1:efa5857:  * <ol> <li>Derby version string - UTF</li>
1:efa5857:  *      <li>Derby build number - UTF</li>
1:efa5857:  *      <li>Derby data source - object</li>
1:efa5857:  *      <li>Derby data source reference - object</li>
1:efa5857:  * </ol>
1:efa5857:  * <p>
1:efa5857:  * Both embedded and client data sources are attempted serialized, and the data
1:efa5857:  * source class names are obtained from a predefined list. If another data
1:efa5857:  * source implementation is added to Derby, its class name must be added to the
1:efa5857:  * list if this class is supposed to serialize it and write it to file.
1:efa5857:  * <p>
1:efa5857:  * Existing files are overwritten, and the file name is constructed like this:
1:efa5857:  * <tt>&lt;ClassName&gt;-&lt;modifiedVersionString&gt;.ser</tt>
1:efa5857:  * The version string is modified by replacing punctuation marks with
1:efa5857:  * underscores.
1:efa5857:  */
1:efa5857: public class SerializeDataSources {
1:efa5857: 
1:efa5857:     /** List of known data sources in the embedded driver. */
1:efa5857:     private static final String[] KNOWN_EMBEDDED_DATA_SOURCES ={
1:efa5857:             "org.apache.derby.jdbc.EmbeddedDataSource",
1:efa5857:             "org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource",
1:c35e4f0:             "org.apache.derby.jdbc.EmbeddedXADataSource",
1:c35e4f0:             "org.apache.derby.jdbc.EmbeddedDataSource40",
1:c35e4f0:             "org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40",
1:c35e4f0:             "org.apache.derby.jdbc.EmbeddedXADataSource40",
1:38667d9:             "org.apache.derby.jdbc.BasicEmbeddedDataSource40",
1:38667d9:             "org.apache.derby.jdbc.BasicEmbeddedConnectionPoolDataSource40",
1:38667d9:             "org.apache.derby.jdbc.BasicEmbeddedXADataSource40"
1:efa5857:         };
1:efa5857: 
1:efa5857:     /** List of known data sources in the client driver. */
1:efa5857:     private static final String[] KNOWN_CLIENT_DATA_SOURCES ={
1:efa5857:             "org.apache.derby.jdbc.ClientDataSource",
1:efa5857:             "org.apache.derby.jdbc.ClientConnectionPoolDataSource",
1:c35e4f0:             "org.apache.derby.jdbc.ClientXADataSource",
1:c35e4f0:             "org.apache.derby.jdbc.ClientDataSource40",
1:c35e4f0:             "org.apache.derby.jdbc.ClientConnectionPoolDataSource40",
1:c35e4f0:             "org.apache.derby.jdbc.ClientXADataSource40",
1:38667d9:             "org.apache.derby.jdbc.BasicClientDataSource40",
1:38667d9:             "org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40",
1:38667d9:             "org.apache.derby.jdbc.BasicClientXADataSource40"
1:efa5857:         };
1:c35e4f0: 
1:efa5857:     /**
1:efa5857:      * Serialize and write data sources to file.
1:efa5857:      * 
1:0746b5a:      * @param versionString Derby version string (i.e. 10.3.2.1)
1:efa5857:      * @param buildNumber Derby build number (svn)
1:efa5857:      * @param dataSourceClasses list of data source class names
1:efa5857:      * @return The number of data sources serialized and written to file.
1:efa5857:      * 
1:efa5857:      * @throws ClassNotFoundException required class is not on the classpath
1:efa5857:      * @throws InstantiationException if instantiating data source class fails
1:efa5857:      * @throws IllegalAccessException if instantiating data source class fails
1:efa5857:      * @throws IOException if writing to file fails
1:efa5857:      * @throws NamingException if creating a naming reference for the data
1:efa5857:      *      source fails
1:efa5857:      */
1:efa5857:     private static int serializeDataSources(String versionString,
1:efa5857:                                             String buildNumber,
1:efa5857:                                             String[] dataSourceClasses)
1:efa5857:             throws ClassNotFoundException, InstantiationException,
1:c35e4f0:                    IllegalAccessException, IOException, NamingException,
1:c35e4f0:                    NoSuchMethodException, InvocationTargetException {
1:c35e4f0:         String modifiedVersionString = versionString.replaceAll(
1:c35e4f0:                 "\\.", "_");
1:c35e4f0:         modifiedVersionString = modifiedVersionString.replaceAll(
1:c35e4f0:                 " alpha", "");
1:c35e4f0:         modifiedVersionString = modifiedVersionString.replaceAll(
1:c35e4f0:                 "_0_0", "_1_0");
1:efa5857:         int dsCount = 0;
1:efa5857:         for (String dsClassName : dataSourceClasses) {
1:4469400:             Class<?> dsClass;
1:efa5857:             // Try to load the class.
1:efa5857:             try {
1:efa5857:                 dsClass = Class.forName(dsClassName);
1:efa5857:             } catch (ClassNotFoundException cnfe) {
1:efa5857:                 // Print error message, but keep going.
1:efa5857:                 System.out.println("\tcouldn't load " + dsClassName);
1:efa5857:                 continue;
1:efa5857:             }
1:efa5857:             // Create new instance.
1:4469400:             DataSource ds = (DataSource)dsClass.getConstructor().newInstance();
1:efa5857:             // Generate file name.
1:efa5857:             File serialized = new File(dsClass.getSimpleName() + "-" +
1:efa5857:                     modifiedVersionString + ".ser");
1:efa5857:             System.out.println("\twriting " + serialized.getName());
1:efa5857:             OutputStream os = new FileOutputStream(serialized);
1:efa5857:             ObjectOutputStream oos = new ObjectOutputStream(os);
1:c35e4f0:             // Wrote version string, build number, the data source
1:c35e4f0:             // object and finally a {@link javax.naming.Reference} for
1:e6d2f67:             // the data source (if not a non-JNDI data source).
1:efa5857:             oos.writeUTF(versionString);
1:efa5857:             oos.writeUTF(buildNumber);
1:efa5857:             oos.writeObject(ds);
1:38667d9:             if (!(dsClassName.contains("Basic"))) {
1:c35e4f0:                 Method getRef = Class.forName("javax.naming.Referenceable").
1:c35e4f0:                         getMethod("getReference");
1:c35e4f0:                 Object dsRef = getRef.invoke(ds);
1:c35e4f0:                 oos.writeObject(dsRef);
1:c35e4f0:             }
1:efa5857:             oos.flush();
1:efa5857:             oos.close();
1:efa5857:             dsCount++;
1:efa5857:         }
1:efa5857:         return dsCount;
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Attempts to read information from a file assumed to contain a
1:efa5857:      * serialized data source.
1:efa5857:      * <p>
1:efa5857:      * All information is printed to the console.
1:efa5857:      *
1:efa5857:      * @param fileName the name of the file to read from
1:efa5857:      * @return {@code true} if the file was read successfully, {@code false} if
1:efa5857:      *      something went wrong.
1:efa5857:      */
1:efa5857:     private static boolean printInfoFromSerializedFile(String fileName) {
1:efa5857:         System.out.println(">>> File: " + fileName);
1:efa5857:         File file = new File(fileName);
1:efa5857:         if (!file.exists()) {
1:efa5857:             System.out.println("\tFile does not exist.");
1:efa5857:             return false;
1:efa5857:         }
1:efa5857:         if (!file.canRead()) {
1:efa5857:             System.out.println("\tCannot read file.");
1:efa5857:             return false;
1:efa5857:         }
1:efa5857:         try {
1:efa5857:             InputStream is = new FileInputStream(file);
1:efa5857:             ObjectInputStream ois = new ObjectInputStream(is);
1:efa5857:             String version = ois.readUTF();
1:efa5857:             System.out.println("\tversion: " + version);
1:efa5857:             String buildNr = ois.readUTF();
1:efa5857:             System.out.println("\tbuild  : " + buildNr);
1:efa5857:             Object obj = ois.readObject();
2:efa5857:             System.out.println("\tobject : " + obj);
1:38667d9:             if (!(obj.getClass().getName().indexOf("Basic") > 0)) {
1:c35e4f0:                 obj = ois.readObject();
1:c35e4f0:                 System.out.println("\tobject : " + obj);
1:c35e4f0:             }
1:efa5857:         } catch (Exception e) {
1:efa5857:             System.out.println("\t!! De-serialization failed: " + e.getMessage());
1:efa5857:             e.printStackTrace();
1:efa5857:             return false;
1:efa5857:         }
1:efa5857:         return true; 
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Serializes and writes a number of Derby data sources to disk, or
1:efa5857:      * attempts to read information from existing files.
1:efa5857:      * 
1:efa5857:      * @param args arguments from the command line. If there are no arguments,
1:efa5857:      *      the program will write data sources to file. Otherwise all
1:efa5857:      *      arguments are assumed to be file names of files to read.
1:efa5857:      * @throws Exception if something goes wrong
1:efa5857:      */
1:efa5857:     public static void main(String[] args)
1:efa5857:             throws Exception {
1:efa5857:         // Obtain Derby version / information.
1:efa5857:         int majorVersionEmbedded = sysinfo.getMajorVersion(sysinfo.DBMS);
1:efa5857:         int minorVersionEmbedded = sysinfo.getMinorVersion(sysinfo.DBMS);
1:efa5857:         String buildNumberEmbedded = sysinfo.getBuildNumber(sysinfo.DBMS);
1:efa5857:         String versionEmbedded = sysinfo.getVersionString(sysinfo.DBMS);
1:efa5857:         int majorVersionClient = sysinfo.getMajorVersion(sysinfo.CLIENT);
1:efa5857:         int minorVersionClient = sysinfo.getMinorVersion(sysinfo.CLIENT);
1:efa5857:         String buildNumberClient = sysinfo.getBuildNumber(sysinfo.CLIENT);
1:efa5857:         String versionClient = sysinfo.getVersionString(sysinfo.CLIENT);
1:efa5857: 
1:efa5857:         // Check if we should try to read files.
1:efa5857:         if (args.length > 0) {
1:efa5857:             System.out.println("Reading files with the Derby version(s):");
1:efa5857:             System.out.println("\tembedded: " + versionEmbedded);
1:efa5857:             System.out.println("\tclient  : " + versionClient);
1:efa5857:             System.out.println();
1:efa5857:             for (int i=0; i < args.length; i++) {
1:efa5857:                 boolean status = printInfoFromSerializedFile(args[i]);
1:efa5857:                 System.out.println("File read successfully: " + status);
1:efa5857:                 System.out.println();
1:efa5857:             }
1:efa5857:             System.exit(0);
1:efa5857:         }
1:efa5857: 
1:efa5857:         // We are writing data sources to file.
1:efa5857: 
1:efa5857:         // Counts to print some simple statistics at the end.
1:efa5857:         int knownDsCount = KNOWN_EMBEDDED_DATA_SOURCES.length +
1:efa5857:                 KNOWN_CLIENT_DATA_SOURCES.length;
1:efa5857:         int dsWritten = 0;
1:efa5857: 
1:efa5857:         // Only try to serialize data sources if we know which Derby version we
1:efa5857:         // are dealing with.
1:efa5857:         if (majorVersionEmbedded != -1 && minorVersionEmbedded != -1) {
1:efa5857:             System.out.println("Serializing embedded data sources for Derby " +
1:efa5857:                     "version " + versionEmbedded);
1:efa5857:             dsWritten += serializeDataSources(versionEmbedded,
1:efa5857:                     buildNumberEmbedded,
1:efa5857:                     KNOWN_EMBEDDED_DATA_SOURCES);
1:efa5857:         } else {
1:efa5857:             System.err.println("No embedded data sources will be generated " +
1:efa5857:                     "because Derby version can't be determined.");
1:efa5857:         }
1:efa5857: 
1:efa5857:         if (majorVersionClient != -1 && minorVersionClient != -1) {
1:efa5857:             System.out.println("Serializing client data sources for Derby " +
1:efa5857:                     "version " + versionClient);
1:efa5857:             dsWritten += serializeDataSources(versionClient,
1:efa5857:                     buildNumberClient,
1:efa5857:                     KNOWN_CLIENT_DATA_SOURCES);
1:efa5857:         } else {
1:efa5857:             System.err.println("No client data sources will be generated " +
1:efa5857:                     "because Derby version can't be determined.");
1:efa5857:         }
1:efa5857: 
1:efa5857:         // Print some simple statistics.
1:efa5857:         System.out.println();
1:efa5857:         System.out.println("Known data sources:   " + knownDsCount);
1:efa5857:         System.out.println("Data sources written: " + dsWritten);
1:efa5857:     }
1:efa5857: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> dsClass;
/////////////////////////////////////////////////////////////////////////
1:             DataSource ds = (DataSource)dsClass.getConstructor().newInstance();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e6d2f67
/////////////////////////////////////////////////////////////////////////
1:             // the data source (if not a non-JNDI data source).
commit:38667d9
/////////////////////////////////////////////////////////////////////////
1:             "org.apache.derby.jdbc.BasicEmbeddedDataSource40",
1:             "org.apache.derby.jdbc.BasicEmbeddedConnectionPoolDataSource40",
1:             "org.apache.derby.jdbc.BasicEmbeddedXADataSource40"
/////////////////////////////////////////////////////////////////////////
1:             "org.apache.derby.jdbc.BasicClientDataSource40",
1:             "org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40",
1:             "org.apache.derby.jdbc.BasicClientXADataSource40"
/////////////////////////////////////////////////////////////////////////
1:             if (!(dsClassName.contains("Basic"))) {
/////////////////////////////////////////////////////////////////////////
1:             if (!(obj.getClass().getName().indexOf("Basic") > 0)) {
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1:             "org.apache.derby.jdbc.EmbeddedXADataSource",
1:             "org.apache.derby.jdbc.EmbeddedDataSource40",
1:             "org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40",
1:             "org.apache.derby.jdbc.EmbeddedXADataSource40",
0:             "org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40",
0:             "org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40",
0:             "org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"
1:             "org.apache.derby.jdbc.ClientXADataSource",
1:             "org.apache.derby.jdbc.ClientDataSource40",
1:             "org.apache.derby.jdbc.ClientConnectionPoolDataSource40",
1:             "org.apache.derby.jdbc.ClientXADataSource40",
0:             "org.apache.derby.jdbc.NonJNDIClientDataSource40",
0:             "org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40",
0:             "org.apache.derby.jdbc.NonJNDIClientXADataSource40"
1: 
/////////////////////////////////////////////////////////////////////////
1:                    IllegalAccessException, IOException, NamingException,
1:                    NoSuchMethodException, InvocationTargetException {
1:         String modifiedVersionString = versionString.replaceAll(
1:                 "\\.", "_");
1:         modifiedVersionString = modifiedVersionString.replaceAll(
1:                 " alpha", "");
1:         modifiedVersionString = modifiedVersionString.replaceAll(
1:                 "_0_0", "_1_0");
/////////////////////////////////////////////////////////////////////////
1:             // Wrote version string, build number, the data source
1:             // object and finally a {@link javax.naming.Reference} for
0:             // the data source (if non a non-JNDI data source).
0:             if (!(dsClassName.contains("NonJNDI"))) {
1:                 Method getRef = Class.forName("javax.naming.Referenceable").
1:                         getMethod("getReference");
1:                 Object dsRef = getRef.invoke(ds);
1:                 oos.writeObject(dsRef);
1:             }
/////////////////////////////////////////////////////////////////////////
0:             if (!(obj.getClass().getName().indexOf("NonJNDI") > 0)) {
1:                 obj = ois.readObject();
1:                 System.out.println("\tobject : " + obj);
1:             }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0746b5a
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.testData.serializedDataSources;
/////////////////////////////////////////////////////////////////////////
1:      * @param versionString Derby version string (i.e. 10.3.2.1)
commit:7cdf43a
commit:efa5857
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class SerializeDataSources
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import java.io.OutputStream;
1: 
1: import javax.naming.NamingException;
0: import javax.naming.Reference;
0: import javax.naming.Referenceable;
1: import javax.sql.DataSource;
1: 
1: import org.apache.derby.tools.sysinfo;
1: 
1: /**
1:  * Serializes and writes data sources to file, or prints information about
1:  * a file assumed to be written by this program.
1:  * <p>
1:  * Four entities are written to the stream:
1:  * <ol> <li>Derby version string - UTF</li>
1:  *      <li>Derby build number - UTF</li>
1:  *      <li>Derby data source - object</li>
1:  *      <li>Derby data source reference - object</li>
1:  * </ol>
1:  * <p>
1:  * Both embedded and client data sources are attempted serialized, and the data
1:  * source class names are obtained from a predefined list. If another data
1:  * source implementation is added to Derby, its class name must be added to the
1:  * list if this class is supposed to serialize it and write it to file.
1:  * <p>
1:  * Existing files are overwritten, and the file name is constructed like this:
1:  * <tt>&lt;ClassName&gt;-&lt;modifiedVersionString&gt;.ser</tt>
1:  * The version string is modified by replacing punctuation marks with
1:  * underscores.
1:  */
1: public class SerializeDataSources {
1: 
1:     /** List of known data sources in the embedded driver. */
1:     private static final String[] KNOWN_EMBEDDED_DATA_SOURCES ={
1:             "org.apache.derby.jdbc.EmbeddedDataSource",
1:             "org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource",
0:             "org.apache.derby.jdbc.EmbeddedXADataSource"
1:         };
1: 
1:     /** List of known data sources in the client driver. */
1:     private static final String[] KNOWN_CLIENT_DATA_SOURCES ={
1:             "org.apache.derby.jdbc.ClientDataSource",
1:             "org.apache.derby.jdbc.ClientConnectionPoolDataSource",
0:             "org.apache.derby.jdbc.ClientXADataSource"
1:         };
1:     
1:     /**
1:      * Serialize and write data sources to file.
1:      * 
0:      * @param minorVersion Derby version string (i.e. 10.3.2.1)
1:      * @param buildNumber Derby build number (svn)
1:      * @param dataSourceClasses list of data source class names
1:      * @return The number of data sources serialized and written to file.
1:      * 
1:      * @throws ClassNotFoundException required class is not on the classpath
1:      * @throws InstantiationException if instantiating data source class fails
1:      * @throws IllegalAccessException if instantiating data source class fails
1:      * @throws IOException if writing to file fails
1:      * @throws NamingException if creating a naming reference for the data
1:      *      source fails
1:      */
1:     private static int serializeDataSources(String versionString,
1:                                             String buildNumber,
1:                                             String[] dataSourceClasses)
1:             throws ClassNotFoundException, InstantiationException,
0:                    IllegalAccessException, IOException, NamingException {
0:         String modifiedVersionString = versionString.replaceAll("\\.", "_");
1:         int dsCount = 0;
1:         for (String dsClassName : dataSourceClasses) {
0:             Class dsClass;
1:             // Try to load the class.
1:             try {
1:                 dsClass = Class.forName(dsClassName);
1:             } catch (ClassNotFoundException cnfe) {
1:                 // Print error message, but keep going.
1:                 System.out.println("\tcouldn't load " + dsClassName);
1:                 continue;
1:             }
1:             // Create new instance.
0:             DataSource ds = (DataSource)dsClass.newInstance();
1:             // Generate file name.
1:             File serialized = new File(dsClass.getSimpleName() + "-" +
1:                     modifiedVersionString + ".ser");
1:             System.out.println("\twriting " + serialized.getName());
1:             OutputStream os = new FileOutputStream(serialized);
1:             ObjectOutputStream oos = new ObjectOutputStream(os);
0:             // Wrote version string, build number, the data source object and finally
0:             // a {@link javax.naming.Reference} for the data source.
1:             oos.writeUTF(versionString);
1:             oos.writeUTF(buildNumber);
1:             oos.writeObject(ds);
0:             Reference dsRef = ((Referenceable)ds).getReference(); 
0:             oos.writeObject(dsRef);
1:             oos.flush();
1:             oos.close();
1:             dsCount++;
1:         }
1:         return dsCount;
1:     }
1: 
1:     /**
1:      * Attempts to read information from a file assumed to contain a
1:      * serialized data source.
1:      * <p>
1:      * All information is printed to the console.
1:      *
1:      * @param fileName the name of the file to read from
1:      * @return {@code true} if the file was read successfully, {@code false} if
1:      *      something went wrong.
1:      */
1:     private static boolean printInfoFromSerializedFile(String fileName) {
1:         System.out.println(">>> File: " + fileName);
1:         File file = new File(fileName);
1:         if (!file.exists()) {
1:             System.out.println("\tFile does not exist.");
1:             return false;
1:         }
1:         if (!file.canRead()) {
1:             System.out.println("\tCannot read file.");
1:             return false;
1:         }
1:         try {
1:             InputStream is = new FileInputStream(file);
1:             ObjectInputStream ois = new ObjectInputStream(is);
1:             String version = ois.readUTF();
1:             System.out.println("\tversion: " + version);
1:             String buildNr = ois.readUTF();
1:             System.out.println("\tbuild  : " + buildNr);
1:             Object obj = ois.readObject();
1:             System.out.println("\tobject : " + obj);
0:             obj = ois.readObject();
1:             System.out.println("\tobject : " + obj);
1:         } catch (Exception e) {
1:             System.out.println("\t!! De-serialization failed: " + e.getMessage());
1:             e.printStackTrace();
1:             return false;
1:         }
1:         return true; 
1:     }
1: 
1:     /**
1:      * Serializes and writes a number of Derby data sources to disk, or
1:      * attempts to read information from existing files.
1:      * 
1:      * @param args arguments from the command line. If there are no arguments,
1:      *      the program will write data sources to file. Otherwise all
1:      *      arguments are assumed to be file names of files to read.
1:      * @throws Exception if something goes wrong
1:      */
1:     public static void main(String[] args)
1:             throws Exception {
1:         // Obtain Derby version / information.
1:         int majorVersionEmbedded = sysinfo.getMajorVersion(sysinfo.DBMS);
1:         int minorVersionEmbedded = sysinfo.getMinorVersion(sysinfo.DBMS);
1:         String buildNumberEmbedded = sysinfo.getBuildNumber(sysinfo.DBMS);
1:         String versionEmbedded = sysinfo.getVersionString(sysinfo.DBMS);
1:         int majorVersionClient = sysinfo.getMajorVersion(sysinfo.CLIENT);
1:         int minorVersionClient = sysinfo.getMinorVersion(sysinfo.CLIENT);
1:         String buildNumberClient = sysinfo.getBuildNumber(sysinfo.CLIENT);
1:         String versionClient = sysinfo.getVersionString(sysinfo.CLIENT);
1: 
1:         // Check if we should try to read files.
1:         if (args.length > 0) {
1:             System.out.println("Reading files with the Derby version(s):");
1:             System.out.println("\tembedded: " + versionEmbedded);
1:             System.out.println("\tclient  : " + versionClient);
1:             System.out.println();
1:             for (int i=0; i < args.length; i++) {
1:                 boolean status = printInfoFromSerializedFile(args[i]);
1:                 System.out.println("File read successfully: " + status);
1:                 System.out.println();
1:             }
1:             System.exit(0);
1:         }
1: 
1:         // We are writing data sources to file.
1: 
1:         // Counts to print some simple statistics at the end.
1:         int knownDsCount = KNOWN_EMBEDDED_DATA_SOURCES.length +
1:                 KNOWN_CLIENT_DATA_SOURCES.length;
1:         int dsWritten = 0;
1: 
1:         // Only try to serialize data sources if we know which Derby version we
1:         // are dealing with.
1:         if (majorVersionEmbedded != -1 && minorVersionEmbedded != -1) {
1:             System.out.println("Serializing embedded data sources for Derby " +
1:                     "version " + versionEmbedded);
1:             dsWritten += serializeDataSources(versionEmbedded,
1:                     buildNumberEmbedded,
1:                     KNOWN_EMBEDDED_DATA_SOURCES);
1:         } else {
1:             System.err.println("No embedded data sources will be generated " +
1:                     "because Derby version can't be determined.");
1:         }
1: 
1:         if (majorVersionClient != -1 && minorVersionClient != -1) {
1:             System.out.println("Serializing client data sources for Derby " +
1:                     "version " + versionClient);
1:             dsWritten += serializeDataSources(versionClient,
1:                     buildNumberClient,
1:                     KNOWN_CLIENT_DATA_SOURCES);
1:         } else {
1:             System.err.println("No client data sources will be generated " +
1:                     "because Derby version can't be determined.");
1:         }
1: 
1:         // Print some simple statistics.
1:         System.out.println();
1:         System.out.println("Known data sources:   " + knownDsCount);
1:         System.out.println("Data sources written: " + dsWritten);
1:     }
1: }
============================================================================