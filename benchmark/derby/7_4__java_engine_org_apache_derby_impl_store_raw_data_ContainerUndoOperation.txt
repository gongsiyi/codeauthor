1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerUndoOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
1:eac0369: /** A Container undo operation rolls back the change of a Container operation */
1:eac0369: public class ContainerUndoOperation extends ContainerBasicOperation 
1:eac0369: 		implements Compensation 
1:eac0369: {
1:eac0369: 	// the operation to rollback 
1:eac0369: 	transient private	ContainerOperation undoOp;
1:eac0369: 
1:eac0369: 	/** During redo, the whole operation will be reconstituted from the log */
1:eac0369: 
2:eac0369: 	/** 
1:eac0369: 		Set up a Container undo operation during run time rollback
1:eac0369: 		@exception StandardException container Handle is not active
1:eac0369: 	*/
1:eac0369: 	public ContainerUndoOperation(RawContainerHandle hdl, ContainerOperation op) 
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		super(hdl);
1:eac0369: 		undoOp = op;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public ContainerUndoOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception IOException cannot read log record from log stream
1:eac0369: 		@exception ClassNotFoundException cannot read ByteArray object
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_CONTAINER_UNDO;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 		Compensation method
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** Set up a Container undo operation during recovery redo. */
1:eac0369: 	public void setUndoOp(Undoable op)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(op instanceof ContainerOperation);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		undoOp = (ContainerOperation)op;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Loggable methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** Apply the undo operation, in this implementation of the
1:eac0369: 		RawStore, it can only call the undoMe method of undoOp
1:eac0369: 
1:eac0369: 		@param xact			the Transaction that is doing the rollback
1:eac0369: 		@param instant		the log instant of this compenstaion operation
1:eac0369: 		@param in			optional data
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby error policy.
1:eac0369: 
1:eac0369: 		@see ContainerOperation#generateUndo
1:eac0369: 	 */
1:eac0369: 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(containerHdl != null, "clr has null containerHdl");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// if this is called during runtime rollback, generateUndo found
1:eac0369: 		// the container and have it opened there.
1:eac0369: 		// if this is called during recovery redo, this.needsRedo found 
1:eac0369: 		// the container and have it opened here.
1:eac0369: 		//
1:eac0369: 		// in either case, containerHdl is the opened container handle.
1:eac0369: 
1:eac0369: 		undoOp.undoMe(xact, containerHdl, instant, in);
1:eac0369: 		releaseResource(xact);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* make sure resource found in undoOp is released */
1:eac0369: 	public void releaseResource(Transaction xact)
1:eac0369: 	{
1:eac0369: 		if (undoOp != null)
1:eac0369: 			undoOp.releaseResource(xact);
1:eac0369: 		super.releaseResource(xact);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Undo operation is a COMPENSATION log operation */
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return super.group() | Loggable.COMPENSATION | Loggable.RAWSTORE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerUndoOperation
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: 
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.io.InputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /** A Container undo operation rolls back the change of a Container operation */
1: public class ContainerUndoOperation extends ContainerBasicOperation 
1: 		implements Compensation 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	// the operation to rollback 
1: 	transient private	ContainerOperation undoOp;
1: 
1: 	/** During redo, the whole operation will be reconstituted from the log */
1: 
1: 	/** 
1: 		Set up a Container undo operation during run time rollback
1: 		@exception StandardException container Handle is not active
1: 	*/
1: 	public ContainerUndoOperation(RawContainerHandle hdl, ContainerOperation op) 
1: 		 throws StandardException
1: 	{
1: 		super(hdl);
1: 		undoOp = op;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public ContainerUndoOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 	}
1: 
1: 	/**
1: 		@exception IOException cannot read log record from log stream
1: 		@exception ClassNotFoundException cannot read ByteArray object
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_CONTAINER_UNDO;
1: 	}
1: 
1: 	/** 
1: 		Compensation method
1: 	*/
1: 
1: 	/** Set up a Container undo operation during recovery redo. */
1: 	public void setUndoOp(Undoable op)
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(op instanceof ContainerOperation);
1: 		}
1: 
1: 		undoOp = (ContainerOperation)op;
1: 	}
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1: 	/** Apply the undo operation, in this implementation of the
1: 		RawStore, it can only call the undoMe method of undoOp
1: 
1: 		@param xact			the Transaction that is doing the rollback
1: 		@param instant		the log instant of this compenstaion operation
1: 		@param in			optional data
0: 		@param dataLengt	optional data length
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
1: 
1: 		@see ContainerOperation#generateUndo
1: 	 */
1: 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
1: 		 throws StandardException, IOException
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(containerHdl != null, "clr has null containerHdl");
1: 		}
1: 
1: 		// if this is called during runtime rollback, generateUndo found
1: 		// the container and have it opened there.
1: 		// if this is called during recovery redo, this.needsRedo found 
1: 		// the container and have it opened here.
1: 		//
1: 		// in either case, containerHdl is the opened container handle.
1: 
1: 		undoOp.undoMe(xact, containerHdl, instant, in);
1: 		releaseResource(xact);
1: 	}
1: 
1: 	/* make sure resource found in undoOp is released */
1: 	public void releaseResource(Transaction xact)
1: 	{
1: 		if (undoOp != null)
1: 			undoOp.releaseResource(xact);
1: 		super.releaseResource(xact);
1: 	}
1: 
1: 	/* Undo operation is a COMPENSATION log operation */
1: 	public int group()
1: 	{
1: 		return super.group() | Loggable.COMPENSATION | Loggable.RAWSTORE;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: 
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.io.InputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /** A Container undo operation rolls back the change of a Container operation */
0: public class ContainerUndoOperation extends ContainerBasicOperation 
0: 		implements Compensation 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	// the operation to rollback 
0: 	transient private	ContainerOperation undoOp;
0: 
0: 	/** During redo, the whole operation will be reconstituted from the log */
0: 
0: 	/** 
0: 		Set up a Container undo operation during run time rollback
0: 		@exception StandardException container Handle is not active
0: 	*/
0: 	public ContainerUndoOperation(RawContainerHandle hdl, ContainerOperation op) 
0: 		 throws StandardException
0: 	{
0: 		super(hdl);
0: 		undoOp = op;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public ContainerUndoOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 	}
0: 
0: 	/**
0: 		@exception IOException cannot read log record from log stream
0: 		@exception ClassNotFoundException cannot read ByteArray object
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_CONTAINER_UNDO;
0: 	}
0: 
0: 	/** 
0: 		Compensation method
0: 	*/
0: 
0: 	/** Set up a Container undo operation during recovery redo. */
0: 	public void setUndoOp(Undoable op)
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(op instanceof ContainerOperation);
0: 		}
0: 
0: 		undoOp = (ContainerOperation)op;
0: 	}
0: 
0: 	/**
0: 		Loggable methods
0: 	*/
0: 
0: 	/** Apply the undo operation, in this implementation of the
0: 		RawStore, it can only call the undoMe method of undoOp
0: 
0: 		@param xact			the Transaction that is doing the rollback
0: 		@param instant		the log instant of this compenstaion operation
0: 		@param in			optional data
0: 		@param dataLengt	optional data length
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
0: 
0: 		@see ContainerOperation#generateUndo
0: 	 */
0: 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
0: 		 throws StandardException, IOException
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(containerHdl != null, "clr has null containerHdl");
0: 		}
0: 
0: 		// if this is called during runtime rollback, generateUndo found
0: 		// the container and have it opened there.
0: 		// if this is called during recovery redo, this.needsRedo found 
0: 		// the container and have it opened here.
0: 		//
0: 		// in either case, containerHdl is the opened container handle.
0: 
0: 		undoOp.undoMe(xact, containerHdl, instant, in);
0: 		releaseResource(xact);
0: 	}
0: 
0: 	/* make sure resource found in undoOp is released */
0: 	public void releaseResource(Transaction xact)
0: 	{
0: 		if (undoOp != null)
0: 			undoOp.releaseResource(xact);
0: 		super.releaseResource(xact);
0: 	}
0: 
0: 	/* Undo operation is a COMPENSATION log operation */
0: 	public int group()
0: 	{
0: 		return super.group() | Loggable.COMPENSATION | Loggable.RAWSTORE;
0: 	}
0: 
0: }
============================================================================