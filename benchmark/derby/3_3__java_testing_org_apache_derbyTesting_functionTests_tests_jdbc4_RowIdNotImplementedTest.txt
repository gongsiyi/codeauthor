1:c0119bd: /*
4:c0119bd:  *
1:c0119bd:  * Derby - Class RowIdNotImplementedTest
1:c0119bd:  *
1:6e3dbab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:  * contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:  * this work for additional information regarding copyright ownership.
1:6e3dbab:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:  * (the "License"); you may not use this file except in compliance with
1:6e3dbab:  * the License.  You may obtain a copy of the License at
1:c0119bd:  *
1:c0119bd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c0119bd:  *
1:c0119bd:  * Unless required by applicable law or agreed to in writing, 
1:c0119bd:  * software distributed under the License is distributed on an 
1:c0119bd:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:c0119bd:  * either express or implied. See the License for the specific 
1:c0119bd:  * language governing permissions and limitations under the License.
4:c0119bd:  */
8:c0119bd: 
1:c0119bd: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:c0119bd: 
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:ec5ae26: import org.apache.derbyTesting.junit.TestConfiguration;
1:c0119bd: 
1:c0119bd: import junit.framework.*;
1:c0119bd: 
1:c0119bd: import java.sql.*;
1:c0119bd: 
4:c0119bd: /**
1:c0119bd:  * Test that all methods and functionality related to RowId reflect that it
1:c0119bd:  * has not yet been implemented.
1:c0119bd:  * The tests are written to be run with JDK 1.6.
1:c0119bd:  * All methods that throws SQLException, should utilize the 
1:c0119bd:  * SQLFeatureNotSupportedException-subclass. Methods unable to throw
1:c0119bd:  * SQLException, must throw java.lang.UnsupportedOperationException.
1:c0119bd:  * As RowId is implemented, tests demonstrating correctness of the API should
1:c0119bd:  * be moved into the proper test classes (for instance, test updateRowId in
1:c0119bd:  * the test class for ResultSet).
1:c0119bd:  * The reason for specifying all tests here was mainly because there were no
1:c0119bd:  * existing JUnit tests for the various classes implementing RowId methods.
1:c0119bd:  */
1:c0119bd: public class RowIdNotImplementedTest 
1:c0119bd:     extends BaseJDBCTestCase {
1:c0119bd: 
1:c0119bd:     /**
1:c0119bd:      * Create test with given name.
1:c0119bd:      *
1:c0119bd:      * @param name name of test.
1:c0119bd:      */
1:c0119bd:     public RowIdNotImplementedTest(String name) {
1:c0119bd:         super(name);
13:c0119bd:     }
1:c0119bd:     
1:c0119bd: 
1:c0119bd:     public void testRowIdInPreparedStatementSetRowId() 
3:c0119bd:         throws SQLException {
1:c0119bd:         PreparedStatement pStmt = 
1:13e9e78:             prepareStatement("select count(*) from sys.systables");
5:c0119bd:         try {
1:c0119bd:             pStmt.setRowId(1, null);
1:c0119bd:             fail("PreparedStatement.setRowId should not be implemented");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
5:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd:     
1:c0119bd:     public void testRowIdInCallableStatementGetRowIdInt()
1:c0119bd:         throws SQLException {
1:c0119bd:         CallableStatement cStmt = getCallableStatement();
1:c0119bd:         try {
1:c0119bd:             cStmt.getRowId(1);
1:c0119bd:             fail("CallableStatement.getRowId(int) should not be implemented.");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     public void testRowIdInCallableStatementGetRowIdString()
1:c0119bd:         throws SQLException {
1:c0119bd:         CallableStatement cStmt = getCallableStatement();
1:c0119bd:         try {
1:c0119bd:             cStmt.getRowId("some-parameter-name");
1:c0119bd:             fail("CallableStatement.getRowId(String) should not be " +
1:c0119bd:                  "implemented.");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     public void testRowIdInCallableStatementSetRowId()
1:c0119bd:         throws SQLException {
1:c0119bd:         CallableStatement cStmt = getCallableStatement();
1:c0119bd:         try {
1:c0119bd:             cStmt.setRowId("some-parameter-name", null);
1:c0119bd:             fail("CallableStatement.setRowId should not be implemented");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     public void testRowIdInResultSetGetRowIdInt()
1:c0119bd:         throws SQLException {
1:c0119bd:         ResultSet rs = getResultSet();
1:c0119bd:         try {
1:c0119bd:             rs.getRowId(1);
1:c0119bd:             fail("ResultSet.getRowId(int) should not be implemented");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd:     
1:c0119bd:     public void testRowIdInResultSetGetRowIdString()
1:c0119bd:         throws SQLException {
1:c0119bd:         ResultSet rs = getResultSet();
1:c0119bd:         try {
1:c0119bd:             rs.getRowId("some-parameter-name");
1:c0119bd:             fail("ResultSet.getRowId(String) should not be implemented");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     public void testRowIdInResultSetUpdateRowIdInt()
1:c0119bd:         throws SQLException {
1:c0119bd:         ResultSet rs = getResultSet();
1:c0119bd:         try {
1:c0119bd:             rs.updateRowId(1, null);
1:c0119bd:             fail("ResultSet.updateRowId(int) should not be implemented");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     public void testRowIdInResultSetUpdateRowIdString()
1:c0119bd:         throws SQLException {
1:c0119bd:         ResultSet rs = getResultSet();
1:c0119bd:         try {
1:c0119bd:             rs.updateRowId("some-parameter-name", null);
1:c0119bd:             fail("ResultSet.updateRowId(String) should not be implemented");
1:c0119bd:         } catch (SQLFeatureNotSupportedException sfnse) {
1:c0119bd:             // Do nothing, we are fine.
1:c0119bd:         }
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     public void testRowIdInDatabaseMetaDataRowIdLifeTime() 
1:c0119bd:         throws SQLException {
1:03a99e2:         DatabaseMetaData meta = getConnection().getMetaData();
1:c0119bd:         RowIdLifetime rowIdLifetime = meta.getRowIdLifetime();
1:c0119bd:         assertEquals("RowIdLifetime should be ROWID_UNSUPPORTED",
1:c0119bd:             RowIdLifetime.ROWID_UNSUPPORTED,
1:c0119bd:             rowIdLifetime);
1:c0119bd:         meta = null;
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     /**
1:c0119bd:      * Create a callable statement.
1:c0119bd:      *
1:c0119bd:      * @return a <code>CallableStatement</code>
1:c0119bd:      * @throws SQLException if creation of CallableStatement fails.
1:c0119bd:      */
1:c0119bd:     private CallableStatement getCallableStatement() 
1:c0119bd:         throws SQLException {
1:c0119bd:         // No need to actuall call a stored procedure.
1:13e9e78:         return prepareCall("values 1");
1:c0119bd:     }
1:c0119bd: 
1:c0119bd:     /**
1:c0119bd:      * Create a resultset.
1:c0119bd:      *
1:c0119bd:      * @return a <code>ResultSet</code>
1:c0119bd:      * @throws SQLException if creation of ResultSet fails.
1:c0119bd:      */
1:c0119bd:     private ResultSet getResultSet()
1:c0119bd:         throws SQLException {
1:c0119bd:         // Create a very simple resultset.
1:13e9e78:         return createStatement().executeQuery("values 1");
1:c0119bd:     }
1:c0119bd:     
1:c0119bd:     /**
1:c0119bd:      * Return test suite.
1:c0119bd:      *
1:c0119bd:      * @return test suite.
1:c0119bd:      */
1:c0119bd:     public static Test suite() {
1:ec5ae26:         return TestConfiguration.defaultSuite(RowIdNotImplementedTest.class);
1:c0119bd:     }
1:c0119bd:     
1:c0119bd: } // End class RowIdNotImplementedTest
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ec5ae26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite(RowIdNotImplementedTest.class);
commit:a9988eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:         DatabaseMetaData meta = getConnection().getMetaData();
commit:13e9e78
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             prepareStatement("select count(*) from sys.systables");
/////////////////////////////////////////////////////////////////////////
0:         DatabaseMetaData meta = getXConnection().getMetaData();
/////////////////////////////////////////////////////////////////////////
1:         return prepareCall("values 1");
/////////////////////////////////////////////////////////////////////////
1:         return createStatement().executeQuery("values 1");
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c0119bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class RowIdNotImplementedTest
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
0: import org.apache.derby.impl.jdbc.EmbedRowId;
1: 
1: import junit.framework.*;
1: 
1: import java.sql.*;
1: 
1: /**
1:  * Test that all methods and functionality related to RowId reflect that it
1:  * has not yet been implemented.
1:  * The tests are written to be run with JDK 1.6.
1:  * All methods that throws SQLException, should utilize the 
1:  * SQLFeatureNotSupportedException-subclass. Methods unable to throw
1:  * SQLException, must throw java.lang.UnsupportedOperationException.
1:  * As RowId is implemented, tests demonstrating correctness of the API should
1:  * be moved into the proper test classes (for instance, test updateRowId in
1:  * the test class for ResultSet).
1:  * The reason for specifying all tests here was mainly because there were no
1:  * existing JUnit tests for the various classes implementing RowId methods.
1:  */
1: public class RowIdNotImplementedTest 
1:     extends BaseJDBCTestCase {
1: 
0:     /** Default connection used by the tests. */
0:     private Connection con = null;
1: 
1:     /**
1:      * Create test with given name.
1:      *
1:      * @param name name of test.
1:      */
1:     public RowIdNotImplementedTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
0:      * Obtain default connection.
1:      *
0:      * @throws SQLException if obtaining connection fails.
1:      */
0:     public void setUp()
1:         throws SQLException {
0:         con = getConnection();
1:     }
1: 
1:     /**
0:      * Do rollback and close on connection.
1:      *
0:      * @throws SQLException if rollback or close fails on connection.
1:      */
0:     public void tearDown()
1:         throws SQLException {
0:         if (con != null && !con.isClosed()) {
0:             con.rollback();
0:             con.close();
1:         }
1:     }
1: 
1:     public void testRowIdInPreparedStatementSetRowId() 
1:         throws SQLException {
1:         PreparedStatement pStmt = 
0:             con.prepareStatement("select count(*) from sys.systables");
1:         try {
1:             pStmt.setRowId(1, null);
1:             fail("PreparedStatement.setRowId should not be implemented");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1:     
1:     public void testRowIdInCallableStatementGetRowIdInt()
1:         throws SQLException {
1:         CallableStatement cStmt = getCallableStatement();
1:         try {
1:             cStmt.getRowId(1);
1:             fail("CallableStatement.getRowId(int) should not be implemented.");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     public void testRowIdInCallableStatementGetRowIdString()
1:         throws SQLException {
1:         CallableStatement cStmt = getCallableStatement();
1:         try {
1:             cStmt.getRowId("some-parameter-name");
1:             fail("CallableStatement.getRowId(String) should not be " +
1:                  "implemented.");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     public void testRowIdInCallableStatementSetRowId()
1:         throws SQLException {
1:         CallableStatement cStmt = getCallableStatement();
1:         try {
1:             cStmt.setRowId("some-parameter-name", null);
1:             fail("CallableStatement.setRowId should not be implemented");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     public void testRowIdInResultSetGetRowIdInt()
1:         throws SQLException {
1:         ResultSet rs = getResultSet();
1:         try {
1:             rs.getRowId(1);
1:             fail("ResultSet.getRowId(int) should not be implemented");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1:     
1:     public void testRowIdInResultSetGetRowIdString()
1:         throws SQLException {
1:         ResultSet rs = getResultSet();
1:         try {
1:             rs.getRowId("some-parameter-name");
1:             fail("ResultSet.getRowId(String) should not be implemented");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     public void testRowIdInResultSetUpdateRowIdInt()
1:         throws SQLException {
1:         ResultSet rs = getResultSet();
1:         try {
1:             rs.updateRowId(1, null);
1:             fail("ResultSet.updateRowId(int) should not be implemented");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     public void testRowIdInResultSetUpdateRowIdString()
1:         throws SQLException {
1:         ResultSet rs = getResultSet();
1:         try {
1:             rs.updateRowId("some-parameter-name", null);
1:             fail("ResultSet.updateRowId(String) should not be implemented");
1:         } catch (SQLFeatureNotSupportedException sfnse) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     public void testRowIdInDatabaseMetaDataRowIdLifeTime() 
1:         throws SQLException {
0:         DatabaseMetaData meta = con.getMetaData();
1:         RowIdLifetime rowIdLifetime = meta.getRowIdLifetime();
1:         assertEquals("RowIdLifetime should be ROWID_UNSUPPORTED",
1:             RowIdLifetime.ROWID_UNSUPPORTED,
1:             rowIdLifetime);
1:         meta = null;
1:     }
1: 
0:     public void testRowIdEquals() {
0:         RowId rowId = getRowId();
1:         try {
0:             rowId.equals(rowId);
0:             fail("RowId.equals should not be implemented");
0:         } catch (UnsupportedOperationException uoe) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1:     
0:     public void testRowIdGetBytes() {
0:         RowId rowId = getRowId();
1:         try {
0:             rowId.getBytes();
0:             fail("RowId.getBytes should not be implemented");
0:         } catch (UnsupportedOperationException uoe) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
0:     public void testRowIdToString() {
0:         RowId rowId = getRowId();
1:         try {
0:             rowId.toString();
0:             fail("RowId.toString should not be implemented");
0:         } catch (UnsupportedOperationException uoe) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
0:     public void testRowIdHashCode() {
0:         RowId rowId = getRowId();
1:         try {
0:             rowId.hashCode();
0:             fail("RowId.hashCode should not be implemented");
0:         } catch (UnsupportedOperationException uoe) {
1:             // Do nothing, we are fine.
1:         }
1:     }
1: 
1:     /**
1:      * Create a callable statement.
1:      *
1:      * @return a <code>CallableStatement</code>
1:      * @throws SQLException if creation of CallableStatement fails.
1:      */
1:     private CallableStatement getCallableStatement() 
1:         throws SQLException {
1:         // No need to actuall call a stored procedure.
0:         return con.prepareCall("values 1");
1:     }
1: 
1:     /**
1:      * Create a resultset.
1:      *
1:      * @return a <code>ResultSet</code>
1:      * @throws SQLException if creation of ResultSet fails.
1:      */
1:     private ResultSet getResultSet()
1:         throws SQLException {
1:         // Create a very simple resultset.
0:         return con.createStatement().executeQuery("values 1");
1:     }
1:     
1:     /**
0:      * Create a <code>RowId</code>-object.
1:      */
0:     public java.sql.RowId getRowId() {
0:         EmbedRowId embRowId = new EmbedRowId();
0:         return (java.sql.RowId)embRowId;
1:     }
1:     
1:     /**
1:      * Return test suite.
1:      *
1:      * @return test suite.
1:      */
1:     public static Test suite() {
0:         return new TestSuite(RowIdNotImplementedTest.class,
0:                              "RowIdNotImplementedTest suite");
1:     }
1:     
1: } // End class RowIdNotImplementedTest
============================================================================