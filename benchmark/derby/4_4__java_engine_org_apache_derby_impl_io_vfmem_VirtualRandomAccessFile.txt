1:33467a5: /*
2:33467a5: 
1:33467a5:    Derby - Class org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derby.impl.io.vfmem;
1:33467a5: 
1:33467a5: import java.io.DataInputStream;
1:33467a5: import java.io.DataOutputStream;
1:33467a5: import java.io.FileNotFoundException;
1:33467a5: import java.io.IOException;
1:33467a5: import org.apache.derby.io.StorageRandomAccessFile;
1:33467a5: 
1:33467a5: /**
1:33467a5:  * A random access file capable of reading and writing from/into a virtual file
1:33467a5:  * whose data is represented by a {@code BlockedByteArray}.
1:33467a5:  * <p>
1:33467a5:  * If the file is opened in read-only mode and the caller invokes one of the
1:33467a5:  * write methods, it will fail with a {@code NullPointerException}.
1:33467a5:  */
1:33467a5: public class VirtualRandomAccessFile
1:33467a5:         implements StorageRandomAccessFile {
1:33467a5: 
1:33467a5:     /** The source entry. */
1:33467a5:     private final DataStoreEntry entry;
1:5cf7a46:     /** whether the file is read-only */
1:5cf7a46:     private final   boolean _readOnly;
1:33467a5:     /** Current position / file pointer. */
1:33467a5:     private long fp;
1:33467a5:     /** Stream used to read from the source entry. */
1:e82e672:     private final BlockedByteArrayInputStream bIn;
1:33467a5:     /** Data input stream on top of the source input stream. */
1:e82e672:     private final DataInputStream dIs;
1:33467a5:     /**
1:33467a5:      * Stream used to write into the source entry. Will be {@code null} if the
1:33467a5:      * file is opened in read-only mode.
1:33467a5:      */
1:e82e672:     private final BlockedByteArrayOutputStream bOut;
1:33467a5:     /**
1:33467a5:      * Data output stream on top of the source output stream. Will be
1:33467a5:      * {@code null} if the file is opened in read-only mode.
1:33467a5:      */
1:e82e672:     private final DataOutputStream dOs;
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Creates a new virtual random access file.
1:33467a5:      *
1:33467a5:      * @param entry the source entry
1:33467a5:      * @param readOnly if the file should be opened read-only or not
1:33467a5:      * @throws FileNotFoundException if the denoted path is a directory, or
1:33467a5:      *      the denoted file has been marked read-only and the file is opened
1:33467a5:      *      for writing
1:33467a5:      */
1:33467a5:     public VirtualRandomAccessFile(DataStoreEntry entry, boolean readOnly)
1:33467a5:             throws FileNotFoundException {
1:33467a5:         this.entry = entry;
1:5cf7a46:         _readOnly = readOnly;
1:33467a5:         bIn = entry.getInputStream();
1:33467a5:         bIn.setPosition(0L);
1:33467a5:         dIs = new DataInputStream(bIn);
1:33467a5:         // Only create writeable streams if the mode isn't read-only.
1:33467a5:         if (readOnly) {
1:33467a5:             bOut = null;
2:33467a5:             dOs = null;
1:33467a5:         } else {
1:33467a5:             bOut = entry.getOutputStream(true);
1:33467a5:             bOut.setPosition(0L);
1:33467a5:             dOs = new DataOutputStream(bOut);
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:5cf7a46:     public  VirtualRandomAccessFile clone()
1:5cf7a46:     {
1:5cf7a46:         try {
1:5cf7a46:             return new VirtualRandomAccessFile( entry, _readOnly );
1:5cf7a46:         }
1:5cf7a46:         catch (IOException ioe)
1:5cf7a46:         {
1:5cf7a46:             throw new RuntimeException( ioe.getMessage(), ioe );
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:33467a5:     public void close() throws IOException {
1:33467a5:         dIs.close();
1:33467a5:         // If opened in read-only mode, the output streams are null.
1:33467a5:         if (dOs != null) {
1:33467a5:             dOs.close();
1:33467a5:         }
1:33467a5:         fp = Long.MIN_VALUE;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public long getFilePointer() {
1:33467a5:         return fp;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public long length() {
1:33467a5:         return entry.length();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void seek(long newFilePointer) throws IOException {
1:33467a5:         if (newFilePointer < 0) {
1:33467a5:             throw new IOException("Negative position: " + newFilePointer);
1:33467a5:         }
1:33467a5:         fp = newFilePointer;
1:33467a5:         bIn.setPosition(newFilePointer);
1:33467a5:         // Output streams are null if opened in read-only mode.
1:33467a5:         if (bOut != null) {
1:33467a5:             bOut.setPosition(newFilePointer);
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void setLength(long newLength) {
1:33467a5:         if (bOut == null) {
1:33467a5:             throw new NullPointerException();
1:33467a5:         }
1:33467a5:         entry.setLength(newLength);
1:33467a5:         // If truncation took place, check file pointer.
1:33467a5:         if (newLength < fp) {
1:33467a5:             fp = newLength;
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:a552fe6:     public void sync() {
1:33467a5:         // Do nothing, everything is already synced.
1:33467a5:     }
1:33467a5: 
1:33467a5:     public int read(byte[] b, int off, int len) throws IOException {
1:33467a5:         int ret = bIn.read(b, off, len);
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void readFully(byte[] b) throws IOException {
1:33467a5:         readFully(b, 0, b.length);
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void readFully(byte[] b, int off, int len) throws IOException {
1:33467a5:         dIs.readFully(b, off, len);
1:33467a5:         fp = bIn.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public int skipBytes(int n) {
1:33467a5:         if (n <= 0) {
1:33467a5:             return 0;
1:33467a5:         }
1:33467a5:         long skipped = Math.min(n, entry.length() - fp);
1:33467a5:         fp += skipped;
1:33467a5:         return (int)skipped;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public boolean readBoolean() throws IOException {
1:33467a5:         boolean ret = dIs.readBoolean();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public byte readByte() throws IOException {
1:33467a5:         byte ret = dIs.readByte();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public int readUnsignedByte() throws IOException {
1:33467a5:         int ret = dIs.readUnsignedByte();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public short readShort() throws IOException {
1:33467a5:         short ret = dIs.readShort();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public int readUnsignedShort() throws IOException {
1:33467a5:         int ret = dIs.readUnsignedShort();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public char readChar() throws IOException {
1:33467a5:         char ret = dIs.readChar();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public int readInt() throws IOException {
1:33467a5:         int ret = dIs.readInt();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public long readLong() throws IOException {
1:33467a5:         long ret = dIs.readLong();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public float readFloat() throws IOException {
1:33467a5:         float ret = dIs.readFloat();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public double readDouble() throws IOException {
1:33467a5:         double ret = dIs.readDouble();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public String readLine() throws IOException {
1:33467a5:         throw new UnsupportedOperationException("readLine");
1:33467a5:     }
1:33467a5: 
1:33467a5:     public String readUTF() throws IOException {
1:33467a5:         String utfStr = dIs.readUTF();
1:33467a5:         fp = bIn.getPosition();
1:33467a5:         return utfStr;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void write(int b) throws IOException {
1:33467a5:         dOs.write(b);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void write(byte[] b) throws IOException {
1:33467a5:         write(b, 0, b.length);
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void write(byte[] b, int off, int len) throws IOException {
1:33467a5:         dOs.write(b, off, len);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeBoolean(boolean v) throws IOException {
1:33467a5:         dOs.writeBoolean(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeByte(int v) throws IOException {
1:33467a5:         dOs.writeByte(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeShort(int v) throws IOException {
1:33467a5:         dOs.writeShort(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeChar(int v) throws IOException {
1:33467a5:         dOs.writeChar(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeInt(int v) throws IOException {
1:33467a5:         dOs.writeInt(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeLong(long v) throws IOException {
1:33467a5:         dOs.writeLong(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeFloat(float v) throws IOException {
1:33467a5:         dOs.writeFloat(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeDouble(double v) throws IOException {
1:33467a5:         dOs.writeDouble(v);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeBytes(String s) throws IOException {
1:33467a5:         dOs.writeBytes(s);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeChars(String s) throws IOException {
1:33467a5:         dOs.writeChars(s);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void writeUTF(String s) throws IOException {
1:33467a5:         dOs.writeUTF(s);
1:33467a5:         fp = bOut.getPosition();
1:33467a5:     }
1:33467a5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1:     /** whether the file is read-only */
1:     private final   boolean _readOnly;
/////////////////////////////////////////////////////////////////////////
1:         _readOnly = readOnly;
/////////////////////////////////////////////////////////////////////////
1:     public  VirtualRandomAccessFile clone()
1:     {
1:         try {
1:             return new VirtualRandomAccessFile( entry, _readOnly );
1:         }
1:         catch (IOException ioe)
1:         {
1:             throw new RuntimeException( ioe.getMessage(), ioe );
1:         }
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e82e672
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final BlockedByteArrayInputStream bIn;
1:     private final DataInputStream dIs;
1:     private final BlockedByteArrayOutputStream bOut;
1:     private final DataOutputStream dOs;
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a552fe6
/////////////////////////////////////////////////////////////////////////
1:     public void sync() {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.io.vfmem;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: 
1: import org.apache.derby.io.StorageRandomAccessFile;
1: 
1: /**
1:  * A random access file capable of reading and writing from/into a virtual file
1:  * whose data is represented by a {@code BlockedByteArray}.
1:  * <p>
1:  * If the file is opened in read-only mode and the caller invokes one of the
1:  * write methods, it will fail with a {@code NullPointerException}.
1:  */
1: public class VirtualRandomAccessFile
1:         implements StorageRandomAccessFile {
1: 
1:     /** The source entry. */
1:     private final DataStoreEntry entry;
1:     /** Current position / file pointer. */
1:     private long fp;
1:     /** Stream used to read from the source entry. */
0:     private BlockedByteArrayInputStream bIn;
1:     /** Data input stream on top of the source input stream. */
0:     private DataInputStream dIs;
1:     /**
1:      * Stream used to write into the source entry. Will be {@code null} if the
1:      * file is opened in read-only mode.
1:      */
0:     private BlockedByteArrayOutputStream bOut;
1:     /**
1:      * Data output stream on top of the source output stream. Will be
1:      * {@code null} if the file is opened in read-only mode.
1:      */
0:     private DataOutputStream dOs;
1: 
1:     /**
1:      * Creates a new virtual random access file.
1:      *
1:      * @param entry the source entry
1:      * @param readOnly if the file should be opened read-only or not
1:      * @throws FileNotFoundException if the denoted path is a directory, or
1:      *      the denoted file has been marked read-only and the file is opened
1:      *      for writing
1:      */
1:     public VirtualRandomAccessFile(DataStoreEntry entry, boolean readOnly)
1:             throws FileNotFoundException {
1:         this.entry = entry;
1:         bIn = entry.getInputStream();
1:         bIn.setPosition(0L);
1:         dIs = new DataInputStream(bIn);
1:         // Only create writeable streams if the mode isn't read-only.
1:         if (readOnly) {
1:             bOut = null;
1:             dOs = null;
1:         } else {
1:             bOut = entry.getOutputStream(true);
1:             bOut.setPosition(0L);
1:             dOs = new DataOutputStream(bOut);
1:         }
1:     }
1: 
1:     public void close() throws IOException {
1:         dIs.close();
0:         dIs = null;
1:         // If opened in read-only mode, the output streams are null.
1:         if (dOs != null) {
1:             dOs.close();
1:             dOs = null;
1:         }
1:         fp = Long.MIN_VALUE;
1:     }
1: 
1:     public long getFilePointer() {
1:         return fp;
1:     }
1: 
1:     public long length() {
1:         return entry.length();
1:     }
1: 
1:     public void seek(long newFilePointer) throws IOException {
1:         if (newFilePointer < 0) {
1:             throw new IOException("Negative position: " + newFilePointer);
1:         }
1:         fp = newFilePointer;
1:         bIn.setPosition(newFilePointer);
1:         // Output streams are null if opened in read-only mode.
1:         if (bOut != null) {
1:             bOut.setPosition(newFilePointer);
1:         }
1:     }
1: 
1:     public void setLength(long newLength) {
1:         if (bOut == null) {
1:             throw new NullPointerException();
1:         }
1:         entry.setLength(newLength);
1:         // If truncation took place, check file pointer.
1:         if (newLength < fp) {
1:             fp = newLength;
1:         }
1:     }
1: 
0:     public void sync(boolean metaData) {
1:         // Do nothing, everything is already synced.
1:     }
1: 
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         int ret = bIn.read(b, off, len);
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public void readFully(byte[] b) throws IOException {
1:         readFully(b, 0, b.length);
1:     }
1: 
1:     public void readFully(byte[] b, int off, int len) throws IOException {
1:         dIs.readFully(b, off, len);
1:         fp = bIn.getPosition();
1:     }
1: 
1:     public int skipBytes(int n) {
1:         if (n <= 0) {
1:             return 0;
1:         }
1:         long skipped = Math.min(n, entry.length() - fp);
1:         fp += skipped;
1:         return (int)skipped;
1:     }
1: 
1:     public boolean readBoolean() throws IOException {
1:         boolean ret = dIs.readBoolean();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public byte readByte() throws IOException {
1:         byte ret = dIs.readByte();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public int readUnsignedByte() throws IOException {
1:         int ret = dIs.readUnsignedByte();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public short readShort() throws IOException {
1:         short ret = dIs.readShort();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public int readUnsignedShort() throws IOException {
1:         int ret = dIs.readUnsignedShort();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public char readChar() throws IOException {
1:         char ret = dIs.readChar();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public int readInt() throws IOException {
1:         int ret = dIs.readInt();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public long readLong() throws IOException {
1:         long ret = dIs.readLong();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public float readFloat() throws IOException {
1:         float ret = dIs.readFloat();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public double readDouble() throws IOException {
1:         double ret = dIs.readDouble();
1:         fp = bIn.getPosition();
1:         return ret;
1:     }
1: 
1:     public String readLine() throws IOException {
1:         throw new UnsupportedOperationException("readLine");
1:     }
1: 
1:     public String readUTF() throws IOException {
1:         String utfStr = dIs.readUTF();
1:         fp = bIn.getPosition();
1:         return utfStr;
1:     }
1: 
1:     public void write(int b) throws IOException {
1:         dOs.write(b);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void write(byte[] b) throws IOException {
1:         write(b, 0, b.length);
1:     }
1: 
1:     public void write(byte[] b, int off, int len) throws IOException {
1:         dOs.write(b, off, len);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeBoolean(boolean v) throws IOException {
1:         dOs.writeBoolean(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeByte(int v) throws IOException {
1:         dOs.writeByte(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeShort(int v) throws IOException {
1:         dOs.writeShort(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeChar(int v) throws IOException {
1:         dOs.writeChar(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeInt(int v) throws IOException {
1:         dOs.writeInt(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeLong(long v) throws IOException {
1:         dOs.writeLong(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeFloat(float v) throws IOException {
1:         dOs.writeFloat(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeDouble(double v) throws IOException {
1:         dOs.writeDouble(v);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeBytes(String s) throws IOException {
1:         dOs.writeBytes(s);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeChars(String s) throws IOException {
1:         dOs.writeChars(s);
1:         fp = bOut.getPosition();
1:     }
1: 
1:     public void writeUTF(String s) throws IOException {
1:         dOs.writeUTF(s);
1:         fp = bOut.getPosition();
1:     }
1: }
============================================================================