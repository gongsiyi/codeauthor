1:50d0853: /*
4:50d0853:  
1:50d0853:    Derby - Class org.apache.derby.impl.jdbc.SQLExceptionFactory
1:50d0853:  
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:50d0853:  
1:50d0853:       http://www.apache.org/licenses/LICENSE-2.0
1:50d0853:  
1:50d0853:    Unless required by applicable law or agreed to in writing, software
1:50d0853:    distributed under the License is distributed on an "AS IS" BASIS,
1:50d0853:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50d0853:    See the License for the specific language governing permissions and
1:50d0853:    limitations under the License.
1:50d0853:  
1:50d0853:  */
1:aaf9dfd: 
1:50d0853: package org.apache.derby.impl.jdbc;
1:50d0853: 
1:aa5c5de: import java.sql.SQLDataException;
1:aa5c5de: import java.sql.SQLException;
1:aa5c5de: import java.sql.SQLFeatureNotSupportedException;
1:aa5c5de: import java.sql.SQLIntegrityConstraintViolationException;
1:aa5c5de: import java.sql.SQLInvalidAuthorizationSpecException;
1:aa5c5de: import java.sql.SQLNonTransientConnectionException;
1:aa5c5de: import java.sql.SQLSyntaxErrorException;
1:aa5c5de: import java.sql.SQLTimeoutException;
1:aa5c5de: import java.sql.SQLTransactionRollbackException;
1:50d0853: import org.apache.derby.iapi.error.StandardException;
1:ec60014: import org.apache.derby.iapi.jdbc.ExceptionFactory;
1:50d0853: import org.apache.derby.iapi.services.i18n.MessageService;
1:aa5c5de: import org.apache.derby.shared.common.reference.SQLState;
1:d02bb72: import org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException;
1:50d0853: 
1:50d0853: /**
1:50d0853:  *Class to create SQLException
1:50d0853:  *
1:50d0853:  */
1:aa5c5de: public class SQLExceptionFactory extends ExceptionFactory {
1:50d0853:     /**
1:aa5c5de:      * <p>
1:50d0853:      * method to construct SQLException
1:50d0853:      * version specific drivers can overload this method to create
1:50d0853:      * version specific exceptions
1:aa5c5de:      * </p>
1:aa5c5de:      *
1:aa5c5de:      * <p>
1:aa5c5de:      * This implementation creates JDBC 4 exceptions.
1:aa5c5de:      * </p>
1:aa5c5de:      *
1:aa5c5de:      * <pre>
1:aa5c5de:      * SQLSTATE CLASS (prefix)     Exception
1:aa5c5de:      * 0A                          java.sql.SQLFeatureNotSupportedException
1:aa5c5de:      * 08                          java.sql.SQLNonTransientConnectionException
1:aa5c5de:      * 22                          java.sql.SQLDataException
1:aa5c5de:      * 28                          java.sql.SQLInvalidAuthorizationSpecException
1:aa5c5de:      * 40                          java.sql.SQLTransactionRollbackException
1:aa5c5de:      * 42                          java.sql.SQLSyntaxErrorException
1:aa5c5de:      * </pre>
1:50d0853:      */
1:aa5c5de:     @Override
1:50d0853:     public SQLException getSQLException(String message, String messageId,
1:aa5c5de:             SQLException next, int severity, Throwable t, Object... args) {
1:aa5c5de:         String sqlState = StandardException.getSQLStateFromIdentifier(messageId);
1:aa5c5de: 
1:aa5c5de:         //
1:aa5c5de:         // Create dummy exception which ferries arguments needed to serialize
1:aa5c5de:         // SQLExceptions across the DRDA network layer.
1:aa5c5de:         //
1:28dc366:         StandardException ferry =
1:28dc366:                 wrapArgsForTransportAcrossDRDA(messageId, t, args);
1:aa5c5de: 
1:aa5c5de:         final SQLException ex;
1:aa5c5de:         if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX)) {
1:aa5c5de:             //no derby sqlstate belongs to
1:aa5c5de:             //TransientConnectionException DERBY-3074
1:28dc366:             ex = new SQLNonTransientConnectionException(
1:28dc366:                     message, sqlState, severity, ferry);
1:aa5c5de:         } else if (sqlState.startsWith(SQLState.SQL_DATA_PREFIX)) {
1:28dc366:             ex = new SQLDataException(message, sqlState, severity, ferry);
1:aa5c5de:         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
1:d02bb72:             if ( sqlState.equals( SQLState.LANG_NULL_INTO_NON_NULL ) )
1:d02bb72:                 ex = new SQLIntegrityConstraintViolationException(message, sqlState,
1:28dc366:                     severity, ferry);
1:d02bb72:             else if ( sqlState.equals( SQLState.LANG_CHECK_CONSTRAINT_VIOLATED ) )
1:d02bb72:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:d02bb72:                     severity, ferry, args[1], args[0]);
1:d02bb72:             else
1:d02bb72:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:d02bb72:                     severity, ferry, args[0], args[1]);
1:aa5c5de:         } else if (sqlState.startsWith(SQLState.AUTHORIZATION_SPEC_PREFIX)) {
1:aa5c5de:             ex = new SQLInvalidAuthorizationSpecException(message, sqlState,
1:28dc366:                     severity, ferry);
1:aa5c5de:         }
1:aa5c5de:         else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX)) {
1:aa5c5de:             ex = new SQLTransactionRollbackException(message, sqlState,
1:28dc366:                     severity, ferry);
1:aa5c5de:         } else if (sqlState.startsWith(SQLState.LSE_COMPILATION_PREFIX)) {
1:28dc366:             ex = new SQLSyntaxErrorException(
1:28dc366:                     message, sqlState, severity, ferry);
1:aa5c5de:         } else if (sqlState.startsWith(SQLState.UNSUPPORTED_PREFIX)) {
1:28dc366:             ex = new SQLFeatureNotSupportedException(
1:28dc366:                     message, sqlState, severity, ferry);
1:aa5c5de:         } else if
1:aa5c5de:                 (
1:aa5c5de:                  sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5)) ||
1:aa5c5de:                  sqlState.equals(SQLState.LOGIN_TIMEOUT.substring(0, 5))
1:aa5c5de:                  ) {
1:28dc366:             ex = new SQLTimeoutException(message, sqlState, severity, ferry);
1:aa5c5de:         } else {
1:28dc366:             ex = new SQLException(message, sqlState, severity, ferry);
1:28dc366:         }
1:28dc366: 
1:28dc366:         // If the argument ferry has recorded any extra next exceptions,
1:28dc366:         // graft them into the parent exception.
1:28dc366:         SQLException ferriedExceptions = ferry.getNextException();
1:28dc366:         if (ferriedExceptions != null) {
1:28dc366:             ex.setNextException(ferriedExceptions);
1:aa5c5de:         }
1:aa5c5de: 
1:aa5c5de:         if (next != null) {
1:aa5c5de:             ex.setNextException(next);
1:aa5c5de:         }
1:28dc366: 
1:aa5c5de:         return ex;
1:aaf9dfd:     }
1:aaf9dfd: 
1:ec60014:     /**
1:ec60014:      * Construct an SQLException whose message and severity are derived from
1:ec60014:      * the message id.
1:ec60014:      */
1:aa5c5de:     @Override
1:ec60014:     public final SQLException getSQLException(String messageId,
1:aa5c5de:             SQLException next, Throwable cause, Object... args) {
1:1f18dc3:         String message = MessageService.getTextMessage(messageId, args);
1:ec60014:         int severity = StandardException.getSeverityFromIdentifier(messageId);
1:ec60014:         return getSQLException(message, messageId, next, severity, cause, args);
1:ec60014:     }
1:ec60014: 
1:aaf9dfd: 	/**
1:aa5c5de:      * <p>
1:aa5c5de:      * The following method helps handle DERBY-1178. The problem is that we may
1:aa5c5de:      * need to serialize our final SQLException across the DRDA network layer.
1:aa5c5de:      * That serialization involves some clever encoding of the Derby messageID and
1:aa5c5de:      * arguments. Unfortunately, once we create one of the
1:aa5c5de:      * JDBC4-specific subclasses of SQLException, we lose the messageID and
1:28dc366:      * args. This method creates a dummy StandardException which preserves that
1:28dc366:      * information, unless the cause is already a StandardException which
1:28dc366:      * contains the necessary information for serializing the exception.
1:aa5c5de:      * </p>
1:aaf9dfd: 	 */
1:28dc366:     private StandardException wrapArgsForTransportAcrossDRDA(
1:28dc366:             String messageId, Throwable cause, Object[] args) {
1:28dc366: 
1:28dc366:         // If the cause is a StandardException with the same message id, we
1:28dc366:         // already have what we need. Just return that exception.
1:28dc366:         if (cause instanceof StandardException) {
1:28dc366:             StandardException se = (StandardException) cause;
1:28dc366:             if (messageId.equals(se.getMessageId())) {
1:28dc366:                 return se;
1:28dc366:             }
1:28dc366:         }
1:28dc366: 
1:28dc366:         // Otherwise, we create a new StandardException that carries the
1:28dc366:         // message id and arguments.
1:28dc366:         return StandardException.newException(messageId, cause, args);
1:aa5c5de:     }
2:50d0853: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:d02bb72
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException;
/////////////////////////////////////////////////////////////////////////
1:             if ( sqlState.equals( SQLState.LANG_NULL_INTO_NON_NULL ) )
1:                 ex = new SQLIntegrityConstraintViolationException(message, sqlState,
1:             else if ( sqlState.equals( SQLState.LANG_CHECK_CONSTRAINT_VIOLATED ) )
1:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:                     severity, ferry, args[1], args[0]);
1:             else
1:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:                     severity, ferry, args[0], args[1]);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:28dc366
/////////////////////////////////////////////////////////////////////////
1:         StandardException ferry =
1:                 wrapArgsForTransportAcrossDRDA(messageId, t, args);
1:             ex = new SQLNonTransientConnectionException(
1:                     message, sqlState, severity, ferry);
1:             ex = new SQLDataException(message, sqlState, severity, ferry);
1:                     severity, ferry);
1:                     severity, ferry);
1:                     severity, ferry);
1:             ex = new SQLSyntaxErrorException(
1:                     message, sqlState, severity, ferry);
1:             ex = new SQLFeatureNotSupportedException(
1:                     message, sqlState, severity, ferry);
1:             ex = new SQLTimeoutException(message, sqlState, severity, ferry);
1:             ex = new SQLException(message, sqlState, severity, ferry);
1:         }
1: 
1:         // If the argument ferry has recorded any extra next exceptions,
1:         // graft them into the parent exception.
1:         SQLException ferriedExceptions = ferry.getNextException();
1:         if (ferriedExceptions != null) {
1:             ex.setNextException(ferriedExceptions);
1: 
/////////////////////////////////////////////////////////////////////////
1:      * args. This method creates a dummy StandardException which preserves that
1:      * information, unless the cause is already a StandardException which
1:      * contains the necessary information for serializing the exception.
1:     private StandardException wrapArgsForTransportAcrossDRDA(
1:             String messageId, Throwable cause, Object[] args) {
1: 
1:         // If the cause is a StandardException with the same message id, we
1:         // already have what we need. Just return that exception.
1:         if (cause instanceof StandardException) {
1:             StandardException se = (StandardException) cause;
1:             if (messageId.equals(se.getMessageId())) {
1:                 return se;
1:             }
1:         }
1: 
1:         // Otherwise, we create a new StandardException that carries the
1:         // message id and arguments.
1:         return StandardException.newException(messageId, cause, args);
commit:1f18dc3
/////////////////////////////////////////////////////////////////////////
1:         String message = MessageService.getTextMessage(messageId, args);
commit:aa5c5de
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLDataException;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.sql.SQLIntegrityConstraintViolationException;
1: import java.sql.SQLInvalidAuthorizationSpecException;
1: import java.sql.SQLNonTransientConnectionException;
1: import java.sql.SQLSyntaxErrorException;
1: import java.sql.SQLTimeoutException;
1: import java.sql.SQLTransactionRollbackException;
1: import org.apache.derby.shared.common.reference.SQLState;
1: public class SQLExceptionFactory extends ExceptionFactory {
1:      * <p>
1:      * </p>
1:      *
1:      * <p>
1:      * This implementation creates JDBC 4 exceptions.
1:      * </p>
1:      *
1:      * <pre>
1:      * SQLSTATE CLASS (prefix)     Exception
1:      * 0A                          java.sql.SQLFeatureNotSupportedException
1:      * 08                          java.sql.SQLNonTransientConnectionException
1:      * 22                          java.sql.SQLDataException
1:      * 28                          java.sql.SQLInvalidAuthorizationSpecException
1:      * 40                          java.sql.SQLTransactionRollbackException
1:      * 42                          java.sql.SQLSyntaxErrorException
1:      * </pre>
1:     @Override
1:             SQLException next, int severity, Throwable t, Object... args) {
1:         String sqlState = StandardException.getSQLStateFromIdentifier(messageId);
1: 
1:         //
1:         // Create dummy exception which ferries arguments needed to serialize
1:         // SQLExceptions across the DRDA network layer.
1:         //
0:         t = wrapArgsForTransportAcrossDRDA( message, messageId, next, severity, t, args );
1: 
1:         final SQLException ex;
1:         if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX)) {
1:             //no derby sqlstate belongs to
1:             //TransientConnectionException DERBY-3074
0:             ex = new SQLNonTransientConnectionException(message, sqlState, severity, t);
1:         } else if (sqlState.startsWith(SQLState.SQL_DATA_PREFIX)) {
0:             ex = new SQLDataException(message, sqlState, severity, t);
1:         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
0:             ex = new SQLIntegrityConstraintViolationException(message, sqlState,
0:                     severity, t);
1:         } else if (sqlState.startsWith(SQLState.AUTHORIZATION_SPEC_PREFIX)) {
1:             ex = new SQLInvalidAuthorizationSpecException(message, sqlState,
0:                     severity, t);
1:         }
1:         else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX)) {
1:             ex = new SQLTransactionRollbackException(message, sqlState,
0:                     severity, t);
1:         } else if (sqlState.startsWith(SQLState.LSE_COMPILATION_PREFIX)) {
0:             ex = new SQLSyntaxErrorException(message, sqlState, severity, t);
1:         } else if (sqlState.startsWith(SQLState.UNSUPPORTED_PREFIX)) {
0:             ex = new SQLFeatureNotSupportedException(message, sqlState, severity, t);
1:         } else if
1:                 (
1:                  sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5)) ||
1:                  sqlState.equals(SQLState.LOGIN_TIMEOUT.substring(0, 5))
1:                  ) {
0:             ex = new SQLTimeoutException(message, sqlState, severity, t);
1:         } else {
0:             ex = new SQLException(message, sqlState, severity, t);
1:         }
1: 
1:         if (next != null) {
1:             ex.setNextException(next);
1:         }
1:         return ex;
1:     @Override
1:             SQLException next, Throwable cause, Object... args) {
1:      * <p>
1:      * The following method helps handle DERBY-1178. The problem is that we may
1:      * need to serialize our final SQLException across the DRDA network layer.
1:      * That serialization involves some clever encoding of the Derby messageID and
1:      * arguments. Unfortunately, once we create one of the
1:      * JDBC4-specific subclasses of SQLException, we lose the messageID and
0:      * args. This method creates a dummy EmbedSQLException which preserves that
0:      * information. We return the dummy exception.
1:      * </p>
0:     private SQLException wrapArgsForTransportAcrossDRDA(
0:             String message, String messageId, SQLException next,
0:             int severity, Throwable t, Object[] args) {
0:         return new EmbedSQLException(
0:                 message, messageId,
0:                 (next == null ?
0:                     null : StandardException.getArgumentFerry(next)),
0:                 severity, t, args);
1:     }
commit:ec60014
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.jdbc.ExceptionFactory;
/////////////////////////////////////////////////////////////////////////
0: public class SQLExceptionFactory implements ExceptionFactory {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Construct an SQLException whose message and severity are derived from
1:      * the message id.
1:      */
1:     public final SQLException getSQLException(String messageId,
0:             SQLException next, Throwable cause, Object[] args) {
0:         String message = MessageService.getCompleteMessage(messageId, args);
1:         int severity = StandardException.getSeverityFromIdentifier(messageId);
1:         return getSQLException(message, messageId, next, severity, cause, args);
1:     }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:342793b
/////////////////////////////////////////////////////////////////////////
0: 		return StandardException.getArgumentFerry(se);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:aaf9dfd
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Unpack a SQL exception, looking for an EmbedSQLException which carries
0: 	 * the Derby messageID and args which we will serialize across DRDA so
0: 	 * that the client can reconstitute a SQLException with appropriate text.
0: 	 * If we are running JDBC3 or JDBC2, then we hope that the passed-in
0: 	 * exception is already an EmbedSQLException, which carries all the
0: 	 * information we need.
1: 	 */
0: 	public	SQLException	getArgumentFerry(SQLException se)
0: 	{
0: 		return se;
1: 	}
1: 
commit:50d0853
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.impl.jdbc.SQLExceptionFactory
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
0: import java.io.IOException;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.MessageId;
1: 
0: import java.sql.SQLException;
1: 
1: /**
1:  *Class to create SQLException
1:  *
1:  */
0: public class SQLExceptionFactory {
1:     /**
1:      * method to construct SQLException
1:      * version specific drivers can overload this method to create
1:      * version specific exceptions
1:      */
1:     public SQLException getSQLException(String message, String messageId,
0:             SQLException next, int severity, Throwable t, Object[] args) {
0:         return new EmbedSQLException(message, messageId, next, severity,
0:                 t, args);
1:     }
1: }
============================================================================