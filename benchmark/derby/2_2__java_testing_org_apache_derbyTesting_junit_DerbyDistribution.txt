1:e2f4f82: /*
2:e2f4f82: 
1:e2f4f82:    Derby - Class org.apache.derbyTesting.junit.DerbyDistribution
1:e2f4f82: 
1:e2f4f82:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e2f4f82:    contributor license agreements.  See the NOTICE file distributed with
1:e2f4f82:    this work for additional information regarding copyright ownership.
1:e2f4f82:    The ASF licenses this file to you under the Apache License, Version 2.0
1:e2f4f82:    (the "License"); you may not use this file except in compliance with
1:e2f4f82:    the License.  You may obtain a copy of the License at
1:e2f4f82: 
1:e2f4f82:       http://www.apache.org/licenses/LICENSE-2.0
1:e2f4f82: 
1:e2f4f82:    Unless required by applicable law or agreed to in writing, software
1:e2f4f82:    distributed under the License is distributed on an "AS IS" BASIS,
1:e2f4f82:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2f4f82:    See the License for the specific language governing permissions and
1:e2f4f82:    limitations under the License.
1:e2f4f82: 
2:e2f4f82:  */
1:e2f4f82: package org.apache.derbyTesting.junit;
1:e2f4f82: 
1:e2f4f82: import java.io.File;
1:e2f4f82: import java.io.FilenameFilter;
1:e2f4f82: import java.io.IOException;
1:e2f4f82: import java.util.ArrayList;
1:e2f4f82: import java.util.Arrays;
1:e2f4f82: import java.util.Iterator;
1:e2f4f82: import java.util.List;
1:e2f4f82: 
1:e2f4f82: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:e2f4f82: 
2:e2f4f82: /**
1:e2f4f82:  * Holds information required to run a Derby distribution and make choices
1:e2f4f82:  * based on the version of the Derby distribution.
2:e2f4f82:  * <p>
1:e2f4f82:  * <em>Implementation note</em>: For simplicity distributions off the classes
1:572f3e8:  * directory have been forbidden. The main reason for this is that it is
1:e2f4f82:  * sometimes a hard requirement that you must include only a single JAR from a
1:e2f4f82:  * distribution on the classpath. One such example is the compatibility test,
1:e2f4f82:  * where you need the testing code from one distribution and the client driver
1:572f3e8:  * from another. While it is possible to support such a configuration running
1:572f3e8:  * off the {@code classes}-directory in many scenarios, it complicates
1:572f3e8:  * the creation and handling of classpath string. Generating the JARs when
1:e2f4f82:  * testing on trunk seems like an acceptable price to pay.
1:e2f4f82:  */
1:2510115: public class DerbyDistribution implements Comparable<DerbyDistribution> {
1:e2f4f82: 
1:e2f4f82:     private static File[] EMPTY_FILE_ARRAY = new File[] {};
1:e2f4f82:     public static final String JAR_RUN = "derbyrun.jar";
1:e2f4f82:     public static final String JAR_CLIENT = "derbyclient.jar";
1:e2f4f82:     public static final String JAR_ENGINE = "derby.jar";
1:e2f4f82:     public static final String JAR_NET = "derbynet.jar";
1:e2f4f82:     public static final String JAR_TESTING = "derbyTesting.jar";
1:e2f4f82:     private static final String[] REQUIRED_JARS = {
1:e2f4f82:         JAR_ENGINE, JAR_NET, JAR_CLIENT
1:e2f4f82:     };
1:e2f4f82: 
1:e2f4f82:     /** The version of the Derby distribution, i.e. 10.8.1.2. */
1:e2f4f82:     private final DerbyVersion version;
1:e2f4f82:     /** Path to derbyrun.jar (may be {@code null}). */
1:e2f4f82:     private final String derbyRunJarPath;
1:e2f4f82:     /** Path to derbyclient.jar. */
1:e2f4f82:     private final String derbyClientJarPath;
1:04d1513:     /** Path to derby.jar. */
1:e2f4f82:     private final String derbyEngineJarPath;
1:e2f4f82:     /** Path to derbynet.jar. */
1:e2f4f82:     private final String derbyNetJarPath;
1:e2f4f82:     /**
1:e2f4f82:      * Production classpath, i.e. all JAR files found except for
1:e2f4f82:      * derbyTesting.jar.
1:e2f4f82:      */
1:e2f4f82:     private final String productionClasspath;
1:e2f4f82:     /** Testing classpath, i.e. path to derbyTesting.jar. */
1:e2f4f82:     private final String testingClasspath;
1:e2f4f82: 
1:e2f4f82:     /**
1:88b4254:      * Derives the information for a Derby distribution.
1:88b4254:      *
1:e2f4f82:      * @throws NullPointerException if version is {@code null}
1:04d1513:      * @see #newInstance(DerbyVersion, File)
1:e2f4f82:      */
1:e2f4f82:     private DerbyDistribution(DerbyVersion version,
1:88b4254:                               File[] productionJars, File[] testingJars) {
1:e2f4f82:         if (version == null) {
1:e2f4f82:             throw new NullPointerException("version is null");
2:e2f4f82:         }
1:e2f4f82:         this.version = version;
1:e2f4f82:         this.productionClasspath = constructJarClasspath(productionJars);
1:e2f4f82:         this.testingClasspath = constructJarClasspath(testingJars);
1:e2f4f82:         File root = productionJars[0].getParentFile();
1:e2f4f82:         this.derbyRunJarPath = getPath(root, JAR_RUN);
1:e2f4f82:         this.derbyClientJarPath = getPath(root, JAR_CLIENT);
1:e2f4f82:         this.derbyEngineJarPath = getPath(root, JAR_ENGINE);
1:e2f4f82:         this.derbyNetJarPath = getPath(root, JAR_NET);
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns the absolute path to the JAR if it exists, otherwise null. */
1:e2f4f82:     private String getPath(File root, String jar) {
1:e2f4f82:         File f = new File(root, jar);
1:e2f4f82:         if (PrivilegedFileOpsForTests.exists(f)) {
1:e2f4f82:             return f.getAbsolutePath();
1:e2f4f82:         } else {
1:e2f4f82:             return null;
1:e2f4f82:         }
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Tells if this distribution has a {@code derbyrun.jar}. */
1:e2f4f82:     public boolean hasDerbyRunJar() {
1:e2f4f82:         return derbyRunJarPath != null;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Returns the path to {@code derbyrun.jar}.
2:e2f4f82:      *
1:e2f4f82:      * @return A path, or {@code null} if this distribution doesn't come with
1:e2f4f82:      *      {@code derbyrun.jar}.
1:e2f4f82:      * @see #hasDerbyRunJar()
1:e2f4f82:      */
1:e2f4f82:     public String getDerbyRunJarPath() {
1:e2f4f82:         return derbyRunJarPath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns the path to {@code derbyclient.jar}. */
1:e2f4f82:     public String getDerbyClientJarPath() {
1:e2f4f82:         return derbyClientJarPath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns the path to {@code derby.jar}. */
1:e2f4f82:     public String getDerbyEngineJarPath() {
1:e2f4f82:         return derbyEngineJarPath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns the path to {@code derbynet.jar}. */
1:e2f4f82:     public String getDerbyNetJarPath() {
1:e2f4f82:         return derbyEngineJarPath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns a classpath with the network server production JARs. */
1:e2f4f82:     public String getServerClasspath() {
1:e2f4f82:         return
1:e2f4f82:             this.derbyNetJarPath + File.pathSeparator + this.derbyEngineJarPath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns a classpath with all production JARs. */
1:e2f4f82:     public String getProductionClasspath() {
1:e2f4f82:         return productionClasspath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns a classpath with all testing JARs. */
1:e2f4f82:     public String getTestingClasspath() {
1:e2f4f82:         return testingClasspath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns a classpath with all production and testing JARs. */
1:e2f4f82:     public String getFullClassPath() {
1:e2f4f82:         return productionClasspath + File.pathSeparatorChar + testingClasspath;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Returns the version of this distribution. */
1:e2f4f82:     public DerbyVersion getVersion() {
1:e2f4f82:         return version;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
2:e2f4f82:      * Orders this distribution and the other distribution based on the version.
1:e2f4f82:      *
2:e2f4f82:      * @param o the other distribution
2:e2f4f82:      * @return {@code 1} if this version is newer, {@code 0} if both
2:e2f4f82:      *      distributions have the same version, and {@code -1} if the other
2:e2f4f82:      *      version is newer.
1:e2f4f82:      */
1:e2f4f82:     public int compareTo(DerbyDistribution o) {
1:e2f4f82:         return version.compareTo(o.version);
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     private static boolean hasRequiredJars(List jars) {
1:e2f4f82:         for (int i=0; i < REQUIRED_JARS.length; i++) {
1:e2f4f82:             boolean hasJar = false;
1:e2f4f82:             for (Iterator jarIter = jars.iterator(); jarIter.hasNext(); ) {
1:e2f4f82:                 File jar = (File)jarIter.next();
1:e2f4f82:                 if (jar.getName().equalsIgnoreCase(REQUIRED_JARS[i])) {
1:e2f4f82:                     hasJar = true;
1:e2f4f82:                     break;
1:e2f4f82:                 }
1:e2f4f82:             }
1:e2f4f82:             if (!hasJar) {
1:8294912:                 BaseTestCase.println("missing jar: " + REQUIRED_JARS[i]);
1:e2f4f82:                 return false;
1:e2f4f82:             }
1:e2f4f82:         }
1:e2f4f82:         return true;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Helper method extracting Derby production JARs from a directory.
1:e2f4f82:      *
1:e2f4f82:      * @param libDir directory
1:e2f4f82:      * @return A list of JARs (possibly empty).
1:e2f4f82:      */
1:e2f4f82:     private static File[] getProductionJars(File libDir) {
1:e2f4f82:         File[] pJars = libDir.listFiles(new FilenameFilter() {
1:e2f4f82: 
1:e2f4f82:             public boolean accept(File dir, String name) {
1:e2f4f82:                 return name.toUpperCase().endsWith(".JAR") &&
1:e2f4f82:                         !isTestingJar(name);
1:e2f4f82:             }
1:e2f4f82:         });
1:e2f4f82:         if (pJars == null) {
1:e2f4f82:             return EMPTY_FILE_ARRAY;
1:e2f4f82:         } else {
1:e2f4f82:             return pJars;
1:e2f4f82:         }
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Helper method extracting Derby testing JARs from a directory.
1:e2f4f82:      *
1:e2f4f82:      * @param libDir directory
1:e2f4f82:      * @return A list of JARs (possibly empty).
1:e2f4f82:      */
1:e2f4f82:     private static File[] getTestingJars(File libDir) {
1:e2f4f82:         File[] tJars = libDir.listFiles(new FilenameFilter() {
1:e2f4f82: 
1:e2f4f82:             public boolean accept(File dir, String name) {
1:e2f4f82:                 return isTestingJar(name);
1:e2f4f82:             }
1:e2f4f82:         });
1:e2f4f82:         if (tJars == null) {
1:e2f4f82:             return EMPTY_FILE_ARRAY;
1:e2f4f82:         } else {
1:e2f4f82:             return tJars;
1:e2f4f82:         }
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     public static File[] getJars(File libDir) {
1:e2f4f82:         File[] jars = libDir.listFiles(new FilenameFilter() {
1:e2f4f82: 
1:e2f4f82:             public boolean accept(File dir, String name) {
1:e2f4f82:                 return name.toUpperCase().endsWith(".JAR");
1:e2f4f82:             }
1:e2f4f82:         });
1:e2f4f82:         return jars;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Tells if the given file is a Derby testing JAR.
1:e2f4f82:      *
1:e2f4f82:      * @param name name of the file
1:e2f4f82:      * @return {@code true} if a testing JAR, {@code false} otherwise
1:e2f4f82:      */
1:e2f4f82:     private static boolean isTestingJar(String name) {
1:e2f4f82:         return name.toUpperCase().endsWith(JAR_TESTING.toUpperCase());
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Merges a list of JAR files into a classpath string.
1:e2f4f82:      *
1:e2f4f82:      * @param jars JAR files to merge
1:e2f4f82:      * @return A classpath string.
1:e2f4f82:      */
1:88b4254:     private static String constructJarClasspath(File[] jars) {
1:e2f4f82:         StringBuffer sb = new StringBuffer(512);
1:e2f4f82:         for (int i=0; i < jars.length; i++) {
1:88b4254:             try {
1:88b4254:                 sb.append(jars[i].getCanonicalPath());
1:88b4254:             } catch (IOException ioe) {
1:88b4254:                 // Do the next best thing; use absolute path.
1:88b4254:                 String absPath = jars[i].getAbsolutePath();
1:88b4254:                 sb.append(absPath);
1:88b4254:                 BaseTestCase.println("obtaining canonical path for " +
1:88b4254:                         absPath + " failed: " + ioe.getMessage());
1:88b4254:             }
1:e2f4f82:             sb.append(File.pathSeparatorChar);
1:e2f4f82:         }
1:e2f4f82:         if (jars.length > 0) {
1:e2f4f82:             sb.deleteCharAt(sb.length() -1);
1:e2f4f82:         }
1:e2f4f82:         return sb.toString();
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * <p>
1:572f3e8:      * Returns a distribution with the specified version, based on the given
1:572f3e8:      * library directory.
1:572f3e8:      * </p>
1:e2f4f82:      *
1:572f3e8:      * <p>
1:572f3e8:      * It is the responsibility of the caller to ensure that the specified
1:572f3e8:      * version matches the JARs in the given directory.
1:572f3e8:      * </p>
1:572f3e8:      *
1:e2f4f82:      * @param version the version of the distribution
1:572f3e8:      * @param baseDir the base dir for the distribution, holding the Derby JARs
1:e2f4f82:      * @return A representation of the distribution, or {@code null} if
1:572f3e8:      *      the specified directory doesn't contain a valid distribution.
1:e2f4f82:      * @throws IllegalArgumentException if {@code version} is {@code null}
1:e2f4f82:      */
1:572f3e8:     public static DerbyDistribution newInstance(DerbyVersion version,
1:572f3e8:                                                 File baseDir) {
1:572f3e8:         return newInstance(version, baseDir, baseDir);
1:572f3e8:     }
1:572f3e8: 
1:572f3e8:     /**
1:572f3e8:      * <p>
1:572f3e8:      * Returns a distribution with the specified version, based on the given
1:572f3e8:      * library and testing directories.
1:572f3e8:      * </p>
1:572f3e8:      *
1:572f3e8:      * <p>
1:572f3e8:      * It is the responsibility of the caller to ensure that the specified
1:572f3e8:      * version matches the JARs in the given directories.
1:572f3e8:      * </p>
1:572f3e8:      *
1:572f3e8:      * @param version the version of the distribution
1:572f3e8:      * @param baseDir the directory holding the production JARs
1:572f3e8:      * @param testDir the directory holding the testing JAR
1:572f3e8:      * @return A representation of the distribution, or {@code null} if
1:572f3e8:      *      the specified directories don't make up a valid distribution.
1:572f3e8:      * @throws IllegalArgumentException if {@code version} is {@code null}
1:572f3e8:      */
1:572f3e8:     public static DerbyDistribution newInstance(DerbyVersion version,
1:572f3e8:                                                 File baseDir, File testDir) {
1:572f3e8:         File[] productionJars = getProductionJars(baseDir);
1:572f3e8:         File[] testingJars = getTestingJars(testDir);
1:2510115:         List<File> tmpJars = new ArrayList<File>();
1:e2f4f82:         tmpJars.addAll(Arrays.asList(productionJars));
1:e2f4f82:         tmpJars.addAll(Arrays.asList(testingJars));
1:e2f4f82:         if (hasRequiredJars(tmpJars)) {
1:e2f4f82:             return new DerbyDistribution(version, productionJars, testingJars);
1:e2f4f82:         }
1:e2f4f82:         // Invalid distribution, ignore it.
1:e2f4f82:         BaseTestCase.println("Distribution deemed invalid (note that running " +
1:572f3e8:                 "off classes isn't supported): " + baseDir.getAbsolutePath() +
1:572f3e8:                 (baseDir.equals(testDir) ? ""
1:572f3e8:                                          : ", " + testDir.getAbsolutePath()));
1:e2f4f82:         return null;
1:e2f4f82:     }
1:e2f4f82: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:04d1513
/////////////////////////////////////////////////////////////////////////
1:     /** Path to derby.jar. */
/////////////////////////////////////////////////////////////////////////
1:      * @see #newInstance(DerbyVersion, File)
commit:572f3e8
/////////////////////////////////////////////////////////////////////////
1:  * directory have been forbidden. The main reason for this is that it is
1:  * from another. While it is possible to support such a configuration running
1:  * off the {@code classes}-directory in many scenarios, it complicates
1:  * the creation and handling of classpath string. Generating the JARs when
/////////////////////////////////////////////////////////////////////////
1:      * Returns a distribution with the specified version, based on the given
1:      * library directory.
1:      * </p>
1:      * <p>
1:      * It is the responsibility of the caller to ensure that the specified
1:      * version matches the JARs in the given directory.
1:      * </p>
1:      *
1:      * @param baseDir the base dir for the distribution, holding the Derby JARs
1:      *      the specified directory doesn't contain a valid distribution.
1:     public static DerbyDistribution newInstance(DerbyVersion version,
1:                                                 File baseDir) {
1:         return newInstance(version, baseDir, baseDir);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Returns a distribution with the specified version, based on the given
1:      * library and testing directories.
1:      * </p>
1:      *
1:      * <p>
1:      * It is the responsibility of the caller to ensure that the specified
1:      * version matches the JARs in the given directories.
1:      * </p>
1:      *
1:      * @param version the version of the distribution
1:      * @param baseDir the directory holding the production JARs
1:      * @param testDir the directory holding the testing JAR
1:      * @return A representation of the distribution, or {@code null} if
1:      *      the specified directories don't make up a valid distribution.
1:      * @throws IllegalArgumentException if {@code version} is {@code null}
1:      */
1:     public static DerbyDistribution newInstance(DerbyVersion version,
1:                                                 File baseDir, File testDir) {
1:         File[] productionJars = getProductionJars(baseDir);
1:         File[] testingJars = getTestingJars(testDir);
/////////////////////////////////////////////////////////////////////////
1:                 "off classes isn't supported): " + baseDir.getAbsolutePath() +
1:                 (baseDir.equals(testDir) ? ""
1:                                          : ", " + testDir.getAbsolutePath()));
commit:2510115
/////////////////////////////////////////////////////////////////////////
1: public class DerbyDistribution implements Comparable<DerbyDistribution> {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List<File> tmpJars = new ArrayList<File>();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8294912
/////////////////////////////////////////////////////////////////////////
1:                 BaseTestCase.println("missing jar: " + REQUIRED_JARS[i]);
commit:88b4254
/////////////////////////////////////////////////////////////////////////
1:      * Derives the information for a Derby distribution.
1:      *
1:                               File[] productionJars, File[] testingJars) {
/////////////////////////////////////////////////////////////////////////
1:     private static String constructJarClasspath(File[] jars) {
1:             try {
1:                 sb.append(jars[i].getCanonicalPath());
1:             } catch (IOException ioe) {
1:                 // Do the next best thing; use absolute path.
1:                 String absPath = jars[i].getAbsolutePath();
1:                 sb.append(absPath);
1:                 BaseTestCase.println("obtaining canonical path for " +
1:                         absPath + " failed: " + ioe.getMessage());
1:             }
/////////////////////////////////////////////////////////////////////////
0:                                                 DerbyVersion version) {
commit:e2f4f82
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.junit.DerbyDistribution
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.io.File;
1: import java.io.FilenameFilter;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: 
1: /**
1:  * Holds information required to run a Derby distribution and make choices
1:  * based on the version of the Derby distribution.
1:  * <p>
1:  * <em>Implementation note</em>: For simplicity distributions off the classes
0:  * directory has been forbidden. The main reason for this is that it is
1:  * sometimes a hard requirement that you must include only a single JAR from a
1:  * distribution on the classpath. One such example is the compatibility test,
1:  * where you need the testing code from one distribution and the client driver
0:  * from another. While it is possible to support such a configuration in many
0:  * scenarios, it complicates things quite a bit. Generating the JARs when
1:  * testing on trunk seems like an acceptable price to pay.
1:  */
0: public class DerbyDistribution
0:         implements Comparable {
1: 
1:     private static File[] EMPTY_FILE_ARRAY = new File[] {};
1:     public static final String JAR_RUN = "derbyrun.jar";
1:     public static final String JAR_CLIENT = "derbyclient.jar";
1:     public static final String JAR_ENGINE = "derby.jar";
1:     public static final String JAR_NET = "derbynet.jar";
1:     public static final String JAR_TESTING = "derbyTesting.jar";
1:     private static final String[] REQUIRED_JARS = {
1:         JAR_ENGINE, JAR_NET, JAR_CLIENT
1:     };
1: 
1:     /** The version of the Derby distribution, i.e. 10.8.1.2. */
1:     private final DerbyVersion version;
1:     /** Path to derbyrun.jar (may be {@code null}). */
1:     private final String derbyRunJarPath;
1:     /** Path to derbyclient.jar. */
1:     private final String derbyClientJarPath;
0:     /** Path to derbyengine.jar. */
1:     private final String derbyEngineJarPath;
1:     /** Path to derbynet.jar. */
1:     private final String derbyNetJarPath;
1:     /**
1:      * Production classpath, i.e. all JAR files found except for
1:      * derbyTesting.jar.
1:      */
1:     private final String productionClasspath;
1:     /** Testing classpath, i.e. path to derbyTesting.jar. */
1:     private final String testingClasspath;
1: 
1:     /**
0:      * @throws IOException if obtaining the canonical path of a file fails
1:      * @throws NullPointerException if version is {@code null}
0:      * @see #getInstance
1:      */
1:     private DerbyDistribution(DerbyVersion version,
0:                               File[] productionJars, File[] testingJars)
0:             throws IOException {
1:         if (version == null) {
1:             throw new NullPointerException("version is null");
1:         }
1:         this.version = version;
1:         this.productionClasspath = constructJarClasspath(productionJars);
1:         this.testingClasspath = constructJarClasspath(testingJars);
1:         File root = productionJars[0].getParentFile();
1:         this.derbyRunJarPath = getPath(root, JAR_RUN);
1:         this.derbyClientJarPath = getPath(root, JAR_CLIENT);
1:         this.derbyEngineJarPath = getPath(root, JAR_ENGINE);
1:         this.derbyNetJarPath = getPath(root, JAR_NET);
1:     }
1: 
1:     /** Returns the absolute path to the JAR if it exists, otherwise null. */
1:     private String getPath(File root, String jar) {
1:         File f = new File(root, jar);
1:         if (PrivilegedFileOpsForTests.exists(f)) {
1:             return f.getAbsolutePath();
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     /** Tells if this distribution has a {@code derbyrun.jar}. */
1:     public boolean hasDerbyRunJar() {
1:         return derbyRunJarPath != null;
1:     }
1: 
1:     /**
1:      * Returns the path to {@code derbyrun.jar}.
1:      *
1:      * @return A path, or {@code null} if this distribution doesn't come with
1:      *      {@code derbyrun.jar}.
1:      * @see #hasDerbyRunJar()
1:      */
1:     public String getDerbyRunJarPath() {
1:         return derbyRunJarPath;
1:     }
1: 
1:     /** Returns the path to {@code derbyclient.jar}. */
1:     public String getDerbyClientJarPath() {
1:         return derbyClientJarPath;
1:     }
1: 
1:     /** Returns the path to {@code derby.jar}. */
1:     public String getDerbyEngineJarPath() {
1:         return derbyEngineJarPath;
1:     }
1: 
1:     /** Returns the path to {@code derbynet.jar}. */
1:     public String getDerbyNetJarPath() {
1:         return derbyEngineJarPath;
1:     }
1: 
1:     /** Returns a classpath with the network server production JARs. */
1:     public String getServerClasspath() {
1:         return
1:             this.derbyNetJarPath + File.pathSeparator + this.derbyEngineJarPath;
1:     }
1: 
1:     /** Returns a classpath with all production JARs. */
1:     public String getProductionClasspath() {
1:         return productionClasspath;
1:     }
1: 
1:     /** Returns a classpath with all testing JARs. */
1:     public String getTestingClasspath() {
1:         return testingClasspath;
1:     }
1: 
1:     /** Returns a classpath with all production and testing JARs. */
1:     public String getFullClassPath() {
1:         return productionClasspath + File.pathSeparatorChar + testingClasspath;
1:     }
1: 
1:     /** Returns the version of this distribution. */
1:     public DerbyVersion getVersion() {
1:         return version;
1:     }
1: 
1:     /**
1:      * Orders this distribution and the other distribution based on the version.
1:      * <p>
0:      * <em>Implementation note</em>: Remove this method when we can use
0:      * Java SE 5.0 features.
1:      *
1:      * @param o the other distribution
1:      * @return {@code 1} if this version is newer, {@code 0} if both
1:      *      distributions have the same version, and {@code -1} if the other
1:      *      version is newer.
0:      * @see #compareTo(org.apache.derbyTesting.junit.DerbyDistribution) 
1:      */
0:     public int compareTo(Object o) {
0:         return compareTo((DerbyDistribution)o);
1:     }
1: 
1:     /**
1:      * Orders this distribution and the other distribution based on the version.
1:      *
1:      * @param o the other distribution
1:      * @return {@code 1} if this version is newer, {@code 0} if both
1:      *      distributions have the same version, and {@code -1} if the other
1:      *      version is newer.
1:      */
1:     public int compareTo(DerbyDistribution o) {
1:         return version.compareTo(o.version);
1:     }
1: 
1:     private static boolean hasRequiredJars(List jars) {
1:         for (int i=0; i < REQUIRED_JARS.length; i++) {
1:             boolean hasJar = false;
1:             for (Iterator jarIter = jars.iterator(); jarIter.hasNext(); ) {
1:                 File jar = (File)jarIter.next();
1:                 if (jar.getName().equalsIgnoreCase(REQUIRED_JARS[i])) {
1:                     hasJar = true;
1:                     break;
1:                 }
1:             }
1:             if (!hasJar) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Helper method extracting Derby production JARs from a directory.
1:      *
1:      * @param libDir directory
1:      * @return A list of JARs (possibly empty).
1:      */
1:     private static File[] getProductionJars(File libDir) {
1:         File[] pJars = libDir.listFiles(new FilenameFilter() {
1: 
1:             public boolean accept(File dir, String name) {
1:                 return name.toUpperCase().endsWith(".JAR") &&
1:                         !isTestingJar(name);
1:             }
1:         });
1:         if (pJars == null) {
1:             return EMPTY_FILE_ARRAY;
1:         } else {
1:             return pJars;
1:         }
1:     }
1: 
1:     /**
1:      * Helper method extracting Derby testing JARs from a directory.
1:      *
1:      * @param libDir directory
1:      * @return A list of JARs (possibly empty).
1:      */
1:     private static File[] getTestingJars(File libDir) {
1:         File[] tJars = libDir.listFiles(new FilenameFilter() {
1: 
1:             public boolean accept(File dir, String name) {
1:                 return isTestingJar(name);
1:             }
1:         });
1:         if (tJars == null) {
1:             return EMPTY_FILE_ARRAY;
1:         } else {
1:             return tJars;
1:         }
1:     }
1: 
1:     public static File[] getJars(File libDir) {
1:         File[] jars = libDir.listFiles(new FilenameFilter() {
1: 
1:             public boolean accept(File dir, String name) {
1:                 return name.toUpperCase().endsWith(".JAR");
1:             }
1:         });
1:         return jars;
1:     }
1: 
1:     /**
1:      * Tells if the given file is a Derby testing JAR.
1:      *
1:      * @param name name of the file
1:      * @return {@code true} if a testing JAR, {@code false} otherwise
1:      */
1:     private static boolean isTestingJar(String name) {
1:         return name.toUpperCase().endsWith(JAR_TESTING.toUpperCase());
1:     }
1: 
1:     /**
1:      * Merges a list of JAR files into a classpath string.
1:      *
1:      * @param jars JAR files to merge
1:      * @return A classpath string.
0:      * @throws IOException if obtaining the canonical path of a file fails
1:      */
0:     private static String constructJarClasspath(File[] jars)
0:             throws IOException {
1:         StringBuffer sb = new StringBuffer(512);
1:         for (int i=0; i < jars.length; i++) {
0:             sb.append(jars[i].getCanonicalPath());
1:             sb.append(File.pathSeparatorChar);
1:         }
1:         if (jars.length > 0) {
1:             sb.deleteCharAt(sb.length() -1);
1:         }
1:         return sb.toString();
1:     }
1: 
1:     /**
0:      * Returns an instance based on the given library directory and version.
1:      * <p>
0:      * This method is capable of understanding the difference of JAR based
0:      * distribution and a distribution running off the classes-directory.
1:      *
0:      * @param dir the base directory for the distribution (either the classes
0:      *      directory or a directory holding the Derby JAR files)
1:      * @param version the version of the distribution
1:      * @return A representation of the distribution, or {@code null} if
0:      *      the specified directory is determined to be invalid.
0:      * @throws IOException if obtaining the required information fails
1:      * @throws IllegalArgumentException if {@code version} is {@code null}
1:      */
0:     public static DerbyDistribution getInstance(File dir,
0:                                                 DerbyVersion version)
0:             throws IOException {
0:         File[] productionJars = getProductionJars(dir);
0:         File[] testingJars = getTestingJars(dir);
0:         List tmpJars = new ArrayList();
1:         tmpJars.addAll(Arrays.asList(productionJars));
1:         tmpJars.addAll(Arrays.asList(testingJars));
1:         if (hasRequiredJars(tmpJars)) {
1:             return new DerbyDistribution(version, productionJars, testingJars);
1:         }
1:         // Invalid distribution, ignore it.
1:         BaseTestCase.println("Distribution deemed invalid (note that running " +
0:                 "off classes isn't supported): " + dir.getAbsolutePath());
1:         return null;
1:     }
1: }
============================================================================