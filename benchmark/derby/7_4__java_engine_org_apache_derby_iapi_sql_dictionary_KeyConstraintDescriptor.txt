1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
2:eac0369: /**
1:eac0369:  * This interface is used to get information from a KeyConstraintDescriptor.
1:eac0369:  * A KeyConstraintDescriptor can represent a primary/unique/foreign key
1:eac0369:  * constraint.
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  */
1:eac0369: 
1:eac0369: public abstract class KeyConstraintDescriptor extends ConstraintDescriptor
1:eac0369: {
1:eac0369: 	/** interface to this class:
1:eac0369: 		<ol>
1:eac0369: 		<li>public UUID getIndexId();</li>
1:eac0369: 		<li>public ConglomerateDescriptor getIndexConglomerateDescriptor(DataDictionary dd)</li>
1:eac0369: 		throws StandardException;</li>
1:eac0369: 		<li>public String getIndexUUIDString();</li>
1:eac0369: 		<li>public int[]	getKeyColumns();</li>
1:eac0369: 		</ol>
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// implementation
1:eac0369: 	UUID			indexId;
1:eac0369: 
1:eac0369: 	private	ConglomerateDescriptor	indexConglom;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a KeyConstraintDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1:eac0369: 	 * @param table		The descriptor of the table the constraint is on
1:eac0369: 	 * @param constraintName	The name of the constraint.
1:eac0369: 	 * @param deferrable		If the constraint can be deferred.
1:eac0369: 	 * @param initiallyDeferred If the constraint starts life deferred.
1:eac0369: 	 * @param referencedColumns columns that the constraint references
1:eac0369: 	 * @param constraintId		UUID of constraint
1:eac0369: 	 * @param indexId			The UUID for the backing index
1:eac0369: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
1:09bee7d:      * @param enforced          {@code true} if this constraint is enforced
1:eac0369: 	 */
1:eac0369: 	KeyConstraintDescriptor(
1:eac0369: 		    DataDictionary dataDictionary,
1:eac0369: 			TableDescriptor table,
1:eac0369: 			String constraintName,
1:eac0369: 			boolean deferrable,
1:eac0369: 			boolean initiallyDeferred,
1:eac0369: 			int[] referencedColumns,
1:eac0369: 			UUID constraintId,
1:eac0369: 			UUID indexId,
1:eac0369: 			SchemaDescriptor schemaDesc,
1:09bee7d:             boolean enforced
1:eac0369: 			)							
1:eac0369: 	{
1:eac0369: 		super(dataDictionary, table, constraintName, deferrable,
1:eac0369: 			  initiallyDeferred, referencedColumns,
1:09bee7d:               constraintId, schemaDesc, enforced);
1:eac0369: 		this.indexId = indexId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the UUID of the backing index for the constraint.
1:eac0369: 	 *
1:eac0369: 	 * @return	The UUID of the backing index for the constraint.
1:eac0369: 	 */
1:eac0369: 	public UUID getIndexId()
1:eac0369: 	{
1:eac0369: 		return indexId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the index conglomerate descriptor
1:eac0369:  	 *
1:eac0369: 	 * @return the index conglomerate descriptor
1:eac0369: 	 * 
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public ConglomerateDescriptor getIndexConglomerateDescriptor(DataDictionary dd)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (indexConglom == null)
1:eac0369: 		{
1:eac0369: 			indexConglom = getTableDescriptor().getConglomerateDescriptor(indexId);	
1:eac0369: 		}
1:eac0369: 		return indexConglom;
1:eac0369: 	}		
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Gets the UUID String of the backing index for the constraint.
1:eac0369: 	 *
1:eac0369: 	 * @return	The UUID String of the backing index for the constraint.
1:eac0369: 	 */
1:eac0369: 	public String getIndexUUIDString()
1:eac0369: 	{
1:eac0369: 		return indexId.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this constraint have a backing index?
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not there is a backing index for this constraint.
1:eac0369: 	 */
1:eac0369: 	public boolean hasBackingIndex()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the UUID of the backing index, if one exists.
1:eac0369: 	 *
1:eac0369: 	 * @return The UUID of the backing index, if one exists, else null.
1:eac0369: 	 */
1:eac0369: 	public UUID getConglomerateId()
1:eac0369: 	{
1:eac0369: 		return indexId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert the SubConstraintDescriptor to a String.
1:eac0369: 	 *
1:eac0369: 	 * @return	A String representation of this SubConstraintDescriptor
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "indexId: " + indexId + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:      * @param enforced          {@code true} if this constraint is enforced
/////////////////////////////////////////////////////////////////////////
1:             boolean enforced
1:               constraintId, schemaDesc, enforced);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: /**
1:  * This interface is used to get information from a KeyConstraintDescriptor.
1:  * A KeyConstraintDescriptor can represent a primary/unique/foreign key
1:  * constraint.
1:  *
1:  * @version 0.1
0:  * @author Jerry Brenner
1:  */
1: 
1: public abstract class KeyConstraintDescriptor extends ConstraintDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/** interface to this class:
1: 		<ol>
1: 		<li>public UUID getIndexId();</li>
1: 		<li>public ConglomerateDescriptor getIndexConglomerateDescriptor(DataDictionary dd)</li>
1: 		throws StandardException;</li>
1: 		<li>public String getIndexUUIDString();</li>
1: 		<li>public int[]	getKeyColumns();</li>
1: 		</ol>
1: 	*/
1: 
1: 	// implementation
1: 	UUID			indexId;
1: 
1: 	private	ConglomerateDescriptor	indexConglom;
1: 
1: 	/**
1: 	 * Constructor for a KeyConstraintDescriptor
1: 	 *
1: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1: 	 * @param table		The descriptor of the table the constraint is on
1: 	 * @param constraintName	The name of the constraint.
1: 	 * @param deferrable		If the constraint can be deferred.
1: 	 * @param initiallyDeferred If the constraint starts life deferred.
1: 	 * @param referencedColumns columns that the constraint references
1: 	 * @param constraintId		UUID of constraint
1: 	 * @param indexId			The UUID for the backing index
1: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
0: 	 * @param isEnabled			is this constraint enabled
1: 	 */
1: 	KeyConstraintDescriptor(
1: 		    DataDictionary dataDictionary,
1: 			TableDescriptor table,
1: 			String constraintName,
1: 			boolean deferrable,
1: 			boolean initiallyDeferred,
1: 			int[] referencedColumns,
1: 			UUID constraintId,
1: 			UUID indexId,
1: 			SchemaDescriptor schemaDesc,
0: 			boolean isEnabled
1: 			)							
1: 	{
1: 		super(dataDictionary, table, constraintName, deferrable,
1: 			  initiallyDeferred, referencedColumns,
0: 			  constraintId, schemaDesc, isEnabled);
1: 		this.indexId = indexId;
1: 	}
1: 
1: 	/**
1: 	 * Gets the UUID of the backing index for the constraint.
1: 	 *
1: 	 * @return	The UUID of the backing index for the constraint.
1: 	 */
1: 	public UUID getIndexId()
1: 	{
1: 		return indexId;
1: 	}
1: 
1: 	/**
1: 	 * Gets the index conglomerate descriptor
1:  	 *
1: 	 * @return the index conglomerate descriptor
1: 	 * 
1: 	 * @exception StandardException on error
1: 	 */
1: 	public ConglomerateDescriptor getIndexConglomerateDescriptor(DataDictionary dd)
1: 		throws StandardException
1: 	{
1: 		if (indexConglom == null)
1: 		{
1: 			indexConglom = getTableDescriptor().getConglomerateDescriptor(indexId);	
1: 		}
1: 		return indexConglom;
1: 	}		
1: 	
1: 	/**
1: 	 * Gets the UUID String of the backing index for the constraint.
1: 	 *
1: 	 * @return	The UUID String of the backing index for the constraint.
1: 	 */
1: 	public String getIndexUUIDString()
1: 	{
1: 		return indexId.toString();
1: 	}
1: 
1: 	/**
1: 	 * Does this constraint have a backing index?
1: 	 *
1: 	 * @return boolean	Whether or not there is a backing index for this constraint.
1: 	 */
1: 	public boolean hasBackingIndex()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Get the UUID of the backing index, if one exists.
1: 	 *
1: 	 * @return The UUID of the backing index, if one exists, else null.
1: 	 */
1: 	public UUID getConglomerateId()
1: 	{
1: 		return indexId;
1: 	}
1: 
1: 	/**
1: 	 * Convert the SubConstraintDescriptor to a String.
1: 	 *
1: 	 * @return	A String representation of this SubConstraintDescriptor
1: 	 */
1: 
1: 	public String	toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "indexId: " + indexId + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: /**
0:  * This interface is used to get information from a KeyConstraintDescriptor.
0:  * A KeyConstraintDescriptor can represent a primary/unique/foreign key
0:  * constraint.
0:  *
0:  * @version 0.1
0:  * @author Jerry Brenner
0:  */
0: 
0: public abstract class KeyConstraintDescriptor extends ConstraintDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/** interface to this class:
0: 		<ol>
0: 		<li>public UUID getIndexId();</li>
0: 		<li>public ConglomerateDescriptor getIndexConglomerateDescriptor(DataDictionary dd)</li>
0: 		throws StandardException;</li>
0: 		<li>public String getIndexUUIDString();</li>
0: 		<li>public int[]	getKeyColumns();</li>
0: 		</ol>
0: 	*/
0: 
0: 	// implementation
0: 	UUID			indexId;
0: 
0: 	private	ConglomerateDescriptor	indexConglom;
0: 
0: 	/**
0: 	 * Constructor for a KeyConstraintDescriptor
0: 	 *
0: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
0: 	 * @param table		The descriptor of the table the constraint is on
0: 	 * @param constraintName	The name of the constraint.
0: 	 * @param deferrable		If the constraint can be deferred.
0: 	 * @param initiallyDeferred If the constraint starts life deferred.
0: 	 * @param referencedColumns columns that the constraint references
0: 	 * @param constraintId		UUID of constraint
0: 	 * @param indexId			The UUID for the backing index
0: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
0: 	 * @param isEnabled			is this constraint enabled
0: 	 */
0: 	KeyConstraintDescriptor(
0: 		    DataDictionary dataDictionary,
0: 			TableDescriptor table,
0: 			String constraintName,
0: 			boolean deferrable,
0: 			boolean initiallyDeferred,
0: 			int[] referencedColumns,
0: 			UUID constraintId,
0: 			UUID indexId,
0: 			SchemaDescriptor schemaDesc,
0: 			boolean isEnabled
0: 			)							
0: 	{
0: 		super(dataDictionary, table, constraintName, deferrable,
0: 			  initiallyDeferred, referencedColumns,
0: 			  constraintId, schemaDesc, isEnabled);
0: 		this.indexId = indexId;
0: 	}
0: 
0: 	/**
0: 	 * Gets the UUID of the backing index for the constraint.
0: 	 *
0: 	 * @return	The UUID of the backing index for the constraint.
0: 	 */
0: 	public UUID getIndexId()
0: 	{
0: 		return indexId;
0: 	}
0: 
0: 	/**
0: 	 * Gets the index conglomerate descriptor
0:  	 *
0: 	 * @return the index conglomerate descriptor
0: 	 * 
0: 	 * @exception StandardException on error
0: 	 */
0: 	public ConglomerateDescriptor getIndexConglomerateDescriptor(DataDictionary dd)
0: 		throws StandardException
0: 	{
0: 		if (indexConglom == null)
0: 		{
0: 			indexConglom = getTableDescriptor().getConglomerateDescriptor(indexId);	
0: 		}
0: 		return indexConglom;
0: 	}		
0: 	
0: 	/**
0: 	 * Gets the UUID String of the backing index for the constraint.
0: 	 *
0: 	 * @return	The UUID String of the backing index for the constraint.
0: 	 */
0: 	public String getIndexUUIDString()
0: 	{
0: 		return indexId.toString();
0: 	}
0: 
0: 	/**
0: 	 * Does this constraint have a backing index?
0: 	 *
0: 	 * @return boolean	Whether or not there is a backing index for this constraint.
0: 	 */
0: 	public boolean hasBackingIndex()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * Get the UUID of the backing index, if one exists.
0: 	 *
0: 	 * @return The UUID of the backing index, if one exists, else null.
0: 	 */
0: 	public UUID getConglomerateId()
0: 	{
0: 		return indexId;
0: 	}
0: 
0: 	/**
0: 	 * Convert the SubConstraintDescriptor to a String.
0: 	 *
0: 	 * @return	A String representation of this SubConstraintDescriptor
0: 	 */
0: 
0: 	public String	toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "indexId: " + indexId + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: }
============================================================================