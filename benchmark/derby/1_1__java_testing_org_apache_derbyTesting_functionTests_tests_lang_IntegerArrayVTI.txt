1:a2d0847: /*
1:a2d0847: 
1:a2d0847: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.IntegerArrayVTI
1:a2d0847: 
1:a2d0847: Licensed to the Apache Software Foundation (ASF) under one or more
1:a2d0847: contributor license agreements.  See the NOTICE file distributed with
1:a2d0847: this work for additional information regarding copyright ownership.
1:a2d0847: The ASF licenses this file to You under the Apache License, Version 2.0
1:a2d0847: (the "License"); you may not use this file except in compliance with
1:a2d0847: the License.  You may obtain a copy of the License at
1:a2d0847: 
1:a2d0847: http://www.apache.org/licenses/LICENSE-2.0
1:a2d0847: 
1:a2d0847: Unless required by applicable law or agreed to in writing, software
1:a2d0847: distributed under the License is distributed on an "AS IS" BASIS,
1:a2d0847: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a2d0847: See the License for the specific language governing permissions and
1:a2d0847: limitations under the License.
1:a2d0847: 
1:a2d0847: */
1:a2d0847: 
1:a2d0847: package org.apache.derbyTesting.functionTests.tests.lang;
1:a2d0847: 
1:a2d0847: import java.sql.SQLException;
1:a2d0847: import java.util.Arrays;
1:a2d0847: 
1:a2d0847: import org.apache.derby.vti.RestrictedVTI;
1:a2d0847: import org.apache.derby.vti.Restriction;
1:a2d0847: 
1:a2d0847: /**
1:a2d0847:  * A VTI which returns a row of ints.
1:a2d0847:  */
1:a2d0847: public class IntegerArrayVTI extends StringArrayVTI implements RestrictedVTI
1:a2d0847: {
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847:     //
1:a2d0847:     // STATE
1:a2d0847:     //
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847: 
1:a2d0847:     private static String[] _lastProjection;
1:a2d0847:     private static Restriction _lastRestriction;
1:92d8fc5:     private static int _lastQualifedRowCount;
1:a2d0847: 
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847:     //
1:a2d0847:     // CONSTRUCTORS
1:a2d0847:     //
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847: 
1:a2d0847:     public IntegerArrayVTI( String[] columnNames, int[][] rows )
1:a2d0847:     {
1:a2d0847:         super( columnNames, stringify( rows ) );
1:a2d0847:     }
1:a2d0847:     public IntegerArrayVTI( String[] columnNames, Integer[][] rows )
1:a2d0847:     {
1:a2d0847:         super( columnNames, stringify( rows ) );
1:a2d0847:     }
1:a2d0847:     private static String[][] stringify( int[][] rows )
1:a2d0847:     {
1:a2d0847:         int outerCount = rows.length;
1:a2d0847: 
1:a2d0847:         String[][] retval = new String[ outerCount ][];
1:a2d0847: 
1:a2d0847:         for ( int i = 0; i < outerCount; i++ )
1:a2d0847:         {
1:a2d0847:             int[] rawRow = rows[ i ];
1:a2d0847:             int innerCount = rawRow.length;
1:a2d0847:             String[] row = new String[ innerCount ];
1:a2d0847:             
1:a2d0847:             retval[ i ] = row;
1:a2d0847: 
1:a2d0847:             for ( int j = 0; j < innerCount; j++ )
1:a2d0847:             {
1:a2d0847:                 row[ j ] = Integer.toString( rawRow[ j ] );
1:a2d0847:             }
1:a2d0847:         }
1:a2d0847: 
1:a2d0847:         return retval;
1:a2d0847:     }
1:a2d0847:     private static String[][] stringify( Integer[][] rows )
1:a2d0847:     {
1:a2d0847:         int outerCount = rows.length;
1:a2d0847: 
1:a2d0847:         String[][] retval = new String[ outerCount ][];
1:a2d0847: 
1:a2d0847:         for ( int i = 0; i < outerCount; i++ )
1:a2d0847:         {
1:a2d0847:             Integer[] rawRow = rows[ i ];
1:a2d0847:             int innerCount = rawRow.length;
1:a2d0847:             String[] row = new String[ innerCount ];
1:a2d0847:             
1:a2d0847:             retval[ i ] = row;
1:a2d0847: 
1:a2d0847:             for ( int j = 0; j < innerCount; j++ )
1:a2d0847:             {
1:a2d0847:                 Integer raw = rawRow[ j ];
1:a2d0847:                 String value = raw == null ? null : raw.toString();
1:a2d0847:                 row[ j ] = value;
1:a2d0847:             }
1:a2d0847:         }
1:a2d0847: 
1:a2d0847:         return retval;
1:a2d0847:     }
1:a2d0847:     
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847:     //
1:92d8fc5:     // ResultSet OVERRIDES
1:92d8fc5:     //
1:92d8fc5:     ///////////////////////////////////////////////////////////////////////////////////
1:92d8fc5: 
1:92d8fc5:     public boolean next() throws SQLException
1:92d8fc5:     {
1:92d8fc5:         while ( true )
1:92d8fc5:         {
1:92d8fc5:             boolean anotherRow = super.next();
1:92d8fc5:             if ( !anotherRow ) { return false; }
1:92d8fc5: 
1:92d8fc5:             if ( qualifyCurrentRow() )
1:92d8fc5:             {
1:92d8fc5:                 _lastQualifedRowCount++;
1:92d8fc5:                 return true;
1:92d8fc5:             }
1:92d8fc5:         }
1:92d8fc5:     }
1:92d8fc5:     
1:92d8fc5:     ///////////////////////////////////////////////////////////////////////////////////
1:92d8fc5:     //
1:a2d0847:     // RestrictedVTI BEHAVIOR
1:a2d0847:     //
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847: 
1:a2d0847:     public void initScan( String[] columnNames, Restriction restriction ) throws SQLException
1:a2d0847:     {
1:a2d0847:         _lastProjection = columnNames;
1:a2d0847:         _lastRestriction = restriction;
1:92d8fc5:         _lastQualifedRowCount = 0;
1:92d8fc5:     }
1:92d8fc5: 
1:92d8fc5:     // Return true if the qualification succeeds on the current row
1:92d8fc5:     private boolean qualifyCurrentRow() throws SQLException
1:92d8fc5:     {
1:92d8fc5:         if ( _lastRestriction == null ) { return true; }
1:92d8fc5: 
1:92d8fc5:         return qualifyCurrentRow( _lastRestriction );
1:92d8fc5:     }
1:92d8fc5:     private boolean qualifyCurrentRow( Restriction restriction ) throws SQLException
1:92d8fc5:     {
1:92d8fc5:         if ( restriction instanceof Restriction.AND )
1:92d8fc5:         {
1:92d8fc5:             Restriction.AND and = (Restriction.AND) restriction;
1:92d8fc5: 
1:92d8fc5:             return qualifyCurrentRow( and.getLeftChild() ) && qualifyCurrentRow( and.getRightChild() );
1:92d8fc5:         }
1:92d8fc5:         else if ( restriction instanceof Restriction.OR )
1:92d8fc5:         {
1:92d8fc5:             Restriction.OR or = (Restriction.OR) restriction;
1:92d8fc5: 
1:92d8fc5:             return qualifyCurrentRow( or.getLeftChild() ) || qualifyCurrentRow( or.getRightChild() );
1:92d8fc5:         }
1:92d8fc5:         else if ( restriction instanceof Restriction.ColumnQualifier )
1:92d8fc5:         {
1:92d8fc5:             return applyColumnQualifier( (Restriction.ColumnQualifier) restriction );
1:92d8fc5:         }
1:92d8fc5:         else { throw new SQLException( "Unknown type of Restriction: " + restriction.getClass().getName() ); }
1:92d8fc5:     }
1:92d8fc5:     private boolean applyColumnQualifier( Restriction.ColumnQualifier qc ) throws SQLException
1:92d8fc5:     {
1:92d8fc5:         int operator = qc.getComparisonOperator();
1:92d8fc5:         int column = getInt( qc.getColumnName() );
1:92d8fc5:         boolean columnWasNull = wasNull();
1:92d8fc5: 
1:92d8fc5:         if ( columnWasNull )
1:92d8fc5:         {
1:92d8fc5:             if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNULL ) { return true; }
1:92d8fc5:             else if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNOTNULL ) { return false; }
1:92d8fc5:             else { return false; }
1:92d8fc5:         }
1:92d8fc5:         else if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNULL ) { return false; }
1:92d8fc5:         else if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNOTNULL ) { return true; }
1:92d8fc5: 
1:92d8fc5:         int constant = ((Integer) qc.getConstantOperand()).intValue();
1:92d8fc5: 
1:92d8fc5:         switch ( operator )
1:92d8fc5:         {
1:92d8fc5:         case Restriction.ColumnQualifier.ORDER_OP_EQUALS: return ( column == constant );
1:92d8fc5:         case Restriction.ColumnQualifier.ORDER_OP_GREATEROREQUALS: return ( column >= constant );
1:92d8fc5:         case Restriction.ColumnQualifier.ORDER_OP_GREATERTHAN: return ( column > constant );
1:92d8fc5:         case Restriction.ColumnQualifier.ORDER_OP_LESSOREQUALS: return ( column <= constant );
1:92d8fc5:         case Restriction.ColumnQualifier.ORDER_OP_LESSTHAN: return ( column < constant );
1:92d8fc5:         default: throw new SQLException( "Unknown comparison operator: " + operator );
1:92d8fc5:         }
1:a2d0847:     }
1:a2d0847: 
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847:     //
1:a2d0847:     // OTHER PUBLIC BEHAVIOR
1:a2d0847:     //
1:a2d0847:     ///////////////////////////////////////////////////////////////////////////////////
1:a2d0847: 
1:f6fa942:     public static String getLastProjection() { return ( (_lastProjection == null) ? null : Arrays.asList( _lastProjection ).toString() ); }
1:a2d0847:     public static String getLastRestriction() { return ( ( _lastRestriction == null ) ? null : _lastRestriction.toSQL() ); }
1:92d8fc5:     public static int getLastQualifiedRowCount() { return _lastQualifedRowCount; }
1:a2d0847:     
1:a2d0847: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:92d8fc5
/////////////////////////////////////////////////////////////////////////
1:     private static int _lastQualifedRowCount;
/////////////////////////////////////////////////////////////////////////
1:     // ResultSet OVERRIDES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean next() throws SQLException
1:     {
1:         while ( true )
1:         {
1:             boolean anotherRow = super.next();
1:             if ( !anotherRow ) { return false; }
1: 
1:             if ( qualifyCurrentRow() )
1:             {
1:                 _lastQualifedRowCount++;
1:                 return true;
1:             }
1:         }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
/////////////////////////////////////////////////////////////////////////
1:         _lastQualifedRowCount = 0;
1:     }
1: 
1:     // Return true if the qualification succeeds on the current row
1:     private boolean qualifyCurrentRow() throws SQLException
1:     {
1:         if ( _lastRestriction == null ) { return true; }
1: 
1:         return qualifyCurrentRow( _lastRestriction );
1:     }
1:     private boolean qualifyCurrentRow( Restriction restriction ) throws SQLException
1:     {
1:         if ( restriction instanceof Restriction.AND )
1:         {
1:             Restriction.AND and = (Restriction.AND) restriction;
1: 
1:             return qualifyCurrentRow( and.getLeftChild() ) && qualifyCurrentRow( and.getRightChild() );
1:         }
1:         else if ( restriction instanceof Restriction.OR )
1:         {
1:             Restriction.OR or = (Restriction.OR) restriction;
1: 
1:             return qualifyCurrentRow( or.getLeftChild() ) || qualifyCurrentRow( or.getRightChild() );
1:         }
1:         else if ( restriction instanceof Restriction.ColumnQualifier )
1:         {
1:             return applyColumnQualifier( (Restriction.ColumnQualifier) restriction );
1:         }
1:         else { throw new SQLException( "Unknown type of Restriction: " + restriction.getClass().getName() ); }
1:     }
1:     private boolean applyColumnQualifier( Restriction.ColumnQualifier qc ) throws SQLException
1:     {
1:         int operator = qc.getComparisonOperator();
1:         int column = getInt( qc.getColumnName() );
1:         boolean columnWasNull = wasNull();
1: 
1:         if ( columnWasNull )
1:         {
1:             if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNULL ) { return true; }
1:             else if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNOTNULL ) { return false; }
1:             else { return false; }
1:         }
1:         else if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNULL ) { return false; }
1:         else if ( operator == Restriction.ColumnQualifier.ORDER_OP_ISNOTNULL ) { return true; }
1: 
1:         int constant = ((Integer) qc.getConstantOperand()).intValue();
1: 
1:         switch ( operator )
1:         {
1:         case Restriction.ColumnQualifier.ORDER_OP_EQUALS: return ( column == constant );
1:         case Restriction.ColumnQualifier.ORDER_OP_GREATEROREQUALS: return ( column >= constant );
1:         case Restriction.ColumnQualifier.ORDER_OP_GREATERTHAN: return ( column > constant );
1:         case Restriction.ColumnQualifier.ORDER_OP_LESSOREQUALS: return ( column <= constant );
1:         case Restriction.ColumnQualifier.ORDER_OP_LESSTHAN: return ( column < constant );
1:         default: throw new SQLException( "Unknown comparison operator: " + operator );
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public static int getLastQualifiedRowCount() { return _lastQualifedRowCount; }
commit:f6fa942
/////////////////////////////////////////////////////////////////////////
1:     public static String getLastProjection() { return ( (_lastProjection == null) ? null : Arrays.asList( _lastProjection ).toString() ); }
commit:a2d0847
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.IntegerArrayVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.util.Arrays;
1: 
1: import org.apache.derby.vti.RestrictedVTI;
1: import org.apache.derby.vti.Restriction;
1: 
1: /**
1:  * A VTI which returns a row of ints.
1:  */
1: public class IntegerArrayVTI extends StringArrayVTI implements RestrictedVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static String[] _lastProjection;
1:     private static Restriction _lastRestriction;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public IntegerArrayVTI( String[] columnNames, int[][] rows )
1:     {
1:         super( columnNames, stringify( rows ) );
1:     }
1:     public IntegerArrayVTI( String[] columnNames, Integer[][] rows )
1:     {
1:         super( columnNames, stringify( rows ) );
1:     }
1:     private static String[][] stringify( int[][] rows )
1:     {
1:         int outerCount = rows.length;
1: 
1:         String[][] retval = new String[ outerCount ][];
1: 
1:         for ( int i = 0; i < outerCount; i++ )
1:         {
1:             int[] rawRow = rows[ i ];
1:             int innerCount = rawRow.length;
1:             String[] row = new String[ innerCount ];
1:             
1:             retval[ i ] = row;
1: 
1:             for ( int j = 0; j < innerCount; j++ )
1:             {
1:                 row[ j ] = Integer.toString( rawRow[ j ] );
1:             }
1:         }
1: 
1:         return retval;
1:     }
1:     private static String[][] stringify( Integer[][] rows )
1:     {
1:         int outerCount = rows.length;
1: 
1:         String[][] retval = new String[ outerCount ][];
1: 
1:         for ( int i = 0; i < outerCount; i++ )
1:         {
1:             Integer[] rawRow = rows[ i ];
1:             int innerCount = rawRow.length;
1:             String[] row = new String[ innerCount ];
1:             
1:             retval[ i ] = row;
1: 
1:             for ( int j = 0; j < innerCount; j++ )
1:             {
1:                 Integer raw = rawRow[ j ];
1:                 String value = raw == null ? null : raw.toString();
1:                 row[ j ] = value;
1:             }
1:         }
1: 
1:         return retval;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // RestrictedVTI BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public void initScan( String[] columnNames, Restriction restriction ) throws SQLException
1:     {
1:         _lastProjection = columnNames;
1:         _lastRestriction = restriction;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     public static String getLastProjection() { return Arrays.asList( _lastProjection ).toString(); }
1:     public static String getLastRestriction() { return ( ( _lastRestriction == null ) ? null : _lastRestriction.toSQL() ); }
1:     
1: }
============================================================================