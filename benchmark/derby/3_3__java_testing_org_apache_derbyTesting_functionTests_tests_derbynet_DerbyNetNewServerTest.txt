1:11f7f5c: /*
4:11f7f5c: 
1:11f7f5c:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServerTest
1:11f7f5c: 
1:11f7f5c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11f7f5c:    contributor license agreements.  See the NOTICE file distributed with
1:11f7f5c:    this work for additional information regarding copyright ownership.
1:11f7f5c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11f7f5c:    (the "License"); you may not use this file except in compliance with
1:11f7f5c:    the License.  You may obtain a copy of the License at
1:11f7f5c: 
1:11f7f5c:       http://www.apache.org/licenses/LICENSE-2.0
1:11f7f5c: 
1:11f7f5c:    Unless required by applicable law or agreed to in writing, software
1:11f7f5c:    distributed under the License is distributed on an "AS IS" BASIS,
1:11f7f5c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:11f7f5c:    See the License for the specific language governing permissions and
1:11f7f5c:    limitations under the License.
1:11f7f5c: 
1:11f7f5c:  */
1:11f7f5c: 
1:11f7f5c: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:11f7f5c: 
1:11f7f5c: import java.io.ByteArrayOutputStream;
1:11f7f5c: import java.io.PrintWriter;
1:11f7f5c: import java.net.InetAddress;
1:11f7f5c: import java.net.UnknownHostException;
1:11f7f5c: import junit.framework.Test;
1:11f7f5c: import org.apache.derby.drda.NetworkServerControl;
1:11f7f5c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c1192c0: import org.apache.derbyTesting.junit.Derby;
1:11f7f5c: import org.apache.derbyTesting.junit.JDBC;
1:11f7f5c: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:11f7f5c: import org.apache.derbyTesting.junit.TestConfiguration;
1:11f7f5c: 
1:11f7f5c: /**
1:11f7f5c:  * Test NetworkServerControl.start(PrintWriter) writes to the print Writer
1:11f7f5c:  *
1:11f7f5c:  * test:
1:11f7f5c:  *<ul>
1:11f7f5c:  *<li> start( printWriter)
1:11f7f5c:  *<li> start( (PrintWriter) null)
1:11f7f5c:  *</ul>
1:11f7f5c:  */
1:11f7f5c: public class DerbyNetNewServerTest extends BaseJDBCTestCase {
1:11f7f5c: 
1:11f7f5c:     public DerbyNetNewServerTest(String name) {
1:11f7f5c:         super(name);    
1:11f7f5c:     }    
1:6524638: 
1:11f7f5c:     public static Test suite() {
1:11f7f5c:         // Test does not run on J2ME
1:c1192c0:         if (JDBC.vmSupportsJDBC3() && Derby.hasServer()) {
1:1ae02c9:             return new BaseTestSuite(DerbyNetNewServerTest.class);
1:11f7f5c:         } else {
1:1ae02c9:             return new BaseTestSuite("DerbyNetNewServerTest.empty");
1:11f7f5c:         }
1:11f7f5c:     }
1:11f7f5c: 
1:6524638:     protected void setUp() throws Exception {
1:6524638:         // The test cases in this test start a new network server. Wait until
1:6524638:         // the network server in the previous test case has shut down
1:6524638:         // completely and released the network port before attempting to start
1:6524638:         // a new server.
1:6524638:         NetworkServerTestSetup.waitForAvailablePort();
1:6524638:     }
1:6524638: 
1:11f7f5c:     public void testStartWithPrintWriter()
1:11f7f5c:             throws UnknownHostException,
1:11f7f5c:             Exception {
1:11f7f5c:         ByteArrayOutputStream bos = new ByteArrayOutputStream(10240);
1:11f7f5c:         // DERBY-1466, Test that messages are flushed to the
1:11f7f5c:         // writer irrespective of whether the user's writer is
1:11f7f5c:         // set to autoflush true.
1:11f7f5c:         PrintWriter writer = new PrintWriter(bos);
1:11f7f5c: 
1:11f7f5c:         NetworkServerControl server = new NetworkServerControl(InetAddress
1:11f7f5c:                 .getByName(TestConfiguration.getCurrent().getHostName()),
1:11f7f5c:                 TestConfiguration.getCurrent().getPort());
1:11f7f5c: 
1:11f7f5c:         assertEquals("No log initially", 0, bos.size());
1:11f7f5c:         server.start(writer);
1:11f7f5c:         
1:11f7f5c:         NetworkServerTestSetup.waitForServerStart(server);
1:11f7f5c:         int sizeAfterPing = bos.size();
1:11f7f5c:         assertTrue("Create log with start message", 0 < sizeAfterPing);        
1:11f7f5c:         
1:11f7f5c:         server.shutdown();
1:a219537: 
1:a219537:         // DERBY-5598: The shutdown command doesn't wait until the message has
1:a219537:         // been written before it returns. Give the message a little time (up
1:a219537:         // to half a minute) to propagate to the log.
1:11f7f5c:         int sizeAfterShutDown = bos.size();
1:a219537:         for (int i = 0; i < 60 && sizeAfterShutDown == sizeAfterPing; i++) {
1:a219537:             Thread.sleep(500L);
1:a219537:             sizeAfterShutDown = bos.size();
1:a219537:         }
1:11f7f5c:         bos.close();
1:11f7f5c:         bos = null;
1:11f7f5c:         writer.close();
1:11f7f5c:         assertTrue("Num of log item should add", 
1:11f7f5c:                 sizeAfterShutDown > sizeAfterPing);
1:11f7f5c:     }
1:11f7f5c:     
1:11f7f5c:     public void testStartWithoutPrintWriter()
1:11f7f5c:             throws UnknownHostException,
1:11f7f5c:             Exception {
1:11f7f5c:         NetworkServerControl server = new NetworkServerControl(InetAddress
1:11f7f5c:                 .getByName(TestConfiguration.getCurrent().getHostName()),
1:11f7f5c:                 TestConfiguration.getCurrent().getPort());
1:11f7f5c: 
1:11f7f5c:         server.start(null);
1:11f7f5c:         NetworkServerTestSetup.waitForServerStart(server);
1:11f7f5c:         server.shutdown();
1:11f7f5c: 
1:11f7f5c:         //to show this is a right workflow.
1:11f7f5c:         assertTrue(true);
1:11f7f5c:     }
1:11f7f5c: 
1:11f7f5c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(DerbyNetNewServerTest.class);
1:             return new BaseTestSuite("DerbyNetNewServerTest.empty");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c1192c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.Derby;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJDBC3() && Derby.hasServer()) {
commit:a219537
/////////////////////////////////////////////////////////////////////////
1: 
1:         // DERBY-5598: The shutdown command doesn't wait until the message has
1:         // been written before it returns. Give the message a little time (up
1:         // to half a minute) to propagate to the log.
1:         for (int i = 0; i < 60 && sizeAfterShutDown == sizeAfterPing; i++) {
1:             Thread.sleep(500L);
1:             sizeAfterShutDown = bos.size();
1:         }
commit:6524638
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void setUp() throws Exception {
1:         // The test cases in this test start a new network server. Wait until
1:         // the network server in the previous test case has shut down
1:         // completely and released the network port before attempting to start
1:         // a new server.
1:         NetworkServerTestSetup.waitForAvailablePort();
1:     }
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:11f7f5c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServerTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.PrintWriter;
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test NetworkServerControl.start(PrintWriter) writes to the print Writer
1:  *
1:  * test:
1:  *<ul>
1:  *<li> start( printWriter)
1:  *<li> start( (PrintWriter) null)
1:  *</ul>
1:  */
1: public class DerbyNetNewServerTest extends BaseJDBCTestCase {
1: 
1:     public DerbyNetNewServerTest(String name) {
1:         super(name);    
1:     }    
1: 
1:     public static Test suite() {
1:         // Test does not run on J2ME
0:         if (JDBC.vmSupportsJDBC3()) {
0:             return new TestSuite(DerbyNetNewServerTest.class);
1:         } else {
0:             return new TestSuite("DerbyNetNewServerTest.empty");
1:         }
1:     }
1:         
1:     public void testStartWithPrintWriter()
1:             throws UnknownHostException,
1:             Exception {
1:         ByteArrayOutputStream bos = new ByteArrayOutputStream(10240);
1:         // DERBY-1466, Test that messages are flushed to the
1:         // writer irrespective of whether the user's writer is
1:         // set to autoflush true.
1:         PrintWriter writer = new PrintWriter(bos);
1: 
1:         NetworkServerControl server = new NetworkServerControl(InetAddress
1:                 .getByName(TestConfiguration.getCurrent().getHostName()),
1:                 TestConfiguration.getCurrent().getPort());
1: 
1:         assertEquals("No log initially", 0, bos.size());
1:         server.start(writer);
1:         
1:         NetworkServerTestSetup.waitForServerStart(server);
1:         int sizeAfterPing = bos.size();
1:         assertTrue("Create log with start message", 0 < sizeAfterPing);        
1:         
1:         server.shutdown();
1:         int sizeAfterShutDown = bos.size();
1:         bos.close();
1:         bos = null;
1:         writer.close();
1:         assertTrue("Num of log item should add", 
1:                 sizeAfterShutDown > sizeAfterPing);
1:     }
1:     
1:     public void testStartWithoutPrintWriter()
1:             throws UnknownHostException,
1:             Exception {
1:         NetworkServerControl server = new NetworkServerControl(InetAddress
1:                 .getByName(TestConfiguration.getCurrent().getHostName()),
1:                 TestConfiguration.getCurrent().getPort());
1: 
1:         server.start(null);
1:         NetworkServerTestSetup.waitForServerStart(server);
1:         server.shutdown();
1: 
1:         //to show this is a right workflow.
1:         assertTrue(true);
1:     }
1: 
1: }
============================================================================