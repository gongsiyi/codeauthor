1:50af304: /*
1:50af304: 
1:50af304:    Derby - Class org.apache.derbyTesting.unitTests.junit.ArrayInputStreamTest
1:50af304: 
1:50af304:    Licensed to the Apache Software Foundation (ASF) under one or more
1:50af304:    contributor license agreements.  See the NOTICE file distributed with
1:50af304:    this work for additional information regarding copyright ownership.
1:50af304:    The ASF licenses this file to you under the Apache License, Version 2.0
1:50af304:    (the "License"); you may not use this file except in compliance with
1:50af304:    the License.  You may obtain a copy of the License at
1:50af304: 
1:50af304:       http://www.apache.org/licenses/LICENSE-2.0
1:50af304: 
1:50af304:    Unless required by applicable law or agreed to in writing, software
1:50af304:    distributed under the License is distributed on an "AS IS" BASIS,
1:50af304:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50af304:    See the License for the specific language governing permissions and
1:50af304:    limitations under the License.
1:50af304: 
1:50af304:  */
1:50af304: 
1:50af304: package org.apache.derbyTesting.unitTests.junit;
1:50af304: 
1:50af304: import java.io.IOException;
1:50af304: import junit.framework.Test;
1:50af304: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:50af304: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:50af304: 
1:50af304: /**
1:50af304:  * Unit tests for {@code org.apache.derby.iapi.services.io.ArrayInputStream}.
1:50af304:  */
1:50af304: public class ArrayInputStreamTest extends BaseTestCase {
1:50af304: 
1:50af304:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(ArrayInputStreamTest.class);
1:50af304:     }
1:50af304: 
1:50af304:     public ArrayInputStreamTest(String name) {
1:50af304:         super(name);
1:50af304:     }
1:50af304: 
1:50af304:     /**
1:50af304:      * Test that we don't get an overflow when the argument to skip() is
1:50af304:      * Long.MAX_VALUE (DERBY-3739).
1:50af304:      */
1:50af304:     public void testSkipLongMaxValue() throws IOException {
1:50af304:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:50af304:         assertEquals(1000, ais.skip(Long.MAX_VALUE));
1:50af304:         assertEquals(1000, ais.getPosition());
1:50af304:         ais.setPosition(1);
1:50af304:         assertEquals(999, ais.skip(Long.MAX_VALUE));
1:50af304:         assertEquals(1000, ais.getPosition());
1:50af304:     }
1:50af304: 
1:50af304:     /**
1:50af304:      * Test that we don't get an overflow when the argument to skipBytes() is
1:50af304:      * Integer.MAX_VALUE (DERBY-3739).
1:50af304:      */
1:50af304:     public void testSkipBytesIntMaxValue() throws IOException {
1:50af304:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:50af304:         assertEquals(1000, ais.skipBytes(Integer.MAX_VALUE));
1:50af304:         assertEquals(1000, ais.getPosition());
1:50af304:         ais.setPosition(1);
1:50af304:         assertEquals(999, ais.skipBytes(Integer.MAX_VALUE));
1:50af304:         assertEquals(1000, ais.getPosition());
1:50af304:     }
1:50af304: 
1:50af304:     /**
1:50af304:      * Test that skip() returns 0 when the argument is negative (DERBY-3739).
1:50af304:      */
1:50af304:     public void testSkipNegative() throws IOException {
1:50af304:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:50af304:         assertEquals(0, ais.skip(-1));
1:50af304:     }
1:50af304: 
1:50af304:     /**
1:50af304:      * Test that skipBytes() returns 0 when the argument is negative
1:50af304:      * (DERBY-3739).
1:50af304:      */
1:50af304:     public void testSkipBytesNegative() throws IOException {
1:50af304:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:50af304:         assertEquals(0, ais.skipBytes(-1));
1:50af304:     }
1:50af304: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(ArrayInputStreamTest.class);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:50af304
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.ArrayInputStreamTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.io.IOException;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Unit tests for {@code org.apache.derby.iapi.services.io.ArrayInputStream}.
1:  */
1: public class ArrayInputStreamTest extends BaseTestCase {
1: 
1:     public static Test suite() {
0:         return new TestSuite(ArrayInputStreamTest.class);
1:     }
1: 
1:     public ArrayInputStreamTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Test that we don't get an overflow when the argument to skip() is
1:      * Long.MAX_VALUE (DERBY-3739).
1:      */
1:     public void testSkipLongMaxValue() throws IOException {
1:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:         assertEquals(1000, ais.skip(Long.MAX_VALUE));
1:         assertEquals(1000, ais.getPosition());
1:         ais.setPosition(1);
1:         assertEquals(999, ais.skip(Long.MAX_VALUE));
1:         assertEquals(1000, ais.getPosition());
1:     }
1: 
1:     /**
1:      * Test that we don't get an overflow when the argument to skipBytes() is
1:      * Integer.MAX_VALUE (DERBY-3739).
1:      */
1:     public void testSkipBytesIntMaxValue() throws IOException {
1:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:         assertEquals(1000, ais.skipBytes(Integer.MAX_VALUE));
1:         assertEquals(1000, ais.getPosition());
1:         ais.setPosition(1);
1:         assertEquals(999, ais.skipBytes(Integer.MAX_VALUE));
1:         assertEquals(1000, ais.getPosition());
1:     }
1: 
1:     /**
1:      * Test that skip() returns 0 when the argument is negative (DERBY-3739).
1:      */
1:     public void testSkipNegative() throws IOException {
1:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:         assertEquals(0, ais.skip(-1));
1:     }
1: 
1:     /**
1:      * Test that skipBytes() returns 0 when the argument is negative
1:      * (DERBY-3739).
1:      */
1:     public void testSkipBytesNegative() throws IOException {
1:         ArrayInputStream ais = new ArrayInputStream(new byte[1000]);
1:         assertEquals(0, ais.skipBytes(-1));
1:     }
1: }
============================================================================