1:d76e238: /*  Derby - Class org.apache.derbyBuild.ElementFacade
1:d76e238: 
1:d76e238: Licensed to the Apache Software Foundation (ASF) under one or more
1:d76e238: contributor license agreements.  See the NOTICE file distributed with
1:d76e238: this work for additional information regarding copyright ownership.
1:d76e238: The ASF licenses this file to You under the Apache License, Version 2.0
1:d76e238: (the "License"); you may not use this file except in compliance with
1:d76e238: the License.  You may obtain a copy of the License at
1:d76e238: 
1:d76e238: http://www.apache.org/licenses/LICENSE-2.0
1:d76e238: 
1:d76e238: Unless required by applicable law or agreed to in writing, software
1:d76e238: distributed under the License is distributed on an "AS IS" BASIS,
1:d76e238: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d76e238: See the License for the specific language governing permissions and
1:d76e238: limitations under the License.
1:d76e238: 
1:d76e238:  */
1:d76e238: package org.apache.derbyBuild;
1:d76e238: 
1:d76e238: import org.w3c.dom.*;
1:d76e238: import java.util.*;
1:d76e238: 
1:d76e238: /**
1:d76e238:  * A convenience wrapper around an XML Document Element. Provides some utility
1:d76e238:  * methods for common operations on Element trees.
1:d76e238:  */
1:d76e238: public class ElementFacade {
1:d76e238: 
1:d76e238:     private Element root;
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * Construct a new ElementFacade from an Element.
1:d76e238:      * @param r - the Element to wrap
1:d76e238:      */
1:2349a90:     public ElementFacade(Element r) {
1:d76e238:         root = r;
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * Construct a new ElementFacade from a Document (extract the top Element)
1:d76e238:      * @param d document to get Element from
2:d76e238:      * @throws java.lang.Exception
1:d76e238:      */
1:d76e238:     public ElementFacade(Document d) throws Exception {
1:d76e238:         this(d.getDocumentElement());
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * Lookup the Element subtree that starts with the specified tag. If more
1:d76e238:      * than one, or no such tags exist an IllegalArgumentException is thrown.
1:d76e238:      * @param tag to look up in wrapped tree
1:d76e238:      * @return Element subtree rooted at the specified tag
1:d76e238:      * @throws java.lang.Exception
1:d76e238:      */
1:d76e238:     public Element getElementByTagName(String tag) throws Exception {
1:d76e238:         NodeList matchingTags = root.getElementsByTagName(tag);
1:d76e238:         final int length = matchingTags.getLength();
1:d76e238:         if (length != 1) {
1:d76e238:             throw new IllegalArgumentException("Tag `" + tag + "' occurs " +
1:d76e238:                     length + " times in Document.");
1:d76e238:         }
1:d76e238:         return (Element) matchingTags.item(0);
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * Lookup the text (as String) identified by the specified tag. If more
1:d76e238:      * than one, or no such tags exist an IllegalArgumentException is thrown.
1:d76e238:      * @param tag to look up in wrapped tree
1:d76e238:      * @return text corresponding to the specified tag
1:d76e238:      * @throws java.lang.Exception
1:d76e238:      */
1:d76e238:     public String getTextByTagName(String tag) throws Exception {
1:d76e238:         return getElementByTagName(tag).getFirstChild().getNodeValue();
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * Produce a list of the texts specified by the
1:d76e238:      * instances of tag in the wrapped tree. An empty list is retured if
1:d76e238:      * there are no instances of tag in the tree.
1:d76e238:      * @param tag to look up in wrapped tree
1:d76e238:      * @return list of texts corresponding to the specified tag
1:d76e238:      * @throws java.lang.Exception
1:d76e238:      */
1:38b9499:     public List<String> getTextListByTagName(String tag) throws Exception {
1:d76e238:         NodeList matchingTags = root.getElementsByTagName(tag);
1:d76e238:         final int length = matchingTags.getLength();
1:38b9499:         ArrayList<String> tagValues = new ArrayList<String>();
1:d76e238:         for (int i = 0; i < length; ++i) {
1:d76e238:             tagValues.add(matchingTags.item(i).getFirstChild().getNodeValue());
1:d76e238:         }
1:d76e238:         return tagValues;
1:d76e238:     }
1:d76e238: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2349a90
/////////////////////////////////////////////////////////////////////////
1:     public ElementFacade(Element r) {
commit:38b9499
/////////////////////////////////////////////////////////////////////////
1:     public List<String> getTextListByTagName(String tag) throws Exception {
1:         ArrayList<String> tagValues = new ArrayList<String>();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:d76e238
/////////////////////////////////////////////////////////////////////////
1: /*  Derby - Class org.apache.derbyBuild.ElementFacade
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1:  */
1: package org.apache.derbyBuild;
1: 
1: import org.w3c.dom.*;
1: import java.util.*;
1: 
1: /**
1:  * A convenience wrapper around an XML Document Element. Provides some utility
1:  * methods for common operations on Element trees.
1:  */
1: public class ElementFacade {
1: 
1:     private Element root;
1: 
1:     /**
1:      * Construct a new ElementFacade from an Element.
1:      * @param r - the Element to wrap
1:      * @throws java.lang.Exception
1:      */
0:     public ElementFacade(Element r) throws Exception {
1:         root = r;
1:     }
1: 
1:     /**
1:      * Construct a new ElementFacade from a Document (extract the top Element)
1:      * @param d document to get Element from
1:      * @throws java.lang.Exception
1:      */
1:     public ElementFacade(Document d) throws Exception {
1:         this(d.getDocumentElement());
1:     }
1: 
1:     /**
1:      * Lookup the Element subtree that starts with the specified tag. If more
1:      * than one, or no such tags exist an IllegalArgumentException is thrown.
1:      * @param tag to look up in wrapped tree
1:      * @return Element subtree rooted at the specified tag
1:      * @throws java.lang.Exception
1:      */
1:     public Element getElementByTagName(String tag) throws Exception {
1:         NodeList matchingTags = root.getElementsByTagName(tag);
1:         final int length = matchingTags.getLength();
1:         if (length != 1) {
1:             throw new IllegalArgumentException("Tag `" + tag + "' occurs " +
1:                     length + " times in Document.");
1:         }
1:         return (Element) matchingTags.item(0);
1:     }
1: 
1:     /**
1:      * Lookup the text (as String) identified by the specified tag. If more
1:      * than one, or no such tags exist an IllegalArgumentException is thrown.
1:      * @param tag to look up in wrapped tree
1:      * @return text corresponding to the specified tag
1:      * @throws java.lang.Exception
1:      */
1:     public String getTextByTagName(String tag) throws Exception {
1:         return getElementByTagName(tag).getFirstChild().getNodeValue();
1:     }
1: 
1:     /**
1:      * Produce a list of the texts specified by the
1:      * instances of tag in the wrapped tree. An empty list is retured if
1:      * there are no instances of tag in the tree.
1:      * @param tag to look up in wrapped tree
1:      * @return list of texts corresponding to the specified tag
1:      * @throws java.lang.Exception
1:      */
0:     public List getTextListByTagName(String tag) throws Exception {
1:         NodeList matchingTags = root.getElementsByTagName(tag);
1:         final int length = matchingTags.getLength();
0:         ArrayList tagValues = new ArrayList();
1:         for (int i = 0; i < length; ++i) {
1:             tagValues.add(matchingTags.item(i).getFirstChild().getNodeValue());
1:         }
1:         return tagValues;
1:     }
1: }
============================================================================