1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.CursorTableReference
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecCursorTableReference;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
2:eac0369: /**
1:eac0369:  * 
1:eac0369:  */
1:eac0369: public class CursorTableReference
1:eac0369: 	implements ExecCursorTableReference, Formatable
1:eac0369: {
1:eac0369: 
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	private String		exposedName;
1:eac0369: 	private String		baseName;
1:eac0369: 	private String		schemaName;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formatable
1:eac0369: 	 */
1:eac0369: 	public CursorTableReference()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public CursorTableReference
1:eac0369: 	(
1:eac0369: 		String	exposedName,
1:eac0369: 		String	baseName,
1:eac0369: 		String	schemaName
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		this.exposedName = exposedName;
1:eac0369: 		this.baseName = baseName;
1:eac0369: 		this.schemaName = schemaName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the base name of the table
1:eac0369:  	 *
1:eac0369: 	 * @return the base name
1:eac0369: 	 */
1:eac0369: 	public String getBaseName()
1:eac0369: 	{
1:eac0369: 		return baseName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the exposed name of the table.  Exposed
1:eac0369: 	 * name is another term for correlation name.  If
1:eac0369: 	 * there is no correlation, this will return the base
1:eac0369: 	 * name.
1:eac0369:  	 *
1:eac0369: 	 * @return the base name
1:eac0369: 	 */
1:eac0369: 	public String getExposedName()
1:eac0369: 	{
1:eac0369: 		return exposedName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the schema for the table.  
1:eac0369: 	 *
1:eac0369: 	 * @return the schema name
1:eac0369: 	 */
1:eac0369: 	public String getSchemaName()
1:eac0369: 	{
1:eac0369: 		return schemaName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeObject(baseName);
1:eac0369: 		out.writeObject(exposedName);
1:eac0369: 		out.writeObject(schemaName);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		baseName = (String)in.readObject();
1:eac0369: 		exposedName = (String)in.readObject();
1:eac0369: 		schemaName = (String)in.readObject();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int getTypeFormatId()	{ return StoredFormatIds.CURSOR_TABLE_REFERENCE_V01_ID; }
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "CursorTableReference"+
1:eac0369: 				"\n\texposedName: "+exposedName+
1:eac0369: 				"\n\tbaseName: "+baseName+
1:eac0369: 				"\n\tschemaName: "+schemaName;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.CursorTableReference
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecCursorTableReference;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1:  * 
0:  * @author jamie
1:  */
1: public class CursorTableReference
1: 	implements ExecCursorTableReference, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	private String		exposedName;
1: 	private String		baseName;
1: 	private String		schemaName;
1: 
1: 	/**
1: 	 * Niladic constructor for Formatable
1: 	 */
1: 	public CursorTableReference()
1: 	{
1: 	}
1: 
1: 	/**
1: 	 *
1: 	 */
1: 	public CursorTableReference
1: 	(
1: 		String	exposedName,
1: 		String	baseName,
1: 		String	schemaName
1: 	)
1: 	{
1: 		this.exposedName = exposedName;
1: 		this.baseName = baseName;
1: 		this.schemaName = schemaName;
1: 	}
1: 
1: 	/**
1: 	 * Return the base name of the table
1:  	 *
1: 	 * @return the base name
1: 	 */
1: 	public String getBaseName()
1: 	{
1: 		return baseName;
1: 	}
1: 
1: 	/**
1: 	 * Return the exposed name of the table.  Exposed
1: 	 * name is another term for correlation name.  If
1: 	 * there is no correlation, this will return the base
1: 	 * name.
1:  	 *
1: 	 * @return the base name
1: 	 */
1: 	public String getExposedName()
1: 	{
1: 		return exposedName;
1: 	}
1: 
1: 	/**
1: 	 * Return the schema for the table.  
1: 	 *
1: 	 * @return the schema name
1: 	 */
1: 	public String getSchemaName()
1: 	{
1: 		return schemaName;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeObject(baseName);
1: 		out.writeObject(exposedName);
1: 		out.writeObject(schemaName);
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		baseName = (String)in.readObject();
1: 		exposedName = (String)in.readObject();
1: 		schemaName = (String)in.readObject();
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int getTypeFormatId()	{ return StoredFormatIds.CURSOR_TABLE_REFERENCE_V01_ID; }
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "CursorTableReference"+
1: 				"\n\texposedName: "+exposedName+
1: 				"\n\tbaseName: "+baseName+
1: 				"\n\tschemaName: "+schemaName;
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecCursorTableReference;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0:  * 
0:  * @author jamie
0:  */
0: public class CursorTableReference
0: 	implements ExecCursorTableReference, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	private String		exposedName;
0: 	private String		baseName;
0: 	private String		schemaName;
0: 
0: 	/**
0: 	 * Niladic constructor for Formatable
0: 	 */
0: 	public CursorTableReference()
0: 	{
0: 	}
0: 
0: 	/**
0: 	 *
0: 	 */
0: 	public CursorTableReference
0: 	(
0: 		String	exposedName,
0: 		String	baseName,
0: 		String	schemaName
0: 	)
0: 	{
0: 		this.exposedName = exposedName;
0: 		this.baseName = baseName;
0: 		this.schemaName = schemaName;
0: 	}
0: 
0: 	/**
0: 	 * Return the base name of the table
0:  	 *
0: 	 * @return the base name
0: 	 */
0: 	public String getBaseName()
0: 	{
0: 		return baseName;
0: 	}
0: 
0: 	/**
0: 	 * Return the exposed name of the table.  Exposed
0: 	 * name is another term for correlation name.  If
0: 	 * there is no correlation, this will return the base
0: 	 * name.
0:  	 *
0: 	 * @return the base name
0: 	 */
0: 	public String getExposedName()
0: 	{
0: 		return exposedName;
0: 	}
0: 
0: 	/**
0: 	 * Return the schema for the table.  
0: 	 *
0: 	 * @return the schema name
0: 	 */
0: 	public String getSchemaName()
0: 	{
0: 		return schemaName;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeObject(baseName);
0: 		out.writeObject(exposedName);
0: 		out.writeObject(schemaName);
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		baseName = (String)in.readObject();
0: 		exposedName = (String)in.readObject();
0: 		schemaName = (String)in.readObject();
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.CURSOR_TABLE_REFERENCE_V01_ID; }
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "CursorTableReference"+
0: 				"\n\texposedName: "+exposedName+
0: 				"\n\tbaseName: "+baseName+
0: 				"\n\tschemaName: "+schemaName;
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================