1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for DeleteVTIResultSet.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: public class RealDeleteVTIResultSetStatistics
1:eac0369: 	extends RealNoRowsResultSetStatistics
1:eac0369: {
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369:     public	int 					rowCount;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	RealDeleteVTIResultSetStatistics(
1:eac0369: 								int rowCount,
1:eac0369: 								long executeTime,    
1:eac0369: 								ResultSetStatistics sourceResultSetStatistics
1:eac0369: 								)
1:eac0369: 	{
1:eac0369: 		super(executeTime, sourceResultSetStatistics);
1:eac0369: 		this.rowCount = rowCount;
1:eac0369: 		this.sourceResultSetStatistics = sourceResultSetStatistics;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// ResultSetStatistics interface
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the statement execution plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 *
1:eac0369: 	 * @return String	The statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText(int depth)
1:eac0369: 	{
1:eac0369: 		initFormatInfo(depth);
1:eac0369: 
1:eac0369: 
1:eac0369: 		return
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_DELETE_VTI_RESULT_SET) +
1:eac0369: 					":\n" + 
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_DELETED) +
1:eac0369: 					" = " + rowCount + "\n" +
1:eac0369: 			dumpTimeStats(indent) + ((sourceResultSetStatistics == null) ? "" :
1:eac0369: 			sourceResultSetStatistics.getStatementExecutionPlanText(1));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return information on the scan nodes from the statement execution 
1:eac0369: 	 * plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 * @param tableName if not NULL then print information for this table only
1:eac0369: 	 *
1:eac0369: 	 * @return String	The information on the scan nodes from the 
1:eac0369: 	 *					statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName, int depth)
1:eac0369: 	{
1:eac0369: 		if (sourceResultSetStatistics == null)
1:eac0369: 			return "";
1:eac0369: 		return sourceResultSetStatistics.getScanStatisticsText(tableName, depth);
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	// Class implementation
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return getStatementExecutionPlanText(0);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369:    * Format for display, a name for this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public String getNodeName(){
1:eac0369:     return MessageService.getTextMessage(SQLState.RTS_DELETE_VTI);
1:eac0369:   }
1:48a9884:   
1:48a9884:   //------------------------------------------------------
1:48a9884:   // XPLAINable Implementation
1:48a9884:   // -----------------------------------------------------
1:48a9884:   
1:48a9884:     public void accept(XPLAINVisitor visitor) {
1:48a9884:         int noChildren = 0;
1:48a9884:         if(this.sourceResultSetStatistics!=null) noChildren++;
1:48a9884:         
1:48a9884:         //inform the visitor
1:48a9884:         visitor.setNumberOfChildren(noChildren);
1:48a9884:         
1:48a9884:         // pre-order, depth-first traversal
1:48a9884:         // me first
1:48a9884:         visitor.visit(this);
1:48a9884:         // then my child
1:48a9884:         if(sourceResultSetStatistics!=null){
1:48a9884:             sourceResultSetStatistics.accept(visitor);
1:48a9884: 		}
1:48a9884: 
1:48a9884:     }
1:48a9884:     public String getRSXplainType() { return XPLAINUtil.OP_DELETE; }
1:48a9884:     public String getRSXplainDetails() { return XPLAINUtil.OP_VTI; }
1:48a9884:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:48a9884:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetDescriptor(
1:48a9884:            (UUID)rsID,
1:48a9884:            getRSXplainType(),
1:48a9884:            getRSXplainDetails(),
1:48a9884:            null,                              // the number of opens
1:48a9884:            null,                              // the number of index updates 
1:48a9884:            null,                           // lock mode
1:48a9884:            null,                           // lock granularity
1:48a9884:            (UUID)parentID,
1:48a9884:            null,                             // estimated row count
1:48a9884:            null,                             // estimated cost
1:ce40a31:            this.rowCount,
1:48a9884:            null,                              // the deferred rows.
1:48a9884:            null,                              // the input rows
1:48a9884:            null,                              // the seen rows left
1:48a9884:            null,                              // the seen rows right
1:48a9884:            null,                              // the filtered rows
1:48a9884:            null,                              // the returned rows
1:48a9884:            null,                              // the empty right rows
1:48a9884:            null,                           // index key optimization
1:48a9884:            (UUID)scanID,
1:48a9884:            (UUID)sortID,
1:48a9884:            (UUID)stmtID,
1:48a9884:            (UUID)timingID);
1:48a9884:     }
1:48a9884: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:            this.rowCount,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
/////////////////////////////////////////////////////////////////////////
1:   
1:   //------------------------------------------------------
1:   // XPLAINable Implementation
1:   // -----------------------------------------------------
1:   
1:     public void accept(XPLAINVisitor visitor) {
1:         int noChildren = 0;
1:         if(this.sourceResultSetStatistics!=null) noChildren++;
1:         
1:         //inform the visitor
1:         visitor.setNumberOfChildren(noChildren);
1:         
1:         // pre-order, depth-first traversal
1:         // me first
1:         visitor.visit(this);
1:         // then my child
1:         if(sourceResultSetStatistics!=null){
1:             sourceResultSetStatistics.accept(visitor);
1: 		}
1: 
1:     }
1:     public String getRSXplainType() { return XPLAINUtil.OP_DELETE; }
1:     public String getRSXplainDetails() { return XPLAINUtil.OP_VTI; }
1:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:     {
1:         return new XPLAINResultSetDescriptor(
1:            (UUID)rsID,
1:            getRSXplainType(),
1:            getRSXplainDetails(),
1:            null,                              // the number of opens
1:            null,                              // the number of index updates 
1:            null,                           // lock mode
1:            null,                           // lock granularity
1:            (UUID)parentID,
1:            null,                             // estimated row count
1:            null,                             // estimated cost
0:            new Integer(this.rowCount),
1:            null,                              // the deferred rows.
1:            null,                              // the input rows
1:            null,                              // the seen rows left
1:            null,                              // the seen rows right
1:            null,                              // the filtered rows
1:            null,                              // the returned rows
1:            null,                              // the empty right rows
1:            null,                           // index key optimization
1:            (UUID)scanID,
1:            (UUID)sortID,
1:            (UUID)stmtID,
1:            (UUID)timingID);
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:   ResultSetStatistics implemenation for DeleteVTIResultSet.
1: 
0:   @author jerry
1: 
1: */
1: public class RealDeleteVTIResultSetStatistics
1: 	extends RealNoRowsResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	/* Leave these fields public for object inspectors */
1:     public	int 					rowCount;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * 
1: 	 *
1: 	 */
1:     public	RealDeleteVTIResultSetStatistics(
1: 								int rowCount,
1: 								long executeTime,    
1: 								ResultSetStatistics sourceResultSetStatistics
1: 								)
1: 	{
1: 		super(executeTime, sourceResultSetStatistics);
1: 		this.rowCount = rowCount;
1: 		this.sourceResultSetStatistics = sourceResultSetStatistics;
1: 	}
1: 
1: 	// ResultSetStatistics interface
1: 
1: 	/**
1: 	 * Return the statement execution plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 *
1: 	 * @return String	The statement execution plan as a String.
1: 	 */
1: 	public String getStatementExecutionPlanText(int depth)
1: 	{
1: 		initFormatInfo(depth);
1: 
1: 
1: 		return
1: 			indent + MessageService.getTextMessage(SQLState.RTS_DELETE_VTI_RESULT_SET) +
1: 					":\n" + 
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_DELETED) +
1: 					" = " + rowCount + "\n" +
1: 			dumpTimeStats(indent) + ((sourceResultSetStatistics == null) ? "" :
1: 			sourceResultSetStatistics.getStatementExecutionPlanText(1));
1: 	}
1: 
1: 	/**
1: 	 * Return information on the scan nodes from the statement execution 
1: 	 * plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 * @param tableName if not NULL then print information for this table only
1: 	 *
1: 	 * @return String	The information on the scan nodes from the 
1: 	 *					statement execution plan as a String.
1: 	 */
1: 	public String getScanStatisticsText(String tableName, int depth)
1: 	{
1: 		if (sourceResultSetStatistics == null)
1: 			return "";
1: 		return sourceResultSetStatistics.getScanStatisticsText(tableName, depth);
1: 	}
1:  
1: 	// Class implementation
1: 	
1: 	public String toString()
1: 	{
1: 		return getStatementExecutionPlanText(0);
1: 	}
1: 	/**
1:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public String getNodeName(){
1:     return MessageService.getTextMessage(SQLState.RTS_DELETE_VTI);
1:   }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:   ResultSetStatistics implemenation for DeleteVTIResultSet.
0: 
0:   @author jerry
0: 
0: */
0: public class RealDeleteVTIResultSetStatistics
0: 	extends RealNoRowsResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	/* Leave these fields public for object inspectors */
0:     public	int 					rowCount;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0:     public	RealDeleteVTIResultSetStatistics(
0: 								int rowCount,
0: 								long executeTime,    
0: 								ResultSetStatistics sourceResultSetStatistics
0: 								)
0: 	{
0: 		super(executeTime, sourceResultSetStatistics);
0: 		this.rowCount = rowCount;
0: 		this.sourceResultSetStatistics = sourceResultSetStatistics;
0: 	}
0: 
0: 	// ResultSetStatistics interface
0: 
0: 	/**
0: 	 * Return the statement execution plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 *
0: 	 * @return String	The statement execution plan as a String.
0: 	 */
0: 	public String getStatementExecutionPlanText(int depth)
0: 	{
0: 		initFormatInfo(depth);
0: 
0: 
0: 		return
0: 			indent + MessageService.getTextMessage(SQLState.RTS_DELETE_VTI_RESULT_SET) +
0: 					":\n" + 
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_DELETED) +
0: 					" = " + rowCount + "\n" +
0: 			dumpTimeStats(indent) + ((sourceResultSetStatistics == null) ? "" :
0: 			sourceResultSetStatistics.getStatementExecutionPlanText(1));
0: 	}
0: 
0: 	/**
0: 	 * Return information on the scan nodes from the statement execution 
0: 	 * plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 * @param tableName if not NULL then print information for this table only
0: 	 *
0: 	 * @return String	The information on the scan nodes from the 
0: 	 *					statement execution plan as a String.
0: 	 */
0: 	public String getScanStatisticsText(String tableName, int depth)
0: 	{
0: 		if (sourceResultSetStatistics == null)
0: 			return "";
0: 		return sourceResultSetStatistics.getScanStatisticsText(tableName, depth);
0: 	}
0:  
0: 	// Class implementation
0: 	
0: 	public String toString()
0: 	{
0: 		return getStatementExecutionPlanText(0);
0: 	}
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public String getNodeName(){
0:     return MessageService.getTextMessage(SQLState.RTS_DELETE_VTI);
0:   }
0: }
============================================================================