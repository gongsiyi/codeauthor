1:7e21093: /*
1:7e21093:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SubqueryFlatteningTest
1:7e21093:  *
1:7e21093:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7e21093:  * contributor license agreements.  See the NOTICE file distributed with
1:7e21093:  * this work for additional information regarding copyright ownership.
1:7e21093:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7e21093:  * (the "License"); you may not use this file except in compliance with
1:7e21093:  * the License.  You may obtain a copy of the License at
1:7e21093:  *
1:7e21093:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7e21093:  *
1:7e21093:  * Unless required by applicable law or agreed to in writing,
1:7e21093:  * software distributed under the License is distributed on an
1:7e21093:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:7e21093:  * either express or implied. See the License for the specific
1:7e21093:  * language governing permissions and limitations under the License.
1:7e21093:  */
1:7e21093: 
1:7e21093: package org.apache.derbyTesting.functionTests.tests.lang;
1:7e21093: 
1:7e21093: import java.sql.SQLException;
1:7e21093: import java.sql.Statement;
1:7e21093: import junit.framework.Test;
1:7e21093: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:7e21093: import org.apache.derbyTesting.junit.JDBC;
1:7e21093: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1:7e21093: import org.apache.derbyTesting.junit.SQLUtilities;
1:7e21093: import org.apache.derbyTesting.junit.TestConfiguration;
1:7e21093: 
1:7e21093: /**
1:7e21093:  * This test verifies that flattening of subqueries works correctly.
1:7e21093:  *
1:7e21093:  * The test cases in <tt>subqueryFlattening.sql</tt> could be moved to this
1:7e21093:  * class when they are converted to JUnit.
1:7e21093:  */
1:7e21093: public class SubqueryFlatteningTest extends BaseJDBCTestCase {
1:7e21093: 
1:7e21093:     public SubqueryFlatteningTest(String name) {
1:7e21093:         super(name);
1:7e21093:     }
1:7e21093: 
1:7e21093:     public static Test suite() {
1:7e21093:         // We're testing the SQL layer, so we run the test in embedded
1:7e21093:         // mode only.
1:7e21093:         return TestConfiguration.embeddedSuite(SubqueryFlatteningTest.class);
1:7e21093:     }
1:7e21093: 
1:7e21093:     /**
1:7e21093:      * Set up the test environment. Turn off auto-commit so that all the test
1:7e21093:      * data can easily be removed by the rollback performed in
1:7e21093:      * {@code BaseJDBCTestCase.tearDown()}.
1:7e21093:      */
1:7e21093:     protected void setUp() throws SQLException {
1:7e21093:         setAutoCommit(false);
1:7e21093:     }
1:7e21093: 
1:7e21093:     /**
1:7e21093:      * Enable collection of runtime statistics in the current connection.
1:7e21093:      * @param s the statement to use for enabling runtime statistics
1:7e21093:      */
1:7e21093:     private void enableRuntimeStatistics(Statement s) throws SQLException {
1:7e21093:         s.execute("call syscs_util.syscs_set_runtimestatistics(1)");
1:7e21093:     }
1:7e21093: 
1:7e21093:     /**
1:7e21093:      * Check that a query returns the expected rows and whether or not it was
1:7e21093:      * flattened to an exists join (or not exists join). An error is raised if
1:7e21093:      * wrong results are returned or if the query plan is not the expected one.
1:7e21093:      *
1:7e21093:      * @param s the statement on which the query is executed
1:7e21093:      * @param sql the query text
1:7e21093:      * @param rows the expected result
1:7e21093:      * @param flattenable whether or not we expect the query to be flattened
1:7e21093:      * to a (not) exists join
1:7e21093:      * @throws SQLException if a database error occurs
1:7e21093:      * @throws junit.framework.AssertionFailedError if the wrong results are
1:7e21093:      * returned from the query, or if the query plan is not as expected
1:7e21093:      */
1:7e21093:     private void checkExistsJoin(Statement s, String sql, String[][] rows,
1:7e21093:                                  boolean flattenable)
1:7e21093:             throws SQLException
1:7e21093:     {
1:7e21093:         JDBC.assertFullResultSet(s.executeQuery(sql), rows);
1:7e21093:         RuntimeStatisticsParser parser =
1:7e21093:                 SQLUtilities.getRuntimeStatisticsParser(s);
1:7e21093:         assertEquals("unexpected plan", flattenable, parser.usedExistsJoin());
1:7e21093:     }
1:7e21093: 
1:7e21093:     /**
1:7e21093:      * DERBY-4001: Test that certain NOT EXISTS/NOT IN/ALL subqueries are
1:7e21093:      * flattened, and that their predicates are not pulled out. Their
1:7e21093:      * predicates are known to be always false, so when they are (correctly)
1:7e21093:      * applied on the subquery, they will cause all the rows from the outer
1:7e21093:      * query to be returned. If the predicates are (incorrectly) pulled out to
1:7e21093:      * the outer query, the query won't return any rows at all. DERBY-4001.
1:7e21093:      */
1:7e21093:     public void testNotExistsFlattenablePredicatesNotPulled()
1:7e21093:             throws SQLException
1:7e21093:     {
1:7e21093:         Statement s = createStatement();
1:7e21093:         // X must be NOT NULL, otherwise X NOT IN and X < ALL won't be
1:7e21093:         // rewritten to NOT EXISTS
1:7e21093:         s.execute("create table t (x int not null)");
1:7e21093:         s.execute("insert into t values 1,2,3");
1:7e21093: 
1:7e21093:         enableRuntimeStatistics(s);
1:7e21093: 
1:7e21093:         String[][] allRows = {{"1"}, {"2"}, {"3"}};
1:7e21093: 
1:7e21093:         checkExistsJoin(
1:7e21093:                 s,
1:7e21093:                 "select * from t where not exists (select x from t where 1<>1)",
1:7e21093:                 allRows, true);
1:7e21093: 
1:7e21093:         checkExistsJoin(
1:7e21093:                 s,
1:7e21093:                 "select * from t where x not in (select x from t where 1<>1)",
1:7e21093:                 allRows, true);
1:7e21093: 
1:7e21093:         checkExistsJoin(
1:7e21093:                 s,
1:7e21093:                 "select * from t where x < all (select x from t where 1<>1)",
1:7e21093:                 allRows, true);
1:7e21093:     }
1:7e21093: 
1:7e21093:     /**
1:7e21093:      * DERBY-4001: Test that some ALL subqueries that used to be flattened to
1:7e21093:      * a not exists join and return incorrect results, are not flattened.
1:7e21093:      * These queries should not be flattened because the generated NOT EXISTS
1:7e21093:      * JOIN condition or some of the subquery's predicates could be pushed
1:7e21093:      * down into the left side of the join, which is not allowed in a not
1:7e21093:      * exists join because the predicates have a completely different effect
1:7e21093:      * if they're used on one side of the join than if they're used on the
1:7e21093:      * other side of the join.
1:7e21093:      */
1:7e21093:     public void testAllNotFlattenableToNotExists() throws SQLException {
1:7e21093:         Statement s = createStatement();
1:7e21093:         // X must be NOT NULL, otherwise rewriting ALL to NOT EXISTS won't even
1:7e21093:         // be attempted
1:7e21093:         s.execute("create table t (x int not null)");
1:7e21093:         s.execute("insert into t values 1,2,3");
1:7e21093: 
1:7e21093:         enableRuntimeStatistics(s);
1:7e21093: 
1:7e21093:         String[][] allRows = {{"1"}, {"2"}, {"3"}};
1:7e21093: 
1:7e21093:         // Join condition is X >= 100, which should make the right side of
1:7e21093:         // the not exists join empty and return all rows from the left side.
1:7e21093:         // If (incorrectly) pushed down on the left side, no rows will be
1:7e21093:         // returned.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t where x < all (select 100 from t)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Join condition is 1 >= 100, which should make the right side of
1:7e21093:         // the not exists join empty and return all rows from the left side.
1:7e21093:         // If (incorrectly) pushed down on the left side, no rows will be
1:7e21093:         // returned.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t where 1 < all (select 2 from t)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Join condition is X <> 1, which will remove the only interesting
1:7e21093:         // row from the left side if (incorrectly) pushed down there.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t where x = all (select 1 from t)",
1:7e21093:                 new String[][]{{"1"}}, false);
1:7e21093: 
1:7e21093:         // Join condition is T1.X >= T2.X which cannot be pushed down on the
1:7e21093:         // left side. The predicate in the subquery (T1.X > 100) can be pushed
1:7e21093:         // down on the left side and filter out rows that should not be
1:7e21093:         // filtered out, so check that this query is not flattened.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t t1 where x < all " +
1:7e21093:                 "(select x from t t2 where t1.x > 100)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Same as above, but with an extra, unproblematic predicate added
1:7e21093:         // to the subquery.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t t1 where x < all " +
1:7e21093:                 "(select x from t t2 where t1.x > 100 and t2.x > 100)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Same as above, but since the problematic predicate is ORed with
1:7e21093:         // an unproblematic one, it is not possible to push it down on the
1:7e21093:         // left side (only ANDed predicates can be split and pushed down
1:7e21093:         // separately), so in this case we expect the query to be flattened.
1:7e21093:         // (This query worked correctly also before DERBY-4001 was fixed.)
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t t1 where x < all " +
1:7e21093:                 "(select x from t t2 where t1.x > 100 or t2.x > 100)",
1:7e21093:                 allRows, true);
1:7e21093:     }
1:7e21093: 
1:7e21093:     /**
1:7e21093:      * DERBY-4001: Test that some NOT IN subqueries that used to be flattened
1:7e21093:      * to a not exists join and return incorrect results, are not flattened.
1:7e21093:      * These queries should not be flattened because the generated NOT EXISTS
1:7e21093:      * JOIN condition or some of the subquery's predicates could be pushed
1:7e21093:      * down into the left side of the join, which is not allowed in a not
1:7e21093:      * exists join because the predicates have a completely different effect
1:7e21093:      * if they're used on one side of the join than if they're used on the
1:7e21093:      * other side of the join.
1:7e21093:      */
1:7e21093:     public void testNotInNotFlattenableToNotExists() throws SQLException {
1:7e21093:         Statement s = createStatement();
1:7e21093:         // X must be NOT NULL, otherwise rewriting NOT IN to NOT EXISTS won't
1:7e21093:         // even be attempted
1:7e21093:         s.execute("create table t (x int not null)");
1:7e21093:         s.execute("insert into t values 1,2,3");
1:7e21093: 
1:7e21093:         enableRuntimeStatistics(s);
1:7e21093: 
1:7e21093:         String[][] allRows = {{"1"}, {"2"}, {"3"}};
1:7e21093: 
1:7e21093:         // Join condition is X = 100, which should make the right side of
1:7e21093:         // the not exists join empty and return all rows from the left side.
1:7e21093:         // If (incorrectly) pushed down on the left side, no rows will be
1:7e21093:         // returned.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t where x not in (select 100 from t)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Join condition is 1 = 100, which should make the right side of
1:7e21093:         // the not exists join empty and return all rows from the left side.
1:7e21093:         // If (incorrectly) pushed down on the left side, no rows will be
1:7e21093:         // returned.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t where 1 not in (select 100 from t)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Join condition is X = 2, which will remove the interesting rows
1:7e21093:         // from the left side if (incorrectly) pushed down there.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t where x not in (select 2 from t)",
1:7e21093:                 new String[][]{{"1"}, {"3"}}, false);
1:7e21093: 
1:7e21093:         // Join condition is T1.X = T2.X which cannot be pushed down on the
1:7e21093:         // left side. The predicate in the subquery (T1.X > 100) can be pushed
1:7e21093:         // down on the left side and filter out rows that should not be
1:7e21093:         // filtered out, so check that this query is not flattened.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t t1 where x not in " +
1:7e21093:                 "(select x from t t2 where t1.x > 100)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Same as above, but with an extra, unproblematic predicate added
1:7e21093:         // to the subquery.
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t t1 where x not in " +
1:7e21093:                 "(select x from t t2 where t1.x > 100 and t2.x > 100)",
1:7e21093:                 allRows, false);
1:7e21093: 
1:7e21093:         // Same as above, but since the problematic predicate is ORed with
1:7e21093:         // an unproblematic one, it is not possible to push it down on the
1:7e21093:         // left side (only ANDed predicates can be split and pushed down
1:7e21093:         // separately), so in this case we expect the query to be flattened.
1:7e21093:         // (This query worked correctly also before DERBY-4001 was fixed.)
1:7e21093:         checkExistsJoin(
1:7e21093:                 s, "select * from t t1 where x not in " +
1:7e21093:                 "(select x from t t2 where t1.x > 100 or t2.x > 100)",
1:7e21093:                 allRows, true);
1:7e21093:     }
1:7e21093: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7e21093
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SubqueryFlatteningTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This test verifies that flattening of subqueries works correctly.
1:  *
1:  * The test cases in <tt>subqueryFlattening.sql</tt> could be moved to this
1:  * class when they are converted to JUnit.
1:  */
1: public class SubqueryFlatteningTest extends BaseJDBCTestCase {
1: 
1:     public SubqueryFlatteningTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // We're testing the SQL layer, so we run the test in embedded
1:         // mode only.
1:         return TestConfiguration.embeddedSuite(SubqueryFlatteningTest.class);
1:     }
1: 
1:     /**
1:      * Set up the test environment. Turn off auto-commit so that all the test
1:      * data can easily be removed by the rollback performed in
1:      * {@code BaseJDBCTestCase.tearDown()}.
1:      */
1:     protected void setUp() throws SQLException {
1:         setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Enable collection of runtime statistics in the current connection.
1:      * @param s the statement to use for enabling runtime statistics
1:      */
1:     private void enableRuntimeStatistics(Statement s) throws SQLException {
1:         s.execute("call syscs_util.syscs_set_runtimestatistics(1)");
1:     }
1: 
1:     /**
1:      * Check that a query returns the expected rows and whether or not it was
1:      * flattened to an exists join (or not exists join). An error is raised if
1:      * wrong results are returned or if the query plan is not the expected one.
1:      *
1:      * @param s the statement on which the query is executed
1:      * @param sql the query text
1:      * @param rows the expected result
1:      * @param flattenable whether or not we expect the query to be flattened
1:      * to a (not) exists join
1:      * @throws SQLException if a database error occurs
1:      * @throws junit.framework.AssertionFailedError if the wrong results are
1:      * returned from the query, or if the query plan is not as expected
1:      */
1:     private void checkExistsJoin(Statement s, String sql, String[][] rows,
1:                                  boolean flattenable)
1:             throws SQLException
1:     {
1:         JDBC.assertFullResultSet(s.executeQuery(sql), rows);
1:         RuntimeStatisticsParser parser =
1:                 SQLUtilities.getRuntimeStatisticsParser(s);
1:         assertEquals("unexpected plan", flattenable, parser.usedExistsJoin());
1:     }
1: 
1:     /**
1:      * DERBY-4001: Test that certain NOT EXISTS/NOT IN/ALL subqueries are
1:      * flattened, and that their predicates are not pulled out. Their
1:      * predicates are known to be always false, so when they are (correctly)
1:      * applied on the subquery, they will cause all the rows from the outer
1:      * query to be returned. If the predicates are (incorrectly) pulled out to
1:      * the outer query, the query won't return any rows at all. DERBY-4001.
1:      */
1:     public void testNotExistsFlattenablePredicatesNotPulled()
1:             throws SQLException
1:     {
1:         Statement s = createStatement();
1:         // X must be NOT NULL, otherwise X NOT IN and X < ALL won't be
1:         // rewritten to NOT EXISTS
1:         s.execute("create table t (x int not null)");
1:         s.execute("insert into t values 1,2,3");
1: 
1:         enableRuntimeStatistics(s);
1: 
1:         String[][] allRows = {{"1"}, {"2"}, {"3"}};
1: 
1:         checkExistsJoin(
1:                 s,
1:                 "select * from t where not exists (select x from t where 1<>1)",
1:                 allRows, true);
1: 
1:         checkExistsJoin(
1:                 s,
1:                 "select * from t where x not in (select x from t where 1<>1)",
1:                 allRows, true);
1: 
1:         checkExistsJoin(
1:                 s,
1:                 "select * from t where x < all (select x from t where 1<>1)",
1:                 allRows, true);
1:     }
1: 
1:     /**
1:      * DERBY-4001: Test that some ALL subqueries that used to be flattened to
1:      * a not exists join and return incorrect results, are not flattened.
1:      * These queries should not be flattened because the generated NOT EXISTS
1:      * JOIN condition or some of the subquery's predicates could be pushed
1:      * down into the left side of the join, which is not allowed in a not
1:      * exists join because the predicates have a completely different effect
1:      * if they're used on one side of the join than if they're used on the
1:      * other side of the join.
1:      */
1:     public void testAllNotFlattenableToNotExists() throws SQLException {
1:         Statement s = createStatement();
1:         // X must be NOT NULL, otherwise rewriting ALL to NOT EXISTS won't even
1:         // be attempted
1:         s.execute("create table t (x int not null)");
1:         s.execute("insert into t values 1,2,3");
1: 
1:         enableRuntimeStatistics(s);
1: 
1:         String[][] allRows = {{"1"}, {"2"}, {"3"}};
1: 
1:         // Join condition is X >= 100, which should make the right side of
1:         // the not exists join empty and return all rows from the left side.
1:         // If (incorrectly) pushed down on the left side, no rows will be
1:         // returned.
1:         checkExistsJoin(
1:                 s, "select * from t where x < all (select 100 from t)",
1:                 allRows, false);
1: 
1:         // Join condition is 1 >= 100, which should make the right side of
1:         // the not exists join empty and return all rows from the left side.
1:         // If (incorrectly) pushed down on the left side, no rows will be
1:         // returned.
1:         checkExistsJoin(
1:                 s, "select * from t where 1 < all (select 2 from t)",
1:                 allRows, false);
1: 
1:         // Join condition is X <> 1, which will remove the only interesting
1:         // row from the left side if (incorrectly) pushed down there.
1:         checkExistsJoin(
1:                 s, "select * from t where x = all (select 1 from t)",
1:                 new String[][]{{"1"}}, false);
1: 
1:         // Join condition is T1.X >= T2.X which cannot be pushed down on the
1:         // left side. The predicate in the subquery (T1.X > 100) can be pushed
1:         // down on the left side and filter out rows that should not be
1:         // filtered out, so check that this query is not flattened.
1:         checkExistsJoin(
1:                 s, "select * from t t1 where x < all " +
1:                 "(select x from t t2 where t1.x > 100)",
1:                 allRows, false);
1: 
1:         // Same as above, but with an extra, unproblematic predicate added
1:         // to the subquery.
1:         checkExistsJoin(
1:                 s, "select * from t t1 where x < all " +
1:                 "(select x from t t2 where t1.x > 100 and t2.x > 100)",
1:                 allRows, false);
1: 
1:         // Same as above, but since the problematic predicate is ORed with
1:         // an unproblematic one, it is not possible to push it down on the
1:         // left side (only ANDed predicates can be split and pushed down
1:         // separately), so in this case we expect the query to be flattened.
1:         // (This query worked correctly also before DERBY-4001 was fixed.)
1:         checkExistsJoin(
1:                 s, "select * from t t1 where x < all " +
1:                 "(select x from t t2 where t1.x > 100 or t2.x > 100)",
1:                 allRows, true);
1:     }
1: 
1:     /**
1:      * DERBY-4001: Test that some NOT IN subqueries that used to be flattened
1:      * to a not exists join and return incorrect results, are not flattened.
1:      * These queries should not be flattened because the generated NOT EXISTS
1:      * JOIN condition or some of the subquery's predicates could be pushed
1:      * down into the left side of the join, which is not allowed in a not
1:      * exists join because the predicates have a completely different effect
1:      * if they're used on one side of the join than if they're used on the
1:      * other side of the join.
1:      */
1:     public void testNotInNotFlattenableToNotExists() throws SQLException {
1:         Statement s = createStatement();
1:         // X must be NOT NULL, otherwise rewriting NOT IN to NOT EXISTS won't
1:         // even be attempted
1:         s.execute("create table t (x int not null)");
1:         s.execute("insert into t values 1,2,3");
1: 
1:         enableRuntimeStatistics(s);
1: 
1:         String[][] allRows = {{"1"}, {"2"}, {"3"}};
1: 
1:         // Join condition is X = 100, which should make the right side of
1:         // the not exists join empty and return all rows from the left side.
1:         // If (incorrectly) pushed down on the left side, no rows will be
1:         // returned.
1:         checkExistsJoin(
1:                 s, "select * from t where x not in (select 100 from t)",
1:                 allRows, false);
1: 
1:         // Join condition is 1 = 100, which should make the right side of
1:         // the not exists join empty and return all rows from the left side.
1:         // If (incorrectly) pushed down on the left side, no rows will be
1:         // returned.
1:         checkExistsJoin(
1:                 s, "select * from t where 1 not in (select 100 from t)",
1:                 allRows, false);
1: 
1:         // Join condition is X = 2, which will remove the interesting rows
1:         // from the left side if (incorrectly) pushed down there.
1:         checkExistsJoin(
1:                 s, "select * from t where x not in (select 2 from t)",
1:                 new String[][]{{"1"}, {"3"}}, false);
1: 
1:         // Join condition is T1.X = T2.X which cannot be pushed down on the
1:         // left side. The predicate in the subquery (T1.X > 100) can be pushed
1:         // down on the left side and filter out rows that should not be
1:         // filtered out, so check that this query is not flattened.
1:         checkExistsJoin(
1:                 s, "select * from t t1 where x not in " +
1:                 "(select x from t t2 where t1.x > 100)",
1:                 allRows, false);
1: 
1:         // Same as above, but with an extra, unproblematic predicate added
1:         // to the subquery.
1:         checkExistsJoin(
1:                 s, "select * from t t1 where x not in " +
1:                 "(select x from t t2 where t1.x > 100 and t2.x > 100)",
1:                 allRows, false);
1: 
1:         // Same as above, but since the problematic predicate is ORed with
1:         // an unproblematic one, it is not possible to push it down on the
1:         // left side (only ANDed predicates can be split and pushed down
1:         // separately), so in this case we expect the query to be flattened.
1:         // (This query worked correctly also before DERBY-4001 was fixed.)
1:         checkExistsJoin(
1:                 s, "select * from t t1 where x not in " +
1:                 "(select x from t t2 where t1.x > 100 or t2.x > 100)",
1:                 allRows, true);
1:     }
1: }
============================================================================