1:099e28f: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.StringDataValue
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
12:eac0369: 
1:96a630c:  */
1:cf0fdc4: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:638f1b4: import java.sql.Clob;
1:638f1b4: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:0cab10f: import java.text.RuleBasedCollator;
1:cf0fdc4: import org.apache.derby.iapi.jdbc.CharacterStreamDescriptor;
1:0cab10f: 
1:eac0369: public interface StringDataValue extends ConcatableDataValue
1:eac0369: {
1:eac0369: 	// TRIM() types
1:eac0369: 	public static final int BOTH		= 0;
1:eac0369: 	public static final int TRAILING	= 1;
1:eac0369: 	public static final int LEADING		= 2;
1:eac0369: 
1:cf0fdc4: 	/**
1:96a630c: 	  For a character string type, the collation derivation should always be 
1:96a630c: 	  "explicit"(not possible in Derby 10.3), "implicit" or "none". We will 
1:f19b703: 	  start by setting it to "implicit" in TypeDescriptorImpl. At runtime, only 
1:96a630c: 	  character string types which are results of aggregate methods dealing 
1:96a630c: 	  with operands with different collation types should have a collation 
1:96a630c: 	  derivation of "none". All the other character string types should have 
1:96a630c: 	  their collation derivation set to "implicit". 
1:92268ac: 	 */
1:c9e90d7: 	public	static final int COLLATION_DERIVATION_NONE = 0;
1:96a630c: 	/** @see StringDataValue#COLLATION_DERIVATION_NONE */
1:c9e90d7: 	public	static final int COLLATION_DERIVATION_IMPLICIT = 1;
1:96a630c: 	/** @see StringDataValue#COLLATION_DERIVATION_NONE */
1:c9e90d7: 	public	static final int COLLATION_DERIVATION_EXPLICIT = 2;
1:0cab10f: 	/**
1:96a630c: 	 * In Derby 10.3, it is possible to have database with one of the following
1:96a630c: 	 * two configurations
1:96a630c: 	 * 1)all the character columns will have a collation type of UCS_BASIC. 
1:96a630c: 	 * This is same as what we do in Derby 10.2 release. 
1:96a630c: 	 * 2)all the character string columns belonging to system tables will have 
1:96a630c: 	 * collation type of UCS_BASIC but all the character string columns 
1:96a630c: 	 * belonging to user tables will have collation type of TERRITORY_BASED.
1:7af6726: 	 * 
1:f19b703: 	 * Data types will start with collation type defaulting to UCS_BASIC in
1:5212101: 	 * TypeDescriptorImpl. This collation type of course makes sense for
1:f19b703: 	 * character string types only. It will be ignored for the rest of the
1:ec2b8d1: 	 * types. If a character's collation type should be TERRITORY_BASED, then
1:f19b703: 	 * DTD.setCollationType can be called to change the default of UCS_BASIC.
1:5212101: 	 *
1:5212101: 	 * The collation types TERRITORY_BASED:PRIMARY through TERRITORY_BASED:IDENTICAL
1:5212101: 	 * are variants of the TERRITORY_BASED type, with explicit collation strength.
1:96a630c: 	 */
1:c9e90d7: 	public	static final int COLLATION_TYPE_UCS_BASIC = 0;
1:96a630c: 	/** @see StringDataValue#COLLATION_TYPE_UCS_BASIC */
1:c9e90d7: 	public	static final int COLLATION_TYPE_TERRITORY_BASED = 1;
1:5212101: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_PRIMARY = 2;
1:5212101: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_SECONDARY = 3;
1:5212101: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_TERTIARY = 4;
1:5212101: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_IDENTICAL = 5;
1:92268ac: 
1:96a630c: 	/**
1:eac0369: 	 * The SQL concatenation '||' operator.
1:f19b703: 	 *
1:eac0369: 	 * @param leftOperand	String on the left hand side of '||'
1:eac0369: 	 * @param rightOperand	String on the right hand side of '||'
2:eac0369: 	 * @param result	The result of a previous call to this method,
2:eac0369: 	 *					null if not called yet.
28:eac0369: 	 *
1:eac0369: 	 * @return	A ConcatableDataValue containing the result of the '||'
1:eac0369: 	 *
9:eac0369: 	 * @exception StandardException		Thrown on error
1:099e28f: 	 */
1:eac0369: 	public StringDataValue concatenate(
1:eac0369: 				StringDataValue leftOperand,
1:eac0369: 				StringDataValue rightOperand,
2:eac0369: 				StringDataValue result)
1:099e28f: 		throws StandardException;
1:638f1b4: 
1:96a630c: 	/**
1:eac0369: 	 * The SQL like() function with out escape clause.
1:099e28f: 	 *
1:eac0369: 	 * @param pattern	the pattern to use
1:099e28f: 	 *
1:eac0369: 	 * @return	A BooleanDataValue containing the result of the like
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
12:eac0369: 	 */
1:eac0369: 	public BooleanDataValue like(DataValueDescriptor pattern)
4:eac0369: 							throws StandardException;
1:96a630c: 
1:fb3b060: 	/**
1:eac0369: 	 * The SQL like() function WITH escape clause.
1:eac0369: 	 *
1:eac0369: 	 * @param pattern	the pattern to use
1:eac0369: 	 * @param escape	the escape character
1:eac0369: 	 *
1:eac0369: 	 * @return	A BooleanDataValue containing the result of the like
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public BooleanDataValue like(DataValueDescriptor pattern,
1:eac0369: 									DataValueDescriptor escape)
1:eac0369: 							throws StandardException;
1:ec2b8d1: 
1:099e28f: 
11:eac0369: 	/**
1:fb3b060: 	 * The SQL Ansi trim function.
1:fb3b060: 
1:fb3b060: 	 * @param trimType type of trim. Possible values are {@link #LEADING}, {@link #TRAILING}
1:fb3b060: 	 *        or {@link #BOTH}.
1:fb3b060: 	 * @param trimChar  The character to trim from <em>this</em>
1:fb3b060: 	 * @param result The result of a previous call to this method,
1:fb3b060: 	 *					null if not called yet.
1:fb3b060: 	 * @return A StringDataValue containing the result of the trim().
1:fb3b060: 	 * @throws StandardException
1:fb3b060: 	 */
1:fb3b060: 	public StringDataValue ansiTrim(
1:fb3b060: 			int trimType,
1:fb3b060: 			StringDataValue trimChar,
1:fb3b060: 			StringDataValue result)
1:fb3b060: 		throws StandardException;
1:fb3b060: 
1:eac0369: 	/** 
1:eac0369: 	 * Convert the string to upper case.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result (reusable - allocate if null).
1:eac0369: 	 * 
1:eac0369: 	 * @return	The string converted to upper case.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public StringDataValue upper(StringDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * Convert the string to lower case.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result (reusable - allocate if null).
1:eac0369: 	 * 
1:eac0369: 	 * @return	The string converted to lower case.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public StringDataValue lower(StringDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Position in searchFrom of the first occurrence of this.value.
1:eac0369:      * The search begins from position start.  0 is returned if searchFrom does
1:eac0369:      * not contain this.value.  Position 1 is the first character in searchFrom.
1:eac0369:      *
1:eac0369:      * @param searchFrom    - The string to search from
1:eac0369:      * @param start         - The position to search from in string searchFrom
1:eac0369:      * @param result        - The object to return
1:eac0369:      *
1:eac0369:      * @return  The position in searchFrom the fist occurrence of this.value.
1:eac0369:      *              0 is returned if searchFrom does not contain this.value.
1:eac0369:      * @exception StandardException     Thrown on error
1:eac0369:      */
1:eac0369:     public NumberDataValue locate(  StringDataValue searchFrom, 
1:eac0369:                                     NumberDataValue start,
1:eac0369:                                     NumberDataValue result)
1:eac0369:                                     throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a char array.  Typically, this is a simple
1:eac0369: 	 * getter that is cheaper than getString() because
1:eac0369: 	 * we always need to create a char array when
1:eac0369: 	 * doing I/O.  Use this instead of getString() where
1:eac0369: 	 * reasonable.
1:eac0369: 	 * <p>
1:eac0369: 	 * <b>WARNING</b>: may return a character array that has spare
1:eac0369: 	 * characters at the end.  MUST be used in conjunction
1:eac0369: 	 * with getLength() to be safe.
1:eac0369: 	 * 
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public char[] getCharArray() throws StandardException;
1:92268ac: 
1:92268ac: 	/**
1:0cab10f: 	 * Gets either SQLChar/SQLVarchar/SQLLongvarchar/SQLClob(base classes) or 
1:0cab10f: 	 * CollatorSQLChar/CollatorSQLVarchar/CollatorSQLLongvarch/CollatorSQLClob
1:0cab10f: 	 * (subclasses). Whether this method returns the base class or the subclass 
1:0cab10f: 	 * depends on the value of the RuleBasedCollator. If RuleBasedCollator is 
1:0cab10f: 	 * null, then the object returned would be baseclass otherwise it would be 
1:0cab10f: 	 * subcalss.
1:0cab10f: 	 */
1:0cab10f: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison);
1:7af6726: 
1:7af6726:     /**
1:6f4c92a:      * Returns the stream header generator for the string data value.
1:6f4c92a:      * <p>
1:6f4c92a:      * The generator writes the correct header into the destination buffer or
1:6f4c92a:      * stream and also keeps track of whether appending an end-of-stream marker
1:6f4c92a:      * is required or not.
1:6f4c92a:      * <p>
1:6f4c92a:      * Note that the generator may fail to generate a header if there is no
1:6f4c92a:      * context at the time the header is asked for, and the mode hasn't been
1:6f4c92a:      * set explicitly.
1:d92fa8c:      * @see #setStreamHeaderFormat
1:7af6726:      */
1:6f4c92a:     public StreamHeaderGenerator getStreamHeaderGenerator();
1:6f4c92a: 
1:6f4c92a:     /**
1:d92fa8c:      * Tells the data value descriptor which CLOB stream header format to use.
1:6f4c92a:      *
1:d92fa8c:      * @param usePreTenFiveHdrFormat {@code true} if the database accessed is
1:d92fa8c:      *      prior to version 10.5, {@code false} if the version is 10.5 or
1:d92fa8c:      *      newer, and {@code null} if unknown at this time
1:6f4c92a:      */
1:d92fa8c:     public void setStreamHeaderFormat(Boolean usePreTenFiveHdrFormat);
1:099e28f: 
1:eac0369:     /**
1:cf0fdc4:      * Returns a descriptor for the input stream for this data value.
1:cf0fdc4:      * <p>
1:cf0fdc4:      * The descriptor contains information about header data, current positions,
1:cf0fdc4:      * length, whether the stream should be buffered or not, and if the stream
1:cf0fdc4:      * is capable of repositioning itself.
1:cf0fdc4:      *
1:cf0fdc4:      * @return A descriptor for the stream, which includes a reference to the
1:541361f:      *      stream itself.
1:541361f:      * @throws StandardException if obtaining the descriptor fails, or if the
1:541361f:      *      value isn't represented as a stream.
1:cf0fdc4:      */
1:cf0fdc4:     public CharacterStreamDescriptor getStreamWithDescriptor()
1:cf0fdc4:             throws StandardException;
1:638f1b4: 
1:eac0369: 
1:638f1b4: 	/**
1:638f1b4: 	 * Stuff a StringDataValue with a Clob.
1:638f1b4: 	 */
1:638f1b4: 	public void setValue( Clob value )
1:638f1b4: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Gets the enclosed character array and zeroes it. Used for covering
0:      * our tracks as we ship a password across the system. We want the
0:      * passwords to be smudged out as soon as possible so that they
0:      * can't be memory-sniffed.
1:      */
0:     public  char[]  getRawDataAndZeroIt() throws StandardException;
1:     
1: 
commit:638f1b4
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Clob;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	/**
1: 	 * Stuff a StringDataValue with a Clob.
1: 	 */
1: 	public void setValue( Clob value )
1: 		throws StandardException;
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5212101
/////////////////////////////////////////////////////////////////////////
1: 	 * TypeDescriptorImpl. This collation type of course makes sense for
1: 	 *
1: 	 * The collation types TERRITORY_BASED:PRIMARY through TERRITORY_BASED:IDENTICAL
1: 	 * are variants of the TERRITORY_BASED type, with explicit collation strength.
1: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_PRIMARY = 2;
1: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_SECONDARY = 3;
1: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_TERTIARY = 4;
1: 	public	static final int COLLATION_TYPE_TERRITORY_BASED_IDENTICAL = 5;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:541361f
/////////////////////////////////////////////////////////////////////////
1:      *      stream itself.
1:      * @throws StandardException if obtaining the descriptor fails, or if the
1:      *      value isn't represented as a stream.
commit:d92fa8c
/////////////////////////////////////////////////////////////////////////
1:      * @see #setStreamHeaderFormat
1:      * Tells the data value descriptor which CLOB stream header format to use.
1:      * @param usePreTenFiveHdrFormat {@code true} if the database accessed is
1:      *      prior to version 10.5, {@code false} if the version is 10.5 or
1:      *      newer, and {@code null} if unknown at this time
1:     public void setStreamHeaderFormat(Boolean usePreTenFiveHdrFormat);
commit:6f4c92a
/////////////////////////////////////////////////////////////////////////
1:      * Returns the stream header generator for the string data value.
1:      * <p>
1:      * The generator writes the correct header into the destination buffer or
1:      * stream and also keeps track of whether appending an end-of-stream marker
1:      * is required or not.
1:      * <p>
1:      * Note that the generator may fail to generate a header if there is no
1:      * context at the time the header is asked for, and the mode hasn't been
1:      * set explicitly.
0:      * @see #setSoftUpgradeMode
1:     public StreamHeaderGenerator getStreamHeaderGenerator();
1: 
1:     /**
0:      * Tells the data value descriptor whether the database is being accessed
0:      * in soft upgrade mode or not.
1:      *
0:      * @param inSoftUpgradeMode {@code true} if the database is being accessed
0:      *      in soft upgrade mode, {@code false} if not, and {@code null} if
0:      *      unknown
1:      */
0:     public void setSoftUpgradeMode(Boolean inSoftUpgradeMode);
commit:cf0fdc4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.jdbc.CharacterStreamDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a descriptor for the input stream for this data value.
1:      * <p>
1:      * The descriptor contains information about header data, current positions,
1:      * length, whether the stream should be buffered or not, and if the stream
1:      * is capable of repositioning itself.
1:      *
1:      * @return A descriptor for the stream, which includes a reference to the
0:      *      stream itself, or {@code null} if the value cannot be represented
0:      *      as a stream.
0:      * @throws StandardException if obtaining the descriptor fails
1:      */
1:     public CharacterStreamDescriptor getStreamWithDescriptor()
1:             throws StandardException;
commit:7af6726
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Generates the stream header for a stream with the given character length.
1:      *
0:      * @param charLength the character length of the stream, or {@code -1} if
0:      *      unknown. If unknown, it is expected that an end-of-stream byte
0:      *      sequence is appended to the stream.
0:      * @return A holder object with the stream header. A holder object is used
0:      *      because more information than the raw header itself is required,
0:      *      for instance whether the stream should be ended with a Derby-
0:      *      specific end-of-stream marker.
1:      */
0:     public StreamHeaderHolder generateStreamHeader(long charLength);
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:fb98ba4
/////////////////////////////////////////////////////////////////////////
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a9dbcce
/////////////////////////////////////////////////////////////////////////
commit:f19b703
/////////////////////////////////////////////////////////////////////////
1: 	  start by setting it to "implicit" in TypeDescriptorImpl. At runtime, only 
/////////////////////////////////////////////////////////////////////////
1: 	 * 
1: 	 * Data types will start with collation type defaulting to UCS_BASIC in
0: 	 * TypeDescriptorImpl. This collation type ofcourse makes sense fpr 
1: 	 * character string types only. It will be ignored for the rest of the
0: 	 * types. If a character's collation type should be TERRIOTRY_BASED, then
1: 	 * DTD.setCollationType can be called to change the default of UCS_BASIC.
commit:c9e90d7
/////////////////////////////////////////////////////////////////////////
1: 	public	static final int COLLATION_DERIVATION_NONE = 0;
1: 	public	static final int COLLATION_DERIVATION_IMPLICIT = 1;
1: 	public	static final int COLLATION_DERIVATION_EXPLICIT = 2;
/////////////////////////////////////////////////////////////////////////
1: 	public	static final int COLLATION_TYPE_UCS_BASIC = 0;
1: 	public	static final int COLLATION_TYPE_TERRITORY_BASED = 1;
commit:0cab10f
/////////////////////////////////////////////////////////////////////////
1: import java.text.RuleBasedCollator;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Gets either SQLChar/SQLVarchar/SQLLongvarchar/SQLClob(base classes) or 
1: 	 * CollatorSQLChar/CollatorSQLVarchar/CollatorSQLLongvarch/CollatorSQLClob
1: 	 * (subclasses). Whether this method returns the base class or the subclass 
1: 	 * depends on the value of the RuleBasedCollator. If RuleBasedCollator is 
1: 	 * null, then the object returned would be baseclass otherwise it would be 
1: 	 * subcalss.
1: 	 */
1: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison);
commit:96a630c
/////////////////////////////////////////////////////////////////////////
1: 	  For a character string type, the collation derivation should always be 
1: 	  "explicit"(not possible in Derby 10.3), "implicit" or "none". We will 
0: 	  start by setting it to "none" in TypeDescriptorImpl. At runtime, only 
1: 	  character string types which are results of aggregate methods dealing 
1: 	  with operands with different collation types should have a collation 
1: 	  derivation of "none". All the other character string types should have 
1: 	  their collation derivation set to "implicit". 
1: 	 */
0: 	public	static	int COLLATION_DERIVATION_NONE = 0;
1: 	/** @see StringDataValue#COLLATION_DERIVATION_NONE */
0: 	public	static	int COLLATION_DERIVATION_IMPLICIT = 1;
1: 	/** @see StringDataValue#COLLATION_DERIVATION_NONE */
0: 	public	static	int COLLATION_DERIVATION_EXPLICIT = 2;
1: 	/**
1: 	 * In Derby 10.3, it is possible to have database with one of the following
1: 	 * two configurations
1: 	 * 1)all the character columns will have a collation type of UCS_BASIC. 
1: 	 * This is same as what we do in Derby 10.2 release. 
1: 	 * 2)all the character string columns belonging to system tables will have 
1: 	 * collation type of UCS_BASIC but all the character string columns 
1: 	 * belonging to user tables will have collation type of TERRITORY_BASED.
1: 	 */
0: 	public	static	int COLLATION_TYPE_UCS_BASIC = 0;
1: 	/** @see StringDataValue#COLLATION_TYPE_UCS_BASIC */
0: 	public	static	int COLLATION_TYPE_TERRITORY_BASED = 1;
1: 
1: 	/**
author:Army
-------------------------------------------------------------------------------
commit:fb3b060
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * The SQL Ansi trim function.
1: 
1: 	 * @param trimType type of trim. Possible values are {@link #LEADING}, {@link #TRAILING}
1: 	 *        or {@link #BOTH}.
1: 	 * @param trimChar  The character to trim from <em>this</em>
1: 	 * @param result The result of a previous call to this method,
1: 	 *					null if not called yet.
1: 	 * @return A StringDataValue containing the result of the trim().
1: 	 * @throws StandardException
1: 	 */
1: 	public StringDataValue ansiTrim(
1: 			int trimType,
1: 			StringDataValue trimChar,
1: 			StringDataValue result)
1: 		throws StandardException;
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ec2b8d1
/////////////////////////////////////////////////////////////////////////
1: 	 * types. If a character's collation type should be TERRITORY_BASED, then
0:     public  static final String COLLATION_TYPE_UCS_BASIC_STRING = 
0:         "USC_BASIC";
0:     public  static final String COLLATION_TYPE_TERRITORY_BASED_STRING = 
0:         "TERRITORY_BASED";
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:6e7bbc8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
1: 
1:     /*
0:      * Get an XML value from a string.
1:      *
0:      * NOTE: The XMLParse operator is defined here since it
0:      * is called with a _String_ operand, not with an XML
0:      * operand.  That said, though, the bulk of the work is
0:      * is done by a corresponding method that is defined
0:      * on the XMLDataValue interface (implementations
0:      * of this method should just call the XMLDataValue
0:      * method, passing in the correct String data).
1:      *
0:      * @param result The result (reusable - allocate if null).
0:      * @return An XML value corresponding to the string, if
0:      *  the string is valid XML.
0:      * @exception StandardException Thrown on error
1:      */
0:     public XMLDataValue XMLParse(XMLDataValue result, boolean preserveWS)
1:         throws StandardException;
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.StringDataValue
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public interface StringDataValue extends ConcatableDataValue
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	// TRIM() types
1: 	public static final int BOTH		= 0;
1: 	public static final int TRAILING	= 1;
1: 	public static final int LEADING		= 2;
1: 
1: 	/**
1: 	 * The SQL concatenation '||' operator.
1: 	 *
1: 	 * @param leftOperand	String on the left hand side of '||'
1: 	 * @param rightOperand	String on the right hand side of '||'
1: 	 * @param result	The result of a previous call to this method,
1: 	 *					null if not called yet.
1: 	 *
1: 	 * @return	A ConcatableDataValue containing the result of the '||'
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public StringDataValue concatenate(
1: 				StringDataValue leftOperand,
1: 				StringDataValue rightOperand,
1: 				StringDataValue result)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * The SQL like() function with out escape clause.
1: 	 *
1: 	 * @param pattern	the pattern to use
1: 	 *
1: 	 * @return	A BooleanDataValue containing the result of the like
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public BooleanDataValue like(DataValueDescriptor pattern)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * The SQL like() function WITH escape clause.
1: 	 *
1: 	 * @param pattern	the pattern to use
1: 	 * @param escape	the escape character
1: 	 *
1: 	 * @return	A BooleanDataValue containing the result of the like
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public BooleanDataValue like(DataValueDescriptor pattern,
1: 									DataValueDescriptor escape)
1: 							throws StandardException;
1: 
1: 	/**
0: 	 * The SQL trim(), ltrim() and rtrim() functions.
1: 	 *
0: 	 * @param trimType	Type of trim
1: 	 * @param result	The result of a previous call to this method,
1: 	 *					null if not called yet.
1: 	 *
0: 	 * @return	A StringDataValue containing the result of the trim()
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public StringDataValue trim(
0: 				int trimType,
1: 				StringDataValue result)
1: 		throws StandardException;
1: 
1: 	/** 
1: 	 * Convert the string to upper case.
1: 	 *
1: 	 * @param result	The result (reusable - allocate if null).
1: 	 * 
1: 	 * @return	The string converted to upper case.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public StringDataValue upper(StringDataValue result)
1: 							throws StandardException;
1: 
1: 	/** 
1: 	 * Convert the string to lower case.
1: 	 *
1: 	 * @param result	The result (reusable - allocate if null).
1: 	 * 
1: 	 * @return	The string converted to lower case.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public StringDataValue lower(StringDataValue result)
1: 							throws StandardException;
1: 
1:     /**
1:      * Position in searchFrom of the first occurrence of this.value.
1:      * The search begins from position start.  0 is returned if searchFrom does
1:      * not contain this.value.  Position 1 is the first character in searchFrom.
1:      *
1:      * @param searchFrom    - The string to search from
1:      * @param start         - The position to search from in string searchFrom
1:      * @param result        - The object to return
1:      *
1:      * @return  The position in searchFrom the fist occurrence of this.value.
1:      *              0 is returned if searchFrom does not contain this.value.
1:      * @exception StandardException     Thrown on error
1:      */
1:     public NumberDataValue locate(  StringDataValue searchFrom, 
1:                                     NumberDataValue start,
1:                                     NumberDataValue result)
1:                                     throws StandardException;
1: 
1: 	/**
0: 	 * Set the value.
1: 	 *
0: 	 * @param theValue	Contains the boolean value to set this to
1: 	 *
0: 	 * @return	This value
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Boolean theValue)
1: 					throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this StringDataValue to the given int value
1: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
1: 	 *
0: 	 * @return	This StringDataValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Integer theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this StringDataValue to the given double value
1: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
1: 	 *
0: 	 * @return	This StringDataValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Double theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this StringDataValue to the given float value
1: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
1: 	 *
0: 	 * @return	This StringDataValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Float theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this StringDataValue to the given short value
1: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
1: 	 *
0: 	 * @return	This StringDataValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Short theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this StringDataValue to the given long value
1: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
1: 	 *
0: 	 * @return	This StringDataValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Long theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this StringDataValue to the given Byte value
1: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
1: 	 *
0: 	 * @return	This StringDataValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Byte theValue) throws StandardException;
1: 
1: 	/**
1: 	 * Get a char array.  Typically, this is a simple
1: 	 * getter that is cheaper than getString() because
1: 	 * we always need to create a char array when
1: 	 * doing I/O.  Use this instead of getString() where
1: 	 * reasonable.
1: 	 * <p>
1: 	 * <b>WARNING</b>: may return a character array that has spare
1: 	 * characters at the end.  MUST be used in conjunction
1: 	 * with getLength() to be safe.
1: 	 * 
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public char[] getCharArray() throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: public interface StringDataValue extends ConcatableDataValue
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	// TRIM() types
0: 	public static final int BOTH		= 0;
0: 	public static final int TRAILING	= 1;
0: 	public static final int LEADING		= 2;
0: 
0: 	/**
0: 	 * The SQL concatenation '||' operator.
0: 	 *
0: 	 * @param leftOperand	String on the left hand side of '||'
0: 	 * @param rightOperand	String on the right hand side of '||'
0: 	 * @param result	The result of a previous call to this method,
0: 	 *					null if not called yet.
0: 	 *
0: 	 * @return	A ConcatableDataValue containing the result of the '||'
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public StringDataValue concatenate(
0: 				StringDataValue leftOperand,
0: 				StringDataValue rightOperand,
0: 				StringDataValue result)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * The SQL like() function with out escape clause.
0: 	 *
0: 	 * @param pattern	the pattern to use
0: 	 *
0: 	 * @return	A BooleanDataValue containing the result of the like
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public BooleanDataValue like(DataValueDescriptor pattern)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL like() function WITH escape clause.
0: 	 *
0: 	 * @param pattern	the pattern to use
0: 	 * @param escape	the escape character
0: 	 *
0: 	 * @return	A BooleanDataValue containing the result of the like
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public BooleanDataValue like(DataValueDescriptor pattern,
0: 									DataValueDescriptor escape)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL trim(), ltrim() and rtrim() functions.
0: 	 *
0: 	 * @param trimType	Type of trim
0: 	 * @param result	The result of a previous call to this method,
0: 	 *					null if not called yet.
0: 	 *
0: 	 * @return	A StringDataValue containing the result of the trim()
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public StringDataValue trim(
0: 				int trimType,
0: 				StringDataValue result)
0: 		throws StandardException;
0: 
0: 	/** 
0: 	 * Convert the string to upper case.
0: 	 *
0: 	 * @param result	The result (reusable - allocate if null).
0: 	 * 
0: 	 * @return	The string converted to upper case.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public StringDataValue upper(StringDataValue result)
0: 							throws StandardException;
0: 
0: 	/** 
0: 	 * Convert the string to lower case.
0: 	 *
0: 	 * @param result	The result (reusable - allocate if null).
0: 	 * 
0: 	 * @return	The string converted to lower case.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public StringDataValue lower(StringDataValue result)
0: 							throws StandardException;
0: 
0:     /**
0:      * Position in searchFrom of the first occurrence of this.value.
0:      * The search begins from position start.  0 is returned if searchFrom does
0:      * not contain this.value.  Position 1 is the first character in searchFrom.
0:      *
0:      * @param searchFrom    - The string to search from
0:      * @param start         - The position to search from in string searchFrom
0:      * @param result        - The object to return
0:      *
0:      * @return  The position in searchFrom the fist occurrence of this.value.
0:      *              0 is returned if searchFrom does not contain this.value.
0:      * @exception StandardException     Thrown on error
0:      */
0:     public NumberDataValue locate(  StringDataValue searchFrom, 
0:                                     NumberDataValue start,
0:                                     NumberDataValue result)
0:                                     throws StandardException;
0: 
0: 	/**
0: 	 * Set the value.
0: 	 *
0: 	 * @param theValue	Contains the boolean value to set this to
0: 	 *
0: 	 * @return	This value
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Boolean theValue)
0: 					throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this StringDataValue to the given int value
0: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
0: 	 *
0: 	 * @return	This StringDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Integer theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this StringDataValue to the given double value
0: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
0: 	 *
0: 	 * @return	This StringDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Double theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this StringDataValue to the given float value
0: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
0: 	 *
0: 	 * @return	This StringDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Float theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this StringDataValue to the given short value
0: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
0: 	 *
0: 	 * @return	This StringDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Short theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this StringDataValue to the given long value
0: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
0: 	 *
0: 	 * @return	This StringDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Long theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this StringDataValue to the given Byte value
0: 	 *
0: 	 * @param theValue	The value to set this StringDataValue to
0: 	 *
0: 	 * @return	This StringDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Byte theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Get a char array.  Typically, this is a simple
0: 	 * getter that is cheaper than getString() because
0: 	 * we always need to create a char array when
0: 	 * doing I/O.  Use this instead of getString() where
0: 	 * reasonable.
0: 	 * <p>
0: 	 * <b>WARNING</b>: may return a character array that has spare
0: 	 * characters at the end.  MUST be used in conjunction
0: 	 * with getLength() to be safe.
0: 	 * 
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public char[] getCharArray() throws StandardException;
0: }
============================================================================