1:3098ab0: /*
2:3098ab0:  *
1:3098ab0:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLMissingClassesTest
1:3098ab0:  *
1:3098ab0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3098ab0:  * contributor license agreements.  See the NOTICE file distributed with
1:3098ab0:  * this work for additional information regarding copyright ownership.
1:3098ab0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3098ab0:  * (the "License"); you may not use this file except in compliance with
1:3098ab0:  * the License.  You may obtain a copy of the License at
1:3098ab0:  *
1:3098ab0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3098ab0:  *
1:3098ab0:  * Unless required by applicable law or agreed to in writing, 
1:3098ab0:  * software distributed under the License is distributed on an 
1:3098ab0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:3098ab0:  * either express or implied. See the License for the specific 
1:3098ab0:  * language governing permissions and limitations under the License.
1:3098ab0:  */
1:3098ab0: package org.apache.derbyTesting.functionTests.tests.lang;
3:3098ab0: 
1:3098ab0: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:1ae02c9: import org.apache.derbyTesting.junit.XML;
1:3098ab0: 
1:3098ab0: /**
1:3098ab0:  * This JUnit test is only run when the test classpath does not
1:3098ab0:  * contain the external classes required for use of the Derby
1:3098ab0:  * XML operators--namely, JAXP and Xalan.  In such a situation
1:3098ab0:  * all we do is try to execute each of the four SQL/XML operators
1:3098ab0:  * supported by Derby.  In all cases the operators should fail
1:3098ab0:  * with an error indicating that the required classes could
1:3098ab0:  * not be found.
1:3098ab0:  */
1:3098ab0: public final class XMLMissingClassesTest extends BaseJDBCTestCase {
1:3098ab0:     
1:3098ab0:     /**
1:3098ab0:      * Statements to run if the required XML classes are missing--need
1:3098ab0:      * to make sure the result is a compile-time error in all cases.
1:3098ab0:      */
1:3098ab0:     private static String [] SQLXML_STMTS = new String []
1:3098ab0:     {
1:3098ab0:         // One statement for each of the SQL/XML operators...
1:3098ab0:         "insert into xt values " +
1:3098ab0:             "(1, xmlparse(document '<hi/>' preserve whitespace))",
1:3098ab0:         "select xmlserialize(x as char(80)) from xt",
1:3098ab0:         "select xmlexists('//*' passing by ref x) from xt",
1:3098ab0:         "select i from xt where " +
1:3098ab0:             "xmlquery('//*' passing by ref x empty on empty) is not null"
1:3098ab0:     };
1:3098ab0: 
1:3098ab0:     /**
1:3098ab0:      * Public constructor required for running test as standalone JUnit.
1:3098ab0:      */
1:3098ab0:     public XMLMissingClassesTest(String name)
1:3098ab0:     {
1:3098ab0:         super(name);
1:3098ab0:     }
1:3098ab0: 
1:3098ab0:     /**
1:3098ab0:      * If the classpath does not have the XML classes that are
1:3098ab0:      * required for using Derby's SQL/XML operators, then try
1:3098ab0:      * try to execute each of the Derby XML operators and
1:3098ab0:      * verify that the result is an error in all cases.
1:3098ab0:      *
1:3098ab0:      * If the classpath *does* have the XML classes required
1:3098ab0:      * for use of Derby SQL/XML operators, then just return
1:3098ab0:      * an empty suite (the operators are tested in a different
1:3098ab0:      * JUnit test--namely XMLTypeAndOpTests.java).
1:3098ab0:      */
1:3098ab0:     public static Test suite()
1:3098ab0:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("XML Missing Classes Suite");
1:5283796:         if (!XML.classpathMeetsXMLReqs())
1:3098ab0:         {
1:3098ab0:             // Run this test in embedded and client modes.
1:3098ab0:             suite.addTest(TestConfiguration.defaultSuite(
1:3098ab0:                 XMLMissingClassesTest.class));
1:3098ab0:         }
1:3098ab0: 
1:3098ab0:         return suite;
1:3098ab0:     }
1:3098ab0: 
1:3098ab0:     /**
1:3098ab0:      * Assumption is that we only run this test if the classpath
1:3098ab0:      * is missing required XML classes.  In that case do a simple
1:3098ab0:      * check to make sure any attempts to use any of the SQL/XML
1:3098ab0:      * operators will fail at compile time with the appropriate
1:3098ab0:      * error.
1:3098ab0:      */
1:3098ab0:     public void testMissingClasses() throws Exception
1:3098ab0:     {
1:3098ab0:         Statement st = createStatement();
1:3098ab0: 
1:3098ab0:         // It's okay to create a column of type XML, so long
1:3098ab0:         // as no operators are involved.
1:3098ab0: 
1:3098ab0:         st.execute("create table xt (i int, x xml)");
1:3098ab0:         st.execute("create table xt1 (i int, x xml default null)");
1:3098ab0: 
1:3098ab0:         // But if the create statement uses an operator, it should
1:3098ab0:         // fail.
1:3098ab0: 
1:3098ab0:         assertCompileError("XML00",
1:3098ab0:             "create table fail1 (i int, x xml check "
1:3098ab0:             + "(xmlexists('//should' passing by ref x)))");
1:3098ab0: 
1:3098ab0:         assertCompileError("XML00",
1:3098ab0:             "create table fail2 (i int, x xml default xmlparse("
1:3098ab0:             + "document '<my>default col</my>' preserve whitespace))");
1:3098ab0: 
1:3098ab0:         // As a sanity check, make sure that XML columns declared
1:3098ab0:         // with invalid values still throw the correct errors--
1:3098ab0:         // and especially, make sure no attempts are made to load
1:3098ab0:         // XML classes.
1:3098ab0: 
1:3098ab0:         assertCompileError("42894",
1:3098ab0:             "create table fail3 (i int, x xml default 'oops')");
1:3098ab0: 
1:3098ab0:         assertCompileError("42894",
1:3098ab0:             "create table fail4 (i int, x xml default 8)");
1:3098ab0: 
1:3098ab0:         assertCompileError("42818",
1:3098ab0:             "create table fail5 (i int, x xml check (x != 0))");
1:3098ab0: 
1:3098ab0:         // Now go through and test each of the operators.  They
1:3098ab0:         // should all fail at compile time.
1:3098ab0: 
1:3098ab0:         for (int i = 0; i < SQLXML_STMTS.length; i++)
1:3098ab0:             assertCompileError("XML00", SQLXML_STMTS[i]);
1:3098ab0: 
1:3098ab0:         // Cleanup.
1:3098ab0: 
1:3098ab0:         st.execute("drop table xt");
1:3098ab0:         st.execute("drop table xt1");
1:3098ab0:         st.close();
1:3098ab0:         st = null;
1:3098ab0:     }
1:3098ab0: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.XML;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("XML Missing Classes Suite");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5283796
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!XML.classpathMeetsXMLReqs())
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:b73c2a3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.XML;
/////////////////////////////////////////////////////////////////////////
0:         if (!XML.classpathHasXalanAndJAXP())
commit:3098ab0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLMissingClassesTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: import java.sql.Statement;
1: 
1: /**
1:  * This JUnit test is only run when the test classpath does not
1:  * contain the external classes required for use of the Derby
1:  * XML operators--namely, JAXP and Xalan.  In such a situation
1:  * all we do is try to execute each of the four SQL/XML operators
1:  * supported by Derby.  In all cases the operators should fail
1:  * with an error indicating that the required classes could
1:  * not be found.
1:  */
1: public final class XMLMissingClassesTest extends BaseJDBCTestCase {
1:     
1:     /**
1:      * Statements to run if the required XML classes are missing--need
1:      * to make sure the result is a compile-time error in all cases.
1:      */
1:     private static String [] SQLXML_STMTS = new String []
1:     {
1:         // One statement for each of the SQL/XML operators...
1:         "insert into xt values " +
1:             "(1, xmlparse(document '<hi/>' preserve whitespace))",
1:         "select xmlserialize(x as char(80)) from xt",
1:         "select xmlexists('//*' passing by ref x) from xt",
1:         "select i from xt where " +
1:             "xmlquery('//*' passing by ref x empty on empty) is not null"
1:     };
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public XMLMissingClassesTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * If the classpath does not have the XML classes that are
1:      * required for using Derby's SQL/XML operators, then try
1:      * try to execute each of the Derby XML operators and
1:      * verify that the result is an error in all cases.
1:      *
1:      * If the classpath *does* have the XML classes required
1:      * for use of Derby SQL/XML operators, then just return
1:      * an empty suite (the operators are tested in a different
1:      * JUnit test--namely XMLTypeAndOpTests.java).
1:      *
0:      * NOTE: We do not want to run this test if it has Xalan
0:      * but the version of Xalan is not the minimum required.
0:      * Attempts to do so can lead to unexpected errors (which
0:      * is why we have a "minimum Xalan version" to begin with;
0:      * see JDBC.checkXalanVersion()).
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("XML Missing Classes Suite");
0:         if (!JDBC.classpathHasXalanAndJAXP())
1:         {
1:             // Run this test in embedded and client modes.
1:             suite.addTest(TestConfiguration.defaultSuite(
1:                 XMLMissingClassesTest.class));
1:         }
1: 
1:         return suite;
1:     }
1: 
1:     /**
1:      * Assumption is that we only run this test if the classpath
1:      * is missing required XML classes.  In that case do a simple
1:      * check to make sure any attempts to use any of the SQL/XML
1:      * operators will fail at compile time with the appropriate
1:      * error.
1:      */
1:     public void testMissingClasses() throws Exception
1:     {
1:         Statement st = createStatement();
1: 
1:         // It's okay to create a column of type XML, so long
1:         // as no operators are involved.
1: 
1:         st.execute("create table xt (i int, x xml)");
1:         st.execute("create table xt1 (i int, x xml default null)");
1: 
1:         // But if the create statement uses an operator, it should
1:         // fail.
1: 
1:         assertCompileError("XML00",
1:             "create table fail1 (i int, x xml check "
1:             + "(xmlexists('//should' passing by ref x)))");
1: 
1:         assertCompileError("XML00",
1:             "create table fail2 (i int, x xml default xmlparse("
1:             + "document '<my>default col</my>' preserve whitespace))");
1: 
1:         // As a sanity check, make sure that XML columns declared
1:         // with invalid values still throw the correct errors--
1:         // and especially, make sure no attempts are made to load
1:         // XML classes.
1: 
1:         assertCompileError("42894",
1:             "create table fail3 (i int, x xml default 'oops')");
1: 
1:         assertCompileError("42894",
1:             "create table fail4 (i int, x xml default 8)");
1: 
1:         assertCompileError("42818",
1:             "create table fail5 (i int, x xml check (x != 0))");
1: 
1:         // Now go through and test each of the operators.  They
1:         // should all fail at compile time.
1: 
1:         for (int i = 0; i < SQLXML_STMTS.length; i++)
1:             assertCompileError("XML00", SQLXML_STMTS[i]);
1: 
1:         // Cleanup.
1: 
1:         st.execute("drop table xt");
1:         st.execute("drop table xt1");
1:         st.close();
1:         st = null;
1:     }
1: }
============================================================================