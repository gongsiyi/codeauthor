1:61aec23: /*
1:a8908bd:  
1:61aec23:    Derby - Class org.apache.derby.client.am.ClobLocatorReader
7:61aec23:  
1:61aec23:    Licensed to the Apache Software Foundation (ASF) under one or more
1:61aec23:    contributor license agreements.  See the NOTICE file distributed with
1:61aec23:    this work for additional information regarding copyright ownership.
1:61aec23:    The ASF licenses this file to You under the Apache License, Version 2.0
1:61aec23:    (the "License"); you may not use this file except in compliance with
1:61aec23:    the License.  You may obtain a copy of the License at
1:61aec23:  
1:61aec23:       http://www.apache.org/licenses/LICENSE-2.0
1:61aec23:  
1:61aec23:    Unless required by applicable law or agreed to in writing, software
1:61aec23:    distributed under the License is distributed on an "AS IS" BASIS,
1:61aec23:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61aec23:    See the License for the specific language governing permissions and
1:61aec23:    limitations under the License.
1:61aec23:  
4:61aec23:  */
1:61aec23: 
1:61aec23: package org.apache.derby.client.am;
1:61aec23: 
1:61aec23: import java.io.IOException;
1:69e3d06: import java.io.Reader;
1:61aec23: 
1:4458855: import org.apache.derby.shared.common.sanity.SanityManager;
1:61aec23: 
4:61aec23: /**
1:61aec23:  * An <code>Reader</code> that will use an locator to fetch the
1:61aec23:  * Clob value from the server.
1:61aec23:  * <p>
1:61aec23:  * This <code>Reader</code> implementation is pretty basic.  No
1:69e3d06:  * buffering of data is done.  Hence, for efficiency #read(char[])
1:61aec23:  * should be used instead of #read().  Marks are not supported, but it
1:61aec23:  * should be pretty simple to extend the implementation to support
1:61aec23:  * this.  A more efficient skip implementation should also be
1:61aec23:  * straight-forward.
1:61aec23:  */
1:0326967: class ClobLocatorReader extends Reader {
1:61aec23:     /**
1:61aec23:      * Connection used to read Clob from server.
1:61aec23:      */
1:69e3d06:     private final ClientConnection connection;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * The Clob to be accessed.
1:61aec23:      */
1:69e3d06:     private final ClientClob clob;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * Current position in the underlying Clob.
1:61aec23:      * Clobs are indexed from 1
1:61aec23:      */
1:a6f48dd:     private long currentPos;
1:61aec23:     
1:61aec23:     /**
1:a6f48dd:      * Position in Clob where to stop reading.
1:d6844ab:      * maxPos starts counting from 1.
1:61aec23:      */
1:d6844ab:     private final long maxPos;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * Stores the information to whether this Reader has been
1:61aec23:      * closed or not. Is set to true if close() has been
1:61aec23:      * called. Is false otherwise.
1:61aec23:      */
1:61aec23:     private boolean isClosed = false;
1:c6ed70e:     
1:c6ed70e:     /**
1:61aec23:      * Create an <code>Reader</code> for reading the
1:61aec23:      * <code>Clob</code> value represented by the given locator based
1:61aec23:      * <code>Clob</code> object.
1:61aec23:      * @param connection connection to be used to read the
1:61aec23:      *        <code>Clob</code> value from the server
1:61aec23:      * @param clob <code>Clob</code> object that contains locator for
1:61aec23:      *        the <code>Clob</code> value on the server.
1:c6ed70e:      */
1:0326967:     ClobLocatorReader(ClientConnection connection, ClientClob clob)
1:a6f48dd:     throws SqlException {
1:219a290:         if (SanityManager.DEBUG) {
1:219a290:             SanityManager.ASSERT(clob.isLocator());
1:219a290:         }
1:c6ed70e:         
1:61aec23:         this.connection = connection;
1:61aec23:         this.clob = clob;
1:a6f48dd:         this.currentPos = 1;
1:c6ed70e:        
1:a8908bd:         //In this case a subset of the Clob has
1:a8908bd:         //not been requested for. We set maxPos 
1:a8908bd:         //to -1 and instead will call 
1:a8908bd:         //clob.sqlLength() each time we want 
1:a8908bd:         //the maximum length.
1:a8908bd:         this.maxPos = -1;
1:c6ed70e:     }
1:c6ed70e:     
1:61aec23:     /**
1:61aec23:      * Create an <code>Reader</code> for reading the
1:61aec23:      * <code>Clob</code> value represented by the given locator based
1:61aec23:      * <code>Clob</code> object.
1:61aec23:      * @param connection connection to be used to read the
1:61aec23:      *        <code>Clob</code> value from the server
1:61aec23:      * @param clob <code>Clob</code> object that contains locator for
1:61aec23:      *        the <code>Clob</code> value on the server.
1:61aec23:      * @param pos The offset to the first character of the partial value to be
1:61aec23:      *            retrieved.
1:61aec23:      * @param len The length in characters of the partial value to be retrieved.
1:c6ed70e:      */
1:0326967:     ClobLocatorReader(ClientConnection connection, ClientClob clob,
1:a6f48dd:             long pos, long len) throws SqlException {
1:d6844ab:         if (SanityManager.DEBUG) {
1:d6844ab:             SanityManager.ASSERT(clob.isLocator());
1:d6844ab:         }
1:d6844ab: 
1:d6844ab:         this.connection = connection;
1:d6844ab:         this.clob = clob;
1:a6f48dd:         this.currentPos = pos;
1:a8908bd:         if(len != -1) {
1:a6f48dd:             this.maxPos = Math.min(clob.sqlLength(), pos + len - 1);
1:c6ed70e:         }
1:a8908bd:         else {
1:a8908bd:             this.maxPos = -1;
1:a8908bd:         }
1:a8908bd:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Reader#read()
2:61aec23:      *
1:61aec23:      * This method fetches one character at a time from the server. For more
1:61aec23:      * efficient retrieval, use #read(char[]).
1:61aec23:      */
1:61aec23:     public int read() throws IOException {
1:61aec23:         checkClosed();
1:61aec23:         char[] chars = readCharacters(1);
1:61aec23:         if (chars.length == 0) { // EOF
1:61aec23:             return -1;
1:61aec23:         } else {
1:61aec23:             return chars[0];
8:61aec23:         }
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Reader#read(char[], int, int)
1:61aec23:      */
1:61aec23:     public int read(char[] c, int off, int len) throws IOException {
1:61aec23:         checkClosed();
1:61aec23:         if (len == 0) return 0;
1:50227f1:         if ((off < 0) || (len < 0) || (len > c.length - off)) {
1:61aec23:             throw new IndexOutOfBoundsException();
1:61aec23:         }
1:61aec23:         
1:61aec23:         char[] chars = readCharacters(len);
1:61aec23:         if (chars.length == 0) { // EOF
1:61aec23:             return -1;
1:61aec23:         } else {
1:61aec23:             System.arraycopy(chars, 0, c, off, chars.length);
1:61aec23:             return chars.length;
1:61aec23:         }
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Reader#close()
1:61aec23:      */
1:61aec23:     public void close() throws IOException {
1:61aec23:         if (isClosed) {
1:61aec23:             return;
1:c6ed70e:         }
1:61aec23:         isClosed = true;
1:c6ed70e:     }
1:c6ed70e: 
1:c6ed70e:     /**
1:61aec23:      * Check to see if this <code>Reader</code> is closed. If it
1:61aec23:      * is closed throw an <code>IOException</code> that states that
1:61aec23:      * the stream is closed.
1:61aec23:      *
1:61aec23:      * @throws IOException if isClosed = true.
1:61aec23:      */
1:61aec23:     private void checkClosed() throws IOException {
1:61aec23:         //if isClosed=true this means that close() has
1:61aec23:         //been called on this Reader already.
1:61aec23:         if(isClosed) {
1:61aec23:             //since this method would be used from the read method
1:61aec23:             //implementations throw an IOException that states that
1:61aec23:             //these operations cannot be done once close has been
1:61aec23:             //called.
1:61aec23:             throw new IOException("This operation is not " +
1:61aec23:                     "permitted because the" +
1:61aec23:                     "Reader has been closed");
1:61aec23:         }
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * Read the next <code>len</code> characters of the <code>Clob</code>
1:61aec23:      * value from the server.
1:61aec23:      *
1:61aec23:      * @param len number of characters to read.
1:61aec23:      * @throws java.io.IOException Wrapped SqlException if reading
1:61aec23:      *         from server fails.
1:61aec23:      * @return <code>char[]</code> containing the read characters.
1:61aec23:      */
1:61aec23:     private char[] readCharacters(int len) throws IOException {
1:c6ed70e:         try {
1:a8908bd:             //stores the actual length that can be read
1:a8908bd:             //based on the value of the current position
1:a8908bd:             //in the stream(currentPos) and the length of
1:a8908bd:             //the stream.
1:a8908bd:             int actualLength = -1;
1:a8908bd:             //check if maxPos has been set and calculate actualLength
1:a8908bd:             //based on that.
1:a8908bd:             if(maxPos != -1) {
1:a8908bd:                 //maxPos has been set. use maxPos to calculate the
1:a8908bd:                 //actual length based on the value set for maxPos.
1:a8908bd:                 actualLength 
1:a6f48dd:                     = (int )Math.min(len, maxPos - currentPos + 1);
1:a8908bd:             }
1:a8908bd:             else {
1:a8908bd:                 //The subset of the Blob was not requested for
1:a8908bd:                 //hence maxPos is -1. Here we use clob.sqllength
1:a8908bd:                 //instead.
1:a8908bd:                 actualLength 
1:a8908bd:                     = (int )Math.min(len, clob.sqlLength() - currentPos + 1);
1:a8908bd:             }
1:61aec23:             String resultStr = connection.locatorProcedureCall().
1:61aec23:                     clobGetSubString(clob.getLocator(),
1:61aec23:                     currentPos, actualLength);
1:61aec23:             char[] result = resultStr.toCharArray();
1:61aec23:             currentPos += result.length;
1:61aec23:             return result;
1:61aec23:         } catch (SqlException ex) {
1:b862050:             // Passing cause as ctor argument ensures that the IOException 
1:b862050:             // inherits the cause's message, (unlike invoking initCause() on a 
1:b862050:             // default-constructed IOException).
1:b862050:             throw new IOException(ex);
1:61aec23:         }
1:61aec23:     }
1:61aec23: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:b862050
/////////////////////////////////////////////////////////////////////////
1:             // Passing cause as ctor argument ensures that the IOException 
1:             // inherits the cause's message, (unlike invoking initCause() on a 
1:             // default-constructed IOException).
1:             throw new IOException(ex);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class ClobLocatorReader extends Reader {
/////////////////////////////////////////////////////////////////////////
1:     ClobLocatorReader(ClientConnection connection, ClientClob clob)
/////////////////////////////////////////////////////////////////////////
1:     ClobLocatorReader(ClientConnection connection, ClientClob clob,
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.Reader;
/////////////////////////////////////////////////////////////////////////
1:  * buffering of data is done.  Hence, for efficiency #read(char[])
0: public class ClobLocatorReader extends Reader {
1:     private final ClientConnection connection;
1:     private final ClientClob clob;
/////////////////////////////////////////////////////////////////////////
0:     public ClobLocatorReader(ClientConnection connection, ClientClob clob)
/////////////////////////////////////////////////////////////////////////
0:     public ClobLocatorReader(ClientConnection connection, ClientClob clob,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4458855
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:d6844ab
/////////////////////////////////////////////////////////////////////////
1:      * maxPos starts counting from 1.
1:     private final long maxPos;
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(clob.isLocator());
1:         }
1: 
1:         this.connection = connection;
1:         this.clob = clob;
commit:a6f48dd
/////////////////////////////////////////////////////////////////////////
1:     private long currentPos;
1:      * Position in Clob where to stop reading.
0:     private long maxPos;
/////////////////////////////////////////////////////////////////////////
0:     public ClobLocatorReader(Connection connection, Clob clob)
1:     throws SqlException {
1:         this.currentPos = 1;
0:         this.maxPos = clob.sqlLength();
/////////////////////////////////////////////////////////////////////////
1:             long pos, long len) throws SqlException {
1:         this.currentPos = pos;
1:         this.maxPos = Math.min(clob.sqlLength(), pos + len - 1);
/////////////////////////////////////////////////////////////////////////
1:                     = (int )Math.min(len, maxPos - currentPos + 1);
/////////////////////////////////////////////////////////////////////////
commit:50227f1
/////////////////////////////////////////////////////////////////////////
0:     private final Connection connection;
0:     private final Clob clob;
/////////////////////////////////////////////////////////////////////////
1:         if ((off < 0) || (len < 0) || (len > c.length - off)) {
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:50f5a01
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:219a290
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(clob.isLocator());
1:         }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c6ed70e
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLException;
0: import org.apache.derby.shared.common.error.ExceptionUtil;
0: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0:      * If true, the underlying Blob will be freed when the underlying stream is
0:      * closed.  Used to implement correct behavior for streams obtained from
0:      * result sets.
1:      */
0:     private boolean freeClobOnClose = false;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:         
1:         try {
0:             if (clob != null && freeClobOnClose) {
0:                 clob.free();
1:             }
0:         } catch (SQLException ex) {
0:             if (ex.getSQLState().compareTo
0:                     (ExceptionUtil.getSQLStateFromIdentifier
0:                             (SQLState.LOB_OBJECT_INVALID)) == 0) {
0:                 // Clob has already been freed, probably because of autocommit
0:                 return;  // Ignore error
1:             }
1: 
0:             IOException ioEx = new IOException();
0:             ioEx.initCause(ex);
0:             throw ioEx;
1:         }
1: 
1:     /**
0:      * Tell stream to free the underlying Clob when it is closed.
1:      */
0:     public void setFreeClobOnClose() {
0:         freeClobOnClose = true;
1:     }
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1:        
1:         //In this case a subset of the Clob has
1:         //not been requested for. We set maxPos 
1:         //to -1 and instead will call 
1:         //clob.sqlLength() each time we want 
1:         //the maximum length.
1:         this.maxPos = -1;
/////////////////////////////////////////////////////////////////////////
1:         if(len != -1) {
0:             this.maxPos = Math.min(clob.sqlLength(), pos + len - 1);
1:         }
1:         else {
1:             this.maxPos = -1;
1:         }
/////////////////////////////////////////////////////////////////////////
1:             //stores the actual length that can be read
1:             //based on the value of the current position
1:             //in the stream(currentPos) and the length of
1:             //the stream.
1:             int actualLength = -1;
1:             //check if maxPos has been set and calculate actualLength
1:             //based on that.
1:             if(maxPos != -1) {
1:                 //maxPos has been set. use maxPos to calculate the
1:                 //actual length based on the value set for maxPos.
1:                 actualLength 
1:             }
1:             else {
1:                 //The subset of the Blob was not requested for
1:                 //hence maxPos is -1. Here we use clob.sqllength
1:                 //instead.
1:                 actualLength 
1:                     = (int )Math.min(len, clob.sqlLength() - currentPos + 1);
1:             }
commit:61aec23
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.ClobLocatorReader
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * An <code>Reader</code> that will use an locator to fetch the
1:  * Clob value from the server.
1:  * <p>
1:  * This <code>Reader</code> implementation is pretty basic.  No
0:  * buffering of data is done.  Hence, for efficieny #read(char[])
1:  * should be used instead of #read().  Marks are not supported, but it
1:  * should be pretty simple to extend the implementation to support
1:  * this.  A more efficient skip implementation should also be
1:  * straight-forward.
1:  */
0: public class ClobLocatorReader extends java.io.Reader {
1:     /**
1:      * Connection used to read Clob from server.
1:      */
0:     private Connection connection;
1:     
1:     /**
1:      * The Clob to be accessed.
1:      */
0:     private Clob clob;
1:     
1:     /**
1:      * Current position in the underlying Clob.
1:      * Clobs are indexed from 1
1:      */
0:     private long currentPos = 1;
1:     
1:     /**
0:      * The length in characters of the partial value to be retrieved.
1:      */
0:     private long length = -1;
1:     
1:     /**
1:      * Stores the information to whether this Reader has been
1:      * closed or not. Is set to true if close() has been
1:      * called. Is false otherwise.
1:      */
1:     private boolean isClosed = false;
1:     
1:     /**
1:      * Create an <code>Reader</code> for reading the
1:      * <code>Clob</code> value represented by the given locator based
1:      * <code>Clob</code> object.
1:      * @param connection connection to be used to read the
1:      *        <code>Clob</code> value from the server
1:      * @param clob <code>Clob</code> object that contains locator for
1:      *        the <code>Clob</code> value on the server.
1:      */
0:     public ClobLocatorReader(Connection connection, Clob clob) {
0:         SanityManager.ASSERT(clob.isLocator());
1:         
1:         this.connection = connection;
1:         this.clob = clob;
1:     }
1:     
1:     /**
1:      * Create an <code>Reader</code> for reading the
1:      * <code>Clob</code> value represented by the given locator based
1:      * <code>Clob</code> object.
1:      * @param connection connection to be used to read the
1:      *        <code>Clob</code> value from the server
1:      * @param clob <code>Clob</code> object that contains locator for
1:      *        the <code>Clob</code> value on the server.
1:      * @param pos The offset to the first character of the partial value to be
1:      *            retrieved.
1:      * @param len The length in characters of the partial value to be retrieved.
1:      */
0:     public ClobLocatorReader(Connection connection, Clob clob, 
0:             long pos, long len) {
0:         this(connection, clob);
0:         currentPos = pos;
0:         length = len;
1:     }
1:     
1:     /**
1:      * @see java.io.Reader#read()
1:      *
1:      * This method fetches one character at a time from the server. For more
1:      * efficient retrieval, use #read(char[]).
1:      */
1:     public int read() throws IOException {
1:         checkClosed();
1:         char[] chars = readCharacters(1);
1:         if (chars.length == 0) { // EOF
1:             return -1;
1:         } else {
1:             return chars[0];
1:         }
1:     }
1:     
1:     /**
1:      * @see java.io.Reader#read(char[], int, int)
1:      */
1:     public int read(char[] c, int off, int len) throws IOException {
1:         checkClosed();
1:         if (len == 0) return 0;
0:         if ((off < 0) || (len < 0) || (off+len > c.length)) {
1:             throw new IndexOutOfBoundsException();
1:         }
1:         
1:         char[] chars = readCharacters(len);
1:         if (chars.length == 0) { // EOF
1:             return -1;
1:         } else {
1:             System.arraycopy(chars, 0, c, off, chars.length);
1:             return chars.length;
1:         }
1:     }
1:     
1:     /**
1:      * @see java.io.Reader#close()
1:      */
1:     public void close() throws IOException {
1:         if (isClosed) {
1:             return;
1:         }
1:         isClosed = true;
0:         connection = null;
0:         clob = null;
1:     }
1:     
1:     /**
1:      * Check to see if this <code>Reader</code> is closed. If it
1:      * is closed throw an <code>IOException</code> that states that
1:      * the stream is closed.
1:      *
1:      * @throws IOException if isClosed = true.
1:      */
1:     private void checkClosed() throws IOException {
1:         //if isClosed=true this means that close() has
1:         //been called on this Reader already.
1:         if(isClosed) {
1:             //since this method would be used from the read method
1:             //implementations throw an IOException that states that
1:             //these operations cannot be done once close has been
1:             //called.
1:             throw new IOException("This operation is not " +
1:                     "permitted because the" +
1:                     "Reader has been closed");
1:         }
1:     }
1:     
1:     /**
1:      * Read the next <code>len</code> characters of the <code>Clob</code>
1:      * value from the server.
1:      *
1:      * @param len number of characters to read.
1:      * @throws java.io.IOException Wrapped SqlException if reading
1:      *         from server fails.
1:      * @return <code>char[]</code> containing the read characters.
1:      */
1:     private char[] readCharacters(int len) throws IOException {
0:         try {
0:             int actualLength
0:                     = (int )Math.min(len, getStreamLength() - currentPos + 1);
1:             String resultStr = connection.locatorProcedureCall().
1:                     clobGetSubString(clob.getLocator(),
1:                     currentPos, actualLength);
1:             char[] result = resultStr.toCharArray();
1:             currentPos += result.length;
1:             return result;
1:         } catch (SqlException ex) {
0:             IOException ioEx = new IOException();
0:             ioEx.initCause(ex);
0:             throw ioEx;
1:         }
1:     }
1:     
1:     /**
0:      * Return the length of the stream.
1:      *
0:      * @return the length of the stream.
1:      */
0:     private long getStreamLength() throws SqlException {
0:         //check to see if the length of the stream has been set
0:         //during initialization
0:         if(length != -1) {
0:             //The length has been set. Hence return this as the
0:             //length
0:             return length;
1:         }
0:         else {
0:             //The length has not been set. Obtain the length from
0:             //the Clob.
0:             return clob.sqlLength();
1:         }
1:     }
1: }
============================================================================