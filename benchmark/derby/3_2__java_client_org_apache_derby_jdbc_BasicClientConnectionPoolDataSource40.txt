1:4e0e1f1: /*
1:4e0e1f1: 
1:38667d9:    Derby - Class org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40
1:4e0e1f1: 
1:4e0e1f1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4e0e1f1:    contributor license agreements.  See the NOTICE file distributed with
1:4e0e1f1:    this work for additional information regarding copyright ownership.
1:4e0e1f1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:4e0e1f1:    (the "License"); you may not use this file except in compliance with
1:4e0e1f1:    the License.  You may obtain a copy of the License at
1:4e0e1f1: 
1:4e0e1f1:       http://www.apache.org/licenses/LICENSE-2.0
1:4e0e1f1: 
1:4e0e1f1:    Unless required by applicable law or agreed to in writing, software
1:4e0e1f1:    distributed under the License is distributed on an "AS IS" BASIS,
1:4e0e1f1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4e0e1f1:    See the License for the specific language governing permissions and
1:4e0e1f1:    limitations under the License.
1:4e0e1f1: 
1:4e0e1f1: */
1:4e0e1f1: 
1:4e0e1f1: package org.apache.derby.jdbc;
1:4e0e1f1: 
1:4e0e1f1: import java.io.IOException;
1:4e0e1f1: import java.io.ObjectInputStream;
1:4e0e1f1: import java.sql.SQLException;
1:69e3d06: import javax.sql.ConnectionPoolDataSource;
1:4e0e1f1: import javax.sql.PooledConnection;
1:4e0e1f1: import org.apache.derby.shared.common.i18n.MessageUtil;
1:4e0e1f1: import org.apache.derby.shared.common.reference.MessageId;
1:4e0e1f1: 
1:4e0e1f1: /**
1:0326967:  * This data source is suitable for client/server use of Derby,
1:2913612:  * running on Java 8 Compact Profile 2 or higher.
1:2913612:  * <p/>
1:38667d9:  * BasicClientConnectionPoolDataSource40 is similar to
1:04fc939:  * ClientConnectionPoolDataSource except that it does not support JNDI,
1:4e0e1f1:  * i.e. it does not implement {@code javax.naming.Referenceable}.
1:4e0e1f1:  *
1:4e0e1f1:  * @see ClientConnectionPoolDataSource40
1:4e0e1f1:  */
1:38667d9: public class BasicClientConnectionPoolDataSource40
1:38667d9:         extends BasicClientDataSource40
1:69e3d06:         implements ConnectionPoolDataSource,
1:4e0e1f1:                    ClientConnectionPoolDataSourceInterface {
1:4e0e1f1: 
1:4e0e1f1:     private static final long serialVersionUID = -539234282156481378L;
1:4e0e1f1: 
1:4e0e1f1:     /** Message utility used to obtain localized messages. */
1:4e0e1f1:     private static final MessageUtil msgUtil =
1:4e0e1f1:             new MessageUtil("org.apache.derby.loc.clientmessages");
1:4e0e1f1: 
1:4e0e1f1:     public static final String className__ =
1:38667d9:             "org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40";
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Specifies the maximum number of statements that can be cached per
1:4e0e1f1:      * connection by the JDBC driver.
1:4e0e1f1:      * <p>
1:4e0e1f1:      * A value of {@code 0} disables statement caching, negative values
1:4e0e1f1:      * are not allowed. The default is that caching is disabled.
1:4e0e1f1:      *
1:4e0e1f1:      * @serial
1:4e0e1f1:      */
1:4e0e1f1:     private int maxStatements = 0;
1:4e0e1f1: 
1:38667d9:     public BasicClientConnectionPoolDataSource40() {
1:4e0e1f1:         super();
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     // ---------------------------interface methods----------------------------
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * @see javax.sql.ConnectionPoolDataSource#getPooledConnection()
1:4e0e1f1:      */
1:4e0e1f1:     public PooledConnection getPooledConnection() throws SQLException {
1:4e0e1f1:         return getPooledConnectionMinion();
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * @see javax.sql.ConnectionPoolDataSource#getPooledConnection(
1:4e0e1f1:      *      java.lang.String, java.lang.String)
1:4e0e1f1:      */
1:4e0e1f1:     public PooledConnection getPooledConnection(String user, String password)
1:4e0e1f1:             throws SQLException {
1:4e0e1f1: 
1:4e0e1f1:         return getPooledConnectionMinion(user, password);
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Specifies the maximum size of the statement cache.
1:4e0e1f1:      *
1:4e0e1f1:      * @param maxStatements maximum number of cached statements
1:4e0e1f1:      *
1:4e0e1f1:      * @throws IllegalArgumentException if {@code maxStatements} is
1:4e0e1f1:      *      negative
1:4e0e1f1:      */
1:4e0e1f1:     public void setMaxStatements(int maxStatements) {
1:4e0e1f1:         // Disallow negative values.
1:4e0e1f1:         if (maxStatements < 0) {
1:4e0e1f1:             throw new IllegalArgumentException(msgUtil.getTextMessage(
1:4e0e1f1:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
1:4e0e1f1:         }
1:4e0e1f1: 
1:4e0e1f1:         this.maxStatements = maxStatements;
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Returns the maximum number of JDBC prepared statements a connection is
1:4e0e1f1:      * allowed to cache.
1:4e0e1f1:      *
1:4e0e1f1:      * @return Maximum number of statements to cache, or {@code 0} if
1:4e0e1f1:      *      caching is disabled (default).
1:4e0e1f1:      */
1:4e0e1f1:     public int getMaxStatements() {
1:4e0e1f1:         return this.maxStatements;
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Internally used method.
1:4e0e1f1:      *
1:7863d83:      * @see BasicClientDataSource40#maxStatementsToPool
1:4e0e1f1:      */
1:4e0e1f1:     public int maxStatementsToPool() {
1:4e0e1f1:         return this.maxStatements;
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Make sure the state of the de-serialized object is valid.
1:4e0e1f1:      */
1:4e0e1f1:     private final void validateState() {
1:4e0e1f1:         // Make sure maxStatements is zero or higher.
1:4e0e1f1:         if (maxStatements < 0) {
1:4e0e1f1:             throw new IllegalArgumentException(msgUtil.getTextMessage(
1:4e0e1f1:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
1:4e0e1f1:         }
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Read an object from the ObjectInputStream.
1:4e0e1f1:      * <p>
1:4e0e1f1:      * This implementation differs from the default one by initiating state
1:4e0e1f1:      * validation of the object created.
1:4e0e1f1:      *
1:4e0e1f1:      * @param inputStream data stream to read objects from
1:4e0e1f1:      * @throws ClassNotFoundException if instantiating a class fails
1:4e0e1f1:      * @throws IOException if reading from the stream fails
1:4e0e1f1:      */
1:4e0e1f1:     private void readObject(ObjectInputStream inputStream)
1:4e0e1f1:             throws ClassNotFoundException, IOException {
1:4e0e1f1:         // Always perform the default de-serialization first
1:4e0e1f1:         inputStream.defaultReadObject();
1:4e0e1f1: 
1:4e0e1f1:         // Ensure that object state has not been corrupted or tampered with.
1:4e0e1f1:         validateState();
1:4e0e1f1:     }
1:4e0e1f1: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1:      * @see BasicClientDataSource40#maxStatementsToPool
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:  * This data source is suitable for client/server use of Derby,
/////////////////////////////////////////////////////////////////////////
0: class BasicClientConnectionPoolDataSource40
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.ConnectionPoolDataSource;
/////////////////////////////////////////////////////////////////////////
1:         implements ConnectionPoolDataSource,
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:  * This datasource is suitable for client/server use of Derby,
1:  * running on Java 8 Compact Profile 2 or higher.
1:  * <p/>
commit:38667d9
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40
/////////////////////////////////////////////////////////////////////////
1:  * BasicClientConnectionPoolDataSource40 is similar to
1: public class BasicClientConnectionPoolDataSource40
1:         extends BasicClientDataSource40
/////////////////////////////////////////////////////////////////////////
1:             "org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40";
/////////////////////////////////////////////////////////////////////////
1:     public BasicClientConnectionPoolDataSource40() {
commit:4e0e1f1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.sql.SQLException;
1: import javax.sql.PooledConnection;
1: import org.apache.derby.shared.common.i18n.MessageUtil;
1: import org.apache.derby.shared.common.reference.MessageId;
1: 
1: /**
0:  * NonJNDIClientConnectionPoolDataSource40 is similar to
0:  * ClientConnectionPoolDataSource40 except that it does not support JNDI,
1:  * i.e. it does not implement {@code javax.naming.Referenceable}.
1:  *
1:  * @see ClientConnectionPoolDataSource40
1:  */
0: public class NonJNDIClientConnectionPoolDataSource40
0:         extends NonJNDIClientDataSource40
0:         implements javax.sql.ConnectionPoolDataSource,
1:                    ClientConnectionPoolDataSourceInterface {
1: 
1:     private static final long serialVersionUID = -539234282156481378L;
1: 
1:     /** Message utility used to obtain localized messages. */
1:     private static final MessageUtil msgUtil =
1:             new MessageUtil("org.apache.derby.loc.clientmessages");
1: 
1:     public static final String className__ =
0:             "org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40";
1: 
1:     /**
1:      * Specifies the maximum number of statements that can be cached per
1:      * connection by the JDBC driver.
1:      * <p>
1:      * A value of {@code 0} disables statement caching, negative values
1:      * are not allowed. The default is that caching is disabled.
1:      *
1:      * @serial
1:      */
1:     private int maxStatements = 0;
1: 
0:     public NonJNDIClientConnectionPoolDataSource40() {
1:         super();
1:     }
1: 
1:     // ---------------------------interface methods----------------------------
1: 
1:     /**
1:      * @see javax.sql.ConnectionPoolDataSource#getPooledConnection()
1:      */
1:     public PooledConnection getPooledConnection() throws SQLException {
1:         return getPooledConnectionMinion();
1:     }
1: 
1:     /**
1:      * @see javax.sql.ConnectionPoolDataSource#getPooledConnection(
1:      *      java.lang.String, java.lang.String)
1:      */
1:     public PooledConnection getPooledConnection(String user, String password)
1:             throws SQLException {
1: 
1:         return getPooledConnectionMinion(user, password);
1:     }
1: 
1: 
1:     /**
1:      * Specifies the maximum size of the statement cache.
1:      *
1:      * @param maxStatements maximum number of cached statements
1:      *
1:      * @throws IllegalArgumentException if {@code maxStatements} is
1:      *      negative
1:      */
1:     public void setMaxStatements(int maxStatements) {
1:         // Disallow negative values.
1:         if (maxStatements < 0) {
1:             throw new IllegalArgumentException(msgUtil.getTextMessage(
1:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
1:         }
1: 
1:         this.maxStatements = maxStatements;
1:     }
1: 
1:     /**
1:      * Returns the maximum number of JDBC prepared statements a connection is
1:      * allowed to cache.
1:      *
1:      * @return Maximum number of statements to cache, or {@code 0} if
1:      *      caching is disabled (default).
1:      */
1:     public int getMaxStatements() {
1:         return this.maxStatements;
1:     }
1: 
1:     /**
1:      * Internally used method.
1:      *
0:      * @see ClientBaseDataSourceRoot#maxStatementsToPool
1:      */
1:     public int maxStatementsToPool() {
1:         return this.maxStatements;
1:     }
1: 
1:     /**
1:      * Make sure the state of the de-serialized object is valid.
1:      */
1:     private final void validateState() {
1:         // Make sure maxStatements is zero or higher.
1:         if (maxStatements < 0) {
1:             throw new IllegalArgumentException(msgUtil.getTextMessage(
1:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
1:         }
1:     }
1: 
1:     /**
1:      * Read an object from the ObjectInputStream.
1:      * <p>
1:      * This implementation differs from the default one by initiating state
1:      * validation of the object created.
1:      *
1:      * @param inputStream data stream to read objects from
1:      * @throws ClassNotFoundException if instantiating a class fails
1:      * @throws IOException if reading from the stream fails
1:      */
1:     private void readObject(ObjectInputStream inputStream)
1:             throws ClassNotFoundException, IOException {
1:         // Always perform the default de-serialization first
1:         inputStream.defaultReadObject();
1: 
1:         // Ensure that object state has not been corrupted or tampered with.
1:         validateState();
1:     }
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:8b3b6fc
/////////////////////////////////////////////////////////////////////////
0: public class BasicClientConnectionPoolDataSource40
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:04fc939
/////////////////////////////////////////////////////////////////////////
1:  * ClientConnectionPoolDataSource except that it does not support JNDI,
============================================================================