1:e1fc783: /*
1:6b5cc24: 
1:fcdce55:    Derby - Class org.apache.derby.impl.jdbc.ClobUpdatableReader
1:bb0c274: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:bb0c274: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:bb0c274: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:bb0c274: 
3:e1fc783:  */
1:e1fc783: package org.apache.derby.impl.jdbc;
1:6b5cc24: 
1:e1fc783: import java.io.IOException;
1:e1fc783: import java.io.Reader;
1:80424bf: import java.sql.SQLException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:80424bf: 
3:e1fc783: /**
1:910b77f:  * {@code ClobUpdatableReader} is used to create a {@code Reader} capable of
1:910b77f:  * detecting changes to the underlying source.
1:e5b15ce:  * <p>
1:e5b15ce:  * This class is aware that the underlying stream can be modified and
1:e5b15ce:  * reinitializes itself if it detects any change in the stream. This
1:e5b15ce:  * invalidates the cache so the changes are reflected immediately.
1:910b77f:  * <p>
1:910b77f:  * The task of this class is to detect changes in the underlying Clob.
1:910b77f:  * Repositioning is handled by other classes.
1:e1fc783:  */
1:fcdce55: final class ClobUpdatableReader extends Reader {
1:910b77f:  
1:e5b15ce:     /** Reader accessing the Clob data and doing the work. */
1:e1fc783:     private Reader streamReader;
1:910b77f:     /** Character position of this reader (1-based). */
1:e1fc783:     private long pos;
1:910b77f:     /** The last update count seen on the underlying Clob. */
1:910b77f:     private long lastUpdateCount = -1;
1:910b77f:     /**
1:910b77f:      * The Clob object we are reading from.
1:910b77f:      * <p>
1:910b77f:      * Note that even though the Clob itself is final, the internal
1:910b77f:      * representation of the content may change. The reference to the Clob is
1:910b77f:      * needed to get a hold of the new internal representation if it is changed.
1:910b77f:      *
1:910b77f:      * @see #iClob
1:910b77f:      */
1:80424bf:     private final EmbedClob clob;
1:e1fc783:     /**
1:910b77f:      * The current internal representation of the Clob content.
1:910b77f:      * <p>
1:910b77f:      * If the user starts out with a read-only Clob and then modifies it, the
1:910b77f:      * internal representation will change.
1:910b77f:      */
1:910b77f:     private InternalClob iClob;
1:910b77f:     /**
1:debc0fc:      * Position in Clob where to stop reading unless EOF is reached first.
1:e1fc783:      */
1:cd727e7:     private final long maxPos;
1:910b77f:     /** Tells if this reader has been closed. */
1:910b77f:     private volatile boolean closed = false;
1:bb0c274: 
1:910b77f:     /**
1:910b77f:      * Creates an updatable reader configured with initial position set to the
1:910b77f:      * first character in the Clob and with no imposed length limit.
1:910b77f:      *
1:910b77f:      * @param clob source data
1:910b77f:      * @throws IOException if obtaining the underlying reader fails
1:910b77f:      * @throws SQLException if obtaining the underlying reader fails
1:910b77f:      */
1:910b77f:     public ClobUpdatableReader(EmbedClob clob)
1:910b77f:             throws IOException, SQLException {
1:910b77f:         this(clob, 1L, Long.MAX_VALUE);
1:80424bf:     }
1:6b5cc24: 
1:80424bf:     /**
1:910b77f:      * Creates an updatable reader configured with the specified initial
1:910b77f:      * position and with an imposed length limit.
1:910b77f:      *
1:910b77f:      * @param clob source data
1:910b77f:      * @param initialPos the first character that will be read
1:910b77f:      * @param length the maximum number of characters that will read
1:910b77f:      * @throws IOException if obtaining the underlying reader fails
1:910b77f:      * @throws SQLException if obtaining the underlying reader fails
1:80424bf:      */
1:910b77f:     public ClobUpdatableReader(EmbedClob clob, long initialPos, long length)
1:910b77f:             throws IOException, SQLException {
1:910b77f:         if (SanityManager.DEBUG) {
1:910b77f:             SanityManager.ASSERT(initialPos > 0);
1:910b77f:             SanityManager.ASSERT(length > 0);
5:80424bf:         }
1:910b77f:         this.clob = clob;
1:910b77f:         this.iClob = clob.getInternalClob();
1:910b77f:         this.pos = initialPos;
1:910b77f:         // Temporary computation due to possible overflow.
1:910b77f:         long tmpMaxPos = initialPos + length; // May overflow
1:910b77f:         if (tmpMaxPos < length || tmpMaxPos < initialPos) {
1:910b77f:             tmpMaxPos = Long.MAX_VALUE;
1:910b77f:         }
1:910b77f:         this.maxPos = tmpMaxPos;
1:6b5cc24:     }
1:910b77f: 
1:910b77f:     public int read() throws IOException {
1:910b77f:         if (closed) {
1:910b77f:             throw new IOException("Reader closed");
1:910b77f:         }
1:debc0fc:         if (pos >= maxPos) {
1:cd727e7:             return -1;
1:6b5cc24:         }
1:910b77f:         updateReaderIfRequired();
1:910b77f:         // Adjust length if required, read data and update position.
1:910b77f:         int retVal = this.streamReader.read();
1:910b77f:         if (retVal > 0) {
1:910b77f:             this.pos++;
1:910b77f:         }
1:910b77f:         return retVal;
1:910b77f:     }
1:910b77f: 
1:910b77f:     public int read(char[] cbuf, int off, int len) throws IOException {
1:910b77f:         if (closed) {
1:910b77f:             throw new IOException("Reader closed");
1:910b77f:         }
1:910b77f:         if (pos >= maxPos) {
1:910b77f:             return -1;
1:6b5cc24:         }
1:910b77f:         updateReaderIfRequired();
1:910b77f:         // Adjust length if required, read data and update position.
1:910b77f:         int adjustedLen = (int)Math.min(len, maxPos - pos);
1:910b77f:         int readCount = this.streamReader.read(cbuf, off, adjustedLen);
1:910b77f:         if (readCount > 0) {
1:910b77f:             this.pos += readCount;
1:910b77f:         }
1:910b77f:         return readCount;
1:910b77f:     }
1:910b77f: 
1:910b77f:     public long skip(long len) throws IOException {
1:910b77f:         if (closed) {
1:910b77f:             throw new IOException("Reader closed");
1:910b77f:         }
1:910b77f:         if (pos >= maxPos) {
1:910b77f:             return 0;
1:910b77f:         }
1:910b77f:         updateReaderIfRequired();
1:910b77f:         // Adjust length if required, skip data and update position.
1:910b77f:         long adjustedLen = Math.min(len, maxPos - pos);
1:910b77f:         long skipped = this.streamReader.skip(adjustedLen);
1:910b77f:         if (skipped > 0) {
1:910b77f:             this.pos += skipped;
1:910b77f:         }
1:910b77f:         return skipped;
1:6b5cc24:     }
1:80424bf: 
1:80424bf:     /**
1:910b77f:      * Closes this reader.
1:910b77f:      * <p>
1:910b77f:      * An {@code IOException} will be thrown if any of the read or skip methods
1:910b77f:      * are called after the reader has been closed.
1:910b77f:      *
1:910b77f:      * @throws IOException if an error occurs while closing
1:80424bf:      */
1:e1fc783:     public void close() throws IOException {
1:910b77f:         if (!closed) {
1:910b77f:             closed = true;
1:910b77f:             // Can be null if the stream is created and closed immediately.
1:910b77f:             if (this.streamReader != null) {
1:910b77f:                 this.streamReader.close();
1:910b77f:             }
1:80424bf:         }
1:80424bf:     }
1:80424bf: 
1:e1fc783:     /**
1:910b77f:      * Updates the reader if the underlying data has been modified.
1:910b77f:      * <p>
1:910b77f:      * There are two cases to deal with:
1:910b77f:      * <ol> <li>The underlying data of the internal Clob representation has been
1:910b77f:      *          modified.</li>
1:910b77f:      *      <li>The internal Clob representation has changed.</li>
1:910b77f:      * </ol>
1:910b77f:      * The latter case happens when a read-only Clob, represented as a stream
1:910b77f:      * into store, is modified by the user and a new temporary internal
1:910b77f:      * representation is created.
1:910b77f:      *
1:910b77f:      * @throws IOException if verifying or updating the reader fails
1:e1fc783:      */
1:910b77f:     private void updateReaderIfRequired() throws IOException {
1:910b77f:         // Case two as described above; changed representation.
1:910b77f:         if (iClob.isReleased()) {
1:910b77f:             iClob = this.clob.getInternalClob();
1:910b77f:             lastUpdateCount = -1;
1:910b77f:             // Check again. If both are closed, the Clob itself is closed.
1:910b77f:             if (iClob.isReleased()) {
1:910b77f:                 close();
1:910b77f:                 return;
1:80424bf:             }
1:80424bf:         }
1:910b77f:         // Case one as described above; content has been modified.
1:910b77f:         if (lastUpdateCount != iClob.getUpdateCount()) {
1:910b77f:             lastUpdateCount = iClob.getUpdateCount();
1:910b77f:             try {
1:910b77f:                 this.streamReader = iClob.getReader(pos);
1:910b77f:             } catch (SQLException sqle) {
1:910b77f:                 throw new IOException(sqle.getMessage());
1:80424bf:             }
1:80424bf:         }
1:80424bf:     }
1:80424bf: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:910b77f
/////////////////////////////////////////////////////////////////////////
1:  * {@code ClobUpdatableReader} is used to create a {@code Reader} capable of
1:  * detecting changes to the underlying source.
1:  * <p>
1:  * The task of this class is to detect changes in the underlying Clob.
1:  * Repositioning is handled by other classes.
1:  
1:     /** Character position of this reader (1-based). */
1:     /** The last update count seen on the underlying Clob. */
1:     private long lastUpdateCount = -1;
1:     /**
1:      * The Clob object we are reading from.
1:      * <p>
1:      * Note that even though the Clob itself is final, the internal
1:      * representation of the content may change. The reference to the Clob is
1:      * needed to get a hold of the new internal representation if it is changed.
1:      *
1:      * @see #iClob
1:      */
1:      * The current internal representation of the Clob content.
1:      * <p>
1:      * If the user starts out with a read-only Clob and then modifies it, the
1:      * internal representation will change.
1:      */
1:     private InternalClob iClob;
1:     /**
1:     /** Tells if this reader has been closed. */
1:     private volatile boolean closed = false;
1:     /**
1:      * Creates an updatable reader configured with initial position set to the
1:      * first character in the Clob and with no imposed length limit.
1:      *
1:      * @param clob source data
1:      * @throws IOException if obtaining the underlying reader fails
1:      * @throws SQLException if obtaining the underlying reader fails
1:      */
1:     public ClobUpdatableReader(EmbedClob clob)
1:             throws IOException, SQLException {
1:         this(clob, 1L, Long.MAX_VALUE);
1:      * Creates an updatable reader configured with the specified initial
1:      * position and with an imposed length limit.
1:      *
1:      * @param clob source data
1:      * @param initialPos the first character that will be read
1:      * @param length the maximum number of characters that will read
1:      * @throws IOException if obtaining the underlying reader fails
1:      * @throws SQLException if obtaining the underlying reader fails
1:     public ClobUpdatableReader(EmbedClob clob, long initialPos, long length)
1:             throws IOException, SQLException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(initialPos > 0);
1:             SanityManager.ASSERT(length > 0);
1:         this.clob = clob;
1:         this.iClob = clob.getInternalClob();
1:         this.pos = initialPos;
1:         // Temporary computation due to possible overflow.
1:         long tmpMaxPos = initialPos + length; // May overflow
1:         if (tmpMaxPos < length || tmpMaxPos < initialPos) {
1:             tmpMaxPos = Long.MAX_VALUE;
1:         }
1:         this.maxPos = tmpMaxPos;
1: 
1:     public int read() throws IOException {
1:         if (closed) {
1:             throw new IOException("Reader closed");
1:         }
1:         updateReaderIfRequired();
1:         // Adjust length if required, read data and update position.
1:         int retVal = this.streamReader.read();
1:         if (retVal > 0) {
1:             this.pos++;
1:         return retVal;
1:     }
1: 
1:     public int read(char[] cbuf, int off, int len) throws IOException {
1:         if (closed) {
1:             throw new IOException("Reader closed");
1:         }
1:         if (pos >= maxPos) {
1:             return -1;
1:         }
1:         updateReaderIfRequired();
1:         // Adjust length if required, read data and update position.
1:         int adjustedLen = (int)Math.min(len, maxPos - pos);
1:         int readCount = this.streamReader.read(cbuf, off, adjustedLen);
1:         if (readCount > 0) {
1:             this.pos += readCount;
1:         }
1:         return readCount;
1:     }
1: 
1:     public long skip(long len) throws IOException {
1:         if (closed) {
1:             throw new IOException("Reader closed");
1:         }
1:         if (pos >= maxPos) {
1:             return 0;
1:         }
1:         updateReaderIfRequired();
1:         // Adjust length if required, skip data and update position.
1:         long adjustedLen = Math.min(len, maxPos - pos);
1:         long skipped = this.streamReader.skip(adjustedLen);
1:         if (skipped > 0) {
1:             this.pos += skipped;
1:         }
1:         return skipped;
1:      * Closes this reader.
1:      * <p>
1:      * An {@code IOException} will be thrown if any of the read or skip methods
1:      * are called after the reader has been closed.
1:      *
1:      * @throws IOException if an error occurs while closing
1:         if (!closed) {
1:             closed = true;
1:             // Can be null if the stream is created and closed immediately.
1:             if (this.streamReader != null) {
1:                 this.streamReader.close();
1:     }
1:      * Updates the reader if the underlying data has been modified.
1:      * <p>
1:      * There are two cases to deal with:
1:      * <ol> <li>The underlying data of the internal Clob representation has been
1:      *          modified.</li>
1:      *      <li>The internal Clob representation has changed.</li>
1:      * </ol>
1:      * The latter case happens when a read-only Clob, represented as a stream
1:      * into store, is modified by the user and a new temporary internal
1:      * representation is created.
1:      *
1:      * @throws IOException if verifying or updating the reader fails
1:     private void updateReaderIfRequired() throws IOException {
1:         // Case two as described above; changed representation.
1:         if (iClob.isReleased()) {
1:             iClob = this.clob.getInternalClob();
1:             lastUpdateCount = -1;
1:             // Check again. If both are closed, the Clob itself is closed.
1:             if (iClob.isReleased()) {
1:                 close();
1:                 return;
1:         // Case one as described above; content has been modified.
1:         if (lastUpdateCount != iClob.getUpdateCount()) {
1:             lastUpdateCount = iClob.getUpdateCount();
1:             try {
1:                 this.streamReader = iClob.getReader(pos);
1:             } catch (SQLException sqle) {
1:                 throw new IOException(sqle.getMessage());
commit:e8fd686
/////////////////////////////////////////////////////////////////////////
commit:fcdce55
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.ClobUpdatableReader
/////////////////////////////////////////////////////////////////////////
0:  * <code>ClobUpdatableReader</code> is used to create a <code>Reader</code>
0:  * 
1: final class ClobUpdatableReader extends Reader {
/////////////////////////////////////////////////////////////////////////
0:     ClobUpdatableReader (LOBInputStream stream, ConnectionChild conChild)
/////////////////////////////////////////////////////////////////////////
0:     ClobUpdatableReader (EmbedClob clob) throws IOException, SQLException {
/////////////////////////////////////////////////////////////////////////
0:      * Construct an <code>ClobUpdatableReader<code> using the 
0:      * 
/////////////////////////////////////////////////////////////////////////
0:     ClobUpdatableReader (EmbedClob clob, long pos, long len) 
commit:6b5cc24
/////////////////////////////////////////////////////////////////////////
0:     private InputStream stream = null;
/////////////////////////////////////////////////////////////////////////
1: 
0:         init (stream, 0);
/////////////////////////////////////////////////////////////////////////
0:         // A subset of the Clob has not been requested.
0:         // Hence set maxPos to -1.
1: 
0:         InternalClob internalClob = clob.getInternalClob();
0:         materialized = internalClob.isWritable();        
0:         if (materialized) {
0:             long byteLength = internalClob.getByteLength();
0:             this.stream = internalClob.getRawByteStream();
0:             init ((LOBInputStream)stream, 0);
0:         } else {
0:             if (SanityManager.DEBUG) {
0:                 SanityManager.ASSERT(internalClob instanceof StoreStreamClob,
0:                         "Wrong type of internal clob representation: " +
0:                         internalClob.toString());
1:             }
0:             // Since this representation is read-only, the stream never has to
0:             // update itself, until the Clob representation itself has been
0:             // changed. That even will be detected by {@link #updateIfRequired}.
0:             this.streamReader = internalClob.getReader(1L);
0:             this.pos = 0L;
1:         }
/////////////////////////////////////////////////////////////////////////
0:         this.maxPos = pos + len;
1: 
0:         InternalClob internalClob = clob.getInternalClob();
0:         materialized = internalClob.isWritable();        
0:         if (materialized) {
0:             long byteLength = internalClob.getByteLength();
0:             this.stream = internalClob.getRawByteStream();
0:             // Position the stream on pos using the init method.
0:             init ((LOBInputStream)stream, pos);
0:         } else {
0:             if (SanityManager.DEBUG) {
0:                 SanityManager.ASSERT(internalClob instanceof StoreStreamClob,
0:                         "Wrong type of internal clob representation: " +
0:                         internalClob.toString());
1:             }
0:             // Since this representation is read-only, the stream never has to
0:             // update itself, until the Clob representation itself has been
0:             // changed. That even will be detected by {@link #updateIfRequired}.
0:             this.streamReader = internalClob.getReader(1L);
0:             this.pos = 0L;
1:         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (clob.getInternalClob().isWritable()) {
0:                     stream = clob.getInternalClob().getRawByteStream();
commit:80424bf
/////////////////////////////////////////////////////////////////////////
0: import java.io.EOFException;
0: import java.io.InputStream;
1: import java.sql.SQLException;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
0:     private InputStream stream;
0:     /** flag to indicate if its associated with materialized clob */
0:     private boolean materialized;
0:     /** clob object this object is associated */
1:     private final EmbedClob clob;
/////////////////////////////////////////////////////////////////////////
0:         clob = null;
0:         materialized = true;
0:         init (stream, 0);
1:     }
1: 
1:     /**
0:      * Constructs a <code>Reader</code> over a <code>LOBInputStream</code>.
0:      * @param clob EmbedClob this Reader is associated to.
0:      * @throws IOException
0:      * @throws SQLException
1:      */
0:     ClobUpdateableReader (EmbedClob clob) throws IOException, SQLException {
0:         materialized = clob.isWritable();        
0:         this.clob = clob;
0:         this.conChild = clob;
0:         //getting bytelength make some time leave exisitng streams
0:         //unusable
0:         long byteLength = clob.getByteLength();
0:         this.stream = clob.getInternalStream ();
0:         init (0, byteLength);
/////////////////////////////////////////////////////////////////////////
0:     public int read(char[] cbuf, int off, int len) throws IOException {        
0:         updateIfRequired();
/////////////////////////////////////////////////////////////////////////
0:     private void init(LOBInputStream stream, long skip) 
0:                                                     throws IOException {
0:             if (skipBy == 0) {
0:                 if (streamReader.read() == -1) {
0:                     throw new EOFException (
0:                                  MessageService.getCompleteMessage (
0:                                  SQLState.STREAM_EOF, new Object [0]));
1:                 }
0:                 skipBy = 1;
1:             }
0:             remainToSkip -= skipBy;
1:         }
0:         pos = skip;
1:     }    
1: 
0:     private void init (long skip, long streamLength) throws IOException {
0:         streamReader = new UTF8Reader (stream, 0, streamLength,
0:                                         conChild, 
0:                                 conChild.getConnectionSynchronization());
0:         long remainToSkip = skip;
0:         while (remainToSkip > 0) {
0:             long skipBy = streamReader.skip(remainToSkip);
1:     }
1: 
1:     /**
0:      * Updates the stream if underlying clob is modified since
0:      * this reader was created. 
0:      * If the stream is associated with a materialized clob, it 
0:      * checks if the underlying clob is updated since last read and 
0:      * updates itself if it is. If the stream is associated with 
0:      * non materialized clob and clob is materialized since last read it 
0:      * fetches the stream again and sets the position to current position.
0:      * @throws IOException
1:      */
0:     private void updateIfRequired () throws IOException {
0:         if (materialized) {
0:             LOBInputStream lobStream = (LOBInputStream) stream;
0:             if (lobStream.isObsolete()) {
0:                 lobStream.reInitialize();
0:                 init (lobStream, pos);
1:             }
1:         }
0:         else {
0:             //clob won't be null if the stream wasn't materialized
0:             //but still try to be safe
0:             if (SanityManager.DEBUG) {
0:                 SanityManager.ASSERT (!(clob == null), 
0:                         "Internal error while updating stream");
1:             }
0:             if (clob.isWritable ()) {
0:                 try {
0:                     stream = clob.getInternalStream();
1:                 }
0:                 catch (SQLException e) {
0:                     IOException ioe = new IOException (e.getMessage());
0:                     ioe.initCause (e);
0:                     throw ioe;
1:                 }
0:                 init ((LOBInputStream) stream, pos);
0:                 materialized = true;
1:             }
1:         }
1:     }
commit:e5b15ce
/////////////////////////////////////////////////////////////////////////
0:  * <code>ClobUpdateableReader</code> is used to create a <code>Reader</code>
0:  * over a <code>LOBInputStream</code>.
1:  * <p>
1:  * This class is aware that the underlying stream can be modified and
1:  * reinitializes itself if it detects any change in the stream. This
1:  * invalidates the cache so the changes are reflected immediately.
0:  *
0:  * @see LOBInputStream
1:     /** Reader accessing the Clob data and doing the work. */
0:     /** Character position of this reader. */
0:     /** Underlying stream of byte data. */
0:     /** Connection object used to obtain synchronization-object. */
0:      * Constructs a <code>Reader</code> over a <code>LOBInputStream</code>.
0:      * @param stream underlying stream of byte data
0:      * @param conChild a connection object used to obtain synchronization-object
/////////////////////////////////////////////////////////////////////////
0:      * @param skip number of characters to skip to reach initial position
0:      * @throws IOException if a streaming error occurs
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1: 
0:    Derby - Class org.apache.derby.impl.jdbc.ClobUpdateableReader
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
commit:e1fc783
/////////////////////////////////////////////////////////////////////////
1: /*
0:  *
0:  * Derby - Class ClobUpdateableReader
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
0:  * either express or implied. See the License for the specific
0:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derby.impl.jdbc;
0: 
1: import java.io.IOException;
1: import java.io.Reader;
0: 
1: /**
0:  * ClobUpdateableReader is used to create Reader over InputStream. This class is
0:  * aware that underlying stream can be modified and reinitializes itsef if it 
0:  * detects any change in stream hence invalidating the cache so the changes are 
0:  * reflected immidiatly.
1:  */
0: 
0: final class ClobUpdateableReader extends Reader {
0:     
1:     private Reader streamReader;
1:     private long pos;
0:     private LOBInputStream stream;
0:     private ConnectionChild conChild;
0:     
1:     /**
0:      * Constructs a Reader over a LOBInputStream.
0:      * @param stream 
0:      * @throws IOException
1:      */
0:     ClobUpdateableReader (LOBInputStream stream, ConnectionChild conChild)
0:                                                         throws IOException {
0:         this.conChild = conChild;
0:         this.stream = stream;
0:         init (0);
0:     }
0:         
1:     /**
0:      * Reads chars into the cbuf char array. Changes made in uderlying storage 
0:      * will be reflected immidiatly from the corrent position.
0:      * @param cbuf buffer to read into
0:      * @param off offet of the cbuf array to start writing read chars
0:      * @param len number of chars to be read
0:      * @return number of bytes read
0:      * @throws IOException
1:      */
0:     public int read(char[] cbuf, int off, int len) throws IOException {
0:         if (stream.isObsolete()) {
0:             stream.reInitialize();
0:             init (pos);
0:         }
0:         int ret = streamReader.read (cbuf, off, len);
0:         if (ret >= 0) {
0:             pos += ret;
0:         }
0:         return ret;
0:     }
0: 
1:     /**
0:      * Closes the reader.
0:      * @throws IOException
1:      */
1:     public void close() throws IOException {
0:         streamReader.close();
0:     }
0:     
1:     /**
0:      * Initializes the streamReader and skips to the given position.
0:      * @param skip 
0:      * @throws IOException
1:      */
0:     private void init(long skip) throws IOException {
0:         streamReader = new UTF8Reader (stream, 0, stream.length (), 
0:                                         conChild, 
0:                                 conChild.getConnectionSynchronization());
0:         long remainToSkip = skip;
0:         while (remainToSkip > 0) {
0:             long skipBy = streamReader.skip(remainToSkip);
0:             remainToSkip -= skipBy;
0:         }
0:         pos = skip;
0:     }    
0: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ed0be21
/////////////////////////////////////////////////////////////////////////
0:                     throw Util.newIOException(e);
commit:5b41e45
/////////////////////////////////////////////////////////////////////////
0:         // Hence set length to infinity (or as close as we get).
0:         this(clob, 0L, Long.MAX_VALUE);
/////////////////////////////////////////////////////////////////////////
0:             this.streamReader = internalClob.getReader(pos + 1);
0:             this.pos = pos;
commit:debc0fc
/////////////////////////////////////////////////////////////////////////
1:      * Position in Clob where to stop reading unless EOF is reached first.
/////////////////////////////////////////////////////////////////////////
0:         //Hence set maxPos to infinity (or as close as we get).
0:         this.maxPos = Long.MAX_VALUE;
/////////////////////////////////////////////////////////////////////////
0:         // Hence set maxPos to infinity (or as close as we get).
0:         this.maxPos = Long.MAX_VALUE;
/////////////////////////////////////////////////////////////////////////
0:         //If the stream has exceeded maxPos the read should return -1
0:         //signifying end of stream.
1:         if (pos >= maxPos) {
0:         int actualLength = (int) Math.min(len, maxPos - pos);
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:cd727e7
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Position in Clob where to stop reading.
0:      */
1:     private final long maxPos;
0:     
/////////////////////////////////////////////////////////////////////////
0:         //The subset of the Clob has not been requested. 
0:         //Hence set maxPos to -1.
0:         this.maxPos = -1;
/////////////////////////////////////////////////////////////////////////
0:         //The subset of the Clob
0:         //has not been requested.
0:         //Hence set maxPos to -1.
0:         this.maxPos = -1;
0:     }
0:     
0:     /**
0:      * Construct an <code>ClobUpdateableReader<code> using the 
0:      * <code>EmbedClob</code> received as parameter. The initial
0:      * position in the stream is set to <code>pos</code> and the
0:      * stream is restricted to a length of <code>len</code>.
0:      *
0:      * @param clob EmbedClob this stream is associated with.
0:      * @param pos initial position. The position starts from 0.
0:      * @param len The length to which the underlying <code>InputStream</code>
0:      *            has to be restricted.
0:      * @throws IOException
0:      * @throws SQLException
0:      */
0:     ClobUpdateableReader (EmbedClob clob, long pos, long len) 
0:     throws IOException, SQLException {
0:         materialized = clob.isWritable();        
0:         this.clob = clob;
0:         this.conChild = clob;
0:         //Get the Byte length from the Clob which can be 
0:         //passes to the init method.
0:         long byteLength = clob.getByteLength();
0:         //Initialize the InputStream with the underlying 
0:         //InputStream of the Clob.
0:         this.stream = clob.getInternalStream ();
0:         //position the stream on pos using the init method.
0:         init (pos, byteLength);
0:         //The length requested cannot exceed the length
0:         //of the underlying Clob object. Hence chose the
0:         //minimum of the length of the underlying Clob
0:         //object and requested length.
0:         maxPos = Math.min(clob.length(), pos + len);
/////////////////////////////////////////////////////////////////////////
0:         
0:         //If maxPos is not invalid and the current position inside the 
0:         //stream has exceeded maxPos the read sould return -1 signifying
0:         //end of stream.
0:         if (maxPos != -1 && pos >= maxPos) {
1:             return -1;
0:         }
0: 
0:         int actualLength = 0;
0:         //If maxPos is not invalid then ensure that the length(len) 
0:         //that is requested falls within the restriction set by maxPos.
0:         if(maxPos != -1) {
0:             actualLength 
0:                     = (int )Math.min(len, maxPos - pos);
0:         }
0:         else {
0:             //maxPos has not been set. Make maxPos the length requested.
0:             actualLength = len;
0:         }
0:         int ret = streamReader.read (cbuf, off, actualLength);
============================================================================