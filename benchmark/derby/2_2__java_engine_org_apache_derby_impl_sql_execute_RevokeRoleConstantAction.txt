1:ee59de8: /*
1:fe8c4c2: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.execute.RevokeRoleConstantAction
6:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.execute;
1:ee59de8: 
1:ee59de8: import java.util.Iterator;
1:ee59de8: import java.util.List;
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.sql.Activation;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eb38311: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:9c3b91c: import org.apache.derby.iapi.sql.conn.Authorizer;
1:4e3ddd7: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eb38311: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:ee59de8: import org.apache.derby.shared.common.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ee59de8: 
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  *  This class performs actions that are ALWAYS performed for a
1:ee59de8:  *  REVOKE role statement at execution time.
2:ee59de8:  *
1:ee59de8:  */
1:ee59de8: class RevokeRoleConstantAction extends DDLConstantAction {
1:ee59de8: 
1:ee59de8:     private List roleNames;
1:ee59de8:     private List grantees;
1:ee59de8:     private final boolean withAdminOption = false; // not impl.
1:ee59de8: 
1:ee59de8:     // CONSTRUCTORS
1:ee59de8:     /**
1:ee59de8:      *  Make the ConstantAction for a CREATE ROLE statement.
1:ee59de8:      *  When executed, will create a role by the given name.
1:ee59de8:      *
1:ee59de8:      *  @param roleNames     List of the name of the role names being revoked
1:ee59de8:      *  @param grantees       List of the authorization ids granted to role
1:ee59de8:      */
1:ee59de8:     public RevokeRoleConstantAction(List roleNames, List grantees) {
1:ee59de8:         this.roleNames = roleNames;
1:ee59de8:         this.grantees = grantees;
2:ee59de8:     }
1:ee59de8: 
1:ee59de8:     // INTERFACE METHODS
1:ee59de8: 
1:ee59de8:     /**
1:eb38311:      * This is the guts of the Execution-time logic for REVOKE role.
1:ee59de8:      *
1:88d10d4:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
1:ee59de8:      */
1:ee59de8:     public void executeConstantAction(Activation activation)
1:ee59de8:             throws StandardException {
1:ee59de8: 
1:ee59de8:         LanguageConnectionContext lcc =
1:ee59de8:             activation.getLanguageConnectionContext();
1:ee59de8:         DataDictionary dd = lcc.getDataDictionary();
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8: 
1:9f60172:         final String grantor = lcc.getCurrentUserId(activation);
1:ee59de8: 
1:ee59de8:         dd.startWriting(lcc);
1:ee59de8: 
1:ee59de8:         for (Iterator rIter = roleNames.iterator(); rIter.hasNext();) {
1:ee59de8:             String role = (String)rIter.next();
1:ee59de8: 
1:9c3b91c:             if (role.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
1:9c3b91c:                 throw StandardException.
1:9c3b91c:                     newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
1:9c3b91c:             }
1:9c3b91c: 
1:ee59de8:             for (Iterator gIter = grantees.iterator(); gIter.hasNext();) {
1:ee59de8:                 String grantee = (String)gIter.next();
1:ee59de8: 
1:ee59de8:                 // check that role exists
1:fe8c4c2:                 RoleGrantDescriptor rdDef =
1:fe8c4c2:                     dd.getRoleDefinitionDescriptor(role);
1:ee59de8: 
1:fe8c4c2:                 if (rdDef == null) {
1:ee59de8:                     throw StandardException.
1:ee59de8:                         newException(SQLState.ROLE_INVALID_SPECIFICATION, role);
1:ee59de8:                 }
1:ee59de8: 
1:ee59de8:                 // Check that role is granted to us (or PUBLIC) with
1:ee59de8:                 // WITH ADMIN option so we can grant (and hence
1:ee59de8:                 // revoke) it. For database owner, a role definition
1:ee59de8:                 // always fulfills this requirement.  If we implement
1:ee59de8:                 // granting with WITH ADMIN option later, we need to
1:ee59de8:                 // look for a grant to us or to PUBLIC which has WITH
1:ee59de8:                 // ADMIN. The role definition descriptor will not
1:ee59de8:                 // suffice in that case, so we need something like:
2:ee59de8:                 //
1:ee59de8:                 // rd = dd.findRoleGrantWithAdminToRoleOrPublic(grantor)
1:ee59de8:                 // if (rd != null) {
1:ee59de8:                 //   :
1:4e3ddd7:                 if (grantor.equals(lcc.getDataDictionary().
1:4e3ddd7:                                        getAuthorizationDatabaseOwner())) {
1:ee59de8:                     // All ok, we are database owner
1:fe8c4c2:                     if (SanityManager.DEBUG) {
1:ee59de8:                         SanityManager.ASSERT(
1:fe8c4c2:                             rdDef.getGrantee().equals(grantor),
1:4e3ddd7:                             "expected database owner in role grant descriptor");
1:ee59de8:                         SanityManager.ASSERT(
1:fe8c4c2:                             rdDef.isWithAdminOption(),
1:ee59de8:                             "expected role definition to have ADMIN OPTION");
1:ee59de8:                     }
1:ee59de8:                 } else {
1:ee59de8:                     throw StandardException.newException
1:ee59de8:                         (SQLState.AUTH_ROLE_DBO_ONLY, "REVOKE role");
1:ee59de8:                 }
1:ee59de8: 
1:fe8c4c2:                 RoleGrantDescriptor rd =
1:fe8c4c2:                     dd.getRoleGrantDescriptor(role, grantee, grantor);
1:ee59de8: 
1:ee59de8:                 if (rd != null && withAdminOption) {
1:ee59de8:                     // NOTE: Never called yet, withAdminOption not yet
1:ee59de8:                     // implemented.
1:ee59de8: 
1:e4caed2:                     if (SanityManager.DEBUG) {
1:e4caed2:                         SanityManager.NOTREACHED();
1:e4caed2:                     }
1:e4caed2: 
1:ee59de8:                     // revoke only the ADMIN OPTION from grantee
1:eb38311:                     //
1:ee59de8:                     if (rd.isWithAdminOption()) {
1:e4caed2:                         // Invalidate and remove old descriptor and add a new
1:e4caed2:                         // one without admin option.
1:ee59de8:                         //
1:eb38311:                         // RoleClosureIterator rci =
1:eb38311:                         //     dd.createRoleClosureIterator
1:eb38311:                         //     (activation.getTransactionController(),
1:eb38311:                         //      role, false);
1:eb38311:                         //
1:eb38311:                         // String r;
1:eb38311:                         // while ((r = rci.next()) != null) {
1:eb38311:                         //   rdDef = dd.getRoleDefinitionDescriptor(r);
1:eb38311:                         //
2:eb38311:                         //   dd.getDependencyManager().invalidateFor
1:eb38311:                         //       (rdDef, DependencyManager.REVOKE_ROLE, lcc);
1:eb38311:                         // }
1:eb38311:                         //
1:eb38311:                         // rd.drop(lcc);
1:eb38311:                         // rd.setWithAdminOption(false);
1:eb38311:                         // dd.addDescriptor(rd,
1:eb38311:                         //                  null,  // parent
1:eb38311:                         //                  DataDictionary.SYSROLES_CATALOG_NUM,
1:eb38311:                         //                  false, // no duplicatesAllowed
1:eb38311:                         //                  tc);
1:ee59de8:                     } else {
1:ee59de8:                         activation.addWarning
1:ee59de8:                             (StandardException.newWarning
1:ee59de8:                              (SQLState.LANG_WITH_ADMIN_OPTION_NOT_REVOKED,
1:ee59de8:                               role, grantee));
1:fe8c4c2:                     }
1:ee59de8:                 } else if (rd != null) {
1:eb38311:                     // Normal revoke of role from grantee.
1:eb38311:                     //
1:eb38311:                     // When a role is revoked, for every role in its grantee
1:e4caed2:                     // closure, we call the REVOKE_ROLE action. It is used to
1:e4caed2:                     // invalidate dependent objects (constraints, triggers and
1:e4caed2:                     // views).  Note that until DERBY-1632 is fixed, we risk
1:e4caed2:                     // dropping objects not really dependent on this role, but
1:e4caed2:                     // one some other role just because it inherits from this
1:e4caed2:                     // one. See also DropRoleConstantAction.
1:eb38311:                     RoleClosureIterator rci =
1:eb38311:                         dd.createRoleClosureIterator
1:eb38311:                         (activation.getTransactionController(),
1:eb38311:                          role, false);
1:eb38311: 
1:eb38311:                     String r;
1:eb38311:                     while ((r = rci.next()) != null) {
1:eb38311:                         rdDef = dd.getRoleDefinitionDescriptor(r);
1:eb38311: 
2:eb38311:                         dd.getDependencyManager().invalidateFor
1:eb38311:                             (rdDef, DependencyManager.REVOKE_ROLE, lcc);
1:eb38311:                     }
1:eb38311: 
2:ee59de8:                     rd.drop(lcc);
1:eb38311: 
1:ee59de8:                 } else {
1:ee59de8:                     activation.addWarning
1:ee59de8:                         (StandardException.newWarning
1:ee59de8:                          (SQLState.LANG_ROLE_NOT_REVOKED, role, grantee));
1:ee59de8:                 }
1:ee59de8:             }
1:ee59de8:         }
1:ee59de8:     }
1:eb38311: 
1:fe8c4c2: 
1:ee59de8:     // OBJECT SHADOWS
1:fe8c4c2: 
1:ee59de8:     public String toString()
1:ee59de8:     {
1:ee59de8:         // Do not put this under SanityManager.DEBUG - it is needed for
1:ee59de8:         // error reporting.
1:ee59de8: 
1:ee59de8:         StringBuffer sb1 = new StringBuffer();
1:ee59de8:         for (Iterator it = roleNames.iterator(); it.hasNext();) {
1:ee59de8:             if( sb1.length() > 0) {
1:ee59de8:                 sb1.append( ", ");
1:ee59de8:             }
1:ee59de8:             sb1.append( it.next().toString());
1:ee59de8:         }
1:ee59de8: 
1:ee59de8:         StringBuffer sb2 = new StringBuffer();
1:ee59de8:         for (Iterator it = grantees.iterator(); it.hasNext();) {
1:ee59de8:             if( sb2.length() > 0) {
1:ee59de8:                 sb2.append( ", ");
1:ee59de8:             }
1:ee59de8:             sb2.append( it.next().toString());
1:ee59de8:         }
1:ee59de8:         return ("REVOKE " +
1:ee59de8:                 sb1.toString() +
1:ee59de8:                 " FROM: " +
1:ee59de8:                 sb2.toString() +
1:ee59de8:                 "\n");
1:ee59de8:     }
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         final String grantor = lcc.getCurrentUserId(activation);
commit:88d10d4
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
commit:e4caed2
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.derby.iapi.sql.execute.
0:      *      ConstantAction#executeConstantAction
/////////////////////////////////////////////////////////////////////////
1:                     if (SanityManager.DEBUG) {
1:                         SanityManager.NOTREACHED();
1:                     }
1: 
1:                         // Invalidate and remove old descriptor and add a new
1:                         // one without admin option.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     // closure, we call the REVOKE_ROLE action. It is used to
1:                     // invalidate dependent objects (constraints, triggers and
1:                     // views).  Note that until DERBY-1632 is fixed, we risk
1:                     // dropping objects not really dependent on this role, but
1:                     // one some other role just because it inherits from this
1:                     // one. See also DropRoleConstantAction.
/////////////////////////////////////////////////////////////////////////
commit:eb38311
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
/////////////////////////////////////////////////////////////////////////
1:      * This is the guts of the Execution-time logic for REVOKE role.
0:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
/////////////////////////////////////////////////////////////////////////
0:                         // Do invalidation.
1:                         //
1:                         // RoleClosureIterator rci =
1:                         //     dd.createRoleClosureIterator
1:                         //     (activation.getTransactionController(),
1:                         //      role, false);
1:                         //
1:                         // String r;
1:                         // while ((r = rci.next()) != null) {
1:                         //   rdDef = dd.getRoleDefinitionDescriptor(r);
1:                         //
1:                         //   dd.getDependencyManager().invalidateFor
1:                         //       (rdDef, DependencyManager.REVOKE_ROLE, lcc);
1:                         //
1:                         //   dd.getDependencyManager().invalidateFor
0:                         //       (rdDef,
0:                         //        DependencyManager.INTERNAL_RECOMPILE_REQUEST,
0:                         //        lcc);
1:                         // }
1:                         //
1:                         // rd.drop(lcc);
1:                         // rd.setWithAdminOption(false);
1:                         // dd.addDescriptor(rd,
1:                         //                  null,  // parent
1:                         //                  DataDictionary.SYSROLES_CATALOG_NUM,
1:                         //                  false, // no duplicatesAllowed
1:                         //                  tc);
/////////////////////////////////////////////////////////////////////////
1:                     // Normal revoke of role from grantee.
1:                     // When a role is revoked, for every role in its grantee
0:                     // closure, we call two invalidate actions.  REVOKE_ROLE
0:                     // and INTERNAL_RECOMPILE_REQUEST.  The latter is used to
0:                     // force recompilation of dependent prepared statements,
0:                     // the former to drop dependent objects (constraints,
0:                     // triggers and views).  Note that until DERBY-1632 is
0:                     // fixed, we risk dropping objects not really dependent on
0:                     // this role, but one some other role just because it
0:                     // inherits from this one.
1:                     RoleClosureIterator rci =
1:                         dd.createRoleClosureIterator
1:                         (activation.getTransactionController(),
1:                          role, false);
1: 
1:                     String r;
1:                     while ((r = rci.next()) != null) {
1:                         rdDef = dd.getRoleDefinitionDescriptor(r);
1: 
1:                         dd.getDependencyManager().invalidateFor
1:                             (rdDef, DependencyManager.REVOKE_ROLE, lcc);
1: 
1:                         dd.getDependencyManager().invalidateFor
0:                             (rdDef,
0:                              DependencyManager.INTERNAL_RECOMPILE_REQUEST,
0:                              lcc);
1:                     }
1: 
1: 
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1:                 RoleGrantDescriptor rdDef =
1:                     dd.getRoleDefinitionDescriptor(role);
1:                 if (rdDef == null) {
/////////////////////////////////////////////////////////////////////////
1:                             rdDef.getGrantee().equals(grantor),
1:                             rdDef.isWithAdminOption(),
/////////////////////////////////////////////////////////////////////////
1:                 RoleGrantDescriptor rd =
1:                     dd.getRoleGrantDescriptor(role, grantee, grantor);
/////////////////////////////////////////////////////////////////////////
1: 
1:                         if (SanityManager.DEBUG) {
0:                             SanityManager.NOTREACHED();
1:                         }
1: 
0:                         // do some invalidation
1: 
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
/////////////////////////////////////////////////////////////////////////
0:                 RoleGrantDescriptor rd = dd.getRoleDefinitionDescriptor(role);
/////////////////////////////////////////////////////////////////////////
1:                 if (grantor.equals(lcc.getDataDictionary().
1:                                        getAuthorizationDatabaseOwner())) {
0:                             rd.getGrantee().equals(grantor),
1:                             "expected database owner in role grant descriptor");
commit:9c3b91c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.Authorizer;
/////////////////////////////////////////////////////////////////////////
1:             if (role.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
1:                 throw StandardException.
1:                     newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
1:             }
1: 
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.RevokeRoleConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.shared.common.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: 
1: /**
1:  *  This class performs actions that are ALWAYS performed for a
1:  *  REVOKE role statement at execution time.
1:  *
1:  */
1: class RevokeRoleConstantAction extends DDLConstantAction {
1: 
1:     private List roleNames;
1:     private List grantees;
1:     private final boolean withAdminOption = false; // not impl.
1: 
1:     // CONSTRUCTORS
1:     /**
1:      *  Make the ConstantAction for a CREATE ROLE statement.
1:      *  When executed, will create a role by the given name.
1:      *
1:      *  @param roleNames     List of the name of the role names being revoked
1:      *  @param grantees       List of the authorization ids granted to role
1:      */
1:     public RevokeRoleConstantAction(List roleNames, List grantees) {
1:         this.roleNames = roleNames;
1:         this.grantees = grantees;
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1:     /**
0:      *  This is the guts of the Execution-time logic for REVOKE role.
1:      *
0:      *  @see ConstantAction#executeConstantAction
1:      *
0:      * @exception StandardException     Thrown on failure
1:      */
1:     public void executeConstantAction(Activation activation)
1:             throws StandardException {
1: 
1:         LanguageConnectionContext lcc =
1:             activation.getLanguageConnectionContext();
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
0:         final String grantor = lcc.getAuthorizationId();
1: 
1:         dd.startWriting(lcc);
1: 
1:         for (Iterator rIter = roleNames.iterator(); rIter.hasNext();) {
1:             String role = (String)rIter.next();
1: 
1:             for (Iterator gIter = grantees.iterator(); gIter.hasNext();) {
1:                 String grantee = (String)gIter.next();
1: 
1:                 // check that role exists
0:                 RoleDescriptor rd = dd.getRoleDefinitionDescriptor(role);
1: 
0:                 if (rd == null) {
1:                     throw StandardException.
1:                         newException(SQLState.ROLE_INVALID_SPECIFICATION, role);
1:                 }
1: 
1:                 // Check that role is granted to us (or PUBLIC) with
1:                 // WITH ADMIN option so we can grant (and hence
1:                 // revoke) it. For database owner, a role definition
1:                 // always fulfills this requirement.  If we implement
1:                 // granting with WITH ADMIN option later, we need to
1:                 // look for a grant to us or to PUBLIC which has WITH
1:                 // ADMIN. The role definition descriptor will not
1:                 // suffice in that case, so we need something like:
1:                 //
1:                 // rd = dd.findRoleGrantWithAdminToRoleOrPublic(grantor)
1:                 // if (rd != null) {
1:                 //   :
0:                 if (grantor.equals(rd.getGrantee())) {
1:                     // All ok, we are database owner
0:                     if (SanityManager.DEBUG) {
1:                         SanityManager.ASSERT(
0:                             lcc.getDataDictionary().
0:                             getAuthorizationDatabaseOwner().
0:                             equals(grantor),
0:                             "expected database owner in role descriptor");
1:                         SanityManager.ASSERT(
0:                             rd.isWithAdminOption(),
1:                             "expected role definition to have ADMIN OPTION");
1:                     }
1:                 } else {
1:                     throw StandardException.newException
1:                         (SQLState.AUTH_ROLE_DBO_ONLY, "REVOKE role");
1:                 }
1: 
0:                 rd = dd.getRoleGrantDescriptor(role, grantee, grantor);
1: 
1:                 if (rd != null && withAdminOption) {
1:                     // NOTE: Never called yet, withAdminOption not yet
1:                     // implemented.
1: 
1:                     // revoke only the ADMIN OPTION from grantee
1:                     //
1:                     if (rd.isWithAdminOption()) {
0:                         // Remove old descriptor and add a new one
0:                         // without admin option.
1:                         rd.drop(lcc);
0:                         rd.setWithAdminOption(false);
0:                         dd.addDescriptor(rd,
0:                                          null,  // parent
0:                                          DataDictionary.SYSROLES_CATALOG_NUM,
0:                                          false, // no duplicatesAllowed
0:                                          tc);
1:                     } else {
1:                         activation.addWarning
1:                             (StandardException.newWarning
1:                              (SQLState.LANG_WITH_ADMIN_OPTION_NOT_REVOKED,
1:                               role, grantee));
1:                     }
1:                 } else if (rd != null) {
0:                     // normal revoke of role from grantee
1:                     //
1:                     rd.drop(lcc);
1:                 } else {
1:                     activation.addWarning
1:                         (StandardException.newWarning
1:                          (SQLState.LANG_ROLE_NOT_REVOKED, role, grantee));
1:                 }
1:             }
1:         }
1:     }
1: 
1: 
1:     // OBJECT SHADOWS
1: 
1:     public String toString()
1:     {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1: 
1:         StringBuffer sb1 = new StringBuffer();
1:         for (Iterator it = roleNames.iterator(); it.hasNext();) {
1:             if( sb1.length() > 0) {
1:                 sb1.append( ", ");
1:             }
1:             sb1.append( it.next().toString());
1:         }
1: 
1:         StringBuffer sb2 = new StringBuffer();
1:         for (Iterator it = grantees.iterator(); it.hasNext();) {
1:             if( sb2.length() > 0) {
1:                 sb2.append( ", ");
1:             }
1:             sb2.append( it.next().toString());
1:         }
1:         return ("REVOKE " +
1:                 sb1.toString() +
1:                 " FROM: " +
1:                 sb2.toString() +
1:                 "\n");
1:     }
1: }
============================================================================