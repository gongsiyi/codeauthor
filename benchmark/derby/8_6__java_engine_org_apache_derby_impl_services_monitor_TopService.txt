1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.monitor.TopService
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.PersistentService;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:f36ac79: import org.apache.derby.iapi.util.InterruptStatus;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.reference.EngineType;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:eac0369: import java.util.Vector;
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Locale;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A description of an instance of a module.
1:eac0369: */
1:eac0369: 
1:eac0369: 
1:7a92d1f: final class TopService {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Fields.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The idenity of this service, note that it may not be active yet.
1:eac0369: 	*/
1:7a92d1f: 	ProtocolKey key;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The top module instance
1:eac0369: 	*/
1:7a92d1f: 	ModuleInstance topModule;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		List of protocols.
1:eac0369: 	*/
1:073b862: 	Hashtable<ProtocolKey,ModuleInstance>		protocolTable;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	*/
1:073b862: 	Vector<ModuleInstance>		moduleInstances;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	*/
1:7a92d1f: 	BaseMonitor	monitor;
1:eac0369: 
1:7a92d1f: 	boolean inShutdown;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The type of service this was created by. If null then this is a non-persistent service.
1:eac0369: 	*/
1:7a92d1f: 	PersistentService serviceType;
1:eac0369: 
1:eac0369: 	Locale serviceLocale;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 
1:eac0369: 	TopService(BaseMonitor monitor) {
1:eac0369: 		super();
1:eac0369: 		this.monitor = monitor;
1:073b862: 		protocolTable = new Hashtable<ProtocolKey,ModuleInstance>();
1:073b862: 		moduleInstances = new Vector<ModuleInstance>(0, 5);
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	TopService(BaseMonitor monitor, ProtocolKey key, PersistentService serviceType, Locale serviceLocale)
1:eac0369: 	{
1:eac0369: 		this(monitor);
1:eac0369: 
1:eac0369: 		this.key = key;
1:eac0369: 		this.serviceType = serviceType;
1:eac0369: 		this.serviceLocale = serviceLocale;
1:eac0369: 	}
1:eac0369: 
1:7a92d1f: 	void setTopModule(Object instance) {
1:eac0369: 		synchronized (this) {
1:f0e75f3:             ModuleInstance module = findModuleInstance(instance);
1:f0e75f3:             if (module != null) {
1:f0e75f3:                 topModule = module;
1:f0e75f3:                 notifyAll();
1:f0e75f3:             }
1:48ceb6e: 
1:eac0369: 			// now add an additional entry into the hashtable
1:eac0369: 			// that maps the server name as seen by the user
1:eac0369: 			// onto the top module. This allows modules to find their
1:eac0369: 			// top most service moduel using the monitor.getServiceName() call,
1:eac0369: 			// e.g. Monitor.findModule(ref, inferface, Monitor.getServiceName(ref));
1:eac0369: 			if (getServiceType() != null) {
1:eac0369: 				ProtocolKey userKey = new ProtocolKey(key.getFactoryInterface(),
1:eac0369: 					monitor.getServiceName(instance));
1:eac0369: 				addToProtocol(userKey, topModule);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:7a92d1f: 	Object getService() {
1:eac0369: 
1:eac0369: 		return topModule.getInstance();
1:eac0369: 	}
1:eac0369: 
1:7a92d1f: 	boolean isPotentialService(ProtocolKey otherKey) {
1:eac0369: 
1:eac0369: 
1:eac0369: 		String otherCanonicalName;
1:eac0369: 
1:eac0369: 		if (serviceType == null)
1:eac0369: 			otherCanonicalName = otherKey.getIdentifier();
1:eac0369: 		else {
1:3982b7d: 			try
1:3982b7d: 			{
1:3982b7d: 				otherCanonicalName = serviceType.getCanonicalServiceName(otherKey.getIdentifier());
1:3982b7d: 			} catch (StandardException se)
1:3982b7d: 			{
1:3982b7d: 				return false;
1:3982b7d: 			}
1:eac0369: 
1:eac0369: 			// if the service name cannot be converted into a canonical name then it is not a service.
1:eac0369: 			if (otherCanonicalName == null)
3:eac0369: 				return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (topModule != null)
1:eac0369: 			return topModule.isTypeAndName(serviceType, key.getFactoryInterface(), otherCanonicalName);
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (!otherKey.getFactoryInterface().isAssignableFrom(key.getFactoryInterface()))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		return serviceType.isSameService(key.getIdentifier(), otherCanonicalName);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	boolean isActiveService() {
1:eac0369: 		synchronized (this) {
1:eac0369: 			return (topModule != null);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	boolean isActiveService(ProtocolKey otherKey) {
1:eac0369: 
1:eac0369: 		synchronized (this) {
1:eac0369: 			if (inShutdown)
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			if (!isPotentialService(otherKey))
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			if (topModule != null) {
1:eac0369: 				if (SanityManager.DEBUG) {
1:eac0369: 					SanityManager.ASSERT(topModule.isTypeAndName(serviceType,
1:eac0369: 						key.getFactoryInterface(), key.getIdentifier()));
1:eac0369: 				}
1:eac0369: 
2:eac0369: 				return true;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// now wait for topModule to be set
1:eac0369: 			while (!inShutdown && (topModule == null)) {
1:eac0369: 				try {
1:eac0369: 					wait();
1:eac0369: 				} catch (InterruptedException ioe) {
1:f36ac79:                     InterruptStatus.setInterrupted();
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (inShutdown)
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Find an module in the protocol table that supports the required protocol
1:eac0369: 		name combination and can handle the properties.
1:eac0369: 
1:eac0369: 		Returns the instance of the module or null if one does not exist in
1:eac0369: 		the protocol table.
1:eac0369: 	*/
1:7a92d1f: 	synchronized Object findModule(ProtocolKey key, boolean findOnly, Properties properties) {
1:eac0369: 
1:073b862: 		ModuleInstance module = protocolTable.get(key);
1:eac0369: 
1:eac0369: 		if (module == null)
1:eac0369: 			return null;
1:eac0369: 
1:eac0369: 		Object instance = module.getInstance();
1:eac0369: 
1:eac0369: 		if (findOnly || BaseMonitor.canSupport(instance, properties))
1:eac0369: 			return instance;
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:f0e75f3:     /**
1:f0e75f3:      * Find a {@code ModuleInstance} object whose {@code getInstance()} method
1:f0e75f3:      * returns the object specified by the {@code instance} parameter.
1:f0e75f3:      *
1:f0e75f3:      * @param instance the instance to look for
1:f0e75f3:      * @return a {@code ModuleInstance} object, or {@code null} if no match
1:f0e75f3:      * was found
1:f0e75f3:      */
1:f0e75f3:     private ModuleInstance findModuleInstance(Object instance) {
1:c6fc81e:         // DERBY-4018: Need to hold the synchronization over the entire loop
1:c6fc81e:         // to prevent concurrent modifications from causing an
1:c6fc81e:         // ArrayIndexOutOfBoundsException.
1:f0e75f3:         synchronized (moduleInstances) {
1:f0e75f3:             for (int i = 0; i < moduleInstances.size(); i++) {
1:073b862:                 ModuleInstance module = moduleInstances.get(i);
1:f0e75f3:                 if (module.getInstance() == instance) {
1:f0e75f3:                     return module;
1:f0e75f3:                 }
1:f0e75f3:             }
1:f0e75f3:         }
1:f0e75f3:         return null;
1:f0e75f3:     }
1:f0e75f3: 
1:eac0369: 	/**
1:eac0369: 		Boot a module, performs three steps.
1:eac0369: 
1:eac0369: 		<OL>
1:eac0369: 		<LI> Look for an existing module in the protocol table
1:eac0369: 		<LI> Look for a module in the implementation table that handles this protocol
1:eac0369: 		<LI> Create an instance that handles this protocol.
1:eac0369: 		</OL>
1:eac0369: 	*/
1:eac0369: 	Object bootModule(boolean create, Object service, ProtocolKey key, Properties properties) 
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		synchronized (this) {
1:eac0369: 			if (inShutdown)
1:eac0369: 				throw StandardException.newException(SQLState.SHUTDOWN_DATABASE, getKey().getIdentifier());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		//  see if this system already has a module that will work.
1:eac0369: 		Object instance = findModule(key, false, properties);
1:eac0369: 		if (instance != null)
1:eac0369: 			return instance;
1:eac0369: 		
1:eac0369: 		if (monitor.reportOn) {
1:eac0369: 			monitor.report("Booting Module   " + key.toString() + " create = " + create);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// see if a running implementation will handle this protocol
1:eac0369: 		synchronized (this) {
1:eac0369: 
1:c6fc81e:             for (int i = 0;; i++) {
1:c6fc81e:                 final ModuleInstance module;
1:c6fc81e: 
1:c6fc81e:                 // DERBY-4018: Synchronized block in order to close the window
1:c6fc81e:                 // between size() and elementAt() where the size may change
1:c6fc81e:                 // and result in an ArrayIndexOutOfBoundsException.
1:c6fc81e:                 synchronized (moduleInstances) {
1:c6fc81e:                     if (i < moduleInstances.size()) {
1:073b862:                         module = moduleInstances.get(i);
1:c6fc81e:                     } else {
1:c6fc81e:                         // No more instances to look at, break out of the loop.
1:c6fc81e:                         break;
1:c6fc81e:                     }
1:c6fc81e:                 }
1:eac0369: 
1:877a43d:                 // DERBY-2074: The module has not been properly booted, so we
1:877a43d:                 // cannot yet determine whether or not this is a module we can
1:877a43d:                 // use. Assume that we cannot use it and continue looking. We
1:877a43d:                 // may end up booting the module twice if the assumption
1:877a43d:                 // doesn't hold, but we'll detect and resolve that later when
1:877a43d:                 // we call addToProtocol().
1:877a43d:                 if (!module.isBooted()) {
1:877a43d:                     continue;
1:877a43d:                 }
1:877a43d: 
1:eac0369: 				if (!module.isTypeAndName((PersistentService) null, key.getFactoryInterface(), key.getIdentifier()))
1:eac0369: 					continue;
1:eac0369: 
1:eac0369: 				instance = module.getInstance();
1:eac0369: 				if (!BaseMonitor.canSupport(instance, properties))
1:eac0369: 					continue;
1:eac0369: 
1:eac0369: 				// add it to the protocol table, if this returns false then we can't use
1:eac0369: 				// this module, continue looking.
1:eac0369: 				if (!addToProtocol(key, module))
1:eac0369: 					continue;
1:eac0369: 
1:eac0369: 				if (monitor.reportOn) {
1:eac0369: 					monitor.report("Started Module   " + key.toString());
1:eac0369: 					monitor.report("  Implementation " + instance.getClass().getName());
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				return instance;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// try and load an instance that will support this protocol
1:eac0369: 		instance = monitor.loadInstance(key.getFactoryInterface(), properties);
1:eac0369: 		if (instance == null)
1:eac0369: 		{
1:eac0369: 			throw Monitor.missingImplementation(key.getFactoryInterface().getName());
1:eac0369: 		}
1:eac0369: 		ModuleInstance module = new ModuleInstance(instance, key.getIdentifier(), service,
1:eac0369: 				topModule == null ? (Object) null : topModule.getInstance());
1:eac0369: 
1:a32eb9f: 		moduleInstances.add(module);
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			BaseMonitor.boot(instance, create, properties);
1:eac0369: 		} catch (StandardException se) {
1:a32eb9f: 			moduleInstances.remove(module);
1:eac0369: 			throw se;
1:eac0369: 		}
1:eac0369: 
1:877a43d:         module.setBooted();
1:877a43d: 
1:eac0369: 		synchronized (this) {
1:eac0369: 
1:eac0369: 
1:eac0369: 			// add it to the protocol table, if this returns false then we can't use
1:eac0369: 			// this module, shut it down.
1:eac0369: 			if (addToProtocol(key, module)) {
1:eac0369: 
1:eac0369: 				if (monitor.reportOn) {
1:eac0369: 					monitor.report("Started Module   " + key.toString());
1:eac0369: 					monitor.report("  Implementation " + module.getInstance().getClass().getName());
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				return module.getInstance();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		TopService.stop(instance);
1:a32eb9f: 		moduleInstances.remove(module);
1:eac0369: 
1:eac0369: 		// if we reached here it's because someone else beat us adding the module, so use theirs.
1:eac0369: 		return findModule(key, true, properties);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 		If the service is already beign shutdown we return false.
1:eac0369: 	*/
1:eac0369: 	boolean shutdown() {
1:eac0369: 
1:eac0369: 		synchronized (this) {
1:eac0369: 			if (inShutdown)
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			inShutdown = true;
2:eac0369: 			notifyAll();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (;;) {
1:eac0369: 
1:eac0369: 			ModuleInstance module;
1:eac0369: 
1:eac0369: 			synchronized (this) {
1:eac0369: 
1:eac0369: 				if (moduleInstances.isEmpty())
1:eac0369: 					return true;
1:eac0369: 
1:073b862: 				module = moduleInstances.get(0);
1:eac0369: 
1:eac0369: 			}
1:eac0369: 			
1:eac0369: 			Object instance = module.getInstance();
1:eac0369: 			TopService.stop(instance);
1:eac0369: 			
1:eac0369: 			synchronized (this) {
1:a32eb9f: 				moduleInstances.remove(0);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Add a running module into the protocol hash table. Return true
1:eac0369: 		if the module was added successfully, false if it couldn't
1:eac0369: 		be added. In the latter case the module should be shutdown
1:eac0369: 		if its reference count is 0.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	private boolean addToProtocol(ProtocolKey key, ModuleInstance module) {
1:eac0369: 
1:eac0369: 		String identifier = module.getIdentifier();
1:eac0369: 
1:eac0369: 		synchronized (this) {
1:eac0369: 
1:eac0369: 			Object value = protocolTable.get(key);
1:eac0369: 			if (value == null) {
1:eac0369: 
1:eac0369: 				protocolTable.put(key, module);
1:eac0369: 				return true;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (value == module)
1:eac0369: 				return true;
1:eac0369: 
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:7a92d1f: 	boolean inService(Object instance) {
1:f0e75f3:         return findModuleInstance(instance) != null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ProtocolKey getKey() {
1:eac0369: 		return key;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	PersistentService getServiceType() {
1:eac0369: 		return serviceType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private static void stop(Object instance) {
1:eac0369: 		if (instance instanceof ModuleControl) {
1:eac0369: 			((ModuleControl) instance).stop();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:073b862
/////////////////////////////////////////////////////////////////////////
1: 	Hashtable<ProtocolKey,ModuleInstance>		protocolTable;
1: 	Vector<ModuleInstance>		moduleInstances;
/////////////////////////////////////////////////////////////////////////
1: 		protocolTable = new Hashtable<ProtocolKey,ModuleInstance>();
1: 		moduleInstances = new Vector<ModuleInstance>(0, 5);
/////////////////////////////////////////////////////////////////////////
1: 		ModuleInstance module = protocolTable.get(key);
/////////////////////////////////////////////////////////////////////////
1:                 ModuleInstance module = moduleInstances.get(i);
/////////////////////////////////////////////////////////////////////////
1:                         module = moduleInstances.get(i);
/////////////////////////////////////////////////////////////////////////
1: 				module = moduleInstances.get(0);
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f36ac79
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.InterruptStatus;
/////////////////////////////////////////////////////////////////////////
1:                     InterruptStatus.setInterrupted();
commit:8add35b
/////////////////////////////////////////////////////////////////////////
0: // import org.apache.derby.iapi.util.InterruptStatus;
/////////////////////////////////////////////////////////////////////////
0:                     // InterruptStatus.setInterrupted();
commit:ec9d167
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.InterruptStatus;
/////////////////////////////////////////////////////////////////////////
0:                     InterruptStatus.setInterrupted();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
0:                         module = (ModuleInstance) moduleInstances.get(i);
/////////////////////////////////////////////////////////////////////////
1: 		moduleInstances.add(module);
1: 			moduleInstances.remove(module);
/////////////////////////////////////////////////////////////////////////
1: 		moduleInstances.remove(module);
/////////////////////////////////////////////////////////////////////////
0: 				module = (ModuleInstance) moduleInstances.get(0);
/////////////////////////////////////////////////////////////////////////
1: 				moduleInstances.remove(0);
commit:c6fc81e
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-4018: Need to hold the synchronization over the entire loop
1:         // to prevent concurrent modifications from causing an
1:         // ArrayIndexOutOfBoundsException.
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0;; i++) {
1:                 final ModuleInstance module;
1: 
1:                 // DERBY-4018: Synchronized block in order to close the window
1:                 // between size() and elementAt() where the size may change
1:                 // and result in an ArrayIndexOutOfBoundsException.
1:                 synchronized (moduleInstances) {
1:                     if (i < moduleInstances.size()) {
0:                         module = (ModuleInstance) moduleInstances.elementAt(i);
1:                     } else {
1:                         // No more instances to look at, break out of the loop.
1:                         break;
1:                     }
1:                 }
commit:f0e75f3
/////////////////////////////////////////////////////////////////////////
1:             ModuleInstance module = findModuleInstance(instance);
1:             if (module != null) {
1:                 topModule = module;
1:                 notifyAll();
1:             }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Find a {@code ModuleInstance} object whose {@code getInstance()} method
1:      * returns the object specified by the {@code instance} parameter.
1:      *
1:      * @param instance the instance to look for
1:      * @return a {@code ModuleInstance} object, or {@code null} if no match
1:      * was found
1:      */
1:     private ModuleInstance findModuleInstance(Object instance) {
1:         synchronized (moduleInstances) {
1:             for (int i = 0; i < moduleInstances.size(); i++) {
0:                 ModuleInstance module = (ModuleInstance) moduleInstances.get(i);
1:                 if (module.getInstance() == instance) {
1:                     return module;
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return findModuleInstance(instance) != null;
commit:877a43d
/////////////////////////////////////////////////////////////////////////
1:                 // DERBY-2074: The module has not been properly booted, so we
1:                 // cannot yet determine whether or not this is a module we can
1:                 // use. Assume that we cannot use it and continue looking. We
1:                 // may end up booting the module twice if the assumption
1:                 // doesn't hold, but we'll detect and resolve that later when
1:                 // we call addToProtocol().
1:                 if (!module.isBooted()) {
1:                     continue;
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
1:         module.setBooted();
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:48ceb6e
/////////////////////////////////////////////////////////////////////////
1: 
commit:6e1c9cd
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1: final class TopService {
/////////////////////////////////////////////////////////////////////////
1: 	ProtocolKey key;
1: 	ModuleInstance topModule;
0: 	Hashtable		protocolTable;
0: 	Vector		moduleInstances;
1: 	BaseMonitor	monitor;
1: 	boolean inShutdown;
1: 	PersistentService serviceType;
/////////////////////////////////////////////////////////////////////////
1: 	void setTopModule(Object instance) {
/////////////////////////////////////////////////////////////////////////
1: 	Object getService() {
1: 	boolean isPotentialService(ProtocolKey otherKey) {
/////////////////////////////////////////////////////////////////////////
1: 	synchronized Object findModule(ProtocolKey key, boolean findOnly, Properties properties) {
/////////////////////////////////////////////////////////////////////////
1: 	boolean inService(Object instance) {
commit:3982b7d
/////////////////////////////////////////////////////////////////////////
1: 			try
1: 			{
1: 				otherCanonicalName = serviceType.getCanonicalServiceName(otherKey.getIdentifier());
1: 			} catch (StandardException se)
1: 			{
1: 				return false;
1: 			}
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.monitor.TopService
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.monitor;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.services.monitor.PersistentService;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.reference.EngineType;
1: 
1: import java.util.Hashtable;
1: import java.util.Vector;
1: import java.util.Properties;
1: import java.util.Locale;
1: 
1: /**
1: 	A description of an instance of a module.
1: */
1: 
1: 
0: class TopService {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/*
1: 	** Fields.
1: 	*/
1: 
1: 	/**
1: 		The idenity of this service, note that it may not be active yet.
1: 	*/
0: 	protected ProtocolKey key;
1: 
1: 	/**
1: 		The top module instance
1: 	*/
0: 	protected ModuleInstance topModule;
1: 
1: 	/**
1: 		List of protocols.
1: 	*/
0: 	protected Hashtable		protocolTable;
1: 
1: 	/**
1: 	*/
0: 	protected Vector		moduleInstances;
1: 
1: 	/**
1: 	*/
0: 	protected BaseMonitor	monitor;
1: 
0: 	protected boolean inShutdown;
1: 
1: 	/**
1: 		The type of service this was created by. If null then this is a non-persistent service.
1: 	*/
0: 	protected PersistentService serviceType;
1: 
1: 	Locale serviceLocale;
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 
1: 
1: 	TopService(BaseMonitor monitor) {
1: 		super();
1: 		this.monitor = monitor;
0: 		protocolTable = new Hashtable();
0: 		moduleInstances = new Vector(0, 5);
1: 	}
1: 
1: 	TopService(BaseMonitor monitor, ProtocolKey key, PersistentService serviceType, Locale serviceLocale)
1: 	{
1: 		this(monitor);
1: 
1: 		this.key = key;
1: 		this.serviceType = serviceType;
1: 		this.serviceLocale = serviceLocale;
1: 	}
1: 
0: 	protected void setTopModule(Object instance) {
1: 		synchronized (this) {
0: 			for (int i = 0; i < moduleInstances.size(); i++) {
0: 				ModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);
0: 				if (module.getInstance() == instance) {
0: 					topModule = module;
1: 					notifyAll();
0: 					break;
1: 				}
1: 			}
1: 
1: 			// now add an additional entry into the hashtable
1: 			// that maps the server name as seen by the user
1: 			// onto the top module. This allows modules to find their
1: 			// top most service moduel using the monitor.getServiceName() call,
1: 			// e.g. Monitor.findModule(ref, inferface, Monitor.getServiceName(ref));
1: 			if (getServiceType() != null) {
1: 				ProtocolKey userKey = new ProtocolKey(key.getFactoryInterface(),
1: 					monitor.getServiceName(instance));
1: 				addToProtocol(userKey, topModule);
1: 			}
1: 
1: 		}
1: 	}
1: 
0: 	protected Object getService() {
1: 
1: 		return topModule.getInstance();
1: 	}
1: 
0: 	protected boolean isPotentialService(ProtocolKey otherKey) {
1: 
1: 
1: 		String otherCanonicalName;
1: 
1: 		if (serviceType == null)
1: 			otherCanonicalName = otherKey.getIdentifier();
1: 		else {
0: 			otherCanonicalName = serviceType.getCanonicalServiceName(otherKey.getIdentifier());
1: 
1: 			// if the service name cannot be converted into a canonical name then it is not a service.
1: 			if (otherCanonicalName == null)
1: 				return false;
1: 		}
1: 
1: 		if (topModule != null)
1: 			return topModule.isTypeAndName(serviceType, key.getFactoryInterface(), otherCanonicalName);
1: 
1: 
1: 		if (!otherKey.getFactoryInterface().isAssignableFrom(key.getFactoryInterface()))
1: 			return false;
1: 
1: 		return serviceType.isSameService(key.getIdentifier(), otherCanonicalName);
1: 	}
1: 
1: 	boolean isActiveService() {
1: 		synchronized (this) {
1: 			return (topModule != null);
1: 		}
1: 	}
1: 
1: 	boolean isActiveService(ProtocolKey otherKey) {
1: 
1: 		synchronized (this) {
1: 			if (inShutdown)
1: 				return false;
1: 
1: 			if (!isPotentialService(otherKey))
1: 				return false;
1: 
1: 			if (topModule != null) {
1: 				if (SanityManager.DEBUG) {
1: 					SanityManager.ASSERT(topModule.isTypeAndName(serviceType,
1: 						key.getFactoryInterface(), key.getIdentifier()));
1: 				}
1: 
1: 				return true;
1: 			}
1: 
1: 			// now wait for topModule to be set
1: 			while (!inShutdown && (topModule == null)) {
1: 				try {
1: 					wait();
1: 				} catch (InterruptedException ioe) {
1: 					return false;
1: 				}
1: 			}
1: 
1: 			if (inShutdown)
1: 				return false;
1: 
1: 			return true;
1: 		}
1: 	}
1: 
1: 	/**
1: 		Find an module in the protocol table that supports the required protocol
1: 		name combination and can handle the properties.
1: 
1: 		Returns the instance of the module or null if one does not exist in
1: 		the protocol table.
1: 	*/
0: 	protected synchronized Object findModule(ProtocolKey key, boolean findOnly, Properties properties) {
1: 
0: 		ModuleInstance module = (ModuleInstance) protocolTable.get(key);
1: 
1: 		if (module == null)
1: 			return null;
1: 
1: 		Object instance = module.getInstance();
1: 
1: 		if (findOnly || BaseMonitor.canSupport(instance, properties))
1: 			return instance;
1: 
1: 		return null;
1: 	}
1: 
1: 	/**
1: 		Boot a module, performs three steps.
1: 
1: 		<OL>
1: 		<LI> Look for an existing module in the protocol table
1: 		<LI> Look for a module in the implementation table that handles this protocol
1: 		<LI> Create an instance that handles this protocol.
1: 		</OL>
1: 	*/
1: 	Object bootModule(boolean create, Object service, ProtocolKey key, Properties properties) 
1: 		throws StandardException {
1: 
1: 		synchronized (this) {
1: 			if (inShutdown)
1: 				throw StandardException.newException(SQLState.SHUTDOWN_DATABASE, getKey().getIdentifier());
1: 		}
1: 
1: 		//  see if this system already has a module that will work.
1: 		Object instance = findModule(key, false, properties);
1: 		if (instance != null)
1: 			return instance;
1: 		
1: 		if (monitor.reportOn) {
1: 			monitor.report("Booting Module   " + key.toString() + " create = " + create);
1: 		}
1: 
1: 		// see if a running implementation will handle this protocol
1: 		synchronized (this) {
1: 
0: 			for (int i = 0; i < moduleInstances.size(); i++) {
0: 				ModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);
1: 
1: 				if (!module.isTypeAndName((PersistentService) null, key.getFactoryInterface(), key.getIdentifier()))
1: 					continue;
1: 
1: 				instance = module.getInstance();
1: 				if (!BaseMonitor.canSupport(instance, properties))
1: 					continue;
1: 
1: 				// add it to the protocol table, if this returns false then we can't use
1: 				// this module, continue looking.
1: 				if (!addToProtocol(key, module))
1: 					continue;
1: 
1: 				if (monitor.reportOn) {
1: 					monitor.report("Started Module   " + key.toString());
1: 					monitor.report("  Implementation " + instance.getClass().getName());
1: 				}
1: 
1: 				return instance;
1: 			}
1: 		}
1: 
1: 		// try and load an instance that will support this protocol
1: 		instance = monitor.loadInstance(key.getFactoryInterface(), properties);
1: 		if (instance == null)
1: 		{
1: 			throw Monitor.missingImplementation(key.getFactoryInterface().getName());
1: 		}
1: 		ModuleInstance module = new ModuleInstance(instance, key.getIdentifier(), service,
1: 				topModule == null ? (Object) null : topModule.getInstance());
1: 
0: 		moduleInstances.addElement(module);
1: 
1: 		try {
1: 			BaseMonitor.boot(instance, create, properties);
1: 		} catch (StandardException se) {
0: 			moduleInstances.removeElement(module);
1: 			throw se;
1: 		}
1: 
1: 		synchronized (this) {
1: 
1: 
1: 			// add it to the protocol table, if this returns false then we can't use
1: 			// this module, shut it down.
1: 			if (addToProtocol(key, module)) {
1: 
1: 				if (monitor.reportOn) {
1: 					monitor.report("Started Module   " + key.toString());
1: 					monitor.report("  Implementation " + module.getInstance().getClass().getName());
1: 				}
1: 
1: 				return module.getInstance();
1: 			}
1: 
1: 			
1: 		}
1: 	
1: 		TopService.stop(instance);
0: 		moduleInstances.removeElement(module);
1: 
1: 		// if we reached here it's because someone else beat us adding the module, so use theirs.
1: 		return findModule(key, true, properties);
1: 	}
1: 
1: 	/**	
1: 		If the service is already beign shutdown we return false.
1: 	*/
1: 	boolean shutdown() {
1: 
1: 		synchronized (this) {
1: 			if (inShutdown)
1: 				return false;
1: 
1: 			inShutdown = true;
1: 			notifyAll();
1: 		}
1: 
1: 		for (;;) {
1: 
1: 			ModuleInstance module;
1: 
1: 			synchronized (this) {
1: 
1: 				if (moduleInstances.isEmpty())
1: 					return true;
1: 
0: 				module = (ModuleInstance) moduleInstances.elementAt(0);
1: 
1: 			}
1: 			
1: 			Object instance = module.getInstance();
1: 			TopService.stop(instance);
1: 			
1: 			synchronized (this) {
0: 				moduleInstances.removeElementAt(0);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 		Add a running module into the protocol hash table. Return true
1: 		if the module was added successfully, false if it couldn't
1: 		be added. In the latter case the module should be shutdown
1: 		if its reference count is 0.
1: 	*/
1: 
1: 	private boolean addToProtocol(ProtocolKey key, ModuleInstance module) {
1: 
1: 		String identifier = module.getIdentifier();
1: 
1: 		synchronized (this) {
1: 
1: 			Object value = protocolTable.get(key);
1: 			if (value == null) {
1: 
1: 				protocolTable.put(key, module);
1: 				return true;
1: 			}
1: 
1: 			if (value == module)
1: 				return true;
1: 
1: 			return false;
1: 		}
1: 	}
1: 
0: 	protected boolean inService(Object instance) {
1: 
0: 		for (int i = 0; i < moduleInstances.size(); i++) {
1: 
0: 			ModuleInstance mi = (ModuleInstance) moduleInstances.elementAt(i);
0: 			if (mi.getInstance() == instance)
1: 				return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	public ProtocolKey getKey() {
1: 		return key;
1: 	}
1: 
1: 	PersistentService getServiceType() {
1: 		return serviceType;
1: 	}
1: 
1: 	private static void stop(Object instance) {
1: 		if (instance instanceof ModuleControl) {
1: 			((ModuleControl) instance).stop();
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.monitor;
0: 
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.monitor.PersistentService;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.EngineType;
0: 
0: import java.util.Hashtable;
0: import java.util.Vector;
0: import java.util.Properties;
0: import java.util.Locale;
0: 
0: /**
0: 	A description of an instance of a module.
0: */
0: 
0: 
0: class TopService {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/*
0: 	** Fields.
0: 	*/
0: 
0: 	/**
0: 		The idenity of this service, note that it may not be active yet.
0: 	*/
0: 	protected ProtocolKey key;
0: 
0: 	/**
0: 		The top module instance
0: 	*/
0: 	protected ModuleInstance topModule;
0: 
0: 	/**
0: 		List of protocols.
0: 	*/
0: 	protected Hashtable		protocolTable;
0: 
0: 	/**
0: 	*/
0: 	protected Vector		moduleInstances;
0: 
0: 	/**
0: 	*/
0: 	protected BaseMonitor	monitor;
0: 
0: 	protected boolean inShutdown;
0: 
0: 	/**
0: 		The type of service this was created by. If null then this is a non-persistent service.
0: 	*/
0: 	protected PersistentService serviceType;
0: 
0: 	Locale serviceLocale;
0: 
0: 	/*
0: 	** Constructor
0: 	*/
0: 
0: 
0: 	TopService(BaseMonitor monitor) {
0: 		super();
0: 		this.monitor = monitor;
0: 		protocolTable = new Hashtable();
0: 		moduleInstances = new Vector(0, 5);
0: 	}
0: 
0: 	TopService(BaseMonitor monitor, ProtocolKey key, PersistentService serviceType, Locale serviceLocale)
0: 	{
0: 		this(monitor);
0: 
0: 		this.key = key;
0: 		this.serviceType = serviceType;
0: 		this.serviceLocale = serviceLocale;
0: 	}
0: 
0: 	protected void setTopModule(Object instance) {
0: 		synchronized (this) {
0: 			for (int i = 0; i < moduleInstances.size(); i++) {
0: 				ModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);
0: 				if (module.getInstance() == instance) {
0: 					topModule = module;
0: 					notifyAll();
0: 					break;
0: 				}
0: 			}
0: 
0: 			// now add an additional entry into the hashtable
0: 			// that maps the server name as seen by the user
0: 			// onto the top module. This allows modules to find their
0: 			// top most service moduel using the monitor.getServiceName() call,
0: 			// e.g. Monitor.findModule(ref, inferface, Monitor.getServiceName(ref));
0: 			if (getServiceType() != null) {
0: 				ProtocolKey userKey = new ProtocolKey(key.getFactoryInterface(),
0: 					monitor.getServiceName(instance));
0: 				addToProtocol(userKey, topModule);
0: 			}
0: 
0: 		}
0: 	}
0: 
0: 	protected Object getService() {
0: 
0: 		return topModule.getInstance();
0: 	}
0: 
0: 	protected boolean isPotentialService(ProtocolKey otherKey) {
0: 
0: 
0: 		String otherCanonicalName;
0: 
0: 		if (serviceType == null)
0: 			otherCanonicalName = otherKey.getIdentifier();
0: 		else {
0: 			otherCanonicalName = serviceType.getCanonicalServiceName(otherKey.getIdentifier());
0: 
0: 			// if the service name cannot be converted into a canonical name then it is not a service.
0: 			if (otherCanonicalName == null)
0: 				return false;
0: 		}
0: 
0: 		if (topModule != null)
0: 			return topModule.isTypeAndName(serviceType, key.getFactoryInterface(), otherCanonicalName);
0: 
0: 
0: 		if (!otherKey.getFactoryInterface().isAssignableFrom(key.getFactoryInterface()))
0: 			return false;
0: 
0: 		return serviceType.isSameService(key.getIdentifier(), otherCanonicalName);
0: 	}
0: 
0: 	boolean isActiveService() {
0: 		synchronized (this) {
0: 			return (topModule != null);
0: 		}
0: 	}
0: 
0: 	boolean isActiveService(ProtocolKey otherKey) {
0: 
0: 		synchronized (this) {
0: 			if (inShutdown)
0: 				return false;
0: 
0: 			if (!isPotentialService(otherKey))
0: 				return false;
0: 
0: 			if (topModule != null) {
0: 				if (SanityManager.DEBUG) {
0: 					SanityManager.ASSERT(topModule.isTypeAndName(serviceType,
0: 						key.getFactoryInterface(), key.getIdentifier()));
0: 				}
0: 
0: 				return true;
0: 			}
0: 
0: 			// now wait for topModule to be set
0: 			while (!inShutdown && (topModule == null)) {
0: 				try {
0: 					wait();
0: 				} catch (InterruptedException ioe) {
0: 					return false;
0: 				}
0: 			}
0: 
0: 			if (inShutdown)
0: 				return false;
0: 
0: 			return true;
0: 		}
0: 	}
0: 
0: 	/**
0: 		Find an module in the protocol table that supports the required protocol
0: 		name combination and can handle the properties.
0: 
0: 		Returns the instance of the module or null if one does not exist in
0: 		the protocol table.
0: 	*/
0: 	protected synchronized Object findModule(ProtocolKey key, boolean findOnly, Properties properties) {
0: 
0: 		ModuleInstance module = (ModuleInstance) protocolTable.get(key);
0: 
0: 		if (module == null)
0: 			return null;
0: 
0: 		Object instance = module.getInstance();
0: 
0: 		if (findOnly || BaseMonitor.canSupport(instance, properties))
0: 			return instance;
0: 
0: 		return null;
0: 	}
0: 
0: 	/**
0: 		Boot a module, performs three steps.
0: 
0: 		<OL>
0: 		<LI> Look for an existing module in the protocol table
0: 		<LI> Look for a module in the implementation table that handles this protocol
0: 		<LI> Create an instance that handles this protocol.
0: 		</OL>
0: 	*/
0: 	Object bootModule(boolean create, Object service, ProtocolKey key, Properties properties) 
0: 		throws StandardException {
0: 
0: 		synchronized (this) {
0: 			if (inShutdown)
0: 				throw StandardException.newException(SQLState.SHUTDOWN_DATABASE, getKey().getIdentifier());
0: 		}
0: 
0: 		//  see if this system already has a module that will work.
0: 		Object instance = findModule(key, false, properties);
0: 		if (instance != null)
0: 			return instance;
0: 		
0: 		if (monitor.reportOn) {
0: 			monitor.report("Booting Module   " + key.toString() + " create = " + create);
0: 		}
0: 
0: 		// see if a running implementation will handle this protocol
0: 		synchronized (this) {
0: 
0: 			for (int i = 0; i < moduleInstances.size(); i++) {
0: 				ModuleInstance module = (ModuleInstance) moduleInstances.elementAt(i);
0: 
0: 				if (!module.isTypeAndName((PersistentService) null, key.getFactoryInterface(), key.getIdentifier()))
0: 					continue;
0: 
0: 				instance = module.getInstance();
0: 				if (!BaseMonitor.canSupport(instance, properties))
0: 					continue;
0: 
0: 				// add it to the protocol table, if this returns false then we can't use
0: 				// this module, continue looking.
0: 				if (!addToProtocol(key, module))
0: 					continue;
0: 
0: 				if (monitor.reportOn) {
0: 					monitor.report("Started Module   " + key.toString());
0: 					monitor.report("  Implementation " + instance.getClass().getName());
0: 				}
0: 
0: 				return instance;
0: 			}
0: 		}
0: 
0: 		// try and load an instance that will support this protocol
0: 		instance = monitor.loadInstance(key.getFactoryInterface(), properties);
0: 		if (instance == null)
0: 		{
0: 			throw Monitor.missingImplementation(key.getFactoryInterface().getName());
0: 		}
0: 		ModuleInstance module = new ModuleInstance(instance, key.getIdentifier(), service,
0: 				topModule == null ? (Object) null : topModule.getInstance());
0: 
0: 		moduleInstances.addElement(module);
0: 
0: 		try {
0: 			BaseMonitor.boot(instance, create, properties);
0: 		} catch (StandardException se) {
0: 			moduleInstances.removeElement(module);
0: 			throw se;
0: 		}
0: 
0: 		synchronized (this) {
0: 
0: 
0: 			// add it to the protocol table, if this returns false then we can't use
0: 			// this module, shut it down.
0: 			if (addToProtocol(key, module)) {
0: 
0: 				if (monitor.reportOn) {
0: 					monitor.report("Started Module   " + key.toString());
0: 					monitor.report("  Implementation " + module.getInstance().getClass().getName());
0: 				}
0: 
0: 				return module.getInstance();
0: 			}
0: 
0: 			
0: 		}
0: 	
0: 		TopService.stop(instance);
0: 		moduleInstances.removeElement(module);
0: 
0: 		// if we reached here it's because someone else beat us adding the module, so use theirs.
0: 		return findModule(key, true, properties);
0: 	}
0: 
0: 	/**	
0: 		If the service is already beign shutdown we return false.
0: 	*/
0: 	boolean shutdown() {
0: 
0: 		synchronized (this) {
0: 			if (inShutdown)
0: 				return false;
0: 
0: 			inShutdown = true;
0: 			notifyAll();
0: 		}
0: 
0: 		for (;;) {
0: 
0: 			ModuleInstance module;
0: 
0: 			synchronized (this) {
0: 
0: 				if (moduleInstances.isEmpty())
0: 					return true;
0: 
0: 				module = (ModuleInstance) moduleInstances.elementAt(0);
0: 
0: 			}
0: 			
0: 			Object instance = module.getInstance();
0: 			TopService.stop(instance);
0: 			
0: 			synchronized (this) {
0: 				moduleInstances.removeElementAt(0);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 		Add a running module into the protocol hash table. Return true
0: 		if the module was added successfully, false if it couldn't
0: 		be added. In the latter case the module should be shutdown
0: 		if its reference count is 0.
0: 	*/
0: 
0: 	private boolean addToProtocol(ProtocolKey key, ModuleInstance module) {
0: 
0: 		String identifier = module.getIdentifier();
0: 
0: 		synchronized (this) {
0: 
0: 			Object value = protocolTable.get(key);
0: 			if (value == null) {
0: 
0: 				protocolTable.put(key, module);
0: 				return true;
0: 			}
0: 
0: 			if (value == module)
0: 				return true;
0: 
0: 			return false;
0: 		}
0: 	}
0: 
0: 	protected boolean inService(Object instance) {
0: 
0: 		for (int i = 0; i < moduleInstances.size(); i++) {
0: 
0: 			ModuleInstance mi = (ModuleInstance) moduleInstances.elementAt(i);
0: 			if (mi.getInstance() == instance)
0: 				return true;
0: 		}
0: 		return false;
0: 	}
0: 
0: 	public ProtocolKey getKey() {
0: 		return key;
0: 	}
0: 
0: 	PersistentService getServiceType() {
0: 		return serviceType;
0: 	}
0: 
0: 	private static void stop(Object instance) {
0: 		if (instance instanceof ModuleControl) {
0: 			((ModuleControl) instance).stop();
0: 		}
0: 	}
0: }
============================================================================