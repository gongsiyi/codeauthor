1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.tools.PlanExporter
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:4e20a51:  */
1:aba4ea1: 
1:4e20a51: package org.apache.derby.tools;
1:4e20a51: 
1:4e20a51: import java.io.File;
1:aba4ea1: import java.io.FileOutputStream;
1:aba4ea1: import java.io.IOException;
1:aba4ea1: import java.io.OutputStreamWriter;
1:aba4ea1: import java.io.Writer;
1:4e20a51: import java.security.AccessController;
1:aba4ea1: import java.security.PrivilegedActionException;
1:aba4ea1: import java.security.PrivilegedExceptionAction;
1:ac112f7: 
1:ac112f7: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:4e20a51: import org.apache.derby.impl.tools.planexporter.AccessDatabase;
1:4e20a51: import org.apache.derby.impl.tools.planexporter.CreateHTMLFile;
1:4e20a51: import org.apache.derby.impl.tools.planexporter.CreateXMLFile;
1:4e20a51: 
2:4e20a51: /**
1:4e20a51:  * This class is the main entry point to the tool Graphical Query Explainer.
1:4e20a51:  */
1:4e20a51: public class PlanExporter {
1:4e20a51: 
1:4e20a51:     private static String dbURL = null; //connection URL
1:4e20a51:     private static String xslStyleSheetName ="resources/vanilla_html.xsl";//default xsl
1:ce855d2:     private static final int XML=1;
1:ce855d2:     private static final int HTML=2;
1:ce855d2:     private static final int XSL=3;
1:ac112f7:     
1:ac112f7:     private static final LocalizedResource LOC_RES = LocalizedResource.getInstance();
1:4e20a51: 
1:4e20a51:     /**
1:4e20a51:      * @param args
1:ce855d2:      * 1) database URL eg: jdbc:derby:myDB ---------
1:ce855d2:      * 2) database schema -----------------------------
1:ce855d2:      * 3) statement ID (36 characters) ----------------
1:4e20a51:      * and user specified arguments.
1:4e20a51:      */
1:4e20a51:     public static void main(String[] args) {
1:4e20a51: 
1:4e20a51:         try{
1:ce855d2:             if(args.length>4 && args.length<10 ){
1:ce855d2:                 dbURL = args[0];
1:4e20a51: 
1:ce855d2:                 AccessDatabase access = new AccessDatabase(dbURL, args[1], args[2]);
1:0e72736:                 
1:0e72736:                 if(access.verifySchemaExistance()){
1:0e72736:                 
1:0e72736:                 	if(access.initializeDataArray()){
1:0e72736:                 		access.createXMLFragment();
1:0e72736:                 		access.markTheDepth();
1:0e72736:                 		String stmt=access.statement();
1:0e72736:                 		String time=access.time();
1:0e72736:                 		access.closeConnection();
1:4e20a51: 
1:0e72736:                 		//advanced XSL feature
1:0e72736:                 		//possible occurrences are
1:0e72736:                 		//-adv -xml {path} -xsl {path} or
1:0e72736:                 		//-adv -xsl {path} -xml {path}
1:0e72736:                 		if(args.length==8 &&
1:0e72736:                 				args[3].equalsIgnoreCase("-adv")){
1:0e72736:                 			int opt1=selectArg(args[4]);
1:0e72736:                 			int opt2=selectArg(args[6]);
1:0e72736:                 			if(opt1==1 && opt2==3){
1:0e72736:                 				if(args[7].toUpperCase().endsWith(".XSL"))
1:0e72736:                 					generateXML(access,args[5],stmt,time,args[7]);
1:0e72736:                 				else
1:0e72736:                 					generateXML(access,args[5],stmt,time,args[7]+".xsl");
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==3 && opt2==1){
1:0e72736:                 				if(args[5].toUpperCase().endsWith(".XSL"))
1:0e72736:                 					generateXML(access,args[7],stmt,time,args[5]);
1:0e72736:                 				else
1:0e72736:                 					generateXML(access,args[7],stmt,time,args[5]+".xsl");
1:0e72736:                 			}
1:0e72736:                 			else
1:0e72736:                 				printHelp();
1:0e72736:                 		}
1:0e72736:                 		//possible occurrences are -xml {path} or -html {path}
1:0e72736:                 		else if(args.length==5){
1:0e72736:                 			int opt=selectArg(args[3]);
1:0e72736:                 			if(opt==0 || opt==3)
1:0e72736:                 				printHelp();
1:0e72736:                 			else if(opt==1)
1:0e72736:                 				generateXML(access,args[4],stmt,time,null);
1:0e72736:                 			else{
1:0e72736:                 				generateXML(access,"temp.xml",stmt,time,null);
1:0e72736:                 				generateHTML("temp.xml",args[4],xslStyleSheetName,true);
1:0e72736:                 				deleteFile("temp.xml");
1:0e72736:                 			}
1:0e72736:                 		}
1:0e72736:                 		//possible occurrences are
1:0e72736:                 		//-xml {path} and -html {path}
1:0e72736:                 		//-html {path} and -xml {path}
1:0e72736:                 		//-html {path} and -xsl {path}
1:0e72736:                 		//-xsl {path} and -html {path}
1:0e72736:                 		else if(args.length==7){
1:0e72736:                 			int opt1=selectArg(args[3]);
1:0e72736:                 			int opt2=selectArg(args[5]);
1:0e72736:                 			if(opt1==0 || opt2==0)
1:0e72736:                 				printHelp();
1:0e72736:                 			else if(opt1==1 && opt2==2){
1:0e72736:                 				generateXML(access,args[4],stmt,time,null);
1:0e72736:                 				generateHTML(args[4],args[6],xslStyleSheetName,true);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==2 && opt2==1){
1:0e72736:                 				generateXML(access,args[6],stmt,time,null);
1:0e72736:                 				generateHTML(args[6],args[4],xslStyleSheetName,true);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==2 && opt2==3){
1:0e72736:                 				generateXML(access,"temp.xml",stmt,time,null);
1:0e72736:                 				generateHTML("temp.xml",args[4],args[6],false);
1:0e72736:                 				deleteFile("temp.xml");
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==3 && opt2==2){
1:0e72736:                 				generateXML(access,"temp.xml",stmt,time,null);
1:0e72736:                 				generateHTML("temp.xml",args[6],args[4],false);
1:0e72736:                 				deleteFile("temp.xml");
1:0e72736:                 			}
1:0e72736:                 			else
1:0e72736:                 				printHelp();
1:0e72736:                 		}
1:0e72736:                 		//possible occurrences are
1:0e72736:                 		//-xml {path} and -html {path} and -xsl {path}
1:0e72736:                 		//-html {path} and -xsl {path} and -xml {path}
1:0e72736:                 		//-xsl {path} and -xml {path} and -html {path}
1:0e72736:                 		//-xml {path} and -xsl {path} and -html {path}
1:0e72736:                 		//-html {path} and -xml {path} and -xsl {path}
1:0e72736:                 		//-xsl {path} and -html {path} and -xml {path}
1:0e72736:                 		else if(args.length==9){
1:0e72736:                 			int opt1=selectArg(args[3]);
1:0e72736:                 			int opt2=selectArg(args[5]);
1:0e72736:                 			int opt3=selectArg(args[7]);
1:0e72736:                 			if(opt1==0 || opt2==0 || opt3==0)
1:0e72736:                 				printHelp();
1:0e72736:                 			else if(opt1==1 && opt2==2 && opt3==3){
1:0e72736:                 				generateXML(access,args[4],stmt,time,null);
1:0e72736:                 				generateHTML(args[4],args[6],args[8],false);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==2 && opt2==3 && opt3==1){
1:0e72736:                 				generateXML(access,args[8],stmt,time,null);
1:0e72736:                 				generateHTML(args[8],args[4],args[6],false);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==3 && opt2==1 && opt3==2){
1:0e72736:                 				generateXML(access,args[6],stmt,time,null);
1:0e72736:                 				generateHTML(args[6],args[8],args[4],false);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==1 && opt2==3 && opt3==2){
1:0e72736:                 				generateXML(access,args[4],stmt,time,null);
1:0e72736:                 				generateHTML(args[4],args[8],args[6],false);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==2 && opt2==1 && opt3==3){
1:0e72736:                 				generateXML(access,args[6],stmt,time,null);
1:0e72736:                 				generateHTML(args[6],args[4],args[8],false);
1:0e72736:                 			}
1:0e72736:                 			else if(opt1==3 && opt2==2 && opt3==1){
1:0e72736:                 				generateXML(access,args[8],stmt,time,null);
1:0e72736:                 				generateHTML(args[8],args[6],args[4],false);
1:0e72736:                 			}
1:0e72736:                 			else
1:0e72736:                 				printHelp();
1:0e72736:                 		}
1:0e72736:                 		else
1:0e72736:                 			printHelp();
1:0e72736:                 	}
1:0e72736:                 	else{
1:ac112f7:                 		System.out.println(LOC_RES.getTextMessage("PE_NoStatisticsCaptured"));
1:0e72736:                 	}
18:4e20a51:                 }
5:4e20a51:                 else{
1:ac112f7:                 	System.out.println(LOC_RES.getTextMessage("PE_ErrorSchemaNotExist"));
1:4e20a51:                 }
1:4e20a51:             }
5:4e20a51:             else
7:4e20a51:                 printHelp();
1:782dbe1: 
1:4e20a51:         }catch(Exception ex){
1:4e20a51:             ex.printStackTrace();
1:4e20a51:         }
1:4e20a51:     }
1:4e20a51: 
1:4e20a51:     /**
1:4e20a51:      * Reading the user's option
1:4e20a51:      * @param arg user's option
1:4e20a51:      * @return the argument type
1:4e20a51:      */
1:4e20a51:     private static int selectArg(String arg){
1:4e20a51:         if(arg.equalsIgnoreCase("-xml"))
1:ce855d2:             return XML;
1:4e20a51:         else if(arg.equalsIgnoreCase("-html"))
1:ce855d2:             return HTML;
1:4e20a51:         else if(arg.equalsIgnoreCase("-xsl"))
1:ce855d2:             return XSL;
1:4e20a51:         else
1:4e20a51:             return 0;
1:4e20a51:     }
1:4e20a51: 
1:4e20a51:     /**
3:4e20a51:      *
1:4e20a51:      * @param access instance of AccessDatabase class
1:4e20a51:      * @param arg path of XML
1:4e20a51:      * @param stmt statement executed
1:ce855d2:      * @param time time which the statement was executed
1:4e20a51:      * @param xsl name of the style sheet
1:aba4ea1:      * @throws IOException if an error occurs when writing the XML file
1:4e20a51:      */
1:4e20a51:     private static void generateXML(AccessDatabase access,
1:aba4ea1:             String arg, String stmt, String time, String xsl)
1:aba4ea1:             throws IOException {
1:4e20a51:         CreateXMLFile xmlFile = new CreateXMLFile(access);
1:4e20a51: 
1:aba4ea1:         final String fileName = arg.toUpperCase().endsWith(".XML")
1:aba4ea1:                                 ? arg : (arg + ".xml");
1:4e20a51: 
1:aba4ea1:         Writer out;
1:aba4ea1:         try {
1:aba4ea1:             out = AccessController.doPrivileged(
1:aba4ea1:                     new PrivilegedExceptionAction<Writer>() {
1:aba4ea1:                 @Override
1:aba4ea1:                 public Writer run() throws IOException {
1:aba4ea1:                     return new OutputStreamWriter(
1:aba4ea1:                             new FileOutputStream(fileName), "UTF-8");
1:4e20a51:                 }
1:aba4ea1:             });
1:aba4ea1:         } catch (PrivilegedActionException pae) {
1:aba4ea1:             throw (IOException) pae.getCause();
1:4e20a51:         }
1:aba4ea1: 
1:aba4ea1:         try {
1:aba4ea1:             xmlFile.writeTheXMLFile(stmt, time, out, xsl);
1:aba4ea1:         } finally {
1:aba4ea1:             out.close();
1:4e20a51:         }
1:4e20a51:     }
2:ce855d2: 
1:4e20a51:     /**
1:4e20a51:      *
1:4e20a51:      * @param arg path to xml
1:4e20a51:      * @param path path of HTML
1:4e20a51:      * @param style path to xsl
1:4e20a51:      * @param def whether the default xsl or not
2:4e20a51:      * @throws Exception
1:4e20a51:      */
1:4e20a51:     private static void generateHTML(String arg, String path,
1:4e20a51:             String style, boolean def) throws Exception{
1:4e20a51:         CreateHTMLFile htmlFile = new CreateHTMLFile();
1:4e20a51: 
2:ce855d2:         if(arg.toUpperCase().endsWith(".XML")){
1:4e20a51:             htmlFile.getHTML(arg, style, path, def);
1:4e20a51:         }
1:4e20a51:         else{
1:4e20a51:             htmlFile.getHTML(arg.concat(".xml"), style, path, def);
1:4e20a51:         }
1:4e20a51:     }
1:4e20a51: 
1:4e20a51:     private static void printHelp(){
1:ac112f7:         System.out.println(LOC_RES.getTextMessage("PE_HelpText"));
1:4e20a51:     }
1:4e20a51: 
1:ce855d2:     private static void deleteFile(final String fileName)
1:4e20a51:     {
1:4e20a51:         AccessController.doPrivileged
1:0758fb6:         (new java.security.PrivilegedAction<Object>() {
1:4e20a51: 
1:4e20a51:             public Object run() {
1:4e20a51:                 File delFile = new File(fileName);
1:4e20a51:                 if (!delFile.exists())
1:4e20a51:                     return null;
1:4e20a51:                 delFile.delete();
1:4e20a51:                 return null;
1:4e20a51:             }
1:4e20a51:         }
1:0e72736:         );
1:4e20a51: 
1:4e20a51:     }
1:4e20a51: 
1:4e20a51: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:ac112f7
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
/////////////////////////////////////////////////////////////////////////
1:     
1:     private static final LocalizedResource LOC_RES = LocalizedResource.getInstance();
/////////////////////////////////////////////////////////////////////////
1:                 		System.out.println(LOC_RES.getTextMessage("PE_NoStatisticsCaptured"));
1:                 	System.out.println(LOC_RES.getTextMessage("PE_ErrorSchemaNotExist"));
/////////////////////////////////////////////////////////////////////////
1:         System.out.println(LOC_RES.getTextMessage("PE_HelpText"));
commit:0e72736
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 if(access.verifySchemaExistance()){
1:                 
1:                 	if(access.initializeDataArray()){
1:                 		access.createXMLFragment();
1:                 		access.markTheDepth();
1:                 		String stmt=access.statement();
1:                 		String time=access.time();
1:                 		access.closeConnection();
1:                 		//advanced XSL feature
1:                 		//possible occurrences are
1:                 		//-adv -xml {path} -xsl {path} or
1:                 		//-adv -xsl {path} -xml {path}
1:                 		if(args.length==8 &&
1:                 				args[3].equalsIgnoreCase("-adv")){
1:                 			int opt1=selectArg(args[4]);
1:                 			int opt2=selectArg(args[6]);
1:                 			if(opt1==1 && opt2==3){
1:                 				if(args[7].toUpperCase().endsWith(".XSL"))
1:                 					generateXML(access,args[5],stmt,time,args[7]);
1:                 				else
1:                 					generateXML(access,args[5],stmt,time,args[7]+".xsl");
1:                 			}
1:                 			else if(opt1==3 && opt2==1){
1:                 				if(args[5].toUpperCase().endsWith(".XSL"))
1:                 					generateXML(access,args[7],stmt,time,args[5]);
1:                 				else
1:                 					generateXML(access,args[7],stmt,time,args[5]+".xsl");
1:                 			}
1:                 			else
1:                 				printHelp();
1:                 		}
1:                 		//possible occurrences are -xml {path} or -html {path}
1:                 		else if(args.length==5){
1:                 			int opt=selectArg(args[3]);
1:                 			if(opt==0 || opt==3)
1:                 				printHelp();
1:                 			else if(opt==1)
1:                 				generateXML(access,args[4],stmt,time,null);
1:                 			else{
1:                 				generateXML(access,"temp.xml",stmt,time,null);
1:                 				generateHTML("temp.xml",args[4],xslStyleSheetName,true);
1:                 				deleteFile("temp.xml");
1:                 			}
1:                 		}
1:                 		//possible occurrences are
1:                 		//-xml {path} and -html {path}
1:                 		//-html {path} and -xml {path}
1:                 		//-html {path} and -xsl {path}
1:                 		//-xsl {path} and -html {path}
1:                 		else if(args.length==7){
1:                 			int opt1=selectArg(args[3]);
1:                 			int opt2=selectArg(args[5]);
1:                 			if(opt1==0 || opt2==0)
1:                 				printHelp();
1:                 			else if(opt1==1 && opt2==2){
1:                 				generateXML(access,args[4],stmt,time,null);
1:                 				generateHTML(args[4],args[6],xslStyleSheetName,true);
1:                 			}
1:                 			else if(opt1==2 && opt2==1){
1:                 				generateXML(access,args[6],stmt,time,null);
1:                 				generateHTML(args[6],args[4],xslStyleSheetName,true);
1:                 			}
1:                 			else if(opt1==2 && opt2==3){
1:                 				generateXML(access,"temp.xml",stmt,time,null);
1:                 				generateHTML("temp.xml",args[4],args[6],false);
1:                 				deleteFile("temp.xml");
1:                 			}
1:                 			else if(opt1==3 && opt2==2){
1:                 				generateXML(access,"temp.xml",stmt,time,null);
1:                 				generateHTML("temp.xml",args[6],args[4],false);
1:                 				deleteFile("temp.xml");
1:                 			}
1:                 			else
1:                 				printHelp();
1:                 		}
1:                 		//possible occurrences are
1:                 		//-xml {path} and -html {path} and -xsl {path}
1:                 		//-html {path} and -xsl {path} and -xml {path}
1:                 		//-xsl {path} and -xml {path} and -html {path}
1:                 		//-xml {path} and -xsl {path} and -html {path}
1:                 		//-html {path} and -xml {path} and -xsl {path}
1:                 		//-xsl {path} and -html {path} and -xml {path}
1:                 		else if(args.length==9){
1:                 			int opt1=selectArg(args[3]);
1:                 			int opt2=selectArg(args[5]);
1:                 			int opt3=selectArg(args[7]);
1:                 			if(opt1==0 || opt2==0 || opt3==0)
1:                 				printHelp();
1:                 			else if(opt1==1 && opt2==2 && opt3==3){
1:                 				generateXML(access,args[4],stmt,time,null);
1:                 				generateHTML(args[4],args[6],args[8],false);
1:                 			}
1:                 			else if(opt1==2 && opt2==3 && opt3==1){
1:                 				generateXML(access,args[8],stmt,time,null);
1:                 				generateHTML(args[8],args[4],args[6],false);
1:                 			}
1:                 			else if(opt1==3 && opt2==1 && opt3==2){
1:                 				generateXML(access,args[6],stmt,time,null);
1:                 				generateHTML(args[6],args[8],args[4],false);
1:                 			}
1:                 			else if(opt1==1 && opt2==3 && opt3==2){
1:                 				generateXML(access,args[4],stmt,time,null);
1:                 				generateHTML(args[4],args[8],args[6],false);
1:                 			}
1:                 			else if(opt1==2 && opt2==1 && opt3==3){
1:                 				generateXML(access,args[6],stmt,time,null);
1:                 				generateHTML(args[6],args[4],args[8],false);
1:                 			}
1:                 			else if(opt1==3 && opt2==2 && opt3==1){
1:                 				generateXML(access,args[8],stmt,time,null);
1:                 				generateHTML(args[8],args[6],args[4],false);
1:                 			}
1:                 			else
1:                 				printHelp();
1:                 		}
1:                 		else
1:                 			printHelp();
1:                 	}
1:                 	else{
0:                 		System.out.println(
0:                 				"====================================================\n" +
0:                 				"--- An Error Occured: No Statistics has Captured ---\n" +
0:                 				"-- Possible reasons:                              --\n" +
0:                 				"-- 1) The statement executed is a DDL statement.  --\n" +
0:                 				"-- Statistics will not capture for DDL statements --\n" +
0:                 				"-- by the Derby.                                  --\n" +
0:                 				"-- 2) The statement ID entered is incorrect.      --\n" +
0:                 				"-- 3) Schema specified does not exist.            --\n" +
0:                 				"====================================================\n"
1:                 		);
1:                 	}
0:                 	System.out.println(
0:             				"====================================================\n" +
0:             				"---              An Error Occured:               ---\n" +
0:             				"-------   Specified Schema does not exist.   -------\n" +
0:             				"======================================================");
commit:4e20a51
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This class is the main entry point to the tool Graphical Query Explainer.
1:  * 
1:  */
1: package org.apache.derby.tools;
1: 
1: import java.io.File;
1: import java.security.AccessController;
1: import org.apache.derby.impl.tools.planexporter.AccessDatabase;
1: import org.apache.derby.impl.tools.planexporter.CreateHTMLFile;
1: import org.apache.derby.impl.tools.planexporter.CreateXMLFile;
1: 
1: /**
0:  * @author Nirmal
1:  *
1:  */
1: public class PlanExporter {
1: 
1: 	private static String dbURL = null; //connection URL
1: 	private static String xslStyleSheetName ="resources/vanilla_html.xsl";//default xsl
0: 	private static final int xml=1;
0: 	private static final int html=2;
0: 	private static final int xsl=3;
1: 
1: 	/**
1: 	 * @param args 
0: 	 * 1) database string eg: jdbc:derby:myDB --------- 
0: 	 * 2) username ------------------------------------
0: 	 * 3) password ------------------------------------
0: 	 * 4) database schema -----------------------------
0: 	 * 5) statement ID (36 characters) ----------------
1: 	 * and user specified arguments.
1: 	 */
1: 	public static void main(String[] args) {
1: 
1: 		try{
0: 			if(args.length>6 && args.length<12 ){
0: 				dbURL = args[0]+";create=false"+
0: 				";user="+args[1]+";password="+args[2];
1: 
0: 				AccessDatabase access = new AccessDatabase(dbURL, args[3], args[4]);
0: 				access.createConnection();
0: 				if(access.initializeDataArray()){
0: 					access.createXMLFragment();
0: 					access.markTheDepth();
0: 					String stmt=access.statement();
0: 					access.shutdown();
1: 					
0: 					//advanced XSL feature
0: 					//possible occurrences are
0: 					//-adv -xml {path} -xsl {path} or
0: 					//-adv -xsl {path} -xml {path}
0: 					if(args.length==10 && 
0: 						args[5].equalsIgnoreCase("-adv")){
0: 						int opt1=selectArg(args[6]);
0: 						int opt2=selectArg(args[8]);
0: 						if(opt1==1 && opt2==3){
0: 							if(args[9].endsWith(".xsl")||
0: 									args[9].endsWith(".XSL"))
0: 								generateXML(access,args[7],stmt,args[9]);
1: 							else
0: 								generateXML(access,args[7],stmt,args[9]+".xsl");
1: 						}
0: 						else if(opt1==3 && opt2==1){
0: 							if(args[7].endsWith(".xsl")||
0: 									args[7].endsWith(".XSL"))
0: 								generateXML(access,args[9],stmt,args[7]);
1: 							else
0: 								generateXML(access,args[9],stmt,args[7]+".xsl");
1: 						}
1: 						else
1: 							printHelp();
1: 					}
0: 					//possible occurrences are -xml {path} or -html {path} 
0: 					else if(args.length==7){
0: 						int opt=selectArg(args[5]);
0: 						if(opt==0 || opt==3)
1: 							printHelp();
0: 						else if(opt==1)
0: 							generateXML(access,args[6],stmt,null);
1: 						else{
0: 							generateXML(access,"temp.xml",stmt,null);
0: 							generateHTML("temp.xml",args[6],xslStyleSheetName,true);
0: 							deleteFile("temp.xml");
1: 						}
1: 					}
0: 					//possible occurrences are
0: 					//-xml {path} and -html {path}
0: 					//-html {path} and -xml {path}
0: 					//-html {path} and -xsl {path}
0: 					//-xsl {path} and -html {path}
0: 					else if(args.length==9){
0: 						int opt1=selectArg(args[5]);
0: 						int opt2=selectArg(args[7]);
0: 						if(opt1==0 || opt2==0)
1: 							printHelp();
0: 						else if(opt1==1 && opt2==2){
0: 							generateXML(access,args[6],stmt,null);
0: 							generateHTML(args[6],args[8],xslStyleSheetName,true);
1: 						}
0: 						else if(opt1==2 && opt2==1){
0: 							generateXML(access,args[8],stmt,null);
0: 							generateHTML(args[8],args[6],xslStyleSheetName,true);
1: 						}
0: 						else if(opt1==2 && opt2==3){
0: 							generateXML(access,"temp.xml",stmt,null);
0: 							generateHTML("temp.xml",args[6],args[8],false);
0: 							deleteFile("temp.xml");
1: 						}
0: 						else if(opt1==3 && opt2==2){
0: 							generateXML(access,"temp.xml",stmt,null);
0: 							generateHTML("temp.xml",args[8],args[6],false);
0: 							deleteFile("temp.xml");
1: 						}
1: 						else
1: 							printHelp();
1: 					}
0: 					//possible occurrences are
0: 					//-xml {path} and -html {path} and -xsl {path}
0: 					//-html {path} and -xsl {path} and -xml {path}
0: 					//-xsl {path} and -xml {path} and -html {path}
0: 					//-xml {path} and -xsl {path} and -html {path}
0: 					//-html {path} and -xml {path} and -xsl {path}
0: 					//-xsl {path} and -html {path} and -xml {path}
1: 					else{
0: 						int opt1=selectArg(args[5]);
0: 						int opt2=selectArg(args[7]);
0: 						int opt3=selectArg(args[9]);
0: 						if(opt1==0 || opt2==0 || opt3==0)
1: 							printHelp();
0: 						else if(opt1==1 && opt2==2 && opt3==3){
0: 							generateXML(access,args[6],stmt,null);
0: 							generateHTML(args[6],args[8],args[10],false);
1: 						}
0: 						else if(opt1==2 && opt2==3 && opt3==1){
0: 							generateXML(access,args[10],stmt,null);
0: 							generateHTML(args[10],args[6],args[8],false);
1: 						}
0: 						else if(opt1==3 && opt2==1 && opt3==2){
0: 							generateXML(access,args[8],stmt,null);
0: 							generateHTML(args[8],args[10],args[6],false);
1: 						}
0: 						else if(opt1==1 && opt2==3 && opt3==2){
0: 							generateXML(access,args[6],stmt,null);
0: 							generateHTML(args[6],args[10],args[8],false);
1: 						}
0: 						else if(opt1==2 && opt2==1 && opt3==3){
0: 							generateXML(access,args[8],stmt,null);
0: 							generateHTML(args[8],args[6],args[10],false);
1: 						}
0: 						else if(opt1==3 && opt2==2 && opt3==1){
0: 							generateXML(access,args[10],stmt,null);
0: 							generateHTML(args[10],args[8],args[6],false);
1: 						}
1: 						else
1: 							printHelp();
1: 					}					
1: 				}
1: 				else{
0: 					System.out.println(
0: 							"====================================================\n" +
0: 							"--- An Error Occured: No Statistics has Captured ---\n" +
0: 							"-- Possible reasons: 							   --\n" +
0: 							"-- 1) The statement executed is a DDL statement.  --\n" +
0: 							"-- Statistics will not capture for DDL statements --\n" +
0: 							"-- by the Derby.                                  --\n" +
0: 							"-- 2) The statement ID entered is incorrect.	   --\n" +
0: 							"====================================================\n"
0: 					);
1: 				}
1: 			}
1: 			else{
1: 				printHelp();
1: 			}
1: 		}catch(Exception ex){
1: 			ex.printStackTrace();
1: 		}
1: 	}	
1: 
1: 	/**
1: 	 * Reading the user's option
1: 	 * @param arg user's option
1: 	 * @return the argument type
1: 	 */
1: 	private static int selectArg(String arg){
1: 		if(arg.equalsIgnoreCase("-xml"))
0: 			return xml;
1: 		else if(arg.equalsIgnoreCase("-html"))
0: 			return html;
1: 		else if(arg.equalsIgnoreCase("-xsl"))
0: 			return xsl;
1: 		else
1: 			return 0;
1: 	}
1: 
1: 	/**
1: 	 * 
1: 	 * @param access instance of AccessDatabase class
1: 	 * @param arg path of XML
1: 	 * @param stmt statement executed
1: 	 * @param xsl name of the style sheet
1: 	 * @throws Exception
1: 	 */
1: 	private static void generateXML(AccessDatabase access, 
0: 			String arg, String stmt,String xsl) throws Exception{
1: 		CreateXMLFile xmlFile = new CreateXMLFile(access);
1: 
0: 		if(arg.endsWith(".xml") || arg.endsWith(".XML")){
0: 			xmlFile.writeTheXMLFile(stmt,
0: 					access.getData(),  
0: 					arg, xsl);
1: 		}
1: 		else{
0: 			xmlFile.writeTheXMLFile(stmt,
0: 					access.getData(),  
0: 					arg.concat(".xml"),
0: 					xsl);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * 
1: 	 * @param arg path to xml
1: 	 * @param path path of HTML
1: 	 * @param style path to xsl
1: 	 * @param def whether the default xsl or not
1: 	 * @throws Exception
1: 	 */
1: 	private static void generateHTML(String arg, String path, 
1: 			String style, boolean def) throws Exception{
1: 		CreateHTMLFile htmlFile = new CreateHTMLFile();
1: 
0: 		if(arg.endsWith(".xml") || arg.endsWith(".XML")){
1: 			htmlFile.getHTML(arg, style, path, def);
1: 		}
1: 		else{
1: 			htmlFile.getHTML(arg.concat(".xml"), style, path, def);
1: 		}
1: 	}
1: 
1: 	private static void printHelp(){
0: 		System.out.println
0: 		(
0: 				"================================================\n" +
0: 				"-------------- PlanExporter Tool ---------------\n" +
0: 				"--   You can pass 7 arguments (minimum), or   --\n" +
0: 				"--       9 arguments or 10 arguments or       --\n" +
0: 				"-----------  11 arguments (maximum)  -----------\n" +
0: 				"--         separated by a space.              --\n" +
0: 				"---------------Mandatory Arguments--------------\n" +
0: 				"1) database string eg: jdbc:derby:myDB ---------\n" +
0: 				"2) username ------------------------------------\n" +
0: 				"3) password ------------------------------------\n" +
0: 				"4) database schema -----------------------------\n" +
0: 				"5) statement ID (36 characters) ----------------\n" +
0: 				"---------------Optional Arguments---------------\n" +
0: 				"-----------Choose at least one option-----------\n" +
0: 				"6) -xml {pathToXML} or -html {pathToHTML} ------\n" +
0: 				"7) -xml {pathToXML} -html {pathToHTML} ---------\n" +
0: 				"8) -xsl {pathToXSL} -html {pathToHTML} ---------\n" +
0: 				"9) -xml {pathToXML} -xsl {pathToXSL} -----------\n" +
0: 				"      -html {pathToHTML} -----------------------\n" +
0: 				"10) -adv -xml {pathToXML} -xsl {pathToXSL} -----\n" +
0: 				"================================================\n"
0: 		);
1: 	}
1: 
0: 	public static void deleteFile(final String fileName) 
1: 	{
1: 		AccessController.doPrivileged
0: 		(new java.security.PrivilegedAction() {
1: 
1: 			public Object run() {
1: 				File delFile = new File(fileName);
1: 				if (!delFile.exists())
1: 					return null;
1: 				delFile.delete();
1: 				return null;
1: 			}
1: 		}
0: 		);
1: 
1: 	}
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:aba4ea1
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.io.Writer;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException if an error occurs when writing the XML file
1:             String arg, String stmt, String time, String xsl)
1:             throws IOException {
1:         final String fileName = arg.toUpperCase().endsWith(".XML")
1:                                 ? arg : (arg + ".xml");
1: 
1:         Writer out;
1:         try {
1:             out = AccessController.doPrivileged(
1:                     new PrivilegedExceptionAction<Writer>() {
1:                 @Override
1:                 public Writer run() throws IOException {
1:                     return new OutputStreamWriter(
1:                             new FileOutputStream(fileName), "UTF-8");
0:                 }
1:             });
1:         } catch (PrivilegedActionException pae) {
1:             throw (IOException) pae.getCause();
1: 
1:         try {
1:             xmlFile.writeTheXMLFile(stmt, time, out, xsl);
1:         } finally {
1:             out.close();
commit:65ee253
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0758fb6
/////////////////////////////////////////////////////////////////////////
1:         (new java.security.PrivilegedAction<Object>() {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.tools.PlanExporter
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
commit:ce855d2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * This class is the main entry point to the tool Graphical Query Explainer.
0:  */
0:     private static String dbURL = null; //connection URL
0:     private static String xslStyleSheetName ="resources/vanilla_html.xsl";//default xsl
1:     private static final int XML=1;
1:     private static final int HTML=2;
1:     private static final int XSL=3;
0:     /**
0:      * @param args
1:      * 1) database URL eg: jdbc:derby:myDB ---------
1:      * 2) database schema -----------------------------
1:      * 3) statement ID (36 characters) ----------------
0:      * and user specified arguments.
0:      */
0:     public static void main(String[] args) {
0:         try{
1:             if(args.length>4 && args.length<10 ){
1:                 dbURL = args[0];
1:                 AccessDatabase access = new AccessDatabase(dbURL, args[1], args[2]);
0:                 access.createConnection();
0:                 if(access.initializeDataArray()){
0:                     access.createXMLFragment();
0:                     access.markTheDepth();
0:                     String stmt=access.statement();
0:                     String time=access.time();
0:                     access.closeConnection();
0:                     //advanced XSL feature
0:                     //possible occurrences are
0:                     //-adv -xml {path} -xsl {path} or
0:                     //-adv -xsl {path} -xml {path}
0:                     if(args.length==8 &&
0:                         args[3].equalsIgnoreCase("-adv")){
0:                         int opt1=selectArg(args[4]);
0:                         int opt2=selectArg(args[6]);
0:                         if(opt1==1 && opt2==3){
0:                             if(args[7].toUpperCase().endsWith(".XSL"))
0:                                 generateXML(access,args[5],stmt,time,args[7]);
0:                             else
0:                                 generateXML(access,args[5],stmt,time,args[7]+".xsl");
0:                         }
0:                         else if(opt1==3 && opt2==1){
0:                             if(args[5].toUpperCase().endsWith(".XSL"))
0:                                 generateXML(access,args[7],stmt,time,args[5]);
0:                             else
0:                                 generateXML(access,args[7],stmt,time,args[5]+".xsl");
0:                         }
0:                         else
0:                             printHelp();
0:                     }
0:                     //possible occurrences are -xml {path} or -html {path}
0:                     else if(args.length==5){
0:                         int opt=selectArg(args[3]);
0:                         if(opt==0 || opt==3)
0:                             printHelp();
0:                         else if(opt==1)
0:                             generateXML(access,args[4],stmt,time,null);
0:                         else{
0:                             generateXML(access,"temp.xml",stmt,time,null);
0:                             generateHTML("temp.xml",args[4],xslStyleSheetName,true);
0:                             deleteFile("temp.xml");
0:                         }
0:                     }
0:                     //possible occurrences are
0:                     //-xml {path} and -html {path}
0:                     //-html {path} and -xml {path}
0:                     //-html {path} and -xsl {path}
0:                     //-xsl {path} and -html {path}
0:                     else if(args.length==7){
0:                         int opt1=selectArg(args[3]);
0:                         int opt2=selectArg(args[5]);
0:                         if(opt1==0 || opt2==0)
0:                             printHelp();
0:                         else if(opt1==1 && opt2==2){
0:                             generateXML(access,args[4],stmt,time,null);
0:                             generateHTML(args[4],args[6],xslStyleSheetName,true);
0:                         }
0:                         else if(opt1==2 && opt2==1){
0:                             generateXML(access,args[6],stmt,time,null);
0:                             generateHTML(args[6],args[4],xslStyleSheetName,true);
0:                         }
0:                         else if(opt1==2 && opt2==3){
0:                             generateXML(access,"temp.xml",stmt,time,null);
0:                             generateHTML("temp.xml",args[4],args[6],false);
0:                             deleteFile("temp.xml");
0:                         }
0:                         else if(opt1==3 && opt2==2){
0:                             generateXML(access,"temp.xml",stmt,time,null);
0:                             generateHTML("temp.xml",args[6],args[4],false);
0:                             deleteFile("temp.xml");
0:                         }
0:                         else
0:                             printHelp();
0:                     }
0:                     //possible occurrences are
0:                     //-xml {path} and -html {path} and -xsl {path}
0:                     //-html {path} and -xsl {path} and -xml {path}
0:                     //-xsl {path} and -xml {path} and -html {path}
0:                     //-xml {path} and -xsl {path} and -html {path}
0:                     //-html {path} and -xml {path} and -xsl {path}
0:                     //-xsl {path} and -html {path} and -xml {path}
0:                     else if(args.length==9){
0:                         int opt1=selectArg(args[3]);
0:                         int opt2=selectArg(args[5]);
0:                         int opt3=selectArg(args[7]);
0:                         if(opt1==0 || opt2==0 || opt3==0)
0:                             printHelp();
0:                         else if(opt1==1 && opt2==2 && opt3==3){
0:                             generateXML(access,args[4],stmt,time,null);
0:                             generateHTML(args[4],args[6],args[8],false);
0:                         }
0:                         else if(opt1==2 && opt2==3 && opt3==1){
0:                             generateXML(access,args[8],stmt,time,null);
0:                             generateHTML(args[8],args[4],args[6],false);
0:                         }
0:                         else if(opt1==3 && opt2==1 && opt3==2){
0:                             generateXML(access,args[6],stmt,time,null);
0:                             generateHTML(args[6],args[8],args[4],false);
0:                         }
0:                         else if(opt1==1 && opt2==3 && opt3==2){
0:                             generateXML(access,args[4],stmt,time,null);
0:                             generateHTML(args[4],args[8],args[6],false);
0:                         }
0:                         else if(opt1==2 && opt2==1 && opt3==3){
0:                             generateXML(access,args[6],stmt,time,null);
0:                             generateHTML(args[6],args[4],args[8],false);
0:                         }
0:                         else if(opt1==3 && opt2==2 && opt3==1){
0:                             generateXML(access,args[8],stmt,time,null);
0:                             generateHTML(args[8],args[6],args[4],false);
0:                         }
0:                         else
0:                             printHelp();
0:                     }
0:                     else
0:                         printHelp();
0:                 }
0:                 else{
0:                     System.out.println(
0:                             "====================================================\n" +
0:                             "--- An Error Occured: No Statistics has Captured ---\n" +
0:                             "-- Possible reasons:                                --\n" +
0:                             "-- 1) The statement executed is a DDL statement.  --\n" +
0:                             "-- Statistics will not capture for DDL statements --\n" +
0:                             "-- by the Derby.                                  --\n" +
0:                             "-- 2) The statement ID entered is incorrect.       --\n" +
0:                             "====================================================\n"
0:                     );
0:                 }
0:             }
0:             else
0:                 printHelp();
0:         }catch(Exception ex){
0:             ex.printStackTrace();
0:         }
0:     }
0:     /**
0:      * Reading the user's option
0:      * @param arg user's option
0:      * @return the argument type
0:      */
0:     private static int selectArg(String arg){
0:         if(arg.equalsIgnoreCase("-xml"))
1:             return XML;
0:         else if(arg.equalsIgnoreCase("-html"))
1:             return HTML;
0:         else if(arg.equalsIgnoreCase("-xsl"))
1:             return XSL;
0:         else
0:             return 0;
0:     }
0:     /**
0:      *
0:      * @param access instance of AccessDatabase class
0:      * @param arg path of XML
0:      * @param stmt statement executed
1:      * @param time time which the statement was executed
0:      * @param xsl name of the style sheet
0:      * @throws Exception
0:      */
0:     private static void generateXML(AccessDatabase access,
0:             String arg, String stmt, String time, String xsl) throws Exception{
0:         CreateXMLFile xmlFile = new CreateXMLFile(access);
1:         if(arg.toUpperCase().endsWith(".XML")){
0:             xmlFile.writeTheXMLFile(stmt, time,
0:                     access.getData(),
0:                     arg, xsl);
0:         }
0:         else{
0:             xmlFile.writeTheXMLFile(stmt, time,
0:                     access.getData(),
0:                     arg.concat(".xml"),
0:                     xsl);
0:         }
0:     }
0:     /**
0:      *
0:      * @param arg path to xml
0:      * @param path path of HTML
0:      * @param style path to xsl
0:      * @param def whether the default xsl or not
0:      * @throws Exception
0:      */
0:     private static void generateHTML(String arg, String path,
0:             String style, boolean def) throws Exception{
0:         CreateHTMLFile htmlFile = new CreateHTMLFile();
1:         if(arg.toUpperCase().endsWith(".XML")){
0:             htmlFile.getHTML(arg, style, path, def);
0:         }
0:         else{
0:             htmlFile.getHTML(arg.concat(".xml"), style, path, def);
0:         }
0:     }
0:     private static void printHelp(){
0:         System.out.println
0:         (
0:                 "================================================\n" +
0:                 "-------------- PlanExporter Tool ---------------\n" +
0:                 "--   You can pass 5 arguments (minimum), or   --\n" +
0:                 "--       7 arguments or 8 arguments or        --\n" +
0:                 "-----------  9 arguments (maximum)  ------------\n" +
0:                 "--         separated by a space.              --\n" +
0:                 "---------------Mandatory Arguments--------------\n" +
0:                 "1) database URL --------------------------------\n" +
0:                 "2) database schema -----------------------------\n" +
0:                 "3) statement ID (36 characters) ----------------\n" +
0:                 "---------------Optional Arguments---------------\n" +
0:                 "-----------Choose at least one option-----------\n" +
0:                 "a) -xml {pathToXML} or -html {pathToHTML} ------\n" +
0:                 "b) -xml {pathToXML} -html {pathToHTML} ---------\n" +
0:                 "c) -xsl {pathToXSL} -html {pathToHTML} ---------\n" +
0:                 "d) -xml {pathToXML} -xsl {pathToXSL} -----------\n" +
0:                 "      -html {pathToHTML} -----------------------\n" +
0:                 "e) -adv -xml {pathToXML} -xsl {pathToXSL} ------\n" +
0:                 "================================================\n"
0:         );
0:     }
1:     private static void deleteFile(final String fileName)
0:     {
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction() {
1: 
0:             public Object run() {
0:                 File delFile = new File(fileName);
0:                 if (!delFile.exists())
0:                     return null;
0:                 delFile.delete();
0:                 return null;
0:             }
0:         }
0:         );
1: 
0:     }
commit:82d6586
/////////////////////////////////////////////////////////////////////////
0: 	private static final int XML=1;
0: 	private static final int HTML=2;
0: 	private static final int XSL=3;
0: 	 * 1) database URL eg: jdbc:derby:myDB ---------
0: 	 * 2) database schema -----------------------------
0: 	 * 3) statement ID (36 characters) ----------------
0: 			if(args.length>4 && args.length<10 ){
0: 				dbURL = args[0];
0: 				AccessDatabase access = new AccessDatabase(dbURL, args[1], args[2]);
0: 					String time=access.time();
0: 					access.closeConnection();
0: 					if(args.length==8 && 
0: 						args[3].equalsIgnoreCase("-adv")){
0: 						int opt1=selectArg(args[4]);
0: 						int opt2=selectArg(args[6]);
0: 							if(args[7].toUpperCase().endsWith(".XSL"))
0: 								generateXML(access,args[5],stmt,time,args[7]);
0: 								generateXML(access,args[5],stmt,time,args[7]+".xsl");
0: 							if(args[5].toUpperCase().endsWith(".XSL"))
0: 								generateXML(access,args[7],stmt,time,args[5]);
0: 								generateXML(access,args[7],stmt,time,args[5]+".xsl");
0: 					else if(args.length==5){
0: 						int opt=selectArg(args[3]);
0: 							generateXML(access,args[4],stmt,time,null);
0: 							generateXML(access,"temp.xml",stmt,time,null);
0: 							generateHTML("temp.xml",args[4],xslStyleSheetName,true);
/////////////////////////////////////////////////////////////////////////
0: 					else if(args.length==7){
0: 						int opt1=selectArg(args[3]);
0: 						int opt2=selectArg(args[5]);
0: 							generateXML(access,args[4],stmt,time,null);
0: 							generateHTML(args[4],args[6],xslStyleSheetName,true);
0: 							generateXML(access,args[6],stmt,time,null);
0: 							generateHTML(args[6],args[4],xslStyleSheetName,true);
0: 							generateXML(access,"temp.xml",stmt,time,null);
0: 							generateHTML("temp.xml",args[4],args[6],false);
0: 							generateXML(access,"temp.xml",stmt,time,null);
0: 							generateHTML("temp.xml",args[6],args[4],false);
/////////////////////////////////////////////////////////////////////////
0: 					else if(args.length==9){
0: 						int opt1=selectArg(args[3]);
0: 						int opt2=selectArg(args[5]);
0: 						int opt3=selectArg(args[7]);
0: 							generateXML(access,args[4],stmt,time,null);
0: 							generateHTML(args[4],args[6],args[8],false);
0: 							generateXML(access,args[8],stmt,time,null);
0: 							generateHTML(args[8],args[4],args[6],false);
0: 							generateXML(access,args[6],stmt,time,null);
0: 							generateHTML(args[6],args[8],args[4],false);
0: 							generateXML(access,args[4],stmt,time,null);
0: 							generateHTML(args[4],args[8],args[6],false);
0: 							generateXML(access,args[6],stmt,time,null);
0: 							generateHTML(args[6],args[4],args[8],false);
0: 							generateXML(access,args[8],stmt,time,null);
0: 							generateHTML(args[8],args[6],args[4],false);
0: 					}	
0: 					else
0: 						printHelp();
/////////////////////////////////////////////////////////////////////////
0: 			else
0: 			
/////////////////////////////////////////////////////////////////////////
0: 			return XML;
0: 			return HTML;
0: 			return XSL;
/////////////////////////////////////////////////////////////////////////
0: 	 * @param time time which the statement was executed
0: 			String arg, String stmt, String time, String xsl) throws Exception{
0: 		if(arg.toUpperCase().endsWith(".XML")){
0: 			xmlFile.writeTheXMLFile(stmt, time,
0: 			xmlFile.writeTheXMLFile(stmt, time,
/////////////////////////////////////////////////////////////////////////
0: 		if(arg.toUpperCase().endsWith(".XML")){
/////////////////////////////////////////////////////////////////////////
0: 				"--   You can pass 5 arguments (minimum), or   --\n" +
0: 				"--       7 arguments or 8 arguments or        --\n" +
0: 				"-----------  9 arguments (maximum)  ------------\n" +
0: 				"1) database URL --------------------------------\n" +
0: 				"2) database schema -----------------------------\n" +
0: 				"3) statement ID (36 characters) ----------------\n" +
0: 				"a) -xml {pathToXML} or -html {pathToHTML} ------\n" +
0: 				"b) -xml {pathToXML} -html {pathToHTML} ---------\n" +
0: 				"c) -xsl {pathToXSL} -html {pathToHTML} ---------\n" +
0: 				"d) -xml {pathToXML} -xsl {pathToXSL} -----------\n" +
0: 				"e) -adv -xml {pathToXML} -xsl {pathToXSL} ------\n" +
0: 	private static void deleteFile(final String fileName) 
============================================================================