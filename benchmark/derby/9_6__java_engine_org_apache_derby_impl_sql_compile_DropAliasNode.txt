1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DropAliasNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.catalog.AliasInfo;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:3bb140c: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A DropAliasNode  represents a DROP ALIAS statement.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class DropAliasNode extends DDLStatementNode
1:eac0369: {
1:eac0369: 	private char aliasType;
1:eac0369: 	private char nameSpace;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a DropAliasNode
1:eac0369: 	 *
1:eac0369: 	 * @param dropAliasName	The name of the method alias being dropped
1:eac0369: 	 * @param aliasType				Alias type
1:3bb140c:      * @param cm  Context manager
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException
1:eac0369: 	 */
1:3bb140c:     DropAliasNode(TableName dropAliasName, char aliasType, ContextManager cm)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:3bb140c:         super(dropAliasName, cm);
1:3bb140c:         this.aliasType = aliasType;
1:eac0369: 	
1:eac0369: 		switch (this.aliasType)
1:eac0369: 		{
1:22d64f5: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1:22d64f5: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR;
1:22d64f5: 				break;
1:22d64f5: 
1:22d64f5:             case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1:eac0369: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1:eac0369: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR;
1:eac0369: 				break;
1:eac0369: 
1:582425f: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1:582425f: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_CHAR;
1:582425f: 				break;
1:eac0369: 
1:fa292b9: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1:fa292b9: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_CHAR;
1:fa292b9: 				break;
1:fa292b9: 
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("bad type to DropAliasNode: "+this.aliasType);
1:eac0369: 				}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public	char	getAliasType() { return aliasType; }
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "DROP ".concat(aliasTypeName(aliasType));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this DropMethodAliasNode.  
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		DataDictionary	dataDictionary = getDataDictionary();
1:eac0369: 		String			aliasName = getRelativeName();
1:eac0369: 
1:eac0369: 		AliasDescriptor	ad = null;
1:eac0369: 		SchemaDescriptor sd = getSchemaDescriptor();
1:eac0369: 		
1:eac0369: 		if (sd.getUUID() != null) {
1:eac0369: 			ad = dataDictionary.getAliasDescriptor
1:eac0369: 			                          (sd.getUUID().toString(), aliasName, nameSpace );
1:eac0369: 		}
1:eac0369: 		if ( ad == null )
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OBJECT_DOES_NOT_EXIST, statementToString(), aliasName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// User cannot drop a system alias
1:eac0369: 		if (ad.getSystemAlias())
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_CANNOT_DROP_SYSTEM_ALIASES, aliasName);
1:eac0369: 		}
1:eac0369: 
1:6c4eebf: 		// Statement is dependent on the AliasDescriptor
1:6c4eebf: 		getCompilerContext().createDependency(ad);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// inherit generate() method from DDLStatementNode
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return	getGenericConstantActionFactory().getDropAliasConstantAction(getSchemaDescriptor(), getRelativeName(), nameSpace);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* returns the alias type name given the alias char type */
1:eac0369: 	private static String aliasTypeName( char actualType)
1:eac0369: 	{
1:eac0369: 		String	typeName = null;
1:eac0369: 
1:eac0369: 		switch ( actualType )
1:eac0369: 		{
1:22d64f5: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1:22d64f5: 				typeName = "DERBY AGGREGATE";
1:22d64f5: 				break;
2:eac0369: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1:eac0369: 				typeName = "PROCEDURE";
1:eac0369: 				break;
1:eac0369: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1:eac0369: 				typeName = "FUNCTION";
1:eac0369: 				break;
1:582425f: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1:582425f: 				typeName = "SYNONYM";
1:582425f: 				break;
1:fa292b9: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1:fa292b9: 				typeName = "TYPE";
1:fa292b9: 				break;
1:eac0369: 		}
1:eac0369: 		return typeName;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:6c4eebf
/////////////////////////////////////////////////////////////////////////
1: 		// Statement is dependent on the AliasDescriptor
1: 		getCompilerContext().createDependency(ad);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: class DropAliasNode extends DDLStatementNode
1:      * Constructor for a DropAliasNode
1:      * @param cm  Context manager
1:     DropAliasNode(TableName dropAliasName, char aliasType, ContextManager cm)
1:         super(dropAliasName, cm);
0:         setNodeType(C_NodeTypes.DROP_ALIAS_NODE);
1:         this.aliasType = aliasType;
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:22d64f5
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR;
1: 				break;
1: 
1:             case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1: 				typeName = "DERBY AGGREGATE";
1: 				break;
commit:fa292b9
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_CHAR;
1: 				break;
1: 
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1: 				typeName = "TYPE";
1: 				break;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:0061383
/////////////////////////////////////////////////////////////////////////
0: public class DropAliasNode extends DDLStatementNode
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DropAliasNode
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import org.apache.derby.catalog.AliasInfo;
1: 
1: /**
1:  * A DropAliasNode  represents a DROP ALIAS statement.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class DropAliasNode extends DropStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private char aliasType;
1: 	private char nameSpace;
1: 
1: 	/**
0: 	 * Initializer for a DropAliasNode
1: 	 *
1: 	 * @param dropAliasName	The name of the method alias being dropped
1: 	 * @param aliasType				Alias type
1: 	 *
1: 	 * @exception StandardException
1: 	 */
0: 	public void init(Object dropAliasName, Object aliasType)
1: 				throws StandardException
1: 	{
0: 		TableName dropItem = (TableName) dropAliasName;
0: 		initAndCheck(dropItem);
0: 		this.aliasType = ((Character) aliasType).charValue();
1: 	
1: 		switch (this.aliasType)
1: 		{
1: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
1: 				break;
1: 
1: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR;
1: 				break;
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT("bad type to DropAliasNode: "+this.aliasType);
1: 				}
1: 		}
1: 	}
1: 
1: 	public	char	getAliasType() { return aliasType; }
1: 
0: 	public String statementToString()
1: 	{
1: 		return "DROP ".concat(aliasTypeName(aliasType));
1: 	}
1: 
1: 	/**
1: 	 * Bind this DropMethodAliasNode.  
1: 	 *
0: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
1: 		DataDictionary	dataDictionary = getDataDictionary();
1: 		String			aliasName = getRelativeName();
1: 
1: 		AliasDescriptor	ad = null;
1: 		SchemaDescriptor sd = getSchemaDescriptor();
1: 		
1: 		if (sd.getUUID() != null) {
1: 			ad = dataDictionary.getAliasDescriptor
1: 			                          (sd.getUUID().toString(), aliasName, nameSpace );
1: 		}
1: 		if ( ad == null )
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_OBJECT_DOES_NOT_EXIST, statementToString(), aliasName);
1: 		}
1: 
1: 		// User cannot drop a system alias
1: 		if (ad.getSystemAlias())
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_CANNOT_DROP_SYSTEM_ALIASES, aliasName);
1: 		}
1: 
0: 		return this;
1: 	}
1: 
1: 	// inherit generate() method from DDLStatementNode
1: 
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return	getGenericConstantActionFactory().getDropAliasConstantAction(getSchemaDescriptor(), getRelativeName(), nameSpace);
1: 	}
1: 
1: 	/* returns the alias type name given the alias char type */
1: 	private static String aliasTypeName( char actualType)
1: 	{
1: 		String	typeName = null;
1: 
1: 		switch ( actualType )
1: 		{
1: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 				typeName = "PROCEDURE";
1: 				break;
1: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 				typeName = "FUNCTION";
1: 				break;
1: 		}
1: 		return typeName;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:582425f
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_CHAR;
1: 				break;
0: 
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1: 				typeName = "SYNONYM";
1: 				break;
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import org.apache.derby.catalog.AliasInfo;
0: 
0: /**
0:  * A DropAliasNode  represents a DROP ALIAS statement.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class DropAliasNode extends DropStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private char aliasType;
0: 	private char nameSpace;
0: 
0: 	/**
0: 	 * Initializer for a DropAliasNode
0: 	 *
0: 	 * @param dropAliasName	The name of the method alias being dropped
0: 	 * @param aliasType				Alias type
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 	public void init(Object dropAliasName, Object aliasType)
0: 				throws StandardException
0: 	{
0: 		TableName dropItem = (TableName) dropAliasName;
0: 		initAndCheck(dropItem);
0: 		this.aliasType = ((Character) aliasType).charValue();
0: 	
0: 		switch (this.aliasType)
0: 		{
0: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
0: 				break;
0: 
0: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR;
0: 				break;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT("bad type to DropAliasNode: "+this.aliasType);
0: 				}
0: 		}
0: 	}
0: 
0: 	public	char	getAliasType() { return aliasType; }
0: 
0: 	public String statementToString()
0: 	{
0: 		return "DROP ".concat(aliasTypeName(aliasType));
0: 	}
0: 
0: 	/**
0: 	 * Bind this DropMethodAliasNode.  
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		DataDictionary	dataDictionary = getDataDictionary();
0: 		String			aliasName = getRelativeName();
0: 
0: 		AliasDescriptor	ad = null;
0: 		SchemaDescriptor sd = getSchemaDescriptor();
0: 		
0: 		if (sd.getUUID() != null) {
0: 			ad = dataDictionary.getAliasDescriptor
0: 			                          (sd.getUUID().toString(), aliasName, nameSpace );
0: 		}
0: 		if ( ad == null )
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_DOES_NOT_EXIST, statementToString(), aliasName);
0: 		}
0: 
0: 		// User cannot drop a system alias
0: 		if (ad.getSystemAlias())
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_CANNOT_DROP_SYSTEM_ALIASES, aliasName);
0: 		}
0: 
0: 		return this;
0: 	}
0: 
0: 	// inherit generate() method from DDLStatementNode
0: 
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return	getGenericConstantActionFactory().getDropAliasConstantAction(getSchemaDescriptor(), getRelativeName(), nameSpace);
0: 	}
0: 
0: 	/* returns the alias type name given the alias char type */
0: 	private static String aliasTypeName( char actualType)
0: 	{
0: 		String	typeName = null;
0: 
0: 		switch ( actualType )
0: 		{
0: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 				typeName = "PROCEDURE";
0: 				break;
0: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 				typeName = "FUNCTION";
0: 				break;
0: 		}
0: 		return typeName;
0: 	}
0: }
============================================================================