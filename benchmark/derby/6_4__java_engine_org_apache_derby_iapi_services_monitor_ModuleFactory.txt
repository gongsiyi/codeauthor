1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.monitor.ModuleFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.stream.InfoStreams;
1:eac0369: import org.apache.derby.iapi.services.monitor.PersistentService;
1:eac0369: import org.apache.derby.iapi.services.loader.InstanceGetter;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Locale;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: 	  
3:eac0369: /**
1:eac0369: The monitor provides a central registry for all modules in the system,
1:eac0369: and manages loading, starting, and finding them.
1:eac0369: */
1:eac0369: 
1:eac0369: public interface ModuleFactory
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Find the module in the system with the given module protocol,
1:eac0369: 	 * protocolVersion and identifier.
1:eac0369: 	    
1:eac0369:      * @return The module instance if found, or null.
1:eac0369:      */
1:eac0369:     public Object findModule(Object service, String protocol, String identifier);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the name of the service that the passed in module lives in.
1:eac0369: 	*/
1:eac0369: 	public String getServiceName(Object serviceModule);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the locale of the service that the passed in module lives in.
1:eac0369: 		Will return null if no-locale has been defined.
1:eac0369: 	*/
1:eac0369: 	public Locale getLocale(Object serviceModule);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Translate a string of the form ll[_CC[_variant]] to a Locale.
1:eac0369: 		This is in the Monitor because we want this translation to be
1:eac0369: 		in only one place in the code.
1:eac0369: 	 */
1:eac0369: 	public Locale getLocaleFromString(String localeDescription)
1:eac0369: 					throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the locale for the service *outside* of boot time.
1:eac0369: 
1:eac0369: 		@param userDefinedLocale	A String in the form xx_YY, where xx is the
1:eac0369: 									language code and YY is the country code.
1:eac0369: 
1:eac0369: 		@return		The new Locale for the service
1:eac0369: 
1:eac0369: 		@exception StandardException	Thrown on error
1:eac0369: 	 */
1:eac0369: 	public Locale setLocale(Object serviceModule, String userDefinedLocale)
1:eac0369: 						throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the locale for the service at boot time. The passed-in
1:eac0369: 		properties must be the one passed to the boot method.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Derby error.
1:eac0369: 	 */
1:eac0369: 	public Locale setLocale(Properties serviceProperties,
1:eac0369: 							String userDefinedLocale)
1:eac0369: 						throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the PersistentService object for a service.
1:eac0369: 		Will return null if the service does not exist.
1:eac0369: 	*/
1:eac0369: 	public PersistentService getServiceType(Object serviceModule);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the PersistentService for a subsubprotocol.
1:eac0369:      *
1:eac0369:      * @return the PersistentService or null if it does not exist
1:eac0369:      *
1:eac0369:      * @exception StandardException
1:eac0369:      */
1:00c5b52:     public PersistentService getServiceProvider(String subSubProtocol) throws StandardException;
1:eac0369:     
1:c18625c:     /**
1:c18625c:      * Return the application set of properties which correspond
1:c18625c:      * to the set of properties in the file derby.properties.
1:c18625c:      */
1:eac0369: 	public Properties getApplicationProperties();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Shut down the complete system that was started by this Monitor. Will
1:eac0369: 		cause the stop() method to be called on each loaded module.
1:eac0369: 	*/
1:eac0369: 	public void shutdown();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Shut down a service that was started by this Monitor. Will
1:eac0369: 		cause the stop() method to be called on each loaded module.
1:eac0369: 		Requires that a context stack exist.
1:eac0369: 	*/
1:eac0369: 	public void shutdown(Object service);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Obtain a class that supports the given identifier.
1:eac0369: 
1:eac0369: 		@param identifier	identifer to associate with class
1:eac0369: 
1:eac0369: 		@return a reference InstanceGetter
1:eac0369: 
1:eac0369: 		@exception StandardException See Monitor.classFromIdentifier
1:eac0369: 	*/
1:eac0369: 	public InstanceGetter classFromIdentifier(int identifier)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Obtain an new instance of a class that supports the given identifier.
1:eac0369: 
1:eac0369: 		@param identifier	identifer to associate with class
1:eac0369: 
1:eac0369: 		@return a reference to a newly created object
1:eac0369: 
1:eac0369: 		@exception StandardException See Monitor.newInstanceFromIdentifier
1:eac0369: 	
1:eac0369: 	*/
1:eac0369: 	public Object newInstanceFromIdentifier(int identifier)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the environment object that this system was booted in.
1:eac0369: 		This is a free form object that is set by the method the
1:eac0369: 		system is booted. For example when running in a Marimba system
1:eac0369: 		it is set to the maribma application context. In most environments
1:eac0369: 		it will be set to a java.io.File object representing the system home directory.
1:eac0369: 		Code that call this method usualy have predefined knowledge of the type of the returned object, e.g.
1:eac0369: 		Marimba store code knows that this will be set to a marimba application
1:eac0369: 		context.
1:eac0369: 	*/
1:eac0369: 	public Object getEnvironment();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return an array of the service identifiers that are running and
1:eac0369: 		implement the passed in protocol (java interface class name).
1:eac0369: 		This list is a snapshot of the current running systesm, once
1:eac0369: 		the call returns the service may have been shutdown or
1:eac0369: 		new ones added.
1:eac0369: 
1:eac0369: 		@return The list of service names, if no services exist that
1:eac0369: 		implement the protocol an array with zero elements is returned.
1:eac0369: 	*/
1:eac0369: 	public String[] getServiceList(String protocol);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a persistent service.
1:eac0369: 		<BR>
1:eac0369: 		<B>Do not call directly - use Monitor.startPersistentService()</B>
1:00c5b52: 		
1:00c5b52: 		<P> The poperty set passed in is for boot options for the modules
1:00c5b52: 		required to start the service. It does not support defining different
1:00c5b52: 		or new modules implementations.
1:00c5b52: 		
1:00c5b52: 		@param serviceName Name of the service to be started
1:00c5b52: 		@param properties Property set made available to all modules booted
1:00c5b52: 		for this service, through their ModuleControl.boot method.
1:eac0369: 
1:eac0369: 		@return true if the service type is handled by the monitor, false if it isn't
1:eac0369: 
1:eac0369: 		@exception StandardException An attempt to start the service failed.
1:eac0369: 
1:eac0369: 		@see Monitor#startPersistentService
1:eac0369: 	*/
1:eac0369: 	public boolean startPersistentService(String serviceName, Properties properties)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create a persistent service.
1:eac0369: 		<BR>
1:eac0369: 		<B>Do not call directly - use Monitor.startPersistentService()</B>
1:eac0369: 
1:eac0369: 		@exception StandardException An attempt to create the service failed.
1:eac0369: 
1:eac0369: 		@see Monitor#createPersistentService
1:eac0369: 	*/
1:eac0369: 	public Object createPersistentService(String factoryInterface, String serviceName, Properties properties)
1:eac0369: 		throws StandardException;
1:eac0369:     public void removePersistentService(String name)
1:eac0369:         throws StandardException;
1:eac0369:    
1:eac0369: 	/**
1:eac0369: 		Start a non-persistent service.
1:eac0369: 		
1:eac0369: 		<BR>
1:eac0369: 		<B>Do not call directly - use Monitor.startNonPersistentService()</B>
1:eac0369: 
1:eac0369: 		@exception StandardException An attempt to start the service failed.
1:eac0369: 
1:eac0369: 		@see Monitor#startNonPersistentService
1:eac0369: 	*/
1:eac0369: 	public Object startNonPersistentService(String factoryInterface, String serviceName, Properties properties)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:5107349: 		Canonicalize a service name, mapping different user-specifications of a database name
1:5107349:         onto a single, standard name.
1:5107349: 	*/
1:5107349:     public  String  getCanonicalServiceName( String userSpecifiedName )
1:5107349:         throws StandardException;
1:5107349:     
1:5107349: 	/**
1:eac0369: 		Find a service.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		<B>Do not call directly - use Monitor.findService()</B>
1:eac0369: 
1:eac0369: 		@return a refrence to a module represeting the service or null if the service does not exist.
1:eac0369: 
1:eac0369: 		@see Monitor#findService
1:eac0369: 	*/
1:eac0369: 	public Object findService(String protocol, String identifier);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a module.
1:eac0369: 		
1:eac0369: 		<BR>
1:eac0369: 		<B>Do not call directly - use Monitor.startSystemModule() or Monitor.bootServiceModule()</B>
1:eac0369: 
1:eac0369: 		@exception StandardException An attempt to start the module failed.
1:eac0369: 
1:eac0369: 		@see Monitor#startSystemModule
1:eac0369: 		@see Monitor#bootServiceModule
1:eac0369: 	*/
1:eac0369: 	public Object startModule(boolean create, Object service, String protocol,
1:eac0369: 									 String identifier, Properties properties)
1:eac0369: 									 throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 		Get the defined default system streams object.
1:eac0369: 	*/
1:eac0369: 	public InfoStreams getSystemStreams();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start all services identified by derby.service.*
1:eac0369: 		in the property set. If bootAll is true the services
1:eac0369: 		that are persistent will be booted.
1:eac0369: 	*/
1:eac0369: 	public void startServices(Properties properties, boolean bootAll);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return a property from the JVM's system set.
1:ec8172b: 		In a Java2 environment this will be executed as a privileged block
1:ec8172b: 		if and only if the property starts with 'derby.'.
1:eac0369: 		If a SecurityException occurs, null is returned.
1:eac0369: 	*/
1:eac0369: 	public String getJVMProperty(String key);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a newly created background thread.
1:eac0369: 		The thread is set to be a daemon but is not started.
1:eac0369: 	*/
1:eac0369: 	public Thread getDaemonThread(Runnable task, String name, boolean setMinPriority);
1:eac0369: 
1:e7deac4:     /**
1:e7deac4:      * Check if a thread is a daemon thread created by {@link #getDaemonThread}.
1:e7deac4:      *
1:e7deac4:      * @param thread the thread to check
1:e7deac4:      * @return {@code true} if {@code thread} was created by
1:e7deac4:      *   {@code getDaemonThread()}, {@code false} otherwise.
1:e7deac4:      */
1:e7deac4:     public boolean isDaemonThread(Thread thread);
1:eac0369: 
1:eac0369: 	public ProductVersionHolder getEngineVersion();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the UUID factory for the system.  The UUID factory provides
1:eac0369: 	 * methods to create and recreate database unique identifiers.
1:eac0369: 	 */
1:eac0369: 	public org.apache.derby.iapi.services.uuid.UUIDFactory getUUIDFactory();
1:3fcea8a:         
1:3fcea8a: 	/**
1:3fcea8a: 	 * Get the Timer factory for the system. The Timer factory provides
1:3fcea8a:      * access to Timer objects for various purposes.
1:3fcea8a:      *
1:3fcea8a:      * @return the system's Timer factory.
1:3fcea8a: 	 */
1:3fcea8a:     public org.apache.derby.iapi.services.timer.TimerFactory getTimerFactory();
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7deac4
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check if a thread is a daemon thread created by {@link #getDaemonThread}.
1:      *
1:      * @param thread the thread to check
1:      * @return {@code true} if {@code thread} was created by
1:      *   {@code getDaemonThread()}, {@code false} otherwise.
1:      */
1:     public boolean isDaemonThread(Thread thread);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5107349
/////////////////////////////////////////////////////////////////////////
1: 		Canonicalize a service name, mapping different user-specifications of a database name
1:         onto a single, standard name.
1: 	*/
1:     public  String  getCanonicalServiceName( String userSpecifiedName )
1:         throws StandardException;
1:     
1: 	/**
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Derby error.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:c18625c
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Return the application set of properties which correspond
1:      * to the set of properties in the file derby.properties.
1:      */
commit:ec8172b
/////////////////////////////////////////////////////////////////////////
1: 		In a Java2 environment this will be executed as a privileged block
1: 		if and only if the property starts with 'derby.'.
commit:00c5b52
/////////////////////////////////////////////////////////////////////////
1:     public PersistentService getServiceProvider(String subSubProtocol) throws StandardException;
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		<P> The poperty set passed in is for boot options for the modules
1: 		required to start the service. It does not support defining different
1: 		or new modules implementations.
1: 		
1: 		@param serviceName Name of the service to be started
1: 		@param properties Property set made available to all modules booted
1: 		for this service, through their ModuleControl.boot method.
commit:3fcea8a
/////////////////////////////////////////////////////////////////////////
1:         
1: 	/**
1: 	 * Get the Timer factory for the system. The Timer factory provides
1:      * access to Timer objects for various purposes.
1:      *
1:      * @return the system's Timer factory.
1: 	 */
1:     public org.apache.derby.iapi.services.timer.TimerFactory getTimerFactory();
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.monitor.ModuleFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.monitor;
1: 
1: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.stream.InfoStreams;
1: import org.apache.derby.iapi.services.monitor.PersistentService;
1: import org.apache.derby.iapi.services.loader.InstanceGetter;
1: 
1: import java.util.Properties;
1: import java.util.Locale;
1: import java.io.InputStream;
1: import java.io.IOException;
1: 	  
1: /**
1: The monitor provides a central registry for all modules in the system,
1: and manages loading, starting, and finding them.
1: */
1: 
1: public interface ModuleFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     /**
1:      * Find the module in the system with the given module protocol,
1: 	 * protocolVersion and identifier.
1: 	    
1:      * @return The module instance if found, or null.
1:      */
1:     public Object findModule(Object service, String protocol, String identifier);
1: 
1: 	/**
1: 		Return the name of the service that the passed in module lives in.
1: 	*/
1: 	public String getServiceName(Object serviceModule);
1: 
1: 	/**
1: 		Return the locale of the service that the passed in module lives in.
1: 		Will return null if no-locale has been defined.
1: 	*/
1: 	public Locale getLocale(Object serviceModule);
1: 
1: 	/**
1: 		Translate a string of the form ll[_CC[_variant]] to a Locale.
1: 		This is in the Monitor because we want this translation to be
1: 		in only one place in the code.
1: 	 */
1: 	public Locale getLocaleFromString(String localeDescription)
1: 					throws StandardException;
1: 
1: 
1: 	/**
1: 		Set the locale for the service *outside* of boot time.
1: 
1: 		@param userDefinedLocale	A String in the form xx_YY, where xx is the
1: 									language code and YY is the country code.
1: 
1: 		@return		The new Locale for the service
1: 
1: 		@exception StandardException	Thrown on error
1: 	 */
1: 	public Locale setLocale(Object serviceModule, String userDefinedLocale)
1: 						throws StandardException;
1: 
1: 	/**
1: 		Set the locale for the service at boot time. The passed-in
1: 		properties must be the one passed to the boot method.
1: 
0: 		@exception StandardException	Cloudscape error.
1: 	 */
1: 	public Locale setLocale(Properties serviceProperties,
1: 							String userDefinedLocale)
1: 						throws StandardException;
1: 
1: 	/**
1: 		Return the PersistentService object for a service.
1: 		Will return null if the service does not exist.
1: 	*/
1: 	public PersistentService getServiceType(Object serviceModule);
1: 
1:     /**
1:      * Return the PersistentService for a subsubprotocol.
1:      *
1:      * @return the PersistentService or null if it does not exist
1:      *
1:      * @exception StandardException
1:      */
0:     public PersistentService getServiceProvider( Properties startParams, String subSubProtocol) throws StandardException;
1:     
1: 	public Properties getApplicationProperties();
1: 
1: 	/**
1: 		Shut down the complete system that was started by this Monitor. Will
1: 		cause the stop() method to be called on each loaded module.
1: 	*/
1: 	public void shutdown();
1: 
1: 	/**
1: 		Shut down a service that was started by this Monitor. Will
1: 		cause the stop() method to be called on each loaded module.
1: 		Requires that a context stack exist.
1: 	*/
1: 	public void shutdown(Object service);
1: 
1: 
1: 	/**
1: 		Obtain a class that supports the given identifier.
1: 
1: 		@param identifier	identifer to associate with class
1: 
1: 		@return a reference InstanceGetter
1: 
1: 		@exception StandardException See Monitor.classFromIdentifier
1: 	*/
1: 	public InstanceGetter classFromIdentifier(int identifier)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Obtain an new instance of a class that supports the given identifier.
1: 
1: 		@param identifier	identifer to associate with class
1: 
1: 		@return a reference to a newly created object
1: 
1: 		@exception StandardException See Monitor.newInstanceFromIdentifier
1: 	
1: 	*/
1: 	public Object newInstanceFromIdentifier(int identifier)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Return the environment object that this system was booted in.
1: 		This is a free form object that is set by the method the
1: 		system is booted. For example when running in a Marimba system
1: 		it is set to the maribma application context. In most environments
1: 		it will be set to a java.io.File object representing the system home directory.
1: 		Code that call this method usualy have predefined knowledge of the type of the returned object, e.g.
1: 		Marimba store code knows that this will be set to a marimba application
1: 		context.
1: 	*/
1: 	public Object getEnvironment();
1: 
1: 
1: 	/**
1: 		Return an array of the service identifiers that are running and
1: 		implement the passed in protocol (java interface class name).
1: 		This list is a snapshot of the current running systesm, once
1: 		the call returns the service may have been shutdown or
1: 		new ones added.
1: 
1: 		@return The list of service names, if no services exist that
1: 		implement the protocol an array with zero elements is returned.
1: 	*/
1: 	public String[] getServiceList(String protocol);
1: 
1: 	/**
1: 		Start a persistent service.
1: 		<BR>
1: 		<B>Do not call directly - use Monitor.startPersistentService()</B>
1: 
1: 		@return true if the service type is handled by the monitor, false if it isn't
1: 
1: 		@exception StandardException An attempt to start the service failed.
1: 
1: 		@see Monitor#startPersistentService
1: 	*/
1: 	public boolean startPersistentService(String serviceName, Properties properties)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Create a persistent service.
1: 		<BR>
1: 		<B>Do not call directly - use Monitor.startPersistentService()</B>
1: 
1: 		@exception StandardException An attempt to create the service failed.
1: 
1: 		@see Monitor#createPersistentService
1: 	*/
1: 	public Object createPersistentService(String factoryInterface, String serviceName, Properties properties)
1: 		throws StandardException;
1:     public void removePersistentService(String name)
1:         throws StandardException;
1:    
1: 	/**
1: 		Start a non-persistent service.
1: 		
1: 		<BR>
1: 		<B>Do not call directly - use Monitor.startNonPersistentService()</B>
1: 
1: 		@exception StandardException An attempt to start the service failed.
1: 
1: 		@see Monitor#startNonPersistentService
1: 	*/
1: 	public Object startNonPersistentService(String factoryInterface, String serviceName, Properties properties)
1: 		throws StandardException;
1: 
1: 
1: 	/**
1: 		Find a service.
1: 
1: 		<BR>
1: 		<B>Do not call directly - use Monitor.findService()</B>
1: 
1: 		@return a refrence to a module represeting the service or null if the service does not exist.
1: 
1: 		@see Monitor#findService
1: 	*/
1: 	public Object findService(String protocol, String identifier);
1: 
1: 
1: 	/**
1: 		Start a module.
1: 		
1: 		<BR>
1: 		<B>Do not call directly - use Monitor.startSystemModule() or Monitor.bootServiceModule()</B>
1: 
1: 		@exception StandardException An attempt to start the module failed.
1: 
1: 		@see Monitor#startSystemModule
1: 		@see Monitor#bootServiceModule
1: 	*/
1: 	public Object startModule(boolean create, Object service, String protocol,
1: 									 String identifier, Properties properties)
1: 									 throws StandardException;
1: 
1: 
1: 	/**	
1: 		Get the defined default system streams object.
1: 	*/
1: 	public InfoStreams getSystemStreams();
1: 
1: 
1: 	/**
1: 		Start all services identified by derby.service.*
1: 		in the property set. If bootAll is true the services
1: 		that are persistent will be booted.
1: 	*/
1: 	public void startServices(Properties properties, boolean bootAll);
1: 
1: 	/**
1: 		Return a property from the JVM's system set.
0: 		In a Java2 environment this will be executed as a privliged block
0: 		if and only if the property starts with db2j.
1: 		If a SecurityException occurs, null is returned.
1: 	*/
1: 	public String getJVMProperty(String key);
1: 
1: 	/**
1: 		Get a newly created background thread.
1: 		The thread is set to be a daemon but is not started.
1: 	*/
1: 	public Thread getDaemonThread(Runnable task, String name, boolean setMinPriority);
1: 
1: 	/**
0: 		Set the priority of the current thread.
0: 		If the current thread was not returned by getDaemonThread() then no action is taken.
1: 	*/
0: 	public void setThreadPriority(int priority);
1: 
1: 	public ProductVersionHolder getEngineVersion();
1: 
1: 	/**
1: 	 * Get the UUID factory for the system.  The UUID factory provides
1: 	 * methods to create and recreate database unique identifiers.
1: 	 */
1: 	public org.apache.derby.iapi.services.uuid.UUIDFactory getUUIDFactory();
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.monitor;
0: 
0: import org.apache.derby.iapi.services.info.ProductVersionHolder;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: import org.apache.derby.iapi.services.monitor.PersistentService;
0: import org.apache.derby.iapi.services.loader.InstanceGetter;
0: 
0: import java.util.Properties;
0: import java.util.Locale;
0: import java.io.InputStream;
0: import java.io.IOException;
0: 	  
0: /**
0: The monitor provides a central registry for all modules in the system,
0: and manages loading, starting, and finding them.
0: */
0: 
0: public interface ModuleFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     /**
0:      * Find the module in the system with the given module protocol,
0: 	 * protocolVersion and identifier.
0: 	    
0:      * @return The module instance if found, or null.
0:      */
0:     public Object findModule(Object service, String protocol, String identifier);
0: 
0: 	/**
0: 		Return the name of the service that the passed in module lives in.
0: 	*/
0: 	public String getServiceName(Object serviceModule);
0: 
0: 	/**
0: 		Return the locale of the service that the passed in module lives in.
0: 		Will return null if no-locale has been defined.
0: 	*/
0: 	public Locale getLocale(Object serviceModule);
0: 
0: 	/**
0: 		Translate a string of the form ll[_CC[_variant]] to a Locale.
0: 		This is in the Monitor because we want this translation to be
0: 		in only one place in the code.
0: 	 */
0: 	public Locale getLocaleFromString(String localeDescription)
0: 					throws StandardException;
0: 
0: 
0: 	/**
0: 		Set the locale for the service *outside* of boot time.
0: 
0: 		@param userDefinedLocale	A String in the form xx_YY, where xx is the
0: 									language code and YY is the country code.
0: 
0: 		@return		The new Locale for the service
0: 
0: 		@exception StandardException	Thrown on error
0: 	 */
0: 	public Locale setLocale(Object serviceModule, String userDefinedLocale)
0: 						throws StandardException;
0: 
0: 	/**
0: 		Set the locale for the service at boot time. The passed-in
0: 		properties must be the one passed to the boot method.
0: 
0: 		@exception StandardException	Cloudscape error.
0: 	 */
0: 	public Locale setLocale(Properties serviceProperties,
0: 							String userDefinedLocale)
0: 						throws StandardException;
0: 
0: 	/**
0: 		Return the PersistentService object for a service.
0: 		Will return null if the service does not exist.
0: 	*/
0: 	public PersistentService getServiceType(Object serviceModule);
0: 
0:     /**
0:      * Return the PersistentService for a subsubprotocol.
0:      *
0:      * @return the PersistentService or null if it does not exist
0:      *
0:      * @exception StandardException
0:      */
0:     public PersistentService getServiceProvider( Properties startParams, String subSubProtocol) throws StandardException;
0:     
0: 	public Properties getApplicationProperties();
0: 
0: 	/**
0: 		Shut down the complete system that was started by this Monitor. Will
0: 		cause the stop() method to be called on each loaded module.
0: 	*/
0: 	public void shutdown();
0: 
0: 	/**
0: 		Shut down a service that was started by this Monitor. Will
0: 		cause the stop() method to be called on each loaded module.
0: 		Requires that a context stack exist.
0: 	*/
0: 	public void shutdown(Object service);
0: 
0: 
0: 	/**
0: 		Obtain a class that supports the given identifier.
0: 
0: 		@param identifier	identifer to associate with class
0: 
0: 		@return a reference InstanceGetter
0: 
0: 		@exception StandardException See Monitor.classFromIdentifier
0: 	*/
0: 	public InstanceGetter classFromIdentifier(int identifier)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Obtain an new instance of a class that supports the given identifier.
0: 
0: 		@param identifier	identifer to associate with class
0: 
0: 		@return a reference to a newly created object
0: 
0: 		@exception StandardException See Monitor.newInstanceFromIdentifier
0: 	
0: 	*/
0: 	public Object newInstanceFromIdentifier(int identifier)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Return the environment object that this system was booted in.
0: 		This is a free form object that is set by the method the
0: 		system is booted. For example when running in a Marimba system
0: 		it is set to the maribma application context. In most environments
0: 		it will be set to a java.io.File object representing the system home directory.
0: 		Code that call this method usualy have predefined knowledge of the type of the returned object, e.g.
0: 		Marimba store code knows that this will be set to a marimba application
0: 		context.
0: 	*/
0: 	public Object getEnvironment();
0: 
0: 
0: 	/**
0: 		Return an array of the service identifiers that are running and
0: 		implement the passed in protocol (java interface class name).
0: 		This list is a snapshot of the current running systesm, once
0: 		the call returns the service may have been shutdown or
0: 		new ones added.
0: 
0: 		@return The list of service names, if no services exist that
0: 		implement the protocol an array with zero elements is returned.
0: 	*/
0: 	public String[] getServiceList(String protocol);
0: 
0: 	/**
0: 		Start a persistent service.
0: 		<BR>
0: 		<B>Do not call directly - use Monitor.startPersistentService()</B>
0: 
0: 		@return true if the service type is handled by the monitor, false if it isn't
0: 
0: 		@exception StandardException An attempt to start the service failed.
0: 
0: 		@see Monitor#startPersistentService
0: 	*/
0: 	public boolean startPersistentService(String serviceName, Properties properties)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Create a persistent service.
0: 		<BR>
0: 		<B>Do not call directly - use Monitor.startPersistentService()</B>
0: 
0: 		@exception StandardException An attempt to create the service failed.
0: 
0: 		@see Monitor#createPersistentService
0: 	*/
0: 	public Object createPersistentService(String factoryInterface, String serviceName, Properties properties)
0: 		throws StandardException;
0:     public void removePersistentService(String name)
0:         throws StandardException;
0:    
0: 	/**
0: 		Start a non-persistent service.
0: 		
0: 		<BR>
0: 		<B>Do not call directly - use Monitor.startNonPersistentService()</B>
0: 
0: 		@exception StandardException An attempt to start the service failed.
0: 
0: 		@see Monitor#startNonPersistentService
0: 	*/
0: 	public Object startNonPersistentService(String factoryInterface, String serviceName, Properties properties)
0: 		throws StandardException;
0: 
0: 
0: 	/**
0: 		Find a service.
0: 
0: 		<BR>
0: 		<B>Do not call directly - use Monitor.findService()</B>
0: 
0: 		@return a refrence to a module represeting the service or null if the service does not exist.
0: 
0: 		@see Monitor#findService
0: 	*/
0: 	public Object findService(String protocol, String identifier);
0: 
0: 
0: 	/**
0: 		Start a module.
0: 		
0: 		<BR>
0: 		<B>Do not call directly - use Monitor.startSystemModule() or Monitor.bootServiceModule()</B>
0: 
0: 		@exception StandardException An attempt to start the module failed.
0: 
0: 		@see Monitor#startSystemModule
0: 		@see Monitor#bootServiceModule
0: 	*/
0: 	public Object startModule(boolean create, Object service, String protocol,
0: 									 String identifier, Properties properties)
0: 									 throws StandardException;
0: 
0: 
0: 	/**	
0: 		Get the defined default system streams object.
0: 	*/
0: 	public InfoStreams getSystemStreams();
0: 
0: 
0: 	/**
0: 		Start all services identified by derby.service.*
0: 		in the property set. If bootAll is true the services
0: 		that are persistent will be booted.
0: 	*/
0: 	public void startServices(Properties properties, boolean bootAll);
0: 
0: 	/**
0: 		Return a property from the JVM's system set.
0: 		In a Java2 environment this will be executed as a privliged block
0: 		if and only if the property starts with db2j.
0: 		If a SecurityException occurs, null is returned.
0: 	*/
0: 	public String getJVMProperty(String key);
0: 
0: 	/**
0: 		Get a newly created background thread.
0: 		The thread is set to be a daemon but is not started.
0: 	*/
0: 	public Thread getDaemonThread(Runnable task, String name, boolean setMinPriority);
0: 
0: 	/**
0: 		Set the priority of the current thread.
0: 		If the current thread was not returned by getDaemonThread() then no action is taken.
0: 	*/
0: 	public void setThreadPriority(int priority);
0: 
0: 	public ProductVersionHolder getEngineVersion();
0: 
0: 	/**
0: 	 * Get the UUID factory for the system.  The UUID factory provides
0: 	 * methods to create and recreate database unique identifiers.
0: 	 */
0: 	public org.apache.derby.iapi.services.uuid.UUIDFactory getUUIDFactory();
0: }
============================================================================