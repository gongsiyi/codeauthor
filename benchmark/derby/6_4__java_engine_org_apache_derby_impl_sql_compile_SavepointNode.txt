1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.SavepointNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A SavepointNode is the root of a QueryTree that represents a Savepoint (ROLLBACK savepoint, RELASE savepoint and SAVEPOINT)
1:eac0369:  * statement.
1:eac0369:  */
1:eac0369: 
1:3bb140c: class SavepointNode extends DDLStatementNode
1:eac0369: {
1:eac0369: 	private String	savepointName; //name of the savepoint
1:eac0369: 	private int	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a SavepointNode
2:eac0369: 	 *
1:3bb140c:      * @param objectName              The name of the savepoint
1:3bb140c:      * @param savepointStatementType  Type of savepoint statement ie rollback,
1:3bb140c:      *                                release or set savepoint
1:3bb140c:      * @param cm                      The context manager
1:3bb140c:      *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:     SavepointNode(
1:3bb140c:             String objectName,
1:3bb140c:             int savepointStatementType,
1:3bb140c:             ContextManager cm)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:3bb140c:         super(cm);
1:3bb140c:         this.savepointName = objectName;
1:3bb140c:         this.savepointStatementType = savepointStatementType;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (this.savepointStatementType > 3 || this.savepointStatementType < 1)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 				"Unexpected value for savepointStatementType = " + this.savepointStatementType + ". Expected value between 1-3");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String tempString = "savepointName: " + "\n" + savepointName + "\n";
1:eac0369: 			tempString = tempString + "savepointStatementType: " + "\n" + savepointStatementType + "\n";
1:eac0369: 			return super.toString() +  tempString;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		if (savepointStatementType == 1)
1:eac0369: 			return "SAVEPOINT";
1:eac0369: 		else if (savepointStatementType == 2)
1:eac0369: 			return "ROLLBACK WORK TO SAVEPOINT";
1:eac0369: 		else
1:eac0369: 			return "RELEASE TO SAVEPOINT";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns whether or not this Statement requires a set/clear savepoint
1:eac0369: 	 * around its execution.  The following statement "types" do not require them:
1:eac0369: 	 *		Cursor	- unnecessary and won't work in a read only environment
1:eac0369: 	 *		Xact	- savepoint will get blown away underneath us during commit/rollback
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not this Statement requires a set/clear savepoint
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public boolean needsSavepoint()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// We inherit the generate() method from DDLStatementNode.
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return(
1:eac0369:             getGenericConstantActionFactory().getSavepointConstantAction(
1:eac0369:                 savepointName,
1:eac0369:                 savepointStatementType));
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: class SavepointNode extends DDLStatementNode
1:      * Constructor for a SavepointNode
1:      * @param objectName              The name of the savepoint
1:      * @param savepointStatementType  Type of savepoint statement ie rollback,
1:      *                                release or set savepoint
1:      * @param cm                      The context manager
1:      *
1:     SavepointNode(
1:             String objectName,
1:             int savepointStatementType,
1:             ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.SAVEPOINT_NODE);
1:         this.savepointName = objectName;
1:         this.savepointStatementType = savepointStatementType;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.SavepointNode
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * A SavepointNode is the root of a QueryTree that represents a Savepoint (ROLLBACK savepoint, RELASE savepoint and SAVEPOINT)
1:  * statement.
1:  */
1: 
0: public class SavepointNode extends DDLStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 	private String	savepointName; //name of the savepoint
1: 	private int	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
1: 
1: 	/**
0: 	 * Initializer for a SavepointNode
1: 	 *
0: 	 * @param objectName		The name of the savepoint
0: 	 * @param savepointStatementType		Type of savepoint statement ie rollback, release or set savepoint
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void init(
0: 			Object objectName,
0: 			Object savepointStatementType)
1: 		throws StandardException
1: 	{
0: 		initAndCheck(null);	
0: 		this.savepointName = (String) objectName;
0: 		this.savepointStatementType = ((Integer) savepointStatementType).intValue();
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (this.savepointStatementType > 3 || this.savepointStatementType < 1)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 				"Unexpected value for savepointStatementType = " + this.savepointStatementType + ". Expected value between 1-3");
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String tempString = "savepointName: " + "\n" + savepointName + "\n";
1: 			tempString = tempString + "savepointStatementType: " + "\n" + savepointStatementType + "\n";
1: 			return super.toString() +  tempString;
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		if (savepointStatementType == 1)
1: 			return "SAVEPOINT";
1: 		else if (savepointStatementType == 2)
1: 			return "ROLLBACK WORK TO SAVEPOINT";
1: 		else
1: 			return "RELEASE TO SAVEPOINT";
1: 	}
1: 
1: 	/**
1: 	 * Returns whether or not this Statement requires a set/clear savepoint
1: 	 * around its execution.  The following statement "types" do not require them:
1: 	 *		Cursor	- unnecessary and won't work in a read only environment
1: 	 *		Xact	- savepoint will get blown away underneath us during commit/rollback
1: 	 *
1: 	 * @return boolean	Whether or not this Statement requires a set/clear savepoint
1: 	 */
1: 	public boolean needsSavepoint()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	// We inherit the generate() method from DDLStatementNode.
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return(
1:             getGenericConstantActionFactory().getSavepointConstantAction(
1:                 savepointName,
1:                 savepointStatementType));
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * A SavepointNode is the root of a QueryTree that represents a Savepoint (ROLLBACK savepoint, RELASE savepoint and SAVEPOINT)
0:  * statement.
0:  */
0: 
0: public class SavepointNode extends DDLStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 	private String	savepointName; //name of the savepoint
0: 	private int	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
0: 
0: 	/**
0: 	 * Initializer for a SavepointNode
0: 	 *
0: 	 * @param objectName		The name of the savepoint
0: 	 * @param savepointStatementType		Type of savepoint statement ie rollback, release or set savepoint
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void init(
0: 			Object objectName,
0: 			Object savepointStatementType)
0: 		throws StandardException
0: 	{
0: 		initAndCheck(null);	
0: 		this.savepointName = (String) objectName;
0: 		this.savepointStatementType = ((Integer) savepointStatementType).intValue();
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (this.savepointStatementType > 3 || this.savepointStatementType < 1)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 				"Unexpected value for savepointStatementType = " + this.savepointStatementType + ". Expected value between 1-3");
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String tempString = "savepointName: " + "\n" + savepointName + "\n";
0: 			tempString = tempString + "savepointStatementType: " + "\n" + savepointStatementType + "\n";
0: 			return super.toString() +  tempString;
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		if (savepointStatementType == 1)
0: 			return "SAVEPOINT";
0: 		else if (savepointStatementType == 2)
0: 			return "ROLLBACK WORK TO SAVEPOINT";
0: 		else
0: 			return "RELEASE TO SAVEPOINT";
0: 	}
0: 
0: 	/**
0: 	 * Returns whether or not this Statement requires a set/clear savepoint
0: 	 * around its execution.  The following statement "types" do not require them:
0: 	 *		Cursor	- unnecessary and won't work in a read only environment
0: 	 *		Xact	- savepoint will get blown away underneath us during commit/rollback
0: 	 *
0: 	 * @return boolean	Whether or not this Statement requires a set/clear savepoint
0: 	 */
0: 	public boolean needsSavepoint()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	// We inherit the generate() method from DDLStatementNode.
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return(
0:             getGenericConstantActionFactory().getSavepointConstantAction(
0:                 savepointName,
0:                 savepointStatementType));
0: 	}
0: }
============================================================================