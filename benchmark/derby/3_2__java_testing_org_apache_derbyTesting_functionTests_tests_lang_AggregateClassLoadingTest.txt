1:7e0823d: /**
1:7e0823d:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest
1:7e0823d:  *  
1:7e0823d:  * Licensed to the Apache Software Foundation (ASF) under one
1:7e0823d:  * or more contributor license agreements.  See the NOTICE file
1:7e0823d:  * distributed with this work for additional information
1:7e0823d:  * regarding copyright ownership.  The ASF licenses this file
1:7e0823d:  * to you under the Apache License, Version 2.0 (the
1:7e0823d:  * "License"); you may not use this file except in compliance
1:7e0823d:  * with the License.  You may obtain a copy of the License at
1:7e0823d:  *
1:7e0823d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7e0823d:  *
1:7e0823d:  * Unless required by applicable law or agreed to in writing,
1:7e0823d:  * software distributed under the License is distributed on an
1:7e0823d:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7e0823d:  * KIND, either express or implied.  See the License for the
1:7e0823d:  * specific language governing permissions and limitations
1:7e0823d:  * under the License.
1:7e0823d:  */
1:7e0823d: package org.apache.derbyTesting.functionTests.tests.lang;
3:7e0823d: 
1:7e0823d: import java.net.URL;
1:7e0823d: import java.net.URLClassLoader;
1:7e0823d: import java.sql.Connection;
1:7e0823d: import java.sql.SQLException;
1:7e0823d: import java.sql.Statement;
1:7e0823d: import junit.framework.Test;
1:7e0823d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7e0823d: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:7e0823d: import org.apache.derbyTesting.junit.JDBC;
1:7e0823d: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:7e0823d: 
1:7e0823d: /**
1:7e0823d:  * Test for ensuring the aggregate implementation classes are loaded correctly,
1:7e0823d:  * even when the context class loader loads Derby engine classes as well. This
1:7e0823d:  * is a typical situation we have seen with J2EE servers where Derby may be in
1:7e0823d:  * the application WAR and provided as a system service by the container. <BR>
1:7e0823d:  * Jira issue DERBY-997 <BR>
1:7e0823d:  * Assumes embedded and only needs to be run in embedded, since all class
1:7e0823d:  * loading happens on the engine side.
1:7e0823d:  */
1:7e0823d: public class AggregateClassLoadingTest extends BaseJDBCTestCase {
1:7e0823d: 	
1:7e0823d: 	/**
1:7e0823d: 	 * Basic constructor.
1:7e0823d: 	 */	
1:7e0823d: 	public AggregateClassLoadingTest(String name) {
1:7e0823d: 		super(name);
1:7e0823d: 	}
1:7e0823d: 	
1:7e0823d: 	/**
1:7e0823d: 	 * Sets the auto commit to false.
1:7e0823d: 	 */
1:7e0823d: 	protected void initializeConnection(Connection conn) throws SQLException {
1:7e0823d: 		conn.setAutoCommit(false);
1:7e0823d: 	}
1:7e0823d: 	
1:7e0823d: 	/**
1:7e0823d: 	 * Returns the implemented tests.
1:7e0823d: 	 * 
1:7e0823d: 	 * @return An instance of <code>Test</code> with the implemented tests to
1:7e0823d: 	 *         run.
1:7e0823d: 	 */
1:7e0823d: 	public static Test suite() {
1:7e0823d: 		
1:7e0823d: 		
1:7e0823d: 		/* this test creates a class loader, adding that permission to
1:7e0823d: 		 * derbyTesting.jar would mean that permission was granted all
1:7e0823d: 		 * the way up the stack to the derby engine. Thus increasing
1:7e0823d: 		 * the chance that incorrectly a privileged block could be dropped
1:7e0823d: 		 * but the tests continue to pass. 
1:7e0823d: 		 */		
1:7e0823d: 		return SecurityManagerSetup.noSecurityManager(
1:1ae02c9:             new CleanDatabaseTestSetup(
1:1ae02c9:                 new BaseTestSuite(AggregateClassLoadingTest.class,
1:1ae02c9:                                    "AggregateClassLoadingTest")) {
1:7e0823d:                             
1:7e0823d:                             /**
1:7e0823d:                              * Save the class loader upon entry to the
1:7e0823d:                              * suite, some JVM's install the main loader
1:7e0823d:                              * as the context loader.
1:7e0823d:                              */
1:7e0823d:                             private ClassLoader originalLoader;
1:7e0823d:                             protected void setUp() throws Exception {                    
1:7e0823d:                                 originalLoader = Thread.currentThread().getContextClassLoader();
1:7e0823d:                                 super.setUp();
1:7e0823d:                             }
1:7e0823d: 							protected void tearDown() throws Exception {
1:7e0823d: 								Thread.currentThread().setContextClassLoader(originalLoader);
1:7e0823d: 								super.tearDown();
1:7e0823d: 							}
1:7e0823d: 
1:7e0823d: 							/**
1:7e0823d: 							 * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:7e0823d: 							 */
1:7e0823d: 							protected void decorateSQL(Statement s)
1:7e0823d: 									throws SQLException {
1:7e0823d: 								s.execute("create table t (i int)");
1:7e0823d: 								s.execute("insert into t values 1,2,3,4,5,6,null,4,5,456,2,4,6,7,2144,44,2,-2,4");
1:7e0823d: 
1:7e0823d: 								/*
1:7e0823d: 								 * Find the location of the code for the Derby
1:7e0823d: 								 * connection. The rest of the engine will be at
1:7e0823d: 								 * the same location!
1:7e0823d: 								 */
1:7e0823d: 								URL derbyURL = s.getConnection().getClass().getProtectionDomain().getCodeSource()
1:7e0823d: 										.getLocation();
1:7e0823d: 
1:7e0823d: 								/*
1:7e0823d: 								 * Create a new loader that loads from the same
1:7e0823d: 								 * location as the engine. Create it without a
1:7e0823d: 								 * parent, otherwise the parent will be the
1:7e0823d: 								 * class loader of this class which is most
1:7e0823d: 								 * likely the same as the engine. Since the
1:7e0823d: 								 * class loader delegates to its parent first
1:7e0823d: 								 * the bug would not show, as all the derby
1:7e0823d: 								 * engine classes would be from a single loader.
1:7e0823d: 								 */
1:7e0823d:                                 URLClassLoader cl = new URLClassLoader(new URL[] { derbyURL }, null);
1:7e0823d: 								Thread.currentThread().setContextClassLoader(cl);
1:7e0823d: 
1:7e0823d: 								super.decorateSQL(s);
1:7e0823d: 							}
1:7e0823d: 						});
1:7e0823d: 		
1:7e0823d: 	}		
1:7e0823d: 		
1:7e0823d: 	public void testAggregateMAX() throws SQLException {
1:7e0823d: 		testAggregate("select MAX(i) from t");
1:7e0823d: 	}
1:7e0823d: 	
1:7e0823d: 	public void testAggregateMIN() throws SQLException {
1:7e0823d: 		testAggregate("select MIN(i) from t");
1:7e0823d: 	}
1:7e0823d: 	
1:7e0823d: 	public void testAggregateAVG() throws SQLException {
1:7e0823d: 		testAggregate("select AVG(i) from t");
1:7e0823d: 	}
1:7e0823d: 		
1:7e0823d: 	public void testAggregateCOUNT() throws SQLException {
1:7e0823d: 		testAggregate("select COUNT(i) from t");
1:7e0823d: 	}
1:7e0823d: 	
1:7e0823d: 	public void testAggregateCOUNT2() throws SQLException {
1:7e0823d: 		testAggregate("select COUNT(*) from t");
1:7e0823d: 	}
1:7e0823d: 	
1:7e0823d:     /**
1:7e0823d:      * Just run and display the aggregates result.
1:7e0823d:      * 
1:7e0823d:      * Test some aggregates, their generated class will attempt
1:7e0823d: 	 * to load the internal aggregate through the context loader
1:7e0823d: 	 * first, and then any remaining loader.
1:7e0823d:      */
1:7e0823d:     private void testAggregate(String query) throws SQLException {
1:7e0823d: 		Statement s = createStatement();
1:7e0823d:         
1:7e0823d:         JDBC.assertDrainResults(s.executeQuery(query), 1);
1:7e0823d: 
1:7e0823d:         s.close();
1:7e0823d:    }	
1:7e0823d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             new CleanDatabaseTestSetup(
1:                 new BaseTestSuite(AggregateClassLoadingTest.class,
1:                                    "AggregateClassLoadingTest")) {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7e0823d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.sql.Connection;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: 
1: /**
1:  * Test for ensuring the aggregate implementation classes are loaded correctly,
1:  * even when the context class loader loads Derby engine classes as well. This
1:  * is a typical situation we have seen with J2EE servers where Derby may be in
1:  * the application WAR and provided as a system service by the container. <BR>
1:  * Jira issue DERBY-997 <BR>
1:  * Assumes embedded and only needs to be run in embedded, since all class
1:  * loading happens on the engine side.
1:  */
1: public class AggregateClassLoadingTest extends BaseJDBCTestCase {
1: 	
1: 	/**
1: 	 * Basic constructor.
1: 	 */	
1: 	public AggregateClassLoadingTest(String name) {
1: 		super(name);
1: 	}
1: 	
1: 	/**
1: 	 * Sets the auto commit to false.
1: 	 */
1: 	protected void initializeConnection(Connection conn) throws SQLException {
1: 		conn.setAutoCommit(false);
1: 	}
1: 	
1: 	/**
1: 	 * Returns the implemented tests.
1: 	 * 
1: 	 * @return An instance of <code>Test</code> with the implemented tests to
1: 	 *         run.
1: 	 */
1: 	public static Test suite() {
1: 		
1: 		
1: 		/* this test creates a class loader, adding that permission to
1: 		 * derbyTesting.jar would mean that permission was granted all
1: 		 * the way up the stack to the derby engine. Thus increasing
1: 		 * the chance that incorrectly a privileged block could be dropped
1: 		 * but the tests continue to pass. 
1: 		 */		
1: 		return SecurityManagerSetup.noSecurityManager(
0: 						new CleanDatabaseTestSetup(
0: 								new TestSuite(AggregateClassLoadingTest.class,
0: 										"AggregateClassLoadingTest")) {
1:                             
1:                             /**
1:                              * Save the class loader upon entry to the
1:                              * suite, some JVM's install the main loader
1:                              * as the context loader.
1:                              */
1:                             private ClassLoader originalLoader;
1:                             protected void setUp() throws Exception {                    
1:                                 originalLoader = Thread.currentThread().getContextClassLoader();
1:                                 super.setUp();
1:                             }
1: 							protected void tearDown() throws Exception {
1: 								Thread.currentThread().setContextClassLoader(originalLoader);
1: 								super.tearDown();
1: 							}
1: 
1: 							/**
1: 							 * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1: 							 */
1: 							protected void decorateSQL(Statement s)
1: 									throws SQLException {
1: 								s.execute("create table t (i int)");
1: 								s.execute("insert into t values 1,2,3,4,5,6,null,4,5,456,2,4,6,7,2144,44,2,-2,4");
1: 
1: 								/*
1: 								 * Find the location of the code for the Derby
1: 								 * connection. The rest of the engine will be at
1: 								 * the same location!
1: 								 */
1: 								URL derbyURL = s.getConnection().getClass().getProtectionDomain().getCodeSource()
1: 										.getLocation();
1: 
1: 								/*
1: 								 * Create a new loader that loads from the same
1: 								 * location as the engine. Create it without a
1: 								 * parent, otherwise the parent will be the
1: 								 * class loader of this class which is most
1: 								 * likely the same as the engine. Since the
1: 								 * class loader delegates to its parent first
1: 								 * the bug would not show, as all the derby
1: 								 * engine classes would be from a single loader.
1: 								 */
1:                                 URLClassLoader cl = new URLClassLoader(new URL[] { derbyURL }, null);
1: 								Thread.currentThread().setContextClassLoader(cl);
1: 
1: 								super.decorateSQL(s);
1: 							}
1: 						});
1: 		
1: 	}		
1: 		
1: 	public void testAggregateMAX() throws SQLException {
1: 		testAggregate("select MAX(i) from t");
1: 	}
1: 	
1: 	public void testAggregateMIN() throws SQLException {
1: 		testAggregate("select MIN(i) from t");
1: 	}
1: 	
1: 	public void testAggregateAVG() throws SQLException {
1: 		testAggregate("select AVG(i) from t");
1: 	}
1: 		
1: 	public void testAggregateCOUNT() throws SQLException {
1: 		testAggregate("select COUNT(i) from t");
1: 	}
1: 	
1: 	public void testAggregateCOUNT2() throws SQLException {
1: 		testAggregate("select COUNT(*) from t");
1: 	}
1: 	
1:     /**
1:      * Just run and display the aggregates result.
1:      * 
1:      * Test some aggregates, their generated class will attempt
1: 	 * to load the internal aggregate through the context loader
1: 	 * first, and then any remaining loader.
1:      */
1:     private void testAggregate(String query) throws SQLException {
1: 		Statement s = createStatement();
1:         
1:         JDBC.assertDrainResults(s.executeQuery(query), 1);
1: 
1:         s.close();
1:    }	
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6c9ce64
/////////////////////////////////////////////////////////////////////////
commit:003a313
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest
0:  *  
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.derbyTesting.functionTests.tests.lang;
0: 
0: import java.net.URL;
0: import java.net.URLClassLoader;
0: import java.sql.Connection;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: import java.util.Properties;
0: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
0: 
0: /**
0:  * Test for ensuring the aggregate implementation classes are loaded correctly,
0:  * even when the context class loader loads Derby engine classes as well. This
0:  * is a typical situation we have seen with J2EE servers where Derby may be in
0:  * the application WAR and provided as a system service by the container. <BR>
0:  * Jira issue DERBY-997 <BR>
0:  * Assumes embedded and only needs to be run in embedded, since all class
0:  * loading happens on the engine side.
0:  */
0: public class AggregateClassLoadingTest extends BaseJDBCTestCase {
0: 
0: 	private static URL derbyURL;
0: 	private static URLClassLoader cl;
0: 	
0: 	/**
0: 	 * Basic constructor.
0: 	 */	
0: 	public AggregateClassLoadingTest(String name) {
0: 		super(name);
0: 	}
0: 	
0: 	/**
0: 	 * Sets the auto commit to false.
0: 	 */
0: 	protected void initializeConnection(Connection conn) throws SQLException {
0: 		conn.setAutoCommit(false);
0: 	}
0: 	
0: 	/**
0: 	 * Returns the implemented tests.
0: 	 * 
0: 	 * @return An instance of <code>Test</code> with the implemented tests to
0: 	 *         run.
0: 	 */
0: 	public static Test suite() {
0: 		
0: 		
0: 		/* this test creates a class loader, adding that permission to
0: 		 * derbyTesting.jar would mean that permission was granted all
0: 		 * the way up the stack to the derby engine. Thus increasing
0: 		 * the chance that incorrectly a privileged block could be dropped
0: 		 * but the tests continue to pass. 
0: 		 */		
0: 		return SecurityManagerSetup.noSecurityManager(
0: 						new CleanDatabaseTestSetup(
0: 								new TestSuite(AggregateClassLoadingTest.class,
0: 										"AggregateClassLoadingTest")) {
0: 							protected void tearDown() throws Exception {
0: 								Thread.currentThread().setContextClassLoader(null);
0: 								super.tearDown();
0: 							}
0: 
0: 							/**
0: 							 * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
0: 							 */
0: 							protected void decorateSQL(Statement s)
0: 									throws SQLException {
0: 								s.execute("create table t (i int)");
0: 								s.execute("insert into t values 1,2,3,4,5,6,null,4,5,456,2,4,6,7,2144,44,2,-2,4");
0: 
0: 								/*
0: 								 * Find the location of the code for the Derby
0: 								 * connection. The rest of the engine will be at
0: 								 * the same location!
0: 								 */
0: 								derbyURL = s.getConnection().getClass().getProtectionDomain().getCodeSource()
0: 										.getLocation();
0: 
0: 								/*
0: 								 * Create a new loader that loads from the same
0: 								 * location as the engine. Create it without a
0: 								 * parent, otherwise the parent will be the
0: 								 * class loader of this class which is most
0: 								 * likely the same as the engine. Since the
0: 								 * class loader delegates to its parent first
0: 								 * the bug would not show, as all the derby
0: 								 * engine classes would be from a single loader.
0: 								 */
0: 								cl = new URLClassLoader(new URL[] { derbyURL }, null);
0: 								Thread.currentThread().setContextClassLoader(cl);
0: 
0: 								super.decorateSQL(s);
0: 							}
0: 						});
0: 		
0: 	}		
0: 		
0: 	public void testAggregateMAX() throws SQLException {
0: 		testAggregate("select MAX(i) from t");
0: 	}
0: 	
0: 	public void testAggregateMIN() throws SQLException {
0: 		testAggregate("select MIN(i) from t");
0: 	}
0: 	
0: 	public void testAggregateAVG() throws SQLException {
0: 		testAggregate("select AVG(i) from t");
0: 	}
0: 		
0: 	public void testAggregateCOUNT() throws SQLException {
0: 		testAggregate("select COUNT(i) from t");
0: 	}
0: 	
0: 	public void testAggregateCOUNT2() throws SQLException {
0: 		testAggregate("select COUNT(*) from t");
0: 	}
0: 	
0:     /**
0:      * Just run and display the aggregates result.
0:      * 
0:      * Test some aggregates, their generated class will attempt
0: 	 * to load the internal aggregate through the context loader
0: 	 * first, and then any remaining loader.
0:      */
0:     private void testAggregate(String query) throws SQLException {
0: 		Statement s = createStatement();
0: 		ResultSet rs = s.executeQuery(query);
0: 			
0: 		rs.next();
0: 		rs.close();
0:    }	
0: }
============================================================================