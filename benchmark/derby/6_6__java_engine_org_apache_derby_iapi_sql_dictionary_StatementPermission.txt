1:b7730e4: /*
1:2d2e717: 
1:b7730e4:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementPermission
3:b7730e4: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.iapi.sql.dictionary;
1:b7730e4: 
1:98c7520: import org.apache.derby.iapi.reference.SQLState;
1:98c7520: import org.apache.derby.iapi.sql.conn.Authorizer;
1:eb8b3a2: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:12988c7: import org.apache.derby.iapi.sql.Activation;
1:98c7520: import org.apache.derby.iapi.store.access.TransactionController;
1:98c7520: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:98c7520: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:98c7520: import org.apache.derby.iapi.services.context.ContextManager;
1:b7730e4: 
1:b7730e4: /**
1:428ad73:  * This class describes a permission require by a statement.
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: public abstract class StatementPermission
1:b7730e4: {
1:b7730e4: 	/**
1:428ad73: 	 * Restrict implementations to this package to reduce
1:428ad73: 	 * risk of external code spoofing the GRANT/REVOKE system
1:428ad73: 	 * by providing its own fake implementations.
1:428ad73: 	 *
1:428ad73: 	 */
1:428ad73: 	StatementPermission()
1:428ad73: 	{
1:428ad73: 	}
1:428ad73: 	/**
1:eb8b3a2: 	 * @param lcc				LanguageConnectionContext
1:b7730e4: 	 * @param forGrant
1:12988c7: 	 * @param activation        activation for statement needing check
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException if the permission has not been granted
1:b7730e4: 	 */
1:eb8b3a2: 	public abstract void check( LanguageConnectionContext lcc,
1:12988c7: 								boolean forGrant,
1:12988c7: 								Activation activation) throws StandardException;
1:98c7520: 
1:2d2e717: 	/**
1:2d2e717: 	 * 
1:98c7520: 	 * Get the PermissionsDescriptor for the passed authorization id for this
1:2d2e717: 	 * object. This method gets called during the execution phase of create 
1:2d2e717: 	 * view/constraint/trigger. The return value of this method is saved in
1:2d2e717: 	 * dependency system to keep track of views/constraints/triggers 
1:2d2e717: 	 * dependencies on required permissions. This happens in execution phase 
1:2d2e717: 	 * after it has been established that passed authorization id has all the 
1:2d2e717: 	 * permissions it needs to create that view/constraint/trigger. Which means 
1:2d2e717: 	 * that we can only get to writing into dependency system once all the required 
1:2d2e717: 	 * privileges are confirmed. 
1:2d2e717: 	 *   
1:d6756aa: 	 * @param authid	AuthorizationId
1:2d2e717: 	 * @param dd	DataDictionary
1:2d2e717: 	 * 
1:98c7520: 	 * @return PermissionsDescriptor	The PermissionsDescriptor for the passed
1:2d2e717: 	 *  authorization id on this object
1:2d2e717: 	 * 
1:2d2e717: 	 * @exception StandardException
1:2d2e717: 	 */
1:2d2e717: 	public abstract PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1:2d2e717: 	throws StandardException;
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Return true if the passed in permission matches the one required by this
1:98c7520:      * StatementPermission.
1:98c7520:      */
1:98c7520:     public boolean isCorrectPermission( PermissionsDescriptor pd ) throws StandardException
1:98c7520:     { return false; }
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Get the privileged object associated with this permission.
1:98c7520:      */
1:98c7520:     public PrivilegedSQLObject getPrivilegedObject( DataDictionary dd ) throws StandardException
1:98c7520:     { return null; }
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Get the type of the privileged object.
1:98c7520:      */
1:98c7520:     public String getObjectType()
1:98c7520:     { return null; }
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Generic logic called by check() for USAGE and EXECUTE privileges. Throws
1:98c7520:      * an exception if the correct permission cannot be found.
1:98c7520:      */
1:98c7520: 	public void genericCheck
1:98c7520:         (
1:98c7520:          LanguageConnectionContext lcc,
1:98c7520:          boolean forGrant,
1:98c7520:          Activation activation,
1:98c7520:          String privilegeType )
1:98c7520:         throws StandardException
1:98c7520: 	{
1:98c7520: 		DataDictionary dd = lcc.getDataDictionary();
1:98c7520: 		TransactionController tc = lcc.getTransactionExecute();
1:98c7520: 		ExecPreparedStatement ps = activation.getPreparedStatement();
1:9f60172: 
1:9f60172:         PermissionsDescriptor perm =
1:9f60172:             getPermissionDescriptor( lcc.getCurrentUserId(activation), dd );
1:98c7520: 		if( !isCorrectPermission( perm ) ) { perm = getPermissionDescriptor(Authorizer.PUBLIC_AUTHORIZATION_ID, dd ); }
1:98c7520: 
1:98c7520:         // if the user has the correct permission, we're done
1:98c7520: 		if ( isCorrectPermission( perm ) ) { return; }
1:98c7520: 
1:98c7520: 		boolean resolved = false;
1:98c7520: 
1:98c7520: 		// Since no permission exists for the current user or PUBLIC,
1:98c7520: 		// check if a permission exists for the current role (if set).
1:98c7520: 		String role = lcc.getCurrentRoleId(activation);
1:98c7520: 
1:98c7520: 		if (role != null) {
1:98c7520: 
1:98c7520: 			// Check that role is still granted to current user or
1:98c7520: 			// to PUBLIC: A revoked role which is current for this
1:98c7520: 			// session, is lazily set to none when it is attemped
1:98c7520: 			// used.
1:98c7520: 			String dbo = dd.getAuthorizationDatabaseOwner();
1:98c7520: 			RoleGrantDescriptor rd = dd.getRoleGrantDescriptor
1:9f60172:                 (role, lcc.getCurrentUserId(activation), dbo);
1:98c7520: 
1:98c7520: 			if (rd == null) {
1:98c7520: 				rd = dd.getRoleGrantDescriptor(
1:98c7520: 					role,
1:98c7520: 					Authorizer.PUBLIC_AUTHORIZATION_ID,
1:98c7520: 					dbo);
1:98c7520: 			}
1:98c7520: 
1:98c7520: 			if (rd == null) {
1:98c7520: 				// We have lost the right to set this role, so we can't
1:98c7520: 				// make use of any permission granted to it or its
1:98c7520: 				// ancestors.
1:98c7520: 				lcc.setCurrentRole(activation, null);
1:98c7520: 			} else {
1:98c7520: 				// The current role is OK, so we can make use of
1:98c7520: 				// any permission granted to it.
1:98c7520: 				//
1:98c7520: 				// Look at the current role and, if necessary, the
1:98c7520: 				// transitive closure of roles granted to current role to
1:98c7520: 				// see if permission has been granted to any of the
1:98c7520: 				// applicable roles.
1:98c7520: 
1:98c7520: 				RoleClosureIterator rci =
1:98c7520: 					dd.createRoleClosureIterator
1:98c7520: 					(activation.getTransactionController(),
1:98c7520: 					 role, true );
1:98c7520: 
1:98c7520: 				String r;
1:98c7520: 				while (!resolved && (r = rci.next()) != null)
1:98c7520:                 {
1:98c7520: 					perm = getPermissionDescriptor( r, dd );
1:98c7520: 
1:98c7520: 					if ( isCorrectPermission( perm ) ) { resolved = true; }
1:98c7520: 				}
1:98c7520: 			}
1:98c7520: 
1:98c7520: 			if (resolved ) {
1:98c7520: 				// Also add a dependency on the role (qua provider), so that if
1:98c7520: 				// role is no longer available to the current user (e.g. grant
1:98c7520: 				// is revoked, role is dropped, another role has been set), we
1:98c7520: 				// are able to invalidate the ps or activation (the latter is
1:98c7520: 				// used if the current role changes).
1:98c7520: 				DependencyManager dm = dd.getDependencyManager();
1:98c7520: 				RoleGrantDescriptor rgd = dd.getRoleDefinitionDescriptor(role);
1:98c7520: 				ContextManager cm = lcc.getContextManager();
1:98c7520: 				dm.addDependency(ps, rgd, cm);
1:98c7520: 				dm.addDependency(activation, rgd, cm);
1:98c7520: 			}
1:98c7520: 		}
1:98c7520: 
1:98c7520: 		if (!resolved)
1:98c7520:         {
1:98c7520:             PrivilegedSQLObject pso = getPrivilegedObject( dd );
1:98c7520: 
1:98c7520: 			if( pso == null )
1:98c7520:             {
1:98c7520: 				throw StandardException.newException
1:98c7520:                     ( SQLState.AUTH_INTERNAL_BAD_UUID, getObjectType() );
1:98c7520:             }
1:98c7520: 
1:98c7520: 			SchemaDescriptor sd = pso.getSchemaDescriptor();
1:98c7520: 
1:98c7520: 			if( sd == null)
1:98c7520:             {
1:98c7520: 				throw StandardException.newException(
1:98c7520: 					SQLState.AUTH_INTERNAL_BAD_UUID, "SCHEMA");
1:98c7520:             }
1:98c7520: 
1:98c7520: 			throw StandardException.newException(
1:98c7520: 				(forGrant
1:98c7520: 				 ? SQLState.AUTH_NO_GENERIC_PERMISSION_FOR_GRANT
1:98c7520: 				 : SQLState.AUTH_NO_GENERIC_PERMISSION),
1:9f60172:                 lcc.getCurrentUserId(activation),
1:98c7520:                 privilegeType,
1:98c7520: 				getObjectType(),
1:98c7520: 				sd.getSchemaName(),
1:98c7520: 				pso.getName());
1:98c7520: 		}
1:98c7520: 
1:98c7520: 	} // end of genericCheck
1:98c7520: 
1:b7730e4: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         PermissionsDescriptor perm =
1:             getPermissionDescriptor( lcc.getCurrentUserId(activation), dd );
/////////////////////////////////////////////////////////////////////////
1:                 (role, lcc.getCurrentUserId(activation), dbo);
/////////////////////////////////////////////////////////////////////////
1:                 lcc.getCurrentUserId(activation),
commit:12988c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param activation        activation for statement needing check
1: 								boolean forGrant,
1: 								Activation activation) throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1: 	 * Get the PermissionsDescriptor for the passed authorization id for this
/////////////////////////////////////////////////////////////////////////
1: 	 * @return PermissionsDescriptor	The PermissionsDescriptor for the passed
1: 
1:     /**
1:      * Return true if the passed in permission matches the one required by this
1:      * StatementPermission.
1:      */
1:     public boolean isCorrectPermission( PermissionsDescriptor pd ) throws StandardException
1:     { return false; }
1: 
1:     /**
1:      * Get the privileged object associated with this permission.
1:      */
1:     public PrivilegedSQLObject getPrivilegedObject( DataDictionary dd ) throws StandardException
1:     { return null; }
1: 
1:     /**
1:      * Get the type of the privileged object.
1:      */
1:     public String getObjectType()
1:     { return null; }
1: 
1:     /**
1:      * Generic logic called by check() for USAGE and EXECUTE privileges. Throws
1:      * an exception if the correct permission cannot be found.
1:      */
1: 	public void genericCheck
1:         (
1:          LanguageConnectionContext lcc,
0:          String authorizationId,
1:          boolean forGrant,
1:          Activation activation,
1:          String privilegeType )
1:         throws StandardException
1: 	{
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 		ExecPreparedStatement ps = activation.getPreparedStatement();
1: 		
0: 		PermissionsDescriptor perm = getPermissionDescriptor( authorizationId, dd );
1: 		if( !isCorrectPermission( perm ) ) { perm = getPermissionDescriptor(Authorizer.PUBLIC_AUTHORIZATION_ID, dd ); }
1: 
1:         // if the user has the correct permission, we're done
1: 		if ( isCorrectPermission( perm ) ) { return; }
1: 
1: 		boolean resolved = false;
1: 
1: 		// Since no permission exists for the current user or PUBLIC,
1: 		// check if a permission exists for the current role (if set).
1: 		String role = lcc.getCurrentRoleId(activation);
1: 
1: 		if (role != null) {
1: 
1: 			// Check that role is still granted to current user or
1: 			// to PUBLIC: A revoked role which is current for this
1: 			// session, is lazily set to none when it is attemped
1: 			// used.
1: 			String dbo = dd.getAuthorizationDatabaseOwner();
1: 			RoleGrantDescriptor rd = dd.getRoleGrantDescriptor
0: 				(role, authorizationId, dbo);
1: 
1: 			if (rd == null) {
1: 				rd = dd.getRoleGrantDescriptor(
1: 					role,
1: 					Authorizer.PUBLIC_AUTHORIZATION_ID,
1: 					dbo);
1: 			}
1: 
1: 			if (rd == null) {
1: 				// We have lost the right to set this role, so we can't
1: 				// make use of any permission granted to it or its
1: 				// ancestors.
1: 				lcc.setCurrentRole(activation, null);
1: 			} else {
1: 				// The current role is OK, so we can make use of
1: 				// any permission granted to it.
1: 				//
1: 				// Look at the current role and, if necessary, the
1: 				// transitive closure of roles granted to current role to
1: 				// see if permission has been granted to any of the
1: 				// applicable roles.
1: 
1: 				RoleClosureIterator rci =
1: 					dd.createRoleClosureIterator
1: 					(activation.getTransactionController(),
1: 					 role, true );
1: 
1: 				String r;
1: 				while (!resolved && (r = rci.next()) != null)
1:                 {
1: 					perm = getPermissionDescriptor( r, dd );
1: 
1: 					if ( isCorrectPermission( perm ) ) { resolved = true; }
1: 				}
1: 			}
1: 
1: 			if (resolved ) {
1: 				// Also add a dependency on the role (qua provider), so that if
1: 				// role is no longer available to the current user (e.g. grant
1: 				// is revoked, role is dropped, another role has been set), we
1: 				// are able to invalidate the ps or activation (the latter is
1: 				// used if the current role changes).
1: 				DependencyManager dm = dd.getDependencyManager();
1: 				RoleGrantDescriptor rgd = dd.getRoleDefinitionDescriptor(role);
1: 				ContextManager cm = lcc.getContextManager();
1: 				dm.addDependency(ps, rgd, cm);
1: 				dm.addDependency(activation, rgd, cm);
1: 			}
1: 		}
1: 
1: 		if (!resolved)
1:         {
1:             PrivilegedSQLObject pso = getPrivilegedObject( dd );
1: 
1: 			if( pso == null )
1:             {
1: 				throw StandardException.newException
1:                     ( SQLState.AUTH_INTERNAL_BAD_UUID, getObjectType() );
1:             }
1: 
1: 			SchemaDescriptor sd = pso.getSchemaDescriptor();
1: 
1: 			if( sd == null)
1:             {
1: 				throw StandardException.newException(
1: 					SQLState.AUTH_INTERNAL_BAD_UUID, "SCHEMA");
1:             }
1: 
1: 			throw StandardException.newException(
1: 				(forGrant
1: 				 ? SQLState.AUTH_NO_GENERIC_PERMISSION_FOR_GRANT
1: 				 : SQLState.AUTH_NO_GENERIC_PERMISSION),
0: 				authorizationId,
1:                 privilegeType,
1: 				getObjectType(),
1: 				sd.getSchemaName(),
1: 				pso.getName());
1: 		}
1: 
1: 	} // end of genericCheck
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:428ad73
/////////////////////////////////////////////////////////////////////////
1:  * This class describes a permission require by a statement.
1: 	 * Restrict implementations to this package to reduce
1: 	 * risk of external code spoofing the GRANT/REVOKE system
1: 	 * by providing its own fake implementations.
1: 	 *
1: 	 */
1: 	StatementPermission()
1: 	{
1: 	}
1: 	/**
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * 
0: 	 * Get the PermissionDescriptor for the passed authorization id for this
1: 	 * object. This method gets called during the execution phase of create 
1: 	 * view/constraint/trigger. The return value of this method is saved in
1: 	 * dependency system to keep track of views/constraints/triggers 
1: 	 * dependencies on required permissions. This happens in execution phase 
1: 	 * after it has been established that passed authorization id has all the 
1: 	 * permissions it needs to create that view/constraint/trigger. Which means 
1: 	 * that we can only get to writing into dependency system once all the required 
1: 	 * privileges are confirmed. 
1: 	 *   
0: 	 * @param authorizationId	AuthorizationId
1: 	 * @param dd	DataDictionary
1: 	 * 
0: 	 * @return PermissionsDescriptor	The PermissionDescriptor for the passed
1: 	 *  authorization id on this object
1: 	 * 
1: 	 * @exception StandardException
1: 	 */
1: 	public abstract PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1: 	throws StandardException;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:d6756aa
/////////////////////////////////////////////////////////////////////////
1: 	 * @param authid	AuthorizationId
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:eb8b3a2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param lcc				LanguageConnectionContext
0: 	 * @param authorizationId	AuthorizationId
1: 	public abstract void check( LanguageConnectionContext lcc,
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementPermission
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
0:  * This class describes a permission used (required) by a statement.
1:  */
1: 
1: public abstract class StatementPermission
1: {
1: 	/**
0: 	 * @param tc the TransactionController
0: 	 * @param dd A DataDictionary
0: 	 * @param authorizationId A user
1: 	 * @param forGrant
1: 	 *
1: 	 * @exception StandardException if the permission has not been granted
1: 	 */
0: 	public abstract void check( TransactionController tc,
0: 								DataDictionary dd,
0: 								String authorizationId,
0: 								boolean forGrant) throws StandardException;
1: }
============================================================================