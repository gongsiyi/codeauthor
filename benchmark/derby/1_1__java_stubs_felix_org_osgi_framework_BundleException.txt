1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/BundleException.java,v 1.15 2006/07/11 13:15:54 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2006). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A Framework exception used to indicate that a bundle lifecycle problem
1:a8b6921:  * occurred.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>BundleException</code> object is created by the Framework to denote
1:a8b6921:  * an exception condition in the lifecycle of a bundle.
1:a8b6921:  * <code>BundleException</code>s should not be created by bundle developers.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * This exception is updated to conform to the general purpose exception
1:a8b6921:  * chaining mechanism.
1:a8b6921:  * 
1:a8b6921:  * @version $Revision: 1.15 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public class BundleException extends Exception {
1:a8b6921: 	static final long	serialVersionUID	= 3571095144220455665L;
1:a8b6921: 	/**
1:a8b6921: 	 * Nested exception.
1:a8b6921: 	 */
1:a8b6921: 	private final Throwable	cause;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a <code>BundleException</code> that wraps another exception.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param msg The associated message.
1:a8b6921: 	 * @param cause The cause of this exception.
1:a8b6921: 	 */
1:a8b6921: 	public BundleException(String msg, Throwable cause) {
1:a8b6921: 		super(msg);
1:a8b6921: 		this.cause = cause;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a <code>BundleException</code> object with the specified
1:a8b6921: 	 * message.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param msg The message.
1:a8b6921: 	 */
1:a8b6921: 	public BundleException(String msg) {
1:a8b6921: 		super(msg);
1:a8b6921: 		this.cause = null;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns any nested exceptions included in this exception.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method predates the general purpose exception chaining mechanism.
1:a8b6921: 	 * The {@link #getCause()} method is now the preferred means of obtaining
1:a8b6921: 	 * this information.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The nested exception; <code>null</code> if there is no nested
1:a8b6921: 	 *         exception.
1:a8b6921: 	 */
1:a8b6921: 	public Throwable getNestedException() {
1:a8b6921: 		return cause;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the cause of this exception or <code>null</code> if no cause
1:a8b6921: 	 * was specified when this exception was created.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The cause of this exception or <code>null</code> if no cause
1:a8b6921: 	 *         was specified.
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public Throwable getCause() {
1:a8b6921: 		return cause;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The cause of this exception can only be set when constructed.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param cause Cause of the exception.
1:a8b6921: 	 * @return This object.
1:a8b6921: 	 * @throws java.lang.IllegalStateException This method will always throw an
1:a8b6921: 	 *         <code>IllegalStateException</code> since the cause of this
1:a8b6921: 	 *         exception can only be set when constructed.
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public Throwable initCause(Throwable cause) {
1:a8b6921: 		throw new IllegalStateException();
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/BundleException.java,v 1.15 2006/07/11 13:15:54 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2006). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: /**
1:  * A Framework exception used to indicate that a bundle lifecycle problem
1:  * occurred.
1:  * 
1:  * <p>
1:  * <code>BundleException</code> object is created by the Framework to denote
1:  * an exception condition in the lifecycle of a bundle.
1:  * <code>BundleException</code>s should not be created by bundle developers.
1:  * 
1:  * <p>
1:  * This exception is updated to conform to the general purpose exception
1:  * chaining mechanism.
1:  * 
1:  * @version $Revision: 1.15 $
1:  */
1: 
1: public class BundleException extends Exception {
1: 	static final long	serialVersionUID	= 3571095144220455665L;
1: 	/**
1: 	 * Nested exception.
1: 	 */
1: 	private final Throwable	cause;
1: 
1: 	/**
1: 	 * Creates a <code>BundleException</code> that wraps another exception.
1: 	 * 
1: 	 * @param msg The associated message.
1: 	 * @param cause The cause of this exception.
1: 	 */
1: 	public BundleException(String msg, Throwable cause) {
1: 		super(msg);
1: 		this.cause = cause;
1: 	}
1: 
1: 	/**
1: 	 * Creates a <code>BundleException</code> object with the specified
1: 	 * message.
1: 	 * 
1: 	 * @param msg The message.
1: 	 */
1: 	public BundleException(String msg) {
1: 		super(msg);
1: 		this.cause = null;
1: 	}
1: 
1: 	/**
1: 	 * Returns any nested exceptions included in this exception.
1: 	 * 
1: 	 * <p>
1: 	 * This method predates the general purpose exception chaining mechanism.
1: 	 * The {@link #getCause()} method is now the preferred means of obtaining
1: 	 * this information.
1: 	 * 
1: 	 * @return The nested exception; <code>null</code> if there is no nested
1: 	 *         exception.
1: 	 */
1: 	public Throwable getNestedException() {
1: 		return cause;
1: 	}
1: 
1: 	/**
1: 	 * Returns the cause of this exception or <code>null</code> if no cause
1: 	 * was specified when this exception was created.
1: 	 * 
1: 	 * @return The cause of this exception or <code>null</code> if no cause
1: 	 *         was specified.
1: 	 * @since 1.3
1: 	 */
1: 	public Throwable getCause() {
1: 		return cause;
1: 	}
1: 
1: 	/**
1: 	 * The cause of this exception can only be set when constructed.
1: 	 * 
1: 	 * @param cause Cause of the exception.
1: 	 * @return This object.
1: 	 * @throws java.lang.IllegalStateException This method will always throw an
1: 	 *         <code>IllegalStateException</code> since the cause of this
1: 	 *         exception can only be set when constructed.
1: 	 * @since 1.3
1: 	 */
1: 	public Throwable initCause(Throwable cause) {
1: 		throw new IllegalStateException();
1: 	}
1: }
============================================================================