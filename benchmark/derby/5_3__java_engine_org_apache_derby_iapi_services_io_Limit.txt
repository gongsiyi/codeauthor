1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.Limit
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Methods that allow limits to be placed on an input or output stream to
1:eac0369: 	avoid clients reading or writing too much information.
1:eac0369: */
1:5d24b1a: public interface Limit {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the limit of the data that can be read or written. After this
1:eac0369: 		call up to and including length bytes can be read from or skipped in
1:eac0369: 		the stream.
1:eac0369: 		
1:eac0369: 		<P> On input classes (e.g. InputStreams) any attempt to read or skip
1:eac0369: 		beyond the limit will result in an end of file indication
1:eac0369: 		(e.g. read() methods returning -1 or throwing EOFException).
1:eac0369: 
1:eac0369: 		<P> On output classes (e.g. OutputStream) any attempt to write
1:eac0369: 		more beyond the limit will result in an EOFException
1:eac0369: 
1:eac0369: 		@exception IOException IOException from some underlying stream
1:f668d94:         @exception java.io.EOFException The set limit would exceed
1:eac0369: 		the available data in the stream.
1:eac0369: 	*/
1:eac0369: 	public void setLimit(int length)
1:eac0369: 		throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clear any limit set by setLimit. After this call no limit checking
1:eac0369: 		will be made on any read until a setLimit()) call is made.
1:eac0369: 
1:eac0369: 		@return the number of bytes within the limit that have not been read or written.
1:eac0369: 	*/
1:eac0369: 	public int clearLimit();
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:         @exception java.io.EOFException The set limit would exceed
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.Limit
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface Limit {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.IOException;
1: 
1: /**
1: 	Methods that allow limits to be placed on an input or output stream to
1: 	avoid clients reading or writing too much information.
1: */
0: public interface Limit { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/**
1: 		Set the limit of the data that can be read or written. After this
1: 		call up to and including length bytes can be read from or skipped in
1: 		the stream.
1: 		
1: 		<P> On input classes (e.g. InputStreams) any attempt to read or skip
1: 		beyond the limit will result in an end of file indication
1: 		(e.g. read() methods returning -1 or throwing EOFException).
1: 
1: 		<P> On output classes (e.g. OutputStream) any attempt to write
1: 		more beyond the limit will result in an EOFException
1: 
1: 		@exception IOException IOException from some underlying stream
0: 		@exception EOFException The set limit would exceed
1: 		the available data in the stream.
1: 	*/
1: 	public void setLimit(int length)
1: 		throws IOException;
1: 
1: 	/**
1: 		Clear any limit set by setLimit. After this call no limit checking
1: 		will be made on any read until a setLimit()) call is made.
1: 
1: 		@return the number of bytes within the limit that have not been read or written.
1: 	*/
1: 	public int clearLimit();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.IOException;
0: 
0: /**
0: 	Methods that allow limits to be placed on an input or output stream to
0: 	avoid clients reading or writing too much information.
0: */
0: public interface Limit { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Set the limit of the data that can be read or written. After this
0: 		call up to and including length bytes can be read from or skipped in
0: 		the stream.
0: 		
0: 		<P> On input classes (e.g. InputStreams) any attempt to read or skip
0: 		beyond the limit will result in an end of file indication
0: 		(e.g. read() methods returning -1 or throwing EOFException).
0: 
0: 		<P> On output classes (e.g. OutputStream) any attempt to write
0: 		more beyond the limit will result in an EOFException
0: 
0: 		@exception IOException IOException from some underlying stream
0: 		@exception EOFException The set limit would exceed
0: 		the available data in the stream.
0: 	*/
0: 	public void setLimit(int length)
0: 		throws IOException;
0: 
0: 	/**
0: 		Clear any limit set by setLimit. After this call no limit checking
0: 		will be made on any read until a setLimit()) call is made.
0: 
0: 		@return the number of bytes within the limit that have not been read or written.
0: 	*/
0: 	public int clearLimit();
0: }
============================================================================