1:7ddacaa: /*
2:7ddacaa: 
1:7ddacaa:    Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
1:7ddacaa: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:7ddacaa: 
1:7ddacaa:       http://www.apache.org/licenses/LICENSE-2.0
1:7ddacaa: 
1:7ddacaa:    Unless required by applicable law or agreed to in writing, software
1:7ddacaa:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ddacaa:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ddacaa:    See the License for the specific language governing permissions and
1:7ddacaa:    limitations under the License.
1:7ddacaa: 
1:7ddacaa:  */
1:7ddacaa: 
1:7ddacaa: package org.apache.derbyTesting.functionTests.tests.store;
1:7ddacaa: 
1:7ddacaa: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:7ddacaa: 
1:7ddacaa: import java.sql.CallableStatement;
1:7ddacaa: import java.sql.Connection;
1:7ddacaa: import java.sql.PreparedStatement;
1:7ddacaa: import java.sql.ResultSet;
1:7ddacaa: import java.sql.SQLException;
1:7ddacaa: import java.sql.Statement;
1:7ddacaa: 
1:7ddacaa: import org.apache.derby.tools.ij;
1:7ddacaa: 
1:7ddacaa: 
1:7ddacaa: /**
1:7ddacaa: 
1:7ddacaa: The purpose of this test is to reproduce JIRA DERBY-662:
1:7ddacaa: 
1:7ddacaa: Sometimes during redo the system would incorrectly remove the file associated
1:7ddacaa: with a table.  The bug required the following conditions to reproduce:
1:7ddacaa: 1) The OS/filesystem must be case insensitive such that a request to delete
1:7ddacaa:    a file named C2080.dat would also remove c2080.dat.  This is true in
1:7ddacaa:    windows default file systems, not true in unix/linux filesystems that
1:7ddacaa:    I am aware of.
1:7ddacaa: 2) The system must be shutdown not in a clean manner, such that a subsequent
1:7ddacaa:    access of the database causes a REDO recovery action of a drop table
1:7ddacaa:    statement.  This means that a drop table statement must have happened
1:7ddacaa:    since the last checkpoint in the log file.  Examples of things that cause
1:7ddacaa:    checkpoints are:
1:7ddacaa:    o clean shutdown from ij using the "exit" command
1:7ddacaa:    o clean shutdown of database using the "shutdown=true" url
1:7ddacaa:    o calling the checkpoint system procedure
1:7ddacaa:    o generating enough log activity to cause a regularly scheduled checkpoint.
1:7ddacaa: 3) If the conglomerate number of the above described drop table is TABLE_1,
1:7ddacaa:    then for a problem to occur there must also exist in the database a table
1:7ddacaa:    such that it's HEX(TABLE_2) = TABLE_1
1:7ddacaa: 4) Either TABLE_2 must not be accessed during REDO prior to the REDO operation
1:7ddacaa:    of the drop of TABLE_1 or there must be enough other table references during
1:7ddacaa:    the REDO phase to push the caching of of the open of TABLE_2 out of cache.
1:7ddacaa: 
1:7ddacaa: If all of the above conditions are met then during REDO the system will 
1:7ddacaa: incorrectly delete TABLE_2 while trying to redo the drop of TABLE_1.
1:7ddacaa: <p>
1:7ddacaa: This test reproduces the problem by doing the following:
1:7ddacaa: 1) create 500 tables, need enough tables to insure that conglomerate number
1:7ddacaa:    2080 (c820.dat) and 8320 (c2080.dat) exist.
1:7ddacaa: 2) checkpoint the database so that create does not happen during REDO
1:7ddacaa: 3) drop table with conglomerate number 2080, mapping to c820.dat.  It looks
1:7ddacaa:    it up in the catalog in case conglomerate number assignment changes for
1:7ddacaa:    some reason.
1:7ddacaa: 4) exit the database without a clean shudown, this is the default for test
1:7ddacaa:    suites which run multiple tests in a single db - no clean shutdown is done.
1:7ddacaa:    Since we only do a single drop since the last checkpoint, test will cause
1:7ddacaa:    the drop during the subsequent REDO.
1:7ddacaa: 5) run next test program dropcrash2, which will cause redo of the drop.  At
1:7ddacaa:    this point the bug will cause file c2080.dat to be incorrectly deleted and
1:7ddacaa:    thus accesses to conglomerate 8320 will throw container does not exist
1:7ddacaa:    errors.
1:7ddacaa: 6) check the consistency of the database which will find the container does
1:7ddacaa:    not exist error.
1:7ddacaa: 
1:7ddacaa: **/
1:7ddacaa: 
1:7ddacaa: public class dropcrash extends BaseTest
1:7ddacaa: {
1:7ddacaa:     boolean verbose = false;
1:7ddacaa: 
1:7ddacaa:     public dropcrash()
1:7ddacaa:     {
1:7ddacaa:     }
1:7ddacaa:     
1:7ddacaa:     /**
1:7ddacaa:      * create tables, commit, and cause checkpoint of db.
1:7ddacaa:      **/
1:7ddacaa:     public void drop_crash_setup(
1:7ddacaa:     Connection  conn,
1:7ddacaa:     int         num_create)
1:7ddacaa:         throws SQLException
1:7ddacaa:     {
1:7ddacaa:         beginTest(conn, "creating " + num_create + " tables.");
1:7ddacaa:         String create_stmt_str1 = "create table dropcrash_";
1:7ddacaa:         String create_stmt_str2 = " (a int)";
1:7ddacaa: 
1:7ddacaa:         for (int i = 0; i < num_create; i++)
1:7ddacaa:         {
1:7ddacaa:             executeQuery(conn, create_stmt_str1 + i + create_stmt_str2, false);
1:7ddacaa:         }
1:7ddacaa:         conn.commit();
1:7ddacaa: 
1:7ddacaa:         // during redo insure that drop is the only thing redone, if there
1:7ddacaa:         // are other files in the open file cache then bug will not reproduce
1:7ddacaa:         // because delete on the open file will fail.
1:7ddacaa:         executeQuery(
1:7ddacaa:             conn, "CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()", false);
1:7ddacaa: 
1:7ddacaa:         endTest(conn, "creating " + num_create + " tables.");
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa:     /**
1:7ddacaa:      * Reproduce JIRA DERBY-662
1:7ddacaa:      * <p>
1:7ddacaa:      * Find the conglomerate with number 2080, and drop it.  The bug is
1:7ddacaa:      * that during redo the system, on windows, will incorrectly delete
1:7ddacaa:      * C2080.dat because it did not do the hex conversion on the conglomerate
1:7ddacaa:      * number.  This will result in conglomerate 8320 not having it's 
1:7ddacaa:      * associate data file c2080.dat.
1:7ddacaa:      *
1:7ddacaa: 	 * @exception  StandardException  Standard exception policy.
1:7ddacaa:      **/
1:7ddacaa:     public void drop_crash_drop_table(Connection conn)
1:7ddacaa:         throws SQLException
1:7ddacaa:     {
1:7ddacaa:         beginTest(conn, "dropping table with conglomerate number 2080.");
1:7ddacaa:         PreparedStatement ps =
1:7ddacaa:             conn.prepareStatement(
1:7ddacaa:                 "select sys.systables.tablename, sys.sysconglomerates.conglomeratenumber from sys.systables, sys.sysconglomerates where sys.systables.tableid = sys.sysconglomerates.tableid and sys.systables.schemaid = sys.sysconglomerates.schemaid and sys.sysconglomerates.conglomeratenumber = ?");
1:7ddacaa:         ps.setInt(1, 2080);
1:7ddacaa:         ResultSet rs = ps.executeQuery();
1:7ddacaa: 
1:7ddacaa:         if (!rs.next())
1:7ddacaa:         {
1:7ddacaa:             System.out.println("ERROR, did not find conglomerate to drop");
1:7ddacaa:         }
1:7ddacaa:         String drop_name = rs.getString(1);
1:7ddacaa: 
1:7ddacaa:         // don't print table name out to test output as it could change if
1:7ddacaa:         // other recovery tests are added, or system catalogs are added.
1:7ddacaa:         // System.out.println("dropping table:" + drop_name + " with conglomerate number " + rs.getInt(2));
1:7ddacaa:         executeQuery(conn, "drop table " + drop_name, false);
1:7ddacaa:         conn.commit();
1:7ddacaa: 
1:7ddacaa:         // at this point it is important for this test to exit with not a
1:7ddacaa:         // clean shutdown, so that the next test will force recovery redo
1:7ddacaa:         // of this drop.
1:7ddacaa:         endTest(conn, "dropping table with conglomerate number 2080.");
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa:     public void testList(Connection conn)
1:7ddacaa:         throws SQLException
1:7ddacaa:     {
1:7ddacaa:         // create enough tables to insure congloms 2080 and 8320 exist
1:7ddacaa:         drop_crash_setup(conn, 500);
1:7ddacaa:         // drop 2080 and exit program so that drop will be in REDO recovery
1:7ddacaa:         drop_crash_drop_table(conn);
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa:     public static void main(String[] argv) 
1:7ddacaa:         throws Throwable
1:7ddacaa:     {
1:7ddacaa:         dropcrash test = new dropcrash();
1:7ddacaa: 
1:7ddacaa:    		ij.getPropertyArg(argv); 
1:7ddacaa:         Connection conn = ij.startJBMS();
1:7ddacaa:         conn.setAutoCommit(false);
1:7ddacaa: 
1:7ddacaa:         try
1:7ddacaa:         {
1:7ddacaa:             test.testList(conn);
1:7ddacaa:         }
1:7ddacaa:         catch (SQLException sqle)
1:7ddacaa:         {
1:7ddacaa: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:7ddacaa:                 System.out, sqle);
1:7ddacaa: 			sqle.printStackTrace(System.out);
1:7ddacaa: 		}
1:7ddacaa:     }
1:7ddacaa: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7ddacaa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derby.tools.ij;
1: 
1: 
1: /**
1: 
1: The purpose of this test is to reproduce JIRA DERBY-662:
1: 
1: Sometimes during redo the system would incorrectly remove the file associated
1: with a table.  The bug required the following conditions to reproduce:
1: 1) The OS/filesystem must be case insensitive such that a request to delete
1:    a file named C2080.dat would also remove c2080.dat.  This is true in
1:    windows default file systems, not true in unix/linux filesystems that
1:    I am aware of.
1: 2) The system must be shutdown not in a clean manner, such that a subsequent
1:    access of the database causes a REDO recovery action of a drop table
1:    statement.  This means that a drop table statement must have happened
1:    since the last checkpoint in the log file.  Examples of things that cause
1:    checkpoints are:
1:    o clean shutdown from ij using the "exit" command
1:    o clean shutdown of database using the "shutdown=true" url
1:    o calling the checkpoint system procedure
1:    o generating enough log activity to cause a regularly scheduled checkpoint.
1: 3) If the conglomerate number of the above described drop table is TABLE_1,
1:    then for a problem to occur there must also exist in the database a table
1:    such that it's HEX(TABLE_2) = TABLE_1
1: 4) Either TABLE_2 must not be accessed during REDO prior to the REDO operation
1:    of the drop of TABLE_1 or there must be enough other table references during
1:    the REDO phase to push the caching of of the open of TABLE_2 out of cache.
1: 
1: If all of the above conditions are met then during REDO the system will 
1: incorrectly delete TABLE_2 while trying to redo the drop of TABLE_1.
1: <p>
1: This test reproduces the problem by doing the following:
1: 1) create 500 tables, need enough tables to insure that conglomerate number
1:    2080 (c820.dat) and 8320 (c2080.dat) exist.
1: 2) checkpoint the database so that create does not happen during REDO
1: 3) drop table with conglomerate number 2080, mapping to c820.dat.  It looks
1:    it up in the catalog in case conglomerate number assignment changes for
1:    some reason.
1: 4) exit the database without a clean shudown, this is the default for test
1:    suites which run multiple tests in a single db - no clean shutdown is done.
1:    Since we only do a single drop since the last checkpoint, test will cause
1:    the drop during the subsequent REDO.
1: 5) run next test program dropcrash2, which will cause redo of the drop.  At
1:    this point the bug will cause file c2080.dat to be incorrectly deleted and
1:    thus accesses to conglomerate 8320 will throw container does not exist
1:    errors.
1: 6) check the consistency of the database which will find the container does
1:    not exist error.
1: 
1: **/
1: 
1: public class dropcrash extends BaseTest
1: {
1:     boolean verbose = false;
1: 
1:     public dropcrash()
1:     {
1:     }
1:     
1:     /**
1:      * create tables, commit, and cause checkpoint of db.
1:      **/
1:     public void drop_crash_setup(
1:     Connection  conn,
1:     int         num_create)
1:         throws SQLException
1:     {
1:         beginTest(conn, "creating " + num_create + " tables.");
1:         String create_stmt_str1 = "create table dropcrash_";
1:         String create_stmt_str2 = " (a int)";
1: 
1:         for (int i = 0; i < num_create; i++)
1:         {
1:             executeQuery(conn, create_stmt_str1 + i + create_stmt_str2, false);
1:         }
1:         conn.commit();
1: 
1:         // during redo insure that drop is the only thing redone, if there
1:         // are other files in the open file cache then bug will not reproduce
1:         // because delete on the open file will fail.
1:         executeQuery(
1:             conn, "CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()", false);
1: 
1:         endTest(conn, "creating " + num_create + " tables.");
1:     }
1: 
1:     /**
1:      * Reproduce JIRA DERBY-662
1:      * <p>
1:      * Find the conglomerate with number 2080, and drop it.  The bug is
1:      * that during redo the system, on windows, will incorrectly delete
1:      * C2080.dat because it did not do the hex conversion on the conglomerate
1:      * number.  This will result in conglomerate 8320 not having it's 
1:      * associate data file c2080.dat.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void drop_crash_drop_table(Connection conn)
1:         throws SQLException
1:     {
1:         beginTest(conn, "dropping table with conglomerate number 2080.");
1:         PreparedStatement ps =
1:             conn.prepareStatement(
1:                 "select sys.systables.tablename, sys.sysconglomerates.conglomeratenumber from sys.systables, sys.sysconglomerates where sys.systables.tableid = sys.sysconglomerates.tableid and sys.systables.schemaid = sys.sysconglomerates.schemaid and sys.sysconglomerates.conglomeratenumber = ?");
1:         ps.setInt(1, 2080);
1:         ResultSet rs = ps.executeQuery();
1: 
1:         if (!rs.next())
1:         {
1:             System.out.println("ERROR, did not find conglomerate to drop");
1:         }
1:         String drop_name = rs.getString(1);
1: 
1:         // don't print table name out to test output as it could change if
1:         // other recovery tests are added, or system catalogs are added.
1:         // System.out.println("dropping table:" + drop_name + " with conglomerate number " + rs.getInt(2));
1:         executeQuery(conn, "drop table " + drop_name, false);
1:         conn.commit();
1: 
1:         // at this point it is important for this test to exit with not a
1:         // clean shutdown, so that the next test will force recovery redo
1:         // of this drop.
1:         endTest(conn, "dropping table with conglomerate number 2080.");
1:     }
1: 
1:     public void testList(Connection conn)
1:         throws SQLException
1:     {
1:         // create enough tables to insure congloms 2080 and 8320 exist
1:         drop_crash_setup(conn, 500);
1:         // drop 2080 and exit program so that drop will be in REDO recovery
1:         drop_crash_drop_table(conn);
1:     }
1: 
1:     public static void main(String[] argv) 
1:         throws Throwable
1:     {
1:         dropcrash test = new dropcrash();
1: 
1:    		ij.getPropertyArg(argv); 
1:         Connection conn = ij.startJBMS();
1:         conn.setAutoCommit(false);
1: 
1:         try
1:         {
1:             test.testList(conn);
1:         }
1:         catch (SQLException sqle)
1:         {
1: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:                 System.out, sqle);
1: 			sqle.printStackTrace(System.out);
1: 		}
1:     }
1: }
commit:8fa6064
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: 
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.sql.CallableStatement;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: 
0: import org.apache.derby.tools.ij;
0: 
0: 
0: /**
0: 
0: The purpose of this test is to reproduce JIRA DERBY-662:
0: 
0: Sometimes during redo the system would incorrectly remove the file associated
0: with a table.  The bug required the following conditions to reproduce:
0: 1) The OS/filesystem must be case insensitive such that a request to delete
0:    a file named C2080.dat would also remove c2080.dat.  This is true in
0:    windows default file systems, not true in unix/linux filesystems that
0:    I am aware of.
0: 2) The system must be shutdown not in a clean manner, such that a subsequent
0:    access of the database causes a REDO recovery action of a drop table
0:    statement.  This means that a drop table statement must have happened
0:    since the last checkpoint in the log file.  Examples of things that cause
0:    checkpoints are:
0:    o clean shutdown from ij using the "exit" command
0:    o clean shutdown of database using the "shutdown=true" url
0:    o calling the checkpoint system procedure
0:    o generating enough log activity to cause a regularly scheduled checkpoint.
0: 3) If the conglomerate number of the above described drop table is TABLE_1,
0:    then for a problem to occur there must also exist in the database a table
0:    such that it's HEX(TABLE_2) = TABLE_1
0: 4) Either TABLE_2 must not be accessed during REDO prior to the REDO operation
0:    of the drop of TABLE_1 or there must be enough other table references during
0:    the REDO phase to push the caching of of the open of TABLE_2 out of cache.
0: 
0: If all of the above conditions are met then during REDO the system will 
0: incorrectly delete TABLE_2 while trying to redo the drop of TABLE_1.
0: <p>
0: This test reproduces the problem by doing the following:
0: 1) create 500 tables, need enough tables to insure that conglomerate number
0:    2080 (c820.dat) and 8320 (c2080.dat) exist.
0: 2) checkpoint the database so that create does not happen during REDO
0: 3) drop table with conglomerate number 2080, mapping to c820.dat.  It looks
0:    it up in the catalog in case conglomerate number assignment changes for
0:    some reason.
0: 4) exit the database without a clean shudown, this is the default for test
0:    suites which run multiple tests in a single db - no clean shutdown is done.
0:    Since we only do a single drop since the last checkpoint, test will cause
0:    the drop during the subsequent REDO.
0: 5) run next test program dropcrash2, which will cause redo of the drop.  At
0:    this point the bug will cause file c2080.dat to be incorrectly deleted and
0:    thus accesses to conglomerate 8320 will throw container does not exist
0:    errors.
0: 6) check the consistency of the database which will find the container does
0:    not exist error.
0: 
0: **/
0: 
0: public class dropcrash extends BaseTest
0: {
0:     boolean verbose = false;
0: 
0:     public dropcrash()
0:     {
0:     }
0:     
0:     /**
0:      * create tables, commit, and cause checkpoint of db.
0:      **/
0:     public void drop_crash_setup(
0:     Connection  conn,
0:     int         num_create)
0:         throws SQLException
0:     {
0:         beginTest(conn, "creating " + num_create + " tables.");
0:         String create_stmt_str1 = "create table dropcrash_";
0:         String create_stmt_str2 = " (a int)";
0: 
0:         for (int i = 0; i < num_create; i++)
0:         {
0:             executeQuery(conn, create_stmt_str1 + i + create_stmt_str2, false);
0:         }
0:         conn.commit();
0: 
0:         // during redo insure that drop is the only thing redone, if there
0:         // are other files in the open file cache then bug will not reproduce
0:         // because delete on the open file will fail.
0:         executeQuery(
0:             conn, "CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()", false);
0: 
0:         endTest(conn, "creating " + num_create + " tables.");
0:     }
0: 
0:     /**
0:      * Reproduce JIRA DERBY-662
0:      * <p>
0:      * Find the conglomerate with number 2080, and drop it.  The bug is
0:      * that during redo the system, on windows, will incorrectly delete
0:      * C2080.dat because it did not do the hex conversion on the conglomerate
0:      * number.  This will result in conglomerate 8320 not having it's 
0:      * associate data file c2080.dat.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void drop_crash_drop_table(Connection conn)
0:         throws SQLException
0:     {
0:         beginTest(conn, "dropping table with conglomerate number 2080.");
0:         PreparedStatement ps =
0:             conn.prepareStatement(
0:                 "select sys.systables.tablename, sys.sysconglomerates.conglomeratenumber from sys.systables, sys.sysconglomerates where sys.systables.tableid = sys.sysconglomerates.tableid and sys.systables.schemaid = sys.sysconglomerates.schemaid and sys.sysconglomerates.conglomeratenumber = ?");
0:         ps.setInt(1, 2080);
0:         ResultSet rs = ps.executeQuery();
0: 
0:         if (!rs.next())
0:         {
0:             System.out.println("ERROR, did not find conglomerate to drop");
0:         }
0:         String drop_name = rs.getString(1);
0: 
0:         // don't print table name out to test output as it could change if
0:         // other recovery tests are added, or system catalogs are added.
0:         // System.out.println("dropping table:" + drop_name + " with conglomerate number " + rs.getInt(2));
0:         executeQuery(conn, "drop table " + drop_name, false);
0:         conn.commit();
0: 
0:         // at this point it is important for this test to exit with not a
0:         // clean shutdown, so that the next test will force recovery redo
0:         // of this drop.
0:         endTest(conn, "dropping table with conglomerate number 2080.");
0:     }
0: 
0:     public void testList(Connection conn)
0:         throws SQLException
0:     {
0:         // create enough tables to insure congloms 2080 and 8320 exist
0:         drop_crash_setup(conn, 500);
0:         // drop 2080 and exit program so that drop will be in REDO recovery
0:         drop_crash_drop_table(conn);
0:     }
0: 
0:     public static void main(String[] argv) 
0:         throws Throwable
0:     {
0:         dropcrash test = new dropcrash();
0: 
0:    		ij.getPropertyArg(argv); 
0:         Connection conn = ij.startJBMS();
0:         conn.setAutoCommit(false);
0: 
0:         try
0:         {
0:             test.testList(conn);
0:         }
0:         catch (SQLException sqle)
0:         {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0:     }
0: }
============================================================================