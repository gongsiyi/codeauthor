1:33467a5: /*
1:33467a5: 
1:33467a5:    Derby - Class org.apache.derby.impl.io.vfmem.BlockedByteArrayInputStream
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derby.impl.io.vfmem;
1:33467a5: 
1:33467a5: import java.io.InputStream;
1:33467a5: 
1:33467a5: /**
1:33467a5:  * An input stream reading from a blocked byte array.
1:33467a5:  */
1:33467a5: class BlockedByteArrayInputStream
1:33467a5:         extends InputStream {
1:33467a5: 
1:33467a5:     /** The underlying source. Set to {@code null} when closed. */
1:33467a5:     private BlockedByteArray src;
1:33467a5:     /** The current position of the stream. */
1:33467a5:     private long pos;
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Creates a new input stream reading from a blocked byte array.
1:33467a5:      *
1:33467a5:      * @param src the source blocked byte array
1:33467a5:      * @param pos the initial position to start reading from
1:33467a5:      */
1:33467a5:     public BlockedByteArrayInputStream(BlockedByteArray src, long pos) {
1:33467a5:         if (src == null) {
1:33467a5:             throw new IllegalArgumentException(
1:33467a5:                     "BlockedByteArray cannot be null");
1:33467a5:         }
1:33467a5:         this.src = src;
1:33467a5:         this.pos = pos;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Sets the position.
1:33467a5:      *
1:33467a5:      * @param newPos the new byte position
1:33467a5:      */
1:33467a5:     void setPosition(long newPos) {
1:33467a5:         this.pos = newPos;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the current position.
1:33467a5:      *
1:33467a5:      * @return The current byte position.
1:33467a5:      */
1:33467a5:     long getPosition() {
1:33467a5:         return this.pos;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Reads a single byte.
1:33467a5:      *
1:33467a5:      * @return A byte.
1:33467a5:      */
1:33467a5:     public int read() {
1:33467a5:         int ret = src.read(pos);
1:33467a5:         if (ret != -1) {
1:33467a5:             pos++;
1:33467a5:         }
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Reads up to {@code len} bytes.
1:33467a5:      *
1:33467a5:      * @param buf destination buffer
1:33467a5:      * @param offset offset into the destination buffer
1:33467a5:      * @param len number of bytes to read
1:33467a5:      * @return The number of bytes read.
1:33467a5:      */
1:33467a5:     public int read(byte[] buf, int offset, int len) {
1:33467a5:         int ret = src.read(pos, buf, offset, len);
1:33467a5:         if (ret != -1) {
1:33467a5:             pos += ret;
1:33467a5:         }
1:33467a5:         return ret;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Closes the stream.
1:33467a5:      */
1:33467a5:     public void close() {
1:33467a5:         this.src = null;
1:33467a5:     }
1:33467a5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.vfmem.BlockedByteArrayInputStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.io.vfmem;
1: 
1: import java.io.InputStream;
1: 
1: /**
1:  * An input stream reading from a blocked byte array.
1:  */
1: class BlockedByteArrayInputStream
1:         extends InputStream {
1: 
1:     /** The underlying source. Set to {@code null} when closed. */
1:     private BlockedByteArray src;
1:     /** The current position of the stream. */
1:     private long pos;
1: 
1:     /**
1:      * Creates a new input stream reading from a blocked byte array.
1:      *
1:      * @param src the source blocked byte array
1:      * @param pos the initial position to start reading from
1:      */
1:     public BlockedByteArrayInputStream(BlockedByteArray src, long pos) {
1:         if (src == null) {
1:             throw new IllegalArgumentException(
1:                     "BlockedByteArray cannot be null");
1:         }
1:         this.src = src;
1:         this.pos = pos;
1:     }
1: 
1:     /**
1:      * Sets the position.
1:      *
1:      * @param newPos the new byte position
1:      */
1:     void setPosition(long newPos) {
1:         this.pos = newPos;
1:     }
1: 
1:     /**
1:      * Returns the current position.
1:      *
1:      * @return The current byte position.
1:      */
1:     long getPosition() {
1:         return this.pos;
1:     }
1: 
1:     /**
1:      * Reads a single byte.
1:      *
1:      * @return A byte.
1:      */
1:     public int read() {
1:         int ret = src.read(pos);
1:         if (ret != -1) {
1:             pos++;
1:         }
1:         return ret;
1:     }
1: 
1:     /**
1:      * Reads up to {@code len} bytes.
1:      *
1:      * @param buf destination buffer
1:      * @param offset offset into the destination buffer
1:      * @param len number of bytes to read
1:      * @return The number of bytes read.
1:      */
1:     public int read(byte[] buf, int offset, int len) {
1:         int ret = src.read(pos, buf, offset, len);
1:         if (ret != -1) {
1:             pos += ret;
1:         }
1:         return ret;
1:     }
1: 
1:     /**
1:      * Closes the stream.
1:      */
1:     public void close() {
1:         this.src = null;
1:     }
1: }
============================================================================