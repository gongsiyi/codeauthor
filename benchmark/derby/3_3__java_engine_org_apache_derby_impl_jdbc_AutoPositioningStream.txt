1:168957e: /*
1:168957e: 
1:168957e:    Derby - Class org.apache.derby.impl.jdbc.AutoPositioningStream
1:168957e: 
1:168957e:    Licensed to the Apache Software Foundation (ASF) under one
1:168957e:    or more contributor license agreements.  See the NOTICE file
1:168957e:    distributed with this work for additional information
1:168957e:    regarding copyright ownership.  The ASF licenses this file
1:168957e:    to you under the Apache License, Version 2.0 (the
1:168957e:    "License"); you may not use this file except in compliance
1:168957e:    with the License.  You may obtain a copy of the License at
1:168957e: 
1:168957e:      http://www.apache.org/licenses/LICENSE-2.0
1:168957e: 
1:168957e:    Unless required by applicable law or agreed to in writing,
1:168957e:    software distributed under the License is distributed on an
1:168957e:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:168957e:    KIND, either express or implied.  See the License for the
1:168957e:    specific language governing permissions and limitations
1:168957e:    under the License.
1:168957e: 
1:168957e:  */
1:168957e: 
1:168957e: package org.apache.derby.impl.jdbc;
1:168957e: 
1:168957e: import org.apache.derby.iapi.error.StandardException;
1:168957e: 
1:168957e: import java.io.EOFException;
1:168957e: import java.io.IOException;
1:168957e: import java.io.InputStream;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:168957e: 
1:168957e: /**
1:168957e:  * This Stream is a wrapper for PositionedStoreStream to set the position
1:168957e:  * correctly before performing any operation on it. 
1:168957e:  * All the read and skip methods ensure that the PositionedStoreStream
1:168957e:  * is set to right position before actually performing these operations.
1:168957e:  * PositionedStoreStream is accessed within synchronized block to ensure
1:168957e:  * exclusive access to it.
1:168957e:  *
1:168957e:  * This class must be constructed while synchronizing on 
1:168957e:  * ConnectionChild.getConnectionSynchronization
1:168957e:  */
1:168957e: final class AutoPositioningStream extends BinaryToRawStream {
1:168957e: 
1:168957e:     /** ConnectionChild to get synchronizion object */
1:168957e:     private final ConnectionChild conChild;
1:168957e:     private long pos;
1:168957e:     private final PositionedStoreStream positionedStream;
1:168957e: 
1:168957e:     /**
1:168957e:      * Constructs AutoPositioningStream object. This constructor must
1:168957e:      * be called from block synchronized on 
1:168957e:      * conChild.getConnectionSynchronization.
1:168957e:      * @param conChild  ConnectionChild to get synchronization object
1:168957e:      *                  before accessing PositionedStoreStream
1:168957e:      * @param in        InputStream
1:168957e:      * @param parent    Parent of the stream to prevent it from being
1:168957e:      *                  gc.
1:168957e:      * @throws IOException if an I/O error occurs
1:168957e:      */
1:168957e:     AutoPositioningStream(ConnectionChild conChild, 
1:168957e:                 InputStream in, Object parent) throws IOException {
1:168957e:         //set the stream to actual data 
1:168957e:         //BinaryToRawStream will skip the initial length info
1:168957e:         super (in, parent);
1:168957e:         if (SanityManager.DEBUG) {
1:168957e:             SanityManager.ASSERT (in instanceof PositionedStoreStream,
1:168957e:                     "Unexpected stream");
1:168957e:         }
1:168957e:         positionedStream = (PositionedStoreStream) in;
1:168957e:         pos = positionedStream.getPosition();
1:168957e:         this.conChild = conChild;
1:168957e:     }
1:168957e: 
1:168957e:     /**
1:168957e:      * Reads a single byte from the underlying stream.
1:168957e:      *
1:168957e:      * @return The next byte of data, or -1 if the end of the stream is reached.
1:168957e:      * @throws IOException if an I/O error occurs
1:168957e:      */
1:168957e:     public int read() throws IOException {
1:168957e:         synchronized (conChild.getConnectionSynchronization()) {
1:168957e:             try {
1:168957e:                 setPosition ();
1:168957e:             }
1:168957e:             catch (EOFException e) {
1:168957e:                 return -1;
1:168957e:             }
1:168957e:             int ret = positionedStream.read();
1:168957e:             if (ret >= 0)
1:168957e:                 pos++;
1:168957e:             return ret;
1:168957e:         }
1:168957e:     }
1:168957e: 
1:168957e:     /**
1:168957e:      * Reads a number of bytes from the underlying stream and stores them in the
1:168957e:      * specified byte array at the specified offset.
1:168957e:      *
1:168957e:      * @return The actual number of bytes read, or -1 if the end of the stream
1:168957e:      *      is reached.
1:168957e:      * @throws IOException if an I/O error occurs
1:168957e:      */
1:168957e:     public int read(byte[] b, int off, int len) throws IOException {
1:168957e:         synchronized (conChild.getConnectionSynchronization()) {
1:168957e:             try {
1:168957e:                 setPosition ();
1:168957e:             }
1:168957e:             catch (EOFException e) {
1:168957e:                 return -1;
1:168957e:             }
1:168957e:             int ret = positionedStream.read(b, off, len);
1:168957e:             if (ret > 0)
1:168957e:                 pos +=ret;
1:168957e:             return ret;
1:168957e:         }
1:168957e:     }
1:168957e: 
1:168957e:     /**
1:168957e:      * Skips up to the specified number of bytes from the underlying stream.
1:168957e:      *
1:168957e:      * @return The actual number of bytes skipped.
1:168957e:      * @throws IOException if an I/O error occurs
1:168957e:      */
1:168957e:     public long skip(long n) throws IOException {
1:168957e:         synchronized (conChild.getConnectionSynchronization()) {
1:168957e:             setPosition ();
1:168957e:             long ret = positionedStream.skip(n);
1:168957e:             pos += ret;
1:168957e:             return ret;
1:168957e:         }
1:168957e:     }
1:168957e: 
1:168957e:     /**
1:168957e:      * Reads a number of bytes from the underlying stream and stores them in the
1:168957e:      * specified byte array.
1:168957e:      *
1:168957e:      * @return The actual number of bytes read, or -1 if the end of the stream
1:168957e:      *      is reached.
1:168957e:      * @throws IOException if an I/O error occurs
1:168957e:      */
1:168957e:     public int read(byte[] b) throws IOException {
1:168957e:         return read (b, 0, b.length);
1:168957e:     }
1:168957e:     
1:168957e:     /**
1:168957e:      * Checks if positionedStream's position was changed since 
1:168957e:      * last used, sets the position to right position if its 
1:168957e:      * changed.
1:168957e:      */
1:168957e:     private void setPosition () throws IOException {
1:168957e:         try {
1:168957e:             if (pos != positionedStream.getPosition()) {
1:168957e:                 positionedStream.reposition (pos);
1:168957e:             }
1:168957e:         }
1:168957e:         catch (StandardException se) {
1:ed0be21:             throw Util.newIOException(se);
1:168957e:         }
1:168957e:     }
1:168957e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ed0be21
/////////////////////////////////////////////////////////////////////////
1:             throw Util.newIOException(se);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:168957e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.AutoPositioningStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This Stream is a wrapper for PositionedStoreStream to set the position
1:  * correctly before performing any operation on it. 
1:  * All the read and skip methods ensure that the PositionedStoreStream
1:  * is set to right position before actually performing these operations.
1:  * PositionedStoreStream is accessed within synchronized block to ensure
1:  * exclusive access to it.
1:  *
1:  * This class must be constructed while synchronizing on 
1:  * ConnectionChild.getConnectionSynchronization
1:  */
1: final class AutoPositioningStream extends BinaryToRawStream {
1: 
1:     /** ConnectionChild to get synchronizion object */
1:     private final ConnectionChild conChild;
1:     private long pos;
1:     private final PositionedStoreStream positionedStream;
1: 
1:     /**
1:      * Constructs AutoPositioningStream object. This constructor must
1:      * be called from block synchronized on 
1:      * conChild.getConnectionSynchronization.
1:      * @param conChild  ConnectionChild to get synchronization object
1:      *                  before accessing PositionedStoreStream
1:      * @param in        InputStream
1:      * @param parent    Parent of the stream to prevent it from being
1:      *                  gc.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     AutoPositioningStream(ConnectionChild conChild, 
1:                 InputStream in, Object parent) throws IOException {
1:         //set the stream to actual data 
1:         //BinaryToRawStream will skip the initial length info
1:         super (in, parent);
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT (in instanceof PositionedStoreStream,
1:                     "Unexpected stream");
1:         }
1:         positionedStream = (PositionedStoreStream) in;
1:         pos = positionedStream.getPosition();
1:         this.conChild = conChild;
1:     }
1: 
1:     /**
1:      * Reads a single byte from the underlying stream.
1:      *
1:      * @return The next byte of data, or -1 if the end of the stream is reached.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public int read() throws IOException {
1:         synchronized (conChild.getConnectionSynchronization()) {
1:             try {
1:                 setPosition ();
1:             }
1:             catch (EOFException e) {
1:                 return -1;
1:             }
1:             int ret = positionedStream.read();
1:             if (ret >= 0)
1:                 pos++;
1:             return ret;
1:         }
1:     }
1: 
1:     /**
1:      * Reads a number of bytes from the underlying stream and stores them in the
1:      * specified byte array at the specified offset.
1:      *
1:      * @return The actual number of bytes read, or -1 if the end of the stream
1:      *      is reached.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         synchronized (conChild.getConnectionSynchronization()) {
1:             try {
1:                 setPosition ();
1:             }
1:             catch (EOFException e) {
1:                 return -1;
1:             }
1:             int ret = positionedStream.read(b, off, len);
1:             if (ret > 0)
1:                 pos +=ret;
1:             return ret;
1:         }
1:     }
1: 
1:     /**
1:      * Skips up to the specified number of bytes from the underlying stream.
1:      *
1:      * @return The actual number of bytes skipped.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public long skip(long n) throws IOException {
1:         synchronized (conChild.getConnectionSynchronization()) {
1:             setPosition ();
1:             long ret = positionedStream.skip(n);
1:             pos += ret;
1:             return ret;
1:         }
1:     }
1: 
1:     /**
1:      * Reads a number of bytes from the underlying stream and stores them in the
1:      * specified byte array.
1:      *
1:      * @return The actual number of bytes read, or -1 if the end of the stream
1:      *      is reached.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public int read(byte[] b) throws IOException {
1:         return read (b, 0, b.length);
1:     }
1:     
1:     /**
1:      * Checks if positionedStream's position was changed since 
1:      * last used, sets the position to right position if its 
1:      * changed.
1:      */
1:     private void setPosition () throws IOException {
1:         try {
1:             if (pos != positionedStream.getPosition()) {
1:                 positionedStream.reposition (pos);
1:             }
1:         }
1:         catch (StandardException se) {
0:             IOException ioe = new IOException (se.getMessage());
0:             ioe.initCause (se);
0:             throw ioe;
1:         }
1:     }
1: }
============================================================================