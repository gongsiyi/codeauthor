1:4e0e1f1: /*
1:4e0e1f1: 
1:38667d9:    Derby - Class org.apache.derby.jdbc.BasicEmbeddedConnectionPoolDataSource40
1:4e0e1f1: 
1:4e0e1f1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4e0e1f1:    contributor license agreements.  See the NOTICE file distributed with
1:4e0e1f1:    this work for additional information regarding copyright ownership.
1:4e0e1f1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:4e0e1f1:    (the "License"); you may not use this file except in compliance with
1:4e0e1f1:    the License.  You may obtain a copy of the License at
1:4e0e1f1: 
1:4e0e1f1:       http://www.apache.org/licenses/LICENSE-2.0
1:4e0e1f1: 
1:4e0e1f1:    Unless required by applicable law or agreed to in writing, software
1:4e0e1f1:    distributed under the License is distributed on an "AS IS" BASIS,
1:4e0e1f1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4e0e1f1:    See the License for the specific language governing permissions and
1:4e0e1f1:    limitations under the License.
1:4e0e1f1: 
3:4e0e1f1:  */
1:4e0e1f1: package org.apache.derby.jdbc;
1:4e0e1f1: 
1:4e0e1f1: import java.sql.SQLException;
1:4e0e1f1: import javax.sql.PooledConnection;
1:4e0e1f1: 
3:4e0e1f1: /**
1:a086620:  * This data source is suitable for an application using embedded Derby,
1:2913612:  * running on Java 8 Compact Profile 2 or higher.
1:2913612:  * <p/>
1:38667d9:  * BasicEmbeddedConnectionPoolDataSource40 is similar to
1:4e0e1f1:  * EmbeddedConnectionPoolDataSource40 except it does not support JNDI naming,
1:4e0e1f1:  * i.e. it does not implement {@code javax.naming.Referenceable}.
1:4e0e1f1:  *
1:4e0e1f1:  * @see EmbeddedConnectionPoolDataSource40
1:4e0e1f1:  */
1:38667d9: public class BasicEmbeddedConnectionPoolDataSource40
1:38667d9:     extends BasicEmbeddedDataSource40
1:4e0e1f1:     implements javax.sql.ConnectionPoolDataSource,
1:4e0e1f1:         EmbeddedConnectionPoolDataSourceInterface {
1:4e0e1f1: 
1:4e0e1f1:     private static final long serialVersionUID = 7852784308039674161L;
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      *  No-argument constructor.
1:4e0e1f1:      */
1:38667d9:     public BasicEmbeddedConnectionPoolDataSource40() {
1:4e0e1f1:         super();
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /*
1:4e0e1f1:      * Implementation of ConnectionPoolDataSource interface methods
1:4e0e1f1:      */
1:4e0e1f1: 
1:a086620:     @Override
1:4e0e1f1:     public final PooledConnection getPooledConnection() throws SQLException {
1:4e0e1f1:         return createPooledConnection (getUser(), getPassword(), false);
1:4e0e1f1:     }
1:4e0e1f1: 
1:a086620:     @Override
1:4e0e1f1:     public final PooledConnection getPooledConnection(
1:4e0e1f1:             String username,
1:4e0e1f1:             String password) throws SQLException {
1:4e0e1f1: 
1:4e0e1f1:         return createPooledConnection (username, password, true);
1:4e0e1f1:     }
1:4e0e1f1: 
1:4e0e1f1:     /**
1:4e0e1f1:      * Minion helper method. Create and return a pooled connection
1:4e0e1f1:      *
1:4e0e1f1:      * @param user the user name used to authenticate the connection
1:4e0e1f1:      * @param password the user's password
1:4e0e1f1:      * @param requestPassword {@code false} if original call is from a
1:4e0e1f1:      *        no-argument constructor, otherwise {@code true}
1:4e0e1f1:      *
1:4e0e1f1:      * @return a connection to the database
1:4e0e1f1:      * @throws SQLException if a database-access error occurs
1:4e0e1f1:      */
1:4e0e1f1:     private PooledConnection createPooledConnection (
1:4e0e1f1:             String user,
1:4e0e1f1:             String password,
1:4e0e1f1:             boolean requestPassword) throws SQLException {
1:4e0e1f1: 
1:595307e:         return findDriver().getNewPooledConnection(
1:4e0e1f1:             this, user, password, requestPassword);
1:4e0e1f1:     }
1:4e0e1f1: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a086620
/////////////////////////////////////////////////////////////////////////
1:  * This data source is suitable for an application using embedded Derby,
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:  * This datasource is suitable for an application using embedded Derby,
1:  * running on Java 8 Compact Profile 2 or higher.
1:  * <p/>
commit:38667d9
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.BasicEmbeddedConnectionPoolDataSource40
/////////////////////////////////////////////////////////////////////////
1:  * BasicEmbeddedConnectionPoolDataSource40 is similar to
1: public class BasicEmbeddedConnectionPoolDataSource40
1:     extends BasicEmbeddedDataSource40
/////////////////////////////////////////////////////////////////////////
1:     public BasicEmbeddedConnectionPoolDataSource40() {
commit:4e0e1f1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.jdbc;
1: 
1: import java.sql.SQLException;
1: import javax.sql.PooledConnection;
1: 
1: /**
0:  * NonJNDIEmbeddedConnectionPoolDataSource40 is similar to
1:  * EmbeddedConnectionPoolDataSource40 except it does not support JNDI naming,
1:  * i.e. it does not implement {@code javax.naming.Referenceable}.
1:  *
1:  * @see EmbeddedConnectionPoolDataSource40
1:  */
0: public class NonJNDIEmbeddedConnectionPoolDataSource40
0:     extends NonJNDIEmbeddedDataSource40
1:     implements javax.sql.ConnectionPoolDataSource,
1:         EmbeddedConnectionPoolDataSourceInterface {
1: 
1:     private static final long serialVersionUID = 7852784308039674161L;
1: 
1:     /**
1:      *  No-argument constructor.
1:      */
0:     public NonJNDIEmbeddedConnectionPoolDataSource40() {
1:         super();
1:     }
1: 
1:     /*
1:      * Implementation of ConnectionPoolDataSource interface methods
1:      */
1: 
1:     /**
0:      * @see javax.sql.ConnectionPoolDataSource#getPooledConnection()
1:      */
1:     public final PooledConnection getPooledConnection() throws SQLException {
1:         return createPooledConnection (getUser(), getPassword(), false);
1:     }
1: 
1:     /**
0:      * @see javax.sql.ConnectionPoolDataSource#getPooledConnection(
0:      *      String, String)
1:      */
1:     public final PooledConnection getPooledConnection(
1:             String username,
1:             String password) throws SQLException {
1: 
1:         return createPooledConnection (username, password, true);
1:     }
1: 
1:     /**
1:      * Minion helper method. Create and return a pooled connection
1:      *
1:      * @param user the user name used to authenticate the connection
1:      * @param password the user's password
1:      * @param requestPassword {@code false} if original call is from a
1:      *        no-argument constructor, otherwise {@code true}
1:      *
1:      * @return a connection to the database
1:      * @throws SQLException if a database-access error occurs
1:      */
1:     private PooledConnection createPooledConnection (
1:             String user,
1:             String password,
1:             boolean requestPassword) throws SQLException {
1: 
0:         return ((Driver30) findDriver()).getNewPooledConnection(
1:             this, user, password, requestPassword);
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:595307e
/////////////////////////////////////////////////////////////////////////
1:         return findDriver().getNewPooledConnection(
============================================================================