1:3fcea8a: /*
4:3fcea8a: 
1:3fcea8a:    Derby - Class org.apache.derby.impl.services.timer.SingletonTimerFactory
1:3fcea8a: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:3fcea8a: 
1:3fcea8a:       http://www.apache.org/licenses/LICENSE-2.0
1:3fcea8a: 
1:3fcea8a:    Unless required by applicable law or agreed to in writing, software
1:3fcea8a:    distributed under the License is distributed on an "AS IS" BASIS,
1:3fcea8a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3fcea8a:    See the License for the specific language governing permissions and
1:3fcea8a:    limitations under the License.
1:3fcea8a: 
2:3fcea8a:  */
1:3fcea8a: 
1:3fcea8a: package org.apache.derby.impl.services.timer;
1:3fcea8a: 
1:c34c8e0: import java.security.AccessController;
1:c34c8e0: import java.security.PrivilegedAction;
1:3fcea8a: import java.util.Properties;
1:7f53212: import java.util.Timer;
1:13673bd: import java.util.TimerTask;
1:8032298: import java.util.concurrent.atomic.AtomicInteger;
1:7f53212: import org.apache.derby.iapi.error.StandardException;
1:7f53212: import org.apache.derby.iapi.services.i18n.MessageService;
1:7f53212: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:7f53212: import org.apache.derby.iapi.services.timer.TimerFactory;
1:7f53212: import org.apache.derby.shared.common.reference.MessageId;
1:7f53212: import org.apache.derby.shared.common.sanity.SanityManager;
1:3fcea8a: 
1:3fcea8a: 
2:3fcea8a: /**
1:3fcea8a:  * This class implements the TimerFactory interface.
1:3fcea8a:  * It creates a singleton Timer instance.
4:3fcea8a:  *
1:3fcea8a:  * The class implements the ModuleControl interface,
1:3fcea8a:  * because it needs to cancel the Timer at system shutdown.
1:3fcea8a:  *
2:3fcea8a:  * @see TimerFactory
1:3fcea8a:  * @see ModuleControl
1:3fcea8a:  */
1:3fcea8a: public class SingletonTimerFactory
1:3fcea8a:     implements
1:3fcea8a:         TimerFactory,
1:3fcea8a:         ModuleControl
2:3fcea8a: {
1:3fcea8a:     /**
1:3fcea8a:      * Singleton Timer instance.
1:3fcea8a:      */
1:7f53212:     private final Timer singletonTimer;
1:3fcea8a: 
1:3fcea8a:     /**
1:8032298:      * The number of times {@link #cancel(TimerTask)} has been called.
1:8032298:      * Used for determining whether it's time to purge cancelled tasks from
1:8032298:      * the timer.
1:8032298:      */
1:8032298:     private final AtomicInteger cancelCount = new AtomicInteger();
1:8032298: 
1:8032298:     /**
1:7f53212:      * Initialization warnings. See {@link #getWarnings}.
1:7f53212:      */
1:7f53212:     private StringBuilder warnings = new StringBuilder();
1:7f53212: 
1:7f53212:     /**
1:3fcea8a:      * Initializes this TimerFactory with a singleton Timer instance.
1:3fcea8a:      */
1:3fcea8a:     public SingletonTimerFactory()
1:3fcea8a:     {
1:3fcea8a:         /**
1:3fcea8a:          * Even though we implement the ModuleControl interface,
1:3fcea8a:          * we initialize the object here rather than in boot, since
1:3fcea8a:          * a) We avoid synchronizing access to singletonTimer later
1:3fcea8a:          * b) We don't need any properties
1:3fcea8a:          */
1:3ea4878:          // DERBY-3745 We want to avoid leaking class loaders, so 
1:3ea4878:          // we make sure the context class loader is null before
1:3ea4878:          // creating the thread
1:8032298:         ClassLoader savecl = getContextClassLoader();
1:8032298:         if (savecl != null) {
1:8032298:             setContextClassLoader(null);
1:c34c8e0:         }
1:3fcea8a: 
1:8032298:         singletonTimer = new Timer(true); // Run as daemon
1:8032298: 
1:8032298:         if (savecl != null) {
1:8032298:             // Restore the original context class loader.
1:8032298:             setContextClassLoader(savecl);
1:8032298:         }
1:c34c8e0:     }
1:3fcea8a: 
1:13673bd:     // TimerFactory interface methods
1:13673bd: 
1:7f53212:     @Override
1:13673bd:     public void schedule(TimerTask task, long delay) {
1:13673bd:         singletonTimer.schedule(task, delay);
1:13673bd:     }
1:13673bd: 
1:7f53212:     @Override
1:13673bd:     public void cancel(TimerTask task) {
1:13673bd:         task.cancel();
1:8032298: 
1:8032298:         // DERBY-6114: Cancelled tasks stay in the timer's queue until they
1:8032298:         // are scheduled to run, unless we call the purge() method. This
1:8032298:         // prevents garbage collection of the tasks. Even though the tasks
1:8032298:         // are small objects, there could be many of them, especially when
1:8032298:         // both the transaction throughput and tasks' delays are high, it
1:8032298:         // could lead to OutOfMemoryErrors. Since purge() could be a heavy
1:8032298:         // operation if the queue is big, we don't call it every time a task
1:8032298:         // is cancelled.
1:8032298:         //
1:8032298:         // When Java 7 has been made the lowest supported level, we should
1:8032298:         // consider replacing the java.util.Timer instance with a
1:8032298:         // java.util.concurrent.ScheduledThreadPoolExecutor, and call
1:8032298:         // setRemoveOnCancelPolicy(true) on the executor.
1:8032298:         if (cancelCount.incrementAndGet() % 1000 == 0) {
1:8032298:             singletonTimer.purge();
1:8032298:         }
1:13673bd:     }
1:13673bd: 
1:13673bd:     // ModuleControl interface methods
1:13673bd: 
1:3fcea8a:     /**
1:3fcea8a:      * Currently does nothing, singleton Timer instance is initialized
1:3fcea8a:      * in the constructor.
1:3fcea8a:      *
1:3fcea8a:      * Implements the ModuleControl interface.
1:3fcea8a:      *
1:7f53212:      * @param create not used
1:7f53212:      * @param properties not used
1:7f53212:      * @throws StandardException not used
1:3fcea8a:      * @see ModuleControl
1:3fcea8a:      */
1:7f53212:     @Override
1:3fcea8a:     public void boot(boolean create, Properties properties)
1:3fcea8a:         throws
1:3fcea8a:             StandardException
1:3fcea8a:     {
1:3fcea8a:         // Do nothing, instance already initialized in constructor
1:c34c8e0:     }
1:3fcea8a: 
1:3fcea8a:     /**
1:3fcea8a:      * Cancels the singleton Timer instance.
1:3fcea8a:      * 
1:3fcea8a:      * Implements the ModuleControl interface.
1:3fcea8a:      *
1:3fcea8a:      * @see ModuleControl
1:3fcea8a:      */
1:7f53212:     @Override
1:3fcea8a:     public void stop()
1:3fcea8a:     {
1:3fcea8a:         singletonTimer.cancel();
1:c34c8e0:     }
1:8032298: 
1:8032298:     // Helper methods
1:8032298: 
1:493b80e:     /**
1:c0f956b:      * Check if the current context class loader could cause a memory leak
1:c0f956b:      * (DERBY-3745) if it is inherited by the timer thread, and return it if
1:c0f956b:      * that is the case.
1:493b80e:      *
1:493b80e:      * @return the context class loader of the current thread if it is
1:c0f956b:      *   not the same class loader as the one used by the system classes
1:c0f956b:      *   or the Derby classes and we have permission to read the class
1:c0f956b:      *   loaders, or {@code null} otherwise
1:493b80e:      */
1:7f53212:     private ClassLoader getContextClassLoader() {
1:8032298:         try {
1:8032298:             return AccessController.doPrivileged(
1:8032298:                     new PrivilegedAction<ClassLoader>() {
1:7f53212:                 @Override
1:8032298:                 public ClassLoader run() {
1:493b80e:                     ClassLoader cl =
1:493b80e:                         Thread.currentThread().getContextClassLoader();
1:921e39e:                     if (cl == getClass().getClassLoader() ||
1:921e39e:                         cl == Thread.class.getClassLoader()) {
1:921e39e:                         // If the context class loader is the same as any of
1:921e39e:                         // these class loaders, we are not worried that the
1:c0f956b:                         // timer thread will leak a class loader. These
1:c0f956b:                         // class loaders will stay in memory at least for the
1:c0f956b:                         // lifetime of the Derby engine anyway, so it's not
1:c0f956b:                         // a problem that the timer thread keeps a reference
1:c0f956b:                         // to any of them until the engine is shut down.
1:c0f956b:                         //
1:493b80e:                         // Return null to signal that the context class loader
1:493b80e:                         // doesn't need to be changed.
1:493b80e:                         return null;
1:493b80e:                     } else {
1:493b80e:                         return cl;
1:8032298:                     }
1:493b80e:                 }
1:8032298:             });
1:8032298:         } catch (SecurityException se) {
1:8032298:             // Ignore security exception. Versions of Derby before
1:c0f956b:             // the DERBY-3745 fix did not require getClassLoader
1:8032298:             // privileges. We may leak class loaders if we are not
1:8032298:             // able to do this, but we can't just fail.
1:c0f956b:             //
1:c0f956b:             // In most cases the above calls will succeed, even if
1:c0f956b:             // RuntimePermission("getClassLoader") has not been granted.
1:c0f956b:             // See the javadoc for Thread.getContextClassLoader() and
1:c0f956b:             // Class.getClassLoader() for details.
1:7f53212:             report(se, MessageId.CANNOT_GET_CLASSLOADER);
1:8032298:             return null;
1:8032298:         }
1:8032298:     }
1:8032298: 
1:7f53212:     private void setContextClassLoader(final ClassLoader cl) {
1:8032298:         try {
1:8032298:             AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:7f53212:                 @Override
1:8032298:                 public Void run() {
1:8032298:                     Thread.currentThread().setContextClassLoader(cl);
1:8032298:                     return null;
1:8032298:                 }
1:8032298:             });
1:8032298:         } catch (SecurityException se) {
1:8032298:             // Ignore security exception. Earlier versions of Derby, before
1:8032298:             // the DERBY-3745 fix, did not require setContextClassLoader
1:8032298:             // permissions. We may leak class loaders if we are not able to
1:8032298:             // set this, but cannot just fail.
1:7f53212:             report(se, MessageId.CANNOT_SET_CLASSLOADER);
1:8032298:         }
1:8032298:     }
1:8032298: 
1:7f53212:     private void report (SecurityException se, String id) {
1:7f53212:         warnings.append(MessageService.getTextMessage(id, se.toString()));
1:7f53212:         warnings.append('\n');
1:7f53212: 
1:7f53212:         if (SanityManager.DEBUG) {
1:7f53212:             for (StackTraceElement elt : se.getStackTrace()) {
1:7f53212:                 warnings.append(elt.toString());
1:7f53212:                 warnings.append('\n');
1:7f53212:             }
1:7f53212:             warnings.append('\n');
1:7f53212:         }
1:7f53212:     }
1:7f53212:     /**
1:7f53212:      * Return any warnings generated during the initialization of this class, or
1:7f53212:      * null if none
1:7f53212:      * @return See legend
1:7f53212:      */
1:7f53212:     public String getWarnings() {
1:7f53212:         String result = warnings.toString();
1:7f53212:         warnings = null;
1:7f53212:         return "".equals(result) ? null : result;
1:7f53212:     }
1:c34c8e0: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c0f956b
/////////////////////////////////////////////////////////////////////////
1:      * Check if the current context class loader could cause a memory leak
1:      * (DERBY-3745) if it is inherited by the timer thread, and return it if
1:      * that is the case.
1:      *   not the same class loader as the one used by the system classes
1:      *   or the Derby classes and we have permission to read the class
1:      *   loaders, or {@code null} otherwise
/////////////////////////////////////////////////////////////////////////
1:                         // timer thread will leak a class loader. These
1:                         // class loaders will stay in memory at least for the
1:                         // lifetime of the Derby engine anyway, so it's not
1:                         // a problem that the timer thread keeps a reference
1:                         // to any of them until the engine is shut down.
1:                         //
/////////////////////////////////////////////////////////////////////////
1:             // the DERBY-3745 fix did not require getClassLoader
1:             //
1:             // In most cases the above calls will succeed, even if
1:             // RuntimePermission("getClassLoader") has not been granted.
1:             // See the javadoc for Thread.getContextClassLoader() and
1:             // Class.getClassLoader() for details.
commit:8032298
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:      * The number of times {@link #cancel(TimerTask)} has been called.
1:      * Used for determining whether it's time to purge cancelled tasks from
1:      * the timer.
1:      */
1:     private final AtomicInteger cancelCount = new AtomicInteger();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:         ClassLoader savecl = getContextClassLoader();
1:         if (savecl != null) {
1:             setContextClassLoader(null);
1:         singletonTimer = new Timer(true); // Run as daemon
1: 
1:         if (savecl != null) {
1:             // Restore the original context class loader.
1:             setContextClassLoader(savecl);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:         // DERBY-6114: Cancelled tasks stay in the timer's queue until they
1:         // are scheduled to run, unless we call the purge() method. This
1:         // prevents garbage collection of the tasks. Even though the tasks
1:         // are small objects, there could be many of them, especially when
1:         // both the transaction throughput and tasks' delays are high, it
1:         // could lead to OutOfMemoryErrors. Since purge() could be a heavy
1:         // operation if the queue is big, we don't call it every time a task
1:         // is cancelled.
1:         //
1:         // When Java 7 has been made the lowest supported level, we should
1:         // consider replacing the java.util.Timer instance with a
1:         // java.util.concurrent.ScheduledThreadPoolExecutor, and call
1:         // setRemoveOnCancelPolicy(true) on the executor.
1:         if (cancelCount.incrementAndGet() % 1000 == 0) {
1:             singletonTimer.purge();
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Helper methods
1: 
0:     private static ClassLoader getContextClassLoader() {
1:         try {
1:             return AccessController.doPrivileged(
1:                     new PrivilegedAction<ClassLoader>() {
1:                 public ClassLoader run() {
0:                     return Thread.currentThread().getContextClassLoader();
1:                 }
1:             });
1:         } catch (SecurityException se) {
1:             // Ignore security exception. Versions of Derby before
0:             // the DERBY-3745 fix did not require getContextClassLoader
1:             // privileges. We may leak class loaders if we are not
1:             // able to do this, but we can't just fail.
1:             return null;
1:         }
1:     }
1: 
0:     private static void setContextClassLoader(final ClassLoader cl) {
1:         try {
1:             AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:                 public Void run() {
1:                     Thread.currentThread().setContextClassLoader(cl);
1:                     return null;
1:                 }
1:             });
1:         } catch (SecurityException se) {
1:             // Ignore security exception. Earlier versions of Derby, before
1:             // the DERBY-3745 fix, did not require setContextClassLoader
1:             // permissions. We may leak class loaders if we are not able to
1:             // set this, but cannot just fail.
1:         }
1:     }
1: 
commit:13673bd
/////////////////////////////////////////////////////////////////////////
1: import java.util.TimerTask;
/////////////////////////////////////////////////////////////////////////
0:     Timer getCancellationTimer()
1:     // TimerFactory interface methods
1: 
0:     /** {@inheritDoc} */
1:     public void schedule(TimerTask task, long delay) {
1:         singletonTimer.schedule(task, delay);
1:     }
1: 
0:     /** {@inheritDoc} */
1:     public void cancel(TimerTask task) {
1:         task.cancel();
1:     }
1: 
1:     // ModuleControl interface methods
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:921e39e
/////////////////////////////////////////////////////////////////////////
1:                     if (cl == getClass().getClassLoader() ||
1:                         cl == Thread.class.getClassLoader()) {
1:                         // If the context class loader is the same as any of
1:                         // these class loaders, we are not worried that the
0:                         // timer thread will lead a class loader. These
0:                         // class loaders will stay in memory for the
0:                         // that the timer thread keeps a reference to it.
commit:493b80e
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Get the context class loader if it's different from the system
0:      * class loader.
1:      *
1:      * @return the context class loader of the current thread if it is
0:      *   different from the system class loader and we have permission
0:      *   to read the class loader, or {@code null} otherwise
1:      */
1:                     ClassLoader cl =
1:                         Thread.currentThread().getContextClassLoader();
0:                     if (cl == ClassLoader.getSystemClassLoader()) {
0:                         // If the context class loader is the same as the
0:                         // system class loader, we are not worried that the
0:                         // timer thread will lead a class loader. (The
0:                         // system class loader will stay in memory for the
0:                         // lifetime of the JVM anyway, so it's not a problem
0:                         // that the timer thread keeps a reference to it.)
1:                         // Return null to signal that the context class loader
1:                         // doesn't need to be changed.
1:                         return null;
1:                     } else {
1:                         return cl;
1:                     }
commit:7f53212
/////////////////////////////////////////////////////////////////////////
1: import java.util.Timer;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.timer.TimerFactory;
1: import org.apache.derby.shared.common.reference.MessageId;
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:     private final Timer singletonTimer;
/////////////////////////////////////////////////////////////////////////
1:      * Initialization warnings. See {@link #getWarnings}.
1:      */
1:     private StringBuilder warnings = new StringBuilder();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * @param create not used
1:      * @param properties not used
1:      * @throws StandardException not used
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     private ClassLoader getContextClassLoader() {
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             report(se, MessageId.CANNOT_GET_CLASSLOADER);
1:     private void setContextClassLoader(final ClassLoader cl) {
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             report(se, MessageId.CANNOT_SET_CLASSLOADER);
1:     private void report (SecurityException se, String id) {
1:         warnings.append(MessageService.getTextMessage(id, se.toString()));
1:         warnings.append('\n');
1: 
1:         if (SanityManager.DEBUG) {
1:             for (StackTraceElement elt : se.getStackTrace()) {
1:                 warnings.append(elt.toString());
1:                 warnings.append('\n');
1:             }
1:             warnings.append('\n');
1:         }
1:     }
1:     /**
1:      * Return any warnings generated during the initialization of this class, or
1:      * null if none
1:      * @return See legend
1:      */
1:     public String getWarnings() {
1:         String result = warnings.toString();
1:         warnings = null;
1:         return "".equals(result) ? null : result;
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
0:             savecl = AccessController.doPrivileged(
0:             new PrivilegedAction<ClassLoader>() {
0:                 public ClassLoader run()  {
/////////////////////////////////////////////////////////////////////////
0:                 new PrivilegedAction<Object>() {
/////////////////////////////////////////////////////////////////////////
0:                 new PrivilegedAction<Object>() {
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c34c8e0
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
0:             savecl = (ClassLoader)AccessController.doPrivileged(
0:             new PrivilegedAction() {
0:                 public Object run()  {
0:                     return Thread.currentThread().getContextClassLoader();
1:                 }
0:             });
/////////////////////////////////////////////////////////////////////////
0:             try {
0:                 AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:                     public Object run()  {
0:                         Thread.currentThread().setContextClassLoader(null);
0:                         return null;
1:                     }
0:                 });
0:             } catch (SecurityException se) {
0:                 // ignore security exception.  Earlier versions of Derby, before the 
0:                 // DERBY-3745 fix did not require setContextClassloader permissions.
0:                 // We may leak class loaders if we are not able to set this, but 
0:                 // cannot just fail.
1:             }
0:             try {
0:                 final ClassLoader tmpsavecl = savecl;
0:                 AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:                     public Object run()  {
0:                         Thread.currentThread().setContextClassLoader(tmpsavecl);
0:                         return null;
1:                     }
0:                 });
0:             } catch (SecurityException se) {
0:                 // ignore security exception.  Earlier versions of Derby, before the 
0:                 // DERBY-3745 fix did not require setContextClassloader permissions.
0:                 // We may leak class loaders if we are not able to set this, but 
0:                 // cannot just fail.
1:             }
commit:3ea4878
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.PrivilegedThreadOps;
/////////////////////////////////////////////////////////////////////////
1:          // DERBY-3745 We want to avoid leaking class loaders, so 
1:          // we make sure the context class loader is null before
1:          // creating the thread
0:         ClassLoader savecl = null;
0:         boolean hasGetClassLoaderPerms = false;
0:         try {
0:             savecl = PrivilegedThreadOps.getContextClassLoader(
0:                     Thread.currentThread());
0:             hasGetClassLoaderPerms = true;
0:         } catch (SecurityException se) {
0:             // Ignore security exception. Versions of Derby before
0:             // the DERBY-3745 fix did not require getClassLoader 
0:             // privs.  We may leak class loaders if we are not
0:             // able to do this but we can't just fail.
0:         }
0:         if (hasGetClassLoaderPerms)
0:             PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
0:                     Thread.currentThread(), null);
0:         if (hasGetClassLoaderPerms)
0:             PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
0:                     Thread.currentThread(), savecl);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3fcea8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.timer.SingletonTimerFactory
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.timer;
1: 
0: import org.apache.derby.iapi.services.timer.TimerFactory;
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Timer;
1: import java.util.Properties;
1: 
1: 
1: /**
1:  * This class implements the TimerFactory interface.
1:  * It creates a singleton Timer instance.
1:  *
1:  * The class implements the ModuleControl interface,
1:  * because it needs to cancel the Timer at system shutdown.
1:  *
1:  * @see TimerFactory
1:  * @see ModuleControl
1:  */
1: public class SingletonTimerFactory
1:     implements
1:         TimerFactory,
1:         ModuleControl
1: {
1:     /**
1:      * Singleton Timer instance.
1:      */
0:     private Timer singletonTimer;
1: 
1:     /**
1:      * Initializes this TimerFactory with a singleton Timer instance.
1:      */
1:     public SingletonTimerFactory()
1:     {
1:         /**
1:          * Even though we implement the ModuleControl interface,
1:          * we initialize the object here rather than in boot, since
1:          * a) We avoid synchronizing access to singletonTimer later
1:          * b) We don't need any properties
1:          */
0:         singletonTimer = new Timer(true); // Run as daemon
0:     }
1: 
1:     /**
0:      * Returns a Timer object that can be used for adding TimerTasks
0:      * that cancel executing statements.
1:      *
0:      * Implements the TimerFactory interface.
1:      *
0:      * @return a Timer object for cancelling statements.
1:      *
1:      * @see TimerFactory
1:      */
0:     public Timer getCancellationTimer()
1:     {
0:         return singletonTimer;
0:     }
1: 
1:     /**
1:      * Currently does nothing, singleton Timer instance is initialized
1:      * in the constructor.
1:      *
1:      * Implements the ModuleControl interface.
1:      *
1:      * @see ModuleControl
1:      */
1:     public void boot(boolean create, Properties properties)
1:         throws
1:             StandardException
1:     {
1:         // Do nothing, instance already initialized in constructor
0:     }
1: 
1:     /**
1:      * Cancels the singleton Timer instance.
1:      * 
1:      * Implements the ModuleControl interface.
1:      *
1:      * @see ModuleControl
1:      */
1:     public void stop()
1:     {
1:         singletonTimer.cancel();
0:     }
0: }
============================================================================