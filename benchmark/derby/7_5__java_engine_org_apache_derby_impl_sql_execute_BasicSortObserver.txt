1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.BasicSortObserver
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.SortObserver;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.util.Vector;
1:0c5bc3a: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is the most basic sort observer.  It
1:eac0369:  * handles distinct sorts and non-distinct sorts.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class BasicSortObserver implements SortObserver
1:eac0369: {
1:eac0369: 	protected boolean 	doClone;
1:eac0369: 	protected boolean	distinct;
1:eac0369: 	private	  boolean	reuseWrappers;
1:eac0369: 	private	  ExecRow	execRow;
1:71c8e86: 	private	  Vector<DataValueDescriptor[]>	vector;
1:9d24308: 
1:eac0369: 	/**
1:eac0369: 	 * Simple constructor
1:eac0369: 	 *
1:eac0369: 	 * @param doClone If true, then rows that are retained
1:eac0369: 	 *		by the sorter will be cloned.  This is needed
1:eac0369: 	 *		if language is reusing row wrappers.
1:eac0369: 	 *
1:eac0369: 	 * @param distinct	If true, toss out duplicates.  
1:eac0369: 	 *		Otherwise, retain them.
1:eac0369: 	 *
1:eac0369: 	 * @param execRow	ExecRow to use as source of clone for store.
1:eac0369: 	 *
1:eac0369: 	 * @param reuseWrappers	Whether or not we can reuse the wrappers
1:eac0369: 	 */
1:eac0369: 	public BasicSortObserver(boolean doClone, boolean distinct, ExecRow	execRow, boolean reuseWrappers)
1:eac0369: 	{
1:eac0369: 		this.doClone = doClone;	
1:eac0369: 		this.distinct = distinct;
1:eac0369: 		this.execRow = execRow;
1:eac0369: 		this.reuseWrappers = reuseWrappers;
1:71c8e86: 		vector = new Vector<DataValueDescriptor[]>();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Called prior to inserting a distinct sort
1:eac0369: 	 * key.  
1:eac0369: 	 *
1:eac0369: 	 * @param insertRow the current row that the sorter
1:eac0369: 	 * 		is on the verge of retaining
1:eac0369: 	 *
1:eac0369: 	 * @return the row to be inserted by the sorter.  If null,
1:eac0369: 	 *		then nothing is inserted by the sorter.  Distinct
1:eac0369: 	 *		sorts will want to return null.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException never thrown
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor[] insertNonDuplicateKey(DataValueDescriptor[] insertRow)
1:92268ac: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return (doClone) ? 
1:eac0369: 					getClone(insertRow) :
1:eac0369: 					insertRow;
1:eac0369: 	}	
1:eac0369: 	/**
1:eac0369: 	 * Called prior to inserting a duplicate sort
1:eac0369: 	 * key.  
1:eac0369: 	 *
1:eac0369: 	 * @param insertRow the current row that the sorter
1:eac0369: 	 * 		is on the verge of retaining.  It is a duplicate
1:eac0369: 	 * 		of existingRow.
1:eac0369: 	 *
1:eac0369: 	 * @param existingRow the row that is already in the
1:eac0369: 	 * 		the sorter which is a duplicate of insertRow
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException never thrown
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] insertRow, DataValueDescriptor[] existingRow) 
2:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return (distinct) ?
1:eac0369: 					(DataValueDescriptor[])null :
1:eac0369: 						(doClone) ? 
1:eac0369: 							getClone(insertRow) :
1:eac0369: 							insertRow;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize)
1:eac0369: 	{
1:eac0369: 		if (reuseWrappers && vector.size() < maxFreeListSize)
1:eac0369: 		{
1:eac0369: 			vector.addElement(objectArray);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public DataValueDescriptor[] getArrayClone()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		int lastElement = vector.size();
1:eac0369: 
1:eac0369: 		if (lastElement > 0)
1:eac0369: 		{
1:71c8e86: 			DataValueDescriptor[] retval = vector.elementAt(lastElement - 1);
1:eac0369: 			vector.removeElementAt(lastElement - 1);
1:eac0369: 			return retval;
1:eac0369: 		}
1:eac0369: 		return execRow.getRowArrayClone();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	private DataValueDescriptor[] getClone(DataValueDescriptor[] origArray)
1:eac0369: 	{
1:eac0369: 		/* If the free list is not empty, then
1:eac0369: 		 * get an DataValueDescriptor[] from there and swap
1:eac0369: 		 * objects between that DataValueDescriptor[] and 
1:eac0369: 		 * origArray, returning the DataValueDescriptor[]
1:eac0369: 		 * from the free list.  That will save
1:eac0369: 		 * on unnecessary cloning.
1:eac0369: 		 */
1:eac0369: /* RESOLVE - We can't enable this code
1:eac0369:  * until Bug 2829 is fixed.
1:eac0369:  * (Close bug 2828 when enabling the code.
1:eac0369: 		if (vector.size() > 0)
1:eac0369: 		{
1:eac0369: 			DataValueDescriptor[] retval = getArrayClone();
1:eac0369: 			for (int index = 0; index < retval.length; index++)
1:eac0369: 			{
1:eac0369: 				DataValueDescriptor tmp = origArray[index];
1:eac0369: 				origArray[index] = retval[index];
1:eac0369: 				retval[index] = tmp;
1:eac0369: 			}
1:eac0369: 			return retval;
1:eac0369: 		}
1:eac0369: */
1:eac0369: 		DataValueDescriptor[] newArray = new DataValueDescriptor[origArray.length];
1:eac0369: 		for (int i = 0; i < origArray.length; i++)
1:eac0369: 		{
1:b4e2eb7:             // History: We used to materialize streams when getting a clone
1:04acfa5:             //          here (i.e. used getClone, not cloneObject). We still
1:04acfa5:             //          do, as the sorter closes the underlying source result
1:04acfa5:             //          set very early, which causes store streams to fail
1:04acfa5:             //          because the container handle is closed.
1:b4e2eb7:             // Beetle 4896.
1:04acfa5:             newArray[i] = origArray[i].cloneValue(true);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return newArray;
1:eac0369: 	}
1:0c5bc3a: 
1:0c5bc3a:     public boolean deferred() {
1:0c5bc3a:         return false;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     public boolean deferrable() {
1:0c5bc3a:         return false;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     public void rememberDuplicate(DataValueDescriptor[] row)
1:0c5bc3a:             throws StandardException {
1:0c5bc3a:         if (SanityManager.DEBUG) {
1:0c5bc3a:             SanityManager.NOTREACHED();
1:0c5bc3a:         }
1:0c5bc3a:     }
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean deferred() {
1:         return false;
1:     }
1: 
1:     public boolean deferrable() {
1:         return false;
1:     }
1: 
1:     public void rememberDuplicate(DataValueDescriptor[] row)
1:             throws StandardException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.NOTREACHED();
1:         }
1:     }
commit:e0ba78c
/////////////////////////////////////////////////////////////////////////
0: 			newArray[i] = origArray[i].getClone();
commit:9d24308
/////////////////////////////////////////////////////////////////////////
1: 
0: 			// DERBY-4413 shows that the value for a generated column will be
0: 			// null as the result set is computed as part of an INSERT INTO, so
0: 			// accept a null also.
0: 			newArray[i] =
0: 				(origArray[i] != null ? origArray[i].getClone() : null);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1: 	private	  Vector<DataValueDescriptor[]>	vector;
/////////////////////////////////////////////////////////////////////////
1: 		vector = new Vector<DataValueDescriptor[]>();
/////////////////////////////////////////////////////////////////////////
1: 			DataValueDescriptor[] retval = vector.elementAt(lastElement - 1);
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:04acfa5
/////////////////////////////////////////////////////////////////////////
1:             //          here (i.e. used getClone, not cloneObject). We still
1:             //          do, as the sorter closes the underlying source result
1:             //          set very early, which causes store streams to fail
1:             //          because the container handle is closed.
1:             newArray[i] = origArray[i].cloneValue(true);
commit:854dd10
/////////////////////////////////////////////////////////////////////////
0:             //          here (i.e. used cloneValue, not cloneObject). We still
0:             //          do.
0:             //          TODO: change to 'true' below and add comment.
0: 			newArray[i] = origArray[i].cloneValue(false);
commit:b4e2eb7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             // History: We used to materialize streams when getting a clone
0:             //          here (i.e. used getClone, not cloneObject). We still do.
1:             // Beetle 4896.
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.BasicSortObserver
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.types.CloneableObject;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import java.util.Vector;
1: 
1: /**
1:  * This is the most basic sort observer.  It
1:  * handles distinct sorts and non-distinct sorts.
1:  *
0:  * @author jamie
1:  */
1: public class BasicSortObserver implements SortObserver
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	protected boolean 	doClone;
1: 	protected boolean	distinct;
1: 	private	  boolean	reuseWrappers;
1: 	private	  ExecRow	execRow;
0: 	private	  Vector	vector;
1: 
1: 	/**
1: 	 * Simple constructor
1: 	 *
1: 	 * @param doClone If true, then rows that are retained
1: 	 *		by the sorter will be cloned.  This is needed
1: 	 *		if language is reusing row wrappers.
1: 	 *
1: 	 * @param distinct	If true, toss out duplicates.  
1: 	 *		Otherwise, retain them.
1: 	 *
1: 	 * @param execRow	ExecRow to use as source of clone for store.
1: 	 *
1: 	 * @param reuseWrappers	Whether or not we can reuse the wrappers
1: 	 */
1: 	public BasicSortObserver(boolean doClone, boolean distinct, ExecRow	execRow, boolean reuseWrappers)
1: 	{
1: 		this.doClone = doClone;	
1: 		this.distinct = distinct;
1: 		this.execRow = execRow;
1: 		this.reuseWrappers = reuseWrappers;
0: 		vector = new Vector();
1: 	}
1: 
1: 	/**
1: 	 * Called prior to inserting a distinct sort
1: 	 * key.  
1: 	 *
1: 	 * @param insertRow the current row that the sorter
1: 	 * 		is on the verge of retaining
1: 	 *
1: 	 * @return the row to be inserted by the sorter.  If null,
1: 	 *		then nothing is inserted by the sorter.  Distinct
1: 	 *		sorts will want to return null.
1: 	 *
1: 	 * @exception StandardException never thrown
1: 	 */
1: 	public DataValueDescriptor[] insertNonDuplicateKey(DataValueDescriptor[] insertRow)
1: 		throws StandardException
1: 	{
1: 		return (doClone) ? 
1: 					getClone(insertRow) :
1: 					insertRow;
1: 	}	
1: 	/**
1: 	 * Called prior to inserting a duplicate sort
1: 	 * key.  
1: 	 *
1: 	 * @param insertRow the current row that the sorter
1: 	 * 		is on the verge of retaining.  It is a duplicate
1: 	 * 		of existingRow.
1: 	 *
1: 	 * @param existingRow the row that is already in the
1: 	 * 		the sorter which is a duplicate of insertRow
1: 	 *
1: 	 * @exception StandardException never thrown
1: 	 */
1: 	public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] insertRow, DataValueDescriptor[] existingRow) 
1: 			throws StandardException
1: 	{
1: 		return (distinct) ?
1: 					(DataValueDescriptor[])null :
1: 						(doClone) ? 
1: 							getClone(insertRow) :
1: 							insertRow;
1: 
1: 	}
1: 
1: 	public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize)
1: 	{
1: 		if (reuseWrappers && vector.size() < maxFreeListSize)
1: 		{
1: 			vector.addElement(objectArray);
1: 		}
1: 	}
1: 
1: 	public DataValueDescriptor[] getArrayClone()
1: 		throws StandardException
1: 	{
1: 		int lastElement = vector.size();
1: 
1: 		if (lastElement > 0)
1: 		{
0: 			DataValueDescriptor[] retval = (DataValueDescriptor[]) vector.elementAt(lastElement - 1);
1: 			vector.removeElementAt(lastElement - 1);
1: 			return retval;
1: 		}
1: 		return execRow.getRowArrayClone();
1: 	}
1: 
1: 
1: 	private DataValueDescriptor[] getClone(DataValueDescriptor[] origArray)
1: 	{
1: 		/* If the free list is not empty, then
1: 		 * get an DataValueDescriptor[] from there and swap
1: 		 * objects between that DataValueDescriptor[] and 
1: 		 * origArray, returning the DataValueDescriptor[]
1: 		 * from the free list.  That will save
1: 		 * on unnecessary cloning.
1: 		 */
1: /* RESOLVE - We can't enable this code
1:  * until Bug 2829 is fixed.
1:  * (Close bug 2828 when enabling the code.
1: 		if (vector.size() > 0)
1: 		{
1: 			DataValueDescriptor[] retval = getArrayClone();
1: 			for (int index = 0; index < retval.length; index++)
1: 			{
1: 				DataValueDescriptor tmp = origArray[index];
1: 				origArray[index] = retval[index];
1: 				retval[index] = tmp;
1: 			}
1: 			return retval;
1: 		}
1: */
1: 		DataValueDescriptor[] newArray = new DataValueDescriptor[origArray.length];
1: 		for (int i = 0; i < origArray.length; i++)
1: 		{
0: 			// the only difference between getClone and cloneObject is cloneObject does
0: 			// not objectify a stream.  We use getClone here.  Beetle 4896.
0: 			newArray[i] = origArray[i].getClone();
1: 		}
1: 
1: 		return newArray;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.types.CloneableObject;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This is the most basic sort observer.  It
0:  * handles distinct sorts and non-distinct sorts.
0:  *
0:  * @author jamie
0:  */
0: public class BasicSortObserver implements SortObserver
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected boolean 	doClone;
0: 	protected boolean	distinct;
0: 	private	  boolean	reuseWrappers;
0: 	private	  ExecRow	execRow;
0: 	private	  Vector	vector;
0: 
0: 	/**
0: 	 * Simple constructor
0: 	 *
0: 	 * @param doClone If true, then rows that are retained
0: 	 *		by the sorter will be cloned.  This is needed
0: 	 *		if language is reusing row wrappers.
0: 	 *
0: 	 * @param distinct	If true, toss out duplicates.  
0: 	 *		Otherwise, retain them.
0: 	 *
0: 	 * @param execRow	ExecRow to use as source of clone for store.
0: 	 *
0: 	 * @param reuseWrappers	Whether or not we can reuse the wrappers
0: 	 */
0: 	public BasicSortObserver(boolean doClone, boolean distinct, ExecRow	execRow, boolean reuseWrappers)
0: 	{
0: 		this.doClone = doClone;	
0: 		this.distinct = distinct;
0: 		this.execRow = execRow;
0: 		this.reuseWrappers = reuseWrappers;
0: 		vector = new Vector();
0: 	}
0: 
0: 	/**
0: 	 * Called prior to inserting a distinct sort
0: 	 * key.  
0: 	 *
0: 	 * @param insertRow the current row that the sorter
0: 	 * 		is on the verge of retaining
0: 	 *
0: 	 * @return the row to be inserted by the sorter.  If null,
0: 	 *		then nothing is inserted by the sorter.  Distinct
0: 	 *		sorts will want to return null.
0: 	 *
0: 	 * @exception StandardException never thrown
0: 	 */
0: 	public DataValueDescriptor[] insertNonDuplicateKey(DataValueDescriptor[] insertRow)
0: 		throws StandardException
0: 	{
0: 		return (doClone) ? 
0: 					getClone(insertRow) :
0: 					insertRow;
0: 	}	
0: 	/**
0: 	 * Called prior to inserting a duplicate sort
0: 	 * key.  
0: 	 *
0: 	 * @param insertRow the current row that the sorter
0: 	 * 		is on the verge of retaining.  It is a duplicate
0: 	 * 		of existingRow.
0: 	 *
0: 	 * @param existingRow the row that is already in the
0: 	 * 		the sorter which is a duplicate of insertRow
0: 	 *
0: 	 * @exception StandardException never thrown
0: 	 */
0: 	public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] insertRow, DataValueDescriptor[] existingRow) 
0: 			throws StandardException
0: 	{
0: 		return (distinct) ?
0: 					(DataValueDescriptor[])null :
0: 						(doClone) ? 
0: 							getClone(insertRow) :
0: 							insertRow;
0: 
0: 	}
0: 
0: 	public void addToFreeList(DataValueDescriptor[] objectArray, int maxFreeListSize)
0: 	{
0: 		if (reuseWrappers && vector.size() < maxFreeListSize)
0: 		{
0: 			vector.addElement(objectArray);
0: 		}
0: 	}
0: 
0: 	public DataValueDescriptor[] getArrayClone()
0: 		throws StandardException
0: 	{
0: 		int lastElement = vector.size();
0: 
0: 		if (lastElement > 0)
0: 		{
0: 			DataValueDescriptor[] retval = (DataValueDescriptor[]) vector.elementAt(lastElement - 1);
0: 			vector.removeElementAt(lastElement - 1);
0: 			return retval;
0: 		}
0: 		return execRow.getRowArrayClone();
0: 	}
0: 
0: 
0: 	private DataValueDescriptor[] getClone(DataValueDescriptor[] origArray)
0: 	{
0: 		/* If the free list is not empty, then
0: 		 * get an DataValueDescriptor[] from there and swap
0: 		 * objects between that DataValueDescriptor[] and 
0: 		 * origArray, returning the DataValueDescriptor[]
0: 		 * from the free list.  That will save
0: 		 * on unnecessary cloning.
0: 		 */
0: /* RESOLVE - We can't enable this code
0:  * until Bug 2829 is fixed.
0:  * (Close bug 2828 when enabling the code.
0: 		if (vector.size() > 0)
0: 		{
0: 			DataValueDescriptor[] retval = getArrayClone();
0: 			for (int index = 0; index < retval.length; index++)
0: 			{
0: 				DataValueDescriptor tmp = origArray[index];
0: 				origArray[index] = retval[index];
0: 				retval[index] = tmp;
0: 			}
0: 			return retval;
0: 		}
0: */
0: 		DataValueDescriptor[] newArray = new DataValueDescriptor[origArray.length];
0: 		for (int i = 0; i < origArray.length; i++)
0: 		{
0: 			// the only difference between getClone and cloneObject is cloneObject does
0: 			// not objectify a stream.  We use getClone here.  Beetle 4896.
0: 			newArray[i] = origArray[i].getClone();
0: 		}
0: 
0: 		return newArray;
0: 	}
0: }
============================================================================