1:eac0369: /*
1:d7258ed: 
1:d7258ed:    Derby - Class org.apache.derby.impl.drda.CodePoint
1:4383496: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:4383496: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:4383496: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
1:4383496: 
4:eac0369:  */
1:eac0369: package org.apache.derby.impl.drda;
1:4383496: 
1:eac0369: // TBD:
1:db9a013: //   organize into separate kinds of code points; impose organizational scheme.
1:eac0369: // TBD:
1:db9a013: //   reconsider the various SECCHKCD_xx constants, perhaps we should hardwire.
1:4383496: 
1:eac0369: class CodePoint
3:eac0369: {
1:4f996a4:     // --------------------code points for constant ddm data----------------------
1:4383496: 
1:4f996a4:     // Indicates false state.  This 1-byte code point is used by some DDM parameters.
1:4f996a4:     static final byte FALSE = -16;  // was 0xf0
1:4383496: 
1:4f996a4:     // Indicates true state.  This 1-byte code point is used by some DDM parameters.
1:4f996a4:     static final byte TRUE = -15;  // was 0xf1
1:4383496: 
1:4f996a4:     // Zero indicator constant.
1:4f996a4:     // Indicates data does flow.
1:4f996a4:     static final int ZEROIND = 0x00;
1:4383496: 
1:4f996a4:     static final int NULLDATA = 0xFF;
1:4383496: 
1:4f996a4:     // Security check was successful.
1:4f996a4:     static final int SECCHKCD_00 = 0x00;
1:4383496: 
1:4f996a4:     // SECMEC value not supported.
1:4f996a4:     static final int SECCHKCD_01 = 0x01;
1:4383496: 
1:4f996a4:     // DCE informational status
1:4f996a4:     static final int SECCHKCD_02 = 0x02;
1:4383496: 
1:4f996a4:     // DCE retryable error.
1:4f996a4:     static final int SECCHKCD_03 = 0x03;
1:4383496: 
1:4f996a4:     // DCE non-retryable error.
1:4f996a4:     static final int SECCHKCD_04 = 0x04;
1:4383496: 
1:4f996a4:     // GSSAPI informaional status.
1:4f996a4:     static final int SECCHKCD_05 = 0x05;
1:4383496: 
1:4f996a4:     // GSSAPI retryable error.
1:4f996a4:     static final int SECCHKCD_06 = 0x06;
1:4383496: 
1:4f996a4:     // GSSAPI non-retryable error.
1:4f996a4:     static final int SECCHKCD_07 = 0x07;
1:4383496: 
1:4f996a4:     // Local security service info.
1:4f996a4:     static final int SECCHKCD_08 = 0x08;
1:4383496: 
1:4f996a4:     // Local security service retryable error.
1:4f996a4:     static final int SECCHKCD_09 = 0x09;
1:4383496: 
1:4f996a4:     // Local security service non-retryable error.
1:4f996a4:     static final int SECCHKCD_0A = 0x0A;
1:4383496: 
1:4f996a4:     // SECTKN missing or invalid.
1:4f996a4:     static final int SECCHKCD_0B = 0x0B;
1:d7258ed: 
1:4f996a4:     // Password expired.
1:4f996a4:     static final int SECCHKCD_0E = 0x0E;
1:d7258ed: 
1:4f996a4:     // Password invalid.
1:4f996a4:     static final int SECCHKCD_0F = 0x0F;
1:d7258ed: 
1:4f996a4:     // Password missing.
1:4f996a4:     static final int SECCHKCD_10 = 0x10;
34:eac0369: 
1:4f996a4:     // Userid missing.
1:4f996a4:     static final int SECCHKCD_12 = 0x12;
1:eac0369: 
1:4f996a4:     // Userid invalid.
1:4f996a4:     static final int SECCHKCD_13 = 0x13;
1:eac0369: 
1:4f996a4:     // Userid revoked.
1:4f996a4:     static final int SECCHKCD_14 = 0x14;
1:eac0369: 
1:4f996a4:     // New password invalid.
1:4f996a4:     static final int SECCHKCD_15 = 0x15;
1:eac0369: 
1:4f996a4:     // ----------------------ddm code points--------------------------------------
1:eac0369: 
1:4f996a4:     final static int EXCSAT = 0x1041;
1:4f996a4:     final static int SYNCCTL = 0x1055;
1:4f996a4:     final static int SYNCRSY = 0x1069;
1:4f996a4:     final static int ACCSEC = 0x106D;
1:4f996a4:     final static int SECCHK = 0x106E;
1:4f996a4:     final static int SYNCLOG = 0x106F;
1:4f996a4:     final static int ACCRDB = 0x2001;
1:4f996a4:     final static int BGNBND = 0x2002;
1:4f996a4:     final static int BNDSQLSTT = 0x2004;
1:4f996a4:     final static int CLSQRY = 0x2005;
1:4f996a4:     final static int CNTQRY = 0x2006;
1:4f996a4:     final static int DRPPKG = 0x2007;
1:4f996a4:     final static int DSCSQLSTT = 0x2008;
1:4f996a4:     final static int ENDBND = 0x2009;
1:4f996a4:     final static int EXCSQLIMM = 0x200A;
1:4f996a4:     final static int EXCSQLSTT = 0x200B;
1:4f996a4:     final static int EXCSQLSET = 0x2014;
1:4f996a4:     final static int OPNQRY = 0x200C;
1:4f996a4:     final static int PRPSQLSTT = 0x200D;
1:4f996a4:     final static int RDBCMM = 0x200E;
1:4f996a4:     final static int RDBRLLBCK = 0x200F;
1:4f996a4:     final static int REBIND = 0x2010;
1:4f996a4:     final static int DSCRDBTBL = 0x2012;
1:eac0369: 
1:4f996a4:     final static int SQLDTA = 0x2412;
1:4f996a4:     final static int SQLDTARD = 0x2413;
1:4f996a4:     final static int SQLSTT = 0x2414;
1:4f996a4:     final static int SQLATTR = 0x2450;
1:4f996a4:     final static int SQLSTTVRB = 0x2419;
1:4f996a4:     final static int QRYDSC = 0x241A;
1:4f996a4:     final static int QRYDTA = 0x241B;
1:4f996a4:     final static int SQLRSLRD = 0x240E;
1:4f996a4:     final static int SQLCINRD = 0x240B;
1:eac0369: 
1:4f996a4:     // Access Security Reply Data.
1:4f996a4:     // Contains the security information from a target server's
1:4f996a4:     // security manager.  This information is returned in response
1:4f996a4:     // to an ACCSEC command.
1:4f996a4:     static final int ACCSECRD = 0x14AC;
1:eac0369: 
1:4f996a4:     // Agent codepoint constant.
1:4f996a4:     static final int AGENT = 0x1403;
1:eac0369: 
1:4f996a4:     // The codepoint for codepoint
1:4f996a4:     static final int CODPNT = 0x000C;
1:eac0369: 
1:4f996a4:     // The Codepoint for data representation of dictionary codepoint
1:4f996a4:     static final int CODPNTDR = 0x0064;
1:eac0369: 
1:4f996a4:     // Subtypes for CODPNTR
1:4f996a4:     static final int CSTMBCS = 0x2435;  // Multibyte default
1:eac0369: 
1:4f996a4:     // CCSID for Double-Byte Characters codepoint constant.
1:4f996a4:     static final int CCSIDDBC = 0x119D;
1:eac0369: 
1:4f996a4:     // CCSID for Mixed-Byte Characters codepoint constant.
1:4f996a4:     static final int CCSIDMBC = 0x119E;
1:eac0369: 
1:4f996a4:     // CCSID Manager.  Min. level 4.
1:4f996a4:     // Provides character data conversion of the DDM parameters
1:4f996a4:     // containing character data.
1:4f996a4:     static final int CCSIDMGR = 0x14CC;
1:eac0369: 
1:4f996a4:     // UNICODE Manager. Min. level 0.
1:4f996a4:     // Provides character encoding of the DDM objects and parameters
1:4f996a4:     static final int UNICODEMGR = 0x1C08;
1:4f996a4:     
1:4f996a4:     // CCSID for Single-Byte Characters codepoint constant.
1:4f996a4:     static final int CCSIDSBC = 0x119C;
1:816270f: 
1:4f996a4:     // LU 6.2 Conversational Communications Manager.
1:4f996a4:     // Describes the communications manager that supports
1:4f996a4:     // conversational protocols by using System Network
1:4f996a4:     // Architecture Logical Unit 6.2 (SNA LU 6.2) local
1:4f996a4:     // communications facilities.
1:4f996a4:     static final int CMNAPPC = 0x1444;
1:eac0369: 
1:4f996a4:     // SNA LU 6.2 Sync Point Conversational Communications
1:4f996a4:     // Manager.  Min. level 4.
1:4f996a4:     // Provides an SNA LU 6.2 Conversational Communications
1:4f996a4:     // Manager with sync point support.
1:4f996a4:     static final int CMNSYNCPT = 0x147C;
1:eac0369: 
1:4f996a4:     // TCP/IP Communication Manager codepoint constant.  Min. level 5.
1:4f996a4:     static final int CMNTCPIP = 0x1474;
1:eac0369: 
1:4f996a4:     // XA Manager codepoint constant
1:4f996a4:     static final int XAMGR = 0x1C01;
1:eac0369: 
1:4f996a4:     // Correlation Token codepoint constant.
1:4f996a4:     static final int CRRTKN = 0x2135;
1:eac0369: 
1:4f996a4:     // Target Default Value Return
1:4f996a4:     static final int TRGDFTRT = 0x213B;
1:eac0369: 
1:4f996a4:     // It is a manager of a set of named descriptions of object.
1:4f996a4:     static final int DICTIONARY = 0x1458;
1:eac0369: 
1:4f996a4:     // Manager dependency error code
1:4f996a4:     static final int DEPERRCD = 0x119B;
1:eac0369: 
1:4f996a4:     // Description Error code
1:4f996a4:     static final int DSCERRCD = 0x2101;
1:eac0369: 
1:4f996a4:     // Server Attributes Reply Data codepoint constant.
1:4f996a4:     static final int EXCSATRD = 0x1443;
1:eac0369: 
1:4f996a4:     // External Name codepoint constant.
1:4f996a4:     static final int EXTNAM = 0x115E;
1:eac0369: 
1:4f996a4:     // Fixed Row Query Protocol.
1:4f996a4:     static final int FIXROWPRC = 0x2418;
1:eac0369: 
1:4f996a4:     // Force Fixed Row Query Protocol.
1:4f996a4:     static final int FRCFIXROW = 0x2410;
1:eac0369: 
1:4f996a4:     // Limited Block Query Protocol.
1:4f996a4:     static final int LMTBLKPRC = 0x2417;
1:eac0369: 
1:4f996a4:     // Manager Level List codepoint constant.
1:4f996a4:     static final int MGRLVLLS = 0x1404;
1:eac0369: 
1:4f996a4:     // Manager Level Number Attribute constants.
1:4f996a4:     // Specifies the level of a defined DDM manager.
1:4f996a4:     static final int MGRLVLN = 0x1473;
1:eac0369: 
1:4f996a4:     // Monitor Events
1:4f996a4:     static final int MONITOR = 0x1900;
1:eac0369: 
1:4f996a4:     // Monitor Reply Data
1:4f996a4:     static final int MONITORRD = 0x1C00;
1:eac0369: 
1:4f996a4:     // New Password
1:4f996a4:     static final int NEWPASSWORD = 0x11DE;
1:eac0369: 
1:4f996a4:     // Password
1:4f996a4:     static final int PASSWORD = 0x11A1;
1:eac0369: 
1:4f996a4:     // Package Default Character Subtype codepoint constant.
1:4f996a4:     static final int PKGDFTCST = 0x2125;
1:eac0369: 
1:4f996a4:     // Package Id
1:4f996a4:     static final int PKGID = 0x2109;
1:eac0369: 
1:4f996a4:     // Maximum Number of extra Blocks
1:4f996a4:     static final int MAXBLKEXT = 0x2141;
1:eac0369: 
1:4f996a4:     // Maximum result set count
1:4f996a4:     static final int MAXRSLCNT = 0x2140;
1:eac0369: 
1:4f996a4:     // Result Set Flags
1:4f996a4:     static final int RSLSETFLG = 0x2142;
1:eac0369: 
1:4f996a4:     // RDB Commit allowed
1:4f996a4:     static final int RDBCMTOK = 0x2105;
1:eac0369: 
1:4f996a4:     // Package name & consistency token
1:4f996a4:     static final int PKGNAMCT = 0x2112;
1:eac0369: 
1:4f996a4:     // list of PAKNAMCSN
1:4f996a4:     static final int PKGSNLST = 0x2139;
1:eac0369: 
1:4f996a4:     // Conversational Protocol Error Code
1:4f996a4:     static final int PRCCNVCD = 0x113F;
1:eac0369: 
1:4f996a4:     // Product Specific Identifier codepoint constant.
1:4f996a4:     static final int PRDID = 0x112E;
1:eac0369: 
1:4f996a4:     // Output override
1:4f996a4:     static final int OUTOVR = 0x2415;
1:eac0369: 
1:db9a013:     //Output override option
1:4f996a4:     static final int OUTOVROPT = 0x2147;
1:eac0369: 
1:db9a013:     // Package Consistency Token
1:4f996a4:     static final int PKGCNSTKN = 0x210D;
1:eac0369: 
1:4f996a4:     // Product Specific Data
1:4f996a4:     static final int PRDDTA = 0x2104;
1:eac0369: 
1:4f996a4:     // Query Instance Identifier
1:4f996a4:     static final int QRYINSID = 0x215B;
1:eac0369: 
1:4f996a4:     // Query Block Protocol Control
1:4f996a4:     static final int QRYBLKCTL = 0x2132;
1:eac0369: 
1:4f996a4:     // Query Block Size
1:4f996a4:     static final int QRYBLKSZ = 0x2114;
1:eac0369: 
1:4f996a4:     // Query Protocol Type
1:4f996a4:     static final int QRYPRCTYP = 0x2102;
1:eac0369: 
1:4f996a4:     // Query Close Implicit
1:4f996a4:     static final int QRYCLSIMP = 0x215D;
1:eac0369: 
1:4f996a4:     // Query Close Lock Release
1:4f996a4:     static final int QRYCLSRLS = 0x215E;
1:eac0369: 
1:4f996a4:     // QRYOPTVAL - Query Optimization Value
1:4f996a4:     static final int QRYOPTVAL = 0x215F;
1:eac0369: 
1:4f996a4:     // Cursor Allows Read and Delete Operations.
1:4f996a4:     static final int QRYDEL = 0x2;
1:eac0369: 
1:4f996a4:     // Cursor is Read-only.
1:4f996a4:     static final int QRYRDO = 0x1;
1:eac0369: 
1:4f996a4:     // Insensitive SCROLL
1:4f996a4:     static final int QRYINS = 0x1;
1:eac0369: 
1:4f996a4:     // Sensitive static
1:4f996a4:     static final int QRYSNSSTC = 0x2;
1:c247315: 
1:4f996a4:     // Number of fetch or Insert Rows
1:4f996a4:     static final int NBRROW = 0x213A;
1:eac0369: 
1:4f996a4:     // Output expected
1:4f996a4:     static final int OUTEXP = 0x2111;
1:eac0369: 
1:4f996a4:     // Procedure name
1:4f996a4:     static final int PRCNAM = 0x2138; 
1:eac0369: 
1:4f996a4:     // Query Attribute for Updatability
1:4f996a4:     static final int QRYATTUPD = 0x2150;
1:eac0369: 
1:4f996a4:     // Cursor Allows Read, Delete, and Update Operations.
1:4f996a4:     static final int QRYUPD = 0x4;
1:eac0369: 
1:4f996a4:     // Relational Database codepoint constant.  Min. level 3.
1:4f996a4:     static final int RDB = 0x240F;
1:eac0369: 
1:4f996a4:     // RDB Access Manager Class.
1:4f996a4:     static final int RDBACCCL = 0x210F;
1:eac0369: 
1:4f996a4:     // RDB Allow Updates
1:4f996a4:     static final int RDBALWUPD = 0x211A;
1:eac0369: 
1:4f996a4:     // Query Relative  Scrolling Action
1:4f996a4:     static final int QRYRELSCR = 0x213C;
1:eac0369: 
1:4f996a4:     // Query Scroll Orientation
1:4f996a4:     static final int QRYSCRORN = 0x2152;
1:eac0369: 
1:4f996a4:     // Query Row Number
1:4f996a4:     static final int QRYROWNBR = 0x213D;
1:eac0369: 
1:4f996a4:     // Query Row Sensitivity
1:4f996a4:     static final int QRYROWSNS = 0x2153;
1:eac0369: 
1:4f996a4:     // Query Refresh Answer set table 
1:4f996a4:     static final int QRYRFRTBL = 0x213E;
1:eac0369: 
1:4f996a4:     // Query Attribute for Scrollability
1:4f996a4:     static final int QRYATTSCR = 0x2149;
1:eac0369: 
1:4f996a4:     // Query Attribute for Sensitivity
1:4f996a4:     static final int QRYATTSNS = 0x2157;
1:eac0369: 
1:4f996a4:     // Query Block Reset
1:4f996a4:     static final int QRYBLKRST = 0x2154;
1:eac0369: 
1:4f996a4:     // Query Rowset Size
1:4f996a4:     static final int QRYROWSET = 0x2156;
1:eac0369: 
1:4f996a4:     // Query Returns Data
1:4f996a4:     static final int QRYRTNDTA = 0x2155;
1:eac0369: 
1:4f996a4:     // RDB interrupt token.
1:4f996a4:     static final int RDBINTTKN = 0x2103;
1:eac0369: 
1:4f996a4:     // Relational Database Name codepoint constant.
1:4f996a4:     static final int RDBNAM = 0x2110;
1:eac0369: 
1:4f996a4:     // RDB Collection Identifier
1:4f996a4:     static final int RDBCOLID = 0x2108;
1:eac0369: 
1:4f996a4:     // Resource name information
1:4f996a4:     static final int RSCNAM = 0x112D;
1:eac0369: 
1:4f996a4:     // Resource Type Information
1:4f996a4:     static final int RSCTYP = 0x111F;
1:eac0369: 
1:4f996a4:     // Reason Code Information
1:4f996a4:     static final int RSNCOD = 0x1127;
1:eac0369: 
1:4f996a4:     // Resynchronization Manager.  Min levl 5.
1:4f996a4:     // It is a manager object of DDM that performs
1:4f996a4:     // resynchronization for in-doubt units of work after
1:4f996a4:     // a sync point operation failure.
1:4f996a4:     static final int RSYNCMGR = 0x14C1;
1:eac0369: 
1:4f996a4:     // Retuan SQL Descriptor Area
1:4f996a4:     static final int RTNSQLDA = 0x2116;
1:eac0369: 
1:4f996a4:     // Type of SQL Descriptor Area
1:4f996a4:     static final int TYPSQLDA = 0x2146;
1:eac0369: 
1:4f996a4:     // Security Check Code codepoint constant.
1:4f996a4:     static final int SECCHKCD = 0x11A4;
1:eac0369: 
1:4f996a4:     // Security Mechanism codepoint constant.
1:4f996a4:     static final int SECMEC = 0x11A2;
1:eac0369: 
1:4f996a4:     // Security Manager codepoint constant.
1:4f996a4:     static final int SECMGR = 0x1440;
1:eac0369: 
1:4f996a4:     // Security Manager Name codepoint constant.
1:4f996a4:     static final int SECMGRNM = 0x1196;
1:eac0369: 
1:4f996a4:     // Security Token codepoint constant.
1:4f996a4:     static final int SECTKN = 0x11DC;
1:eac0369: 
1:4f996a4:     // Return of EXTDTA Option
1:4f996a4:     static final int RTNEXTDTA = 0x2148;
1:eac0369: 
1:4f996a4:     // Return of EXTDTA Option - Return EXTDTAs by Row
1:4f996a4:     static final int RTNEXTROW = 0x1;
1:eac0369: 
1:4f996a4:     // Return of EXTDTA Option - Return All EXTDTAs for QRYDTA's Sent
1:4f996a4:     static final int RTNEXTALL = 0x2;
1:eac0369: 
1:4f996a4:     // Supervisor name codepoint constant.
1:4f996a4:     static final int SPVNAM = 0x115D;
1:eac0369: 
1:4f996a4:     // SQL Application Manager codepoint constant.  Min. level 3.
1:4f996a4:     static final int SQLAM = 0x2407;
1:eac0369: 
1:4f996a4:     // SQL Communication Area Reply Data codepoint constant.
1:4f996a4:     static final int SQLCARD = 0x2408;
1:eac0369: 
1:4f996a4:     // Hold Cursor Position
1:4f996a4:     static final int SQLCSRHLD = 0x211F;
1:eac0369: 
1:4f996a4:     // SQLDA Reply Data codepoint constant.
1:4f996a4:     static final int SQLDARD = 0x2411;
1:eac0369: 
1:4f996a4:     // Server Class Name codepoint constant.
1:4f996a4:     static final int SRVCLSNM = 0x1147;
1:eac0369: 
1:4f996a4:     // Server Diagnostic Information codepoint constant.
1:4f996a4:     static final int SRVDGN = 0x1153;
1:eac0369: 
1:4f996a4:     // Server List codepoint constant.
1:4f996a4:     static final int SRVLST = 0x244E;
1:eac0369: 
1:4f996a4:     // Server Name codepoint constant.
1:4f996a4:     static final int SRVNAM = 0x116D;
1:eac0369: 
1:4f996a4:     // Server Product Release Level codepoint constant.
1:4f996a4:     static final int SRVRLSLV = 0x115A;
1:eac0369: 
1:4f996a4:     //Statement Decimal Delimiter
1:4f996a4:     static final int STTDECDEL = 0x2121;
1:eac0369: 
1:4f996a4:     //Statement String Delimiter
1:4f996a4:     static final int STTSTRDEL = 0x2120;
1:eac0369: 
1:4f996a4:     // Supervisor.
1:4f996a4:     // Manages a collection of managers in a consistent manner.
1:4f996a4:     static final int SUPERVISOR = 0x143C;
1:eac0369: 
1:4f996a4:     // Security Service Error Number codepoint constant.
1:4f996a4:     static final int SVCERRNO = 0x11B4;
1:eac0369: 
1:4f996a4:     // Severity Code codepoint constant.
1:4f996a4:     static final int SVRCOD = 0x1149;
1:eac0369: 
1:4f996a4:     // Sync Point Manager.  Min. level 4.
1:4f996a4:     // It is a manager object of DDM that coordinates resource
1:4f996a4:     // recovery of the units of work associated with recoverable
1:4f996a4:     // resources in multiple DDM servers.
1:4f996a4:     static final int SYNCPTMGR = 0x14C0;
1:eac0369: 
1:4f996a4:     // Syntax Error code
1:4f996a4:     static final int SYNERRCD = 0x114A;
1:eac0369: 
1:4f996a4:     // Data Type Definition Name codepoint constant.
1:4f996a4:     static final int TYPDEFNAM = 0x002F;
1:eac0369: 
1:4f996a4:     // TYPDEF Overrides codepoint constant.
1:4f996a4:     static final int TYPDEFOVR = 0x0035;
1:eac0369: 
1:4f996a4:     // Unit of Word Disposition codepoint constant.
1:4f996a4:     static final int UOWDSP = 0x2115;
1:eac0369: 
1:4f996a4:     // Usrid codepoint constant.
1:4f996a4:     static final int USRID = 0x11A0;
1:eac0369: 
1:4f996a4:     // Version name
1:4f996a4:     static final int VRSNAM = 0x1144;
1:eac0369: 
1:4f996a4:     // Rdb Package Name, Consistency Token, and Section
1:4f996a4:     // Number codepoint constant.
1:4f996a4:     static final int PKGNAMCSN = 0x2113;
1:eac0369: 
1:4f996a4:     // SQL Error Diagnostic Level
1:4f996a4:     static final int DIAGLVL = 0x2160;
1:4e091b6: 
1:4f996a4:     //-----------------------DDM reply codepoints---------------------------------
1:eac0369: 
1:4f996a4:     // Invalid description
1:4f996a4:     static final int DSCINVRM = 0x220A;
1:eac0369: 
1:4f996a4:     // Codepoint for Command Authorization for Agent Permanent Error
1:4f996a4:     static final int CMDATHRM = 0x121C;
1:eac0369: 
1:4f996a4:     // Command Check codepoint constant.
1:4f996a4:     static final int CMDCHKRM = 0x1254;
1:eac0369: 
1:4f996a4:     // Command Not Supported codepoint constant.
1:4f996a4:     static final int CMDNSPRM = 0x1250;
1:eac0369: 
1:4f996a4:     // Codepoint for Agent Permanent Error Reply message
1:4f996a4:     static final int AGNPRMRM = 0x1232;
1:eac0369: 
1:4f996a4:     static final int BGNBNDRM = 0x2208;
1:eac0369: 
1:4f996a4:     // Abnormal End of Unit of Work Condition codepoint constant.
1:4f996a4:     static final int ABNUOWRM = 0x220D;
1:eac0369: 
1:4f996a4:     // Access to RDB Completed.
1:4f996a4:     // Specifies that an instance of the SQL application manager
1:4f996a4:     // has been created and is bound to the specified RDB.
1:4f996a4:     static final int ACCRDBRM = 0x2201;
1:eac0369: 
1:4f996a4:     final static int CMDCMPRM = 0x124B;
1:eac0369: 
1:4f996a4:     final static int MGRLVLRM = 0x1210;
1:eac0369: 
1:4f996a4:     // Manager dependency Error
1:4f996a4:     static final int MGRDEPRM = 0x1218;
1:eac0369: 
1:4f996a4:     // End Unit of Work Condition codepoint constant.
1:4f996a4:     static final int ENDUOWRM = 0x220C;
1:eac0369: 
1:4f996a4:     // Object Not Supported codepoint constant.
1:4f996a4:     static final int OBJNSPRM = 0x1253;
1:eac0369: 
1:4f996a4:     // Conversational Protocol Error
1:4f996a4:     static final int PRCCNVRM = 0x1245;
1:eac0369: 
1:4f996a4:     // Parameter Not Supported codepoint constant.
1:4f996a4:     static final int PRMNSPRM = 0x1251;
1:eac0369: 
1:4f996a4:     // RDB Package Binding Process Not active Codepoint
1:4f996a4:     static final int PKGBNARM = 0x2206;
1:eac0369: 
1:4f996a4:     // RDB Package Binding Process Active codepoint constant.
1:4f996a4:     static final int PKGBPARM = 0x2209;
1:eac0369: 
1:4f996a4:     // Query not open codepoint constant.
1:4f996a4:     static final int QRYNOPRM = 0x2202;
1:eac0369: 
1:4f996a4:     // Query previously opened codepoint
1:4f996a4:     static final int QRYPOPRM = 0x220F;
1:eac0369: 
1:4f996a4:     // RDB Currently Accessed Codepoint
1:4f996a4:     static final int RDBACCRM = 0x2207;
1:eac0369: 
1:4f996a4:     // Security Check.
1:4f996a4:     // Indicates the acceptability of the security information.
1:4f996a4:     static final int SECCHKRM = 0x1219;
1:eac0369: 
1:4f996a4:     // RDB Access Failed Reply Message codepoint
1:4f996a4:     static final int RDBAFLRM = 0x221A;
1:eac0369: 
1:4f996a4:     // Not Authorized To RDB reply message codepoint
1:4f996a4:     static final int RDBATHRM = 0x22CB;
1:eac0369: 
1:4f996a4:     // RDB Not Accessed codepoint constant.
1:4f996a4:     static final int RDBNACRM = 0x2204;
1:eac0369: 
1:4f996a4:     // RDB not found codepoint
1:4f996a4:     static final int RDBNFNRM = 0x2211;
1:eac0369: 
1:4f996a4:     // RDB Update Reply Message codepoint constant.
1:4f996a4:     static final int RDBUPDRM = 0x2218;
1:eac0369: 
1:4f996a4:     // Resources Limits Reached
1:4f996a4:     static final int RSCLMTRM = 0x1233;
1:eac0369: 
1:4f996a4:     // Data Stream Syntax Error
1:4f996a4:     static final int SYNTAXRM = 0x124C;
1:eac0369: 
1:4f996a4:     // Target Not Supported
1:4f996a4:     static final int TRGNSPRM = 0x125F;
1:eac0369: 
1:4f996a4:     // Parameter Value Not Supported codepoint constant.
1:4f996a4:     static final int VALNSPRM = 0x1252;
1:eac0369: 
1:4f996a4:     // SQL Error Condition codepoint constant.
1:4f996a4:     static final int SQLERRRM = 0x2213;
1:eac0369: 
1:4f996a4:     final static int OPNQRYRM = 0x2205;
1:4f996a4:     final static int ENDQRYRM = 0x220B;
1:4f996a4:     final static int DTAMCHRM = 0x220E;
1:4f996a4:     final static int OPNQFLRM = 0x2212;
1:4f996a4:     final static int RSLSETRM = 0x2219;
1:4f996a4:     final static int CMDVLTRM = 0x221D;
1:4f996a4:     final static int CMMRQSRM = 0x2225;
1:eac0369: 
1:4f996a4:     //-----------------------ddm enumerated values-------------------------------
1:eac0369: 
1:4f996a4:     // TYPSQLDA - Standard Output SQLDA
1:4f996a4:     static final int TYPSQLDA_STD_OUTPUT = 0;
1:eac0369: 
1:4f996a4:     // TYPSQLDA - Standard Input SQLDA
1:4f996a4:     static final int TYPSQLDA_STD_INPUT = 1;
1:eac0369: 
1:4f996a4:     // TYPSQLDA - Light Output SQLDA
1:4f996a4:     static final int TYPSQLDA_LIGHT_OUTPUT = 2;
1:eac0369: 
1:4f996a4:     // TYPSQLDA - Light Input SQLDA
1:4f996a4:     static final int TYPSQLDA_LIGHT_INPUT = 3;
1:eac0369: 
1:4f996a4:     // TYPSQLDA - Extended Output SQLDA
1:4f996a4:     static final int TYPSQLDA_X_OUTPUT = 4;
1:eac0369: 
1:4f996a4:     // TYPSQLDA - Extended Input SQLDA
1:4f996a4:     static final int TYPSQLDA_X_INPUT = 5;
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:4f996a4:     // QRYCLSIMP - Target Server determines whether to implicitly
1:4f996a4:     // close the cursor or not upon SQLSTATE 02000 based on cursor type.
1:4f996a4:     static final int QRYCLSIMP_SERVER_CHOICE = 0x00;
1:4f996a4:     
1:4f996a4:     // QRYCLSIMP - Target Server must implicitly close the cursor
1:4f996a4:     // upon SQLSTATE 02000.
1:4f996a4:     static final int QRYCLSIMP_YES = 0x01;
1:4f996a4:     
1:4f996a4:     // QRYCLSIMP - Target Server must not implicitly close the cursor
1:4f996a4:     // upon SQLSTATE 02000.
1:4f996a4:     static final int QRYCLSIMP_NO = 0x02;
1:eac0369: 
1:4f996a4:     // QRYCLSRLS - Do not release read locks when the query is closed
1:4f996a4:     static final int QRYCLSRLS_NO = 0x00;
1:4f996a4:     
1:4f996a4:     // QRYCLSRLS - Release read locks when the query is closed
1:4f996a4:     static final int QRYCLSRLS_YES = 0x01;
1:eac0369: 
1:4f996a4:     // QRYBLKFCT - No 'OPTIMIZE for N ROWS' clause associated with
1:4f996a4:     // the select statement for the cursor.
1:4f996a4:     static final int QRYBLKFCT_NONE = 0x00;
1:4f996a4:     
1:4f996a4:     // QRYBLKEXA - Every query block is exactly the size specified
1:4f996a4:     // in the QRYBLKSZ parameter, except for possibly the last
1:4f996a4:     // query block which may be shorter.
1:4f996a4:     static final int QRYBLKEXA = 0x00;
1:eac0369: 
1:4f996a4:     // QRYBLKFLX - Every query block is at least the size specified
1:4f996a4:     // in the QRYBLKSZ parameter, except for possibly the last
1:4f996a4:     // query block which may be shorter.
1:4f996a4:     static final int QRYBLKFLX = 0x01;
1:4e091b6: 
1:4f996a4:     // SQL Error Diagnostic Level
1:4f996a4:     // DIAGLVL0 A null SQLDIAGGRP is returned. This is the default.
1:4f996a4:     // DIAGLVL1 A non-null SQLDIAGGRP should be returned.
1:4f996a4:     // DIAGLVL2 A non-null SQLDIAGGRP should be returned, and both SQLDCMSG
1:4f996a4:     // message text fields should be returned as null strings.
1:4f996a4:     static final byte DIAGLVL0 = (byte)0xF0;
1:4f996a4:     static final byte DIAGLVL1 = (byte)0xF1;
1:4f996a4:     static final byte DIAGLVL2 = (byte)0xF2;
1:4f996a4:     
1:4f996a4:     //----------------------------fdoca code points-------------------------------
1:eac0369: 
1:4f996a4:     // Externalized FD:OCA Data codepoint constant.
1:4f996a4:     static final int EXTDTA = 0x146C;
1:eac0369: 
1:4f996a4:     // FDOCA data descriptor
1:4f996a4:     static final int FDODSC = 0x0010;
1:eac0369: 
1:4f996a4:     // FDOCA data
1:4f996a4:     static final int FDODTA = 0x147A;
1:eac0369: 
1:4f996a4:     // FDOCA Descriptor offset
1:4f996a4:     static final int FDODSCOFF = 0x2118;
1:eac0369: 
1:4f996a4:     // FDOCA Triplet Parameter offset
1:4f996a4:     static final int FDOPRMOFF = 0x212B;
1:eac0369: 
1:4f996a4:     // FDOCA Triplet offset
1:4f996a4:     static final int FDOTRPOFF = 0x212A;
1:eac0369: 
1:c6c4d4d:     // --- Product-specific 0xC000-0xFFFF ---
1:c6c4d4d:     // Piggy-backed session data (product-specific)
1:c6c4d4d:     static final int PBSD = 0xC000;
1:c6c4d4d: 
1:c6c4d4d:     // Isolation level as a byte (product-specific)
1:c6c4d4d:     static final int PBSD_ISO = 0xC001;
1:c6c4d4d: 
1:c6c4d4d:     // Current schema as UTF8 String (product-specific)
1:c6c4d4d:     static final int PBSD_SCHEMA = 0xC002;
1:c6c4d4d: 
1:4f996a4:     //--------------------------ddm error code points---------------------------------
1:4f996a4:     static final int SYNERRCD_DSS_LESS_THAN_6 = 0x01;
1:4f996a4:     static final int SYNERRCD_DSS_LENGTH_BYTE_NUMBER_MISMATCH = 0x02;
1:4f996a4:     static final int SYNERRCD_CBYTE_NOT_D0 = 0x03;
1:4f996a4:     static final int SYNERRCD_FBYTE_NOT_SUPPORTED = 0x04;
1:4f996a4:     static final int SYNERRCD_OBJ_LEN_LESS_THAN_4 = 0x07;
1:4f996a4:     static final int SYNERRCD_TOO_BIG = 0x09;
1:4f996a4:     static final int SYNERRCD_OBJ_LEN_NOT_ALLOWED = 0x0B;
1:4f996a4:     static final int SYNERRCD_INCORRECT_EXTENDED_LEN = 0x0C;
1:4f996a4:     static final int SYNERRCD_REQ_OBJ_NOT_FOUND = 0x0E;
1:4f996a4:     static final int SYNERRCD_TOO_MANY = 0x0F;
1:4f996a4:     static final int SYNERRCD_DUP_OBJ_PRESENT = 0x12;
1:4f996a4:     static final int SYNERRCD_INVALID_CORRELATOR = 0x13;
1:4f996a4:     static final int SYNERRCD_REQ_VAL_NOT_FOUND = 0x14;
1:4f996a4:     static final int SYNERRCD_DSS_CONT_LESS_OR_EQUAL_2 = 0x16;
1:4f996a4:     static final int SYNERRCD_CHAIN_OFF_SAME_NEXT_CORRELATOR = 0x18;
1:4f996a4:     static final int SYNERRCD_CHAIN_OFF_ERROR_CONTINUE = 0x1A;
1:4f996a4:     static final int SYNERRCD_INVALID_CP_FOR_CMD = 0x1D;
1:eac0369: 
1:4f996a4:     static final int PRCCNVCD_OBJDSS_SENT_NOT_ALLOWED = 0x03;
1:4f996a4:     static final int PRCCNVCD_EXCSAT_FIRST_AFTER_CONN = 0x06;
1:4f996a4:     static final int PRCCNVCD_ACCSEC_SECCHK_WRONG_STATE = 0x11;
1:4f996a4:     static final int PRCCNVCD_RDBNAM_MISMATCH = 0x12;
1:eac0369: 
1:4f996a4:     static final int SVRCOD_INFO = 0;      // Information Only Severity Code
1:4f996a4:     static final int SVRCOD_WARNING = 4;   // Warning Severity Code
1:4f996a4:     static final int SVRCOD_ERROR = 8;     // Error Severity Code
1:4f996a4:     static final int SVRCOD_SEVERE = 16;   // Severe Error Severity Code
1:4f996a4:     static final int SVRCOD_ACCDMG = 32;   // Access Damage Severity Code
1:4f996a4:     static final int SVRCOD_PRMDMG = 64;   // Permanent Damage Severity Code
1:4f996a4:     static final int SVRCOD_SESDMG = 128;  // Session Damage Severity Code
1:4f996a4:     
1:4f996a4:     //---------------------- Security Mechanisms ---------------------------
1:db9a013:     static final int SECMEC_DCESEC = 1;     // Distributed Computing Environment Security
1:db9a013:     static final int SECMEC_USRIDPWD = 3;   // Userid and Password
1:db9a013:     static final int SECMEC_USRIDONL = 4;   // Userid only
1:4f996a4:     static final int SECMEC_USRIDNWPWD = 5;  // Userid, Password, and new Password
1:4f996a4:     static final int SECMEC_USRSBSPWD = 6;  // Userid with substitute password
1:4f996a4:     static final int SECMEC_USRENCPWD = 7;  // Userid with encrypted password
1:7233e33:     static final int SECMEC_USRSSBPWD = 8;  // Userid with Strong password substitute
1:4f996a4:     static final int SECMEC_EUSRIDPWD = 9;  // Encrpyted userid and password
1:4f996a4:     static final int SECMEC_EUSRIDNWPWD = 10;  // Encrpyted userid and password
1:eac0369: 
1:4f996a4:     //---------------------Security Check Codes ---------------------------
1:db9a013:     static final int SECCHKCD_OK = 0;       // Security info correct and acceptable
1:db9a013:     static final int SECCHKCD_NOTSUPPORTED = 0x01;  // SECMEC value not supported
1:db9a013:     static final int SECCHKCD_SECTKNMISSING_OR_INVALID = 0x0E;  // SECTKN missing or invalid
1:db9a013:     static final int SECCHKCD_PASSWORDMISSING = 0x10;   // Password missing
1:db9a013:     static final int SECCHKCD_USERIDMISSING = 0x12; // User Id missing
1:db9a013:     static final int SECCHKCD_USERIDINVALID = 0x13; // Userid invalid
1:eac0369: 
1:4f996a4:     //----------------------Type Definition Names we care about -----------
1:4f996a4:     static final String TYPDEFNAM_QTDSQLASC = "QTDSQLASC"; // ASCII
1:4f996a4:     static final String TYPDEFNAM_QTDSQLJVM = "QTDSQLJVM"; // Java platform
1:4f996a4:     static final String TYPDEFNAM_QTDSQLX86 = "QTDSQLX86"; //  Intel X86 platform
1:eac0369: 
1:4f996a4:     //----------------------Max sizes for strings in the protocol ---------
1:813aa38:     //dbname 
1:813aa38:     // fixed length for SQLAM level 6, 
1:813aa38:     // for level 7, limit is MAX_NAME(255) but Derby 10.11 allows 1024
1:4f996a4:     static final int MAX_NAME = 255;
1:813aa38:     static final int RDBNAM_MAX_NAME = 1024;
1:813aa38:     static final int RDBNAM_LEN = 18; 
1:813aa38:                                       
1:4f996a4:     static final int PRDID_MAX = 8;
1:4f996a4:     static final int RDBCOLID_LEN = 18;
1:4f996a4:     static final int PKGID_LEN = 18;
1:4f996a4:     static final int PKGCNSTKN_LEN = 8;
1:4f996a4:     static final int PKGNAMCSN_LEN = RDBNAM_LEN + RDBCOLID_LEN + PKGID_LEN +
1:4f996a4:         PKGCNSTKN_LEN + 2;
1:eac0369: 
1:4f996a4:     //---------------------QRYBLSZ min and maximum
1:4f996a4:     static final int QRYBLKSZ_MIN = 512;
1:4f996a4:     static final int QRYBLKSZ_MAX = 10*1024*1024;
1:4f996a4:     static final int QRYROWSET_MAX = 32767;
1:4f996a4:     static final int QRYROWSET_DEFAULT = -1;
1:eac0369: 
1:4f996a4:     //--------------------Defaults for QRYBLKCTL and MAXBLKEXT
1:4f996a4:     static final int QRYBLKCTL_DEFAULT = LMTBLKPRC;
1:4f996a4:     static final int MAXBLKEXT_NONE = 0;
1:4f996a4:     static final int MAXBLKEXT_DEFAULT = MAXBLKEXT_NONE;
1:eac0369: 
1:4f996a4:     //-------------- QRYSCRORN - query scroll orientation values
1:db9a013:     static final int QRYSCRREL = 1;     // relative fetch
1:db9a013:     static final int QRYSCRABS = 2;     // absolute fetch
1:db9a013:     static final int QRYSCRAFT = 3;     // after last row
1:db9a013:     static final int QRYSCRBEF = 4;     // before first row
1:eac0369: 
1:4f996a4:     //---------------OUTOVROPT - output override option values
1:4f996a4:     static final int OUTOVRFRS = 1;     // Output Override allowed on first CNTQRY
1:4f996a4:     static final int OUTOVRANY = 2;     // Output Override allowed on any CNTQRY
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:4f996a4:     //--------------------------XA code points---------------------------
1:4f996a4:     
1:4f996a4:     
1:4f996a4:     // Release conversation
1:4f996a4:     public static final int RLSCONV = 0x119F;
1:4383496: 
1:4f996a4:     // SYNC Point Control Reply
1:4f996a4:     public static final int SYNCCRD = 0x1248;
1:4f996a4:     
1:4f996a4:     // XA Return Value
1:4f996a4:     public static final int XARETVAL = 0x1904;
1:4f996a4:     
1:4f996a4:     // XA Timeout Value;
1:4f996a4:     public static final int TIMEOUT = 0x1907;
1:4383496: 
1:4f996a4:     // new unit of work for XA
1:4f996a4:     public static final int SYNCTYPE_NEW_UOW = 0x09;
1:4f996a4:     
1:4f996a4:     // End unit of work (Sync type).
1:4f996a4:     public static final int SYNCTYPE_END_UOW = 0x0B;
1:4f996a4:     
1:4f996a4:     // Prepare to commit (Sync type).
1:4f996a4:     public static final int SYNCTYPE_PREPARE = 0x01;
1:4f996a4:     
1:4f996a4:     // migrate to resync server sync type
1:4f996a4:     public static final int SYNCTYPE_MIGRATE = 0x02;
1:4f996a4:     
1:4f996a4:     // commit sync type
1:4f996a4:     public static final int SYNCTYPE_COMMITTED = 0x03;
1:4f996a4:     
1:4f996a4:     // request to commit sync type
1:4f996a4:     public static final int SYNCTYPE_REQ_COMMIT = 0x05;
1:4383496: 
1:4f996a4:     // request to forget sync type
1:4f996a4:     public static final int SYNCTYPE_REQ_FORGET = 0x06;
1:4f996a4:     
1:4f996a4:     //rollback sync type
1:4f996a4:     public static final int SYNCTYPE_ROLLBACK = 0x04;
1:4f996a4:     
1:4f996a4:     // Request Sync log information (Sync type).
1:4f996a4:     static final int SYNCTYPE_REQ_LOG = 0x08;
1:4383496: 
1:4f996a4:     // migrated unit of work sync type
1:4f996a4:     public static final int SYNCTYPE_MIGRATED = 0x0A;
1:4f996a4:     
1:4f996a4:     //recover sync type
1:4f996a4:     public static final int SYNCTYPE_INDOUBT = 0x0C;
1:4f996a4: 
1:4383496:     
1:4f996a4:     // Forget unit of work.
1:4f996a4:     public static final int FORGET = 0x1186;
1:4f996a4:     
1:4f996a4:     // SYNC Type Codepoint
1:4f996a4:     public static final int SYNCTYPE = 0x1187;
1:4f996a4:     
1:4f996a4:     // XId Codepoint
1:4f996a4:     public static final int XID = 0x1801;
1:4f996a4:     
1:4f996a4:     // XA Flag Codepoint
1:4f996a4:     public static final int XAFLAGS = 0x1903;
1:4f996a4:     
1:4f996a4:     // Resync Type
1:4f996a4:     public static final int RSYNCTYP = 0x11EA;
1:4f996a4:     
1:4f996a4:     // Sync Resync Reply
1:4f996a4:     public static final int SYNCRRD = 0x126D;
1:4f996a4:     
1:4f996a4:     // XA Flags
1:4f996a4:     public static final int TMNOFLAGS = 0x00000000;
1:4f996a4:     
1:4383496: 
1:4f996a4:     // Prepared and hueristic complete list
1:4f996a4:     static final int PRPHRCLST = 0x1905;
1:4f996a4:     
1:4f996a4:     // XID count
1:4f996a4:     static final int XIDCNT = 0x1906;
1:4f996a4:     
1:4f996a4:     
1:4f996a4:     //-----------------------Manager code points --------------------------
1:4383496: 
1:4f996a4:     protected static int [] MGR_CODEPOINTS = {
1:4f996a4:                                             AGENT,
1:db9a013:                                             CCSIDMGR,
1:4f996a4:                                             CMNAPPC, 
1:db9a013:                                             CMNSYNCPT,
1:db9a013:                                             CMNTCPIP,
1:4f996a4:                                             DICTIONARY,
1:4f996a4:                                             RDB,
1:db9a013:                                             RSYNCMGR,
1:db9a013:                                             SECMGR,
1:4f996a4:                                             SQLAM,
1:db9a013:                                             SUPERVISOR,
1:4f996a4:                                             SYNCPTMGR,
1:4f996a4:                                             UNICODEMGR,
1:4f996a4:                                             XAMGR
1:4f996a4:                                             };
1:4f996a4:     protected static final int UNKNOWN_MANAGER = -1;
1:4383496: 
1:4f996a4:     // hide the default constructor
1:4f996a4:     private CodePoint () {}
1:4383496: 
1:4f996a4:     /**
1:4f996a4:      * Given a manager codepoint find it's location in the managers array
1:4f996a4:      *
1:4f996a4:      * @return index into manager array or UNKNOWN_MANAGER if not found
1:4f996a4:      */
1:4f996a4:     protected static int getManagerIndex(int manager)
1:4f996a4:     {
1:4f996a4:         for (int i = 0; i < MGR_CODEPOINTS.length; i++)
1:4f996a4:             if (MGR_CODEPOINTS[i] == manager)
1:4f996a4:                 return i;
1:4f996a4:         return UNKNOWN_MANAGER;
1:4f996a4:     }
1:4f996a4:     /**
1:4f996a4:      * Check if a manager codepoint is a known manager
1:4f996a4:      * 
1:4f996a4:      * @return true if known, false otherwise
1:4f996a4:      */
1:4f996a4:     protected static boolean isKnownManager(int manager)
1:4f996a4:     {
1:4f996a4:         for (int i = 0; i < CodePoint.MGR_CODEPOINTS.length; i++)
1:4f996a4:             if (manager == CodePoint.MGR_CODEPOINTS[i])
1:4f996a4:                 return true;
1:4f996a4:         return false;
1:4f996a4:     }
3:eac0369: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:813aa38
/////////////////////////////////////////////////////////////////////////
1:     //dbname 
1:     // fixed length for SQLAM level 6, 
1:     // for level 7, limit is MAX_NAME(255) but Derby 10.11 allows 1024
1:     static final int RDBNAM_MAX_NAME = 1024;
1:     static final int RDBNAM_LEN = 18; 
1:                                       
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1: //   organize into separate kinds of code points; impose organizational scheme.
1: //   reconsider the various SECCHKCD_xx constants, perhaps we should hardwire.
/////////////////////////////////////////////////////////////////////////
1:     //Output override option
1:     // Package Consistency Token
/////////////////////////////////////////////////////////////////////////
1:     static final int SECMEC_DCESEC = 1;     // Distributed Computing Environment Security
1:     static final int SECMEC_USRIDPWD = 3;   // Userid and Password
1:     static final int SECMEC_USRIDONL = 4;   // Userid only
/////////////////////////////////////////////////////////////////////////
1:     static final int SECCHKCD_OK = 0;       // Security info correct and acceptable
1:     static final int SECCHKCD_NOTSUPPORTED = 0x01;  // SECMEC value not supported
1:     static final int SECCHKCD_SECTKNMISSING_OR_INVALID = 0x0E;  // SECTKN missing or invalid
1:     static final int SECCHKCD_PASSWORDMISSING = 0x10;   // Password missing
1:     static final int SECCHKCD_USERIDMISSING = 0x12; // User Id missing
1:     static final int SECCHKCD_USERIDINVALID = 0x13; // Userid invalid
/////////////////////////////////////////////////////////////////////////
1:     static final int QRYSCRREL = 1;     // relative fetch
1:     static final int QRYSCRABS = 2;     // absolute fetch
1:     static final int QRYSCRAFT = 3;     // after last row
1:     static final int QRYSCRBEF = 4;     // before first row
/////////////////////////////////////////////////////////////////////////
1:                                             CCSIDMGR,
1:                                             CMNSYNCPT,
1:                                             CMNTCPIP,
1:                                             RSYNCMGR,
1:                                             SECMGR,
1:                                             SUPERVISOR,
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
0: //     organize into separate kinds of code points; impose organizational scheme.
0: //     reconsider the various SECCHKCD_xx constants, perhaps we should hardwire.
1:     // --------------------code points for constant ddm data----------------------
1:     // Indicates false state.  This 1-byte code point is used by some DDM parameters.
1:     static final byte FALSE = -16;  // was 0xf0
1:     // Indicates true state.  This 1-byte code point is used by some DDM parameters.
1:     static final byte TRUE = -15;  // was 0xf1
1:     // Zero indicator constant.
1:     // Indicates data does flow.
1:     static final int ZEROIND = 0x00;
1:     static final int NULLDATA = 0xFF;
1:     // Security check was successful.
1:     static final int SECCHKCD_00 = 0x00;
1:     // SECMEC value not supported.
1:     static final int SECCHKCD_01 = 0x01;
1:     // DCE informational status
1:     static final int SECCHKCD_02 = 0x02;
1:     // DCE retryable error.
1:     static final int SECCHKCD_03 = 0x03;
1:     // DCE non-retryable error.
1:     static final int SECCHKCD_04 = 0x04;
1:     // GSSAPI informaional status.
1:     static final int SECCHKCD_05 = 0x05;
1:     // GSSAPI retryable error.
1:     static final int SECCHKCD_06 = 0x06;
1:     // GSSAPI non-retryable error.
1:     static final int SECCHKCD_07 = 0x07;
1:     // Local security service info.
1:     static final int SECCHKCD_08 = 0x08;
1:     // Local security service retryable error.
1:     static final int SECCHKCD_09 = 0x09;
1:     // Local security service non-retryable error.
1:     static final int SECCHKCD_0A = 0x0A;
1:     // SECTKN missing or invalid.
1:     static final int SECCHKCD_0B = 0x0B;
1:     // Password expired.
1:     static final int SECCHKCD_0E = 0x0E;
1:     // Password invalid.
1:     static final int SECCHKCD_0F = 0x0F;
1:     // Password missing.
1:     static final int SECCHKCD_10 = 0x10;
1:     // Userid missing.
1:     static final int SECCHKCD_12 = 0x12;
1:     // Userid invalid.
1:     static final int SECCHKCD_13 = 0x13;
1:     // Userid revoked.
1:     static final int SECCHKCD_14 = 0x14;
1:     // New password invalid.
1:     static final int SECCHKCD_15 = 0x15;
1:     // ----------------------ddm code points--------------------------------------
1:     final static int EXCSAT = 0x1041;
1:     final static int SYNCCTL = 0x1055;
1:     final static int SYNCRSY = 0x1069;
1:     final static int ACCSEC = 0x106D;
1:     final static int SECCHK = 0x106E;
1:     final static int SYNCLOG = 0x106F;
1:     final static int ACCRDB = 0x2001;
1:     final static int BGNBND = 0x2002;
1:     final static int BNDSQLSTT = 0x2004;
1:     final static int CLSQRY = 0x2005;
1:     final static int CNTQRY = 0x2006;
1:     final static int DRPPKG = 0x2007;
1:     final static int DSCSQLSTT = 0x2008;
1:     final static int ENDBND = 0x2009;
1:     final static int EXCSQLIMM = 0x200A;
1:     final static int EXCSQLSTT = 0x200B;
1:     final static int EXCSQLSET = 0x2014;
1:     final static int OPNQRY = 0x200C;
1:     final static int PRPSQLSTT = 0x200D;
1:     final static int RDBCMM = 0x200E;
1:     final static int RDBRLLBCK = 0x200F;
1:     final static int REBIND = 0x2010;
1:     final static int DSCRDBTBL = 0x2012;
1:     final static int SQLDTA = 0x2412;
1:     final static int SQLDTARD = 0x2413;
1:     final static int SQLSTT = 0x2414;
1:     final static int SQLATTR = 0x2450;
1:     final static int SQLSTTVRB = 0x2419;
1:     final static int QRYDSC = 0x241A;
1:     final static int QRYDTA = 0x241B;
1:     final static int SQLRSLRD = 0x240E;
1:     final static int SQLCINRD = 0x240B;
1:     // Access Security Reply Data.
1:     // Contains the security information from a target server's
1:     // security manager.  This information is returned in response
1:     // to an ACCSEC command.
1:     static final int ACCSECRD = 0x14AC;
1:     // Agent codepoint constant.
1:     static final int AGENT = 0x1403;
1:     // The codepoint for codepoint
1:     static final int CODPNT = 0x000C;
1:     // The Codepoint for data representation of dictionary codepoint
1:     static final int CODPNTDR = 0x0064;
1:     // Subtypes for CODPNTR
1:     static final int CSTMBCS = 0x2435;  // Multibyte default
1:     // CCSID for Double-Byte Characters codepoint constant.
1:     static final int CCSIDDBC = 0x119D;
1:     // CCSID for Mixed-Byte Characters codepoint constant.
1:     static final int CCSIDMBC = 0x119E;
1:     // CCSID Manager.  Min. level 4.
1:     // Provides character data conversion of the DDM parameters
1:     // containing character data.
1:     static final int CCSIDMGR = 0x14CC;
1:     // UNICODE Manager. Min. level 0.
1:     // Provides character encoding of the DDM objects and parameters
1:     static final int UNICODEMGR = 0x1C08;
1:     
1:     // CCSID for Single-Byte Characters codepoint constant.
1:     static final int CCSIDSBC = 0x119C;
1:     // LU 6.2 Conversational Communications Manager.
1:     // Describes the communications manager that supports
1:     // conversational protocols by using System Network
1:     // Architecture Logical Unit 6.2 (SNA LU 6.2) local
1:     // communications facilities.
1:     static final int CMNAPPC = 0x1444;
1:     // SNA LU 6.2 Sync Point Conversational Communications
1:     // Manager.  Min. level 4.
1:     // Provides an SNA LU 6.2 Conversational Communications
1:     // Manager with sync point support.
1:     static final int CMNSYNCPT = 0x147C;
1:     // TCP/IP Communication Manager codepoint constant.  Min. level 5.
1:     static final int CMNTCPIP = 0x1474;
1:     // XA Manager codepoint constant
1:     static final int XAMGR = 0x1C01;
1:     // Correlation Token codepoint constant.
1:     static final int CRRTKN = 0x2135;
1:     // Target Default Value Return
1:     static final int TRGDFTRT = 0x213B;
1:     // It is a manager of a set of named descriptions of object.
1:     static final int DICTIONARY = 0x1458;
1:     // Manager dependency error code
1:     static final int DEPERRCD = 0x119B;
1:     // Description Error code
1:     static final int DSCERRCD = 0x2101;
1:     // Server Attributes Reply Data codepoint constant.
1:     static final int EXCSATRD = 0x1443;
1:     // External Name codepoint constant.
1:     static final int EXTNAM = 0x115E;
1:     // Fixed Row Query Protocol.
1:     static final int FIXROWPRC = 0x2418;
1:     // Force Fixed Row Query Protocol.
1:     static final int FRCFIXROW = 0x2410;
1:     // Limited Block Query Protocol.
1:     static final int LMTBLKPRC = 0x2417;
1:     // Manager Level List codepoint constant.
1:     static final int MGRLVLLS = 0x1404;
1:     // Manager Level Number Attribute constants.
1:     // Specifies the level of a defined DDM manager.
1:     static final int MGRLVLN = 0x1473;
1:     // Monitor Events
1:     static final int MONITOR = 0x1900;
1:     // Monitor Reply Data
1:     static final int MONITORRD = 0x1C00;
1:     // New Password
1:     static final int NEWPASSWORD = 0x11DE;
1:     // Password
1:     static final int PASSWORD = 0x11A1;
1:     // Package Default Character Subtype codepoint constant.
1:     static final int PKGDFTCST = 0x2125;
1:     // Package Id
1:     static final int PKGID = 0x2109;
1:     // Maximum Number of extra Blocks
1:     static final int MAXBLKEXT = 0x2141;
1:     // Maximum result set count
1:     static final int MAXRSLCNT = 0x2140;
1:     // Result Set Flags
1:     static final int RSLSETFLG = 0x2142;
1:     // RDB Commit allowed
1:     static final int RDBCMTOK = 0x2105;
1:     // Package name & consistency token
1:     static final int PKGNAMCT = 0x2112;
1:     // list of PAKNAMCSN
1:     static final int PKGSNLST = 0x2139;
1:     // Conversational Protocol Error Code
1:     static final int PRCCNVCD = 0x113F;
1:     // Product Specific Identifier codepoint constant.
1:     static final int PRDID = 0x112E;
1:     // Output override
1:     static final int OUTOVR = 0x2415;
0:       //Output override option
1:     static final int OUTOVROPT = 0x2147;
0:       // Package Consistency Token
1:     static final int PKGCNSTKN = 0x210D;
1:     // Product Specific Data
1:     static final int PRDDTA = 0x2104;
1:     // Query Instance Identifier
1:     static final int QRYINSID = 0x215B;
1:     // Query Block Protocol Control
1:     static final int QRYBLKCTL = 0x2132;
1:     // Query Block Size
1:     static final int QRYBLKSZ = 0x2114;
1:     // Query Protocol Type
1:     static final int QRYPRCTYP = 0x2102;
1:     // Query Close Implicit
1:     static final int QRYCLSIMP = 0x215D;
1:     // Query Close Lock Release
1:     static final int QRYCLSRLS = 0x215E;
1:     // QRYOPTVAL - Query Optimization Value
1:     static final int QRYOPTVAL = 0x215F;
1:     // Cursor Allows Read and Delete Operations.
1:     static final int QRYDEL = 0x2;
1:     // Cursor is Read-only.
1:     static final int QRYRDO = 0x1;
1:     // Insensitive SCROLL
1:     static final int QRYINS = 0x1;
1:     // Sensitive static
1:     static final int QRYSNSSTC = 0x2;
1:     // Number of fetch or Insert Rows
1:     static final int NBRROW = 0x213A;
1:     // Output expected
1:     static final int OUTEXP = 0x2111;
1:     // Procedure name
1:     static final int PRCNAM = 0x2138; 
1:     // Query Attribute for Updatability
1:     static final int QRYATTUPD = 0x2150;
1:     // Cursor Allows Read, Delete, and Update Operations.
1:     static final int QRYUPD = 0x4;
1:     // Relational Database codepoint constant.  Min. level 3.
1:     static final int RDB = 0x240F;
1:     // RDB Access Manager Class.
1:     static final int RDBACCCL = 0x210F;
1:     // RDB Allow Updates
1:     static final int RDBALWUPD = 0x211A;
1:     // Query Relative  Scrolling Action
1:     static final int QRYRELSCR = 0x213C;
1:     // Query Scroll Orientation
1:     static final int QRYSCRORN = 0x2152;
1:     // Query Row Number
1:     static final int QRYROWNBR = 0x213D;
1:     // Query Row Sensitivity
1:     static final int QRYROWSNS = 0x2153;
1:     // Query Refresh Answer set table 
1:     static final int QRYRFRTBL = 0x213E;
1:     // Query Attribute for Scrollability
1:     static final int QRYATTSCR = 0x2149;
1:     // Query Attribute for Sensitivity
1:     static final int QRYATTSNS = 0x2157;
1:     // Query Block Reset
1:     static final int QRYBLKRST = 0x2154;
1:     // Query Rowset Size
1:     static final int QRYROWSET = 0x2156;
1:     // Query Returns Data
1:     static final int QRYRTNDTA = 0x2155;
1:     // RDB interrupt token.
1:     static final int RDBINTTKN = 0x2103;
1:     // Relational Database Name codepoint constant.
1:     static final int RDBNAM = 0x2110;
1:     // RDB Collection Identifier
1:     static final int RDBCOLID = 0x2108;
1:     // Resource name information
1:     static final int RSCNAM = 0x112D;
1:     // Resource Type Information
1:     static final int RSCTYP = 0x111F;
1:     // Reason Code Information
1:     static final int RSNCOD = 0x1127;
1:     // Resynchronization Manager.  Min levl 5.
1:     // It is a manager object of DDM that performs
1:     // resynchronization for in-doubt units of work after
1:     // a sync point operation failure.
1:     static final int RSYNCMGR = 0x14C1;
1:     // Retuan SQL Descriptor Area
1:     static final int RTNSQLDA = 0x2116;
1:     // Type of SQL Descriptor Area
1:     static final int TYPSQLDA = 0x2146;
1:     // Security Check Code codepoint constant.
1:     static final int SECCHKCD = 0x11A4;
1:     // Security Mechanism codepoint constant.
1:     static final int SECMEC = 0x11A2;
1:     // Security Manager codepoint constant.
1:     static final int SECMGR = 0x1440;
1:     // Security Manager Name codepoint constant.
1:     static final int SECMGRNM = 0x1196;
1:     // Security Token codepoint constant.
1:     static final int SECTKN = 0x11DC;
1:     // Return of EXTDTA Option
1:     static final int RTNEXTDTA = 0x2148;
1:     // Return of EXTDTA Option - Return EXTDTAs by Row
1:     static final int RTNEXTROW = 0x1;
1:     // Return of EXTDTA Option - Return All EXTDTAs for QRYDTA's Sent
1:     static final int RTNEXTALL = 0x2;
1:     // Supervisor name codepoint constant.
1:     static final int SPVNAM = 0x115D;
1:     // SQL Application Manager codepoint constant.  Min. level 3.
1:     static final int SQLAM = 0x2407;
1:     // SQL Communication Area Reply Data codepoint constant.
1:     static final int SQLCARD = 0x2408;
1:     // Hold Cursor Position
1:     static final int SQLCSRHLD = 0x211F;
1:     // SQLDA Reply Data codepoint constant.
1:     static final int SQLDARD = 0x2411;
1:     // Server Class Name codepoint constant.
1:     static final int SRVCLSNM = 0x1147;
1:     // Server Diagnostic Information codepoint constant.
1:     static final int SRVDGN = 0x1153;
1:     // Server List codepoint constant.
1:     static final int SRVLST = 0x244E;
1:     // Server Name codepoint constant.
1:     static final int SRVNAM = 0x116D;
1:     // Server Product Release Level codepoint constant.
1:     static final int SRVRLSLV = 0x115A;
1:     //Statement Decimal Delimiter
1:     static final int STTDECDEL = 0x2121;
1:     //Statement String Delimiter
1:     static final int STTSTRDEL = 0x2120;
1:     // Supervisor.
1:     // Manages a collection of managers in a consistent manner.
1:     static final int SUPERVISOR = 0x143C;
1:     // Security Service Error Number codepoint constant.
1:     static final int SVCERRNO = 0x11B4;
1:     // Severity Code codepoint constant.
1:     static final int SVRCOD = 0x1149;
1:     // Sync Point Manager.  Min. level 4.
1:     // It is a manager object of DDM that coordinates resource
1:     // recovery of the units of work associated with recoverable
1:     // resources in multiple DDM servers.
1:     static final int SYNCPTMGR = 0x14C0;
1:     // Syntax Error code
1:     static final int SYNERRCD = 0x114A;
1:     // Data Type Definition Name codepoint constant.
1:     static final int TYPDEFNAM = 0x002F;
1:     // TYPDEF Overrides codepoint constant.
1:     static final int TYPDEFOVR = 0x0035;
1:     // Unit of Word Disposition codepoint constant.
1:     static final int UOWDSP = 0x2115;
1:     // Usrid codepoint constant.
1:     static final int USRID = 0x11A0;
1:     // Version name
1:     static final int VRSNAM = 0x1144;
1:     // Rdb Package Name, Consistency Token, and Section
1:     // Number codepoint constant.
1:     static final int PKGNAMCSN = 0x2113;
1:     // SQL Error Diagnostic Level
1:     static final int DIAGLVL = 0x2160;
1:     //-----------------------DDM reply codepoints---------------------------------
1:     // Invalid description
1:     static final int DSCINVRM = 0x220A;
1:     // Codepoint for Command Authorization for Agent Permanent Error
1:     static final int CMDATHRM = 0x121C;
1:     // Command Check codepoint constant.
1:     static final int CMDCHKRM = 0x1254;
1:     // Command Not Supported codepoint constant.
1:     static final int CMDNSPRM = 0x1250;
1:     // Codepoint for Agent Permanent Error Reply message
1:     static final int AGNPRMRM = 0x1232;
1:     static final int BGNBNDRM = 0x2208;
1:     // Abnormal End of Unit of Work Condition codepoint constant.
1:     static final int ABNUOWRM = 0x220D;
1:     // Access to RDB Completed.
1:     // Specifies that an instance of the SQL application manager
1:     // has been created and is bound to the specified RDB.
1:     static final int ACCRDBRM = 0x2201;
1:     final static int CMDCMPRM = 0x124B;
1:     final static int MGRLVLRM = 0x1210;
1:     // Manager dependency Error
1:     static final int MGRDEPRM = 0x1218;
1:     // End Unit of Work Condition codepoint constant.
1:     static final int ENDUOWRM = 0x220C;
1:     // Object Not Supported codepoint constant.
1:     static final int OBJNSPRM = 0x1253;
1:     // Conversational Protocol Error
1:     static final int PRCCNVRM = 0x1245;
1:     // Parameter Not Supported codepoint constant.
1:     static final int PRMNSPRM = 0x1251;
1:     // RDB Package Binding Process Not active Codepoint
1:     static final int PKGBNARM = 0x2206;
1:     // RDB Package Binding Process Active codepoint constant.
1:     static final int PKGBPARM = 0x2209;
1:     // Query not open codepoint constant.
1:     static final int QRYNOPRM = 0x2202;
1:     // Query previously opened codepoint
1:     static final int QRYPOPRM = 0x220F;
1:     // RDB Currently Accessed Codepoint
1:     static final int RDBACCRM = 0x2207;
1:     // Security Check.
1:     // Indicates the acceptability of the security information.
1:     static final int SECCHKRM = 0x1219;
1:     // RDB Access Failed Reply Message codepoint
1:     static final int RDBAFLRM = 0x221A;
1:     // Not Authorized To RDB reply message codepoint
1:     static final int RDBATHRM = 0x22CB;
1:     // RDB Not Accessed codepoint constant.
1:     static final int RDBNACRM = 0x2204;
1:     // RDB not found codepoint
1:     static final int RDBNFNRM = 0x2211;
1:     // RDB Update Reply Message codepoint constant.
1:     static final int RDBUPDRM = 0x2218;
1:     // Resources Limits Reached
1:     static final int RSCLMTRM = 0x1233;
1:     // Data Stream Syntax Error
1:     static final int SYNTAXRM = 0x124C;
1:     // Target Not Supported
1:     static final int TRGNSPRM = 0x125F;
1:     // Parameter Value Not Supported codepoint constant.
1:     static final int VALNSPRM = 0x1252;
1:     // SQL Error Condition codepoint constant.
1:     static final int SQLERRRM = 0x2213;
1:     final static int OPNQRYRM = 0x2205;
1:     final static int ENDQRYRM = 0x220B;
1:     final static int DTAMCHRM = 0x220E;
1:     final static int OPNQFLRM = 0x2212;
1:     final static int RSLSETRM = 0x2219;
1:     final static int CMDVLTRM = 0x221D;
1:     final static int CMMRQSRM = 0x2225;
1:     //-----------------------ddm enumerated values-------------------------------
1:     // TYPSQLDA - Standard Output SQLDA
1:     static final int TYPSQLDA_STD_OUTPUT = 0;
1:     // TYPSQLDA - Standard Input SQLDA
1:     static final int TYPSQLDA_STD_INPUT = 1;
1:     // TYPSQLDA - Light Output SQLDA
1:     static final int TYPSQLDA_LIGHT_OUTPUT = 2;
1:     // TYPSQLDA - Light Input SQLDA
1:     static final int TYPSQLDA_LIGHT_INPUT = 3;
1:     // TYPSQLDA - Extended Output SQLDA
1:     static final int TYPSQLDA_X_OUTPUT = 4;
1:     // TYPSQLDA - Extended Input SQLDA
1:     static final int TYPSQLDA_X_INPUT = 5;
1:     // QRYCLSIMP - Target Server determines whether to implicitly
1:     // close the cursor or not upon SQLSTATE 02000 based on cursor type.
1:     static final int QRYCLSIMP_SERVER_CHOICE = 0x00;
1:     
1:     // QRYCLSIMP - Target Server must implicitly close the cursor
1:     // upon SQLSTATE 02000.
1:     static final int QRYCLSIMP_YES = 0x01;
1:     
1:     // QRYCLSIMP - Target Server must not implicitly close the cursor
1:     // upon SQLSTATE 02000.
1:     static final int QRYCLSIMP_NO = 0x02;
1:     // QRYCLSRLS - Do not release read locks when the query is closed
1:     static final int QRYCLSRLS_NO = 0x00;
1:     
1:     // QRYCLSRLS - Release read locks when the query is closed
1:     static final int QRYCLSRLS_YES = 0x01;
1:     // QRYBLKFCT - No 'OPTIMIZE for N ROWS' clause associated with
1:     // the select statement for the cursor.
1:     static final int QRYBLKFCT_NONE = 0x00;
1:     
1:     // QRYBLKEXA - Every query block is exactly the size specified
1:     // in the QRYBLKSZ parameter, except for possibly the last
1:     // query block which may be shorter.
1:     static final int QRYBLKEXA = 0x00;
1:     // QRYBLKFLX - Every query block is at least the size specified
1:     // in the QRYBLKSZ parameter, except for possibly the last
1:     // query block which may be shorter.
1:     static final int QRYBLKFLX = 0x01;
1:     // SQL Error Diagnostic Level
1:     // DIAGLVL0 A null SQLDIAGGRP is returned. This is the default.
1:     // DIAGLVL1 A non-null SQLDIAGGRP should be returned.
1:     // DIAGLVL2 A non-null SQLDIAGGRP should be returned, and both SQLDCMSG
1:     // message text fields should be returned as null strings.
1:     static final byte DIAGLVL0 = (byte)0xF0;
1:     static final byte DIAGLVL1 = (byte)0xF1;
1:     static final byte DIAGLVL2 = (byte)0xF2;
1:     
1:     //----------------------------fdoca code points-------------------------------
1:     // Externalized FD:OCA Data codepoint constant.
1:     static final int EXTDTA = 0x146C;
1:     // FDOCA data descriptor
1:     static final int FDODSC = 0x0010;
1:     // FDOCA data
1:     static final int FDODTA = 0x147A;
1:     // FDOCA Descriptor offset
1:     static final int FDODSCOFF = 0x2118;
1:     // FDOCA Triplet Parameter offset
1:     static final int FDOPRMOFF = 0x212B;
1:     // FDOCA Triplet offset
1:     static final int FDOTRPOFF = 0x212A;
/////////////////////////////////////////////////////////////////////////
1:     //--------------------------ddm error code points---------------------------------
1:     static final int SYNERRCD_DSS_LESS_THAN_6 = 0x01;
1:     static final int SYNERRCD_DSS_LENGTH_BYTE_NUMBER_MISMATCH = 0x02;
1:     static final int SYNERRCD_CBYTE_NOT_D0 = 0x03;
1:     static final int SYNERRCD_FBYTE_NOT_SUPPORTED = 0x04;
1:     static final int SYNERRCD_OBJ_LEN_LESS_THAN_4 = 0x07;
1:     static final int SYNERRCD_TOO_BIG = 0x09;
1:     static final int SYNERRCD_OBJ_LEN_NOT_ALLOWED = 0x0B;
1:     static final int SYNERRCD_INCORRECT_EXTENDED_LEN = 0x0C;
1:     static final int SYNERRCD_REQ_OBJ_NOT_FOUND = 0x0E;
1:     static final int SYNERRCD_TOO_MANY = 0x0F;
1:     static final int SYNERRCD_DUP_OBJ_PRESENT = 0x12;
1:     static final int SYNERRCD_INVALID_CORRELATOR = 0x13;
1:     static final int SYNERRCD_REQ_VAL_NOT_FOUND = 0x14;
1:     static final int SYNERRCD_DSS_CONT_LESS_OR_EQUAL_2 = 0x16;
1:     static final int SYNERRCD_CHAIN_OFF_SAME_NEXT_CORRELATOR = 0x18;
1:     static final int SYNERRCD_CHAIN_OFF_ERROR_CONTINUE = 0x1A;
1:     static final int SYNERRCD_INVALID_CP_FOR_CMD = 0x1D;
1:     static final int PRCCNVCD_OBJDSS_SENT_NOT_ALLOWED = 0x03;
1:     static final int PRCCNVCD_EXCSAT_FIRST_AFTER_CONN = 0x06;
1:     static final int PRCCNVCD_ACCSEC_SECCHK_WRONG_STATE = 0x11;
1:     static final int PRCCNVCD_RDBNAM_MISMATCH = 0x12;
1:     static final int SVRCOD_INFO = 0;      // Information Only Severity Code
1:     static final int SVRCOD_WARNING = 4;   // Warning Severity Code
1:     static final int SVRCOD_ERROR = 8;     // Error Severity Code
1:     static final int SVRCOD_SEVERE = 16;   // Severe Error Severity Code
1:     static final int SVRCOD_ACCDMG = 32;   // Access Damage Severity Code
1:     static final int SVRCOD_PRMDMG = 64;   // Permanent Damage Severity Code
1:     static final int SVRCOD_SESDMG = 128;  // Session Damage Severity Code
1:     
1:     //---------------------- Security Mechanisms ---------------------------
0:     static final int SECMEC_DCESEC = 1;        // Distributed Computing Environment Security
0:     static final int SECMEC_USRIDPWD = 3;    // Userid and Password
0:     static final int SECMEC_USRIDONL = 4;    // Userid only
1:     static final int SECMEC_USRIDNWPWD = 5;  // Userid, Password, and new Password
1:     static final int SECMEC_USRSBSPWD = 6;  // Userid with substitute password
1:     static final int SECMEC_USRENCPWD = 7;  // Userid with encrypted password
1:     static final int SECMEC_EUSRIDPWD = 9;  // Encrpyted userid and password
1:     static final int SECMEC_EUSRIDNWPWD = 10;  // Encrpyted userid and password
1:     //---------------------Security Check Codes ---------------------------
0:     static final int SECCHKCD_OK = 0;        // Security info correct and acceptable
0:     static final int SECCHKCD_NOTSUPPORTED = 0x01;    // SECMEC value not supported
0:     static final int SECCHKCD_SECTKNMISSING_OR_INVALID = 0x0E;    // SECTKN missing or invalid 
0:     static final int SECCHKCD_PASSWORDMISSING = 0x10;    // Password missing  
0:     static final int SECCHKCD_USERIDMISSING = 0x12;    // User Id missing  
0:     static final int SECCHKCD_USERIDINVALID = 0x13;    // Userid invalid
1:     //----------------------Type Definition Names we care about -----------
1:     static final String TYPDEFNAM_QTDSQLASC = "QTDSQLASC"; // ASCII
1:     static final String TYPDEFNAM_QTDSQLJVM = "QTDSQLJVM"; // Java platform
1:     static final String TYPDEFNAM_QTDSQLX86 = "QTDSQLX86"; //  Intel X86 platform
1:     //----------------------Max sizes for strings in the protocol ---------
1:     static final int MAX_NAME = 255;
0:     static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,
0:                                       //limit is MAX_NAME (255)
1:     static final int PRDID_MAX = 8;
1:     static final int RDBCOLID_LEN = 18;
1:     static final int PKGID_LEN = 18;
1:     static final int PKGCNSTKN_LEN = 8;
1:     static final int PKGNAMCSN_LEN = RDBNAM_LEN + RDBCOLID_LEN + PKGID_LEN +
1:         PKGCNSTKN_LEN + 2;
1:     //---------------------QRYBLSZ min and maximum
1:     static final int QRYBLKSZ_MIN = 512;
1:     static final int QRYBLKSZ_MAX = 10*1024*1024;
1:     static final int QRYROWSET_MAX = 32767;
1:     static final int QRYROWSET_DEFAULT = -1;
1:     //--------------------Defaults for QRYBLKCTL and MAXBLKEXT
1:     static final int QRYBLKCTL_DEFAULT = LMTBLKPRC;
1:     static final int MAXBLKEXT_NONE = 0;
1:     static final int MAXBLKEXT_DEFAULT = MAXBLKEXT_NONE;
1:     //-------------- QRYSCRORN - query scroll orientation values
0:     static final int QRYSCRREL = 1;        // relative fetch
0:     static final int QRYSCRABS = 2;        // absolute fetch
0:     static final int QRYSCRAFT = 3;        // after last row
0:     static final int QRYSCRBEF = 4;        // before first row
1:     //---------------OUTOVROPT - output override option values
1:     static final int OUTOVRFRS = 1;     // Output Override allowed on first CNTQRY
1:     static final int OUTOVRANY = 2;     // Output Override allowed on any CNTQRY
1:     //--------------------------XA code points---------------------------
1:     
1:     
1:     // Release conversation
1:     public static final int RLSCONV = 0x119F;
1:     // SYNC Point Control Reply
1:     public static final int SYNCCRD = 0x1248;
1:     
1:     // XA Return Value
1:     public static final int XARETVAL = 0x1904;
1:     
1:     // XA Timeout Value;
1:     public static final int TIMEOUT = 0x1907;
1:     // new unit of work for XA
1:     public static final int SYNCTYPE_NEW_UOW = 0x09;
1:     
1:     // End unit of work (Sync type).
1:     public static final int SYNCTYPE_END_UOW = 0x0B;
1:     
1:     // Prepare to commit (Sync type).
1:     public static final int SYNCTYPE_PREPARE = 0x01;
1:     
1:     // migrate to resync server sync type
1:     public static final int SYNCTYPE_MIGRATE = 0x02;
1:     
1:     // commit sync type
1:     public static final int SYNCTYPE_COMMITTED = 0x03;
1:     
1:     // request to commit sync type
1:     public static final int SYNCTYPE_REQ_COMMIT = 0x05;
1:     // request to forget sync type
1:     public static final int SYNCTYPE_REQ_FORGET = 0x06;
1:     
1:     //rollback sync type
1:     public static final int SYNCTYPE_ROLLBACK = 0x04;
1:     
1:     // Request Sync log information (Sync type).
1:     static final int SYNCTYPE_REQ_LOG = 0x08;
1:     // migrated unit of work sync type
1:     public static final int SYNCTYPE_MIGRATED = 0x0A;
1:     
1:     //recover sync type
1:     public static final int SYNCTYPE_INDOUBT = 0x0C;
1:     
1:     // Forget unit of work.
1:     public static final int FORGET = 0x1186;
1:     
1:     // SYNC Type Codepoint
1:     public static final int SYNCTYPE = 0x1187;
1:     
1:     // XId Codepoint
1:     public static final int XID = 0x1801;
1:     
1:     // XA Flag Codepoint
1:     public static final int XAFLAGS = 0x1903;
1:     
1:     // Resync Type
1:     public static final int RSYNCTYP = 0x11EA;
1:     
1:     // Sync Resync Reply
1:     public static final int SYNCRRD = 0x126D;
1:     
1:     // XA Flags
1:     public static final int TMNOFLAGS = 0x00000000;
1:     
1:     // Prepared and hueristic complete list
1:     static final int PRPHRCLST = 0x1905;
1:     
1:     // XID count
1:     static final int XIDCNT = 0x1906;
1:     
1:     
1:     //-----------------------Manager code points --------------------------
1:     protected static int [] MGR_CODEPOINTS = {
1:                                             AGENT,
0:                                             CCSIDMGR,    
1:                                             CMNAPPC, 
0:                                             CMNSYNCPT,    
0:                                             CMNTCPIP,    
1:                                             DICTIONARY,
1:                                             RDB,
0:                                             RSYNCMGR,    
0:                                             SECMGR,    
1:                                             SQLAM,
0:                                             SUPERVISOR,    
1:                                             SYNCPTMGR,
1:                                             UNICODEMGR,
1:                                             XAMGR
1:                                             };
1:     protected static final int UNKNOWN_MANAGER = -1;
1:     // hide the default constructor
1:     private CodePoint () {}
1:     /**
1:      * Given a manager codepoint find it's location in the managers array
1:      *
1:      * @return index into manager array or UNKNOWN_MANAGER if not found
1:      */
1:     protected static int getManagerIndex(int manager)
1:     {
1:         for (int i = 0; i < MGR_CODEPOINTS.length; i++)
1:             if (MGR_CODEPOINTS[i] == manager)
1:                 return i;
1:         return UNKNOWN_MANAGER;
1:     }
1:     /**
1:      * Check if a manager codepoint is a known manager
1:      * 
1:      * @return true if known, false otherwise
1:      */
1:     protected static boolean isKnownManager(int manager)
1:     {
1:         for (int i = 0; i < CodePoint.MGR_CODEPOINTS.length; i++)
1:             if (manager == CodePoint.MGR_CODEPOINTS[i])
1:                 return true;
1:         return false;
1:     }
commit:9ce79e7
/////////////////////////////////////////////////////////////////////////
commit:673d33b
/////////////////////////////////////////////////////////////////////////
0: 	static final int SECCHKCD_SECTKNMISSING_OR_INVALID = 0x0E;	// SECTKN missing or invalid 
commit:4383496
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0: 	//--------------------------XA code points---------------------------
1: 	
1: 	
0: 	// Release conversation
0: 	public static final int RLSCONV = 0x119F;
1: 
0: 	// SYNC Point Control Reply
0: 	public static final int SYNCCRD = 0x1248;
1: 	
0: 	// XA Return Value
0: 	public static final int XARETVAL = 0x1904;
1: 	
0: 	// XA Timeout Value;
0: 	public static final int TIMEOUT = 0x1907;
1: 
0: 	// new unit of work for XA
0: 	public static final int SYNCTYPE_NEW_UOW = 0x09;
1: 	
0: 	// End unit of work (Sync type).
0: 	public static final int SYNCTYPE_END_UOW = 0x0B;
1: 	
0: 	// Prepare to commit (Sync type).
0: 	public static final int SYNCTYPE_PREPARE = 0x01;
1: 	
0: 	// migrate to resync server sync type
0: 	public static final int SYNCTYPE_MIGRATE = 0x02;
1: 	
0: 	// commit sync type
0: 	public static final int SYNCTYPE_COMMITTED = 0x03;
1: 	
0: 	// request to commit sync type
0: 	public static final int SYNCTYPE_REQ_COMMIT = 0x05;
1: 
0: 	// request to forget sync type
0: 	public static final int SYNCTYPE_REQ_FORGET = 0x06;
1: 	
0: 	//rollback sync type
0: 	public static final int SYNCTYPE_ROLLBACK = 0x04;
1: 	
0: 	// Request Sync log information (Sync type).
0: 	static final int SYNCTYPE_REQ_LOG = 0x08;
1: 
0: 	// migrated unit of work sync type
0: 	public static final int SYNCTYPE_MIGRATED = 0x0A;
1: 	
0: 	//recover sync type
0: 	public static final int SYNCTYPE_INDOUBT = 0x0C;
1: 
1: 	
0: 	// Forget unit of work.
0: 	public static final int FORGET = 0x1186;
1: 	
0: 	// SYNC Type Codepoint
0: 	public static final int SYNCTYPE = 0x1187;
1: 	
0: 	// XId Codepoint
0: 	public static final int XID = 0x1801;
1: 	
0: 	// XA Flag Codepoint
0: 	public static final int XAFLAGS = 0x1903;
1: 	
0: 	// Resync Type
0: 	public static final int RSYNCTYP = 0x11EA;
1: 	
0: 	// Sync Resync Reply
0: 	public static final int SYNCRRD = 0x126D;
1: 	
0: 	// XA Flags
0: 	public static final int TMNOFLAGS = 0x00000000;
1: 	
1: 
0: 	// Prepared and hueristic complete list
0: 	static final int PRPHRCLST = 0x1905;
1: 	
0: 	// XID count
0: 	static final int XIDCNT = 0x1906;
1: 	
1: 	
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:816270f
/////////////////////////////////////////////////////////////////////////
0: 	// UNICODE Manager. Min. level 0.
0: 	// Provides character encoding of the DDM objects and parameters
0: 	static final int UNICODEMGR = 0x1C08;
1: 	
/////////////////////////////////////////////////////////////////////////
0: 											UNICODEMGR,
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:c6c4d4d
/////////////////////////////////////////////////////////////////////////
1:     // --- Product-specific 0xC000-0xFFFF ---
1:     // Piggy-backed session data (product-specific)
1:     static final int PBSD = 0xC000;
1: 
1:     // Isolation level as a byte (product-specific)
1:     static final int PBSD_ISO = 0xC001;
1: 
1:     // Current schema as UTF8 String (product-specific)
1:     static final int PBSD_SCHEMA = 0xC002;
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7233e33
/////////////////////////////////////////////////////////////////////////
1:     static final int SECMEC_USRSSBPWD = 8;  // Userid with Strong password substitute
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:e75a0b9
/////////////////////////////////////////////////////////////////////////
0: 	static final int QRYBLKSZ_MAX = 10*1024*1024;
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:4e091b6
/////////////////////////////////////////////////////////////////////////
0: 	// SQL Error Diagnostic Level
0: 	static final int DIAGLVL = 0x2160;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0: 	// SQL Error Diagnostic Level
0: 	// DIAGLVL0 A null SQLDIAGGRP is returned. This is the default.
0: 	// DIAGLVL1 A non-null SQLDIAGGRP should be returned.
0: 	// DIAGLVL2 A non-null SQLDIAGGRP should be returned, and both SQLDCMSG
0: 	// message text fields should be returned as null strings.
0: 	static final byte DIAGLVL0 = (byte)0xF0;
0: 	static final byte DIAGLVL1 = (byte)0xF1;
0: 	static final byte DIAGLVL2 = (byte)0xF2;
commit:c247315
/////////////////////////////////////////////////////////////////////////
0: 	// Sensitive static
0: 	static final int QRYSNSSTC = 0x2;
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.drda.CodePoint
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: package org.apache.derby.impl.drda;
1: 
1: // TBD:
0: //	 organize into separate kinds of code points; impose organizational scheme.
1: // TBD:
0: //	 reconsider the various SECCHKCD_xx constants, perhaps we should hardwire.
1: 
1: class CodePoint
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	// --------------------code points for constant ddm data----------------------
1: 
0: 	// Indicates false state.  This 1-byte code point is used by some DDM parameters.
0: 	static final byte FALSE = -16;  // was 0xf0
1: 
0: 	// Indicates true state.  This 1-byte code point is used by some DDM parameters.
0: 	static final byte TRUE = -15;  // was 0xf1
1: 
0: 	// Zero indicator constant.
0: 	// Indicates data does flow.
0: 	static final int ZEROIND = 0x00;
1: 
0: 	static final int NULLDATA = 0xFF;
1: 
0: 	// Security check was successful.
0: 	static final int SECCHKCD_00 = 0x00;
1: 
0: 	// SECMEC value not supported.
0: 	static final int SECCHKCD_01 = 0x01;
1: 
0: 	// DCE informational status
0: 	static final int SECCHKCD_02 = 0x02;
1: 
0: 	// DCE retryable error.
0: 	static final int SECCHKCD_03 = 0x03;
1: 
0: 	// DCE non-retryable error.
0: 	static final int SECCHKCD_04 = 0x04;
1: 
0: 	// GSSAPI informaional status.
0: 	static final int SECCHKCD_05 = 0x05;
1: 
0: 	// GSSAPI retryable error.
0: 	static final int SECCHKCD_06 = 0x06;
1: 
0: 	// GSSAPI non-retryable error.
0: 	static final int SECCHKCD_07 = 0x07;
1: 
0: 	// Local security service info.
0: 	static final int SECCHKCD_08 = 0x08;
1: 
0: 	// Local security service retryable error.
0: 	static final int SECCHKCD_09 = 0x09;
1: 
0: 	// Local security service non-retryable error.
0: 	static final int SECCHKCD_0A = 0x0A;
1: 
0: 	// SECTKN missing or invalid.
0: 	static final int SECCHKCD_0B = 0x0B;
1: 
0: 	// Password expired.
0: 	static final int SECCHKCD_0E = 0x0E;
1: 
0: 	// Password invalid.
0: 	static final int SECCHKCD_0F = 0x0F;
1: 
0: 	// Password missing.
0: 	static final int SECCHKCD_10 = 0x10;
1: 
0: 	// Userid missing.
0: 	static final int SECCHKCD_12 = 0x12;
1: 
0: 	// Userid invalid.
0: 	static final int SECCHKCD_13 = 0x13;
1: 
0: 	// Userid revoked.
0: 	static final int SECCHKCD_14 = 0x14;
1: 
0: 	// New password invalid.
0: 	static final int SECCHKCD_15 = 0x15;
1: 
0: 	// ----------------------ddm code points--------------------------------------
1: 
0: 	final static int EXCSAT = 0x1041;
0: 	final static int SYNCCTL = 0x1055;
0: 	final static int SYNCRSY = 0x1069;
0: 	final static int ACCSEC = 0x106D;
0: 	final static int SECCHK = 0x106E;
0: 	final static int SYNCLOG = 0x106F;
0: 	final static int ACCRDB = 0x2001;
0: 	final static int BGNBND = 0x2002;
0: 	final static int BNDSQLSTT = 0x2004;
0: 	final static int CLSQRY = 0x2005;
0: 	final static int CNTQRY = 0x2006;
0: 	final static int DRPPKG = 0x2007;
0: 	final static int DSCSQLSTT = 0x2008;
0: 	final static int ENDBND = 0x2009;
0: 	final static int EXCSQLIMM = 0x200A;
0: 	final static int EXCSQLSTT = 0x200B;
0: 	final static int EXCSQLSET = 0x2014;
0: 	final static int OPNQRY = 0x200C;
0: 	final static int PRPSQLSTT = 0x200D;
0: 	final static int RDBCMM = 0x200E;
0: 	final static int RDBRLLBCK = 0x200F;
0: 	final static int REBIND = 0x2010;
0: 	final static int DSCRDBTBL = 0x2012;
1: 
0: 	final static int SQLDTA = 0x2412;
0: 	final static int SQLDTARD = 0x2413;
0: 	final static int SQLSTT = 0x2414;
0: 	final static int SQLATTR = 0x2450;
0: 	final static int SQLSTTVRB = 0x2419;
0: 	final static int QRYDSC = 0x241A;
0: 	final static int QRYDTA = 0x241B;
0: 	final static int SQLRSLRD = 0x240E;
0: 	final static int SQLCINRD = 0x240B;
1: 
0: 	// Access Security Reply Data.
0: 	// Contains the security information from a target server's
0: 	// security manager.  This information is returned in response
0: 	// to an ACCSEC command.
0: 	static final int ACCSECRD = 0x14AC;
1: 
0: 	// Agent codepoint constant.
0: 	static final int AGENT = 0x1403;
1: 
0: 	// The codepoint for codepoint
0: 	static final int CODPNT = 0x000C;
1: 
0: 	// The Codepoint for data representation of dictionary codepoint
0: 	static final int CODPNTDR = 0x0064;
1: 
0: 	// Subtypes for CODPNTR
0: 	static final int CSTMBCS = 0x2435;  // Multibyte default
1: 
0: 	// CCSID for Double-Byte Characters codepoint constant.
0: 	static final int CCSIDDBC = 0x119D;
1: 
0: 	// CCSID for Mixed-Byte Characters codepoint constant.
0: 	static final int CCSIDMBC = 0x119E;
1: 
0: 	// CCSID Manager.  Min. level 4.
0: 	// Provides character data conversion of the DDM parameters
0: 	// containing character data.
0: 	static final int CCSIDMGR = 0x14CC;
1: 
0: 	// CCSID for Single-Byte Characters codepoint constant.
0: 	static final int CCSIDSBC = 0x119C;
1: 
0: 	// LU 6.2 Conversational Communications Manager.
0: 	// Describes the communications manager that supports
0: 	// conversational protocols by using System Network
0: 	// Architecture Logical Unit 6.2 (SNA LU 6.2) local
0: 	// communications facilities.
0: 	static final int CMNAPPC = 0x1444;
1: 
0: 	// SNA LU 6.2 Sync Point Conversational Communications
0: 	// Manager.  Min. level 4.
0: 	// Provides an SNA LU 6.2 Conversational Communications
0: 	// Manager with sync point support.
0: 	static final int CMNSYNCPT = 0x147C;
1: 
0: 	// TCP/IP Communication Manager codepoint constant.  Min. level 5.
0: 	static final int CMNTCPIP = 0x1474;
1: 
0: 	// XA Manager codepoint constant
0: 	static final int XAMGR = 0x1C01;
1: 
0: 	// Correlation Token codepoint constant.
0: 	static final int CRRTKN = 0x2135;
1: 
0: 	// Target Default Value Return
0: 	static final int TRGDFTRT = 0x213B;
1: 
0: 	// It is a manager of a set of named descriptions of object.
0: 	static final int DICTIONARY = 0x1458;
1: 
0: 	// Manager dependency error code
0: 	static final int DEPERRCD = 0x119B;
1: 
0: 	// Description Error code
0: 	static final int DSCERRCD = 0x2101;
1: 
0: 	// Server Attributes Reply Data codepoint constant.
0: 	static final int EXCSATRD = 0x1443;
1: 
0: 	// External Name codepoint constant.
0: 	static final int EXTNAM = 0x115E;
1: 
0: 	// Fixed Row Query Protocol.
0: 	static final int FIXROWPRC = 0x2418;
1: 
0: 	// Force Fixed Row Query Protocol.
0: 	static final int FRCFIXROW = 0x2410;
1: 
0: 	// Limited Block Query Protocol.
0: 	static final int LMTBLKPRC = 0x2417;
1: 
0: 	// Manager Level List codepoint constant.
0: 	static final int MGRLVLLS = 0x1404;
1: 
0: 	// Manager Level Number Attribute constants.
0: 	// Specifies the level of a defined DDM manager.
0: 	static final int MGRLVLN = 0x1473;
1: 
0: 	// Monitor Events
0: 	static final int MONITOR = 0x1900;
1: 
0: 	// Monitor Reply Data
0: 	static final int MONITORRD = 0x1C00;
1: 
0: 	// New Password
0: 	static final int NEWPASSWORD = 0x11DE;
1: 
0: 	// Password
0: 	static final int PASSWORD = 0x11A1;
1: 
0: 	// Package Default Character Subtype codepoint constant.
0: 	static final int PKGDFTCST = 0x2125;
1: 
0: 	// Package Id
0: 	static final int PKGID = 0x2109;
1: 
0: 	// Maximum Number of extra Blocks
0: 	static final int MAXBLKEXT = 0x2141;
1: 
0: 	// Maximum result set count
0: 	static final int MAXRSLCNT = 0x2140;
1: 
0: 	// Result Set Flags
0: 	static final int RSLSETFLG = 0x2142;
1: 
0: 	// RDB Commit allowed
0: 	static final int RDBCMTOK = 0x2105;
1: 
0: 	// Package name & consistency token
0: 	static final int PKGNAMCT = 0x2112;
1: 
0: 	// list of PAKNAMCSN
0: 	static final int PKGSNLST = 0x2139;
1: 
0: 	// Conversational Protocol Error Code
0: 	static final int PRCCNVCD = 0x113F;
1: 
0: 	// Product Specific Identifier codepoint constant.
0: 	static final int PRDID = 0x112E;
1: 
0: 	// Output override
0: 	static final int OUTOVR = 0x2415;
1: 
0:   	//Output override option
0: 	static final int OUTOVROPT = 0x2147;
1: 
0:   	// Package Consistency Token
0: 	static final int PKGCNSTKN = 0x210D;
1: 
0: 	// Product Specific Data
0: 	static final int PRDDTA = 0x2104;
1: 
0: 	// Query Instance Identifier
0: 	static final int QRYINSID = 0x215B;
1: 
0: 	// Query Block Protocol Control
0: 	static final int QRYBLKCTL = 0x2132;
1: 
0: 	// Query Block Size
0: 	static final int QRYBLKSZ = 0x2114;
1: 
0: 	// Query Protocol Type
0: 	static final int QRYPRCTYP = 0x2102;
1: 
0: 	// Query Close Implicit
0: 	static final int QRYCLSIMP = 0x215D;
1: 
0: 	// Query Close Lock Release
0: 	static final int QRYCLSRLS = 0x215E;
1: 
0: 	// QRYOPTVAL - Query Optimization Value
0: 	static final int QRYOPTVAL = 0x215F;
1: 
0: 	// Cursor Allows Read and Delete Operations.
0: 	static final int QRYDEL = 0x2;
1: 
0: 	// Cursor is Read-only.
0: 	static final int QRYRDO = 0x1;
1: 
0: 	// Insensitive SCROLL
0: 	static final int QRYINS = 0x1;
1: 
0: 	// Number of fetch or Insert Rows
0: 	static final int NBRROW = 0x213A;
1: 
0: 	// Output expected
0: 	static final int OUTEXP = 0x2111;
1: 
0: 	// Procedure name
0: 	static final int PRCNAM = 0x2138; 
1: 
0: 	// Query Attribute for Updatability
0: 	static final int QRYATTUPD = 0x2150;
1: 
0: 	// Cursor Allows Read, Delete, and Update Operations.
0: 	static final int QRYUPD = 0x4;
1: 
0: 	// Relational Database codepoint constant.  Min. level 3.
0: 	static final int RDB = 0x240F;
1: 
0: 	// RDB Access Manager Class.
0: 	static final int RDBACCCL = 0x210F;
1: 
0: 	// RDB Allow Updates
0: 	static final int RDBALWUPD = 0x211A;
1: 
0: 	// Query Relative  Scrolling Action
0: 	static final int QRYRELSCR = 0x213C;
1: 
0: 	// Query Scroll Orientation
0: 	static final int QRYSCRORN = 0x2152;
1: 
0: 	// Query Row Number
0: 	static final int QRYROWNBR = 0x213D;
1: 
0: 	// Query Row Sensitivity
0: 	static final int QRYROWSNS = 0x2153;
1: 
0: 	// Query Refresh Answer set table 
0: 	static final int QRYRFRTBL = 0x213E;
1: 
0: 	// Query Attribute for Scrollability
0: 	static final int QRYATTSCR = 0x2149;
1: 
0: 	// Query Attribute for Sensitivity
0: 	static final int QRYATTSNS = 0x2157;
1: 
0: 	// Query Block Reset
0: 	static final int QRYBLKRST = 0x2154;
1: 
0: 	// Query Rowset Size
0: 	static final int QRYROWSET = 0x2156;
1: 
0: 	// Query Returns Data
0: 	static final int QRYRTNDTA = 0x2155;
1: 
0: 	// RDB interrupt token.
0: 	static final int RDBINTTKN = 0x2103;
1: 
0: 	// Relational Database Name codepoint constant.
0: 	static final int RDBNAM = 0x2110;
1: 
0: 	// RDB Collection Identifier
0: 	static final int RDBCOLID = 0x2108;
1: 
0: 	// Resource name information
0: 	static final int RSCNAM = 0x112D;
1: 
0: 	// Resource Type Information
0: 	static final int RSCTYP = 0x111F;
1: 
0: 	// Reason Code Information
0: 	static final int RSNCOD = 0x1127;
1: 
0: 	// Resynchronization Manager.  Min levl 5.
0: 	// It is a manager object of DDM that performs
0: 	// resynchronization for in-doubt units of work after
0: 	// a sync point operation failure.
0: 	static final int RSYNCMGR = 0x14C1;
1: 
0: 	// Retuan SQL Descriptor Area
0: 	static final int RTNSQLDA = 0x2116;
1: 
0: 	// Type of SQL Descriptor Area
0: 	static final int TYPSQLDA = 0x2146;
1: 
0: 	// Security Check Code codepoint constant.
0: 	static final int SECCHKCD = 0x11A4;
1: 
0: 	// Security Mechanism codepoint constant.
0: 	static final int SECMEC = 0x11A2;
1: 
0: 	// Security Manager codepoint constant.
0: 	static final int SECMGR = 0x1440;
1: 
0: 	// Security Manager Name codepoint constant.
0: 	static final int SECMGRNM = 0x1196;
1: 
0: 	// Security Token codepoint constant.
0: 	static final int SECTKN = 0x11DC;
1: 
0: 	// Return of EXTDTA Option
0: 	static final int RTNEXTDTA = 0x2148;
1: 
0: 	// Return of EXTDTA Option - Return EXTDTAs by Row
0: 	static final int RTNEXTROW = 0x1;
1: 
0: 	// Return of EXTDTA Option - Return All EXTDTAs for QRYDTA's Sent
0: 	static final int RTNEXTALL = 0x2;
1: 
0: 	// Supervisor name codepoint constant.
0: 	static final int SPVNAM = 0x115D;
1: 
0: 	// SQL Application Manager codepoint constant.  Min. level 3.
0: 	static final int SQLAM = 0x2407;
1: 
0: 	// SQL Communication Area Reply Data codepoint constant.
0: 	static final int SQLCARD = 0x2408;
1: 
0: 	// Hold Cursor Position
0: 	static final int SQLCSRHLD = 0x211F;
1: 
0: 	// SQLDA Reply Data codepoint constant.
0: 	static final int SQLDARD = 0x2411;
1: 
0: 	// Server Class Name codepoint constant.
0: 	static final int SRVCLSNM = 0x1147;
1: 
0: 	// Server Diagnostic Information codepoint constant.
0: 	static final int SRVDGN = 0x1153;
1: 
0: 	// Server List codepoint constant.
0: 	static final int SRVLST = 0x244E;
1: 
0: 	// Server Name codepoint constant.
0: 	static final int SRVNAM = 0x116D;
1: 
0: 	// Server Product Release Level codepoint constant.
0: 	static final int SRVRLSLV = 0x115A;
1: 
0: 	//Statement Decimal Delimiter
0: 	static final int STTDECDEL = 0x2121;
1: 
0: 	//Statement String Delimiter
0: 	static final int STTSTRDEL = 0x2120;
1: 
0: 	// Supervisor.
0: 	// Manages a collection of managers in a consistent manner.
0: 	static final int SUPERVISOR = 0x143C;
1: 
0: 	// Security Service Error Number codepoint constant.
0: 	static final int SVCERRNO = 0x11B4;
1: 
0: 	// Severity Code codepoint constant.
0: 	static final int SVRCOD = 0x1149;
1: 
0: 	// Sync Point Manager.  Min. level 4.
0: 	// It is a manager object of DDM that coordinates resource
0: 	// recovery of the units of work associated with recoverable
0: 	// resources in multiple DDM servers.
0: 	static final int SYNCPTMGR = 0x14C0;
1: 
0: 	// Syntax Error code
0: 	static final int SYNERRCD = 0x114A;
1: 
0: 	// Data Type Definition Name codepoint constant.
0: 	static final int TYPDEFNAM = 0x002F;
1: 
0: 	// TYPDEF Overrides codepoint constant.
0: 	static final int TYPDEFOVR = 0x0035;
1: 
0: 	// Unit of Word Disposition codepoint constant.
0: 	static final int UOWDSP = 0x2115;
1: 
0: 	// Usrid codepoint constant.
0: 	static final int USRID = 0x11A0;
1: 
0: 	// Version name
0: 	static final int VRSNAM = 0x1144;
1: 
0: 	// Rdb Package Name, Consistency Token, and Section
0: 	// Number codepoint constant.
0: 	static final int PKGNAMCSN = 0x2113;
1: 
0: 	//-----------------------DDM reply codepoints---------------------------------
1: 
0: 	// Invalid description
0: 	static final int DSCINVRM = 0x220A;
1: 
0: 	// Codepoint for Command Authorization for Agent Permanent Error
0: 	static final int CMDATHRM = 0x121C;
1: 
0: 	// Command Check codepoint constant.
0: 	static final int CMDCHKRM = 0x1254;
1: 
0: 	// Command Not Supported codepoint constant.
0: 	static final int CMDNSPRM = 0x1250;
1: 
0: 	// Codepoint for Agent Permanent Error Reply message
0: 	static final int AGNPRMRM = 0x1232;
1: 
0: 	static final int BGNBNDRM = 0x2208;
1: 
0: 	// Abnormal End of Unit of Work Condition codepoint constant.
0: 	static final int ABNUOWRM = 0x220D;
1: 
0: 	// Access to RDB Completed.
0: 	// Specifies that an instance of the SQL application manager
0: 	// has been created and is bound to the specified RDB.
0: 	static final int ACCRDBRM = 0x2201;
1: 
0: 	final static int CMDCMPRM = 0x124B;
1: 
0: 	final static int MGRLVLRM = 0x1210;
1: 
0: 	// Manager dependency Error
0: 	static final int MGRDEPRM = 0x1218;
1: 
0: 	// End Unit of Work Condition codepoint constant.
0: 	static final int ENDUOWRM = 0x220C;
1: 
0: 	// Object Not Supported codepoint constant.
0: 	static final int OBJNSPRM = 0x1253;
1: 
0: 	// Conversational Protocol Error
0: 	static final int PRCCNVRM = 0x1245;
1: 
0: 	// Parameter Not Supported codepoint constant.
0: 	static final int PRMNSPRM = 0x1251;
1: 
0: 	// RDB Package Binding Process Not active Codepoint
0: 	static final int PKGBNARM = 0x2206;
1: 
0: 	// RDB Package Binding Process Active codepoint constant.
0: 	static final int PKGBPARM = 0x2209;
1: 
0: 	// Query not open codepoint constant.
0: 	static final int QRYNOPRM = 0x2202;
1: 
0: 	// Query previously opened codepoint
0: 	static final int QRYPOPRM = 0x220F;
1: 
0: 	// RDB Currently Accessed Codepoint
0: 	static final int RDBACCRM = 0x2207;
1: 
0: 	// Security Check.
0: 	// Indicates the acceptability of the security information.
0: 	static final int SECCHKRM = 0x1219;
1: 
0: 	// RDB Access Failed Reply Message codepoint
0: 	static final int RDBAFLRM = 0x221A;
1: 
0: 	// Not Authorized To RDB reply message codepoint
0: 	static final int RDBATHRM = 0x22CB;
1: 
0: 	// RDB Not Accessed codepoint constant.
0: 	static final int RDBNACRM = 0x2204;
1: 
0: 	// RDB not found codepoint
0: 	static final int RDBNFNRM = 0x2211;
1: 
0: 	// RDB Update Reply Message codepoint constant.
0: 	static final int RDBUPDRM = 0x2218;
1: 
0: 	// Resources Limits Reached
0: 	static final int RSCLMTRM = 0x1233;
1: 
0: 	// Data Stream Syntax Error
0: 	static final int SYNTAXRM = 0x124C;
1: 
0: 	// Target Not Supported
0: 	static final int TRGNSPRM = 0x125F;
1: 
0: 	// Parameter Value Not Supported codepoint constant.
0: 	static final int VALNSPRM = 0x1252;
1: 
0: 	// SQL Error Condition codepoint constant.
0: 	static final int SQLERRRM = 0x2213;
1: 
0: 	final static int OPNQRYRM = 0x2205;
0: 	final static int ENDQRYRM = 0x220B;
0: 	final static int DTAMCHRM = 0x220E;
0: 	final static int OPNQFLRM = 0x2212;
0: 	final static int RSLSETRM = 0x2219;
0: 	final static int CMDVLTRM = 0x221D;
0: 	final static int CMMRQSRM = 0x2225;
1: 
0: 	//-----------------------ddm enumerated values-------------------------------
1: 
0: 	// TYPSQLDA - Standard Output SQLDA
0: 	static final int TYPSQLDA_STD_OUTPUT = 0;
1: 
0: 	// TYPSQLDA - Standard Input SQLDA
0: 	static final int TYPSQLDA_STD_INPUT = 1;
1: 
0: 	// TYPSQLDA - Light Output SQLDA
0: 	static final int TYPSQLDA_LIGHT_OUTPUT = 2;
1: 
0: 	// TYPSQLDA - Light Input SQLDA
0: 	static final int TYPSQLDA_LIGHT_INPUT = 3;
1: 
0: 	// TYPSQLDA - Extended Output SQLDA
0: 	static final int TYPSQLDA_X_OUTPUT = 4;
1: 
0: 	// TYPSQLDA - Extended Input SQLDA
0: 	static final int TYPSQLDA_X_INPUT = 5;
1: 
1: 
1: 
0: 	// QRYCLSIMP - Target Server determines whether to implicitly
0: 	// close the cursor or not upon SQLSTATE 02000 based on cursor type.
0: 	static final int QRYCLSIMP_SERVER_CHOICE = 0x00;
1: 	
0: 	// QRYCLSIMP - Target Server must implicitly close the cursor
0: 	// upon SQLSTATE 02000.
0: 	static final int QRYCLSIMP_YES = 0x01;
1: 	
0: 	// QRYCLSIMP - Target Server must not implicitly close the cursor
0: 	// upon SQLSTATE 02000.
0: 	static final int QRYCLSIMP_NO = 0x02;
1: 
0: 	// QRYCLSRLS - Do not release read locks when the query is closed
0: 	static final int QRYCLSRLS_NO = 0x00;
1: 	
0: 	// QRYCLSRLS - Release read locks when the query is closed
0: 	static final int QRYCLSRLS_YES = 0x01;
1: 
0: 	// QRYBLKFCT - No 'OPTIMIZE for N ROWS' clause associated with
0: 	// the select statement for the cursor.
0: 	static final int QRYBLKFCT_NONE = 0x00;
1: 	
0: 	// QRYBLKEXA - Every query block is exactly the size specified
0: 	// in the QRYBLKSZ parameter, except for possibly the last
0: 	// query block which may be shorter.
0: 	static final int QRYBLKEXA = 0x00;
1: 
0: 	// QRYBLKFLX - Every query block is at least the size specified
0: 	// in the QRYBLKSZ parameter, except for possibly the last
0: 	// query block which may be shorter.
0: 	static final int QRYBLKFLX = 0x01;
1: 	
0: 	//----------------------------fdoca code points-------------------------------
1: 
0: 	// Externalized FD:OCA Data codepoint constant.
0: 	static final int EXTDTA = 0x146C;
1: 
0: 	// FDOCA data descriptor
0: 	static final int FDODSC = 0x0010;
1: 
0: 	// FDOCA data
0: 	static final int FDODTA = 0x147A;
1: 
0: 	// FDOCA Descriptor offset
0: 	static final int FDODSCOFF = 0x2118;
1: 
0: 	// FDOCA Triplet Parameter offset
0: 	static final int FDOPRMOFF = 0x212B;
1: 
0: 	// FDOCA Triplet offset
0: 	static final int FDOTRPOFF = 0x212A;
1: 
0: 	//--------------------------ddm error code points---------------------------------
0: 	static final int SYNERRCD_DSS_LESS_THAN_6 = 0x01;
0: 	static final int SYNERRCD_DSS_LENGTH_BYTE_NUMBER_MISMATCH = 0x02;
0: 	static final int SYNERRCD_CBYTE_NOT_D0 = 0x03;
0: 	static final int SYNERRCD_FBYTE_NOT_SUPPORTED = 0x04;
0: 	static final int SYNERRCD_OBJ_LEN_LESS_THAN_4 = 0x07;
0: 	static final int SYNERRCD_TOO_BIG = 0x09;
0: 	static final int SYNERRCD_OBJ_LEN_NOT_ALLOWED = 0x0B;
0: 	static final int SYNERRCD_INCORRECT_EXTENDED_LEN = 0x0C;
0: 	static final int SYNERRCD_REQ_OBJ_NOT_FOUND = 0x0E;
0: 	static final int SYNERRCD_TOO_MANY = 0x0F;
0: 	static final int SYNERRCD_DUP_OBJ_PRESENT = 0x12;
0: 	static final int SYNERRCD_INVALID_CORRELATOR = 0x13;
0: 	static final int SYNERRCD_REQ_VAL_NOT_FOUND = 0x14;
0: 	static final int SYNERRCD_DSS_CONT_LESS_OR_EQUAL_2 = 0x16;
0: 	static final int SYNERRCD_CHAIN_OFF_SAME_NEXT_CORRELATOR = 0x18;
0: 	static final int SYNERRCD_CHAIN_OFF_ERROR_CONTINUE = 0x1A;
0: 	static final int SYNERRCD_INVALID_CP_FOR_CMD = 0x1D;
1: 
0: 	static final int PRCCNVCD_OBJDSS_SENT_NOT_ALLOWED = 0x03;
0: 	static final int PRCCNVCD_EXCSAT_FIRST_AFTER_CONN = 0x06;
0: 	static final int PRCCNVCD_ACCSEC_SECCHK_WRONG_STATE = 0x11;
0: 	static final int PRCCNVCD_RDBNAM_MISMATCH = 0x12;
1: 
0: 	static final int SVRCOD_INFO = 0;      // Information Only Severity Code
0: 	static final int SVRCOD_WARNING = 4;   // Warning Severity Code
0: 	static final int SVRCOD_ERROR = 8;     // Error Severity Code
0: 	static final int SVRCOD_SEVERE = 16;   // Severe Error Severity Code
0: 	static final int SVRCOD_ACCDMG = 32;   // Access Damage Severity Code
0: 	static final int SVRCOD_PRMDMG = 64;   // Permanent Damage Severity Code
0: 	static final int SVRCOD_SESDMG = 128;  // Session Damage Severity Code
1: 	
0: 	//---------------------- Security Mechanisms ---------------------------
0: 	static final int SECMEC_DCESEC = 1;		// Distributed Computing Environment Security
0: 	static final int SECMEC_USRIDPWD = 3;	// Userid and Password
0: 	static final int SECMEC_USRIDONL = 4;	// Userid only
0: 	static final int SECMEC_USRIDNWPWD = 5;  // Userid, Password, and new Password
0: 	static final int SECMEC_USRSBSPWD = 6;  // Userid with substitute password
0: 	static final int SECMEC_USRENCPWD = 7;  // Userid with encrypted password
0: 	static final int SECMEC_EUSRIDPWD = 9;  // Encrpyted userid and password
0: 	static final int SECMEC_EUSRIDNWPWD = 10;  // Encrpyted userid and password
1: 
0: 	//---------------------Security Check Codes ---------------------------
0: 	static final int SECCHKCD_OK = 0;		// Security info correct and acceptable
0: 	static final int SECCHKCD_NOTSUPPORTED = 0x01;	// SECMEC value not supported
0: 	static final int SECCHKCD_SECTKNMISSING = 0x0E;	// SECTKN missing or invalid 
0: 	static final int SECCHKCD_PASSWORDMISSING = 0x10;	// Password missing  
0: 	static final int SECCHKCD_USERIDMISSING = 0x12;	// User Id missing  
0: 	static final int SECCHKCD_USERIDINVALID = 0x13;	// Userid invalid
1: 
0: 	//----------------------Type Definition Names we care about -----------
0: 	static final String TYPDEFNAM_QTDSQLASC = "QTDSQLASC"; // ASCII
0: 	static final String TYPDEFNAM_QTDSQLJVM = "QTDSQLJVM"; // Java platform
0: 	static final String TYPDEFNAM_QTDSQLX86 = "QTDSQLX86"; //  Intel X86 platform
1: 
0: 	//----------------------Max sizes for strings in the protocol ---------
0: 	static final int MAX_NAME = 255;
0: 	static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,
0: 									  //limit is MAX_NAME (255)
0: 	static final int PRDID_MAX = 8;
0: 	static final int RDBCOLID_LEN = 18;
0: 	static final int PKGID_LEN = 18;
0: 	static final int PKGCNSTKN_LEN = 8;
0: 	static final int PKGNAMCSN_LEN = RDBNAM_LEN + RDBCOLID_LEN + PKGID_LEN +
0: 		PKGCNSTKN_LEN + 2;
1: 
0: 	//---------------------QRYBLSZ min and maximum
0: 	static final int QRYBLKSZ_MIN = 512;
0: 	static final int QRYBLKSZ_MAX = 32767;
0: 	static final int QRYROWSET_MAX = 32767;
0: 	static final int QRYROWSET_DEFAULT = -1;
1: 
0: 	//--------------------Defaults for QRYBLKCTL and MAXBLKEXT
0: 	static final int QRYBLKCTL_DEFAULT = LMTBLKPRC;
0: 	static final int MAXBLKEXT_NONE = 0;
0: 	static final int MAXBLKEXT_DEFAULT = MAXBLKEXT_NONE;
1: 
0: 	//-------------------Default for QRYCLSIMP
0: 	static final int QRYCLSIMP_DEFAULT = QRYCLSIMP_SERVER_CHOICE;
1: 
0: 	//-------------- QRYSCRORN - query scroll orientation values
0: 	static final int QRYSCRREL = 1;		// relative fetch
0: 	static final int QRYSCRABS = 2;		// absolute fetch
0: 	static final int QRYSCRAFT = 3;		// after last row
0: 	static final int QRYSCRBEF = 4;		// before first row
1: 
0: 	//---------------OUTOVROPT - output override option values
0: 	static final int OUTOVRFRS = 1; 	// Output Override allowed on first CNTQRY
0: 	static final int OUTOVRANY = 2; 	// Output Override allowed on any CNTQRY
1: 
0: 	//-----------------------Manager code points --------------------------
1: 
0: 	protected static int [] MGR_CODEPOINTS = {
0: 											AGENT,
0: 											CCSIDMGR,	
0: 											CMNAPPC, 
0: 											CMNSYNCPT,	
0: 											CMNTCPIP,	
0: 											DICTIONARY,
0: 											RDB,
0: 											RSYNCMGR,	
0: 											SECMGR,	
0: 											SQLAM,
0: 											SUPERVISOR,	
0: 											SYNCPTMGR,
0: 											XAMGR
0: 											};
0: 	protected static final int UNKNOWN_MANAGER = -1;
1: 
0: 	// hide the default constructor
0: 	private CodePoint () {}
1: 
0: 	/**
0: 	 * Given a manager codepoint find it's location in the managers array
0: 	 *
0: 	 * @return index into manager array or UNKNOWN_MANAGER if not found
1: 	 */
0: 	protected static int getManagerIndex(int manager)
1: 	{
0: 		for (int i = 0; i < MGR_CODEPOINTS.length; i++)
0: 			if (MGR_CODEPOINTS[i] == manager)
0: 				return i;
0: 		return UNKNOWN_MANAGER;
1: 	}
0: 	/**
0: 	 * Check if a manager codepoint is a known manager
0: 	 * 
0: 	 * @return true if known, false otherwise
1: 	 */
0: 	protected static boolean isKnownManager(int manager)
1: 	{
0: 		for (int i = 0; i < CodePoint.MGR_CODEPOINTS.length; i++)
0: 			if (manager == CodePoint.MGR_CODEPOINTS[i])
0: 				return true;
0: 		return false;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: package org.apache.derby.impl.drda;
0: 
0: // TBD:
0: //	 organize into separate kinds of code points; impose organizational scheme.
0: // TBD:
0: //	 reconsider the various SECCHKCD_xx constants, perhaps we should hardwire.
0: 
0: class CodePoint
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	// --------------------code points for constant ddm data----------------------
0: 
0: 	// Indicates false state.  This 1-byte code point is used by some DDM parameters.
0: 	static final byte FALSE = -16;  // was 0xf0
0: 
0: 	// Indicates true state.  This 1-byte code point is used by some DDM parameters.
0: 	static final byte TRUE = -15;  // was 0xf1
0: 
0: 	// Zero indicator constant.
0: 	// Indicates data does flow.
0: 	static final int ZEROIND = 0x00;
0: 
0: 	static final int NULLDATA = 0xFF;
0: 
0: 	// Security check was successful.
0: 	static final int SECCHKCD_00 = 0x00;
0: 
0: 	// SECMEC value not supported.
0: 	static final int SECCHKCD_01 = 0x01;
0: 
0: 	// DCE informational status
0: 	static final int SECCHKCD_02 = 0x02;
0: 
0: 	// DCE retryable error.
0: 	static final int SECCHKCD_03 = 0x03;
0: 
0: 	// DCE non-retryable error.
0: 	static final int SECCHKCD_04 = 0x04;
0: 
0: 	// GSSAPI informaional status.
0: 	static final int SECCHKCD_05 = 0x05;
0: 
0: 	// GSSAPI retryable error.
0: 	static final int SECCHKCD_06 = 0x06;
0: 
0: 	// GSSAPI non-retryable error.
0: 	static final int SECCHKCD_07 = 0x07;
0: 
0: 	// Local security service info.
0: 	static final int SECCHKCD_08 = 0x08;
0: 
0: 	// Local security service retryable error.
0: 	static final int SECCHKCD_09 = 0x09;
0: 
0: 	// Local security service non-retryable error.
0: 	static final int SECCHKCD_0A = 0x0A;
0: 
0: 	// SECTKN missing or invalid.
0: 	static final int SECCHKCD_0B = 0x0B;
0: 
0: 	// Password expired.
0: 	static final int SECCHKCD_0E = 0x0E;
0: 
0: 	// Password invalid.
0: 	static final int SECCHKCD_0F = 0x0F;
0: 
0: 	// Password missing.
0: 	static final int SECCHKCD_10 = 0x10;
0: 
0: 	// Userid missing.
0: 	static final int SECCHKCD_12 = 0x12;
0: 
0: 	// Userid invalid.
0: 	static final int SECCHKCD_13 = 0x13;
0: 
0: 	// Userid revoked.
0: 	static final int SECCHKCD_14 = 0x14;
0: 
0: 	// New password invalid.
0: 	static final int SECCHKCD_15 = 0x15;
0: 
0: 	// ----------------------ddm code points--------------------------------------
0: 
0: 	final static int EXCSAT = 0x1041;
0: 	final static int SYNCCTL = 0x1055;
0: 	final static int SYNCRSY = 0x1069;
0: 	final static int ACCSEC = 0x106D;
0: 	final static int SECCHK = 0x106E;
0: 	final static int SYNCLOG = 0x106F;
0: 	final static int ACCRDB = 0x2001;
0: 	final static int BGNBND = 0x2002;
0: 	final static int BNDSQLSTT = 0x2004;
0: 	final static int CLSQRY = 0x2005;
0: 	final static int CNTQRY = 0x2006;
0: 	final static int DRPPKG = 0x2007;
0: 	final static int DSCSQLSTT = 0x2008;
0: 	final static int ENDBND = 0x2009;
0: 	final static int EXCSQLIMM = 0x200A;
0: 	final static int EXCSQLSTT = 0x200B;
0: 	final static int EXCSQLSET = 0x2014;
0: 	final static int OPNQRY = 0x200C;
0: 	final static int PRPSQLSTT = 0x200D;
0: 	final static int RDBCMM = 0x200E;
0: 	final static int RDBRLLBCK = 0x200F;
0: 	final static int REBIND = 0x2010;
0: 	final static int DSCRDBTBL = 0x2012;
0: 
0: 	final static int SQLDTA = 0x2412;
0: 	final static int SQLDTARD = 0x2413;
0: 	final static int SQLSTT = 0x2414;
0: 	final static int SQLATTR = 0x2450;
0: 	final static int SQLSTTVRB = 0x2419;
0: 	final static int QRYDSC = 0x241A;
0: 	final static int QRYDTA = 0x241B;
0: 	final static int SQLRSLRD = 0x240E;
0: 	final static int SQLCINRD = 0x240B;
0: 
0: 	// Access Security Reply Data.
0: 	// Contains the security information from a target server's
0: 	// security manager.  This information is returned in response
0: 	// to an ACCSEC command.
0: 	static final int ACCSECRD = 0x14AC;
0: 
0: 	// Agent codepoint constant.
0: 	static final int AGENT = 0x1403;
0: 
0: 	// The codepoint for codepoint
0: 	static final int CODPNT = 0x000C;
0: 
0: 	// The Codepoint for data representation of dictionary codepoint
0: 	static final int CODPNTDR = 0x0064;
0: 
0: 	// Subtypes for CODPNTR
0: 	static final int CSTMBCS = 0x2435;  // Multibyte default
0: 
0: 	// CCSID for Double-Byte Characters codepoint constant.
0: 	static final int CCSIDDBC = 0x119D;
0: 
0: 	// CCSID for Mixed-Byte Characters codepoint constant.
0: 	static final int CCSIDMBC = 0x119E;
0: 
0: 	// CCSID Manager.  Min. level 4.
0: 	// Provides character data conversion of the DDM parameters
0: 	// containing character data.
0: 	static final int CCSIDMGR = 0x14CC;
0: 
0: 	// CCSID for Single-Byte Characters codepoint constant.
0: 	static final int CCSIDSBC = 0x119C;
0: 
0: 	// LU 6.2 Conversational Communications Manager.
0: 	// Describes the communications manager that supports
0: 	// conversational protocols by using System Network
0: 	// Architecture Logical Unit 6.2 (SNA LU 6.2) local
0: 	// communications facilities.
0: 	static final int CMNAPPC = 0x1444;
0: 
0: 	// SNA LU 6.2 Sync Point Conversational Communications
0: 	// Manager.  Min. level 4.
0: 	// Provides an SNA LU 6.2 Conversational Communications
0: 	// Manager with sync point support.
0: 	static final int CMNSYNCPT = 0x147C;
0: 
0: 	// TCP/IP Communication Manager codepoint constant.  Min. level 5.
0: 	static final int CMNTCPIP = 0x1474;
0: 
0: 	// XA Manager codepoint constant
0: 	static final int XAMGR = 0x1C01;
0: 
0: 	// Correlation Token codepoint constant.
0: 	static final int CRRTKN = 0x2135;
0: 
0: 	// Target Default Value Return
0: 	static final int TRGDFTRT = 0x213B;
0: 
0: 	// It is a manager of a set of named descriptions of object.
0: 	static final int DICTIONARY = 0x1458;
0: 
0: 	// Manager dependency error code
0: 	static final int DEPERRCD = 0x119B;
0: 
0: 	// Description Error code
0: 	static final int DSCERRCD = 0x2101;
0: 
0: 	// Server Attributes Reply Data codepoint constant.
0: 	static final int EXCSATRD = 0x1443;
0: 
0: 	// External Name codepoint constant.
0: 	static final int EXTNAM = 0x115E;
0: 
0: 	// Fixed Row Query Protocol.
0: 	static final int FIXROWPRC = 0x2418;
0: 
0: 	// Force Fixed Row Query Protocol.
0: 	static final int FRCFIXROW = 0x2410;
0: 
0: 	// Limited Block Query Protocol.
0: 	static final int LMTBLKPRC = 0x2417;
0: 
0: 	// Manager Level List codepoint constant.
0: 	static final int MGRLVLLS = 0x1404;
0: 
0: 	// Manager Level Number Attribute constants.
0: 	// Specifies the level of a defined DDM manager.
0: 	static final int MGRLVLN = 0x1473;
0: 
0: 	// Monitor Events
0: 	static final int MONITOR = 0x1900;
0: 
0: 	// Monitor Reply Data
0: 	static final int MONITORRD = 0x1C00;
0: 
0: 	// New Password
0: 	static final int NEWPASSWORD = 0x11DE;
0: 
0: 	// Password
0: 	static final int PASSWORD = 0x11A1;
0: 
0: 	// Package Default Character Subtype codepoint constant.
0: 	static final int PKGDFTCST = 0x2125;
0: 
0: 	// Package Id
0: 	static final int PKGID = 0x2109;
0: 
0: 	// Maximum Number of extra Blocks
0: 	static final int MAXBLKEXT = 0x2141;
0: 
0: 	// Maximum result set count
0: 	static final int MAXRSLCNT = 0x2140;
0: 
0: 	// Result Set Flags
0: 	static final int RSLSETFLG = 0x2142;
0: 
0: 	// RDB Commit allowed
0: 	static final int RDBCMTOK = 0x2105;
0: 
0: 	// Package name & consistency token
0: 	static final int PKGNAMCT = 0x2112;
0: 
0: 	// list of PAKNAMCSN
0: 	static final int PKGSNLST = 0x2139;
0: 
0: 	// Conversational Protocol Error Code
0: 	static final int PRCCNVCD = 0x113F;
0: 
0: 	// Product Specific Identifier codepoint constant.
0: 	static final int PRDID = 0x112E;
0: 
0: 	// Output override
0: 	static final int OUTOVR = 0x2415;
0: 
0:   	//Output override option
0: 	static final int OUTOVROPT = 0x2147;
0: 
0:   	// Package Consistency Token
0: 	static final int PKGCNSTKN = 0x210D;
0: 
0: 	// Product Specific Data
0: 	static final int PRDDTA = 0x2104;
0: 
0: 	// Query Instance Identifier
0: 	static final int QRYINSID = 0x215B;
0: 
0: 	// Query Block Protocol Control
0: 	static final int QRYBLKCTL = 0x2132;
0: 
0: 	// Query Block Size
0: 	static final int QRYBLKSZ = 0x2114;
0: 
0: 	// Query Protocol Type
0: 	static final int QRYPRCTYP = 0x2102;
0: 
0: 	// Query Close Implicit
0: 	static final int QRYCLSIMP = 0x215D;
0: 
0: 	// Query Close Lock Release
0: 	static final int QRYCLSRLS = 0x215E;
0: 
0: 	// QRYOPTVAL - Query Optimization Value
0: 	static final int QRYOPTVAL = 0x215F;
0: 
0: 	// Cursor Allows Read and Delete Operations.
0: 	static final int QRYDEL = 0x2;
0: 
0: 	// Cursor is Read-only.
0: 	static final int QRYRDO = 0x1;
0: 
0: 	// Insensitive SCROLL
0: 	static final int QRYINS = 0x1;
0: 
0: 	// Number of fetch or Insert Rows
0: 	static final int NBRROW = 0x213A;
0: 
0: 	// Output expected
0: 	static final int OUTEXP = 0x2111;
0: 
0: 	// Procedure name
0: 	static final int PRCNAM = 0x2138; 
0: 
0: 	// Query Attribute for Updatability
0: 	static final int QRYATTUPD = 0x2150;
0: 
0: 	// Cursor Allows Read, Delete, and Update Operations.
0: 	static final int QRYUPD = 0x4;
0: 
0: 	// Relational Database codepoint constant.  Min. level 3.
0: 	static final int RDB = 0x240F;
0: 
0: 	// RDB Access Manager Class.
0: 	static final int RDBACCCL = 0x210F;
0: 
0: 	// RDB Allow Updates
0: 	static final int RDBALWUPD = 0x211A;
0: 
0: 	// Query Relative  Scrolling Action
0: 	static final int QRYRELSCR = 0x213C;
0: 
0: 	// Query Scroll Orientation
0: 	static final int QRYSCRORN = 0x2152;
0: 
0: 	// Query Row Number
0: 	static final int QRYROWNBR = 0x213D;
0: 
0: 	// Query Row Sensitivity
0: 	static final int QRYROWSNS = 0x2153;
0: 
0: 	// Query Refresh Answer set table 
0: 	static final int QRYRFRTBL = 0x213E;
0: 
0: 	// Query Attribute for Scrollability
0: 	static final int QRYATTSCR = 0x2149;
0: 
0: 	// Query Attribute for Sensitivity
0: 	static final int QRYATTSNS = 0x2157;
0: 
0: 	// Query Block Reset
0: 	static final int QRYBLKRST = 0x2154;
0: 
0: 	// Query Rowset Size
0: 	static final int QRYROWSET = 0x2156;
0: 
0: 	// Query Returns Data
0: 	static final int QRYRTNDTA = 0x2155;
0: 
0: 	// RDB interrupt token.
0: 	static final int RDBINTTKN = 0x2103;
0: 
0: 	// Relational Database Name codepoint constant.
0: 	static final int RDBNAM = 0x2110;
0: 
0: 	// RDB Collection Identifier
0: 	static final int RDBCOLID = 0x2108;
0: 
0: 	// Resource name information
0: 	static final int RSCNAM = 0x112D;
0: 
0: 	// Resource Type Information
0: 	static final int RSCTYP = 0x111F;
0: 
0: 	// Reason Code Information
0: 	static final int RSNCOD = 0x1127;
0: 
0: 	// Resynchronization Manager.  Min levl 5.
0: 	// It is a manager object of DDM that performs
0: 	// resynchronization for in-doubt units of work after
0: 	// a sync point operation failure.
0: 	static final int RSYNCMGR = 0x14C1;
0: 
0: 	// Retuan SQL Descriptor Area
0: 	static final int RTNSQLDA = 0x2116;
0: 
0: 	// Type of SQL Descriptor Area
0: 	static final int TYPSQLDA = 0x2146;
0: 
0: 	// Security Check Code codepoint constant.
0: 	static final int SECCHKCD = 0x11A4;
0: 
0: 	// Security Mechanism codepoint constant.
0: 	static final int SECMEC = 0x11A2;
0: 
0: 	// Security Manager codepoint constant.
0: 	static final int SECMGR = 0x1440;
0: 
0: 	// Security Manager Name codepoint constant.
0: 	static final int SECMGRNM = 0x1196;
0: 
0: 	// Security Token codepoint constant.
0: 	static final int SECTKN = 0x11DC;
0: 
0: 	// Return of EXTDTA Option
0: 	static final int RTNEXTDTA = 0x2148;
0: 
0: 	// Return of EXTDTA Option - Return EXTDTAs by Row
0: 	static final int RTNEXTROW = 0x1;
0: 
0: 	// Return of EXTDTA Option - Return All EXTDTAs for QRYDTA's Sent
0: 	static final int RTNEXTALL = 0x2;
0: 
0: 	// Supervisor name codepoint constant.
0: 	static final int SPVNAM = 0x115D;
0: 
0: 	// SQL Application Manager codepoint constant.  Min. level 3.
0: 	static final int SQLAM = 0x2407;
0: 
0: 	// SQL Communication Area Reply Data codepoint constant.
0: 	static final int SQLCARD = 0x2408;
0: 
0: 	// Hold Cursor Position
0: 	static final int SQLCSRHLD = 0x211F;
0: 
0: 	// SQLDA Reply Data codepoint constant.
0: 	static final int SQLDARD = 0x2411;
0: 
0: 	// Server Class Name codepoint constant.
0: 	static final int SRVCLSNM = 0x1147;
0: 
0: 	// Server Diagnostic Information codepoint constant.
0: 	static final int SRVDGN = 0x1153;
0: 
0: 	// Server List codepoint constant.
0: 	static final int SRVLST = 0x244E;
0: 
0: 	// Server Name codepoint constant.
0: 	static final int SRVNAM = 0x116D;
0: 
0: 	// Server Product Release Level codepoint constant.
0: 	static final int SRVRLSLV = 0x115A;
0: 
0: 	//Statement Decimal Delimiter
0: 	static final int STTDECDEL = 0x2121;
0: 
0: 	//Statement String Delimiter
0: 	static final int STTSTRDEL = 0x2120;
0: 
0: 	// Supervisor.
0: 	// Manages a collection of managers in a consistent manner.
0: 	static final int SUPERVISOR = 0x143C;
0: 
0: 	// Security Service Error Number codepoint constant.
0: 	static final int SVCERRNO = 0x11B4;
0: 
0: 	// Severity Code codepoint constant.
0: 	static final int SVRCOD = 0x1149;
0: 
0: 	// Sync Point Manager.  Min. level 4.
0: 	// It is a manager object of DDM that coordinates resource
0: 	// recovery of the units of work associated with recoverable
0: 	// resources in multiple DDM servers.
0: 	static final int SYNCPTMGR = 0x14C0;
0: 
0: 	// Syntax Error code
0: 	static final int SYNERRCD = 0x114A;
0: 
0: 	// Data Type Definition Name codepoint constant.
0: 	static final int TYPDEFNAM = 0x002F;
0: 
0: 	// TYPDEF Overrides codepoint constant.
0: 	static final int TYPDEFOVR = 0x0035;
0: 
0: 	// Unit of Word Disposition codepoint constant.
0: 	static final int UOWDSP = 0x2115;
0: 
0: 	// Usrid codepoint constant.
0: 	static final int USRID = 0x11A0;
0: 
0: 	// Version name
0: 	static final int VRSNAM = 0x1144;
0: 
0: 	// Rdb Package Name, Consistency Token, and Section
0: 	// Number codepoint constant.
0: 	static final int PKGNAMCSN = 0x2113;
0: 
0: 	//-----------------------DDM reply codepoints---------------------------------
0: 
0: 	// Invalid description
0: 	static final int DSCINVRM = 0x220A;
0: 
0: 	// Codepoint for Command Authorization for Agent Permanent Error
0: 	static final int CMDATHRM = 0x121C;
0: 
0: 	// Command Check codepoint constant.
0: 	static final int CMDCHKRM = 0x1254;
0: 
0: 	// Command Not Supported codepoint constant.
0: 	static final int CMDNSPRM = 0x1250;
0: 
0: 	// Codepoint for Agent Permanent Error Reply message
0: 	static final int AGNPRMRM = 0x1232;
0: 
0: 	static final int BGNBNDRM = 0x2208;
0: 
0: 	// Abnormal End of Unit of Work Condition codepoint constant.
0: 	static final int ABNUOWRM = 0x220D;
0: 
0: 	// Access to RDB Completed.
0: 	// Specifies that an instance of the SQL application manager
0: 	// has been created and is bound to the specified RDB.
0: 	static final int ACCRDBRM = 0x2201;
0: 
0: 	final static int CMDCMPRM = 0x124B;
0: 
0: 	final static int MGRLVLRM = 0x1210;
0: 
0: 	// Manager dependency Error
0: 	static final int MGRDEPRM = 0x1218;
0: 
0: 	// End Unit of Work Condition codepoint constant.
0: 	static final int ENDUOWRM = 0x220C;
0: 
0: 	// Object Not Supported codepoint constant.
0: 	static final int OBJNSPRM = 0x1253;
0: 
0: 	// Conversational Protocol Error
0: 	static final int PRCCNVRM = 0x1245;
0: 
0: 	// Parameter Not Supported codepoint constant.
0: 	static final int PRMNSPRM = 0x1251;
0: 
0: 	// RDB Package Binding Process Not active Codepoint
0: 	static final int PKGBNARM = 0x2206;
0: 
0: 	// RDB Package Binding Process Active codepoint constant.
0: 	static final int PKGBPARM = 0x2209;
0: 
0: 	// Query not open codepoint constant.
0: 	static final int QRYNOPRM = 0x2202;
0: 
0: 	// Query previously opened codepoint
0: 	static final int QRYPOPRM = 0x220F;
0: 
0: 	// RDB Currently Accessed Codepoint
0: 	static final int RDBACCRM = 0x2207;
0: 
0: 	// Security Check.
0: 	// Indicates the acceptability of the security information.
0: 	static final int SECCHKRM = 0x1219;
0: 
0: 	// RDB Access Failed Reply Message codepoint
0: 	static final int RDBAFLRM = 0x221A;
0: 
0: 	// Not Authorized To RDB reply message codepoint
0: 	static final int RDBATHRM = 0x22CB;
0: 
0: 	// RDB Not Accessed codepoint constant.
0: 	static final int RDBNACRM = 0x2204;
0: 
0: 	// RDB not found codepoint
0: 	static final int RDBNFNRM = 0x2211;
0: 
0: 	// RDB Update Reply Message codepoint constant.
0: 	static final int RDBUPDRM = 0x2218;
0: 
0: 	// Resources Limits Reached
0: 	static final int RSCLMTRM = 0x1233;
0: 
0: 	// Data Stream Syntax Error
0: 	static final int SYNTAXRM = 0x124C;
0: 
0: 	// Target Not Supported
0: 	static final int TRGNSPRM = 0x125F;
0: 
0: 	// Parameter Value Not Supported codepoint constant.
0: 	static final int VALNSPRM = 0x1252;
0: 
0: 	// SQL Error Condition codepoint constant.
0: 	static final int SQLERRRM = 0x2213;
0: 
0: 	final static int OPNQRYRM = 0x2205;
0: 	final static int ENDQRYRM = 0x220B;
0: 	final static int DTAMCHRM = 0x220E;
0: 	final static int OPNQFLRM = 0x2212;
0: 	final static int RSLSETRM = 0x2219;
0: 	final static int CMDVLTRM = 0x221D;
0: 	final static int CMMRQSRM = 0x2225;
0: 
0: 	//-----------------------ddm enumerated values-------------------------------
0: 
0: 	// TYPSQLDA - Standard Output SQLDA
0: 	static final int TYPSQLDA_STD_OUTPUT = 0;
0: 
0: 	// TYPSQLDA - Standard Input SQLDA
0: 	static final int TYPSQLDA_STD_INPUT = 1;
0: 
0: 	// TYPSQLDA - Light Output SQLDA
0: 	static final int TYPSQLDA_LIGHT_OUTPUT = 2;
0: 
0: 	// TYPSQLDA - Light Input SQLDA
0: 	static final int TYPSQLDA_LIGHT_INPUT = 3;
0: 
0: 	// TYPSQLDA - Extended Output SQLDA
0: 	static final int TYPSQLDA_X_OUTPUT = 4;
0: 
0: 	// TYPSQLDA - Extended Input SQLDA
0: 	static final int TYPSQLDA_X_INPUT = 5;
0: 
0: 
0: 
0: 	// QRYCLSIMP - Target Server determines whether to implicitly
0: 	// close the cursor or not upon SQLSTATE 02000 based on cursor type.
0: 	static final int QRYCLSIMP_SERVER_CHOICE = 0x00;
0: 	
0: 	// QRYCLSIMP - Target Server must implicitly close the cursor
0: 	// upon SQLSTATE 02000.
0: 	static final int QRYCLSIMP_YES = 0x01;
0: 	
0: 	// QRYCLSIMP - Target Server must not implicitly close the cursor
0: 	// upon SQLSTATE 02000.
0: 	static final int QRYCLSIMP_NO = 0x02;
0: 
0: 	// QRYCLSRLS - Do not release read locks when the query is closed
0: 	static final int QRYCLSRLS_NO = 0x00;
0: 	
0: 	// QRYCLSRLS - Release read locks when the query is closed
0: 	static final int QRYCLSRLS_YES = 0x01;
0: 
0: 	// QRYBLKFCT - No 'OPTIMIZE for N ROWS' clause associated with
0: 	// the select statement for the cursor.
0: 	static final int QRYBLKFCT_NONE = 0x00;
0: 	
0: 	// QRYBLKEXA - Every query block is exactly the size specified
0: 	// in the QRYBLKSZ parameter, except for possibly the last
0: 	// query block which may be shorter.
0: 	static final int QRYBLKEXA = 0x00;
0: 
0: 	// QRYBLKFLX - Every query block is at least the size specified
0: 	// in the QRYBLKSZ parameter, except for possibly the last
0: 	// query block which may be shorter.
0: 	static final int QRYBLKFLX = 0x01;
0: 	
0: 	//----------------------------fdoca code points-------------------------------
0: 
0: 	// Externalized FD:OCA Data codepoint constant.
0: 	static final int EXTDTA = 0x146C;
0: 
0: 	// FDOCA data descriptor
0: 	static final int FDODSC = 0x0010;
0: 
0: 	// FDOCA data
0: 	static final int FDODTA = 0x147A;
0: 
0: 	// FDOCA Descriptor offset
0: 	static final int FDODSCOFF = 0x2118;
0: 
0: 	// FDOCA Triplet Parameter offset
0: 	static final int FDOPRMOFF = 0x212B;
0: 
0: 	// FDOCA Triplet offset
0: 	static final int FDOTRPOFF = 0x212A;
0: 
0: 	//--------------------------ddm error code points---------------------------------
0: 	static final int SYNERRCD_DSS_LESS_THAN_6 = 0x01;
0: 	static final int SYNERRCD_DSS_LENGTH_BYTE_NUMBER_MISMATCH = 0x02;
0: 	static final int SYNERRCD_CBYTE_NOT_D0 = 0x03;
0: 	static final int SYNERRCD_FBYTE_NOT_SUPPORTED = 0x04;
0: 	static final int SYNERRCD_OBJ_LEN_LESS_THAN_4 = 0x07;
0: 	static final int SYNERRCD_TOO_BIG = 0x09;
0: 	static final int SYNERRCD_OBJ_LEN_NOT_ALLOWED = 0x0B;
0: 	static final int SYNERRCD_INCORRECT_EXTENDED_LEN = 0x0C;
0: 	static final int SYNERRCD_REQ_OBJ_NOT_FOUND = 0x0E;
0: 	static final int SYNERRCD_TOO_MANY = 0x0F;
0: 	static final int SYNERRCD_DUP_OBJ_PRESENT = 0x12;
0: 	static final int SYNERRCD_INVALID_CORRELATOR = 0x13;
0: 	static final int SYNERRCD_REQ_VAL_NOT_FOUND = 0x14;
0: 	static final int SYNERRCD_DSS_CONT_LESS_OR_EQUAL_2 = 0x16;
0: 	static final int SYNERRCD_CHAIN_OFF_SAME_NEXT_CORRELATOR = 0x18;
0: 	static final int SYNERRCD_CHAIN_OFF_ERROR_CONTINUE = 0x1A;
0: 	static final int SYNERRCD_INVALID_CP_FOR_CMD = 0x1D;
0: 
0: 	static final int PRCCNVCD_OBJDSS_SENT_NOT_ALLOWED = 0x03;
0: 	static final int PRCCNVCD_EXCSAT_FIRST_AFTER_CONN = 0x06;
0: 	static final int PRCCNVCD_ACCSEC_SECCHK_WRONG_STATE = 0x11;
0: 	static final int PRCCNVCD_RDBNAM_MISMATCH = 0x12;
0: 
0: 	static final int SVRCOD_INFO = 0;      // Information Only Severity Code
0: 	static final int SVRCOD_WARNING = 4;   // Warning Severity Code
0: 	static final int SVRCOD_ERROR = 8;     // Error Severity Code
0: 	static final int SVRCOD_SEVERE = 16;   // Severe Error Severity Code
0: 	static final int SVRCOD_ACCDMG = 32;   // Access Damage Severity Code
0: 	static final int SVRCOD_PRMDMG = 64;   // Permanent Damage Severity Code
0: 	static final int SVRCOD_SESDMG = 128;  // Session Damage Severity Code
0: 	
0: 	//---------------------- Security Mechanisms ---------------------------
0: 	static final int SECMEC_DCESEC = 1;		// Distributed Computing Environment Security
0: 	static final int SECMEC_USRIDPWD = 3;	// Userid and Password
0: 	static final int SECMEC_USRIDONL = 4;	// Userid only
0: 	static final int SECMEC_USRIDNWPWD = 5;  // Userid, Password, and new Password
0: 	static final int SECMEC_USRSBSPWD = 6;  // Userid with substitute password
0: 	static final int SECMEC_USRENCPWD = 7;  // Userid with encrypted password
0: 	static final int SECMEC_EUSRIDPWD = 9;  // Encrpyted userid and password
0: 	static final int SECMEC_EUSRIDNWPWD = 10;  // Encrpyted userid and password
0: 
0: 	//---------------------Security Check Codes ---------------------------
0: 	static final int SECCHKCD_OK = 0;		// Security info correct and acceptable
0: 	static final int SECCHKCD_NOTSUPPORTED = 0x01;	// SECMEC value not supported
0: 	static final int SECCHKCD_SECTKNMISSING = 0x0E;	// SECTKN missing or invalid 
0: 	static final int SECCHKCD_PASSWORDMISSING = 0x10;	// Password missing  
0: 	static final int SECCHKCD_USERIDMISSING = 0x12;	// User Id missing  
0: 	static final int SECCHKCD_USERIDINVALID = 0x13;	// Userid invalid
0: 
0: 	//----------------------Type Definition Names we care about -----------
0: 	static final String TYPDEFNAM_QTDSQLASC = "QTDSQLASC"; // ASCII
0: 	static final String TYPDEFNAM_QTDSQLJVM = "QTDSQLJVM"; // Java platform
0: 	static final String TYPDEFNAM_QTDSQLX86 = "QTDSQLX86"; //  Intel X86 platform
0: 
0: 	//----------------------Max sizes for strings in the protocol ---------
0: 	static final int MAX_NAME = 255;
0: 	static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,
0: 									  //limit is MAX_NAME (255)
0: 	static final int PRDID_MAX = 8;
0: 	static final int RDBCOLID_LEN = 18;
0: 	static final int PKGID_LEN = 18;
0: 	static final int PKGCNSTKN_LEN = 8;
0: 	static final int PKGNAMCSN_LEN = RDBNAM_LEN + RDBCOLID_LEN + PKGID_LEN +
0: 		PKGCNSTKN_LEN + 2;
0: 
0: 	//---------------------QRYBLSZ min and maximum
0: 	static final int QRYBLKSZ_MIN = 512;
0: 	static final int QRYBLKSZ_MAX = 32767;
0: 	static final int QRYROWSET_MAX = 32767;
0: 	static final int QRYROWSET_DEFAULT = -1;
0: 
0: 	//--------------------Defaults for QRYBLKCTL and MAXBLKEXT
0: 	static final int QRYBLKCTL_DEFAULT = LMTBLKPRC;
0: 	static final int MAXBLKEXT_NONE = 0;
0: 	static final int MAXBLKEXT_DEFAULT = MAXBLKEXT_NONE;
0: 
0: 	//-------------------Default for QRYCLSIMP
0: 	static final int QRYCLSIMP_DEFAULT = QRYCLSIMP_SERVER_CHOICE;
0: 
0: 	//-------------- QRYSCRORN - query scroll orientation values
0: 	static final int QRYSCRREL = 1;		// relative fetch
0: 	static final int QRYSCRABS = 2;		// absolute fetch
0: 	static final int QRYSCRAFT = 3;		// after last row
0: 	static final int QRYSCRBEF = 4;		// before first row
0: 
0: 	//---------------OUTOVROPT - output override option values
0: 	static final int OUTOVRFRS = 1; 	// Output Override allowed on first CNTQRY
0: 	static final int OUTOVRANY = 2; 	// Output Override allowed on any CNTQRY
0: 
0: 	//-----------------------Manager code points --------------------------
0: 
0: 	protected static int [] MGR_CODEPOINTS = {
0: 											AGENT,
0: 											CCSIDMGR,	
0: 											CMNAPPC, 
0: 											CMNSYNCPT,	
0: 											CMNTCPIP,	
0: 											DICTIONARY,
0: 											RDB,
0: 											RSYNCMGR,	
0: 											SECMGR,	
0: 											SQLAM,
0: 											SUPERVISOR,	
0: 											SYNCPTMGR,
0: 											XAMGR
0: 											};
0: 	protected static final int UNKNOWN_MANAGER = -1;
0: 
0: 	// hide the default constructor
0: 	private CodePoint () {}
0: 
0: 	/**
0: 	 * Given a manager codepoint find it's location in the managers array
0: 	 *
0: 	 * @return index into manager array or UNKNOWN_MANAGER if not found
0: 	 */
0: 	protected static int getManagerIndex(int manager)
0: 	{
0: 		for (int i = 0; i < MGR_CODEPOINTS.length; i++)
0: 			if (MGR_CODEPOINTS[i] == manager)
0: 				return i;
0: 		return UNKNOWN_MANAGER;
0: 	}
0: 	/**
0: 	 * Check if a manager codepoint is a known manager
0: 	 * 
0: 	 * @return true if known, false otherwise
0: 	 */
0: 	protected static boolean isKnownManager(int manager)
0: 	{
0: 		for (int i = 0; i < CodePoint.MGR_CODEPOINTS.length; i++)
0: 			if (manager == CodePoint.MGR_CODEPOINTS[i])
0: 				return true;
0: 		return false;
0: 	}
0: }
============================================================================