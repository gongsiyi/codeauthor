1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_CacheService
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:56c1dc2: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.cache.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.daemon.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: public class T_CacheService extends T_Generic implements CacheableFactory {
1:2bc809f: 
1:2bc809f: 	protected CacheFactory	cf;
1:2bc809f: 
1:2bc809f: 	public Cacheable newCacheable(CacheManager cm) {
1:2bc809f: 		return new T_CachedInteger();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception T_Fail - the test has failed.
1:2bc809f: 	*/
1:2bc809f: 	protected void runTests() throws T_Fail {
1:2bc809f: 
1:2bc809f: 		DaemonFactory df;
1:2bc809f: 		try {
1:56c1dc2: 			cf = (CacheFactory) startSystemModule(getModuleToTestProtocolName());
1:56c1dc2: 			df = (DaemonFactory) startSystemModule(org.apache.derby.iapi.reference.Module.DaemonFactory);
1:2bc809f: 		} catch (StandardException mse) {
1:2bc809f: 			throw T_Fail.exceptionFail(mse);
1:2bc809f: 		}
1:2bc809f: 		if (cf == null) {
1:2bc809f: 			throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " module not started.");
1:2bc809f: 		}
1:2bc809f: 		if (df == null)
1:2bc809f: 			throw T_Fail.testFailMsg(org.apache.derby.iapi.reference.Module.DaemonFactory + " module not started.");
1:2bc809f: 	
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 
1:2bc809f: 			DaemonService ds = df.createNewDaemon("CacheTester");
1:2bc809f: 			if (ds == null)
1:2bc809f: 				throw T_Fail.testFailMsg("Can't create deamon service");
1:2bc809f: 
1:2bc809f: 			CacheManager cm1 = cf.newCacheManager(this, "testCache1", 20, 40);
1:2bc809f: 			if (cm1 == null)
1:2bc809f: 				throw T_Fail.testFailMsg("unable to create cache manager");
1:2bc809f: 			T001(cm1, 40);
1:2bc809f: 			cm1.useDaemonService(ds);
1:2bc809f: 			thrashCache(cm1, 10, 1000);
1:2bc809f: 			cm1.shutdown();
1:2bc809f: 			cm1 = null;
1:2bc809f: 
1:2bc809f: 			CacheManager cm2 = cf.newCacheManager(this, "testCache2", 0, 1);
1:2bc809f: 			if (cm2 == null)
1:2bc809f: 				throw T_Fail.testFailMsg("unable to create cache manager");
1:2bc809f: 			T001(cm2, 1);
1:2bc809f: 			cm2.useDaemonService(ds);
1:2bc809f: 			thrashCache(cm2, 10, 1000);
1:2bc809f: 			cm2.shutdown();
1:2bc809f: 			cm2 = null;
1:2bc809f: 
1:2bc809f: 			CacheManager cm3= cf.newCacheManager(this, "testCache3", 2000, 40);
1:2bc809f: 			if (cm3 == null)
1:2bc809f: 				throw T_Fail.testFailMsg("unable to create cache manager");
1:2bc809f: 			T001(cm3, 40);
1:2bc809f: 			cm3.useDaemonService(ds);
1:2bc809f: 			thrashCache(cm3, 10, 1000);
1:2bc809f: 			cm3.shutdown();
1:2bc809f: 			cm3 = null;
1:2bc809f: 
1:2bc809f: 			// now two that don't use the daemon service
1:2bc809f: 			CacheManager cm4 = cf.newCacheManager(this, "testCache4", 2000, 40);
1:2bc809f: 			if (cm4 == null)
1:2bc809f: 				throw T_Fail.testFailMsg("unable to create cache manager");
1:2bc809f: 			T001(cm4, 40);
1:2bc809f: 			thrashCache(cm4, 10, 1000);
1:2bc809f: 			cm4.shutdown();
1:2bc809f: 			cm4 = null;
1:2bc809f: 
1:2bc809f: 			CacheManager cm5 = cf.newCacheManager(this, "testCache5", 0, 40);
1:2bc809f: 			if (cm5 == null)
1:2bc809f: 				throw T_Fail.testFailMsg("unable to create cache manager");
1:2bc809f: 			T001(cm5, 40);
1:2bc809f: 			thrashCache(cm5, 10, 1000);
1:2bc809f: 			cm5.shutdown();
1:2bc809f: 			cm5 = null;
1:2bc809f: 
1:2bc809f: 		} catch (StandardException se) {
1:2bc809f: 			throw T_Fail.exceptionFail(se);
1:2bc809f: 		} catch (Throwable t) {
1:2bc809f: 			t.printStackTrace();
1:2bc809f: 			throw T_Fail.exceptionFail(t);	
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Get the name of the protocol for the module to test.
1:2bc809f: 	  This is the 'factory.MODULE' variable.
1:2bc809f: 	  
1:2bc809f: 	  'moduleName' to the name of the module to test. 
1:2bc809f: 
1:2bc809f: 	  */
1:2bc809f: 	protected String getModuleToTestProtocolName() {
1:2bc809f: 		return org.apache.derby.iapi.reference.Module.CacheFactory;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** The tests
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Test the find and findCached calls.
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 		@exception T_Fail  Some error
1:2bc809f: 	*/
1:2bc809f: 	protected void T001(CacheManager cm, int cacheSize) throws T_Fail, StandardException {
1:2bc809f: 
1:2bc809f: 		T_Key tkey1 = T_Key.simpleInt(1);
1:2bc809f: 
1:2bc809f: 		// cahce is empty, nothing should be there
1:2bc809f: 		t_findCachedFail(cm, tkey1);
1:2bc809f: 
1:2bc809f: 		// find a valid entry
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey1));
1:2bc809f: 
1:2bc809f: 		// check it is still in the cache
1:2bc809f: 		cm.release(t_findCachedSucceed(cm, tkey1));
1:2bc809f: 
1:2bc809f: 		// look for an item that can't be found
1:2bc809f: 		T_Key tkey2 = T_Key.dontFindInt(2);
1:2bc809f: 		t_findCachedFail(cm, tkey2);
1:2bc809f: 		t_findFail(cm, tkey2);
1:2bc809f: 
1:2bc809f: 		// see if the first item still can be found
1:2bc809f: 		// can't assume it can be cached as it may have aged out ...
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey1));
1:2bc809f: 
1:2bc809f: 		// now ensure we can find an item with the key that just couldn't
1:2bc809f: 		// be found
1:2bc809f: 		tkey2 = T_Key.simpleInt(2);
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey2));
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey1));
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 		// now create a key that will cause an exception ...
1:2bc809f: 		T_Key tkey3 = T_Key.exceptionInt(3);
1:2bc809f: 		t_findCachedFail(cm, tkey3);
1:2bc809f: 		try {
1:2bc809f: 			
1:2bc809f: 			t_findFail(cm, tkey3);
1:2bc809f: 			throw T_Fail.testFailMsg("find call lost user exception");
1:2bc809f: 		} catch (StandardException se) {
1:2bc809f: 			if (!(se instanceof T_CacheException))
1:2bc809f: 				throw se;
1:2bc809f: 			if (((T_CacheException) se).getType() != T_CacheException.IDENTITY_FAIL)
1:2bc809f: 				throw se;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		tkey3 = T_Key.simpleInt(3);
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey3));
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey2));
1:2bc809f: 		cm.release(t_findSucceed(cm, tkey1));
1:2bc809f: 
1:2bc809f: 		// since this cache is in use by only this method we should
1:2bc809f: 		// be able to call clean with deadlocking and then ageOut
1:2bc809f: 		// leaving the cache empty.
1:2bc809f: 		cm.cleanAll();
1:2bc809f: 		cm.ageOut();
1:2bc809f: 
1:2bc809f: 		t_findCachedFail(cm, tkey1);
1:2bc809f: 		t_findCachedFail(cm, tkey2);
1:2bc809f: 		t_findCachedFail(cm, tkey3);
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 		// now put many valid objects into the cache
1:2bc809f: 		for (int i = 0; i < 4 * cacheSize ; i++) {
1:2bc809f: 			T_Key tkeyi = T_Key.simpleInt(i);
1:2bc809f: 			cm.release(t_findSucceed(cm, tkeyi));
1:2bc809f: 			cm.release(t_findCachedSucceed(cm, tkeyi));
1:2bc809f: 		}
1:2bc809f: 		cm.cleanAll();
1:2bc809f: 		cm.ageOut();
1:2bc809f: 		for (int i = 0; i < 4 * cacheSize ; i++) {
1:2bc809f: 			T_Key tkeyi = T_Key.simpleInt(i);
1:2bc809f: 			t_findCachedFail(cm, tkeyi);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 		// Ensure that we can find an object multiple times
1:2bc809f: 		Cacheable e1 = t_findSucceed(cm, tkey1);
1:2bc809f: 		Cacheable e2 = t_findSucceed(cm, tkey2);
1:2bc809f: 
1:2bc809f: 		if (e1 == e2)
1:2bc809f: 			throw T_Fail.testFailMsg("same object returned for two different keys");
1:2bc809f: 
1:2bc809f: 		if (t_findSucceed(cm, tkey1) != e1)
1:2bc809f: 			throw T_Fail.testFailMsg("different object returned for same key");
1:2bc809f: 		if (t_findSucceed(cm, tkey2) != e2)
1:2bc809f: 			throw T_Fail.testFailMsg("different object returned for same key");
1:2bc809f: 
1:2bc809f: 		cm.release(e1);
1:2bc809f: 		cm.release(e1);
1:2bc809f: 		e1 = null;
1:2bc809f: 		cm.release(e2);
1:2bc809f: 		cm.release(e2);
1:2bc809f: 		e2 = null;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 		
1:2bc809f: 		PASS("T001");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Multi-user tests
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	protected void thrashCache(CacheManager cm, int threads, int iterations) throws T_Fail {
1:2bc809f: 
1:2bc809f: 		Thread[] children = new Thread[threads];
1:2bc809f: 
1:2bc809f: 		for (int i = 0; i < threads; i++) {
1:2bc809f: 
1:2bc809f: 			children[i] = new Thread(new T_CacheUser(cm, iterations, this, out));
1:2bc809f: 			
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		for (int i = 0; i < threads; i++) {
1:2bc809f: 			children[i].start();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			for (int i = 0; i < threads; i++) {
1:2bc809f: 				if (threadFail != null)
1:2bc809f: 					throw threadFail;
1:2bc809f: 
1:2bc809f: 				children[i].join();
1:2bc809f: 
1:2bc809f: 				if (threadFail != null)
1:2bc809f: 					throw threadFail;
1:2bc809f: 			}
1:2bc809f: 		} catch (InterruptedException ie) {
1:2bc809f: 			throw T_Fail.exceptionFail(ie);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		PASS("thrashCache");
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 	protected T_Fail threadFail;
1:2bc809f: 	public synchronized void setChildException(T_Fail tf) {
1:2bc809f: 		if (threadFail == null)
1:2bc809f: 			threadFail = tf;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		A call to findCached() that is expected to return nothing.
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 		@exception T_Fail Something was found.
1:2bc809f: 	*/
1:2bc809f: 	protected void t_findCachedFail(CacheManager cm, Object key) throws StandardException, T_Fail {
1:2bc809f: 		Cacheable entry = cm.findCached(key);
1:2bc809f: 		if (entry != null) {
1:2bc809f: 			throw T_Fail.testFailMsg("found cached item unexpectedly");
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		A call to findCached() that is expected to find something.
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 		@exception T_Fail Nothing was found.
1:2bc809f: 	*/
1:2bc809f: 	protected Cacheable t_findCachedSucceed(CacheManager cm, Object key) throws StandardException, T_Fail {
1:2bc809f: 		Cacheable entry = cm.findCached(key);
1:2bc809f: 		if (entry == null) {
1:2bc809f: 			throw T_Fail.testFailMsg("expected item to be in cache");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (!entry.getIdentity().equals(key))
1:2bc809f: 			throw T_Fail.testFailMsg("item returned does not match key");
1:2bc809f: 		return entry;
1:2bc809f: 	}
1:56c1dc2: 	/**
1:2bc809f: 		A call to find() that is expected to return nothing.
1:56c1dc2: 
1:2bc809f: 		@exception T_Fail Something was found.
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 	*/
1:2bc809f: 	protected void t_findFail(CacheManager cm, Object key) throws T_Fail, StandardException {
1:2bc809f: 		Cacheable entry = cm.find(key);
1:2bc809f: 		if (entry != null) {
1:2bc809f: 			throw T_Fail.testFailMsg("found item unexpectedly");
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		A call to findCached() that is expected to find something.
1:2bc809f: 
1:2bc809f: 		@exception T_Fail Nothing was found.
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 	*/
1:2bc809f: 	protected Cacheable t_findSucceed(CacheManager cm, Object key) throws T_Fail, StandardException {
1:2bc809f: 		Cacheable entry = cm.find(key);
1:2bc809f: 		if (entry == null) {
1:2bc809f: 			throw T_Fail.testFailMsg("expected item to be found");
1:2bc809f: 		}
1:2bc809f: 		if (!entry.getIdentity().equals(key))
1:2bc809f: 			throw T_Fail.testFailMsg("item returned does not match key");
1:2bc809f: 
1:2bc809f: 		return entry;
1:2bc809f: 	}
1:2bc809f:     
1:2bc809f:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object  startSystemModule( final String factoryInterface )
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:56c1dc2:             return AccessController.doPrivileged
1:56c1dc2:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:56c1dc2:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:56c1dc2:                      {
1:56c1dc2:                          return Monitor.startSystemModule( factoryInterface );
1:56c1dc2:                      }
1:56c1dc2:                  }
1:56c1dc2:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:56c1dc2:         }
1:56c1dc2:     }
1:56c1dc2: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: 
/////////////////////////////////////////////////////////////////////////
1: 			cf = (CacheFactory) startSystemModule(getModuleToTestProtocolName());
1: 			df = (DaemonFactory) startSystemModule(org.apache.derby.iapi.reference.Module.DaemonFactory);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object  startSystemModule( final String factoryInterface )
1:         throws StandardException
1:     {
1:         try {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedExceptionAction<Object>()
1:                  {
1:                      public Object run()
1:                          throws StandardException
1:                      {
1:                          return Monitor.startSystemModule( factoryInterface );
1:                      }
1:                  }
1:                  );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
1:         }
1:     }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_CacheService
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.iapi.services.cache.*;
1: 
1: import org.apache.derby.iapi.services.daemon.*;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public class T_CacheService extends T_Generic implements CacheableFactory {
1: 
1: 	protected CacheFactory	cf;
1: 
1: 	public Cacheable newCacheable(CacheManager cm) {
1: 		return new T_CachedInteger();
1: 	}
1: 
1: 	/**
1: 		@exception T_Fail - the test has failed.
1: 	*/
1: 	protected void runTests() throws T_Fail {
1: 
1: 		DaemonFactory df;
1: 		try {
0: 			cf = (CacheFactory) Monitor.startSystemModule(getModuleToTestProtocolName());
0: 			df = (DaemonFactory) Monitor.startSystemModule(org.apache.derby.iapi.reference.Module.DaemonFactory);
1: 		} catch (StandardException mse) {
1: 			throw T_Fail.exceptionFail(mse);
1: 		}
1: 		if (cf == null) {
1: 			throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " module not started.");
1: 		}
1: 		if (df == null)
1: 			throw T_Fail.testFailMsg(org.apache.derby.iapi.reference.Module.DaemonFactory + " module not started.");
1: 	
1: 
1: 		try {
1: 
1: 			DaemonService ds = df.createNewDaemon("CacheTester");
1: 			if (ds == null)
1: 				throw T_Fail.testFailMsg("Can't create deamon service");
1: 
1: 			CacheManager cm1 = cf.newCacheManager(this, "testCache1", 20, 40);
1: 			if (cm1 == null)
1: 				throw T_Fail.testFailMsg("unable to create cache manager");
1: 			T001(cm1, 40);
1: 			cm1.useDaemonService(ds);
1: 			thrashCache(cm1, 10, 1000);
1: 			cm1.shutdown();
1: 			cm1 = null;
1: 
1: 			CacheManager cm2 = cf.newCacheManager(this, "testCache2", 0, 1);
1: 			if (cm2 == null)
1: 				throw T_Fail.testFailMsg("unable to create cache manager");
1: 			T001(cm2, 1);
1: 			cm2.useDaemonService(ds);
1: 			thrashCache(cm2, 10, 1000);
1: 			cm2.shutdown();
1: 			cm2 = null;
1: 
1: 			CacheManager cm3= cf.newCacheManager(this, "testCache3", 2000, 40);
1: 			if (cm3 == null)
1: 				throw T_Fail.testFailMsg("unable to create cache manager");
1: 			T001(cm3, 40);
1: 			cm3.useDaemonService(ds);
1: 			thrashCache(cm3, 10, 1000);
1: 			cm3.shutdown();
1: 			cm3 = null;
1: 
1: 			// now two that don't use the daemon service
1: 			CacheManager cm4 = cf.newCacheManager(this, "testCache4", 2000, 40);
1: 			if (cm4 == null)
1: 				throw T_Fail.testFailMsg("unable to create cache manager");
1: 			T001(cm4, 40);
1: 			thrashCache(cm4, 10, 1000);
1: 			cm4.shutdown();
1: 			cm4 = null;
1: 
1: 			CacheManager cm5 = cf.newCacheManager(this, "testCache5", 0, 40);
1: 			if (cm5 == null)
1: 				throw T_Fail.testFailMsg("unable to create cache manager");
1: 			T001(cm5, 40);
1: 			thrashCache(cm5, 10, 1000);
1: 			cm5.shutdown();
1: 			cm5 = null;
1: 
1: 		} catch (StandardException se) {
1: 			throw T_Fail.exceptionFail(se);
1: 		} catch (Throwable t) {
1: 			t.printStackTrace();
1: 			throw T_Fail.exceptionFail(t);	
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Get the name of the protocol for the module to test.
1: 	  This is the 'factory.MODULE' variable.
1: 	  
1: 	  'moduleName' to the name of the module to test. 
1: 
0: 	  @param testConfiguration the configuration for this test.
1: 	  */
1: 	protected String getModuleToTestProtocolName() {
1: 		return org.apache.derby.iapi.reference.Module.CacheFactory;
1: 	}
1: 
1: 
1: 	/*
1: 	** The tests
1: 	*/
1: 
1: 	/**
1: 		Test the find and findCached calls.
1: 		@exception StandardException  Standard Derby Error policy
1: 		@exception T_Fail  Some error
1: 	*/
1: 	protected void T001(CacheManager cm, int cacheSize) throws T_Fail, StandardException {
1: 
1: 		T_Key tkey1 = T_Key.simpleInt(1);
1: 
1: 		// cahce is empty, nothing should be there
1: 		t_findCachedFail(cm, tkey1);
1: 
1: 		// find a valid entry
1: 		cm.release(t_findSucceed(cm, tkey1));
1: 
1: 		// check it is still in the cache
1: 		cm.release(t_findCachedSucceed(cm, tkey1));
1: 
1: 		// look for an item that can't be found
1: 		T_Key tkey2 = T_Key.dontFindInt(2);
1: 		t_findCachedFail(cm, tkey2);
1: 		t_findFail(cm, tkey2);
1: 
1: 		// see if the first item still can be found
1: 		// can't assume it can be cached as it may have aged out ...
1: 		cm.release(t_findSucceed(cm, tkey1));
1: 
1: 		// now ensure we can find an item with the key that just couldn't
1: 		// be found
1: 		tkey2 = T_Key.simpleInt(2);
1: 		cm.release(t_findSucceed(cm, tkey2));
1: 		cm.release(t_findSucceed(cm, tkey1));
1: 
1: 
1: 		// now create a key that will cause an exception ...
1: 		T_Key tkey3 = T_Key.exceptionInt(3);
1: 		t_findCachedFail(cm, tkey3);
1: 		try {
1: 			
1: 			t_findFail(cm, tkey3);
1: 			throw T_Fail.testFailMsg("find call lost user exception");
1: 		} catch (StandardException se) {
1: 			if (!(se instanceof T_CacheException))
1: 				throw se;
1: 			if (((T_CacheException) se).getType() != T_CacheException.IDENTITY_FAIL)
1: 				throw se;
1: 		}
1: 
1: 		tkey3 = T_Key.simpleInt(3);
1: 		cm.release(t_findSucceed(cm, tkey3));
1: 		cm.release(t_findSucceed(cm, tkey2));
1: 		cm.release(t_findSucceed(cm, tkey1));
1: 
1: 		// since this cache is in use by only this method we should
1: 		// be able to call clean with deadlocking and then ageOut
1: 		// leaving the cache empty.
1: 		cm.cleanAll();
1: 		cm.ageOut();
1: 
1: 		t_findCachedFail(cm, tkey1);
1: 		t_findCachedFail(cm, tkey2);
1: 		t_findCachedFail(cm, tkey3);
1: 
1: 
1: 		// now put many valid objects into the cache
1: 		for (int i = 0; i < 4 * cacheSize ; i++) {
1: 			T_Key tkeyi = T_Key.simpleInt(i);
1: 			cm.release(t_findSucceed(cm, tkeyi));
1: 			cm.release(t_findCachedSucceed(cm, tkeyi));
1: 		}
1: 		cm.cleanAll();
1: 		cm.ageOut();
1: 		for (int i = 0; i < 4 * cacheSize ; i++) {
1: 			T_Key tkeyi = T_Key.simpleInt(i);
1: 			t_findCachedFail(cm, tkeyi);
1: 		}
1: 
1: 
1: 		// Ensure that we can find an object multiple times
1: 		Cacheable e1 = t_findSucceed(cm, tkey1);
1: 		Cacheable e2 = t_findSucceed(cm, tkey2);
1: 
1: 		if (e1 == e2)
1: 			throw T_Fail.testFailMsg("same object returned for two different keys");
1: 
1: 		if (t_findSucceed(cm, tkey1) != e1)
1: 			throw T_Fail.testFailMsg("different object returned for same key");
1: 		if (t_findSucceed(cm, tkey2) != e2)
1: 			throw T_Fail.testFailMsg("different object returned for same key");
1: 
1: 		cm.release(e1);
1: 		cm.release(e1);
1: 		e1 = null;
1: 		cm.release(e2);
1: 		cm.release(e2);
1: 		e2 = null;
1: 
1: 
1: 
1: 		
1: 		PASS("T001");
1: 	}
1: 
1: 
1: 
1: 
1: 	/*
1: 	** Multi-user tests
1: 	*/
1: 
1: 
1: 	protected void thrashCache(CacheManager cm, int threads, int iterations) throws T_Fail {
1: 
1: 		Thread[] children = new Thread[threads];
1: 
1: 		for (int i = 0; i < threads; i++) {
1: 
1: 			children[i] = new Thread(new T_CacheUser(cm, iterations, this, out));
1: 			
1: 		}
1: 
1: 		for (int i = 0; i < threads; i++) {
1: 			children[i].start();
1: 		}
1: 
1: 		try {
1: 			for (int i = 0; i < threads; i++) {
1: 				if (threadFail != null)
1: 					throw threadFail;
1: 
1: 				children[i].join();
1: 
1: 				if (threadFail != null)
1: 					throw threadFail;
1: 			}
1: 		} catch (InterruptedException ie) {
1: 			throw T_Fail.exceptionFail(ie);
1: 		}
1: 
1: 		PASS("thrashCache");
1: 
1: 	}
1: 	protected T_Fail threadFail;
1: 	public synchronized void setChildException(T_Fail tf) {
1: 		if (threadFail == null)
1: 			threadFail = tf;
1: 	}
1: 
1: 
1: 	/**
1: 		A call to findCached() that is expected to return nothing.
1: 		@exception StandardException  Standard Derby Error policy
1: 		@exception T_Fail Something was found.
1: 	*/
1: 	protected void t_findCachedFail(CacheManager cm, Object key) throws StandardException, T_Fail {
1: 		Cacheable entry = cm.findCached(key);
1: 		if (entry != null) {
1: 			throw T_Fail.testFailMsg("found cached item unexpectedly");
1: 		}
1: 	}
1: 
1: 	/**
1: 		A call to findCached() that is expected to find something.
1: 		@exception StandardException  Standard Derby Error policy
1: 		@exception T_Fail Nothing was found.
1: 	*/
1: 	protected Cacheable t_findCachedSucceed(CacheManager cm, Object key) throws StandardException, T_Fail {
1: 		Cacheable entry = cm.findCached(key);
1: 		if (entry == null) {
1: 			throw T_Fail.testFailMsg("expected item to be in cache");
1: 		}
1: 
1: 		if (!entry.getIdentity().equals(key))
1: 			throw T_Fail.testFailMsg("item returned does not match key");
1: 		return entry;
1: 	}
1: 	/**
1: 		A call to find() that is expected to return nothing.
1: 
1: 		@exception T_Fail Something was found.
1: 		@exception StandardException  Standard Derby Error policy
1: 	*/
1: 	protected void t_findFail(CacheManager cm, Object key) throws T_Fail, StandardException {
1: 		Cacheable entry = cm.find(key);
1: 		if (entry != null) {
1: 			throw T_Fail.testFailMsg("found item unexpectedly");
1: 		}
1: 	}
1: 
1: 	/**
1: 		A call to findCached() that is expected to find something.
1: 
1: 		@exception T_Fail Nothing was found.
1: 		@exception StandardException  Standard Derby Error policy
1: 	*/
1: 	protected Cacheable t_findSucceed(CacheManager cm, Object key) throws T_Fail, StandardException {
1: 		Cacheable entry = cm.find(key);
1: 		if (entry == null) {
1: 			throw T_Fail.testFailMsg("expected item to be found");
1: 		}
1: 		if (!entry.getIdentity().equals(key))
1: 			throw T_Fail.testFailMsg("item returned does not match key");
1: 
1: 		return entry;
1: 	}
1: }
============================================================================