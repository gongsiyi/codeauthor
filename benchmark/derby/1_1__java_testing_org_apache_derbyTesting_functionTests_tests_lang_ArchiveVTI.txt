1:10df8a5: /*
1:10df8a5: 
1:10df8a5:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI
1:10df8a5: 
1:10df8a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10df8a5:    contributor license agreements.  See the NOTICE file distributed with
1:10df8a5:    this work for additional information regarding copyright ownership.
1:10df8a5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:10df8a5:    (the "License"); you may not use this file except in compliance with
1:10df8a5:    the License.  You may obtain a copy of the License at
1:10df8a5: 
1:10df8a5:      http://www.apache.org/licenses/LICENSE-2.0
1:10df8a5: 
1:10df8a5:    Unless required by applicable law or agreed to in writing, software
1:10df8a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:10df8a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10df8a5:    See the License for the specific language governing permissions and
1:10df8a5:    limitations under the License.
1:10df8a5: 
1:10df8a5:  */
1:10df8a5: 
1:10df8a5: package org.apache.derbyTesting.functionTests.tests.lang;
1:10df8a5: 
1:10df8a5: import java.sql.Connection;
1:10df8a5: import java.sql.DatabaseMetaData;
1:10df8a5: import java.sql.DriverManager;
1:10df8a5: import java.sql.ResultSet;
1:10df8a5: import java.sql.SQLException;
1:10df8a5: import java.util.ArrayList;
1:10df8a5: 
1:10df8a5: import org.apache.derby.vti.AwareVTI;
1:10df8a5: import org.apache.derby.vti.ForeignTableVTI;
1:10df8a5: import org.apache.derby.vti.ForwardingVTI;
1:10df8a5: import org.apache.derby.vti.RestrictedVTI;
1:10df8a5: import org.apache.derby.vti.Restriction;
1:10df8a5: import org.apache.derby.vti.VTIContext;
1:10df8a5: 
1:10df8a5: /**
1:10df8a5:  * <p>
1:10df8a5:  * This table function acts like a union view on a set of archive tables.
1:10df8a5:  * The idea is that the old contents of a main table are periodically moved to
1:10df8a5:  * archive tables whose names start with $tableName$suffix. Each bulk
1:10df8a5:  * move of rows results in the creation of a new archive table. The archive
1:10df8a5:  * tables live in the same schema as the main table and have its shape. This
1:10df8a5:  * table function unions the main table together with all of its archived snapshots.
1:10df8a5:  * So, for instance, you might have the following set of tables, which this table
1:10df8a5:  * function unions together:
1:10df8a5:  * </p>
2:10df8a5:  *
1:10df8a5:  * <pre>
1:10df8a5:  *  T1
1:10df8a5:  *  T1_ARCHIVE_1
1:10df8a5:  *  T1_ARCHIVE_2
1:10df8a5:  *   ...
1:10df8a5:  *  T1_ARCHIVE_N
1:10df8a5:  * </pre>
1:10df8a5:  *
1:10df8a5:  * <p>
1:10df8a5:  * This table function may appear in user documentation. If you change the behavior
1:10df8a5:  * of this table function, make sure that you adjust the user documentation linked from
1:10df8a5:  * DERBY-6117.
1:10df8a5:  * </p>
1:10df8a5:  */
1:10df8a5: public class ArchiveVTI extends ForwardingVTI implements AwareVTI, RestrictedVTI
1:10df8a5: {
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	CONSTANTS
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	STATE
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     private Connection  _connection;
1:10df8a5:     private String          _archiveSuffix;
1:10df8a5:     private VTIContext  _vtiContext;
1:10df8a5:     private ArrayList<String>   _tableNames;
1:10df8a5:     private int         _tableIdx;
1:10df8a5:     
1:10df8a5:     private String[]    _columnNames;
1:10df8a5:     private Restriction _restriction;
1:10df8a5: 
1:10df8a5:     /////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //  TABLE FUNCTION
1:10df8a5:     //
1:10df8a5:     /////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Entry point for creating an ArchiveVTI which is bound to a Derby table function
1:10df8a5:      * by a CREATE FUNCTION statement which looks like this:
1:10df8a5:      * </p>
1:10df8a5:      *
1:10df8a5:      * <pre>
1:35b7277:      * create function t1( archiveSuffix varchar( 32672 ) ) returns table
1:35b7277:      * (
1:35b7277:      *     keyCol int,
1:35b7277:      *     aCol int,
1:35b7277:      *     bCol int
1:35b7277:      * )
1:35b7277:      * language java parameter style derby_jdbc_result_set reads sql data
1:35b7277:      * external name 'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI'
1:10df8a5:      * </pre>
1:10df8a5:      *
1:10df8a5:      * @param archiveSuffix All of the archive tables have names of the form $tablename$archiveSuffix.
1:10df8a5:      */
1:10df8a5:     public  static  ArchiveVTI  archiveVTI( String archiveSuffix ) throws SQLException
1:10df8a5:     { return new ArchiveVTI( archiveSuffix ); }
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	CONSTRUCTOR
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     /** Construct from the suffix which flags all of the relevant tables. */
1:10df8a5:     public  ArchiveVTI( String archiveSuffix )    throws SQLException
1:10df8a5:     {
1:10df8a5:         _connection = DriverManager.getConnection( "jdbc:default:connection" );
1:10df8a5:         _archiveSuffix = archiveSuffix;
1:10df8a5:     }
1:10df8a5: 
1:10df8a5:     /////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //  AwareVTI BEHAVIOR
1:10df8a5:     //
1:10df8a5:     /////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     public  VTIContext  getContext() { return _vtiContext; }
1:10df8a5:     public  void    setContext( VTIContext context )    { _vtiContext = context; }
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	RestrictedVTI BEHAVIOR
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     public  void    initScan
1:10df8a5:         ( String[] columnNames, Restriction restriction )
1:10df8a5:         throws SQLException
1:10df8a5:     {
1:10df8a5:         _columnNames = new String[ columnNames.length ];
1:10df8a5:         System.arraycopy( columnNames, 0, _columnNames, 0, columnNames.length );
1:10df8a5:         _restriction = restriction;
1:10df8a5:     }
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	ResultSet BEHAVIOR
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     public boolean next()   throws SQLException
1:10df8a5:     {
1:10df8a5:         if ( _tableNames == null )
1:10df8a5:         {
1:10df8a5:             getTableNames();
1:10df8a5:             _tableIdx = 0;
1:10df8a5:             loadResultSet();
1:10df8a5:         }
1:10df8a5: 
1:10df8a5:         while ( !super.next() )
1:10df8a5:         {
1:10df8a5:             _tableIdx++;
1:10df8a5:             if ( _tableIdx >= _tableNames.size() ) { return false; }
1:10df8a5:             loadResultSet();
1:10df8a5:         }
1:10df8a5: 
1:10df8a5:         return true;
1:10df8a5:     }
1:10df8a5: 
1:10df8a5:     public  void    close() throws SQLException
1:10df8a5:     {
1:10df8a5:         if ( getWrappedResultSet() != null ) { getWrappedResultSet().close(); }
1:10df8a5:         wrapResultSet( null );
1:10df8a5:         _connection = null;
1:10df8a5:     }
1:10df8a5: 
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5:     //
1:10df8a5:     //	UTILITY METHODS
1:10df8a5:     //
1:10df8a5:     ////////////////////////////////////////////////////////////////////////
1:10df8a5: 
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Get cursors on all the tables which we are going to union together.
1:10df8a5:      * </p>
1:10df8a5:      */
1:10df8a5:     private void    getTableNames() throws SQLException
1:10df8a5:     {
1:10df8a5:         _tableNames = new ArrayList<String>();
1:10df8a5:         _tableNames.add( getContext().vtiTable() );
1:10df8a5: 
1:10df8a5:         DatabaseMetaData    dbmd = getConnection().getMetaData();
1:10df8a5:         ResultSet   candidates = dbmd.getTables
1:10df8a5:             ( null, getContext().vtiSchema(), getContext().vtiTable() + _archiveSuffix + "%", null );
1:10df8a5: 
1:10df8a5:         while ( candidates.next() )
1:10df8a5:         {
1:10df8a5:             _tableNames.add( candidates.getString( "TABLE_NAME" ) );
1:10df8a5:         }
1:10df8a5:         candidates.close();
1:10df8a5:     }
1:10df8a5:     
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Compile the query against the next table and use its ResultSet until
1:10df8a5:      * it's drained.
1:10df8a5:      * </p>
1:10df8a5:      */
1:10df8a5:     private void    loadResultSet() throws SQLException
1:10df8a5:     {
1:10df8a5:         if ( getWrappedResultSet() != null ) { getWrappedResultSet().close(); }
1:10df8a5:         
1:10df8a5:         ForeignTableVTI     nextRS = new ForeignTableVTI
1:10df8a5:             ( getContext().vtiSchema(), _tableNames.get( _tableIdx ), getConnection() );
1:10df8a5:         nextRS.initScan( _columnNames, _restriction );
1:10df8a5: 
1:10df8a5:         wrapResultSet( nextRS );
1:10df8a5:     }
1:10df8a5: 
1:10df8a5:     /**
1:10df8a5:      * <p>
1:10df8a5:      * Get this database session's connection to the database.
1:10df8a5:      * </p>
1:10df8a5:      */
1:10df8a5:     private Connection  getConnection() throws SQLException
1:10df8a5:     {
1:10df8a5:         return _connection;
1:10df8a5:     }
1:10df8a5:     
1:10df8a5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:35b7277
/////////////////////////////////////////////////////////////////////////
1:      * create function t1( archiveSuffix varchar( 32672 ) ) returns table
1:      * (
1:      *     keyCol int,
1:      *     aCol int,
1:      *     bCol int
1:      * )
1:      * language java parameter style derby_jdbc_result_set reads sql data
1:      * external name 'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI'
commit:10df8a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.ArrayList;
1: 
1: import org.apache.derby.vti.AwareVTI;
1: import org.apache.derby.vti.ForeignTableVTI;
1: import org.apache.derby.vti.ForwardingVTI;
1: import org.apache.derby.vti.RestrictedVTI;
1: import org.apache.derby.vti.Restriction;
1: import org.apache.derby.vti.VTIContext;
1: 
1: /**
1:  * <p>
1:  * This table function acts like a union view on a set of archive tables.
1:  * The idea is that the old contents of a main table are periodically moved to
1:  * archive tables whose names start with $tableName$suffix. Each bulk
1:  * move of rows results in the creation of a new archive table. The archive
1:  * tables live in the same schema as the main table and have its shape. This
1:  * table function unions the main table together with all of its archived snapshots.
1:  * So, for instance, you might have the following set of tables, which this table
1:  * function unions together:
1:  * </p>
1:  *
1:  * <pre>
1:  *  T1
1:  *  T1_ARCHIVE_1
1:  *  T1_ARCHIVE_2
1:  *   ...
1:  *  T1_ARCHIVE_N
1:  * </pre>
1:  *
1:  * <p>
1:  * This table function may appear in user documentation. If you change the behavior
1:  * of this table function, make sure that you adjust the user documentation linked from
1:  * DERBY-6117.
1:  * </p>
1:  */
1: public class ArchiveVTI extends ForwardingVTI implements AwareVTI, RestrictedVTI
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private Connection  _connection;
1:     private String          _archiveSuffix;
1:     private VTIContext  _vtiContext;
1:     private ArrayList<String>   _tableNames;
1:     private int         _tableIdx;
1:     
1:     private String[]    _columnNames;
1:     private Restriction _restriction;
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  TABLE FUNCTION
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Entry point for creating an ArchiveVTI which is bound to a Derby table function
1:      * by a CREATE FUNCTION statement which looks like this:
1:      * </p>
1:      *
1:      * <pre>
1:      *
1:      * </pre>
1:      *
1:      * @param archiveSuffix All of the archive tables have names of the form $tablename$archiveSuffix.
1:      */
1:     public  static  ArchiveVTI  archiveVTI( String archiveSuffix ) throws SQLException
1:     { return new ArchiveVTI( archiveSuffix ); }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct from the suffix which flags all of the relevant tables. */
1:     public  ArchiveVTI( String archiveSuffix )    throws SQLException
1:     {
1:         _connection = DriverManager.getConnection( "jdbc:default:connection" );
1:         _archiveSuffix = archiveSuffix;
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  AwareVTI BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     public  VTIContext  getContext() { return _vtiContext; }
1:     public  void    setContext( VTIContext context )    { _vtiContext = context; }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	RestrictedVTI BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    initScan
1:         ( String[] columnNames, Restriction restriction )
1:         throws SQLException
1:     {
1:         _columnNames = new String[ columnNames.length ];
1:         System.arraycopy( columnNames, 0, _columnNames, 0, columnNames.length );
1:         _restriction = restriction;
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	ResultSet BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean next()   throws SQLException
1:     {
1:         if ( _tableNames == null )
1:         {
1:             getTableNames();
1:             _tableIdx = 0;
1:             loadResultSet();
1:         }
1: 
1:         while ( !super.next() )
1:         {
1:             _tableIdx++;
1:             if ( _tableIdx >= _tableNames.size() ) { return false; }
1:             loadResultSet();
1:         }
1: 
1:         return true;
1:     }
1: 
1:     public  void    close() throws SQLException
1:     {
1:         if ( getWrappedResultSet() != null ) { getWrappedResultSet().close(); }
1:         wrapResultSet( null );
1:         _connection = null;
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	UTILITY METHODS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get cursors on all the tables which we are going to union together.
1:      * </p>
1:      */
1:     private void    getTableNames() throws SQLException
1:     {
1:         _tableNames = new ArrayList<String>();
1:         _tableNames.add( getContext().vtiTable() );
1: 
1:         DatabaseMetaData    dbmd = getConnection().getMetaData();
1:         ResultSet   candidates = dbmd.getTables
1:             ( null, getContext().vtiSchema(), getContext().vtiTable() + _archiveSuffix + "%", null );
1: 
1:         while ( candidates.next() )
1:         {
1:             _tableNames.add( candidates.getString( "TABLE_NAME" ) );
1:         }
1:         candidates.close();
1:     }
1:     
1:     /**
1:      * <p>
1:      * Compile the query against the next table and use its ResultSet until
1:      * it's drained.
1:      * </p>
1:      */
1:     private void    loadResultSet() throws SQLException
1:     {
1:         if ( getWrappedResultSet() != null ) { getWrappedResultSet().close(); }
1:         
1:         ForeignTableVTI     nextRS = new ForeignTableVTI
1:             ( getContext().vtiSchema(), _tableNames.get( _tableIdx ), getConnection() );
1:         nextRS.initScan( _columnNames, _restriction );
1: 
1:         wrapResultSet( nextRS );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get this database session's connection to the database.
1:      * </p>
1:      */
1:     private Connection  getConnection() throws SQLException
1:     {
1:         return _connection;
1:     }
1:     
1: }
============================================================================