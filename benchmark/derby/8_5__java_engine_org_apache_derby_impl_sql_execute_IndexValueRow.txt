1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.IndexValueRow
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:8bae7cf: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:8bae7cf: import org.apache.derby.iapi.services.io.Storable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: /**
1:eac0369: 	Mapper of ValueRow into ExecIndexRow. 
1:eac0369: 
1:eac0369:  */
1:eac0369: class IndexValueRow implements ExecIndexRow {
1:eac0369: 
1:eac0369: 	private ExecRow valueRow;
1:eac0369: 
1:eac0369: 	IndexValueRow(ExecRow valueRow) {
1:eac0369: 		 this.valueRow = valueRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 	public String toString() {
1:eac0369: 		return valueRow.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the array form of the row that Access expects.
1:eac0369: 
1:eac0369: 		@see ExecRow#getRowArray
1:eac0369: 	*/
1:eac0369: 	public DataValueDescriptor[] getRowArray() {
1:eac0369: 		return valueRow.getRowArray();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**	@see ExecRow#getRowArray */
1:eac0369: 	public void setRowArray(DataValueDescriptor[] value) 
2:eac0369: 	{
2:eac0369: 		valueRow.setRowArray(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a clone of the array form of the row that Access expects.
1:eac0369: 
1:eac0369: 		@see ExecRow#getRowArray
1:eac0369: 	*/
1:9495437: 	public DataValueDescriptor[] getRowArrayClone() 
1:eac0369: 	{
1:eac0369: 		return valueRow.getRowArrayClone();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// this is the actual current # of columns
1:eac0369: 	public int nColumns() {
1:eac0369: 		return valueRow.nColumns();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Row interface
1:eac0369: 	 */
1:eac0369: 	// position is 1-based
1:eac0369: 	public DataValueDescriptor	getColumn (int position) throws StandardException {
1:eac0369: 		return valueRow.getColumn(position);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// position is 1-based.
1:eac0369: 	public void setColumn(int position, DataValueDescriptor col) {
1:eac0369: 		valueRow.setColumn(position, col);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// position is 1-based
1:9495437: 	public ExecRow getClone() {
1:eac0369: 		return new IndexValueRow(valueRow.getClone());
1:eac0369: 	}
1:eac0369: 
1:9495437: 	public ExecRow getClone(FormatableBitSet clonedCols) {
1:eac0369: 		return new IndexValueRow(valueRow.getClone(clonedCols));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ExecRow getNewNullRow() {
1:eac0369: 		return new IndexValueRow(valueRow.getNewNullRow());
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:109cb26:      * Reset all columns in the row array to null values.
1:eac0369:      */
1:109cb26:     public void resetRowArray() {
1:109cb26:         valueRow.resetRowArray();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	// position is 1-based
1:eac0369: 	public DataValueDescriptor cloneColumn(int columnPosition)
1:eac0369: 	{
1:eac0369: 		return valueRow.cloneColumn(columnPosition);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * ExecIndexRow interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void orderedNulls(int columnPosition) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.THROWASSERT("Not expected to be called");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean areNullsOrdered(int columnPosition) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.THROWASSERT("Not expected to be called");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Turn the ExecRow into an ExecIndexRow.
1:eac0369: 	 */
1:eac0369: 	public void execRowToExecIndexRow(ExecRow valueRow)
1:eac0369: 	{
1:eac0369: 		this.valueRow = valueRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void getNewObjectArray() 
1:eac0369: 	{
1:eac0369: 		valueRow.getNewObjectArray();
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
1: 	public DataValueDescriptor[] getRowArrayClone() 
/////////////////////////////////////////////////////////////////////////
1: 	public ExecRow getClone() {
1: 	public ExecRow getClone(FormatableBitSet clonedCols) {
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0: 	public DataValueDescriptor[] getRowArrayClone()
0:         throws StandardException
/////////////////////////////////////////////////////////////////////////
0: 	public ExecRow getClone() throws StandardException {
0: 	public ExecRow getClone(FormatableBitSet clonedCols) throws StandardException {
/////////////////////////////////////////////////////////////////////////
0:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e8e04bf
/////////////////////////////////////////////////////////////////////////
commit:8bae7cf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.IndexValueRow
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import java.sql.ResultSet;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 	Mapper of ValueRow into ExecIndexRow. 
1: 
0: 	@author ames
1:  */
1: class IndexValueRow implements ExecIndexRow {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private ExecRow valueRow;
1: 
1: 	IndexValueRow(ExecRow valueRow) {
1: 		 this.valueRow = valueRow;
1: 	}
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 	public String toString() {
1: 		return valueRow.toString();
1: 	}
1: 
1: 
1: 	/**
1: 		Get the array form of the row that Access expects.
1: 
1: 		@see ExecRow#getRowArray
1: 	*/
1: 	public DataValueDescriptor[] getRowArray() {
1: 		return valueRow.getRowArray();
1: 	}
1: 
1: 	/**	@see ExecRow#getRowArray */
1: 	public void setRowArray(DataValueDescriptor[] value) 
1: 	{
1: 		valueRow.setRowArray(value);
1: 	}
0: 	public void setRowArray(Storable[] value) 
1: 	{
1: 		valueRow.setRowArray(value);
1: 	}
1: 
1: 	/**
1: 		Get a clone of the array form of the row that Access expects.
1: 
1: 		@see ExecRow#getRowArray
1: 	*/
0: 	public DataValueDescriptor[] getRowArrayClone() 
1: 	{
1: 		return valueRow.getRowArrayClone();
1: 	}
1: 
1: 	// this is the actual current # of columns
1: 	public int nColumns() {
1: 		return valueRow.nColumns();
1: 	}
1: 
1: 	/*
1: 	 * Row interface
1: 	 */
1: 	// position is 1-based
1: 	public DataValueDescriptor	getColumn (int position) throws StandardException {
1: 		return valueRow.getColumn(position);
1: 	}
1: 
1: 	// position is 1-based.
1: 	public void setColumn(int position, DataValueDescriptor col) {
1: 		valueRow.setColumn(position, col);
1: 	}
1: 
1: 	// position is 1-based
0: 	public ExecRow getClone() {
1: 		return new IndexValueRow(valueRow.getClone());
1: 	}
1: 
0: 	public ExecRow getClone(FormatableBitSet clonedCols) {
1: 		return new IndexValueRow(valueRow.getClone(clonedCols));
1: 	}
1: 
1: 	public ExecRow getNewNullRow() {
1: 		return new IndexValueRow(valueRow.getNewNullRow());
1: 	}
1: 
1: 	// position is 1-based
1: 	public DataValueDescriptor cloneColumn(int columnPosition)
1: 	{
1: 		return valueRow.cloneColumn(columnPosition);
1: 	}
1: 
1: 	/*
1: 	 * ExecIndexRow interface
1: 	 */
1: 
1: 	public void orderedNulls(int columnPosition) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.THROWASSERT("Not expected to be called");
1: 		}
1: 	}
1: 
1: 	public boolean areNullsOrdered(int columnPosition) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.THROWASSERT("Not expected to be called");
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Turn the ExecRow into an ExecIndexRow.
0: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void execRowToExecIndexRow(ExecRow valueRow)
1: 	{
1: 		this.valueRow = valueRow;
1: 	}
1: 
1: 	public void getNewObjectArray() 
1: 	{
1: 		valueRow.getNewObjectArray();
1: 	}
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:109cb26
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Reset all columns in the row array to null values.
0:      */
1:     public void resetRowArray() {
1:         valueRow.resetRowArray();
0:     }
0: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import java.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 	Mapper of ValueRow into ExecIndexRow. 
0: 
0: 	@author ames
0:  */
0: class IndexValueRow implements ExecIndexRow {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private ExecRow valueRow;
0: 
0: 	IndexValueRow(ExecRow valueRow) {
0: 		 this.valueRow = valueRow;
0: 	}
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 	public String toString() {
0: 		return valueRow.toString();
0: 	}
0: 
0: 
0: 	/**
0: 		Get the array form of the row that Access expects.
0: 
0: 		@see ExecRow#getRowArray
0: 	*/
0: 	public DataValueDescriptor[] getRowArray() {
0: 		return valueRow.getRowArray();
0: 	}
0: 
0: 	/**	@see ExecRow#getRowArray */
0: 	public void setRowArray(DataValueDescriptor[] value) 
0: 	{
0: 		valueRow.setRowArray(value);
0: 	}
0: 	public void setRowArray(Storable[] value) 
0: 	{
0: 		valueRow.setRowArray(value);
0: 	}
0: 
0: 	/**
0: 		Get a clone of the array form of the row that Access expects.
0: 
0: 		@see ExecRow#getRowArray
0: 	*/
0: 	public DataValueDescriptor[] getRowArrayClone() 
0: 	{
0: 		return valueRow.getRowArrayClone();
0: 	}
0: 
0: 	// this is the actual current # of columns
0: 	public int nColumns() {
0: 		return valueRow.nColumns();
0: 	}
0: 
0: 	/*
0: 	 * Row interface
0: 	 */
0: 	// position is 1-based
0: 	public DataValueDescriptor	getColumn (int position) throws StandardException {
0: 		return valueRow.getColumn(position);
0: 	}
0: 
0: 	// position is 1-based.
0: 	public void setColumn(int position, DataValueDescriptor col) {
0: 		valueRow.setColumn(position, col);
0: 	}
0: 
0: 	// position is 1-based
0: 	public ExecRow getClone() {
0: 		return new IndexValueRow(valueRow.getClone());
0: 	}
0: 
0: 	public ExecRow getClone(FormatableBitSet clonedCols) {
0: 		return new IndexValueRow(valueRow.getClone(clonedCols));
0: 	}
0: 
0: 	public ExecRow getNewNullRow() {
0: 		return new IndexValueRow(valueRow.getNewNullRow());
0: 	}
0: 
0: 	// position is 1-based
0: 	public DataValueDescriptor cloneColumn(int columnPosition)
0: 	{
0: 		return valueRow.cloneColumn(columnPosition);
0: 	}
0: 
0: 	/*
0: 	 * ExecIndexRow interface
0: 	 */
0: 
0: 	public void orderedNulls(int columnPosition) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.THROWASSERT("Not expected to be called");
0: 		}
0: 	}
0: 
0: 	public boolean areNullsOrdered(int columnPosition) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.THROWASSERT("Not expected to be called");
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Turn the ExecRow into an ExecIndexRow.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void execRowToExecIndexRow(ExecRow valueRow)
0: 	{
0: 		this.valueRow = valueRow;
0: 	}
0: 
0: 	public void getNewObjectArray() 
0: 	{
0: 		valueRow.getNewObjectArray();
0: 	}
0: }
============================================================================