1:9bbe2e4: /*
1:9bbe2e4:  * 
1:9bbe2e4:  * Derby - Class org.apache.derbyTesting.system.mailjdbc.tasks.Refresh
1:9bbe2e4:  * 
1:9bbe2e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9bbe2e4:  * contributor license agreements. See the NOTICE file distributed with this
1:9bbe2e4:  * work for additional information regarding copyright ownership. The ASF
1:9bbe2e4:  * licenses this file to You under the Apache License, Version 2.0 (the
1:9bbe2e4:  * "License"); you may not use this file except in compliance with the License.
1:9bbe2e4:  * You may obtain a copy of the License at
1:9bbe2e4:  * 
1:9bbe2e4:  * http://www.apache.org/licenses/LICENSE-2.0
1:9bbe2e4:  * 
1:9bbe2e4:  * Unless required by applicable law or agreed to in writing, software
1:9bbe2e4:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:9bbe2e4:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:9bbe2e4:  * License for the specific language governing permissions and limitations under
1:9bbe2e4:  * the License.
1:9bbe2e4:  *  
1:9bbe2e4:  */
1:9bbe2e4: package org.apache.derbyTesting.system.mailjdbc.tasks;
1:9bbe2e4: /**
1:9bbe2e4:  * This class is used to insert, delete and update the rows
1:9bbe2e4:  */
2:9bbe2e4: 
1:9bbe2e4: import java.sql.Connection;
1:a216dfd: import java.sql.SQLException;
1:9bbe2e4: 
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.MailJdbc;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.utils.DbTasks;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.utils.LogFile;
1:9bbe2e4: 
1:9bbe2e4: public class Refresh extends Thread {
1:9bbe2e4: 	//This is the thread which does most of the work.
1:9bbe2e4: 	private boolean isRunning = false;
1:9bbe2e4: 
1:9bbe2e4: 	private DbTasks dbtasks = new DbTasks();
1:9bbe2e4: 
1:58a99b7: 	private Connection conn = null;
1:9bbe2e4: 
1:58a99b7: 	public Refresh(String name) throws Exception{
1:9bbe2e4: 		//sets the thread name
1:9bbe2e4: 		setName(name);
1:58a99b7: 		conn = DbTasks.getConnection("REFRESH", "Refresh");
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public void run() {
1:9bbe2e4: 		try {
1:9bbe2e4: 			//Applying permission to other threads/users
1:9bbe2e4: 			grantRevoke(conn, this.getName());
1:9bbe2e4: 			while (true) {
1:9bbe2e4: 				doWork();
1:9bbe2e4: 				try {
1:a216dfd: 					Thread.sleep(150000);
1:9bbe2e4: 				} catch (InterruptedException ie) {
1:9bbe2e4: 					MailJdbc.logAct.logMsg("#### " + getName()
1:9bbe2e4: 							+ "...Interrupted");
1:a216dfd: 					conn.commit();
1:a216dfd: 					MailJdbc.logAct.logMsg("#### " + getName()
1:a216dfd: 							+ "...commit connection...");
1:9bbe2e4: 				}
1:9bbe2e4: 			}
1:9bbe2e4: 		} catch (Exception e) {
1:9bbe2e4: 			e.printStackTrace();
1:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.ERROR
1:9bbe2e4: 					+ "Error while sleeping the thread in refresh: "
1:9bbe2e4: 					+ e.getMessage());
1:9bbe2e4: 		}
1:9bbe2e4: 
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	/**
1:9bbe2e4: 	 * @throws InterruptedException
1:9bbe2e4: 	 */
1:9bbe2e4: 	private void doWork() {
1:9bbe2e4: 		isRunning = true;
1:9bbe2e4: 		//Thread is running and does inserting the mails and deleting the mails
1:9bbe2e4: 		try {
1:9bbe2e4: 			insertMail(conn, this.getName());
1:a216dfd: 			//Try to avoid deadlock situation by Purge thread
1:a216dfd:             Thread.sleep(60000);
1:9bbe2e4: 		} catch (Exception e) {
1:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.ERROR + "insertMail() failed "
1:9bbe2e4: 					+ e.getMessage());
1:9bbe2e4: 		}
1:9bbe2e4: 		try {
1:a216dfd: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Deleting mail by Refresh Thread : ");
1:9bbe2e4: 			deleteMailByRefresh(conn, this.getName());
1:9bbe2e4: 		} catch (Exception e) {
1:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.ERROR
1:9bbe2e4: 					+ "deleteMailByRefresh() failed " + e.getMessage());
1:a216dfd: 			try {
1:a216dfd: 				conn.rollback();
1:a216dfd: 			} catch (SQLException se) {
1:a216dfd: 				MailJdbc.logAct.logMsg(LogFile.ERROR
1:a216dfd: 						+ "rollback connection on Refresh failed..."
1:a216dfd: 						+ se.getMessage());
1:a216dfd: 			}  			
1:a216dfd: 			MailJdbc.logAct.logMsg("#### " + getName()
1:a216dfd: 					+ "...rollback connection after deleteMailByRefresh...");
1:9bbe2e4: 		}
1:9bbe2e4: 		MailJdbc.logAct.logMsg(LogFile.INFO + "Refresh doWork() completed");
1:a216dfd: 		isRunning = false;
1:9bbe2e4: 	}
1:a216dfd: 
1:9bbe2e4: 
1:9bbe2e4: 	public void grantRevoke(Connection conn, String thread_name)
1:9bbe2e4: 			throws Exception {
1:9bbe2e4: 		dbtasks.grantRevoke(conn, thread_name);
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public void insertMail(Connection conn, String thread_name)
1:9bbe2e4: 			throws Exception {
1:9bbe2e4: 		dbtasks.insertMail(conn, thread_name);
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public void deleteMailByRefresh(Connection conn, String thread_name)
1:9bbe2e4: 			throws Exception {
1:9bbe2e4: 
1:9bbe2e4: 		dbtasks.deleteMailByThread(conn, thread_name);
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	/**
1:9bbe2e4: 	 * @return Returns the isRunning.
1:9bbe2e4: 	 */
1:9bbe2e4: 	public boolean isRunning() {
1:9bbe2e4: 		return isRunning;
1:9bbe2e4: 	}
1:9bbe2e4: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:a216dfd
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1: 					Thread.sleep(150000);
1: 					conn.commit();
1: 					MailJdbc.logAct.logMsg("#### " + getName()
1: 							+ "...commit connection...");
/////////////////////////////////////////////////////////////////////////
1: 			//Try to avoid deadlock situation by Purge thread
1:             Thread.sleep(60000);
1: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Deleting mail by Refresh Thread : ");
1: 			try {
1: 				conn.rollback();
1: 			} catch (SQLException se) {
1: 				MailJdbc.logAct.logMsg(LogFile.ERROR
1: 						+ "rollback connection on Refresh failed..."
1: 						+ se.getMessage());
1: 			}  			
1: 			MailJdbc.logAct.logMsg("#### " + getName()
1: 					+ "...rollback connection after deleteMailByRefresh...");
1: 		isRunning = false;
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:58a99b7
/////////////////////////////////////////////////////////////////////////
1: 	private Connection conn = null;
1: 	public Refresh(String name) throws Exception{
1: 		conn = DbTasks.getConnection("REFRESH", "Refresh");
commit:9bbe2e4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Derby - Class org.apache.derbyTesting.system.mailjdbc.tasks.Refresh
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  *  
1:  */
1: package org.apache.derbyTesting.system.mailjdbc.tasks;
1: /**
1:  * This class is used to insert, delete and update the rows
1:  */
1: 
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.mailjdbc.MailJdbc;
1: import org.apache.derbyTesting.system.mailjdbc.utils.DbTasks;
1: import org.apache.derbyTesting.system.mailjdbc.utils.LogFile;
1: 
1: public class Refresh extends Thread {
1: 	//This is the thread which does most of the work.
1: 	private boolean isRunning = false;
1: 
1: 	private DbTasks dbtasks = new DbTasks();
1: 
0: 	private Connection conn = DbTasks.getConnection("REFRESH", "Refresh");
1: 
0: 	public Refresh(String name) {
1: 		//sets the thread name
1: 		setName(name);
1: 	}
1: 
1: 	public void run() {
1: 		try {
1: 			//Applying permission to other threads/users
1: 			grantRevoke(conn, this.getName());
1: 			while (true) {
1: 				doWork();
1: 				try {
0: 					Thread.sleep(60000);
1: 				} catch (InterruptedException ie) {
1: 					MailJdbc.logAct.logMsg("#### " + getName()
1: 							+ "...Interrupted");
1: 				}
1: 			}
1: 		} catch (Exception e) {
1: 			e.printStackTrace();
1: 			MailJdbc.logAct.logMsg(LogFile.ERROR
1: 					+ "Error while sleeping the thread in refresh: "
1: 					+ e.getMessage());
1: 		}
1: 
1: 	}
1: 
1: 	/**
1: 	 * @throws InterruptedException
1: 	 */
1: 	private void doWork() {
1: 		isRunning = true;
1: 		//Thread is running and does inserting the mails and deleting the mails
1: 		try {
1: 			insertMail(conn, this.getName());
1: 
1: 		} catch (Exception e) {
1: 			MailJdbc.logAct.logMsg(LogFile.ERROR + "insertMail() failed "
1: 					+ e.getMessage());
1: 		}
1: 		try {
0: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Deleting mail by refresh");
1: 			deleteMailByRefresh(conn, this.getName());
1: 		} catch (Exception e) {
1: 			MailJdbc.logAct.logMsg(LogFile.ERROR
1: 					+ "deleteMailByRefresh() failed " + e.getMessage());
1: 		}
0: 		isRunning = false;
1: 		MailJdbc.logAct.logMsg(LogFile.INFO + "Refresh doWork() completed");
1: 	}
1: 
1: 	public void grantRevoke(Connection conn, String thread_name)
1: 			throws Exception {
1: 		dbtasks.grantRevoke(conn, thread_name);
1: 	}
1: 
1: 	public void insertMail(Connection conn, String thread_name)
1: 			throws Exception {
1: 		dbtasks.insertMail(conn, thread_name);
1: 	}
1: 
1: 	public void deleteMailByRefresh(Connection conn, String thread_name)
1: 			throws Exception {
1: 
1: 		dbtasks.deleteMailByThread(conn, thread_name);
1: 	}
1: 
1: 	/**
1: 	 * @return Returns the isRunning.
1: 	 */
1: 	public boolean isRunning() {
1: 		return isRunning;
1: 	}
1: }
============================================================================