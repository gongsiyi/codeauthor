1:0a1be27: /*
1:0a1be27:  *
1:0a1be27:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLXXETest.java
1:0a1be27:  *
1:0a1be27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0a1be27:  * contributor license agreements.  See the NOTICE file distributed with
1:0a1be27:  * this work for additional information regarding copyright ownership.
1:0a1be27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0a1be27:  * (the "License"); you may not use this file except in compliance with
1:0a1be27:  * the License.  You may obtain a copy of the License at
1:0a1be27:  *
1:0a1be27:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0a1be27:  *
1:0a1be27:  * Unless required by applicable law or agreed to in writing, 
1:0a1be27:  * software distributed under the License is distributed on an 
1:0a1be27:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:0a1be27:  * either express or implied. See the License for the specific 
1:0a1be27:  * language governing permissions and limitations under the License.
1:0a1be27:  */
1:0a1be27: package org.apache.derbyTesting.functionTests.tests.lang;
3:0a1be27: 
1:0a1be27: import java.io.File;
1:0a1be27: import java.io.PrintWriter;
1:5c8e293: import java.net.URL;
1:0a1be27: 
1:0a1be27: import java.sql.ResultSet;
1:0a1be27: import java.sql.SQLException;
1:0a1be27: import java.sql.Statement;
1:3592c63: import java.util.Locale;
1:0a1be27: 
1:0a1be27: import junit.framework.Test;
1:0a1be27: 
1:0a1be27: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:0a1be27: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0a1be27: import org.apache.derbyTesting.junit.JDBC;
1:3592c63: import org.apache.derbyTesting.junit.LocaleTestSetup;
1:0a1be27: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:5c8e293: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:0a1be27: import org.apache.derbyTesting.junit.TestConfiguration;
1:0a1be27: import org.apache.derbyTesting.junit.XML;
1:0a1be27: 
1:0a1be27: /**
1:0a1be27:  * XMLXXETest this test suite runs with NO SECURITY MANAGER. It is designed
1:0a1be27:  * to explore the so-called XXE family of vulnerabilities. For more
1:0a1be27:  * information, try:
1:0a1be27:  *
1:0a1be27:  * http://h3xstream.github.io/find-sec-bugs/bugs.htm#XXE_DOCUMENT
1:0a1be27:  * https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing
1:0a1be27:  * http://www.ws-attacks.org/index.php/XML_Entity_Expansion
1:0a1be27:  * http://www.ws-attacks.org/index.php/XML_External_Entity_DOS
1:0a1be27:  * http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack
1:0a1be27:  */
1:0a1be27: public final class XMLXXETest extends BaseJDBCTestCase {
1:0a1be27:     
1:0a1be27:     public XMLXXETest(String name)
1:0a1be27:     {
1:0a1be27:         super(name);
1:0a1be27:     }
1:0a1be27: 
1:0a1be27:     /**
1:0a1be27:      * Only return a suite IF the testing classpath has the
1:0a1be27:      * required XML classes.  Otherwise just return an empty suite.
1:0a1be27:      */
1:0a1be27:     public static Test suite()
1:0a1be27:     {
1:0a1be27:         BaseTestSuite suite =
1:0a1be27:             new BaseTestSuite("XML XXE Vulnerability tests\n");
1:0a1be27: 
1:0a1be27:         if (!XML.classpathMeetsXMLReqs())
1:0a1be27:             return suite;
1:0a1be27: 
1:5c8e293: 	String[] testFiles = new String[] {
1:5c8e293: 	    "functionTests/tests/lang/xmlOptimizerXXE1Payload.trace",
1:5c8e293: 	    "functionTests/tests/lang/xmlOptimizerXXE1.trace",
1:5c8e293: 	    "functionTests/tests/lang/xmlOptimizerXXE2.trace"
1:5c8e293: 	};
1:5c8e293: 
1:5c8e293:         suite.addTest( new SupportFilesSetup( 
1:5c8e293: 			TestConfiguration.defaultSuite(XMLXXETest.class),
1:5c8e293: 			testFiles ) );
1:5c8e293: 
1:3592c63:         // Need to run in US locale because the test checks error messages
1:3592c63:         // which may be different in different locales (DERBY-6869).
1:3592c63:         return new LocaleTestSetup(
1:3592c63:                 SecurityManagerSetup.noSecurityManager(suite),
1:3592c63:                 Locale.US);
1:0a1be27:     }
1:0a1be27:  
1:0a1be27:     /**
1:0a1be27:      * Test for Derby-6807. We create a file with some (presumably sensitive)
1:0a1be27:      * data in it, and check whether an XML query can be tricked into reading
1:0a1be27:      * the data from that file. If it can, a security leak has occurred.
1:0a1be27:      */
1:0a1be27: 
1:0a1be27:     public void testDerby6807FileAccess ()
1:0a1be27: 			throws Exception
1:0a1be27:     {
1:0a1be27:         File password = null;
1:0a1be27:         String path;
1:0a1be27: 
1:0a1be27:         password = new File("test6807.txt");
1:0a1be27:         PrintWriter writer = new PrintWriter("test6807.txt", "UTF-8");
1:0a1be27:         writer.print("HelloWorld");
1:0a1be27:         writer.close();
1:0a1be27:         path = password.getAbsolutePath();
1:0a1be27:         
1:0a1be27:         Statement s = createStatement();
1:0a1be27:         
1:0a1be27:         s.execute("CREATE TABLE xml_data(xml_col XML)");
1:0a1be27: 
1:94baca2:         String stmt = "INSERT INTO xml_data(xml_col) VALUES(XMLPARSE(DOCUMENT" 
1:0a1be27:                 + "'<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:"
1:0a1be27:                 + path +"\" >]><yolo>&xxe;</yolo>'"
1:94baca2:                 + "PRESERVE WHITESPACE))";
1:94baca2: 
1:94baca2: 	// System.out.println( stmt );
1:94baca2: 
1:94baca2: 	s.execute( stmt );
1:0a1be27: 
1:0a1be27:         JDBC.assertSingleValueResultSet(
1:0a1be27:                 s.executeQuery(
1:0a1be27: 	            "SELECT XMLSERIALIZE(xml_col AS CLOB) FROM xml_data"),
1:a72ebf9: 	            "<yolo/>");
1:0a1be27: 
1:0a1be27:         password.delete();
1:0a1be27:     }
1:0a1be27: 
1:fa89f79:     public void testDerby6807BillionLaughs() throws SQLException
1:fa89f79:     {
1:fa89f79:         Statement st = createStatement();
1:fa89f79:         st.executeUpdate("create table xml_billion_laughs( xml_col xml )");
1:fa89f79: 
1:fa89f79: String xmlBillionLaughs = "insert into xml_billion_laughs( xml_col ) values(" +
1:fa89f79:                          " xmlparse(document '" +
1:fa89f79: "<!DOCTYPE lolz [" +
1:fa89f79: " <!ENTITY lol \"lol\">" +
1:fa89f79: " <!ELEMENT lolz (#PCDATA)>" +
1:fa89f79: " <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">" +
1:fa89f79: " <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">" +
1:fa89f79: " <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">" +
1:fa89f79: " <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">" +
1:fa89f79: " <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">" +
1:fa89f79: " <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">" +
1:fa89f79: " <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">" +
1:fa89f79: " <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">" +
1:fa89f79: " <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">" +
1:fa89f79: "]>" +
1:fa89f79: "<lolz>&lol9;</lolz>' PRESERVE WHITESPACE))";
1:fa89f79: 
1:fa89f79: 	assertStatementError( "2200M", st, xmlBillionLaughs );
1:fa89f79: 
1:fa89f79: 	// Since we can't even parse the document, we never get to the point
1:fa89f79: 	// where we might try to serialize it back out.
1:fa89f79:         //    "select xmlserialize(xml_col as clob) from xml_billion_laughs");
1:fa89f79:     }
1:fa89f79: 
1:5c8e293:     public void testDerby6807FileAccessVTI()
1:5c8e293: 		throws Exception
1:5c8e293:     {
1:5c8e293: 	String VULNERABLE_XML = "xmlOptimizerXXE1.trace";
1:5c8e293: 	URL     traceURL = SupportFilesSetup.getReadOnlyURL( VULNERABLE_XML );
1:5c8e293: 	//URL payloadURL = SupportFilesSetup.getReadOnlyURL(
1:5c8e293: 	//			"xmlOptimizerXXE1Payload.trace" );
1:5c8e293: 
1:5c8e293:         Statement s = createStatement();
1:5c8e293: 	s.execute(
1:5c8e293:              "create function decorationURLChildOnly\n" +
1:5c8e293:              "(\n" +
1:5c8e293:              "    urlString varchar( 32672 ),\n" +
1:5c8e293:              "    rowTag varchar( 32672 ),\n" +
1:5c8e293:              "    childTags varchar( 32672 )...\n" +
1:5c8e293:              ")\n" +
1:5c8e293:              "returns table\n" +
1:5c8e293:              "(\n" +
1:5c8e293:              "        conglomerateName varchar( 36 ),\n" +
1:5c8e293:              "        joinStrategy varchar( 200 ),\n" +
1:5c8e293:              "        estimatedCost double,\n" +
1:5c8e293:              "        estimatedRowCount varchar( 200 )\n" +
1:5c8e293:              ")\n" +
1:5c8e293:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:5c8e293:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:5c8e293:              );
1:5c8e293: 	s.execute(
1:5c8e293:              "create view decorationURLChildOnly as\n" +
1:5c8e293:              "select * from table\n" +
1:5c8e293:              "(\n" +
1:5c8e293:              "    decorationURLChildOnly\n" +
1:5c8e293:              "    (\n" +
1:5c8e293:              "        '" + traceURL.toString() + "',\n" +
1:5c8e293:              "        'decoration',\n" +
1:5c8e293:              "        'decConglomerateName', 'decJoinStrategy',\n" +
1:5c8e293: 	     "        'ceEstimatedCost', 'ceEstimatedRowCount'\n" +
1:5c8e293:              "    )\n" +
1:5c8e293:              ") v\n"
1:5c8e293:              );
1:5c8e293: 	ResultSet rs = s.executeQuery(
1:5c8e293:              "select distinct conglomerateName, joinStrategy," +
1:5c8e293: 	     "                estimatedCost, estimatedRowCount\n" +
1:5c8e293:              "from decorationURLChildOnly\n" +
1:5c8e293:              "where conglomerateName like '%_A' and " +
1:5c8e293: 	     "      estimatedCost is not null\n" +
1:5c8e293:              "order by conglomerateName, joinStrategy, " +
1:5c8e293: 	     "         estimatedCost, estimatedRowCount\n"
1:5c8e293:              );
1:5c8e293: 	assertTrue( rs.next() );
1:5c8e293: 
1:7643f96: 	assertEquals( "null", rs.getString( 4 ).trim() );
1:5c8e293: 
1:5c8e293: 	assertFalse( rs.next() );
1:5c8e293:     }
1:5c8e293: 
1:5c8e293:     public void testDerby6807BillionLaughsVTI()
1:5c8e293: 		throws Exception
1:5c8e293:     {
1:5c8e293: 	String VULNERABLE_XML = "xmlOptimizerXXE2.trace";
1:5c8e293: 	URL     traceURL = SupportFilesSetup.getReadOnlyURL( VULNERABLE_XML );
1:5c8e293: 
1:5c8e293:         Statement s = createStatement();
1:5c8e293: 	s.execute(
1:5c8e293:              "create function lolzURL\n" +
1:5c8e293:              "(\n" +
1:5c8e293:              "    urlString varchar( 32672 ),\n" +
1:5c8e293:              "    rowTag varchar( 32672 ),\n" +
1:5c8e293:              "    childTags varchar( 32672 )...\n" +
1:5c8e293:              ")\n" +
1:5c8e293:              "returns table\n" +
1:5c8e293:              "(\n" +
1:5c8e293:              "        lolz varchar( 32000 )\n" +
1:5c8e293:              ")\n" +
1:5c8e293:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:5c8e293:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:5c8e293:              );
1:5c8e293: 	s.execute(
1:5c8e293:              "create view lolzURL as\n" +
1:5c8e293:              "select * from table\n" +
1:5c8e293:              "(\n" +
1:5c8e293:              "    lolzURL\n" +
1:5c8e293:              "    (\n" +
1:5c8e293:              "        '" + traceURL.toString() + "',\n" +
1:5c8e293:              "        'lolz'\n" +
1:5c8e293:              "    )\n" +
1:5c8e293:              ") v\n"
1:5c8e293:              );
1:5c8e293: 	try {
1:5c8e293: 	        ResultSet rs = s.executeQuery( "select lolz from lolzURL" );
1:5c8e293: 		assertTrue( rs.next() );
1:5c8e293: 
2:5c8e293: 		// This next line will need to change once DERBY-6807 is fixed:
1:5c8e293: 		fail( "Expected SAXParseException" );
1:5c8e293: 	} catch ( Throwable e ) {
1:3592c63:         if (!e.getMessage().contains("entity expansions")) {
1:3592c63:             fail("Expected SAXParseException", e);
1:3592c63:         }
1:5c8e293: 	}
1:5c8e293:     }
1:0a1be27: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3592c63
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
1: import org.apache.derbyTesting.junit.LocaleTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         // Need to run in US locale because the test checks error messages
1:         // which may be different in different locales (DERBY-6869).
1:         return new LocaleTestSetup(
1:                 SecurityManagerSetup.noSecurityManager(suite),
1:                 Locale.US);
/////////////////////////////////////////////////////////////////////////
1:         if (!e.getMessage().contains("entity expansions")) {
1:             fail("Expected SAXParseException", e);
1:         }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:a72ebf9
/////////////////////////////////////////////////////////////////////////
1: 	            "<yolo/>");
commit:7643f96
/////////////////////////////////////////////////////////////////////////
1: 	assertEquals( "null", rs.getString( 4 ).trim() );
commit:5c8e293
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
/////////////////////////////////////////////////////////////////////////
1: 	String[] testFiles = new String[] {
1: 	    "functionTests/tests/lang/xmlOptimizerXXE1Payload.trace",
1: 	    "functionTests/tests/lang/xmlOptimizerXXE1.trace",
1: 	    "functionTests/tests/lang/xmlOptimizerXXE2.trace"
1: 	};
1: 
1:         suite.addTest( new SupportFilesSetup( 
1: 			TestConfiguration.defaultSuite(XMLXXETest.class),
1: 			testFiles ) );
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testDerby6807FileAccessVTI()
1: 		throws Exception
1:     {
1: 	String VULNERABLE_XML = "xmlOptimizerXXE1.trace";
1: 	URL     traceURL = SupportFilesSetup.getReadOnlyURL( VULNERABLE_XML );
1: 	//URL payloadURL = SupportFilesSetup.getReadOnlyURL(
1: 	//			"xmlOptimizerXXE1Payload.trace" );
1: 
1:         Statement s = createStatement();
1: 	s.execute(
1:              "create function decorationURLChildOnly\n" +
1:              "(\n" +
1:              "    urlString varchar( 32672 ),\n" +
1:              "    rowTag varchar( 32672 ),\n" +
1:              "    childTags varchar( 32672 )...\n" +
1:              ")\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "        conglomerateName varchar( 36 ),\n" +
1:              "        joinStrategy varchar( 200 ),\n" +
1:              "        estimatedCost double,\n" +
1:              "        estimatedRowCount varchar( 200 )\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:              );
1: 	s.execute(
1:              "create view decorationURLChildOnly as\n" +
1:              "select * from table\n" +
1:              "(\n" +
1:              "    decorationURLChildOnly\n" +
1:              "    (\n" +
1:              "        '" + traceURL.toString() + "',\n" +
1:              "        'decoration',\n" +
1:              "        'decConglomerateName', 'decJoinStrategy',\n" +
1: 	     "        'ceEstimatedCost', 'ceEstimatedRowCount'\n" +
1:              "    )\n" +
1:              ") v\n"
1:              );
1: 	ResultSet rs = s.executeQuery(
1:              "select distinct conglomerateName, joinStrategy," +
1: 	     "                estimatedCost, estimatedRowCount\n" +
1:              "from decorationURLChildOnly\n" +
1:              "where conglomerateName like '%_A' and " +
1: 	     "      estimatedCost is not null\n" +
1:              "order by conglomerateName, joinStrategy, " +
1: 	     "         estimatedCost, estimatedRowCount\n"
1:              );
1: 	assertTrue( rs.next() );
1: 
1: 	// This next line will need to change once DERBY-6807 is fixed:
0: 	assertEquals( "SECRET DATA SHOULD NOT HAVE BEEN EXPOSED",
0: 			rs.getString( 4 ).trim() );
1: 
1: 	assertFalse( rs.next() );
1:     }
1: 
1:     public void testDerby6807BillionLaughsVTI()
1: 		throws Exception
1:     {
1: 	String VULNERABLE_XML = "xmlOptimizerXXE2.trace";
1: 	URL     traceURL = SupportFilesSetup.getReadOnlyURL( VULNERABLE_XML );
1: 
1:         Statement s = createStatement();
1: 	s.execute(
1:              "create function lolzURL\n" +
1:              "(\n" +
1:              "    urlString varchar( 32672 ),\n" +
1:              "    rowTag varchar( 32672 ),\n" +
1:              "    childTags varchar( 32672 )...\n" +
1:              ")\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "        lolz varchar( 32000 )\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:              );
1: 	s.execute(
1:              "create view lolzURL as\n" +
1:              "select * from table\n" +
1:              "(\n" +
1:              "    lolzURL\n" +
1:              "    (\n" +
1:              "        '" + traceURL.toString() + "',\n" +
1:              "        'lolz'\n" +
1:              "    )\n" +
1:              ") v\n"
1:              );
1: 	try {
1: 	        ResultSet rs = s.executeQuery( "select lolz from lolzURL" );
1: 		assertTrue( rs.next() );
1: 
1: 		// This next line will need to change once DERBY-6807 is fixed:
1: 		fail( "Expected SAXParseException" );
1: 	} catch ( Throwable e ) {
0: 		assertTrue( e.getMessage().indexOf( "entity expansions" ) > 0 );
1: 	}
1:     }
commit:94baca2
/////////////////////////////////////////////////////////////////////////
1:         String stmt = "INSERT INTO xml_data(xml_col) VALUES(XMLPARSE(DOCUMENT" 
1:                 + "PRESERVE WHITESPACE))";
1: 
1: 	// System.out.println( stmt );
1: 
1: 	s.execute( stmt );
commit:fa89f79
/////////////////////////////////////////////////////////////////////////
1:     public void testDerby6807BillionLaughs() throws SQLException
1:     {
1:         Statement st = createStatement();
1:         st.executeUpdate("create table xml_billion_laughs( xml_col xml )");
1: 
1: String xmlBillionLaughs = "insert into xml_billion_laughs( xml_col ) values(" +
1:                          " xmlparse(document '" +
1: "<!DOCTYPE lolz [" +
1: " <!ENTITY lol \"lol\">" +
1: " <!ELEMENT lolz (#PCDATA)>" +
1: " <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">" +
1: " <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">" +
1: " <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">" +
1: " <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">" +
1: " <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">" +
1: " <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">" +
1: " <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">" +
1: " <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">" +
1: " <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">" +
1: "]>" +
1: "<lolz>&lol9;</lolz>' PRESERVE WHITESPACE))";
1: 
1: 	assertStatementError( "2200M", st, xmlBillionLaughs );
1: 
1: 	// Since we can't even parse the document, we never get to the point
1: 	// where we might try to serialize it back out.
1:         //    "select xmlserialize(xml_col as clob) from xml_billion_laughs");
1:     }
1: 
commit:0a1be27
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLXXETest.java
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: 
0: import java.sql.CallableStatement;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Statement;
0: import java.sql.Types;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.XML;
1: 
1: /**
1:  * XMLXXETest this test suite runs with NO SECURITY MANAGER. It is designed
1:  * to explore the so-called XXE family of vulnerabilities. For more
1:  * information, try:
1:  *
1:  * http://h3xstream.github.io/find-sec-bugs/bugs.htm#XXE_DOCUMENT
1:  * https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing
1:  * http://www.ws-attacks.org/index.php/XML_Entity_Expansion
1:  * http://www.ws-attacks.org/index.php/XML_External_Entity_DOS
1:  * http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack
1:  */
1: public final class XMLXXETest extends BaseJDBCTestCase {
1:     
1:     public XMLXXETest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Only return a suite IF the testing classpath has the
1:      * required XML classes.  Otherwise just return an empty suite.
1:      */
1:     public static Test suite()
1:     {
1:         BaseTestSuite suite =
1:             new BaseTestSuite("XML XXE Vulnerability tests\n");
1: 
1:         if (!XML.classpathMeetsXMLReqs())
1:             return suite;
1: 
0:         suite.addTest(TestConfiguration.defaultSuite(XMLXXETest.class));
1: 
0:         return SecurityManagerSetup.noSecurityManager(suite);
1:     }
1:  
1:     /**
1:      * Test for Derby-6807. We create a file with some (presumably sensitive)
1:      * data in it, and check whether an XML query can be tricked into reading
1:      * the data from that file. If it can, a security leak has occurred.
1:      */
1: 
1:     public void testDerby6807FileAccess ()
1: 			throws Exception
1:     {
1:         File password = null;
1:         String path;
1: 
1:         password = new File("test6807.txt");
1:         PrintWriter writer = new PrintWriter("test6807.txt", "UTF-8");
1:         writer.print("HelloWorld");
1:         writer.close();
1:         path = password.getAbsolutePath();
1:         
1:         Statement s = createStatement();
1:         
1:         s.execute("CREATE TABLE xml_data(xml_col XML)");
1: 
0:         s.execute("INSERT INTO xml_data(xml_col) VALUES(XMLPARSE(DOCUMENT" 
1:                 + "'<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:"
0: 	        + File.separator    
1:                 + path +"\" >]><yolo>&xxe;</yolo>'"
0:                 + "PRESERVE WHITESPACE))");
1: 
0: 	// XXX: The next result is wrong. The expected behavior is that the
0: 	// query should be rejected as a security violation. See DERBY-6807
0: 	// for more details; when that issue is resolved, this test will need
0: 	// to be changed.
1: 
1:         JDBC.assertSingleValueResultSet(
1:                 s.executeQuery(
1: 	            "SELECT XMLSERIALIZE(xml_col AS CLOB) FROM xml_data"),
0: 	            "<yolo>HelloWorld</yolo>");
1: 
1:         password.delete();
1:     }
1: 
1: }
============================================================================