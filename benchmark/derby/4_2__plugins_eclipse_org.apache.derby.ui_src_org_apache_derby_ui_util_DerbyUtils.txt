1:00daaff: /*
11:00daaff: 
1:00daaff: 	Derby - Class org.apache.derby.ui.util.DerbyUtils
1:00daaff: 
1:23683f1: 	Licensed to the Apache Software Foundation (ASF) under one or more
1:23683f1: 	contributor license agreements.  See the NOTICE file distributed with
1:23683f1: 	this work for additional information regarding copyright ownership.
1:23683f1: 	The ASF licenses this file to you under the Apache License, Version 2.0
1:23683f1: 	(the "License"); you may not use this file except in compliance with
1:23683f1: 	the License.  You may obtain a copy of the License at
1:00daaff: 	
1:00daaff: 	   http://www.apache.org/licenses/LICENSE-2.0
1:00daaff: 	
1:00daaff: 	Unless required by applicable law or agreed to in writing, software
1:00daaff: 	distributed under the License is distributed on an "AS IS" BASIS,
1:00daaff: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:00daaff: 	See the License for the specific language governing permissions and
1:00daaff: 	limitations under the License.
1:00daaff: 
1:00daaff: */
1:00daaff: 
1:00daaff: package org.apache.derby.ui.util;
1:00daaff: 
1:00daaff: import java.net.URL;
1:00daaff: import java.util.ArrayList;
1:00daaff: import java.util.List;
1:00daaff: 
1:00daaff: import org.apache.derby.ui.DerbyPlugin;
1:00daaff: import org.apache.derby.ui.common.CommonNames;
1:00daaff: import org.apache.derby.ui.properties.DerbyProperties;
1:00daaff: import org.eclipse.core.resources.IFile;
1:00daaff: import org.eclipse.core.resources.IProject;
1:00daaff: import org.eclipse.core.runtime.CoreException;
1:00daaff: import org.eclipse.core.runtime.IPath;
1:00daaff: import org.eclipse.core.runtime.IStatus;
1:00daaff: import org.eclipse.core.runtime.Path;
1:97fb959: import org.eclipse.core.runtime.Platform; 
1:00daaff: import org.eclipse.debug.core.DebugPlugin;
1:00daaff: import org.eclipse.debug.core.ILaunch;
1:00daaff: import org.eclipse.debug.core.ILaunchConfiguration;
1:00daaff: import org.eclipse.debug.core.ILaunchConfigurationType;
1:00daaff: import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
1:00daaff: import org.eclipse.debug.core.ILaunchManager;
1:00daaff: import org.eclipse.debug.core.model.IProcess;
1:00daaff: import org.eclipse.jdt.launching.IJavaLaunchConfigurationConstants;
1:00daaff: import org.eclipse.jdt.launching.IRuntimeClasspathEntry;
1:00daaff: import org.eclipse.jdt.launching.JavaRuntime;
1:00daaff: import org.eclipse.osgi.util.ManifestElement;
1:00daaff: import org.osgi.framework.Bundle;
1:00daaff: import org.osgi.framework.BundleException;
1:00daaff: import org.osgi.framework.Constants;
1:00daaff: 
1:00daaff: 
1:00daaff: 
1:00daaff: public class DerbyUtils {
1:00daaff: 	
1:00daaff: 	private static ManifestElement[] getElements(String bundleName) throws BundleException {
1:00daaff: 		String requires = (String)Platform.getBundle(bundleName).getHeaders().get(Constants.BUNDLE_CLASSPATH);
1:00daaff: 		return ManifestElement.parseHeader(Constants.BUNDLE_CLASSPATH, requires);
18:00daaff: 	}
1:00daaff: 	protected static ILaunch launch(IProject proj, String name, String mainClass, String args, String vmargs, String app) throws CoreException {	
1:00daaff: 		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
1:00daaff: 	
1:00daaff: 		ILaunchConfigurationType type=null;
1:00daaff: 		if(app.equalsIgnoreCase(CommonNames.START_DERBY_SERVER)){
1:00daaff: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.startDerbyServerLaunchConfigurationType");
1:00daaff: 			type= manager.getLaunchConfigurationType(CommonNames.START_SERVER_LAUNCH_CONFIG_TYPE);
1:00daaff: 		}else if(app.equalsIgnoreCase(CommonNames.SHUTDOWN_DERBY_SERVER)){
1:00daaff: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.stopDerbyServerLaunchConfigurationType");
1:00daaff: 			type= manager.getLaunchConfigurationType(CommonNames.STOP_SERVER_LAUNCH_CONFIG_TYPE);
1:00daaff: 		}else if(app.equalsIgnoreCase(CommonNames.IJ)){
1:00daaff: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.ijDerbyLaunchConfigurationType");
1:00daaff: 			type= manager.getLaunchConfigurationType(CommonNames.IJ_LAUNCH_CONFIG_TYPE);
1:00daaff: 		}else if(app.equalsIgnoreCase(CommonNames.SYSINFO)){
1:00daaff: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.sysinfoDerbyLaunchConfigurationType");
1:00daaff: 			type= manager.getLaunchConfigurationType(CommonNames.SYSINFO_LAUNCH_CONFIG_TYPE);
1:00daaff: 		}else{
1:00daaff: 			type = manager.getLaunchConfigurationType(IJavaLaunchConfigurationConstants.ID_JAVA_APPLICATION);
1:00daaff: 		}
1:00daaff: 		ILaunchConfiguration config = null;
1:00daaff: 		// if the configuration already exists, delete it
1:00daaff: 		ILaunchConfiguration[] configurations = manager.getLaunchConfigurations(type);
1:00daaff: 		for (int i = 0; i < configurations.length; i++) {
1:00daaff: 			if (configurations[i].getName().equals(name))
1:00daaff: 				configurations[i].delete();
1:00daaff: 		}
1:00daaff: 		// else create a new one
1:00daaff: 		if (config == null) {
1:00daaff: 			ILaunchConfigurationWorkingCopy wc = type.newInstance(null, name);
1:00daaff: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME,
1:00daaff: 				proj.getProject().getName());
1:00daaff: 			// current directory should be the project root
1:00daaff: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY,
1:00daaff: 				proj.getProject().getLocation().toString());
1:00daaff: 			// use the suplied args
1:00daaff: 			if((vmargs!=null)&&!(vmargs.equals(""))){
1:00daaff: 				wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS, vmargs);
1:00daaff: 			}
1:00daaff: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME,
1:00daaff: 				mainClass);
1:00daaff: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,
1:00daaff: 				args);
1:00daaff: 			// saves the new config
1:00daaff: 			config = wc.doSave();
1:00daaff: 		}
1:00daaff: 		ILaunch launch=config.launch(ILaunchManager.RUN_MODE, null);
1:00daaff: 		config.delete();
1:00daaff: 		return launch;
1:00daaff: 	}
1:00daaff: 	public static void runIJ(IFile currentScript, IProject currentProject) throws CoreException {	
1:00daaff: 
1:00daaff: 		String launchType="";
1:00daaff: 		String args="";
1:00daaff: 		
1:00daaff: 		//the above some times throws wrong 'create=true|false' errors
1:00daaff: 		String vmargs="";
1:00daaff: 		DerbyProperties dprop=new DerbyProperties(currentProject);
1:00daaff: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
1:00daaff: 			vmargs+=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
1:00daaff: 		}
1:00daaff: 		
1:00daaff: 		if(currentScript!=null){
1:00daaff: 			launchType=CommonNames.SQL_SCRIPT;
1:00daaff: 			
1:00daaff: 			//Preferable to use the full String with quotes to take care of spaces 
1:00daaff: 			//in file names
1:00daaff: 			args="\""+currentScript.getLocation().toOSString()+"\"";
1:00daaff: 		}else{
1:00daaff: 			launchType=CommonNames.IJ;
1:00daaff: 			args="";	
1:00daaff: 		}
1:00daaff: 		
1:00daaff: 		ILaunch launch=launch(currentProject,launchType,CommonNames.IJ_CLASS,args, vmargs, CommonNames.IJ);
1:00daaff: 		IProcess ip=launch.getProcesses()[0];
1:00daaff: 		String procName="["+currentProject.getName()+"] - "+CommonNames.IJ+" "+args;
1:00daaff: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1:00daaff: 	}
1:00daaff: 	public static void runSysInfo(IProject currentProject) throws CoreException {	
1:00daaff: 		String args="";
1:00daaff: 		ILaunch launch=launch(currentProject,CommonNames.SYSINFO,CommonNames.SYSINFO_CLASS,args, null, CommonNames.SYSINFO);
1:00daaff: 		IProcess ip=launch.getProcesses()[0];
1:00daaff: 		String procName="["+currentProject.getName()+"] - "+CommonNames.SYSINFO;
1:00daaff: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1:00daaff: 	}
1:00daaff: 	//another launch mechanism 																	
1:00daaff: 	public void launch() throws CoreException{
1:00daaff: 		DerbyPlugin plugin = DerbyPlugin.getDefault();
1:00daaff: 
1:00daaff: 		// constructs a classpath from the default JRE...
1:00daaff: 		IPath systemLibs = new Path(JavaRuntime.JRE_CONTAINER);
1:00daaff: 		IRuntimeClasspathEntry systemLibsEntry = JavaRuntime.newRuntimeContainerClasspathEntry(
1:00daaff: 			systemLibs, IRuntimeClasspathEntry.STANDARD_CLASSES);
1:00daaff: 		systemLibsEntry.setClasspathProperty(IRuntimeClasspathEntry.BOOTSTRAP_CLASSES);
1:00daaff: 		//include org.apache.derby.core plugin
1:00daaff: 		IRuntimeClasspathEntry derbyCPEntry = null;
1:00daaff: 		List classpath = new ArrayList();
1:00daaff: 		classpath.add(systemLibsEntry.getMemento());
1:00daaff: 		
1:00daaff: 		try {
3:00daaff: 			ManifestElement[] elements_core, elements_ui;
3:00daaff: 			elements_core = getElements(CommonNames.CORE_PATH);
3:00daaff: 			elements_ui=getElements(CommonNames.UI_PATH);
1:00daaff: 			
2:00daaff: 			Bundle bundle;
2:00daaff: 			URL pluginURL,jarURL,localURL;
2:00daaff: 			bundle=Platform.getBundle(CommonNames.CORE_PATH);
4:00daaff: 			pluginURL = bundle.getEntry("/");
1:97fb959: 			for(int i=0;i<elements_core.length;i++){
1:00daaff: 				if(!elements_core[i].getValue().toLowerCase().endsWith("derbynet.jar")){
3:00daaff: 					jarURL= new URL(pluginURL,elements_core[i].getValue());
5:00daaff: 					localURL=Platform.asLocalURL(jarURL);
1:00daaff: 					derbyCPEntry = JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
1:00daaff: 					derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
1:00daaff: 					classpath.add(derbyCPEntry.getMemento());
1:00daaff: 				}
1:00daaff: 			}
1:00daaff: 			bundle=Platform.getBundle(CommonNames.CORE_PATH);
1:00daaff: 			pluginURL = bundle.getEntry("/");
2:00daaff: 			for(int i=0;i<elements_ui.length;i++){
1:00daaff: 				if(!elements_ui[i].getValue().toLowerCase().equals("ui.jar")){
3:00daaff: 					jarURL= new URL(pluginURL,elements_ui[i].getValue());
1:00daaff: 					localURL=Platform.asLocalURL(jarURL);
1:00daaff: 					derbyCPEntry = JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
1:00daaff: 					derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
1:00daaff: 					classpath.add(derbyCPEntry.getMemento());
1:00daaff: 				}
1:00daaff: 			}
1:00daaff: 		}
1:00daaff: 		catch(Exception e) {
2:00daaff: 			e.printStackTrace();
1:00daaff: 			Logger.log("Error in launch() "+e,IStatus.ERROR);
1:00daaff: 		}
1:00daaff: 	
1:00daaff: 	}
1:00daaff: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:6c24865
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:97fb959
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.core.runtime.FileLocator;
1: import org.eclipse.core.runtime.Platform; 
/////////////////////////////////////////////////////////////////////////
0: 	private final static String PLUGIN_ROOT = "ECLIPSE_HOME/plugins/";
/////////////////////////////////////////////////////////////////////////
0: 			URL pluginURL = FileLocator.resolve(FileLocator.find(bundle, new Path("/"), null));
0: 			String pluginName = new File(pluginURL.getPath()).getName();
1: 			for(int i=0;i<elements_core.length;i++){
0: 				// add JAR as var type entry relative to the eclipse plugins dir, so the entry is portable 
0: 				newRawCP[oldLength+i]=JavaCore.newVariableEntry(new Path(PLUGIN_ROOT+pluginName+"/"+elements_core[i].getValue()), null, null);				
0: 			pluginURL = FileLocator.resolve(FileLocator.find(bundle, new Path("/"), null));
0: 			pluginName = new File(pluginURL.getPath()).getName();
0: 					// add JAR as var type entry relative to the eclipse plugins dir, so the entry is portable
0: 					newRawCP[oldLength+i]=JavaCore.newVariableEntry(new Path(PLUGIN_ROOT+pluginName+"/"+elements_ui[i].getValue()), null, null);
commit:00daaff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: 	Derby - Class org.apache.derby.ui.util.DerbyUtils
0: 	Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 	
0: 	Licensed under the Apache License, Version 2.0 (the "License");
0: 	you may not use this file except in compliance with the License.
0: 	You may obtain a copy of the License at
1: 	
1: 	   http://www.apache.org/licenses/LICENSE-2.0
1: 	
1: 	Unless required by applicable law or agreed to in writing, software
1: 	distributed under the License is distributed on an "AS IS" BASIS,
1: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: 	See the License for the specific language governing permissions and
1: 	limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.ui.util;
1: 
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.derby.ui.DerbyPlugin;
1: import org.apache.derby.ui.common.CommonNames;
1: import org.apache.derby.ui.properties.DerbyProperties;
1: import org.eclipse.core.resources.IFile;
1: import org.eclipse.core.resources.IProject;
1: import org.eclipse.core.runtime.CoreException;
1: import org.eclipse.core.runtime.IPath;
1: import org.eclipse.core.runtime.IStatus;
1: import org.eclipse.core.runtime.Path;
0: import org.eclipse.core.runtime.Platform;
1: import org.eclipse.debug.core.DebugPlugin;
1: import org.eclipse.debug.core.ILaunch;
1: import org.eclipse.debug.core.ILaunchConfiguration;
1: import org.eclipse.debug.core.ILaunchConfigurationType;
1: import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
1: import org.eclipse.debug.core.ILaunchManager;
1: import org.eclipse.debug.core.model.IProcess;
0: import org.eclipse.jdt.core.IClasspathEntry;
0: import org.eclipse.jdt.core.JavaCore;
1: import org.eclipse.jdt.launching.IJavaLaunchConfigurationConstants;
1: import org.eclipse.jdt.launching.IRuntimeClasspathEntry;
1: import org.eclipse.jdt.launching.JavaRuntime;
1: import org.eclipse.osgi.util.ManifestElement;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: 
1: 
1: 
1: public class DerbyUtils {
1: 	
1: 	private static ManifestElement[] getElements(String bundleName) throws BundleException {
1: 		String requires = (String)Platform.getBundle(bundleName).getHeaders().get(Constants.BUNDLE_CLASSPATH);
1: 		return ManifestElement.parseHeader(Constants.BUNDLE_CLASSPATH, requires);
1: 	}
0: 	public static IClasspathEntry[] addDerbyJars(IClasspathEntry[] rawCP) throws Exception{
1: 		
0: 		IClasspathEntry[] newRawCP= null;
0: 		try{
0: 			//New OSGI way
1: 			ManifestElement[] elements_core, elements_ui;
1: 			elements_core = getElements(CommonNames.CORE_PATH);
1: 			elements_ui=getElements(CommonNames.UI_PATH);
1: 			
0: 			Bundle bundle=Platform.getBundle(CommonNames.CORE_PATH);
0: 			URL pluginURL = bundle.getEntry("/");
0: 			URL jarURL=null;
0: 			URL localURL=null;
1: 
0: 			newRawCP=new IClasspathEntry[rawCP.length + (elements_core.length) + (elements_ui.length-1)];
0: 			System.arraycopy(rawCP, 0, newRawCP, 0, rawCP.length);
1: 			
0: 			//Add the CORE jars
0: 			int oldLength=rawCP.length;
0: 			 for(int i=0;i<elements_core.length;i++){
1: 				jarURL= new URL(pluginURL,elements_core[i].getValue());
1: 				localURL=Platform.asLocalURL(jarURL);
0: 				newRawCP[oldLength+i]=JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null);
1: 				
1: 			}
0: 			 // Add the UI jars
0: 			bundle=Platform.getBundle(CommonNames.UI_PATH);
1: 			pluginURL = bundle.getEntry("/");
0: 			oldLength=oldLength+elements_core.length -1; 
1: 			for(int i=0;i<elements_ui.length;i++){
0: 				if(!(elements_ui[i].getValue().toLowerCase().equals("ui.jar"))){
1: 					jarURL= new URL(pluginURL,elements_ui[i].getValue());
1: 					localURL=Platform.asLocalURL(jarURL);
0: 					newRawCP[oldLength+i]=JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null);
1: 				}
1: 			}					
0: 			return newRawCP;
0: 		}catch(Exception e){
0: 			throw e;
1: 		}
1: 		
1: 	}
0: 	public static IClasspathEntry[] removeDerbyJars(IClasspathEntry[] rawCP) throws Exception{
0: 		ArrayList arrL=new ArrayList();
0: 		for (int i=0;i<rawCP.length;i++){
0: 			arrL.add(rawCP[i]);
1: 		}
0: 		IClasspathEntry[] newRawCP= null;
0: 		try{
1: 			ManifestElement[] elements_core, elements_ui;
1: 			elements_core = getElements(CommonNames.CORE_PATH);
1: 			elements_ui=getElements(CommonNames.UI_PATH);
1: 			
1: 			Bundle bundle;
1: 			URL pluginURL,jarURL,localURL;
1: 
0: 			boolean add;
0: 			IClasspathEntry icp=null;
0: 			for (int j=0;j<arrL.size();j++){
1: 				bundle=Platform.getBundle(CommonNames.CORE_PATH);
1: 				pluginURL = bundle.getEntry("/");
0: 				add=true;
0: 				icp=(IClasspathEntry)arrL.get(j);
0: 				//remove 'core' jars
0: 				for (int i=0;i<elements_core.length;i++){
1: 					jarURL= new URL(pluginURL,elements_core[i].getValue());
1: 					localURL=Platform.asLocalURL(jarURL);
0: 					if(((icp).equals(JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null)))||
0: 							icp.getPath().toString().toLowerCase().endsWith("derby.jar")||
0: 							icp.getPath().toString().toLowerCase().endsWith("derbynet.jar")||
0: 							icp.getPath().toString().toLowerCase().endsWith("derbyclient.jar")||
0: 							icp.getPath().toString().toLowerCase().endsWith("derbytools.jar")){
0: 						add=false;
1: 					}
1: 				}
0: 				if(!add){
0: 					arrL.remove(j);
0: 					j=j-1;
1: 				}
0: 				//REMOVE 'ui' jars
0: 				bundle=Platform.getBundle(CommonNames.UI_PATH);
1: 				pluginURL = bundle.getEntry("/");
0: 				add=true;
1: 				
0: 				for (int i=0;i<elements_ui.length;i++){
0: 					if(!(elements_ui[i].getValue().toLowerCase().equals("ui.jar"))){
1: 						jarURL= new URL(pluginURL,elements_ui[i].getValue());
1: 						localURL=Platform.asLocalURL(jarURL);					
0: 						if((icp).equals(JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null))){
0: 							add=false;
1: 						}
1: 					}
1: 				}
0: 				if(!add){
0: 					arrL.remove(j);
0: 					j=j-1;
1: 				}
1: 			}
0: 			newRawCP=new IClasspathEntry[arrL.size()];
0: 			for (int i=0;i<arrL.size();i++){
0: 				newRawCP[i]=(IClasspathEntry)arrL.get(i);
1: 			}
0: 			return newRawCP;
0: 		}catch(Exception e){
1: 			e.printStackTrace();
0: 			//return rawCP;
0: 			throw e;
1: 		}
1: 		
1: 	}
1: 	protected static ILaunch launch(IProject proj, String name, String mainClass, String args, String vmargs, String app) throws CoreException {	
1: 		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
1: 	
1: 		ILaunchConfigurationType type=null;
1: 		if(app.equalsIgnoreCase(CommonNames.START_DERBY_SERVER)){
1: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.startDerbyServerLaunchConfigurationType");
1: 			type= manager.getLaunchConfigurationType(CommonNames.START_SERVER_LAUNCH_CONFIG_TYPE);
1: 		}else if(app.equalsIgnoreCase(CommonNames.SHUTDOWN_DERBY_SERVER)){
1: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.stopDerbyServerLaunchConfigurationType");
1: 			type= manager.getLaunchConfigurationType(CommonNames.STOP_SERVER_LAUNCH_CONFIG_TYPE);
1: 		}else if(app.equalsIgnoreCase(CommonNames.IJ)){
1: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.ijDerbyLaunchConfigurationType");
1: 			type= manager.getLaunchConfigurationType(CommonNames.IJ_LAUNCH_CONFIG_TYPE);
1: 		}else if(app.equalsIgnoreCase(CommonNames.SYSINFO)){
1: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.sysinfoDerbyLaunchConfigurationType");
1: 			type= manager.getLaunchConfigurationType(CommonNames.SYSINFO_LAUNCH_CONFIG_TYPE);
1: 		}else{
1: 			type = manager.getLaunchConfigurationType(IJavaLaunchConfigurationConstants.ID_JAVA_APPLICATION);
1: 		}
1: 		ILaunchConfiguration config = null;
1: 		// if the configuration already exists, delete it
1: 		ILaunchConfiguration[] configurations = manager.getLaunchConfigurations(type);
1: 		for (int i = 0; i < configurations.length; i++) {
1: 			if (configurations[i].getName().equals(name))
1: 				configurations[i].delete();
1: 		}
1: 		// else create a new one
1: 		if (config == null) {
1: 			ILaunchConfigurationWorkingCopy wc = type.newInstance(null, name);
1: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME,
1: 				proj.getProject().getName());
1: 			// current directory should be the project root
1: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY,
1: 				proj.getProject().getLocation().toString());
1: 			// use the suplied args
1: 			if((vmargs!=null)&&!(vmargs.equals(""))){
1: 				wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS, vmargs);
1: 			}
1: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME,
1: 				mainClass);
1: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,
1: 				args);
1: 			// saves the new config
1: 			config = wc.doSave();
1: 		}
1: 		ILaunch launch=config.launch(ILaunchManager.RUN_MODE, null);
1: 		config.delete();
1: 		return launch;
1: 	}
1: 	public static void runIJ(IFile currentScript, IProject currentProject) throws CoreException {	
1: 
1: 		String launchType="";
1: 		String args="";
1: 		
1: 		//the above some times throws wrong 'create=true|false' errors
1: 		String vmargs="";
1: 		DerbyProperties dprop=new DerbyProperties(currentProject);
1: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
1: 			vmargs+=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
1: 		}
1: 		
1: 		if(currentScript!=null){
1: 			launchType=CommonNames.SQL_SCRIPT;
1: 			
1: 			//Preferable to use the full String with quotes to take care of spaces 
1: 			//in file names
1: 			args="\""+currentScript.getLocation().toOSString()+"\"";
1: 		}else{
1: 			launchType=CommonNames.IJ;
1: 			args="";	
1: 		}
1: 		
1: 		ILaunch launch=launch(currentProject,launchType,CommonNames.IJ_CLASS,args, vmargs, CommonNames.IJ);
1: 		IProcess ip=launch.getProcesses()[0];
1: 		String procName="["+currentProject.getName()+"] - "+CommonNames.IJ+" "+args;
1: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1: 	}
1: 	public static void runSysInfo(IProject currentProject) throws CoreException {	
1: 		String args="";
1: 		ILaunch launch=launch(currentProject,CommonNames.SYSINFO,CommonNames.SYSINFO_CLASS,args, null, CommonNames.SYSINFO);
1: 		IProcess ip=launch.getProcesses()[0];
1: 		String procName="["+currentProject.getName()+"] - "+CommonNames.SYSINFO;
1: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1: 	}
1: 	//another launch mechanism 																	
1: 	public void launch() throws CoreException{
1: 		DerbyPlugin plugin = DerbyPlugin.getDefault();
1: 
1: 		// constructs a classpath from the default JRE...
1: 		IPath systemLibs = new Path(JavaRuntime.JRE_CONTAINER);
1: 		IRuntimeClasspathEntry systemLibsEntry = JavaRuntime.newRuntimeContainerClasspathEntry(
1: 			systemLibs, IRuntimeClasspathEntry.STANDARD_CLASSES);
1: 		systemLibsEntry.setClasspathProperty(IRuntimeClasspathEntry.BOOTSTRAP_CLASSES);
1: 		//include org.apache.derby.core plugin
1: 		IRuntimeClasspathEntry derbyCPEntry = null;
1: 		List classpath = new ArrayList();
1: 		classpath.add(systemLibsEntry.getMemento());
1: 		
1: 		try {
1: 			ManifestElement[] elements_core, elements_ui;
1: 			elements_core = getElements(CommonNames.CORE_PATH);
1: 			elements_ui=getElements(CommonNames.UI_PATH);
1: 			
1: 			Bundle bundle;
1: 			URL pluginURL,jarURL,localURL;
1: 			bundle=Platform.getBundle(CommonNames.CORE_PATH);
1: 			pluginURL = bundle.getEntry("/");
0: 			for(int i=0;i<elements_core.length;i++){
1: 				if(!elements_core[i].getValue().toLowerCase().endsWith("derbynet.jar")){
1: 					jarURL= new URL(pluginURL,elements_core[i].getValue());
1: 					localURL=Platform.asLocalURL(jarURL);
1: 					derbyCPEntry = JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
1: 					derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
1: 					classpath.add(derbyCPEntry.getMemento());
1: 				}
1: 			}
1: 			bundle=Platform.getBundle(CommonNames.CORE_PATH);
1: 			pluginURL = bundle.getEntry("/");
1: 			for(int i=0;i<elements_ui.length;i++){
1: 				if(!elements_ui[i].getValue().toLowerCase().equals("ui.jar")){
1: 					jarURL= new URL(pluginURL,elements_ui[i].getValue());
1: 					localURL=Platform.asLocalURL(jarURL);
1: 					derbyCPEntry = JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
1: 					derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
1: 					classpath.add(derbyCPEntry.getMemento());
1: 				}
1: 			}
1: 		}
1: 		catch(Exception e) {
1: 			e.printStackTrace();
1: 			Logger.log("Error in launch() "+e,IStatus.ERROR);
1: 		}
1: 	
1: 	}
1: }
author:Jean T. Anderson
-------------------------------------------------------------------------------
commit:23683f1
/////////////////////////////////////////////////////////////////////////
0: 
1: 	Licensed to the Apache Software Foundation (ASF) under one or more
1: 	contributor license agreements.  See the NOTICE file distributed with
1: 	this work for additional information regarding copyright ownership.
1: 	The ASF licenses this file to you under the Apache License, Version 2.0
1: 	(the "License"); you may not use this file except in compliance with
1: 	the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0: 	Derby - Class org.apache.derby.ui.util.DerbyUtils
0: 	Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 	
0: 	Licensed under the Apache License, Version 2.0 (the "License");
0: 	you may not use this file except in compliance with the License.
0: 	You may obtain a copy of the License at
0: 	
0: 	   http://www.apache.org/licenses/LICENSE-2.0
0: 	
0: 	Unless required by applicable law or agreed to in writing, software
0: 	distributed under the License is distributed on an "AS IS" BASIS,
0: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: 	See the License for the specific language governing permissions and
0: 	limitations under the License.
0: 
0: */
0: 
0: package org.apache.derby.ui.util;
0: 
0: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: import org.apache.derby.ui.DerbyPlugin;
0: import org.apache.derby.ui.common.CommonNames;
0: import org.apache.derby.ui.properties.DerbyProperties;
0: import org.eclipse.core.resources.IFile;
0: import org.eclipse.core.resources.IProject;
0: import org.eclipse.core.runtime.CoreException;
0: import org.eclipse.core.runtime.IPath;
0: import org.eclipse.core.runtime.IStatus;
0: import org.eclipse.core.runtime.Path;
0: import org.eclipse.core.runtime.Platform;
0: import org.eclipse.debug.core.DebugPlugin;
0: import org.eclipse.debug.core.ILaunch;
0: import org.eclipse.debug.core.ILaunchConfiguration;
0: import org.eclipse.debug.core.ILaunchConfigurationType;
0: import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
0: import org.eclipse.debug.core.ILaunchManager;
0: import org.eclipse.debug.core.model.IProcess;
0: import org.eclipse.jdt.core.IClasspathEntry;
0: import org.eclipse.jdt.core.JavaCore;
0: import org.eclipse.jdt.launching.IJavaLaunchConfigurationConstants;
0: import org.eclipse.jdt.launching.IRuntimeClasspathEntry;
0: import org.eclipse.jdt.launching.JavaRuntime;
0: import org.eclipse.osgi.util.ManifestElement;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleException;
0: import org.osgi.framework.Constants;
0: 
0: 
0: 
0: public class DerbyUtils {
0: 	
0: 	private static ManifestElement[] getElements(String bundleName) throws BundleException {
0: 		String requires = (String)Platform.getBundle(bundleName).getHeaders().get(Constants.BUNDLE_CLASSPATH);
0: 		return ManifestElement.parseHeader(Constants.BUNDLE_CLASSPATH, requires);
0: 	}
0: 	public static IClasspathEntry[] addDerbyJars(IClasspathEntry[] rawCP) throws Exception{
0: 		
0: 		IClasspathEntry[] newRawCP= null;
0: 		try{
0: 			//New OSGI way
0: 			ManifestElement[] elements_core, elements_ui;
0: 			elements_core = getElements(CommonNames.CORE_PATH);
0: 			elements_ui=getElements(CommonNames.UI_PATH);
0: 			
0: 			Bundle bundle=Platform.getBundle(CommonNames.CORE_PATH);
0: 			URL pluginURL = bundle.getEntry("/");
0: 			URL jarURL=null;
0: 			URL localURL=null;
0: 
0: 			newRawCP=new IClasspathEntry[rawCP.length + (elements_core.length) + (elements_ui.length-1)];
0: 			System.arraycopy(rawCP, 0, newRawCP, 0, rawCP.length);
0: 			
0: 			//Add the CORE jars
0: 			int oldLength=rawCP.length;
0: 			 for(int i=0;i<elements_core.length;i++){
0: 				jarURL= new URL(pluginURL,elements_core[i].getValue());
0: 				localURL=Platform.asLocalURL(jarURL);
0: 				newRawCP[oldLength+i]=JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null);
0: 				
0: 			}
0: 			 // Add the UI jars
0: 			bundle=Platform.getBundle(CommonNames.UI_PATH);
0: 			pluginURL = bundle.getEntry("/");
0: 			oldLength=oldLength+elements_core.length -1; 
0: 			for(int i=0;i<elements_ui.length;i++){
0: 				if(!(elements_ui[i].getValue().toLowerCase().equals("ui.jar"))){
0: 					jarURL= new URL(pluginURL,elements_ui[i].getValue());
0: 					localURL=Platform.asLocalURL(jarURL);
0: 					newRawCP[oldLength+i]=JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null);
0: 				}
0: 			}					
0: 			return newRawCP;
0: 		}catch(Exception e){
0: 			throw e;
0: 		}
0: 		
0: 	}
0: 	public static IClasspathEntry[] removeDerbyJars(IClasspathEntry[] rawCP) throws Exception{
0: 		ArrayList arrL=new ArrayList();
0: 		for (int i=0;i<rawCP.length;i++){
0: 			arrL.add(rawCP[i]);
0: 		}
0: 		IClasspathEntry[] newRawCP= null;
0: 		try{
0: 			ManifestElement[] elements_core, elements_ui;
0: 			elements_core = getElements(CommonNames.CORE_PATH);
0: 			elements_ui=getElements(CommonNames.UI_PATH);
0: 			
0: 			Bundle bundle;
0: 			URL pluginURL,jarURL,localURL;
0: 
0: 			boolean add;
0: 			IClasspathEntry icp=null;
0: 			for (int j=0;j<arrL.size();j++){
0: 				bundle=Platform.getBundle(CommonNames.CORE_PATH);
0: 				pluginURL = bundle.getEntry("/");
0: 				add=true;
0: 				icp=(IClasspathEntry)arrL.get(j);
0: 				//remove 'core' jars
0: 				for (int i=0;i<elements_core.length;i++){
0: 					jarURL= new URL(pluginURL,elements_core[i].getValue());
0: 					localURL=Platform.asLocalURL(jarURL);
0: 					if(((icp).equals(JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null)))||
0: 							icp.getPath().toString().toLowerCase().endsWith("derby.jar")||
0: 							icp.getPath().toString().toLowerCase().endsWith("derbynet.jar")||
0: 							icp.getPath().toString().toLowerCase().endsWith("derbyclient.jar")||
0: 							icp.getPath().toString().toLowerCase().endsWith("derbytools.jar")){
0: 						add=false;
0: 					}
0: 				}
0: 				if(!add){
0: 					arrL.remove(j);
0: 					j=j-1;
0: 				}
0: 				//REMOVE 'ui' jars
0: 				bundle=Platform.getBundle(CommonNames.UI_PATH);
0: 				pluginURL = bundle.getEntry("/");
0: 				add=true;
0: 				
0: 				for (int i=0;i<elements_ui.length;i++){
0: 					if(!(elements_ui[i].getValue().toLowerCase().equals("ui.jar"))){
0: 						jarURL= new URL(pluginURL,elements_ui[i].getValue());
0: 						localURL=Platform.asLocalURL(jarURL);					
0: 						if((icp).equals(JavaCore.newLibraryEntry(new Path(localURL.getPath()), null, null))){
0: 							add=false;
0: 						}
0: 					}
0: 				}
0: 				if(!add){
0: 					arrL.remove(j);
0: 					j=j-1;
0: 				}
0: 			}
0: 			newRawCP=new IClasspathEntry[arrL.size()];
0: 			for (int i=0;i<arrL.size();i++){
0: 				newRawCP[i]=(IClasspathEntry)arrL.get(i);
0: 			}
0: 			return newRawCP;
0: 		}catch(Exception e){
0: 			e.printStackTrace();
0: 			//return rawCP;
0: 			throw e;
0: 		}
0: 		
0: 	}
0: 	protected static ILaunch launch(IProject proj, String name, String mainClass, String args, String vmargs, String app) throws CoreException {	
0: 		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
0: 	
0: 		ILaunchConfigurationType type=null;
0: 		if(app.equalsIgnoreCase(CommonNames.START_DERBY_SERVER)){
0: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.startDerbyServerLaunchConfigurationType");
0: 			type= manager.getLaunchConfigurationType(CommonNames.START_SERVER_LAUNCH_CONFIG_TYPE);
0: 		}else if(app.equalsIgnoreCase(CommonNames.SHUTDOWN_DERBY_SERVER)){
0: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.stopDerbyServerLaunchConfigurationType");
0: 			type= manager.getLaunchConfigurationType(CommonNames.STOP_SERVER_LAUNCH_CONFIG_TYPE);
0: 		}else if(app.equalsIgnoreCase(CommonNames.IJ)){
0: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.ijDerbyLaunchConfigurationType");
0: 			type= manager.getLaunchConfigurationType(CommonNames.IJ_LAUNCH_CONFIG_TYPE);
0: 		}else if(app.equalsIgnoreCase(CommonNames.SYSINFO)){
0: 			//type= manager.getLaunchConfigurationType("org.apache.derby.ui.sysinfoDerbyLaunchConfigurationType");
0: 			type= manager.getLaunchConfigurationType(CommonNames.SYSINFO_LAUNCH_CONFIG_TYPE);
0: 		}else{
0: 			type = manager.getLaunchConfigurationType(IJavaLaunchConfigurationConstants.ID_JAVA_APPLICATION);
0: 		}
0: 		ILaunchConfiguration config = null;
0: 		// if the configuration already exists, delete it
0: 		ILaunchConfiguration[] configurations = manager.getLaunchConfigurations(type);
0: 		for (int i = 0; i < configurations.length; i++) {
0: 			if (configurations[i].getName().equals(name))
0: 				configurations[i].delete();
0: 		}
0: 		// else create a new one
0: 		if (config == null) {
0: 			ILaunchConfigurationWorkingCopy wc = type.newInstance(null, name);
0: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME,
0: 				proj.getProject().getName());
0: 			// current directory should be the project root
0: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY,
0: 				proj.getProject().getLocation().toString());
0: 			// use the suplied args
0: 			if((vmargs!=null)&&!(vmargs.equals(""))){
0: 				wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS, vmargs);
0: 			}
0: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME,
0: 				mainClass);
0: 			wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,
0: 				args);
0: 			// saves the new config
0: 			config = wc.doSave();
0: 		}
0: 		ILaunch launch=config.launch(ILaunchManager.RUN_MODE, null);
0: 		config.delete();
0: 		return launch;
0: 	}
0: 	public static void runIJ(IFile currentScript, IProject currentProject) throws CoreException {	
0: 
0: 		String launchType="";
0: 		String args="";
0: 		
0: 		//the above some times throws wrong 'create=true|false' errors
0: 		String vmargs="";
0: 		DerbyProperties dprop=new DerbyProperties(currentProject);
0: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
0: 			vmargs+=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
0: 		}
0: 		
0: 		if(currentScript!=null){
0: 			launchType=CommonNames.SQL_SCRIPT;
0: 			
0: 			//Preferable to use the full String with quotes to take care of spaces 
0: 			//in file names
0: 			args="\""+currentScript.getLocation().toOSString()+"\"";
0: 		}else{
0: 			launchType=CommonNames.IJ;
0: 			args="";	
0: 		}
0: 		
0: 		ILaunch launch=launch(currentProject,launchType,CommonNames.IJ_CLASS,args, vmargs, CommonNames.IJ);
0: 		IProcess ip=launch.getProcesses()[0];
0: 		String procName="["+currentProject.getName()+"] - "+CommonNames.IJ+" "+args;
0: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
0: 	}
0: 	public static void runSysInfo(IProject currentProject) throws CoreException {	
0: 		String args="";
0: 		ILaunch launch=launch(currentProject,CommonNames.SYSINFO,CommonNames.SYSINFO_CLASS,args, null, CommonNames.SYSINFO);
0: 		IProcess ip=launch.getProcesses()[0];
0: 		String procName="["+currentProject.getName()+"] - "+CommonNames.SYSINFO;
0: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
0: 	}
0: 	//another launch mechanism 																	
0: 	public void launch() throws CoreException{
0: 		DerbyPlugin plugin = DerbyPlugin.getDefault();
0: 
0: 		// constructs a classpath from the default JRE...
0: 		IPath systemLibs = new Path(JavaRuntime.JRE_CONTAINER);
0: 		IRuntimeClasspathEntry systemLibsEntry = JavaRuntime.newRuntimeContainerClasspathEntry(
0: 			systemLibs, IRuntimeClasspathEntry.STANDARD_CLASSES);
0: 		systemLibsEntry.setClasspathProperty(IRuntimeClasspathEntry.BOOTSTRAP_CLASSES);
0: 		//include org.apache.derby.core plugin
0: 		IRuntimeClasspathEntry derbyCPEntry = null;
0: 		List classpath = new ArrayList();
0: 		classpath.add(systemLibsEntry.getMemento());
0: 		
0: 		try {
0: 			ManifestElement[] elements_core, elements_ui;
0: 			elements_core = getElements(CommonNames.CORE_PATH);
0: 			elements_ui=getElements(CommonNames.UI_PATH);
0: 			
0: 			Bundle bundle;
0: 			URL pluginURL,jarURL,localURL;
0: 			bundle=Platform.getBundle(CommonNames.CORE_PATH);
0: 			pluginURL = bundle.getEntry("/");
0: 			for(int i=0;i<elements_core.length;i++){
0: 				if(!elements_core[i].getValue().toLowerCase().endsWith("derbynet.jar")){
0: 					jarURL= new URL(pluginURL,elements_core[i].getValue());
0: 					localURL=Platform.asLocalURL(jarURL);
0: 					derbyCPEntry = JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
0: 					derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
0: 					classpath.add(derbyCPEntry.getMemento());
0: 				}
0: 			}
0: 			bundle=Platform.getBundle(CommonNames.CORE_PATH);
0: 			pluginURL = bundle.getEntry("/");
0: 			for(int i=0;i<elements_ui.length;i++){
0: 				if(!elements_ui[i].getValue().toLowerCase().equals("ui.jar")){
0: 					jarURL= new URL(pluginURL,elements_ui[i].getValue());
0: 					localURL=Platform.asLocalURL(jarURL);
0: 					derbyCPEntry = JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
0: 					derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
0: 					classpath.add(derbyCPEntry.getMemento());
0: 				}
0: 			}
0: 		}
0: 		catch(Exception e) {
0: 			e.printStackTrace();
0: 			Logger.log("Error in launch() "+e,IStatus.ERROR);
0: 		}
0: 	
0: 	}
0: }
============================================================================