1:18fca03: /*
2:18fca03: 
1:18fca03:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.PositionedStoreStreamTest
1:18fca03: 
1:18fca03:    Licensed to the Apache Software Foundation (ASF) under one
1:18fca03:    or more contributor license agreements.  See the NOTICE file
1:18fca03:    distributed with this work for additional information
1:18fca03:    regarding copyright ownership.  The ASF licenses this file
1:18fca03:    to you under the Apache License, Version 2.0 (the
1:18fca03:    "License"); you may not use this file except in compliance
1:18fca03:    with the License.  You may obtain a copy of the License at
1:18fca03: 
1:18fca03:      http://www.apache.org/licenses/LICENSE-2.0
1:18fca03: 
1:18fca03:    Unless required by applicable law or agreed to in writing,
1:18fca03:    software distributed under the License is distributed on an
1:18fca03:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:18fca03:    KIND, either express or implied.  See the License for the
1:18fca03:    specific language governing permissions and limitations
1:18fca03:    under the License.
1:18fca03: 
1:18fca03:  */
1:18fca03: package org.apache.derbyTesting.functionTests.tests.store;
1:18fca03: 
1:634b64f: import java.io.EOFException;
1:18fca03: import java.io.IOException;
1:18fca03: import java.io.InputStream;
1:18fca03: import java.util.Arrays;
1:18fca03: import junit.framework.Test;
1:18fca03: import org.apache.derby.iapi.error.StandardException;
1:18fca03: import org.apache.derby.impl.jdbc.PositionedStoreStream;
1:18fca03: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:18fca03: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:18fca03: 
1:18fca03: /**
1:18fca03:  * Tests of the repositioning logic in {@link PositionedStoreStream}.
1:18fca03:  */
1:18fca03: public class PositionedStoreStreamTest
1:18fca03:     extends BaseTestCase {
1:18fca03: 
1:18fca03:     public PositionedStoreStreamTest(String name) {
1:18fca03:         super(name);
1:18fca03:     }
1:18fca03: 
1:18fca03:     /**
1:18fca03:      * Verifies that reading after EOF doesn't change the position.
1:18fca03:      */
1:18fca03:     public void testPositionAfterEOFRead()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         InputStream in = new LoopingAlphabetStream(10);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         assertEquals(0, pss.getPosition());
1:18fca03:         for (int i=0; i < 10; i++) {
1:18fca03:             pss.read();
1:18fca03:             assertEquals(i +1, pss.getPosition());
1:18fca03:         }
1:18fca03:         assertEquals(10, pss.getPosition());
1:18fca03:         assertEquals(-1, pss.read());
1:18fca03:         assertEquals(10, pss.getPosition());
1:18fca03:         assertEquals(-1, pss.read());
1:18fca03:         assertEquals(0, pss.skip(199));
1:18fca03:         assertEquals(10, pss.getPosition());
1:18fca03:         pss.resetStream();
1:18fca03:         assertEquals(0, pss.getPosition());
1:18fca03:     }
1:18fca03: 
1:18fca03:     /**
1:18fca03:      * Verifies that reading after EOF doesn't change the position.
1:18fca03:      */
1:18fca03:     public void testPositionAfterEOFReadArray()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         InputStream in = new LoopingAlphabetStream(10);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         assertEquals(0, pss.getPosition());
1:18fca03:         byte[] two = new byte[2];
1:18fca03:         for (int i=0; i < 10; i += 2) {
1:18fca03:             assertEquals(2, pss.read(two, 0, 2));
1:18fca03:             assertEquals(i +2, pss.getPosition());
1:18fca03:         }
1:18fca03:         assertEquals(10, pss.getPosition());
1:18fca03:         assertEquals(-1, pss.read(two, 0, 2));
1:18fca03:         assertEquals(10, pss.getPosition());
1:18fca03:         assertEquals(-1, pss.read(two, 0, 2));
1:18fca03:         assertEquals(0, pss.skip(21));
1:18fca03:         assertEquals(-1, pss.read());
1:18fca03:         assertEquals(10, pss.getPosition());
1:18fca03:         pss.resetStream();
1:18fca03:         assertEquals(0, pss.getPosition());
1:18fca03:     }
1:18fca03: 
1:18fca03:     /**
1:18fca03:      * Reads the whole stream repeatedly in one go, and resets it after each
1:18fca03:      * read.
1:18fca03:      */
1:18fca03:     public void testReadEverythingInOneGo()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         InputStream in = new LoopingAlphabetStream(127);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         byte[] b = new byte[256];
1:18fca03:         for (int i=0; i < 3; i++) {
1:18fca03:             Arrays.fill(b, (byte)-1);
1:18fca03:             assertEquals(127, pss.read(b, 0, 256));
1:18fca03:             assertEquals(-1, pss.read(b, 127, 10));
1:18fca03:             assertEquals(-1, b[127]);
1:18fca03:             assertTrue( -1 != b[126]);
1:18fca03:             assertEquals('a', b[0]);
1:18fca03:             pss.reposition(0);
1:18fca03:         }
1:18fca03:     }
1:18fca03: 
1:18fca03:     public void testRepositionForwards()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         final long length = 20L;
1:18fca03:         InputStream in = new LoopingAlphabetStream(length);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         assertEquals(0, pss.getPosition());
1:18fca03:         //  Position forwards one by one.
1:18fca03:         for (int i=0; i < length; i++) {
1:18fca03:             InputStream inComp = new LoopingAlphabetStream(length);
1:18fca03:             pss.reposition(i);
1:18fca03:             inComp.skip(i);
1:18fca03:             assertEquals(inComp.read(), pss.read());
1:18fca03:         }
1:18fca03:         // Position forwards two by two.
1:18fca03:         for (int i=1; i < length; i += 2) {
1:18fca03:             InputStream inComp = new LoopingAlphabetStream(length);
1:18fca03:             pss.reposition(i);
1:18fca03:             inComp.skip(i);
1:18fca03:             assertEquals(inComp.read(), pss.read());
1:18fca03:         }
1:18fca03:     }
1:18fca03:     
1:18fca03:     public void testRepositionBackwards()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         final long length = 20L;
1:18fca03:         InputStream in = new LoopingAlphabetStream(length);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         assertEquals(0, pss.getPosition());
1:18fca03:         // Position backwards one by one.
1:18fca03:         for (int i=(int)length; i >= 0; i--) {
1:18fca03:             InputStream inComp = new LoopingAlphabetStream(length);
1:18fca03:             pss.reposition(i);
1:18fca03:             inComp.skip(i);
1:18fca03:             assertEquals(inComp.read(), pss.read());
1:18fca03:         }
1:18fca03:         // Position backwards two by two.
1:18fca03:         for (int i=(int)length -1; i >= 0; i -= 2) {
1:18fca03:             InputStream inComp = new LoopingAlphabetStream(length);
1:18fca03:             pss.reposition(i);
1:18fca03:             inComp.skip(i);
1:18fca03:             assertEquals(inComp.read(), pss.read());
1:18fca03:         }
1:18fca03:     }
1:18fca03: 
1:634b64f:     /**
1:18fca03:      * Executes a simple read sequence against the lower case modern latin
1:18fca03:      * alphabet, which involves some repositioning.
1:18fca03:      */
1:18fca03:     public void testSimpleReadSequence()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         InputStream in = new LoopingAlphabetStream(26);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         assertEquals('a', pss.read());
1:18fca03:         pss.reposition(9);
1:18fca03:         assertEquals('j', pss.read());
1:18fca03:         pss.reposition(10);
1:18fca03:         assertEquals('k', pss.read());
1:18fca03:         pss.reposition(9);
1:18fca03:         assertEquals('j', pss.read());
1:18fca03:         pss.reposition(25);
1:18fca03:         assertEquals('z', pss.read());
1:18fca03:         assertEquals(-1, pss.read());
1:18fca03:         pss.reposition(1);
1:18fca03:         assertEquals('b', pss.read());
1:18fca03:         pss.reposition(1);
1:18fca03:         assertEquals('b', pss.read());
1:18fca03:     }
1:18fca03: 
1:18fca03:     /**
1:18fca03:      * A regression test for DERBY-3735.
1:18fca03:      * <p>
1:18fca03:      * If the bug is present, the repositioning will cause an EOF-exception to
1:18fca03:      * be thrown in {@code skipFully}.
1:18fca03:      */
1:18fca03:     public void testDerby3735()
1:18fca03:             throws IOException, StandardException {
1:18fca03:         InputStream in = new LoopingAlphabetStream(2);
1:18fca03:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:18fca03:         byte[] b = new byte[2];
1:18fca03:         for (int i=0; i < 10; i++) {
1:18fca03:             // After the first iteration, the position will be decreased and
1:18fca03:             // eventually become negative.
1:18fca03:             pss.read(b);
1:18fca03:             println("Position at iteration " + i + ": " + pss.getPosition());
1:18fca03:         }
1:18fca03:         // This failed, because we tried skipping more bytes than there are in
1:18fca03:         // the stream to get to position 0.
1:18fca03:         pss.reposition(0);
1:18fca03:     }
1:18fca03: 
1:18fca03:     /**
1:634b64f:      * Tests that trying to move past the end of the stream leaves the stream
1:634b64f:      * object in a consistent state, and can be repositioned again after the
1:634b64f:      * failed reposition attempt.
1:634b64f:      * <p>
1:634b64f:      * Issue logged in Jira as DERBY-3781
1:634b64f:      *
1:634b64f:      * @throws IOException if reading the stream fails unexpectedly
1:634b64f:      * @throws StandardException will never happen
1:634b64f:      */
1:634b64f:     public void testDerby3781()
1:634b64f:             throws IOException, StandardException {
1:634b64f:         final long size = 10;
1:634b64f:         InputStream in = new LoopingAlphabetStream(size);
1:634b64f:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:634b64f:         assertEquals("Invalid initial position", 0L, pss.getPosition());
1:634b64f:         pss.reposition(size -1); // Goto end.
1:634b64f:         assertEquals(size -1, pss.getPosition());
1:634b64f:         assertEquals('j', pss.read());
1:634b64f:         assertEquals(size, pss.getPosition());
1:634b64f:         assertEquals(-1, pss.read());
1:634b64f:         // This step is crucial, position must be different than zero when the
1:634b64f:         // first exception below is thrown.
1:634b64f:         pss.reposition(size / 2); // Goto middle.
1:634b64f:         assertEquals(size / 2, pss.getPosition());
1:634b64f:         try {
1:634b64f:             pss.reposition(size *2); // Try to go past end.
1:634b64f:             fail("Should have failed with EOFException");
1:634b64f:         } catch (EOFException eofe) {
1:634b64f:             // Ignore this exception
1:634b64f:         }
1:634b64f:         // Failed here before, because internal state was inconsistent.
1:634b64f:         // Assumed: pos = 5, underlying stream at pos 5, skipped (size -1 - pos)
1:634b64f:         // Actual: pos = 5, underlying stream at pos (size -1)
1:634b64f:         pss.reposition(size -1); // Goto end.
1:634b64f:         assertEquals(size -1, pss.getPosition());
1:634b64f:         assertEquals('j', pss.read());
1:634b64f:     }
1:634b64f: 
1:18fca03:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(
1:18fca03:                 PositionedStoreStreamTest.class, "PositionedStoreStreamTest");
1:18fca03:     }
1:18fca03: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:634b64f
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tests that trying to move past the end of the stream leaves the stream
1:      * object in a consistent state, and can be repositioned again after the
1:      * failed reposition attempt.
1:      * <p>
1:      * Issue logged in Jira as DERBY-3781
1:      *
1:      * @throws IOException if reading the stream fails unexpectedly
1:      * @throws StandardException will never happen
1:      */
1:     public void testDerby3781()
1:             throws IOException, StandardException {
1:         final long size = 10;
1:         InputStream in = new LoopingAlphabetStream(size);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         assertEquals("Invalid initial position", 0L, pss.getPosition());
1:         pss.reposition(size -1); // Goto end.
1:         assertEquals(size -1, pss.getPosition());
1:         assertEquals('j', pss.read());
1:         assertEquals(size, pss.getPosition());
1:         assertEquals(-1, pss.read());
1:         // This step is crucial, position must be different than zero when the
1:         // first exception below is thrown.
1:         pss.reposition(size / 2); // Goto middle.
1:         assertEquals(size / 2, pss.getPosition());
1:         try {
1:             pss.reposition(size *2); // Try to go past end.
1:             fail("Should have failed with EOFException");
1:         } catch (EOFException eofe) {
1:             // Ignore this exception
1:         }
1:         // Failed here before, because internal state was inconsistent.
1:         // Assumed: pos = 5, underlying stream at pos 5, skipped (size -1 - pos)
1:         // Actual: pos = 5, underlying stream at pos (size -1)
1:         pss.reposition(size -1); // Goto end.
1:         assertEquals(size -1, pss.getPosition());
1:         assertEquals('j', pss.read());
1:     }
1: 
commit:18fca03
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.PositionedStoreStreamTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import java.util.Arrays;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.impl.jdbc.PositionedStoreStream;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Tests of the repositioning logic in {@link PositionedStoreStream}.
1:  */
1: public class PositionedStoreStreamTest
1:     extends BaseTestCase {
1: 
1:     public PositionedStoreStreamTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Verifies that reading after EOF doesn't change the position.
1:      */
1:     public void testPositionAfterEOFRead()
1:             throws IOException, StandardException {
1:         InputStream in = new LoopingAlphabetStream(10);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         assertEquals(0, pss.getPosition());
1:         for (int i=0; i < 10; i++) {
1:             pss.read();
1:             assertEquals(i +1, pss.getPosition());
1:         }
1:         assertEquals(10, pss.getPosition());
1:         assertEquals(-1, pss.read());
1:         assertEquals(10, pss.getPosition());
1:         assertEquals(-1, pss.read());
1:         assertEquals(0, pss.skip(199));
1:         assertEquals(10, pss.getPosition());
1:         pss.resetStream();
1:         assertEquals(0, pss.getPosition());
1:     }
1: 
1:     /**
1:      * Verifies that reading after EOF doesn't change the position.
1:      */
1:     public void testPositionAfterEOFReadArray()
1:             throws IOException, StandardException {
1:         InputStream in = new LoopingAlphabetStream(10);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         assertEquals(0, pss.getPosition());
1:         byte[] two = new byte[2];
1:         for (int i=0; i < 10; i += 2) {
1:             assertEquals(2, pss.read(two, 0, 2));
1:             assertEquals(i +2, pss.getPosition());
1:         }
1:         assertEquals(10, pss.getPosition());
1:         assertEquals(-1, pss.read(two, 0, 2));
1:         assertEquals(10, pss.getPosition());
1:         assertEquals(-1, pss.read(two, 0, 2));
1:         assertEquals(0, pss.skip(21));
1:         assertEquals(-1, pss.read());
1:         assertEquals(10, pss.getPosition());
1:         pss.resetStream();
1:         assertEquals(0, pss.getPosition());
1:     }
1: 
1:     /**
1:      * Reads the whole stream repeatedly in one go, and resets it after each
1:      * read.
1:      */
1:     public void testReadEverythingInOneGo()
1:             throws IOException, StandardException {
1:         InputStream in = new LoopingAlphabetStream(127);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         byte[] b = new byte[256];
1:         for (int i=0; i < 3; i++) {
1:             Arrays.fill(b, (byte)-1);
1:             assertEquals(127, pss.read(b, 0, 256));
1:             assertEquals(-1, pss.read(b, 127, 10));
1:             assertEquals(-1, b[127]);
1:             assertTrue( -1 != b[126]);
1:             assertEquals('a', b[0]);
1:             pss.reposition(0);
1:         }
1:     }
1: 
1:     public void testRepositionForwards()
1:             throws IOException, StandardException {
1:         final long length = 20L;
1:         InputStream in = new LoopingAlphabetStream(length);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         assertEquals(0, pss.getPosition());
1:         //  Position forwards one by one.
1:         for (int i=0; i < length; i++) {
1:             InputStream inComp = new LoopingAlphabetStream(length);
1:             pss.reposition(i);
1:             inComp.skip(i);
1:             assertEquals(inComp.read(), pss.read());
1:         }
1:         // Position forwards two by two.
1:         for (int i=1; i < length; i += 2) {
1:             InputStream inComp = new LoopingAlphabetStream(length);
1:             pss.reposition(i);
1:             inComp.skip(i);
1:             assertEquals(inComp.read(), pss.read());
1:         }
1:     }
1:     
1:     public void testRepositionBackwards()
1:             throws IOException, StandardException {
1:         final long length = 20L;
1:         InputStream in = new LoopingAlphabetStream(length);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         assertEquals(0, pss.getPosition());
1:         // Position backwards one by one.
1:         for (int i=(int)length; i >= 0; i--) {
1:             InputStream inComp = new LoopingAlphabetStream(length);
1:             pss.reposition(i);
1:             inComp.skip(i);
1:             assertEquals(inComp.read(), pss.read());
1:         }
1:         // Position backwards two by two.
1:         for (int i=(int)length -1; i >= 0; i -= 2) {
1:             InputStream inComp = new LoopingAlphabetStream(length);
1:             pss.reposition(i);
1:             inComp.skip(i);
1:             assertEquals(inComp.read(), pss.read());
1:         }
1:     }
1: 
1:     /**
1:      * Executes a simple read sequence against the lower case modern latin
1:      * alphabet, which involves some repositioning.
1:      */
1:     public void testSimpleReadSequence()
1:             throws IOException, StandardException {
1:         InputStream in = new LoopingAlphabetStream(26);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         assertEquals('a', pss.read());
1:         pss.reposition(9);
1:         assertEquals('j', pss.read());
1:         pss.reposition(10);
1:         assertEquals('k', pss.read());
1:         pss.reposition(9);
1:         assertEquals('j', pss.read());
1:         pss.reposition(25);
1:         assertEquals('z', pss.read());
1:         assertEquals(-1, pss.read());
1:         pss.reposition(1);
1:         assertEquals('b', pss.read());
1:         pss.reposition(1);
1:         assertEquals('b', pss.read());
1:     }
1: 
1:     /**
1:      * A regression test for DERBY-3735.
1:      * <p>
1:      * If the bug is present, the repositioning will cause an EOF-exception to
1:      * be thrown in {@code skipFully}.
1:      */
1:     public void testDerby3735()
1:             throws IOException, StandardException {
1:         InputStream in = new LoopingAlphabetStream(2);
1:         PositionedStoreStream pss = new PositionedStoreStream(in);
1:         byte[] b = new byte[2];
1:         for (int i=0; i < 10; i++) {
1:             // After the first iteration, the position will be decreased and
1:             // eventually become negative.
1:             pss.read(b);
1:             println("Position at iteration " + i + ": " + pss.getPosition());
1:         }
1:         // This failed, because we tried skipping more bytes than there are in
1:         // the stream to get to position 0.
1:         pss.reposition(0);
1:     }
1: 
1:     public static Test suite() {
0:         return new TestSuite(
1:                 PositionedStoreStreamTest.class, "PositionedStoreStreamTest");
1:     }
1: }
============================================================================