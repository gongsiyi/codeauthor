1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.FileResource
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
9:eac0369: 
5:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: 
5:eac0369: /**
1:eac0369: 	Management of file resources within	a database. Suitable for jar
1:eac0369: 	files, images etc.
1:eac0369: 
1:eac0369: 	<P>A file resource is identified by the pair (name,generationId).
1:eac0369: 	Name is an arbitrary String supplied by the caller. GenerationId
1:eac0369: 	is a non-repeating sequence number constructed by the database.
1:eac0369: 	Within a database a	(name,generationId) pair uniquely identifies
1:eac0369: 	a version of a file resource for all time. Newer generation
1:eac0369: 	numbers reflect newer versions of the file.
1:eac0369: 
1:eac0369: 	<P>A database supports the concept of a designated current version
1:eac0369: 	of a fileResource. The management of the current version is
1:eac0369: 	transactional. The following rules apply
1:eac0369: 	<OL>
1:eac0369: 	<LI>Adding a FileResource makes the added version the current
1:eac0369: 	version
1:eac0369: 	<LI>Removing a FileResource removes the current version of the
1:eac0369: 	resource. After this operation the database holds no current
1:eac0369: 	version of the FileResoure.
1:eac0369: 	<LI>Replacing a FileResource removes the current version of the
1:eac0369: 	resource.
1:eac0369: 	</OL>
1:eac0369: 	
1:eac0369: 	<P>For the benefit of replication, a database optionally retains 
1:eac0369: 	historic versions of stored files. These old versions are
1:eac0369: 	useful when processing old transactions in the stage. 
1:eac0369: */
1:eac0369: public interface FileResource {
1:eac0369: 
1:eac0369:     /**
1:c10c404:        The name of the jar directory
1:eac0369:     */
1:c10c404:     public static final String JAR_DIRECTORY_NAME = "jar";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Add a file resource, copying from the input stream.
1:eac0369: 	  
1:eac0369: 	  The InputStream will be closed by this method.
1:eac0369: 	  @param name the name of the file resource.
1:eac0369: 	  @param source an input stream for reading the content of
1:eac0369: 	         the file resource.
1:eac0369: 	  @return the generationId for the file resource. This
1:eac0369: 	  quantity increases when you replace the file resource.
1:eac0369: 
1:eac0369: 	  @exception StandardException some error occured.
1:eac0369: 	*/
1:eac0369: 	public long add(String name,InputStream source)
2:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Remove the current generation of a file resource from
1:eac0369: 	  the database.
1:eac0369: 
1:eac0369: 	  @param name the name of the fileResource to remove.
1:eac0369: 	  
1:eac0369: 	  @exception StandardException some error occured.
1:eac0369: 	  */
1:609999f: 	public void remove(String name, long currentGenerationId)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:78c2db1:     /**
1:dbed020:      * During hard upgrade to &lt;= 10.9, remove a jar directory (at post-commit 
1:78c2db1:      * time) from the database.
1:78c2db1:      * @param f
1:f668d94:      * @exception StandardException if an error occurs
1:78c2db1:      */
1:78c2db1:     public void removeJarDir(String f) throws StandardException;
1:78c2db1:     
1:eac0369: 	/**
1:eac0369: 	  Replace a file resource with a new version.
1:eac0369: 
1:eac0369: 	  <P>The InputStream will be closed by this method.
1:eac0369: 
1:eac0369: 	  @param name the name of the file resource.
1:eac0369: 	  @param source an input stream for reading the content of
1:eac0369: 	  the file resource.
1:eac0369: 	  @return the generationId for the new 'current' version of the
1:eac0369: 	          file resource. 
1:eac0369: 	  @exception StandardException some error occured.
1:eac0369: 	*/
1:609999f: 	public long replace(String name, long currentGenerationId, InputStream source)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:fb93460: 	  Get the StorageFile for a file resource.
1:eac0369: 	  
2:eac0369: 	  @param name The name of the fileResource
1:eac0369: 	  @param generationId the generationId of the fileResource
1:eac0369: 	  
1:fb93460: 	  @return A StorageFile object representing the file.
1:eac0369: 	  */
1:eac0369: 	public StorageFile getAsFile(String name, long generationId);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @return the separator character to be used in file names.
1:eac0369:      */
1:eac0369:     public char getSeparatorChar();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * During hard upgrade to &lt;= 10.9, remove a jar directory (at post-commit 
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException if an error occurs
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:78c2db1
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * During hard upgrade to >= 10.9, remove a jar directory (at post-commit 
1:      * time) from the database.
1:      * @param f
0:      * @exception standard error policy
1:      */
1:     public void removeJarDir(String f) throws StandardException;
1:     
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4841b0e
/////////////////////////////////////////////////////////////////////////
commit:fb93460
/////////////////////////////////////////////////////////////////////////
1: 	  Get the StorageFile for a file resource.
1: 	  @return A StorageFile object representing the file.
commit:609999f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void remove(String name, long currentGenerationId)
/////////////////////////////////////////////////////////////////////////
1: 	public long replace(String name, long currentGenerationId, InputStream source)
commit:949ce92
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.FileResource
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.DatabaseInstant;
1: import org.apache.derby.io.StorageFile;
1: 
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /**
1: 	Management of file resources within	a database. Suitable for jar
1: 	files, images etc.
1: 
1: 	<P>A file resource is identified by the pair (name,generationId).
1: 	Name is an arbitrary String supplied by the caller. GenerationId
1: 	is a non-repeating sequence number constructed by the database.
1: 	Within a database a	(name,generationId) pair uniquely identifies
1: 	a version of a file resource for all time. Newer generation
1: 	numbers reflect newer versions of the file.
1: 
1: 	<P>A database supports the concept of a designated current version
1: 	of a fileResource. The management of the current version is
1: 	transactional. The following rules apply
1: 	<OL>
1: 	<LI>Adding a FileResource makes the added version the current
1: 	version
1: 	<LI>Removing a FileResource removes the current version of the
1: 	resource. After this operation the database holds no current
1: 	version of the FileResoure.
1: 	<LI>Replacing a FileResource removes the current version of the
1: 	resource.
1: 	</OL>
1: 	
1: 	<P>For the benefit of replication, a database optionally retains 
1: 	historic versions of stored files. These old versions are
1: 	useful when processing old transactions in the stage. 
1: */
1: public interface FileResource {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	
1: 	/**
1: 	  Add a file resource, copying from the input stream.
1: 	  
1: 	  The InputStream will be closed by this method.
1: 	  @param name the name of the file resource.
1: 	  @param source an input stream for reading the content of
1: 	         the file resource.
0: 	  @param name the name of the fileResource
1: 	  @return the generationId for the file resource. This
1: 	  quantity increases when you replace the file resource.
1: 
1: 	  @exception StandardException some error occured.
1: 	*/
1: 	public long add(String name,InputStream source)
1: 		throws StandardException;
1: 
1: 	/**
1: 	  Remove the current generation of a file resource from
1: 	  the database.
1: 
1: 	  @param name the name of the fileResource to remove.
0: 	  @param purgeOnCommit true means purge the fileResource 
0: 	         when the current transaction commits. false means retain
0: 	         the file resource for use by replication. 
1: 	  
1: 	  @exception StandardException some error occured.
1: 	  */
0: 	public void remove(String name, long currentGenerationId, boolean purgeOnCommit)
1: 		throws StandardException;
1: 
1: 	/**
1: 	  Replace a file resource with a new version.
1: 
1: 	  <P>The InputStream will be closed by this method.
1: 
1: 	  @param name the name of the file resource.
1: 	  @param source an input stream for reading the content of
1: 	  the file resource.
0: 	  @param purgeOnCommit true means purge the existing version of
0: 	         fileResource when the current transaction commits. false 
0: 	         means retain the existing version for use by replication. 
1: 	  @return the generationId for the new 'current' version of the
1: 	          file resource. 
1: 	  @exception StandardException some error occured.
1: 	*/
0: 	public long replace(String name, long currentGenerationId, InputStream source,boolean purgeOnCommit)
1: 		throws StandardException;
1: 
1: 	/**
0: 	  Get the File handle to a file resource. In some situations
0: 	  higher level code can make optimisations if it can access
0: 	  a file as a File, rather than an output stream. If this call
0: 	  returns null then the resouce is not accessable as a file
0: 	  (e.g. the database is in a zip file).
1: 	  
1: 	  @param name The name of the fileResource
1: 	  @param generationId the generationId of the fileResource
1: 	  
0: 	  @return A File object representing the file, or null if
0: 	  the resource is not accessable as a file.
1: 	  */
1: 	public StorageFile getAsFile(String name, long generationId);
1: 
1: 	/**
0: 	  Get the File handle to a file resource. In some situations
0: 	  higher level code can make optimisations if it can access
0: 	  a file as a File, rather than an output stream. If this call
0: 	  returns null then the resouce is not accessable as a file
0: 	  (e.g. the database is in a zip file).
1: 	  
1: 	  @param name The name of the fileResource
1: 	  
0: 	  @return A File object representing the file, or null if
0: 	  the resource is not accessable as a file.
1: 	  */
0: 	public StorageFile getAsFile(String name);
1: 
1: 	/**
0: 	  Get the file resource as a stream.
1: 
0: 	  @exception IOException some io error occured
0: 	  @exception FileNotFoundException file does not exist.
1: 	*/
0: 	public InputStream getAsStream(String name, long generationId)
0: 		throws IOException;
1: 
1: 	/**
0: 	  Get the file resource as a stream.
1: 
0: 	  @exception IOException some io error occured
0: 	  @exception FileNotFoundException file does not exist.
1: 	*/
0: 	public InputStream getAsStream(String name)
0: 		throws IOException;
1: 	/**
0: 	  Purge old generations that were removed or replaced
0: 	  before the database instant provided.
0: 	  @exception StandardException Ooops
1: 	  */
0:     public void purgeOldGenerations(DatabaseInstant purgeTo)
1: 		throws StandardException;
1: 
1:     /**
1:      * @return the separator character to be used in file names.
1:      */
1:     public char getSeparatorChar();
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:c10c404
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:        The name of the jar directory
0:     */
1:     public static final String JAR_DIRECTORY_NAME = "jar";
0: 
commit:f2ee915
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.DatabaseInstant;
0: import org.apache.derby.io.StorageFile;
0: 
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.io.InputStream;
0: 
0: /**
0: 	Management of file resources within	a database. Suitable for jar
0: 	files, images etc.
0: 
0: 	<P>A file resource is identified by the pair (name,generationId).
0: 	Name is an arbitrary String supplied by the caller. GenerationId
0: 	is a non-repeating sequence number constructed by the database.
0: 	Within a database a	(name,generationId) pair uniquely identifies
0: 	a version of a file resource for all time. Newer generation
0: 	numbers reflect newer versions of the file.
0: 
0: 	<P>A database supports the concept of a designated current version
0: 	of a fileResource. The management of the current version is
0: 	transactional. The following rules apply
0: 	<OL>
0: 	<LI>Adding a FileResource makes the added version the current
0: 	version
0: 	<LI>Removing a FileResource removes the current version of the
0: 	resource. After this operation the database holds no current
0: 	version of the FileResoure.
0: 	<LI>Replacing a FileResource removes the current version of the
0: 	resource.
0: 	</OL>
0: 	
0: 	<P>For the benefit of replication, a database optionally retains 
0: 	historic versions of stored files. These old versions are
0: 	useful when processing old transactions in the stage. 
0: */
0: public interface FileResource {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	
0: 	/**
0: 	  Add a file resource, copying from the input stream.
0: 	  
0: 	  The InputStream will be closed by this method.
0: 	  @param name the name of the file resource.
0: 	  @param source an input stream for reading the content of
0: 	         the file resource.
0: 	  @param name the name of the fileResource
0: 	  @return the generationId for the file resource. This
0: 	  quantity increases when you replace the file resource.
0: 
0: 	  @exception StandardException some error occured.
0: 	*/
0: 	public long add(String name,InputStream source)
0: 		throws StandardException;
0: 
0: 	/**
0: 	  Remove the current generation of a file resource from
0: 	  the database.
0: 
0: 	  @param name the name of the fileResource to remove.
0: 	  @param purgeOnCommit true means purge the fileResource 
0: 	         when the current transaction commits. false means retain
0: 	         the file resource for use by replication. 
0: 	  
0: 	  @exception StandardException some error occured.
0: 	  */
0: 	public void remove(String name, long currentGenerationId, boolean purgeOnCommit)
0: 		throws StandardException;
0: 
0: 	/**
0: 	  Replace a file resource with a new version.
0: 
0: 	  <P>The InputStream will be closed by this method.
0: 
0: 	  @param name the name of the file resource.
0: 	  @param source an input stream for reading the content of
0: 	  the file resource.
0: 	  @param purgeOnCommit true means purge the existing version of
0: 	         fileResource when the current transaction commits. false 
0: 	         means retain the existing version for use by replication. 
0: 	  @return the generationId for the new 'current' version of the
0: 	          file resource. 
0: 	  @exception StandardException some error occured.
0: 	*/
0: 	public long replace(String name, long currentGenerationId, InputStream source,boolean purgeOnCommit)
0: 		throws StandardException;
0: 
0: 	/**
0: 	  Get the File handle to a file resource. In some situations
0: 	  higher level code can make optimisations if it can access
0: 	  a file as a File, rather than an output stream. If this call
0: 	  returns null then the resouce is not accessable as a file
0: 	  (e.g. the database is in a zip file).
0: 	  
0: 	  @param name The name of the fileResource
0: 	  @param generationId the generationId of the fileResource
0: 	  
0: 	  @return A File object representing the file, or null if
0: 	  the resource is not accessable as a file.
0: 	  */
0: 	public StorageFile getAsFile(String name, long generationId);
0: 
0: 	/**
0: 	  Get the File handle to a file resource. In some situations
0: 	  higher level code can make optimisations if it can access
0: 	  a file as a File, rather than an output stream. If this call
0: 	  returns null then the resouce is not accessable as a file
0: 	  (e.g. the database is in a zip file).
0: 	  
0: 	  @param name The name of the fileResource
0: 	  
0: 	  @return A File object representing the file, or null if
0: 	  the resource is not accessable as a file.
0: 	  */
0: 	public StorageFile getAsFile(String name);
0: 
0: 	/**
0: 	  Get the file resource as a stream.
0: 
0: 	  @exception IOException some io error occured
0: 	  @exception FileNotFoundException file does not exist.
0: 	*/
0: 	public InputStream getAsStream(String name, long generationId)
0: 		throws IOException;
0: 
0: 	/**
0: 	  Get the file resource as a stream.
0: 
0: 	  @exception IOException some io error occured
0: 	  @exception FileNotFoundException file does not exist.
0: 	*/
0: 	public InputStream getAsStream(String name)
0: 		throws IOException;
0: 	/**
0: 	  Purge old generations that were removed or replaced
0: 	  before the database instant provided.
0: 	  @exception StandardException Ooops
0: 	  */
0:     public void purgeOldGenerations(DatabaseInstant purgeTo)
0: 		throws StandardException;
0: 
0:     /**
0:      * @return the separator character to be used in file names.
0:      */
0:     public char getSeparatorChar();
0: }
============================================================================