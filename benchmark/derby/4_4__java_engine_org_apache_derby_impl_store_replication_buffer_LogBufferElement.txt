1:2957f69: /*
6:2957f69: 
1:1bac3f3:    Derby - Class org.apache.derby.impl.store.replication.buffer.LogBufferElement
1:2957f69: 
1:2957f69:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2957f69:    contributor license agreements.  See the NOTICE file distributed with
1:2957f69:    this work for additional information regarding copyright ownership.
1:2957f69:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2957f69:    (the "License"); you may not use this file except in compliance with
1:2957f69:    the License.  You may obtain a copy of the License at
1:2957f69: 
1:2957f69:       http://www.apache.org/licenses/LICENSE-2.0
1:2957f69: 
1:2957f69:    Unless required by applicable law or agreed to in writing, software
1:2957f69:    distributed under the License is distributed on an "AS IS" BASIS,
1:2957f69:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2957f69:    See the License for the specific language governing permissions and
1:2957f69:    limitations under the License.
1:2957f69: 
3:2957f69:  */
1:2957f69: 
1:1bac3f3: package org.apache.derby.impl.store.replication.buffer;
1:2957f69: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2957f69: 
3:2957f69: /**
1:2957f69:  * ReplicationLogBuffer consists of n LogBufferElements, each of which
1:5235dfd:  * can store a number of log records in a single byte[].
1:1c08813:  * <p>
1:5235dfd:  * The format of each log record in the LogBufferElement is the same
1:5235dfd:  * as is written to log file in LogAccessFile:<br>
1:5235dfd:  *
1:5235dfd:  * (int)    total_length (data[].length + optionaldata[].length)<br>
1:5235dfd:  * (long)   instant<br>
1:5235dfd:  * (byte[]) data+optionaldata<br>
1:5235dfd:  * (int)    total_length<br>
1:5235dfd:  *
1:1c08813:  * </p>
1:5235dfd:  * In addition to adding a chunk of log records to the byte[], the
1:2957f69:  * greatestInstant variable is updated for every append so that
1:2957f69:  * getLastInstant can be used to get the highest log instant in this
1:2957f69:  * LogBufferElement.
1:2957f69:  */
1:2957f69: 
1:2957f69: class LogBufferElement {
1:2957f69: 
1:2957f69:     private final byte[] bufferdata;
1:2957f69:     private int position;
1:2957f69:     private long greatestInstant;
1:2957f69:     // put back in freeBuffers when content has been sent to slave?
1:2957f69:     private boolean recycleMe;
1:2957f69: 
1:2957f69:     protected LogBufferElement(int bufferSize){
1:2957f69:         bufferdata = new byte[bufferSize];
1:2957f69:         init();
5:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * Resets all variables to default values. Should be called before
1:2957f69:      * a LogBufferElement is reused.
1:2957f69:      */
1:2957f69:     protected void init() {
1:2957f69:         this.position = 0;
1:2957f69:         greatestInstant = 0;
1:2957f69:         recycleMe = true; //always recycle unless explicitly told otherwise
1:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:5235dfd:      * Append a chunk of log records to this LogBufferElement.
2:2957f69:      *
1:5235dfd:      * @param greatestInstant   the instant of the log record that was
1:5235dfd:      *                          added last to this chunk of log
1:5235dfd:      * @param log               the chunk of log records
1:5235dfd:      * @param logOffset         offset in log to start copy from
1:5235dfd:      * @param logLength         number of bytes to copy, starting
1:5235dfd:      *                          from logOffset
1:2957f69:      **/
1:5235dfd:     protected void appendLog(long greatestInstant,
1:5235dfd:                              byte[] log, int logOffset, int logLength) {
1:2957f69: 
1:2957f69:         if (SanityManager.DEBUG){
1:5235dfd:             SanityManager.ASSERT(freeSize() >= logLength,
1:5235dfd:                                  "Log chunk does not fit into"+
1:2957f69:                                  " this LogBufferElement");
1:2957f69:         }
1:2957f69: 
1:5235dfd:         this.greatestInstant = greatestInstant;
1:5235dfd:         position = appendBytes(log, logOffset, position, logLength);
1:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * @return A byte[] representation of the log records appended to
1:2957f69:      * this LogBufferElement
1:2957f69:      */
1:2957f69:     protected byte[] getData(){
1:2957f69:         return bufferdata;
1:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * @return The highest log instant appended to this LogBufferElement
1:2957f69:      */
1:2957f69:     protected long getLastInstant(){
1:2957f69:         return greatestInstant;
1:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * @return Number of unused bytes in this LogBufferElement
1:2957f69:      */
1:2957f69:     protected int freeSize(){
1:2957f69:         return bufferdata.length - position;
1:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * @return Number of used bytes in this LogBufferElement
1:2957f69:      */
1:2957f69:     protected int size(){
1:2957f69:         return position;
1:2957f69:     }
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * @return true if this LogBufferElement should be reused, i.e.
1:2957f69:      * added to freeBuffers after being consumed.
1:2957f69:      */
1:2957f69:     protected boolean isRecyclable(){
1:2957f69:         return recycleMe;
1:2957f69:     }
1:2957f69: 
1:2957f69:     protected void setRecyclable(boolean r){
1:2957f69:         recycleMe = r;
1:2957f69:     }
1:2957f69: 
1:2957f69:     /*
1:2957f69:      * The append methods should be changed to use java.nio.ByteBuffer
1:2957f69:      * if it is decided that replication will never use j2me. We use
1:2957f69:      * our own implementation for now so that j2me is not blocked.
1:2957f69:      */
1:2957f69: 
1:2957f69:     /**
1:2957f69:      * Append a byte[] to this LogBufferElement.
1:5235dfd:      *
1:5235dfd:      * @param b       where the bytes are copied from
1:5235dfd:      * @param offset  offset in b to start copying from
1:5235dfd:      * @param pos     the position in this LogBufferElement to start copying to
1:5235dfd:      * @param length  number of bytes to copy from b, starting from offset
1:5235dfd:      *
3:2957f69:      * @return new position
1:2957f69:      */
1:5235dfd:     private int appendBytes(byte b[], int offset, int pos, int length) {
1:2957f69:         if (SanityManager.DEBUG){
1:5235dfd:             SanityManager.ASSERT(freeSize() >= length,
1:2957f69:                                  "byte[] is to big to fit"+
1:2957f69:                                  " into this buffer");
1:2957f69:             SanityManager.ASSERT(b != null, "Cannot append null to buffer");
1:2957f69:         }
1:5235dfd:         System.arraycopy(b, offset, bufferdata, pos, length);
1:2957f69:         return pos + length;
1:2957f69:     }
1:2957f69: 
1:2957f69: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.replication.buffer.LogBufferElement
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.store.replication.buffer;
commit:5235dfd
/////////////////////////////////////////////////////////////////////////
1:  * can store a number of log records in a single byte[].
1:  * The format of each log record in the LogBufferElement is the same
1:  * as is written to log file in LogAccessFile:<br>
1:  *
1:  * (int)    total_length (data[].length + optionaldata[].length)<br>
1:  * (long)   instant<br>
1:  * (byte[]) data+optionaldata<br>
1:  * (int)    total_length<br>
1:  *
1:  * In addition to adding a chunk of log records to the byte[], the
/////////////////////////////////////////////////////////////////////////
1:      * Append a chunk of log records to this LogBufferElement.
1:      * @param greatestInstant   the instant of the log record that was
1:      *                          added last to this chunk of log
1:      * @param log               the chunk of log records
1:      * @param logOffset         offset in log to start copy from
1:      * @param logLength         number of bytes to copy, starting
1:      *                          from logOffset
1:     protected void appendLog(long greatestInstant,
1:                              byte[] log, int logOffset, int logLength) {
1:             SanityManager.ASSERT(freeSize() >= logLength,
1:                                  "Log chunk does not fit into"+
1:         this.greatestInstant = greatestInstant;
1:         position = appendBytes(log, logOffset, position, logLength);
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param b       where the bytes are copied from
1:      * @param offset  offset in b to start copying from
1:      * @param pos     the position in this LogBufferElement to start copying to
1:      * @param length  number of bytes to copy from b, starting from offset
1:      *
1:     private int appendBytes(byte b[], int offset, int pos, int length) {
1:             SanityManager.ASSERT(freeSize() >= length,
1:         System.arraycopy(b, offset, bufferdata, pos, length);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1c08813
/////////////////////////////////////////////////////////////////////////
1:  * <p>
0:  * The format of each log record in the LogBufferElement is:
0:  * <br>
0:  * (long)   instant <br>
0:  * (int)    dataLength <br>
0:  * (int)    dataOffset <br>
0:  * (int)    optionalDataLength <br>
0:  * (int)    optionalDataOffset <br>
0:  * (byte[]) data (with length dataLength) <br>
0:  * (byte[]) optionalData (with length optionalDataLength) <br>
0:  * <br>
1:  * </p>
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2957f69
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.impl.services.replication.buffer.LogBufferElement
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: package org.apache.derby.impl.services.replication.buffer;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * ReplicationLogBuffer consists of n LogBufferElements, each of which
0:  * can store m log records in a single byte[].
1:  *
0:  * In addition to adding the log record information to the byte[], the
1:  * greatestInstant variable is updated for every append so that
1:  * getLastInstant can be used to get the highest log instant in this
1:  * LogBufferElement.
1:  */
1: 
1: class LogBufferElement {
1: 
1:     private final byte[] bufferdata;
1:     private int position;
1:     private long greatestInstant;
1:     // put back in freeBuffers when content has been sent to slave?
1:     private boolean recycleMe;
1: 
1:     protected LogBufferElement(int bufferSize){
1:         bufferdata = new byte[bufferSize];
1:         init();
1:     }
1: 
1:     /**
1:      * Resets all variables to default values. Should be called before
1:      * a LogBufferElement is reused.
1:      */
1:     protected void init() {
1:         this.position = 0;
1:         greatestInstant = 0;
1:         recycleMe = true; //always recycle unless explicitly told otherwise
1:     }
1: 
1:     /**
0:      * Append a single log record to this LogBufferElement.
1:      *
0:      * @param instant               the log address of this log record.
0:      * @param dataLength            number of bytes in data[]
0:      * @param dataOffset            offset in data[] to start copying from.
0:      * @param optionalDataLength    number of bytes in optionalData[]
0:      * @param optionalDataOffset    offset in optionalData[] to start copy from
0:      * @param data                  "from" array to copy "data" portion of rec
0:      * @param optionalData          "from" array to copy "optional data" from
1:      **/
0:     protected void appendLogRecord(long instant,
0:                                 int dataLength,
0:                                 int dataOffset,
0:                                 int optionalDataLength,
0:                                 int optionalDataOffset,
0:                                 byte[] data,
0:                                 byte[] optionalData){
1: 
1:         if (SanityManager.DEBUG){
0:             int totalSize = dataLength + optionalDataLength +
0:                 ReplicationLogBuffer.LOG_RECORD_FIXED_OVERHEAD_SIZE;
0:             SanityManager.ASSERT(freeSize() >= totalSize,
0:                                  "Log record does not fit into"+
1:                                  " this LogBufferElement");
1:         }
1: 
0:         position = appendLong(instant, position);
0:         position = appendInt(dataLength, position);
0:         position = appendInt(dataOffset, position);
0:         position = appendInt(optionalDataLength, position);
0:         position = appendInt(optionalDataOffset, position);
1: 
0:         if (dataLength > 0){
0:             position = appendBytes(data, position, dataLength);
1:         }
1: 
0:         if (optionalDataLength > 0) {
0:             position = appendBytes(optionalData, position, optionalDataLength);
1:         }
1: 
0:         this.greatestInstant = instant;
1:     }
1: 
1:     /**
1:      * @return A byte[] representation of the log records appended to
1:      * this LogBufferElement
1:      */
1:     protected byte[] getData(){
1:         return bufferdata;
1:     }
1: 
1:     /**
1:      * @return The highest log instant appended to this LogBufferElement
1:      */
1:     protected long getLastInstant(){
1:         return greatestInstant;
1:     }
1: 
1:     /**
1:      * @return Number of unused bytes in this LogBufferElement
1:      */
1:     protected int freeSize(){
1:         return bufferdata.length - position;
1:     }
1: 
1:     /**
1:      * @return Number of used bytes in this LogBufferElement
1:      */
1:     protected int size(){
1:         return position;
1:     }
1: 
1:     /**
1:      * @return true if this LogBufferElement should be reused, i.e.
1:      * added to freeBuffers after being consumed.
1:      */
1:     protected boolean isRecyclable(){
1:         return recycleMe;
1:     }
1: 
1:     protected void setRecyclable(boolean r){
1:         recycleMe = r;
1:     }
1: 
1:     /*
1:      * The append methods should be changed to use java.nio.ByteBuffer
1:      * if it is decided that replication will never use j2me. We use
1:      * our own implementation for now so that j2me is not blocked.
1:      */
1: 
1:     /**
1:      * Append a byte[] to this LogBufferElement.
1:      * @return new position
1:      */
0:     private int appendBytes(byte b[], int pos, int length) {
1:         if (SanityManager.DEBUG){
0:             SanityManager.ASSERT(freeSize() >= (pos+length),
1:                                  "byte[] is to big to fit"+
1:                                  " into this buffer");
1:             SanityManager.ASSERT(b != null, "Cannot append null to buffer");
1:         }
0:         System.arraycopy(b, 0, bufferdata, pos, length);
1:         return pos + length;
1:     }
1: 
1:     /**
0:      * Append an int to this LogBufferElement.
1:      * @return new position
1:      */
0:     private int appendInt(int i, int p) {
0:         bufferdata[p++] = (byte) (i >> 24);
0:         bufferdata[p++] = (byte) (i >> 16);
0:         bufferdata[p++] = (byte) (i >> 8);
0:         bufferdata[p++] = (byte) i;
0:         return p;
1:     }
1: 
1:     /**
0:      * Append a long to this LogBufferElement.
1:      * @return new position
1:      */
0:     private int appendLong(long l, int p) {
0:         bufferdata[p++] = (byte) (l >> 56);
0:         bufferdata[p++] = (byte) (l >> 48);
0:         bufferdata[p++] = (byte) (l >> 40);
0:         bufferdata[p++] = (byte) (l >> 32);
0:         bufferdata[p++] = (byte) (l >> 24);
0:         bufferdata[p++] = (byte) (l >> 16);
0:         bufferdata[p++] = (byte) (l >> 8);
0:         bufferdata[p++] = (byte) l;
0:         return p;
1:     }
1: 
1: }
============================================================================