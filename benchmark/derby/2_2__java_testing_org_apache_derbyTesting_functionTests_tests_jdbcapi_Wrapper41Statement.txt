1:de8ba18: /*
1:de8ba18:  
1:de8ba18:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Wrapper41Statement
1:de8ba18:  
1:de8ba18:    Licensed to the Apache Software Foundation (ASF) under one or more
1:de8ba18:    contributor license agreements.  See the NOTICE file distributed with
1:de8ba18:    this work for additional information regarding copyright ownership.
1:de8ba18:    The ASF licenses this file to you under the Apache License, Version 2.0
1:de8ba18:    (the "License"); you may not use this file except in compliance with
1:de8ba18:    the License.  You may obtain a copy of the License at
1:de8ba18:  
1:de8ba18:       http://www.apache.org/licenses/LICENSE-2.0
1:de8ba18:  
1:de8ba18:    Unless required by applicable law or agreed to in writing, software
1:de8ba18:    distributed under the License is distributed on an "AS IS" BASIS,
1:de8ba18:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:de8ba18:    See the License for the specific language governing permissions and
1:de8ba18:    limitations under the License.
1:de8ba18:  
1:de8ba18:  */
1:de8ba18: 
1:de8ba18: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:de8ba18: 
1:de8ba18: import java.lang.reflect.Method;
1:de8ba18: import java.sql.SQLException;
1:69e3d06: import org.apache.derby.client.am.ClientStatement;
1:de8ba18: 
1:de8ba18: import org.apache.derby.iapi.jdbc.EngineStatement;
1:de8ba18: import org.apache.derby.client.am.LogicalPreparedStatement;
1:de8ba18: 
1:de8ba18: /**
1:de8ba18:  * A wrapper around the new Statement methods added by JDBC 4.1.
1:de8ba18:  */
1:de8ba18: public  class   Wrapper41Statement
1:de8ba18: {
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18:     //
1:de8ba18:     // STATE
1:de8ba18:     //
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18: 
1:de8ba18:     private EngineStatement     _engineStatement;
1:69e3d06:     private ClientStatement       _netStatement;
1:de8ba18:     private LogicalPreparedStatement  _logicalStatement;
1:de8ba18:     
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18:     //
1:de8ba18:     // CONSTRUCTORS
1:de8ba18:     //
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18: 
1:de8ba18:     public Wrapper41Statement( Object wrapped ) throws Exception
1:de8ba18:     {
1:de8ba18:         if ( wrapped instanceof EngineStatement ) { _engineStatement = (EngineStatement) wrapped; }
1:69e3d06:         else if ( wrapped instanceof ClientStatement ) { _netStatement = (ClientStatement) wrapped; }
1:de8ba18:         else if ( wrapped instanceof LogicalPreparedStatement ) { _logicalStatement = (LogicalPreparedStatement) wrapped; }
1:de8ba18:         else { throw nothingWrapped(); }
1:de8ba18:     }
1:de8ba18:     
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18:     //
1:de8ba18:     // JDBC 4.1 BEHAVIOR
1:de8ba18:     //
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18: 
1:de8ba18:     public  void    closeOnCompletion() throws SQLException
1:de8ba18:     {
1:de8ba18:         if ( _engineStatement != null ) { _engineStatement.closeOnCompletion(); }
1:de8ba18:         else if ( _netStatement != null ) { _netStatement.closeOnCompletion(); }
1:de8ba18:         else if ( _logicalStatement != null ) { _logicalStatement.closeOnCompletion(); }
1:de8ba18:         else { throw nothingWrapped(); }
1:de8ba18:     }
1:de8ba18: 
1:de8ba18:     public  boolean isCloseOnCompletion() throws SQLException
1:de8ba18:     {
1:de8ba18:         if ( _engineStatement != null ) { return _engineStatement.isCloseOnCompletion(); }
1:de8ba18:         else if ( _netStatement != null ) { return _netStatement.isCloseOnCompletion(); }
1:de8ba18:         else if ( _logicalStatement != null ) { return _logicalStatement.isCloseOnCompletion(); }
1:de8ba18:         else { throw nothingWrapped(); }
1:de8ba18:     }
1:de8ba18: 
1:de8ba18: 
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18:     //
1:de8ba18:     // OTHER PUBLIC BEHAVIOR
1:de8ba18:     //
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18: 
1:de8ba18:     public java.sql.Statement   getWrappedObject() throws SQLException
1:de8ba18:     {
1:de8ba18:         if ( _engineStatement != null ) { return _engineStatement; }
1:de8ba18:         else if ( _netStatement != null ) { return _netStatement; }
1:de8ba18:         else if ( _logicalStatement != null ) { return _logicalStatement; }
1:de8ba18:         else { throw nothingWrapped(); }
1:de8ba18:     }
1:de8ba18: 
1:de8ba18:     public  boolean isClosed()  throws Exception
1:de8ba18:     {
1:de8ba18:         java.sql.Statement  stmt = getWrappedObject();
1:de8ba18:         Method  method = stmt.getClass().getMethod( "isClosed", null );
1:de8ba18: 
1:de8ba18:         return ((Boolean) method.invoke( stmt, null )).booleanValue();
1:de8ba18:     }
1:de8ba18: 
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18:     //
1:de8ba18:     // MINIONS
1:de8ba18:     //
1:de8ba18:     ///////////////////////////////////////////////////////////////////////
1:de8ba18: 
1:de8ba18:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1:de8ba18: 
1:de8ba18: }
1:de8ba18: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientStatement;
/////////////////////////////////////////////////////////////////////////
1:     private ClientStatement       _netStatement;
/////////////////////////////////////////////////////////////////////////
1:         else if ( wrapped instanceof ClientStatement ) { _netStatement = (ClientStatement) wrapped; }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:de8ba18
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Wrapper41Statement
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.lang.reflect.Method;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.jdbc.EngineStatement;
1: import org.apache.derby.client.am.LogicalPreparedStatement;
1: 
1: /**
1:  * A wrapper around the new Statement methods added by JDBC 4.1.
1:  */
1: public  class   Wrapper41Statement
1: {
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     private EngineStatement     _engineStatement;
0:     private org.apache.derby.client.am.Statement       _netStatement;
1:     private LogicalPreparedStatement  _logicalStatement;
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public Wrapper41Statement( Object wrapped ) throws Exception
1:     {
1:         if ( wrapped instanceof EngineStatement ) { _engineStatement = (EngineStatement) wrapped; }
0:         else if ( wrapped instanceof org.apache.derby.client.am.Statement ) { _netStatement = (org.apache.derby.client.am.Statement) wrapped; }
1:         else if ( wrapped instanceof LogicalPreparedStatement ) { _logicalStatement = (LogicalPreparedStatement) wrapped; }
1:         else { throw nothingWrapped(); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // JDBC 4.1 BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public  void    closeOnCompletion() throws SQLException
1:     {
1:         if ( _engineStatement != null ) { _engineStatement.closeOnCompletion(); }
1:         else if ( _netStatement != null ) { _netStatement.closeOnCompletion(); }
1:         else if ( _logicalStatement != null ) { _logicalStatement.closeOnCompletion(); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     public  boolean isCloseOnCompletion() throws SQLException
1:     {
1:         if ( _engineStatement != null ) { return _engineStatement.isCloseOnCompletion(); }
1:         else if ( _netStatement != null ) { return _netStatement.isCloseOnCompletion(); }
1:         else if ( _logicalStatement != null ) { return _logicalStatement.isCloseOnCompletion(); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public java.sql.Statement   getWrappedObject() throws SQLException
1:     {
1:         if ( _engineStatement != null ) { return _engineStatement; }
1:         else if ( _netStatement != null ) { return _netStatement; }
1:         else if ( _logicalStatement != null ) { return _logicalStatement; }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     public  boolean isClosed()  throws Exception
1:     {
1:         java.sql.Statement  stmt = getWrappedObject();
1:         Method  method = stmt.getClass().getMethod( "isClosed", null );
1: 
1:         return ((Boolean) method.invoke( stmt, null )).booleanValue();
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1: 
1: }
1: 
============================================================================