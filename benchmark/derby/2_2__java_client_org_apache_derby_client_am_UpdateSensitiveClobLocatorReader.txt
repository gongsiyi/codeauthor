1:a8908bd: /*
1:a8908bd:  
1:a8908bd:    Derby - Class org.apache.derby.client.am.UpdateSensitiveClobLocatorReader
1:a8908bd:  
1:a8908bd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a8908bd:    contributor license agreements.  See the NOTICE file distributed with
1:a8908bd:    this work for additional information regarding copyright ownership.
1:a8908bd:    The ASF licenses this file to You under the Apache License, Version 2.0
1:a8908bd:    (the "License"); you may not use this file except in compliance with
1:a8908bd:    the License.  You may obtain a copy of the License at
1:a8908bd:  
1:a8908bd:       http://www.apache.org/licenses/LICENSE-2.0
1:a8908bd:  
1:a8908bd:    Unless required by applicable law or agreed to in writing, software
1:a8908bd:    distributed under the License is distributed on an "AS IS" BASIS,
1:a8908bd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8908bd:    See the License for the specific language governing permissions and
1:a8908bd:    limitations under the License.
1:a8908bd:  
1:a8908bd:  */
1:a8908bd: 
1:a8908bd: package org.apache.derby.client.am;
1:a8908bd: 
1:a8908bd: import java.io.BufferedReader;
1:a8908bd: import java.io.IOException;
1:a8908bd: import java.io.Reader;
1:a8908bd: 
1:a8908bd: /**
1:a8908bd:  * Wraps a Buffered Clob locator reader and watches out
1:a8908bd:  * for updates on the Clob associated with it.
1:a8908bd:  * Before a read operation is performed on the Reader
1:a8908bd:  * this stream verifies that the underlying Clob has not
1:a8908bd:  * changed and if it has it recreates the specific streams.
1:a8908bd:  */
1:0326967: class UpdateSensitiveClobLocatorReader extends Reader {
1:a8908bd:     //The ClobLocatorReader instance
1:a8908bd:     //wrapped inside a BufferedReader
1:a8908bd:     private BufferedReader r = null;
1:a8908bd:     
1:a8908bd:     //The connection object from which
1:a8908bd:     //this Clob is obtained.
1:69e3d06:     private ClientConnection con = null;
1:a8908bd:     
1:a8908bd:     //Stores the Clob instance
1:a8908bd:     //this class refers to.
1:69e3d06:     private ClientClob clob = null;
1:a8908bd:     
1:a8908bd:     //stores the current value of
1:a8908bd:     //the updateCount in the Clob.
1:a8908bd:     private long updateCount;
1:a8908bd:     
1:a8908bd:     
1:a8908bd:     //Current position in the underlying Clob.
1:a8908bd:     //lobs are indexed from 1
1:a8908bd:     private long currentPos;
1:a8908bd:     
1:a8908bd:     //Stores the length of the partial value
1:a8908bd:     //contained in this stream.
1:a8908bd:     private long length;
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Initializes the Reader, updateCount, currentPos
1:a8908bd:      * and the connection to the appropriate values.
1:a8908bd:      *
1:90543a4:      * @param con connection to be used to read the
1:a8908bd:      *        <code>Clob</code> value from the server
1:a8908bd:      * @param clob the <code>Clob</code> object associated with
1:a8908bd:      *            this stream.
1:a8908bd:      */
1:69e3d06:     protected UpdateSensitiveClobLocatorReader(
1:69e3d06:             ClientConnection con,
1:69e3d06:             ClientClob clob) throws SqlException {
1:69e3d06: 
1:a8908bd:         //check if the locator associated with the
1:a8908bd:         //underlying Clob is valid.
1:a8908bd:         clob.checkForLocatorValidity();
1:a8908bd:         
1:a8908bd:         //Wrap the ClobLocator instance inside a
1:a8908bd:         //Buffered reader.
1:a8908bd:         this.r = new BufferedReader(new ClobLocatorReader(con, clob));
1:a8908bd:         //Since the position has
1:a8908bd:         //not been mentioned it starts
1:a8908bd:         //with 1.
1:a8908bd:         this.currentPos = 1;
1:a8908bd:         this.con = con;
1:a8908bd:         this.clob = clob;
1:a8908bd:         //store the current update
1:a8908bd:         //count.
1:a8908bd:         updateCount = clob.getUpdateCount();
1:a8908bd:         //The length has not been mentioned
1:a8908bd:         //hence initialize it to -1.
1:a8908bd:         this.length = -1;
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Initializes the Reader, updateCount, currentPos,
1:a8908bd:      * length and the connection to the appropriate values.
1:a8908bd:      *
1:90543a4:      * @param con connection to be used to read the
1:a8908bd:      *        <code>Clob</code> value from the server
1:a8908bd:      * @param clob the <code>Clob</code> object associated with
1:a8908bd:      *             this reader.
1:a8908bd:      * @param pos the position from which the first read begins.
1:a8908bd:      * @param len the length in bytes of the partial value to be
1:a8908bd:      *            retrieved.
1:a8908bd:      *
1:a8908bd:      */
1:69e3d06:     protected UpdateSensitiveClobLocatorReader(
1:69e3d06:             ClientConnection con,
1:69e3d06:             ClientClob clob,
1:69e3d06:             long pos,
1:69e3d06:             long len) throws SqlException {
1:69e3d06: 
1:a8908bd:         //check if the locator associated with the
1:a8908bd:         //underlying Clob is valid.
1:a8908bd:         clob.checkForLocatorValidity();
1:a8908bd:         
1:a8908bd:         this.r = new BufferedReader(new ClobLocatorReader(con, clob, pos, len));
1:a8908bd:         this.con = con;
1:a8908bd:         this.clob = clob;
1:a8908bd:         this.currentPos = pos;
1:a8908bd:         this.length = len;
1:a8908bd:         //store the current update
1:a8908bd:         //count.
1:a8908bd:         updateCount = clob.getUpdateCount();
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * @see java.io.Reader#read()
1:a8908bd:      */
1:a8908bd:     public int read() throws IOException {
1:a8908bd:         //verify if the underlying Clob has
1:a8908bd:         //been modified and if yes recreate
1:a8908bd:         //the streams.
1:a8908bd:         identifyAndReplaceObseleteStream();
1:a8908bd:         int ret = r.read();
1:a8908bd:         if (ret == -1) {
1:a8908bd:             return ret;
1:a8908bd:         }
1:a8908bd:         currentPos++;
1:a8908bd:         return ret;
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * @see java.io.Reader#read(char[], int, int)
1:a8908bd:      */
1:a8908bd:     public int read(char[] c, int off, int len) throws IOException {
1:a8908bd:         //verify if the underlying Clob has
1:a8908bd:         //been modified and if yes recreate
1:a8908bd:         //the streams.
1:a8908bd:         identifyAndReplaceObseleteStream();
1:a8908bd:         int ret = r.read(c, off, len);
1:a8908bd:         if (ret == -1) {
1:a8908bd:             return ret;
1:a8908bd:         }
1:a8908bd:         currentPos += ret;
1:a8908bd:         return ret;
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * @see java.io.Reader#close()
1:a8908bd:      */
1:a8908bd:     public void close() throws IOException {
1:a8908bd:         r.close();
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Verifies whether the current updateCount matches
1:a8908bd:      * the updateCount of the Clob object and if it does
1:a8908bd:      * not it recreates the stream.
1:a8908bd:      *
1:a8908bd:      * @throws IOException If any exception occurs upon
1:a8908bd:      *                     Locator stream creation.
1:a8908bd:      */
1:a8908bd:     private void identifyAndReplaceObseleteStream() throws IOException {
1:a8908bd:         //Stores the current update count
1:a8908bd:         //value obtained from the Clob.
1:a8908bd:         long newUpdateCount;
1:a8908bd:         //Get the current update count.
1:a8908bd:         newUpdateCount = clob.getUpdateCount();
1:a8908bd:         //verify if the updateCount of the stream
1:a8908bd:         //and the current value present in the Clob
1:a8908bd:         //matches.
1:a8908bd:         if (updateCount != newUpdateCount) {
1:a8908bd:             //The values do not match.
1:a8908bd:             //This means that the data
1:a8908bd:             //in the Clob has changed and
1:a8908bd:             //hence the streams need
1:a8908bd:             //to be re-created.
1:a8908bd:             
1:a8908bd:             //re-create the stream
1:a8908bd:             try {
1:a8908bd:                 //Wrap the re-created stream in a
1:a8908bd:                 //BufferedReader before returning
1:a8908bd:                 //it to he user.
1:a8908bd:                 r = new BufferedReader(reCreateStream());
1:a8908bd:             }
1:a8908bd:             catch(SqlException sqle) {
1:a8908bd:                 IOException ioe = new IOException();
1:a8908bd:                 ioe.initCause(sqle);
1:a8908bd:                 throw ioe;
1:a8908bd:             }
1:a8908bd:             
1:a8908bd:             //update the current update count
1:a8908bd:             //with the new update count value.
1:a8908bd:             updateCount = newUpdateCount;
1:a8908bd:         } else {
1:a8908bd:             //The underlying Clob value is
1:a8908bd:             //the same. Hence do nothing.
1:a8908bd:             return;
1:a8908bd:         }
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Re-creates the underlying Locator stream
1:a8908bd:      * with the current position and the length
1:a8908bd:      * values if specified.
1:a8908bd:      */
1:0326967:     private Reader reCreateStream() throws SqlException {
1:a8908bd:         Reader r_ = null;
1:a8908bd:         //Verify if a subset of the underlying
1:a8908bd:         //Clob data was requested.
1:a8908bd:         if (length != -1) {
1:a8908bd:             //The length information is available.
1:a8908bd:             //It should be used while re-creating
1:a8908bd:             //the stream.
1:a8908bd:             r_ = new ClobLocatorReader(con, clob, currentPos, 
1:a8908bd:                     length - currentPos +1);
1:a8908bd:         }
1:a8908bd:         else {
1:a8908bd:             //The length information is not
1:a8908bd:             //available.
1:a8908bd:             r_ = new ClobLocatorReader(con, clob, currentPos, -1);
1:a8908bd:         }
1:a8908bd:         return r_;
1:a8908bd:     }
1:a8908bd: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class UpdateSensitiveClobLocatorReader extends Reader {
/////////////////////////////////////////////////////////////////////////
1:     private Reader reCreateStream() throws SqlException {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1:     private ClientConnection con = null;
1:     private ClientClob clob = null;
/////////////////////////////////////////////////////////////////////////
1:     protected UpdateSensitiveClobLocatorReader(
1:             ClientConnection con,
1:             ClientClob clob) throws SqlException {
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected UpdateSensitiveClobLocatorReader(
1:             ClientConnection con,
1:             ClientClob clob,
1:             long pos,
1:             long len) throws SqlException {
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:90543a4
/////////////////////////////////////////////////////////////////////////
1:      * @param con connection to be used to read the
/////////////////////////////////////////////////////////////////////////
1:      * @param con connection to be used to read the
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.UpdateSensitiveClobLocatorReader
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.Reader;
1: 
1: /**
1:  * Wraps a Buffered Clob locator reader and watches out
1:  * for updates on the Clob associated with it.
1:  * Before a read operation is performed on the Reader
1:  * this stream verifies that the underlying Clob has not
1:  * changed and if it has it recreates the specific streams.
1:  */
0: public class UpdateSensitiveClobLocatorReader extends Reader {
1:     //The ClobLocatorReader instance
1:     //wrapped inside a BufferedReader
1:     private BufferedReader r = null;
1:     
1:     //The connection object from which
1:     //this Clob is obtained.
0:     private Connection con = null;
1:     
1:     //Stores the Clob instance
1:     //this class refers to.
0:     private Clob clob = null;
1:     
1:     //stores the current value of
1:     //the updateCount in the Clob.
1:     private long updateCount;
1:     
1:     
1:     //Current position in the underlying Clob.
1:     //lobs are indexed from 1
1:     private long currentPos;
1:     
1:     //Stores the length of the partial value
1:     //contained in this stream.
1:     private long length;
1:     
1:     /**
1:      * Initializes the Reader, updateCount, currentPos
1:      * and the connection to the appropriate values.
1:      *
0:      * @param connection connection to be used to read the
1:      *        <code>Clob</code> value from the server
1:      * @param clob the <code>Clob</code> object associated with
1:      *            this stream.
0:      * @param r a <code>Reader</code> that contains an instance
0:      *          of <code>ClobLocatorReader</code>.
1:      */
0:     protected UpdateSensitiveClobLocatorReader(Connection con, Clob clob) 
0:     throws SqlException {
1:         //check if the locator associated with the
1:         //underlying Clob is valid.
1:         clob.checkForLocatorValidity();
1:         
1:         //Wrap the ClobLocator instance inside a
1:         //Buffered reader.
1:         this.r = new BufferedReader(new ClobLocatorReader(con, clob));
1:         //Since the position has
1:         //not been mentioned it starts
1:         //with 1.
1:         this.currentPos = 1;
1:         this.con = con;
1:         this.clob = clob;
1:         //store the current update
1:         //count.
1:         updateCount = clob.getUpdateCount();
1:         //The length has not been mentioned
1:         //hence initialize it to -1.
1:         this.length = -1;
1:     }
1:     
1:     /**
1:      * Initializes the Reader, updateCount, currentPos,
1:      * length and the connection to the appropriate values.
1:      *
0:      * @param connection connection to be used to read the
1:      *        <code>Clob</code> value from the server
1:      * @param clob the <code>Clob</code> object associated with
1:      *             this reader.
0:      * @param r an <code>Reader</code> that contains the
0:      *           <code>ClobLocatorReader</code> instance.
1:      * @param pos the position from which the first read begins.
1:      * @param len the length in bytes of the partial value to be
1:      *            retrieved.
1:      *
1:      */
0:     protected UpdateSensitiveClobLocatorReader(Connection con, Clob clob, 
0:             long pos, long len) throws SqlException {
1:         //check if the locator associated with the
1:         //underlying Clob is valid.
1:         clob.checkForLocatorValidity();
1:         
1:         this.r = new BufferedReader(new ClobLocatorReader(con, clob, pos, len));
1:         this.con = con;
1:         this.clob = clob;
1:         this.currentPos = pos;
1:         this.length = len;
1:         //store the current update
1:         //count.
1:         updateCount = clob.getUpdateCount();
1:     }
1:     
1:     /**
1:      * @see java.io.Reader#read()
1:      */
1:     public int read() throws IOException {
1:         //verify if the underlying Clob has
1:         //been modified and if yes recreate
1:         //the streams.
1:         identifyAndReplaceObseleteStream();
1:         int ret = r.read();
1:         if (ret == -1) {
1:             return ret;
1:         }
1:         currentPos++;
1:         return ret;
1:     }
1:     
1:     /**
1:      * @see java.io.Reader#read(char[], int, int)
1:      */
1:     public int read(char[] c, int off, int len) throws IOException {
1:         //verify if the underlying Clob has
1:         //been modified and if yes recreate
1:         //the streams.
1:         identifyAndReplaceObseleteStream();
1:         int ret = r.read(c, off, len);
1:         if (ret == -1) {
1:             return ret;
1:         }
1:         currentPos += ret;
1:         return ret;
1:     }
1:     
1:     /**
1:      * @see java.io.Reader#close()
1:      */
1:     public void close() throws IOException {
1:         r.close();
1:     }
1:     
1:     /**
1:      * Verifies whether the current updateCount matches
1:      * the updateCount of the Clob object and if it does
1:      * not it recreates the stream.
1:      *
1:      * @throws IOException If any exception occurs upon
1:      *                     Locator stream creation.
1:      */
1:     private void identifyAndReplaceObseleteStream() throws IOException {
1:         //Stores the current update count
1:         //value obtained from the Clob.
1:         long newUpdateCount;
1:         //Get the current update count.
1:         newUpdateCount = clob.getUpdateCount();
1:         //verify if the updateCount of the stream
1:         //and the current value present in the Clob
1:         //matches.
1:         if (updateCount != newUpdateCount) {
1:             //The values do not match.
1:             //This means that the data
1:             //in the Clob has changed and
1:             //hence the streams need
1:             //to be re-created.
1:             
1:             //re-create the stream
1:             try {
1:                 //Wrap the re-created stream in a
1:                 //BufferedReader before returning
1:                 //it to he user.
1:                 r = new BufferedReader(reCreateStream());
1:             }
1:             catch(SqlException sqle) {
1:                 IOException ioe = new IOException();
1:                 ioe.initCause(sqle);
1:                 throw ioe;
1:             }
1:             
1:             //update the current update count
1:             //with the new update count value.
1:             updateCount = newUpdateCount;
1:         } else {
1:             //The underlying Clob value is
1:             //the same. Hence do nothing.
1:             return;
1:         }
1:     }
1:     
1:     /**
1:      * Re-creates the underlying Locator stream
1:      * with the current position and the length
1:      * values if specified.
1:      */
0:     protected Reader reCreateStream() throws SqlException {
1:         Reader r_ = null;
1:         //Verify if a subset of the underlying
1:         //Clob data was requested.
1:         if (length != -1) {
1:             //The length information is available.
1:             //It should be used while re-creating
1:             //the stream.
1:             r_ = new ClobLocatorReader(con, clob, currentPos, 
1:                     length - currentPos +1);
1:         }
1:         else {
1:             //The length information is not
1:             //available.
1:             r_ = new ClobLocatorReader(con, clob, currentPos, -1);
1:         }
1:         return r_;
1:     }
1: }
============================================================================