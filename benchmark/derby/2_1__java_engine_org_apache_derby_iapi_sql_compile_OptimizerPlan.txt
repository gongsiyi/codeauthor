1:a56ecfa: /*
3:a56ecfa: 
1:a56ecfa:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizerPlan
1:a56ecfa: 
1:a56ecfa:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a56ecfa:    contributor license agreements.  See the NOTICE file distributed with
1:a56ecfa:    this work for additional information regarding copyright ownership.
1:a56ecfa:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a56ecfa:    (the "License"); you may not use this file except in compliance with
1:a56ecfa:    the License.  You may obtain a copy of the License at
1:a56ecfa: 
1:a56ecfa:       http://www.apache.org/licenses/LICENSE-2.0
1:a56ecfa: 
1:a56ecfa:    Unless required by applicable law or agreed to in writing, software
1:a56ecfa:    distributed under the License is distributed on an "AS IS" BASIS,
1:a56ecfa:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a56ecfa:    See the License for the specific language governing permissions and
1:a56ecfa:    limitations under the License.
1:a56ecfa: 
1:a56ecfa:  */
1:a56ecfa: 
1:a56ecfa: package org.apache.derby.iapi.sql.compile;
1:a56ecfa: 
1:a56ecfa: import org.apache.derby.catalog.AliasInfo;
1:a56ecfa: import org.apache.derby.iapi.error.StandardException;
1:a56ecfa: import org.apache.derby.iapi.reference.SQLState;
1:a56ecfa: import org.apache.derby.iapi.sql.StatementUtil;
1:a56ecfa: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:a56ecfa: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.UniqueTupleDescriptor;
1:a56ecfa: import org.apache.derby.iapi.util.IdUtil;
1:a56ecfa: 
1:a56ecfa: /**
1:a56ecfa:  * <p>
1:a56ecfa:  * High level description of a plan for consideration by the Optimizer.
1:a56ecfa:  * This is used to specify a complete plan via optimizer overrides. A
1:a56ecfa:  * plan is a tree whose interior nodes are join operators and whose
1:a56ecfa:  * leaves are row sources (conglomerates or tableFunctions).
1:a56ecfa:  * </p>
1:a56ecfa:  */
1:a56ecfa: public abstract class OptimizerPlan
4:a56ecfa: {
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa:     //
1:a56ecfa:     //	CONSTANTS
1:a56ecfa:     //
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa: 
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa:     //
1:a56ecfa:     //	FACTORY METHODS
1:a56ecfa:     //
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa: 
1:a56ecfa:     /**
1:a56ecfa:      * <p>
1:a56ecfa:      * Make a RowSource corresponding to the given tuple descriptor.
1:a56ecfa:      * </p>
1:a56ecfa:      */
1:a56ecfa:     public  static  RowSource   makeRowSource( UniqueTupleDescriptor utd, DataDictionary dd )
1:a56ecfa:         throws StandardException
1:a56ecfa:     {
1:a56ecfa:         if ( utd == null ) { return null; }
1:a56ecfa:         else if ( utd instanceof ConglomerateDescriptor )
1:a56ecfa:         {
1:a56ecfa:             return new ConglomerateRS( (ConglomerateDescriptor) utd, dd );
4:a56ecfa:         }
1:a56ecfa:         else if ( utd instanceof AliasDescriptor )
1:a56ecfa:         {
1:a56ecfa:             return new TableFunctionRS( (AliasDescriptor) utd );
1:a56ecfa:         }
1:a56ecfa:         else { return null; }
1:a56ecfa:     }
1:a56ecfa:     
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa:     //
1:a56ecfa:     //	ABSTRACT BEHAVIOR
1:a56ecfa:     //
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa: 
1:a56ecfa:     /**
1:a56ecfa:      * <p>
1:a56ecfa:      * Bind the conglomerate and table function names in this plan.
1:a56ecfa:      * </p>
1:a56ecfa:      *
1:a56ecfa:      * @param   dataDictionary  DataDictionary to bind against.
1:a56ecfa:      */
1:a56ecfa:     public abstract    void    bind
1:a56ecfa:         (
1:a56ecfa:          DataDictionary dataDictionary,
1:a56ecfa:          LanguageConnectionContext lcc,
1:bbb545e:          CompilerContext cc
1:a56ecfa:          )
1:a56ecfa:         throws StandardException;
1:a56ecfa: 
1:a56ecfa:     /**
1:a56ecfa:      * <p>
1:a56ecfa:      * Return true if this the schema and RowSource names have been resolved.
1:a56ecfa:      * </p>
1:a56ecfa:      */
1:a56ecfa:     public abstract boolean isBound();
1:a56ecfa: 
1:a56ecfa:     /**
1:a56ecfa:      * <p>
1:a56ecfa:      * Count the number of leaf nodes under (and including) this node.
1:a56ecfa:      * </p>
1:a56ecfa:      */
1:a56ecfa:     public abstract    int countLeafNodes();
1:a56ecfa:     
1:a56ecfa:     /**
1:a56ecfa:      * <p>
1:a56ecfa:      * Get the leftmost leaf node in this plan.
1:a56ecfa:      * </p>
1:a56ecfa:      */
1:3c3e7db:     public abstract    OptimizerPlan    leftmostLeaf();
1:a56ecfa:     
1:a56ecfa:     /**
1:a56ecfa:      * <p>
1:a56ecfa:      * Return true if this plan is a (left) leading prefix of the other plan.
1:a56ecfa:      * </p>
1:a56ecfa:      */
1:a56ecfa:     public abstract    boolean  isLeftPrefixOf( OptimizerPlan that );
1:a56ecfa:     
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa:     //
1:a56ecfa:     //	INNER CLASSES
1:a56ecfa:     //
1:a56ecfa:     ////////////////////////////////////////////////////////////////////////
1:a56ecfa: 
1:a56ecfa:     public static  final   class Join extends OptimizerPlan
1:a56ecfa:     {
1:a56ecfa:         final JoinStrategy    strategy;
1:a56ecfa:         final OptimizerPlan   leftChild;
1:a56ecfa:         final OptimizerPlan   rightChild;
1:a56ecfa:         private boolean _isBound;
1:a56ecfa:         private int         _leafNodeCount = 0;
1:a56ecfa: 
1:a56ecfa:         public Join
1:a56ecfa:             (
1:a56ecfa:              JoinStrategy   strategy,
1:a56ecfa:              OptimizerPlan  leftChild,
1:a56ecfa:              OptimizerPlan  rightChild
1:a56ecfa:              )
1:a56ecfa:         {
1:a56ecfa:             this.strategy = strategy;
1:a56ecfa:             this.leftChild = leftChild;
1:a56ecfa:             this.rightChild = rightChild;
1:a56ecfa:         }
1:a56ecfa: 
1:a56ecfa:         public void    bind
1:a56ecfa:             (
1:a56ecfa:              DataDictionary dataDictionary,
1:a56ecfa:              LanguageConnectionContext lcc,
1:bbb545e:              CompilerContext cc
1:a56ecfa:              )
1:a56ecfa:             throws StandardException
1:a56ecfa:         {
1:a56ecfa:             // only left-deep trees allowed at this time
1:a56ecfa:             if ( !( rightChild instanceof RowSource ) )
1:a56ecfa:             {
1:a56ecfa:                 throw StandardException.newException( SQLState.LANG_NOT_LEFT_DEEP );
1:a56ecfa:             }
1:a56ecfa: 
1:bbb545e:             leftChild.bind( dataDictionary, lcc, cc );
1:bbb545e:             rightChild.bind( dataDictionary, lcc, cc );
1:a56ecfa: 
1:a56ecfa:             _isBound = true;
1:a56ecfa:         }
1:a56ecfa:         
1:a56ecfa:         public boolean isBound() { return _isBound; }
1:a56ecfa:         
1:a56ecfa:         public int countLeafNodes()
1:a56ecfa:         {
1:a56ecfa:             if ( _leafNodeCount <= 0 ) { _leafNodeCount = leftChild.countLeafNodes() + rightChild.countLeafNodes(); }
1:a56ecfa:             return _leafNodeCount;
1:a56ecfa:         }
1:a56ecfa: 
1:3c3e7db:         public OptimizerPlan    leftmostLeaf()   { return leftChild.leftmostLeaf(); }
1:a56ecfa:         
1:a56ecfa:         public boolean  isLeftPrefixOf( OptimizerPlan other )
1:a56ecfa:         {
1:a56ecfa:             if ( !(other instanceof Join) ) { return false; }
1:a56ecfa: 
1:a56ecfa:             Join    that = (Join) other;
1:a56ecfa:             
1:a56ecfa:             int thisLeafCount = this.countLeafNodes();
1:a56ecfa:             int thatLeafCount = that.countLeafNodes();
1:a56ecfa: 
1:a56ecfa:             if ( thisLeafCount > thatLeafCount ) { return false; }
1:a56ecfa:             else if ( thisLeafCount < thatLeafCount ) { return isLeftPrefixOf( that.leftChild ); }
1:a56ecfa:             else { return this.equals( that ); }
1:a56ecfa:         }
1:a56ecfa:         
1:a56ecfa:         public  String  toString()
1:a56ecfa:         {
1:a56ecfa:             return
1:a56ecfa:                 "( " +
1:a56ecfa:                 leftChild.toString() +
1:a56ecfa:                 " " + strategy.getOperatorSymbol() + " " +
1:a56ecfa:                 rightChild.toString() +
1:a56ecfa:                 " )";
1:a56ecfa:         }
1:a56ecfa: 
1:a56ecfa:         public  boolean equals( Object other )
1:a56ecfa:         {
1:a56ecfa:             if ( other == null ) { return false; }
1:a56ecfa:             if ( !(other instanceof Join) ) { return false; }
1:a56ecfa: 
1:a56ecfa:             Join    that = (Join) other;
1:a56ecfa: 
1:a56ecfa:             if ( !this.strategy.getOperatorSymbol().equals( that.strategy.getOperatorSymbol() ) ) { return false; }
1:a56ecfa: 
1:a56ecfa:             return this.leftChild.equals( that.leftChild) && this.rightChild.equals( that.rightChild );
1:a56ecfa:         }
1:a56ecfa:     }
1:a56ecfa: 
1:3c3e7db:     /** Generic plan for row sources we don't understand */
1:3c3e7db:     public static  class    DeadEnd extends OptimizerPlan
1:3c3e7db:     {
1:3c3e7db:         private String  _name;
1:3c3e7db: 
1:3c3e7db:         public DeadEnd( String name )
1:3c3e7db:         {
1:3c3e7db:             _name = name;
1:3c3e7db:         }
1:3c3e7db: 
1:3c3e7db:         public void    bind
1:3c3e7db:             (
1:3c3e7db:              DataDictionary dataDictionary,
1:3c3e7db:              LanguageConnectionContext lcc,
1:3c3e7db:              CompilerContext cc
1:3c3e7db:              )
1:3c3e7db:             throws StandardException
1:3c3e7db:         {}
1:3c3e7db:         
1:3c3e7db:         public boolean isBound() { return true; }
1:3c3e7db: 
1:3c3e7db:         public int countLeafNodes()    { return 1; }
1:3c3e7db: 
1:3c3e7db:         public OptimizerPlan    leftmostLeaf()   { return this; }
1:3c3e7db:         
1:3c3e7db:         public boolean  isLeftPrefixOf( OptimizerPlan that )
1:3c3e7db:         {
1:3c3e7db:             return this.equals( that.leftmostLeaf() );
1:3c3e7db:         }
1:3c3e7db:         
1:3c3e7db:         public  String  toString()  { return _name; }
1:3c3e7db:     }
1:3c3e7db: 
1:a56ecfa:     public abstract    static  class   RowSource<D extends UniqueTupleDescriptor>   extends OptimizerPlan
1:a56ecfa:     {
1:a56ecfa:         protected   String  _schemaName;
1:a56ecfa:         protected   String  _rowSourceName;
1:a56ecfa:         protected   SchemaDescriptor    _schema;
1:a56ecfa:         protected D   _descriptor;
1:a56ecfa: 
1:a56ecfa:         public RowSource( String schemaName, String rowSourceName )
1:a56ecfa:         {
1:a56ecfa:             _schemaName = schemaName;
1:a56ecfa:             _rowSourceName = rowSourceName;
1:a56ecfa:         }
1:a56ecfa:         protected   RowSource() {}
1:a56ecfa: 
1:a56ecfa:         /** Get the UniqueTupleDescriptor bound to this RowSource */
1:a56ecfa:         public D   getDescriptor() { return _descriptor; }
1:a56ecfa:         
1:a56ecfa:         public void    bind
1:a56ecfa:             (
1:a56ecfa:              DataDictionary dataDictionary,
1:a56ecfa:              LanguageConnectionContext lcc,
1:bbb545e:              CompilerContext cc
1:a56ecfa:              )
1:a56ecfa:             throws StandardException
1:a56ecfa:         {
1:a56ecfa:             // bind the schema name
1:a56ecfa:             if ( _schema == null )
1:a56ecfa:             {
1:a56ecfa:                 _schema = StatementUtil.getSchemaDescriptor( _schemaName, true, dataDictionary, lcc, cc );
1:a56ecfa:                 _schemaName = _schema.getSchemaName();
1:a56ecfa:             }
1:a56ecfa:         }
1:a56ecfa:         
1:a56ecfa:         public boolean isBound() { return (_descriptor != null); }
1:a56ecfa: 
1:a56ecfa:         public int countLeafNodes()    { return 1; }
1:a56ecfa: 
1:3c3e7db:         public OptimizerPlan    leftmostLeaf()   { return this; }
1:a56ecfa:         
1:a56ecfa:         public boolean  isLeftPrefixOf( OptimizerPlan that )
1:a56ecfa:         {
1:a56ecfa:             return this.equals( that.leftmostLeaf() );
1:a56ecfa:         }
1:a56ecfa:         
1:a56ecfa:         public  String  toString()
1:a56ecfa:         {
1:a56ecfa:             return IdUtil.mkQualifiedName( _schemaName, _rowSourceName );
1:a56ecfa:         }
1:a56ecfa: 
1:a56ecfa:         public  boolean equals( Object other )
1:a56ecfa:         {
1:a56ecfa:             if ( other == null ) { return false; }
1:a56ecfa:             if ( other.getClass() != this.getClass() ) { return false; }
1:a56ecfa: 
1:a56ecfa:             RowSource   that = (RowSource) other;
1:a56ecfa: 
1:a56ecfa:             if ( !( this.isBound() && that.isBound() ) ) { return false; }
1:a56ecfa: 
1:a56ecfa:             return this._schemaName.equals( that._schemaName ) && this._rowSourceName.equals( that._rowSourceName );
1:a56ecfa:         }
1:a56ecfa:     }
1:a56ecfa: 
1:a56ecfa:     public static  final   class   ConglomerateRS  extends RowSource<ConglomerateDescriptor>
1:a56ecfa:     {
1:a56ecfa:         public ConglomerateRS( String schemaName, String rowSourceName ) { super( schemaName, rowSourceName ); }
1:a56ecfa: 
1:a56ecfa:         public ConglomerateRS( ConglomerateDescriptor cd, DataDictionary dataDictionary )
1:a56ecfa:             throws StandardException
1:a56ecfa:         {
1:a56ecfa:             _descriptor = cd;
1:a56ecfa:             _schema = dataDictionary.getSchemaDescriptor( cd.getSchemaID(), null );
1:a56ecfa:             _schemaName = _schema.getSchemaName();
1:a56ecfa:             _rowSourceName = cd.getConglomerateName();
1:a56ecfa:         }
1:a56ecfa:         
1:a56ecfa:         public void    bind
1:a56ecfa:             (
1:a56ecfa:              DataDictionary dataDictionary,
1:a56ecfa:              LanguageConnectionContext lcc,
1:bbb545e:              CompilerContext cc
1:a56ecfa:              )
1:a56ecfa:             throws StandardException
1:a56ecfa:         {
1:bbb545e:             super.bind( dataDictionary, lcc, cc );
1:a56ecfa: 
1:a56ecfa:             if ( _descriptor == null )
1:a56ecfa:             {
1:a56ecfa:                 _descriptor = dataDictionary.getConglomerateDescriptor( _rowSourceName, _schema, false );
1:a56ecfa:             }
1:a56ecfa:             if ( _descriptor == null )
1:a56ecfa:             {
3:a56ecfa:                 throw StandardException.newException
1:a56ecfa:                     ( SQLState.LANG_INDEX_NOT_FOUND, _schemaName + "." + _rowSourceName );
1:a56ecfa:             }
1:a56ecfa:         }
1:a56ecfa:     }
1:a56ecfa: 
1:a56ecfa:     public static  final   class   TableFunctionRS  extends RowSource<AliasDescriptor>
1:a56ecfa:     {
1:a56ecfa:         public TableFunctionRS( String schemaName, String rowSourceName ) { super( schemaName, rowSourceName ); }
1:a56ecfa: 
1:a56ecfa:         public TableFunctionRS( AliasDescriptor ad )
1:a56ecfa:         {
1:a56ecfa:             _descriptor = ad;
1:a56ecfa:             _schemaName = ad.getSchemaName();
1:a56ecfa:             _rowSourceName = ad.getName();
1:a56ecfa:         }
1:a56ecfa:         
1:a56ecfa:         public void    bind
1:a56ecfa:             (
1:a56ecfa:              DataDictionary dataDictionary,
1:a56ecfa:              LanguageConnectionContext lcc,
1:bbb545e:              CompilerContext cc
1:a56ecfa:              )
1:a56ecfa:             throws StandardException
1:a56ecfa:         {
1:bbb545e:             super.bind( dataDictionary, lcc, cc );
1:a56ecfa: 
1:a56ecfa:             if ( _descriptor == null )
1:a56ecfa:             {
1:a56ecfa:                 _descriptor = dataDictionary.getAliasDescriptor
1:a56ecfa:                     ( _schema.getUUID().toString(), _rowSourceName, AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR );
1:a56ecfa:             }
1:a56ecfa:             if ( _descriptor == null )
1:a56ecfa:             {
1:a56ecfa:                 throw StandardException.newException
1:a56ecfa:                     (
1:a56ecfa:                      SQLState.LANG_OBJECT_NOT_FOUND,
1:a56ecfa:                      AliasDescriptor.getAliasType( AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR ),
1:a56ecfa:                      _schemaName + "." + _rowSourceName
1:a56ecfa:                      );
1:a56ecfa:             }
1:a56ecfa:         }
1:a56ecfa: 
1:a56ecfa:         public  String  toString()  { return super.toString() + "()"; }
1:a56ecfa: 
1:a56ecfa:     }
1:a56ecfa:     
1:a56ecfa: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3c3e7db
/////////////////////////////////////////////////////////////////////////
1:     public abstract    OptimizerPlan    leftmostLeaf();
/////////////////////////////////////////////////////////////////////////
1:         public OptimizerPlan    leftmostLeaf()   { return leftChild.leftmostLeaf(); }
/////////////////////////////////////////////////////////////////////////
1:     /** Generic plan for row sources we don't understand */
1:     public static  class    DeadEnd extends OptimizerPlan
1:     {
1:         private String  _name;
1: 
1:         public DeadEnd( String name )
1:         {
1:             _name = name;
1:         }
1: 
1:         public void    bind
1:             (
1:              DataDictionary dataDictionary,
1:              LanguageConnectionContext lcc,
1:              CompilerContext cc
1:              )
1:             throws StandardException
1:         {}
1:         
1:         public boolean isBound() { return true; }
1: 
1:         public int countLeafNodes()    { return 1; }
1: 
1:         public OptimizerPlan    leftmostLeaf()   { return this; }
1:         
1:         public boolean  isLeftPrefixOf( OptimizerPlan that )
1:         {
1:             return this.equals( that.leftmostLeaf() );
1:         }
1:         
1:         public  String  toString()  { return _name; }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         public OptimizerPlan    leftmostLeaf()   { return this; }
commit:bbb545e
/////////////////////////////////////////////////////////////////////////
1:          CompilerContext cc
/////////////////////////////////////////////////////////////////////////
1:              CompilerContext cc
1:             leftChild.bind( dataDictionary, lcc, cc );
1:             rightChild.bind( dataDictionary, lcc, cc );
/////////////////////////////////////////////////////////////////////////
1:              CompilerContext cc
/////////////////////////////////////////////////////////////////////////
1:              CompilerContext cc
1:             super.bind( dataDictionary, lcc, cc );
/////////////////////////////////////////////////////////////////////////
1:              CompilerContext cc
1:             super.bind( dataDictionary, lcc, cc );
commit:a56ecfa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizerPlan
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.StatementUtil;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.UniqueTupleDescriptor;
1: import org.apache.derby.iapi.util.IdUtil;
1: 
1: /**
1:  * <p>
1:  * High level description of a plan for consideration by the Optimizer.
1:  * This is used to specify a complete plan via optimizer overrides. A
1:  * plan is a tree whose interior nodes are join operators and whose
1:  * leaves are row sources (conglomerates or tableFunctions).
1:  * </p>
1:  */
1: public abstract class OptimizerPlan
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	FACTORY METHODS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Make a RowSource corresponding to the given tuple descriptor.
1:      * </p>
1:      */
1:     public  static  RowSource   makeRowSource( UniqueTupleDescriptor utd, DataDictionary dd )
1:         throws StandardException
1:     {
1:         if ( utd == null ) { return null; }
1:         else if ( utd instanceof ConglomerateDescriptor )
1:         {
1:             return new ConglomerateRS( (ConglomerateDescriptor) utd, dd );
1:         }
1:         else if ( utd instanceof AliasDescriptor )
1:         {
1:             return new TableFunctionRS( (AliasDescriptor) utd );
1:         }
1:         else { return null; }
1:     }
1:     
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	ABSTRACT BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Bind the conglomerate and table function names in this plan.
1:      * </p>
1:      *
1:      * @param   dataDictionary  DataDictionary to bind against.
0:      * @param   fromListSize    If > 0, then this is the top node in the plan and fromListSize should be the number of leaf nodes
1:      */
1:     public abstract    void    bind
1:         (
1:          DataDictionary dataDictionary,
1:          LanguageConnectionContext lcc,
0:          CompilerContext cc,
0:          int fromListSize
1:          )
1:         throws StandardException;
1: 
1:     /**
1:      * <p>
1:      * Return true if this the schema and RowSource names have been resolved.
1:      * </p>
1:      */
1:     public abstract boolean isBound();
1: 
1:     /**
1:      * <p>
1:      * Count the number of leaf nodes under (and including) this node.
1:      * </p>
1:      */
1:     public abstract    int countLeafNodes();
1:     
1:     /**
1:      * <p>
1:      * Get the leftmost leaf node in this plan.
1:      * </p>
1:      */
0:     public abstract    RowSource    leftmostLeaf();
1:     
1:     /**
1:      * <p>
1:      * Return true if this plan is a (left) leading prefix of the other plan.
1:      * </p>
1:      */
1:     public abstract    boolean  isLeftPrefixOf( OptimizerPlan that );
1:     
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	INNER CLASSES
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public static  final   class Join extends OptimizerPlan
1:     {
1:         final JoinStrategy    strategy;
1:         final OptimizerPlan   leftChild;
1:         final OptimizerPlan   rightChild;
1:         private boolean _isBound;
1:         private int         _leafNodeCount = 0;
1: 
1:         public Join
1:             (
1:              JoinStrategy   strategy,
1:              OptimizerPlan  leftChild,
1:              OptimizerPlan  rightChild
1:              )
1:         {
1:             this.strategy = strategy;
1:             this.leftChild = leftChild;
1:             this.rightChild = rightChild;
1:         }
1: 
1:         public void    bind
1:             (
1:              DataDictionary dataDictionary,
1:              LanguageConnectionContext lcc,
0:              CompilerContext cc,
0:              int fromListSize
1:              )
1:             throws StandardException
1:         {
0:             if ( fromListSize > 0 )
1:             {
0:                 int     leafNodeCount = countLeafNodes();
0:                 if ( fromListSize != leafNodeCount )
1:                 {
1:                     throw StandardException.newException
0:                         ( SQLState.LANG_BAD_ROW_SOURCE_COUNT, leafNodeCount, fromListSize );
1:                 }
1:             }
1: 
1:             // only left-deep trees allowed at this time
1:             if ( !( rightChild instanceof RowSource ) )
1:             {
1:                 throw StandardException.newException( SQLState.LANG_NOT_LEFT_DEEP );
1:             }
1: 
0:             leftChild.bind( dataDictionary, lcc, cc, (leftChild instanceof RowSource) ? 1 : -1 );
0:             rightChild.bind( dataDictionary, lcc, cc, (rightChild instanceof RowSource) ? 1 : -1 );
1: 
1:             _isBound = true;
1:         }
1:         
1:         public boolean isBound() { return _isBound; }
1:         
1:         public int countLeafNodes()
1:         {
1:             if ( _leafNodeCount <= 0 ) { _leafNodeCount = leftChild.countLeafNodes() + rightChild.countLeafNodes(); }
1:             return _leafNodeCount;
1:         }
1: 
0:         public RowSource    leftmostLeaf()   { return leftChild.leftmostLeaf(); }
1:         
1:         public boolean  isLeftPrefixOf( OptimizerPlan other )
1:         {
1:             if ( !(other instanceof Join) ) { return false; }
1: 
1:             Join    that = (Join) other;
1:             
1:             int thisLeafCount = this.countLeafNodes();
1:             int thatLeafCount = that.countLeafNodes();
1: 
1:             if ( thisLeafCount > thatLeafCount ) { return false; }
1:             else if ( thisLeafCount < thatLeafCount ) { return isLeftPrefixOf( that.leftChild ); }
1:             else { return this.equals( that ); }
1:         }
1:         
1:         public  String  toString()
1:         {
1:             return
1:                 "( " +
1:                 leftChild.toString() +
1:                 " " + strategy.getOperatorSymbol() + " " +
1:                 rightChild.toString() +
1:                 " )";
1:         }
1: 
1:         public  boolean equals( Object other )
1:         {
1:             if ( other == null ) { return false; }
1:             if ( !(other instanceof Join) ) { return false; }
1: 
1:             Join    that = (Join) other;
1: 
1:             if ( !this.strategy.getOperatorSymbol().equals( that.strategy.getOperatorSymbol() ) ) { return false; }
1: 
1:             return this.leftChild.equals( that.leftChild) && this.rightChild.equals( that.rightChild );
1:         }
1:     }
1: 
1:     public abstract    static  class   RowSource<D extends UniqueTupleDescriptor>   extends OptimizerPlan
1:     {
1:         protected   String  _schemaName;
1:         protected   String  _rowSourceName;
1:         protected   SchemaDescriptor    _schema;
1:         protected D   _descriptor;
1: 
1:         public RowSource( String schemaName, String rowSourceName )
1:         {
1:             _schemaName = schemaName;
1:             _rowSourceName = rowSourceName;
1:         }
1:         protected   RowSource() {}
1: 
1:         /** Get the UniqueTupleDescriptor bound to this RowSource */
1:         public D   getDescriptor() { return _descriptor; }
1:         
1:         public void    bind
1:             (
1:              DataDictionary dataDictionary,
1:              LanguageConnectionContext lcc,
0:              CompilerContext cc,
0:              int fromListSize
1:              )
1:             throws StandardException
1:         {
0:             if ( fromListSize != 1 )
1:             {
1:                 throw StandardException.newException
0:                     ( SQLState.LANG_BAD_ROW_SOURCE_COUNT, 1, fromListSize );
1:             }
1: 
1:             // bind the schema name
1:             if ( _schema == null )
1:             {
1:                 _schema = StatementUtil.getSchemaDescriptor( _schemaName, true, dataDictionary, lcc, cc );
1:                 _schemaName = _schema.getSchemaName();
1:             }
1:         }
1:         
1:         public boolean isBound() { return (_descriptor != null); }
1: 
1:         public int countLeafNodes()    { return 1; }
1: 
0:         public RowSource    leftmostLeaf()   { return this; }
1:         
1:         public boolean  isLeftPrefixOf( OptimizerPlan that )
1:         {
1:             return this.equals( that.leftmostLeaf() );
1:         }
1:         
1:         public  String  toString()
1:         {
1:             return IdUtil.mkQualifiedName( _schemaName, _rowSourceName );
1:         }
1: 
1:         public  boolean equals( Object other )
1:         {
1:             if ( other == null ) { return false; }
1:             if ( other.getClass() != this.getClass() ) { return false; }
1: 
1:             RowSource   that = (RowSource) other;
1: 
1:             if ( !( this.isBound() && that.isBound() ) ) { return false; }
1: 
1:             return this._schemaName.equals( that._schemaName ) && this._rowSourceName.equals( that._rowSourceName );
1:         }
1:     }
1: 
1:     public static  final   class   ConglomerateRS  extends RowSource<ConglomerateDescriptor>
1:     {
1:         public ConglomerateRS( String schemaName, String rowSourceName ) { super( schemaName, rowSourceName ); }
1: 
1:         public ConglomerateRS( ConglomerateDescriptor cd, DataDictionary dataDictionary )
1:             throws StandardException
1:         {
1:             _descriptor = cd;
1:             _schema = dataDictionary.getSchemaDescriptor( cd.getSchemaID(), null );
1:             _schemaName = _schema.getSchemaName();
1:             _rowSourceName = cd.getConglomerateName();
1:         }
1:         
1:         public void    bind
1:             (
1:              DataDictionary dataDictionary,
1:              LanguageConnectionContext lcc,
0:              CompilerContext cc,
0:              int fromListSize
1:              )
1:             throws StandardException
1:         {
0:             super.bind( dataDictionary, lcc, cc, fromListSize );
1: 
1:             if ( _descriptor == null )
1:             {
1:                 _descriptor = dataDictionary.getConglomerateDescriptor( _rowSourceName, _schema, false );
1:             }
1:             if ( _descriptor == null )
1:             {
1:                 throw StandardException.newException
1:                     ( SQLState.LANG_INDEX_NOT_FOUND, _schemaName + "." + _rowSourceName );
1:             }
1:         }
1:     }
1: 
1:     public static  final   class   TableFunctionRS  extends RowSource<AliasDescriptor>
1:     {
1:         public TableFunctionRS( String schemaName, String rowSourceName ) { super( schemaName, rowSourceName ); }
1: 
1:         public TableFunctionRS( AliasDescriptor ad )
1:         {
1:             _descriptor = ad;
1:             _schemaName = ad.getSchemaName();
1:             _rowSourceName = ad.getName();
1:         }
1:         
1:         public void    bind
1:             (
1:              DataDictionary dataDictionary,
1:              LanguageConnectionContext lcc,
0:              CompilerContext cc,
0:              int fromListSize
1:              )
1:             throws StandardException
1:         {
0:             super.bind( dataDictionary, lcc, cc, fromListSize );
1: 
1:             if ( _descriptor == null )
1:             {
1:                 _descriptor = dataDictionary.getAliasDescriptor
1:                     ( _schema.getUUID().toString(), _rowSourceName, AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR );
1:             }
1:             if ( _descriptor == null )
1:             {
1:                 throw StandardException.newException
1:                     (
1:                      SQLState.LANG_OBJECT_NOT_FOUND,
1:                      AliasDescriptor.getAliasType( AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR ),
1:                      _schemaName + "." + _rowSourceName
1:                      );
1:             }
1:         }
1: 
1:         public  String  toString()  { return super.toString() + "()"; }
1: 
1:     }
1:     
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e44d624
/////////////////////////////////////////////////////////////////////////
============================================================================