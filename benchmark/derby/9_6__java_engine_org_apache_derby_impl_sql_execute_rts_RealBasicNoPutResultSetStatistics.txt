1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:df9ed37: import java.security.AccessController;
1:df9ed37: import java.security.PrivilegedAction;
1:48a9884: import org.apache.derby.catalog.UUID;
1:df9ed37: import org.apache.derby.iapi.reference.SQLState;
1:df9ed37: import org.apache.derby.iapi.services.context.ContextService;
1:df9ed37: import org.apache.derby.iapi.services.i18n.MessageService;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: 
1:eac0369: 
1:eac0369: import java.text.DecimalFormat;
1:df9ed37: import java.util.Locale;
1:df9ed37: import java.util.Vector;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for BasicNoPutResultSetImpl.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: abstract class RealBasicNoPutResultSetStatistics
1:eac0369: 	implements ResultSetStatistics
4:eac0369: {
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 	public int numOpens;
1:eac0369: 	public int rowsSeen;
1:eac0369: 	public int rowsFiltered;
1:eac0369: 	public long constructorTime;
1:eac0369: 	public long openTime;
1:eac0369: 	public long nextTime;
1:eac0369: 	public long closeTime;
1:eac0369: 	public long inspectOverall;
1:eac0369: 	public long inspectNum;
1:eac0369: 	public String inspectDesc;
1:eac0369: 	public double optimizerEstimatedRowCount;
1:eac0369: 	public double optimizerEstimatedCost;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	RealBasicNoPutResultSetStatistics(
1:eac0369: 												int numOpens,
1:eac0369: 												int rowsSeen,
1:eac0369: 												int rowsFiltered,
1:eac0369: 												long constructorTime,
1:eac0369: 												long openTime,
1:eac0369: 												long nextTime,
1:eac0369: 												long closeTime,
1:eac0369: 												double optimizerEstimatedRowCount,
1:eac0369: 												double optimizerEstimatedCost
1:eac0369: 											)
1:eac0369: 	{
1:eac0369: 		this.numOpens = numOpens;
1:eac0369: 		this.rowsSeen = rowsSeen;
1:eac0369: 		this.rowsFiltered = rowsFiltered;
1:eac0369: 		this.constructorTime = constructorTime;
1:eac0369: 		this.openTime = openTime;
1:eac0369: 		this.nextTime = nextTime;
1:eac0369: 		this.closeTime = closeTime;
1:eac0369: 		this.optimizerEstimatedRowCount = optimizerEstimatedRowCount;
1:eac0369: 		this.optimizerEstimatedCost = optimizerEstimatedCost;
4:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Class implementation
1:eac0369: 	/**
1:eac0369: 	 * Dump out the time information for run time stats.
1:eac0369: 	 *
1:eac0369: 	 * @return Nothing.
1:eac0369: 	 */
1:eac0369: 	protected final String dumpTimeStats(String indent, String subIndent)
1:eac0369: 	{
1:eac0369: 		return
1:eac0369: /*
1:eac0369: 			indent + "time spent in this ResultSet = " +
1:eac0369: 				getTimeSpent(ResultSet.CURRENT_RESULTSET_ONLY) + "\n" +
1:eac0369: 			indent + "time spent in this ResultSet and below = " +
1:eac0369: 				getTimeSpent(NoPutResultSet.ENTIRE_RESULTSET_TREE) + "\n" +
1:eac0369: 				indent + "total time breakdown: " + "\n" +
1:eac0369: */
1:eac0369: 			subIndent +
1:eac0369: 			  MessageService.getTextMessage(SQLState.LANG_CONSTRUCTOR_TIME) +
1:eac0369: 				" " + constructorTime + "\n" +
1:eac0369: 			subIndent +
1:eac0369: 			  MessageService.getTextMessage(SQLState.LANG_OPEN_TIME) +
1:eac0369: 				" " + openTime + "\n" +
1:eac0369: 			subIndent +
1:eac0369: 			  MessageService.getTextMessage(SQLState.LANG_NEXT_TIME) +
1:eac0369: 				" " + nextTime + "\n" +
1:eac0369: 			subIndent +
1:eac0369: 			  MessageService.getTextMessage(SQLState.LANG_CLOSE_TIME) +
1:eac0369: 				" " + closeTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Dump out the estimated cost information
1:eac0369: 	 *
1:eac0369: 	 * @return Nothing.
1:eac0369: 	 */
1:eac0369: 	protected final String dumpEstimatedCosts(String subIndent)
1:eac0369: 	{
1:eac0369: 		return	subIndent +
1:df9ed37:             MessageService.getTextMessage(SQLState.RTS_OPT_EST_RC,
1:ce40a31:                 optimizerEstimatedRowCount) + "\n" +
1:eac0369: 				subIndent +
1:df9ed37:             MessageService.getTextMessage(SQLState.RTS_OPT_EST_COST,
1:ce40a31:                  optimizerEstimatedCost);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the objects to be displayed when this tree object is expanded.
1:eac0369: 	 * <P>
1:eac0369: 	 * The objects returned can be of any type, including addtional Inspectables.
1:eac0369:    *
1:eac0369: 	 * @return java.util.Vector	A vector of objects.
1:eac0369: 	 */
1:9d5bd0e:   public Vector<ResultSetStatistics> getChildren(){
1:9d5bd0e:     return new Vector<ResultSetStatistics>();
1:eac0369:   }
1:eac0369: 	/**
1:eac0369:    * Return the time for all operations performed by this node, and the children
1:eac0369:    * of this node.  The times included open, next, and close.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public long getTotalTime(){
1:eac0369:     //The method below is the original calculation.  However, the constructor
1:eac0369:     //time was found to be inaccurate, and was therefore removed from the calculation.
1:eac0369: 	  //return constructorTime + openTime + nextTime + closeTime;
1:eac0369: 	  return openTime + nextTime + closeTime;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:    * Return the time for all operations performed by the children of this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public long getChildrenTime(){
1:eac0369:     long childrenTime = 0;
1:df9af89:     java.util.Enumeration e = getChildren().elements();
1:df9af89:     while (e.hasMoreElements()){
1:df9af89:       childrenTime = childrenTime + ((RealBasicNoPutResultSetStatistics)e.nextElement()).getTotalTime();
1:eac0369:     }
1:eac0369:     return childrenTime;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:    * Return the time for all operations performed by this node, but not the
1:eac0369:    * time for the children of this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public long getNodeTime(){
1:eac0369:     return getTotalTime() - getChildrenTime();
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:    * Format for display, a name for this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public abstract String getNodeName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If this node is on a database item (like a table or an index), then provide a
1:eac0369:    * string that describes the on item.
1:eac0369:    *
1:eac0369: 	 */
1:eac0369:   public String getNodeOn(){
1:eac0369:     return "";
1:eac0369:   }
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated row count for the number of rows returned
1:eac0369: 	 * by the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The estimated number of rows returned by the associated
1:eac0369: 	 * query or statement.
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedRowCount()
1:eac0369: 	{
1:eac0369: 		return optimizerEstimatedRowCount;
1:eac0369: 	}
1:48a9884: 
1:48a9884:     public String getRSXplainDetails() { return null; }
1:48a9884: 
1:48a9884:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:48a9884:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetDescriptor(
1:48a9884:            (UUID)rsID,
1:48a9884:            getRSXplainType(),
1:48a9884:            getRSXplainDetails(),
1:ce40a31:            this.numOpens,
1:48a9884:            null,                              // the number of index updates 
1:48a9884:            null,                           // lock mode
1:48a9884:            null,                           // lock granularity
1:48a9884:            (UUID)parentID,
1:ce40a31:            this.optimizerEstimatedRowCount,
1:ce40a31:            this.optimizerEstimatedCost,
1:48a9884:            null,                              // the affected rows
1:48a9884:            null,                              // the deferred rows
1:48a9884:            null,                              // the input rows
1:ce40a31:            this.rowsSeen,
1:48a9884:            null,                              // the seen rows right
1:ce40a31:            this.rowsFiltered,
1:ce40a31:            this.rowsSeen - this.rowsFiltered,
1:48a9884:            null,                              // the empty right rows
1:48a9884:            null,                           // index key optimization
1:48a9884:            (UUID)scanID,
1:48a9884:            (UUID)sortID,
1:48a9884:            (UUID)stmtID,
1:48a9884:            (UUID)timingID);
1:48a9884:     }
1:48a9884:     public Object getResultSetTimingsDescriptor(Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetTimingsDescriptor(
1:48a9884:            (UUID)timingID,
1:ce40a31:            this.constructorTime,
1:ce40a31:            this.openTime,
1:ce40a31:            this.nextTime,
1:ce40a31:            this.closeTime,
1:ce40a31:            this.getNodeTime(),
1:48a9884:            XPLAINUtil.getAVGNextTime( (long)this.nextTime, this.rowsSeen),
1:48a9884:            null,                          // the projection time
1:48a9884:            null,                          // the restriction time
1:48a9884:            null,                          // the temp_cong_create_time
1:48a9884:            null                           // the temo_cong_fetch_time
1:48a9884:         );
1:48a9884:     }
1:48a9884:     public Object getSortPropsDescriptor(Object UUID)
1:48a9884:     {
1:48a9884:         return null; // Most statistics classes don't have sort props
1:48a9884:     }
1:48a9884:     public Object getScanPropsDescriptor(Object UUID)
1:48a9884:     {
1:48a9884:         return null; // Most statistics classes don't have Scan props
1:48a9884:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                 optimizerEstimatedRowCount) + "\n" +
1:                  optimizerEstimatedCost);
/////////////////////////////////////////////////////////////////////////
1:            this.numOpens,
1:            this.optimizerEstimatedRowCount,
1:            this.optimizerEstimatedCost,
1:            this.rowsSeen,
1:            this.rowsFiltered,
1:            this.rowsSeen - this.rowsFiltered,
/////////////////////////////////////////////////////////////////////////
1:            this.constructorTime,
1:            this.openTime,
1:            this.nextTime,
1:            this.closeTime,
1:            this.getNodeTime(),
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:   public Vector<ResultSetStatistics> getChildren(){
1:     return new Vector<ResultSetStatistics>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:df9ed37
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import java.util.Locale;
1: import java.util.Vector;
/////////////////////////////////////////////////////////////////////////
1:             MessageService.getTextMessage(SQLState.RTS_OPT_EST_RC,
0:                 new Double(optimizerEstimatedRowCount)) + "\n" +
1:             MessageService.getTextMessage(SQLState.RTS_OPT_EST_COST,
0:                  new Double(optimizerEstimatedCost));
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String getRSXplainDetails() { return null; }
1: 
1:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:     {
1:         return new XPLAINResultSetDescriptor(
1:            (UUID)rsID,
1:            getRSXplainType(),
1:            getRSXplainDetails(),
0:            new Integer(this.numOpens),
1:            null,                              // the number of index updates 
1:            null,                           // lock mode
1:            null,                           // lock granularity
1:            (UUID)parentID,
0:            new Double(this.optimizerEstimatedRowCount),
0:            new Double(this.optimizerEstimatedCost),
1:            null,                              // the affected rows
1:            null,                              // the deferred rows
1:            null,                              // the input rows
0:            new Integer(this.rowsSeen),
1:            null,                              // the seen rows right
0:            new Integer(this.rowsFiltered),
0:            new Integer(this.rowsSeen - this.rowsFiltered),
1:            null,                              // the empty right rows
1:            null,                           // index key optimization
1:            (UUID)scanID,
1:            (UUID)sortID,
1:            (UUID)stmtID,
1:            (UUID)timingID);
1:     }
1:     public Object getResultSetTimingsDescriptor(Object timingID)
1:     {
1:         return new XPLAINResultSetTimingsDescriptor(
1:            (UUID)timingID,
0:            new Long(this.constructorTime),
0:            new Long(this.openTime),
0:            new Long(this.nextTime),
0:            new Long(this.closeTime),
0:            new Long(this.getNodeTime()),
1:            XPLAINUtil.getAVGNextTime( (long)this.nextTime, this.rowsSeen),
1:            null,                          // the projection time
1:            null,                          // the restriction time
1:            null,                          // the temp_cong_create_time
1:            null                           // the temo_cong_fetch_time
1:         );
1:     }
1:     public Object getSortPropsDescriptor(Object UUID)
1:     {
1:         return null; // Most statistics classes don't have sort props
1:     }
1:     public Object getScanPropsDescriptor(Object UUID)
1:     {
1:         return null; // Most statistics classes don't have Scan props
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:df9af89
/////////////////////////////////////////////////////////////////////////
1:     java.util.Enumeration e = getChildren().elements();
1:     while (e.hasMoreElements()){
1:       childrenTime = childrenTime + ((RealBasicNoPutResultSetStatistics)e.nextElement()).getTotalTime();
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: 
0: import java.util.Vector;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
1: 
1: import java.text.DecimalFormat;
1: 
1: 
1: /**
1:   ResultSetStatistics implemenation for BasicNoPutResultSetImpl.
1: 
0:   @author jerry
1: 
1: */
1: abstract class RealBasicNoPutResultSetStatistics
1: 	implements ResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/* Leave these fields public for object inspectors */
1: 	public int numOpens;
1: 	public int rowsSeen;
1: 	public int rowsFiltered;
1: 	public long constructorTime;
1: 	public long openTime;
1: 	public long nextTime;
1: 	public long closeTime;
1: 	public long inspectOverall;
1: 	public long inspectNum;
1: 	public String inspectDesc;
1: 	public double optimizerEstimatedRowCount;
1: 	public double optimizerEstimatedCost;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 *
1: 	 *
1: 	 */
1:     public	RealBasicNoPutResultSetStatistics(
1: 												int numOpens,
1: 												int rowsSeen,
1: 												int rowsFiltered,
1: 												long constructorTime,
1: 												long openTime,
1: 												long nextTime,
1: 												long closeTime,
1: 												double optimizerEstimatedRowCount,
1: 												double optimizerEstimatedCost
1: 											)
1: 	{
1: 		this.numOpens = numOpens;
1: 		this.rowsSeen = rowsSeen;
1: 		this.rowsFiltered = rowsFiltered;
1: 		this.constructorTime = constructorTime;
1: 		this.openTime = openTime;
1: 		this.nextTime = nextTime;
1: 		this.closeTime = closeTime;
1: 		this.optimizerEstimatedRowCount = optimizerEstimatedRowCount;
1: 		this.optimizerEstimatedCost = optimizerEstimatedCost;
1: 	}
1: 
1: 
1: 
1: 	// Class implementation
1: 	/**
1: 	 * Dump out the time information for run time stats.
1: 	 *
1: 	 * @return Nothing.
1: 	 */
1: 	protected final String dumpTimeStats(String indent, String subIndent)
1: 	{
1: 		return
1: /*
1: 			indent + "time spent in this ResultSet = " +
1: 				getTimeSpent(ResultSet.CURRENT_RESULTSET_ONLY) + "\n" +
1: 			indent + "time spent in this ResultSet and below = " +
1: 				getTimeSpent(NoPutResultSet.ENTIRE_RESULTSET_TREE) + "\n" +
1: 				indent + "total time breakdown: " + "\n" +
1: */
1: 			subIndent +
1: 			  MessageService.getTextMessage(SQLState.LANG_CONSTRUCTOR_TIME) +
1: 				" " + constructorTime + "\n" +
1: 			subIndent +
1: 			  MessageService.getTextMessage(SQLState.LANG_OPEN_TIME) +
1: 				" " + openTime + "\n" +
1: 			subIndent +
1: 			  MessageService.getTextMessage(SQLState.LANG_NEXT_TIME) +
1: 				" " + nextTime + "\n" +
1: 			subIndent +
1: 			  MessageService.getTextMessage(SQLState.LANG_CLOSE_TIME) +
1: 				" " + closeTime;
1: 	}
1: 
1: 	/**
1: 	 * Dump out the estimated cost information
1: 	 *
1: 	 * @return Nothing.
1: 	 */
1: 	protected final String dumpEstimatedCosts(String subIndent)
1: 	{
1: 		return	subIndent +
0: 				MessageService.getTextMessage(SQLState.RTS_OPT_EST_RC) +
0: 					": " +
0: 				formatDouble(optimizerEstimatedRowCount) + "\n" +
1: 				subIndent +
0: 				MessageService.getTextMessage(SQLState.RTS_OPT_EST_COST) +
0: 					": " +
0: 				formatDouble(optimizerEstimatedCost) + "\n";
1: 	}
1: 
1: 	/**
0: 	 * Format a double as a String with leading spaces and two digits
0: 	 * after the decimal.
1: 	 */
0: 	private static DecimalFormat df = null;
0: 	private String formatDouble(double toFormat)
1: 	{
0: 		if (df == null)
1: 		{
0: 			// RESOLVE: This really should use the database locale to
0: 			// format the number.
0: 			df = new DecimalFormat("###########0.00");
0: 			df.setMinimumIntegerDigits(1);
1: 		}
1: 
0: 		String retval = df.format(toFormat);
1: 
0: 		if (retval.length() < 15)
1: 		{
0: 			retval =
0: 				"               ".substring(0, 15 - retval.length()) + retval;
1: 		}
1: 
0: 		return retval;
1: 	}
1: 
1: 	/**
1: 	 * Get the objects to be displayed when this tree object is expanded.
1: 	 * <P>
1: 	 * The objects returned can be of any type, including addtional Inspectables.
1:    *
1: 	 * @return java.util.Vector	A vector of objects.
1: 	 */
0:   public Vector getChildren(){
0:     return new Vector();
1:   }
1: 	/**
1:    * Return the time for all operations performed by this node, and the children
1:    * of this node.  The times included open, next, and close.
1: 	 *
1: 	 */
1:   public long getTotalTime(){
1:     //The method below is the original calculation.  However, the constructor
1:     //time was found to be inaccurate, and was therefore removed from the calculation.
1: 	  //return constructorTime + openTime + nextTime + closeTime;
1: 	  return openTime + nextTime + closeTime;
1:   }
1: 
1: 	/**
1:    * Return the time for all operations performed by the children of this node.
1: 	 *
1: 	 */
1:   public long getChildrenTime(){
1:     long childrenTime = 0;
0:     java.util.Enumeration enum = getChildren().elements();
0:     while (enum.hasMoreElements()){
0:       childrenTime = childrenTime + ((RealBasicNoPutResultSetStatistics)enum.nextElement()).getTotalTime();
1:     }
1:     return childrenTime;
1:   }
1: 
1: 	/**
1:    * Return the time for all operations performed by this node, but not the
1:    * time for the children of this node.
1: 	 *
1: 	 */
1:   public long getNodeTime(){
1:     return getTotalTime() - getChildrenTime();
1:   }
1: 
1: 	/**
1:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public abstract String getNodeName();
1: 
1: 	/**
1: 	 * If this node is on a database item (like a table or an index), then provide a
1:    * string that describes the on item.
1:    *
1: 	 */
1:   public String getNodeOn(){
1:     return "";
1:   }
1: 
1: 
1: 	/**
1: 	 * Get the estimated row count for the number of rows returned
1: 	 * by the associated query or statement.
1: 	 *
1: 	 * @return	The estimated number of rows returned by the associated
1: 	 * query or statement.
1: 	 */
1: 	public double getEstimatedRowCount()
1: 	{
1: 		return optimizerEstimatedRowCount;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: 
0: import java.util.Vector;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.text.DecimalFormat;
0: 
0: 
0: /**
0:   ResultSetStatistics implemenation for BasicNoPutResultSetImpl.
0: 
0:   @author jerry
0: 
0: */
0: abstract class RealBasicNoPutResultSetStatistics
0: 	implements ResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/* Leave these fields public for object inspectors */
0: 	public int numOpens;
0: 	public int rowsSeen;
0: 	public int rowsFiltered;
0: 	public long constructorTime;
0: 	public long openTime;
0: 	public long nextTime;
0: 	public long closeTime;
0: 	public long inspectOverall;
0: 	public long inspectNum;
0: 	public String inspectDesc;
0: 	public double optimizerEstimatedRowCount;
0: 	public double optimizerEstimatedCost;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 *
0: 	 *
0: 	 */
0:     public	RealBasicNoPutResultSetStatistics(
0: 												int numOpens,
0: 												int rowsSeen,
0: 												int rowsFiltered,
0: 												long constructorTime,
0: 												long openTime,
0: 												long nextTime,
0: 												long closeTime,
0: 												double optimizerEstimatedRowCount,
0: 												double optimizerEstimatedCost
0: 											)
0: 	{
0: 		this.numOpens = numOpens;
0: 		this.rowsSeen = rowsSeen;
0: 		this.rowsFiltered = rowsFiltered;
0: 		this.constructorTime = constructorTime;
0: 		this.openTime = openTime;
0: 		this.nextTime = nextTime;
0: 		this.closeTime = closeTime;
0: 		this.optimizerEstimatedRowCount = optimizerEstimatedRowCount;
0: 		this.optimizerEstimatedCost = optimizerEstimatedCost;
0: 	}
0: 
0: 
0: 
0: 	// Class implementation
0: 	/**
0: 	 * Dump out the time information for run time stats.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	protected final String dumpTimeStats(String indent, String subIndent)
0: 	{
0: 		return
0: /*
0: 			indent + "time spent in this ResultSet = " +
0: 				getTimeSpent(ResultSet.CURRENT_RESULTSET_ONLY) + "\n" +
0: 			indent + "time spent in this ResultSet and below = " +
0: 				getTimeSpent(NoPutResultSet.ENTIRE_RESULTSET_TREE) + "\n" +
0: 				indent + "total time breakdown: " + "\n" +
0: */
0: 			subIndent +
0: 			  MessageService.getTextMessage(SQLState.LANG_CONSTRUCTOR_TIME) +
0: 				" " + constructorTime + "\n" +
0: 			subIndent +
0: 			  MessageService.getTextMessage(SQLState.LANG_OPEN_TIME) +
0: 				" " + openTime + "\n" +
0: 			subIndent +
0: 			  MessageService.getTextMessage(SQLState.LANG_NEXT_TIME) +
0: 				" " + nextTime + "\n" +
0: 			subIndent +
0: 			  MessageService.getTextMessage(SQLState.LANG_CLOSE_TIME) +
0: 				" " + closeTime;
0: 	}
0: 
0: 	/**
0: 	 * Dump out the estimated cost information
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	protected final String dumpEstimatedCosts(String subIndent)
0: 	{
0: 		return	subIndent +
0: 				MessageService.getTextMessage(SQLState.RTS_OPT_EST_RC) +
0: 					": " +
0: 				formatDouble(optimizerEstimatedRowCount) + "\n" +
0: 				subIndent +
0: 				MessageService.getTextMessage(SQLState.RTS_OPT_EST_COST) +
0: 					": " +
0: 				formatDouble(optimizerEstimatedCost) + "\n";
0: 	}
0: 
0: 	/**
0: 	 * Format a double as a String with leading spaces and two digits
0: 	 * after the decimal.
0: 	 */
0: 	private static DecimalFormat df = null;
0: 	private String formatDouble(double toFormat)
0: 	{
0: 		if (df == null)
0: 		{
0: 			// RESOLVE: This really should use the database locale to
0: 			// format the number.
0: 			df = new DecimalFormat("###########0.00");
0: 			df.setMinimumIntegerDigits(1);
0: 		}
0: 
0: 		String retval = df.format(toFormat);
0: 
0: 		if (retval.length() < 15)
0: 		{
0: 			retval =
0: 				"               ".substring(0, 15 - retval.length()) + retval;
0: 		}
0: 
0: 		return retval;
0: 	}
0: 
0: 	/**
0: 	 * Get the objects to be displayed when this tree object is expanded.
0: 	 * <P>
0: 	 * The objects returned can be of any type, including addtional Inspectables.
0:    *
0: 	 * @return java.util.Vector	A vector of objects.
0: 	 */
0:   public Vector getChildren(){
0:     return new Vector();
0:   }
0: 	/**
0:    * Return the time for all operations performed by this node, and the children
0:    * of this node.  The times included open, next, and close.
0: 	 *
0: 	 */
0:   public long getTotalTime(){
0:     //The method below is the original calculation.  However, the constructor
0:     //time was found to be inaccurate, and was therefore removed from the calculation.
0: 	  //return constructorTime + openTime + nextTime + closeTime;
0: 	  return openTime + nextTime + closeTime;
0:   }
0: 
0: 	/**
0:    * Return the time for all operations performed by the children of this node.
0: 	 *
0: 	 */
0:   public long getChildrenTime(){
0:     long childrenTime = 0;
0:     java.util.Enumeration enum = getChildren().elements();
0:     while (enum.hasMoreElements()){
0:       childrenTime = childrenTime + ((RealBasicNoPutResultSetStatistics)enum.nextElement()).getTotalTime();
0:     }
0:     return childrenTime;
0:   }
0: 
0: 	/**
0:    * Return the time for all operations performed by this node, but not the
0:    * time for the children of this node.
0: 	 *
0: 	 */
0:   public long getNodeTime(){
0:     return getTotalTime() - getChildrenTime();
0:   }
0: 
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public abstract String getNodeName();
0: 
0: 	/**
0: 	 * If this node is on a database item (like a table or an index), then provide a
0:    * string that describes the on item.
0:    *
0: 	 */
0:   public String getNodeOn(){
0:     return "";
0:   }
0: 
0: 
0: 	/**
0: 	 * Get the estimated row count for the number of rows returned
0: 	 * by the associated query or statement.
0: 	 *
0: 	 * @return	The estimated number of rows returned by the associated
0: 	 * query or statement.
0: 	 */
0: 	public double getEstimatedRowCount()
0: 	{
0: 		return optimizerEstimatedRowCount;
0: 	}
0: }
============================================================================