1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.depend.BasicProviderInfo
1:345de35: 
1:22c1b9c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:22c1b9c:    contributor license agreements.  See the NOTICE file distributed with
1:22c1b9c:    this work for additional information regarding copyright ownership.
1:22c1b9c:    The ASF licenses this file to you under the Apache License, Version 2.0
1:22c1b9c:    (the "License"); you may not use this file except in compliance with
1:22c1b9c:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.depend;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.DependableFinder;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This is the implementation of ProviderInfo in the DependencyManager.
1:eac0369:  */
1:eac0369: 
1:eac0369: public class BasicProviderInfo implements ProviderInfo
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:600780d:     private UUID             uuid;
1:600780d:     private DependableFinder dFinder;
1:600780d:     private String           providerName;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	BasicProviderInfo() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make one of these puppies.
1:eac0369: 	 *
1:eac0369: 	 *  @param uuid			UUID of Provider.
1:eac0369: 	 *  @param dFinder		DependableFinder for Provider.
1:eac0369: 	 *	@param providerName	Name of the Provider.
1:eac0369: 	 */
1:600780d:     BasicProviderInfo(
1:eac0369: 		               UUID				uuid,
1:eac0369: 					   DependableFinder	dFinder,
1:eac0369: 					   String			providerName)
1:eac0369: 	{
1:eac0369: 		this.uuid = uuid;
1:eac0369: 		this.dFinder = dFinder;
1:eac0369: 		this.providerName = providerName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// ProviderInfo methods
1:eac0369: 
1:eac0369: 	/** @see ProviderInfo#getDependableFinder */
1:eac0369: 	public DependableFinder getDependableFinder()
1:eac0369: 	{
1:eac0369: 		return dFinder;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see ProviderInfo#getObjectId */
1:eac0369: 	public UUID getObjectId()
1:eac0369: 	{
1:eac0369: 		return uuid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see ProviderInfo#getProviderName */
1:eac0369: 	public String getProviderName()
1:eac0369: 	{
1:eac0369: 		return providerName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// Formatable methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1:eac0369: 		uuid = (UUID)fh.get("uuid");
1:eac0369: 		dFinder = (DependableFinder)fh.get("dFinder");
1:eac0369: 		providerName = (String) fh.get("providerName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		FormatableHashtable fh = new FormatableHashtable();
1:eac0369: 		fh.put("uuid", uuid);
1:eac0369: 		fh.put("dFinder", dFinder);
1:eac0369: 		fh.put("providerName", providerName);
1:eac0369: 		out.writeObject(fh);
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.PROVIDER_INFO_V02_ID; }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	  Object methods.
1:eac0369: 	  */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String	traceUUID;
1:eac0369: 			String  traceDFinder;
1:eac0369: 			String	traceProviderName;
1:eac0369: 
1:eac0369: 			if (uuid == null)
1:eac0369: 			{
1:eac0369: 				traceUUID = "uuid: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceUUID = "uuid: "+uuid+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (dFinder == null)
1:eac0369: 			{
1:eac0369: 				traceDFinder = "dFinder: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceDFinder = "dFinder: "+dFinder+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (providerName == null)
1:eac0369: 			{
1:eac0369: 				traceProviderName = "providerName: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceProviderName = "providerName: "+providerName+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			return "ProviderInfo: ("+traceUUID+traceDFinder+traceProviderName+")";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:600780d
/////////////////////////////////////////////////////////////////////////
1:     private UUID             uuid;
1:     private DependableFinder dFinder;
1:     private String           providerName;
/////////////////////////////////////////////////////////////////////////
1:     BasicProviderInfo(
author:David Van Couvering
-------------------------------------------------------------------------------
commit:22c1b9c
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.depend.BasicProviderInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.depend
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.depend;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  *	This is the implementation of ProviderInfo in the DependencyManager.
1:  */
1: 
1: public class BasicProviderInfo implements ProviderInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
0: 	public	UUID						uuid;
0: 	public	DependableFinder			dFinder;
0: 	public	String						providerName;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
1:     public	BasicProviderInfo() {}
1: 
1: 	/**
1: 	 *	Make one of these puppies.
1: 	 *
1: 	 *  @param uuid			UUID of Provider.
1: 	 *  @param dFinder		DependableFinder for Provider.
1: 	 *	@param providerName	Name of the Provider.
1: 	 */
0: 	public	BasicProviderInfo(
1: 		               UUID				uuid,
1: 					   DependableFinder	dFinder,
1: 					   String			providerName)
1: 	{
1: 		this.uuid = uuid;
1: 		this.dFinder = dFinder;
1: 		this.providerName = providerName;
1: 	}
1: 
1: 	// ProviderInfo methods
1: 
1: 	/** @see ProviderInfo#getDependableFinder */
1: 	public DependableFinder getDependableFinder()
1: 	{
1: 		return dFinder;
1: 	}
1: 
1: 	/** @see ProviderInfo#getObjectId */
1: 	public UUID getObjectId()
1: 	{
1: 		return uuid;
1: 	}
1: 
1: 	/** @see ProviderInfo#getProviderName */
1: 	public String getProviderName()
1: 	{
1: 		return providerName;
1: 	}
1: 
1: 	// Formatable methods
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 
1: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1: 		uuid = (UUID)fh.get("uuid");
1: 		dFinder = (DependableFinder)fh.get("dFinder");
1: 		providerName = (String) fh.get("providerName");
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		FormatableHashtable fh = new FormatableHashtable();
1: 		fh.put("uuid", uuid);
1: 		fh.put("dFinder", dFinder);
1: 		fh.put("providerName", providerName);
1: 		out.writeObject(fh);
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.PROVIDER_INFO_V02_ID; }
1: 
1: 	/*
1: 	  Object methods.
1: 	  */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String	traceUUID;
1: 			String  traceDFinder;
1: 			String	traceProviderName;
1: 
1: 			if (uuid == null)
1: 			{
1: 				traceUUID = "uuid: null ";
1: 			}
1: 			else
1: 			{
1: 				traceUUID = "uuid: "+uuid+" ";
1: 			}
1: 
1: 			if (dFinder == null)
1: 			{
1: 				traceDFinder = "dFinder: null ";
1: 			}
1: 			else
1: 			{
1: 				traceDFinder = "dFinder: "+dFinder+" ";
1: 			}
1: 
1: 			if (providerName == null)
1: 			{
1: 				traceProviderName = "providerName: null ";
1: 			}
1: 			else
1: 			{
1: 				traceProviderName = "providerName: "+providerName+" ";
1: 			}
1: 
1: 			return "ProviderInfo: ("+traceUUID+traceDFinder+traceProviderName+")";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.depend
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.depend;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.sql.depend.ProviderInfo;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  *	This is the implementation of ProviderInfo in the DependencyManager.
0:  */
0: 
0: public class BasicProviderInfo implements ProviderInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	public	UUID						uuid;
0: 	public	DependableFinder			dFinder;
0: 	public	String						providerName;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	BasicProviderInfo() {}
0: 
0: 	/**
0: 	 *	Make one of these puppies.
0: 	 *
0: 	 *  @param uuid			UUID of Provider.
0: 	 *  @param dFinder		DependableFinder for Provider.
0: 	 *	@param providerName	Name of the Provider.
0: 	 */
0: 	public	BasicProviderInfo(
0: 		               UUID				uuid,
0: 					   DependableFinder	dFinder,
0: 					   String			providerName)
0: 	{
0: 		this.uuid = uuid;
0: 		this.dFinder = dFinder;
0: 		this.providerName = providerName;
0: 	}
0: 
0: 	// ProviderInfo methods
0: 
0: 	/** @see ProviderInfo#getDependableFinder */
0: 	public DependableFinder getDependableFinder()
0: 	{
0: 		return dFinder;
0: 	}
0: 
0: 	/** @see ProviderInfo#getObjectId */
0: 	public UUID getObjectId()
0: 	{
0: 		return uuid;
0: 	}
0: 
0: 	/** @see ProviderInfo#getProviderName */
0: 	public String getProviderName()
0: 	{
0: 		return providerName;
0: 	}
0: 
0: 	// Formatable methods
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 
0: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
0: 		uuid = (UUID)fh.get("uuid");
0: 		dFinder = (DependableFinder)fh.get("dFinder");
0: 		providerName = (String) fh.get("providerName");
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		FormatableHashtable fh = new FormatableHashtable();
0: 		fh.put("uuid", uuid);
0: 		fh.put("dFinder", dFinder);
0: 		fh.put("providerName", providerName);
0: 		out.writeObject(fh);
0: 	}
0:  
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.PROVIDER_INFO_V02_ID; }
0: 
0: 	/*
0: 	  Object methods.
0: 	  */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String	traceUUID;
0: 			String  traceDFinder;
0: 			String	traceProviderName;
0: 
0: 			if (uuid == null)
0: 			{
0: 				traceUUID = "uuid: null ";
0: 			}
0: 			else
0: 			{
0: 				traceUUID = "uuid: "+uuid+" ";
0: 			}
0: 
0: 			if (dFinder == null)
0: 			{
0: 				traceDFinder = "dFinder: null ";
0: 			}
0: 			else
0: 			{
0: 				traceDFinder = "dFinder: "+dFinder+" ";
0: 			}
0: 
0: 			if (providerName == null)
0: 			{
0: 				traceProviderName = "providerName: null ";
0: 			}
0: 			else
0: 			{
0: 				traceProviderName = "providerName: "+providerName+" ";
0: 			}
0: 
0: 			return "ProviderInfo: ("+traceUUID+traceDFinder+traceProviderName+")";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================