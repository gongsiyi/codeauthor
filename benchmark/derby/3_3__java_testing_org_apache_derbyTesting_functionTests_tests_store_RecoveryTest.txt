1:8f56d99: /*
1:8f56d99:  *
1:8f56d99:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.RecoveryTest
1:8f56d99:  *
1:8f56d99:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f56d99:  * contributor license agreements.  See the NOTICE file distributed with
1:8f56d99:  * this work for additional information regarding copyright ownership.
1:8f56d99:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f56d99:  * (the "License"); you may not use this file except in compliance with
1:8f56d99:  * the License.  You may obtain a copy of the License at
1:8f56d99:  *
1:8f56d99:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8f56d99:  *
1:8f56d99:  * Unless required by applicable law or agreed to in writing, 
1:8f56d99:  * software distributed under the License is distributed on an 
1:8f56d99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:8f56d99:  * either express or implied. See the License for the specific 
1:8f56d99:  * language governing permissions and limitations under the License.
1:8f56d99:  */
3:8f56d99: 
1:8f56d99: package org.apache.derbyTesting.functionTests.tests.store;
1:8f56d99: 
1:8f56d99: import java.sql.Connection;
1:8f56d99: import java.sql.ResultSet;
1:8f56d99: import java.sql.SQLException;
1:8f56d99: import java.sql.Statement;
1:8f56d99: import junit.framework.Test;
1:8f56d99: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:8f56d99: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:8f56d99: import org.apache.derbyTesting.junit.JDBC;
1:8f56d99: import org.apache.derbyTesting.junit.TestConfiguration;
1:8f56d99: 
1:8f56d99: /**
1:8f56d99:  * DERBY-4249 This class can be used as a framework to create junit Recovery
1:8f56d99:  * Test or converting harness Recovery Tests to junit tests.
1:8f56d99:  **/
1:8f56d99: 
1:8f56d99: public final class RecoveryTest extends BaseJDBCTestCase
1:8f56d99: {
1:8f56d99:     public RecoveryTest(String name)
1:8f56d99:     {
1:8f56d99:         super(name);
2:8f56d99:     }
1:8f56d99: 
1:8f56d99:     public static Test suite()
1:8f56d99:     {
1:8f56d99:         // Add the test case into the test suite
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("RecoveryTest");
1:8f56d99:         suite.addTest(decorateTest());
2:8f56d99:         return suite;
1:8f56d99:     }
1:8f56d99: 
1:8f56d99:     private static Test decorateTest()
1:8f56d99:     {
1:8f56d99:         Test test = new CleanDatabaseTestSetup(TestConfiguration.embeddedSuite(
1:8f56d99:                 RecoveryTest.class));
1:8f56d99:         return test;
1:8f56d99:     }
1:8f56d99: 
1:8f56d99:     /**
1:8f56d99:      * Tests the recovery of database. The test achieves its purpose 
1:8f56d99:      * as follows:
1:8f56d99:      * Connect, create a table, commit and shutdown the database.
1:8f56d99:      * fork a jvm, add one row, commit, add another row, exit the jvm(killed).
1:8f56d99:      * Reconnect with the first jvm and verify that the first row is there 
1:8f56d99:      * and the second is not. 
1:ea9ca61:      * When a new JVM connects, the log entries are read one by one and it 
1:8f56d99:      * then rolls back to the transaction boundaries, then the database is
1:8f56d99:      * in a consistent state. 
1:8f56d99:      * @throws Exception
1:8f56d99:      */
1:8f56d99:     public void testBasicRecovery() throws Exception
1:8f56d99:     {
1:8f56d99:         Connection c = getConnection();
1:8f56d99:         c.setAutoCommit(false);
1:8f56d99:         Statement st = createStatement();
1:8f56d99:         st.executeUpdate("create table t( i int )");
1:8f56d99:         c.commit();
1:8f56d99:         TestConfiguration.getCurrent().shutdownDatabase();
1:8f56d99:         st.close();
1:8f56d99:         c.close();
1:8f56d99: 
1:8f56d99:         //fork JVM
1:8f56d99:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.launchRecoveryInsert");
1:8f56d99: 
1:8f56d99:         st = createStatement();
1:8f56d99:         ResultSet rs = st.executeQuery("select i from t");
1:8f56d99:         JDBC.assertFullResultSet(rs, new String[][] { { "1956" } } );
1:8f56d99:     }
1:8f56d99: 
1:8f56d99:     /**
1:8f56d99:      * This fixture is used by the forked JVM to add and commit rows to the
1:ea9ca61:      * database in the first JVM.  Note that this routine does not shutdown
1:ea9ca61:      * the database, and thus executes a "dirty" shutdown.  This dirty 
1:ea9ca61:      * shutdown is why we are forking the JVM so that we can test recovery
1:ea9ca61:      * codepaths during the reboot of the database.
1:ea9ca61:      *
1:ea9ca61:      * Do not call TestConfiguration.getCurrent().shutdownDatabase(), as
1:ea9ca61:      * that will do a clean shutdown and leave no work for restart recovery
1:ea9ca61:      * to do.  The point of assertLaunchedJUnitTestMethod() is to launch
1:ea9ca61:      * a separate process, crash it after some work, and then do restart
1:ea9ca61:      * recovery to test those code paths that only get exercised when restart
1:ea9ca61:      * starts on a non-cleanly shutdown database.
1:ea9ca61:      *
1:8f56d99:      * @throws SQLException 
1:8f56d99:      **/
1:8f56d99:     public void launchRecoveryInsert() throws SQLException
1:8f56d99:     {
1:8f56d99:             Connection c = getConnection();
1:8f56d99:             c.setAutoCommit(false);
1:8f56d99:             Statement st = createStatement();
1:8f56d99:             st.executeUpdate("insert into t(i) values (1956)");
1:8f56d99:             c.commit();
1:8f56d99:             st.executeUpdate("insert into t(i) values (2011)");
1:ea9ca61:     }
1:8f56d99: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("RecoveryTest");
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ea9ca61
/////////////////////////////////////////////////////////////////////////
1:      * When a new JVM connects, the log entries are read one by one and it 
/////////////////////////////////////////////////////////////////////////
1:      * database in the first JVM.  Note that this routine does not shutdown
1:      * the database, and thus executes a "dirty" shutdown.  This dirty 
1:      * shutdown is why we are forking the JVM so that we can test recovery
1:      * codepaths during the reboot of the database.
1:      *
1:      * Do not call TestConfiguration.getCurrent().shutdownDatabase(), as
1:      * that will do a clean shutdown and leave no work for restart recovery
1:      * to do.  The point of assertLaunchedJUnitTestMethod() is to launch
1:      * a separate process, crash it after some work, and then do restart
1:      * recovery to test those code paths that only get exercised when restart
1:      * starts on a non-cleanly shutdown database.
1:      *
/////////////////////////////////////////////////////////////////////////
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ce62de6
/////////////////////////////////////////////////////////////////////////
commit:8f56d99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.RecoveryTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * DERBY-4249 This class can be used as a framework to create junit Recovery
1:  * Test or converting harness Recovery Tests to junit tests.
1:  **/
1: 
1: public final class RecoveryTest extends BaseJDBCTestCase
1: {
1:     public RecoveryTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
1:         // Add the test case into the test suite
0:         TestSuite suite = new TestSuite("RecoveryTest");
0:         //DERBY-4647 exec does not work on weme
0:         if (BaseTestCase.isJ9Platform())
1:             return suite;
1:         suite.addTest(decorateTest());
1:         return suite;
1:     }
1: 
1:     private static Test decorateTest()
1:     {
1:         Test test = new CleanDatabaseTestSetup(TestConfiguration.embeddedSuite(
1:                 RecoveryTest.class));
1:         return test;
1:     }
1: 
1:     /**
1:      * Tests the recovery of database. The test achieves its purpose 
1:      * as follows:
1:      * Connect, create a table, commit and shutdown the database.
1:      * fork a jvm, add one row, commit, add another row, exit the jvm(killed).
1:      * Reconnect with the first jvm and verify that the first row is there 
1:      * and the second is not. 
0:      * When a new JVM connects, the log entries are read one by one and if 
1:      * then rolls back to the transaction boundaries, then the database is
1:      * in a consistent state. 
1:      * @throws Exception
1:      */
1:     public void testBasicRecovery() throws Exception
1:     {
1:         Connection c = getConnection();
1:         c.setAutoCommit(false);
1:         Statement st = createStatement();
1:         st.executeUpdate("create table t( i int )");
1:         c.commit();
1:         TestConfiguration.getCurrent().shutdownDatabase();
1:         st.close();
1:         c.close();
1: 
1:         //fork JVM
1:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.launchRecoveryInsert");
1: 
1:         st = createStatement();
1:         ResultSet rs = st.executeQuery("select i from t");
1:         JDBC.assertFullResultSet(rs, new String[][] { { "1956" } } );
1:     }
1: 
1:     /**
1:      * This fixture is used by the forked JVM to add and commit rows to the
0:      * database in the first JVM.
1:      * @throws SQLException 
1:      **/
1:     public void launchRecoveryInsert() throws SQLException
1:     {
1:             Connection c = getConnection();
1:             c.setAutoCommit(false);
1:             Statement st = createStatement();
1:             st.executeUpdate("insert into t(i) values (1956)");
1:             c.commit();
1:             st.executeUpdate("insert into t(i) values (2011)");
1:     }
1: }
============================================================================