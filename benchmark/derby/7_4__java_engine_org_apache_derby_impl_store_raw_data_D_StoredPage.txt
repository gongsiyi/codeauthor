1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.D_StoredPage
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.diag.Diagnosticable;
1:eac0369: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.io.PrintStream;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.services.io.CounterOutputStream;
1:eac0369: import org.apache.derby.iapi.services.io.NullOutputStream;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The D_StoredPage class provides diagnostic information about the StoredPage
1:eac0369: class.  Currently this info includes:
1:eac0369:   o a dump of the page.
1:eac0369:   o page size of the page.
1:eac0369:   o bytes free on the page.
1:eac0369:   o bytes reserved on the page.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class D_StoredPage implements Diagnosticable
1:eac0369: {
1:eac0369:     protected StoredPage page;
1:eac0369: 
1:eac0369:     public D_StoredPage()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Private/Protected methods of This class: */
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Diagnosticable
1:eac0369: 	*/
1:eac0369:     public void init(Object obj)
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(obj instanceof StoredPage);
1:eac0369: 
1:eac0369:         page = (StoredPage) obj;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Provide a string dump of the StoredPage.
1:eac0369:      * <p>
1:eac0369:      * RESOLVE - once the "Diagnostic" interface is accepted move the
1:eac0369:      * string dumping code into this routine from it's current place in
1:eac0369:      * the StoredPage code.
1:eac0369:      * <p>
2:eac0369:      *
2:eac0369: 	 * @return string dump of the StoredPage
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public String diag()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         return(page.toString());
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Provide detailed diagnostic information about a StoredPage.
1:eac0369:      * <p>
1:eac0369:      * Currently supports 3 types of information:
1:eac0369:      *   Page.DIAG_PAGE_SIZE      - page size.
1:eac0369:      *   Page.DIAG_BTYES_FREE     - # of free bytes on the page.
1:eac0369:      *   Page.DIAG_BYTES_RESERVED - # of reserved bytes on the page.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void diag_detail(Properties prop) 
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         String prop_value = null;
1:eac0369: 
1:eac0369:         // currently only support 2 properties - pageSize and freeBytes
1:eac0369:         if (prop.getProperty(Page.DIAG_PAGE_SIZE) != null)
1:eac0369:         {
1:eac0369:             // set the page size diag string
1:eac0369:             prop.put(Page.DIAG_PAGE_SIZE, Integer.toString(page.getPageSize()));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_BYTES_FREE) != null)
1:eac0369:         {
1:eac0369:             int space_available = page.freeSpace;
1:eac0369: 
1:eac0369:             // set the page free diag string
1:eac0369:             prop.put(Page.DIAG_BYTES_FREE, Integer.toString(space_available));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_BYTES_RESERVED) != null)
1:eac0369:         {
1:eac0369:             int reservedSpace = (page.totalSpace * page.spareSpace / 100);
1:eac0369:             reservedSpace = Math.min(reservedSpace, page.freeSpace);
1:eac0369:             
1:eac0369:             // set the reserved space diag string.
1:eac0369:             prop.put(
1:eac0369:                 Page.DIAG_BYTES_RESERVED, Integer.toString(reservedSpace));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_RESERVED_SPACE) != null)
1:eac0369:         {
1:eac0369:             // DIAG_RESERVED_SPACE is the % of the page to reserve during 
1:eac0369:             // insert for expansion.
1:eac0369: 
1:eac0369:             prop.put(
1:eac0369:                 Page.DIAG_RESERVED_SPACE, Integer.toString(page.spareSpace));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_MINIMUM_REC_SIZE) != null)
1:eac0369:         {
1:eac0369:             // DIAG_MINIMUM_REC_SZE is the minimum number of bytes per row 
1:eac0369:             // to reserve at insert time for a record.
1:eac0369: 
1:eac0369:             prop.put(
1:eac0369:                 Page.DIAG_MINIMUM_REC_SIZE, 
1:eac0369:                 Integer.toString(page.minimumRecordSize));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_PAGEOVERHEAD) != null)
1:eac0369:         {
1:eac0369:             // DIAG_PAGEOVERHEAD is the amount of space needed by the page 
1:eac0369:             // for it's internal info.
1:eac0369: 
1:eac0369:             prop.put(
1:eac0369:                 Page.DIAG_PAGEOVERHEAD, 
1:eac0369:                 Integer.toString(page.getPageSize() - page.getMaxFreeSpace()));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_SLOTTABLE_SIZE) != null)
1:eac0369:         {
1:eac0369:             // DIAG_SLOTTABLE_SIZE is the amount of space needed by the page 
1:eac0369:             // for the current slot table.
1:eac0369: 
1:eac0369:             // RESOLVE - it would be better to call a StoredPage variable or
1:eac0369:             // interface.
1:eac0369:             int slotEntrySize = page.getSlotsInUse() * 3 * 
1:eac0369:                 ((page.getPageSize() >= 65536) ? 
1:eac0369:                     StoredPage.LARGE_SLOT_SIZE : StoredPage.SMALL_SLOT_SIZE);
1:eac0369: 
1:eac0369:             prop.put(Page.DIAG_SLOTTABLE_SIZE, Integer.toString(slotEntrySize));
1:eac0369:         }
1:eac0369: 
1:eac0369:         // loop through slot table and determine row size's and overflow recs.
1:eac0369:         int  overflow_count = 0;
1:eac0369:         int  row_size       = 0;
1:eac0369:         long min_rowsize    = 0;
1:eac0369:         long max_rowsize    = 0;
1:eac0369:         long record_size    = 0;
1:eac0369: 
1:eac0369:         if (page.getSlotsInUse() > 0)
1:eac0369:         {
1:eac0369:             min_rowsize = Long.MAX_VALUE;
1:eac0369:             max_rowsize = Long.MIN_VALUE;
1:eac0369: 
1:eac0369:             for (int slot = 0; slot < page.getSlotsInUse(); slot++)
1:eac0369:             {
1:eac0369:                 try
1:eac0369:                 {
1:eac0369:                     if (page.getIsOverflow(slot))
1:eac0369:                     {
1:eac0369:                         if (SanityManager.DEBUG)
1:eac0369:                             SanityManager.DEBUG_PRINT("OVER", 
1:eac0369:                                 "Slot (" + slot + ") is overflow record of page:" +
1:eac0369:                                 page);
1:eac0369:                         overflow_count++;
1:eac0369:                     }
1:eac0369:                     record_size = page.getRecordLength(slot);
1:eac0369:                     row_size += record_size;
1:eac0369: 
1:eac0369:                     min_rowsize = Math.min(min_rowsize, record_size);
1:eac0369:                     max_rowsize = Math.max(max_rowsize, record_size);
1:eac0369:                 }
1:eac0369:                 catch (Throwable t)
1:eac0369:                 {
1:eac0369:                     System.out.println("Got error from getIsOverflow().");
1:eac0369:                 }
1:eac0369: 
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_NUMOVERFLOWED) != null)
1:eac0369:         {
1:eac0369:             // DIAG_NUMOVERFLOWED is the number of over flow rows on this page.
1:eac0369: 
1:eac0369:             prop.put(Page.DIAG_NUMOVERFLOWED, Integer.toString(overflow_count));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_ROWSIZE) != null)
1:eac0369:         {
1:eac0369:             // sum of the record lengths on this page.
1:eac0369: 
1:eac0369:             prop.put(Page.DIAG_ROWSIZE, Integer.toString(row_size));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_MINROWSIZE) != null)
1:eac0369:         {
1:eac0369:             // minimum length record on this page.
1:eac0369: 
1:eac0369:             prop.put(Page.DIAG_MINROWSIZE, Long.toString(min_rowsize));
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prop.getProperty(Page.DIAG_MAXROWSIZE) != null)
1:eac0369:         {
1:eac0369:             // maximum length record on this page.
1:eac0369: 
1:eac0369:             prop.put(Page.DIAG_MAXROWSIZE, Long.toString(max_rowsize));
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Checks the slot table.
1:20bc69f:         <p>
1:eac0369: 
1:eac0369: 		1) checks the number of slot entries matches the record count
1:eac0369: 		2) checks the slot table lengths match the field lengths
1:eac0369: 
1:eac0369: 	    @exception  StandardException  Standard exception policy.
1:eac0369: 	*/
1:eac0369: 	public boolean checkSlotTable(PrintStream out) throws StandardException, IOException {
1:eac0369: 
1:eac0369: 		boolean ok = true;
1:eac0369: 
1:eac0369: 		int slotCount = page.getSlotsInUse();
1:eac0369: 		int recordCount = page.recordCount();
1:eac0369: 
1:eac0369: 		if (slotCount != recordCount) {
1:eac0369: 			out.println("CORRUPT PAGE: slot count mismatch: slot count " + slotCount
1:eac0369: 				+ " record count " + recordCount);
1:eac0369: 			ok = false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (int slot = 0; slot < slotCount; slot++) {
1:eac0369: 
1:eac0369: 			int recordLength = page.getRecordPortionLength(slot);
1:eac0369: 
1:eac0369: 
1:eac0369: 			CounterOutputStream counter = new CounterOutputStream();
1:eac0369: 			counter.setOutputStream(new NullOutputStream());
1:eac0369: 
1:eac0369: 			int recordId = 
1:eac0369:                 page.fetchFromSlot(
1:eac0369:                     null, 
1:eac0369:                     slot, 
1:eac0369:                     new DataValueDescriptor[0], 
1:eac0369:                     (FetchDescriptor) null, true).getId();
1:eac0369: 
1:eac0369: 			page.logRecord(slot, page.LOG_RECORD_DEFAULT, recordId,
1:eac0369: 						   (FormatableBitSet) null, counter, (RecordHandle)null);
1:eac0369: 
1:eac0369: 			int actualLength = counter.getCount();
1:eac0369: 
1:eac0369: 			if (actualLength != recordLength) {
1:eac0369: 				out.println(
1:eac0369:                     "CORRUPT PAGE: record length mismatch at slot " + slot);
1:eac0369: 				out.println("              slot entry length " + recordLength);
1:eac0369: 				out.println("              actual     length " + actualLength);
1:eac0369: 				ok = false;
1:eac0369: 			}				
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369: 		return ok;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String pageHeaderToString()
1:eac0369: 	{
1:eac0369: 		return "page id " + page.getIdentity() + 
1:eac0369: 				" Overflow: " + page.isOverflowPage() +
1:eac0369: 				" PageVersion: " + page.getPageVersion() +
1:eac0369: 				" SlotsInUse: " + page.getSlotsInUse() +
1:eac0369: 				" PageStatus: " + page.getPageStatus() + 
1:eac0369: 				" NextId: " + page.newRecordId() + "\n";
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
1:         <p>
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.D_StoredPage
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.services.diag.Diagnosticable;
1: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
1: 
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import java.util.Properties;
1: import java.io.PrintStream;
1: import java.io.IOException;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.io.CounterOutputStream;
1: import org.apache.derby.iapi.services.io.NullOutputStream;
1: 
1: /**
1: 
1: The D_StoredPage class provides diagnostic information about the StoredPage
1: class.  Currently this info includes:
1:   o a dump of the page.
1:   o page size of the page.
1:   o bytes free on the page.
1:   o bytes reserved on the page.
1: 
1: **/
1: 
1: public class D_StoredPage implements Diagnosticable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     protected StoredPage page;
1: 
1:     public D_StoredPage()
1:     {
1:     }
1: 
1:     /* Private/Protected methods of This class: */
1: 
1: 	/*
1: 	** Methods of Diagnosticable
1: 	*/
1:     public void init(Object obj)
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(obj instanceof StoredPage);
1: 
1:         page = (StoredPage) obj;
1:     }
1: 
1:     /**
1:      * Provide a string dump of the StoredPage.
1:      * <p>
1:      * RESOLVE - once the "Diagnostic" interface is accepted move the
1:      * string dumping code into this routine from it's current place in
1:      * the StoredPage code.
1:      * <p>
1:      *
1: 	 * @return string dump of the StoredPage
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public String diag()
1:         throws StandardException
1:     {
1:         return(page.toString());
1:     }
1: 
1:     /**
1:      * Provide detailed diagnostic information about a StoredPage.
1:      * <p>
1:      * Currently supports 3 types of information:
1:      *   Page.DIAG_PAGE_SIZE      - page size.
1:      *   Page.DIAG_BTYES_FREE     - # of free bytes on the page.
1:      *   Page.DIAG_BYTES_RESERVED - # of reserved bytes on the page.
1:      * <p>
1:      *
1: 	 * @return string dump of the StoredPage
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void diag_detail(Properties prop) 
1:         throws StandardException
1:     {
1:         String prop_value = null;
1: 
1:         // currently only support 2 properties - pageSize and freeBytes
1:         if (prop.getProperty(Page.DIAG_PAGE_SIZE) != null)
1:         {
1:             // set the page size diag string
1:             prop.put(Page.DIAG_PAGE_SIZE, Integer.toString(page.getPageSize()));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_BYTES_FREE) != null)
1:         {
1:             int space_available = page.freeSpace;
1: 
1:             // set the page free diag string
1:             prop.put(Page.DIAG_BYTES_FREE, Integer.toString(space_available));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_BYTES_RESERVED) != null)
1:         {
1:             int reservedSpace = (page.totalSpace * page.spareSpace / 100);
1:             reservedSpace = Math.min(reservedSpace, page.freeSpace);
1:             
1:             // set the reserved space diag string.
1:             prop.put(
1:                 Page.DIAG_BYTES_RESERVED, Integer.toString(reservedSpace));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_RESERVED_SPACE) != null)
1:         {
1:             // DIAG_RESERVED_SPACE is the % of the page to reserve during 
1:             // insert for expansion.
1: 
1:             prop.put(
1:                 Page.DIAG_RESERVED_SPACE, Integer.toString(page.spareSpace));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_MINIMUM_REC_SIZE) != null)
1:         {
1:             // DIAG_MINIMUM_REC_SZE is the minimum number of bytes per row 
1:             // to reserve at insert time for a record.
1: 
1:             prop.put(
1:                 Page.DIAG_MINIMUM_REC_SIZE, 
1:                 Integer.toString(page.minimumRecordSize));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_PAGEOVERHEAD) != null)
1:         {
1:             // DIAG_PAGEOVERHEAD is the amount of space needed by the page 
1:             // for it's internal info.
1: 
1:             prop.put(
1:                 Page.DIAG_PAGEOVERHEAD, 
1:                 Integer.toString(page.getPageSize() - page.getMaxFreeSpace()));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_SLOTTABLE_SIZE) != null)
1:         {
1:             // DIAG_SLOTTABLE_SIZE is the amount of space needed by the page 
1:             // for the current slot table.
1: 
1:             // RESOLVE - it would be better to call a StoredPage variable or
1:             // interface.
1:             int slotEntrySize = page.getSlotsInUse() * 3 * 
1:                 ((page.getPageSize() >= 65536) ? 
1:                     StoredPage.LARGE_SLOT_SIZE : StoredPage.SMALL_SLOT_SIZE);
1: 
1:             prop.put(Page.DIAG_SLOTTABLE_SIZE, Integer.toString(slotEntrySize));
1:         }
1: 
1:         // loop through slot table and determine row size's and overflow recs.
1:         int  overflow_count = 0;
1:         int  row_size       = 0;
1:         long min_rowsize    = 0;
1:         long max_rowsize    = 0;
1:         long record_size    = 0;
1: 
1:         if (page.getSlotsInUse() > 0)
1:         {
1:             min_rowsize = Long.MAX_VALUE;
1:             max_rowsize = Long.MIN_VALUE;
1: 
1:             for (int slot = 0; slot < page.getSlotsInUse(); slot++)
1:             {
1:                 try
1:                 {
1:                     if (page.getIsOverflow(slot))
1:                     {
1:                         if (SanityManager.DEBUG)
1:                             SanityManager.DEBUG_PRINT("OVER", 
1:                                 "Slot (" + slot + ") is overflow record of page:" +
1:                                 page);
1:                         overflow_count++;
1:                     }
1:                     record_size = page.getRecordLength(slot);
1:                     row_size += record_size;
1: 
1:                     min_rowsize = Math.min(min_rowsize, record_size);
1:                     max_rowsize = Math.max(max_rowsize, record_size);
1:                 }
1:                 catch (Throwable t)
1:                 {
1:                     System.out.println("Got error from getIsOverflow().");
1:                 }
1: 
1:             }
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_NUMOVERFLOWED) != null)
1:         {
1:             // DIAG_NUMOVERFLOWED is the number of over flow rows on this page.
1: 
1:             prop.put(Page.DIAG_NUMOVERFLOWED, Integer.toString(overflow_count));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_ROWSIZE) != null)
1:         {
1:             // sum of the record lengths on this page.
1: 
1:             prop.put(Page.DIAG_ROWSIZE, Integer.toString(row_size));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_MINROWSIZE) != null)
1:         {
1:             // minimum length record on this page.
1: 
1:             prop.put(Page.DIAG_MINROWSIZE, Long.toString(min_rowsize));
1:         }
1: 
1:         if (prop.getProperty(Page.DIAG_MAXROWSIZE) != null)
1:         {
1:             // maximum length record on this page.
1: 
1:             prop.put(Page.DIAG_MAXROWSIZE, Long.toString(max_rowsize));
1:         }
1:     }
1: 
1: 
1: 
1: 	/**
1: 		Checks the slot table.
1: 
1: 		1) checks the number of slot entries matches the record count
1: 		2) checks the slot table lengths match the field lengths
1: 
1: 	    @exception  StandardException  Standard exception policy.
1: 	*/
1: 	public boolean checkSlotTable(PrintStream out) throws StandardException, IOException {
1: 
1: 		boolean ok = true;
1: 
1: 		int slotCount = page.getSlotsInUse();
1: 		int recordCount = page.recordCount();
1: 
1: 		if (slotCount != recordCount) {
1: 			out.println("CORRUPT PAGE: slot count mismatch: slot count " + slotCount
1: 				+ " record count " + recordCount);
1: 			ok = false;
1: 		}
1: 
1: 		for (int slot = 0; slot < slotCount; slot++) {
1: 
1: 			int recordLength = page.getRecordPortionLength(slot);
1: 
1: 
1: 			CounterOutputStream counter = new CounterOutputStream();
1: 			counter.setOutputStream(new NullOutputStream());
1: 
1: 			int recordId = 
1:                 page.fetchFromSlot(
1:                     null, 
1:                     slot, 
1:                     new DataValueDescriptor[0], 
1:                     (FetchDescriptor) null, true).getId();
1: 
1: 			page.logRecord(slot, page.LOG_RECORD_DEFAULT, recordId,
1: 						   (FormatableBitSet) null, counter, (RecordHandle)null);
1: 
1: 			int actualLength = counter.getCount();
1: 
1: 			if (actualLength != recordLength) {
1: 				out.println(
1:                     "CORRUPT PAGE: record length mismatch at slot " + slot);
1: 				out.println("              slot entry length " + recordLength);
1: 				out.println("              actual     length " + actualLength);
1: 				ok = false;
1: 			}				
1: 
1: 		}
1: 
1: 
1: 		return ok;
1: 
1: 	}
1: 
1: 	public String pageHeaderToString()
1: 	{
1: 		return "page id " + page.getIdentity() + 
1: 				" Overflow: " + page.isOverflowPage() +
1: 				" PageVersion: " + page.getPageVersion() +
1: 				" SlotsInUse: " + page.getSlotsInUse() +
1: 				" PageStatus: " + page.getPageStatus() + 
1: 				" NextId: " + page.newRecordId() + "\n";
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.diag.Diagnosticable;
0: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import java.util.Properties;
0: import java.io.PrintStream;
0: import java.io.IOException;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.io.CounterOutputStream;
0: import org.apache.derby.iapi.services.io.NullOutputStream;
0: 
0: /**
0: 
0: The D_StoredPage class provides diagnostic information about the StoredPage
0: class.  Currently this info includes:
0:   o a dump of the page.
0:   o page size of the page.
0:   o bytes free on the page.
0:   o bytes reserved on the page.
0: 
0: **/
0: 
0: public class D_StoredPage implements Diagnosticable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     protected StoredPage page;
0: 
0:     public D_StoredPage()
0:     {
0:     }
0: 
0:     /* Private/Protected methods of This class: */
0: 
0: 	/*
0: 	** Methods of Diagnosticable
0: 	*/
0:     public void init(Object obj)
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(obj instanceof StoredPage);
0: 
0:         page = (StoredPage) obj;
0:     }
0: 
0:     /**
0:      * Provide a string dump of the StoredPage.
0:      * <p>
0:      * RESOLVE - once the "Diagnostic" interface is accepted move the
0:      * string dumping code into this routine from it's current place in
0:      * the StoredPage code.
0:      * <p>
0:      *
0: 	 * @return string dump of the StoredPage
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public String diag()
0:         throws StandardException
0:     {
0:         return(page.toString());
0:     }
0: 
0:     /**
0:      * Provide detailed diagnostic information about a StoredPage.
0:      * <p>
0:      * Currently supports 3 types of information:
0:      *   Page.DIAG_PAGE_SIZE      - page size.
0:      *   Page.DIAG_BTYES_FREE     - # of free bytes on the page.
0:      *   Page.DIAG_BYTES_RESERVED - # of reserved bytes on the page.
0:      * <p>
0:      *
0: 	 * @return string dump of the StoredPage
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void diag_detail(Properties prop) 
0:         throws StandardException
0:     {
0:         String prop_value = null;
0: 
0:         // currently only support 2 properties - pageSize and freeBytes
0:         if (prop.getProperty(Page.DIAG_PAGE_SIZE) != null)
0:         {
0:             // set the page size diag string
0:             prop.put(Page.DIAG_PAGE_SIZE, Integer.toString(page.getPageSize()));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_BYTES_FREE) != null)
0:         {
0:             int space_available = page.freeSpace;
0: 
0:             // set the page free diag string
0:             prop.put(Page.DIAG_BYTES_FREE, Integer.toString(space_available));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_BYTES_RESERVED) != null)
0:         {
0:             int reservedSpace = (page.totalSpace * page.spareSpace / 100);
0:             reservedSpace = Math.min(reservedSpace, page.freeSpace);
0:             
0:             // set the reserved space diag string.
0:             prop.put(
0:                 Page.DIAG_BYTES_RESERVED, Integer.toString(reservedSpace));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_RESERVED_SPACE) != null)
0:         {
0:             // DIAG_RESERVED_SPACE is the % of the page to reserve during 
0:             // insert for expansion.
0: 
0:             prop.put(
0:                 Page.DIAG_RESERVED_SPACE, Integer.toString(page.spareSpace));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_MINIMUM_REC_SIZE) != null)
0:         {
0:             // DIAG_MINIMUM_REC_SZE is the minimum number of bytes per row 
0:             // to reserve at insert time for a record.
0: 
0:             prop.put(
0:                 Page.DIAG_MINIMUM_REC_SIZE, 
0:                 Integer.toString(page.minimumRecordSize));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_PAGEOVERHEAD) != null)
0:         {
0:             // DIAG_PAGEOVERHEAD is the amount of space needed by the page 
0:             // for it's internal info.
0: 
0:             prop.put(
0:                 Page.DIAG_PAGEOVERHEAD, 
0:                 Integer.toString(page.getPageSize() - page.getMaxFreeSpace()));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_SLOTTABLE_SIZE) != null)
0:         {
0:             // DIAG_SLOTTABLE_SIZE is the amount of space needed by the page 
0:             // for the current slot table.
0: 
0:             // RESOLVE - it would be better to call a StoredPage variable or
0:             // interface.
0:             int slotEntrySize = page.getSlotsInUse() * 3 * 
0:                 ((page.getPageSize() >= 65536) ? 
0:                     StoredPage.LARGE_SLOT_SIZE : StoredPage.SMALL_SLOT_SIZE);
0: 
0:             prop.put(Page.DIAG_SLOTTABLE_SIZE, Integer.toString(slotEntrySize));
0:         }
0: 
0:         // loop through slot table and determine row size's and overflow recs.
0:         int  overflow_count = 0;
0:         int  row_size       = 0;
0:         long min_rowsize    = 0;
0:         long max_rowsize    = 0;
0:         long record_size    = 0;
0: 
0:         if (page.getSlotsInUse() > 0)
0:         {
0:             min_rowsize = Long.MAX_VALUE;
0:             max_rowsize = Long.MIN_VALUE;
0: 
0:             for (int slot = 0; slot < page.getSlotsInUse(); slot++)
0:             {
0:                 try
0:                 {
0:                     if (page.getIsOverflow(slot))
0:                     {
0:                         if (SanityManager.DEBUG)
0:                             SanityManager.DEBUG_PRINT("OVER", 
0:                                 "Slot (" + slot + ") is overflow record of page:" +
0:                                 page);
0:                         overflow_count++;
0:                     }
0:                     record_size = page.getRecordLength(slot);
0:                     row_size += record_size;
0: 
0:                     min_rowsize = Math.min(min_rowsize, record_size);
0:                     max_rowsize = Math.max(max_rowsize, record_size);
0:                 }
0:                 catch (Throwable t)
0:                 {
0:                     System.out.println("Got error from getIsOverflow().");
0:                 }
0: 
0:             }
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_NUMOVERFLOWED) != null)
0:         {
0:             // DIAG_NUMOVERFLOWED is the number of over flow rows on this page.
0: 
0:             prop.put(Page.DIAG_NUMOVERFLOWED, Integer.toString(overflow_count));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_ROWSIZE) != null)
0:         {
0:             // sum of the record lengths on this page.
0: 
0:             prop.put(Page.DIAG_ROWSIZE, Integer.toString(row_size));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_MINROWSIZE) != null)
0:         {
0:             // minimum length record on this page.
0: 
0:             prop.put(Page.DIAG_MINROWSIZE, Long.toString(min_rowsize));
0:         }
0: 
0:         if (prop.getProperty(Page.DIAG_MAXROWSIZE) != null)
0:         {
0:             // maximum length record on this page.
0: 
0:             prop.put(Page.DIAG_MAXROWSIZE, Long.toString(max_rowsize));
0:         }
0:     }
0: 
0: 
0: 
0: 	/**
0: 		Checks the slot table.
0: 
0: 		1) checks the number of slot entries matches the record count
0: 		2) checks the slot table lengths match the field lengths
0: 
0: 	    @exception  StandardException  Standard exception policy.
0: 	*/
0: 	public boolean checkSlotTable(PrintStream out) throws StandardException, IOException {
0: 
0: 		boolean ok = true;
0: 
0: 		int slotCount = page.getSlotsInUse();
0: 		int recordCount = page.recordCount();
0: 
0: 		if (slotCount != recordCount) {
0: 			out.println("CORRUPT PAGE: slot count mismatch: slot count " + slotCount
0: 				+ " record count " + recordCount);
0: 			ok = false;
0: 		}
0: 
0: 		for (int slot = 0; slot < slotCount; slot++) {
0: 
0: 			int recordLength = page.getRecordPortionLength(slot);
0: 
0: 
0: 			CounterOutputStream counter = new CounterOutputStream();
0: 			counter.setOutputStream(new NullOutputStream());
0: 
0: 			int recordId = 
0:                 page.fetchFromSlot(
0:                     null, 
0:                     slot, 
0:                     new DataValueDescriptor[0], 
0:                     (FetchDescriptor) null, true).getId();
0: 
0: 			page.logRecord(slot, page.LOG_RECORD_DEFAULT, recordId,
0: 						   (FormatableBitSet) null, counter, (RecordHandle)null);
0: 
0: 			int actualLength = counter.getCount();
0: 
0: 			if (actualLength != recordLength) {
0: 				out.println(
0:                     "CORRUPT PAGE: record length mismatch at slot " + slot);
0: 				out.println("              slot entry length " + recordLength);
0: 				out.println("              actual     length " + actualLength);
0: 				ok = false;
0: 			}				
0: 
0: 		}
0: 
0: 
0: 		return ok;
0: 
0: 	}
0: 
0: 	public String pageHeaderToString()
0: 	{
0: 		return "page id " + page.getIdentity() + 
0: 				" Overflow: " + page.isOverflowPage() +
0: 				" PageVersion: " + page.getPageVersion() +
0: 				" SlotsInUse: " + page.getSlotsInUse() +
0: 				" PageStatus: " + page.getPageStatus() + 
0: 				" NextId: " + page.newRecordId() + "\n";
0: 	}
0: 
0: }
============================================================================