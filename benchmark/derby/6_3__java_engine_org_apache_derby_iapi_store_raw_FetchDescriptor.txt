1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.FetchDescriptor
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: FetchDescriptor is used to package up all the arguments necessary to 
1:eac0369: describe what rows and what row parts should be returned from the store
1:eac0369: back to language as part of a fetch.
1:eac0369: <p>
1:eac0369: The FetchDescriptor may also contain scratch space used to process the 
1:eac0369: qualifiers passed in the scan.  This scratch space will be used to cache
1:eac0369: information about the qualifiers, valid column list, row size so that 
1:eac0369: calculations need only be done once per scan rather than every iteration.
1:eac0369: **/
1:eac0369: 
1:eac0369: public final class FetchDescriptor
1:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     private int             row_length;
1:eac0369:     private FormatableBitSet         validColumns;
1:eac0369:     private Qualifier[][]   qualifier_list;
1:eac0369:     private int[]           materialized_cols;
1:eac0369:     private int             maxFetchColumnId;
1:eac0369: 
1:eac0369:     private static final int ZERO_FILL_LENGTH  = 100;
1:eac0369:     private static final int[] zero_fill_array = new int[ZERO_FILL_LENGTH];
1:eac0369: 
1:eac0369:     // use int arrays rather than FormatableBitSet's to get most efficient processing
1:eac0369:     // in performance critical loop which reads columns from page.
1:eac0369:     private int[]           validColumnsArray;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     FetchDescriptor()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     public FetchDescriptor(
1:eac0369:     int             input_row_length)
1:eac0369:     {
1:eac0369:         row_length      = input_row_length;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public FetchDescriptor(
1:eac0369:     int             input_row_length,
1:eac0369:     int             single_valid_column_number)
1:eac0369:     {
1:eac0369:         row_length        = input_row_length;
1:eac0369:         maxFetchColumnId  = single_valid_column_number;
1:eac0369:         validColumnsArray = new int[maxFetchColumnId + 1];
1:eac0369:         validColumnsArray[single_valid_column_number] = 1;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public FetchDescriptor(
1:eac0369:     int             input_row_length,
1:eac0369:     FormatableBitSet         input_validColumns,
1:eac0369:     Qualifier[][]   input_qualifier_list)
1:eac0369:     {
1:eac0369:         row_length      = input_row_length;
1:eac0369:         qualifier_list  = input_qualifier_list;
1:eac0369: 
1:eac0369:         if (qualifier_list != null)
1:eac0369:         {
1:eac0369:             materialized_cols           = new int[row_length];
1:eac0369:         }
1:eac0369: 
1:eac0369:         setValidColumns(input_validColumns);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the column list bit map.
1:eac0369:      * <p>
1:eac0369:      * A description of which columns to return from every fetch in the scan.  
1:eac0369:      * A row array and a valid column bit map work together to describe the row
1:eac0369:      * to be returned by the scan - see RowUtil for description of how these two
1:eac0369:      * parameters work together to describe a "row".
3:eac0369:      *
1:eac0369: 	 * @return The column list bit map.
1:eac0369:      **/
1:eac0369:     public final FormatableBitSet getValidColumns()
1:eac0369:     {
1:eac0369:         return(validColumns);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final int[] getValidColumnsArray()
1:eac0369:     {
1:eac0369:         return(validColumnsArray);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final void setValidColumns(
1:eac0369:     FormatableBitSet   input_validColumns)
1:eac0369:     {
1:eac0369:         validColumns = input_validColumns;
1:eac0369: 
1:eac0369:         setMaxFetchColumnId();
1:eac0369: 
1:eac0369:         if (validColumns != null)
1:eac0369:         {
1:eac0369:             validColumnsArray = new int[maxFetchColumnId + 1];
1:eac0369:             for (int i = maxFetchColumnId; i >= 0; i--)
1:eac0369:             {
1:eac0369:                 validColumnsArray[i] = ((validColumns.isSet(i)) ? 1 : 0);
1:eac0369:             }
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the qualifier array.
1:eac0369:      * <p>
1:eac0369:      * Return the array of qualifiers in this FetchDescriptor.  The array of 
1:eac0369:      * qualifiers which, applied to each key, restricts the rows returned by 
1:eac0369:      * the scan.  Rows for which any one of the qualifiers returns false are 
1:eac0369:      * not returned by the scan. If null, all rows are returned.  Qualifiers 
1:eac0369:      * can only reference columns which are included in the scanColumnList.  
1:eac0369:      * The column id that a qualifier returns in the column id the table, not 
1:eac0369:      * the column id in the partial row being returned.
1:eac0369:      * <p>
1:eac0369:      * A null qualifier array means there are no qualifiers.
1:eac0369:      *
1:eac0369: 	 * @return The qualifier array, it may be null.
1:eac0369:      **/
1:eac0369:     public final Qualifier[][] getQualifierList()
1:eac0369:     {
1:eac0369:         return(qualifier_list);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Internal to store.
1:eac0369:      **/
1:eac0369:     public final int[] getMaterializedColumns()
1:eac0369:     {
1:eac0369:         return(materialized_cols);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Internal to store.
1:eac0369:      **/
1:eac0369:     public final int getMaxFetchColumnId()
1:eac0369:     {
1:eac0369:         return(maxFetchColumnId);
1:eac0369:     }
1:eac0369: 
1:eac0369:     private final void setMaxFetchColumnId()
1:eac0369:     {
1:eac0369:         maxFetchColumnId = row_length - 1;
1:eac0369: 
1:eac0369:         if (validColumns != null)
1:eac0369:         {
1:eac0369:             int vCol_length = validColumns.getLength();
1:eac0369: 
1:eac0369:             if (vCol_length < maxFetchColumnId + 1)
1:eac0369:                 maxFetchColumnId = vCol_length - 1;
1:eac0369: 
1:eac0369:             for (; maxFetchColumnId >= 0; maxFetchColumnId--)
1:eac0369:             {
1:eac0369:                 if (validColumns.isSet(maxFetchColumnId))
1:eac0369:                     break;
1:eac0369:             }
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Internal to store.
1:eac0369:      **/
1:eac0369:     public final void reset()
1:eac0369:     {
1:eac0369:         int[]   cols = materialized_cols;
1:eac0369: 
1:eac0369:         if (cols != null)
1:eac0369:         {
1:eac0369:             // New row, clear the array map.
1:eac0369: 
1:eac0369:             /*
1:eac0369:              * this was too slow.
1:eac0369:             for (int i = cols.length - 1; i >= 0;) 
1:eac0369:             {
1:eac0369:                 
1:eac0369:                 cols[i--] = 0;
1:eac0369:             }
1:eac0369:             */
1:eac0369: 
1:eac0369:             if (cols.length <= ZERO_FILL_LENGTH)
1:eac0369:             {
1:eac0369:                 // fast path the usual case.
1:eac0369:                 System.arraycopy(
1:eac0369:                     zero_fill_array,   0, 
1:eac0369:                     cols, 0, 
1:eac0369:                     cols.length);
1:eac0369:             }
1:eac0369:             else
1:eac0369:             {
1:eac0369:                 int offset  = 0;
1:eac0369:                 int howMany = cols.length;
1:eac0369: 
1:eac0369:                 while (howMany > 0) 
1:eac0369:                 {
1:eac0369:                     int count = 
1:eac0369:                         howMany > zero_fill_array.length ? 
1:eac0369:                                 zero_fill_array.length : howMany;
1:eac0369: 
1:eac0369:                     System.arraycopy(
1:eac0369:                         zero_fill_array, 0, cols, offset, count);
1:eac0369:                     howMany -= count;
1:eac0369:                     offset  += count;
1:eac0369:                 }
1:eac0369:             }
1:eac0369:         }
1:eac0369:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.FetchDescriptor
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 
1: FetchDescriptor is used to package up all the arguments necessary to 
1: describe what rows and what row parts should be returned from the store
1: back to language as part of a fetch.
1: <p>
1: The FetchDescriptor may also contain scratch space used to process the 
1: qualifiers passed in the scan.  This scratch space will be used to cache
1: information about the qualifiers, valid column list, row size so that 
1: calculations need only be done once per scan rather than every iteration.
1: **/
1: 
1: public final class FetchDescriptor
1: {
1:     /**
0:        IBM Copyright &copy notice.
1:     */
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1:     private int             row_length;
1:     private FormatableBitSet         validColumns;
1:     private Qualifier[][]   qualifier_list;
1:     private int[]           materialized_cols;
1:     private int             maxFetchColumnId;
1: 
1:     private static final int ZERO_FILL_LENGTH  = 100;
1:     private static final int[] zero_fill_array = new int[ZERO_FILL_LENGTH];
1: 
1:     // use int arrays rather than FormatableBitSet's to get most efficient processing
1:     // in performance critical loop which reads columns from page.
1:     private int[]           validColumnsArray;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     FetchDescriptor()
1:     {
1:     }
1: 
1:     public FetchDescriptor(
1:     int             input_row_length)
1:     {
1:         row_length      = input_row_length;
1:     }
1: 
1:     public FetchDescriptor(
1:     int             input_row_length,
1:     int             single_valid_column_number)
1:     {
1:         row_length        = input_row_length;
1:         maxFetchColumnId  = single_valid_column_number;
1:         validColumnsArray = new int[maxFetchColumnId + 1];
1:         validColumnsArray[single_valid_column_number] = 1;
1:     }
1: 
1:     public FetchDescriptor(
1:     int             input_row_length,
1:     FormatableBitSet         input_validColumns,
1:     Qualifier[][]   input_qualifier_list)
1:     {
1:         row_length      = input_row_length;
1:         qualifier_list  = input_qualifier_list;
1: 
1:         if (qualifier_list != null)
1:         {
1:             materialized_cols           = new int[row_length];
1:         }
1: 
1:         setValidColumns(input_validColumns);
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Return the column list bit map.
1:      * <p>
1:      * A description of which columns to return from every fetch in the scan.  
1:      * A row array and a valid column bit map work together to describe the row
1:      * to be returned by the scan - see RowUtil for description of how these two
1:      * parameters work together to describe a "row".
1:      *
1: 	 * @return The column list bit map.
1:      *
0: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public final FormatableBitSet getValidColumns()
1:     {
1:         return(validColumns);
1:     }
1: 
1:     public final int[] getValidColumnsArray()
1:     {
1:         return(validColumnsArray);
1:     }
1: 
1:     public final void setValidColumns(
1:     FormatableBitSet   input_validColumns)
1:     {
1:         validColumns = input_validColumns;
1: 
1:         setMaxFetchColumnId();
1: 
1:         if (validColumns != null)
1:         {
1:             validColumnsArray = new int[maxFetchColumnId + 1];
1:             for (int i = maxFetchColumnId; i >= 0; i--)
1:             {
1:                 validColumnsArray[i] = ((validColumns.isSet(i)) ? 1 : 0);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Return the qualifier array.
1:      * <p>
1:      * Return the array of qualifiers in this FetchDescriptor.  The array of 
1:      * qualifiers which, applied to each key, restricts the rows returned by 
1:      * the scan.  Rows for which any one of the qualifiers returns false are 
1:      * not returned by the scan. If null, all rows are returned.  Qualifiers 
1:      * can only reference columns which are included in the scanColumnList.  
1:      * The column id that a qualifier returns in the column id the table, not 
1:      * the column id in the partial row being returned.
1:      * <p>
1:      * A null qualifier array means there are no qualifiers.
1:      *
1: 	 * @return The qualifier array, it may be null.
1:      *
0: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public final Qualifier[][] getQualifierList()
1:     {
1:         return(qualifier_list);
1:     }
1: 
1: 
1:     /**
1:      * Internal to store.
1:      **/
1:     public final int[] getMaterializedColumns()
1:     {
1:         return(materialized_cols);
1:     }
1: 
1: 
1:     /**
1:      * Internal to store.
1:      **/
1:     public final int getMaxFetchColumnId()
1:     {
1:         return(maxFetchColumnId);
1:     }
1: 
1:     private final void setMaxFetchColumnId()
1:     {
1:         maxFetchColumnId = row_length - 1;
1: 
1:         if (validColumns != null)
1:         {
1:             int vCol_length = validColumns.getLength();
1: 
1:             if (vCol_length < maxFetchColumnId + 1)
1:                 maxFetchColumnId = vCol_length - 1;
1: 
1:             for (; maxFetchColumnId >= 0; maxFetchColumnId--)
1:             {
1:                 if (validColumns.isSet(maxFetchColumnId))
1:                     break;
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Internal to store.
1:      **/
1:     public final void reset()
1:     {
1:         int[]   cols = materialized_cols;
1: 
1:         if (cols != null)
1:         {
1:             // New row, clear the array map.
1: 
1:             /*
1:              * this was too slow.
1:             for (int i = cols.length - 1; i >= 0;) 
1:             {
1:                 
1:                 cols[i--] = 0;
1:             }
1:             */
1: 
1:             if (cols.length <= ZERO_FILL_LENGTH)
1:             {
1:                 // fast path the usual case.
1:                 System.arraycopy(
1:                     zero_fill_array,   0, 
1:                     cols, 0, 
1:                     cols.length);
1:             }
1:             else
1:             {
1:                 int offset  = 0;
1:                 int howMany = cols.length;
1: 
1:                 while (howMany > 0) 
1:                 {
1:                     int count = 
1:                         howMany > zero_fill_array.length ? 
1:                                 zero_fill_array.length : howMany;
1: 
1:                     System.arraycopy(
1:                         zero_fill_array, 0, cols, offset, count);
1:                     howMany -= count;
1:                     offset  += count;
1:                 }
1:             }
1:         }
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 
0: FetchDescriptor is used to package up all the arguments necessary to 
0: describe what rows and what row parts should be returned from the store
0: back to language as part of a fetch.
0: <p>
0: The FetchDescriptor may also contain scratch space used to process the 
0: qualifiers passed in the scan.  This scratch space will be used to cache
0: information about the qualifiers, valid column list, row size so that 
0: calculations need only be done once per scan rather than every iteration.
0: **/
0: 
0: public final class FetchDescriptor
0: {
0:     /**
0:        IBM Copyright &copy notice.
0:     */
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0:     private int             row_length;
0:     private FormatableBitSet         validColumns;
0:     private Qualifier[][]   qualifier_list;
0:     private int[]           materialized_cols;
0:     private int             maxFetchColumnId;
0: 
0:     private static final int ZERO_FILL_LENGTH  = 100;
0:     private static final int[] zero_fill_array = new int[ZERO_FILL_LENGTH];
0: 
0:     // use int arrays rather than FormatableBitSet's to get most efficient processing
0:     // in performance critical loop which reads columns from page.
0:     private int[]           validColumnsArray;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     FetchDescriptor()
0:     {
0:     }
0: 
0:     public FetchDescriptor(
0:     int             input_row_length)
0:     {
0:         row_length      = input_row_length;
0:     }
0: 
0:     public FetchDescriptor(
0:     int             input_row_length,
0:     int             single_valid_column_number)
0:     {
0:         row_length        = input_row_length;
0:         maxFetchColumnId  = single_valid_column_number;
0:         validColumnsArray = new int[maxFetchColumnId + 1];
0:         validColumnsArray[single_valid_column_number] = 1;
0:     }
0: 
0:     public FetchDescriptor(
0:     int             input_row_length,
0:     FormatableBitSet         input_validColumns,
0:     Qualifier[][]   input_qualifier_list)
0:     {
0:         row_length      = input_row_length;
0:         qualifier_list  = input_qualifier_list;
0: 
0:         if (qualifier_list != null)
0:         {
0:             materialized_cols           = new int[row_length];
0:         }
0: 
0:         setValidColumns(input_validColumns);
0:     }
0: 
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Return the column list bit map.
0:      * <p>
0:      * A description of which columns to return from every fetch in the scan.  
0:      * A row array and a valid column bit map work together to describe the row
0:      * to be returned by the scan - see RowUtil for description of how these two
0:      * parameters work together to describe a "row".
0:      *
0: 	 * @return The column list bit map.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public final FormatableBitSet getValidColumns()
0:     {
0:         return(validColumns);
0:     }
0: 
0:     public final int[] getValidColumnsArray()
0:     {
0:         return(validColumnsArray);
0:     }
0: 
0:     public final void setValidColumns(
0:     FormatableBitSet   input_validColumns)
0:     {
0:         validColumns = input_validColumns;
0: 
0:         setMaxFetchColumnId();
0: 
0:         if (validColumns != null)
0:         {
0:             validColumnsArray = new int[maxFetchColumnId + 1];
0:             for (int i = maxFetchColumnId; i >= 0; i--)
0:             {
0:                 validColumnsArray[i] = ((validColumns.isSet(i)) ? 1 : 0);
0:             }
0:         }
0:     }
0: 
0:     /**
0:      * Return the qualifier array.
0:      * <p>
0:      * Return the array of qualifiers in this FetchDescriptor.  The array of 
0:      * qualifiers which, applied to each key, restricts the rows returned by 
0:      * the scan.  Rows for which any one of the qualifiers returns false are 
0:      * not returned by the scan. If null, all rows are returned.  Qualifiers 
0:      * can only reference columns which are included in the scanColumnList.  
0:      * The column id that a qualifier returns in the column id the table, not 
0:      * the column id in the partial row being returned.
0:      * <p>
0:      * A null qualifier array means there are no qualifiers.
0:      *
0: 	 * @return The qualifier array, it may be null.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public final Qualifier[][] getQualifierList()
0:     {
0:         return(qualifier_list);
0:     }
0: 
0: 
0:     /**
0:      * Internal to store.
0:      **/
0:     public final int[] getMaterializedColumns()
0:     {
0:         return(materialized_cols);
0:     }
0: 
0: 
0:     /**
0:      * Internal to store.
0:      **/
0:     public final int getMaxFetchColumnId()
0:     {
0:         return(maxFetchColumnId);
0:     }
0: 
0:     private final void setMaxFetchColumnId()
0:     {
0:         maxFetchColumnId = row_length - 1;
0: 
0:         if (validColumns != null)
0:         {
0:             int vCol_length = validColumns.getLength();
0: 
0:             if (vCol_length < maxFetchColumnId + 1)
0:                 maxFetchColumnId = vCol_length - 1;
0: 
0:             for (; maxFetchColumnId >= 0; maxFetchColumnId--)
0:             {
0:                 if (validColumns.isSet(maxFetchColumnId))
0:                     break;
0:             }
0:         }
0:     }
0: 
0:     /**
0:      * Internal to store.
0:      **/
0:     public final void reset()
0:     {
0:         int[]   cols = materialized_cols;
0: 
0:         if (cols != null)
0:         {
0:             // New row, clear the array map.
0: 
0:             /*
0:              * this was too slow.
0:             for (int i = cols.length - 1; i >= 0;) 
0:             {
0:                 
0:                 cols[i--] = 0;
0:             }
0:             */
0: 
0:             if (cols.length <= ZERO_FILL_LENGTH)
0:             {
0:                 // fast path the usual case.
0:                 System.arraycopy(
0:                     zero_fill_array,   0, 
0:                     cols, 0, 
0:                     cols.length);
0:             }
0:             else
0:             {
0:                 int offset  = 0;
0:                 int howMany = cols.length;
0: 
0:                 while (howMany > 0) 
0:                 {
0:                     int count = 
0:                         howMany > zero_fill_array.length ? 
0:                                 zero_fill_array.length : howMany;
0: 
0:                     System.arraycopy(
0:                         zero_fill_array, 0, cols, offset, count);
0:                     howMany -= count;
0:                     offset  += count;
0:                 }
0:             }
0:         }
0:     }
0: }
============================================================================