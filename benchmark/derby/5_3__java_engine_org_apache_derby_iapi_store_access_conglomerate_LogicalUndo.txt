1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.LogicalUndo
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.LogicalUndoable;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 		A Logical undo is an undo operation that operates on a different page
1:eac0369: 		from the page that has the original change.  The reason one would
1:eac0369: 		need logical undo is when an uncommitted row move from one page to
1:eac0369: 		another in a nested internal transaction which is committed.  For
1:eac0369: 		example, an uncommitted insert on a btree may be moved by a later split
1:eac0369: 		operation to another page, the split operation will have committed.  If
1:eac0369: 		the insert needs to be rolled back, it can only be found at the new
1:eac0369: 		page where the split puts it and not at the original page where it is
1:eac0369: 		inserted. 
1:eac0369: 		<P>
1:eac0369: 		The logging and recovery system does not know how to do logical undo.
1:eac0369: 		Client of the logging system must provide it with a call back function
1:eac0369: 		so that during undo time (both runtime undo and recovery undo), the
1:eac0369: 		appropriate page and row can be found so that the logging system can
1:eac0369: 		apply the log's undo operation.
1:eac0369: 		<P>
1:eac0369: 		Any log operation that needs logical undo must implement this
1:eac0369: 		LogicalUndo interface, which serves the purpose of a callback function
1:eac0369: 		pointer.  This callback function findUndoInfo is called by log operation
1:eac0369: 		generateUndo and will be given all the information in the log operation.
1:eac0369: 		<P>
1:eac0369: 		FindUndo uses the information in the pageOp to find the correct page
1:eac0369: 		and record that needs to be rolled back, i.e., a latched page
1:eac0369: 		(undoPage) and the recordId (undoRID).  It returns the latched
1:eac0369: 		undoPage, and modifies the pageOp to contain the correct segmentId,
1:eac0369: 		containerId, pageNumber and recordId etc.  It also need to supply a
1:eac0369: 		releaseResource() method that the logging system can call to unlatch
1:eac0369: 		the page and release the container, etc, after the undo has been
1:eac0369: 		applied.
1:eac0369: 		<P>
1:eac0369: 		The logging system will use the information in the undoPackage to put
1:eac0369: 		together a Compensation operation which has the undoPage number
1:eac0369: 		and undoRID.  Logical Undo is only called during the generation of a
1:eac0369: 		CLR, never during recovery redo.
1:eac0369: 		<P>
1:eac0369: 		<B>Note: LogicalUndo is a call back function pointer that will be
1:eac0369: 		written out as part of the log operation, it should not contain any
1:eac0369: 		non-transient member fields </B>
1:eac0369: 		<P>
1:eac0369: 		Details.
1:eac0369: 		<P>
1:eac0369: 		LogicalUndo, and LogicalUndoable is the interface used by logical undo
1:eac0369: 		between the logging system in RawStore and Access.  A log operation
1:eac0369: 		that needs logical undo should implment LogicalUndoable intead of
1:eac0369: 		Undoable.  A LogicalUndoable log operation contains a LogicalUndo
1:eac0369: 		member field, which is a function pointer to an Access function that
1:eac0369: 		provides the logical undo logic of, say, traversing a btree.  
1:eac0369: 		<P>
1:eac0369: 		When called to generateUndo, that LogicalUndoable log operation will
1:eac0369: 		call LogicalUndo.findUndo instead of relying on the page number and
1:eac0369: 		recordId that is stored in it during the runtime roll forward
1:eac0369: 		operation.  <B>The logging system opens the container before it calls
1:eac0369: 		findUndo, therefore the container where the log operation is applied
1:eac0369: 		cannot between rollforward and rollback.</B>
1:eac0369: 		<P>
1:eac0369: 		In LogicalUndo.findUndo, it can use information stored in
1:eac0369: 		the LogicalUndoable, such as pageNumber, containerId, to come up with a
1:eac0369: 		template row.  It can then ask the LogicalUndoable log record
1:eac0369: 		to restore a row from the log record that fits the template.  Using
1:eac0369: 		this restored row, LogicalUndo can, e.g., restore the key to the btree
1:eac0369: 		and traverses the btree.  Once it finds the correct RecordHandle where
1:eac0369: 		the rollback should go, findUndo should call pageOp.resetRecord and
1:eac0369: 		return a latched page where the undo should go.
1:eac0369: 		<P>
1:eac0369: 		Upon the return of findUndo, the LogicalUndoable log operation should
1:eac0369: 		have information about the new RecordHandle and the page should be
1:eac0369: 		return latched.  A compensation operation is then generated with the
1:eac0369: 		new record location and undoMe is applied on the correct location.
1:eac0369: 		<P>
1:eac0369: 		The logging system will unlatch the undoPage when it is done with
1:eac0369: 		rollback and will close the container.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.store.raw.LogicalUndoable
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Undoable#generateUndo 
1:eac0369: */
1:eac0369: 
1:eac0369: public interface LogicalUndo {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Find the page and record to undo.  If no logical undo is necessary,
1:eac0369: 		i.e., row has not moved, then just return the latched page where undo
1:eac0369: 		should go.  If the record has moved, it has a new recordId on the new
1:eac0369: 		page, this routine needs to call pageOp.resetRecord with the new
1:eac0369: 		RecordHandle so that the logging system can update the compensation
1:eac0369: 		Operation with the new location.
1:eac0369: 
1:eac0369: 		@param transaction the transaction doing the rollback
1:eac0369: 		@param pageOp the page operation that supports logical undo.  This
1:eac0369: 				LogicalUndo function pointer is a field of that pageOperation
1:eac0369: 		@param in data stored in the log stream that contains the record data
1:eac0369: 				necessary to restore the row.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 		@exception IOException Method may read from InputStream		
1:eac0369: 	*/
1:eac0369: 	public Page findUndo(
1:eac0369:     Transaction     transaction, 
1:eac0369:     LogicalUndoable pageOp,
1:eac0369:     LimitObjectInput     in)
1:eac0369:         throws StandardException, IOException;
1:eac0369: }
1:eac0369: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.LogicalUndo
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.LogicalUndoable;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 		A Logical undo is an undo operation that operates on a different page
1: 		from the page that has the original change.  The reason one would
1: 		need logical undo is when an uncommitted row move from one page to
1: 		another in a nested internal transaction which is committed.  For
1: 		example, an uncommitted insert on a btree may be moved by a later split
1: 		operation to another page, the split operation will have committed.  If
1: 		the insert needs to be rolled back, it can only be found at the new
1: 		page where the split puts it and not at the original page where it is
1: 		inserted. 
1: 		<P>
1: 		The logging and recovery system does not know how to do logical undo.
1: 		Client of the logging system must provide it with a call back function
1: 		so that during undo time (both runtime undo and recovery undo), the
1: 		appropriate page and row can be found so that the logging system can
1: 		apply the log's undo operation.
1: 		<P>
1: 		Any log operation that needs logical undo must implement this
1: 		LogicalUndo interface, which serves the purpose of a callback function
1: 		pointer.  This callback function findUndoInfo is called by log operation
1: 		generateUndo and will be given all the information in the log operation.
1: 		<P>
1: 		FindUndo uses the information in the pageOp to find the correct page
1: 		and record that needs to be rolled back, i.e., a latched page
1: 		(undoPage) and the recordId (undoRID).  It returns the latched
1: 		undoPage, and modifies the pageOp to contain the correct segmentId,
1: 		containerId, pageNumber and recordId etc.  It also need to supply a
1: 		releaseResource() method that the logging system can call to unlatch
1: 		the page and release the container, etc, after the undo has been
1: 		applied.
1: 		<P>
1: 		The logging system will use the information in the undoPackage to put
1: 		together a Compensation operation which has the undoPage number
1: 		and undoRID.  Logical Undo is only called during the generation of a
1: 		CLR, never during recovery redo.
1: 		<P>
1: 		<B>Note: LogicalUndo is a call back function pointer that will be
1: 		written out as part of the log operation, it should not contain any
1: 		non-transient member fields </B>
1: 		<P>
1: 		Details.
1: 		<P>
1: 		LogicalUndo, and LogicalUndoable is the interface used by logical undo
1: 		between the logging system in RawStore and Access.  A log operation
1: 		that needs logical undo should implment LogicalUndoable intead of
1: 		Undoable.  A LogicalUndoable log operation contains a LogicalUndo
1: 		member field, which is a function pointer to an Access function that
1: 		provides the logical undo logic of, say, traversing a btree.  
1: 		<P>
1: 		When called to generateUndo, that LogicalUndoable log operation will
1: 		call LogicalUndo.findUndo instead of relying on the page number and
1: 		recordId that is stored in it during the runtime roll forward
1: 		operation.  <B>The logging system opens the container before it calls
1: 		findUndo, therefore the container where the log operation is applied
1: 		cannot between rollforward and rollback.</B>
1: 		<P>
1: 		In LogicalUndo.findUndo, it can use information stored in
1: 		the LogicalUndoable, such as pageNumber, containerId, to come up with a
1: 		template row.  It can then ask the LogicalUndoable log record
1: 		to restore a row from the log record that fits the template.  Using
1: 		this restored row, LogicalUndo can, e.g., restore the key to the btree
1: 		and traverses the btree.  Once it finds the correct RecordHandle where
1: 		the rollback should go, findUndo should call pageOp.resetRecord and
1: 		return a latched page where the undo should go.
1: 		<P>
1: 		Upon the return of findUndo, the LogicalUndoable log operation should
1: 		have information about the new RecordHandle and the page should be
1: 		return latched.  A compensation operation is then generated with the
1: 		new record location and undoMe is applied on the correct location.
1: 		<P>
1: 		The logging system will unlatch the undoPage when it is done with
1: 		rollback and will close the container.
1: 
1: 		@see org.apache.derby.iapi.store.raw.LogicalUndoable
1: 		@see org.apache.derby.iapi.store.raw.Undoable#generateUndo 
1: */
1: 
1: public interface LogicalUndo {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Find the page and record to undo.  If no logical undo is necessary,
1: 		i.e., row has not moved, then just return the latched page where undo
1: 		should go.  If the record has moved, it has a new recordId on the new
1: 		page, this routine needs to call pageOp.resetRecord with the new
1: 		RecordHandle so that the logging system can update the compensation
1: 		Operation with the new location.
1: 
1: 		@param transaction the transaction doing the rollback
1: 		@param pageOp the page operation that supports logical undo.  This
1: 				LogicalUndo function pointer is a field of that pageOperation
1: 		@param in data stored in the log stream that contains the record data
1: 				necessary to restore the row.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 		@exception IOException Method may read from InputStream		
1: 	*/
1: 	public Page findUndo(
1:     Transaction     transaction, 
1:     LogicalUndoable pageOp,
1:     LimitObjectInput     in)
1:         throws StandardException, IOException;
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.LogicalUndoable;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 		A Logical undo is an undo operation that operates on a different page
0: 		from the page that has the original change.  The reason one would
0: 		need logical undo is when an uncommitted row move from one page to
0: 		another in a nested internal transaction which is committed.  For
0: 		example, an uncommitted insert on a btree may be moved by a later split
0: 		operation to another page, the split operation will have committed.  If
0: 		the insert needs to be rolled back, it can only be found at the new
0: 		page where the split puts it and not at the original page where it is
0: 		inserted. 
0: 		<P>
0: 		The logging and recovery system does not know how to do logical undo.
0: 		Client of the logging system must provide it with a call back function
0: 		so that during undo time (both runtime undo and recovery undo), the
0: 		appropriate page and row can be found so that the logging system can
0: 		apply the log's undo operation.
0: 		<P>
0: 		Any log operation that needs logical undo must implement this
0: 		LogicalUndo interface, which serves the purpose of a callback function
0: 		pointer.  This callback function findUndoInfo is called by log operation
0: 		generateUndo and will be given all the information in the log operation.
0: 		<P>
0: 		FindUndo uses the information in the pageOp to find the correct page
0: 		and record that needs to be rolled back, i.e., a latched page
0: 		(undoPage) and the recordId (undoRID).  It returns the latched
0: 		undoPage, and modifies the pageOp to contain the correct segmentId,
0: 		containerId, pageNumber and recordId etc.  It also need to supply a
0: 		releaseResource() method that the logging system can call to unlatch
0: 		the page and release the container, etc, after the undo has been
0: 		applied.
0: 		<P>
0: 		The logging system will use the information in the undoPackage to put
0: 		together a Compensation operation which has the undoPage number
0: 		and undoRID.  Logical Undo is only called during the generation of a
0: 		CLR, never during recovery redo.
0: 		<P>
0: 		<B>Note: LogicalUndo is a call back function pointer that will be
0: 		written out as part of the log operation, it should not contain any
0: 		non-transient member fields </B>
0: 		<P>
0: 		Details.
0: 		<P>
0: 		LogicalUndo, and LogicalUndoable is the interface used by logical undo
0: 		between the logging system in RawStore and Access.  A log operation
0: 		that needs logical undo should implment LogicalUndoable intead of
0: 		Undoable.  A LogicalUndoable log operation contains a LogicalUndo
0: 		member field, which is a function pointer to an Access function that
0: 		provides the logical undo logic of, say, traversing a btree.  
0: 		<P>
0: 		When called to generateUndo, that LogicalUndoable log operation will
0: 		call LogicalUndo.findUndo instead of relying on the page number and
0: 		recordId that is stored in it during the runtime roll forward
0: 		operation.  <B>The logging system opens the container before it calls
0: 		findUndo, therefore the container where the log operation is applied
0: 		cannot between rollforward and rollback.</B>
0: 		<P>
0: 		In LogicalUndo.findUndo, it can use information stored in
0: 		the LogicalUndoable, such as pageNumber, containerId, to come up with a
0: 		template row.  It can then ask the LogicalUndoable log record
0: 		to restore a row from the log record that fits the template.  Using
0: 		this restored row, LogicalUndo can, e.g., restore the key to the btree
0: 		and traverses the btree.  Once it finds the correct RecordHandle where
0: 		the rollback should go, findUndo should call pageOp.resetRecord and
0: 		return a latched page where the undo should go.
0: 		<P>
0: 		Upon the return of findUndo, the LogicalUndoable log operation should
0: 		have information about the new RecordHandle and the page should be
0: 		return latched.  A compensation operation is then generated with the
0: 		new record location and undoMe is applied on the correct location.
0: 		<P>
0: 		The logging system will unlatch the undoPage when it is done with
0: 		rollback and will close the container.
0: 
0: 		@see org.apache.derby.iapi.store.raw.LogicalUndoable
0: 		@see org.apache.derby.iapi.store.raw.Undoable#generateUndo 
0: */
0: 
0: public interface LogicalUndo {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Find the page and record to undo.  If no logical undo is necessary,
0: 		i.e., row has not moved, then just return the latched page where undo
0: 		should go.  If the record has moved, it has a new recordId on the new
0: 		page, this routine needs to call pageOp.resetRecord with the new
0: 		RecordHandle so that the logging system can update the compensation
0: 		Operation with the new location.
0: 
0: 		@param transaction the transaction doing the rollback
0: 		@param pageOp the page operation that supports logical undo.  This
0: 				LogicalUndo function pointer is a field of that pageOperation
0: 		@param in data stored in the log stream that contains the record data
0: 				necessary to restore the row.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 		@exception IOException Method may read from InputStream		
0: 	*/
0: 	public Page findUndo(
0:     Transaction     transaction, 
0:     LogicalUndoable pageOp,
0:     LimitObjectInput     in)
0:         throws StandardException, IOException;
0: }
0: 
============================================================================