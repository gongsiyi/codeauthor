1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.stream.SingleStream
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.stream;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.InfoStreams;
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: 
1:eac0369: import java.io.BufferedOutputStream;
1:eac0369: import java.io.FileOutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.File;
1:eac0369: import java.io.Writer;
1:eac0369: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:56c1dc2: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: import java.lang.reflect.Method;
1:eac0369: import java.lang.reflect.Field;
1:eac0369: import java.lang.reflect.Modifier;
1:eac0369: import java.lang.reflect.Member;
1:eac0369: import java.lang.reflect.InvocationTargetException;
1:dc43cf8: import org.apache.derby.iapi.services.i18n.MessageService;
1:dc43cf8: import org.apache.derby.iapi.services.io.FileUtil;
1:dc43cf8: import org.apache.derby.shared.common.reference.MessageId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *
1:eac0369:  * The Basic Services provide InfoStreams for reporting
1:eac0369:  * information. Two streams are provided: trace and error.
1:eac0369:  * It is configurable where these streams are directed.
1:eac0369:  * <p>
1:eac0369:  * Errors will be printed to the error stream in addition
1:eac0369:  * to being sent to the client.
1:eac0369:  * <p>
1:eac0369:  * By default both streams are sent to an error log
1:eac0369:  * for the system. When creating a message for a stream,
1:eac0369:  * you can create an initial entry with header information
1:eac0369:  * and then append to it as many times as desired.
1:eac0369:  * <p>
1:eac0369:  * Note: if character encodings are needed, the use of
1:eac0369:  * java.io.*OutputStream's should be replaced with
1:eac0369:  * java.io.*Writer's (assuming the Writer interface
1:eac0369:  * remains stable in JDK1.1)
1:eac0369:  *
1:eac0369:  */
1:7a92d1f: public final class SingleStream
1:a15a470: implements InfoStreams, ModuleControl, java.security.PrivilegedAction<HeaderPrintWriter>
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Instance fields
1:eac0369: 	*/
1:eac0369: 	private HeaderPrintWriter theStream;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		  The no-arg public constructor for ModuleControl's use.
1:eac0369: 	 */
1:eac0369: 	public SingleStream() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1:eac0369: 	 */
1:eac0369: 	public void boot(boolean create, Properties properties) {
1:eac0369: 		theStream = makeStream();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#stop
1:eac0369: 	 */
1:eac0369: 	public void stop()	{
1:eac0369: 		((BasicHeaderPrintWriter) theStream).complete();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * InfoStreams interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.stream.InfoStreams#stream
1:eac0369: 	 */
1:eac0369: 	public HeaderPrintWriter stream() {
1:eac0369: 		return theStream;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Make the stream; note that service properties override
1:eac0369: 		application and system properties.
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	private HeaderPrintWriter makeStream() {
1:eac0369: 
1:eac0369: 		// get the header
1:eac0369: 		PrintWriterGetHeader header = makeHeader();
1:27e2c4b: 		HeaderPrintWriter hpw = makeHPW(header);
1:eac0369: 
1:eac0369: 		// If hpw == null then no properties were specified for the stream
1:eac0369: 		// so use/create the default stream.
1:eac0369: 		if (hpw == null)
1:eac0369: 			hpw = createDefaultStream(header);
1:eac0369: 		return hpw;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return a new header object.
1:eac0369: 	*/
1:eac0369: 	private PrintWriterGetHeader makeHeader() {
1:eac0369: 
1:eac0369: 		return new BasicGetLogHeader(true, true, (String) null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		create a HeaderPrintWriter based on the header.
1:eac0369: 		Will still need to determine the target type.
1:eac0369: 	 */
1:27e2c4b: 	private HeaderPrintWriter makeHPW(PrintWriterGetHeader header) {
1:eac0369: 
1:eac0369: 		// the type of target is based on which property is used
1:eac0369: 		// to set it. choices are file, method, field, stream
1:eac0369: 
1:27e2c4b: 		String target = PropertyUtil.
1:24d620a: 		   getSystemProperty(Property.ERRORLOG_STYLE_PROPERTY);
1:24d620a: 		if (target != null) {
1:24d620a: 			return makeStyleHPW(target, header);
1:24d620a: 		}
1:24d620a: 
1:24d620a: 		target = PropertyUtil.
1:27e2c4b:                    getSystemProperty(Property.ERRORLOG_FILE_PROPERTY);
1:eac0369: 		if (target!=null)
1:eac0369: 			return makeFileHPW(target, header);
1:eac0369: 
1:27e2c4b: 		target = PropertyUtil.
1:27e2c4b:                    getSystemProperty(Property.ERRORLOG_METHOD_PROPERTY);
1:eac0369: 		if (target!=null) 
1:24d620a: 			return makeMethodHPW(target, header, false);
1:eac0369: 
1:27e2c4b: 		target = PropertyUtil.
1:27e2c4b:                    getSystemProperty(Property.ERRORLOG_FIELD_PROPERTY);
1:eac0369: 		if (target!=null) 
1:eac0369: 			return makeFieldHPW(target, header);
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Make a header print writer out of a file name. If it is a relative
1:eac0369: 		path name then it is taken as relative to derby.system.home if that is set,
1:eac0369: 		otherwise relative to the current directory. If the path name is absolute
1:eac0369: 		then it is taken as absolute.
1:eac0369: 	*/
1:eac0369: 	private HeaderPrintWriter PBmakeFileHPW(String fileName,
4:eac0369: 											PrintWriterGetHeader header) {
1:eac0369: 
1:eac0369: 		boolean appendInfoLog = PropertyUtil.getSystemBoolean(Property.LOG_FILE_APPEND);
1:eac0369: 
1:eac0369: 		File streamFile = new File(fileName);
1:eac0369: 
1:eac0369: 		// See if this needs to be made relative to something ...
1:eac0369: 		if (!streamFile.isAbsolute()) {
1:56c1dc2: 			Object monitorEnv = getMonitor().getEnvironment();
1:eac0369: 			if (monitorEnv instanceof File)
1:eac0369: 				streamFile = new File((File) monitorEnv, fileName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		FileOutputStream	fos;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			if (streamFile.exists() && appendInfoLog)
1:eac0369: 				fos = new FileOutputStream(streamFile.getPath(), true);
1:eac0369: 			else
1:eac0369: 				fos = new FileOutputStream(streamFile);
1:dc43cf8:             FileUtil.limitAccessToOwner(streamFile);
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 			return useDefaultStream(header, ioe);
1:eac0369: 		} catch (SecurityException se) {
1:eac0369: 			return useDefaultStream(header, se);
1:eac0369: 		}
1:eac0369: 
1:27e2c4b: 		return new BasicHeaderPrintWriter(new BufferedOutputStream(fos), header,
1:27e2c4b: 			true, streamFile.getPath());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private HeaderPrintWriter makeMethodHPW(String methodInvocation,
1:24d620a: 											PrintWriterGetHeader header,
1:24d620a:                                             boolean canClose) {
1:eac0369: 
1:eac0369: 		int lastDot = methodInvocation.lastIndexOf('.');
1:eac0369: 		String className = methodInvocation.substring(0, lastDot);
1:eac0369: 		String methodName = methodInvocation.substring(lastDot+1);
1:eac0369: 
1:eac0369: 		Throwable t;
1:eac0369: 		try {
1:a15a470: 			Class<?> theClass = Class.forName(className);
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				Method theMethod = theClass.getMethod(methodName,  new Class[0]);
1:eac0369: 
1:eac0369: 				if (!Modifier.isStatic(theMethod.getModifiers())) {
1:eac0369: 					HeaderPrintWriter hpw = useDefaultStream(header);
1:eac0369: 					hpw.printlnWithHeader(theMethod.toString() + " is not static");
1:eac0369: 					return hpw;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				try {
1:27e2c4b: 					return makeValueHPW(theMethod, theMethod.invoke((Object) null, 
1:24d620a: 						new Object[0]), header, methodInvocation, canClose);
1:eac0369: 				} catch (IllegalAccessException iae) {
1:eac0369: 					t = iae;
1:eac0369: 				} catch (IllegalArgumentException iarge) {
1:eac0369: 					t = iarge;
1:eac0369: 				} catch (InvocationTargetException ite) {
1:eac0369: 					t = ite.getTargetException();
1:eac0369: 				}
1:eac0369: 
1:eac0369: 			} catch (NoSuchMethodException nsme) {
1:eac0369: 				t = nsme;
1:eac0369: 			}
1:eac0369: 		} catch (ClassNotFoundException cnfe) {
1:eac0369: 			t = cnfe;
1:eac0369: 		} catch (SecurityException se) {
1:eac0369: 			t = se;
1:eac0369: 			
1:eac0369: 		}
1:eac0369: 		return useDefaultStream(header, t);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:24d620a: 	private HeaderPrintWriter makeStyleHPW(String style,
1:24d620a: 											PrintWriterGetHeader header) {
1:24d620a: 		HeaderPrintWriter res = null;
1:24d620a: 		if ("rollingFile".equals(style)) {
1:24d620a: 		String className = "org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream";
1:24d620a: 			res = makeMethodHPW(className, header, true);
1:24d620a: 		} else {            
1:24d620a: 			try {
1:24d620a: 				IllegalArgumentException ex = new IllegalArgumentException("unknown derby.stream.error.style: " + style);
1:24d620a:                 throw ex;
1:24d620a: 			} catch (IllegalArgumentException t) {
1:24d620a: 				res = useDefaultStream(header, t);
1:24d620a: 			} catch (Exception t) {
1:24d620a: 				res = useDefaultStream(header, t);
1:24d620a: 			}
1:24d620a: 		}
1:24d620a: 		return res;
1:24d620a: 	}
1:eac0369: 
1:eac0369: 	private HeaderPrintWriter makeFieldHPW(String fieldAccess,
1:eac0369: 											PrintWriterGetHeader header) {
1:eac0369: 
1:eac0369: 		int lastDot = fieldAccess.lastIndexOf('.');
1:eac0369: 		String className = fieldAccess.substring(0, lastDot);
1:eac0369: 		String fieldName = fieldAccess.substring(lastDot+1,
1:eac0369: 							  fieldAccess.length());
1:eac0369: 
1:eac0369: 		Throwable t;
1:eac0369: 		try {
2:eac0369: 			Class theClass = Class.forName(className);
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				Field theField = theClass.getField(fieldName);
1:eac0369: 		
1:eac0369: 				if (!Modifier.isStatic(theField.getModifiers())) {
1:eac0369: 					HeaderPrintWriter hpw = useDefaultStream(header);
1:eac0369: 					hpw.printlnWithHeader(theField.toString() + " is not static");
1:eac0369: 					return hpw;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				try {
1:27e2c4b: 					return makeValueHPW(theField, theField.get((Object) null), 
1:24d620a: 						header, fieldAccess, false);
1:eac0369: 				} catch (IllegalAccessException iae) {
1:eac0369: 					t = iae;
1:eac0369: 				} catch (IllegalArgumentException iarge) {
1:eac0369: 					t = iarge;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 			} catch (NoSuchFieldException nsfe) {
1:eac0369: 				t = nsfe;
1:eac0369: 			}
1:eac0369: 		} catch (ClassNotFoundException cnfe) {
1:eac0369: 			t = cnfe;
1:eac0369: 		} catch (SecurityException se) {
1:eac0369: 			t = se;
1:eac0369: 		}
1:eac0369: 		return useDefaultStream(header, t);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			If we decide it is a bad idea to use reflect and need
1:eac0369: 			an alternate implementation, we can hard-wire those
1:eac0369: 			fields that we desire to give configurations access to,
1:eac0369: 			like so:
1:eac0369: 
1:eac0369: 		if ("java.lang.System.out".equals(fieldAccess))
1:eac0369: 		 	os = System.out;
1:eac0369: 		else if ("java.lang.System.err".equals(fieldAccess))
1:eac0369: 		 	os = System.err;
1:eac0369: 		*/
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private HeaderPrintWriter makeValueHPW(Member whereFrom, Object value,
1:24d620a: 		PrintWriterGetHeader header, String name, boolean canClose) {
1:eac0369: 
1:eac0369: 		if (value instanceof OutputStream)
1:24d620a: 			 return new BasicHeaderPrintWriter((OutputStream) value, header, canClose, name);
1:eac0369: 		else if (value instanceof Writer)
1:24d620a: 			 return new BasicHeaderPrintWriter((Writer) value, header, canClose, name);
1:eac0369: 		
1:eac0369: 		HeaderPrintWriter hpw = useDefaultStream(header);
1:eac0369: 
1:eac0369: 		if (value == null)
1:eac0369: 			hpw.printlnWithHeader(whereFrom.toString() + "=null");
1:eac0369: 		else
1:eac0369: 			hpw.printlnWithHeader(whereFrom.toString() + " instanceof " + value.getClass().getName());
1:eac0369: 
1:eac0369: 		return hpw;
1:eac0369: 	}
1:eac0369:  
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Used when no configuration information exists for a stream.
1:eac0369: 	*/
1:eac0369: 	private HeaderPrintWriter createDefaultStream(PrintWriterGetHeader header) {
1:eac0369: 		return makeFileHPW("derby.log", header);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Used when creating a stream creates an error.
1:eac0369: 	*/
1:eac0369: 	private HeaderPrintWriter useDefaultStream(PrintWriterGetHeader header) {
1:eac0369: 
1:27e2c4b: 		return new BasicHeaderPrintWriter(System.err, header, false, "System.err");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private HeaderPrintWriter useDefaultStream(PrintWriterGetHeader header, Throwable t) {
1:dc43cf8: 
1:eac0369: 		HeaderPrintWriter hpw = useDefaultStream(header);
1:eac0369: 
1:dc43cf8:         while (t != null) {
1:dc43cf8:             Throwable causedBy = t.getCause();
1:dc43cf8:             String causedByStr =
1:dc43cf8:                 MessageService.getTextMessage(MessageId.CAUSED_BY);
1:dc43cf8:             hpw.printlnWithHeader(
1:dc43cf8:                 t.toString() + (causedBy != null ? " " + causedByStr : ""));
1:dc43cf8:             t = causedBy;
1:dc43cf8:         }
1:dc43cf8: 
1:eac0369: 		return hpw;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Priv block code, moved out of the old Java2 version.
1:eac0369: 	*/
1:eac0369: 
1:eac0369:     private String PBfileName;
1:eac0369:     private PrintWriterGetHeader PBheader;
1:eac0369: 
1:eac0369: 	private HeaderPrintWriter makeFileHPW(String fileName, PrintWriterGetHeader header)
1:eac0369:     {
1:eac0369:         this.PBfileName = fileName;
1:eac0369:         this.PBheader = header;
1:eac0369:         return (HeaderPrintWriter) java.security.AccessController.doPrivileged(this);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:a15a470:     public final HeaderPrintWriter run()
1:eac0369:     {
1:eac0369:         // SECURITY PERMISSION - OP4, OP5
1:eac0369:         return PBmakeFileHPW(PBfileName, PBheader);
1:eac0369:     }
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
/////////////////////////////////////////////////////////////////////////
1: 			Object monitorEnv = getMonitor().getEnvironment();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1: implements InfoStreams, ModuleControl, java.security.PrivilegedAction<HeaderPrintWriter>
/////////////////////////////////////////////////////////////////////////
1: 			Class<?> theClass = Class.forName(className);
/////////////////////////////////////////////////////////////////////////
1:     public final HeaderPrintWriter run()
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:24d620a
/////////////////////////////////////////////////////////////////////////
1: 		   getSystemProperty(Property.ERRORLOG_STYLE_PROPERTY);
1: 		if (target != null) {
1: 			return makeStyleHPW(target, header);
1: 		}
1: 
1: 		target = PropertyUtil.
/////////////////////////////////////////////////////////////////////////
1: 			return makeMethodHPW(target, header, false);
/////////////////////////////////////////////////////////////////////////
1: 											PrintWriterGetHeader header,
1:                                             boolean canClose) {
/////////////////////////////////////////////////////////////////////////
1: 						new Object[0]), header, methodInvocation, canClose);
/////////////////////////////////////////////////////////////////////////
1: 	private HeaderPrintWriter makeStyleHPW(String style,
1: 											PrintWriterGetHeader header) {
1: 		HeaderPrintWriter res = null;
1: 		if ("rollingFile".equals(style)) {
1: 		String className = "org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream";
1: 			res = makeMethodHPW(className, header, true);
1: 		} else {            
1: 			try {
1: 				IllegalArgumentException ex = new IllegalArgumentException("unknown derby.stream.error.style: " + style);
1:                 throw ex;
1: 			} catch (IllegalArgumentException t) {
1: 				res = useDefaultStream(header, t);
1: 			} catch (Exception t) {
1: 				res = useDefaultStream(header, t);
1: 			}
1: 		}
1: 		return res;
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 						header, fieldAccess, false);
/////////////////////////////////////////////////////////////////////////
1: 		PrintWriterGetHeader header, String name, boolean canClose) {
1: 			 return new BasicHeaderPrintWriter((OutputStream) value, header, canClose, name);
1: 			 return new BasicHeaderPrintWriter((Writer) value, header, canClose, name);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:dc43cf8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.io.FileUtil;
1: import org.apache.derby.shared.common.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:             FileUtil.limitAccessToOwner(streamFile);
/////////////////////////////////////////////////////////////////////////
1: 
1:         while (t != null) {
1:             Throwable causedBy = t.getCause();
1:             String causedByStr =
1:                 MessageService.getTextMessage(MessageId.CAUSED_BY);
1:             hpw.printlnWithHeader(
1:                 t.toString() + (causedBy != null ? " " + causedByStr : ""));
1:             t = causedBy;
1:         }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1: public final class SingleStream
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.stream.SingleStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.stream
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.stream;
1: 
1: import org.apache.derby.iapi.services.stream.InfoStreams;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.monitor.ModuleSupportable;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import java.io.BufferedOutputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.File;
1: import java.io.Writer;
1: 
1: import java.util.Properties;
1: 
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Modifier;
1: import java.lang.reflect.Member;
1: import java.lang.reflect.InvocationTargetException;
1: 
1: /**
1:  *
1:  * The Basic Services provide InfoStreams for reporting
1:  * information. Two streams are provided: trace and error.
1:  * It is configurable where these streams are directed.
1:  * <p>
1:  * Errors will be printed to the error stream in addition
1:  * to being sent to the client.
1:  * <p>
1:  * By default both streams are sent to an error log
1:  * for the system. When creating a message for a stream,
1:  * you can create an initial entry with header information
1:  * and then append to it as many times as desired.
1:  * <p>
1:  * Note: if character encodings are needed, the use of
1:  * java.io.*OutputStream's should be replaced with
1:  * java.io.*Writer's (assuming the Writer interface
1:  * remains stable in JDK1.1)
1:  *
0:  * @author ames
1:  */
0: public class SingleStream
0: implements InfoStreams, ModuleControl, java.security.PrivilegedAction
1: {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/*
1: 	** Instance fields
1: 	*/
1: 	private HeaderPrintWriter theStream;
1: 
1: 
1: 	/**
1: 		  The no-arg public constructor for ModuleControl's use.
1: 	 */
1: 	public SingleStream() {
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1: 	 */
1: 	public void boot(boolean create, Properties properties) {
1: 		theStream = makeStream();
1: 	}
1: 
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#stop
1: 	 */
1: 	public void stop()	{
1: 		((BasicHeaderPrintWriter) theStream).complete();
1: 	}
1: 
1: 	/*
1: 	 * InfoStreams interface
1: 	 */
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.stream.InfoStreams#stream
1: 	 */
1: 	public HeaderPrintWriter stream() {
1: 		return theStream;
1: 	}
1: 
1: 	//
1: 	// class interface
1: 	//
1: 
1: 	/**
1: 		Make the stream; note that service properties override
1: 		application and system properties.
1: 
1: 	 */
1: 	private HeaderPrintWriter makeStream() {
1: 
0: 		StringBuffer propName = new StringBuffer("derby.stream.error.");
1: 
0: 		int prefixLength = propName.length();
1: 
1: 		// get the header
1: 		PrintWriterGetHeader header = makeHeader();
1: 
0: 		// get the stream
0: 		propName.setLength(prefixLength);
1: 		
0: 		HeaderPrintWriter hpw = makeHPW(propName, header);
1: 
1: 		// If hpw == null then no properties were specified for the stream
1: 		// so use/create the default stream.
1: 		if (hpw == null)
1: 			hpw = createDefaultStream(header);
1: 		return hpw;
1: 	}
1: 
1: 	/**
1: 		Return a new header object.
1: 	*/
1: 	private PrintWriterGetHeader makeHeader() {
1: 
1: 		return new BasicGetLogHeader(true, true, (String) null);
1: 	}
1: 
1: 	/**
1: 		create a HeaderPrintWriter based on the header.
1: 		Will still need to determine the target type.
1: 	 */
0: 	private HeaderPrintWriter makeHPW(StringBuffer propPrefix,
1: 		PrintWriterGetHeader header) {
1: 
1: 		// the type of target is based on which property is used
1: 		// to set it. choices are file, method, field, stream
1: 
0: 		int prefixLength = propPrefix.length();
1: 
0: 		// looking for derby.stream.<name>.file=<path to file>
0: 		propPrefix.append("file");
0: 		String target = PropertyUtil.getSystemProperty(propPrefix.toString());
1: 		if (target!=null)
1: 			return makeFileHPW(target, header);
1: 
0: 		// looking for derby.stream.<name>.method=<className>.<methodName>
0: 		propPrefix.setLength(prefixLength);
0: 		propPrefix.append("method");
0: 		target = PropertyUtil.getSystemProperty(propPrefix.toString());
1: 		if (target!=null) 
0: 			return makeMethodHPW(target, header);
1: 
0: 		// looking for derby.stream.<name>.field=<className>.<fieldName>
0: 		propPrefix.setLength(prefixLength);
0: 		propPrefix.append("field");
0: 		target = PropertyUtil.getSystemProperty(propPrefix.toString());
1: 		if (target!=null) 
1: 			return makeFieldHPW(target, header);
1: 
1: 		return null;
1: 	}
1: 
1: 	/**
1: 		Make a header print writer out of a file name. If it is a relative
1: 		path name then it is taken as relative to derby.system.home if that is set,
1: 		otherwise relative to the current directory. If the path name is absolute
1: 		then it is taken as absolute.
1: 	*/
1: 	private HeaderPrintWriter PBmakeFileHPW(String fileName,
1: 											PrintWriterGetHeader header) {
1: 
1: 		boolean appendInfoLog = PropertyUtil.getSystemBoolean(Property.LOG_FILE_APPEND);
1: 
1: 		File streamFile = new File(fileName);
1: 
1: 		// See if this needs to be made relative to something ...
1: 		if (!streamFile.isAbsolute()) {
0: 			Object monitorEnv = Monitor.getMonitor().getEnvironment();
1: 			if (monitorEnv instanceof File)
1: 				streamFile = new File((File) monitorEnv, fileName);
1: 		}
1: 
1: 		FileOutputStream	fos;
1: 
1: 		try {
1: 
1: 			if (streamFile.exists() && appendInfoLog)
1: 				fos = new FileOutputStream(streamFile.getPath(), true);
1: 			else
1: 				fos = new FileOutputStream(streamFile);
1: 		} catch (IOException ioe) {
1: 			return useDefaultStream(header, ioe);
1: 		} catch (SecurityException se) {
1: 			return useDefaultStream(header, se);
1: 		}
1: 
0: 		return new BasicHeaderPrintWriter(new BufferedOutputStream(fos), header, true);
1: 	}
1: 
1: 	private HeaderPrintWriter makeMethodHPW(String methodInvocation,
1: 											PrintWriterGetHeader header) {
1: 
1: 		int lastDot = methodInvocation.lastIndexOf('.');
1: 		String className = methodInvocation.substring(0, lastDot);
1: 		String methodName = methodInvocation.substring(lastDot+1);
1: 
1: 		Throwable t;
1: 		try {
1: 			Class theClass = Class.forName(className);
1: 
1: 			try {
1: 				Method theMethod = theClass.getMethod(methodName,  new Class[0]);
1: 
1: 				if (!Modifier.isStatic(theMethod.getModifiers())) {
1: 					HeaderPrintWriter hpw = useDefaultStream(header);
1: 					hpw.printlnWithHeader(theMethod.toString() + " is not static");
1: 					return hpw;
1: 				}
1: 
1: 				try {
0: 					return makeValueHPW(theMethod, theMethod.invoke((Object) null, new Object[0]), header);
1: 				} catch (IllegalAccessException iae) {
1: 					t = iae;
1: 				} catch (IllegalArgumentException iarge) {
1: 					t = iarge;
1: 				} catch (InvocationTargetException ite) {
1: 					t = ite.getTargetException();
1: 				}
1: 
1: 			} catch (NoSuchMethodException nsme) {
1: 				t = nsme;
1: 			}
1: 		} catch (ClassNotFoundException cnfe) {
1: 			t = cnfe;
1: 		} catch (SecurityException se) {
1: 			t = se;
1: 			
1: 		}
1: 		return useDefaultStream(header, t);
1: 
1: 	}
1: 
1: 
1: 	private HeaderPrintWriter makeFieldHPW(String fieldAccess,
1: 											PrintWriterGetHeader header) {
1: 
1: 		int lastDot = fieldAccess.lastIndexOf('.');
1: 		String className = fieldAccess.substring(0, lastDot);
1: 		String fieldName = fieldAccess.substring(lastDot+1,
1: 							  fieldAccess.length());
1: 
1: 		Throwable t;
1: 		try {
1: 			Class theClass = Class.forName(className);
1: 
1: 			try {
1: 				Field theField = theClass.getField(fieldName);
1: 		
1: 				if (!Modifier.isStatic(theField.getModifiers())) {
1: 					HeaderPrintWriter hpw = useDefaultStream(header);
1: 					hpw.printlnWithHeader(theField.toString() + " is not static");
1: 					return hpw;
1: 				}
1: 
1: 				try {
0: 					return makeValueHPW(theField, theField.get((Object) null), header);
1: 				} catch (IllegalAccessException iae) {
1: 					t = iae;
1: 				} catch (IllegalArgumentException iarge) {
1: 					t = iarge;
1: 				}
1: 
1: 			} catch (NoSuchFieldException nsfe) {
1: 				t = nsfe;
1: 			}
1: 		} catch (ClassNotFoundException cnfe) {
1: 			t = cnfe;
1: 		} catch (SecurityException se) {
1: 			t = se;
1: 		}
1: 		return useDefaultStream(header, t);
1: 
1: 		/*
1: 			If we decide it is a bad idea to use reflect and need
1: 			an alternate implementation, we can hard-wire those
1: 			fields that we desire to give configurations access to,
1: 			like so:
1: 
1: 		if ("java.lang.System.out".equals(fieldAccess))
1: 		 	os = System.out;
1: 		else if ("java.lang.System.err".equals(fieldAccess))
1: 		 	os = System.err;
1: 		*/
1: 	}
1: 
1: 	private HeaderPrintWriter makeValueHPW(Member whereFrom, Object value,
1: 		PrintWriterGetHeader header) {
1: 
1: 		if (value instanceof OutputStream)
0: 			 return new BasicHeaderPrintWriter((OutputStream) value, header, false);
1: 		else if (value instanceof Writer)
0: 			 return new BasicHeaderPrintWriter((Writer) value, header, false);
1: 		
1: 		HeaderPrintWriter hpw = useDefaultStream(header);
1: 
1: 		if (value == null)
1: 			hpw.printlnWithHeader(whereFrom.toString() + "=null");
1: 		else
1: 			hpw.printlnWithHeader(whereFrom.toString() + " instanceof " + value.getClass().getName());
1: 
1: 		return hpw;
1: 	}
1:  
1: 
1: 	/**
1: 		Used when no configuration information exists for a stream.
1: 	*/
1: 	private HeaderPrintWriter createDefaultStream(PrintWriterGetHeader header) {
1: 		return makeFileHPW("derby.log", header);
1: 	}
1: 
1: 	/**
1: 		Used when creating a stream creates an error.
1: 	*/
1: 	private HeaderPrintWriter useDefaultStream(PrintWriterGetHeader header) {
1: 
0: 		return new BasicHeaderPrintWriter(System.err, header, false);
1: 	}
1: 
1: 	private HeaderPrintWriter useDefaultStream(PrintWriterGetHeader header, Throwable t) {
1: 
1: 		HeaderPrintWriter hpw = useDefaultStream(header);
0: 		hpw.printlnWithHeader(t.toString());
1: 		return hpw;
1: 	}
1: 
1: 	/*
1: 	** Priv block code, moved out of the old Java2 version.
1: 	*/
1: 
1:     private String PBfileName;
1:     private PrintWriterGetHeader PBheader;
1: 
1: 	private HeaderPrintWriter makeFileHPW(String fileName, PrintWriterGetHeader header)
1:     {
1:         this.PBfileName = fileName;
1:         this.PBheader = header;
1:         return (HeaderPrintWriter) java.security.AccessController.doPrivileged(this);
1:     }
1: 
1: 
0:     public final Object run()
1:     {
1:         // SECURITY PERMISSION - OP4, OP5
1:         return PBmakeFileHPW(PBfileName, PBheader);
1:     }
1: }
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:27e2c4b
/////////////////////////////////////////////////////////////////////////
1: 		HeaderPrintWriter hpw = makeHPW(header);
/////////////////////////////////////////////////////////////////////////
1: 	private HeaderPrintWriter makeHPW(PrintWriterGetHeader header) {
1: 		String target = PropertyUtil.
1:                    getSystemProperty(Property.ERRORLOG_FILE_PROPERTY);
1: 		target = PropertyUtil.
1:                    getSystemProperty(Property.ERRORLOG_METHOD_PROPERTY);
1: 		target = PropertyUtil.
1:                    getSystemProperty(Property.ERRORLOG_FIELD_PROPERTY);
/////////////////////////////////////////////////////////////////////////
1: 		return new BasicHeaderPrintWriter(new BufferedOutputStream(fos), header,
1: 			true, streamFile.getPath());
/////////////////////////////////////////////////////////////////////////
1: 					return makeValueHPW(theMethod, theMethod.invoke((Object) null, 
0: 						new Object[0]), header, methodInvocation);
/////////////////////////////////////////////////////////////////////////
1: 					return makeValueHPW(theField, theField.get((Object) null), 
0: 						header, fieldAccess);
/////////////////////////////////////////////////////////////////////////
0: 		PrintWriterGetHeader header, String name) {
0: 			 return new BasicHeaderPrintWriter((OutputStream) value, header, false, name);
0: 			 return new BasicHeaderPrintWriter((Writer) value, header, false, name);
/////////////////////////////////////////////////////////////////////////
1: 		return new BasicHeaderPrintWriter(System.err, header, false, "System.err");
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.stream
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.stream;
0: 
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.monitor.ModuleSupportable;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import java.io.BufferedOutputStream;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.OutputStream;
0: import java.io.File;
0: import java.io.Writer;
0: 
0: import java.util.Properties;
0: 
0: import java.lang.reflect.Method;
0: import java.lang.reflect.Field;
0: import java.lang.reflect.Modifier;
0: import java.lang.reflect.Member;
0: import java.lang.reflect.InvocationTargetException;
0: 
0: /**
0:  *
0:  * The Basic Services provide InfoStreams for reporting
0:  * information. Two streams are provided: trace and error.
0:  * It is configurable where these streams are directed.
0:  * <p>
0:  * Errors will be printed to the error stream in addition
0:  * to being sent to the client.
0:  * <p>
0:  * By default both streams are sent to an error log
0:  * for the system. When creating a message for a stream,
0:  * you can create an initial entry with header information
0:  * and then append to it as many times as desired.
0:  * <p>
0:  * Note: if character encodings are needed, the use of
0:  * java.io.*OutputStream's should be replaced with
0:  * java.io.*Writer's (assuming the Writer interface
0:  * remains stable in JDK1.1)
0:  *
0:  * @author ames
0:  */
0: public class SingleStream
0: implements InfoStreams, ModuleControl, java.security.PrivilegedAction
0: {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/*
0: 	** Instance fields
0: 	*/
0: 	private HeaderPrintWriter theStream;
0: 
0: 
0: 	/**
0: 		  The no-arg public constructor for ModuleControl's use.
0: 	 */
0: 	public SingleStream() {
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
0: 	 */
0: 	public void boot(boolean create, Properties properties) {
0: 		theStream = makeStream();
0: 	}
0: 
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#stop
0: 	 */
0: 	public void stop()	{
0: 		((BasicHeaderPrintWriter) theStream).complete();
0: 	}
0: 
0: 	/*
0: 	 * InfoStreams interface
0: 	 */
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.stream.InfoStreams#stream
0: 	 */
0: 	public HeaderPrintWriter stream() {
0: 		return theStream;
0: 	}
0: 
0: 	//
0: 	// class interface
0: 	//
0: 
0: 	/**
0: 		Make the stream; note that service properties override
0: 		application and system properties.
0: 
0: 	 */
0: 	private HeaderPrintWriter makeStream() {
0: 
0: 		StringBuffer propName = new StringBuffer("derby.stream.error.");
0: 
0: 		int prefixLength = propName.length();
0: 
0: 		// get the header
0: 		PrintWriterGetHeader header = makeHeader();
0: 
0: 		// get the stream
0: 		propName.setLength(prefixLength);
0: 		
0: 		HeaderPrintWriter hpw = makeHPW(propName, header);
0: 
0: 		// If hpw == null then no properties were specified for the stream
0: 		// so use/create the default stream.
0: 		if (hpw == null)
0: 			hpw = createDefaultStream(header);
0: 		return hpw;
0: 	}
0: 
0: 	/**
0: 		Return a new header object.
0: 	*/
0: 	private PrintWriterGetHeader makeHeader() {
0: 
0: 		return new BasicGetLogHeader(true, true, (String) null);
0: 	}
0: 
0: 	/**
0: 		create a HeaderPrintWriter based on the header.
0: 		Will still need to determine the target type.
0: 	 */
0: 	private HeaderPrintWriter makeHPW(StringBuffer propPrefix,
0: 		PrintWriterGetHeader header) {
0: 
0: 		// the type of target is based on which property is used
0: 		// to set it. choices are file, method, field, stream
0: 
0: 		int prefixLength = propPrefix.length();
0: 
0: 		// looking for derby.stream.<name>.file=<path to file>
0: 		propPrefix.append("file");
0: 		String target = PropertyUtil.getSystemProperty(propPrefix.toString());
0: 		if (target!=null)
0: 			return makeFileHPW(target, header);
0: 
0: 		// looking for derby.stream.<name>.method=<className>.<methodName>
0: 		propPrefix.setLength(prefixLength);
0: 		propPrefix.append("method");
0: 		target = PropertyUtil.getSystemProperty(propPrefix.toString());
0: 		if (target!=null) 
0: 			return makeMethodHPW(target, header);
0: 
0: 		// looking for derby.stream.<name>.field=<className>.<fieldName>
0: 		propPrefix.setLength(prefixLength);
0: 		propPrefix.append("field");
0: 		target = PropertyUtil.getSystemProperty(propPrefix.toString());
0: 		if (target!=null) 
0: 			return makeFieldHPW(target, header);
0: 
0: 		return null;
0: 	}
0: 
0: 	/**
0: 		Make a header print writer out of a file name. If it is a relative
0: 		path name then it is taken as relative to derby.system.home if that is set,
0: 		otherwise relative to the current directory. If the path name is absolute
0: 		then it is taken as absolute.
0: 	*/
0: 	private HeaderPrintWriter PBmakeFileHPW(String fileName,
0: 											PrintWriterGetHeader header) {
0: 
0: 		boolean appendInfoLog = PropertyUtil.getSystemBoolean(Property.LOG_FILE_APPEND);
0: 
0: 		File streamFile = new File(fileName);
0: 
0: 		// See if this needs to be made relative to something ...
0: 		if (!streamFile.isAbsolute()) {
0: 			Object monitorEnv = Monitor.getMonitor().getEnvironment();
0: 			if (monitorEnv instanceof File)
0: 				streamFile = new File((File) monitorEnv, fileName);
0: 		}
0: 
0: 		FileOutputStream	fos;
0: 
0: 		try {
0: 
0: 			if (streamFile.exists() && appendInfoLog)
0: 				fos = new FileOutputStream(streamFile.getPath(), true);
0: 			else
0: 				fos = new FileOutputStream(streamFile);
0: 		} catch (IOException ioe) {
0: 			return useDefaultStream(header, ioe);
0: 		} catch (SecurityException se) {
0: 			return useDefaultStream(header, se);
0: 		}
0: 
0: 		return new BasicHeaderPrintWriter(new BufferedOutputStream(fos), header, true);
0: 	}
0: 
0: 	private HeaderPrintWriter makeMethodHPW(String methodInvocation,
0: 											PrintWriterGetHeader header) {
0: 
0: 		int lastDot = methodInvocation.lastIndexOf('.');
0: 		String className = methodInvocation.substring(0, lastDot);
0: 		String methodName = methodInvocation.substring(lastDot+1);
0: 
0: 		Throwable t;
0: 		try {
0: 			Class theClass = Class.forName(className);
0: 
0: 			try {
0: 				Method theMethod = theClass.getMethod(methodName,  new Class[0]);
0: 
0: 				if (!Modifier.isStatic(theMethod.getModifiers())) {
0: 					HeaderPrintWriter hpw = useDefaultStream(header);
0: 					hpw.printlnWithHeader(theMethod.toString() + " is not static");
0: 					return hpw;
0: 				}
0: 
0: 				try {
0: 					return makeValueHPW(theMethod, theMethod.invoke((Object) null, new Object[0]), header);
0: 				} catch (IllegalAccessException iae) {
0: 					t = iae;
0: 				} catch (IllegalArgumentException iarge) {
0: 					t = iarge;
0: 				} catch (InvocationTargetException ite) {
0: 					t = ite.getTargetException();
0: 				}
0: 
0: 			} catch (NoSuchMethodException nsme) {
0: 				t = nsme;
0: 			}
0: 		} catch (ClassNotFoundException cnfe) {
0: 			t = cnfe;
0: 		} catch (SecurityException se) {
0: 			t = se;
0: 			
0: 		}
0: 		return useDefaultStream(header, t);
0: 
0: 	}
0: 
0: 
0: 	private HeaderPrintWriter makeFieldHPW(String fieldAccess,
0: 											PrintWriterGetHeader header) {
0: 
0: 		int lastDot = fieldAccess.lastIndexOf('.');
0: 		String className = fieldAccess.substring(0, lastDot);
0: 		String fieldName = fieldAccess.substring(lastDot+1,
0: 							  fieldAccess.length());
0: 
0: 		Throwable t;
0: 		try {
0: 			Class theClass = Class.forName(className);
0: 
0: 			try {
0: 				Field theField = theClass.getField(fieldName);
0: 		
0: 				if (!Modifier.isStatic(theField.getModifiers())) {
0: 					HeaderPrintWriter hpw = useDefaultStream(header);
0: 					hpw.printlnWithHeader(theField.toString() + " is not static");
0: 					return hpw;
0: 				}
0: 
0: 				try {
0: 					return makeValueHPW(theField, theField.get((Object) null), header);
0: 				} catch (IllegalAccessException iae) {
0: 					t = iae;
0: 				} catch (IllegalArgumentException iarge) {
0: 					t = iarge;
0: 				}
0: 
0: 			} catch (NoSuchFieldException nsfe) {
0: 				t = nsfe;
0: 			}
0: 		} catch (ClassNotFoundException cnfe) {
0: 			t = cnfe;
0: 		} catch (SecurityException se) {
0: 			t = se;
0: 		}
0: 		return useDefaultStream(header, t);
0: 
0: 		/*
0: 			If we decide it is a bad idea to use reflect and need
0: 			an alternate implementation, we can hard-wire those
0: 			fields that we desire to give configurations access to,
0: 			like so:
0: 
0: 		if ("java.lang.System.out".equals(fieldAccess))
0: 		 	os = System.out;
0: 		else if ("java.lang.System.err".equals(fieldAccess))
0: 		 	os = System.err;
0: 		*/
0: 	}
0: 
0: 	private HeaderPrintWriter makeValueHPW(Member whereFrom, Object value,
0: 		PrintWriterGetHeader header) {
0: 
0: 		if (value instanceof OutputStream)
0: 			 return new BasicHeaderPrintWriter((OutputStream) value, header, false);
0: 		else if (value instanceof Writer)
0: 			 return new BasicHeaderPrintWriter((Writer) value, header, false);
0: 		
0: 		HeaderPrintWriter hpw = useDefaultStream(header);
0: 
0: 		if (value == null)
0: 			hpw.printlnWithHeader(whereFrom.toString() + "=null");
0: 		else
0: 			hpw.printlnWithHeader(whereFrom.toString() + " instanceof " + value.getClass().getName());
0: 
0: 		return hpw;
0: 	}
0:  
0: 
0: 	/**
0: 		Used when no configuration information exists for a stream.
0: 	*/
0: 	private HeaderPrintWriter createDefaultStream(PrintWriterGetHeader header) {
0: 		return makeFileHPW("derby.log", header);
0: 	}
0: 
0: 	/**
0: 		Used when creating a stream creates an error.
0: 	*/
0: 	private HeaderPrintWriter useDefaultStream(PrintWriterGetHeader header) {
0: 
0: 		return new BasicHeaderPrintWriter(System.err, header, false);
0: 	}
0: 
0: 	private HeaderPrintWriter useDefaultStream(PrintWriterGetHeader header, Throwable t) {
0: 
0: 		HeaderPrintWriter hpw = useDefaultStream(header);
0: 		hpw.printlnWithHeader(t.toString());
0: 		return hpw;
0: 	}
0: 
0: 	/*
0: 	** Priv block code, moved out of the old Java2 version.
0: 	*/
0: 
0:     private String PBfileName;
0:     private PrintWriterGetHeader PBheader;
0: 
0: 	private HeaderPrintWriter makeFileHPW(String fileName, PrintWriterGetHeader header)
0:     {
0:         this.PBfileName = fileName;
0:         this.PBheader = header;
0:         return (HeaderPrintWriter) java.security.AccessController.doPrivileged(this);
0:     }
0: 
0: 
0:     public final Object run()
0:     {
0:         // SECURITY PERMISSION - OP4, OP5
0:         return PBmakeFileHPW(PBfileName, PBheader);
0:     }
0: }
0: 
============================================================================