1:33776ff: /*
13:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.XaException
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:69e3d06: import javax.transaction.xa.XAException;
1:69e3d06: 
1:33776ff: 
1:69e3d06: public class XaException extends XAException implements Diagnosable {
1:33776ff: 
1:70f7692:     //-----------------constructors-----------------------------------------------
1:33776ff: 
1:69e3d06:     public XaException(LogWriter logWriter, Throwable throwable, String s) {
2:70f7692:         super(s);
1:55d4cdf:         initCause(throwable);
6:70f7692:         if (logWriter != null) {
6:70f7692:             logWriter.traceDiagnosable(this);
13:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     public Sqlca getSqlca() {
1:70f7692:         return null;
1:70f7692:     }
1:70f7692: }
1:70f7692: 
1:70f7692: 
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
0: import java.io.PrintWriter;
1: import javax.transaction.xa.XAException;
1: 
1: public class XaException extends XAException implements Diagnosable {
/////////////////////////////////////////////////////////////////////////
0:     public XaException(LogWriter logWriter, Throwable throwable) {
/////////////////////////////////////////////////////////////////////////
0:     public XaException(LogWriter logWriter, Throwable throwable, int errcode) {
/////////////////////////////////////////////////////////////////////////
1:     public XaException(LogWriter logWriter, Throwable throwable, String s) {
/////////////////////////////////////////////////////////////////////////
0:     public void printTrace(PrintWriter printWriter, String header) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:55d4cdf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         initCause(throwable);
/////////////////////////////////////////////////////////////////////////
0:         initCause(throwable);
/////////////////////////////////////////////////////////////////////////
0:         initCause(throwable);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         XaException xae = new XaException(logWriter, getCause(), getMessage());
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class XaException extends javax.transaction.xa.XAException implements Diagnosable {
0:     java.lang.Throwable throwable_ = null;
1:     //-----------------constructors-----------------------------------------------
0:     public XaException(LogWriter logWriter) {
0:         super();
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable(this);
1:         }
0:     public XaException(LogWriter logWriter, java.lang.Throwable throwable) {
0:         super();
0:         throwable_ = throwable;
0:         if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
0:                 (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
0:                 (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause
0:             initCause(throwable);
1:         }
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable(this);
1:         }
0:     public XaException(LogWriter logWriter, int errcode) {
0:         super();
0:         errorCode = errcode;
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable(this);
1:         }
0:     public XaException(LogWriter logWriter, java.lang.Throwable throwable, int errcode) {
0:         super();
0:         errorCode = errcode;
0:         throwable_ = throwable;
0:         if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
0:                 (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
0:                 (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause
0:             initCause(throwable);
1:         }
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable(this);
1:         }
1:     }
0:     public XaException(LogWriter logWriter, String s) {
1:         super(s);
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable(this);
1:         }
1:     }
0:     public XaException(LogWriter logWriter, java.lang.Throwable throwable, String s) {
1:         super(s);
0:         throwable_ = throwable;
0:         if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
0:                 (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
0:                 (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause
0:             initCause(throwable);
1:         }
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable(this);
1:         }
1:     }
1:     public Sqlca getSqlca() {
1:         return null;
1:     }
1: 
0:     public java.lang.Throwable getThrowable() {
0:         return throwable_;
1:     }
1: 
0:     public void printTrace(java.io.PrintWriter printWriter, String header) {
0:         ExceptionFormatter.printTrace(this, printWriter, header);
1:     }
1: 
0:     // Return a single XaException without the "next" pointing to another SQLException.
0:     // Because the "next" is a private field in java.sql.SQLException,
0:     // we have to create a new XaException in order to break the chain with "next" as null.
0:     XaException copyAsUnchainedXAException(LogWriter logWriter) {
0:         XaException xae = new XaException(logWriter, this.getThrowable(), getMessage()); // client error
0:         xae.errorCode = this.errorCode;
0:         return xae;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.XaException
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
1: 
0: public class XaException extends javax.transaction.xa.XAException implements Diagnosable
0: {
0:   java.lang.Throwable throwable_ = null;
1: 
0:   //-----------------constructors-----------------------------------------------
1: 
0:   public XaException (LogWriter logWriter)
0:   {
0:     super ();
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public XaException (LogWriter logWriter, java.lang.Throwable throwable)
0:   {
0:     super ();
0:     throwable_ = throwable;
0:     if( ((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
0:          (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
0:         (org.apache.derby.client.am.Configuration.jreLevelMajor > 1) )
0:     { // jre 1.4 or above, init the cause
0:       initCause( throwable );
0:     }
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public XaException (LogWriter logWriter, int errcode)
0:   {
0:     super ();
0:     errorCode = errcode;
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public XaException (LogWriter logWriter, java.lang.Throwable throwable, int errcode)
0:   {
0:     super ();
0:     errorCode = errcode;
0:     throwable_ = throwable;
0:     if( ((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
0:          (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
0:         (org.apache.derby.client.am.Configuration.jreLevelMajor > 1) )
0:     { // jre 1.4 or above, init the cause
0:       initCause( throwable );
0:     }
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public XaException (LogWriter logWriter, String s)
0:   {
0:     super (s);
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public XaException (LogWriter logWriter, java.lang.Throwable throwable, String s)
0:   {
0:     super (s);
0:     throwable_ = throwable;
0:     if( ((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
0:          (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
0:         (org.apache.derby.client.am.Configuration.jreLevelMajor > 1) )
0:     { // jre 1.4 or above, init the cause
0:       initCause( throwable );
0:     }
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public Sqlca getSqlca ()
0:   {
0:     return null;
0:   }
1: 
0:   public java.lang.Throwable getThrowable ()
0:   {
0:     return throwable_;
0:   }
1: 
0:   public void printTrace (java.io.PrintWriter printWriter, String header)
0:   {
0:     ExceptionFormatter.printTrace (this, printWriter, header);
0:   }
1: 
0:   // Return a single XaException without the "next" pointing to another SQLException.
0:   // Because the "next" is a private field in java.sql.SQLException,
0:   // we have to create a new XaException in order to break the chain with "next" as null.
0:   XaException copyAsUnchainedXAException (LogWriter logWriter)
0:   {
0:     XaException xae = new XaException (logWriter, this.getThrowable(), getMessage()); // client error
0:     xae.errorCode = this.errorCode;
0:     return xae;
0:   }
0: }
1: 
1: 
1: 
============================================================================