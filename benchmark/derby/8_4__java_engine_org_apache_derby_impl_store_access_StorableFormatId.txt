1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.StorableFormatId
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:fa09146: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.ClassSize;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataType;
1:fa09146: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: public class StorableFormatId extends DataType 
3:eac0369: {
1:eac0369: 
1:eac0369:     private int    format_id;
1:eac0369: 
1:eac0369:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( StorableFormatId.class);
1:eac0369: 
1:eac0369:     public int estimateMemoryUsage()
1:eac0369:     {
1:eac0369:         return BASE_MEMORY_USAGE;
3:eac0369:     }
1:eac0369: 
1:eac0369:     /* Constructors: */
1:eac0369: 
1:eac0369:     public StorableFormatId()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     public StorableFormatId(int value)
1:eac0369:     {
1:eac0369:         this.format_id = value;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Private methods */
1:eac0369: 
1:eac0369:     public int getValue()
1:eac0369:     {
1:eac0369:         // RESOLVE (mikem) just temporary; value could be null
1:eac0369:         return format_id;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public void setValue(int input_value)
1:eac0369:     {
1:eac0369:         this.format_id = input_value;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Storable interface, implies Externalizable, TypedFormat
1:eac0369: 	 */
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId()
1:eac0369:     {
1:eac0369: 		return StoredFormatIds.ACCESS_FORMAT_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public boolean isNull()
1:eac0369:     {
1:eac0369:         return false;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369:     {
1:eac0369:        FormatIdUtil.writeFormatIdInteger(out, format_id);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/** @see java.io.Externalizable#readExternal */
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException
1:eac0369:     {
2:eac0369:         format_id = FormatIdUtil.readFormatIdInteger(in);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public void restoreToNull()
1:eac0369:     {
1:eac0369:         format_id = 0;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods implementing DataValueDescriptor interface.
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the length of the data value.  The meaning of this is
1:eac0369: 	 * implementation-dependent.  For string types, it is the number of
1:eac0369: 	 * characters in the string.  For numeric types, it is the number of
1:eac0369: 	 * bytes used to store the number.  This is the actual length
1:eac0369: 	 * of this value, not the length of the type it was defined as.
1:eac0369: 	 * For example, a VARCHAR value may be shorter than the declared
1:eac0369: 	 * VARCHAR (maximum) length.
9:eac0369: 	 *
1:eac0369: 	 * @return	The length of the data value
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException   On error
1:eac0369:      * 
1:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getLength
1:eac0369: 	 */
1:eac0369: 	public int	getLength() 
2:eac0369:         throws StandardException
1:eac0369:     {
2:eac0369:         throw(StandardException.newException(
2:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:eac0369:     }
1:eac0369: 	/**
1:eac0369: 	 * Gets the value in the data value descriptor as a String.
1:eac0369: 	 * Throws an exception if the data value is not a string.
1:eac0369: 	 *
1:eac0369: 	 * @return	The data value as a String.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException   Thrown on error
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getString
1:eac0369: 	 */
1:eac0369: 	public String	getString() throws StandardException
1:eac0369:     {
1:eac0369:         throw(StandardException.newException(
1:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the value in the data value descriptor as a Java Object.
1:eac0369: 	 * The type of the Object will be the Java object type corresponding
1:eac0369: 	 * to the data value's SQL type. JDBC defines a mapping between Java
1:eac0369: 	 * object types and SQL types - we will allow that to be extended
1:eac0369: 	 * through user type definitions. Throws an exception if the data
1:eac0369: 	 * value is not an object (yeah, right).
1:eac0369: 	 *
1:eac0369: 	 * @return	The data value as an Object.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException   Thrown on error
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getObject
1:eac0369: 	 */
1:eac0369: 	public Object	getObject() throws StandardException
1:eac0369:     {
1:eac0369:         return(this);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:854dd10:      * @see org.apache.derby.iapi.types.DataValueDescriptor#cloneValue
1:eac0369: 	 */
1:854dd10:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("Not implemented!.");
1:eac0369: 
1:eac0369:         return(null);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a new null value of the same type as this data value.
1:eac0369: 	 *
1:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getNewNull
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("Not implemented!.");
1:eac0369: 
1:eac0369:         return(null);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the value based on the value for the specified DataValueDescriptor
1:eac0369: 	 * from the specified ResultSet.
1:eac0369: 	 *
1:eac0369: 	 * @param resultSet		The specified ResultSet.
1:eac0369: 	 * @param colNumber		The 1-based column # into the resultSet.
1:eac0369: 	 * @param isNullable	Whether or not the column is nullable
1:eac0369: 	 *						(No need to call wasNull() if not)
1:eac0369: 	 * 
2:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 * @exception SQLException		Error accessing the result set
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValueFromResultSet
1:eac0369: 	 */
1:eac0369: 	public void setValueFromResultSet(
1:eac0369:     ResultSet   resultSet, 
1:eac0369:     int         colNumber,
1:eac0369:     boolean     isNullable)
1:eac0369: 		throws StandardException, SQLException
1:eac0369:     {
1:eac0369:         throw(StandardException.newException(
1:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the value of this DataValueDescriptor from another.
1:eac0369: 	 *
1:eac0369: 	 * @param theValue	The Date value to set this DataValueDescriptor to
1:eac0369: 	 *
2:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValue
1:eac0369: 	 */
1:eac0369: 	protected void setFrom(DataValueDescriptor theValue) 
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         throw(StandardException.newException(
1:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the SQL name of the datatype
1:eac0369: 	 *
1:eac0369: 	 * @return	The SQL name of the datatype
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getTypeName
1:eac0369: 	 */
1:eac0369: 	public String	getTypeName()
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("Not implemented!.");
1:eac0369: 
1:eac0369:         return(null);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Compare this Orderable with a given Orderable for the purpose of
1:eac0369: 	 * index positioning.  This method treats nulls as ordered values -
1:eac0369: 	 * that is, it treats SQL null as equal to null and less than all
1:eac0369: 	 * other values.
1:eac0369: 	 *
1:eac0369: 	 * @param other		The Orderable to compare this one to.
1:eac0369: 	 *
1:dbed020: 	 * @return  &lt;0 - this Orderable is less than other.
1:eac0369: 	 * 			 0 - this Orderable equals other.
1:dbed020: 	 *			&gt;0 - this Orderable is greater than other.
1:eac0369:      *
1:eac0369:      *			The code should not explicitly look for -1, or 1.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369:      *
1:eac0369:      * @see DataValueDescriptor#compare
1:eac0369: 	 */
1:eac0369: 	public int compare(DataValueDescriptor other) 
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         throw(StandardException.newException(
1:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 * @return  &lt;0 - this Orderable is less than other.
1: 	 *			&gt;0 - this Orderable is greater than other.
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4ecfb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#cloneValue
1:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
commit:fa09146
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:806114c
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.StorableFormatId
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.Orderable;
1: 
1: import org.apache.derby.iapi.services.cache.ClassSize;
1: 
1: import org.apache.derby.iapi.types.DataType;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: public class StorableFormatId extends DataType 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     private int    format_id;
1: 
1:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( StorableFormatId.class);
1: 
1:     public int estimateMemoryUsage()
1:     {
1:         return BASE_MEMORY_USAGE;
1:     }
1: 
1:     /* Constructors: */
1: 
1:     public StorableFormatId()
1:     {
1:     }
1: 
1:     public StorableFormatId(int value)
1:     {
1:         this.format_id = value;
1:     }
1: 
1:     /* Private methods */
1: 
1:     public int getValue()
1:     {
1:         // RESOLVE (mikem) just temporary; value could be null
1:         return format_id;
1:     }
1: 
1:     public void setValue(int input_value)
1:     {
1:         this.format_id = input_value;
1:     }
1: 
1: 	/*
1: 	 * Storable interface, implies Externalizable, TypedFormat
1: 	 */
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId()
1:     {
1: 		return StoredFormatIds.ACCESS_FORMAT_ID;
1: 	}
1: 
1:     public boolean isNull()
1:     {
1:         return false;
1:     }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException
1:     {
1:        FormatIdUtil.writeFormatIdInteger(out, format_id);
1:     }
1: 
1: 	/** @see java.io.Externalizable#readExternal */
1: 	public void readExternal(ObjectInput in) throws IOException
1:     {
1:         format_id = FormatIdUtil.readFormatIdInteger(in);
1:     }
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException
1:     {
1:         format_id = FormatIdUtil.readFormatIdInteger(in);
1:     }
1: 
1: 
1:     public void restoreToNull()
1:     {
1:         format_id = 0;
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods implementing DataValueDescriptor interface.
1:      **************************************************************************
1:      */
1: 
1: 	/**
1: 	 * Gets the length of the data value.  The meaning of this is
1: 	 * implementation-dependent.  For string types, it is the number of
1: 	 * characters in the string.  For numeric types, it is the number of
1: 	 * bytes used to store the number.  This is the actual length
1: 	 * of this value, not the length of the type it was defined as.
1: 	 * For example, a VARCHAR value may be shorter than the declared
1: 	 * VARCHAR (maximum) length.
1: 	 *
1: 	 * @return	The length of the data value
1: 	 *
1: 	 * @exception StandardException   On error
1:      * 
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getLength
1: 	 */
1: 	public int	getLength() 
1:         throws StandardException
1:     {
1:         throw(StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 	/**
1: 	 * Gets the value in the data value descriptor as a String.
1: 	 * Throws an exception if the data value is not a string.
1: 	 *
1: 	 * @return	The data value as a String.
1: 	 *
1: 	 * @exception StandardException   Thrown on error
1:      *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getString
1: 	 */
1: 	public String	getString() throws StandardException
1:     {
1:         throw(StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 
1: 	/**
1: 	 * Gets the value in the data value descriptor as a Java Object.
1: 	 * The type of the Object will be the Java object type corresponding
1: 	 * to the data value's SQL type. JDBC defines a mapping between Java
1: 	 * object types and SQL types - we will allow that to be extended
1: 	 * through user type definitions. Throws an exception if the data
1: 	 * value is not an object (yeah, right).
1: 	 *
1: 	 * @return	The data value as an Object.
1: 	 *
1: 	 * @exception StandardException   Thrown on error
1:      *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getObject
1: 	 */
1: 	public Object	getObject() throws StandardException
1:     {
1:         return(this);
1:     }
1: 
1: 	/**
0: 	 * <U>Shallow copy</U>. 
0: 	 * <p> 
0: 	 * Clone the DataValueDescriptor and copy its contents.
0: 	 * We clone the data value wrapper (e.g. SQLDecimal)
0: 	 * and reuse its contents (the underlying BigDecimal).
0: 	 * The resultant DataValueDescriptor will point to the same
0: 	 * value as the original DataValueDescriptor (unless the value
0: 	 * is a primitive type, e.g. SQLInteger/integer).
1: 	 *
0: 	 * @return A clone of the DataValueDescriptor reusing its contents.
1:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getClone
1: 	 */
0: 	public DataValueDescriptor getClone()
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("Not implemented!.");
1: 
1:         return(null);
1:     }
1: 
1: 	/**
1: 	 * Get a new null value of the same type as this data value.
1: 	 *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getNewNull
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("Not implemented!.");
1: 
1:         return(null);
1:     }
1: 
1: 	/**
1: 	 * Set the value based on the value for the specified DataValueDescriptor
1: 	 * from the specified ResultSet.
1: 	 *
1: 	 * @param resultSet		The specified ResultSet.
1: 	 * @param colNumber		The 1-based column # into the resultSet.
1: 	 * @param isNullable	Whether or not the column is nullable
1: 	 *						(No need to call wasNull() if not)
1: 	 * 
0: 	 * @return Nothing.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 * @exception SQLException		Error accessing the result set
1:      *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValueFromResultSet
1: 	 */
1: 	public void setValueFromResultSet(
1:     ResultSet   resultSet, 
1:     int         colNumber,
1:     boolean     isNullable)
1: 		throws StandardException, SQLException
1:     {
1:         throw(StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 
1: 	/**
0: 	 * Set the value of this DataValueDescriptor to the given value
1: 	 *
0: 	 * @param theValue	An Object containing the value to set this
0: 	 *					DataValueDescriptor to.  Null means set the value
0: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This DataValueDescriptor
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1:      *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValue
1: 	 */ 
0: 	public void setValue(Object theValue) 
1:         throws StandardException
1:     {
1:         throw(StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 
1: 	/**
1: 	 * Set the value of this DataValueDescriptor from another.
1: 	 *
1: 	 * @param theValue	The Date value to set this DataValueDescriptor to
1: 	 *
0: 	 * @return	This DataValueDescriptor
1: 	 *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValue
1: 	 */
1: 	protected void setFrom(DataValueDescriptor theValue) 
1:         throws StandardException
1:     {
1:         throw(StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 
1: 	/**
1: 	 * Get the SQL name of the datatype
1: 	 *
1: 	 * @return	The SQL name of the datatype
1:      *
1:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getTypeName
1: 	 */
1: 	public String	getTypeName()
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("Not implemented!.");
1: 
1:         return(null);
1:     }
1: 
1: 	/**
1: 	 * Compare this Orderable with a given Orderable for the purpose of
1: 	 * index positioning.  This method treats nulls as ordered values -
1: 	 * that is, it treats SQL null as equal to null and less than all
1: 	 * other values.
1: 	 *
1: 	 * @param other		The Orderable to compare this one to.
1: 	 *
0: 	 * @return  <0 - this Orderable is less than other.
1: 	 * 			 0 - this Orderable equals other.
0: 	 *			>0 - this Orderable is greater than other.
1:      *
1:      *			The code should not explicitly look for -1, or 1.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1:      *
1:      * @see DataValueDescriptor#compare
1: 	 */
1: 	public int compare(DataValueDescriptor other) 
1:         throws StandardException
1: 	{
1:         throw(StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1: 	}
1: 
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.Orderable;
0: 
0: import org.apache.derby.iapi.services.cache.ClassSize;
0: 
0: import org.apache.derby.iapi.types.DataType;
0: 
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: public class StorableFormatId extends DataType 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     private int    format_id;
0: 
0:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( StorableFormatId.class);
0: 
0:     public int estimateMemoryUsage()
0:     {
0:         return BASE_MEMORY_USAGE;
0:     }
0: 
0:     /* Constructors: */
0: 
0:     public StorableFormatId()
0:     {
0:     }
0: 
0:     public StorableFormatId(int value)
0:     {
0:         this.format_id = value;
0:     }
0: 
0:     /* Private methods */
0: 
0:     public int getValue()
0:     {
0:         // RESOLVE (mikem) just temporary; value could be null
0:         return format_id;
0:     }
0: 
0:     public void setValue(int input_value)
0:     {
0:         this.format_id = input_value;
0:     }
0: 
0: 	/*
0: 	 * Storable interface, implies Externalizable, TypedFormat
0: 	 */
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId()
0:     {
0: 		return StoredFormatIds.ACCESS_FORMAT_ID;
0: 	}
0: 
0:     public boolean isNull()
0:     {
0:         return false;
0:     }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException
0:     {
0:        FormatIdUtil.writeFormatIdInteger(out, format_id);
0:     }
0: 
0: 	/** @see java.io.Externalizable#readExternal */
0: 	public void readExternal(ObjectInput in) throws IOException
0:     {
0:         format_id = FormatIdUtil.readFormatIdInteger(in);
0:     }
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException
0:     {
0:         format_id = FormatIdUtil.readFormatIdInteger(in);
0:     }
0: 
0: 
0:     public void restoreToNull()
0:     {
0:         format_id = 0;
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods implementing DataValueDescriptor interface.
0:      **************************************************************************
0:      */
0: 
0: 	/**
0: 	 * Gets the length of the data value.  The meaning of this is
0: 	 * implementation-dependent.  For string types, it is the number of
0: 	 * characters in the string.  For numeric types, it is the number of
0: 	 * bytes used to store the number.  This is the actual length
0: 	 * of this value, not the length of the type it was defined as.
0: 	 * For example, a VARCHAR value may be shorter than the declared
0: 	 * VARCHAR (maximum) length.
0: 	 *
0: 	 * @return	The length of the data value
0: 	 *
0: 	 * @exception StandardException   On error
0:      * 
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getLength
0: 	 */
0: 	public int	getLength() 
0:         throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 	/**
0: 	 * Gets the value in the data value descriptor as a String.
0: 	 * Throws an exception if the data value is not a string.
0: 	 *
0: 	 * @return	The data value as a String.
0: 	 *
0: 	 * @exception StandardException   Thrown on error
0:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getString
0: 	 */
0: 	public String	getString() throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 
0: 	/**
0: 	 * Gets the value in the data value descriptor as a Java Object.
0: 	 * The type of the Object will be the Java object type corresponding
0: 	 * to the data value's SQL type. JDBC defines a mapping between Java
0: 	 * object types and SQL types - we will allow that to be extended
0: 	 * through user type definitions. Throws an exception if the data
0: 	 * value is not an object (yeah, right).
0: 	 *
0: 	 * @return	The data value as an Object.
0: 	 *
0: 	 * @exception StandardException   Thrown on error
0:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getObject
0: 	 */
0: 	public Object	getObject() throws StandardException
0:     {
0:         return(this);
0:     }
0: 
0: 	/**
0: 	 * <U>Shallow copy</U>. 
0: 	 * <p> 
0: 	 * Clone the DataValueDescriptor and copy its contents.
0: 	 * We clone the data value wrapper (e.g. SQLDecimal)
0: 	 * and reuse its contents (the underlying BigDecimal).
0: 	 * The resultant DataValueDescriptor will point to the same
0: 	 * value as the original DataValueDescriptor (unless the value
0: 	 * is a primitive type, e.g. SQLInteger/integer).
0: 	 *
0: 	 * @return A clone of the DataValueDescriptor reusing its contents.
0:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getClone
0: 	 */
0: 	public DataValueDescriptor getClone()
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("Not implemented!.");
0: 
0:         return(null);
0:     }
0: 
0: 	/**
0: 	 * Get a new null value of the same type as this data value.
0: 	 *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getNewNull
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("Not implemented!.");
0: 
0:         return(null);
0:     }
0: 
0: 	/**
0: 	 * Set the value based on the value for the specified DataValueDescriptor
0: 	 * from the specified ResultSet.
0: 	 *
0: 	 * @param resultSet		The specified ResultSet.
0: 	 * @param colNumber		The 1-based column # into the resultSet.
0: 	 * @param isNullable	Whether or not the column is nullable
0: 	 *						(No need to call wasNull() if not)
0: 	 * 
0: 	 * @return Nothing.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 * @exception SQLException		Error accessing the result set
0:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValueFromResultSet
0: 	 */
0: 	public void setValueFromResultSet(
0:     ResultSet   resultSet, 
0:     int         colNumber,
0:     boolean     isNullable)
0: 		throws StandardException, SQLException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 
0: 	/**
0: 	 * Set the value of this DataValueDescriptor to the given value
0: 	 *
0: 	 * @param theValue	An Object containing the value to set this
0: 	 *					DataValueDescriptor to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This DataValueDescriptor
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValue
0: 	 */ 
0: 	public void setValue(Object theValue) 
0:         throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 
0: 	/**
0: 	 * Set the value of this DataValueDescriptor from another.
0: 	 *
0: 	 * @param theValue	The Date value to set this DataValueDescriptor to
0: 	 *
0: 	 * @return	This DataValueDescriptor
0: 	 *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#setValue
0: 	 */
0: 	protected void setFrom(DataValueDescriptor theValue) 
0:         throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 
0: 	/**
0: 	 * Get the SQL name of the datatype
0: 	 *
0: 	 * @return	The SQL name of the datatype
0:      *
0:      * @see org.apache.derby.iapi.types.DataValueDescriptor#getTypeName
0: 	 */
0: 	public String	getTypeName()
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("Not implemented!.");
0: 
0:         return(null);
0:     }
0: 
0: 	/**
0: 	 * Compare this Orderable with a given Orderable for the purpose of
0: 	 * index positioning.  This method treats nulls as ordered values -
0: 	 * that is, it treats SQL null as equal to null and less than all
0: 	 * other values.
0: 	 *
0: 	 * @param other		The Orderable to compare this one to.
0: 	 *
0: 	 * @return  <0 - this Orderable is less than other.
0: 	 * 			 0 - this Orderable equals other.
0: 	 *			>0 - this Orderable is greater than other.
0:      *
0:      *			The code should not explicitly look for -1, or 1.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0:      *
0:      * @see DataValueDescriptor#compare
0: 	 */
0: 	public int compare(DataValueDescriptor other) 
0:         throws StandardException
0: 	{
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0: 	}
0: 
0: 
0: }
============================================================================