1:38b4bbb: /*
1:38b4bbb:  *
1:38b4bbb:  * Derby - Class org.apache.derbyTesting.system.oe.test.OperationsTester
1:38b4bbb:  *
1:38b4bbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:38b4bbb:  * contributor license agreements.  See the NOTICE file distributed with
1:38b4bbb:  * this work for additional information regarding copyright ownership.
1:38b4bbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:38b4bbb:  * (the "License"); you may not use this file except in compliance with
1:38b4bbb:  * the License.  You may obtain a copy of the License at
1:38b4bbb:  *
1:38b4bbb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:38b4bbb:  *
1:38b4bbb:  * Unless required by applicable law or agreed to in writing, 
1:38b4bbb:  * software distributed under the License is distributed on an 
1:38b4bbb:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:38b4bbb:  * either express or implied. See the License for the specific 
1:38b4bbb:  * language governing permissions and limitations under the License.
1:38b4bbb:  */
1:38b4bbb: package org.apache.derbyTesting.system.oe.test;
1:9f7e882: 
1:8404f5d: import java.util.HashMap;
1:8404f5d: 
1:8404f5d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:9f7e882: import org.apache.derbyTesting.system.oe.client.Display;
1:38b4bbb: import org.apache.derbyTesting.system.oe.client.Operations;
1:454ea63: import org.apache.derbyTesting.system.oe.client.Submitter;
1:8404f5d: import org.apache.derbyTesting.system.oe.direct.Standard;
1:9f7e882: import org.apache.derbyTesting.system.oe.model.Customer;
1:9f7e882: import org.apache.derbyTesting.system.oe.model.District;
1:9f7e882: import org.apache.derbyTesting.system.oe.model.Order;
1:9f7e882: import org.apache.derbyTesting.system.oe.model.OrderLine;
1:9f7e882: import org.apache.derbyTesting.system.oe.model.Warehouse;
1:9f7e882: import org.apache.derbyTesting.system.oe.util.OERandom;
1:9f7e882: 
1:9f7e882: /**
1:38b4bbb:  * Test an implementation of Operations.
1:38b4bbb:  * Currently just tests the setup but as more
1:38b4bbb:  * code is added the implemetations of the transactions
1:38b4bbb:  * will be added.
1:38b4bbb:  */
1:8404f5d: public class OperationsTester extends BaseJDBCTestCase implements Display {
5:38b4bbb: 
1:8404f5d:     private Operations ops;
1:76c452e:     private OERandom rand;
1:9f7e882:     private final short w = 1;
1:38b4bbb:     
1:8404f5d:     public OperationsTester(String name) {
1:8404f5d:         super(name);
1:76c452e:         
1:38b4bbb:     }
1:9f7e882:     
1:8404f5d:     protected void setUp() throws Exception 
4:38b4bbb:     {
1:8404f5d:         ops = new Standard(getConnection());
1:76c452e:         rand = Submitter.getRuntimeRandom(getConnection());
1:9f7e882:     }
1:9f7e882:     
1:8404f5d:     protected void tearDown() throws Exception
1:8404f5d:     {
1:8404f5d:         ops.close();
1:8404f5d:         super.tearDown();
1:8404f5d:     }
1:8404f5d:     
1:8404f5d:     public void testStockLevel() throws Exception
1:85fc221:     {     
1:9f7e882:         // Check a null display is handled
1:9f7e882:         ops.stockLevel(null, null,
2:9f7e882:                 w, rand.district(), rand.threshold());
1:9f7e882:         
1:8404f5d:         for (int i = 0; i < 20; i++) {
1:8404f5d:            
1:8404f5d:             short d = rand.district();
1:8404f5d:             int threshold = rand.threshold();
1:8404f5d:             
1:9d44c9e:             HashMap<String, Number> inputData = new HashMap<String, Number>();
1:39b3237:             inputData.put("d", d);
1:39b3237:             inputData.put("threshold", threshold);
1:8404f5d:             
1:8404f5d:             ops.stockLevel(this, inputData,
1:8404f5d:                     w, d, threshold);
1:454ea63:             
1:454ea63:             // Ensures the Display object read it.
1:454ea63:             assertTrue(inputData.isEmpty());
1:8404f5d:         }
1:38b4bbb:     }
1:9f7e882:     
1:76c452e:     /**
1:9f7e882:      * Execute a number of order-status transactions
1:9f7e882:      * by name and identifier. Also check the implementation
1:9f7e882:      * accepts a null display.
1:9f7e882:      * @throws Exception
1:9f7e882:      */
1:8404f5d:     public void testOrderStatus() throws Exception
1:85fc221:     {     
1:9f7e882:         // By identifier
1:9f7e882:         ops.orderStatus(null, null,
2:9f7e882:                 w, rand.district(), rand.NURand1023());
1:9f7e882:         for (int i = 0; i < 50; i++) {
1:8404f5d:             
1:8404f5d:             short d = rand.district();
1:8404f5d:             int c = rand.NURand1023();
1:8404f5d:             
1:9d44c9e:             HashMap<String, Number> inputData = new HashMap<String, Number>();
1:39b3237:             inputData.put("d", d);
1:39b3237:             inputData.put("c", c);
1:8404f5d: 
1:8404f5d:             ops.orderStatus(this, inputData, w, d, c);
1:454ea63:             // Ensures the Display object read it.
1:454ea63:             assertTrue(inputData.isEmpty());
1:9f7e882:         }
1:9f7e882:         
1:9f7e882:         // By name 
1:9f7e882:         ops.orderStatus(null, null,
2:9f7e882:                 w, rand.district(), rand.randomCLast());
1:9f7e882:         for (int i = 0; i < 50; i++)
1:9f7e882:         {
1:8404f5d:             short d = rand.district();
1:8404f5d:             String customerLast = rand.randomCLast();
1:8404f5d:             
1:9d44c9e:             HashMap<String, Object> inputData = new HashMap<String, Object>();
1:39b3237:             inputData.put("d", d);
1:8404f5d:             inputData.put("customerLast", customerLast);
1:8404f5d: 
1:8404f5d:             ops.orderStatus(this, inputData, w, d, customerLast);
1:454ea63:             // Ensures the Display object read it.
1:454ea63:             assertTrue(inputData.isEmpty());
1:8404f5d:             
1:9f7e882:         }
1:38b4bbb:     }
1:8404f5d:     public void testPayment() throws Exception
1:85fc221:     {       
1:8404f5d:         //  With no display
1:8404f5d:         ops.payment(null, null, w, rand.district(),
1:8404f5d:                 w, rand.district(), rand.randomCLast(), rand.payment().toString());
1:8404f5d:         
1:8404f5d:         for (int i = 0; i < 50; i++) {
1:8404f5d:             ops.payment(this, null, w, rand.district(),
1:8404f5d:                     w, rand.district(), rand.randomCLast(), rand.payment().toString());
1:8404f5d:         }  
1:8404f5d:         
1:8404f5d:         // With no display
1:8404f5d:         ops.payment(null, null, w, rand.district(),
1:8404f5d:                 w, rand.district(), rand.NURand1023(), rand.payment().toString());
1:8404f5d: 
1:8404f5d:         for (int i = 0; i < 50; i++) {
1:8404f5d:             
1:8404f5d:             ops.payment(this, null, w, rand.district(),
1:8404f5d:                     w, rand.district(), rand.NURand1023(), rand.payment().toString());
1:8404f5d:         }
1:38b4bbb:     }
1:8404f5d:     public void testNewOrder() throws Exception
1:38b4bbb:     {
1:72a917a:         for (int x = 0; x < 50; x++)
1:72a917a:         {
1:72a917a:             int itemCount = rand.randomInt(5, 15);
1:72a917a:             int[] items = new int[itemCount];
1:72a917a:             short[] quantities = new short[itemCount];
1:72a917a:             short[] supplyW = new short[itemCount];
1:72a917a:             
1:72a917a:             // rollback 1% of the transactions
1:72a917a:             boolean willFail = rand.randomInt(1, 100) == 1;
1:72a917a: 
1:72a917a:             for (int i = 0 ; i < itemCount; i++) {
1:72a917a:                 if (willFail && (i == (itemCount - 1)))
1:72a917a:                     items[i] = 500000; // some invalid value
1:72a917a:                 else
1:72a917a:                     items[i] = rand.NURand8191();
1:72a917a: 
1:72a917a:                 quantities[i] = (short) rand.randomInt(1, 10);
1:72a917a:                 supplyW[i] = w;
1:72a917a:             }
1:72a917a: 
1:72a917a:             ops.newOrder(this, null, w, rand.district(),
1:72a917a:                 rand.NURand1023(),  items, quantities, supplyW);
1:72a917a:             
1:72a917a:         }
1:38b4bbb:     }
1:8404f5d:     public void testScheduleDelivery() throws Exception
1:38b4bbb:     {
1:24e8abd:         for (int i = 0; i < 50; i++)
1:24e8abd:             ops.scheduleDelivery(this, null, w, rand.carrier());
1:38b4bbb:     }
1:8404f5d:     public void testDelivery() throws Exception
1:38b4bbb:     {
1:24e8abd:         // Ensure there are some schedule deliveries
1:24e8abd:         testScheduleDelivery();
1:24e8abd:         for (int i = 0; i < 50; i++)
1:24e8abd:             ops.delivery();
1:38b4bbb:     }
1:9f7e882: 
1:8404f5d:     public void displayStockLevel(Object displayData, short w, short d, int threshold, int lowStock) throws Exception {
1:454ea63:         
1:454ea63:         // Submitter does not fill this in.
1:454ea63:         if (displayData == null)
1:454ea63:             return;
1:454ea63:         
1:8404f5d:         HashMap inputData = (HashMap) displayData;
1:8404f5d:         assertEquals("sl:w", this.w, w);
1:8404f5d:         assertEquals("sl:d", ((Short) inputData.get("d")).shortValue(), d);
1:8404f5d:         assertEquals("sl:threshold", ((Integer) inputData.get("threshold")).intValue(), threshold);
1:454ea63:         assertTrue("sl:low stock", lowStock >= 0);
1:454ea63:         
1:454ea63:         // Clear it to inform the caller that it was read.
1:454ea63:         inputData.clear();
1:38b4bbb:     }
1:9f7e882: 
1:9f7e882:     public void displayOrderStatus(Object displayData, boolean byName, Customer customer, Order order, OrderLine[] lineItems) throws Exception {
1:454ea63:         
1:454ea63:         // Submitter does not fill this in.
1:454ea63:         if (displayData == null)
1:454ea63:             return;
1:454ea63:         
1:8404f5d:         HashMap inputData = (HashMap) displayData;
1:8404f5d:         assertEquals("os:w", this.w, customer.getWarehouse());
1:8404f5d:         assertEquals("os:d", ((Short) inputData.get("d")).shortValue(), customer.getDistrict());
1:9f7e882:         
1:8404f5d:         if (byName)
1:8404f5d:         {
1:8404f5d:             assertNotNull(inputData.get("customerLast"));
1:8404f5d:         }
1:8404f5d:         else
1:8404f5d:         {
1:8404f5d:             assertNull(inputData.get("customerLast"));
1:8404f5d:         }
1:454ea63:         
1:454ea63:         // Clear it to inform the caller that it was read.
1:454ea63:         inputData.clear();
1:9f7e882:     }
1:9f7e882: 
1:9f7e882:     public void displayPayment(Object displayData, String amount, boolean byName, Warehouse warehouse, District district, Customer customer) throws Exception {
1:9f7e882:         // TODO Auto-generated method stub
1:454ea63:         
1:9f7e882:     }
1:454ea63: 
1:9f7e882:     public void displayNewOrder(Object displayData, Warehouse warehouse, District district, Customer customer, Order order) throws Exception {
1:9f7e882:         // TODO Auto-generated method stub
1:9f7e882:         
1:9f7e882:     }
1:9f7e882: 
1:9f7e882:     public void displayScheduleDelivery(Object displayData, short w, short carrier) throws Exception {
1:9f7e882:         // TODO Auto-generated method stub
1:9f7e882:         
1:9f7e882:     }
1:9f7e882:     
1:38b4bbb:     /**
1:76c452e:      * Test submitting transactions through Submitter,
1:76c452e:      * as individual transactions and as a block.
1:76c452e:      * @throws Exception
1:76c452e:      */
1:454ea63:     public void testSubmitter() throws Exception
1:454ea63:     {
1:454ea63:         Submitter submitter = new Submitter(this, this.ops, this.rand,
1:454ea63:                 (short) 1);
1:454ea63:         
1:454ea63:         int tranCount = 37;
1:454ea63:         for (int i = 0; i < tranCount; i++)
1:454ea63:         {
1:454ea63:             submitter.runTransaction(null);
1:454ea63:         }
1:454ea63:         
1:76c452e:         int tranCount2 = 47;
1:76c452e:         submitter.runTransactions(null, tranCount2);
1:76c452e:         
1:454ea63:         int[] executeCounts = submitter.getTransactionCount();
1:454ea63:         int totalTran = 0;
1:454ea63:         for (int i = 0; i < executeCounts.length; i++)
1:454ea63:             totalTran += executeCounts[i];
1:454ea63:         
1:454ea63:         assertEquals("Mismatch on Submitter transaction count",
1:76c452e:                 tranCount + tranCount2, totalTran);
1:454ea63:         
1:454ea63:     }
1:38b4bbb: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             inputData.put("d", d);
1:             inputData.put("threshold", threshold);
/////////////////////////////////////////////////////////////////////////
1:             inputData.put("d", d);
1:             inputData.put("c", c);
/////////////////////////////////////////////////////////////////////////
1:             inputData.put("d", d);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, Number> inputData = new HashMap<String, Number>();
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, Number> inputData = new HashMap<String, Number>();
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, Object> inputData = new HashMap<String, Object>();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:76c452e
/////////////////////////////////////////////////////////////////////////
1:     private OERandom rand;
1:         
1:         rand = Submitter.getRuntimeRandom(getConnection());
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test submitting transactions through Submitter,
1:      * as individual transactions and as a block.
1:      * @throws Exception
1:      */
1:         int tranCount2 = 47;
1:         submitter.runTransactions(null, tranCount2);
1:         
1:                 tranCount + tranCount2, totalTran);
commit:454ea63
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.client.Submitter;
/////////////////////////////////////////////////////////////////////////
1:             
1:             // Ensures the Display object read it.
1:             assertTrue(inputData.isEmpty());
/////////////////////////////////////////////////////////////////////////
1:             // Ensures the Display object read it.
1:             assertTrue(inputData.isEmpty());
/////////////////////////////////////////////////////////////////////////
1:             // Ensures the Display object read it.
1:             assertTrue(inputData.isEmpty());
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Submitter does not fill this in.
1:         if (displayData == null)
1:             return;
1:         
1:         assertTrue("sl:low stock", lowStock >= 0);
1:         
1:         // Clear it to inform the caller that it was read.
1:         inputData.clear();
1:         
1:         // Submitter does not fill this in.
1:         if (displayData == null)
1:             return;
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Clear it to inform the caller that it was read.
1:         inputData.clear();
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSubmitter() throws Exception
1:     {
1:         Submitter submitter = new Submitter(this, this.ops, this.rand,
1:                 (short) 1);
1:         
1:         int tranCount = 37;
1:         
1:         for (int i = 0; i < tranCount; i++)
1:         {
1:             submitter.runTransaction(null);
1:         }
1:         
1:         int[] executeCounts = submitter.getTransactionCount();
1:         int totalTran = 0;
1:         for (int i = 0; i < executeCounts.length; i++)
1:             totalTran += executeCounts[i];
1:         
1:         assertEquals("Mismatch on Submitter transaction count",
0:                 tranCount, totalTran);
1:         
1:     }
commit:85fc221
/////////////////////////////////////////////////////////////////////////
1:     {     
/////////////////////////////////////////////////////////////////////////
1:     {     
/////////////////////////////////////////////////////////////////////////
1:     {       
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:72a917a
/////////////////////////////////////////////////////////////////////////
1:         for (int x = 0; x < 50; x++)
1:         {
1:             int itemCount = rand.randomInt(5, 15);
1:             int[] items = new int[itemCount];
1:             short[] quantities = new short[itemCount];
1:             short[] supplyW = new short[itemCount];
1:             
1:             // rollback 1% of the transactions
1:             boolean willFail = rand.randomInt(1, 100) == 1;
1: 
1:             for (int i = 0 ; i < itemCount; i++) {
1:                 if (willFail && (i == (itemCount - 1)))
1:                     items[i] = 500000; // some invalid value
1:                 else
1:                     items[i] = rand.NURand8191();
1: 
1:                 quantities[i] = (short) rand.randomInt(1, 10);
1:                 supplyW[i] = w;
1:             }
1: 
1:             ops.newOrder(this, null, w, rand.district(),
1:                 rand.NURand1023(),  items, quantities, supplyW);
1:             
1:         }
commit:24e8abd
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 50; i++)
1:             ops.scheduleDelivery(this, null, w, rand.carrier());
1:         // Ensure there are some schedule deliveries
1:         testScheduleDelivery();
1:         for (int i = 0; i < 50; i++)
1:             ops.delivery();
commit:8404f5d
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.system.oe.direct.Standard;
/////////////////////////////////////////////////////////////////////////
1: public class OperationsTester extends BaseJDBCTestCase implements Display {
1:     private Operations ops;
1:     public OperationsTester(String name) {
1:         super(name);
0:         this.rand = new OERandom(-1, -1, -1);
1:     protected void setUp() throws Exception 
1:         ops = new Standard(getConnection());
1:     protected void tearDown() throws Exception
1:     {
1:         ops.close();
1:         super.tearDown();
1:     }
1:     
1:     public void testStockLevel() throws Exception
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 20; i++) {
1:            
1:             short d = rand.district();
1:             int threshold = rand.threshold();
1:             
0:             HashMap inputData = new HashMap();
0:             inputData.put("d", new Short(d));
0:             inputData.put("threshold", new Integer(threshold));
1:             
1:             ops.stockLevel(this, inputData,
1:                     w, d, threshold);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void testOrderStatus() throws Exception
/////////////////////////////////////////////////////////////////////////
1:             
1:             short d = rand.district();
1:             int c = rand.NURand1023();
1:             
0:             HashMap inputData = new HashMap();
0:             inputData.put("d", new Short(d));
0:             inputData.put("c", new Integer(c));
1: 
1:             ops.orderStatus(this, inputData, w, d, c);
/////////////////////////////////////////////////////////////////////////
1:             short d = rand.district();
1:             String customerLast = rand.randomCLast();
1:             
0:             HashMap inputData = new HashMap();
0:             inputData.put("d", new Short(d));
1:             inputData.put("customerLast", customerLast);
1: 
1:             ops.orderStatus(this, inputData, w, d, customerLast);
1:     public void testPayment() throws Exception
1:         
1:         //  With no display
1:         ops.payment(null, null, w, rand.district(),
1:                 w, rand.district(), rand.randomCLast(), rand.payment().toString());
1:         
1:         for (int i = 0; i < 50; i++) {
1:             ops.payment(this, null, w, rand.district(),
1:                     w, rand.district(), rand.randomCLast(), rand.payment().toString());
1:         }  
1:         
1:         // With no display
1:         ops.payment(null, null, w, rand.district(),
1:                 w, rand.district(), rand.NURand1023(), rand.payment().toString());
1: 
1:         for (int i = 0; i < 50; i++) {
1:             
1:             ops.payment(this, null, w, rand.district(),
1:                     w, rand.district(), rand.NURand1023(), rand.payment().toString());
1:         }
1:     public void testNewOrder() throws Exception
1:     public void testScheduleDelivery() throws Exception
1:     public void testDelivery() throws Exception
1:     public void displayStockLevel(Object displayData, short w, short d, int threshold, int lowStock) throws Exception {
1:         HashMap inputData = (HashMap) displayData;
1:         assertEquals("sl:w", this.w, w);
1:         assertEquals("sl:d", ((Short) inputData.get("d")).shortValue(), d);
1:         assertEquals("sl:threshold", ((Integer) inputData.get("threshold")).intValue(), threshold);
0:         assertTrue("sl:low stock", lowStock >= 0); 
1:         HashMap inputData = (HashMap) displayData;
1:         assertEquals("os:w", this.w, customer.getWarehouse());
1:         assertEquals("os:d", ((Short) inputData.get("d")).shortValue(), customer.getDistrict());
1:         if (byName)
1:         {
1:             assertNotNull(inputData.get("customerLast"));
1:         }
1:         else
1:         {
1:             assertNull(inputData.get("customerLast"));
1:         }
commit:9f7e882
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.client.Display;
1: import org.apache.derbyTesting.system.oe.model.Customer;
1: import org.apache.derbyTesting.system.oe.model.District;
1: import org.apache.derbyTesting.system.oe.model.Order;
1: import org.apache.derbyTesting.system.oe.model.OrderLine;
1: import org.apache.derbyTesting.system.oe.model.Warehouse;
1: import org.apache.derbyTesting.system.oe.util.OERandom;
/////////////////////////////////////////////////////////////////////////
0: class OperationsTester implements Display {
0:     private final OERandom rand;
1:     private final short w = 1;
0:         this.rand = new OERandom(-1, -1, -1, 3458567);
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Check a null display is handled
1:         ops.stockLevel(null, null,
1:                 w, rand.district(), rand.threshold());
1:         
0:         for (int i = 0; i < 20; i++)
0:             ops.stockLevel(this, null,
1:                     w, rand.district(), rand.threshold());
1:     
1:     /**
1:      * Execute a number of order-status transactions
1:      * by name and identifier. Also check the implementation
1:      * accepts a null display.
1:      * @throws Exception
1:      */
1:         
1:         // By identifier
1:         ops.orderStatus(null, null,
1:                 w, rand.district(), rand.NURand1023());
1:         for (int i = 0; i < 50; i++) {
0:             ops.orderStatus(this, null,
1:                     w, rand.district(), rand.NURand1023());
1:         }
1:         
1:         // By name 
1:         ops.orderStatus(null, null,
1:                 w, rand.district(), rand.randomCLast());
1:         for (int i = 0; i < 50; i++)
1:         {
0:             ops.orderStatus(this, null,
1:                     w, rand.district(), rand.randomCLast());
1:             
1:         }
0:         //
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void displayStockLevel(Object displayData, short w, short d, int threshold, int level) throws Exception {
0:         // TODO: Check expected data is set.  
1:     }
1: 
1:     public void displayOrderStatus(Object displayData, boolean byName, Customer customer, Order order, OrderLine[] lineItems) throws Exception {
0:         // TODO: Check expected data is set.   
1:         
1:     }
1: 
1:     public void displayPayment(Object displayData, String amount, boolean byName, Warehouse warehouse, District district, Customer customer) throws Exception {
1:         // TODO Auto-generated method stub
1:         
1:     }
1: 
1:     public void displayNewOrder(Object displayData, Warehouse warehouse, District district, Customer customer, Order order) throws Exception {
1:         // TODO Auto-generated method stub
1:         
1:     }
1: 
1:     public void displayScheduleDelivery(Object displayData, short w, short carrier) throws Exception {
1:         // TODO Auto-generated method stub
1:         
1:     }
commit:38b4bbb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.test.OperationsTester
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.test;
1: 
1: import org.apache.derbyTesting.system.oe.client.Operations;
1: 
1: /**
1:  * Test an implementation of Operations.
1:  * Currently just tests the setup but as more
1:  * code is added the implemetations of the transactions
1:  * will be added.
1:  */
0: class OperationsTester  {
1: 
0:     private final Operations ops;
1:     
0:     OperationsTester(Operations ops) {
0:         this.ops = ops;
1:     }
1:     
0:     void test() throws Exception
1:     {
0:         testStockLevel();
0:         testOrderStatus();
0:         testPayment();
0:         testNewOrder();
0:         testScheduleDelivery();
0:         testDelivery();
1:     }
1:     
0:     private void testStockLevel() throws Exception
1:     {
0:         ops.setupStockLevel();
1:     }
0:     private void testOrderStatus() throws Exception
1:     {
0:         ops.setupOrderStatus();
1:     }
0:     private void testPayment() throws Exception
1:     {
0:         ops.setupPayment();
1:     }
0:     private void testNewOrder() throws Exception
1:     {
0:         ops.setupNewOrder();
1:     }
0:     private void testScheduleDelivery() throws Exception
1:     {
0:         ops.setupScheduleDelivery();
1:     }
0:     private void testDelivery() throws Exception
1:     {
0:         ops.setupDelivery();
1:     }
1: }
============================================================================