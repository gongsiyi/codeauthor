1:7a9ce7e: /*
4:7a9ce7e: 
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.execute.WindowResultSet
1:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: package org.apache.derby.impl.sql.execute;
1:7a9ce7e: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:7a9ce7e: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:7a9ce7e: 
1:7a9ce7e: import org.apache.derby.iapi.sql.Activation;
1:7a9ce7e: import org.apache.derby.iapi.sql.execute.ExecRow;
1:7a9ce7e: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:7a9ce7e: 
1:7a9ce7e: import org.apache.derby.iapi.types.DataValueDescriptor;
1:7a9ce7e: 
1:7a9ce7e: import org.apache.derby.iapi.reference.SQLState;
1:7a9ce7e: import org.apache.derby.iapi.error.StandardException;
1:7a9ce7e: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:d868eed: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:d868eed: import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * WindowResultSet
1:7a9ce7e:  *
1:7a9ce7e:  * This ResultSet handles a window function ResultSet.
1:7a9ce7e:  *
1:7a9ce7e:  * The ResultSet is opened using openCore().  Each row is fetched and any
1:7a9ce7e:  * restrictions evaluated for each row in a do-while loop in getNextRowCore().
1:7a9ce7e:  * The ResultSet is closed using closeCore().
1:7a9ce7e:  *
1:7a9ce7e:  */
1:7a9ce7e: class WindowResultSet extends NoPutResultSetImpl
1:7a9ce7e: {
1:7a9ce7e:     private GeneratedMethod restriction = null;
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Source result set,
1:7a9ce7e:      */
1:7a9ce7e:     public NoPutResultSet source = null;
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:d868eed:      * Cumulative time needed to evaluate any restriction on this result set.
1:7a9ce7e:      */
1:7a9ce7e:     public long restrictionTime;
1:7a9ce7e: 
1:7a9ce7e:     private FormatableBitSet referencedColumns;
1:7a9ce7e:     private ExecRow allocatedRow;
1:7a9ce7e:     private long rownumber;
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      *  Constructor
1:7a9ce7e:      *
1:7a9ce7e:      *  @param  activation          The activation
1:7a9ce7e:      *  @param  source              Source result set
1:7a9ce7e:      *  @param  rowAllocator
1:7a9ce7e:      *  @param  resultSetNumber     The resultSetNumber
1:7a9ce7e:      *  @param  erdNumber           Int for ResultDescription
1:7a9ce7e: 	                                (so it can be turned back into an object)
1:7a9ce7e:      *  @param  restriction         Restriction
1:7a9ce7e:      *  @param  optimizerEstimatedRowCount  The optimizer's estimated number
1:7a9ce7e:      *                                      of rows.
1:7a9ce7e:      *  @param  optimizerEstimatedCost      The optimizer's estimated cost
1:7a9ce7e:      */
1:7a9ce7e: 
1:7a9ce7e:     WindowResultSet(Activation activation,
1:7a9ce7e:         NoPutResultSet         source,
1:d868eed:         int                    rowAllocator,
1:7a9ce7e:         int                    resultSetNumber,
1:7a9ce7e:         int                    erdNumber,
1:7a9ce7e:         GeneratedMethod        restriction,
1:7a9ce7e:         double                 optimizerEstimatedRowCount,
1:7a9ce7e:         double                 optimizerEstimatedCost)
1:d868eed:       throws StandardException
1:7a9ce7e:     {
1:7a9ce7e: 
1:7a9ce7e:         super(activation,
1:7a9ce7e:             resultSetNumber,
1:7a9ce7e:             optimizerEstimatedRowCount,
1:7a9ce7e:             optimizerEstimatedCost);
1:7a9ce7e: 
1:7a9ce7e:         if (SanityManager.DEBUG) {
1:7a9ce7e:             SanityManager.ASSERT(activation != null,
1:7a9ce7e:                                  "activation expected to be non-null");
1:7a9ce7e:             SanityManager.ASSERT(resultSetNumber >= 0,
1:7a9ce7e:                                  "resultSetNumber expected to be >= 0");
2:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         this.restriction = restriction;
1:7a9ce7e:         this.source = source;
1:7a9ce7e:         this.rownumber = 0;
1:7a9ce7e: 
1:d868eed:         ExecPreparedStatement ps = activation.getPreparedStatement();
1:d868eed: 
1:d868eed:         this.allocatedRow = ((ExecRowBuilder) ps.getSavedObject(rowAllocator))
1:d868eed:                 .build(activation.getExecutionFactory());
1:d868eed: 
1:7a9ce7e:         if (erdNumber != -1) {
1:7a9ce7e:             this.referencedColumns =
1:d868eed:                 (FormatableBitSet) ps.getSavedObject(erdNumber);
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         recordConstructorTime();
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Open this ResultSet.
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException thrown if cursor finished.
1:7a9ce7e:      */
1:7a9ce7e:     public void openCore() throws StandardException {
1:7a9ce7e:         if (SanityManager.DEBUG) {
1:7a9ce7e:             SanityManager.ASSERT(!isOpen,
1:7a9ce7e:                 "WindowResultSet already open");
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         beginTime = getCurrentTimeMillis();
1:7a9ce7e: 
1:7a9ce7e:         /* Call into the source openCore() */
1:7a9ce7e:         source.openCore();
1:7a9ce7e: 
1:7a9ce7e:         isOpen = true;
1:7a9ce7e:         rownumber = 0;
1:7a9ce7e:         numOpens++;
1:7a9ce7e:         openTime += getElapsedMillis(beginTime);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Reopen this ResultSet.
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException thrown if cursor finished.
1:7a9ce7e:      */
1:7a9ce7e:     public void reopenCore() throws StandardException {
1:7a9ce7e:         if (SanityManager.DEBUG) {
1:7a9ce7e:             SanityManager.ASSERT(isOpen, "WindowResultSet already open");
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         beginTime = getCurrentTimeMillis();
1:7a9ce7e: 
1:7a9ce7e:         /* Reopen the source */
1:7a9ce7e:         source.reopenCore();
1:7a9ce7e: 
1:7a9ce7e:         rownumber = 0;
1:7a9ce7e:         numOpens++;
1:7a9ce7e:         openTime += getElapsedMillis(beginTime);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Return the requested values computed from the next row (if any) for which
1:7a9ce7e:      * the restriction evaluates to true.
1:7a9ce7e:      * <p>
1:7a9ce7e:      * Restriction and projection parameters are evaluated for each row.
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException thrown on failure.
1:7a9ce7e:      * @exception StandardException ResultSetNotOpen thrown if not yet open.
1:7a9ce7e:      *
1:7a9ce7e:      * @return the next row in the result
1:7a9ce7e:      */
1:7a9ce7e:     public ExecRow getNextRowCore() throws StandardException
1:7a9ce7e:     {
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:7a9ce7e:         ExecRow sourceRow = null;
1:7a9ce7e:         ExecRow retval = null;
1:7a9ce7e:         boolean restrict = false;
1:7a9ce7e:         DataValueDescriptor restrictBoolean;
1:7a9ce7e:         long beginRT = 0;
1:7a9ce7e: 
1:7a9ce7e:         beginTime = getCurrentTimeMillis();
1:7a9ce7e: 
1:7a9ce7e:         if (!isOpen) {
1:7a9ce7e:             throw StandardException.newException(
1:7a9ce7e:                 SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         /*
1:7a9ce7e:          * Loop until we get a row from the source that qualifies, or there are
1:7a9ce7e:          * no more rows to qualify. For each iteration fetch a row from the
1:7a9ce7e:          * source, and evaluate against the restriction if any.
1:7a9ce7e:          */
1:7a9ce7e:         ExecRow tmpRow = null;
1:7a9ce7e: 
1:7a9ce7e:         do {
1:7a9ce7e:             sourceRow = source.getNextRowCore();
1:7a9ce7e: 
1:7a9ce7e:             if (sourceRow != null) {
1:7a9ce7e:                 this.rownumber++;
1:7a9ce7e:                 tmpRow = getAllocatedRow();
1:7a9ce7e:                 populateFromSourceRow(sourceRow, tmpRow);
1:7a9ce7e:                 setCurrentRow(tmpRow);
1:7a9ce7e: 
1:7a9ce7e:                 /* Evaluate any restrictions */
1:7a9ce7e:                 restrictBoolean = (DataValueDescriptor) ((restriction == null) ?
1:7a9ce7e:                                     null : restriction.invoke(activation));
1:7a9ce7e: 
1:7a9ce7e:                 restrictionTime += getElapsedMillis(beginRT);
1:7a9ce7e: 
1:7a9ce7e:                 // if the result is null, we make it false --
1:7a9ce7e:                 // so the row won't be returned.
1:7a9ce7e:                 restrict = (restrictBoolean == null) ||
1:7a9ce7e:                     ((!restrictBoolean.isNull()) &&
1:7a9ce7e:                     restrictBoolean.getBoolean());
1:7a9ce7e: 
1:7a9ce7e:                 if (!restrict) {
1:7a9ce7e:                     rowsFiltered++;
1:7a9ce7e:                     clearCurrentRow();
1:7a9ce7e:                 }
1:7a9ce7e: 
1:7a9ce7e:                 /* Update the run time statistics */
1:7a9ce7e:                 rowsSeen++;
1:7a9ce7e:                 retval = currentRow;
1:7a9ce7e:             } else {
1:7a9ce7e:                 clearCurrentRow();
1:7a9ce7e:                 retval = null;
1:7a9ce7e:             }
1:7a9ce7e:         } while ((sourceRow != null) && (!restrict));
1:7a9ce7e: 
1:7a9ce7e:         nextTime += getElapsedMillis(beginTime);
1:7a9ce7e:         return retval;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * If the result set has been opened, close the open scan, else throw.
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException thrown on error
1:7a9ce7e:      */
1:7a9ce7e:     public void close() throws StandardException {
1:7a9ce7e:         beginTime = getCurrentTimeMillis();
1:7a9ce7e: 
1:7a9ce7e:         if (isOpen) {
1:7a9ce7e:             clearCurrentRow();
1:7a9ce7e: 
1:7a9ce7e:             /*
1:7a9ce7e:              * Make sure to close the source
1:7a9ce7e:              */
1:7a9ce7e:             source.close();
1:7a9ce7e:             super.close();
1:7a9ce7e: 
1:7a9ce7e:         } else if (SanityManager.DEBUG) {
1:7a9ce7e:             SanityManager.DEBUG("CloseRepeatInfo",
1:7a9ce7e:                                 "Close of WindowResultSet repeated");
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         closeTime += getElapsedMillis(beginTime);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Copy columns from srcrow into destrow, or insert ROW_NUMBER.
1:7a9ce7e:      * <p/>
1:7a9ce7e:      * <b>FIXME</b>
1:7a9ce7e:      * This is temporary. Window function treatment needs to generalized to
1:7a9ce7e:      * work for other window functions.
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException thrown on failure to open
1:7a9ce7e:      */
1:7a9ce7e:     public void populateFromSourceRow(ExecRow srcrow, ExecRow destrow)
1:7a9ce7e:         throws StandardException
1:7a9ce7e:     {
1:7a9ce7e:         int srcindex = 1;
1:7a9ce7e: 
1:7a9ce7e:         try {
1:7a9ce7e:             DataValueDescriptor[] columns = destrow.getRowArray();
1:7a9ce7e:             for (int index = 0; index < columns.length; index++) {
1:7a9ce7e: 
1:7a9ce7e:                 if (referencedColumns != null &&
1:7a9ce7e:                         !referencedColumns.get(index)) {
1:7a9ce7e:                     columns[index].setValue((long)this.rownumber);
1:7a9ce7e:                 } else {
1:7a9ce7e:                     destrow.setColumn(index+1, srcrow.getColumn(srcindex));
1:7a9ce7e:                     srcindex++;
1:7a9ce7e:                 }
1:7a9ce7e:             }
1:7a9ce7e:         } catch (StandardException se) {
1:7a9ce7e:             throw se;
1:7a9ce7e:         } catch (Throwable t) {
1:7a9ce7e:             throw StandardException.unexpectedUserException(t);
1:7a9ce7e:         }
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Return the total amount of time spent in this ResultSet
1:7a9ce7e:      *
1:7a9ce7e:      * @param type  CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:7a9ce7e:      *          ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:7a9ce7e:      *
1:7a9ce7e:      * @return long     The total amount of time spent (in milliseconds).
1:7a9ce7e:      */
1:7a9ce7e:     public long getTimeSpent(int type) {
1:7a9ce7e:         long totTime = constructorTime + openTime + nextTime + closeTime;
1:7a9ce7e: 
1:7a9ce7e:         if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY) {
1:7a9ce7e:             return totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:7a9ce7e:         } else {
1:7a9ce7e:             return totTime;
1:7a9ce7e:         }
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Cache the ExecRow for this result set.
1:7a9ce7e:      *
1:7a9ce7e:      * @return The cached ExecRow for this ResultSet
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException thrown on failure.
1:7a9ce7e:      */
1:d868eed:     private ExecRow getAllocatedRow() throws StandardException {
1:7a9ce7e:         return allocatedRow;
1:7a9ce7e:     }
1:7a9ce7e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d868eed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1: import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Cumulative time needed to evaluate any restriction on this result set.
/////////////////////////////////////////////////////////////////////////
1:         int                    rowAllocator,
1:       throws StandardException
/////////////////////////////////////////////////////////////////////////
1:         ExecPreparedStatement ps = activation.getPreparedStatement();
1: 
1:         this.allocatedRow = ((ExecRowBuilder) ps.getSavedObject(rowAllocator))
1:                 .build(activation.getExecutionFactory());
1: 
1:                 (FormatableBitSet) ps.getSavedObject(erdNumber);
/////////////////////////////////////////////////////////////////////////
1:     private ExecRow getAllocatedRow() throws StandardException {
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.WindowResultSet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1:  * WindowResultSet
1:  *
1:  * This ResultSet handles a window function ResultSet.
1:  *
1:  * The ResultSet is opened using openCore().  Each row is fetched and any
1:  * restrictions evaluated for each row in a do-while loop in getNextRowCore().
1:  * The ResultSet is closed using closeCore().
1:  *
1:  */
1: class WindowResultSet extends NoPutResultSetImpl
1: {
1:     private GeneratedMethod restriction = null;
0:     private GeneratedMethod row;
1: 
1: 
1:     /**
1:      * Source result set,
1:      */
1:     public NoPutResultSet source = null;
1: 
1: 
1:     /**
0:      * Cumulative time needed to evalute any restriction on this result set.
1:      */
1:     public long restrictionTime;
1: 
1:     private FormatableBitSet referencedColumns;
1:     private ExecRow allocatedRow;
1:     private long rownumber;
1: 
1:     /**
1:      *  Constructor
1:      *
1:      *  @param  activation          The activation
1:      *  @param  source              Source result set
1:      *  @param  rowAllocator
1:      *  @param  resultSetNumber     The resultSetNumber
1:      *  @param  erdNumber           Int for ResultDescription
1: 	                                (so it can be turned back into an object)
1:      *  @param  restriction         Restriction
1:      *  @param  optimizerEstimatedRowCount  The optimizer's estimated number
1:      *                                      of rows.
1:      *  @param  optimizerEstimatedCost      The optimizer's estimated cost
1:      */
1: 
1:     WindowResultSet(Activation activation,
1:         NoPutResultSet         source,
0:         GeneratedMethod        rowAllocator,
1:         int                    resultSetNumber,
1:         int                    erdNumber,
1:         GeneratedMethod        restriction,
1:         double                 optimizerEstimatedRowCount,
1:         double                 optimizerEstimatedCost)
1:     {
1: 
1:         super(activation,
1:             resultSetNumber,
1:             optimizerEstimatedRowCount,
1:             optimizerEstimatedCost);
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(activation != null,
1:                                  "activation expected to be non-null");
1:             SanityManager.ASSERT(resultSetNumber >= 0,
1:                                  "resultSetNumber expected to be >= 0");
1:         }
1: 
1:         this.restriction = restriction;
1:         this.source = source;
0:         this.row = rowAllocator;
0:         this.allocatedRow = null;
1:         this.rownumber = 0;
1: 
1:         if (erdNumber != -1) {
1:             this.referencedColumns =
0:                 (FormatableBitSet)(activation.getPreparedStatement().
0:                                    getSavedObject(erdNumber));
1:         }
1: 
1:         recordConstructorTime();
1:     }
1: 
1: 
1:     /**
1:      * Open this ResultSet.
1:      *
1:      * @exception StandardException thrown if cursor finished.
1:      */
1:     public void openCore() throws StandardException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(!isOpen,
1:                 "WindowResultSet already open");
1:         }
1: 
1:         beginTime = getCurrentTimeMillis();
1: 
1:         /* Call into the source openCore() */
1:         source.openCore();
1: 
1:         isOpen = true;
1:         rownumber = 0;
1:         numOpens++;
1:         openTime += getElapsedMillis(beginTime);
1:     }
1: 
1:     /**
1:      * Reopen this ResultSet.
1:      *
1:      * @exception StandardException thrown if cursor finished.
1:      */
1:     public void reopenCore() throws StandardException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(isOpen, "WindowResultSet already open");
1:         }
1: 
1:         beginTime = getCurrentTimeMillis();
1: 
1:         /* Reopen the source */
1:         source.reopenCore();
1: 
1:         rownumber = 0;
1:         numOpens++;
1:         openTime += getElapsedMillis(beginTime);
1:     }
1: 
1:     /**
1:      * Return the requested values computed from the next row (if any) for which
1:      * the restriction evaluates to true.
1:      * <p>
1:      * Restriction and projection parameters are evaluated for each row.
1:      *
1:      * @exception StandardException thrown on failure.
1:      * @exception StandardException ResultSetNotOpen thrown if not yet open.
1:      *
1:      * @return the next row in the result
1:      */
1:     public ExecRow getNextRowCore() throws StandardException
1:     {
1:         ExecRow sourceRow = null;
1:         ExecRow retval = null;
1:         boolean restrict = false;
1:         DataValueDescriptor restrictBoolean;
1:         long beginRT = 0;
1: 
1:         beginTime = getCurrentTimeMillis();
1: 
1:         if (!isOpen) {
1:             throw StandardException.newException(
1:                 SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
1:         }
1: 
1:         /*
1:          * Loop until we get a row from the source that qualifies, or there are
1:          * no more rows to qualify. For each iteration fetch a row from the
1:          * source, and evaluate against the restriction if any.
1:          */
1:         ExecRow tmpRow = null;
1: 
1:         do {
1:             sourceRow = source.getNextRowCore();
1: 
1:             if (sourceRow != null) {
1:                 this.rownumber++;
1:                 tmpRow = getAllocatedRow();
1:                 populateFromSourceRow(sourceRow, tmpRow);
1:                 setCurrentRow(tmpRow);
1: 
1:                 /* Evaluate any restrictions */
1:                 restrictBoolean = (DataValueDescriptor) ((restriction == null) ?
1:                                     null : restriction.invoke(activation));
1: 
1:                 restrictionTime += getElapsedMillis(beginRT);
1: 
1:                 // if the result is null, we make it false --
1:                 // so the row won't be returned.
1:                 restrict = (restrictBoolean == null) ||
1:                     ((!restrictBoolean.isNull()) &&
1:                     restrictBoolean.getBoolean());
1: 
1:                 if (!restrict) {
1:                     rowsFiltered++;
1:                     clearCurrentRow();
1:                 }
1: 
1:                 /* Update the run time statistics */
1:                 rowsSeen++;
1:                 retval = currentRow;
1:             } else {
1:                 clearCurrentRow();
1:                 retval = null;
1:             }
1:         } while ((sourceRow != null) && (!restrict));
1: 
1:         nextTime += getElapsedMillis(beginTime);
1:         return retval;
1:     }
1: 
1:     /**
1:      * If the result set has been opened, close the open scan, else throw.
1:      *
1:      * @exception StandardException thrown on error
1:      */
1:     public void close() throws StandardException {
1:         beginTime = getCurrentTimeMillis();
1: 
1:         if (isOpen) {
1:             clearCurrentRow();
1: 
1:             /*
1:              * Make sure to close the source
1:              */
1:             source.close();
1:             super.close();
1: 
1:         } else if (SanityManager.DEBUG) {
1:             SanityManager.DEBUG("CloseRepeatInfo",
1:                                 "Close of WindowResultSet repeated");
1:         }
1: 
1:         closeTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 
1: 
1:     /**
1:      * Copy columns from srcrow into destrow, or insert ROW_NUMBER.
1:      * <p/>
1:      * <b>FIXME</b>
1:      * This is temporary. Window function treatment needs to generalized to
1:      * work for other window functions.
1:      *
1:      * @exception StandardException thrown on failure to open
1:      */
1:     public void populateFromSourceRow(ExecRow srcrow, ExecRow destrow)
1:         throws StandardException
1:     {
1:         int srcindex = 1;
1: 
1:         try {
1:             DataValueDescriptor[] columns = destrow.getRowArray();
1:             for (int index = 0; index < columns.length; index++) {
1: 
1:                 if (referencedColumns != null &&
1:                         !referencedColumns.get(index)) {
1:                     columns[index].setValue((long)this.rownumber);
1:                 } else {
1:                     destrow.setColumn(index+1, srcrow.getColumn(srcindex));
1:                     srcindex++;
1:                 }
1:             }
1:         } catch (StandardException se) {
1:             throw se;
1:         } catch (Throwable t) {
1:             throw StandardException.unexpectedUserException(t);
1:         }
1:     }
1: 
1:     /**
1:      * Return the total amount of time spent in this ResultSet
1:      *
1:      * @param type  CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:      *          ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:      *
1:      * @return long     The total amount of time spent (in milliseconds).
1:      */
1:     public long getTimeSpent(int type) {
1:         long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1:         if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY) {
1:             return totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:         } else {
1:             return totTime;
1:         }
1:     }
1: 
1:     /**
1:      * Cache the ExecRow for this result set.
1:      *
1:      * @return The cached ExecRow for this ResultSet
1:      *
1:      * @exception StandardException thrown on failure.
1:      */
0:     private ExecRow getAllocatedRow()
0:         throws StandardException {
1: 
0:         if (allocatedRow == null) {
0:             allocatedRow = (ExecRow) row.invoke(activation);
1:         }
1: 
1:         return allocatedRow;
1:     }
1: }
commit:9faef25
commit:3527fd5
/////////////////////////////////////////////////////////////////////////
author:Army
-------------------------------------------------------------------------------
commit:c723732
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.sql.execute.WindowResultSet
0: 
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to you under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0:  * WindowResultSet
0:  * 
0:  * This ResultSet handles a window function ResultSet. 
0:  * The implementation is based on IndexRowToBaseRowResultSet.
0:  * 
0:  * The ResultSet is opened using openCore().  Each row is fetched and any 
0:  * restrictions evaluated for each row in a do-while loop in getNextRowCore().
0:  * The ResultSet is closed using closeCore().
0:  * 
0:  * The WindowResultSet may have any type ResultSet as its source 
0:  * ResultSet to accomodate future window function implementation. 
0:  * Ranking window functions can use an already grouped or ordered 
0:  * resultset as its source.
0:  */
0: class WindowResultSet extends NoPutResultSetImpl 
0: {
0: 	private GeneratedMethod restriction = null;
0: 	private GeneratedMethod row;
0: 	public NoPutResultSet source = null;
0: 	public long restrictionTime;
0: 
0: 	private FormatableBitSet referencedColumns;
0: 	private ExecRow allocatedRow;
0: 	private int rownumber;
0: 	private int level;
0: 	
0: 	/**
0: 	 *  Constructor
0: 	 *
0: 	 *	@param	activation			The activation
0: 	 *	@param	resultSetNumber		The resultSetNumber
0: 	 *  @param	optimizerEstimatedRowCount	The optimizer's estimated number
0: 	 *										of rows.
0: 	 *  @param	optimizerEstimatedCost		The optimizer's estimated cost
0: 	 *  @param  restriction
0: 	 */
0: 	WindowResultSet(Activation activation,
0: 		NoPutResultSet source,
0: 		GeneratedMethod rowAllocator,
0: 		int resultSetNumber,
0: 		int level,
0: 		int erdNumber,		
0: 		GeneratedMethod restriction,
0: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost) {
0: 		super(activation,
0: 			resultSetNumber,
0: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost);
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(activation != null, "activation expected to be non-null");
0: 			SanityManager.ASSERT(resultSetNumber >= 0, "resultSetNumber expected to be >= 0");
0: 			SanityManager.ASSERT(level > 0, "level expected to be > 0");			
0: 		}
0: 		this.restriction = restriction;
0: 		this.source = source;
0: 		this.row = rowAllocator;
0: 		this.allocatedRow = null;
0: 		this.rownumber = 0;
0: 		this.level = level;
0: 		 
0: 		if (erdNumber != -1)
0: 		{
0: 			this.referencedColumns = (FormatableBitSet)(activation.getPreparedStatement().
0: 								getSavedObject(erdNumber));
0: 		}
0: 		
0: 		recordConstructorTime();
0: 	}
0: 
0: 	/**
0: 	 * open this ResultSet.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void openCore() throws StandardException {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(!isOpen,
0: 				"WindowResultSet already open");
0: 		}
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 
0: 		/* Call into the source openCore() */
0: 		source.openCore();
0: 
0: 		isOpen = true;
0: 		rownumber = 0;
0: 		numOpens++;
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * reopen this ResultSet.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void reopenCore() throws StandardException {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(isOpen, "WindowResultSet already open");
0: 		}
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 
0: 		/* Reopen the source */
0: 		source.reopenCore();
0: 
0: 		rownumber = 0;
0: 		numOpens++;
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * Return the requested values computed from the next row (if any) for which
0: 	 * the restriction evaluates to true.
0: 	 * <p>
0: 	 * restriction and projection parameters are evaluated for each row.
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
0: 	 *
0: 	 * @return the next row in the result
0: 	 */
0: 	public ExecRow getNextRowCore() throws StandardException 
0: 	{
0: 		ExecRow sourceRow = null;
0: 		ExecRow retval = null;
0: 		boolean restrict = false;
0: 		DataValueDescriptor restrictBoolean;
0: 		long beginRT = 0;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 		if (!isOpen) {
0: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
0: 		}
0: 
0: 		/*
0: 		 * Loop until we get a row from the source that qualifies, or there are 
0: 		 * no more rows to qualify. For each iteration fetch a row from the 
0: 		 * source, and evaluate against the restriction if any.
0: 		 */
0: 		ExecRow tmpRow = null;
0: 		
0: 		do {			
0: 			sourceRow = source.getNextRowCore();			
0: 			if (sourceRow != null) {
0: 				this.rownumber++;
0: 				tmpRow = getAllocatedRow();
0: 				populateFromSourceRow(sourceRow, tmpRow);						
0: 				setCurrentRow(tmpRow);
0: 
0: 				/* Evaluate any restrictions */
0: 				restrictBoolean = (DataValueDescriptor) ((restriction == null) ? 
0: 									null : restriction.invoke(activation));
0: 
0: 				restrictionTime += getElapsedMillis(beginRT);
0: 
0: 				// if the result is null, we make it false --
0: 				// so the row won't be returned.
0: 				restrict = (restrictBoolean == null) ||
0: 					((!restrictBoolean.isNull()) &&
0: 					restrictBoolean.getBoolean());
0: 
0: 				if (!restrict) {
0: 					rowsFiltered++;
0: 					clearCurrentRow();
0: 				}
0: 
0: 				/* Update the run time statistics */
0: 				rowsSeen++;
0: 				retval = currentRow;
0: 			} else {
0: 				clearCurrentRow();
0: 				retval = null;
0: 			}
0: 		} while ((sourceRow != null) && (!restrict));
0: 
0: 		nextTime += getElapsedMillis(beginTime);
0: 		return retval;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened, close the open scan.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void close() throws StandardException {
0: 		beginTime = getCurrentTimeMillis();
0: 		if (isOpen) {
0: 			clearCurrentRow();
0: 			
0: 			/* 
0: 			 * Make sure to close the source 
0: 			 */
0: 			source.close();
0: 			super.close();
0: 		} else if (SanityManager.DEBUG) {
0: 			SanityManager.DEBUG("CloseRepeatInfo", "Close of WindowResultSet repeated");
0: 		}
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * @exception StandardException thrown on failure to open
0: 	 */
0: 	public void populateFromSourceRow(ExecRow srcrow, ExecRow destrow)
0: 		throws StandardException 
0: 	{		
0: 		int srcindex = 1;
0: 		int levelCnt = 1;
0: 		try {			
0: 			DataValueDescriptor[] columns = destrow.getRowArray();
0: 			for (int index = 0; index < columns.length; index++) {				
0: 				if (referencedColumns != null && (!referencedColumns.get(index))) {
0: 					/* 
0: 					 * TODO: For now any unreferenced columm is a RowNumberColumn 
0: 					 */
0: 					if (levelCnt > this.level){
0: 						/* Value will be added at higher level WindowNode */					
0: 						continue; 
0: 					}
0: 					columns[index].setValue((long)this.rownumber);
0: 					levelCnt++;
0: 				} else {								
0: 					destrow.setColumn(index+1, srcrow.getColumn(srcindex));
0: 					srcindex++;
0: 				}				
0: 			}
0: 		} catch (StandardException se) {
0: 			throw se;
0: 		} catch (Throwable t) {
0: 			throw StandardException.unexpectedUserException(t);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *			ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long	The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type) {
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY) {
0: 			return totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
0: 		} else {
0: 			return totTime;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Cache the ExecRow for this result set.
0: 	 *
0: 	 * @return The cached ExecRow for this ResultSet
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 */
0: 	private ExecRow getAllocatedRow()
0: 		throws StandardException {
0: 		if (allocatedRow == null) {
0: 			allocatedRow = (ExecRow) row.invoke(activation);
0: 		}
0: 
0: 		return allocatedRow;
0: 	}
0: }
0:         
============================================================================