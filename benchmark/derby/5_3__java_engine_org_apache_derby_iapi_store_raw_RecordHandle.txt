1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.RecordHandle
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A handle to a record within a container. This interface does not provide
1:eac0369: 	an information about the data of the record, it is only used to perform
1:eac0369: 	updates, deletes and allow ordered record manipulation.
1:eac0369: 
1:eac0369: 	MT - immutable
1:eac0369: 
1:eac0369: 	@see Page
1:eac0369: */
1:eac0369: 
1:eac0369: public interface RecordHandle extends Lockable {
1:eac0369: 
1:eac0369: 	/*****************************************************************
1:eac0369: 	 * Special record Identifiers.
1:eac0369: 	 *
1:eac0369: 	 * Reserved identifiers that does not represent a row but rather have their
1:eac0369: 	 * own special meaning.  No real rows will ever have these record
1:eac0369: 	 * identifiers.
1:eac0369: 	 *****************************************************************/
1:eac0369: 
1:eac0369: 	/** An invalid record handle */
1:eac0369: 	public static final int INVALID_RECORD_HANDLE = 0;
1:eac0369:  
1:eac0369: 	/**
1:86e051f:      * Reserved for future use - name it and define it when you have a need
1:86e051f:      * to use one.
1:86e051f:      */
1:86e051f: 	public static final int RESERVED1_RECORD_HANDLE = 1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A lock with this recordHandle protects this deallocated page from
1:eac0369: 		being freed and reallocated.  This lock is released when the 
1:eac0369: 		transaction that deallocated the page terminates, at which point 
1:eac0369: 		the page can be freed if the transaction committed.
1:eac0369: 	*/
1:eac0369: 	public static final int DEALLOCATE_PROTECTION_HANDLE = 2;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A lock with this recordHandle is used to lock the range of keys 
1:eac0369:         between the first key in a btree and keys previous to it.
1:eac0369: 	*/
1:eac0369: 	public static final int PREVIOUS_KEY_HANDLE = 3;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Reserve for future use - name it and define it when you have a need to
1:eac0369: 		use one
1:eac0369: 	*/
1:eac0369: 	public static final int RESERVED4_RECORD_HANDLE = 4;
1:eac0369: 	public static final int RESERVED5_RECORD_HANDLE = 5;
1:eac0369: 	
1:eac0369: 	/** 
1:eac0369: 		First recordId that is used to identify a record.
1:eac0369: 	*/
1:eac0369: 	public static final int FIRST_RECORD_ID = 6;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Obtain the page-unique identifier for this record.
1:eac0369: 		This id combined with a page number is guaranteed to be unique
1:eac0369: 		within a container.
1:eac0369: 	*/
1:eac0369: 	public int	getId();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Obtain the page number this record lives on.
1:eac0369: 	*/
1:eac0369: 	public long getPageNumber();
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What slot number might the record be at?
1:eac0369:      * <p>
1:eac0369:      * The raw store guarantees that the record handle of a record will not
1:eac0369:      * change, but it's slot number may.  An implementation of a record handle
1:eac0369:      * may provide a hint of the slot number, which may help routines like
1:eac0369:      * Page.getSlotNumber() perform better.
1:eac0369:      * <p>
1:eac0369:      * If an implementation does not track slot numbers at all the 
1:eac0369:      * implementation should just always return Page.FIRST_SLOT_NUMBER.
1:eac0369:      *
1:eac0369: 	 * @return The slot number the record handle may be at.
1:eac0369:      **/
1:eac0369:     public int getSlotNumberHint();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the identity of my container.
1:eac0369: 	*/
1:eac0369: 	public ContainerKey getContainerId();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the identity of my Page.
1:eac0369: 	*/
1:eac0369: 	public Object getPageId();
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e051f
/////////////////////////////////////////////////////////////////////////
1:      * Reserved for future use - name it and define it when you have a need
1:      * to use one.
1:      */
1: 	public static final int RESERVED1_RECORD_HANDLE = 1;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.RecordHandle
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: 
1: /**
1: 	A handle to a record within a container. This interface does not provide
1: 	an information about the data of the record, it is only used to perform
1: 	updates, deletes and allow ordered record manipulation.
1: 
1: 	MT - immutable
1: 
1: 	@see Page
1: */
1: 
1: public interface RecordHandle extends Lockable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/*****************************************************************
1: 	 * Special record Identifiers.
1: 	 *
1: 	 * Reserved identifiers that does not represent a row but rather have their
1: 	 * own special meaning.  No real rows will ever have these record
1: 	 * identifiers.
1: 	 *****************************************************************/
1: 
1: 	/** An invalid record handle */
1: 	public static final int INVALID_RECORD_HANDLE = 0;
1:  
1: 	/**
0: 		A lock with this recordHandle protects all the recordIds in the page.
0: 		No recordId can disappear while this lock is held. 
0: 		New recordIds may appear while this lock is held.
1: 	*/
0: 	public static final int RECORD_ID_PROTECTION_HANDLE = 1;
1: 
1: 	/**
1: 		A lock with this recordHandle protects this deallocated page from
1: 		being freed and reallocated.  This lock is released when the 
1: 		transaction that deallocated the page terminates, at which point 
1: 		the page can be freed if the transaction committed.
1: 	*/
1: 	public static final int DEALLOCATE_PROTECTION_HANDLE = 2;
1: 
1: 	/**
1: 		A lock with this recordHandle is used to lock the range of keys 
1:         between the first key in a btree and keys previous to it.
1: 	*/
1: 	public static final int PREVIOUS_KEY_HANDLE = 3;
1: 
1: 	/**
1: 		Reserve for future use - name it and define it when you have a need to
1: 		use one
1: 	*/
1: 	public static final int RESERVED4_RECORD_HANDLE = 4;
1: 	public static final int RESERVED5_RECORD_HANDLE = 5;
1: 	
1: 	/** 
1: 		First recordId that is used to identify a record.
1: 	*/
1: 	public static final int FIRST_RECORD_ID = 6;
1: 
1: 	/**
1: 		Obtain the page-unique identifier for this record.
1: 		This id combined with a page number is guaranteed to be unique
1: 		within a container.
1: 	*/
1: 	public int	getId();
1: 
1: 	/**
1: 		Obtain the page number this record lives on.
1: 	*/
1: 	public long getPageNumber();
1: 
1:     /**
1:      * What slot number might the record be at?
1:      * <p>
1:      * The raw store guarantees that the record handle of a record will not
1:      * change, but it's slot number may.  An implementation of a record handle
1:      * may provide a hint of the slot number, which may help routines like
1:      * Page.getSlotNumber() perform better.
1:      * <p>
1:      * If an implementation does not track slot numbers at all the 
1:      * implementation should just always return Page.FIRST_SLOT_NUMBER.
1:      *
1: 	 * @return The slot number the record handle may be at.
1:      **/
1:     public int getSlotNumberHint();
1: 
1: 	/**
1: 		Return the identity of my container.
1: 	*/
1: 	public ContainerKey getContainerId();
1: 
1: 	/**
1: 		Return the identity of my Page.
1: 	*/
1: 	public Object getPageId();
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: 
0: /**
0: 	A handle to a record within a container. This interface does not provide
0: 	an information about the data of the record, it is only used to perform
0: 	updates, deletes and allow ordered record manipulation.
0: 
0: 	MT - immutable
0: 
0: 	@see Page
0: */
0: 
0: public interface RecordHandle extends Lockable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/*****************************************************************
0: 	 * Special record Identifiers.
0: 	 *
0: 	 * Reserved identifiers that does not represent a row but rather have their
0: 	 * own special meaning.  No real rows will ever have these record
0: 	 * identifiers.
0: 	 *****************************************************************/
0: 
0: 	/** An invalid record handle */
0: 	public static final int INVALID_RECORD_HANDLE = 0;
0:  
0: 	/**
0: 		A lock with this recordHandle protects all the recordIds in the page.
0: 		No recordId can disappear while this lock is held. 
0: 		New recordIds may appear while this lock is held.
0: 	*/
0: 	public static final int RECORD_ID_PROTECTION_HANDLE = 1;
0: 
0: 	/**
0: 		A lock with this recordHandle protects this deallocated page from
0: 		being freed and reallocated.  This lock is released when the 
0: 		transaction that deallocated the page terminates, at which point 
0: 		the page can be freed if the transaction committed.
0: 	*/
0: 	public static final int DEALLOCATE_PROTECTION_HANDLE = 2;
0: 
0: 	/**
0: 		A lock with this recordHandle is used to lock the range of keys 
0:         between the first key in a btree and keys previous to it.
0: 	*/
0: 	public static final int PREVIOUS_KEY_HANDLE = 3;
0: 
0: 	/**
0: 		Reserve for future use - name it and define it when you have a need to
0: 		use one
0: 	*/
0: 	public static final int RESERVED4_RECORD_HANDLE = 4;
0: 	public static final int RESERVED5_RECORD_HANDLE = 5;
0: 	
0: 	/** 
0: 		First recordId that is used to identify a record.
0: 	*/
0: 	public static final int FIRST_RECORD_ID = 6;
0: 
0: 	/**
0: 		Obtain the page-unique identifier for this record.
0: 		This id combined with a page number is guaranteed to be unique
0: 		within a container.
0: 	*/
0: 	public int	getId();
0: 
0: 	/**
0: 		Obtain the page number this record lives on.
0: 	*/
0: 	public long getPageNumber();
0: 
0:     /**
0:      * What slot number might the record be at?
0:      * <p>
0:      * The raw store guarantees that the record handle of a record will not
0:      * change, but it's slot number may.  An implementation of a record handle
0:      * may provide a hint of the slot number, which may help routines like
0:      * Page.getSlotNumber() perform better.
0:      * <p>
0:      * If an implementation does not track slot numbers at all the 
0:      * implementation should just always return Page.FIRST_SLOT_NUMBER.
0:      *
0: 	 * @return The slot number the record handle may be at.
0:      **/
0:     public int getSlotNumberHint();
0: 
0: 	/**
0: 		Return the identity of my container.
0: 	*/
0: 	public ContainerKey getContainerId();
0: 
0: 	/**
0: 		Return the identity of my Page.
0: 	*/
0: 	public Object getPageId();
0: 
0: }
============================================================================