1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLLongVarbit
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:18f3f91: import org.apache.derby.iapi.reference.Limits;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
3:eac0369: /**
1:806114c:  * SQLLongVarbit represents the SQL type LONG VARCHAR FOR BIT DATA
1:eac0369:  * It is an extension of SQLVarbit and is virtually indistinguishable
1:eac0369:  * other than normalization.
1:eac0369:  */
1:eac0369: public class SQLLongVarbit extends SQLVarbit
2:eac0369: {
1:eac0369: 
1:eac0369: 	public String getTypeName()
1:eac0369: 	{
1:eac0369: 		return TypeId.LONGVARBIT_NAME;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:b7c1f3b: 	 * Return max memory usage for a SQL LongVarbit
1:b7c1f3b: 	 */
1:b7c1f3b: 	int getMaxMemoryUsage()
1:b7c1f3b: 	{
1:b7c1f3b: 		return Limits.DB2_LONGVARCHAR_MAXWIDTH;
1:b7c1f3b: 	}
1:b7c1f3b: 
1:b7c1f3b: 	/**
1:eac0369: 	 * @see DataValueDescriptor#getNewNull
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369: 	{
1:eac0369: 		return new SQLLongVarbit();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId()
1:eac0369: 	{
1:eac0369: 		return StoredFormatIds.SQL_LONGVARBIT_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Orderable interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Column interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * constructors
1:eac0369: 	 */
1:eac0369: 	public SQLLongVarbit()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SQLLongVarbit(byte[] val)
1:eac0369: 	{
1:eac0369: 		super(val);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Normalization method - this method may be called when putting
1:eac0369: 	 * a value into a SQLVarbit, for example, when inserting into a SQLVarbit
1:eac0369: 	 * column.  See NormalizeResultSet in execution.
3:eac0369: 	 *
1:eac0369: 	 * This overrides SQLBit -- the difference is that we don't
1:eac0369: 	 * expand SQLVarbits to fit the target.
1:eac0369: 	 * 
1:eac0369: 	 * @param desiredType	The type to normalize the source column to
1:eac0369: 	 * @param source		The value to normalize
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException				Thrown for null into
1:eac0369: 	 *											non-nullable column, and for
1:eac0369: 	 *											truncation error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void normalize(
1:eac0369: 				DataTypeDescriptor desiredType,
1:eac0369: 				DataValueDescriptor source)
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (source instanceof SQLLongVarbit) {
1:eac0369: 			// avoid creating an object in memory if a matching type.
1:eac0369: 			// this may be a stream.
1:eac0369: 			SQLLongVarbit other = (SQLLongVarbit) source;
1:eac0369: 			this.stream = other.stream;
1:eac0369: 			this.dataValue = other.dataValue;
1:eac0369: 		}
1:eac0369: 		else
1:806114c: 			setValue(source.getBytes());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** @see DataValueDescriptor#typePrecedence */
1:eac0369: 	public int typePrecedence()
1:eac0369: 	{
1:eac0369: 		return TypeId.LONGVARBIT_PRECEDENCE;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18f3f91
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:b7c1f3b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 	 * Return max memory usage for a SQL LongVarbit
1: 	 */
1: 	int getMaxMemoryUsage()
1: 	{
1: 		return Limits.DB2_LONGVARCHAR_MAXWIDTH;
1: 	}
1: 
1: 	/**
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:806114c
/////////////////////////////////////////////////////////////////////////
1:  * SQLLongVarbit represents the SQL type LONG VARCHAR FOR BIT DATA
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			setValue(source.getBytes());
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLLongVarbit
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.Orderable;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.NumberDataValue;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
1: 
1: /**
0:  * SQLLongVarbit satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements a String holder,
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * SQLLongVarbit can play a role in either a DataType/Value
0:  * or a OrderableDataType/KeyRow, interchangeably.
1:  *
1:  * It is an extension of SQLVarbit and is virtually indistinguishable
1:  * other than normalization.
1:  */
1: public class SQLLongVarbit extends SQLVarbit
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	public String getTypeName()
1: 	{
1: 		return TypeId.LONGVARBIT_NAME;
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
1: 		return new SQLLongVarbit();
1: 	}
1: 
1: 	/** 
0: 	 * @see DataValueDescriptor#setValueFromResultSet 
1: 	 *
0: 	 * @exception SQLException		Thrown on error
1: 	 */
0: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
0: 									  boolean isNullable)
0: 		throws SQLException
1: 	{
0: 			stream = resultSet.getBinaryStream(colNumber);
0: 			dataValue = null;
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId()
1: 	{
1: 		return StoredFormatIds.SQL_LONGVARBIT_ID;
1: 	}
1: 
1: 
1: 	/*
1: 	 * Orderable interface
1: 	 */
1: 
1: 
1: 	/*
1: 	 * Column interface
1: 	 */
1: 
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 	public SQLLongVarbit()
1: 	{
1: 	}
1: 
1: 	public SQLLongVarbit(byte[] val)
1: 	{
1: 		super(val);
1: 	}
1: 
1: 	/**
1: 	 * Normalization method - this method may be called when putting
1: 	 * a value into a SQLVarbit, for example, when inserting into a SQLVarbit
1: 	 * column.  See NormalizeResultSet in execution.
1: 	 *
1: 	 * This overrides SQLBit -- the difference is that we don't
1: 	 * expand SQLVarbits to fit the target.
1: 	 * 
1: 	 * @param desiredType	The type to normalize the source column to
1: 	 * @param source		The value to normalize
1: 	 *
1: 	 *
1: 	 * @exception StandardException				Thrown for null into
1: 	 *											non-nullable column, and for
1: 	 *											truncation error
1: 	 */
1: 
1: 	public void normalize(
1: 				DataTypeDescriptor desiredType,
1: 				DataValueDescriptor source)
1: 					throws StandardException
1: 	{
1: 		if (source instanceof SQLLongVarbit) {
1: 			// avoid creating an object in memory if a matching type.
1: 			// this may be a stream.
1: 			SQLLongVarbit other = (SQLLongVarbit) source;
1: 			this.stream = other.stream;
1: 			this.dataValue = other.dataValue;
1: 		}
1: 		else
0: 			((SQLBinary) this).setValue(source.getBytes());
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/** @see DataValueDescriptor#typePrecedence */
1: 	public int typePrecedence()
1: 	{
1: 		return TypeId.LONGVARBIT_PRECEDENCE;
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.Orderable;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: /**
0:  * SQLLongVarbit satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements a String holder,
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * SQLLongVarbit can play a role in either a DataType/Value
0:  * or a OrderableDataType/KeyRow, interchangeably.
0:  *
0:  * It is an extension of SQLVarbit and is virtually indistinguishable
0:  * other than normalization.
0:  */
0: public class SQLLongVarbit extends SQLVarbit
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	public String getTypeName()
0: 	{
0: 		return TypeId.LONGVARBIT_NAME;
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0: 	{
0: 		return new SQLLongVarbit();
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#setValueFromResultSet 
0: 	 *
0: 	 * @exception SQLException		Thrown on error
0: 	 */
0: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
0: 									  boolean isNullable)
0: 		throws SQLException
0: 	{
0: 			stream = resultSet.getBinaryStream(colNumber);
0: 			dataValue = null;
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId()
0: 	{
0: 		return StoredFormatIds.SQL_LONGVARBIT_ID;
0: 	}
0: 
0: 
0: 	/*
0: 	 * Orderable interface
0: 	 */
0: 
0: 
0: 	/*
0: 	 * Column interface
0: 	 */
0: 
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 
0: 	/*
0: 	 * constructors
0: 	 */
0: 	public SQLLongVarbit()
0: 	{
0: 	}
0: 
0: 	public SQLLongVarbit(byte[] val)
0: 	{
0: 		super(val);
0: 	}
0: 
0: 	/**
0: 	 * Normalization method - this method may be called when putting
0: 	 * a value into a SQLVarbit, for example, when inserting into a SQLVarbit
0: 	 * column.  See NormalizeResultSet in execution.
0: 	 *
0: 	 * This overrides SQLBit -- the difference is that we don't
0: 	 * expand SQLVarbits to fit the target.
0: 	 * 
0: 	 * @param desiredType	The type to normalize the source column to
0: 	 * @param source		The value to normalize
0: 	 *
0: 	 *
0: 	 * @exception StandardException				Thrown for null into
0: 	 *											non-nullable column, and for
0: 	 *											truncation error
0: 	 */
0: 
0: 	public void normalize(
0: 				DataTypeDescriptor desiredType,
0: 				DataValueDescriptor source)
0: 					throws StandardException
0: 	{
0: 		if (source instanceof SQLLongVarbit) {
0: 			// avoid creating an object in memory if a matching type.
0: 			// this may be a stream.
0: 			SQLLongVarbit other = (SQLLongVarbit) source;
0: 			this.stream = other.stream;
0: 			this.dataValue = other.dataValue;
0: 		}
0: 		else
0: 			((SQLBinary) this).setValue(source.getBytes());
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#typePrecedence */
0: 	public int typePrecedence()
0: 	{
0: 		return TypeId.LONGVARBIT_PRECEDENCE;
0: 	}
0: }
============================================================================