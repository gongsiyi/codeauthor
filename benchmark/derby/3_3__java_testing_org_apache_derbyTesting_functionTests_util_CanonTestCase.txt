1:d2b9c54: /*
1:d2b9c54:  *
1:d2b9c54:  * Derby - Class org.apache.derbyTesting.functionTests.util.CanonTestCase
1:d2b9c54:  *
1:d2b9c54:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d2b9c54:  * contributor license agreements.  See the NOTICE file distributed with
1:d2b9c54:  * this work for additional information regarding copyright ownership.
1:d2b9c54:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d2b9c54:  * (the "License"); you may not use this file except in compliance with
1:d2b9c54:  * the License.  You may obtain a copy of the License at
1:d2b9c54:  *
1:d2b9c54:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d2b9c54:  *
1:d2b9c54:  * Unless required by applicable law or agreed to in writing, 
1:d2b9c54:  * software distributed under the License is distributed on an 
1:d2b9c54:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:d2b9c54:  * either express or implied. See the License for the specific 
1:d2b9c54:  * language governing permissions and limitations under the License.
1:d2b9c54:  */
1:d2b9c54: package org.apache.derbyTesting.functionTests.util;
5:d2b9c54: 
1:d2b9c54: import java.io.BufferedReader;
1:d2b9c54: import java.io.ByteArrayInputStream;
1:d2b9c54: import java.io.ByteArrayOutputStream;
1:d2b9c54: import java.io.File;
1:d2b9c54: import java.io.FileOutputStream;
1:d2b9c54: import java.io.IOException;
1:d2b9c54: import java.io.InputStream;
1:d2b9c54: import java.io.InputStreamReader;
1:d2b9c54: import java.io.OutputStream;
1:d2b9c54: import java.net.URL;
1:d2b9c54: import java.security.AccessController;
1:d2b9c54: import java.security.PrivilegedActionException;
1:3f5c48a: import java.security.PrivilegedExceptionAction;
1:d2b9c54: 
1:d2b9c54: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:d2b9c54: 
1:d2b9c54: /**
1:d2b9c54:  * Run a test that compares itself to a master (canon) file.
1:d2b9c54:  * This is used to support cannon based tests that ran
1:d2b9c54:  * under the old Derby test harness without having to convert
1:d2b9c54:  * them. It is not recommended for new tests. New test should
1:d2b9c54:  * use the JUnit assert mechanisms.
1:d2b9c54:  *
1:d2b9c54:  */
1:d2b9c54: abstract class CanonTestCase extends BaseJDBCTestCase {
1:d2b9c54: 
1:617d53c:     final static String DEFAULT_ENCODING = "US-ASCII";
1:617d53c:     final String outputEncoding;
1:d2b9c54: 
1:d2b9c54:     private ByteArrayOutputStream rawBytes;
1:d2b9c54: 
1:d2b9c54:     CanonTestCase(String name) {
1:617d53c:         this(name, null);
1:617d53c:     }
1:617d53c: 
1:617d53c:     CanonTestCase(String name, String encoding) {
1:d2b9c54:         super(name);
1:617d53c:         outputEncoding = (encoding == null) ? DEFAULT_ENCODING : encoding;
2:d2b9c54:     }
1:3340231: 
1:d2b9c54:     OutputStream getOutputStream() {
1:d2b9c54:         return rawBytes = new ByteArrayOutputStream(20 * 1024);
1:d2b9c54:     }
1:d2b9c54: 
1:d2b9c54:     /**
1:d2b9c54:      * Compare the output to the canon provided.
1:d2b9c54:      * 
1:d2b9c54:      * @param canon
1:d2b9c54:      *            Name of canon as a resource.
1:d2b9c54:      */
1:d2b9c54:     void compareCanon(String canon) throws Throwable {
1:d2b9c54:         rawBytes.flush();
1:d2b9c54:         rawBytes.close();
1:d2b9c54: 
1:d2b9c54:         byte[] testRawBytes = rawBytes.toByteArray();
1:3340231:         rawBytes = null;
1:52694e5:         BufferedReader cannonReader = null;
1:52694e5:         BufferedReader testOutput = null;
1:d2b9c54: 
1:d2b9c54:         try {
1:d2b9c54:             URL canonURL = getTestResource(canon);
1:d2b9c54:             assertNotNull("No master file " + canon, canonURL);
1:d2b9c54: 
1:d2b9c54:             InputStream canonStream = openTestResource(canonURL);
1:d2b9c54: 
1:52694e5:             cannonReader = new BufferedReader(
1:d2b9c54:                     new InputStreamReader(canonStream, outputEncoding));
1:d2b9c54: 
1:52694e5:             testOutput = new BufferedReader(
1:d2b9c54:                     new InputStreamReader(
1:d2b9c54:                             new ByteArrayInputStream(testRawBytes),
1:d2b9c54:                             outputEncoding));
1:d2b9c54: 
1:d2b9c54:             for (int lineNumber = 1;; lineNumber++) {
1:d2b9c54:                 String testLine = testOutput.readLine();
1:d2b9c54: 
1:d2b9c54:                 String canonLine = cannonReader.readLine();
1:d2b9c54: 
1:d2b9c54:                 if (canonLine == null && testLine == null)
1:d2b9c54:                     break;
1:d2b9c54: 
1:d2b9c54:                 if (canonLine == null)
1:d2b9c54:                     fail("More output from test than expected");
1:d2b9c54: 
1:d2b9c54:                 if (testLine == null)
1:d2b9c54:                     fail("Less output from test than expected, stoped at line"
1:d2b9c54:                             + lineNumber);
1:d2b9c54: 
1:d2b9c54:                 assertEquals("Output at line " + lineNumber, canonLine,
1:d2b9c54:                         testLine);
1:d2b9c54:             }
1:d2b9c54:         } catch (Throwable t) {
1:d2b9c54:             dumpForFail(testRawBytes);
1:d2b9c54:             throw t;
1:52694e5:         } finally {
1:52694e5:             if (cannonReader != null) {
1:52694e5:                 try {
1:52694e5:                     cannonReader.close();
1:52694e5:                 } catch (IOException e) {
1:52694e5:                 }
1:52694e5:             }
1:52694e5:             
1:52694e5:             if (testOutput != null) {
1:52694e5:                 try {
1:52694e5:                     testOutput.close();
1:52694e5:                 } catch (IOException e) {
1:52694e5:                 }
1:52694e5:             }
1:d2b9c54:         }
1:d2b9c54:     }
1:d2b9c54: 
1:d2b9c54:     /**
1:d2b9c54:      * Dump the output that did not compare correctly into the failure folder
1:d2b9c54:      * with the name this.getName() + ".out".
1:d2b9c54:      * 
1:d2b9c54:      * @param rawOutput
1:d2b9c54:      * @throws IOException
1:d2b9c54:      * @throws PrivilegedActionException
1:d2b9c54:      */
1:d2b9c54:     private void dumpForFail(byte[] rawOutput) throws IOException,
1:d2b9c54:             PrivilegedActionException {
1:d2b9c54: 
1:d2b9c54:         File folder = getFailureFolder();
1:d2b9c54:         final File outFile = new File(folder, getName() + ".out");
1:d2b9c54: 
1:3f5c48a:         OutputStream outStream = AccessController
1:3f5c48a:                 .doPrivileged(new PrivilegedExceptionAction<OutputStream>() {
1:3f5c48a:                     public OutputStream run() throws IOException {
1:d2b9c54:                         return new FileOutputStream(outFile);
1:d2b9c54:                     }
1:d2b9c54:                 });
1:d2b9c54: 
1:d2b9c54:         outStream.write(rawOutput);
1:d2b9c54:         outStream.flush();
1:d2b9c54:         outStream.close();
1:3340231:     }
1:d2b9c54: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:         OutputStream outStream = AccessController
1:                 .doPrivileged(new PrivilegedExceptionAction<OutputStream>() {
1:                     public OutputStream run() throws IOException {
commit:617d53c
/////////////////////////////////////////////////////////////////////////
1:     final static String DEFAULT_ENCODING = "US-ASCII";
1:     final String outputEncoding;
1:         this(name, null);
1:     }
1: 
1:     CanonTestCase(String name, String encoding) {
1:         outputEncoding = (encoding == null) ? DEFAULT_ENCODING : encoding;
commit:3340231
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected void tearDown() throws Exception {
1:         rawBytes = null;
0:         super.tearDown();
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:52694e5
/////////////////////////////////////////////////////////////////////////
0:         rawBytes = null;
1:         BufferedReader cannonReader = null;
1:         BufferedReader testOutput = null;
/////////////////////////////////////////////////////////////////////////
1:             cannonReader = new BufferedReader(
1:             testOutput = new BufferedReader(
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             if (cannonReader != null) {
1:                 try {
1:                     cannonReader.close();
1:                 } catch (IOException e) {
1:                 }
1:             }
1:             
1:             if (testOutput != null) {
1:                 try {
1:                     testOutput.close();
1:                 } catch (IOException e) {
1:                 }
1:             }
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:49213fe
/////////////////////////////////////////////////////////////////////////
commit:d2b9c54
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.CanonTestCase
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.BufferedReader;
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.OutputStream;
1: import java.net.URL;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: /**
1:  * Run a test that compares itself to a master (canon) file.
1:  * This is used to support cannon based tests that ran
1:  * under the old Derby test harness without having to convert
1:  * them. It is not recommended for new tests. New test should
1:  * use the JUnit assert mechanisms.
1:  *
1:  */
1: abstract class CanonTestCase extends BaseJDBCTestCase {
1: 
0:     final String outputEncoding = "US-ASCII";
1: 
1:     private ByteArrayOutputStream rawBytes;
1: 
1:     CanonTestCase(String name) {
1:         super(name);
1:     }
1: 
1:     OutputStream getOutputStream() {
1:         return rawBytes = new ByteArrayOutputStream(20 * 1024);
1:     }
1: 
1:     /**
1:      * Compare the output to the canon provided.
1:      * 
1:      * @param canon
1:      *            Name of canon as a resource.
1:      */
1:     void compareCanon(String canon) throws Throwable {
1:         rawBytes.flush();
1:         rawBytes.close();
1: 
1:         byte[] testRawBytes = rawBytes.toByteArray();
1: 
1:         try {
1:             URL canonURL = getTestResource(canon);
1:             assertNotNull("No master file " + canon, canonURL);
1: 
1:             InputStream canonStream = openTestResource(canonURL);
1: 
0:             BufferedReader cannonReader = new BufferedReader(
1:                     new InputStreamReader(canonStream, outputEncoding));
1: 
0:             BufferedReader testOutput = new BufferedReader(
1:                     new InputStreamReader(
1:                             new ByteArrayInputStream(testRawBytes),
1:                             outputEncoding));
1: 
1:             for (int lineNumber = 1;; lineNumber++) {
1:                 String testLine = testOutput.readLine();
1: 
0:                 // Skip blank lines.
0:                 if ("".equals(testLine))
0:                     continue;
1: 
1:                 String canonLine = cannonReader.readLine();
1: 
1:                 if (canonLine == null && testLine == null)
1:                     break;
1: 
1:                 if (canonLine == null)
1:                     fail("More output from test than expected");
1: 
1:                 if (testLine == null)
1:                     fail("Less output from test than expected, stoped at line"
1:                             + lineNumber);
1: 
1:                 assertEquals("Output at line " + lineNumber, canonLine,
1:                         testLine);
1:             }
1: 
0:             cannonReader.close();
0:             testOutput.close();
1:         } catch (Throwable t) {
1:             dumpForFail(testRawBytes);
1:             throw t;
1:         }
1:     }
1: 
1:     /**
1:      * Dump the output that did not compare correctly into the failure folder
1:      * with the name this.getName() + ".out".
1:      * 
1:      * @param rawOutput
1:      * @throws IOException
1:      * @throws PrivilegedActionException
1:      */
1:     private void dumpForFail(byte[] rawOutput) throws IOException,
1:             PrivilegedActionException {
1: 
1:         File folder = getFailureFolder();
1:         final File outFile = new File(folder, getName() + ".out");
1: 
0:         OutputStream outStream = (OutputStream) AccessController
0:                 .doPrivileged(new java.security.PrivilegedExceptionAction() {
1: 
0:                     public Object run() throws IOException {
1:                         return new FileOutputStream(outFile);
1:                     }
1:                 });
1: 
1:         outStream.write(rawOutput);
1:         outStream.flush();
1:         outStream.close();
1:     }
1: }
============================================================================