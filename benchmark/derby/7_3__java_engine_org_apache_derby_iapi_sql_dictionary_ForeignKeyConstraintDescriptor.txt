1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:201c012: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
1:68e6825: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A foreign key.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class ForeignKeyConstraintDescriptor extends KeyConstraintDescriptor
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	   interface to this descriptor
2:eac0369: 	   <ol>
1:eac0369: 	   <li>public ReferencedKeyConstraintDescriptor getReferencedConstraint()
1:eac0369: 	   throws StandardException;
1:eac0369: 	   <li>public UUID getReferencedConstraintId()  
1:eac0369: 	   throws StandardException;
1:eac0369: 	   <li>public boolean isSelfReferencingFK()
1:eac0369: 	   throws StandardException;
1:68e6825: 	   </ol>
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// Implementation
1:eac0369: 	ReferencedKeyConstraintDescriptor	referencedConstraintDescriptor;
1:eac0369: 	UUID								referencedConstraintId;
1:eac0369: 	int                                 raDeleteRule;
1:eac0369: 	int                                 raUpdateRule;
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a ForeignKeyConstraintDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1:eac0369: 	 * @param table		The descriptor of the table the constraint is on
1:eac0369: 	 * @param constraintName	The name of the constraint.
1:eac0369: 	 * @param deferrable		If the constraint can be deferred.
1:eac0369: 	 * @param initiallyDeferred If the constraint starts life deferred.
1:eac0369: 	 * @param fkColumns 			columns in the foreign key
1:eac0369: 	 * @param constraintId		UUID of constraint
1:eac0369: 	 * @param indexId			The UUID for the backing index
1:eac0369: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
1:eac0369: 	 * @param referencedConstraintDescriptor	is referenced constraint descriptor
1:09bee7d:      * @param enforced          is the constraint enforced?
1:68e6825:      * @param raDeleteRule      The {@code ON DELETE} action rule
1:68e6825:      * @param raUpdateRule      The {@code ON UPDATE} action rule
1:eac0369: 	 */
1:eac0369: 	protected ForeignKeyConstraintDescriptor(
1:eac0369: 		    DataDictionary dataDictionary,
1:eac0369: 			TableDescriptor table,
1:eac0369: 			String constraintName,
1:eac0369: 			boolean deferrable,
1:eac0369: 			boolean initiallyDeferred,
1:eac0369: 			int[] fkColumns,
1:eac0369: 			UUID constraintId,
1:eac0369: 			UUID indexId,
1:eac0369: 			SchemaDescriptor schemaDesc,
1:eac0369: 			ReferencedKeyConstraintDescriptor referencedConstraintDescriptor,
1:09bee7d:             boolean enforced,
1:eac0369: 			int raDeleteRule,
1:eac0369: 			int raUpdateRule
1:eac0369: 			)							
1:eac0369: 	{
1:eac0369: 		super(dataDictionary, table, constraintName, deferrable,
1:eac0369: 			  initiallyDeferred, fkColumns,
1:09bee7d:               constraintId, indexId, schemaDesc, enforced);
1:eac0369: 
1:eac0369: 		this.referencedConstraintDescriptor = referencedConstraintDescriptor;
1:eac0369: 		this.raDeleteRule = raDeleteRule;
1:eac0369: 		this.raUpdateRule = raUpdateRule;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a ForeignKeyConstraintDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1:eac0369: 	 * @param table		The descriptor of the table the constraint is on
1:eac0369: 	 * @param constraintName	The name of the constraint.
1:eac0369: 	 * @param deferrable		If the constraint can be deferred.
1:eac0369: 	 * @param initiallyDeferred If the constraint starts life deferred.
1:eac0369: 	 * @param fkColumns 			columns in the foreign key
1:eac0369: 	 * @param constraintId		UUID of constraint
1:eac0369: 	 * @param indexId			The UUID for the backing index
1:eac0369: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
1:eac0369: 	 * @param referencedConstraintId	is referenced constraint id
1:09bee7d:      * @param enforced          {@code true} if this constraint is enforced
1:68e6825:      * @param raDeleteRule      The {@code ON DELETE} action rule 
1:68e6825:      * @param raUpdateRule      The {@code ON UPDATE} action rule 
1:eac0369: 	 */
1:eac0369: 	ForeignKeyConstraintDescriptor(
1:eac0369: 		    DataDictionary dataDictionary,
1:eac0369: 			TableDescriptor table,
1:eac0369: 			String constraintName,
1:eac0369: 			boolean deferrable,
1:eac0369: 			boolean initiallyDeferred,
1:eac0369: 			int[] fkColumns,
1:eac0369: 			UUID constraintId,
1:eac0369: 			UUID indexId,
1:eac0369: 			SchemaDescriptor schemaDesc,
1:eac0369: 			UUID referencedConstraintId,
1:09bee7d:             boolean enforced,
1:eac0369: 			int raDeleteRule,
1:eac0369: 			int raUpdateRule
1:eac0369: 			)							
1:eac0369: 	{
1:eac0369: 		super(dataDictionary, table, constraintName, deferrable,
1:eac0369: 			  initiallyDeferred, fkColumns,
1:09bee7d:               constraintId, indexId, schemaDesc, enforced);
1:eac0369: 		this.referencedConstraintId = referencedConstraintId;
1:eac0369: 		this.raDeleteRule = raDeleteRule;
1:eac0369: 		this.raUpdateRule = raUpdateRule;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the constraint that this FK references.  Will
1:68e6825: 	 * return either a primary key or a unique key constraint.
1:eac0369: 	 *
1:eac0369: 	 * @return	the constraint
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public ReferencedKeyConstraintDescriptor getReferencedConstraint() 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (referencedConstraintDescriptor != null)
1:eac0369: 		{
1:eac0369: 			return referencedConstraintDescriptor;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (referencedConstraintId == null)
1:eac0369: 		{
1:eac0369: 			getReferencedConstraintId();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		TableDescriptor refTd = getDataDictionary().getConstraintTableDescriptor(referencedConstraintId);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (refTd == null)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("not able to find "+referencedConstraintId+
1:eac0369: 							" in SYS.SYSCONSTRAINTS");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ConstraintDescriptorList cdl = getDataDictionary().getConstraintDescriptors(refTd);
1:eac0369: 		referencedConstraintDescriptor = (ReferencedKeyConstraintDescriptor)
1:eac0369: 									cdl.getConstraintDescriptorById(referencedConstraintId);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (referencedConstraintDescriptor == null)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("not able to find "
1:eac0369: 					+referencedConstraintDescriptor+ " off of table descriptor "
1:eac0369: 					+refTd.getName());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return referencedConstraintDescriptor;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the constraint id for the constraint that this FK references.  
1:eac0369: 	 * Will return either a primary key or a unique key constriant.
1:eac0369: 	 *
1:eac0369: 	 * @return	the constraint id
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public UUID getReferencedConstraintId()  throws StandardException
1:eac0369: 	{
1:eac0369: 		if (referencedConstraintDescriptor != null)
1:eac0369: 		{
1:eac0369: 			return referencedConstraintDescriptor.getUUID();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		SubKeyConstraintDescriptor subKey;
1:eac0369: 		subKey = getDataDictionary().getSubKeyConstraint(constraintId,
1:eac0369: 										DataDictionary.FOREIGNKEY_CONSTRAINT);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (subKey == null)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("not able to find "+constraintName+
1:eac0369: 							" in SYS.SYSFOREIGNKEYS");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		referencedConstraintId = subKey.getKeyConstraintId();
1:eac0369: 		return referencedConstraintId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets an identifier telling what type of descriptor it is
1:eac0369: 	 * (UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1:eac0369: 	 *
1:eac0369: 	 * @return	An identifier telling what type of descriptor it is
1:eac0369: 	 *		(UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1:eac0369: 	 */
1:68e6825:     @Override
1:eac0369: 	public int	getConstraintType()
1:eac0369: 	{
1:eac0369: 		return DataDictionary.FOREIGNKEY_CONSTRAINT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this constraint need to fire on this type of
1:eac0369: 	 * DML?  True if insert or update and columns intersect
1:eac0369: 	 *
1:6b50965: 	 * @param stmtType	the type of DML 
1:eac0369: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
1:eac0369: 	 * @param modifiedCols	the columns modified, or null for all
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:68e6825:     @Override
1:eac0369: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** If we are disabled, we never fire
1:eac0369: 		*/
1:09bee7d:         if (!enforced())
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (stmtType == StatementType.DELETE)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 		if (stmtType == StatementType.INSERT)
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// if update, only relevant if columns intersect
1:eac0369: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Am I a self-referencing FK?  True if my referenced
1:eac0369: 	 * constraint is on the same table as me.
1:eac0369: 	 *
1:eac0369: 	 * @return	true/false
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public boolean isSelfReferencingFK()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ReferencedKeyConstraintDescriptor refcd = getReferencedConstraint();
1:eac0369: 		return (refcd.getTableId().equals(getTableId()));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets a referential action rule on a  DELETE
1:eac0369: 	 * @return referential rule defined by the user during foreign key creattion
1:eac0369: 	 * for a delete (like CASCDE , RESTRICT ..etc)
1:eac0369: 	 */
1:eac0369: 	public int	getRaDeleteRule()
1:eac0369: 	{
1:eac0369: 		return raDeleteRule;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Gets a referential action rule on a UPDATE
1:eac0369: 	 * @return referential rule defined by the user during foreign key creattion
1:eac0369: 	 * for an UPDATE (like CASCDE , RESTRICT ..etc)
1:eac0369: 	 */
1:eac0369: 	public int	getRaUpdateRule()
1:eac0369: 	{
1:eac0369: 		return raUpdateRule;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:68e6825
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 	   </ol>
/////////////////////////////////////////////////////////////////////////
1:      * @param raDeleteRule      The {@code ON DELETE} action rule
1:      * @param raUpdateRule      The {@code ON UPDATE} action rule
/////////////////////////////////////////////////////////////////////////
1:      * @param raDeleteRule      The {@code ON DELETE} action rule 
1:      * @param raUpdateRule      The {@code ON UPDATE} action rule 
/////////////////////////////////////////////////////////////////////////
1: 	 * return either a primary key or a unique key constraint.
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:      * @param enforced          is the constraint enforced?
/////////////////////////////////////////////////////////////////////////
1:             boolean enforced,
1:               constraintId, indexId, schemaDesc, enforced);
/////////////////////////////////////////////////////////////////////////
1:      * @param enforced          {@code true} if this constraint is enforced
/////////////////////////////////////////////////////////////////////////
1:             boolean enforced,
1:               constraintId, indexId, schemaDesc, enforced);
/////////////////////////////////////////////////////////////////////////
1:         if (!enforced())
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:201c012
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Dependency;
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * A foreign key.
1:  *
0:  * @author Jamie
1:  */
1: public class ForeignKeyConstraintDescriptor extends KeyConstraintDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	   interface to this descriptor
1: 	   <ol>
1: 	   <li>public ReferencedKeyConstraintDescriptor getReferencedConstraint()
1: 	   throws StandardException;
1: 	   <li>public UUID getReferencedConstraintId()  
1: 	   throws StandardException;
1: 	   <li>public boolean isSelfReferencingFK()
1: 	   throws StandardException;
1: 	   <ol>
1: 	*/
1: 
1: 	// Implementation
1: 	ReferencedKeyConstraintDescriptor	referencedConstraintDescriptor;
1: 	UUID								referencedConstraintId;
1: 	int                                 raDeleteRule;
1: 	int                                 raUpdateRule;
1: 	/**
1: 	 * Constructor for a ForeignKeyConstraintDescriptor
1: 	 *
1: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1: 	 * @param table		The descriptor of the table the constraint is on
1: 	 * @param constraintName	The name of the constraint.
1: 	 * @param deferrable		If the constraint can be deferred.
1: 	 * @param initiallyDeferred If the constraint starts life deferred.
1: 	 * @param fkColumns 			columns in the foreign key
1: 	 * @param constraintId		UUID of constraint
1: 	 * @param indexId			The UUID for the backing index
1: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
1: 	 * @param referencedConstraintDescriptor	is referenced constraint descriptor
0: 	 * @param isEnabled			is the constraint enabled?
1: 	 */
1: 	protected ForeignKeyConstraintDescriptor(
1: 		    DataDictionary dataDictionary,
1: 			TableDescriptor table,
1: 			String constraintName,
1: 			boolean deferrable,
1: 			boolean initiallyDeferred,
1: 			int[] fkColumns,
1: 			UUID constraintId,
1: 			UUID indexId,
1: 			SchemaDescriptor schemaDesc,
1: 			ReferencedKeyConstraintDescriptor referencedConstraintDescriptor,
0: 			boolean isEnabled,
1: 			int raDeleteRule,
1: 			int raUpdateRule
1: 			)							
1: 	{
1: 		super(dataDictionary, table, constraintName, deferrable,
1: 			  initiallyDeferred, fkColumns,
0: 			  constraintId, indexId, schemaDesc, isEnabled);
1: 
1: 		this.referencedConstraintDescriptor = referencedConstraintDescriptor;
1: 		this.raDeleteRule = raDeleteRule;
1: 		this.raUpdateRule = raUpdateRule;
1: 	}
1: 
1: 	/**
1: 	 * Constructor for a ForeignKeyConstraintDescriptor
1: 	 *
1: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1: 	 * @param table		The descriptor of the table the constraint is on
1: 	 * @param constraintName	The name of the constraint.
1: 	 * @param deferrable		If the constraint can be deferred.
1: 	 * @param initiallyDeferred If the constraint starts life deferred.
1: 	 * @param fkColumns 			columns in the foreign key
1: 	 * @param constraintId		UUID of constraint
1: 	 * @param indexId			The UUID for the backing index
1: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
1: 	 * @param referencedConstraintId	is referenced constraint id
0: 	 * @param isEnabled			is the constraint enabled?
1: 	 */
1: 	ForeignKeyConstraintDescriptor(
1: 		    DataDictionary dataDictionary,
1: 			TableDescriptor table,
1: 			String constraintName,
1: 			boolean deferrable,
1: 			boolean initiallyDeferred,
1: 			int[] fkColumns,
1: 			UUID constraintId,
1: 			UUID indexId,
1: 			SchemaDescriptor schemaDesc,
1: 			UUID referencedConstraintId,
0: 			boolean isEnabled,
1: 			int raDeleteRule,
1: 			int raUpdateRule
1: 			)							
1: 	{
1: 		super(dataDictionary, table, constraintName, deferrable,
1: 			  initiallyDeferred, fkColumns,
0: 			  constraintId, indexId, schemaDesc, isEnabled);
1: 		this.referencedConstraintId = referencedConstraintId;
1: 		this.raDeleteRule = raDeleteRule;
1: 		this.raUpdateRule = raUpdateRule;
1: 
1: 	}
1: 
1: 	/**
1: 	 * Get the constraint that this FK references.  Will
0: 	 * return either a primary key or a unique key constriant.
1: 	 *
1: 	 * @return	the constraint
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public ReferencedKeyConstraintDescriptor getReferencedConstraint() 
1: 		throws StandardException
1: 	{
1: 		if (referencedConstraintDescriptor != null)
1: 		{
1: 			return referencedConstraintDescriptor;
1: 		}
1: 
1: 		if (referencedConstraintId == null)
1: 		{
1: 			getReferencedConstraintId();
1: 		}
1: 
1: 		TableDescriptor refTd = getDataDictionary().getConstraintTableDescriptor(referencedConstraintId);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (refTd == null)
1: 			{
1: 				SanityManager.THROWASSERT("not able to find "+referencedConstraintId+
1: 							" in SYS.SYSCONSTRAINTS");
1: 			}
1: 		}
1: 
1: 		ConstraintDescriptorList cdl = getDataDictionary().getConstraintDescriptors(refTd);
1: 		referencedConstraintDescriptor = (ReferencedKeyConstraintDescriptor)
1: 									cdl.getConstraintDescriptorById(referencedConstraintId);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (referencedConstraintDescriptor == null)
1: 			{
1: 				SanityManager.THROWASSERT("not able to find "
1: 					+referencedConstraintDescriptor+ " off of table descriptor "
1: 					+refTd.getName());
1: 			}
1: 		}
1: 
1: 		return referencedConstraintDescriptor;
1: 	}
1: 
1: 	
1: 	/**
1: 	 * Get the constraint id for the constraint that this FK references.  
1: 	 * Will return either a primary key or a unique key constriant.
1: 	 *
1: 	 * @return	the constraint id
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public UUID getReferencedConstraintId()  throws StandardException
1: 	{
1: 		if (referencedConstraintDescriptor != null)
1: 		{
1: 			return referencedConstraintDescriptor.getUUID();
1: 		}
1: 
1: 		SubKeyConstraintDescriptor subKey;
1: 		subKey = getDataDictionary().getSubKeyConstraint(constraintId,
1: 										DataDictionary.FOREIGNKEY_CONSTRAINT);
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (subKey == null)
1: 			{
1: 				SanityManager.THROWASSERT("not able to find "+constraintName+
1: 							" in SYS.SYSFOREIGNKEYS");
1: 			}
1: 		}
1: 		referencedConstraintId = subKey.getKeyConstraintId();
1: 		return referencedConstraintId;
1: 	}
1: 
1: 	/**
1: 	 * Gets an identifier telling what type of descriptor it is
1: 	 * (UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1: 	 *
1: 	 * @return	An identifier telling what type of descriptor it is
1: 	 *		(UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
1: 	 */
1: 	public int	getConstraintType()
1: 	{
1: 		return DataDictionary.FOREIGNKEY_CONSTRAINT;
1: 	}
1: 
1: 	/**
1: 	 * Does this constraint need to fire on this type of
1: 	 * DML?  True if insert or update and columns intersect
1: 	 *
0: 	 * @param dmlType	the type of DML 
1: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
1: 	 * @param modifiedCols	the columns modified, or null for all
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
1: 	{
1: 		/*
1: 		** If we are disabled, we never fire
1: 		*/
0: 		if (!isEnabled)
1: 		{
1: 			return false;
1: 		}
1: 
1: 		if (stmtType == StatementType.DELETE)
1: 		{
1: 			return false;
1: 		}
1: 		if (stmtType == StatementType.INSERT)
1: 		{
1: 			return true;
1: 		}
1: 
1: 		// if update, only relevant if columns intersect
1: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
1: 	}
1: 
1: 	/**
1: 	 * Am I a self-referencing FK?  True if my referenced
1: 	 * constraint is on the same table as me.
1: 	 *
1: 	 * @return	true/false
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public boolean isSelfReferencingFK()
1: 		throws StandardException
1: 	{
1: 		ReferencedKeyConstraintDescriptor refcd = getReferencedConstraint();
1: 		return (refcd.getTableId().equals(getTableId()));
1: 	}
1: 
1: 	/**
1: 	 * Gets a referential action rule on a  DELETE
1: 	 * @return referential rule defined by the user during foreign key creattion
1: 	 * for a delete (like CASCDE , RESTRICT ..etc)
1: 	 */
1: 	public int	getRaDeleteRule()
1: 	{
1: 		return raDeleteRule;
1: 	}
1: 	
1: 	
1: 	/**
1: 	 * Gets a referential action rule on a UPDATE
1: 	 * @return referential rule defined by the user during foreign key creattion
1: 	 * for an UPDATE (like CASCDE , RESTRICT ..etc)
1: 	 */
1: 	public int	getRaUpdateRule()
1: 	{
1: 		return raUpdateRule;
1: 	}
1: 	
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param stmtType	the type of DML 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Dependency;
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * A foreign key.
0:  *
0:  * @author Jamie
0:  */
0: public class ForeignKeyConstraintDescriptor extends KeyConstraintDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	   interface to this descriptor
0: 	   <ol>
0: 	   <li>public ReferencedKeyConstraintDescriptor getReferencedConstraint()
0: 	   throws StandardException;
0: 	   <li>public UUID getReferencedConstraintId()  
0: 	   throws StandardException;
0: 	   <li>public boolean isSelfReferencingFK()
0: 	   throws StandardException;
0: 	   <ol>
0: 	*/
0: 
0: 	// Implementation
0: 	ReferencedKeyConstraintDescriptor	referencedConstraintDescriptor;
0: 	UUID								referencedConstraintId;
0: 	int                                 raDeleteRule;
0: 	int                                 raUpdateRule;
0: 	/**
0: 	 * Constructor for a ForeignKeyConstraintDescriptor
0: 	 *
0: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
0: 	 * @param table		The descriptor of the table the constraint is on
0: 	 * @param constraintName	The name of the constraint.
0: 	 * @param deferrable		If the constraint can be deferred.
0: 	 * @param initiallyDeferred If the constraint starts life deferred.
0: 	 * @param fkColumns 			columns in the foreign key
0: 	 * @param constraintId		UUID of constraint
0: 	 * @param indexId			The UUID for the backing index
0: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
0: 	 * @param referencedConstraintDescriptor	is referenced constraint descriptor
0: 	 * @param isEnabled			is the constraint enabled?
0: 	 */
0: 	protected ForeignKeyConstraintDescriptor(
0: 		    DataDictionary dataDictionary,
0: 			TableDescriptor table,
0: 			String constraintName,
0: 			boolean deferrable,
0: 			boolean initiallyDeferred,
0: 			int[] fkColumns,
0: 			UUID constraintId,
0: 			UUID indexId,
0: 			SchemaDescriptor schemaDesc,
0: 			ReferencedKeyConstraintDescriptor referencedConstraintDescriptor,
0: 			boolean isEnabled,
0: 			int raDeleteRule,
0: 			int raUpdateRule
0: 			)							
0: 	{
0: 		super(dataDictionary, table, constraintName, deferrable,
0: 			  initiallyDeferred, fkColumns,
0: 			  constraintId, indexId, schemaDesc, isEnabled);
0: 
0: 		this.referencedConstraintDescriptor = referencedConstraintDescriptor;
0: 		this.raDeleteRule = raDeleteRule;
0: 		this.raUpdateRule = raUpdateRule;
0: 	}
0: 
0: 	/**
0: 	 * Constructor for a ForeignKeyConstraintDescriptor
0: 	 *
0: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
0: 	 * @param table		The descriptor of the table the constraint is on
0: 	 * @param constraintName	The name of the constraint.
0: 	 * @param deferrable		If the constraint can be deferred.
0: 	 * @param initiallyDeferred If the constraint starts life deferred.
0: 	 * @param fkColumns 			columns in the foreign key
0: 	 * @param constraintId		UUID of constraint
0: 	 * @param indexId			The UUID for the backing index
0: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
0: 	 * @param referencedConstraintId	is referenced constraint id
0: 	 * @param isEnabled			is the constraint enabled?
0: 	 */
0: 	ForeignKeyConstraintDescriptor(
0: 		    DataDictionary dataDictionary,
0: 			TableDescriptor table,
0: 			String constraintName,
0: 			boolean deferrable,
0: 			boolean initiallyDeferred,
0: 			int[] fkColumns,
0: 			UUID constraintId,
0: 			UUID indexId,
0: 			SchemaDescriptor schemaDesc,
0: 			UUID referencedConstraintId,
0: 			boolean isEnabled,
0: 			int raDeleteRule,
0: 			int raUpdateRule
0: 			)							
0: 	{
0: 		super(dataDictionary, table, constraintName, deferrable,
0: 			  initiallyDeferred, fkColumns,
0: 			  constraintId, indexId, schemaDesc, isEnabled);
0: 		this.referencedConstraintId = referencedConstraintId;
0: 		this.raDeleteRule = raDeleteRule;
0: 		this.raUpdateRule = raUpdateRule;
0: 
0: 	}
0: 
0: 	/**
0: 	 * Get the constraint that this FK references.  Will
0: 	 * return either a primary key or a unique key constriant.
0: 	 *
0: 	 * @return	the constraint
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public ReferencedKeyConstraintDescriptor getReferencedConstraint() 
0: 		throws StandardException
0: 	{
0: 		if (referencedConstraintDescriptor != null)
0: 		{
0: 			return referencedConstraintDescriptor;
0: 		}
0: 
0: 		if (referencedConstraintId == null)
0: 		{
0: 			getReferencedConstraintId();
0: 		}
0: 
0: 		TableDescriptor refTd = getDataDictionary().getConstraintTableDescriptor(referencedConstraintId);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (refTd == null)
0: 			{
0: 				SanityManager.THROWASSERT("not able to find "+referencedConstraintId+
0: 							" in SYS.SYSCONSTRAINTS");
0: 			}
0: 		}
0: 
0: 		ConstraintDescriptorList cdl = getDataDictionary().getConstraintDescriptors(refTd);
0: 		referencedConstraintDescriptor = (ReferencedKeyConstraintDescriptor)
0: 									cdl.getConstraintDescriptorById(referencedConstraintId);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (referencedConstraintDescriptor == null)
0: 			{
0: 				SanityManager.THROWASSERT("not able to find "
0: 					+referencedConstraintDescriptor+ " off of table descriptor "
0: 					+refTd.getName());
0: 			}
0: 		}
0: 
0: 		return referencedConstraintDescriptor;
0: 	}
0: 
0: 	
0: 	/**
0: 	 * Get the constraint id for the constraint that this FK references.  
0: 	 * Will return either a primary key or a unique key constriant.
0: 	 *
0: 	 * @return	the constraint id
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public UUID getReferencedConstraintId()  throws StandardException
0: 	{
0: 		if (referencedConstraintDescriptor != null)
0: 		{
0: 			return referencedConstraintDescriptor.getUUID();
0: 		}
0: 
0: 		SubKeyConstraintDescriptor subKey;
0: 		subKey = getDataDictionary().getSubKeyConstraint(constraintId,
0: 										DataDictionary.FOREIGNKEY_CONSTRAINT);
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (subKey == null)
0: 			{
0: 				SanityManager.THROWASSERT("not able to find "+constraintName+
0: 							" in SYS.SYSFOREIGNKEYS");
0: 			}
0: 		}
0: 		referencedConstraintId = subKey.getKeyConstraintId();
0: 		return referencedConstraintId;
0: 	}
0: 
0: 	/**
0: 	 * Gets an identifier telling what type of descriptor it is
0: 	 * (UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
0: 	 *
0: 	 * @return	An identifier telling what type of descriptor it is
0: 	 *		(UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK).
0: 	 */
0: 	public int	getConstraintType()
0: 	{
0: 		return DataDictionary.FOREIGNKEY_CONSTRAINT;
0: 	}
0: 
0: 	/**
0: 	 * Does this constraint need to fire on this type of
0: 	 * DML?  True if insert or update and columns intersect
0: 	 *
0: 	 * @param dmlType	the type of DML 
0: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
0: 	 * @param modifiedCols	the columns modified, or null for all
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
0: 	{
0: 		/*
0: 		** If we are disabled, we never fire
0: 		*/
0: 		if (!isEnabled)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		if (stmtType == StatementType.DELETE)
0: 		{
0: 			return false;
0: 		}
0: 		if (stmtType == StatementType.INSERT)
0: 		{
0: 			return true;
0: 		}
0: 
0: 		// if update, only relevant if columns intersect
0: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
0: 	}
0: 
0: 	/**
0: 	 * Am I a self-referencing FK?  True if my referenced
0: 	 * constraint is on the same table as me.
0: 	 *
0: 	 * @return	true/false
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public boolean isSelfReferencingFK()
0: 		throws StandardException
0: 	{
0: 		ReferencedKeyConstraintDescriptor refcd = getReferencedConstraint();
0: 		return (refcd.getTableId().equals(getTableId()));
0: 	}
0: 
0: 	/**
0: 	 * Gets a referential action rule on a  DELETE
0: 	 * @return referential rule defined by the user during foreign key creattion
0: 	 * for a delete (like CASCDE , RESTRICT ..etc)
0: 	 */
0: 	public int	getRaDeleteRule()
0: 	{
0: 		return raDeleteRule;
0: 	}
0: 	
0: 	
0: 	/**
0: 	 * Gets a referential action rule on a UPDATE
0: 	 * @return referential rule defined by the user during foreign key creattion
0: 	 * for an UPDATE (like CASCDE , RESTRICT ..etc)
0: 	 */
0: 	public int	getRaUpdateRule()
0: 	{
0: 		return raUpdateRule;
0: 	}
0: 	
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================