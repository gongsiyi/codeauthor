1:9d9f6dd: /*
1:9d9f6dd: 
1:9d9f6dd:    Derby - Class org.apache.derby.impl.sql.compile.OffsetOrderVisitor
1:9d9f6dd: 
1:9d9f6dd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9d9f6dd:    contributor license agreements.  See the NOTICE file distributed with
1:9d9f6dd:    this work for additional information regarding copyright ownership.
1:9d9f6dd:    The ASF licenses this file to you under the Apache License, Version 2.0
1:9d9f6dd:    (the "License"); you may not use this file except in compliance with
1:9d9f6dd:    the License.  You may obtain a copy of the License at
1:9d9f6dd: 
1:9d9f6dd:       http://www.apache.org/licenses/LICENSE-2.0
1:9d9f6dd: 
1:9d9f6dd:    Unless required by applicable law or agreed to in writing, software
1:9d9f6dd:    distributed under the License is distributed on an "AS IS" BASIS,
1:9d9f6dd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9d9f6dd:    See the License for the specific language governing permissions and
1:9d9f6dd:    limitations under the License.
1:9d9f6dd: 
1:9d9f6dd:  */
1:9d9f6dd: 
1:9d9f6dd: package org.apache.derby.impl.sql.compile;
1:9d9f6dd: 
1:9d9f6dd: import java.util.Comparator;
1:9d9f6dd: import java.util.SortedSet;
1:9d9f6dd: import java.util.TreeSet;
1:9d9f6dd: import org.apache.derby.iapi.error.StandardException;
1:9d9f6dd: import org.apache.derby.iapi.sql.compile.Visitable;
1:9d9f6dd: import org.apache.derby.iapi.sql.compile.Visitor;
1:9d9f6dd: import org.apache.derby.shared.common.sanity.SanityManager;
1:9d9f6dd: 
1:9d9f6dd: /**
1:9d9f6dd:  * Get all nodes of a certain type in a query tree, and return them in
1:9d9f6dd:  * the order in which they appear in the original SQL text. This visitor
1:9d9f6dd:  * is useful when rewriting SQL queries by replacing certain tokens in
1:9d9f6dd:  * the original query.
1:9d9f6dd:  *
1:9d9f6dd:  * @param <T> the type of nodes to collect
1:9d9f6dd:  */
1:0cefeda: class OffsetOrderVisitor<T extends QueryTreeNode> implements Visitor {
1:9d9f6dd: 
1:9d9f6dd:     /** Comparator that orders nodes by ascending begin offset. */
1:9d9f6dd:     private static final Comparator<QueryTreeNode>
1:9d9f6dd:             COMPARATOR = new Comparator<QueryTreeNode>() {
1:9d9f6dd:         public int compare(QueryTreeNode node1, QueryTreeNode node2) {
1:9d9f6dd:             return node1.getBeginOffset() - node2.getBeginOffset();
1:9d9f6dd:         }
1:9d9f6dd:     };
1:9d9f6dd: 
1:9d9f6dd:     private final Class<T> nodeClass;
1:9d9f6dd:     private final TreeSet<T> nodes = new TreeSet<T>(COMPARATOR);
1:9d9f6dd:     private final int lowOffset;
1:9d9f6dd:     private final int highOffset;
1:9d9f6dd: 
1:9d9f6dd:     /**
1:9d9f6dd:      * Create a new {@code OffsetOrderVisitor} that collects nodes of the
1:9d9f6dd:      * specified type. The nodes must have begin offset and end offset in
1:9d9f6dd:      * the range given by the {@code low} and {@code high} parameters.
1:9d9f6dd:      *
1:9d9f6dd:      * @param nodeClass the type of nodes to collect
1:9d9f6dd:      * @param low the lowest begin offset to accept (inclusive)
1:9d9f6dd:      * @param high the highest end offset to accept (exclusive)
1:9d9f6dd:      */
1:0cefeda:     OffsetOrderVisitor(Class<T> nodeClass, int low, int high) {
1:9d9f6dd:         this.nodeClass = nodeClass;
1:9d9f6dd:         this.lowOffset = low;
1:9d9f6dd:         this.highOffset = high;
1:9d9f6dd: 
1:9d9f6dd:         if (SanityManager.DEBUG) {
1:9d9f6dd:             // We should only collect nodes with non-negative offset. Nodes
1:9d9f6dd:             // with negative offset are synthetic and did not exist as tokens
1:9d9f6dd:             // in the original query text.
1:9d9f6dd:             SanityManager.ASSERT(lowOffset >= 0 && highOffset >= 0,
1:9d9f6dd:                                  "offsets should be non-negative");
1:9d9f6dd:         }
1:9d9f6dd:     }
1:9d9f6dd: 
1:9d9f6dd:     @Override
1:9d9f6dd:     public Visitable visit(Visitable node) throws StandardException {
1:9d9f6dd:         if (nodeClass.isInstance(node)) {
1:9d9f6dd:             T qtn = nodeClass.cast(node);
1:9d9f6dd:             if (qtn.getBeginOffset() >= lowOffset
1:9d9f6dd:                     && qtn.getEndOffset() < highOffset) {
1:9d9f6dd:                 nodes.add(qtn);
1:9d9f6dd:             }
1:9d9f6dd:         }
1:9d9f6dd: 
1:9d9f6dd:         return node;
1:9d9f6dd:     }
1:9d9f6dd: 
1:9d9f6dd:     @Override
1:9d9f6dd:     public boolean visitChildrenFirst(Visitable node) {
1:9d9f6dd:         return false;
1:9d9f6dd:     }
1:9d9f6dd: 
1:9d9f6dd:     @Override
1:9d9f6dd:     public boolean stopTraversal() {
1:9d9f6dd:         return false;
1:9d9f6dd:     }
1:9d9f6dd: 
1:9d9f6dd:     @Override
1:9d9f6dd:     public boolean skipChildren(Visitable node) throws StandardException {
1:9d9f6dd:         return false;
1:9d9f6dd:     }
1:9d9f6dd: 
1:0cefeda:     SortedSet<T> getNodes() {
1:9d9f6dd:         return nodes;
1:9d9f6dd:     }
1:9d9f6dd: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0cefeda
/////////////////////////////////////////////////////////////////////////
1: class OffsetOrderVisitor<T extends QueryTreeNode> implements Visitor {
/////////////////////////////////////////////////////////////////////////
1:     OffsetOrderVisitor(Class<T> nodeClass, int low, int high) {
/////////////////////////////////////////////////////////////////////////
1:     SortedSet<T> getNodes() {
commit:9d9f6dd
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.OffsetOrderVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import java.util.Comparator;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * Get all nodes of a certain type in a query tree, and return them in
1:  * the order in which they appear in the original SQL text. This visitor
1:  * is useful when rewriting SQL queries by replacing certain tokens in
1:  * the original query.
1:  *
1:  * @param <T> the type of nodes to collect
1:  */
0: public class OffsetOrderVisitor<T extends QueryTreeNode> implements Visitor {
1: 
1:     /** Comparator that orders nodes by ascending begin offset. */
1:     private static final Comparator<QueryTreeNode>
1:             COMPARATOR = new Comparator<QueryTreeNode>() {
1:         public int compare(QueryTreeNode node1, QueryTreeNode node2) {
1:             return node1.getBeginOffset() - node2.getBeginOffset();
1:         }
1:     };
1: 
1:     private final Class<T> nodeClass;
1:     private final TreeSet<T> nodes = new TreeSet<T>(COMPARATOR);
1:     private final int lowOffset;
1:     private final int highOffset;
1: 
1:     /**
1:      * Create a new {@code OffsetOrderVisitor} that collects nodes of the
1:      * specified type. The nodes must have begin offset and end offset in
1:      * the range given by the {@code low} and {@code high} parameters.
1:      *
1:      * @param nodeClass the type of nodes to collect
1:      * @param low the lowest begin offset to accept (inclusive)
1:      * @param high the highest end offset to accept (exclusive)
1:      */
0:     public OffsetOrderVisitor(Class<T> nodeClass, int low, int high) {
1:         this.nodeClass = nodeClass;
1:         this.lowOffset = low;
1:         this.highOffset = high;
1: 
1:         if (SanityManager.DEBUG) {
1:             // We should only collect nodes with non-negative offset. Nodes
1:             // with negative offset are synthetic and did not exist as tokens
1:             // in the original query text.
1:             SanityManager.ASSERT(lowOffset >= 0 && highOffset >= 0,
1:                                  "offsets should be non-negative");
1:         }
1:     }
1: 
1:     @Override
1:     public Visitable visit(Visitable node) throws StandardException {
1:         if (nodeClass.isInstance(node)) {
1:             T qtn = nodeClass.cast(node);
1:             if (qtn.getBeginOffset() >= lowOffset
1:                     && qtn.getEndOffset() < highOffset) {
1:                 nodes.add(qtn);
1:             }
1:         }
1: 
1:         return node;
1:     }
1: 
1:     @Override
1:     public boolean visitChildrenFirst(Visitable node) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean stopTraversal() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean skipChildren(Visitable node) throws StandardException {
1:         return false;
1:     }
1: 
0:     public SortedSet<T> getNodes() {
1:         return nodes;
1:     }
1: }
============================================================================