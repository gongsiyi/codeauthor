1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.NameTDCacheable
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class implements a Cacheable for a DataDictionary cache of
1:eac0369:  * table descriptors, with the lookup key being the name of the table.
1:eac0369:  *
1:eac0369:  * Assumes client passes in a string that includes the schema name.
1:eac0369:  */
1:eac0369: class NameTDCacheable extends TDCacheable
1:eac0369: {
1:eac0369: 	private TableKey identity;
1:eac0369: 
1:eac0369: 	NameTDCacheable(DataDictionaryImpl dd) {
1:eac0369: 		super(dd);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clearIdentity */
1:eac0369: 	public void clearIdentity()
1:eac0369: 	{
1:eac0369: 		identity = null;
1:eac0369: 		td = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#getIdentity */
1:eac0369: 	public Object getIdentity()
1:eac0369: 	{
1:eac0369: 		return identity;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#createIdentity */
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(key instanceof TableKey))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Key for a NameTDCacheElement is a " +
1:eac0369: 					key.getClass().getName() +
1:eac0369: 					" instead of a TableKey");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (!(createParameter instanceof TableDescriptor))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Create parameter for a NameTDCacheElement is a " +
1:eac0369: 					createParameter.getClass().getName() +
1:eac0369: 					"instead of a TableDescriptorImpl");
1:eac0369: 			}			
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		identity = (TableKey)key;
1:eac0369: 		td = (TableDescriptor) createParameter;
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 			return this;
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Cacheable#setIdentity
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public Cacheable setIdentity(Object key) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(key instanceof TableKey))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Key for a NameTDCacheElement is a " +
1:eac0369: 					key.getClass().getName() +
1:eac0369: 					" instead of a TableKey");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		;
1:eac0369: 		td = dd.getUncachedTableDescriptor(identity = (TableKey)key);
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			// add table descriptor to the oidTdcache in the Datadictionary.
1:eac0369: 			// no fear of deadlocks because this is called outside the 
1:eac0369: 			// synchronize block in the cache code.
1:eac0369: 			dd.addTableDescriptorToOtherCache(td, this);
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	// If this code is required it should be moved into a D_ class. - djd
1:eac0369: 
1:eac0369: /*
1:eac0369: 	public boolean isConsistent(HeaderPrintWriter reportInconsistent)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean retval = true;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			TableDescriptor uncachedTD;
1:eac0369: 
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				uncachedTD = dd.getUncachedTableDescriptor(identity);
1:eac0369: 			}
1:eac0369: 			catch (StandardException se)
1:eac0369: 			{
1:eac0369: 				reportInconsistent.println("Unexpected exception " + se +
1:eac0369: 				  " while getting cached table descriptor in NameTDCacheable.");
1:eac0369: 				uncachedTD = null;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			retval = checkConsistency(uncachedTD, identity, reportInconsistent);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: 	*/
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.NameTDCacheable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This class implements a Cacheable for a DataDictionary cache of
1:  * table descriptors, with the lookup key being the name of the table.
1:  *
1:  * Assumes client passes in a string that includes the schema name.
1:  */
1: class NameTDCacheable extends TDCacheable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private TableKey identity;
1: 
1: 	NameTDCacheable(DataDictionaryImpl dd) {
1: 		super(dd);
1: 	}
1: 
1: 
1: 	/* Cacheable interface */
1: 
1: 	/** @see Cacheable#clearIdentity */
1: 	public void clearIdentity()
1: 	{
1: 		identity = null;
1: 		td = null;
1: 	}
1: 
1: 	/** @see Cacheable#getIdentity */
1: 	public Object getIdentity()
1: 	{
1: 		return identity;
1: 	}
1: 
1: 	/** @see Cacheable#createIdentity */
1: 	public Cacheable createIdentity(Object key, Object createParameter)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(key instanceof TableKey))
1: 			{
1: 				SanityManager.THROWASSERT("Key for a NameTDCacheElement is a " +
1: 					key.getClass().getName() +
1: 					" instead of a TableKey");
1: 			}
1: 
1: 			if (!(createParameter instanceof TableDescriptor))
1: 			{
1: 				SanityManager.THROWASSERT("Create parameter for a NameTDCacheElement is a " +
1: 					createParameter.getClass().getName() +
1: 					"instead of a TableDescriptorImpl");
1: 			}			
1: 		}
1: 
1: 		identity = (TableKey)key;
1: 		td = (TableDescriptor) createParameter;
1: 
1: 		if (td != null)
1: 			return this;
1: 		else
1: 			return null;
1: 	}
1: 
1: 	/**
1: 	 * @see Cacheable#setIdentity
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public Cacheable setIdentity(Object key) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(key instanceof TableKey))
1: 			{
1: 				SanityManager.THROWASSERT("Key for a NameTDCacheElement is a " +
1: 					key.getClass().getName() +
1: 					" instead of a TableKey");
1: 			}
1: 		}
1: 
1: 		;
1: 		td = dd.getUncachedTableDescriptor(identity = (TableKey)key);
1: 
1: 		if (td != null)
1: 		{
1: 			// add table descriptor to the oidTdcache in the Datadictionary.
1: 			// no fear of deadlocks because this is called outside the 
1: 			// synchronize block in the cache code.
1: 			dd.addTableDescriptorToOtherCache(td, this);
1: 			return this;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: 	/**
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	// If this code is required it should be moved into a D_ class. - djd
1: 
1: /*
1: 	public boolean isConsistent(HeaderPrintWriter reportInconsistent)
1: 		throws StandardException
1: 	{
1: 		boolean retval = true;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			TableDescriptor uncachedTD;
1: 
1: 			try
1: 			{
1: 				uncachedTD = dd.getUncachedTableDescriptor(identity);
1: 			}
1: 			catch (StandardException se)
1: 			{
1: 				reportInconsistent.println("Unexpected exception " + se +
1: 				  " while getting cached table descriptor in NameTDCacheable.");
1: 				uncachedTD = null;
1: 			}
1: 
1: 			retval = checkConsistency(uncachedTD, identity, reportInconsistent);
1: 		}
1: 
1: 		return retval;
1: 	}
1: 	*/
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * This class implements a Cacheable for a DataDictionary cache of
0:  * table descriptors, with the lookup key being the name of the table.
0:  *
0:  * Assumes client passes in a string that includes the schema name.
0:  */
0: class NameTDCacheable extends TDCacheable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private TableKey identity;
0: 
0: 	NameTDCacheable(DataDictionaryImpl dd) {
0: 		super(dd);
0: 	}
0: 
0: 
0: 	/* Cacheable interface */
0: 
0: 	/** @see Cacheable#clearIdentity */
0: 	public void clearIdentity()
0: 	{
0: 		identity = null;
0: 		td = null;
0: 	}
0: 
0: 	/** @see Cacheable#getIdentity */
0: 	public Object getIdentity()
0: 	{
0: 		return identity;
0: 	}
0: 
0: 	/** @see Cacheable#createIdentity */
0: 	public Cacheable createIdentity(Object key, Object createParameter)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(key instanceof TableKey))
0: 			{
0: 				SanityManager.THROWASSERT("Key for a NameTDCacheElement is a " +
0: 					key.getClass().getName() +
0: 					" instead of a TableKey");
0: 			}
0: 
0: 			if (!(createParameter instanceof TableDescriptor))
0: 			{
0: 				SanityManager.THROWASSERT("Create parameter for a NameTDCacheElement is a " +
0: 					createParameter.getClass().getName() +
0: 					"instead of a TableDescriptorImpl");
0: 			}			
0: 		}
0: 
0: 		identity = (TableKey)key;
0: 		td = (TableDescriptor) createParameter;
0: 
0: 		if (td != null)
0: 			return this;
0: 		else
0: 			return null;
0: 	}
0: 
0: 	/**
0: 	 * @see Cacheable#setIdentity
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public Cacheable setIdentity(Object key) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(key instanceof TableKey))
0: 			{
0: 				SanityManager.THROWASSERT("Key for a NameTDCacheElement is a " +
0: 					key.getClass().getName() +
0: 					" instead of a TableKey");
0: 			}
0: 		}
0: 
0: 		;
0: 		td = dd.getUncachedTableDescriptor(identity = (TableKey)key);
0: 
0: 		if (td != null)
0: 		{
0: 			// add table descriptor to the oidTdcache in the Datadictionary.
0: 			// no fear of deadlocks because this is called outside the 
0: 			// synchronize block in the cache code.
0: 			dd.addTableDescriptorToOtherCache(td, this);
0: 			return this;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: 	/**
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	// If this code is required it should be moved into a D_ class. - djd
0: 
0: /*
0: 	public boolean isConsistent(HeaderPrintWriter reportInconsistent)
0: 		throws StandardException
0: 	{
0: 		boolean retval = true;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			TableDescriptor uncachedTD;
0: 
0: 			try
0: 			{
0: 				uncachedTD = dd.getUncachedTableDescriptor(identity);
0: 			}
0: 			catch (StandardException se)
0: 			{
0: 				reportInconsistent.println("Unexpected exception " + se +
0: 				  " while getting cached table descriptor in NameTDCacheable.");
0: 				uncachedTD = null;
0: 			}
0: 
0: 			retval = checkConsistency(uncachedTD, identity, reportInconsistent);
0: 		}
0: 
0: 		return retval;
0: 	}
0: 	*/
0: }
============================================================================