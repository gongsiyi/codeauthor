1:b8d76fa: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.services.jmx.JMXManagementService
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
2:b8d76fa:  */
1:c34c8e0: 
1:b8d76fa: package org.apache.derby.impl.services.jmx;
1:f8bc019: 
1:b8d76fa: import java.lang.management.ManagementFactory;
1:9f69067: import java.security.AccessControlException;
1:b8d76fa: import java.security.AccessController;
1:b8d76fa: import java.security.PrivilegedAction;
1:b8d76fa: import java.security.PrivilegedActionException;
1:b8d76fa: import java.security.PrivilegedExceptionAction;
1:5765560: import java.util.HashMap;
1:b8d76fa: import java.util.HashSet;
1:5765560: import java.util.Map;
1:b8d76fa: import java.util.Properties;
19:b8d76fa: 
1:b8d76fa: import javax.management.JMException;
1:3505778: import javax.management.MBeanInfo;
1:b8d76fa: import javax.management.MBeanServer;
1:b8d76fa: import javax.management.ObjectName;
1:c970168: import javax.management.StandardMBean;
1:b8d76fa: 
1:b8d76fa: import org.apache.derby.iapi.error.StandardException;
1:b8d76fa: import org.apache.derby.iapi.reference.Property;
1:c970168: import org.apache.derby.iapi.services.info.Version;
1:b8d76fa: import org.apache.derby.iapi.services.jmx.ManagementService;
1:b8d76fa: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:b8d76fa: import org.apache.derby.iapi.services.monitor.Monitor;
1:b8d76fa: import org.apache.derby.iapi.services.property.PropertyUtil;
1:f8bc019: import org.apache.derby.mbeans.ManagementMBean;
1:c970168: import org.apache.derby.mbeans.VersionMBean;
1:9f69067: import org.apache.derby.security.SystemPermission;
1:b8d76fa: 
1:b8d76fa: /** 
1:b8d76fa:  * This class implements the ManagementService interface and provides a simple
1:b8d76fa:  * management and monitoring service.
1:5765560:  * 
1:5765560:  * An mbean registered with this service remains until it is unregistered.
1:5765560:  * While registered with this service it may be registered and unregistered
1:5765560:  * with the jmx service a number of times.
2:b8d76fa:  *
1:b8d76fa:  * @see org.apache.derby.iapi.services.jmx.ManagementService
1:b8d76fa:  */
1:5765560: public final class JMXManagementService implements ManagementService, ModuleControl {
1:b8d76fa: 
1:b8d76fa:     /**
1:5765560:      * Platform MBean server, from ManagementFactory.getPlatformMBeanServer().
1:5765560:      * If not null then this service has registered mbeans with the
1:5765560:      * plaform MBean server.
1:5765560:      * If null then this service either has no mbeans registered
1:5765560:      * or one mbean registered (representing itself).
1:b8d76fa:      */
1:b8d76fa:     private MBeanServer mbeanServer;
1:f8bc019:    
1:b8d76fa:     /**
1:5765560:      * The set of mbeans registered to this service by
1:5765560:      * Derby's code. These beans are registered with
1:5765560:      * the platform mbean server if mbeanServer is not null.
1:b8d76fa:      */
1:5765560:     private Map<ObjectName,StandardMBean> registeredMbeans;
1:5765560:     
1:5765560:     /**
1:5765560:      * If this object is registered as a management mbean
1:5765560:      * then myManagementBean represents its name. This will
1:5765560:      * be non-null when derby.system.jmx is true.
1:5765560:      */
1:5765560:     private ObjectName myManagementBean;
1:5765560:     
1:5765560:     private MBeanServer myManagementServer;
1:9f69067:     
1:9f69067:     /**
1:9f69067:      * Runtime value to disambiguate
1:9f69067:      * multiple Derby systems in the same virtual machine but
1:9f69067:      * different class loaders. Set as the system attribute in
1:9f69067:      * the ObjectName for all MBeans registered.
1:9f69067:      */
1:9f69067:     private String systemIdentifier;
1:b8d76fa: 
1:b8d76fa:     public JMXManagementService() {
1:b8d76fa: 
1:5765560:     }
1:5765560: 
1:a90a570:     /**
1:b8d76fa:      * Start the management service if derby.system.jmx is true.
1:b8d76fa:      * <P>
1:b8d76fa:      * Starting the service means:
1:b8d76fa:      * <UL>
1:b8d76fa:      * <LI> getting the platform MBeanServer which may require starting it
1:b8d76fa:      * <LI> registering a Version mbean representing the system
1:b8d76fa:      * </UL>
1:5c4e302:      */
1:2864d17:     public synchronized void boot(boolean create, Properties properties)
1:b8d76fa:             throws StandardException {
1:5765560:         
1:5765560:         registeredMbeans = new HashMap<ObjectName,StandardMBean>();
1:5765560:         
1:9f69067:         systemIdentifier =
1:56c1dc2:             getMonitor().getUUIDFactory().createUUID().toString();
1:9f69067:         
1:2864d17:         findServer();
1:5765560:              
1:2864d17:         myManagementBean = (ObjectName) registerMBean(this,
1:5765560:                 ManagementMBean.class,
1:5765560:                 "type=Management");
1:2864d17:         myManagementServer = mbeanServer;
1:5765560:         
1:2b80f9b:         registerMBean(
1:2b80f9b:                 new Version(
1:56c1dc2:                         getMonitor().getEngineVersion(),
1:a39951c:                         SystemPermission.ENGINE),
1:5765560:                 VersionMBean.class,
1:5765560:                 "type=Version,jar=derby.jar");
1:c34c8e0:     }
1:5765560:     
1:b8d76fa:     public synchronized void stop() {
1:5765560:         
1:5765560:         // If we are currently not registering any mbeans
1:5765560:         // then we might still have this registered as
1:5765560:         // a management mbean. Need to explicitly remove this
1:5765560:         // using the mbean server that created it, which
1:5765560:         // possibly could not be the same as the current server.
1:5765560:         if (mbeanServer == null && myManagementBean != null)
1:5765560:         {
1:5765560:             mbeanServer = myManagementServer;
1:5765560:             unregisterMBean(myManagementBean);
1:5765560:             mbeanServer = null;
1:5765560:         }
1:5917694: 
1:f8bc019:         // Need a copy of registeredMbeans since unregisterMBean will remove
1:f8bc019:         // items from registeredMbeans and thus invalidate any iterator
1:f8bc019:         // on it directly.
1:5765560:         for (ObjectName mbeanName :
1:5765560:                 new HashSet<ObjectName>(registeredMbeans.keySet()))
1:5c4e302:             unregisterMBean(mbeanName);
1:9f69067:         
1:f8bc019:         mbeanServer = null;
1:5765560:         
1:5765560:         // registeredMbeans == null indicates service is not active
1:5765560:         registeredMbeans = null;
1:5765560:         
1:5765560:         myManagementServer = null;
1:e6a963f:         systemIdentifier = null;
11:b8d76fa:     }
1:f8bc019: 
1:b8d76fa:     /**
1:b8d76fa:      * Initialize the management service by obtaining the platform
1:b8d76fa:      * MBeanServer and registering system beans. Separate from
1:b8d76fa:      * boot() to allow future changes where the jmx management
1:b8d76fa:      * can be enabled on the fly.
1:b8d76fa:      */
1:5765560:     private synchronized void findServer() {
1:b8d76fa:         
1:c34c8e0:         try {
1:b8d76fa:             mbeanServer = AccessController
1:b8d76fa:                     .doPrivileged(new PrivilegedAction<MBeanServer>() {
1:b8d76fa:                         public MBeanServer run() {
1:b8d76fa:                             return ManagementFactory.getPlatformMBeanServer();
1:c34c8e0:                         }
1:c34c8e0:                     });
1:3505778:             
1:3ea4878:         } catch (SecurityException se) {
1:5b50887:             // Ignoring inability to create or
1:5b50887:             // find the mbean server. MBeans can continue
1:5b50887:             // to be registered with this service and
1:5b50887:             // startMangement() can be called to get
1:5b50887:             // them registered with JMX if someone else
1:5b50887:             // starts the MBean server.
1:3ea4878:         }
1:b8d76fa:     }
1:b8d76fa: 
1:b8d76fa:     /**
1:c970168:      * Registers an MBean with the MBean server as a StandardMBean.
1:c970168:      * Use of the StandardMBean allows the implementation details
1:c970168:      * of Derby's mbeans to be hidden from JMX, thus only exposing
1:c970168:      * the MBean's interface in org.apache.derby.mbeans.
1:c970168:      * 
1:b8d76fa:      * 
1:c970168:      * @param bean The MBean to wrap with a StandardMBean and register
1:c970168:      * @param beanInterface The management interface for the MBean.
1:e4f7f9e:      * @param keyProperties The String representation of the MBean's key properties,
1:e4f7f9e:      * they will be added into the ObjectName with Derby's domain. Key
1:e4f7f9e:      * type should be first with a short name for the bean, typically the
1:e4f7f9e:      * class name without the package.
1:b8d76fa:      * 
1:9f69067:      */
1:f9a152b:     public synchronized <T> Object registerMBean(final T bean,
1:f9a152b:             final Class<T> beanInterface,
1:e4f7f9e:             final String keyProperties)
1:b8d76fa:             throws StandardException {
1:b8d76fa: 
1:c34c8e0:         try {
1:5c4e302:             final ObjectName beanName = new ObjectName(
1:9f69067:                     DERBY_JMX_DOMAIN + ":" + keyProperties
1:9f69067:                     + ",system=" + systemIdentifier);
1:7fa6f64: 
1:c970168:             final StandardMBean standardMBean =
1:3505778:                 new StandardMBean(bean, beanInterface) {
1:3505778:                 
1:3505778:                 /**
1:3505778:                  * Hide the implementation name from JMX clients
1:3505778:                  * by providing the interface name as the class
1:3505778:                  * name for the MBean. Allows the permissions
1:3505778:                  * in a policy file to be granted to the public
1:3505778:                  * MBean interfaces.
1:3505778:                  */
1:3505778:                 protected String getClassName(MBeanInfo info) {
1:3505778:                     return beanInterface.getName();
1:3505778:                 }
1:3505778:                 
1:3505778:             };
1:3505778:                 // new StandardMBean(bean, beanInterface);
1:5765560:             
1:5765560:             registeredMbeans.put(beanName, standardMBean);
1:5765560:             if (mbeanServer != null)
1:5765560:                 jmxRegister(standardMBean, beanName);
1:5765560:             
1:5765560:             return beanName;
1:5765560:         
1:b8d76fa:         } catch (JMException jme) {
1:b8d76fa:             throw StandardException.plainWrapException(jme);
1:b8d76fa:         }
1:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:     /**
1:5765560:      * Register an mbean with the platform mbean server.
1:5765560:      */
1:5765560:     private void jmxRegister(final StandardMBean standardMBean,
1:5765560:             final ObjectName beanName) throws JMException
1:5765560:     {
1:5b50887:         // Already registered? Can happen if we don't have permission
1:5b50887:         // to unregister the MBeans.
1:5b50887:         if (mbeanServer.isRegistered(beanName))
1:5b50887:             return;
1:5b50887:             
1:3ea4878:         try {
1:5765560: 
1:5765560:             AccessController
1:5765560:                .doPrivileged(new PrivilegedExceptionAction<Object>() {
1:5765560: 
1:5765560:                     public Object run() throws JMException {
1:5765560:                         mbeanServer.registerMBean(standardMBean, beanName);
1:c34c8e0:                         return null;
1:c34c8e0:                     }
1:5765560: 
1:c34c8e0:                 });
1:5765560: 
1:5765560:         } catch (PrivilegedActionException pae) {
1:5765560:             throw (JMException) pae.getException();
1:c34c8e0:         } catch (SecurityException se) {
1:5b50887:             // If we can't register the MBean then so be it.
1:5b50887:             // The application can later enabled the MBeans
1:5b50887:             // by using org.apache.derby.mbeans.Management
1:c34c8e0:         }
1:c34c8e0:     }
1:5765560:     
1:5765560:     /**
1:5765560:      * Unregister an mbean using an object previous returned from registerMBean.
1:b8d76fa:      */
1:5c4e302:     public void unregisterMBean(Object mbeanIdentifier)
1:5c4e302:     {
1:5c4e302:         if (mbeanIdentifier == null)
1:5c4e302:             return;
1:5c4e302:         unregisterMBean((ObjectName) mbeanIdentifier);
1:5765560:     }
1:5c4e302:     
1:5c4e302:     /**
1:5765560:      * Unregisters an mbean from this service and JMX plaform server
1:b8d76fa:      * @param mbeanName Bean to unregister.
1:b8d76fa:      */
1:b8d76fa:     private synchronized void unregisterMBean(final ObjectName mbeanName)
1:b8d76fa:     {
1:6d73220:         //Has this service been shut down?
1:6d73220:         if (registeredMbeans == null)
1:6d73220:             return;
1:6d73220: 
1:5765560:         if (registeredMbeans.remove(mbeanName) == null)
3:b8d76fa:             return;
1:5765560:         
1:5765560:         if (mbeanServer == null)
1:5765560:             return;
1:5765560:         
1:5765560:         jmxUnregister(mbeanName);
1:5765560:     }
1:5765560:     
1:5765560:     /**
1:5765560:      * Unregister an mbean from the JMX plaform server
1:5765560:      * but leave it registered to this service. This
1:5765560:      * is so that if jmx is reenabled we can reestablish
1:5765560:      * all vaid mbeans (that are still registered with this service).
1:5765560:      * @param mbeanName
1:5765560:      */
1:5765560:     private void jmxUnregister(final ObjectName mbeanName) {
1:f8bc019: 
1:b8d76fa:         if (!mbeanServer.isRegistered(mbeanName))
1:b8d76fa:             return;
1:b8d76fa: 
1:5765560:         try {
1:b8d76fa: 
2:b8d76fa:             AccessController
2:b8d76fa:                     .doPrivileged(new PrivilegedExceptionAction<Object>() {
1:b8d76fa: 
2:b8d76fa:                         public Object run() throws JMException {
1:b8d76fa:                             mbeanServer.unregisterMBean(mbeanName);
1:c34c8e0:                             return null;
1:5765560:                         }
1:b8d76fa: 
1:c34c8e0:                     });
1:b8d76fa: 
2:b8d76fa:         } catch (PrivilegedActionException pae) {
1:5c4e302:             // TODO - this is called on shutdown where
1:5c4e302:             // we don't really care about errors.
1:5c4e302:             // JMException jme = (JMException) pae.getException();
1:5c4e302:             //if (!(jme instanceof InstanceNotFoundException))
1:5c4e302:                 // throw StandardException.plainWrapException(jme);
1:5b50887:         } catch (SecurityException se) {
1:5b50887:             // Can't unregister the MBean we registered due to permission
1:5b50887:             // problems, oh-well just leave it there. We are fail-safe
1:5b50887:             // if we attempt to re-register it.
1:5765560:         }
1:5c4e302:     }
1:f8bc019: 
1:f8bc019:     public synchronized boolean isManagementActive() {
1:f8bc019:         return mbeanServer != null;
1:f8bc019:     }
1:f8bc019: 
1:f8bc019:     public synchronized void startManagement() {
1:5765560:         
1:5765560:         //Has this service been shut down?
1:5765560:         if (registeredMbeans == null)
1:5765560:             return;
1:5765560:         
1:9f69067:         checkJMXControl();
1:9f69067:         
1:5765560:         // Already active?
1:5765560:         if (isManagementActive())
1:5765560:             return;
1:9f69067:         
1:5765560:         findServer();
1:5765560:         
1:5765560:         // If we can't find the server then we can't register.
1:5765560:         if (mbeanServer == null)
1:5765560:             return;
1:5765560:         
1:5765560:         for (ObjectName mbeanName : registeredMbeans.keySet())
1:5765560:         {
1:5765560:             // If we registered this as a management bean
1:5765560:             // then leave it registered to allow the mbeans
1:5765560:             // to be re-registered with JMX
1:3522c2e:             if (mbeanName.equals(myManagementBean) &&
1:3522c2e:                     mbeanServer.isRegistered(myManagementBean))
1:5765560:                 continue;
1:5765560:             
1:5765560:             try {
1:5765560:                 jmxRegister(registeredMbeans.get(mbeanName), mbeanName);
1:5765560:             } catch (JMException e) {
1:5765560:                 // TODO - what to do here?
1:5765560:             }
1:5765560:         }
1:f8bc019:     }
1:f8bc019: 
1:f8bc019:     public synchronized void stopManagement() {
1:5765560:         
1:5765560:         // Has this service been shut down?
1:5765560:         if (registeredMbeans == null)
1:5765560:             return;
1:5765560:         
1:9f69067:         checkJMXControl();
1:b8d76fa:         
1:5765560:         if (isManagementActive()) {
1:5765560:             for (ObjectName mbeanName : registeredMbeans.keySet())
1:5765560:             {
1:5765560:                 // If we registered this as a management bean
1:5765560:                 // then leave it registered to allow the mbeans
1:5765560:                 // to be re-registered with JMX
2:5765560:                 if (mbeanName.equals(myManagementBean))
1:5765560:                     continue;
1:5765560:                 jmxUnregister(mbeanName);
1:5765560:             }
1:5765560:             mbeanServer = null;
1:5765560:         }
1:f8bc019:     }
1:b8d76fa:     
1:b8d76fa:     /**
1:a90a570:      * Control permission (permissions are immutable).
1:a90a570:      */
1:5917694:     private final static SystemPermission CONTROL =
1:5917694:         new SystemPermission(
1:5917694:                 SystemPermission.JMX, SystemPermission.CONTROL);
1:b8d76fa: 
1:a90a570:     /**
1:a90a570:      * Require SystemPermission("jmx", "control") to change
1:a90a570:      * the management state.
1:a90a570:      */
1:9f69067:     private void checkJMXControl() {
1:9f69067:         try {
1:a90a570:             if (System.getSecurityManager() != null)
1:a90a570:                 AccessController.checkPermission(CONTROL);
1:9f69067:         } catch (AccessControlException e) {
1:9f69067:             // Need to throw a simplified version as AccessControlException
1:9f69067:             // will have a reference to Derby's SystemPermission which most likely
1:9f69067:             // will not be available on the client.
1:9f69067:             throw new SecurityException(e.getMessage());
1:9f69067:         }
1:9f69067:     }
1:9f69067: 
1:e6a963f:     public synchronized String getSystemIdentifier() {
1:9f69067:         return systemIdentifier;
1:9f69067:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public String quotePropertyValue(String value) {
1:86ee0a0:         return ObjectName.quote(value);
1:86ee0a0:     }
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:b8d76fa: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1:             getMonitor().getUUIDFactory().createUUID().toString();
/////////////////////////////////////////////////////////////////////////
1:                         getMonitor().getEngineVersion(),
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86ee0a0
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String quotePropertyValue(String value) {
1:         return ObjectName.quote(value);
1:     }
commit:f9a152b
/////////////////////////////////////////////////////////////////////////
1:     public synchronized <T> Object registerMBean(final T bean,
1:             final Class<T> beanInterface,
/////////////////////////////////////////////////////////////////////////
commit:7fa6f64
/////////////////////////////////////////////////////////////////////////
1: 
0:             @SuppressWarnings("unchecked")
commit:49b94d6
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: 
1:    Derby - Class org.apache.derby.impl.services.jmx.JMXManagementService
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:6d73220
/////////////////////////////////////////////////////////////////////////
1:         //Has this service been shut down?
1:         if (registeredMbeans == null)
1:             return;
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:7f4445d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c34c8e0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         
0:         ClassLoader savecl = null;
0:             savecl = (ClassLoader)AccessController.doPrivileged(
0:                new PrivilegedAction() {
0:                 public Object run()  {
0:                     return Thread.currentThread().getContextClassLoader();
1:                 }
1:             });
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:                     public Object run()  {
0:                         Thread.
0:                                                                   currentThread().setContextClassLoader(null);
1:                         return null;
1:                     }
1:                 });
0:             } catch (SecurityException se1) {
0:                 // ignore security exception.  Earlier versions of Derby, before the 
0:                 // DERBY-3745 fix did not require setContextClassloader permissions.
0:                 // We may leak class loaders if we are not able to set this, but 
0:                 // cannot just fail.
1:             }
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 final ClassLoader tmpsavecl = savecl;
0:                 AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:                     public Object run()  {
0:                         Thread.currentThread().setContextClassLoader(tmpsavecl);
1:                         return null;
1:                     }
1:                 });
1:             } catch (SecurityException se) {
0:                 // ignore security exception.  Earlier versions of Derby, before the 
0:                 // DERBY-3745 fix did not require setContextClassloader permissions.
0:                 // We may leak class loaders if we are not able to set this, but 
0:                 // cannot just fail.
1:             }
commit:3ea4878
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.PrivilegedThreadOps;
/////////////////////////////////////////////////////////////////////////
0:         //DERBY-3745 We want to avoid the timer leaking class loaders, so we make
0:         // sure the context class loader is null before we start the MBean
0:         // server which will create threads that we want to have a null context
0:         // class loader
0:         ClassLoader savecl = null;
0:         boolean hasGetClassLoaderPerms=false;
1:         try {
0:             savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
0:             hasGetClassLoaderPerms = true;
1:         } catch (SecurityException se) {
0:            // ignore security exception.  Earlier versions of Derby, before the 
0:            // DERBY-3745 fix did not require getClassloader permissions.
0:            // We may leak class loaders if we are not able to get this, but 
0:            // cannot just fail.        
1:         }
0:         if (hasGetClassLoaderPerms)
0:             PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.
0:                           currentThread(), null);
/////////////////////////////////////////////////////////////////////////
0:         if (hasGetClassLoaderPerms)
0:             PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.currentThread(),
0:                     savecl);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:27da9a9
/////////////////////////////////////////////////////////////////////////
0:                new PrivilegedAction<ClassLoader>() {
0:                 public ClassLoader run()  {
/////////////////////////////////////////////////////////////////////////
0:                 new PrivilegedAction<Object>() {
/////////////////////////////////////////////////////////////////////////
0:                 new PrivilegedAction<Object>() {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a39951c
/////////////////////////////////////////////////////////////////////////
1:                         SystemPermission.ENGINE),
commit:5b50887
/////////////////////////////////////////////////////////////////////////
1:             // Ignoring inability to create or
1:             // find the mbean server. MBeans can continue
1:             // to be registered with this service and
1:             // startMangement() can be called to get
1:             // them registered with JMX if someone else
1:             // starts the MBean server.
/////////////////////////////////////////////////////////////////////////
1:         // Already registered? Can happen if we don't have permission
1:         // to unregister the MBeans.
1:         if (mbeanServer.isRegistered(beanName))
1:             return;
1:             
/////////////////////////////////////////////////////////////////////////
1:         } catch (SecurityException se) {
1:             // If we can't register the MBean then so be it.
1:             // The application can later enabled the MBeans
1:             // by using org.apache.derby.mbeans.Management
/////////////////////////////////////////////////////////////////////////
0:         } catch (SecurityException se) {
1:             // Can't unregister the MBean we registered due to permission
1:             // problems, oh-well just leave it there. We are fail-safe
1:             // if we attempt to re-register it.
commit:a90a570
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Control permission (permissions are immutable).
1:      */
1:     /**
1:      * Require SystemPermission("jmx", "control") to change
1:      * the management state.
1:      */
1:             if (System.getSecurityManager() != null)
1:                 AccessController.checkPermission(CONTROL);
commit:5917694
/////////////////////////////////////////////////////////////////////////
1:     
1:     private final static SystemPermission CONTROL =
1:         new SystemPermission(
1:                 SystemPermission.JMX, SystemPermission.CONTROL);
0:             // AccessController.checkPermission(CONTROL);
commit:2b80f9b
/////////////////////////////////////////////////////////////////////////
1:         registerMBean(
1:                 new Version(
0:                         Monitor.getMonitor().getEngineVersion(),
0:                         null /* SystemPermission.ENGINE */),
commit:3522c2e
/////////////////////////////////////////////////////////////////////////
1:             if (mbeanName.equals(myManagementBean) &&
1:                     mbeanServer.isRegistered(myManagementBean))
commit:e6a963f
/////////////////////////////////////////////////////////////////////////
1:         systemIdentifier = null;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized String getSystemIdentifier() {
commit:9f69067
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessControlException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.security.SystemPermission;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Runtime value to disambiguate
1:      * multiple Derby systems in the same virtual machine but
1:      * different class loaders. Set as the system attribute in
1:      * the ObjectName for all MBeans registered.
1:      */
1:     private String systemIdentifier;
/////////////////////////////////////////////////////////////////////////
1:         systemIdentifier =
0:             Monitor.getMonitor().getUUIDFactory().createUUID().toString();
1:         
/////////////////////////////////////////////////////////////////////////
1:                     DERBY_JMX_DOMAIN + ":" + keyProperties
1:                     + ",system=" + systemIdentifier);
/////////////////////////////////////////////////////////////////////////
1:         checkJMXControl();
1:         
/////////////////////////////////////////////////////////////////////////
1:         checkJMXControl();
1:         
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void checkJMXControl() {
0:         /* FUTURE DERBY-3462
1:         try {
0:             AccessController.checkPermission(new SystemPermission("jmxControl"));
1:         } catch (AccessControlException e) {
1:             // Need to throw a simplified version as AccessControlException
1:             // will have a reference to Derby's SystemPermission which most likely
1:             // will not be available on the client.
1:             throw new SecurityException(e.getMessage());
1:         }
1:         */
1:     }
1: 
0:     public String getSystemIdentifier() {
1:         return systemIdentifier;
1:     }
commit:2864d17
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void boot(boolean create, Properties properties)
1:         findServer();
1:         myManagementBean = (ObjectName) registerMBean(this,
1:         myManagementServer = mbeanServer;
commit:3505778
/////////////////////////////////////////////////////////////////////////
1: import javax.management.MBeanInfo;
/////////////////////////////////////////////////////////////////////////
1:             
1:                 new StandardMBean(bean, beanInterface) {
1:                 
1:                 /**
1:                  * Hide the implementation name from JMX clients
1:                  * by providing the interface name as the class
1:                  * name for the MBean. Allows the permissions
1:                  * in a policy file to be granted to the public
1:                  * MBean interfaces.
1:                  */
1:                 protected String getClassName(MBeanInfo info) {
1:                     return beanInterface.getName();
1:                 }
1:                 
1:             };
1:                 // new StandardMBean(bean, beanInterface);
commit:e4f7f9e
/////////////////////////////////////////////////////////////////////////
1:      * @param keyProperties The String representation of the MBean's key properties,
1:      * they will be added into the ObjectName with Derby's domain. Key
1:      * type should be first with a short name for the bean, typically the
1:      * class name without the package.
1:             final String keyProperties)
0:                     DERBY_JMX_DOMAIN + ":" + keyProperties);
commit:5765560
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:  * 
1:  * An mbean registered with this service remains until it is unregistered.
1:  * While registered with this service it may be registered and unregistered
1:  * with the jmx service a number of times.
1: public final class JMXManagementService implements ManagementService, ModuleControl {
1:      * Platform MBean server, from ManagementFactory.getPlatformMBeanServer().
1:      * If not null then this service has registered mbeans with the
1:      * plaform MBean server.
1:      * If null then this service either has no mbeans registered
1:      * or one mbean registered (representing itself).
1:      * The set of mbeans registered to this service by
1:      * Derby's code. These beans are registered with
1:      * the platform mbean server if mbeanServer is not null.
1:     private Map<ObjectName,StandardMBean> registeredMbeans;
1:     
1:     /**
1:      * If this object is registered as a management mbean
1:      * then myManagementBean represents its name. This will
1:      * be non-null when derby.system.jmx is true.
1:      */
1:     private ObjectName myManagementBean;
1:     
1:     private MBeanServer myManagementServer;
/////////////////////////////////////////////////////////////////////////
1:         
1:         registeredMbeans = new HashMap<ObjectName,StandardMBean>();
1:         
0:         if (PropertyUtil.getSystemBoolean(Property.JMX)) {
1:             findServer();
1:              
0:             myManagementBean = (ObjectName) registerMBean(this,
1:                 ManagementMBean.class,
1:                 "type=Management");
0:             myManagementServer = mbeanServer;
1:         }
1:         
0:         registerMBean(new Version(Monitor.getMonitor().getEngineVersion()),
1:                 VersionMBean.class,
1:                 "type=Version,jar=derby.jar");
1:     
1:         
1:         // If we are currently not registering any mbeans
1:         // then we might still have this registered as
1:         // a management mbean. Need to explicitly remove this
1:         // using the mbean server that created it, which
1:         // possibly could not be the same as the current server.
1:         if (mbeanServer == null && myManagementBean != null)
1:         {
1:             mbeanServer = myManagementServer;
1:             unregisterMBean(myManagementBean);
1:             mbeanServer = null;
1:         }
1:         for (ObjectName mbeanName :
1:                 new HashSet<ObjectName>(registeredMbeans.keySet()))
1:         
1:         // registeredMbeans == null indicates service is not active
1:         registeredMbeans = null;
1:         
1:         myManagementServer = null;
/////////////////////////////////////////////////////////////////////////
1:     private synchronized void findServer() {
/////////////////////////////////////////////////////////////////////////
0:             // TODO: just ignoring inability to create or
0:             // find the mbean server.
/////////////////////////////////////////////////////////////////////////
1:             
1:             registeredMbeans.put(beanName, standardMBean);
1:             if (mbeanServer != null)
1:                 jmxRegister(standardMBean, beanName);
1:             
1:             return beanName;
1:         
1:      * Register an mbean with the platform mbean server.
1:      */
1:     private void jmxRegister(final StandardMBean standardMBean,
1:             final ObjectName beanName) throws JMException
1:     {
1:         try {
1: 
1:             AccessController
1:                .doPrivileged(new PrivilegedExceptionAction<Object>() {
1: 
1:                     public Object run() throws JMException {
1:                         mbeanServer.registerMBean(standardMBean, beanName);
0:                         return null;
1:                     }
1: 
0:                 });
1: 
1:         } catch (PrivilegedActionException pae) {
1:             throw (JMException) pae.getException();
1:         }
1:     }
1:     
1:     /**
1:      * Unregister an mbean using an object previous returned from registerMBean.
/////////////////////////////////////////////////////////////////////////
1:      * Unregisters an mbean from this service and JMX plaform server
1:         if (registeredMbeans.remove(mbeanName) == null)
1:         
1:         if (mbeanServer == null)
1:             return;
1:         
1:         jmxUnregister(mbeanName);
1:     }
1:     
1:     /**
1:      * Unregister an mbean from the JMX plaform server
1:      * but leave it registered to this service. This
1:      * is so that if jmx is reenabled we can reestablish
1:      * all vaid mbeans (that are still registered with this service).
1:      * @param mbeanName
1:      */
1:     private void jmxUnregister(final ObjectName mbeanName) {
/////////////////////////////////////////////////////////////////////////
1:         
1:         //Has this service been shut down?
1:         if (registeredMbeans == null)
1:             return;
1:         
1:         // Already active?
1:         if (isManagementActive())
1:             return;
1:         
0:         findServer();
1:         
1:         // If we can't find the server then we can't register.
1:         if (mbeanServer == null)
1:             return;
1:         
1:         for (ObjectName mbeanName : registeredMbeans.keySet())
1:         {
1:             // If we registered this as a management bean
1:             // then leave it registered to allow the mbeans
1:             // to be re-registered with JMX
1:             if (mbeanName.equals(myManagementBean))
1:                 continue;
1:             
1:             try {
1:                 jmxRegister(registeredMbeans.get(mbeanName), mbeanName);
1:             } catch (JMException e) {
1:                 // TODO - what to do here?
1:             }
1:         }
1:         
1:         // Has this service been shut down?
1:         if (registeredMbeans == null)
1:             return;
1:         
1:         if (isManagementActive()) {
1:             for (ObjectName mbeanName : registeredMbeans.keySet())
1:             {
1:                 // If we registered this as a management bean
1:                 // then leave it registered to allow the mbeans
1:                 // to be re-registered with JMX
1:                 if (mbeanName.equals(myManagementBean))
1:                     continue;
1:                 jmxUnregister(mbeanName);
1:             }
1:             mbeanServer = null;
1:         }
commit:f8bc019
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.mbeans.Management;
1: import org.apache.derby.mbeans.ManagementMBean;
/////////////////////////////////////////////////////////////////////////
1:    
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Need a copy of registeredMbeans since unregisterMBean will remove
1:         // items from registeredMbeans and thus invalidate any iterator
1:         // on it directly.
0:         for (ObjectName mbeanName : new HashSet<ObjectName>(registeredMbeans))
1:         
1:         mbeanServer = null;
/////////////////////////////////////////////////////////////////////////
0:             registerMBean(this,
0:                     ManagementMBean.class,
0:                     "type=Management");
1:             
/////////////////////////////////////////////////////////////////////////
1: 
1:     public synchronized boolean isManagementActive() {
1:         return mbeanServer != null;
1:     }
1: 
1:     public synchronized void startManagement() {
0:         // TODO:
1:     }
1: 
1:     public synchronized void stopManagement() {
0:         // TODO:
1:     }
commit:5c4e302
/////////////////////////////////////////////////////////////////////////
0: import javax.management.InstanceNotFoundException;
/////////////////////////////////////////////////////////////////////////
1:             unregisterMBean(mbeanName);
/////////////////////////////////////////////////////////////////////////
0:                     "type=Version,jar=derby.jar");
/////////////////////////////////////////////////////////////////////////
0:      * @param nameAttributes The String representation of the MBean's attrributes,
0:      * they will be added into the ObjectName with Derby's domain
0:     public synchronized Object registerMBean(final Object bean,
0:             final String nameAttributes)
0:             return null;
1:             final ObjectName beanName = new ObjectName(
0:                     DERBY_JMX_DOMAIN + ":" + nameAttributes);
/////////////////////////////////////////////////////////////////////////
0:                 return beanName;
/////////////////////////////////////////////////////////////////////////
0:      * Unregister an mbean using an object previous returned
0:      * from registerMBean.
1:      */
1:     public void unregisterMBean(Object mbeanIdentifier)
1:     {
1:         if (mbeanIdentifier == null)
1:             return;
1:         unregisterMBean((ObjectName) mbeanIdentifier);
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1:             // TODO - this is called on shutdown where
1:             // we don't really care about errors.
1:             // JMException jme = (JMException) pae.getException();
1:             //if (!(jme instanceof InstanceNotFoundException))
1:                 // throw StandardException.plainWrapException(jme);
commit:c970168
/////////////////////////////////////////////////////////////////////////
1: import javax.management.StandardMBean;
1: import org.apache.derby.iapi.services.info.Version;
1: import org.apache.derby.mbeans.VersionMBean;
/////////////////////////////////////////////////////////////////////////
0:                     VersionMBean.class,
/////////////////////////////////////////////////////////////////////////
1:      * Registers an MBean with the MBean server as a StandardMBean.
1:      * Use of the StandardMBean allows the implementation details
1:      * of Derby's mbeans to be hidden from JMX, thus only exposing
1:      * the MBean's interface in org.apache.derby.mbeans.
1:      * 
0:      * The object name instance 
1:      * @param bean The MBean to wrap with a StandardMBean and register
1:      * @param beanInterface The management interface for the MBean.
0:     private synchronized void registerMBean(final Object bean,
0:             final Class beanInterface,
0:             final String name)
/////////////////////////////////////////////////////////////////////////
1:             final StandardMBean standardMBean =
0:                 new StandardMBean(bean, beanInterface);
0:                                 mbeanServer.registerMBean(standardMBean, beanName);
commit:b8d76fa
/////////////////////////////////////////////////////////////////////////
1: /*
0:  Derby Classname org.apache.derby.impl.services.jmx.JMXManagementService
1:  
0:  Licensed under the Apache License, Version 2.0 (the "License");
0:  you may not use this file except in compliance with the License.
0:  You may obtain a copy of the License at
1:  
0:  http://www.apache.org/licenses/LICENSE-2.0
1:  
0:  Unless required by applicable law or agreed to in writing, software
0:  distributed under the License is distributed on an "AS IS" BASIS,
0:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  See the License for the specific language governing permissions and
0:  limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.impl.services.jmx;
1: 
1: import java.lang.management.ManagementFactory;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: import java.util.HashSet;
1: import java.util.Properties;
0: import java.util.Set;
1: 
1: import javax.management.JMException;
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.jmx.ManagementService;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.mbeans.Version;
1: 
1: /** 
1:  * This class implements the ManagementService interface and provides a simple
1:  * management and monitoring service.
1:  *
1:  * @see org.apache.derby.iapi.services.jmx.ManagementService
1:  */
0: public class JMXManagementService implements ManagementService, ModuleControl {
1: 
1:     /**
0:      * Platfrom MBean server, from ManagementFactory.getPlatformMBeanServer().
1:      */
1:     private MBeanServer mbeanServer;
1:     
1:     /**
0:      * The set of mbeans registered by this service.
1:      */
0:     private Set<ObjectName> registeredMbeans;
1: 
1:     public JMXManagementService() {
1: 
1:     }
1: 
1:     /**
1:      * Start the management service if derby.system.jmx is true.
1:      * <P>
1:      * Starting the service means:
1:      * <UL>
1:      * <LI> getting the platform MBeanServer which may require starting it
1:      * <LI> registering a Version mbean representing the system
1:      * </UL>
1:      */
0:     public void boot(boolean create, Properties properties)
1:             throws StandardException {
1: 
0:         if (PropertyUtil.getSystemBoolean(Property.JMX))
0:             initialize();
1:     }
1: 
1:     public synchronized void stop() {
0:         if (mbeanServer == null)
1:             return;
1:         
0:         for (ObjectName mbeanName : registeredMbeans)
0:             try {
0:                 unregisterMBean(mbeanName);
0:             } catch (StandardException e) {
0:                 // TODO: what to do here?
1:             }
1:     }
1: 
1:     /**
1:      * Initialize the management service by obtaining the platform
1:      * MBeanServer and registering system beans. Separate from
1:      * boot() to allow future changes where the jmx management
1:      * can be enabled on the fly.
1:      * 
0:      * @throws StandardException
1:      */
0:     private synchronized void initialize() throws StandardException {
1:         
0:         registeredMbeans = new HashSet<ObjectName>();
0:         try {
1:             mbeanServer = AccessController
1:                     .doPrivileged(new PrivilegedAction<MBeanServer>() {
1:                         public MBeanServer run() {
1:                             return ManagementFactory.getPlatformMBeanServer();
1:                         }
0:                     });
1: 
0:             registerMBean(new Version(Monitor.getMonitor().getEngineVersion()),
0:                     "org.apache.derby:type=Version,jar=derby.jar");
1:             
0:         } catch (SecurityException se) {
0:             // TODO: just ignoring inability to create the mbean server.
0:             // or should an error or warning be raised?
1:         }
1:     }
1: 
1:     /**
0:      * Registers an MBean with the MBean server. The object name instance 
0:      * represented by the given String will be created by this method.
1:      * 
0:      * @param bean The MBean to register
0:      * @param name The String representation of the MBean's object name.
1:      * 
1:      */
0:     private synchronized void registerMBean(final Object bean, final String name)
1:             throws StandardException {
1: 
0:         if (mbeanServer == null)
1:             return;
1: 
0:         try {
0:             final ObjectName beanName = new ObjectName(name);
0:             try {
1: 
1:                 AccessController
1:                         .doPrivileged(new PrivilegedExceptionAction<Object>() {
1: 
1:                             public Object run() throws JMException {
0:                                 mbeanServer.registerMBean(bean, beanName);
0:                                 return null;
1:                             }
1: 
0:                         });
1:                 
0:                 registeredMbeans.add(beanName);
1: 
1:             } catch (PrivilegedActionException pae) {
0:                 throw (JMException) pae.getException();
1:             }
1:         } catch (JMException jme) {
1:             throw StandardException.plainWrapException(jme);
1:         }
1:     }
1:     
1:     /**
0:      * Unregisters an mbean that was registered  by this service.
1:      * @param mbeanName Bean to unregister.
0:      * @throws StandardException
1:      */
1:     private synchronized void unregisterMBean(final ObjectName mbeanName)
0:         throws StandardException
1:     {
0:         if (!registeredMbeans.remove(mbeanName))
1:             return;
1: 
1:         if (!mbeanServer.isRegistered(mbeanName))
1:             return;
1: 
0:         try {
1: 
1:             AccessController
1:                     .doPrivileged(new PrivilegedExceptionAction<Object>() {
1: 
1:                         public Object run() throws JMException {
1:                             mbeanServer.unregisterMBean(mbeanName);
0:                             return null;
1:                         }
1: 
0:                     });
1: 
1:         } catch (PrivilegedActionException pae) {
0:             throw StandardException.plainWrapException(pae.getException());
1:         }
1:     }
1: }
============================================================================