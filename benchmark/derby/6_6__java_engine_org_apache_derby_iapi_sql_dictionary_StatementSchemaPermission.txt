1:c45f5b1: /*
4:c45f5b1: 
1:ee59de8:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission
1:c45f5b1: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:c45f5b1: 
1:c45f5b1: 	  http://www.apache.org/licenses/LICENSE-2.0
1:c45f5b1: 
1:c45f5b1:    Unless required by applicable law or agreed to in writing, software
1:c45f5b1:    distributed under the License is distributed on an "AS IS" BASIS,
1:c45f5b1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c45f5b1:    See the License for the specific language governing permissions and
1:c45f5b1:    limitations under the License.
1:c45f5b1: 
1:c45f5b1:  */
1:c45f5b1: 
1:c45f5b1: package org.apache.derby.iapi.sql.dictionary;
1:c45f5b1: 
1:c45f5b1: import org.apache.derby.iapi.error.StandardException;
1:c45f5b1: import org.apache.derby.iapi.sql.conn.Authorizer;
1:c45f5b1: import org.apache.derby.iapi.reference.SQLState;
1:c45f5b1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eb8b3a2: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:c45f5b1: import org.apache.derby.iapi.store.access.TransactionController;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:12988c7: import org.apache.derby.iapi.sql.Activation;
1:c45f5b1: 
1:c45f5b1: /**
1:428ad73:  * This class describes a schema permission required by a statement.
1:c45f5b1:  */
1:c45f5b1: 
1:c45f5b1: public class StatementSchemaPermission extends StatementPermission
2:c45f5b1: {
1:28c633d: 	/**
1:28c633d: 	 * The schema name 
1:28c633d: 	 */
1:428ad73: 	private String schemaName;
1:28c633d: 	/**
1:28c633d: 	 * Authorization id
1:28c633d: 	 */
1:28c633d: 	private String aid;  
1:28c633d: 	/**	 
1:28c633d: 	 * One of Authorizer.CREATE_SCHEMA_PRIV, MODIFY_SCHEMA_PRIV,  
1:28c633d: 	 * DROP_SCHEMA_PRIV, etc.
1:28c633d: 	 */ 
1:28c633d: 	private int privType;  
1:d78ad2e: 
1:28c633d: 	public StatementSchemaPermission(String schemaName, String aid, int privType)
1:c45f5b1: 	{
1:50ba36b: 		this.schemaName = schemaName;
1:50ba36b: 		this.aid 	= aid;
1:50ba36b: 		this.privType	= privType;
2:c45f5b1: 	}
1:2d2e717: 
1:2d2e717: 	/**
1:eb8b3a2: 	 * @see StatementPermission#check
1:c45f5b1: 	 */
1:eb8b3a2: 	public void check( LanguageConnectionContext lcc,
1:12988c7: 					   boolean forGrant,
1:12988c7: 					   Activation activation) throws StandardException
1:50ba36b: 	{
1:eb8b3a2: 		DataDictionary dd =	lcc.getDataDictionary();
1:eb8b3a2: 		TransactionController tc = lcc.getTransactionExecute();
1:9f60172:         String currentUserId = lcc.getCurrentUserId(activation);
1:28c633d: 		switch ( privType )
1:50ba36b: 		{
1:28c633d: 			case Authorizer.MODIFY_SCHEMA_PRIV:
1:28c633d: 			case Authorizer.DROP_SCHEMA_PRIV:
1:28c633d: 				SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, false);
1:28c633d: 				// If schema hasn't been created already, no need to check
1:28c633d: 				// for drop schema, an exception will be thrown if the schema 
1:28c633d: 				// does not exists.
1:28c633d: 				if (sd == null)
1:28c633d: 					return;
1:12988c7: 
1:9f60172:                 if (!currentUserId.equals(sd.getAuthorizationId()))
2:28c633d: 					throw StandardException.newException(
1:9f60172:                         SQLState.AUTH_NO_ACCESS_NOT_OWNER,
1:9f60172:                         currentUserId,
1:9f60172:                         schemaName);
1:28c633d: 				break;
1:28c633d: 			
1:28c633d: 			case Authorizer.CREATE_SCHEMA_PRIV:
1:9f60172:                 // Non-DBA Users can only create schemas that match their
1:9f60172:                 // currentUserId Also allow only DBA to set currentUserId to
1:9f60172:                 // another user Note that for DBA, check interface wouldn't be
1:9f60172:                 // called at all
1:9f60172:                 if ( !schemaName.equals(currentUserId) ||
1:9f60172:                          (aid != null && !aid.equals(currentUserId)) )
1:9f60172: 
1:9f60172:                     throw StandardException.newException(
1:9f60172:                         SQLState.AUTH_NOT_DATABASE_OWNER,
1:9f60172:                         currentUserId,
1:9f60172:                         schemaName);
1:28c633d: 				break;
1:28c633d: 			
1:28c633d: 			default:
1:28c633d: 				if (SanityManager.DEBUG)
1:28c633d: 				{
1:28c633d: 					SanityManager.THROWASSERT(
1:28c633d: 							"Unexpected value (" + privType + ") for privType");
1:28c633d: 				}
1:28c633d: 				break;
1:50ba36b: 		}
1:50ba36b: 	}
1:eb8b3a2: 
1:c45f5b1: 	/**
1:2d2e717: 	 * Schema level permission is never required as list of privileges required
1:2d2e717: 	 * for triggers/constraints/views and hence we don't do any work here, but
1:2d2e717: 	 * simply return null
1:2d2e717: 	 * 
1:2d2e717: 	 * @see StatementPermission#check
1:2d2e717: 	 */
1:2d2e717: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1:2d2e717: 	throws StandardException
1:2d2e717: 	{
1:2d2e717: 		return null;
1:2d2e717: 	}
1:12988c7: 
1:12988c7:     private String getPrivName( )
1:12988c7: 	{
1:12988c7: 		switch(privType) {
1:12988c7: 		case Authorizer.CREATE_SCHEMA_PRIV:
1:12988c7: 			return "CREATE_SCHEMA";
1:12988c7: 		case Authorizer.MODIFY_SCHEMA_PRIV:
1:12988c7: 			return "MODIFY_SCHEMA";
1:12988c7: 		case Authorizer.DROP_SCHEMA_PRIV:
1:12988c7: 			return "DROP_SCHEMA";
1:12988c7:         default:
1:12988c7:             return "?";
1:12988c7:         }
1:12988c7:     }
1:12988c7: 
1:12988c7: 	public String toString() {
1:12988c7: 		return "StatementSchemaPermission: " + schemaName + " owner:" +
1:12988c7: 			aid + " " + getPrivName();
1:12988c7: 	}
1:c45f5b1: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         String currentUserId = lcc.getCurrentUserId(activation);
/////////////////////////////////////////////////////////////////////////
1:                 if (!currentUserId.equals(sd.getAuthorizationId()))
1:                         SQLState.AUTH_NO_ACCESS_NOT_OWNER,
1:                         currentUserId,
1:                         schemaName);
1:                 // Non-DBA Users can only create schemas that match their
1:                 // currentUserId Also allow only DBA to set currentUserId to
1:                 // another user Note that for DBA, check interface wouldn't be
1:                 // called at all
1:                 if ( !schemaName.equals(currentUserId) ||
1:                          (aid != null && !aid.equals(currentUserId)) )
1: 
1:                     throw StandardException.newException(
1:                         SQLState.AUTH_NOT_DATABASE_OWNER,
1:                         currentUserId,
1:                         schemaName);
commit:12988c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1: 					   boolean forGrant,
1: 					   Activation activation) throws StandardException
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private String getPrivName( )
1: 	{
1: 		switch(privType) {
1: 		case Authorizer.CREATE_SCHEMA_PRIV:
1: 			return "CREATE_SCHEMA";
1: 		case Authorizer.MODIFY_SCHEMA_PRIV:
1: 			return "MODIFY_SCHEMA";
1: 		case Authorizer.DROP_SCHEMA_PRIV:
1: 			return "DROP_SCHEMA";
1:         default:
1:             return "?";
1:         }
1:     }
1: 
1: 	public String toString() {
1: 		return "StatementSchemaPermission: " + schemaName + " owner:" +
1: 			aid + " " + getPrivName();
1: 	}
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28c633d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * The schema name 
1: 	 */
1: 	/**
1: 	 * Authorization id
1: 	 */
1: 	private String aid;  
1: 	/**	 
1: 	 * One of Authorizer.CREATE_SCHEMA_PRIV, MODIFY_SCHEMA_PRIV,  
1: 	 * DROP_SCHEMA_PRIV, etc.
1: 	 */ 
1: 	private int privType;  
1: 	public StatementSchemaPermission(String schemaName, String aid, int privType)
/////////////////////////////////////////////////////////////////////////
1: 		switch ( privType )
1: 			case Authorizer.MODIFY_SCHEMA_PRIV:
1: 			case Authorizer.DROP_SCHEMA_PRIV:
1: 				SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, false);
1: 				// If schema hasn't been created already, no need to check
1: 				// for drop schema, an exception will be thrown if the schema 
1: 				// does not exists.
1: 				if (sd == null)
1: 					return;
0: 				if (!authid.equals(sd.getAuthorizationId()))
1: 					throw StandardException.newException(
0: 						SQLState.AUTH_NO_ACCESS_NOT_OWNER, authid, schemaName);
1: 				break;
1: 			
1: 			case Authorizer.CREATE_SCHEMA_PRIV:
0: 				// Non-DBA Users can only create schemas that match their authid
0: 				// Also allow only DBA to set authid to another user
0: 				// Note that for DBA, check interface wouldn't be called at all
0: 				if ( !schemaName.equals(authid) || 
0: 						(aid != null && !aid.equals(authid)) )
1: 					throw StandardException.newException(
0: 						SQLState.AUTH_NOT_DATABASE_OWNER, authid, schemaName);
1: 				break;
1: 			
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 							"Unexpected value (" + privType + ") for privType");
1: 				}
1: 				break;
commit:439d1e8
/////////////////////////////////////////////////////////////////////////
0: 			// Non-Database Owner Users can only create schemas that match 
0: 			// their authid. Also allow only Database Owner to set authid to 
0: 			// another user. Note that for Database Owner, check interface 
0: 			// wouldn't be called at all
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:428ad73
/////////////////////////////////////////////////////////////////////////
1:  * This class describes a schema permission required by a statement.
1: 	private String schemaName;
0: 	private String aid;
0: 	private boolean privType;
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Schema level permission is never required as list of privileges required
1: 	 * for triggers/constraints/views and hence we don't do any work here, but
1: 	 * simply return null
1: 	 * 
1: 	 * @see StatementPermission#check
1: 	 */
1: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1: 	throws StandardException
1: 	{
1: 		return null;
1: 	}
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:eb8b3a2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1: 	 * @see StatementPermission#check
1: 	public void check( LanguageConnectionContext lcc,
1: 		DataDictionary dd =	lcc.getDataDictionary();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 	
commit:d78ad2e
/////////////////////////////////////////////////////////////////////////
0: 			SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, false);
0: 			// If schema hasn't been created already, no need to check
0: 			if (sd == null)
0: 				return;
1: 
commit:50ba36b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	protected String schemaName;
0: 	protected String aid;
0: 	protected boolean privType;
0: 	public StatementSchemaPermission(String schemaName, String aid, boolean privType)
1: 		this.schemaName = schemaName;
1: 		this.aid 	= aid;
1: 		this.privType	= privType;
0: 	 * @param tc		the TransactionController
0: 	 * @param dd 		A DataDictionary
0: 	 * @param authid	authorizationId
0: 					   String authid,
0: 		if (privType == Authorizer.MODIFY_SCHEMA_PRIV)
1: 		{
0: 			SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);
0: 			if (!authid.equals(sd.getAuthorizationId()))
0: 				throw StandardException.newException(
0: 					SQLState.AUTH_NO_ACCESS_NOT_OWNER, authid, schemaName);
1: 		}
0: 		else
1: 		{
0: 			// Non-DBA Users can only create schemas that match their authid
0: 			// Also allow only DBA to set authid to another user
0: 			// Note that for DBA, check interface wouldn't be called at all
0: 			if (!schemaName.equals(authid) || (aid != null && !aid.equals(authid)))
0: 				throw StandardException.newException(
0: 					SQLState.AUTH_NOT_DATABASE_OWNER, authid, schemaName);
1: 		}
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
0:  * This class describes a schema permission used (required) by a statement.
1:  */
1: 
1: public class StatementSchemaPermission extends StatementPermission
1: {
0: 	protected UUID schemaUUID;
1: 
0: 	public StatementSchemaPermission(UUID schemaUUID)
1: 	{
0: 		this.schemaUUID = schemaUUID;
1: 	}
1: 
1: 	/**
0: 	 * @param tc the TransactionController
0: 	 * @param dd A DataDictionary
0: 	 * @param authorizationId A user
0: 	 * @param forGrant
0: 	 *
0: 	 * @exception StandardException if schema authorization not granted
1: 	 */
0: 	public void check(TransactionController tc,
0: 					   DataDictionary dd,
0: 					   String authorizationId,
0: 					   boolean forGrant) throws StandardException
1: 	{
0: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaUUID, tc);
0: 		if (!authorizationId.equals(sd.getAuthorizationId()))
0: 			throw StandardException.newException(SQLState.AUTH_NO_ACCESS_NOT_OWNER,
0: 				 authorizationId, sd.getSchemaName());
1: 	}
1: }
============================================================================