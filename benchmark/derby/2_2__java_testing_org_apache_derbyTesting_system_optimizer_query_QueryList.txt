1:ee0904b: /*
1:ee0904b:  
1:ee0904b:  Derby - Class org.apache.derbyTesting.system.langtest.query.QueryList
1:ee0904b:  
1:ee0904b:  Licensed to the Apache Software Foundation (ASF) under one or more
1:ee0904b:  contributor license agreements.  See the NOTICE file distributed with
1:ee0904b:  this work for additional information regarding copyright ownership.
1:ee0904b:  The ASF licenses this file to You under the Apache License, Version 2.0
1:ee0904b:  (the "License"); you may not use this file except in compliance with
1:ee0904b:  the License.  You may obtain a copy of the License at
1:ee0904b:  
1:ee0904b:  http://www.apache.org/licenses/LICENSE-2.0
1:ee0904b:  
1:ee0904b:  Unless required by applicable law or agreed to in writing, software
1:ee0904b:  distributed under the License is distributed on an "AS IS" BASIS,
1:ee0904b:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee0904b:  See the License for the specific language governing permissions and
1:ee0904b:  limitations under the License.
1:ee0904b:  
1:ee0904b:  */
1:ee0904b: package org.apache.derbyTesting.system.optimizer.query;
1:ee0904b: /**
1:ee0904b:  * Class QueryList: Returns the list of queries to be run as a part of the test. If the
1:ee0904b:  *                  'query.list' file is provided, this class will read the file and
1:ee0904b:  *                  return a GenericQuery object 
1:ee0904b:  */
1:ee0904b: import java.io.File;
1:ee0904b: import java.io.FileInputStream;
1:ee0904b: import java.io.IOException;
1:ee0904b: import java.sql.Connection;
1:ee0904b: import java.util.ArrayList;
1:ee0904b: import java.util.Properties;
1:ee0904b: 
1:ee0904b: import org.apache.derbyTesting.system.optimizer.StaticValues;
1:ee0904b: 
1:ee0904b: public class QueryList {
1:9d44c9e: 	private static ArrayList<GenericQuery> qList = new ArrayList<GenericQuery>();
1:ee0904b: 	public static boolean queryListOnly=false;
1:ee0904b: 	public static void init(Connection conn){
1:ee0904b: 		GenericQuery q=new GenericQuery();
1:ee0904b: 		File queryFile = new File(StaticValues.queryFile);
1:ee0904b: 		if(queryFile.exists()){
1:ee0904b: 			System.out.println("External query list found, adding to the run...");
1:ee0904b: 			Properties p=new Properties();
1:ee0904b: 			queryListOnly=true;
1:ee0904b: 			try{
1:ee0904b: 				p.load(new FileInputStream(queryFile));
1:ee0904b: 				q.generateQueries(p);
1:ee0904b: 				getQList().add(q);
1:ee0904b: 				if(queryListOnly){
1:ee0904b: 					return;
1:ee0904b: 				}
1:ee0904b: 			}catch(IOException ioe){
1:ee0904b: 				ioe.printStackTrace();
1:ee0904b: 			}
1:ee0904b: 		}
1:ee0904b: 		
1:ee0904b: 		q=new Query1();
1:ee0904b: 		getQList().add(q);
1:ee0904b: 		q=new Query2();
1:ee0904b: 		getQList().add(q);
1:ee0904b: 		q=new Query3();
1:ee0904b: 		getQList().add(q);
1:ee0904b: 		q=new Query4();
1:ee0904b: 		getQList().add(q);
1:ee0904b: 		q=new Query5();
1:ee0904b: 		getQList().add(q);
1:ee0904b: 		q=new Query6();
1:ee0904b: 		getQList().add(q);
1:ee0904b: 		
1:ee0904b: 	}
1:9d44c9e: 	public static ArrayList<GenericQuery> getQList() {
1:ee0904b: 		return qList;
1:ee0904b: 	}
1:ee0904b: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1: 	private static ArrayList<GenericQuery> qList = new ArrayList<GenericQuery>();
/////////////////////////////////////////////////////////////////////////
1: 	public static ArrayList<GenericQuery> getQList() {
author:Army
-------------------------------------------------------------------------------
commit:ee0904b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.system.langtest.query.QueryList
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.system.optimizer.query;
1: /**
1:  * Class QueryList: Returns the list of queries to be run as a part of the test. If the
1:  *                  'query.list' file is provided, this class will read the file and
1:  *                  return a GenericQuery object 
1:  */
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.util.ArrayList;
1: import java.util.Properties;
1: 
1: import org.apache.derbyTesting.system.optimizer.StaticValues;
1: 
1: public class QueryList {
0: 	private static ArrayList qList=new ArrayList();
1: 	public static boolean queryListOnly=false;
1: 	public static void init(Connection conn){
1: 		GenericQuery q=new GenericQuery();
1: 		File queryFile = new File(StaticValues.queryFile);
1: 		if(queryFile.exists()){
1: 			System.out.println("External query list found, adding to the run...");
1: 			Properties p=new Properties();
1: 			queryListOnly=true;
1: 			try{
1: 				p.load(new FileInputStream(queryFile));
1: 				q.generateQueries(p);
1: 				getQList().add(q);
1: 				if(queryListOnly){
1: 					return;
1: 				}
1: 			}catch(IOException ioe){
1: 				ioe.printStackTrace();
1: 			}
1: 		}
1: 		
1: 		q=new Query1();
1: 		getQList().add(q);
1: 		q=new Query2();
1: 		getQList().add(q);
1: 		q=new Query3();
1: 		getQList().add(q);
1: 		q=new Query4();
1: 		getQList().add(q);
1: 		q=new Query5();
1: 		getQList().add(q);
1: 		q=new Query6();
1: 		getQList().add(q);
1: 		
1: 	}
0: 	public static ArrayList getQList() {
1: 		return qList;
1: 	}
1: }
============================================================================