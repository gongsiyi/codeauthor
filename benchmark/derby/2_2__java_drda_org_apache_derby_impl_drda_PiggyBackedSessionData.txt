1:c6c4d4d: /*
1:c6c4d4d: 
1:c6c4d4d:    Derby - Class org.apache.derby.impl.drda.PiggyBackedSessionData
1:c6c4d4d: 
1:c6c4d4d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c6c4d4d:    contributor license agreements.  See the NOTICE file distributed with
1:c6c4d4d:    this work for additional information regarding copyright ownership.
1:c6c4d4d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c6c4d4d:    (the "License"); you may not use this file except in compliance with
1:c6c4d4d:    the License.  You may obtain a copy of the License at
1:c6c4d4d: 
1:c6c4d4d:        http://www.apache.org/licenses/LICENSE-2.0
1:c6c4d4d: 
1:c6c4d4d:    Unless required by applicable law or agreed to in writing, software
1:c6c4d4d:    distributed under the License is distributed on an "AS IS" BASIS,
1:c6c4d4d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c6c4d4d:    See the License for the specific language governing permissions and
1:c6c4d4d:    limitations under the License.
1:c6c4d4d: 
1:c6c4d4d:  */
1:c6c4d4d: 
1:c6c4d4d: package org.apache.derby.impl.drda;
1:c6c4d4d: 
1:c6c4d4d: import java.sql.SQLException;
1:c6c4d4d: import org.apache.derby.iapi.jdbc.EngineConnection;
1:c6c4d4d: 
1:c6c4d4d: 
1:c6c4d4d: /**
1:c6c4d4d:  * Tracks the most recently piggy-backed session attributes, and provides
1:c6c4d4d:  * methods to determine if they have been modified and need to be re-sent
1:c6c4d4d:  * to the client.
1:c6c4d4d:  */
1:c6c4d4d: class PiggyBackedSessionData {
1:c6c4d4d:     private int iso_;
1:c6c4d4d:     private boolean isoMod_;
1:c6c4d4d: 
1:c6c4d4d:     private String schema_;
1:c6c4d4d:     private boolean schemaMod_;
1:c6c4d4d: 
1:c6c4d4d:     private final EngineConnection conn_;
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * Get a reference (handle) to the PiggyBackedSessionData object. Null will
1:c6c4d4d:      * be returned either if the conn argument is not valid, or if the
1:c6c4d4d:      * createOnDemand argument is false and the existing argument is null.
1:c6c4d4d:      * @param existing the PBSD object from the previous piggybacking or null if
1:c6c4d4d:      * none has yet taken place
1:c6c4d4d:      * @param conn the current EngineConnection
1:c6c4d4d:      * @param createOnDemand if true; create the instance when needed
1:c6c4d4d:      * @return a reference to the PBSD object or null
1:c6c4d4d:      * @throws java.sql.SQLException
1:c6c4d4d:      */
1:c6c4d4d:     public static PiggyBackedSessionData getInstance(
1:c6c4d4d:             PiggyBackedSessionData existing, EngineConnection conn,
1:c6c4d4d:             boolean createOnDemand) throws SQLException {
1:c6c4d4d:         if (conn == null || conn.isClosed() ||
1:c6c4d4d:                 (existing != null && existing.conn_ != conn)) {
1:c6c4d4d:             return null;
1:c6c4d4d:         }
1:c6c4d4d:         if (existing == null && createOnDemand) {
1:c6c4d4d:             return new PiggyBackedSessionData(conn);
1:c6c4d4d:         }
1:c6c4d4d:         return existing;
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * Constructs a new instance with an associated EngineConnection.
1:c6c4d4d:      * A newly constructed instance is invalid. refresh() must be called before
1:c6c4d4d:      * the xModified() methods can be used.
1:c6c4d4d:      * @param conn the connection to obtain data from
1:c6c4d4d:      */
1:2349a90:     private PiggyBackedSessionData(EngineConnection conn) {
1:c6c4d4d:         conn_ = conn;
1:c6c4d4d:         iso_ = -1; // Initialize to an illegal value
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * Refresh with the latest session attribute values from
1:c6c4d4d:      * the connection. Any changes will be reflected in the corresponding
1:c6c4d4d:      * xModified() methods, until setUnmodified() is called.
1:c6c4d4d:      */
1:c6c4d4d:     public void refresh() throws SQLException {
1:c6c4d4d:         setUnmodified();
1:c6c4d4d:         int iso = conn_.getTransactionIsolation();
1:c6c4d4d:         if (iso != iso_) {
1:c6c4d4d:             isoMod_ = true;
1:c6c4d4d:             iso_ = iso;
1:c6c4d4d:         }
1:c6c4d4d:         String schema = conn_.getCurrentSchemaName();
1:c6c4d4d:         if (!schema.equals(schema_)) {
1:c6c4d4d:             schemaMod_ = true;
1:c6c4d4d:             schema_ = schema;
1:c6c4d4d:         }
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * Clear the modified status. Called after session attributes have
1:c6c4d4d:      * been sent to the client so that the xModified methods will
1:c6c4d4d:      * return false.
1:c6c4d4d:      */
1:c6c4d4d:     public void setUnmodified() {
1:c6c4d4d:         isoMod_ = false;
1:c6c4d4d:         schemaMod_ = false;
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * @return true if the isolation level was modified by the last call
1:c6c4d4d:      * to fetchLatest
1:c6c4d4d:      */
1:c6c4d4d:     public boolean isIsoModified() {
1:c6c4d4d:         return isoMod_;
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * @return true if the current schema name was modified by the last
1:c6c4d4d:      * call to fetchLatest
1:c6c4d4d:      */
1:c6c4d4d:     public boolean isSchemaModified() {
1:c6c4d4d:         return schemaMod_;
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * @return true if any piggy-backed session attribute was modified by
1:c6c4d4d:      * the last call to fetchLatest
1:c6c4d4d:      */
1:c6c4d4d:     public boolean isModified() {
1:c6c4d4d:         return (isoMod_ || schemaMod_);
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * @return the saved jdbc isolation level
1:c6c4d4d:      */
1:c6c4d4d:     public int getIso() {
1:c6c4d4d:         return iso_;
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * @return the saved schema name
1:c6c4d4d:      */
1:c6c4d4d:     public String getSchema() {
1:c6c4d4d:         return schema_;
1:c6c4d4d:     }
1:c6c4d4d: 
1:c6c4d4d:     public String toString() {
1:c6c4d4d:         return "iso:" + iso_ + (isoMod_ ? "(M)" : "") + " schema:" + schema_ +
1:c6c4d4d:             (schemaMod_ ? "(M)" : "");
1:c6c4d4d:     }
1:c6c4d4d: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2349a90
/////////////////////////////////////////////////////////////////////////
1:     private PiggyBackedSessionData(EngineConnection conn) {
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:c6c4d4d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.PiggyBackedSessionData
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:        http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
1: import java.sql.SQLException;
1: import org.apache.derby.iapi.jdbc.EngineConnection;
1: 
1: 
1: /**
1:  * Tracks the most recently piggy-backed session attributes, and provides
1:  * methods to determine if they have been modified and need to be re-sent
1:  * to the client.
1:  */
1: class PiggyBackedSessionData {
1:     private int iso_;
1:     private boolean isoMod_;
1: 
1:     private String schema_;
1:     private boolean schemaMod_;
1: 
1:     private final EngineConnection conn_;
1: 
1:     /**
1:      * Get a reference (handle) to the PiggyBackedSessionData object. Null will
1:      * be returned either if the conn argument is not valid, or if the
1:      * createOnDemand argument is false and the existing argument is null.
1:      * @param existing the PBSD object from the previous piggybacking or null if
1:      * none has yet taken place
1:      * @param conn the current EngineConnection
1:      * @param createOnDemand if true; create the instance when needed
1:      * @return a reference to the PBSD object or null
1:      * @throws java.sql.SQLException
1:      */
1:     public static PiggyBackedSessionData getInstance(
1:             PiggyBackedSessionData existing, EngineConnection conn,
1:             boolean createOnDemand) throws SQLException {
1:         if (conn == null || conn.isClosed() ||
1:                 (existing != null && existing.conn_ != conn)) {
1:             return null;
1:         }
1:         if (existing == null && createOnDemand) {
1:             return new PiggyBackedSessionData(conn);
1:         }
1:         return existing;
1:     }
1: 
1:     /**
1:      * Constructs a new instance with an associated EngineConnection.
1:      * A newly constructed instance is invalid. refresh() must be called before
1:      * the xModified() methods can be used.
1:      * @param conn the connection to obtain data from
1:      */
0:     private PiggyBackedSessionData(EngineConnection conn) throws SQLException {
1:         conn_ = conn;
1:         iso_ = -1; // Initialize to an illegal value
1:     }
1: 
1:     /**
1:      * Refresh with the latest session attribute values from
1:      * the connection. Any changes will be reflected in the corresponding
1:      * xModified() methods, until setUnmodified() is called.
1:      */
1:     public void refresh() throws SQLException {
1:         setUnmodified();
1:         int iso = conn_.getTransactionIsolation();
1:         if (iso != iso_) {
1:             isoMod_ = true;
1:             iso_ = iso;
1:         }
1:         String schema = conn_.getCurrentSchemaName();
1:         if (!schema.equals(schema_)) {
1:             schemaMod_ = true;
1:             schema_ = schema;
1:         }
1:     }
1: 
1:     /**
1:      * Clear the modified status. Called after session attributes have
1:      * been sent to the client so that the xModified methods will
1:      * return false.
1:      */
1:     public void setUnmodified() {
1:         isoMod_ = false;
1:         schemaMod_ = false;
1:     }
1: 
1:     /**
1:      * @return true if the isolation level was modified by the last call
1:      * to fetchLatest
1:      */
1:     public boolean isIsoModified() {
1:         return isoMod_;
1:     }
1: 
1:     /**
1:      * @return true if the current schema name was modified by the last
1:      * call to fetchLatest
1:      */
1:     public boolean isSchemaModified() {
1:         return schemaMod_;
1:     }
1: 
1:     /**
1:      * @return true if any piggy-backed session attribute was modified by
1:      * the last call to fetchLatest
1:      */
1:     public boolean isModified() {
1:         return (isoMod_ || schemaMod_);
1:     }
1: 
1:     /**
1:      * @return the saved jdbc isolation level
1:      */
1:     public int getIso() {
1:         return iso_;
1:     }
1: 
1:     /**
1:      * @return the saved schema name
1:      */
1:     public String getSchema() {
1:         return schema_;
1:     }
1: 
1:     public String toString() {
1:         return "iso:" + iso_ + (isoMod_ ? "(M)" : "") + " schema:" + schema_ +
1:             (schemaMod_ ? "(M)" : "");
1:     }
1: }
============================================================================