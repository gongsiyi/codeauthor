1:b17e04d: /*
4:b17e04d: 
1:b17e04d:  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest
1:b17e04d: 
1:b17e04d:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b17e04d:  contributor license agreements.  See the NOTICE file distributed with
1:b17e04d:  this work for additional information regarding copyright ownership.
1:b17e04d:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b17e04d:  (the "License"); you may not use this file except in compliance with
1:b17e04d:  the License.  You may obtain a copy of the License at
1:b17e04d: 
1:b17e04d:  http://www.apache.org/licenses/LICENSE-2.0
1:b17e04d: 
1:b17e04d:  Unless required by applicable law or agreed to in writing, software
1:b17e04d:  distributed under the License is distributed on an "AS IS" BASIS,
1:b17e04d:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b17e04d:  See the License for the specific language governing permissions and
1:b17e04d:  limitations under the License.
1:b17e04d: 
1:b17e04d:  */
1:b17e04d: package org.apache.derbyTesting.functionTests.tests.lang;
1:b17e04d: 
1:b17e04d: /**
1:b17e04d:  * This test confirm that no trouble happens when database , of which active
1:b17e04d:  * connection exists with , was shut down.
1:b17e04d:  */
1:b17e04d: 
1:b17e04d: import java.sql.Connection;
1:b17e04d: import java.sql.PreparedStatement;
1:b17e04d: import java.sql.SQLException;
1:b17e04d: import java.sql.Statement;
1:b17e04d: import javax.sql.DataSource;
1:b17e04d: import junit.framework.Test;
1:b17e04d: import org.apache.derby.jdbc.ClientDataSource;
1:b17e04d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:b17e04d: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:b17e04d: import org.apache.derbyTesting.junit.JDBC;
1:b17e04d: import org.apache.derbyTesting.junit.JDBCDataSource;
1:b17e04d: 
1:b17e04d: public class ShutdownDatabaseTest extends BaseJDBCTestCase {
1:b17e04d:     /**
1:b17e04d:      * Public constructor required for running test as standalone JUnit.
1:b17e04d:      */
1:b17e04d: 
1:b17e04d:     public ShutdownDatabaseTest(String name) {
1:b17e04d:         super(name);
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Create a suite of tests.
1:b17e04d:      */
1:b17e04d:     public static Test suite() {
1:b17e04d:         // Only run in embedded as running in client/server
1:b17e04d:         // hits a problem. See DERBY-2477. To see the bug
1:1ae02c9:         // just use the defaultSuite.
1:1ae02c9:         return new CleanDatabaseTestSetup(new BaseTestSuite(
1:1ae02c9:             ShutdownDatabaseTest.class, "ShutdownDatabaseTest"));
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     protected void initializeConnection(Connection conn) throws SQLException {
1:b17e04d:         conn.setAutoCommit(false);
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     protected void setUp() throws SQLException {
1:b17e04d:         Statement stmt = createStatement();
1:b17e04d:         stmt.executeUpdate("create table " + "TEST_TABLE "
1:b17e04d:                 + "( TEST_COL integer )");
1:b17e04d:         commit();
1:b17e04d:         insertIntoTestTable(1, 1000);
1:b17e04d: 
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * to make sure all tables and databases are dropped
1:b17e04d:      */
1:b17e04d:     protected void tearDown() throws Exception {
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         st.execute("DROP TABLE TEST_TABLE");
1:b17e04d:         st.close();
1:b17e04d:         commit();
1:98ceb6f:         super.tearDown();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the only transaction was committed.
1:b17e04d:      */
1:b17e04d:     public void testOnlyTransactionWasCommited() throws SQLException {
1:b17e04d:         commit();
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "1000");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the transaction was committed, and next transaction was committed.
1:b17e04d:      */
1:b17e04d:     public void testTwiceCommited() throws SQLException {
1:b17e04d: 
1:b17e04d:         commit();
1:b17e04d:         insertIntoTestTable(1001, 999);
1:b17e04d:         commit();
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "1999");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the transaction was rollbacked, and next transaction was commited.
1:b17e04d:      */
1:b17e04d:     public void testOnceRollbackedAndCommited() throws SQLException {
1:b17e04d: 
1:b17e04d:         rollback();
1:b17e04d:         insertIntoTestTable(1001, 999);
1:b17e04d:         commit();
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "999");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the only transaction was rollbacked.
1:b17e04d:      */
1:b17e04d:     public void testOnlyTransactionWasRollbacked() throws SQLException {
1:b17e04d: 
1:b17e04d:         rollback();
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "0");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the transaction was commited, and next transaction was rollbacked.
1:b17e04d:      */
1:b17e04d:     public void testOnceCommitedAndRollbacked() throws SQLException {
1:b17e04d: 
1:b17e04d:         commit();
1:b17e04d:         insertIntoTestTable(1001, 999);
1:b17e04d:         rollback();
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "1000");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the transaction was rollbacked, and next transaction was rollbacked.
1:b17e04d:      */
1:b17e04d:     public void testTwiceRollbacked() throws SQLException {
1:b17e04d: 
1:b17e04d:         rollback();
1:b17e04d:         insertIntoTestTable(1001, 999);
1:b17e04d:         rollback();
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "0");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the only transaction was not committed/rollbacked.
1:b17e04d:      */
1:b17e04d:     public void testOnlyTransactionWasLeft() throws SQLException {
1:b17e04d: 
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "0");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the transaction was committed, and next transaction was not
1:b17e04d:      * committed/rollbacked yet.
1:b17e04d:      */
1:b17e04d:     public void testOnceCommitedAndLeft() throws SQLException {
1:b17e04d: 
1:b17e04d:         commit();
1:b17e04d:         insertIntoTestTable(1001, 999);
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "1000");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     /**
1:b17e04d:      * Tests shutdown with the transaction was rollbacked, and next transaction was not
1:b17e04d:      * committed/rollbacked yet.
1:b17e04d:      */
1:b17e04d: 
1:b17e04d:     public void testOnceRollbackedAndLeft() throws SQLException {
1:b17e04d: 
1:b17e04d:         rollback();
1:b17e04d:         insertIntoTestTable(1001, 999);
1:b17e04d:         assertShutdownOK();
1:b17e04d:         Statement st = createStatement();
1:b17e04d:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:b17e04d:                 + "from " + "TEST_TABLE "), "0");
1:b17e04d:         st.close();
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     protected void insertIntoTestTable(int val) throws SQLException {
1:b17e04d: 
1:b17e04d:         PreparedStatement st = null;
1:b17e04d: 
1:b17e04d:         try {
1:b17e04d:             st = prepareStatement("insert into " + "TEST_TABLE "
1:b17e04d:                     + "( TEST_COL ) " + "values( ? )");
1:b17e04d:             st.setInt(1, val);
1:b17e04d:             st.execute();
1:b17e04d: 
1:b17e04d:         } finally {
1:b17e04d:             if (st != null) {
1:b17e04d:                 st.close();
1:b17e04d:                 st = null;
1:b17e04d:             }
1:b17e04d:         }
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     private void insertIntoTestTable(int initialval, int count)
1:b17e04d:             throws SQLException {
1:b17e04d: 
1:b17e04d:         for (int i = initialval; i < initialval + count; i++) {
1:b17e04d: 
1:b17e04d:             insertIntoTestTable(i);
1:b17e04d: 
1:b17e04d:         }
1:b17e04d: 
1:b17e04d:     }
1:b17e04d: 
1:b17e04d:     protected void assertShutdownOK() throws SQLException {
1:b17e04d: 
1:b17e04d:         Connection conn = getConnection();
1:b17e04d: 
1:b17e04d:         if (usingEmbedded()) {
1:b17e04d:             DataSource ds = JDBCDataSource.getDataSource();
1:b17e04d:             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:b17e04d:             try {
1:b17e04d:                 ds.getConnection();
1:b17e04d:                 fail("expected shutdown to fail");
1:b17e04d:             } catch (SQLException e) {
1:b17e04d:                 // expect 08006 on successful shutdown
1:b17e04d:                 assertSQLState("08006", e);
1:b17e04d:             }
1:b17e04d:             assertTrue(conn.isClosed());
1:b17e04d:         } else if (usingDerbyNetClient()) {
1:b17e04d:             ClientDataSource ds = (ClientDataSource) JDBCDataSource
1:b17e04d:                     .getDataSource();
1:b17e04d:             ds.setConnectionAttributes("shutdown=true");
1:b17e04d:             try {
1:b17e04d:                 ds.getConnection();
1:b17e04d:                 fail("expected shutdown to fail");
1:b17e04d:             } catch (SQLException e) {
1:b17e04d:                 // expect 08006 on successful shutdown
1:b17e04d:                 assertSQLState("08006", e);
1:b17e04d:             }
1:b17e04d:         }
1:b17e04d: 
1:b17e04d:         
1:b17e04d:     }
1:b17e04d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         // just use the defaultSuite.
1:         return new CleanDatabaseTestSetup(new BaseTestSuite(
1:             ShutdownDatabaseTest.class, "ShutdownDatabaseTest"));
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:98ceb6f
/////////////////////////////////////////////////////////////////////////
1:         super.tearDown();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b17e04d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: /**
1:  * This test confirm that no trouble happens when database , of which active
1:  * connection exists with , was shut down.
1:  */
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import javax.sql.DataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.jdbc.ClientDataSource;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: 
1: public class ShutdownDatabaseTest extends BaseJDBCTestCase {
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1: 
1:     public ShutdownDatabaseTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:      */
1:     public static Test suite() {
1:         // Only run in embedded as running in client/server
1:         // hits a problem. See DERBY-2477. To see the bug
0:         // juts use the defaultSuite.
0:         return new CleanDatabaseTestSetup(
0:             new TestSuite(ShutdownDatabaseTest.class, "ShutdownDatabaseTest"));
0:         // return TestConfiguration.defaultSuite(ShutdownDatabaseTest.class);
1:     }
1: 
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:     }
1: 
1:     protected void setUp() throws SQLException {
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("create table " + "TEST_TABLE "
1:                 + "( TEST_COL integer )");
1:         commit();
1:         insertIntoTestTable(1, 1000);
1: 
1:     }
1: 
1:     /**
1:      * to make sure all tables and databases are dropped
1:      */
1:     protected void tearDown() throws Exception {
1:         Statement st = createStatement();
1:         st.execute("DROP TABLE TEST_TABLE");
1:         st.close();
1:         commit();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the only transaction was committed.
1:      */
1:     public void testOnlyTransactionWasCommited() throws SQLException {
1:         commit();
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "1000");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the transaction was committed, and next transaction was committed.
1:      */
1:     public void testTwiceCommited() throws SQLException {
1: 
1:         commit();
1:         insertIntoTestTable(1001, 999);
1:         commit();
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "1999");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the transaction was rollbacked, and next transaction was commited.
1:      */
1:     public void testOnceRollbackedAndCommited() throws SQLException {
1: 
1:         rollback();
1:         insertIntoTestTable(1001, 999);
1:         commit();
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "999");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the only transaction was rollbacked.
1:      */
1:     public void testOnlyTransactionWasRollbacked() throws SQLException {
1: 
1:         rollback();
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "0");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the transaction was commited, and next transaction was rollbacked.
1:      */
1:     public void testOnceCommitedAndRollbacked() throws SQLException {
1: 
1:         commit();
1:         insertIntoTestTable(1001, 999);
1:         rollback();
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "1000");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the transaction was rollbacked, and next transaction was rollbacked.
1:      */
1:     public void testTwiceRollbacked() throws SQLException {
1: 
1:         rollback();
1:         insertIntoTestTable(1001, 999);
1:         rollback();
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "0");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the only transaction was not committed/rollbacked.
1:      */
1:     public void testOnlyTransactionWasLeft() throws SQLException {
1: 
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "0");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the transaction was committed, and next transaction was not
1:      * committed/rollbacked yet.
1:      */
1:     public void testOnceCommitedAndLeft() throws SQLException {
1: 
1:         commit();
1:         insertIntoTestTable(1001, 999);
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "1000");
1:         st.close();
1:     }
1: 
1:     /**
1:      * Tests shutdown with the transaction was rollbacked, and next transaction was not
1:      * committed/rollbacked yet.
1:      */
1: 
1:     public void testOnceRollbackedAndLeft() throws SQLException {
1: 
1:         rollback();
1:         insertIntoTestTable(1001, 999);
1:         assertShutdownOK();
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery("select " + "count(*) "
1:                 + "from " + "TEST_TABLE "), "0");
1:         st.close();
1:     }
1: 
1:     protected void insertIntoTestTable(int val) throws SQLException {
1: 
1:         PreparedStatement st = null;
1: 
1:         try {
1:             st = prepareStatement("insert into " + "TEST_TABLE "
1:                     + "( TEST_COL ) " + "values( ? )");
1:             st.setInt(1, val);
1:             st.execute();
1: 
1:         } finally {
1:             if (st != null) {
1:                 st.close();
1:                 st = null;
1:             }
1:         }
1:     }
1: 
1:     private void insertIntoTestTable(int initialval, int count)
1:             throws SQLException {
1: 
1:         for (int i = initialval; i < initialval + count; i++) {
1: 
1:             insertIntoTestTable(i);
1: 
1:         }
1: 
1:     }
1: 
1:     protected void assertShutdownOK() throws SQLException {
1: 
1:         Connection conn = getConnection();
1: 
1:         if (usingEmbedded()) {
1:             DataSource ds = JDBCDataSource.getDataSource();
1:             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:             try {
1:                 ds.getConnection();
1:                 fail("expected shutdown to fail");
1:             } catch (SQLException e) {
1:                 // expect 08006 on successful shutdown
1:                 assertSQLState("08006", e);
1:             }
1:             assertTrue(conn.isClosed());
1:         } else if (usingDerbyNetClient()) {
1:             ClientDataSource ds = (ClientDataSource) JDBCDataSource
1:                     .getDataSource();
1:             ds.setConnectionAttributes("shutdown=true");
1:             try {
1:                 ds.getConnection();
1:                 fail("expected shutdown to fail");
1:             } catch (SQLException e) {
1:                 // expect 08006 on successful shutdown
1:                 assertSQLState("08006", e);
1:             }
1:         }
1: 
1:         
1:     }
1: }
============================================================================