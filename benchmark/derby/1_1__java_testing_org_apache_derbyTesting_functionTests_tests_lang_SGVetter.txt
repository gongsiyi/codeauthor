1:139ca85: /*
1:139ca85: 
1:139ca85:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest
1:139ca85: 
1:139ca85:    Licensed to the Apache Software Foundation (ASF) under one or more
1:139ca85:    contributor license agreements.  See the NOTICE file distributed with
1:139ca85:    this work for additional information regarding copyright ownership.
1:139ca85:    The ASF licenses this file to you under the Apache License, Version 2.0
1:139ca85:    (the "License"); you may not use this file except in compliance with
1:139ca85:    the License.  You may obtain a copy of the License at
1:139ca85: 
1:139ca85:      http://www.apache.org/licenses/LICENSE-2.0
1:139ca85: 
1:139ca85:    Unless required by applicable law or agreed to in writing, software
1:139ca85:    distributed under the License is distributed on an "AS IS" BASIS,
1:139ca85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:139ca85:    See the License for the specific language governing permissions and
1:139ca85:    limitations under the License.
1:139ca85: 
1:139ca85:  */
1:139ca85: 
1:139ca85: package org.apache.derbyTesting.functionTests.tests.lang;
1:139ca85: 
1:139ca85: import java.math.BigInteger;
1:139ca85: 
1:139ca85: /**
1:139ca85:  * <p>
1:139ca85:  * Machine to validate the operation of the sequence generator. This is a
1:139ca85:  * re-implementation of the sequence generator in a less efficient style whose
1:139ca85:  * correctness is easier to reason about.
1:139ca85:  * </p>
1:139ca85:  */
1:139ca85: public class SGVetter
1:139ca85: {
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85:     //
1:139ca85:     // CONSTANTS
1:139ca85:     //
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85: 
1:139ca85:     private static final long MINIMUM_CACHED_VALUE_COUNT = 1L;
1:139ca85: 
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85:     //
1:139ca85:     // STATE
1:139ca85:     //
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85: 
1:139ca85:     private boolean _CAN_CYCLE;
1:139ca85:     private BigInteger _STEP;
1:139ca85:     private BigInteger _MAX;
1:139ca85:     private BigInteger _MIN;
1:139ca85:     private BigInteger _RESTART;
1:139ca85:     private long _ALLOCATION_COUNT;
1:139ca85:     private boolean _INCREASING;
1:139ca85: 
1:139ca85:     private BigInteger _currentValue;
1:139ca85:     private long        _valuesRemaining;
1:139ca85:     private BigInteger _upperBound;
1:139ca85: 
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85:     //
1:139ca85:     // CONSTRUCTOR
1:139ca85:     //
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85: 
1:139ca85:     public SGVetter
1:139ca85:         (
1:139ca85:          Long currentValue,
1:139ca85:          boolean canCycle,
1:139ca85:          long step,
1:139ca85:          long max,
1:139ca85:          long min,
1:139ca85:          long restart,
1:139ca85:          long allocationCount
1:139ca85:          )
1:139ca85:         throws Exception
1:139ca85:     {
1:139ca85:         if ( step >= max ) { throw new IllegalArgumentException(); }
1:139ca85:         if ( step <= min ) { throw new IllegalArgumentException(); }
1:139ca85:         if ( restart > max ) { throw new IllegalArgumentException(); }
1:139ca85:         if ( restart < min ) { throw new IllegalArgumentException(); }
1:139ca85: 
1:139ca85:         if ( currentValue != null )
1:139ca85:         {
1:139ca85:             if ( currentValue.longValue() > max ) { throw new IllegalArgumentException(); }
1:139ca85:             if ( currentValue.longValue() < min ) { throw new IllegalArgumentException(); }
1:139ca85:         }
1:139ca85: 
1:139ca85:         if ( currentValue == null ) { _currentValue = null; }
1:139ca85:         else { _currentValue = BigInteger.valueOf( currentValue.longValue() ); }
1:139ca85:         
1:139ca85:         _CAN_CYCLE = canCycle;
1:139ca85:         _STEP = BigInteger.valueOf( step );
1:139ca85:         _MAX = BigInteger.valueOf( max );
1:139ca85:         _MIN = BigInteger.valueOf( min );
1:139ca85:         _RESTART = BigInteger.valueOf( restart );
1:139ca85:         _ALLOCATION_COUNT = allocationCount;
1:139ca85:         _INCREASING = (_STEP.compareTo( BigInteger.valueOf( 0L ) ) > 0);
1:139ca85: 
1:139ca85:         _upperBound = _currentValue;
1:139ca85:         _valuesRemaining = MINIMUM_CACHED_VALUE_COUNT;
1:139ca85:     }
1:139ca85: 
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85:     //
1:139ca85:     // BEHAVIOR
1:139ca85:     //
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85: 
1:139ca85:     /**
1:139ca85:      * <p>
1:139ca85:      * Get the next value in the sequence. Returns null if the sequence is exhausted.
1:139ca85:      * </p>
1:139ca85:      */
1:139ca85:     public Long getNextValue()
1:139ca85:     {
1:139ca85:         if ( _currentValue == null ) { return null; }
1:139ca85: 
1:139ca85:         BigInteger retval = cloneBigInteger( _currentValue );
1:139ca85: 
1:139ca85:         advance();
1:139ca85: 
1:39b3237:         return retval.longValue();
1:139ca85:     }
1:139ca85: 
1:139ca85:     /** Get the upper bound */
1:139ca85:     public Long getUpperBound()
1:139ca85:     {
1:139ca85:         if ( _upperBound == null ) { return null; }
1:39b3237:         else { return _upperBound.longValue(); }
1:139ca85:     }
1:139ca85: 
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85:     //
1:139ca85:     // LOGIC TO ADVANCE THE SEQUENCE
1:139ca85:     //
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85: 
1:139ca85:     private void advance()
1:139ca85:     {
1:139ca85:         BigInteger newValue = bump( _currentValue );
1:139ca85: 
1:139ca85:         boolean overflowed = ( newValue.compareTo( _currentValue ) == 0 );
1:139ca85: 
1:139ca85:         if ( overflowed && !_CAN_CYCLE )
1:139ca85:         {
1:139ca85:             _currentValue = null;
1:139ca85:             _upperBound = null;
1:139ca85:             return;
1:139ca85:         }
1:139ca85: 
1:139ca85:         _valuesRemaining--;
1:139ca85:         if ( _valuesRemaining < MINIMUM_CACHED_VALUE_COUNT )
1:139ca85:         {
1:139ca85:             for ( long i = 0; i < _ALLOCATION_COUNT; i++ )
1:139ca85:             {
1:139ca85:                 _upperBound = bump( _upperBound );
1:139ca85:             }
1:139ca85: 
1:139ca85:             _valuesRemaining = _ALLOCATION_COUNT;
1:139ca85:         }
1:139ca85: 
1:139ca85:         _currentValue = newValue;
1:139ca85:     }
1:139ca85: 
1:139ca85:     // increment the original value. if this overflows and cycling is not allowed
1:139ca85:     // return the original value.
1:139ca85:     private BigInteger bump( BigInteger original )
1:139ca85:     {
1:139ca85:         BigInteger newValue = original.add( _STEP );
1:139ca85: 
1:139ca85:         if ( overflowed( newValue ) )
1:139ca85:         {
1:139ca85:             if ( !_CAN_CYCLE ) { newValue = cloneBigInteger( original ); }
1:139ca85:             else { newValue = _RESTART; }
1:139ca85:         }
1:139ca85: 
1:139ca85:         return newValue;
1:139ca85:     }
1:139ca85: 
1:139ca85:     private boolean overflowed( BigInteger newValue )
1:139ca85:     {
1:139ca85:         boolean overflowed = _INCREASING ? ( newValue.compareTo( _MAX ) > 0 ) : ( newValue.compareTo( _MIN ) < 0 );
1:139ca85: 
1:139ca85:         return overflowed;
1:139ca85:     }
1:139ca85:     
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85:     //
1:139ca85:     // MINIONS
1:139ca85:     //
1:139ca85:     ///////////////////////////////////////////////////////////////////////////////////
1:139ca85: 
1:139ca85:     private BigInteger cloneBigInteger( BigInteger original )
1:139ca85:     {
1:139ca85:         return new BigInteger( original.toByteArray() );
1:139ca85:     }
1:139ca85: }
1:139ca85: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:         return retval.longValue();
1:         else { return _upperBound.longValue(); }
commit:139ca85
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SequenceGeneratorTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.math.BigInteger;
1: 
1: /**
1:  * <p>
1:  * Machine to validate the operation of the sequence generator. This is a
1:  * re-implementation of the sequence generator in a less efficient style whose
1:  * correctness is easier to reason about.
1:  * </p>
1:  */
1: public class SGVetter
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static final long MINIMUM_CACHED_VALUE_COUNT = 1L;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private boolean _CAN_CYCLE;
1:     private BigInteger _STEP;
1:     private BigInteger _MAX;
1:     private BigInteger _MIN;
1:     private BigInteger _RESTART;
1:     private long _ALLOCATION_COUNT;
1:     private boolean _INCREASING;
1: 
1:     private BigInteger _currentValue;
1:     private long        _valuesRemaining;
1:     private BigInteger _upperBound;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public SGVetter
1:         (
1:          Long currentValue,
1:          boolean canCycle,
1:          long step,
1:          long max,
1:          long min,
1:          long restart,
1:          long allocationCount
1:          )
1:         throws Exception
1:     {
1:         if ( step >= max ) { throw new IllegalArgumentException(); }
1:         if ( step <= min ) { throw new IllegalArgumentException(); }
1:         if ( restart > max ) { throw new IllegalArgumentException(); }
1:         if ( restart < min ) { throw new IllegalArgumentException(); }
1: 
1:         if ( currentValue != null )
1:         {
1:             if ( currentValue.longValue() > max ) { throw new IllegalArgumentException(); }
1:             if ( currentValue.longValue() < min ) { throw new IllegalArgumentException(); }
1:         }
1: 
1:         if ( currentValue == null ) { _currentValue = null; }
1:         else { _currentValue = BigInteger.valueOf( currentValue.longValue() ); }
1:         
1:         _CAN_CYCLE = canCycle;
1:         _STEP = BigInteger.valueOf( step );
1:         _MAX = BigInteger.valueOf( max );
1:         _MIN = BigInteger.valueOf( min );
1:         _RESTART = BigInteger.valueOf( restart );
1:         _ALLOCATION_COUNT = allocationCount;
1:         _INCREASING = (_STEP.compareTo( BigInteger.valueOf( 0L ) ) > 0);
1: 
1:         _upperBound = _currentValue;
1:         _valuesRemaining = MINIMUM_CACHED_VALUE_COUNT;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the next value in the sequence. Returns null if the sequence is exhausted.
1:      * </p>
1:      */
1:     public Long getNextValue()
1:     {
1:         if ( _currentValue == null ) { return null; }
1: 
1:         BigInteger retval = cloneBigInteger( _currentValue );
1: 
1:         advance();
1: 
0:         return new Long( retval.longValue() );
1:     }
1: 
1:     /** Get the upper bound */
1:     public Long getUpperBound()
1:     {
1:         if ( _upperBound == null ) { return null; }
0:         else { return new Long( _upperBound.longValue() ); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // LOGIC TO ADVANCE THE SEQUENCE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private void advance()
1:     {
1:         BigInteger newValue = bump( _currentValue );
1: 
1:         boolean overflowed = ( newValue.compareTo( _currentValue ) == 0 );
1: 
1:         if ( overflowed && !_CAN_CYCLE )
1:         {
1:             _currentValue = null;
1:             _upperBound = null;
1:             return;
1:         }
1: 
1:         _valuesRemaining--;
1:         if ( _valuesRemaining < MINIMUM_CACHED_VALUE_COUNT )
1:         {
1:             for ( long i = 0; i < _ALLOCATION_COUNT; i++ )
1:             {
1:                 _upperBound = bump( _upperBound );
1:             }
1: 
1:             _valuesRemaining = _ALLOCATION_COUNT;
1:         }
1: 
1:         _currentValue = newValue;
1:     }
1: 
1:     // increment the original value. if this overflows and cycling is not allowed
1:     // return the original value.
1:     private BigInteger bump( BigInteger original )
1:     {
1:         BigInteger newValue = original.add( _STEP );
1: 
1:         if ( overflowed( newValue ) )
1:         {
1:             if ( !_CAN_CYCLE ) { newValue = cloneBigInteger( original ); }
1:             else { newValue = _RESTART; }
1:         }
1: 
1:         return newValue;
1:     }
1: 
1:     private boolean overflowed( BigInteger newValue )
1:     {
1:         boolean overflowed = _INCREASING ? ( newValue.compareTo( _MAX ) > 0 ) : ( newValue.compareTo( _MIN ) < 0 );
1: 
1:         return overflowed;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private BigInteger cloneBigInteger( BigInteger original )
1:     {
1:         return new BigInteger( original.toByteArray() );
1:     }
1: }
1: 
============================================================================