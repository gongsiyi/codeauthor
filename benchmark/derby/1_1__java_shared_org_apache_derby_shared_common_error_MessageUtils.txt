1:5acdc77: /*
1:5acdc77:  
1:5acdc77:    Derby - Class org.apache.derby.shared.common.error;
1:5acdc77:  
1:5acdc77:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5acdc77:    contributor license agreements.  See the NOTICE file distributed with
1:5acdc77:    this work for additional information regarding copyright ownership.
1:5acdc77:    The ASF licenses this file to you under the Apache License, Version 2.0
1:5acdc77:    (the "License"); you may not use this file except in compliance with
1:5acdc77:    the License.  You may obtain a copy of the License at
1:5acdc77:  
1:5acdc77:       http://www.apache.org/licenses/LICENSE-2.0
1:5acdc77:  
1:5acdc77:    Unless required by applicable law or agreed to in writing, software
1:5acdc77:    distributed under the License is distributed on an "AS IS" BASIS,
1:5acdc77:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5acdc77:    See the License for the specific language governing permissions and
1:5acdc77:    limitations under the License.
1:5acdc77:  
1:5acdc77:  */
1:5acdc77: 
1:5acdc77: package org.apache.derby.shared.common.error;
1:5acdc77: 
1:5acdc77: import java.lang.StringBuilder;
1:5acdc77: import java.math.BigDecimal;
1:5acdc77: import java.sql.DataTruncation;
1:5acdc77: import java.sql.SQLException;
1:5acdc77: import java.sql.SQLFeatureNotSupportedException;
1:5acdc77: import java.sql.SQLDataException;
1:5acdc77: import java.sql.SQLIntegrityConstraintViolationException;
1:5acdc77: import java.sql.SQLInvalidAuthorizationSpecException;
1:5acdc77: import java.sql.SQLNonTransientConnectionException;
1:5acdc77: import java.sql.SQLSyntaxErrorException;
1:5acdc77: import java.sql.SQLTimeoutException;
1:5acdc77: import java.sql.SQLTransactionRollbackException;
1:5acdc77: import java.text.MessageFormat;
1:5acdc77: import java.util.Locale;
1:5acdc77: import java.util.MissingResourceException;
1:5acdc77: import java.util.ResourceBundle;
1:5acdc77: import org.apache.derby.shared.common.sanity.SanityManager;
1:5acdc77: import org.apache.derby.shared.common.reference.SQLState;
1:5acdc77: 
1:5acdc77: 
1:5acdc77: 
1:5acdc77: 
1:5acdc77: public class MessageUtils 
1:5acdc77: {
1:5acdc77: 	private static final Locale EN = new Locale("en", "US");
1:5acdc77: 	public static final String SQLERRMC_MESSAGE_DELIMITER = new String(new char[] {(char)20,(char)20,(char)20});
1:5acdc77: 	/** 
1:5acdc77: 	 * Pointer to the application requester
1:5acdc77:      * for the session being serviced.
1:5acdc77:      */
1:5acdc77: 
1:5acdc77:     public static final int DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH = 2400;
1:5acdc77: 
1:5acdc77: 	/** 
1:5acdc77:    	 * Delimiters for SQLERRMC values.
1:5acdc77:      * The token delimiter value will be used to parse the MessageId from the 
1:5acdc77:      * SQLERRMC in MessageService.getLocalizedMessage and the MessageId will be
1:5acdc77:      * used to retrive the localized message. If this delimiter value is changed
1:5acdc77:      * please make sure to make appropriate changes in
1:5acdc77:      * MessageService.getLocalizedMessage that gets called from 
1:5acdc77:      * SystemProcedures.SQLCAMESSAGE
1:5acdc77:      * <code>SQLERRMC_TOKEN_DELIMITER</code> separates message argument tokens 
1:5acdc77:      */
1:5acdc77:     public static String SQLERRMC_TOKEN_DELIMITER = new String(new char[] {(char)20});
1:5acdc77: 
1:5acdc77:     /**
1:5acdc77:      * <code>SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER</code>, When full message text is 
1:5acdc77:      * sent for severe errors. This value separates the messages. 
1:5acdc77:      */
1:5acdc77:     private static String SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER = "::";
1:5acdc77: 
1:5acdc77:     protected int supportedMessageParamLength() {
1:5acdc77:         return DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH;
1:5acdc77:     }
1:5acdc77: 
1:5acdc77: 
1:5acdc77:     /*
1:5acdc77:      * Get messageId and arguments, messageId is necessary for us to look up
1:5acdc77:      * localized message from property file.  messageId was sent as the last
1:5acdc77:      * token in the sqlerrmc.
1:5acdc77:      * The last element of the returned array contains the MessageId field, that
1:5acdc77:      * must be extracted by the caller funtion, to get an array of arguments.
1:5acdc77:      */
1:5acdc77: 
1:5acdc77:     public static Object[] getArgs(String sqlState, String sqlerrmc) 
1:5acdc77:     {
1:5acdc77:     	String messageId = sqlState;    //use sqlState if we don't have messageId
1:5acdc77:         Object[] arguments = null;
1:5acdc77:         if (sqlerrmc != null && sqlerrmc.length() > 0)
1:5acdc77:         {
1:5acdc77:             char [] sqlerrmc_chars = sqlerrmc.toCharArray();
1:5acdc77:             int numArgs = 0, lastSepIdx = -1; // last separator index
1:5acdc77:             for (int i = 0; i < sqlerrmc_chars.length; i++)
1:5acdc77:             {
1:5acdc77:                 if (sqlerrmc_chars[i] == 20)    // separator
1:5acdc77:                 {
1:5acdc77:                     numArgs++;
1:5acdc77:                     lastSepIdx = i;
1:5acdc77:                 }
1:5acdc77:             }
1:5acdc77:             if (numArgs == 0)
1:5acdc77:             {
1:5acdc77:                 messageId = new String(sqlerrmc_chars); //no args, only messageId then
1:5acdc77:                 arguments = new Object[1];
1:5acdc77:             }
1:5acdc77:             else
1:5acdc77:             {
1:5acdc77:                 messageId = new String(sqlerrmc_chars, lastSepIdx+1, sqlerrmc_chars.length-lastSepIdx-1);
1:5acdc77:                 arguments = new Object[numArgs + 1];
1:5acdc77:                 for (int start = 0, arg = 0, i = 0; i < lastSepIdx + 1; i++)
1:5acdc77:                 {
1:5acdc77:                     if (i == lastSepIdx || sqlerrmc_chars[i] == 20) // delimiter 
1:5acdc77:                     {
1:5acdc77:                         arguments[arg++] = new String(sqlerrmc_chars, start, i - start);
1:5acdc77:                         start = i + 1;
1:5acdc77:                     }
1:5acdc77:                 }
1:5acdc77:             }
1:5acdc77:         	arguments[arguments.length - 1] = messageId;
1:5acdc77:         }
1:5acdc77:         else 
1:5acdc77:         {
1:5acdc77:         	// messageId must be returned for all cases.
1:5acdc77:         	arguments = new Object[1];
1:5acdc77:         	arguments[arguments.length - 1] = messageId;
1:5acdc77:         }
1:5acdc77: 
1:5acdc77:         return arguments;
1:5acdc77:     }
1:5acdc77: 
1:5acdc77:     public static String encodeMessageAndArgumentsAsSqlerrmc(
1:5acdc77:                         String messageId,
1:5acdc77:                         Object []args )
1:5acdc77:     {
1:5acdc77:         String sqlerrmc = "";
1:5acdc77: 
1:5acdc77:                 // arguments are variable part of a message
1:5acdc77: 
1:5acdc77:         for (int i = 0; args != null &&  i < args.length; i++) {
1:5acdc77:             sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
1:5acdc77:         }
1:5acdc77:         sqlerrmc += messageId;
1:5acdc77: 
1:5acdc77: 	return sqlerrmc;
1:5acdc77:     }
1:5acdc77: 
1:5acdc77:     public static String encodeExceptionAsSqlerrmc( SQLException se )
1:5acdc77:     {
1:5acdc77:         // this could happen for instance if an SQLException was thrown
1:5acdc77:         // from a stored procedure.
1:5acdc77:         StringBuilder sb = new StringBuilder();
1:5acdc77:         sb.append(se.getLocalizedMessage());
1:5acdc77:         se = se.getNextException();
1:5acdc77:         if (se != null) {
1:5acdc77:             sb.append(SQLERRMC_TOKEN_DELIMITER);
1:5acdc77:             sb.append("SQLSTATE: ").append(se.getSQLState());
1:5acdc77:         }
1:5acdc77:         return sb.toString();
1:5acdc77:     }
1:5acdc77: 
1:5acdc77:     /**
1:5acdc77:      * Build the SQLERRMC for a {@code java.sql.DataTruncation} warning.
1:5acdc77:      * Serialize all the fields of the {@code DataTruncation} instance in the
1:5acdc77:      * order in which they appear in the parameter list of the constructor.
1:5acdc77:      *
1:5acdc77:      * @param dt the {@code DataTruncation} instance to serialize
1:5acdc77:      * @return the SQLERRMC string with all fields of the warning
1:5acdc77:      */
1:5acdc77:     private String buildDataTruncationSqlerrmc(DataTruncation dt) {
1:5acdc77:         return dt.getIndex() + SQLERRMC_TOKEN_DELIMITER +
1:5acdc77:                dt.getParameter() + SQLERRMC_TOKEN_DELIMITER +
1:5acdc77:                dt.getRead() + SQLERRMC_TOKEN_DELIMITER +
1:5acdc77:                dt.getDataSize() + SQLERRMC_TOKEN_DELIMITER +
1:5acdc77:                dt.getTransferSize();
1:5acdc77:     }
1:5acdc77: 
1:5acdc77: 
1:5acdc77: 
1:5acdc77: 	/**
1:5acdc77:      * Build preformatted SQLException text 
1:5acdc77:      * for severe exceptions or SQLExceptions that are not Derby exceptions.
1:5acdc77:      * Just send the message text localized to the server locale.
1:5acdc77:      * 
1:5acdc77:      * @param se  SQLException for which to build SQLERRMC
1:5acdc77:      * @return preformated message text 
1:5acdc77:      *          with messages separted by SQLERRMC_PREFORMATED_MESSAGE_DELIMITER
1:5acdc77:      * 
1:5acdc77:      */
1:5acdc77:     private String  buildPreformattedSqlerrmc(SQLException se) {
1:5acdc77:         if (se == null) {
1:5acdc77:             return "";
1:5acdc77:         }
1:5acdc77:         
1:5acdc77:          // String buffer to build up message
1:5acdc77:         StringBuilder sb = new StringBuilder();
1:5acdc77:         sb.append(se.getLocalizedMessage());
1:5acdc77:         while ((se = se.getNextException()) != null) {
1:5acdc77:             sb.append(SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER);
1:5acdc77:             sb.append("SQLSTATE: ");
1:5acdc77:             sb.append(se.getSQLState());
1:5acdc77:         }
1:5acdc77:         return sb.toString();
1:5acdc77:     }
1:5acdc77: 
1:5acdc77:     /**
1:5acdc77:      * Hash function to split messages into 50 files based upon the message identifier 
1:5acdc77:      * or SQLState. We don't use String.hashCode() as it varies between releases and 
1:5acdc77:      * doesn't provide an even distribution across the 50 files.
1:5acdc77:      */
1:5acdc77:     public static int hashString50(String key) {
1:5acdc77: 		int hash = 0;
1:5acdc77: 		int len = key.length();
1:5acdc77: 		if (len > 5)
1:5acdc77: 			len = 5;
1:5acdc77: 
1:5acdc77: 		for (int i = 0; i < len; i++) {
1:5acdc77: 			hash += key.charAt(i);
1:5acdc77: 		}
1:5acdc77: 		hash = hash % 50;
1:5acdc77: 		return hash;
1:5acdc77: 	}
1:5acdc77: 
1:5acdc77: 	/**
1:5acdc77: 	 * Method to use instead of ResourceBundle.getBundle(). This method acts like ResourceBundle.
1:5acdc77: 	 * getBundle() but if the resource is not available in the requested locale, default locale 
1:5acdc77: 	 * or base class the one for en_US is returned.
1:5acdc77: 	 */
1:5acdc77: 	public static ResourceBundle getBundleWithEnDefault(String resource, Locale locale) {
1:5acdc77: 
1:5acdc77: 		try {
1:5acdc77: 			return ResourceBundle.getBundle(resource, locale);
1:5acdc77: 		} catch (MissingResourceException mre) {
1:5acdc77: 
1:5acdc77: 			// This covers the case where neither the
1:5acdc77: 			// requested locale or the default locale
1:5acdc77: 			// have a resource.
1:5acdc77: 
1:5acdc77: 			return ResourceBundle.getBundle(resource, EN);
1:5acdc77: 		}
1:5acdc77: 	}
1:5acdc77: 
1:5acdc77: 	/** 
1:5acdc77: 	 * 
1:5acdc77: 	 */
1:5acdc77:     public static ResourceBundle getBundleForLocale(Locale locale, String msgId) {
1:5acdc77: 		try {
1:5acdc77: 			return MessageUtils.getBundleWithEnDefault("org.apache.derby.loc.m"+hashString50(msgId), locale);
1:5acdc77: 		} catch (MissingResourceException mre) {
1:5acdc77: 		}
1:5acdc77: 		return null;
1:5acdc77: 	}
1:5acdc77: 
1:5acdc77: 	public static String formatMessage(ResourceBundle bundle, String messageId, Object[] arguments, boolean lastChance) {
1:5acdc77: 
1:5acdc77: 		if (arguments == null)
1:5acdc77: 			arguments = new Object[0];
1:5acdc77: 
1:5acdc77: 		if (bundle != null) {
1:5acdc77: 
1:5acdc77: 			try {
1:5acdc77: 				messageId = bundle.getString(messageId);
1:5acdc77: 
1:5acdc77: 				try {
1:5acdc77: 					return MessageFormat.format(messageId, arguments);
1:5acdc77: 				}
1:5acdc77: 				catch (IllegalArgumentException iae) {
1:5acdc77: 				}
1:5acdc77: 				catch (NullPointerException npe) {
1:5acdc77: 					//
1:5acdc77: 					//null arguments cause a NullPointerException. 
1:5acdc77: 					//This improves reporting.
1:5acdc77: 				}
1:5acdc77: 
1:5acdc77: 			} catch (MissingResourceException mre) {
1:5acdc77: 				// caller will try and handle the last chance
1:5acdc77: 				if (lastChance)
1:5acdc77: 					throw mre;
1:5acdc77: 			} 
1:5acdc77: 		}
1:5acdc77: 
1:5acdc77: 		if (messageId == null)
1:5acdc77: 			messageId = "UNKNOWN";
1:5acdc77: 
1:5acdc77: 		
1:5acdc77: 		StringBuffer sb = new StringBuffer(messageId);
1:5acdc77: 
1:5acdc77: 		int len = arguments.length;
1:5acdc77: 		if (len > 0)
1:5acdc77: 			sb.append(" : ");
1:5acdc77: 
1:5acdc77: 		for (int i=0; i < len; i++) {
1:5acdc77: 		    // prepend a comma to all but the first
1:5acdc77: 			if (i > 0)
1:5acdc77: 				sb.append(", ");
1:5acdc77: 
1:5acdc77: 			sb.append('[');
1:5acdc77: 			sb.append(i);
1:5acdc77: 			sb.append("] ");
1:5acdc77: 			if (arguments[i] == null)
1:5acdc77: 				sb.append("null");
1:5acdc77: 			else
1:5acdc77: 				sb.append(arguments[i].toString());
1:5acdc77: 		}
1:5acdc77: 
1:5acdc77: 		
1:5acdc77: 		return sb.toString();
1:5acdc77: 	}
1:5acdc77: 
1:5acdc77: 	/**
1:5acdc77:      * Method used by Derby Network Server to get localized message
1:5acdc77:      * @param sqlcode    sqlcode, not used.
1:5acdc77:      * @param errmcLen   sqlerrmc length
1:5acdc77:      * @param sqlerrmc   sql error message tokens, variable part of error message (ie.,
1:5acdc77:      *                   arguments) plus messageId, separated by separator.
1:5acdc77:      * @param sqlerrp    not used
1:5acdc77:      * @param errd0      not used
1:5acdc77:      * @param warn       not used
1:5acdc77:      * @param sqlState   5-char sql state
1:5acdc77:      * @param file       not used
1:5acdc77:      * @param localeStr  client locale in string
1:5acdc77:      * @param msg        OUTPUT parameter, localized error message
1:5acdc77:      * @param rc         OUTPUT parameter, return code -- 0 for success
1:5acdc77:      */
1:5acdc77: 
1:5acdc77:     public static void getLocalizedMessage(int sqlcode, short errmcLen, String sqlerrmc,
1:5acdc77:                                         String sqlerrp, int errd0, int errd1, int errd2,
1:5acdc77:                                         int errd3, int errd4, int errd5, String warn,
1:5acdc77:                                         String sqlState, String file, String localeStr,
1:5acdc77:                                         String[] msg, int[] rc)
1:5acdc77:     {
1:5acdc77:         //figure out client locale from input locale string
1:5acdc77: 
1:5acdc77:         int _pos1 = localeStr.indexOf("_");     // "_" position
1:5acdc77: 
1:5acdc77:         Locale locale = EN;     //default locale
1:5acdc77:         if (_pos1 != -1)
1:5acdc77:         {
1:5acdc77:             int _pos2 = localeStr.lastIndexOf("_");
1:5acdc77:             String language = localeStr.substring(0, _pos1);
1:5acdc77:             if (_pos2 == _pos1)
1:5acdc77:             {
1:5acdc77:                 String country = localeStr.substring(_pos1 + 1);
1:5acdc77:                 locale = new Locale(language, country);
1:5acdc77:             }
1:5acdc77:             else
1:5acdc77:             {
1:5acdc77:                 String country = localeStr.substring(_pos1 + 1, _pos2);
1:5acdc77:                 String variant = localeStr.substring(_pos2 + 1);
1:5acdc77:                 locale = new Locale(language, country, variant);
1:5acdc77:             }
1:5acdc77:         }
1:5acdc77: 
1:5acdc77: 
1:5acdc77:         String messageId = sqlState;    //use sqlState if we don't have messageId
1:5acdc77:         
1:5acdc77:         Object[] args = getArgs(sqlState, sqlerrmc);
1:5acdc77:         messageId = (String) args[args.length - 1];
1:5acdc77:         Object[] arguments = new Object[args.length - 1];
1:5acdc77:         
1:5acdc77:         for (int i = 0; i < arguments.length; ++i)
1:5acdc77:         {
1:5acdc77:         	arguments[i] = args[i];
1:5acdc77:         }
1:5acdc77: 
1:5acdc77:         try {
1:5acdc77:             msg[0] = formatMessage(getBundleForLocale(locale, messageId), messageId, arguments, true);
1:5acdc77:             rc[0] = 0;
1:5acdc77:             return;
1:5acdc77:         } catch (MissingResourceException mre) {
1:5acdc77:             // message does not exist in the requested locale
1:5acdc77:             // most likely it does exist in our fake base class _en, so try that.
1:5acdc77:         } catch (ShutdownException se) {
1:5acdc77:         }
1:5acdc77:         msg[0] = formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
1:5acdc77:         rc[0] = 0;
1:5acdc77:     }
1:5acdc77:     
1:5acdc77:     /**
1:5acdc77:      * Method used by Derby Network Server to get localized message 
1:5acdc77:      * @param locale     locale
1:5acdc77:      * @param messageId  message id
1:5acdc77:      * @param args       message arguments
1:5acdc77:      */
1:5acdc77:     public static String getLocalizedMessage(Locale locale, String messageId, Object [] args)
1:5acdc77:     {
1:5acdc77:         String locMsg = null;
1:5acdc77: 
1:5acdc77:         try {
1:5acdc77:             locMsg = formatMessage(getBundleForLocale(locale, messageId), messageId, args, true);
1:5acdc77:             return locMsg;
1:5acdc77:         } catch (MissingResourceException mre) {
1:5acdc77:             // message does not exist in the requested locale
1:5acdc77:             // most likely it does exist in our fake base class _en, so try that.
1:5acdc77:         } catch (ShutdownException se) {
1:5acdc77:         }
1:5acdc77:         locMsg = formatMessage(getBundleForLocale(EN, messageId), messageId, args, false);
1:5acdc77:         return locMsg;
1:5acdc77:     }
1:5acdc77: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:5acdc77
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.shared.common.error;
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.shared.common.error;
1: 
1: import java.lang.StringBuilder;
1: import java.math.BigDecimal;
1: import java.sql.DataTruncation;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.sql.SQLDataException;
1: import java.sql.SQLIntegrityConstraintViolationException;
1: import java.sql.SQLInvalidAuthorizationSpecException;
1: import java.sql.SQLNonTransientConnectionException;
1: import java.sql.SQLSyntaxErrorException;
1: import java.sql.SQLTimeoutException;
1: import java.sql.SQLTransactionRollbackException;
1: import java.text.MessageFormat;
1: import java.util.Locale;
1: import java.util.MissingResourceException;
1: import java.util.ResourceBundle;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: 
1: 
1: 
1: public class MessageUtils 
1: {
1: 	private static final Locale EN = new Locale("en", "US");
1: 	public static final String SQLERRMC_MESSAGE_DELIMITER = new String(new char[] {(char)20,(char)20,(char)20});
1: 	/** 
1: 	 * Pointer to the application requester
1:      * for the session being serviced.
1:      */
1: 
1:     public static final int DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH = 2400;
1: 
1: 	/** 
1:    	 * Delimiters for SQLERRMC values.
1:      * The token delimiter value will be used to parse the MessageId from the 
1:      * SQLERRMC in MessageService.getLocalizedMessage and the MessageId will be
1:      * used to retrive the localized message. If this delimiter value is changed
1:      * please make sure to make appropriate changes in
1:      * MessageService.getLocalizedMessage that gets called from 
1:      * SystemProcedures.SQLCAMESSAGE
1:      * <code>SQLERRMC_TOKEN_DELIMITER</code> separates message argument tokens 
1:      */
1:     public static String SQLERRMC_TOKEN_DELIMITER = new String(new char[] {(char)20});
1: 
1:     /**
1:      * <code>SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER</code>, When full message text is 
1:      * sent for severe errors. This value separates the messages. 
1:      */
1:     private static String SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER = "::";
1: 
1:     protected int supportedMessageParamLength() {
1:         return DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH;
1:     }
1: 
1: 
1:     /*
1:      * Get messageId and arguments, messageId is necessary for us to look up
1:      * localized message from property file.  messageId was sent as the last
1:      * token in the sqlerrmc.
1:      * The last element of the returned array contains the MessageId field, that
1:      * must be extracted by the caller funtion, to get an array of arguments.
1:      */
1: 
1:     public static Object[] getArgs(String sqlState, String sqlerrmc) 
1:     {
1:     	String messageId = sqlState;    //use sqlState if we don't have messageId
1:         Object[] arguments = null;
1:         if (sqlerrmc != null && sqlerrmc.length() > 0)
1:         {
1:             char [] sqlerrmc_chars = sqlerrmc.toCharArray();
1:             int numArgs = 0, lastSepIdx = -1; // last separator index
1:             for (int i = 0; i < sqlerrmc_chars.length; i++)
1:             {
1:                 if (sqlerrmc_chars[i] == 20)    // separator
1:                 {
1:                     numArgs++;
1:                     lastSepIdx = i;
1:                 }
1:             }
1:             if (numArgs == 0)
1:             {
1:                 messageId = new String(sqlerrmc_chars); //no args, only messageId then
1:                 arguments = new Object[1];
1:             }
1:             else
1:             {
1:                 messageId = new String(sqlerrmc_chars, lastSepIdx+1, sqlerrmc_chars.length-lastSepIdx-1);
1:                 arguments = new Object[numArgs + 1];
1:                 for (int start = 0, arg = 0, i = 0; i < lastSepIdx + 1; i++)
1:                 {
1:                     if (i == lastSepIdx || sqlerrmc_chars[i] == 20) // delimiter 
1:                     {
1:                         arguments[arg++] = new String(sqlerrmc_chars, start, i - start);
1:                         start = i + 1;
1:                     }
1:                 }
1:             }
1:         	arguments[arguments.length - 1] = messageId;
1:         }
1:         else 
1:         {
1:         	// messageId must be returned for all cases.
1:         	arguments = new Object[1];
1:         	arguments[arguments.length - 1] = messageId;
1:         }
1: 
1:         return arguments;
1:     }
1: 
1:     public static String encodeMessageAndArgumentsAsSqlerrmc(
1:                         String messageId,
1:                         Object []args )
1:     {
1:         String sqlerrmc = "";
1: 
1:                 // arguments are variable part of a message
1: 
1:         for (int i = 0; args != null &&  i < args.length; i++) {
1:             sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
1:         }
1:         sqlerrmc += messageId;
1: 
1: 	return sqlerrmc;
1:     }
1: 
1:     public static String encodeExceptionAsSqlerrmc( SQLException se )
1:     {
1:         // this could happen for instance if an SQLException was thrown
1:         // from a stored procedure.
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(se.getLocalizedMessage());
1:         se = se.getNextException();
1:         if (se != null) {
1:             sb.append(SQLERRMC_TOKEN_DELIMITER);
1:             sb.append("SQLSTATE: ").append(se.getSQLState());
1:         }
1:         return sb.toString();
1:     }
1: 
1:     /**
1:      * Build the SQLERRMC for a {@code java.sql.DataTruncation} warning.
1:      * Serialize all the fields of the {@code DataTruncation} instance in the
1:      * order in which they appear in the parameter list of the constructor.
1:      *
1:      * @param dt the {@code DataTruncation} instance to serialize
1:      * @return the SQLERRMC string with all fields of the warning
1:      */
1:     private String buildDataTruncationSqlerrmc(DataTruncation dt) {
1:         return dt.getIndex() + SQLERRMC_TOKEN_DELIMITER +
1:                dt.getParameter() + SQLERRMC_TOKEN_DELIMITER +
1:                dt.getRead() + SQLERRMC_TOKEN_DELIMITER +
1:                dt.getDataSize() + SQLERRMC_TOKEN_DELIMITER +
1:                dt.getTransferSize();
1:     }
1: 
1: 
1: 
1: 	/**
1:      * Build preformatted SQLException text 
1:      * for severe exceptions or SQLExceptions that are not Derby exceptions.
1:      * Just send the message text localized to the server locale.
1:      * 
1:      * @param se  SQLException for which to build SQLERRMC
1:      * @return preformated message text 
1:      *          with messages separted by SQLERRMC_PREFORMATED_MESSAGE_DELIMITER
1:      * 
1:      */
1:     private String  buildPreformattedSqlerrmc(SQLException se) {
1:         if (se == null) {
1:             return "";
1:         }
1:         
1:          // String buffer to build up message
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(se.getLocalizedMessage());
1:         while ((se = se.getNextException()) != null) {
1:             sb.append(SQLERRMC_PREFORMATTED_MESSAGE_DELIMITER);
1:             sb.append("SQLSTATE: ");
1:             sb.append(se.getSQLState());
1:         }
1:         return sb.toString();
1:     }
1: 
1:     /**
1:      * Hash function to split messages into 50 files based upon the message identifier 
1:      * or SQLState. We don't use String.hashCode() as it varies between releases and 
1:      * doesn't provide an even distribution across the 50 files.
1:      */
1:     public static int hashString50(String key) {
1: 		int hash = 0;
1: 		int len = key.length();
1: 		if (len > 5)
1: 			len = 5;
1: 
1: 		for (int i = 0; i < len; i++) {
1: 			hash += key.charAt(i);
1: 		}
1: 		hash = hash % 50;
1: 		return hash;
1: 	}
1: 
1: 	/**
1: 	 * Method to use instead of ResourceBundle.getBundle(). This method acts like ResourceBundle.
1: 	 * getBundle() but if the resource is not available in the requested locale, default locale 
1: 	 * or base class the one for en_US is returned.
1: 	 */
1: 	public static ResourceBundle getBundleWithEnDefault(String resource, Locale locale) {
1: 
1: 		try {
1: 			return ResourceBundle.getBundle(resource, locale);
1: 		} catch (MissingResourceException mre) {
1: 
1: 			// This covers the case where neither the
1: 			// requested locale or the default locale
1: 			// have a resource.
1: 
1: 			return ResourceBundle.getBundle(resource, EN);
1: 		}
1: 	}
1: 
1: 	/** 
1: 	 * 
1: 	 */
1:     public static ResourceBundle getBundleForLocale(Locale locale, String msgId) {
1: 		try {
1: 			return MessageUtils.getBundleWithEnDefault("org.apache.derby.loc.m"+hashString50(msgId), locale);
1: 		} catch (MissingResourceException mre) {
1: 		}
1: 		return null;
1: 	}
1: 
1: 	public static String formatMessage(ResourceBundle bundle, String messageId, Object[] arguments, boolean lastChance) {
1: 
1: 		if (arguments == null)
1: 			arguments = new Object[0];
1: 
1: 		if (bundle != null) {
1: 
1: 			try {
1: 				messageId = bundle.getString(messageId);
1: 
1: 				try {
1: 					return MessageFormat.format(messageId, arguments);
1: 				}
1: 				catch (IllegalArgumentException iae) {
1: 				}
1: 				catch (NullPointerException npe) {
1: 					//
1: 					//null arguments cause a NullPointerException. 
1: 					//This improves reporting.
1: 				}
1: 
1: 			} catch (MissingResourceException mre) {
1: 				// caller will try and handle the last chance
1: 				if (lastChance)
1: 					throw mre;
1: 			} 
1: 		}
1: 
1: 		if (messageId == null)
1: 			messageId = "UNKNOWN";
1: 
1: 		
1: 		StringBuffer sb = new StringBuffer(messageId);
1: 
1: 		int len = arguments.length;
1: 		if (len > 0)
1: 			sb.append(" : ");
1: 
1: 		for (int i=0; i < len; i++) {
1: 		    // prepend a comma to all but the first
1: 			if (i > 0)
1: 				sb.append(", ");
1: 
1: 			sb.append('[');
1: 			sb.append(i);
1: 			sb.append("] ");
1: 			if (arguments[i] == null)
1: 				sb.append("null");
1: 			else
1: 				sb.append(arguments[i].toString());
1: 		}
1: 
1: 		
1: 		return sb.toString();
1: 	}
1: 
1: 	/**
1:      * Method used by Derby Network Server to get localized message
1:      * @param sqlcode    sqlcode, not used.
1:      * @param errmcLen   sqlerrmc length
1:      * @param sqlerrmc   sql error message tokens, variable part of error message (ie.,
1:      *                   arguments) plus messageId, separated by separator.
1:      * @param sqlerrp    not used
1:      * @param errd0      not used
1:      * @param warn       not used
1:      * @param sqlState   5-char sql state
1:      * @param file       not used
1:      * @param localeStr  client locale in string
1:      * @param msg        OUTPUT parameter, localized error message
1:      * @param rc         OUTPUT parameter, return code -- 0 for success
1:      */
1: 
1:     public static void getLocalizedMessage(int sqlcode, short errmcLen, String sqlerrmc,
1:                                         String sqlerrp, int errd0, int errd1, int errd2,
1:                                         int errd3, int errd4, int errd5, String warn,
1:                                         String sqlState, String file, String localeStr,
1:                                         String[] msg, int[] rc)
1:     {
1:         //figure out client locale from input locale string
1: 
1:         int _pos1 = localeStr.indexOf("_");     // "_" position
1: 
1:         Locale locale = EN;     //default locale
1:         if (_pos1 != -1)
1:         {
1:             int _pos2 = localeStr.lastIndexOf("_");
1:             String language = localeStr.substring(0, _pos1);
1:             if (_pos2 == _pos1)
1:             {
1:                 String country = localeStr.substring(_pos1 + 1);
1:                 locale = new Locale(language, country);
1:             }
1:             else
1:             {
1:                 String country = localeStr.substring(_pos1 + 1, _pos2);
1:                 String variant = localeStr.substring(_pos2 + 1);
1:                 locale = new Locale(language, country, variant);
1:             }
1:         }
1: 
1: 
1:         String messageId = sqlState;    //use sqlState if we don't have messageId
1:         
1:         Object[] args = getArgs(sqlState, sqlerrmc);
1:         messageId = (String) args[args.length - 1];
1:         Object[] arguments = new Object[args.length - 1];
1:         
1:         for (int i = 0; i < arguments.length; ++i)
1:         {
1:         	arguments[i] = args[i];
1:         }
1: 
1:         try {
1:             msg[0] = formatMessage(getBundleForLocale(locale, messageId), messageId, arguments, true);
1:             rc[0] = 0;
1:             return;
1:         } catch (MissingResourceException mre) {
1:             // message does not exist in the requested locale
1:             // most likely it does exist in our fake base class _en, so try that.
1:         } catch (ShutdownException se) {
1:         }
1:         msg[0] = formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
1:         rc[0] = 0;
1:     }
1:     
1:     /**
1:      * Method used by Derby Network Server to get localized message 
1:      * @param locale     locale
1:      * @param messageId  message id
1:      * @param args       message arguments
1:      */
1:     public static String getLocalizedMessage(Locale locale, String messageId, Object [] args)
1:     {
1:         String locMsg = null;
1: 
1:         try {
1:             locMsg = formatMessage(getBundleForLocale(locale, messageId), messageId, args, true);
1:             return locMsg;
1:         } catch (MissingResourceException mre) {
1:             // message does not exist in the requested locale
1:             // most likely it does exist in our fake base class _en, so try that.
1:         } catch (ShutdownException se) {
1:         }
1:         locMsg = formatMessage(getBundleForLocale(EN, messageId), messageId, args, false);
1:         return locMsg;
1:     }
1: }
============================================================================