1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerActionOnCommit
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:a12152a: import org.apache.derby.iapi.services.monitor.DerbyObserver;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An Observer that can be attached to a transaction to
1:eac0369: 	implement some action when the transaction
1:eac0369: 	commits or rollsback in some way.
1:eac0369: */
1:eac0369: 
1:a12152a: abstract class ContainerActionOnCommit implements DerbyObserver {
1:eac0369: 
1:eac0369: 	protected ContainerKey identity;
1:eac0369: 
1:eac0369: 	protected ContainerActionOnCommit(ContainerKey identity) {
1:eac0369: 
1:eac0369: 		this.identity = identity;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode() {
1:eac0369: 		return identity.hashCode();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		An equals method that returns true if the other obejct
1:eac0369: 		is a sub-class of this, and the container identities
1:eac0369: 		are equal *and* it is the same class as this.
1:eac0369: 		<BR>
1:eac0369: 		This allows mutiple additions of value equality
1:eac0369: 		obejcts to the observer list while only retaining one.
1:eac0369: 	*/
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (other instanceof ContainerActionOnCommit) {
1:eac0369: 			if (!identity.equals(((ContainerActionOnCommit) other).identity))
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			// the class of the types must match as well
1:eac0369: 			return getClass().equals(other.getClass());
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a12152a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.DerbyObserver;
1: abstract class ContainerActionOnCommit implements DerbyObserver {
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerActionOnCommit
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
0: import java.util.Observer;
1: 
1: /**
1: 	An Observer that can be attached to a transaction to
1: 	implement some action when the transaction
1: 	commits or rollsback in some way.
1: */
1: 
0: abstract class ContainerActionOnCommit implements Observer {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	protected ContainerKey identity;
1: 
1: 	protected ContainerActionOnCommit(ContainerKey identity) {
1: 
1: 		this.identity = identity;
1: 	}
1: 
1: 	public int hashCode() {
1: 		return identity.hashCode();
1: 	}
1: 
1: 	/**
1: 		An equals method that returns true if the other obejct
1: 		is a sub-class of this, and the container identities
1: 		are equal *and* it is the same class as this.
1: 		<BR>
1: 		This allows mutiple additions of value equality
1: 		obejcts to the observer list while only retaining one.
1: 	*/
1: 	public boolean equals(Object other) {
1: 		if (other instanceof ContainerActionOnCommit) {
1: 			if (!identity.equals(((ContainerActionOnCommit) other).identity))
1: 				return false;
1: 
1: 			// the class of the types must match as well
1: 			return getClass().equals(other.getClass());
1: 		}
1: 		return false;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import java.util.Observer;
0: 
0: /**
0: 	An Observer that can be attached to a transaction to
0: 	implement some action when the transaction
0: 	commits or rollsback in some way.
0: */
0: 
0: abstract class ContainerActionOnCommit implements Observer {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	protected ContainerKey identity;
0: 
0: 	protected ContainerActionOnCommit(ContainerKey identity) {
0: 
0: 		this.identity = identity;
0: 	}
0: 
0: 	public int hashCode() {
0: 		return identity.hashCode();
0: 	}
0: 
0: 	/**
0: 		An equals method that returns true if the other obejct
0: 		is a sub-class of this, and the container identities
0: 		are equal *and* it is the same class as this.
0: 		<BR>
0: 		This allows mutiple additions of value equality
0: 		obejcts to the observer list while only retaining one.
0: 	*/
0: 	public boolean equals(Object other) {
0: 		if (other instanceof ContainerActionOnCommit) {
0: 			if (!identity.equals(((ContainerActionOnCommit) other).identity))
0: 				return false;
0: 
0: 			// the class of the types must match as well
0: 			return getClass().equals(other.getClass());
0: 		}
0: 		return false;
0: 	}
0: }
============================================================================