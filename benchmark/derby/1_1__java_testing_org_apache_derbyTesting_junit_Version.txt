1:e8c9fe3: /*
1:e8c9fe3: 
1:e8c9fe3:    Derby - Class org.apache.derbyTesting.junit.Version
1:e8c9fe3: 
1:e8c9fe3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e8c9fe3:    contributor license agreements.  See the NOTICE file distributed with
1:e8c9fe3:    this work for additional information regarding copyright ownership.
1:e8c9fe3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:e8c9fe3:    (the "License"); you may not use this file except in compliance with
1:e8c9fe3:    the License.  You may obtain a copy of the License at
1:e8c9fe3: 
1:e8c9fe3:       http://www.apache.org/licenses/LICENSE-2.0
1:e8c9fe3: 
1:e8c9fe3:    Unless required by applicable law or agreed to in writing, software
1:e8c9fe3:    distributed under the License is distributed on an "AS IS" BASIS,
1:e8c9fe3:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e8c9fe3:    See the License for the specific language governing permissions and
1:e8c9fe3:    limitations under the License.
1:e8c9fe3: 
1:e8c9fe3:  */
1:e8c9fe3: package org.apache.derbyTesting.junit;
1:e8c9fe3: 
1:e8c9fe3: import java.util.StringTokenizer;
1:e8c9fe3: 
1:e8c9fe3: /**
1:e8c9fe3:  * A generic class for storing a major and minor version number.
1:e8c9fe3:  * <p>
1:e8c9fe3:  * This class assumes that more capable versions compare greater than less
1:e8c9fe3:  * capable versions.
1:e8c9fe3:  *
1:e8c9fe3:  * @see DerbyVersion 
1:e8c9fe3:  */
1:e8c9fe3: public final class Version
1:e8c9fe3:         implements Comparable {
1:e8c9fe3:     private final int _major;
1:e8c9fe3:     private final int _minor;
1:e8c9fe3: 
1:e8c9fe3:     Version(int major, int minor) {
1:e8c9fe3:         this._major = major;
1:e8c9fe3:         this._minor = minor;
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3:     public Version(String desc)
1:e8c9fe3:             throws NumberFormatException {
1:e8c9fe3:         StringTokenizer tokens = new StringTokenizer( desc, "." );
1:e8c9fe3:         this._major = Integer.parseInt(tokens.nextToken());
1:e8c9fe3:         this._minor = Integer.parseInt(tokens.nextToken());
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3:     /**
1:e8c9fe3:      * Returns {@code true} if this version is at least as advanced
1:e8c9fe3:      * as the other version.
1:e8c9fe3:      */
1:e8c9fe3:     public boolean atLeast(Version that) {
1:e8c9fe3:         return this.compareTo( that ) > -1;
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3: 
1:e8c9fe3:     ////////////////////////////////////////////////////////
1:e8c9fe3:     //
1:e8c9fe3:     //    Comparable BEHAVIOR
1:e8c9fe3:     //
1:e8c9fe3:     ////////////////////////////////////////////////////////
1:e8c9fe3: 
1:e8c9fe3:     public int compareTo(Object o) {
1:e8c9fe3:         return compareTo((Version)o);
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3:     public int compareTo(Version that) {
1:e8c9fe3:         if ( this._major < that._major ) { return -1; }
1:e8c9fe3:         if ( this._major > that._major ) { return 1; }
1:e8c9fe3: 
1:e8c9fe3:         return this._minor - that._minor;
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3:     ////////////////////////////////////////////////////////
1:e8c9fe3:     //
1:e8c9fe3:     //    Object OVERLOADS
1:e8c9fe3:     //
1:e8c9fe3:     ////////////////////////////////////////////////////////
1:e8c9fe3: 
1:e8c9fe3:     public String toString() {
1:e8c9fe3:         return Integer.toString( _major ) + '.' + Integer.toString( _minor );
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3:     public boolean equals(Object other) {
1:e8c9fe3:         if (other instanceof Version) {
1:e8c9fe3:             return compareTo((Version)other) == 0;
1:e8c9fe3:         } else {
1:e8c9fe3:             return false;
1:e8c9fe3:         }
1:e8c9fe3:     }
1:e8c9fe3: 
1:e8c9fe3:     public int hashCode() {
1:e8c9fe3:         return _major ^ _minor;
1:e8c9fe3:     }
1:e8c9fe3: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:e8c9fe3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.junit.Version
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.util.StringTokenizer;
1: 
1: /**
1:  * A generic class for storing a major and minor version number.
1:  * <p>
1:  * This class assumes that more capable versions compare greater than less
1:  * capable versions.
1:  *
1:  * @see DerbyVersion 
1:  */
1: public final class Version
1:         implements Comparable {
1:     private final int _major;
1:     private final int _minor;
1: 
1:     Version(int major, int minor) {
1:         this._major = major;
1:         this._minor = minor;
1:     }
1: 
1:     public Version(String desc)
1:             throws NumberFormatException {
1:         StringTokenizer tokens = new StringTokenizer( desc, "." );
1:         this._major = Integer.parseInt(tokens.nextToken());
1:         this._minor = Integer.parseInt(tokens.nextToken());
1:     }
1: 
1:     /**
1:      * Returns {@code true} if this version is at least as advanced
1:      * as the other version.
1:      */
1:     public boolean atLeast(Version that) {
1:         return this.compareTo( that ) > -1;
1:     }
1: 
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     //    Comparable BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     public int compareTo(Object o) {
1:         return compareTo((Version)o);
1:     }
1: 
1:     public int compareTo(Version that) {
1:         if ( this._major < that._major ) { return -1; }
1:         if ( this._major > that._major ) { return 1; }
1: 
1:         return this._minor - that._minor;
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     //    Object OVERLOADS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     public String toString() {
1:         return Integer.toString( _major ) + '.' + Integer.toString( _minor );
1:     }
1: 
1:     public boolean equals(Object other) {
1:         if (other instanceof Version) {
1:             return compareTo((Version)other) == 0;
1:         } else {
1:             return false;
1:         }
1:     }
1: 
1:     public int hashCode() {
1:         return _major ^ _minor;
1:     }
1: }
============================================================================