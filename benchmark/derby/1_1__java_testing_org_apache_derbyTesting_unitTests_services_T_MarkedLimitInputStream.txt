1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import java.io.ByteArrayInputStream;
1:2bc809f: import java.io.ByteArrayOutputStream;
1:2bc809f: import java.io.InputStream;
1:2bc809f: import java.io.OutputStream;
1:2bc809f: import java.io.DataInputStream;
1:2bc809f: import java.io.DataOutputStream;
1:2bc809f: import java.io.IOException;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f:   A simple unit test for a MarkedLimitInputStream.
1:2bc809f:   */
1:2bc809f: public class T_MarkedLimitInputStream extends T_Generic
1:2bc809f: {
1:2bc809f: 
1:2bc809f:     private static final int TEST_SIZE = 10000;
1:2bc809f:     private static final int BLOCK_SIZE = 256;
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     private static MarkedLimitInputStream setup(byte[] data)
1:2bc809f:         throws Exception
1:2bc809f:     {
1:2bc809f:         // make an InputStream on top of an array
1:2bc809f:         InputStream inputStream = new ByteArrayInputStream(data);
1:2bc809f: 
1:2bc809f:         // make an OutputStream on top of an empty array
1:2bc809f:         ByteArrayOutputStream baos = new ByteArrayOutputStream(TEST_SIZE + 200);
1:2bc809f:         // make it into a DataOutputStream
1:2bc809f:         DataOutputStream dos = new DataOutputStream(baos);
1:2bc809f:         // fill it with data in the correct (block) format
1:2bc809f:         writeDos(inputStream,dos);
1:2bc809f: 
1:2bc809f:         // make a MarkedLimitInputStream
1:2bc809f:         return makeMLIS(baos.toByteArray());
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private static void writeDos(InputStream x, DataOutputStream out)
1:2bc809f:         throws Exception
1:2bc809f: 	{
1:2bc809f:         boolean isLastBlock = false;
1:2bc809f:         byte[] b = new byte[BLOCK_SIZE];
1:2bc809f: 
1:2bc809f:         while (isLastBlock == false)
1:2bc809f:         {
1:2bc809f:             int len = x.read(b);
1:2bc809f:             if (len != BLOCK_SIZE)
1:2bc809f:             {
1:2bc809f:                 isLastBlock = true;
1:2bc809f:                 if (len < 0)
1:2bc809f:                 {
1:2bc809f:                     len = 0;
1:2bc809f:                 }
1:2bc809f:             }
1:2bc809f:             out.writeBoolean(isLastBlock);
1:2bc809f:             out.writeInt(len);
1:2bc809f:             for (int i = 0; i < len; i++)
1:2bc809f:             {
1:2bc809f:                 out.writeByte(b[i]);
1:2bc809f:             }
1:2bc809f:         }
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     private static MarkedLimitInputStream makeMLIS(byte[] b)
1:2bc809f:         throws Exception
1:2bc809f:     {
1:2bc809f:         // make an InputStream
1:2bc809f:         InputStream inputStream = new ByteArrayInputStream(b);
1:2bc809f:         // make a DataInputStream
1:2bc809f:         DataInputStream dataInputStream = new DataInputStream(inputStream);
1:2bc809f:         // make a MarkedLimitInputStream
1:2bc809f:         return new MarkedLimitInputStream(dataInputStream);
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     private static boolean readAndCompare(MarkedLimitInputStream mlis, byte[] x)
1:2bc809f:         throws Exception
1:2bc809f:     {
1:2bc809f:         int b;
1:2bc809f:         int i = 0;
1:2bc809f:         while ((b = mlis.read()) != -1)
1:2bc809f:         {
1:2bc809f:             if (x[i] != (byte) b)
1:2bc809f:             {
1:2bc809f:                 System.out.println("Stream and array differ at position " + i);
1:2bc809f:                 return false;
1:2bc809f:             }
1:2bc809f:             i++;
1:2bc809f:         }
1:2bc809f:         // read to end of stream, check array size
1:2bc809f:         if (i != x.length)
1:2bc809f:         {
1:2bc809f:             System.out.println("array size and stream size differ");
1:2bc809f:             return false;
1:2bc809f:         }
1:2bc809f:         return true;
1:2bc809f: 
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     private static boolean readAndCompareChunks(MarkedLimitInputStream mlis,
1:2bc809f:         byte[] x)
1:2bc809f:         throws Exception
1:2bc809f:     {
1:2bc809f:         int chunkSize = 10;
1:2bc809f:         byte[] chunk = new byte[chunkSize];
1:2bc809f:         int c = 0;
1:2bc809f:         int base = 0;
1:2bc809f:         while ((c = mlis.read(chunk)) > 0)
1:2bc809f:         {
1:2bc809f:             for (int offset = 0; offset < c; offset++)
1:2bc809f:             {
1:2bc809f:                 if (x[base + offset] != chunk[offset])
1:2bc809f:                 {
1:2bc809f:                     System.out.println("Stream and array differ at position " +
1:2bc809f:                         (base + offset));
1:2bc809f:                     System.out.println("Array : x[" + (base + offset) + "] = " + x[base+offset]);
1:2bc809f:                     System.out.println("Stream : chunk[" + offset + "] = " + chunk[offset]);
1:2bc809f:                     return false;
1:2bc809f:                 }
1:2bc809f:             }
1:2bc809f:             base += c;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         // read to end of stream, check array size
1:2bc809f:         if (base != x.length)
1:2bc809f:         {
1:2bc809f:             System.out.println("array size ( " + x.length +
1:2bc809f:                 " ) and stream size ( " + base + " ) differ");
1:2bc809f:             return false;
1:2bc809f:         }
1:2bc809f:         return true;
1:2bc809f: 
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     private static boolean skipAndCompare(MarkedLimitInputStream mlis, byte[] x,
1:2bc809f:         long skipTo)
1:2bc809f:         throws Exception
1:2bc809f:     {
1:2bc809f:         long c = mlis.skip(skipTo);
1:2bc809f:         T_Fail.T_ASSERT(c == skipTo);
1:2bc809f:         byte[] y = new byte[x.length - (int) c];
1:2bc809f:         System.arraycopy(x,(int) skipTo, y, 0, x.length - (int) c);
1:2bc809f:         return readAndCompare(mlis,y);
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/** Methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 	public String getModuleToTestProtocolName()
1:2bc809f: 	{
1:2bc809f: 		return "internalUtils.MarkedLimitInputStream";
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	protected void runTests()
1:2bc809f:         throws Exception
1:2bc809f:     {
1:2bc809f:         boolean success = true;
1:2bc809f:         // create and initialize array
1:2bc809f:         byte[] data = new byte[TEST_SIZE];
1:2bc809f:         for (int i = 0; i < data.length; i++)
1:2bc809f:         {
1:2bc809f:             data[i] = (byte)(i & 0xFF);
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         MarkedLimitInputStream mlis = setup(data);
1:2bc809f:         // compare MarkedLimitInputStream with original byte array
1:2bc809f:         if (readAndCompare(mlis, data))
1:2bc809f:         {
1:2bc809f:             PASS("test1");
1:2bc809f:         }
1:2bc809f:         else
1:2bc809f:         {
1:2bc809f:             FAIL("test1");
1:2bc809f:             success = false;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         MarkedLimitInputStream mlis2 = setup(data);
1:2bc809f:         // compare MarkedLimitInputStream with original byte array
1:2bc809f:         // read in chunks
1:2bc809f:         if (readAndCompareChunks(mlis2, data))
1:2bc809f:         {
1:2bc809f:             PASS("test2");
1:2bc809f:         }
1:2bc809f:         else
1:2bc809f:         {
1:2bc809f:             FAIL("test2");
1:2bc809f:             success = false;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         MarkedLimitInputStream mlis3 = setup(data);
1:2bc809f:         // skip and compare MarkedLimitInputStream with original byte array
1:2bc809f:         if (skipAndCompare(mlis3, data, TEST_SIZE/2))
1:2bc809f:         {
1:2bc809f:             PASS("test3");
1:2bc809f:         }
1:2bc809f:         else
1:2bc809f:         {
1:2bc809f:             FAIL("test3");
1:2bc809f:             success = false;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         MarkedLimitInputStream mlis4 = setup(data);
1:2bc809f:         // skip and compare MarkedLimitInputStream with original byte array
1:2bc809f:         if (skipAndCompare(mlis4, data, TEST_SIZE-1))
1:2bc809f:         {
1:2bc809f:             PASS("test4");
1:2bc809f:         }
1:2bc809f:         else
1:2bc809f:         {
1:2bc809f:             FAIL("test4");
1:2bc809f:             success = false;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         if (!success)
1:2bc809f:         {
1:2bc809f:             throw T_Fail.testFail();
1:2bc809f:         }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:         // create and initialize array with size BLOCK_SIZE
1:2bc809f:         byte[] data2 = new byte[BLOCK_SIZE];
1:2bc809f:         for (int i = 0; i < data.length; i++)
1:2bc809f:         {
1:2bc809f:             data[i] = (byte)(i & 0xFF);
1:2bc809f:         }
1:2bc809f:         MarkedLimitInputStream mlis5 = setup(data2);
1:2bc809f:         // skip and compare MarkedLimitInputStream with original byte array
1:2bc809f:         if (readAndCompare(mlis5, data2))
1:2bc809f:         {
1:2bc809f:             PASS("test5");
1:2bc809f:         }
1:2bc809f:         else
1:2bc809f:         {
1:2bc809f:             FAIL("test5");
1:2bc809f:             success = false;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         if (!success)
1:2bc809f:         {
1:2bc809f:             throw T_Fail.testFail();
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream
1: 
0:    Copyright 2001, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: /**
1:   A simple unit test for a MarkedLimitInputStream.
1:   */
1: public class T_MarkedLimitInputStream extends T_Generic
1: {
1: 
1:     private static final int TEST_SIZE = 10000;
1:     private static final int BLOCK_SIZE = 256;
1: 
1: 
1:     private static MarkedLimitInputStream setup(byte[] data)
1:         throws Exception
1:     {
1:         // make an InputStream on top of an array
1:         InputStream inputStream = new ByteArrayInputStream(data);
1: 
1:         // make an OutputStream on top of an empty array
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream(TEST_SIZE + 200);
1:         // make it into a DataOutputStream
1:         DataOutputStream dos = new DataOutputStream(baos);
1:         // fill it with data in the correct (block) format
1:         writeDos(inputStream,dos);
1: 
1:         // make a MarkedLimitInputStream
1:         return makeMLIS(baos.toByteArray());
1: 
1: 	}
1: 
1: 	private static void writeDos(InputStream x, DataOutputStream out)
1:         throws Exception
1: 	{
1:         boolean isLastBlock = false;
1:         byte[] b = new byte[BLOCK_SIZE];
1: 
1:         while (isLastBlock == false)
1:         {
1:             int len = x.read(b);
1:             if (len != BLOCK_SIZE)
1:             {
1:                 isLastBlock = true;
1:                 if (len < 0)
1:                 {
1:                     len = 0;
1:                 }
1:             }
1:             out.writeBoolean(isLastBlock);
1:             out.writeInt(len);
1:             for (int i = 0; i < len; i++)
1:             {
1:                 out.writeByte(b[i]);
1:             }
1:         }
1:     }
1: 
1: 
1:     private static MarkedLimitInputStream makeMLIS(byte[] b)
1:         throws Exception
1:     {
1:         // make an InputStream
1:         InputStream inputStream = new ByteArrayInputStream(b);
1:         // make a DataInputStream
1:         DataInputStream dataInputStream = new DataInputStream(inputStream);
1:         // make a MarkedLimitInputStream
1:         return new MarkedLimitInputStream(dataInputStream);
1:     }
1: 
1: 
1:     private static boolean readAndCompare(MarkedLimitInputStream mlis, byte[] x)
1:         throws Exception
1:     {
1:         int b;
1:         int i = 0;
1:         while ((b = mlis.read()) != -1)
1:         {
1:             if (x[i] != (byte) b)
1:             {
1:                 System.out.println("Stream and array differ at position " + i);
1:                 return false;
1:             }
1:             i++;
1:         }
1:         // read to end of stream, check array size
1:         if (i != x.length)
1:         {
1:             System.out.println("array size and stream size differ");
1:             return false;
1:         }
1:         return true;
1: 
1:     }
1: 
1: 
1:     private static boolean readAndCompareChunks(MarkedLimitInputStream mlis,
1:         byte[] x)
1:         throws Exception
1:     {
1:         int chunkSize = 10;
1:         byte[] chunk = new byte[chunkSize];
1:         int c = 0;
1:         int base = 0;
1:         while ((c = mlis.read(chunk)) > 0)
1:         {
1:             for (int offset = 0; offset < c; offset++)
1:             {
1:                 if (x[base + offset] != chunk[offset])
1:                 {
1:                     System.out.println("Stream and array differ at position " +
1:                         (base + offset));
1:                     System.out.println("Array : x[" + (base + offset) + "] = " + x[base+offset]);
1:                     System.out.println("Stream : chunk[" + offset + "] = " + chunk[offset]);
1:                     return false;
1:                 }
1:             }
1:             base += c;
1:         }
1: 
1:         // read to end of stream, check array size
1:         if (base != x.length)
1:         {
1:             System.out.println("array size ( " + x.length +
1:                 " ) and stream size ( " + base + " ) differ");
1:             return false;
1:         }
1:         return true;
1: 
1:     }
1: 
1: 
1:     private static boolean skipAndCompare(MarkedLimitInputStream mlis, byte[] x,
1:         long skipTo)
1:         throws Exception
1:     {
1:         long c = mlis.skip(skipTo);
1:         T_Fail.T_ASSERT(c == skipTo);
1:         byte[] y = new byte[x.length - (int) c];
1:         System.arraycopy(x,(int) skipTo, y, 0, x.length - (int) c);
1:         return readAndCompare(mlis,y);
1:     }
1: 
1: 
1: 	/** Methods required by T_Generic
1: 	*/
1: 	public String getModuleToTestProtocolName()
1: 	{
1: 		return "internalUtils.MarkedLimitInputStream";
1: 	}
1: 
1: 
1: 	protected void runTests()
1:         throws Exception
1:     {
1:         boolean success = true;
1:         // create and initialize array
1:         byte[] data = new byte[TEST_SIZE];
1:         for (int i = 0; i < data.length; i++)
1:         {
1:             data[i] = (byte)(i & 0xFF);
1:         }
1: 
1:         MarkedLimitInputStream mlis = setup(data);
1:         // compare MarkedLimitInputStream with original byte array
1:         if (readAndCompare(mlis, data))
1:         {
1:             PASS("test1");
1:         }
1:         else
1:         {
1:             FAIL("test1");
1:             success = false;
1:         }
1: 
1:         MarkedLimitInputStream mlis2 = setup(data);
1:         // compare MarkedLimitInputStream with original byte array
1:         // read in chunks
1:         if (readAndCompareChunks(mlis2, data))
1:         {
1:             PASS("test2");
1:         }
1:         else
1:         {
1:             FAIL("test2");
1:             success = false;
1:         }
1: 
1:         MarkedLimitInputStream mlis3 = setup(data);
1:         // skip and compare MarkedLimitInputStream with original byte array
1:         if (skipAndCompare(mlis3, data, TEST_SIZE/2))
1:         {
1:             PASS("test3");
1:         }
1:         else
1:         {
1:             FAIL("test3");
1:             success = false;
1:         }
1: 
1:         MarkedLimitInputStream mlis4 = setup(data);
1:         // skip and compare MarkedLimitInputStream with original byte array
1:         if (skipAndCompare(mlis4, data, TEST_SIZE-1))
1:         {
1:             PASS("test4");
1:         }
1:         else
1:         {
1:             FAIL("test4");
1:             success = false;
1:         }
1: 
1:         if (!success)
1:         {
1:             throw T_Fail.testFail();
1:         }
1: 
1: 
1:         // create and initialize array with size BLOCK_SIZE
1:         byte[] data2 = new byte[BLOCK_SIZE];
1:         for (int i = 0; i < data.length; i++)
1:         {
1:             data[i] = (byte)(i & 0xFF);
1:         }
1:         MarkedLimitInputStream mlis5 = setup(data2);
1:         // skip and compare MarkedLimitInputStream with original byte array
1:         if (readAndCompare(mlis5, data2))
1:         {
1:             PASS("test5");
1:         }
1:         else
1:         {
1:             FAIL("test5");
1:             success = false;
1:         }
1: 
1:         if (!success)
1:         {
1:             throw T_Fail.testFail();
1:         }
1: 
1:     }
1: 
1: }
============================================================================