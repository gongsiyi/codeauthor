1:8a6cb02: /**
1:8a6cb02:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Bug5054Test
1:8a6cb02:  *  
1:8a6cb02:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a6cb02:  * or more contributor license agreements.  See the NOTICE file
1:8a6cb02:  * distributed with this work for additional information
1:8a6cb02:  * regarding copyright ownership.  The ASF licenses this file
1:8a6cb02:  * to you under the Apache License, Version 2.0 (the
1:8a6cb02:  * "License"); you may not use this file except in compliance
1:8a6cb02:  * with the License.  You may obtain a copy of the License at
1:8a6cb02:  *
1:8a6cb02:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8a6cb02:  *
1:8a6cb02:  * Unless required by applicable law or agreed to in writing,
1:8a6cb02:  * software distributed under the License is distributed on an
1:8a6cb02:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8a6cb02:  * KIND, either express or implied.  See the License for the
1:8a6cb02:  * specific language governing permissions and limitations
1:8a6cb02:  * under the License.
1:8a6cb02:  */
3:8a6cb02: 
1:8a6cb02: package org.apache.derbyTesting.functionTests.tests.lang;
1:8a6cb02: 
1:8a6cb02: import java.sql.Connection;
1:8a6cb02: import java.sql.ResultSet;
1:8a6cb02: import java.sql.SQLException;
1:8a6cb02: import java.sql.Statement;
1:8a6cb02: import junit.framework.Test;
1:8a6cb02: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:8a6cb02: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:8a6cb02: import org.apache.derbyTesting.junit.JDBC;
1:8a6cb02: import org.apache.derbyTesting.junit.TestConfiguration;
1:8a6cb02: 
1:8a6cb02: /**
1:8a6cb02:  * Where current of cursorname and case sensitivity
1:8a6cb02:  */
1:8a6cb02: public class Bug5054Test extends BaseJDBCTestCase {
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Basic constructor.
1:8a6cb02:      */
1:8a6cb02:     public Bug5054Test(String name) {
1:8a6cb02:         super(name);
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Sets the auto commit to false.
1:8a6cb02:      */
1:8a6cb02:     protected void initializeConnection(Connection conn) throws SQLException {
1:8a6cb02:         conn.setAutoCommit(false);
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Returns the implemented tests.
1:8a6cb02:      * 
1:8a6cb02:      * @return An instance of <code>Test</code> with the implemented tests to
1:8a6cb02:      *         run.
1:8a6cb02:      */
1:8a6cb02:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Bug5054Test");
1:8a6cb02:         Test test = new CleanDatabaseTestSetup(TestConfiguration
1:8a6cb02:                 .embeddedSuite(Bug5054Test.class)) {
1:8a6cb02:             protected void decorateSQL(Statement stmt) throws SQLException {
1:8a6cb02:                 stmt.executeUpdate("CREATE TABLE T1 (a integer, b integer)");
1:8a6cb02:                 stmt.executeUpdate("INSERT INTO T1 VALUES(1, 1)");
1:8a6cb02:                 stmt.executeUpdate("INSERT INTO T1 VALUES(2, 2)");
1:8a6cb02:             }
1:8a6cb02:         };
1:8a6cb02:         suite.addTest(test);
1:8a6cb02:         suite.addTest(TestConfiguration.clientServerDecorator(test));
1:8a6cb02:         return suite;
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * 
1:8a6cb02:      * Test fix of use of delimited cursor name in DRDA.
1:8a6cb02:      * @throws SQLException
1:8a6cb02:      */
1:8a6cb02:     public void testBugBug5054() throws SQLException {
1:8a6cb02:         Statement stmt1;
1:8a6cb02:         Statement stmt2;
1:8a6cb02:         Statement stmt3;
1:8a6cb02:         ResultSet rs;
1:8a6cb02: 
1:8a6cb02:         stmt1 = createStatement();
1:8a6cb02:         stmt1.setCursorName("aBc");
1:8a6cb02:         rs = stmt1.executeQuery("select * from t1 for update");
1:8a6cb02:         rs.next();
1:8a6cb02: 
1:8a6cb02:         stmt2 = createStatement();
1:8a6cb02:         stmt2.execute("update t1 set b=11 where current of \""
1:8a6cb02:                 + rs.getCursorName() + "\"");
1:8a6cb02: 
1:8a6cb02:         stmt3 = createStatement();
1:8a6cb02:         rs = stmt3.executeQuery("SELECT * FROM T1");
1:8a6cb02: 
1:8a6cb02:         JDBC.assertFullResultSet(rs, 
1:8a6cb02:                     new String[][]{{"1","11"},
1:8a6cb02:                     {"2","2"}});
1:8a6cb02: 
1:8a6cb02:         rs.close();
1:8a6cb02:     }
1:8a6cb02: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Bug5054Test");
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:8a6cb02
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Bug5054Test
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.Utilities;
1: 
1: /**
1:  * Where current of cursorname and case sensitivity
1:  */
1: public class Bug5054Test extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Basic constructor.
1:      */
1:     public Bug5054Test(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Sets the auto commit to false.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Returns the implemented tests.
1:      * 
1:      * @return An instance of <code>Test</code> with the implemented tests to
1:      *         run.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("Bug5054Test");
1:         Test test = new CleanDatabaseTestSetup(TestConfiguration
1:                 .embeddedSuite(Bug5054Test.class)) {
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 stmt.executeUpdate("CREATE TABLE T1 (a integer, b integer)");
1:                 stmt.executeUpdate("INSERT INTO T1 VALUES(1, 1)");
1:                 stmt.executeUpdate("INSERT INTO T1 VALUES(2, 2)");
1:             }
1:         };
1:         suite.addTest(test);
1:         suite.addTest(TestConfiguration.clientServerDecorator(test));
1:         return suite;
1:     }
1: 
1:     /**
1:      * 
1:      * Test fix of use of delimited cursor name in DRDA.
1:      * @throws SQLException
1:      */
1:     public void testBugBug5054() throws SQLException {
1:         Statement stmt1;
1:         Statement stmt2;
1:         Statement stmt3;
1:         ResultSet rs;
1: 
1:         stmt1 = createStatement();
1:         stmt1.setCursorName("aBc");
1:         rs = stmt1.executeQuery("select * from t1 for update");
1:         rs.next();
1: 
1:         stmt2 = createStatement();
1:         stmt2.execute("update t1 set b=11 where current of \""
1:                 + rs.getCursorName() + "\"");
1: 
1:         stmt3 = createStatement();
1:         rs = stmt3.executeQuery("SELECT * FROM T1");
1: 
1:         JDBC.assertFullResultSet(rs, 
1:                     new String[][]{{"1","11"},
1:                     {"2","2"}});
1: 
1:         rs.close();
1:     }
1: }
============================================================================