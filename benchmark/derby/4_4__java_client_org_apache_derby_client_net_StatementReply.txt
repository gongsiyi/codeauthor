1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.StatementReply
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:70f7692: import org.apache.derby.client.am.Agent;
1:33776ff: import org.apache.derby.client.am.PreparedStatementCallbackInterface;
1:33776ff: import org.apache.derby.client.am.SqlException;
1:70f7692: import org.apache.derby.client.am.StatementCallbackInterface;
1:33776ff: 
1:0326967: class StatementReply extends ConnectionReply {
1:70f7692:     private StatementReplyInterface materialStatementReply_;
1:33776ff: 
1:70f7692:     StatementReply(Agent agent,
1:70f7692:                    StatementReplyInterface materialStatementReply,
1:70f7692:                    ConnectionReplyInterface materialConnectionReply) {
1:70f7692:         super(agent, materialConnectionReply);
1:70f7692:         materialStatementReply_ = materialStatementReply;
1:70f7692:     }
1:33776ff: 
1:0326967:     void readPrepareDescribeOutput(StatementCallbackInterface statement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readPrepareDescribeOutput(statement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:33776ff: 
1:0326967:     void readExecuteImmediate(StatementCallbackInterface statement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readExecuteImmediate(statement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:33776ff: 
1:0326967:     void readOpenQuery(StatementCallbackInterface statement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readOpenQuery(statement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:33776ff: 
1:0326967:     void readExecute(PreparedStatementCallbackInterface preparedStatement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readExecute(preparedStatement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:33776ff: 
1:0326967:     void readPrepare(StatementCallbackInterface statement) throws SqlException {
1:70f7692:         materialStatementReply_.readPrepare(statement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:33776ff: 
1:0326967:     void readDescribeInput(PreparedStatementCallbackInterface preparedStatement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readDescribeInput(preparedStatement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:0326967: 
1:33776ff: 
1:0326967:     void readDescribeOutput(
1:0326967:             PreparedStatementCallbackInterface preparedStatement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readDescribeOutput(preparedStatement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:33776ff: 
1:0326967:     void readExecuteCall(StatementCallbackInterface statement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readExecuteCall(statement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
1:70f7692: 
1:33776ff: 
1:0326967:     void readSetSpecialRegister(StatementCallbackInterface statement)
1:0326967:             throws SqlException {
1:70f7692:         materialStatementReply_.readSetSpecialRegister(statement);
1:70f7692:         agent_.checkForChainBreakingException_();
1:70f7692:     }
11:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class StatementReply extends ConnectionReply {
/////////////////////////////////////////////////////////////////////////
1:     void readPrepareDescribeOutput(StatementCallbackInterface statement)
1:             throws SqlException {
1:     void readExecuteImmediate(StatementCallbackInterface statement)
1:             throws SqlException {
1:     void readOpenQuery(StatementCallbackInterface statement)
1:             throws SqlException {
1:     void readExecute(PreparedStatementCallbackInterface preparedStatement)
1:             throws SqlException {
1:     void readPrepare(StatementCallbackInterface statement) throws SqlException {
1:     void readDescribeInput(PreparedStatementCallbackInterface preparedStatement)
1:             throws SqlException {
1: 
1:     void readDescribeOutput(
1:             PreparedStatementCallbackInterface preparedStatement)
1:             throws SqlException {
1:     void readExecuteCall(StatementCallbackInterface statement)
1:             throws SqlException {
1:     void readSetSpecialRegister(StatementCallbackInterface statement)
1:             throws SqlException {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.Agent;
1: import org.apache.derby.client.am.StatementCallbackInterface;
0: public class StatementReply extends ConnectionReply {
1:     private StatementReplyInterface materialStatementReply_;
1:     StatementReply(Agent agent,
1:                    StatementReplyInterface materialStatementReply,
1:                    ConnectionReplyInterface materialConnectionReply) {
1:         super(agent, materialConnectionReply);
1:         materialStatementReply_ = materialStatementReply;
1:     }
0:     public void readPrepareDescribeOutput(StatementCallbackInterface statement) throws SqlException {
1:         materialStatementReply_.readPrepareDescribeOutput(statement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readExecuteImmediate(StatementCallbackInterface statement) throws SqlException {
1:         materialStatementReply_.readExecuteImmediate(statement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readOpenQuery(StatementCallbackInterface statement) throws SqlException {
1:         materialStatementReply_.readOpenQuery(statement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readExecute(PreparedStatementCallbackInterface preparedStatement) throws SqlException {
1:         materialStatementReply_.readExecute(preparedStatement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readPrepare(StatementCallbackInterface statement) throws SqlException {
1:         materialStatementReply_.readPrepare(statement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readDescribeInput(PreparedStatementCallbackInterface preparedStatement) throws SqlException {
1:         materialStatementReply_.readDescribeInput(preparedStatement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readDescribeOutput(PreparedStatementCallbackInterface preparedStatement) throws SqlException {
1:         materialStatementReply_.readDescribeOutput(preparedStatement);
1:         agent_.checkForChainBreakingException_();
1:     }
0:     public void readExecuteCall(StatementCallbackInterface statement) throws SqlException {
1:         materialStatementReply_.readExecuteCall(statement);
1:         agent_.checkForChainBreakingException_();
1:     }
1: 
0:     public void readSetSpecialRegister(StatementCallbackInterface statement) throws SqlException {
1:         materialStatementReply_.readSetSpecialRegister(statement);
1:         agent_.checkForChainBreakingException_();
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.StatementReply
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
0: import org.apache.derby.client.am.StatementCallbackInterface;
1: import org.apache.derby.client.am.PreparedStatementCallbackInterface;
1: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.client.am.Agent;
1: 
0: public class StatementReply extends ConnectionReply
0: {
0:   private StatementReplyInterface materialStatementReply_;
1: 
0:   StatementReply (Agent agent,
0: 		  StatementReplyInterface materialStatementReply,
0: 		  ConnectionReplyInterface materialConnectionReply)
0:   {
0:     super (agent,materialConnectionReply);
0:     materialStatementReply_ = materialStatementReply;
1:   }
1: 
0:   public void readPrepareDescribeOutput (StatementCallbackInterface statement) throws SqlException
0:   {
0:     materialStatementReply_.readPrepareDescribeOutput(statement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readExecuteImmediate (StatementCallbackInterface statement) throws SqlException
0:   {
0:     materialStatementReply_.readExecuteImmediate(statement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readOpenQuery (StatementCallbackInterface statement) throws SqlException
0:   {
0:     materialStatementReply_.readOpenQuery(statement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readExecute (PreparedStatementCallbackInterface preparedStatement) throws SqlException
0:   {
0:     materialStatementReply_.readExecute(preparedStatement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readPrepare (StatementCallbackInterface statement) throws SqlException
0:   {
0:     materialStatementReply_.readPrepare(statement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readDescribeInput (PreparedStatementCallbackInterface preparedStatement) throws SqlException
0:   {
0:     materialStatementReply_.readDescribeInput(preparedStatement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readDescribeOutput (PreparedStatementCallbackInterface preparedStatement) throws SqlException
0:   {
0:     materialStatementReply_.readDescribeOutput(preparedStatement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
0:   public void readExecuteCall (StatementCallbackInterface statement) throws SqlException
0:   {
0:     materialStatementReply_.readExecuteCall(statement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: 
1:   
0:   public void readSetSpecialRegister (StatementCallbackInterface statement) throws SqlException
0:   {
0:     materialStatementReply_.readSetSpecialRegister(statement);
0:     agent_.checkForChainBreakingException_();
1:   }
1: }
============================================================================