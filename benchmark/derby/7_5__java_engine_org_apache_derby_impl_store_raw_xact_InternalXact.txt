1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.InternalXact
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:722a889: import org.apache.derby.iapi.types.DataValueFactory;
1:722a889: 
1:eac0369: import java.io.ObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: 	@see Xact
1:eac0369: 
1:eac0369: */
1:eac0369: public class InternalXact extends Xact  
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	protected InternalXact(
1:722a889:     XactFactory         xactFactory, 
1:722a889:     LogFactory          logFactory, 
1:722a889:     DataFactory         dataFactory,
1:722a889:     DataValueFactory    dataValueFactory) 
1:eac0369:     {
1:722a889: 		super(
1:9819cf8:             xactFactory, null, logFactory, dataFactory, dataValueFactory, 
1:ceaf7df:             false, null, false);
1:eac0369: 
1:eac0369: 		// always want to hold latches & containers open past the commit/abort
1:eac0369: 		setPostComplete();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Transaction
1:eac0369: 	*/
1:eac0369: 
1:eac0369:   
1:eac0369: 	/**
1:eac0369: 		Savepoints are not supported in internal transactions.
1:eac0369: 
1:eac0369: 	    @exception StandardException  A transaction exception is thrown to 
1:eac0369:                                       disallow savepoints.
1:eac0369: 
1:eac0369: 		@see Transaction#setSavePoint
1:eac0369: 	*/
1:eac0369: 	public int setSavePoint(String name, Object kindOfSavepoint) 
1:eac0369:         throws StandardException 
1:eac0369:     {
1:eac0369: 		throw StandardException.newException(
1:eac0369:                 SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of RawTransaction
1:eac0369: 	*/
1:eac0369: 	/**
1:eac0369: 		Internal transactions don't allow logical operations.
1:eac0369: 
1:eac0369: 		@exception StandardException A transaction exception is thrown to 
1:eac0369:                                      disallow logical operations.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.store.raw.xact.RawTransaction#recoveryRollbackFirst
1:eac0369: 	*/
1:eac0369: 	
1:de92dd8: 	 public void checkLogicalOperationOk() 
1:eac0369:          throws StandardException 
1:eac0369:      {
1:eac0369: 		throw StandardException.newException(
1:eac0369:                 SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Yes, we do want to be rolled back first in recovery.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.store.raw.xact.RawTransaction#recoveryRollbackFirst
1:eac0369: 	*/
1:eac0369: 	public boolean recoveryRollbackFirst()
1:eac0369:     {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**	Implementation specific methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @param commitOrAbort to commit or abort
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	protected void doComplete(Integer commitOrAbort) 
1:eac0369:         throws StandardException 
1:eac0369:     {
1:eac0369: 
1:eac0369: 		// release our latches on an abort
1:eac0369: 		// keep everything on a commit
1:eac0369: 		if (commitOrAbort.equals(ABORT))
1:eac0369: 			super.doComplete(commitOrAbort);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected void setIdleState() 
1:eac0369:     {
1:eac0369: 
1:eac0369: 		super.setIdleState();
1:eac0369: 
1:eac0369: 		// Quiesce mode never denies an internal transaction from going active, don't
1:eac0369: 		// have to worry about that
1:eac0369: 		if (countObservers() != 0)
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				super.setActiveState();
1:eac0369: 			}
1:eac0369: 			catch (StandardException se)
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG)
1:e7d2a42: 					SanityManager.THROWASSERT("unexpected exception", se);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9819cf8
/////////////////////////////////////////////////////////////////////////
1:             xactFactory, null, logFactory, dataFactory, dataValueFactory, 
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ceaf7df
/////////////////////////////////////////////////////////////////////////
1:             false, null, false);
commit:722a889
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataValueFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:     XactFactory         xactFactory, 
1:     LogFactory          logFactory, 
1:     DataFactory         dataFactory,
1:     DataValueFactory    dataValueFactory) 
1: 		super(
0:             xactFactory, logFactory, dataFactory, dataValueFactory, 
0:             false, null);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:de92dd8
/////////////////////////////////////////////////////////////////////////
1: 	 public void checkLogicalOperationOk() 
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 					SanityManager.THROWASSERT("unexpected exception", se);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.InternalXact
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
1: 
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.ObjectInput;
1: 
1: /**
1: 
1: 	@see Xact
1: 
1: */
1: public class InternalXact extends Xact  
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 
1: 	protected InternalXact(
0:     XactFactory     xactFactory, 
0:     LogFactory      logFactory, 
0:     DataFactory     dataFactory) 
1:     {
0: 		super(xactFactory, logFactory, dataFactory, false, null);
1: 
1: 		// always want to hold latches & containers open past the commit/abort
1: 		setPostComplete();
1: 	}
1: 
1: 	/*
1: 	** Methods of Transaction
1: 	*/
1: 
1:   
1: 	/**
1: 		Savepoints are not supported in internal transactions.
1: 
1: 	    @exception StandardException  A transaction exception is thrown to 
1:                                       disallow savepoints.
1: 
1: 		@see Transaction#setSavePoint
1: 	*/
1: 	public int setSavePoint(String name, Object kindOfSavepoint) 
1:         throws StandardException 
1:     {
1: 		throw StandardException.newException(
1:                 SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);
1: 	}
1: 
1: 
1: 	/*
1: 	** Methods of RawTransaction
1: 	*/
1: 	/**
1: 		Internal transactions don't allow logical operations.
1: 
1: 		@exception StandardException A transaction exception is thrown to 
1:                                      disallow logical operations.
1: 
1: 		@see org.apache.derby.iapi.store.raw.xact.RawTransaction#recoveryRollbackFirst
1: 	*/
1: 	
0: 	 public void checkLogicalOperationOK() 
1:          throws StandardException 
1:      {
1: 		throw StandardException.newException(
1:                 SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);
1: 	 }
1: 
1: 	/**
1: 		Yes, we do want to be rolled back first in recovery.
1: 
1: 		@see org.apache.derby.iapi.store.raw.xact.RawTransaction#recoveryRollbackFirst
1: 	*/
1: 	public boolean recoveryRollbackFirst()
1:     {
1: 		return true;
1: 	}
1: 
1: 	/*
1: 	**	Implementation specific methods
1: 	*/
1: 
1: 	/**
1: 	 * @param commitOrAbort to commit or abort
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	protected void doComplete(Integer commitOrAbort) 
1:         throws StandardException 
1:     {
1: 
1: 		// release our latches on an abort
1: 		// keep everything on a commit
1: 		if (commitOrAbort.equals(ABORT))
1: 			super.doComplete(commitOrAbort);
1: 	}
1: 
1: 	protected void setIdleState() 
1:     {
1: 
1: 		super.setIdleState();
1: 
1: 		// Quiesce mode never denies an internal transaction from going active, don't
1: 		// have to worry about that
1: 		if (countObservers() != 0)
1: 		{
1: 			try
1: 			{
1: 				super.setActiveState();
1: 			}
1: 			catch (StandardException se)
1: 			{
1: 				if (SanityManager.DEBUG)
0: 					SanityManager.THROWASSERT("unexpected exception: " + se);
1: 			}
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogFactory;
0: 
0: import org.apache.derby.iapi.store.raw.data.DataFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.ObjectInput;
0: 
0: /**
0: 
0: 	@see Xact
0: 
0: */
0: public class InternalXact extends Xact  
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/*
0: 	** Constructor
0: 	*/
0: 
0: 	protected InternalXact(
0:     XactFactory     xactFactory, 
0:     LogFactory      logFactory, 
0:     DataFactory     dataFactory) 
0:     {
0: 		super(xactFactory, logFactory, dataFactory, false, null);
0: 
0: 		// always want to hold latches & containers open past the commit/abort
0: 		setPostComplete();
0: 	}
0: 
0: 	/*
0: 	** Methods of Transaction
0: 	*/
0: 
0:   
0: 	/**
0: 		Savepoints are not supported in internal transactions.
0: 
0: 	    @exception StandardException  A transaction exception is thrown to 
0:                                       disallow savepoints.
0: 
0: 		@see Transaction#setSavePoint
0: 	*/
0: 	public int setSavePoint(String name, Object kindOfSavepoint) 
0:         throws StandardException 
0:     {
0: 		throw StandardException.newException(
0:                 SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);
0: 	}
0: 
0: 
0: 	/*
0: 	** Methods of RawTransaction
0: 	*/
0: 	/**
0: 		Internal transactions don't allow logical operations.
0: 
0: 		@exception StandardException A transaction exception is thrown to 
0:                                      disallow logical operations.
0: 
0: 		@see org.apache.derby.iapi.store.raw.xact.RawTransaction#recoveryRollbackFirst
0: 	*/
0: 	
0: 	 public void checkLogicalOperationOK() 
0:          throws StandardException 
0:      {
0: 		throw StandardException.newException(
0:                 SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);
0: 	 }
0: 
0: 	/**
0: 		Yes, we do want to be rolled back first in recovery.
0: 
0: 		@see org.apache.derby.iapi.store.raw.xact.RawTransaction#recoveryRollbackFirst
0: 	*/
0: 	public boolean recoveryRollbackFirst()
0:     {
0: 		return true;
0: 	}
0: 
0: 	/*
0: 	**	Implementation specific methods
0: 	*/
0: 
0: 	/**
0: 	 * @param commitOrAbort to commit or abort
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	protected void doComplete(Integer commitOrAbort) 
0:         throws StandardException 
0:     {
0: 
0: 		// release our latches on an abort
0: 		// keep everything on a commit
0: 		if (commitOrAbort.equals(ABORT))
0: 			super.doComplete(commitOrAbort);
0: 	}
0: 
0: 	protected void setIdleState() 
0:     {
0: 
0: 		super.setIdleState();
0: 
0: 		// Quiesce mode never denies an internal transaction from going active, don't
0: 		// have to worry about that
0: 		if (countObservers() != 0)
0: 		{
0: 			try
0: 			{
0: 				super.setActiveState();
0: 			}
0: 			catch (StandardException se)
0: 			{
0: 				if (SanityManager.DEBUG)
0: 					SanityManager.THROWASSERT("unexpected exception: " + se);
0: 			}
0: 		}
0: 	}
0: }
============================================================================