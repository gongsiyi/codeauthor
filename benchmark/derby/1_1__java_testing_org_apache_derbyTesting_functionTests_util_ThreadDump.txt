1:6eb4ff8: /*
1:6eb4ff8: 
1:6eb4ff8:  Derby - Class org.apache.derbyTesting.functionTests.util.ThreadDump
1:6eb4ff8: 
1:6eb4ff8:  Licensed to the Apache Software Foundation (ASF) under one or more
1:6eb4ff8:  contributor license agreements.  See the NOTICE file distributed with
1:6eb4ff8:  this work for additional information regarding copyright ownership.
1:6eb4ff8:  The ASF licenses this file to You under the Apache License, Version 2.0
1:6eb4ff8:  (the "License"); you may not use this file except in compliance with
1:6eb4ff8:  the License.  You may obtain a copy of the License at
1:6eb4ff8: 
1:6eb4ff8:  http://www.apache.org/licenses/LICENSE-2.0
1:6eb4ff8: 
1:6eb4ff8:  Unless required by applicable law or agreed to in writing, software
1:6eb4ff8:  distributed under the License is distributed on an "AS IS" BASIS,
1:6eb4ff8:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6eb4ff8:  See the License for the specific language governing permissions and
1:6eb4ff8:  limitations under the License.
1:6eb4ff8: 
1:6eb4ff8:  */
1:6eb4ff8: 
1:6eb4ff8: package org.apache.derbyTesting.functionTests.util;
1:6eb4ff8: 
1:6eb4ff8: import java.util.Map;
1:6eb4ff8: 
1:6eb4ff8: public class ThreadDump {
1:6eb4ff8: 
1:6eb4ff8:     /**
1:6eb4ff8:      * 
1:6eb4ff8:      * @return A string representation of a full thread dump
1:6eb4ff8:      */
1:6eb4ff8:     public static String getStackDumpString() {
1:6eb4ff8:         StringBuffer sb = new StringBuffer();
1:6eb4ff8:         Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();
1:6eb4ff8:         for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {
1:6eb4ff8:             StackTraceElement[] lines = e.getValue();
1:6eb4ff8:             Thread t = e.getKey();
1:6eb4ff8:             sb.append("Thread name=" + t.getName() + " id=" + t.getId()
1:6eb4ff8:                     + " priority=" + t.getPriority() + " state=" + t.getState()
1:6eb4ff8:                     + " isdaemon=" + t.isDaemon() + "\n");
1:6eb4ff8:             for (int i = 0; i < lines.length; i++) {
1:6eb4ff8:                 sb.append("\t" + lines[i] + "\n");
1:6eb4ff8: 
1:6eb4ff8:             }
1:6eb4ff8:             sb.append("\n");
1:6eb4ff8:         }
1:6eb4ff8:         return sb.toString();
1:6eb4ff8:     }
1:6eb4ff8: 
1:6eb4ff8: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb4ff8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.functionTests.util.ThreadDump
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.util.Map;
1: 
1: public class ThreadDump {
1: 
1:     /**
1:      * 
1:      * @return A string representation of a full thread dump
1:      */
1:     public static String getStackDumpString() {
1:         StringBuffer sb = new StringBuffer();
1:         Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();
1:         for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {
1:             StackTraceElement[] lines = e.getValue();
1:             Thread t = e.getKey();
1:             sb.append("Thread name=" + t.getName() + " id=" + t.getId()
1:                     + " priority=" + t.getPriority() + " state=" + t.getState()
1:                     + " isdaemon=" + t.isDaemon() + "\n");
1:             for (int i = 0; i < lines.length; i++) {
1:                 sb.append("\t" + lines[i] + "\n");
1: 
1:             }
1:             sb.append("\n");
1:         }
1:         return sb.toString();
1:     }
1: 
1: }
============================================================================