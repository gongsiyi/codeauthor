1:abb2613: /*
1:abb2613:  *
1:abb2613:  * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.JapanCodeConversionTest
1:abb2613:  *
1:abb2613:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:abb2613:  * contributor license agreements.  See the NOTICE file distributed with
1:abb2613:  * this work for additional information regarding copyright ownership.
1:abb2613:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:abb2613:  * (the "License"); you may not use this file except in compliance with
1:abb2613:  * the License.  You may obtain a copy of the License at
1:abb2613:  *
1:abb2613:  *    http://www.apache.org/licenses/LICENSE-2.0
1:abb2613:  *
1:abb2613:  * Unless required by applicable law or agreed to in writing,
1:abb2613:  * software distributed under the License is distributed on an
1:abb2613:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:abb2613:  * either express or implied. See the License for the specific
1:abb2613:  * language governing permissions and limitations under the License.
1:abb2613:  */
1:abb2613: 
1:abb2613: package org.apache.derbyTesting.functionTests.tests.i18n;
1:abb2613: 
1:abb2613: import java.nio.charset.Charset;
1:abb2613: import java.sql.CallableStatement;
1:abb2613: import java.sql.SQLException;
1:abb2613: import java.sql.Statement;
1:abb2613: import junit.framework.Test;
1:abb2613: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:abb2613: import org.apache.derbyTesting.junit.JDBC;
1:abb2613: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:abb2613: import org.apache.derbyTesting.junit.TestConfiguration;
1:abb2613: 
1:abb2613: /**
1:abb2613:  * Test that files encoded in EUC-JP and SJIS can be imported from and
1:abb2613:  * exported to.
1:abb2613:  */
1:abb2613: public class JapanCodeConversionTest extends BaseJDBCTestCase {
1:abb2613:     public JapanCodeConversionTest(String name) {
1:abb2613:         super(name);
1:abb2613:     }
1:abb2613: 
1:abb2613:     public static Test suite() {
1:abb2613:         // This test requires support for specific encodings which are
1:abb2613:         // not guaranteed to be supported by all JVMs. Run the test only
1:abb2613:         // if the encodings are supported.
1:abb2613:         if (Charset.isSupported("EUC_JP") && Charset.isSupported("SJIS")) {
1:abb2613:             return new SupportFilesSetup(
1:abb2613:                 TestConfiguration.embeddedSuite(JapanCodeConversionTest.class),
1:abb2613:                 new String[] { "functionTests/tests/i18n/data/jap_EUC_JP.dat" },
1:abb2613:                 (String[]) null);
1:abb2613:         }
1:abb2613: 
1:1ae02c9:         return new BaseTestSuite(
1:1ae02c9:             "JapanCodeConversionTest - skipped because of " +
1:1ae02c9:             "missing support for EUC_JP and SJIS");
1:abb2613:     }
1:abb2613: 
1:abb2613:     protected void tearDown() throws Exception {
1:abb2613:         dropTable("T1_EUC_JP");
1:abb2613:         dropTable("T1_EUC_JP_IMPORT_AS_EUC_JP");
1:abb2613:         dropTable("T1_EUC_JP_IMPORT_AS_SJIS");
1:abb2613:         super.tearDown();
1:abb2613:     }
1:abb2613: 
1:abb2613:     /**
1:abb2613:      * The expected test data. Should match the rows in the jap_EUC_JP.dat
1:abb2613:      * file, from which we import data into the test tables.
1:abb2613:      */
1:abb2613:     private static final String[][] TABLE = {
1:abb2613:         {"1", "15:32:06", "\u30a4\u30d9\u30f3\u30c8\u30a2\u30e9\u30fc\u30e0\u304c\u6709\u52b9\u3067\u3059\u3002"},
1:abb2613:         {"2", "15:32:10", "DR:DRAUTO\u306f0 (Off)\u3067\u3059\u3002"},
1:abb2613:         {"3", "15:32:28", "INFORMIX-OnLine\u304c\u521d\u671f\u5316\u3055\u308c\u3001\u30c7\u30a3\u30b9\u30af\u306e\u521d\u671f\u5316\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:abb2613:         {"4", "15:32:29", "\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f:\u7d99\u7d9a\u6642\u9593\u306f 0\u79d2\u3067\u3057\u305f"},
1:abb2613:         {"5", "15:32:29", "\u3059\u3079\u3066\u306eDB\u9818\u57df\u306e\u30c7\u30fc\u30bf\u30b9\u30ad\u30c3\u30d7\u306f\u73fe\u5728\u30aa\u30d5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002"},
1:abb2613:         {"6", "15:32:30", "On-Line\u30e2\u30fc\u30c9"},
1:abb2613:         {"7", "15:32:31", "sysmaster\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f5c\u6210\u4e2d\u3067\u3059..."},
1:abb2613:         {"8", "15:33:22", "\u8ad6\u7406\u30ed\u30b0 1\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:abb2613:         {"9", "15:33:23", "\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9 1\u3092\u623b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u307e\u3057\u305f:/bin/sh /bin/sh -c /work1/MOSES_7.22.UC1A5_27/sqldist/etc/log_full.sh 2 23 \u8ad6\u7406\u30ed\u30b0 1\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u8ad6\u7406"},
1:abb2613:         {"10", "15:33:40", "\u8ad6\u7406\u30ed\u30b0 2\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:abb2613:         {"11", "15:33:41", "\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9 1\u3092\u623b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u307e\u3057\u305f:/bin/sh /bin/sh -c /work1/MOSES_7.22.UC1A5_27/sqldist/etc/log_full.sh 2 23 \u8ad6\u7406\u30ed\u30b0 2\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u8ad6\u7406"},
1:abb2613:         {"12", "15:33:43", "\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f:\u7d99\u7d9a\u6642\u9593\u306f 2\u79d2\u3067\u3057\u305f"},
1:abb2613:         {"13", "15:34:29", "\u8ad6\u7406\u30ed\u30b0 3\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:abb2613:         {"14", "15:34:30", "\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9 1\u3092\u623b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u307e\u3057\u305f:/bin/sh /bin/sh -c /work1/MOSES_7.22.UC1A5_27/sqldist/etc/log_full.sh 2 23 \u8ad6\u7406\u30ed\u30b0 3\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u8ad6\u7406"},
1:abb2613:         {"15", "15:35:35", "sysmaster\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4f5c\u6210\u306f\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:abb2613:         {"16", "15:39:10", "\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f:\u7d99\u7d9a\u6642\u9593\u306f 8\u79d2\u3067\u3057\u305f"},
1:abb2613:     };
1:abb2613: 
1:abb2613:     /**
1:abb2613:      * Import data from the EUC-JP-encoded file jap_EUC_JP.dat, and verify
1:abb2613:      * that the data is as expected. Then export the data to files encoded
1:abb2613:      * in EUC-JP and SJIS, and verify that these files can be imported from.
1:abb2613:      */
1:abb2613:     public void testImportExport() throws SQLException {
1:abb2613:         CallableStatement imp = prepareCall(
1:abb2613:             "call SYSCS_UTIL.SYSCS_IMPORT_TABLE(null, ?, ?, null, null, ?, 0)");
1:abb2613: 
1:abb2613:         CallableStatement exp = prepareCall(
1:abb2613:             "call SYSCS_UTIL.SYSCS_EXPORT_TABLE(null, ?, ?, null, null, ?)");
1:abb2613: 
1:abb2613:         Statement s = createStatement();
1:abb2613: 
1:abb2613:         // table for data in EUC_JP encoding
1:abb2613:         s.execute("create table T1_EUC_JP"
1:abb2613:                 + "(jnum int, jtime time, jstring char(200))");
1:abb2613: 
1:abb2613:         // import data in EUC_JP encoding
1:abb2613:         imp.setString(1, "T1_EUC_JP");
1:abb2613:         imp.setString(2, "extin/jap_EUC_JP.dat");
1:abb2613:         imp.setString(3, "EUC_JP");
1:abb2613:         assertUpdateCount(imp, 0);
1:abb2613: 
1:abb2613:         // verify imported data
1:abb2613:         JDBC.assertFullResultSet(
1:abb2613:             s.executeQuery("SELECT * FROM T1_EUC_JP ORDER BY jnum"),
1:abb2613:             TABLE);
1:abb2613: 
1:abb2613:         // export to file with EUC_JP encoding
1:abb2613:         exp.setString(1, "T1_EUC_JP");
1:abb2613:         exp.setString(2, "extout/jap_EUC_JP.dump");
1:abb2613:         exp.setString(3, "EUC_JP");
1:abb2613:         assertUpdateCount(exp, 0);
1:abb2613: 
1:abb2613:         // export to file with SJIS encoding
1:abb2613:         exp.setString(1, "T1_EUC_JP");
1:abb2613:         exp.setString(2, "extout/jap_SJIS.dump");
1:abb2613:         exp.setString(3, "SJIS");
1:abb2613:         assertUpdateCount(exp, 0);
1:abb2613: 
1:abb2613:         // import as EUC_JP and compare to original
1:abb2613:         s.execute("create table T1_EUC_JP_IMPORT_AS_EUC_JP"
1:abb2613:                 + "(jnum int, jtime time, jstring char(200))");
1:abb2613:         imp.setString(1, "T1_EUC_JP_IMPORT_AS_EUC_JP");
1:abb2613:         imp.setString(2, "extout/jap_EUC_JP.dump");
1:abb2613:         imp.setString(3, "EUC_JP");
1:abb2613:         assertUpdateCount(imp, 0);
1:abb2613: 
1:abb2613:         // verify imported data
1:abb2613:         JDBC.assertFullResultSet(
1:abb2613:             s.executeQuery(
1:abb2613:                 "SELECT * FROM T1_EUC_JP_IMPORT_AS_EUC_JP ORDER BY jnum"),
1:abb2613:             TABLE);
1:abb2613: 
1:abb2613:         // import as SJIS and compare to original
1:abb2613:         s.execute("create table T1_EUC_JP_IMPORT_AS_SJIS"
1:abb2613:                 + "(jnum int, jtime time, jstring char(200))");
1:abb2613:         imp.setString(1, "T1_EUC_JP_IMPORT_AS_SJIS");
1:abb2613:         imp.setString(2, "extout/jap_SJIS.dump");
1:abb2613:         imp.setString(3, "SJIS");
1:abb2613:         assertUpdateCount(imp, 0);
1:abb2613: 
1:abb2613:         // verify imported data
1:abb2613:         JDBC.assertFullResultSet(
1:abb2613:             s.executeQuery(
1:abb2613:                 "SELECT * FROM T1_EUC_JP_IMPORT_AS_SJIS ORDER BY jnum"),
1:abb2613:             TABLE);
1:abb2613:     }
1:abb2613: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(
1:             "JapanCodeConversionTest - skipped because of " +
1:             "missing support for EUC_JP and SJIS");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:abb2613
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.JapanCodeConversionTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.i18n;
1: 
1: import java.nio.charset.Charset;
1: import java.sql.CallableStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that files encoded in EUC-JP and SJIS can be imported from and
1:  * exported to.
1:  */
1: public class JapanCodeConversionTest extends BaseJDBCTestCase {
1:     public JapanCodeConversionTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // This test requires support for specific encodings which are
1:         // not guaranteed to be supported by all JVMs. Run the test only
1:         // if the encodings are supported.
1:         if (Charset.isSupported("EUC_JP") && Charset.isSupported("SJIS")) {
1:             return new SupportFilesSetup(
1:                 TestConfiguration.embeddedSuite(JapanCodeConversionTest.class),
1:                 new String[] { "functionTests/tests/i18n/data/jap_EUC_JP.dat" },
1:                 (String[]) null);
1:         }
1: 
0:         return new TestSuite("JapanCodeConversionTest - skipped because of " +
0:                              "missing support for EUC_JP and SJIS");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         dropTable("T1_EUC_JP");
1:         dropTable("T1_EUC_JP_IMPORT_AS_EUC_JP");
1:         dropTable("T1_EUC_JP_IMPORT_AS_SJIS");
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * The expected test data. Should match the rows in the jap_EUC_JP.dat
1:      * file, from which we import data into the test tables.
1:      */
1:     private static final String[][] TABLE = {
1:         {"1", "15:32:06", "\u30a4\u30d9\u30f3\u30c8\u30a2\u30e9\u30fc\u30e0\u304c\u6709\u52b9\u3067\u3059\u3002"},
1:         {"2", "15:32:10", "DR:DRAUTO\u306f0 (Off)\u3067\u3059\u3002"},
1:         {"3", "15:32:28", "INFORMIX-OnLine\u304c\u521d\u671f\u5316\u3055\u308c\u3001\u30c7\u30a3\u30b9\u30af\u306e\u521d\u671f\u5316\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:         {"4", "15:32:29", "\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f:\u7d99\u7d9a\u6642\u9593\u306f 0\u79d2\u3067\u3057\u305f"},
1:         {"5", "15:32:29", "\u3059\u3079\u3066\u306eDB\u9818\u57df\u306e\u30c7\u30fc\u30bf\u30b9\u30ad\u30c3\u30d7\u306f\u73fe\u5728\u30aa\u30d5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002"},
1:         {"6", "15:32:30", "On-Line\u30e2\u30fc\u30c9"},
1:         {"7", "15:32:31", "sysmaster\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f5c\u6210\u4e2d\u3067\u3059..."},
1:         {"8", "15:33:22", "\u8ad6\u7406\u30ed\u30b0 1\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:         {"9", "15:33:23", "\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9 1\u3092\u623b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u307e\u3057\u305f:/bin/sh /bin/sh -c /work1/MOSES_7.22.UC1A5_27/sqldist/etc/log_full.sh 2 23 \u8ad6\u7406\u30ed\u30b0 1\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u8ad6\u7406"},
1:         {"10", "15:33:40", "\u8ad6\u7406\u30ed\u30b0 2\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:         {"11", "15:33:41", "\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9 1\u3092\u623b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u307e\u3057\u305f:/bin/sh /bin/sh -c /work1/MOSES_7.22.UC1A5_27/sqldist/etc/log_full.sh 2 23 \u8ad6\u7406\u30ed\u30b0 2\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u8ad6\u7406"},
1:         {"12", "15:33:43", "\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f:\u7d99\u7d9a\u6642\u9593\u306f 2\u79d2\u3067\u3057\u305f"},
1:         {"13", "15:34:29", "\u8ad6\u7406\u30ed\u30b0 3\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:         {"14", "15:34:30", "\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9 1\u3092\u623b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u307e\u3057\u305f:/bin/sh /bin/sh -c /work1/MOSES_7.22.UC1A5_27/sqldist/etc/log_full.sh 2 23 \u8ad6\u7406\u30ed\u30b0 3\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u8ad6\u7406"},
1:         {"15", "15:35:35", "sysmaster\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4f5c\u6210\u306f\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002"},
1:         {"16", "15:39:10", "\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f:\u7d99\u7d9a\u6642\u9593\u306f 8\u79d2\u3067\u3057\u305f"},
1:     };
1: 
1:     /**
1:      * Import data from the EUC-JP-encoded file jap_EUC_JP.dat, and verify
1:      * that the data is as expected. Then export the data to files encoded
1:      * in EUC-JP and SJIS, and verify that these files can be imported from.
1:      */
1:     public void testImportExport() throws SQLException {
1:         CallableStatement imp = prepareCall(
1:             "call SYSCS_UTIL.SYSCS_IMPORT_TABLE(null, ?, ?, null, null, ?, 0)");
1: 
1:         CallableStatement exp = prepareCall(
1:             "call SYSCS_UTIL.SYSCS_EXPORT_TABLE(null, ?, ?, null, null, ?)");
1: 
1:         Statement s = createStatement();
1: 
1:         // table for data in EUC_JP encoding
1:         s.execute("create table T1_EUC_JP"
1:                 + "(jnum int, jtime time, jstring char(200))");
1: 
1:         // import data in EUC_JP encoding
1:         imp.setString(1, "T1_EUC_JP");
1:         imp.setString(2, "extin/jap_EUC_JP.dat");
1:         imp.setString(3, "EUC_JP");
1:         assertUpdateCount(imp, 0);
1: 
1:         // verify imported data
1:         JDBC.assertFullResultSet(
1:             s.executeQuery("SELECT * FROM T1_EUC_JP ORDER BY jnum"),
1:             TABLE);
1: 
1:         // export to file with EUC_JP encoding
1:         exp.setString(1, "T1_EUC_JP");
1:         exp.setString(2, "extout/jap_EUC_JP.dump");
1:         exp.setString(3, "EUC_JP");
1:         assertUpdateCount(exp, 0);
1: 
1:         // export to file with SJIS encoding
1:         exp.setString(1, "T1_EUC_JP");
1:         exp.setString(2, "extout/jap_SJIS.dump");
1:         exp.setString(3, "SJIS");
1:         assertUpdateCount(exp, 0);
1: 
1:         // import as EUC_JP and compare to original
1:         s.execute("create table T1_EUC_JP_IMPORT_AS_EUC_JP"
1:                 + "(jnum int, jtime time, jstring char(200))");
1:         imp.setString(1, "T1_EUC_JP_IMPORT_AS_EUC_JP");
1:         imp.setString(2, "extout/jap_EUC_JP.dump");
1:         imp.setString(3, "EUC_JP");
1:         assertUpdateCount(imp, 0);
1: 
1:         // verify imported data
1:         JDBC.assertFullResultSet(
1:             s.executeQuery(
1:                 "SELECT * FROM T1_EUC_JP_IMPORT_AS_EUC_JP ORDER BY jnum"),
1:             TABLE);
1: 
1:         // import as SJIS and compare to original
1:         s.execute("create table T1_EUC_JP_IMPORT_AS_SJIS"
1:                 + "(jnum int, jtime time, jstring char(200))");
1:         imp.setString(1, "T1_EUC_JP_IMPORT_AS_SJIS");
1:         imp.setString(2, "extout/jap_SJIS.dump");
1:         imp.setString(3, "SJIS");
1:         assertUpdateCount(imp, 0);
1: 
1:         // verify imported data
1:         JDBC.assertFullResultSet(
1:             s.executeQuery(
1:                 "SELECT * FROM T1_EUC_JP_IMPORT_AS_SJIS ORDER BY jnum"),
1:             TABLE);
1:     }
1: }
============================================================================