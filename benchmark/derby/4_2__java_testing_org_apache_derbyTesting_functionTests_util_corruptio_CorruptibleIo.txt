1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby -  Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo
1:aaea357: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.util.corruptio;
1:aaea357: import java.io.File;
1:aaea357: 
1:aaea357: /*
1:aaea357:  * This is a helper class to instrument the CorruptDiskStorageFactory 
1:aaea357:  * to modify the i/o opertions before the request are sent to 
1:aaea357:  * a real storage factory. 
1:aaea357:  * 
1:aaea357:  * Tests can specify what type of corruption is required like log/data files
1:aaea357:  * and the at what and offset and the length of the corruption to be 
1:aaea357:  * done in the write requests. 
1:aaea357:  * 
1:aaea357:  * Only one instance of this class will exist in the system, Tests should hold
1:aaea357:  * onto the instance of this class until they are done sending the i/o 
1:aaea357:  * requests by executing statement that will actuall will trigger i/o , 
1:aaea357:  * for example a commit will flush the log buffers. Otherwise class garbage 
1:aaea357:  * collector can reinitialize the values. 
1:aaea357:  * 
1:aaea357:  * @version 1.0
1:aaea357:  * @see WritableStorageFactory
1:aaea357:  * @see StorageFactory
1:aaea357:  */
1:aaea357: 
1:aaea357: public class CorruptibleIo {
1:aaea357: 
1:aaea357: 	private static CorruptibleIo instance = new CorruptibleIo();
1:aaea357: 	private boolean corruptLog = false; //corrupt the log i/o to log*.dat files
1:aaea357: 	private boolean corruptData = false; //corrupt the files under seg0(data) 
1:aaea357: 	private int corruptLength; // no of bytes to corrupt
1:aaea357: 	private int corruptOffset; // offset inside the write request 
1:aaea357: 
1:aaea357: 
1:aaea357: 	private CorruptibleIo() {
1:aaea357:     }
1:aaea357: 
1:aaea357: 	public static CorruptibleIo getInstance() {
1:aaea357: 		return instance;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	
1:aaea357: 	public void setLogCorruption(boolean corrupt) {
1:aaea357: 		corruptLog = corrupt;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	public void setDataCorruption(boolean corrupt) {
1:aaea357: 		corruptData = corrupt;
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 	public void setOffset(int off) {
1:aaea357: 		corruptOffset = off ;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	public void setLength(int len) {
1:aaea357: 		corruptLength = len;
1:aaea357: 	}
1:aaea357: 		
1:aaea357: 	public int getOffset() {
1:aaea357: 		return corruptOffset;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	public int getLength(){
1:aaea357: 		return corruptLength;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	public boolean isCorruptibleFile(File file)
1:aaea357: 	{
1:aaea357: 		String name = file.getName();
1:aaea357: 		String parentName = file.getParent();
1:aaea357: 		if (parentName.endsWith("log") && name.endsWith("dat")) {
1:aaea357: 			return corruptLog;
1:aaea357: 		}
1:aaea357: 		else if (parentName.endsWith("seg0")) {
1:aaea357: 			return corruptData;
1:aaea357: 		}
1:aaea357: 
1:aaea357: 		return false;
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357: 	 * corrupt the byte array at the specified bytes, currenly this
1:aaea357: 	 * metods just complemetns the bits at the specified offsets.
1:aaea357:      */
1:aaea357:     public byte[] corrupt(byte b[], int off, int len)
1:aaea357: 	{
1:aaea357: 		if (corruptOffset >= off && (corruptOffset + corruptLength) < (off + len))
1:aaea357: 		{
1:aaea357: 			for(int i = corruptOffset ;  i < corruptOffset + corruptLength ; i++)
1:aaea357: 			{
1:aaea357: 				//System.out.println(b[i]);
1:aaea357: 				b[i] = (byte)~b[i];
1:aaea357: 				//System.out.println(b[i]);
1:aaea357: 			}
1:aaea357: 			// System.out.println("Corrupted the write request : Off = " + off + " Length = " + len);
1:aaea357: 		}else{
1:aaea357: 			System.out.println("Not valid corrupt request :" + 
1:aaea357: 							   "Write Request" + "Off=" + off + "size = " + len + 
1:aaea357: 							   "Corrupt Request" + "Off=" + corruptOffset + 
1:aaea357: 							   "size = " + corruptLength);
1:aaea357: 		}
1:aaea357: 		return b;
1:aaea357: 	}
1:aaea357: 
1:aaea357: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby -  Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.corruptio;
1: import java.io.File;
1: 
1: /*
1:  * This is a helper class to instrument the CorruptDiskStorageFactory 
1:  * to modify the i/o opertions before the request are sent to 
1:  * a real storage factory. 
1:  * 
1:  * Tests can specify what type of corruption is required like log/data files
1:  * and the at what and offset and the length of the corruption to be 
1:  * done in the write requests. 
1:  * 
1:  * Only one instance of this class will exist in the system, Tests should hold
1:  * onto the instance of this class until they are done sending the i/o 
1:  * requests by executing statement that will actuall will trigger i/o , 
1:  * for example a commit will flush the log buffers. Otherwise class garbage 
1:  * collector can reinitialize the values. 
1:  * 
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  * @see WritableStorageFactory
1:  * @see StorageFactory
1:  */
1: 
1: public class CorruptibleIo {
1: 
1: 	private static CorruptibleIo instance = new CorruptibleIo();
1: 	private boolean corruptLog = false; //corrupt the log i/o to log*.dat files
1: 	private boolean corruptData = false; //corrupt the files under seg0(data) 
1: 	private int corruptLength; // no of bytes to corrupt
1: 	private int corruptOffset; // offset inside the write request 
1: 
1: 
1: 	private CorruptibleIo() {
1:     }
1: 
1: 	public static CorruptibleIo getInstance() {
1: 		return instance;
1: 	}
1: 
1: 	
1: 	public void setLogCorruption(boolean corrupt) {
1: 		corruptLog = corrupt;
1: 	}
1: 
1: 	public void setDataCorruption(boolean corrupt) {
1: 		corruptData = corrupt;
1: 	}
1: 	
1: 	public void setOffset(int off) {
1: 		corruptOffset = off ;
1: 	}
1: 
1: 	public void setLength(int len) {
1: 		corruptLength = len;
1: 	}
1: 		
1: 	public int getOffset() {
1: 		return corruptOffset;
1: 	}
1: 
1: 	public int getLength(){
1: 		return corruptLength;
1: 	}
1: 
1: 	public boolean isCorruptibleFile(File file)
1: 	{
1: 		String name = file.getName();
1: 		String parentName = file.getParent();
1: 		if (parentName.endsWith("log") && name.endsWith("dat")) {
1: 			return corruptLog;
1: 		}
1: 		else if (parentName.endsWith("seg0")) {
1: 			return corruptData;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1:     /**
1: 	 * corrupt the byte array at the specified bytes, currenly this
1: 	 * metods just complemetns the bits at the specified offsets.
1:      */
1:     public byte[] corrupt(byte b[], int off, int len)
1: 	{
1: 		if (corruptOffset >= off && (corruptOffset + corruptLength) < (off + len))
1: 		{
1: 			for(int i = corruptOffset ;  i < corruptOffset + corruptLength ; i++)
1: 			{
1: 				//System.out.println(b[i]);
1: 				b[i] = (byte)~b[i];
1: 				//System.out.println(b[i]);
1: 			}
1: 			// System.out.println("Corrupted the write request : Off = " + off + " Length = " + len);
1: 		}else{
1: 			System.out.println("Not valid corrupt request :" + 
1: 							   "Write Request" + "Off=" + off + "size = " + len + 
1: 							   "Corrupt Request" + "Off=" + corruptOffset + 
1: 							   "size = " + corruptLength);
1: 		}
1: 		return b;
1: 	}
1: 
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3755119
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby -  Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.util.corruptio;
0: import java.io.File;
0: 
0: /*
0:  * This is a helper class to instrument the CorruptDiskStorageFactory 
0:  * to modify the i/o opertions before the request are sent to 
0:  * a real storage factory. 
0:  * 
0:  * Tests can specify what type of corruption is required like log/data files
0:  * and the at what and offset and the length of the corruption to be 
0:  * done in the write requests. 
0:  * 
0:  * Only one instance of this class will exist in the system, Tests should hold
0:  * onto the instance of this class until they are done sending the i/o 
0:  * requests by executing statement that will actuall will trigger i/o , 
0:  * for example a commit will flush the log buffers. Otherwise class garbage 
0:  * collector can reinitialize the values. 
0:  * 
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  * @see WritableStorageFactory
0:  * @see StorageFactory
0:  */
0: 
0: public class CorruptibleIo {
0: 
0: 	private static CorruptibleIo instance = new CorruptibleIo();
0: 	private boolean corruptLog = false; //corrupt the log i/o to log*.dat files
0: 	private boolean corruptData = false; //corrupt the files under seg0(data) 
0: 	private int corruptLength; // no of bytes to corrupt
0: 	private int corruptOffset; // offset inside the write request 
0: 
0: 
0: 	private CorruptibleIo() {
0:     }
0: 
0: 	public static CorruptibleIo getInstance() {
0: 		return instance;
0: 	}
0: 
0: 	
0: 	public void setLogCorruption(boolean corrupt) {
0: 		corruptLog = corrupt;
0: 	}
0: 
0: 	public void setDataCorruption(boolean corrupt) {
0: 		corruptData = corrupt;
0: 	}
0: 	
0: 	public void setOffset(int off) {
0: 		corruptOffset = off ;
0: 	}
0: 
0: 	public void setLength(int len) {
0: 		corruptLength = len;
0: 	}
0: 		
0: 	public int getOffset() {
0: 		return corruptOffset;
0: 	}
0: 
0: 	public int getLength(){
0: 		return corruptLength;
0: 	}
0: 
0: 	public boolean isCorruptibleFile(File file)
0: 	{
0: 		String name = file.getName();
0: 		String parentName = file.getParent();
0: 		if (parentName.endsWith("log") && name.endsWith("dat")) {
0: 			return corruptLog;
0: 		}
0: 		else if (parentName.endsWith("seg0")) {
0: 			return corruptData;
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0:     /**
0: 	 * corrupt the byte array at the specified bytes, currenly this
0: 	 * metods just complemetns the bits at the specified offsets.
0:      */
0:     public byte[] corrupt(byte b[], int off, int len)
0: 	{
0: 		if (corruptOffset >= off && (corruptOffset + corruptLength) < (off + len))
0: 		{
0: 			for(int i = corruptOffset ;  i < corruptOffset + corruptLength ; i++)
0: 			{
0: 				//System.out.println(b[i]);
0: 				b[i] = (byte)~b[i];
0: 				//System.out.println(b[i]);
0: 			}
0: 			// System.out.println("Corrupted the write request : Off = " + off + " Length = " + len);
0: 		}else{
0: 			System.out.println("Not valid corrupt request :" + 
0: 							   "Write Request" + "Off=" + off + "size = " + len + 
0: 							   "Corrupt Request" + "Off=" + corruptOffset + 
0: 							   "size = " + corruptLength);
0: 		}
0: 		return b;
0: 	}
0: 
0: }
============================================================================