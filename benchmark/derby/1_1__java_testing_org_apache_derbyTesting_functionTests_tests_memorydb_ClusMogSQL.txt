1:0d2840c: /*
1:0d2840c:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.ClusMogSQL
1:0d2840c: 
1:0d2840c:    Licensed to the Apache Software Foundation (ASF) under one
1:0d2840c:    or more contributor license agreements.  See the NOTICE file
1:0d2840c:    distributed with this work for additional information
1:0d2840c:    regarding copyright ownership.  The ASF licenses this file
1:0d2840c:    to you under the Apache License, Version 2.0 (the
1:0d2840c:    "License"); you may not use this file except in compliance
1:0d2840c:    with the License.  You may obtain a copy of the License at
1:0d2840c: 
1:0d2840c:      http://www.apache.org/licenses/LICENSE-2.0
1:0d2840c: 
1:0d2840c:    Unless required by applicable law or agreed to in writing,
1:0d2840c:    software distributed under the License is distributed on an
1:0d2840c:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0d2840c:    KIND, either express or implied.  See the License for the
1:0d2840c:    specific language governing permissions and limitations
1:0d2840c:    under the License.
1:0d2840c:  */
1:0d2840c: 
1:0d2840c: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:0d2840c: 
1:0d2840c: import java.util.Arrays;
1:0d2840c: import java.sql.Connection;
1:0d2840c: import java.sql.SQLException;
1:0d2840c: import java.sql.Statement;
1:0d2840c: import java.sql.PreparedStatement;
1:0d2840c: import java.sql.ResultSet;
1:0d2840c: import org.apache.derbyTesting.junit.BaseTestCase;
1:0d2840c: 
1:0d2840c: /**
1:0d2840c:  * Simple utility to compute/recover the parameters of a mixture-of-Gaussian
1:0d2840c:  * distribution from independent samples, using SQL.
1:0d2840c:  */
1:0d2840c: public class ClusMogSQL extends ClusMog
1:0d2840c: {
1:0d2840c:   /** constructor */
1:0d2840c:   public ClusMogSQL(Connection conn) { this.conn = conn; }
1:0d2840c: 
1:0d2840c:   /** Set unique ID for this object. */
1:0d2840c:   public void setUnique(int uniq)
1:0d2840c:   {
1:0d2840c:     this.uniq = (uniq & 0x7fffffff);
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Compute/recover the parameters of a mixture-of-Gaussian distribution
1:0d2840c:    * from given independent samples, using SQL.
1:0d2840c:    * @param n number of clusters (Gaussian components) to output
1:0d2840c:    * @param center initial cluster centers for iterative refinement
1:0d2840c:    * @param ns number of input samples
1:0d2840c:    * @param sample input samples; will be sorted in ascending order during use
1:0d2840c:    */
1:0d2840c:   public void clusterSQL(int n, double center[], int ns, double sample[])
1:0d2840c:   throws SQLException
1:0d2840c:   {
1:0d2840c:     // Record input parameters.
1:0d2840c:     setCenters(n, center);
1:0d2840c:     setSamples(ns, sample);
1:0d2840c:     // Initialize EM iterations.
1:0d2840c:     init();
1:0d2840c:     // Perform EM iterations until convergence.
1:0d2840c:     final double thresh = 1.0e-6;
1:0d2840c:     double oldmsr = Double.MAX_VALUE;
1:0d2840c:     for (int it=1;; ++it) {
1:0d2840c:       // one EM iteration
1:0d2840c:       final double msr = expect();
1:0d2840c:       maximize();
1:0d2840c:       // Check for convergence.
1:0d2840c:       final double dif = Math.abs(msr - oldmsr);
1:0d2840c:       final double err = dif / (1.0 + oldmsr);
1:0d2840c:       oldmsr = msr;
1:0d2840c:       if (err < thresh) { break; }
1:0d2840c:     }
1:0d2840c:     // Download the cluster configuration.
1:0d2840c:     download();
1:0d2840c:     // Clean up working tables after use.
1:0d2840c:     cleanup();
1:0d2840c: 
1:0d2840c:     // diagnostic messages
1:0d2840c:     printMog("SQL-COMPUTED", n, weight, mean, var);
1:0d2840c:     BaseTestCase.println("msr = (" + oldmsr + ")");
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Initialize the EM (expectation-maximization) iterations. */
1:0d2840c:   void init() throws SQLException
1:0d2840c:   {
1:0d2840c:     // Sort the input samples in ascending order.
1:0d2840c:     Arrays.sort(sample, 0, ns);
1:0d2840c:     // Sort the initial cluster centers in ascending order.
1:0d2840c:     Arrays.sort(mean, 0, n);
1:0d2840c: 
1:0d2840c:     // working table names
1:0d2840c:     final String clusterN = "cluster" + uniq;
1:0d2840c:     final String sampleN = "sample" + uniq;
1:0d2840c: 
1:0d2840c:     // Initialize database tables.
1:0d2840c:     PreparedStatement pstmt = null;
1:0d2840c:     Statement stmt = conn.createStatement();
1:0d2840c:     try {
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + clusterN + "(weight double, mean double, var double, bucket int PRIMARY KEY)");
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + sampleN + "(value double, id int PRIMARY KEY, bucket int)");
1:0d2840c: 
1:0d2840c:       pstmt = conn.prepareStatement("INSERT INTO " + sampleN + "(value, id) VALUES (?, ?)");
1:0d2840c:       for (int i=0; i<ns; ++i) {
1:0d2840c:         final double x = sample[i];
1:0d2840c:         pstmt.setDouble(1, x);
1:0d2840c:         pstmt.setInt(2, i);
1:0d2840c:         pstmt.executeUpdate();
1:0d2840c:       }
1:0d2840c:       pstmt.close();
1:0d2840c:       pstmt = conn.prepareStatement("INSERT INTO " + clusterN + "(mean, bucket) VALUES (?, ?)");
1:0d2840c:       for (int i=0; i<n; ++i) {
1:0d2840c:         final double x = mean[i];
1:0d2840c:         pstmt.setDouble(1, x);
1:0d2840c:         pstmt.setInt(2, i);
1:0d2840c:         pstmt.executeUpdate();
1:0d2840c:       }
1:0d2840c:     }
1:0d2840c:     finally {
1:0d2840c:       if (stmt != null) { stmt.close();  stmt = null; }
1:0d2840c:       if (pstmt != null) { pstmt.close();  pstmt = null; }
1:0d2840c:     }
1:0d2840c: 
1:0d2840c:     // Initialize sample-to-cluster assignment.
1:0d2840c:     maximize();
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * (Re-)compute cluster centers while holding sample-to-cluster assignment fixed.
1:0d2840c:    * @return mean square error of resulting clustering configuration
1:0d2840c:    * @throws SQLException
1:0d2840c:    */
1:0d2840c:   double expect() throws SQLException
1:0d2840c:   {
1:0d2840c:     // working table names
1:0d2840c:     final String clusterN = "cluster" + uniq;
1:0d2840c:     final String sampleN = "sample" + uniq;
1:0d2840c:     final String mm = "mm" + uniq;
1:0d2840c:     final String vv = "vv" + uniq;
1:0d2840c:     final String ee = "ee" + uniq;
1:0d2840c: 
1:0d2840c:     double msr = Double.MAX_VALUE;
1:0d2840c:     Statement stmt = null;
1:0d2840c:     ResultSet rset = null;
1:0d2840c:     try {
1:0d2840c:       stmt = conn.createStatement();
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + mm + "(bucket int PRIMARY KEY, mean double)");
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + vv + "(bucket int PRIMARY KEY, var double)");
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + ee + "(bucket int PRIMARY KEY, err double, size int)");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + mm + "(bucket, mean) \n" +
1:0d2840c:                          "SELECT bucket, avg(value) \n" +
1:0d2840c:                          "  FROM " + sampleN + " \n" +
1:0d2840c:                          " GROUP BY bucket \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + ee + "(bucket, err, size) \n" +
1:0d2840c:                          "SELECT S.bucket, sum((S.value - M.mean) * (S.value - M.mean)), count(*) \n" +
1:0d2840c:                          "  FROM " + sampleN + " S JOIN " + mm + " M ON S.bucket = M.bucket \n" +
1:0d2840c:                          " GROUP BY S.bucket \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + vv + "(bucket, var) \n" +
1:0d2840c:                          "SELECT bucket, \n" +
1:0d2840c:                          "       CASE WHEN (size > 1) THEN (err / (size - 1)) ELSE 0.0 END \n" +
1:0d2840c:                          "  FROM " + ee + " \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("DELETE FROM " + clusterN);
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + clusterN + "(mean, var, bucket) \n" +
1:0d2840c:                          "SELECT M.mean, V.var, V.bucket \n" +
1:0d2840c:                          "  FROM " + mm + " M JOIN " + vv + " V ON M.bucket = V.bucket \n");
1:0d2840c: 
1:0d2840c:       rset = stmt.executeQuery("SELECT (sum(err) / sum(size)) AS measure FROM " + ee);
1:0d2840c:       while (rset.next()) { msr = rset.getDouble(1); }
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + mm);
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + vv);
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + ee);
1:0d2840c:     }
1:0d2840c:     finally {
1:0d2840c:       if (rset != null) { rset.close();  rset = null; }
1:0d2840c:       if (stmt != null) { stmt.close();  stmt = null; }
1:0d2840c:     }
1:0d2840c:     return msr;
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * (Re-)compute sample-to-cluster assignment while holding cluster centers fixed.
1:0d2840c:    * @throws SQLException
1:0d2840c:    */
1:0d2840c:   void maximize() throws SQLException
1:0d2840c:   {
1:0d2840c:     // working table names
1:0d2840c:     final String clusterN = "cluster" + uniq;
1:0d2840c:     final String sampleN = "sample" + uniq;
1:0d2840c:     final String gg = "gg" + uniq;
1:0d2840c:     final String jj = "jj" + uniq;
1:0d2840c: 
1:0d2840c:     Statement stmt = null;
1:0d2840c:     try {
1:0d2840c:       stmt = conn.createStatement();
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + gg + "(id int PRIMARY KEY, diff double)");
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + jj + "(value double, id int, diff double, bucket int)");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + gg + "(id, diff) \n" +
1:0d2840c:                          "SELECT S.id, min(abs(S.value - C.mean)) \n" +
1:0d2840c:                          "  FROM " + sampleN + " S, " + clusterN + " C \n" +
1:0d2840c:                          " GROUP BY S.id \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + jj + "(value, id, diff, bucket) \n" +
1:0d2840c:                          "SELECT S.value, S.id, abs(S.value - C.mean), C.bucket \n" +
1:0d2840c:                          "  FROM " + sampleN + " S, " + clusterN + " C \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("DELETE FROM " + sampleN);
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + sampleN + "(value, id, bucket) \n" +
1:0d2840c:                          "SELECT J.value, J.id, min(J.bucket) \n" +
1:0d2840c:                          "  FROM " + jj + " J \n" +
1:0d2840c:                          "  JOIN " + gg + " G \n" +
1:0d2840c:                          "    ON J.id   = G.id \n" +
1:0d2840c:                          "   AND J.diff = G.diff \n" +
1:0d2840c:                          " GROUP BY J.id, J.value \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + gg);
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + jj);
1:0d2840c:     }
1:0d2840c:     finally {
1:0d2840c:       if (stmt != null) { stmt.close(); }
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Download the computed cluster configuration.
1:0d2840c:    * @throws SQLException
1:0d2840c:    */
1:0d2840c:   void download() throws SQLException
1:0d2840c:   {
1:0d2840c:     // working table names
1:0d2840c:     final String clusterN = "cluster" + uniq;
1:0d2840c:     final String sampleN = "sample" + uniq;
1:0d2840c:     final String ww = "ww" + uniq;
1:0d2840c:     final String cc = "cc" + uniq;
1:0d2840c: 
1:0d2840c:     Statement stmt = null;
1:0d2840c:     ResultSet rset = null;
1:0d2840c:     try {
1:0d2840c:       stmt = conn.createStatement();
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + ww + "(bucket int PRIMARY KEY, size int)");
1:0d2840c:       stmt.executeUpdate("CREATE TABLE " + cc + "(weight double, mean double, var double, bucket int PRIMARY KEY)");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + ww + "(bucket, size) \n" +
1:0d2840c:                          "SELECT bucket, count(*) \n" +
1:0d2840c:                          "  FROM " + sampleN + " \n" +
1:0d2840c:                          " GROUP BY bucket \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + cc + "(weight, mean, var, bucket) \n" +
1:0d2840c:                          "SELECT (CAST(W.size AS double) / (SELECT sum(size) FROM " + ww + ")), C.mean, C.var, C.bucket \n" +
1:0d2840c:                          "  FROM " + clusterN + " C JOIN " + ww + " W ON C.bucket = W.bucket \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("DELETE FROM " + clusterN);
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("INSERT INTO " + clusterN + "(weight, mean, var, bucket) \n" +
1:0d2840c:                          "SELECT weight, mean, var, bucket FROM " + cc + " \n");
1:0d2840c: 
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + ww);
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + cc);
1:0d2840c: 
1:0d2840c:       rset = stmt.executeQuery("SELECT weight, mean, var FROM " + clusterN + " ORDER BY mean");
1:0d2840c:       n = 0;
1:0d2840c:       while (rset.next()) {
1:0d2840c:         final double w = rset.getDouble(1);
1:0d2840c:         final double m = rset.getDouble(2);
1:0d2840c:         final double v = rset.getDouble(3);
1:0d2840c:         weight[n] = w;
1:0d2840c:         mean[n] = m;
1:0d2840c:         var[n] = v;
1:0d2840c:         ++n;
1:0d2840c:       }
1:0d2840c:     }
1:0d2840c:     finally {
1:0d2840c:       if (rset != null) { rset.close();  rset = null; }
1:0d2840c:       if (stmt != null) { stmt.close();  stmt = null; }
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Clean up working tables after use.
1:0d2840c:    * @throws SQLException
1:0d2840c:    */
1:0d2840c:   void cleanup() throws SQLException
1:0d2840c:   {
1:0d2840c:     // working table names
1:0d2840c:     final String clusterN = "cluster" + uniq;
1:0d2840c:     final String sampleN = "sample" + uniq;
1:0d2840c: 
1:0d2840c:     Statement stmt = null;
1:0d2840c:     try {
1:0d2840c:       stmt = conn.createStatement();
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + sampleN);
1:0d2840c:       stmt.executeUpdate("DROP TABLE " + clusterN);
1:0d2840c:     }
1:0d2840c:     finally {
1:0d2840c:       if (stmt != null) { stmt.close();  stmt = null; }
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** database connection */
1:0d2840c:   Connection conn;
1:0d2840c: 
1:0d2840c:   /** unique ID for generating working table names */
1:0d2840c:   int uniq = 0;
1:0d2840c: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0d2840c
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.ClusMogSQL
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import java.util.Arrays;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Simple utility to compute/recover the parameters of a mixture-of-Gaussian
1:  * distribution from independent samples, using SQL.
1:  */
1: public class ClusMogSQL extends ClusMog
1: {
1:   /** constructor */
1:   public ClusMogSQL(Connection conn) { this.conn = conn; }
1: 
1:   /** Set unique ID for this object. */
1:   public void setUnique(int uniq)
1:   {
1:     this.uniq = (uniq & 0x7fffffff);
1:   }
1: 
1:   /**
1:    * Compute/recover the parameters of a mixture-of-Gaussian distribution
1:    * from given independent samples, using SQL.
1:    * @param n number of clusters (Gaussian components) to output
1:    * @param center initial cluster centers for iterative refinement
1:    * @param ns number of input samples
1:    * @param sample input samples; will be sorted in ascending order during use
1:    */
1:   public void clusterSQL(int n, double center[], int ns, double sample[])
1:   throws SQLException
1:   {
1:     // Record input parameters.
1:     setCenters(n, center);
1:     setSamples(ns, sample);
1:     // Initialize EM iterations.
1:     init();
1:     // Perform EM iterations until convergence.
1:     final double thresh = 1.0e-6;
1:     double oldmsr = Double.MAX_VALUE;
1:     for (int it=1;; ++it) {
1:       // one EM iteration
1:       final double msr = expect();
1:       maximize();
1:       // Check for convergence.
1:       final double dif = Math.abs(msr - oldmsr);
1:       final double err = dif / (1.0 + oldmsr);
1:       oldmsr = msr;
1:       if (err < thresh) { break; }
1:     }
1:     // Download the cluster configuration.
1:     download();
1:     // Clean up working tables after use.
1:     cleanup();
1: 
1:     // diagnostic messages
1:     printMog("SQL-COMPUTED", n, weight, mean, var);
1:     BaseTestCase.println("msr = (" + oldmsr + ")");
1:   }
1: 
1:   /** Initialize the EM (expectation-maximization) iterations. */
1:   void init() throws SQLException
1:   {
1:     // Sort the input samples in ascending order.
1:     Arrays.sort(sample, 0, ns);
1:     // Sort the initial cluster centers in ascending order.
1:     Arrays.sort(mean, 0, n);
1: 
1:     // working table names
1:     final String clusterN = "cluster" + uniq;
1:     final String sampleN = "sample" + uniq;
1: 
1:     // Initialize database tables.
1:     PreparedStatement pstmt = null;
1:     Statement stmt = conn.createStatement();
1:     try {
1:       stmt.executeUpdate("CREATE TABLE " + clusterN + "(weight double, mean double, var double, bucket int PRIMARY KEY)");
1:       stmt.executeUpdate("CREATE TABLE " + sampleN + "(value double, id int PRIMARY KEY, bucket int)");
1: 
1:       pstmt = conn.prepareStatement("INSERT INTO " + sampleN + "(value, id) VALUES (?, ?)");
1:       for (int i=0; i<ns; ++i) {
1:         final double x = sample[i];
1:         pstmt.setDouble(1, x);
1:         pstmt.setInt(2, i);
1:         pstmt.executeUpdate();
1:       }
1:       pstmt.close();
1:       pstmt = conn.prepareStatement("INSERT INTO " + clusterN + "(mean, bucket) VALUES (?, ?)");
1:       for (int i=0; i<n; ++i) {
1:         final double x = mean[i];
1:         pstmt.setDouble(1, x);
1:         pstmt.setInt(2, i);
1:         pstmt.executeUpdate();
1:       }
1:     }
1:     finally {
1:       if (stmt != null) { stmt.close();  stmt = null; }
1:       if (pstmt != null) { pstmt.close();  pstmt = null; }
1:     }
1: 
1:     // Initialize sample-to-cluster assignment.
1:     maximize();
1:   }
1: 
1:   /**
1:    * (Re-)compute cluster centers while holding sample-to-cluster assignment fixed.
1:    * @return mean square error of resulting clustering configuration
1:    * @throws SQLException
1:    */
1:   double expect() throws SQLException
1:   {
1:     // working table names
1:     final String clusterN = "cluster" + uniq;
1:     final String sampleN = "sample" + uniq;
1:     final String mm = "mm" + uniq;
1:     final String vv = "vv" + uniq;
1:     final String ee = "ee" + uniq;
1: 
1:     double msr = Double.MAX_VALUE;
1:     Statement stmt = null;
1:     ResultSet rset = null;
1:     try {
1:       stmt = conn.createStatement();
1: 
1:       stmt.executeUpdate("CREATE TABLE " + mm + "(bucket int PRIMARY KEY, mean double)");
1:       stmt.executeUpdate("CREATE TABLE " + vv + "(bucket int PRIMARY KEY, var double)");
1:       stmt.executeUpdate("CREATE TABLE " + ee + "(bucket int PRIMARY KEY, err double, size int)");
1: 
1:       stmt.executeUpdate("INSERT INTO " + mm + "(bucket, mean) \n" +
1:                          "SELECT bucket, avg(value) \n" +
1:                          "  FROM " + sampleN + " \n" +
1:                          " GROUP BY bucket \n");
1: 
1:       stmt.executeUpdate("INSERT INTO " + ee + "(bucket, err, size) \n" +
1:                          "SELECT S.bucket, sum((S.value - M.mean) * (S.value - M.mean)), count(*) \n" +
1:                          "  FROM " + sampleN + " S JOIN " + mm + " M ON S.bucket = M.bucket \n" +
1:                          " GROUP BY S.bucket \n");
1: 
1:       stmt.executeUpdate("INSERT INTO " + vv + "(bucket, var) \n" +
1:                          "SELECT bucket, \n" +
1:                          "       CASE WHEN (size > 1) THEN (err / (size - 1)) ELSE 0.0 END \n" +
1:                          "  FROM " + ee + " \n");
1: 
1:       stmt.executeUpdate("DELETE FROM " + clusterN);
1: 
1:       stmt.executeUpdate("INSERT INTO " + clusterN + "(mean, var, bucket) \n" +
1:                          "SELECT M.mean, V.var, V.bucket \n" +
1:                          "  FROM " + mm + " M JOIN " + vv + " V ON M.bucket = V.bucket \n");
1: 
1:       rset = stmt.executeQuery("SELECT (sum(err) / sum(size)) AS measure FROM " + ee);
1:       while (rset.next()) { msr = rset.getDouble(1); }
1: 
1:       stmt.executeUpdate("DROP TABLE " + mm);
1:       stmt.executeUpdate("DROP TABLE " + vv);
1:       stmt.executeUpdate("DROP TABLE " + ee);
1:     }
1:     finally {
1:       if (rset != null) { rset.close();  rset = null; }
1:       if (stmt != null) { stmt.close();  stmt = null; }
1:     }
1:     return msr;
1:   }
1: 
1:   /**
1:    * (Re-)compute sample-to-cluster assignment while holding cluster centers fixed.
1:    * @throws SQLException
1:    */
1:   void maximize() throws SQLException
1:   {
1:     // working table names
1:     final String clusterN = "cluster" + uniq;
1:     final String sampleN = "sample" + uniq;
1:     final String gg = "gg" + uniq;
1:     final String jj = "jj" + uniq;
1: 
1:     Statement stmt = null;
1:     try {
1:       stmt = conn.createStatement();
1: 
1:       stmt.executeUpdate("CREATE TABLE " + gg + "(id int PRIMARY KEY, diff double)");
1:       stmt.executeUpdate("CREATE TABLE " + jj + "(value double, id int, diff double, bucket int)");
1: 
1:       stmt.executeUpdate("INSERT INTO " + gg + "(id, diff) \n" +
1:                          "SELECT S.id, min(abs(S.value - C.mean)) \n" +
1:                          "  FROM " + sampleN + " S, " + clusterN + " C \n" +
1:                          " GROUP BY S.id \n");
1: 
1:       stmt.executeUpdate("INSERT INTO " + jj + "(value, id, diff, bucket) \n" +
1:                          "SELECT S.value, S.id, abs(S.value - C.mean), C.bucket \n" +
1:                          "  FROM " + sampleN + " S, " + clusterN + " C \n");
1: 
1:       stmt.executeUpdate("DELETE FROM " + sampleN);
1: 
1:       stmt.executeUpdate("INSERT INTO " + sampleN + "(value, id, bucket) \n" +
1:                          "SELECT J.value, J.id, min(J.bucket) \n" +
1:                          "  FROM " + jj + " J \n" +
1:                          "  JOIN " + gg + " G \n" +
1:                          "    ON J.id   = G.id \n" +
1:                          "   AND J.diff = G.diff \n" +
1:                          " GROUP BY J.id, J.value \n");
1: 
1:       stmt.executeUpdate("DROP TABLE " + gg);
1:       stmt.executeUpdate("DROP TABLE " + jj);
1:     }
1:     finally {
1:       if (stmt != null) { stmt.close(); }
1:     }
1:   }
1: 
1:   /**
1:    * Download the computed cluster configuration.
1:    * @throws SQLException
1:    */
1:   void download() throws SQLException
1:   {
1:     // working table names
1:     final String clusterN = "cluster" + uniq;
1:     final String sampleN = "sample" + uniq;
1:     final String ww = "ww" + uniq;
1:     final String cc = "cc" + uniq;
1: 
1:     Statement stmt = null;
1:     ResultSet rset = null;
1:     try {
1:       stmt = conn.createStatement();
1: 
1:       stmt.executeUpdate("CREATE TABLE " + ww + "(bucket int PRIMARY KEY, size int)");
1:       stmt.executeUpdate("CREATE TABLE " + cc + "(weight double, mean double, var double, bucket int PRIMARY KEY)");
1: 
1:       stmt.executeUpdate("INSERT INTO " + ww + "(bucket, size) \n" +
1:                          "SELECT bucket, count(*) \n" +
1:                          "  FROM " + sampleN + " \n" +
1:                          " GROUP BY bucket \n");
1: 
1:       stmt.executeUpdate("INSERT INTO " + cc + "(weight, mean, var, bucket) \n" +
1:                          "SELECT (CAST(W.size AS double) / (SELECT sum(size) FROM " + ww + ")), C.mean, C.var, C.bucket \n" +
1:                          "  FROM " + clusterN + " C JOIN " + ww + " W ON C.bucket = W.bucket \n");
1: 
1:       stmt.executeUpdate("DELETE FROM " + clusterN);
1: 
1:       stmt.executeUpdate("INSERT INTO " + clusterN + "(weight, mean, var, bucket) \n" +
1:                          "SELECT weight, mean, var, bucket FROM " + cc + " \n");
1: 
1:       stmt.executeUpdate("DROP TABLE " + ww);
1:       stmt.executeUpdate("DROP TABLE " + cc);
1: 
1:       rset = stmt.executeQuery("SELECT weight, mean, var FROM " + clusterN + " ORDER BY mean");
1:       n = 0;
1:       while (rset.next()) {
1:         final double w = rset.getDouble(1);
1:         final double m = rset.getDouble(2);
1:         final double v = rset.getDouble(3);
1:         weight[n] = w;
1:         mean[n] = m;
1:         var[n] = v;
1:         ++n;
1:       }
1:     }
1:     finally {
1:       if (rset != null) { rset.close();  rset = null; }
1:       if (stmt != null) { stmt.close();  stmt = null; }
1:     }
1:   }
1: 
1:   /**
1:    * Clean up working tables after use.
1:    * @throws SQLException
1:    */
1:   void cleanup() throws SQLException
1:   {
1:     // working table names
1:     final String clusterN = "cluster" + uniq;
1:     final String sampleN = "sample" + uniq;
1: 
1:     Statement stmt = null;
1:     try {
1:       stmt = conn.createStatement();
1:       stmt.executeUpdate("DROP TABLE " + sampleN);
1:       stmt.executeUpdate("DROP TABLE " + clusterN);
1:     }
1:     finally {
1:       if (stmt != null) { stmt.close();  stmt = null; }
1:     }
1:   }
1: 
1:   /** database connection */
1:   Connection conn;
1: 
1:   /** unique ID for generating working table names */
1:   int uniq = 0;
1: }
============================================================================