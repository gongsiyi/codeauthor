1:508a010: /*
1:508a010: 
1:508a010:    Derby - Class org.apache.derby.impl.sql.execute.MergeResultSet
1:508a010: 
1:508a010:    Licensed to the Apache Software Foundation (ASF) under one or more
1:508a010:    contributor license agreements.  See the NOTICE file distributed with
1:508a010:    this work for additional information regarding copyright ownership.
1:508a010:    The ASF licenses this file to you under the Apache License, Version 2.0
1:508a010:    (the "License"); you may not use this file except in compliance with
1:508a010:    the License.  You may obtain a copy of the License at
1:508a010: 
1:508a010:       http://www.apache.org/licenses/LICENSE-2.0
1:508a010: 
1:508a010:    Unless required by applicable law or agreed to in writing, software
1:508a010:    distributed under the License is distributed on an "AS IS" BASIS,
1:508a010:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:508a010:    See the License for the specific language governing permissions and
1:508a010:    limitations under the License.
1:508a010: 
1:508a010:  */
1:508a010: 
1:508a010: package org.apache.derby.impl.sql.execute;
1:508a010: 
1:508a010: import org.apache.derby.iapi.error.StandardException;
1:508a010: import org.apache.derby.iapi.reference.SQLState;
1:508a010: import org.apache.derby.iapi.services.context.ContextManager;
1:a2b37c2: import org.apache.derby.iapi.services.io.StreamStorable;
1:508a010: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:508a010: import org.apache.derby.iapi.sql.Activation;
1:508a010: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:508a010: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:508a010: import org.apache.derby.iapi.sql.execute.ExecRow;
1:508a010: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:efa1efa: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:508a010: import org.apache.derby.iapi.types.DataValueDescriptor;
1:508a010: import org.apache.derby.iapi.types.RowLocation;
1:7f8154d: import org.apache.derby.iapi.types.SQLRef;
1:efa1efa: import org.apache.derby.shared.common.sanity.SanityManager;
1:508a010: 
1:508a010: /**
1:508a010:  * INSERT/UPDATE/DELETE a target table based on how it outer joins
1:508a010:  * with a driving table. For a description of how Derby processes
1:508a010:  * the MERGE statement, see the header comment on MergeNode.
1:508a010:  */
1:508a010: class MergeResultSet extends NoRowsResultSetImpl 
1:508a010: {
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // CONSTANTS
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // STATE
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     private NoPutResultSet          _drivingLeftJoin;
1:508a010:     private MergeConstantAction _constants;
1:508a010: 
1:508a010:     private ExecRow                 _row;
1:508a010:     private long                        _rowCount;
1:01632c2:     private TemporaryRowHolderImpl[]    _thenRows;
1:898f3f5: 
1:efa1efa: 	private BackingStoreHashtable		_subjectRowIDs;
1:efa1efa:     
1:efa1efa: 	private int						_numOpens;
1:508a010:     
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // CONSTRUCTOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     /**
1:508a010:      * Construct from a driving left join and an Activation.
1:508a010:      */
1:508a010:     MergeResultSet
1:508a010:         (
1:508a010:          NoPutResultSet drivingLeftJoin, 
1:508a010:          Activation activation
1:508a010:          )
1:508a010:         throws StandardException
1:508a010:     {
1:508a010:         super( activation );
1:508a010:         _drivingLeftJoin = drivingLeftJoin;
1:508a010:         _constants = (MergeConstantAction) activation.getConstantAction();
1:01632c2:         _thenRows = new TemporaryRowHolderImpl[ _constants.matchingClauseCount() ];
1:508a010:     }
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // BEHAVIOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     @Override
1:508a010:     public final long   modifiedRowCount() { return _rowCount + RowUtil.getRowCountBase(); }
1:508a010: 
1:508a010:     public void open() throws StandardException
1:508a010:     {
1:508a010:         setup();
1:508a010: 
1:efa1efa: 		if (_numOpens++ == 0)
1:898f3f5: 		{
1:898f3f5: 			_drivingLeftJoin.openCore();
1:898f3f5: 		}
1:898f3f5: 		else
1:898f3f5: 		{
1:898f3f5: 			_drivingLeftJoin.reopenCore();
1:898f3f5: 		}
1:898f3f5: 
1:508a010:         boolean rowsFound = collectAffectedRows();
1:508a010:         if ( !rowsFound )
1:508a010:         {
1:508a010:             activation.addWarning( StandardException.newWarning( SQLState.LANG_NO_ROW_FOUND ) );
1:508a010:         }
1:508a010: 
1:508a010:         // now execute the INSERT/UPDATE/DELETE actions
1:508a010:         int         clauseCount = _constants.matchingClauseCount();
2:508a010:         for ( int i = 0; i < clauseCount; i++ )
1:508a010:         {
1:01632c2:             _constants.getMatchingClause( i ).executeConstantAction( activation, _thenRows[ i ] );
1:508a010:         }
1:508a010: 
1:508a010:         cleanUp();
1:508a010:         endTime = getCurrentTimeMillis();
1:508a010:     }
1:508a010: 
1:508a010:     @Override
1:508a010:     void  setup() throws StandardException
1:508a010:     {
1:508a010:         super.setup();
1:508a010: 
1:01632c2:         int         clauseCount = _constants.matchingClauseCount();
1:01632c2:         for ( int i = 0; i < clauseCount; i++ )
1:01632c2:         {
1:01632c2:             _constants.getMatchingClause( i ).init();
1:01632c2:         }
1:01632c2: 
1:508a010:         _rowCount = 0L;
1:508a010:     }
1:508a010:     
1:508a010:     /**
1:508a010:      * Clean up resources and call close on data members.
1:508a010:      */
1:508a010:     public void close() throws StandardException
1:508a010:     {
1:01632c2:         close( false );
1:508a010:     }
1:508a010: 
1:508a010:     public void cleanUp() throws StandardException
1:508a010:     {
1:508a010:         int         clauseCount = _constants.matchingClauseCount();
1:508a010:         for ( int i = 0; i < clauseCount; i++ )
1:508a010:         {
1:01632c2:             TemporaryRowHolderImpl  thenRows = _thenRows[ i ];
1:01632c2:             if ( thenRows != null )
1:01632c2:             {
1:01632c2:                 thenRows.close();
1:01632c2:                 _thenRows[ i ] = null;
1:01632c2:             }
1:01632c2:             
1:508a010:             _constants.getMatchingClause( i ).cleanUp();
1:508a010:         }
1:898f3f5: 
1:898f3f5:         if ( _drivingLeftJoin != null ) { _drivingLeftJoin.close(); }
1:efa1efa: 
1:efa1efa:         if ( _subjectRowIDs != null )
1:efa1efa:         {
1:efa1efa:             _subjectRowIDs.close();
1:efa1efa:             _subjectRowIDs = null;
1:efa1efa:         }
1:efa1efa:         
1:efa1efa: 		_numOpens = 0;
1:508a010:     }
1:508a010: 
1:508a010: 
1:508a010:     public void finish() throws StandardException
1:508a010:     {
1:898f3f5:         if ( _drivingLeftJoin != null ) { _drivingLeftJoin.finish(); }
1:508a010:         super.finish();
1:508a010:     }
1:508a010: 
1:508a010:     /**
1:508a010:      * <p>
1:508a010:      * Loop through the rows in the driving left join.
1:508a010:      * </p>
1:508a010:      */
1:508a010:     boolean  collectAffectedRows() throws StandardException
1:508a010:     {
1:508a010:         DataValueDescriptor     rlColumn;
1:508a010:         boolean rowsFound = false;
1:508a010: 
1:508a010:         while ( true )
1:508a010:         {
1:508a010:             // may need to objectify stream columns here.
1:508a010:             // see DMLWriteResultSet.getNextRowCoure(NoPutResultSet)
1:508a010:             _row =  _drivingLeftJoin.getNextRowCore();
1:508a010:             if ( _row == null ) { break; }
1:508a010: 
1:508a010:             // By convention, the last column for the driving left join contains a data value
1:508a010:             // containing the RowLocation of the target row.
1:508a010: 
1:508a010:             rowsFound = true;
1:508a010: 
1:508a010:             rlColumn = _row.getColumn( _row.nColumns() );
1:efa1efa:             SQLRef             baseRowLocation = null;
1:508a010: 
1:508a010:             boolean matched = false;
1:508a010:             if ( rlColumn != null )
1:508a010:             {
1:508a010:                 if ( !rlColumn.isNull() )
1:508a010:                 {
1:508a010:                     matched = true;
1:7f8154d:                     
1:7f8154d:                     // change the HeapRowLocation into a SQLRef, something which the
1:7f8154d:                     // temporary table can (de)serialize correctly
1:efa1efa:                     baseRowLocation = new SQLRef( (RowLocation) rlColumn.getObject() );
1:efa1efa:                     _row.setColumn( _row.nColumns(), baseRowLocation );
1:508a010:                 }
1:508a010:             }
1:508a010: 
1:508a010:             // find the first clause which applies to this row
1:508a010:             MatchingClauseConstantAction    matchingClause = null;
1:508a010:             int         clauseCount = _constants.matchingClauseCount();
1:01632c2:             int         clauseIdx = 0;
1:01632c2:             for ( ; clauseIdx < clauseCount; clauseIdx++ )
1:508a010:             {
1:01632c2:                 MatchingClauseConstantAction    candidate = _constants.getMatchingClause( clauseIdx );
1:508a010:                 boolean isWhenMatchedClause = false;
1:508a010:                 
1:508a010:                 switch ( candidate.clauseType() )
1:508a010:                 {
1:508a010:                 case ConstantAction.WHEN_MATCHED_THEN_UPDATE:
1:508a010:                 case ConstantAction.WHEN_MATCHED_THEN_DELETE:
1:508a010:                     isWhenMatchedClause = true;
1:508a010:                     break;
1:508a010:                 }
1:508a010: 
1:508a010:                 boolean considerClause = (matched == isWhenMatchedClause);
1:508a010: 
1:508a010:                 if ( considerClause )
1:508a010:                 {
1:508a010:                     if ( candidate.evaluateRefinementClause( activation ) )
1:508a010:                     {
1:508a010:                         matchingClause = candidate;
1:508a010:                         break;
1:508a010:                     }
1:508a010:                 }
1:508a010:             }
1:508a010: 
1:508a010:             if ( matchingClause != null )
1:508a010:             {
1:a2b37c2:                 // this will raise an exception if the row is being touched more than once
1:efa1efa:                 if ( baseRowLocation != null ) { addSubjectRow( baseRowLocation ); }
1:a2b37c2: 
1:a2b37c2:                 //
1:a2b37c2:                 // This bit of defensive code materializes large streams before they
1:a2b37c2:                 // are handed off to the WHEN [ NOT ] MATCHED clauses. By the time
1:a2b37c2:                 // that those clauses operate, the driving left join has been closed and
1:a2b37c2:                 // the streams can't be materialized.
1:a2b37c2:                 //
1:a2b37c2:                 for ( int i = 0; i < _row.nColumns(); i++ )
1:a2b37c2:                 {
1:a2b37c2:                     DataValueDescriptor dvd = _row.getColumn( i + 1 );
1:a2b37c2:                     if ( dvd instanceof StreamStorable )
1:a2b37c2:                     {
1:a2b37c2:                         if ( dvd.hasStream() )
1:a2b37c2:                         {
1:a2b37c2:                             _row.setColumn( i + 1, dvd.cloneValue( true ) );
1:a2b37c2:                         }
1:a2b37c2:                     }
1:a2b37c2:                 }
1:efa1efa:                 
1:01632c2:                 _thenRows[ clauseIdx ] = matchingClause.bufferThenRow( activation, _thenRows[ clauseIdx ], _row );
1:508a010:                 _rowCount++;
1:508a010:             }
1:508a010:         }
1:508a010: 
1:508a010:         return rowsFound;
1:508a010:     }
1:508a010: 
1:efa1efa:     /**
1:efa1efa:      * <p>
1:efa1efa:      * Add another subject row id to the evolving hashtable of affected target rows.
1:efa1efa:      * The concept of a subject row is defined by the 2011 SQL Standard, part 2,
1:efa1efa:      * section 14.12 (merge statement), general rule 6. A row in the target table
1:efa1efa:      * is a subject row if it joins to the source table on the main search condition
1:efa1efa:      * and if the joined row satisfies the matching refinement condition for
1:efa1efa:      * some WHEN MATCHED clause. A row in the target table may only be a
1:efa1efa:      * subject row once. That is, a given target row may only qualify for UPDATE
1:efa1efa:      * or DELETE processing once. If it qualifies for more than one UPDATE or DELETE
1:efa1efa:      * action, then the Standard requires us to raise a cardinality violation.
1:efa1efa:      * </p>
1:efa1efa:      *
1:efa1efa:      * @param   subjectRowID    The location of the subject row.
1:efa1efa:      *
1:efa1efa: 	 * @exception StandardException A cardinality exception is thrown if we've already added this subject row.
1:efa1efa:      */
1:efa1efa:     private void    addSubjectRow( SQLRef subjectRowID ) throws StandardException
1:efa1efa:     {
1:efa1efa:         if ( _subjectRowIDs == null ) { createSubjectRowIDhashtable(); }
1:efa1efa: 
1:efa1efa:         if ( _subjectRowIDs.get( subjectRowID ) != null )
1:efa1efa:         {
1:efa1efa:             throw StandardException.newException( SQLState.LANG_REDUNDANT_SUBJECT_ROW );
1:efa1efa:         }
1:efa1efa:         else
1:efa1efa:         {
1:efa1efa:             DataValueDescriptor[] row = new DataValueDescriptor[] { subjectRowID };
1:efa1efa: 
1:efa1efa:             _subjectRowIDs.putRow( true, row, null );
1:efa1efa:         }
1:efa1efa:     }
1:efa1efa: 
1:efa1efa:     /**
1:efa1efa:      * <p>
1:efa1efa:      * Create a BackingStoreHashtable to hold the ids of subject rows.
1:efa1efa:      * </p>
1:efa1efa:      */
1:efa1efa:     private void    createSubjectRowIDhashtable()   throws StandardException
1:efa1efa:     {
1:efa1efa: 		final int[] keyCols = new int[] { 0 };
1:efa1efa: 
1:efa1efa: 		_subjectRowIDs = new BackingStoreHashtable
1:efa1efa:             (
1:efa1efa:              getActivation().getLanguageConnectionContext().getTransactionExecute(),
1:efa1efa:              null,          // no row source. we'll fill the hashtable as we go along
1:efa1efa:              keyCols,
1:efa1efa:              false,         // duplicate handling doesn't matter. we probe for duplicates and error out if we find one
1:efa1efa:              -1,            // who knows what the row count will be
1:efa1efa:              HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:efa1efa:              HashScanResultSet.DEFAULT_INITIAL_CAPACITY,
1:efa1efa:              HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:efa1efa:              false,         // null keys aren't relevant. the row id is always non-null
1:efa1efa:              false          // discard after commit
1:efa1efa:              );
1:efa1efa:     }
1:efa1efa: 
1:508a010: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a2b37c2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.StreamStorable;
/////////////////////////////////////////////////////////////////////////
1:                 // this will raise an exception if the row is being touched more than once
1: 
1:                 //
1:                 // This bit of defensive code materializes large streams before they
1:                 // are handed off to the WHEN [ NOT ] MATCHED clauses. By the time
1:                 // that those clauses operate, the driving left join has been closed and
1:                 // the streams can't be materialized.
1:                 //
1:                 for ( int i = 0; i < _row.nColumns(); i++ )
1:                 {
1:                     DataValueDescriptor dvd = _row.getColumn( i + 1 );
1:                     if ( dvd instanceof StreamStorable )
1:                     {
1:                         if ( dvd.hasStream() )
1:                         {
1:                             _row.setColumn( i + 1, dvd.cloneValue( true ) );
1:                         }
1:                     }
1:                 }
commit:efa1efa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 	private BackingStoreHashtable		_subjectRowIDs;
1:     
1: 	private int						_numOpens;
/////////////////////////////////////////////////////////////////////////
1: 		if (_numOpens++ == 0)
/////////////////////////////////////////////////////////////////////////
1: 
1:         if ( _subjectRowIDs != null )
1:         {
1:             _subjectRowIDs.close();
1:             _subjectRowIDs = null;
1:         }
1:         
1: 		_numOpens = 0;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             SQLRef             baseRowLocation = null;
/////////////////////////////////////////////////////////////////////////
1:                     baseRowLocation = new SQLRef( (RowLocation) rlColumn.getObject() );
1:                     _row.setColumn( _row.nColumns(), baseRowLocation );
/////////////////////////////////////////////////////////////////////////
1:                 if ( baseRowLocation != null ) { addSubjectRow( baseRowLocation ); }
1:                 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Add another subject row id to the evolving hashtable of affected target rows.
1:      * The concept of a subject row is defined by the 2011 SQL Standard, part 2,
1:      * section 14.12 (merge statement), general rule 6. A row in the target table
1:      * is a subject row if it joins to the source table on the main search condition
1:      * and if the joined row satisfies the matching refinement condition for
1:      * some WHEN MATCHED clause. A row in the target table may only be a
1:      * subject row once. That is, a given target row may only qualify for UPDATE
1:      * or DELETE processing once. If it qualifies for more than one UPDATE or DELETE
1:      * action, then the Standard requires us to raise a cardinality violation.
1:      * </p>
1:      *
1:      * @param   subjectRowID    The location of the subject row.
1:      *
1: 	 * @exception StandardException A cardinality exception is thrown if we've already added this subject row.
1:      */
1:     private void    addSubjectRow( SQLRef subjectRowID ) throws StandardException
1:     {
1:         if ( _subjectRowIDs == null ) { createSubjectRowIDhashtable(); }
1: 
1:         if ( _subjectRowIDs.get( subjectRowID ) != null )
1:         {
1:             throw StandardException.newException( SQLState.LANG_REDUNDANT_SUBJECT_ROW );
1:         }
1:         else
1:         {
1:             DataValueDescriptor[] row = new DataValueDescriptor[] { subjectRowID };
1: 
1:             _subjectRowIDs.putRow( true, row, null );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Create a BackingStoreHashtable to hold the ids of subject rows.
1:      * </p>
1:      */
1:     private void    createSubjectRowIDhashtable()   throws StandardException
1:     {
1: 		final int[] keyCols = new int[] { 0 };
1: 
1: 		_subjectRowIDs = new BackingStoreHashtable
1:             (
1:              getActivation().getLanguageConnectionContext().getTransactionExecute(),
1:              null,          // no row source. we'll fill the hashtable as we go along
1:              keyCols,
1:              false,         // duplicate handling doesn't matter. we probe for duplicates and error out if we find one
1:              -1,            // who knows what the row count will be
1:              HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:              HashScanResultSet.DEFAULT_INITIAL_CAPACITY,
1:              HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:              false,         // null keys aren't relevant. the row id is always non-null
1:              false          // discard after commit
1:              );
1:     }
1: 
commit:7f8154d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLRef;
/////////////////////////////////////////////////////////////////////////
1:                     
1:                     // change the HeapRowLocation into a SQLRef, something which the
1:                     // temporary table can (de)serialize correctly
0:                     _row.setColumn( _row.nColumns(), new SQLRef( baseRowLocation ) );
commit:898f3f5
/////////////////////////////////////////////////////////////////////////
0: 	private int						numOpens;
1:     
/////////////////////////////////////////////////////////////////////////
0: 		if (numOpens++ == 0)
1: 		{
1: 			_drivingLeftJoin.openCore();
1: 		}
1: 		else
1: 		{
1: 			_drivingLeftJoin.reopenCore();
1: 		}
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         if ( _drivingLeftJoin != null ) { _drivingLeftJoin.close(); }
0: 		numOpens = 0;
1:         if ( _drivingLeftJoin != null ) { _drivingLeftJoin.finish(); }
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1:     private TemporaryRowHolderImpl[]    _thenRows;
/////////////////////////////////////////////////////////////////////////
1:         _thenRows = new TemporaryRowHolderImpl[ _constants.matchingClauseCount() ];
/////////////////////////////////////////////////////////////////////////
1:             _constants.getMatchingClause( i ).executeConstantAction( activation, _thenRows[ i ] );
/////////////////////////////////////////////////////////////////////////
1:         int         clauseCount = _constants.matchingClauseCount();
1:         for ( int i = 0; i < clauseCount; i++ )
1:         {
1:             _constants.getMatchingClause( i ).init();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         close( false );
/////////////////////////////////////////////////////////////////////////
1:             TemporaryRowHolderImpl  thenRows = _thenRows[ i ];
1:             if ( thenRows != null )
1:             {
1:                 thenRows.close();
1:                 _thenRows[ i ] = null;
1:             }
1:             
/////////////////////////////////////////////////////////////////////////
1:             int         clauseIdx = 0;
1:             for ( ; clauseIdx < clauseCount; clauseIdx++ )
1:                 MatchingClauseConstantAction    candidate = _constants.getMatchingClause( clauseIdx );
/////////////////////////////////////////////////////////////////////////
1:                 _thenRows[ clauseIdx ] = matchingClause.bufferThenRow( activation, _thenRows[ clauseIdx ], _row );
commit:508a010
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.MergeResultSet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1:  * INSERT/UPDATE/DELETE a target table based on how it outer joins
1:  * with a driving table. For a description of how Derby processes
1:  * the MERGE statement, see the header comment on MergeNode.
1:  */
1: class MergeResultSet extends NoRowsResultSetImpl 
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private NoPutResultSet          _drivingLeftJoin;
1:     private MergeConstantAction _constants;
1: 
1:     private ExecRow                 _row;
1:     private long                        _rowCount;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Construct from a driving left join and an Activation.
1:      */
1:     MergeResultSet
1:         (
1:          NoPutResultSet drivingLeftJoin, 
1:          Activation activation
1:          )
1:         throws StandardException
1:     {
1:         super( activation );
1:         _drivingLeftJoin = drivingLeftJoin;
1:         _constants = (MergeConstantAction) activation.getConstantAction();
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public final long   modifiedRowCount() { return _rowCount + RowUtil.getRowCountBase(); }
1: 
1:     public void open() throws StandardException
1:     {
1:         setup();
1: 
1:         boolean rowsFound = collectAffectedRows();
1:         if ( !rowsFound )
1:         {
1:             activation.addWarning( StandardException.newWarning( SQLState.LANG_NO_ROW_FOUND ) );
1:         }
1: 
1:         // now execute the INSERT/UPDATE/DELETE actions
1:         int         clauseCount = _constants.matchingClauseCount();
1:         for ( int i = 0; i < clauseCount; i++ )
1:         {
0:             _constants.getMatchingClause( i ).executeConstantAction( activation );
1:         }
1: 
1:         cleanUp();
1:         endTime = getCurrentTimeMillis();
1:     }
1: 
1:     @Override
1:     void  setup() throws StandardException
1:     {
1:         super.setup();
1: 
1:         _rowCount = 0L;
0:         _drivingLeftJoin.openCore();
1:     }
1:     
1:     /**
1:      * Clean up resources and call close on data members.
1:      */
1:     public void close() throws StandardException
1:     {
0:         super.close();
1:     }
1: 
1:     public void cleanUp() throws StandardException
1:     {
1:         int         clauseCount = _constants.matchingClauseCount();
1:         for ( int i = 0; i < clauseCount; i++ )
1:         {
1:             _constants.getMatchingClause( i ).cleanUp();
1:         }
1:     }
1: 
1: 
1:     public void finish() throws StandardException
1:     {
0:         _drivingLeftJoin.finish();
1:         super.finish();
1:     }
1: 
1:     /**
1:      * <p>
1:      * Loop through the rows in the driving left join.
1:      * </p>
1:      */
1:     boolean  collectAffectedRows() throws StandardException
1:     {
1:         DataValueDescriptor     rlColumn;
0:         RowLocation             baseRowLocation;
1:         boolean rowsFound = false;
1: 
1:         while ( true )
1:         {
1:             // may need to objectify stream columns here.
1:             // see DMLWriteResultSet.getNextRowCoure(NoPutResultSet)
1:             _row =  _drivingLeftJoin.getNextRowCore();
1:             if ( _row == null ) { break; }
1: 
1:             // By convention, the last column for the driving left join contains a data value
1:             // containing the RowLocation of the target row.
1: 
1:             rowsFound = true;
1: 
1:             rlColumn = _row.getColumn( _row.nColumns() );
0:             baseRowLocation = null;
1: 
1:             boolean matched = false;
1:             if ( rlColumn != null )
1:             {
1:                 if ( !rlColumn.isNull() )
1:                 {
1:                     matched = true;
0:                     baseRowLocation = (RowLocation) rlColumn.getObject();
1:                 }
1:             }
1: 
1:             // find the first clause which applies to this row
1:             MatchingClauseConstantAction    matchingClause = null;
1:             int         clauseCount = _constants.matchingClauseCount();
1:             for ( int i = 0; i < clauseCount; i++ )
1:             {
0:                 MatchingClauseConstantAction    candidate = _constants.getMatchingClause( i );
1:                 boolean isWhenMatchedClause = false;
1:                 
1:                 switch ( candidate.clauseType() )
1:                 {
1:                 case ConstantAction.WHEN_MATCHED_THEN_UPDATE:
1:                 case ConstantAction.WHEN_MATCHED_THEN_DELETE:
1:                     isWhenMatchedClause = true;
1:                     break;
1:                 }
1: 
1:                 boolean considerClause = (matched == isWhenMatchedClause);
1: 
1:                 if ( considerClause )
1:                 {
1:                     if ( candidate.evaluateRefinementClause( activation ) )
1:                     {
1:                         matchingClause = candidate;
1:                         break;
1:                     }
1:                 }
1:             }
1: 
1:             if ( matchingClause != null )
1:             {
0:                 matchingClause.bufferThenRow( activation, _drivingLeftJoin.getResultDescription(), _row );
1:                 _rowCount++;
1:             }
1:         }
1: 
1:         return rowsFound;
1:     }
1: 
1: }
============================================================================