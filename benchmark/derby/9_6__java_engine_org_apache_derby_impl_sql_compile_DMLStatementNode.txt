2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DMLStatementNode
1:69a192a: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
4:eac0369:  */
27:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:38b5979: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:4fb136d: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:4fb136d: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitor;
1:c45f5b1: import org.apache.derby.iapi.sql.conn.Authorizer;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * A DMLStatementNode represents any type of DML statement: a cursor declaration,
1:eac0369:  * an INSERT statement, and UPDATE statement, or a DELETE statement.  All DML
1:eac0369:  * statements have result sets, but they do different things with them.  A
1:eac0369:  * SELECT statement sends its result set to the client, an INSERT statement
1:eac0369:  * inserts its result set into a table, a DELETE statement deletes from a
1:eac0369:  * table the rows corresponding to the rows in its result set, and an UPDATE
1:eac0369:  * statement updates the rows in a base table corresponding to the rows in its
1:eac0369:  * result set.
12:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:0061383: abstract class DMLStatementNode extends StatementNode
3:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The result set is the rows that result from running the
1:eac0369: 	 * statement.  What this means for SELECT statements is fairly obvious.
1:eac0369: 	 * For a DELETE, there is one result column representing the
1:eac0369: 	 * key of the row to be deleted (most likely, the location of the
1:eac0369: 	 * row in the underlying heap).  For an UPDATE, the row consists of
1:eac0369: 	 * the key of the row to be updated plus the updated columns.  For
1:eac0369: 	 * an INSERT, the row consists of the new column values to be
1:eac0369: 	 * inserted, with no key (the system generates a key).
1:eac0369: 	 *
1:eac0369: 	 * The parser doesn't know anything about keys, so the columns
1:eac0369: 	 * representing the keys will be added after parsing (perhaps in
1:eac0369: 	 * the binding phase?).
1:eac0369: 	 *
1:eac0369: 	 */
1:0061383: 	ResultSetNode	resultSet;
1:eac0369: 
1:3bb140c:     DMLStatementNode(ResultSetNode resultSet, ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.resultSet = resultSet;
1:3bb140c:     }
1:69a192a: 
1:69a192a: 	/**
1:eac0369: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:eac0369: 	 * how tree printing is supposed to work.
1:69a192a: 	 *
1:eac0369: 	 * @param depth		The depth of this node in the tree
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			super.printSubNodes(depth);
1:eac0369: 			if (resultSet != null)
1:eac0369: 			{
1:eac0369: 				printLabel(depth, "resultSet: ");
1:eac0369: 				resultSet.treePrint(depth + 1);
1:69a192a: 			}
1:69a192a: 		}
4:eac0369: 	}
1:69a192a: 
1:eac0369: 	/**
1:eac0369: 	 * Get the ResultSetNode from this DML Statement.
1:eac0369: 	 * (Useful for view resolution after parsing the view definition.)
1:69a192a: 	 *
1:eac0369: 	 * @return ResultSetNode	The ResultSetNode from this DMLStatementNode.
1:eac0369: 	 */
1:3bb140c:     ResultSetNode getResultSetNode()
1:eac0369: 	{
1:eac0369: 		return resultSet;
1:eac0369: 	}
1:69a192a: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this DMLStatementNode.  This means looking up tables and columns and
1:eac0369: 	 * getting their types, and figuring out the result types of all
1:eac0369: 	 * expressions, as well as doing view resolution, permissions checking,
1:eac0369: 	 * etc.
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary	The DataDictionary to use to look up
1:eac0369: 	 *				columns, tables, etc.
1:eac0369: 	 *
1:eac0369: 	 * @return	The bound query tree
1:eac0369: 	 *
1:69a192a: 	 * @exception StandardException		Thrown on error
1:69a192a: 	 */
1:69a192a: 
1:cc770d8: 	QueryTreeNode bind(DataDictionary dataDictionary)
1:69a192a: 					 throws StandardException
1:eac0369: 	{
1:c45f5b1: 		// We just need select privilege on most columns and tables
1:c45f5b1: 		getCompilerContext().pushCurrentPrivType(getPrivType());
1:c45f5b1: 		try {
1:eac0369: 			/*
1:eac0369: 			** Bind the tables before binding the expressions, so we can
1:eac0369: 			** use the results of table binding to look up columns.
1:eac0369: 			*/
1:eac0369: 			bindTables(dataDictionary);
1:69a192a: 
1:eac0369: 			/* Bind the expressions */
1:eac0369: 			bindExpressions();
1:eac0369: 		}
1:c45f5b1: 		finally
1:eac0369: 		{
1:c45f5b1: 			getCompilerContext().popCurrentPrivType();
1:eac0369: 		}
1:eac0369: 
3:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind only the underlying ResultSets with tables.  This is necessary for
1:eac0369: 	 * INSERT, where the binding order depends on the underlying ResultSets.
1:eac0369: 	 * This means looking up tables and columns and
1:eac0369: 	 * getting their types, and figuring out the result types of all
1:eac0369: 	 * expressions, as well as doing view resolution, permissions checking,
1:eac0369: 	 * etc.
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary	The DataDictionary to use to look up
1:eac0369: 	 *				columns, tables, etc.
1:eac0369: 	 *
1:eac0369: 	 * @return	The bound query tree
1:eac0369: 	 *
2:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:     QueryTreeNode bindResultSetsWithTables(DataDictionary dataDictionary)
3:eac0369: 					 throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Okay to bindly bind the tables, since ResultSets without tables
1:eac0369: 		 * know to handle the call.
1:eac0369: 		 */
1:eac0369: 		bindTables(dataDictionary);
1:eac0369: 
1:eac0369: 		/* Bind the expressions in the underlying ResultSets with tables */
1:eac0369: 		bindExpressionsWithTables();
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind the tables in this DML statement.
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary	The data dictionary to use to look up the tables
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	protected void bindTables(DataDictionary dataDictionary)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Bind the tables in the resultSet 
1:eac0369: 		 * (DMLStatementNode is above all ResultSetNodes, so table numbering
1:eac0369: 		 * will begin at 0.)
1:eac0369: 		 * In case of referential action on delete , the table numbers can be
1:eac0369: 		 * > 0 because the nodes are create for dependent tables also in the 
1:eac0369: 		 * the same context.
1:eac0369: 		 */
1:3bb140c:         boolean doJOO = getOptimizerFactory().doJoinOrderOptimization();
1:3bb140c:         ContextManager cm = getContextManager();
1:3bb140c:         resultSet = resultSet.bindNonVTITables(dataDictionary,
1:3bb140c:                                                new FromList(doJOO, cm));
1:3bb140c:         resultSet = resultSet.bindVTITables(new FromList(doJOO, cm));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind the expressions in this DML statement.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	protected void bindExpressions()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:3bb140c:         FromList fromList =
1:3bb140c:                 new FromList(getOptimizerFactory().doJoinOrderOptimization(),
1:3bb140c:                              getContextManager());
1:eac0369: 
1:eac0369: 		/* Bind the expressions under the resultSet */
1:eac0369: 		resultSet.bindExpressions(fromList);
1:eac0369: 
1:eac0369: 		/* Verify that all underlying ResultSets reclaimed their FromList */
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(fromList.size() == 0,
1:eac0369: 			"fromList.size() is expected to be 0, not " + fromList.size() +
1:eac0369: 			" on return from RS.bindExpressions()");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind the expressions in the underlying ResultSets with tables.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	protected void bindExpressionsWithTables()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:3bb140c:         FromList fromList =
1:3bb140c:                 new FromList(getOptimizerFactory().doJoinOrderOptimization(),
1:3bb140c:                              getContextManager());
1:eac0369: 
1:eac0369: 		/* Bind the expressions under the resultSet */
1:eac0369: 		resultSet.bindExpressionsWithTables(fromList);
1:eac0369: 
1:eac0369: 		/* Verify that all underlying ResultSets reclaimed their FromList */
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(fromList.size() == 0,
1:eac0369: 			"fromList.size() is expected to be 0, not " + fromList.size() +
1:eac0369: 			" on return from RS.bindExpressions()");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the type of activation this class
1:eac0369: 	 * generates.
1:eac0369: 	 * 
1:eac0369: 	 * @return either (NEED_ROW_ACTIVATION | NEED_PARAM_ACTIVATION) or
1:eac0369: 	 *			(NEED_ROW_ACTIVATION) depending on params
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	int activationKind()
1:eac0369: 	{
1:3bb140c:         List<ParameterNode> parameterList =
1:3bb140c:             getCompilerContext().getParameterList();
1:eac0369: 		/*
1:eac0369: 		** We need rows for all types of DML activations.  We need parameters
1:eac0369: 		** only for those that have parameters.
1:eac0369: 		*/
1:38b5979: 		if (parameterList != null && !parameterList.isEmpty())
1:eac0369: 		{
1:eac0369: 			return StatementNode.NEED_PARAM_ACTIVATION;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return StatementNode.NEED_ROW_ACTIVATION;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Optimize a DML statement (which is the only type of statement that
1:eac0369: 	 * should need optimizing, I think). This method over-rides the one
1:eac0369: 	 * in QueryTreeNode.
1:eac0369: 	 *
1:eac0369: 	 * This method takes a bound tree, and returns an optimized tree.
1:eac0369: 	 * It annotates the bound tree rather than creating an entirely
1:eac0369: 	 * new tree.
1:eac0369: 	 *
1:eac0369: 	 * Throws an exception if the tree is not bound, or if the binding
1:eac0369: 	 * is out of date.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:d725d43: 	public void optimizeStatement() throws StandardException
1:69a192a: 	{
1:eac0369: 		resultSet = resultSet.preprocess(getCompilerContext().getNumTables(),
2:eac0369: 										 null,
1:eac0369: 										 (FromList) null);
1:568cbf1: 
1:568cbf1: 		// Evaluate expressions with constant operands here to simplify the
1:568cbf1: 		// query tree and to reduce the runtime cost. Do it before optimize()
1:568cbf1: 		// since the simpler tree may have more accurate information for
1:568cbf1: 		// the optimizer. (Example: The selectivity for 1=1 is estimated to
1:568cbf1: 		// 0.1, whereas the actual selectivity is 1.0. In this step, 1=1 will
1:568cbf1: 		// be rewritten to TRUE, which is known by the optimizer to have
1:568cbf1: 		// selectivity 1.0.)
1:568cbf1: 		accept(new ConstantExpressionVisitor());
1:568cbf1: 
1:eac0369: 		resultSet = resultSet.optimize(getDataDictionary(), null, 1.0d);
1:eac0369: 
1:eac0369: 		resultSet = resultSet.modifyAccessPaths();
1:69a192a: 
1:eac0369: 		/* If this is a cursor, then we
1:eac0369: 		 * need to generate a new ResultSetNode to enable the scrolling
1:eac0369: 		 * on top of the tree before modifying the access paths.
1:eac0369: 		 */
1:eac0369: 		if (this instanceof CursorNode)
1:eac0369: 		{
1:eac0369: 			ResultColumnList				siRCList;
1:eac0369: 			ResultColumnList				childRCList;
1:eac0369: 			ResultSetNode					siChild = resultSet;
1:eac0369: 
1:eac0369: 			/* We get a shallow copy of the ResultColumnList and its 
1:eac0369: 			 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
1:eac0369: 			 */
1:eac0369: 			siRCList = resultSet.getResultColumns();
1:eac0369: 			childRCList = siRCList.copyListAndObjects();
1:eac0369: 			resultSet.setResultColumns(childRCList);
1:eac0369: 
1:eac0369: 			/* Replace ResultColumn.expression with new VirtualColumnNodes
1:eac0369: 			 * in the ScrollInsensitiveResultSetNode's ResultColumnList.  (VirtualColumnNodes include
1:eac0369: 			 * pointers to source ResultSetNode, this, and source ResultColumn.)
1:eac0369: 			 */
1:eac0369: 			siRCList.genVirtualColumnNodes(resultSet, childRCList);
1:eac0369: 
1:eac0369: 			/* Finally, we create the new ScrollInsensitiveResultSetNode */
1:3bb140c:             resultSet = new ScrollInsensitiveResultSetNode(
1:3bb140c:                     resultSet, siRCList, null, getContextManager());
1:3bb140c: 
1:eac0369: 			// Propagate the referenced table map if it's already been created
1:eac0369: 			if (siChild.getReferencedTableMap() != null)
1:eac0369: 			{
1:eac0369: 				resultSet.setReferencedTableMap((JBitSet) siChild.getReferencedTableMap().clone());
1:69a192a: 			}
1:eac0369: 		}
1:69a192a: 
1:eac0369: 	}
1:69a192a: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a ResultDescription for use in a PreparedStatement.
1:eac0369: 	 *
1:eac0369: 	 * ResultDescriptions are visible to JDBC only for cursor statements.
1:eac0369: 	 * For other types of statements, they are only used internally to
1:eac0369: 	 * get descriptions of the base tables being affected.  For example,
1:eac0369: 	 * for an INSERT statement, the ResultDescription describes the
1:eac0369: 	 * rows in the table being inserted into, which is useful when
1:eac0369: 	 * the values being inserted are of a different type or length
1:eac0369: 	 * than the columns in the base table.
1:eac0369: 	 *
1:eac0369: 	 * @return	A ResultDescription for this DML statement
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public ResultDescription makeResultDescription()
1:eac0369: 	{
1:6c000e8: 	    ResultColumnDescriptor[] colDescs = resultSet.makeResultDescriptors();
1:eac0369: 		String statementType = statementToString();
1:eac0369: 
1:6c000e8: 	    return getExecutionFactory().getResultDescription(
1:6c000e8:                            colDescs, statementType );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Generate the code to create the ParameterValueSet, if necessary,
1:eac0369: 	 * when constructing the activation.  Also generate the code to call
1:eac0369: 	 * a method that will throw an exception if we try to execute without
1:eac0369: 	 * all the parameters being set.
1:eac0369: 	 * 
1:eac0369: 	 * @param acb	The ActivationClassBuilder for the class we're building
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	void generateParameterValueSet(ActivationClassBuilder acb)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:3bb140c:         List<ParameterNode> parameterList =
1:3bb140c:             getCompilerContext().getParameterList();
1:eac0369: 		int	numberOfParameters = (parameterList == null) ? 0 : parameterList.size();
1:eac0369: 
1:eac0369: 		if (numberOfParameters <= 0)
2:eac0369: 			return;
1:eac0369: 
1:38b5979:         ParameterNode.generateParameterValueSet
1:eac0369: 				( acb, numberOfParameters, parameterList);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * A read statement is atomic (DMLMod overrides us) if there
1:eac0369: 	 * are no work units, and no SELECT nodes, or if its SELECT nodes 
1:eac0369: 	 * are all arguments to a function.  This is admittedly
1:eac0369: 	 * a bit simplistic, what if someone has: <pre>
1:eac0369: 	 * 	VALUES myfunc(SELECT max(c.commitFunc()) FROM T) 
1:eac0369: 	 * </pre>
1:eac0369: 	 * but we aren't going too far out of our way to
1:eac0369: 	 * catch every possible wierd case.  We basically
1:eac0369: 	 * want to be permissive w/o allowing someone to partially
1:eac0369: 	 * commit a write. 
1:eac0369: 	 * 
1:eac0369: 	 * @return true if the statement is atomic
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */	
1:3bb140c:     @Override
1:eac0369: 	public boolean isAtomic() throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** If we have a FromBaseTable then we have
1:eac0369: 		** a SELECT, so we want to consider ourselves
1:eac0369: 		** atomic.  Don't drill below StaticMethodCallNodes
1:eac0369: 		** to allow a SELECT in an argument to a method
1:eac0369: 		** call that can be atomic.
1:eac0369: 		*/
1:eac0369: 		HasNodeVisitor visitor = new HasNodeVisitor(FromBaseTable.class, StaticMethodCallNode.class);
1:eac0369: 													
1:eac0369: 		this.accept(visitor);
1:eac0369: 		if (visitor.hasNode())
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dd2f5a8: 	 * Accept the visitor for all visitable children of this node.
1:eac0369: 	 * 
1:eac0369: 	 * @param v the visitor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:dd2f5a8: 	void acceptChildren(Visitor v)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:dd2f5a8: 		super.acceptChildren(v);
1:eac0369: 
1:aebfb28: 		if (resultSet != null)
1:eac0369: 		{
1:eac0369: 			resultSet = (ResultSetNode)resultSet.accept(v);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c45f5b1: 	 * Return default privilege needed for this node. Other DML nodes can override
1:c45f5b1: 	 * this method to set their own default privilege.
1:eac0369: 	 *
1:c45f5b1: 	 * @return true if the statement is atomic
1:eac0369: 	 */
1:c45f5b1: 	int getPrivType()
1:eac0369: 	{
1:c45f5b1: 		return Authorizer.SELECT_PRIV;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1:     DMLStatementNode(ResultSetNode resultSet, ContextManager cm) {
1:         super(cm);
1:         this.resultSet = resultSet;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     ResultSetNode getResultSetNode()
/////////////////////////////////////////////////////////////////////////
1:     QueryTreeNode bindResultSetsWithTables(DataDictionary dataDictionary)
/////////////////////////////////////////////////////////////////////////
1:         boolean doJOO = getOptimizerFactory().doJoinOrderOptimization();
1:         ContextManager cm = getContextManager();
1:         resultSet = resultSet.bindNonVTITables(dataDictionary,
1:                                                new FromList(doJOO, cm));
1:         resultSet = resultSet.bindVTITables(new FromList(doJOO, cm));
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList =
1:                 new FromList(getOptimizerFactory().doJoinOrderOptimization(),
1:                              getContextManager());
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList =
1:                 new FromList(getOptimizerFactory().doJoinOrderOptimization(),
1:                              getContextManager());
/////////////////////////////////////////////////////////////////////////
1:         List<ParameterNode> parameterList =
1:             getCompilerContext().getParameterList();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             resultSet = new ScrollInsensitiveResultSetNode(
1:                     resultSet, siRCList, null, getContextManager());
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         List<ParameterNode> parameterList =
1:             getCompilerContext().getParameterList();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:108305b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:69a192a
/////////////////////////////////////////////////////////////////////////
0: 		optimizeStatement(null, null);
1: 	}
1: 
1: 	/**
0: 	 * This overload variant of optimizeStatement is used by subclass
0: 	 * CursorNode (as well as a minion for the no-arg variant).
1: 	 *
0: 	 * @param offset     Any OFFSET row count, or null
0: 	 * @param fetchFirst Any FETCH FIRST row count or null
1: 	 *
1: 	 * @exception StandardException		Thrown on error
0: 	 * @see DMLStatementNode#optimizeStatement()
1: 	 */
0: 	protected void optimizeStatement(ValueNode offset, ValueNode fetchFirst)
1: 			throws StandardException
1: 	{
/////////////////////////////////////////////////////////////////////////
0: 		// Any OFFSET/FETCH FIRST narrowing must be done *after* any rewrite of
0: 		// the query tree (if not, underlying GROUP BY fails), but *before* the
0: 		// final scroll insensitive result node set is added - that one needs
0: 		// to sit on top - so now is the time.
0: 		// 
0: 		// This example statement fails if we wrap *before* the optimization
0: 		// above:
0: 		//     select max(a) from t1 group by b fetch first row only
0: 		//
0: 		// A java.sql.ResultSet#previous on a scrollable result set will fail
0: 		// if we don't wrap *after* the ScrollInsensitiveResultSetNode below.
0: 		//
0: 		// We need only wrap the RowCountNode set if at least one of the
0: 		// clauses is present.
1: 		
0: 		if (offset != null || fetchFirst != null) {
0: 			resultSet = wrapRowCountNode(resultSet, offset, fetchFirst);
1: 		}
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0: 	private ResultSetNode wrapRowCountNode(
0: 		ResultSetNode resultSet,
0: 		ValueNode offset,
0: 		ValueNode fetchFirst) throws StandardException {
1: 
0: 		ResultSetNode topRS = resultSet;
0: 		ResultColumnList selectRCs =
0: 			topRS.getResultColumns().copyListAndObjects();
0: 		selectRCs.genVirtualColumnNodes(topRS, topRS.getResultColumns());
1: 
0: 		return (RowCountNode)getNodeFactory().getNode(
0: 			C_NodeTypes.ROW_COUNT_NODE,
0: 			topRS,
0: 			selectRCs,
0: 			offset,
0: 			fetchFirst,
0: 			getContextManager());
1: 	}
1: 
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:38b5979
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List parameterList = getCompilerContext().getParameterList();
1: 		if (parameterList != null && !parameterList.isEmpty())
/////////////////////////////////////////////////////////////////////////
0: 		List parameterList = getCompilerContext().getParameterList();
1:         ParameterNode.generateParameterValueSet
commit:568cbf1
/////////////////////////////////////////////////////////////////////////
1: 
1: 		// Evaluate expressions with constant operands here to simplify the
1: 		// query tree and to reduce the runtime cost. Do it before optimize()
1: 		// since the simpler tree may have more accurate information for
1: 		// the optimizer. (Example: The selectivity for 1=1 is estimated to
1: 		// 0.1, whereas the actual selectivity is 1.0. In this step, 1=1 will
1: 		// be rewritten to TRUE, which is known by the optimizer to have
1: 		// selectivity 1.0.)
1: 		accept(new ConstantExpressionVisitor());
1: 
commit:aebfb28
/////////////////////////////////////////////////////////////////////////
1: 		if (resultSet != null)
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * Accept the visitor for all visitable children of this node.
1: 	void acceptChildren(Visitor v)
1: 		super.acceptChildren(v);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6c000e8
/////////////////////////////////////////////////////////////////////////
1: 	    ResultColumnDescriptor[] colDescs = resultSet.makeResultDescriptors();
1: 	    return getExecutionFactory().getResultDescription(
1:                            colDescs, statementType );
commit:4fb136d
/////////////////////////////////////////////////////////////////////////
0: import java.util.Vector;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.sql.ResultDescription;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
commit:d725d43
/////////////////////////////////////////////////////////////////////////
1: 	public void optimizeStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	QueryTreeNode bind(DataDictionary dataDictionary)
commit:0061383
/////////////////////////////////////////////////////////////////////////
1: abstract class DMLStatementNode extends StatementNode
/////////////////////////////////////////////////////////////////////////
1: 	ResultSetNode	resultSet;
commit:7736829
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DMLStatementNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ParameterValueSet;
0: import org.apache.derby.iapi.sql.ResultDescription;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: 
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.Vector;
1: 
1: /**
1:  * A DMLStatementNode represents any type of DML statement: a cursor declaration,
1:  * an INSERT statement, and UPDATE statement, or a DELETE statement.  All DML
1:  * statements have result sets, but they do different things with them.  A
1:  * SELECT statement sends its result set to the client, an INSERT statement
1:  * inserts its result set into a table, a DELETE statement deletes from a
1:  * table the rows corresponding to the rows in its result set, and an UPDATE
1:  * statement updates the rows in a base table corresponding to the rows in its
1:  * result set.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
0: public abstract class DMLStatementNode extends StatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * The result set is the rows that result from running the
1: 	 * statement.  What this means for SELECT statements is fairly obvious.
1: 	 * For a DELETE, there is one result column representing the
1: 	 * key of the row to be deleted (most likely, the location of the
1: 	 * row in the underlying heap).  For an UPDATE, the row consists of
1: 	 * the key of the row to be updated plus the updated columns.  For
1: 	 * an INSERT, the row consists of the new column values to be
1: 	 * inserted, with no key (the system generates a key).
1: 	 *
1: 	 * The parser doesn't know anything about keys, so the columns
1: 	 * representing the keys will be added after parsing (perhaps in
1: 	 * the binding phase?).
1: 	 *
0: 	 * RESOLVE: This is public so RepDeleteNode can see it. Perhaps it should
0: 	 * hava a public accessor function.
1: 	 */
0: 	public ResultSetNode	resultSet;
1: 
1: 	/**
0: 	 * Initializer for a DMLStatementNode
1: 	 *
0: 	 * @param resultSet	A ResultSetNode for the result set of the
0: 	 *			DML statement
1: 	 */
1: 
0: 	public void init(Object resultSet)
1: 	{
0: 		this.resultSet = (ResultSetNode) resultSet;
1: 	}
1: 
1: 	/**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 			if (resultSet != null)
1: 			{
1: 				printLabel(depth, "resultSet: ");
1: 				resultSet.treePrint(depth + 1);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the ResultSetNode from this DML Statement.
1: 	 * (Useful for view resolution after parsing the view definition.)
1: 	 *
1: 	 * @return ResultSetNode	The ResultSetNode from this DMLStatementNode.
1: 	 */
0: 	public ResultSetNode getResultSetNode()
1: 	{
1: 		return resultSet;
1: 	}
1: 
1: 	/**
1: 	 * Bind this DMLStatementNode.  This means looking up tables and columns and
1: 	 * getting their types, and figuring out the result types of all
1: 	 * expressions, as well as doing view resolution, permissions checking,
1: 	 * etc.
1: 	 *
1: 	 * @param dataDictionary	The DataDictionary to use to look up
1: 	 *				columns, tables, etc.
1: 	 *
1: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode bind(DataDictionary dataDictionary)
1: 					 throws StandardException
1: 	{
1: 		/*
1: 		** Bind the tables before binding the expressions, so we can
1: 		** use the results of table binding to look up columns.
1: 		*/
1: 		bindTables(dataDictionary);
1: 
1: 		/* Bind the expressions */
1: 		bindExpressions();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Bind only the underlying ResultSets with tables.  This is necessary for
1: 	 * INSERT, where the binding order depends on the underlying ResultSets.
1: 	 * This means looking up tables and columns and
1: 	 * getting their types, and figuring out the result types of all
1: 	 * expressions, as well as doing view resolution, permissions checking,
1: 	 * etc.
1: 	 *
1: 	 * @param dataDictionary	The DataDictionary to use to look up
1: 	 *				columns, tables, etc.
1: 	 *
1: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode bindResultSetsWithTables(DataDictionary dataDictionary)
1: 					 throws StandardException
1: 	{
1: 		/* Okay to bindly bind the tables, since ResultSets without tables
1: 		 * know to handle the call.
1: 		 */
1: 		bindTables(dataDictionary);
1: 
1: 		/* Bind the expressions in the underlying ResultSets with tables */
1: 		bindExpressionsWithTables();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Bind the tables in this DML statement.
1: 	 *
1: 	 * @param dataDictionary	The data dictionary to use to look up the tables
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	protected void bindTables(DataDictionary dataDictionary)
1: 			throws StandardException
1: 	{
1: 		/* Bind the tables in the resultSet 
1: 		 * (DMLStatementNode is above all ResultSetNodes, so table numbering
1: 		 * will begin at 0.)
1: 		 * In case of referential action on delete , the table numbers can be
1: 		 * > 0 because the nodes are create for dependent tables also in the 
1: 		 * the same context.
1: 		 */
1: 
0: 		resultSet = resultSet.bindNonVTITables(
0: 						dataDictionary,
0: 						(FromList) getNodeFactory().getNode(
0: 							C_NodeTypes.FROM_LIST,
0: 							getNodeFactory().doJoinOrderOptimization(),
0: 							getContextManager()));
0: 		resultSet = resultSet.bindVTITables(
0: 						(FromList) getNodeFactory().getNode(
0: 							C_NodeTypes.FROM_LIST,
0: 							getNodeFactory().doJoinOrderOptimization(),
0: 							getContextManager()));
1: 	}
1: 
1: 	/**
1: 	 * Bind the expressions in this DML statement.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	protected void bindExpressions()
1: 			throws StandardException
1: 	{
0: 		FromList fromList = (FromList) getNodeFactory().getNode(
0: 								C_NodeTypes.FROM_LIST,
0: 								getNodeFactory().doJoinOrderOptimization(),
0: 								getContextManager());
1: 
1: 		/* Bind the expressions under the resultSet */
1: 		resultSet.bindExpressions(fromList);
1: 
1: 		/* Verify that all underlying ResultSets reclaimed their FromList */
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(fromList.size() == 0,
1: 			"fromList.size() is expected to be 0, not " + fromList.size() +
1: 			" on return from RS.bindExpressions()");
1: 	}
1: 
1: 	/**
1: 	 * Bind the expressions in the underlying ResultSets with tables.
1: 	 *
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	protected void bindExpressionsWithTables()
1: 			throws StandardException
1: 	{
0: 		FromList fromList = (FromList) getNodeFactory().getNode(
0: 								C_NodeTypes.FROM_LIST,
0: 								getNodeFactory().doJoinOrderOptimization(),
0: 								getContextManager());
1: 
1: 		/* Bind the expressions under the resultSet */
1: 		resultSet.bindExpressionsWithTables(fromList);
1: 
1: 		/* Verify that all underlying ResultSets reclaimed their FromList */
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(fromList.size() == 0,
1: 			"fromList.size() is expected to be 0, not " + fromList.size() +
1: 			" on return from RS.bindExpressions()");
1: 	}
1: 
1: 	/**
1: 	 * Returns the type of activation this class
1: 	 * generates.
1: 	 * 
1: 	 * @return either (NEED_ROW_ACTIVATION | NEED_PARAM_ACTIVATION) or
1: 	 *			(NEED_ROW_ACTIVATION) depending on params
1: 	 *
1: 	 */
1: 	int activationKind()
1: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
1: 		/*
1: 		** We need rows for all types of DML activations.  We need parameters
1: 		** only for those that have parameters.
1: 		*/
0: 		if (parameterList != null && parameterList.size() > 0)
1: 		{
1: 			return StatementNode.NEED_PARAM_ACTIVATION;
1: 		}
1: 		else
1: 		{
1: 			return StatementNode.NEED_ROW_ACTIVATION;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Optimize a DML statement (which is the only type of statement that
1: 	 * should need optimizing, I think). This method over-rides the one
1: 	 * in QueryTreeNode.
1: 	 *
1: 	 * This method takes a bound tree, and returns an optimized tree.
1: 	 * It annotates the bound tree rather than creating an entirely
1: 	 * new tree.
1: 	 *
1: 	 * Throws an exception if the tree is not bound, or if the binding
1: 	 * is out of date.
1: 	 *
0: 	 * @return	An optimized QueryTree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode optimize() throws StandardException
1: 	{
1: 		resultSet = resultSet.preprocess(getCompilerContext().getNumTables(),
1: 										 null,
1: 										 (FromList) null);
1: 		resultSet = resultSet.optimize(getDataDictionary(), null, 1.0d);
1: 
1: 		resultSet = resultSet.modifyAccessPaths();
1: 
1: 		/* If this is a cursor, then we
1: 		 * need to generate a new ResultSetNode to enable the scrolling
1: 		 * on top of the tree before modifying the access paths.
1: 		 */
1: 		if (this instanceof CursorNode)
1: 		{
1: 			ResultColumnList				siRCList;
1: 			ResultColumnList				childRCList;
1: 			ResultSetNode					siChild = resultSet;
1: 
1: 			/* We get a shallow copy of the ResultColumnList and its 
1: 			 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
1: 			 */
1: 			siRCList = resultSet.getResultColumns();
1: 			childRCList = siRCList.copyListAndObjects();
1: 			resultSet.setResultColumns(childRCList);
1: 
1: 			/* Replace ResultColumn.expression with new VirtualColumnNodes
1: 			 * in the ScrollInsensitiveResultSetNode's ResultColumnList.  (VirtualColumnNodes include
1: 			 * pointers to source ResultSetNode, this, and source ResultColumn.)
1: 			 */
1: 			siRCList.genVirtualColumnNodes(resultSet, childRCList);
1: 
1: 			/* Finally, we create the new ScrollInsensitiveResultSetNode */
0: 			resultSet = (ResultSetNode) getNodeFactory().
0: 							getNode(
0: 								C_NodeTypes.SCROLL_INSENSITIVE_RESULT_SET_NODE,
0: 								resultSet, 
0: 								siRCList,
1: 								null,
0: 								getContextManager());
1: 			// Propagate the referenced table map if it's already been created
1: 			if (siChild.getReferencedTableMap() != null)
1: 			{
1: 				resultSet.setReferencedTableMap((JBitSet) siChild.getReferencedTableMap().clone());
1: 			}
1: 		}
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Make a ResultDescription for use in a PreparedStatement.
1: 	 *
1: 	 * ResultDescriptions are visible to JDBC only for cursor statements.
1: 	 * For other types of statements, they are only used internally to
1: 	 * get descriptions of the base tables being affected.  For example,
1: 	 * for an INSERT statement, the ResultDescription describes the
1: 	 * rows in the table being inserted into, which is useful when
1: 	 * the values being inserted are of a different type or length
1: 	 * than the columns in the base table.
1: 	 *
0: 	 * @param name	The name of the cursor, if any
1: 	 *
1: 	 * @return	A ResultDescription for this DML statement
1: 	 */
1: 
1: 	public ResultDescription makeResultDescription()
1: 	{
0: 		ExecutionContext ec = (ExecutionContext) getContextManager().getContext(
0: 			ExecutionContext.CONTEXT_ID);
0: 	    ResultColumnDescriptor[] colDescs = resultSet.makeResultDescriptors(ec);
1: 		String statementType = statementToString();
1: 
0: 	    return ec.getExecutionFactory().getResultDescription(colDescs, statementType );
1: 	}
1: 
1: 	/**
1: 	 * Generate the code to create the ParameterValueSet, if necessary,
1: 	 * when constructing the activation.  Also generate the code to call
1: 	 * a method that will throw an exception if we try to execute without
1: 	 * all the parameters being set.
1: 	 * 
1: 	 * @param acb	The ActivationClassBuilder for the class we're building
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
1: 	void generateParameterValueSet(ActivationClassBuilder acb)
1: 		throws StandardException
1: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
1: 		int	numberOfParameters = (parameterList == null) ? 0 : parameterList.size();
1: 
1: 		if (numberOfParameters <= 0)
1: 			return;
1: 
0: 			ParameterNode.generateParameterValueSet
1: 				( acb, numberOfParameters, parameterList);
1: 	}
1: 
1: 	/*
0: 	** When all other generation is done for the statement,
0: 	** we need to ensure all of the parameters have been touched.
1: 	*
0: 	*	@param	acb				ActivationClassBuilder
1: 	*
1: 	*/
0: 	void generateParameterHolders(ActivationClassBuilder acb) 
1: 		throws StandardException
1: 	{
0: 		Vector pList = getCompilerContext().getParameterList();
0: 		if (pList.size() <= 0)
1: 			return;
1: 
0: 		ParameterNode.generateParameterHolders( acb,  pList);
1: 			
1: 	}
1: 
1: 	/**
1: 	 * A read statement is atomic (DMLMod overrides us) if there
1: 	 * are no work units, and no SELECT nodes, or if its SELECT nodes 
1: 	 * are all arguments to a function.  This is admittedly
1: 	 * a bit simplistic, what if someone has: <pre>
1: 	 * 	VALUES myfunc(SELECT max(c.commitFunc()) FROM T) 
1: 	 * </pre>
1: 	 * but we aren't going too far out of our way to
1: 	 * catch every possible wierd case.  We basically
1: 	 * want to be permissive w/o allowing someone to partially
1: 	 * commit a write. 
1: 	 * 
1: 	 * @return true if the statement is atomic
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */	
1: 	public boolean isAtomic() throws StandardException
1: 	{
1: 		/*
1: 		** If we have a FromBaseTable then we have
1: 		** a SELECT, so we want to consider ourselves
1: 		** atomic.  Don't drill below StaticMethodCallNodes
1: 		** to allow a SELECT in an argument to a method
1: 		** call that can be atomic.
1: 		*/
1: 		HasNodeVisitor visitor = new HasNodeVisitor(FromBaseTable.class, StaticMethodCallNode.class);
1: 													
1: 		this.accept(visitor);
1: 		if (visitor.hasNode())
1: 		{
1: 			return true;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
1: 	 * 
1: 	 * @param v the visitor
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	public Visitable accept(Visitor v) 
1: 		throws StandardException
1: 	{
0: 		if (v.skipChildren(this))
1: 		{
0: 			return v.visit(this);
1: 		}
1: 
0: 		if (resultSet != null && !v.stopTraversal())
1: 		{
1: 			resultSet = (ResultSetNode)resultSet.accept(v);
1: 		}
1: 
1: 		return this;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.Authorizer;
/////////////////////////////////////////////////////////////////////////
1: 		// We just need select privilege on most columns and tables
1: 		getCompilerContext().pushCurrentPrivType(getPrivType());
1: 		try {
0: 			/*
0: 			** Bind the tables before binding the expressions, so we can
0: 			** use the results of table binding to look up columns.
0: 			*/
0: 			bindTables(dataDictionary);
0: 			/* Bind the expressions */
0: 			bindExpressions();
0: 		}
1: 		finally
0: 		{
1: 			getCompilerContext().popCurrentPrivType();
0: 		}
/////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
1: 	 * Return default privilege needed for this node. Other DML nodes can override
1: 	 * this method to set their own default privilege.
0: 	 *
1: 	 * @return true if the statement is atomic
0: 	 */
1: 	int getPrivType()
0: 	{
1: 		return Authorizer.SELECT_PRIV;
0: 	}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ParameterValueSet;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: 
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.Vector;
0: 
0: /**
0:  * A DMLStatementNode represents any type of DML statement: a cursor declaration,
0:  * an INSERT statement, and UPDATE statement, or a DELETE statement.  All DML
0:  * statements have result sets, but they do different things with them.  A
0:  * SELECT statement sends its result set to the client, an INSERT statement
0:  * inserts its result set into a table, a DELETE statement deletes from a
0:  * table the rows corresponding to the rows in its result set, and an UPDATE
0:  * statement updates the rows in a base table corresponding to the rows in its
0:  * result set.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public abstract class DMLStatementNode extends StatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * The result set is the rows that result from running the
0: 	 * statement.  What this means for SELECT statements is fairly obvious.
0: 	 * For a DELETE, there is one result column representing the
0: 	 * key of the row to be deleted (most likely, the location of the
0: 	 * row in the underlying heap).  For an UPDATE, the row consists of
0: 	 * the key of the row to be updated plus the updated columns.  For
0: 	 * an INSERT, the row consists of the new column values to be
0: 	 * inserted, with no key (the system generates a key).
0: 	 *
0: 	 * The parser doesn't know anything about keys, so the columns
0: 	 * representing the keys will be added after parsing (perhaps in
0: 	 * the binding phase?).
0: 	 *
0: 	 * RESOLVE: This is public so RepDeleteNode can see it. Perhaps it should
0: 	 * hava a public accessor function.
0: 	 */
0: 	public ResultSetNode	resultSet;
0: 
0: 	/**
0: 	 * Initializer for a DMLStatementNode
0: 	 *
0: 	 * @param resultSet	A ResultSetNode for the result set of the
0: 	 *			DML statement
0: 	 */
0: 
0: 	public void init(Object resultSet)
0: 	{
0: 		this.resultSet = (ResultSetNode) resultSet;
0: 	}
0: 
0: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
0: 	 * how tree printing is supposed to work.
0: 	 *
0: 	 * @param depth		The depth of this node in the tree
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void printSubNodes(int depth)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			super.printSubNodes(depth);
0: 			if (resultSet != null)
0: 			{
0: 				printLabel(depth, "resultSet: ");
0: 				resultSet.treePrint(depth + 1);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the ResultSetNode from this DML Statement.
0: 	 * (Useful for view resolution after parsing the view definition.)
0: 	 *
0: 	 * @return ResultSetNode	The ResultSetNode from this DMLStatementNode.
0: 	 */
0: 	public ResultSetNode getResultSetNode()
0: 	{
0: 		return resultSet;
0: 	}
0: 
0: 	/**
0: 	 * Bind this DMLStatementNode.  This means looking up tables and columns and
0: 	 * getting their types, and figuring out the result types of all
0: 	 * expressions, as well as doing view resolution, permissions checking,
0: 	 * etc.
0: 	 *
0: 	 * @param dataDictionary	The DataDictionary to use to look up
0: 	 *				columns, tables, etc.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode bind(DataDictionary dataDictionary)
0: 					 throws StandardException
0: 	{
0: 		/*
0: 		** Bind the tables before binding the expressions, so we can
0: 		** use the results of table binding to look up columns.
0: 		*/
0: 		bindTables(dataDictionary);
0: 
0: 		/* Bind the expressions */
0: 		bindExpressions();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind only the underlying ResultSets with tables.  This is necessary for
0: 	 * INSERT, where the binding order depends on the underlying ResultSets.
0: 	 * This means looking up tables and columns and
0: 	 * getting their types, and figuring out the result types of all
0: 	 * expressions, as well as doing view resolution, permissions checking,
0: 	 * etc.
0: 	 *
0: 	 * @param dataDictionary	The DataDictionary to use to look up
0: 	 *				columns, tables, etc.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode bindResultSetsWithTables(DataDictionary dataDictionary)
0: 					 throws StandardException
0: 	{
0: 		/* Okay to bindly bind the tables, since ResultSets without tables
0: 		 * know to handle the call.
0: 		 */
0: 		bindTables(dataDictionary);
0: 
0: 		/* Bind the expressions in the underlying ResultSets with tables */
0: 		bindExpressionsWithTables();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind the tables in this DML statement.
0: 	 *
0: 	 * @param dataDictionary	The data dictionary to use to look up the tables
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	protected void bindTables(DataDictionary dataDictionary)
0: 			throws StandardException
0: 	{
0: 		/* Bind the tables in the resultSet 
0: 		 * (DMLStatementNode is above all ResultSetNodes, so table numbering
0: 		 * will begin at 0.)
0: 		 * In case of referential action on delete , the table numbers can be
0: 		 * > 0 because the nodes are create for dependent tables also in the 
0: 		 * the same context.
0: 		 */
0: 
0: 		resultSet = resultSet.bindNonVTITables(
0: 						dataDictionary,
0: 						(FromList) getNodeFactory().getNode(
0: 							C_NodeTypes.FROM_LIST,
0: 							getNodeFactory().doJoinOrderOptimization(),
0: 							getContextManager()));
0: 		resultSet = resultSet.bindVTITables(
0: 						(FromList) getNodeFactory().getNode(
0: 							C_NodeTypes.FROM_LIST,
0: 							getNodeFactory().doJoinOrderOptimization(),
0: 							getContextManager()));
0: 	}
0: 
0: 	/**
0: 	 * Bind the expressions in this DML statement.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	protected void bindExpressions()
0: 			throws StandardException
0: 	{
0: 		FromList fromList = (FromList) getNodeFactory().getNode(
0: 								C_NodeTypes.FROM_LIST,
0: 								getNodeFactory().doJoinOrderOptimization(),
0: 								getContextManager());
0: 
0: 		/* Bind the expressions under the resultSet */
0: 		resultSet.bindExpressions(fromList);
0: 
0: 		/* Verify that all underlying ResultSets reclaimed their FromList */
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(fromList.size() == 0,
0: 			"fromList.size() is expected to be 0, not " + fromList.size() +
0: 			" on return from RS.bindExpressions()");
0: 	}
0: 
0: 	/**
0: 	 * Bind the expressions in the underlying ResultSets with tables.
0: 	 *
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	protected void bindExpressionsWithTables()
0: 			throws StandardException
0: 	{
0: 		FromList fromList = (FromList) getNodeFactory().getNode(
0: 								C_NodeTypes.FROM_LIST,
0: 								getNodeFactory().doJoinOrderOptimization(),
0: 								getContextManager());
0: 
0: 		/* Bind the expressions under the resultSet */
0: 		resultSet.bindExpressionsWithTables(fromList);
0: 
0: 		/* Verify that all underlying ResultSets reclaimed their FromList */
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(fromList.size() == 0,
0: 			"fromList.size() is expected to be 0, not " + fromList.size() +
0: 			" on return from RS.bindExpressions()");
0: 	}
0: 
0: 	/**
0: 	 * Returns the type of activation this class
0: 	 * generates.
0: 	 * 
0: 	 * @return either (NEED_ROW_ACTIVATION | NEED_PARAM_ACTIVATION) or
0: 	 *			(NEED_ROW_ACTIVATION) depending on params
0: 	 *
0: 	 */
0: 	int activationKind()
0: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
0: 		/*
0: 		** We need rows for all types of DML activations.  We need parameters
0: 		** only for those that have parameters.
0: 		*/
0: 		if (parameterList != null && parameterList.size() > 0)
0: 		{
0: 			return StatementNode.NEED_PARAM_ACTIVATION;
0: 		}
0: 		else
0: 		{
0: 			return StatementNode.NEED_ROW_ACTIVATION;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Optimize a DML statement (which is the only type of statement that
0: 	 * should need optimizing, I think). This method over-rides the one
0: 	 * in QueryTreeNode.
0: 	 *
0: 	 * This method takes a bound tree, and returns an optimized tree.
0: 	 * It annotates the bound tree rather than creating an entirely
0: 	 * new tree.
0: 	 *
0: 	 * Throws an exception if the tree is not bound, or if the binding
0: 	 * is out of date.
0: 	 *
0: 	 * @return	An optimized QueryTree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode optimize() throws StandardException
0: 	{
0: 		resultSet = resultSet.preprocess(getCompilerContext().getNumTables(),
0: 										 null,
0: 										 (FromList) null);
0: 		resultSet = resultSet.optimize(getDataDictionary(), null, 1.0d);
0: 
0: 		resultSet = resultSet.modifyAccessPaths();
0: 
0: 		/* If this is a cursor, then we
0: 		 * need to generate a new ResultSetNode to enable the scrolling
0: 		 * on top of the tree before modifying the access paths.
0: 		 */
0: 		if (this instanceof CursorNode)
0: 		{
0: 			ResultColumnList				siRCList;
0: 			ResultColumnList				childRCList;
0: 			ResultSetNode					siChild = resultSet;
0: 
0: 			/* We get a shallow copy of the ResultColumnList and its 
0: 			 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
0: 			 */
0: 			siRCList = resultSet.getResultColumns();
0: 			childRCList = siRCList.copyListAndObjects();
0: 			resultSet.setResultColumns(childRCList);
0: 
0: 			/* Replace ResultColumn.expression with new VirtualColumnNodes
0: 			 * in the ScrollInsensitiveResultSetNode's ResultColumnList.  (VirtualColumnNodes include
0: 			 * pointers to source ResultSetNode, this, and source ResultColumn.)
0: 			 */
0: 			siRCList.genVirtualColumnNodes(resultSet, childRCList);
0: 
0: 			/* Finally, we create the new ScrollInsensitiveResultSetNode */
0: 			resultSet = (ResultSetNode) getNodeFactory().
0: 							getNode(
0: 								C_NodeTypes.SCROLL_INSENSITIVE_RESULT_SET_NODE,
0: 								resultSet, 
0: 								siRCList,
0: 								null,
0: 								getContextManager());
0: 			// Propagate the referenced table map if it's already been created
0: 			if (siChild.getReferencedTableMap() != null)
0: 			{
0: 				resultSet.setReferencedTableMap((JBitSet) siChild.getReferencedTableMap().clone());
0: 			}
0: 		}
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Make a ResultDescription for use in a PreparedStatement.
0: 	 *
0: 	 * ResultDescriptions are visible to JDBC only for cursor statements.
0: 	 * For other types of statements, they are only used internally to
0: 	 * get descriptions of the base tables being affected.  For example,
0: 	 * for an INSERT statement, the ResultDescription describes the
0: 	 * rows in the table being inserted into, which is useful when
0: 	 * the values being inserted are of a different type or length
0: 	 * than the columns in the base table.
0: 	 *
0: 	 * @param name	The name of the cursor, if any
0: 	 *
0: 	 * @return	A ResultDescription for this DML statement
0: 	 */
0: 
0: 	public ResultDescription makeResultDescription()
0: 	{
0: 		ExecutionContext ec = (ExecutionContext) getContextManager().getContext(
0: 			ExecutionContext.CONTEXT_ID);
0: 	    ResultColumnDescriptor[] colDescs = resultSet.makeResultDescriptors(ec);
0: 		String statementType = statementToString();
0: 
0: 	    return ec.getExecutionFactory().getResultDescription(colDescs, statementType );
0: 	}
0: 
0: 	/**
0: 	 * Generate the code to create the ParameterValueSet, if necessary,
0: 	 * when constructing the activation.  Also generate the code to call
0: 	 * a method that will throw an exception if we try to execute without
0: 	 * all the parameters being set.
0: 	 * 
0: 	 * @param acb	The ActivationClassBuilder for the class we're building
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	void generateParameterValueSet(ActivationClassBuilder acb)
0: 		throws StandardException
0: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
0: 		int	numberOfParameters = (parameterList == null) ? 0 : parameterList.size();
0: 
0: 		if (numberOfParameters <= 0)
0: 			return;
0: 
0: 			ParameterNode.generateParameterValueSet
0: 				( acb, numberOfParameters, parameterList);
0: 	}
0: 
0: 	/*
0: 	** When all other generation is done for the statement,
0: 	** we need to ensure all of the parameters have been touched.
0: 	*
0: 	*	@param	acb				ActivationClassBuilder
0: 	*
0: 	*/
0: 	void generateParameterHolders(ActivationClassBuilder acb) 
0: 		throws StandardException
0: 	{
0: 		Vector pList = getCompilerContext().getParameterList();
0: 		if (pList.size() <= 0)
0: 			return;
0: 
0: 		ParameterNode.generateParameterHolders( acb,  pList);
0: 			
0: 	}
0: 
0: 	/**
0: 	 * A read statement is atomic (DMLMod overrides us) if there
0: 	 * are no work units, and no SELECT nodes, or if its SELECT nodes 
0: 	 * are all arguments to a function.  This is admittedly
0: 	 * a bit simplistic, what if someone has: <pre>
0: 	 * 	VALUES myfunc(SELECT max(c.commitFunc()) FROM T) 
0: 	 * </pre>
0: 	 * but we aren't going too far out of our way to
0: 	 * catch every possible wierd case.  We basically
0: 	 * want to be permissive w/o allowing someone to partially
0: 	 * commit a write. 
0: 	 * 
0: 	 * @return true if the statement is atomic
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */	
0: 	public boolean isAtomic() throws StandardException
0: 	{
0: 		/*
0: 		** If we have a FromBaseTable then we have
0: 		** a SELECT, so we want to consider ourselves
0: 		** atomic.  Don't drill below StaticMethodCallNodes
0: 		** to allow a SELECT in an argument to a method
0: 		** call that can be atomic.
0: 		*/
0: 		HasNodeVisitor visitor = new HasNodeVisitor(FromBaseTable.class, StaticMethodCallNode.class);
0: 													
0: 		this.accept(visitor);
0: 		if (visitor.hasNode())
0: 		{
0: 			return true;
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
0: 	 * 
0: 	 * @param v the visitor
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public Visitable accept(Visitor v) 
0: 		throws StandardException
0: 	{
0: 		if (v.skipChildren(this))
0: 		{
0: 			return v.visit(this);
0: 		}
0: 
0: 		if (resultSet != null && !v.stopTraversal())
0: 		{
0: 			resultSet = (ResultSetNode)resultSet.accept(v);
0: 		}
0: 
0: 		return this;
0: 	}
0: }
============================================================================