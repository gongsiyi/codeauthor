1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.MergeScan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.Vector;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: import org.apache.derby.iapi.store.access.SortObserver;
1:eac0369: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:fa09146: // For JavaDoc references (i.e. @see)
1:fa09146: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
1:fa09146: 
2:eac0369: /**
1:eac0369: 	A sort scan that is capable of merging as many merge runs
1:eac0369: 	as will fit in the passed-in sort buffer.
1:eac0369: **/
1:eac0369: 
1:eac0369: public class MergeScan extends SortScan
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	The sort buffer we will use.
1:eac0369: 	**/
1:eac0369: 	protected SortBuffer sortBuffer;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The merge runs.
1:eac0369: 	**/
1:7e7a589: 	protected Vector<Long> mergeRuns;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Array of scan controllers for the merge runs.
1:eac0369: 	Entries in the array become null as the last
1:eac0369: 	row is pulled out and the scan is closed.
1:eac0369: 	**/
1:eac0369: 	protected StreamContainerHandle openScans[];
1:eac0369: 
1:eac0369: 	private SortObserver sortObserver;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Constructors.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	MergeScan(
1:eac0369:     MergeSort           sort, 
1:eac0369:     TransactionManager  tran,
1:eac0369:     SortBuffer          sortBuffer, 
1:7e7a589:     Vector<Long>              mergeRuns,
1:eac0369: 	SortObserver		sortObserver,
1:eac0369:     boolean             hold)
1:eac0369: 	{
1:eac0369: 		super(sort, tran, hold);
1:eac0369: 		this.sortBuffer = sortBuffer;
1:eac0369: 		this.mergeRuns  = mergeRuns;
1:eac0369:         this.tran       = tran;
1:eac0369: 		this.sortObserver = sortObserver;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of MergeSortScan
1:eac0369: 	 */
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Move to the next position in the scan.
1:fa09146: 	@see org.apache.derby.iapi.store.access.ScanController#next
1:eac0369:     **/
1:eac0369:     public boolean next()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		current = sortBuffer.removeFirst();
1:eac0369: 		if (current != null)
1:eac0369: 			mergeARow(sortBuffer.getLastAux());
1:eac0369: 		return (current != null);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Close the scan.
1:fa09146: 	@see org.apache.derby.iapi.store.access.ScanController#close
1:eac0369:     **/
1:eac0369:     public void close()
1:eac0369: 	{
1:eac0369: 		if (openScans != null)
1:eac0369: 		{
1:eac0369: 			for (int i = 0; i < openScans.length; i++)
1:eac0369: 			{
1:eac0369: 				if (openScans[i] != null)
1:eac0369:                 {
1:eac0369: 					openScans[i].close();
1:eac0369:                 }
1:eac0369: 				openScans[i] = null;
1:eac0369: 			}
1:eac0369: 			openScans = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Hand sort buffer and remaining merge runs to sort.
1:eac0369: 		if (super.sort != null)
1:eac0369: 		{
1:eac0369: 			sort.doneScanning(this, sortBuffer, mergeRuns);
1:eac0369: 			sortBuffer = null;
1:eac0369: 			mergeRuns = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Sets sort to null
1:eac0369: 		super.close();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Close the scan.
1:eac0369: 	@see ScanManager#closeForEndTransaction
1:eac0369:     **/
1:eac0369:     public boolean closeForEndTransaction(boolean closeHeldScan)
1:eac0369: 	{
1:eac0369:         if (!hold || closeHeldScan)
1:eac0369:         {
1:eac0369:             close();
1:eac0369:             return(true);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(false);
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of MergeScan
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Initialize the scan, returning false if there
1:eac0369: 	was some error.
1:eac0369: 	**/
1:eac0369: 	public boolean init(TransactionManager tran)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			// We really expect to have at least one
1:eac0369: 			// merge run.
1:eac0369: 			SanityManager.ASSERT(mergeRuns != null);
1:eac0369: 			SanityManager.ASSERT(mergeRuns.size() > 0);
1:eac0369: 
1:eac0369: 			// This sort scan also expects that the
1:eac0369: 			// caller has ensured that the sort buffer
1:eac0369: 			// capacity will hold a row from all the
1:eac0369: 			// merge runs.
1:eac0369: 			SanityManager.ASSERT(sortBuffer.capacity() >= mergeRuns.size());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Clear the sort buffer.
1:eac0369: 		sortBuffer.reset();
1:eac0369: 
1:eac0369: 		// Create an array to hold a scan controller
1:eac0369: 		// for each merge run.
1:eac0369: 		openScans = new StreamContainerHandle[mergeRuns.size()];
1:eac0369: 		if (openScans == null)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		// Open a scan on each merge run.
1:eac0369: 		int scanindex = 0;
1:7e7a589: 		Enumeration<Long> e = mergeRuns.elements();
1:eac0369: 		while (e.hasMoreElements())
1:eac0369: 		{
1:eac0369: 			// get the container id
1:7e7a589: 			long id = (e.nextElement()).longValue();
1:eac0369: 
1:eac0369: 			Transaction rawTran = tran.getRawStoreXact();  // get raw transaction
1:eac0369: 			int segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
1:eac0369: 			openScans[scanindex++] = 
1:eac0369:                 rawTran.openStreamContainer(segmentId, id, hold);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Load the initial rows.
1:eac0369: 		for (scanindex = 0; scanindex < openScans.length; scanindex++)
1:eac0369: 			mergeARow(scanindex);
1:eac0369: 
1:eac0369: 		// Success!
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Insert rows while we keep getting duplicates 
1:eac0369: 	from the merge run whose scan is in the
1:eac0369: 	open scan array entry indexed by scanindex.
1:eac0369: 	**/
1:eac0369: 	void mergeARow(int scanindex)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			// Unless there's a bug, the scan index will refer
1:eac0369: 			// to an open scan.  That's because we never put
1:eac0369: 			// a scan index for a closed scan into the sort
1:eac0369: 			// buffer (via setNextAux).
1:eac0369: 			SanityManager.ASSERT(openScans[scanindex] != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor[] row;
1:eac0369: 
1:eac0369: 		// Read rows from the merge run and stuff them into the
1:eac0369: 		// sort buffer for as long as we encounter duplicates.
1:eac0369: 		do
1:eac0369: 		{
1:eac0369: 			row = sortObserver.getArrayClone();
1:eac0369: 
1:eac0369: 			// Fetch the row from the merge run.
1:eac0369: 			if (!openScans[scanindex].fetchNext(row))
1:eac0369: 			{
1:eac0369:                 // If we're out of rows in the merge run, close the scan.
1:eac0369:                 
1:eac0369: 				openScans[scanindex].close();
1:eac0369: 				openScans[scanindex] = null;
1:eac0369: 				return;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// Save the index of this merge run with
1:eac0369: 			// the row we're putting in the sort buffer.
1:eac0369: 			sortBuffer.setNextAux(scanindex);
1:eac0369: 		}
1:eac0369: 		while (sortBuffer.insert(row) == SortBuffer.INSERT_DUPLICATE);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7e7a589
/////////////////////////////////////////////////////////////////////////
1: 	protected Vector<Long> mergeRuns;
/////////////////////////////////////////////////////////////////////////
1:     Vector<Long>              mergeRuns,
/////////////////////////////////////////////////////////////////////////
1: 		Enumeration<Long> e = mergeRuns.elements();
1: 			long id = (e.nextElement()).longValue();
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
1: // For JavaDoc references (i.e. @see)
1: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	@see org.apache.derby.iapi.store.access.ScanController#next
/////////////////////////////////////////////////////////////////////////
1: 	@see org.apache.derby.iapi.store.access.ScanController#close
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.MergeScan
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: import java.util.Enumeration;
1: import java.util.Vector;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1: 	A sort scan that is capable of merging as many merge runs
1: 	as will fit in the passed-in sort buffer.
1: **/
1: 
1: public class MergeScan extends SortScan
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	The sort buffer we will use.
1: 	**/
1: 	protected SortBuffer sortBuffer;
1: 
1: 	/**
1: 	The merge runs.
1: 	**/
0: 	protected Vector mergeRuns;
1: 
1: 	/**
1: 	Array of scan controllers for the merge runs.
1: 	Entries in the array become null as the last
1: 	row is pulled out and the scan is closed.
1: 	**/
1: 	protected StreamContainerHandle openScans[];
1: 
1: 	private SortObserver sortObserver;
1: 
1: 	/*
1: 	 * Constructors.
1: 	 */
1: 
1: 	MergeScan(
1:     MergeSort           sort, 
1:     TransactionManager  tran,
1:     SortBuffer          sortBuffer, 
0:     Vector              mergeRuns,
1: 	SortObserver		sortObserver,
1:     boolean             hold)
1: 	{
1: 		super(sort, tran, hold);
1: 		this.sortBuffer = sortBuffer;
1: 		this.mergeRuns  = mergeRuns;
1:         this.tran       = tran;
1: 		this.sortObserver = sortObserver;
1: 	}
1: 
1: 	/*
1: 	 * Methods of MergeSortScan
1: 	 */
1: 
1:     /**
1:     Move to the next position in the scan.
0: 	@see ScanController#next
1:     **/
1:     public boolean next()
1: 		throws StandardException
1: 	{
1: 		current = sortBuffer.removeFirst();
1: 		if (current != null)
1: 			mergeARow(sortBuffer.getLastAux());
1: 		return (current != null);
1: 	}
1: 
1:     /**
1:     Close the scan.
0: 	@see ScanController#close
1:     **/
1:     public void close()
1: 	{
1: 		if (openScans != null)
1: 		{
1: 			for (int i = 0; i < openScans.length; i++)
1: 			{
1: 				if (openScans[i] != null)
1:                 {
1: 					openScans[i].close();
1:                 }
1: 				openScans[i] = null;
1: 			}
1: 			openScans = null;
1: 		}
1: 
1: 		// Hand sort buffer and remaining merge runs to sort.
1: 		if (super.sort != null)
1: 		{
1: 			sort.doneScanning(this, sortBuffer, mergeRuns);
1: 			sortBuffer = null;
1: 			mergeRuns = null;
1: 		}
1: 
1: 		// Sets sort to null
1: 		super.close();
1: 	}
1: 
1:     /**
1:     Close the scan.
1: 	@see ScanManager#closeForEndTransaction
1:     **/
1:     public boolean closeForEndTransaction(boolean closeHeldScan)
1: 	{
1:         if (!hold || closeHeldScan)
1:         {
1:             close();
1:             return(true);
1:         }
1:         else
1:         {
1:             return(false);
1:         }
1:     }
1: 
1: 	/*
1: 	 * Methods of MergeScan
1: 	 */
1: 
1: 	/**
1: 	Initialize the scan, returning false if there
1: 	was some error.
1: 	**/
1: 	public boolean init(TransactionManager tran)
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			// We really expect to have at least one
1: 			// merge run.
1: 			SanityManager.ASSERT(mergeRuns != null);
1: 			SanityManager.ASSERT(mergeRuns.size() > 0);
1: 
1: 			// This sort scan also expects that the
1: 			// caller has ensured that the sort buffer
1: 			// capacity will hold a row from all the
1: 			// merge runs.
1: 			SanityManager.ASSERT(sortBuffer.capacity() >= mergeRuns.size());
1: 		}
1: 
1: 		// Clear the sort buffer.
1: 		sortBuffer.reset();
1: 
1: 		// Create an array to hold a scan controller
1: 		// for each merge run.
1: 		openScans = new StreamContainerHandle[mergeRuns.size()];
1: 		if (openScans == null)
1: 			return false;
1: 
1: 		// Open a scan on each merge run.
1: 		int scanindex = 0;
0: 		Enumeration e = mergeRuns.elements();
1: 		while (e.hasMoreElements())
1: 		{
1: 			// get the container id
0: 			long id = ((Long) e.nextElement()).longValue();
1: 
1: 			Transaction rawTran = tran.getRawStoreXact();  // get raw transaction
1: 			int segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
1: 			openScans[scanindex++] = 
1:                 rawTran.openStreamContainer(segmentId, id, hold);
1: 		}
1: 
1: 		// Load the initial rows.
1: 		for (scanindex = 0; scanindex < openScans.length; scanindex++)
1: 			mergeARow(scanindex);
1: 
1: 		// Success!
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	Insert rows while we keep getting duplicates 
1: 	from the merge run whose scan is in the
1: 	open scan array entry indexed by scanindex.
1: 	**/
1: 	void mergeARow(int scanindex)
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			// Unless there's a bug, the scan index will refer
1: 			// to an open scan.  That's because we never put
1: 			// a scan index for a closed scan into the sort
1: 			// buffer (via setNextAux).
1: 			SanityManager.ASSERT(openScans[scanindex] != null);
1: 		}
1: 
1: 		DataValueDescriptor[] row;
1: 
1: 		// Read rows from the merge run and stuff them into the
1: 		// sort buffer for as long as we encounter duplicates.
1: 		do
1: 		{
1: 			row = sortObserver.getArrayClone();
1: 
1: 			// Fetch the row from the merge run.
1: 			if (!openScans[scanindex].fetchNext(row))
1: 			{
1:                 // If we're out of rows in the merge run, close the scan.
1:                 
1: 				openScans[scanindex].close();
1: 				openScans[scanindex] = null;
1: 				return;
1: 			}
1: 
1: 			// Save the index of this merge run with
1: 			// the row we're putting in the sort buffer.
1: 			sortBuffer.setNextAux(scanindex);
1: 		}
1: 		while (sortBuffer.insert(row) == SortBuffer.INSERT_DUPLICATE);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import java.util.Enumeration;
0: import java.util.Vector;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: /**
0: 	A sort scan that is capable of merging as many merge runs
0: 	as will fit in the passed-in sort buffer.
0: **/
0: 
0: public class MergeScan extends SortScan
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	The sort buffer we will use.
0: 	**/
0: 	protected SortBuffer sortBuffer;
0: 
0: 	/**
0: 	The merge runs.
0: 	**/
0: 	protected Vector mergeRuns;
0: 
0: 	/**
0: 	Array of scan controllers for the merge runs.
0: 	Entries in the array become null as the last
0: 	row is pulled out and the scan is closed.
0: 	**/
0: 	protected StreamContainerHandle openScans[];
0: 
0: 	private SortObserver sortObserver;
0: 
0: 	/*
0: 	 * Constructors.
0: 	 */
0: 
0: 	MergeScan(
0:     MergeSort           sort, 
0:     TransactionManager  tran,
0:     SortBuffer          sortBuffer, 
0:     Vector              mergeRuns,
0: 	SortObserver		sortObserver,
0:     boolean             hold)
0: 	{
0: 		super(sort, tran, hold);
0: 		this.sortBuffer = sortBuffer;
0: 		this.mergeRuns  = mergeRuns;
0:         this.tran       = tran;
0: 		this.sortObserver = sortObserver;
0: 	}
0: 
0: 	/*
0: 	 * Methods of MergeSortScan
0: 	 */
0: 
0:     /**
0:     Move to the next position in the scan.
0: 	@see ScanController#next
0:     **/
0:     public boolean next()
0: 		throws StandardException
0: 	{
0: 		current = sortBuffer.removeFirst();
0: 		if (current != null)
0: 			mergeARow(sortBuffer.getLastAux());
0: 		return (current != null);
0: 	}
0: 
0:     /**
0:     Close the scan.
0: 	@see ScanController#close
0:     **/
0:     public void close()
0: 	{
0: 		if (openScans != null)
0: 		{
0: 			for (int i = 0; i < openScans.length; i++)
0: 			{
0: 				if (openScans[i] != null)
0:                 {
0: 					openScans[i].close();
0:                 }
0: 				openScans[i] = null;
0: 			}
0: 			openScans = null;
0: 		}
0: 
0: 		// Hand sort buffer and remaining merge runs to sort.
0: 		if (super.sort != null)
0: 		{
0: 			sort.doneScanning(this, sortBuffer, mergeRuns);
0: 			sortBuffer = null;
0: 			mergeRuns = null;
0: 		}
0: 
0: 		// Sets sort to null
0: 		super.close();
0: 	}
0: 
0:     /**
0:     Close the scan.
0: 	@see ScanManager#closeForEndTransaction
0:     **/
0:     public boolean closeForEndTransaction(boolean closeHeldScan)
0: 	{
0:         if (!hold || closeHeldScan)
0:         {
0:             close();
0:             return(true);
0:         }
0:         else
0:         {
0:             return(false);
0:         }
0:     }
0: 
0: 	/*
0: 	 * Methods of MergeScan
0: 	 */
0: 
0: 	/**
0: 	Initialize the scan, returning false if there
0: 	was some error.
0: 	**/
0: 	public boolean init(TransactionManager tran)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			// We really expect to have at least one
0: 			// merge run.
0: 			SanityManager.ASSERT(mergeRuns != null);
0: 			SanityManager.ASSERT(mergeRuns.size() > 0);
0: 
0: 			// This sort scan also expects that the
0: 			// caller has ensured that the sort buffer
0: 			// capacity will hold a row from all the
0: 			// merge runs.
0: 			SanityManager.ASSERT(sortBuffer.capacity() >= mergeRuns.size());
0: 		}
0: 
0: 		// Clear the sort buffer.
0: 		sortBuffer.reset();
0: 
0: 		// Create an array to hold a scan controller
0: 		// for each merge run.
0: 		openScans = new StreamContainerHandle[mergeRuns.size()];
0: 		if (openScans == null)
0: 			return false;
0: 
0: 		// Open a scan on each merge run.
0: 		int scanindex = 0;
0: 		Enumeration e = mergeRuns.elements();
0: 		while (e.hasMoreElements())
0: 		{
0: 			// get the container id
0: 			long id = ((Long) e.nextElement()).longValue();
0: 
0: 			Transaction rawTran = tran.getRawStoreXact();  // get raw transaction
0: 			int segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
0: 			openScans[scanindex++] = 
0:                 rawTran.openStreamContainer(segmentId, id, hold);
0: 		}
0: 
0: 		// Load the initial rows.
0: 		for (scanindex = 0; scanindex < openScans.length; scanindex++)
0: 			mergeARow(scanindex);
0: 
0: 		// Success!
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	Insert rows while we keep getting duplicates 
0: 	from the merge run whose scan is in the
0: 	open scan array entry indexed by scanindex.
0: 	**/
0: 	void mergeARow(int scanindex)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			// Unless there's a bug, the scan index will refer
0: 			// to an open scan.  That's because we never put
0: 			// a scan index for a closed scan into the sort
0: 			// buffer (via setNextAux).
0: 			SanityManager.ASSERT(openScans[scanindex] != null);
0: 		}
0: 
0: 		DataValueDescriptor[] row;
0: 
0: 		// Read rows from the merge run and stuff them into the
0: 		// sort buffer for as long as we encounter duplicates.
0: 		do
0: 		{
0: 			row = sortObserver.getArrayClone();
0: 
0: 			// Fetch the row from the merge run.
0: 			if (!openScans[scanindex].fetchNext(row))
0: 			{
0:                 // If we're out of rows in the merge run, close the scan.
0:                 
0: 				openScans[scanindex].close();
0: 				openScans[scanindex] = null;
0: 				return;
0: 			}
0: 
0: 			// Save the index of this merge run with
0: 			// the row we're putting in the sort buffer.
0: 			sortBuffer.setNextAux(scanindex);
0: 		}
0: 		while (sortBuffer.insert(row) == SortBuffer.INSERT_DUPLICATE);
0: 	}
0: }
============================================================================