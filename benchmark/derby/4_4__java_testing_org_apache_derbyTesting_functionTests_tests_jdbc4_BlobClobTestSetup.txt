1:a4846de: /*
1:bb0c274: 
1:bb0c274:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup
1:bb0c274: 
1:6e3dbab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:    contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:    this work for additional information regarding copyright ownership.
1:6e3dbab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:    (the "License"); you may not use this file except in compliance with
1:6e3dbab:    the License.  You may obtain a copy of the License at
5:a4846de:  
1:a4846de:       http://www.apache.org/licenses/LICENSE-2.0
1:a4846de:  
1:a4846de:    Unless required by applicable law or agreed to in writing, software
1:a4846de:    distributed under the License is distributed on an "AS IS" BASIS,
1:a4846de:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a4846de:    See the License for the specific language governing permissions and
1:a4846de:    limitations under the License.
1:a4846de:  
1:a4846de:  */
1:a4846de: 
1:a4846de: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:a4846de: 
1:a4846de: import junit.extensions.TestSetup;
1:a4846de: import junit.framework.Test;
1:a4846de: 
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:13e9e78: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:a4846de: 
1:a4846de: import java.io.ByteArrayInputStream;
1:a4846de: import java.io.InputStream;
1:a4846de: import java.io.IOException;
1:a4846de: import java.io.Reader;
1:a4846de: import java.io.StringReader;
1:a4846de: import java.sql.*;
1:a4846de: 
1:a4846de: /**
1:a4846de:  * Create a table with one column for a blob and one column for a clob.
1:a4846de:  * This is shared between tests that need a blob or a clob, and is required
1:a4846de:  * because the createBlob/-Clob methods are not yet implemented.
1:a4846de:  */
1:a4846de: public class BlobClobTestSetup
1:13e9e78:     extends BaseJDBCTestSetup {
1:a4846de: 
1:a4846de:     /** Constant for accessing the row with null values. */
1:a4846de:     public static final int ID_NULLVALUES = 1;
1:a4846de:     /** Constant for accessing the row with sample values. */
1:a4846de:     public static final int ID_SAMPLEVALUES = 2;
1:c9382f0:     /**
1:c9382f0:      * ID is used to store the latest unique value for the ID column
1:c9382f0:      * Start from 3 since 1 is used for null values and 2 is used for
1:c9382f0:      * sample values.
1:c9382f0:      */
1:c9382f0:     public static int ID = 3;
1:a4846de: 
1:a4846de:     /** Blob data. */
1:a4846de:     private static final byte[] blobData = new byte[] {
1:a4846de:         0x65, 0x66, 0x67, 0x68, 0x69,
1:a4846de:         0x69, 0x68, 0x67, 0x66, 0x65
1:a4846de:     };
1:a4846de:     /** Clob data. */
1:a4846de:     private static final String clobData =
1:a4846de:         "This is a string, inserted into a CLOB";
1:a4846de:    
1:a4846de:     /**
1:a4846de:      * Create a test setup for the specified blob or clob test.
1:a4846de:      *
1:a4846de:      * @param test the test to provide setup for.
1:a4846de:      */
1:a4846de:     public BlobClobTestSetup(Test test) {
1:a4846de:         super(test);
2:a4846de:     }
1:a4846de: 
1:a4846de:     /**
1:a4846de:      * Create a table with BLOB and CLOB, so that such objects can be
1:a4846de:      * accessed/used from JDBC.
1:a4846de:      */
1:13e9e78:     protected void setUp() 
1:a4846de:         throws IOException, SQLException {
1:13e9e78:         Connection con = getConnection();
1:a4846de:         Statement stmt = con.createStatement();
1:a4846de:         stmt.execute("create table BLOBCLOB (ID int primary key, " +
1:5b41e45:                                             "BLOBDATA blob," +
1:5b41e45:                                             "CLOBDATA clob)");
1:a4846de:         stmt.execute("insert into BLOBCLOB VALUES " +
1:a4846de:                 "(" + ID_NULLVALUES + ", null, null)");
1:a4846de:         // Actual data is inserted in the getSample* methods.
1:a4846de:         stmt.execute("insert into BLOBCLOB VALUES " +
1:a4846de:                 "(" + ID_SAMPLEVALUES + ", null, null)");
1:a4846de:         stmt.close();
1:a4846de:     }
1:a4846de: 
1:a4846de:     /**
1:a4846de:      * Drop the table we created during setup.
1:13e9e78:      * @throws Exception 
1:a4846de:      */
1:13e9e78:     protected void tearDown()
1:13e9e78:         throws Exception {
1:13e9e78:         Connection con = getConnection();
1:a4846de:         Statement stmt = con.createStatement();
1:a4846de:         stmt.execute("drop table BLOBCLOB");
1:a4846de:         stmt.close();
1:13e9e78:         super.tearDown();
1:a4846de:     }
1:a4846de:     
1:a4846de:     /**
1:a4846de:      * Fetch a sample Blob.
1:a4846de:      * If this method fails, the test fails.
1:a4846de:      *
1:a4846de:      * @param con database connection to fetch data from.
1:a4846de:      * @return a sample <code>Blob</code> object.
1:a4846de:      */
1:a4846de:     public static Blob getSampleBlob(Connection con) 
2:a4846de:         throws SQLException {
1:e3e3ca3: 		InputStream blobInput = new ByteArrayInputStream(blobData, 0, blobData.length);
1:a4846de:         PreparedStatement pStmt = 
1:a4846de:             con.prepareStatement("update BLOBCLOB set BLOBDATA = ? where ID = ?");
1:a4846de:         try {
1:a4846de:             blobInput.reset();
1:a4846de:         } catch (IOException ioe) {
1:a4846de:             fail("Failed to reset blob input stream: " + ioe.getMessage());
1:a4846de:         }
1:a4846de:         pStmt.setBlob(1, blobInput, blobData.length);
1:a4846de:         pStmt.setInt(2, ID_SAMPLEVALUES);
1:a4846de:         assertEquals("Invalid update count", 1, pStmt.executeUpdate());
1:13e9e78:         Statement stmt = con.createStatement();
1:13e9e78:         ResultSet rs = stmt.executeQuery("select BLOBDATA from BLOBCLOB where ID = " +
1:a4846de:                 ID_SAMPLEVALUES);
1:a4846de:         rs.next();
1:a4846de:         Blob blob = rs.getBlob(1);
1:a4846de:         rs.close();
1:a4846de:         stmt.close();
1:a4846de:         return blob;
1:a4846de:     }
1:a4846de:     
1:a4846de:     /**
1:a4846de:      * Fetch a sample Clob.
1:a4846de:      * If this method fails, the test fails.
1:a4846de:      *
1:a4846de:      * @param con database connection to fetch data from.
1:a4846de:      * @return a sample <code>Clob</code> object.
1:a4846de:      */
1:a4846de:     public static Clob getSampleClob(Connection con) 
1:a4846de:         throws SQLException {
1:e3e3ca3: 		Reader clobInput = new StringReader(clobData);
1:a4846de:         PreparedStatement pStmt = 
1:a4846de:             con.prepareStatement("update BLOBCLOB set CLOBDATA = ? where ID = ?");
1:a4846de:         try {
1:a4846de:             clobInput.reset();
1:a4846de:         } catch (IOException ioe) {
1:a4846de:             fail("Failed to reset clob input stream: " + ioe.getMessage());
1:a4846de:         }
1:a4846de:         pStmt.setClob(1, clobInput, clobData.length());
1:a4846de:         pStmt.setInt(2, ID_SAMPLEVALUES);
1:a4846de:         assertEquals("Invalid update count", 1, pStmt.executeUpdate());
1:13e9e78:         Statement stmt = con.createStatement();
1:13e9e78:         ResultSet rs = stmt.executeQuery("select CLOBDATA from BLOBCLOB where ID = " +
1:a4846de:                 ID_SAMPLEVALUES);
1:a4846de:         rs.next();
1:a4846de:         Clob clob = rs.getClob(1);
1:a4846de:         rs.close();
1:a4846de:         stmt.close();
1:a4846de:         return clob;
1:a4846de:     }
1:a4846de: 
1:c9382f0:     /**
1:c9382f0:      * Returns new unique ID values that can be used in these tests.
1:c9382f0:      * @return an integer that represents an unique ID value.
1:c9382f0:      */
1:c9382f0:     public static int getID() {
1:c9382f0:         return ID++;
1:c9382f0:     }
1:c9382f0: 
1:a4846de: } // End class BlobClobTestSetup
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5b41e45
/////////////////////////////////////////////////////////////////////////
1:                                             "BLOBDATA blob," +
1:                                             "CLOBDATA clob)");
commit:c9382f0
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * ID is used to store the latest unique value for the ID column
1:      * Start from 3 since 1 is used for null values and 2 is used for
1:      * sample values.
1:      */
1:     public static int ID = 3;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns new unique ID values that can be used in these tests.
1:      * @return an integer that represents an unique ID value.
1:      */
1:     public static int getID() {
1:         return ID++;
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:13e9e78
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
/////////////////////////////////////////////////////////////////////////
1:     extends BaseJDBCTestSetup {
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() 
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception 
1:     protected void tearDown()
1:         throws Exception {
1:         Connection con = getConnection();
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery("select BLOBDATA from BLOBCLOB where ID = " +
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery("select CLOBDATA from BLOBCLOB where ID = " +
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:e3e3ca3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		InputStream blobInput = new ByteArrayInputStream(blobData, 0, blobData.length);
/////////////////////////////////////////////////////////////////////////
1: 		Reader clobInput = new StringReader(clobData);
commit:a4846de
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0:    Derby - Class BlobClobTestSetup
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.io.Reader;
1: import java.io.StringReader;
1: import java.sql.*;
1: 
1: /**
1:  * Create a table with one column for a blob and one column for a clob.
1:  * This is shared between tests that need a blob or a clob, and is required
1:  * because the createBlob/-Clob methods are not yet implemented.
1:  */
1: public class BlobClobTestSetup
0:     extends TestSetup {
1: 
1:     /** Constant for accessing the row with null values. */
1:     public static final int ID_NULLVALUES = 1;
1:     /** Constant for accessing the row with sample values. */
1:     public static final int ID_SAMPLEVALUES = 2;
1: 
0:     /** ResultSet used to fetch BLOB or CLOB. */
0:     private static ResultSet rs = null;
0:     /** Statement used to fetch BLOB or CLOB. */
0:     private static Statement stmt = null;
0:     /** Stream used to insert BLOB. */
0:     private static InputStream blobInput = null;
1:     /** Blob data. */
1:     private static final byte[] blobData = new byte[] {
1:         0x65, 0x66, 0x67, 0x68, 0x69,
1:         0x69, 0x68, 0x67, 0x66, 0x65
1:     };
0:     /** Stream used to insert CLOB. */
0:     private static Reader clobInput = null;
1:     /** Clob data. */
1:     private static final String clobData =
1:         "This is a string, inserted into a CLOB";
1:    
0:     static {
0:         blobInput = new ByteArrayInputStream(blobData, 0, blobData.length);
0:         clobInput = new StringReader(clobData);
1:     }
1:     
1:     /**
1:      * Create a test setup for the specified blob or clob test.
1:      *
1:      * @param test the test to provide setup for.
1:      */
1:     public BlobClobTestSetup(Test test) {
1:         super(test);
1:     }
1: 
1:     /**
1:      * Create a table with BLOB and CLOB, so that such objects can be
1:      * accessed/used from JDBC.
1:      */
0:     public void setUp() 
1:         throws IOException, SQLException {
0:         Connection con = BaseJDBCTestCase.getConnection();
1:         Statement stmt = con.createStatement();
1:         stmt.execute("create table BLOBCLOB (ID int primary key, " +
0:                                             "BLOBDATA blob(1k)," + 
0:                                             "CLOBDATA clob(1k))");
1:         stmt.execute("insert into BLOBCLOB VALUES " +
1:                 "(" + ID_NULLVALUES + ", null, null)");
1:         // Actual data is inserted in the getSample* methods.
1:         stmt.execute("insert into BLOBCLOB VALUES " +
1:                 "(" + ID_SAMPLEVALUES + ", null, null)");
1:         stmt.close();
1:     }
1: 
1:     /**
1:      * Drop the table we created during setup.
1:      */
0:     public void tearDown()
1:         throws SQLException {
0:         Connection con = BaseJDBCTestCase.getConnection();
1:         Statement stmt = con.createStatement();
1:         stmt.execute("drop table BLOBCLOB");
1:         stmt.close();
0:         con.close();
1:     }
1:     
1:     /**
1:      * Fetch a sample Blob.
1:      * If this method fails, the test fails.
1:      *
1:      * @param con database connection to fetch data from.
1:      * @return a sample <code>Blob</code> object.
1:      */
1:     public static Blob getSampleBlob(Connection con) 
1:         throws SQLException {
1:         PreparedStatement pStmt = 
1:             con.prepareStatement("update BLOBCLOB set BLOBDATA = ? where ID = ?");
1:         try {
1:             blobInput.reset();
1:         } catch (IOException ioe) {
1:             fail("Failed to reset blob input stream: " + ioe.getMessage());
1:         }
1:         pStmt.setBlob(1, blobInput, blobData.length);
1:         pStmt.setInt(2, ID_SAMPLEVALUES);
1:         assertEquals("Invalid update count", 1, pStmt.executeUpdate());
0:         stmt = con.createStatement();
0:         rs = stmt.executeQuery("select BLOBDATA from BLOBCLOB where ID = " +
1:                 ID_SAMPLEVALUES);
1:         rs.next();
1:         Blob blob = rs.getBlob(1);
1:         rs.close();
1:         stmt.close();
1:         return blob;
1:     }
1:     
1:     /**
1:      * Fetch a sample Clob.
1:      * If this method fails, the test fails.
1:      *
1:      * @param con database connection to fetch data from.
1:      * @return a sample <code>Clob</code> object.
1:      */
1:     public static Clob getSampleClob(Connection con) 
1:         throws SQLException {
1:         PreparedStatement pStmt = 
1:             con.prepareStatement("update BLOBCLOB set CLOBDATA = ? where ID = ?");
1:         try {
1:             clobInput.reset();
1:         } catch (IOException ioe) {
1:             fail("Failed to reset clob input stream: " + ioe.getMessage());
1:         }
1:         pStmt.setClob(1, clobInput, clobData.length());
1:         pStmt.setInt(2, ID_SAMPLEVALUES);
1:         assertEquals("Invalid update count", 1, pStmt.executeUpdate());
0:         stmt = con.createStatement();
0:         rs = stmt.executeQuery("select CLOBDATA from BLOBCLOB where ID = " +
1:                 ID_SAMPLEVALUES);
1:         rs.next();
1:         Clob clob = rs.getClob(1);
1:         rs.close();
1:         stmt.close();
1:         return clob;
1:     }
1: 
1: } // End class BlobClobTestSetup
============================================================================