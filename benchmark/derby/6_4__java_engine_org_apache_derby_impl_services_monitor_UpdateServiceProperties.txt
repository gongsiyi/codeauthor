1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.monitor.UpdateServiceProperties
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.PersistentService;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Hashtable;
1:eac0369: import org.apache.derby.io.WritableStorageFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.error.PassThroughException;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: 
2:eac0369: /**
1:eac0369: */
1:eac0369: public class UpdateServiceProperties extends Properties {
1:eac0369: 
1:eac0369: 	private PersistentService serviceType;
1:eac0369: 	private String serviceName;
1:836ab97:     private volatile WritableStorageFactory storageFactory;
1:eac0369:     
1:eac0369: 	/*
1:eac0369: 	Fix for bug 3668: Following would allow user to change properties while in the session
1:eac0369: 	in which the database was created.
1:eac0369: 	While the database is being created, serviceBooted would be false. What that means
1:eac0369: 	is, don't save changes into services.properties file from here until the database
1:eac0369: 	is created. Instead, let BaseMonitor save the properties at the end of the database
1:eac0369:   creation and also set serviceBooted to true at that point. From then on, the
1:eac0369:   services.properties file updates will be made here.
1:eac0369: 	*/
1:eac0369: 	private boolean serviceBooted;
1:eac0369: 
1:eac0369: 	public UpdateServiceProperties(PersistentService serviceType, String serviceName,
1:eac0369: 	Properties actualSet, boolean serviceBooted) {
1:eac0369: 		super(actualSet);
1:eac0369: 		this.serviceType = serviceType;
1:eac0369: 		this.serviceName = serviceName;
1:eac0369: 		this.serviceBooted = serviceBooted;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//look at the comments for serviceBooted at the top to understand this.
1:eac0369: 	public void setServiceBooted() {
1:eac0369: 		serviceBooted = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public void setStorageFactory( WritableStorageFactory storageFactory)
1:eac0369:     {
1:eac0369:         this.storageFactory = storageFactory;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public WritableStorageFactory getStorageFactory()
1:eac0369:     {
1:eac0369:         return storageFactory;
1:eac0369:     }
1:eac0369:     
1:eac0369: 	/*
1:eac0369: 	** Methods of Hashtable (overridden)
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 		Put the key-value pair in the Properties set and
1:eac0369: 		mark this set as modified.
1:eac0369: 
1:eac0369: 		@see Hashtable#put
1:eac0369: 	*/
1:eac0369: 	public Object put(Object key, Object value) {
1:eac0369: 		Object ref = defaults.put(key, value);
1:eac0369: 		if (!((String) key).startsWith(Property.PROPERTY_RUNTIME_PREFIX))
1:eac0369: 			update();
1:eac0369: 		return ref;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 		Remove the key-value pair from the Properties set and
1:eac0369: 		mark this set as modified.
1:eac0369: 
1:eac0369: 		@see Hashtable#remove
1:eac0369: 	*/
1:eac0369: 	public Object remove(Object key) {
1:eac0369: 		Object ref = defaults.remove(key);
1:eac0369: 		if ((ref != null) &&
1:eac0369: 			(!((String) key).startsWith(Property.PROPERTY_RUNTIME_PREFIX)))
1:eac0369: 			update();
1:eac0369: 		return ref;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Saves the service properties to the disk.
1:eac0369: 	 */
1:eac0369: 	public void saveServiceProperties()
1:eac0369: 	{
1:eac0369:         if( SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT( storageFactory != null,
1:eac0369:                                   "UpdateServiceProperties.saveServiceProperties() called before storageFactory set.");
1:eac0369: 		try{
1:eac0369: 			serviceType.saveServiceProperties(serviceName, storageFactory,
1:eac0369: 					BaseMonitor.removeRuntimeProperties(defaults), false);
1:eac0369: 		} catch (StandardException mse) {
1:eac0369: 			throw new PassThroughException(mse);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Class specific methods.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	private void update() {
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			//look at the comments for serviceBooted at the top to understand this if.
1:eac0369: 			if (serviceBooted)
1:eac0369: 				serviceType.saveServiceProperties(serviceName, storageFactory,
1:eac0369: 					BaseMonitor.removeRuntimeProperties(defaults), true);
1:eac0369: 		} catch (StandardException mse) {
1:eac0369: 			throw new PassThroughException(mse);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:836ab97
/////////////////////////////////////////////////////////////////////////
1:     private volatile WritableStorageFactory storageFactory;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.monitor.UpdateServiceProperties
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.monitor;
1: 
1: import org.apache.derby.iapi.services.monitor.PersistentService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.util.Properties;
1: import java.util.Hashtable;
1: import org.apache.derby.io.WritableStorageFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.error.PassThroughException;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: /**
1: */
1: public class UpdateServiceProperties extends Properties {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private PersistentService serviceType;
1: 	private String serviceName;
0:     private WritableStorageFactory storageFactory;
1:     
1: 	/*
1: 	Fix for bug 3668: Following would allow user to change properties while in the session
1: 	in which the database was created.
1: 	While the database is being created, serviceBooted would be false. What that means
1: 	is, don't save changes into services.properties file from here until the database
1: 	is created. Instead, let BaseMonitor save the properties at the end of the database
1:   creation and also set serviceBooted to true at that point. From then on, the
1:   services.properties file updates will be made here.
1: 	*/
1: 	private boolean serviceBooted;
1: 
1: 	public UpdateServiceProperties(PersistentService serviceType, String serviceName,
1: 	Properties actualSet, boolean serviceBooted) {
1: 		super(actualSet);
1: 		this.serviceType = serviceType;
1: 		this.serviceName = serviceName;
1: 		this.serviceBooted = serviceBooted;
1: 	}
1: 
1: 	//look at the comments for serviceBooted at the top to understand this.
1: 	public void setServiceBooted() {
1: 		serviceBooted = true;
1: 	}
1: 
1:     public void setStorageFactory( WritableStorageFactory storageFactory)
1:     {
1:         this.storageFactory = storageFactory;
1:     }
1: 
1:     public WritableStorageFactory getStorageFactory()
1:     {
1:         return storageFactory;
1:     }
1:     
1: 	/*
1: 	** Methods of Hashtable (overridden)
1: 	*/
1: 
1: 	/**	
1: 		Put the key-value pair in the Properties set and
1: 		mark this set as modified.
1: 
1: 		@see Hashtable#put
1: 	*/
1: 	public Object put(Object key, Object value) {
1: 		Object ref = defaults.put(key, value);
1: 		if (!((String) key).startsWith(Property.PROPERTY_RUNTIME_PREFIX))
1: 			update();
1: 		return ref;
1: 	}
1: 
1: 	/**	
1: 		Remove the key-value pair from the Properties set and
1: 		mark this set as modified.
1: 
1: 		@see Hashtable#remove
1: 	*/
1: 	public Object remove(Object key) {
1: 		Object ref = defaults.remove(key);
1: 		if ((ref != null) &&
1: 			(!((String) key).startsWith(Property.PROPERTY_RUNTIME_PREFIX)))
1: 			update();
1: 		return ref;
1: 	}
1: 
1: 	/**
1: 	   Saves the service properties to the disk.
1: 	 */
1: 	public void saveServiceProperties()
1: 	{
1:         if( SanityManager.DEBUG)
1:             SanityManager.ASSERT( storageFactory != null,
1:                                   "UpdateServiceProperties.saveServiceProperties() called before storageFactory set.");
1: 		try{
1: 			serviceType.saveServiceProperties(serviceName, storageFactory,
1: 					BaseMonitor.removeRuntimeProperties(defaults), false);
1: 		} catch (StandardException mse) {
1: 			throw new PassThroughException(mse);
1: 		}
1: 	}
1: 
1: 	/*
1: 	** Class specific methods.
1: 	*/
1: 
1: 	private void update() {
1: 
1: 		try {
1: 			//look at the comments for serviceBooted at the top to understand this if.
1: 			if (serviceBooted)
1: 				serviceType.saveServiceProperties(serviceName, storageFactory,
1: 					BaseMonitor.removeRuntimeProperties(defaults), true);
1: 		} catch (StandardException mse) {
1: 			throw new PassThroughException(mse);
1: 		}
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.monitor;
0: 
0: import org.apache.derby.iapi.services.monitor.PersistentService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Properties;
0: import java.util.Hashtable;
0: import org.apache.derby.io.WritableStorageFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.error.PassThroughException;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: /**
0: */
0: public class UpdateServiceProperties extends Properties {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private PersistentService serviceType;
0: 	private String serviceName;
0:     private WritableStorageFactory storageFactory;
0:     
0: 	/*
0: 	Fix for bug 3668: Following would allow user to change properties while in the session
0: 	in which the database was created.
0: 	While the database is being created, serviceBooted would be false. What that means
0: 	is, don't save changes into services.properties file from here until the database
0: 	is created. Instead, let BaseMonitor save the properties at the end of the database
0:   creation and also set serviceBooted to true at that point. From then on, the
0:   services.properties file updates will be made here.
0: 	*/
0: 	private boolean serviceBooted;
0: 
0: 	public UpdateServiceProperties(PersistentService serviceType, String serviceName,
0: 	Properties actualSet, boolean serviceBooted) {
0: 		super(actualSet);
0: 		this.serviceType = serviceType;
0: 		this.serviceName = serviceName;
0: 		this.serviceBooted = serviceBooted;
0: 	}
0: 
0: 	//look at the comments for serviceBooted at the top to understand this.
0: 	public void setServiceBooted() {
0: 		serviceBooted = true;
0: 	}
0: 
0:     public void setStorageFactory( WritableStorageFactory storageFactory)
0:     {
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     public WritableStorageFactory getStorageFactory()
0:     {
0:         return storageFactory;
0:     }
0:     
0: 	/*
0: 	** Methods of Hashtable (overridden)
0: 	*/
0: 
0: 	/**	
0: 		Put the key-value pair in the Properties set and
0: 		mark this set as modified.
0: 
0: 		@see Hashtable#put
0: 	*/
0: 	public Object put(Object key, Object value) {
0: 		Object ref = defaults.put(key, value);
0: 		if (!((String) key).startsWith(Property.PROPERTY_RUNTIME_PREFIX))
0: 			update();
0: 		return ref;
0: 	}
0: 
0: 	/**	
0: 		Remove the key-value pair from the Properties set and
0: 		mark this set as modified.
0: 
0: 		@see Hashtable#remove
0: 	*/
0: 	public Object remove(Object key) {
0: 		Object ref = defaults.remove(key);
0: 		if ((ref != null) &&
0: 			(!((String) key).startsWith(Property.PROPERTY_RUNTIME_PREFIX)))
0: 			update();
0: 		return ref;
0: 	}
0: 
0: 	/**
0: 	   Saves the service properties to the disk.
0: 	 */
0: 	public void saveServiceProperties()
0: 	{
0:         if( SanityManager.DEBUG)
0:             SanityManager.ASSERT( storageFactory != null,
0:                                   "UpdateServiceProperties.saveServiceProperties() called before storageFactory set.");
0: 		try{
0: 			serviceType.saveServiceProperties(serviceName, storageFactory,
0: 					BaseMonitor.removeRuntimeProperties(defaults), false);
0: 		} catch (StandardException mse) {
0: 			throw new PassThroughException(mse);
0: 		}
0: 	}
0: 
0: 	/*
0: 	** Class specific methods.
0: 	*/
0: 
0: 	private void update() {
0: 
0: 		try {
0: 			//look at the comments for serviceBooted at the top to understand this if.
0: 			if (serviceBooted)
0: 				serviceType.saveServiceProperties(serviceName, storageFactory,
0: 					BaseMonitor.removeRuntimeProperties(defaults), true);
0: 		} catch (StandardException mse) {
0: 			throw new PassThroughException(mse);
0: 		}
0: 	}
0: 
0: }
============================================================================