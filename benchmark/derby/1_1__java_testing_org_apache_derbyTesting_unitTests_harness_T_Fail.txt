1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_Fail
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Exception used to throw for errors in a unit test.
1:2bc809f: */
1:2bc809f: public class T_Fail extends Exception  {
1:2bc809f: 
1:2bc809f: 	private Throwable nested;
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Create a T_Fail exception which carries a message.
1:2bc809f: 
1:df4020d: 	  @param message An Id for an error message for this exception.
1:2bc809f: 	  */
1:2bc809f: 	private T_Fail(String message) {
1:2bc809f: 		super(message);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		return a T_Fail exception to indicate the configuration does
1:2bc809f: 		not specify the module to test.
1:2bc809f: 
1:2bc809f: 		@return The exception.
1:2bc809f: 	*/
1:2bc809f: 	public static T_Fail moduleToTestIdNotFound()
1:2bc809f: 	{
1:2bc809f: 		return new T_Fail("Test failed because the configuration does not include the MODULE_TO_TEST_IDENT attribute.");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		return a T_Fail exception to indicate the configuration does
1:2bc809f: 		not contain the module to test.
1:2bc809f: 
1:2bc809f: 		@return The exception.
1:2bc809f: 	*/
1:2bc809f: 	public static T_Fail moduleToTestNotFound(String moduleToTest)
1:2bc809f: 	{
1:2bc809f: 		return new T_Fail("Test failed due to failure loading " + moduleToTest);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  return a T_Fail exception to indicate the test failed due
1:2bc809f: 	  to an exception.
1:2bc809f: 
1:2bc809f: 	  <P>Note: Since the Test Service catches all exceptions this
1:2bc809f: 	  seems to be of limited value.
1:2bc809f: 
1:2bc809f: 	  @return The exception.
1:2bc809f: 	*/
1:2bc809f: 	public static T_Fail exceptionFail(Throwable e)
1:2bc809f: 	{
1:2bc809f: 		T_Fail tf = new T_Fail("The test failed with an exception: " + e.toString());
1:2bc809f: 		tf.nested = e;
1:2bc809f: 		return tf;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  return a T_Fail exception to indicate the test failed.
1:2bc809f: 
1:2bc809f: 	  @return the exception.
1:2bc809f: 	  */
1:2bc809f: 	public static T_Fail testFail()
1:2bc809f: 	{
1:2bc809f: 		return new T_Fail("The test failed");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  return a T_Fail exception which includes a user message indicating
1:2bc809f: 	  why a test failed.
1:2bc809f: 
1:2bc809f: 	  @return The exception.
1:2bc809f: 	*/
1:2bc809f: 	public static T_Fail testFailMsg(String message)
1:2bc809f: 	{
1:2bc809f: 		return new T_Fail("Test failed - " + message);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Check a test condition. If it is false, throw a T_Fail exception.
1:2bc809f: 
1:2bc809f: 	  @param mustBeTrue The condition.
1:2bc809f: 	  @exception T_Fail A test failure exception
1:2bc809f: 	  */
1:2bc809f: 	public static final void T_ASSERT(boolean mustBeTrue)
1:2bc809f: 		 throws T_Fail
1:2bc809f: 	{
1:2bc809f: 		if (!mustBeTrue)
1:2bc809f: 			throw testFail();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Check a test condition. If it is false, throw a T_Fail exception which
1:2bc809f: 	  includes a message.
1:2bc809f: 
1:2bc809f: 	  @param mustBeTrue The condition.
1:2bc809f: 	  @param msg A message describing the failue.
1:2bc809f: 	  @exception T_Fail A test failure exception
1:2bc809f: 	  */
1:2bc809f: 	public static final void T_ASSERT(boolean mustBeTrue,String msg)
1:2bc809f: 		 throws T_Fail
1:2bc809f: 	{
1:2bc809f: 		if (!mustBeTrue)
1:2bc809f: 			throw testFailMsg(msg);
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
1: 	  @param message An Id for an error message for this exception.
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_Fail
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: /**
1: 	Exception used to throw for errors in a unit test.
1: */
1: public class T_Fail extends Exception  {
1: 
1: 	private Throwable nested;
1: 
1: 	/**
1: 	  Create a T_Fail exception which carries a message.
1: 
0: 	  @param messageId An Id for an error message for this exception.
1: 	  */
1: 	private T_Fail(String message) {
1: 		super(message);
1: 	}
1: 
1: 	/**
1: 		return a T_Fail exception to indicate the configuration does
1: 		not specify the module to test.
1: 
1: 		@return The exception.
1: 	*/
1: 	public static T_Fail moduleToTestIdNotFound()
1: 	{
1: 		return new T_Fail("Test failed because the configuration does not include the MODULE_TO_TEST_IDENT attribute.");
1: 	}
1: 
1: 	/**
1: 		return a T_Fail exception to indicate the configuration does
1: 		not contain the module to test.
1: 
1: 		@return The exception.
1: 	*/
1: 	public static T_Fail moduleToTestNotFound(String moduleToTest)
1: 	{
1: 		return new T_Fail("Test failed due to failure loading " + moduleToTest);
1: 	}
1: 
1: 	/**
1: 	  return a T_Fail exception to indicate the test failed due
1: 	  to an exception.
1: 
1: 	  <P>Note: Since the Test Service catches all exceptions this
1: 	  seems to be of limited value.
1: 
1: 	  @return The exception.
1: 	*/
1: 	public static T_Fail exceptionFail(Throwable e)
1: 	{
1: 		T_Fail tf = new T_Fail("The test failed with an exception: " + e.toString());
1: 		tf.nested = e;
1: 		return tf;
1: 	}
1: 
1: 	/**
1: 	  return a T_Fail exception to indicate the test failed.
1: 
1: 	  @return the exception.
1: 	  */
1: 	public static T_Fail testFail()
1: 	{
1: 		return new T_Fail("The test failed");
1: 	}
1: 
1: 	/**
1: 	  return a T_Fail exception which includes a user message indicating
1: 	  why a test failed.
1: 
1: 	  @return The exception.
1: 	*/
1: 	public static T_Fail testFailMsg(String message)
1: 	{
1: 		return new T_Fail("Test failed - " + message);
1: 	}
1: 
1: 	/**
1: 	  Check a test condition. If it is false, throw a T_Fail exception.
1: 
1: 	  @param mustBeTrue The condition.
1: 	  @exception T_Fail A test failure exception
1: 	  */
1: 	public static final void T_ASSERT(boolean mustBeTrue)
1: 		 throws T_Fail
1: 	{
1: 		if (!mustBeTrue)
1: 			throw testFail();
1: 	}
1: 
1: 	/**
1: 	  Check a test condition. If it is false, throw a T_Fail exception which
1: 	  includes a message.
1: 
1: 	  @param mustBeTrue The condition.
1: 	  @param msg A message describing the failue.
1: 	  @exception T_Fail A test failure exception
1: 	  */
1: 	public static final void T_ASSERT(boolean mustBeTrue,String msg)
1: 		 throws T_Fail
1: 	{
1: 		if (!mustBeTrue)
1: 			throw testFailMsg(msg);
1: 	}
1: }
============================================================================