1:4394bdd: /*
1:4394bdd: 
1:4394bdd: Derby - Class org.apache.derby.optional.api.SimpleJsonVTI
1:4394bdd: 
1:4394bdd: Licensed to the Apache Software Foundation (ASF) under one or more
1:4394bdd: contributor license agreements.  See the NOTICE file distributed with
1:4394bdd: this work for additional information regarding copyright ownership.
1:4394bdd: The ASF licenses this file to You under the Apache License, Version 2.0
1:4394bdd: (the "License"); you may not use this file except in compliance with
1:4394bdd: the License.  You may obtain a copy of the License at
1:4394bdd: 
1:4394bdd: http://www.apache.org/licenses/LICENSE-2.0
1:4394bdd: 
1:4394bdd: Unless required by applicable law or agreed to in writing, software
1:4394bdd: distributed under the License is distributed on an "AS IS" BASIS,
1:4394bdd: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4394bdd: See the License for the specific language governing permissions and
1:4394bdd: limitations under the License.
1:4394bdd: 
1:4394bdd: */
1:4394bdd: 
1:4394bdd: package org.apache.derby.optional.api;
1:4394bdd: 
1:4394bdd: import java.math.BigDecimal;
1:4394bdd: import java.net.URL;
1:4394bdd: import java.sql.Connection;
1:4394bdd: import java.sql.DriverManager;
1:4394bdd: import java.sql.SQLException;
1:4394bdd: import java.sql.SQLWarning;
1:4394bdd: 
1:4394bdd: import org.json.simple.JSONArray;
1:4394bdd: import org.json.simple.JSONObject;
1:4394bdd: 
1:4394bdd: import org.apache.derby.vti.VTITemplate;
1:4394bdd: 
1:6b8ad38: import org.apache.derby.optional.utils.ToolUtilities;
1:6b8ad38: 
1:4394bdd: /**
1:4394bdd:  * <p>
1:4394bdd:  * This is a table function which turns a JSON array into a relational
1:4394bdd:  * ResultSet. This table function relies on the JSON.simple JSONArray class
1:4394bdd:  * found at https://code.google.com/p/json-simple/.
1:4394bdd:  * Each object in the array is turned into a row.
1:4394bdd:  * The shape of the row is declared by the CREATE FUNCTION ddl
1:4394bdd:  * and the shape corresponds to the key names found in the row objects.
1:4394bdd:  * Provided that the values in those objects have the expected type,
1:4394bdd:  * the following ResultSet accessors can be called:
1:4394bdd:  * </p>
1:4394bdd:  *
1:4394bdd:  * <ul>
1:4394bdd:  *  <li>getString()</li>
1:4394bdd:  *  <li>getBoolean()</li>
1:4394bdd:  *  <li>getByte()</li>
1:4394bdd:  *  <li>getShort()</li>
1:4394bdd:  *  <li>getInt()</li>
1:4394bdd:  *  <li>getLong()</li>
1:4394bdd:  *  <li>getFloat()</li>
1:4394bdd:  *  <li>getDouble()</li>
1:4394bdd:  *  <li>getObject()</li>
1:4394bdd:  *  <li>getBigDecimal()</li>
1:4394bdd:  * </ul>
1:4394bdd:  *
1:4394bdd:  * <p>
1:4394bdd:  * This table function relies on the JSONArray type loaded by the simpleJson optional
1:4394bdd:  * tool. This table function can be combined with other JSONArray-creating
1:4394bdd:  * functions provided by that tool.
1:4394bdd:  * </p>
1:4394bdd:  *
1:4394bdd:  * <p>
1:4394bdd:  * Here's an example of how to use this VTI on a JSON document read across
1:4394bdd:  * the network using the readArrayFromURL function provided by the simpleJson tool:
1:4394bdd:  * </p>
1:4394bdd:  *
1:4394bdd:  * <pre>
1:4394bdd:  * call syscs_util.syscs_register_tool( 'simpleJson', true );
1:4394bdd:  *
1:4394bdd:  * create function thermostatReadings( jsonDocument JSONArray )
1:4394bdd:  * returns table
1:4394bdd:  * (
1:4394bdd:  *   "id" int,
1:4394bdd:  *   "temperature" float,
1:4394bdd:  *   "fanOn" boolean
1:4394bdd:  * )
1:4394bdd:  * language java parameter style derby_jdbc_result_set contains sql
1:4394bdd:  * external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray';
1:4394bdd:  * 
1:4394bdd:  * select * from table
1:4394bdd:  * (
1:4394bdd:  *    thermostatReadings
1:4394bdd:  *    (
1:4394bdd:  *       readArrayFromURL( 'https://thermostat.feed.org', 'UTF-8' )
1:4394bdd:  *    )
1:4394bdd:  * ) t;
1:4394bdd:  * </pre>
1:4394bdd:  *
1:4394bdd:  * <p>
1:4394bdd:  * That returns a table like this:
1:4394bdd:  * </p>
1:4394bdd:  *
1:4394bdd:  * <pre>
1:4394bdd:  * id         |temperature             |fanOn
1:4394bdd:  * ------------------------------------------
1:4394bdd:  * 1          |70.3                    |true 
1:4394bdd:  * 2          |65.5                    |false
1:4394bdd:  * </pre>
1:4394bdd:  *
1:4394bdd:  * <p>
1:4394bdd:  * Here's an example of how to use this VTI on a JSON document string
1:4394bdd:  * with the assistance of the readArrayFromString function provided by the simpleJson tool:
1:4394bdd:  * </p>
1:4394bdd:  *
1:4394bdd:  * <pre>
1:4394bdd:  * select * from table
1:4394bdd:  * (
1:4394bdd:  *    thermostatReadings
1:4394bdd:  *    (
1:4394bdd:  *       readArrayFromString
1:4394bdd:  *       (
1:4394bdd:  *        '[ { "id": 1, "temperature": 70.3, "fanOn": true }, { "id": 2, "temperature": 65.5, "fanOn": false } ]'
1:4394bdd:  *       )
1:4394bdd:  *    )
1:4394bdd:  * ) t;
1:4394bdd:  * </pre>
1:4394bdd:  */
1:4394bdd: public class SimpleJsonVTI extends VTITemplate
1:4394bdd: {
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	CONSTANTS
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	STATE
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     private JSONArray   _topArray = null;
1:4394bdd:     private int         _nextIdx = 0;
1:4394bdd:     private JSONObject  _currentRow = null;
1:4394bdd:     private boolean     _wasNull = true;
1:4394bdd: 
1:4394bdd:     private Connection  _connection;
1:4394bdd:     private VTITemplate.ColumnDescriptor[]  _returnColumns;
1:4394bdd:     private SQLWarning  _warning = null;
1:4394bdd:     
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	CONSTRUCTOR
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * Construct from a JSONArray object.
1:4394bdd:      */
1:4394bdd:     private SimpleJsonVTI( JSONArray array )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         _topArray = (JSONArray) array;
1:4394bdd:         _connection = DriverManager.getConnection( "jdbc:default:connection" );
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	TABLE FUNCTIONS (to be bound by CREATE FUNCTION ddl)
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:4394bdd:      * Create a SimpleJsonVTI from a JSONArray object.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd:     public  static  SimpleJsonVTI   readArray( JSONArray array )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         return new SimpleJsonVTI( array );
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	ResultSet BEHAVIOR
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     public  void    close() throws SQLException
1:4394bdd:     {
1:4394bdd:         _connection = null;
1:4394bdd:         _returnColumns = null;
1:4394bdd:         _topArray = null;
1:4394bdd:         _currentRow = null;
1:4394bdd:     }
1:4394bdd:     
1:4394bdd:     public  boolean next()  throws SQLException
1:4394bdd:     {
1:4394bdd:         if ( _topArray == null ) { return false; }
1:4394bdd:         if ( _nextIdx >= _topArray.size() ) { return false; }
1:4394bdd: 
1:4394bdd:         if ( _returnColumns == null ) { _returnColumns = getReturnTableSignature( _connection ); }
1:4394bdd: 
1:4394bdd:         Object obj = _topArray.get( _nextIdx );
1:4394bdd: 
1:4394bdd:         if ( (obj == null) || !(obj instanceof JSONObject) )
1:4394bdd:         {
1:4394bdd:             _currentRow = null;
1:4394bdd:             String  cellType = (obj == null) ? "NULL" : obj.getClass().getName();
1:4394bdd:             addWarning( "Row " + _nextIdx + " is not a JSON object. It is a " + cellType );
1:4394bdd:         }
1:4394bdd:         else
1:4394bdd:         {
1:4394bdd:             _currentRow = (JSONObject) obj;
1:4394bdd:         }
1:4394bdd: 
1:4394bdd:         _nextIdx++;
1:4394bdd:         return true;
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public boolean wasNull() { return _wasNull; }
1:4394bdd: 
1:4394bdd:     public SQLWarning getWarnings() throws SQLException { return null; }
1:4394bdd:     public void clearWarnings() throws SQLException { throw notImplemented( "clearWarnings" ); }
1:4394bdd: 
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	TYPE-SPECIFIC ACCESSORS
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     public String getString(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Object  obj = getColumn( columnIndex );
1:4394bdd:         if ( _wasNull ) { return null; }
1:4394bdd: 
1:4394bdd:         return obj.toString();
1:4394bdd:     }
1:4394bdd:     
1:4394bdd:     public boolean getBoolean(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Object  obj = getColumn( columnIndex );
1:4394bdd:         if ( nullOrWrongType( Boolean.class, columnIndex, obj ) ) { return false; }
1:4394bdd: 
1:4394bdd:         return ((Boolean) obj).booleanValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public byte getByte(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Number  number = getNumber( columnIndex );
1:4394bdd:         if ( _wasNull ) { return (byte) 0; }
1:4394bdd: 
1:4394bdd:         return number.byteValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public short getShort(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Number  number = getNumber( columnIndex );
1:4394bdd:         if ( _wasNull ) { return (byte) 0; }
1:4394bdd: 
1:4394bdd:         return number.shortValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public int getInt(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Number  number = getNumber( columnIndex );
1:4394bdd:         if ( _wasNull ) { return (byte) 0; }
1:4394bdd: 
1:4394bdd:         return number.intValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public long getLong(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Number  number = getNumber( columnIndex );
1:4394bdd:         if ( _wasNull ) { return (byte) 0; }
1:4394bdd: 
1:4394bdd:         return number.longValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public float getFloat(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Number  number = getNumber( columnIndex );
1:4394bdd:         if ( _wasNull ) { return (byte) 0; }
1:4394bdd: 
1:4394bdd:         return number.floatValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public double getDouble(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         Number  number = getNumber( columnIndex );
1:4394bdd:         if ( _wasNull ) { return (byte) 0; }
1:4394bdd: 
1:4394bdd:         return number.doubleValue();
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     public Object getObject(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         return getColumn( columnIndex );
1:4394bdd:     }
1:4394bdd:     
1:4394bdd:     public BigDecimal getBigDecimal(int columnIndex) throws SQLException
1:4394bdd:     {
1:4394bdd:         String  stringValue = getString( columnIndex );
1:4394bdd:         if ( _wasNull ) { return null; }
1:4394bdd: 
1:4394bdd:         try {
1:4394bdd:             return new BigDecimal( stringValue );
1:4394bdd:         }
1:6b8ad38:         catch (Throwable t) { throw ToolUtilities.wrap( t ); }
1:4394bdd:     }
1:4394bdd:     
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd:     //
1:4394bdd:     //	MINIONS
1:4394bdd:     //
1:4394bdd:     ////////////////////////////////////////////////////////////////////////
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:4394bdd:      * Get the i-th (1-based) column as a Number.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd:     private Number  getNumber( int idx )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         Object  obj = getColumn( idx );
1:4394bdd: 
1:4394bdd:         if ( nullOrWrongType( Number.class, idx, obj ) ) { return null; }
1:4394bdd: 
1:4394bdd:         return (Number) obj;
1:4394bdd:     }
1:4394bdd:     
1:4394bdd:     /**
1:4394bdd:      * <p>
1:4394bdd:      * Get the i-th (1-based) column as an object.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd:     private Object  getColumn( int idx )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         if ( (idx < 1) || (idx > _returnColumns.length) )
1:4394bdd:         {
1:4394bdd:             throw new SQLException( "Column index " + idx + " is out of bounds." );
1:4394bdd:         }
1:4394bdd: 
1:4394bdd:         if ( _currentRow == null )
1:4394bdd:         {
1:4394bdd:             _wasNull = true;
1:4394bdd:             return null;
1:4394bdd:         }
1:4394bdd: 
1:4394bdd:         Object  value = _currentRow.get( _returnColumns[ idx - 1 ].columnName );
1:4394bdd: 
1:4394bdd:         _wasNull = (value == null);
1:4394bdd: 
1:4394bdd:         return value;
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:4394bdd:      * Add a "wrong type" warning and return true if the object
1:4394bdd:      * has the wrong type. Return true if the object is null.
1:4394bdd:      * Otherwise, return false.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd:     private boolean nullOrWrongType( Class correctType, int columnIdx, Object obj )
1:4394bdd:     {
1:4394bdd:         if ( _wasNull ) { return true; }
1:4394bdd:         
1:4394bdd:         if ( !correctType.isInstance( obj ) )
1:4394bdd:         {
1:4394bdd:             String  desiredType = correctType.getName();
1:4394bdd:             String  valueType = obj.getClass().getName();
1:4394bdd:             addWarning
1:4394bdd:                 (
1:4394bdd:                  "Column " + columnIdx +
1:4394bdd:                  " in row " + _nextIdx +
1:4394bdd:                  " is not a " + desiredType +
1:4394bdd:                  ". It is a " + valueType + "."
1:4394bdd:                  );
1:4394bdd: 
1:4394bdd:             _wasNull = true;
1:4394bdd:             return true;
1:4394bdd:         }
1:4394bdd: 
1:4394bdd:         return false;
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:4394bdd:      * Add a warning to the connection.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd:     private void addWarning( String warningText )
1:4394bdd:     {
1:4394bdd:         SQLWarning  warning = new SQLWarning( warningText );
1:4394bdd: 
1:4394bdd:         if ( _warning == null ) { _warning = warning; }
1:4394bdd:         else { _warning.setNextWarning( warning ); }
1:4394bdd:     }
1:4394bdd:     
1:4394bdd: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.utils.ToolUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:         catch (Throwable t) { throw ToolUtilities.wrap( t ); }
commit:4394bdd
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derby.optional.api.SimpleJsonVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.optional.api;
1: 
1: import java.math.BigDecimal;
1: import java.net.URL;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: 
1: import org.json.simple.JSONArray;
1: import org.json.simple.JSONObject;
1: 
1: import org.apache.derby.vti.VTITemplate;
1: 
1: /**
1:  * <p>
1:  * This is a table function which turns a JSON array into a relational
1:  * ResultSet. This table function relies on the JSON.simple JSONArray class
1:  * found at https://code.google.com/p/json-simple/.
1:  * Each object in the array is turned into a row.
1:  * The shape of the row is declared by the CREATE FUNCTION ddl
1:  * and the shape corresponds to the key names found in the row objects.
1:  * Provided that the values in those objects have the expected type,
1:  * the following ResultSet accessors can be called:
1:  * </p>
1:  *
1:  * <ul>
1:  *  <li>getString()</li>
1:  *  <li>getBoolean()</li>
1:  *  <li>getByte()</li>
1:  *  <li>getShort()</li>
1:  *  <li>getInt()</li>
1:  *  <li>getLong()</li>
1:  *  <li>getFloat()</li>
1:  *  <li>getDouble()</li>
1:  *  <li>getObject()</li>
1:  *  <li>getBigDecimal()</li>
1:  * </ul>
1:  *
1:  * <p>
1:  * This table function relies on the JSONArray type loaded by the simpleJson optional
1:  * tool. This table function can be combined with other JSONArray-creating
1:  * functions provided by that tool.
1:  * </p>
1:  *
1:  * <p>
1:  * Here's an example of how to use this VTI on a JSON document read across
1:  * the network using the readArrayFromURL function provided by the simpleJson tool:
1:  * </p>
1:  *
1:  * <pre>
1:  * call syscs_util.syscs_register_tool( 'simpleJson', true );
1:  *
1:  * create function thermostatReadings( jsonDocument JSONArray )
1:  * returns table
1:  * (
1:  *   "id" int,
1:  *   "temperature" float,
1:  *   "fanOn" boolean
1:  * )
1:  * language java parameter style derby_jdbc_result_set contains sql
1:  * external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray';
1:  * 
1:  * select * from table
1:  * (
1:  *    thermostatReadings
1:  *    (
1:  *       readArrayFromURL( 'https://thermostat.feed.org', 'UTF-8' )
1:  *    )
1:  * ) t;
1:  * </pre>
1:  *
1:  * <p>
1:  * That returns a table like this:
1:  * </p>
1:  *
1:  * <pre>
1:  * id         |temperature             |fanOn
1:  * ------------------------------------------
1:  * 1          |70.3                    |true 
1:  * 2          |65.5                    |false
1:  * </pre>
1:  *
1:  * <p>
1:  * Here's an example of how to use this VTI on a JSON document string
1:  * with the assistance of the readArrayFromString function provided by the simpleJson tool:
1:  * </p>
1:  *
1:  * <pre>
1:  * select * from table
1:  * (
1:  *    thermostatReadings
1:  *    (
1:  *       readArrayFromString
1:  *       (
1:  *        '[ { "id": 1, "temperature": 70.3, "fanOn": true }, { "id": 2, "temperature": 65.5, "fanOn": false } ]'
1:  *       )
1:  *    )
1:  * ) t;
1:  * </pre>
1:  */
1: public class SimpleJsonVTI extends VTITemplate
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private JSONArray   _topArray = null;
1:     private int         _nextIdx = 0;
1:     private JSONObject  _currentRow = null;
1:     private boolean     _wasNull = true;
1: 
1:     private Connection  _connection;
1:     private VTITemplate.ColumnDescriptor[]  _returnColumns;
1:     private SQLWarning  _warning = null;
1:     
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Construct from a JSONArray object.
1:      */
1:     private SimpleJsonVTI( JSONArray array )
1:         throws SQLException
1:     {
1:         _topArray = (JSONArray) array;
1:         _connection = DriverManager.getConnection( "jdbc:default:connection" );
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	TABLE FUNCTIONS (to be bound by CREATE FUNCTION ddl)
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Create a SimpleJsonVTI from a JSONArray object.
1:      * </p>
1:      */
1:     public  static  SimpleJsonVTI   readArray( JSONArray array )
1:         throws SQLException
1:     {
1:         return new SimpleJsonVTI( array );
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	ResultSet BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    close() throws SQLException
1:     {
1:         _connection = null;
1:         _returnColumns = null;
1:         _topArray = null;
1:         _currentRow = null;
1:     }
1:     
1:     public  boolean next()  throws SQLException
1:     {
1:         if ( _topArray == null ) { return false; }
1:         if ( _nextIdx >= _topArray.size() ) { return false; }
1: 
1:         if ( _returnColumns == null ) { _returnColumns = getReturnTableSignature( _connection ); }
1: 
1:         Object obj = _topArray.get( _nextIdx );
1: 
1:         if ( (obj == null) || !(obj instanceof JSONObject) )
1:         {
1:             _currentRow = null;
1:             String  cellType = (obj == null) ? "NULL" : obj.getClass().getName();
1:             addWarning( "Row " + _nextIdx + " is not a JSON object. It is a " + cellType );
1:         }
1:         else
1:         {
1:             _currentRow = (JSONObject) obj;
1:         }
1: 
1:         _nextIdx++;
1:         return true;
1:     }
1: 
1:     public boolean wasNull() { return _wasNull; }
1: 
1:     public SQLWarning getWarnings() throws SQLException { return null; }
1:     public void clearWarnings() throws SQLException { throw notImplemented( "clearWarnings" ); }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	TYPE-SPECIFIC ACCESSORS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public String getString(int columnIndex) throws SQLException
1:     {
1:         Object  obj = getColumn( columnIndex );
1:         if ( _wasNull ) { return null; }
1: 
1:         return obj.toString();
1:     }
1:     
1:     public boolean getBoolean(int columnIndex) throws SQLException
1:     {
1:         Object  obj = getColumn( columnIndex );
1:         if ( nullOrWrongType( Boolean.class, columnIndex, obj ) ) { return false; }
1: 
1:         return ((Boolean) obj).booleanValue();
1:     }
1: 
1:     public byte getByte(int columnIndex) throws SQLException
1:     {
1:         Number  number = getNumber( columnIndex );
1:         if ( _wasNull ) { return (byte) 0; }
1: 
1:         return number.byteValue();
1:     }
1: 
1:     public short getShort(int columnIndex) throws SQLException
1:     {
1:         Number  number = getNumber( columnIndex );
1:         if ( _wasNull ) { return (byte) 0; }
1: 
1:         return number.shortValue();
1:     }
1: 
1:     public int getInt(int columnIndex) throws SQLException
1:     {
1:         Number  number = getNumber( columnIndex );
1:         if ( _wasNull ) { return (byte) 0; }
1: 
1:         return number.intValue();
1:     }
1: 
1:     public long getLong(int columnIndex) throws SQLException
1:     {
1:         Number  number = getNumber( columnIndex );
1:         if ( _wasNull ) { return (byte) 0; }
1: 
1:         return number.longValue();
1:     }
1: 
1:     public float getFloat(int columnIndex) throws SQLException
1:     {
1:         Number  number = getNumber( columnIndex );
1:         if ( _wasNull ) { return (byte) 0; }
1: 
1:         return number.floatValue();
1:     }
1: 
1:     public double getDouble(int columnIndex) throws SQLException
1:     {
1:         Number  number = getNumber( columnIndex );
1:         if ( _wasNull ) { return (byte) 0; }
1: 
1:         return number.doubleValue();
1:     }
1: 
1:     public Object getObject(int columnIndex) throws SQLException
1:     {
1:         return getColumn( columnIndex );
1:     }
1:     
1:     public BigDecimal getBigDecimal(int columnIndex) throws SQLException
1:     {
1:         String  stringValue = getString( columnIndex );
1:         if ( _wasNull ) { return null; }
1: 
1:         try {
1:             return new BigDecimal( stringValue );
1:         }
0:         catch (Throwable t) { throw SimpleJsonUtils.wrap( t ); }
1:     }
1:     
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	MINIONS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the i-th (1-based) column as a Number.
1:      * </p>
1:      */
1:     private Number  getNumber( int idx )
1:         throws SQLException
1:     {
1:         Object  obj = getColumn( idx );
1: 
1:         if ( nullOrWrongType( Number.class, idx, obj ) ) { return null; }
1: 
1:         return (Number) obj;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Get the i-th (1-based) column as an object.
1:      * </p>
1:      */
1:     private Object  getColumn( int idx )
1:         throws SQLException
1:     {
1:         if ( (idx < 1) || (idx > _returnColumns.length) )
1:         {
1:             throw new SQLException( "Column index " + idx + " is out of bounds." );
1:         }
1: 
1:         if ( _currentRow == null )
1:         {
1:             _wasNull = true;
1:             return null;
1:         }
1: 
1:         Object  value = _currentRow.get( _returnColumns[ idx - 1 ].columnName );
1: 
1:         _wasNull = (value == null);
1: 
1:         return value;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Add a "wrong type" warning and return true if the object
1:      * has the wrong type. Return true if the object is null.
1:      * Otherwise, return false.
1:      * </p>
1:      */
1:     private boolean nullOrWrongType( Class correctType, int columnIdx, Object obj )
1:     {
1:         if ( _wasNull ) { return true; }
1:         
1:         if ( !correctType.isInstance( obj ) )
1:         {
1:             String  desiredType = correctType.getName();
1:             String  valueType = obj.getClass().getName();
1:             addWarning
1:                 (
1:                  "Column " + columnIdx +
1:                  " in row " + _nextIdx +
1:                  " is not a " + desiredType +
1:                  ". It is a " + valueType + "."
1:                  );
1: 
1:             _wasNull = true;
1:             return true;
1:         }
1: 
1:         return false;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Add a warning to the connection.
1:      * </p>
1:      */
1:     private void addWarning( String warningText )
1:     {
1:         SQLWarning  warning = new SQLWarning( warningText );
1: 
1:         if ( _warning == null ) { _warning = warning; }
1:         else { _warning.setNextWarning( warning ); }
1:     }
1:     
1: }
============================================================================