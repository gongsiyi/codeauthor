1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINStatementTimingsDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
1:48a9884: 
1:48a9884: import java.sql.Timestamp;
1:48a9884: import java.sql.PreparedStatement;
1:48a9884: import java.sql.SQLException;
1:b096444: import java.sql.Types;
1:48a9884: 
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:b096444: import org.apache.derby.iapi.types.DataTypeUtilities;
1:48a9884: 
1:48a9884: public class XPLAINStatementTimingsDescriptor extends XPLAINTableDescriptor 
1:48a9884: {
1:48a9884: 
1:48a9884:     private UUID timing_id;  // the Timing UUID, which is saved in the xplain_Statements table, if statistics timing is switched on
1:48a9884:     private Long parse_time; // the time needed for parsing the stmt text 
1:48a9884:     private Long bind_time;  // the time needed for binding the node tree
1:48a9884:     private Long optimize_time; // time needed for optimizing the node tree
1:48a9884:     private Long generate_time; // time needed for class generation
1:48a9884:     private Long compile_time; // time needed for parse+bind+optimize+generate
1:48a9884:     private Long execute_time; // time needed for execution of class 
1:48a9884:     private Timestamp begin_comp_time; // the begin compilation timestamp
1:48a9884:     private Timestamp end_comp_time;   // the end   compilation timestamp
1:48a9884:     private Timestamp begin_exe_time;  // the begin execution timestamp
1:48a9884:     private Timestamp end_exe_time;    // the end   execution timestamp
1:48a9884:     
1:48a9884:     public XPLAINStatementTimingsDescriptor() {}
1:48a9884:     public XPLAINStatementTimingsDescriptor
1:48a9884:     (
1:48a9884:             UUID timing_id,
1:48a9884:             Long parse_time,
1:48a9884:             Long bind_time,
1:48a9884:             Long optimize_time,
1:48a9884:             Long generate_time,
1:48a9884:             Long compile_time,
1:48a9884:             Long execute_time,
1:48a9884:             Timestamp begin_comp_time,
1:48a9884:             Timestamp end_comp_time,
1:48a9884:             Timestamp begin_exe_time,
1:48a9884:             Timestamp end_exe_time
1:48a9884:     )
1:48a9884:     {
1:48a9884:         this.timing_id       = timing_id;
1:48a9884:         this.parse_time      = parse_time;
1:48a9884:         this.bind_time       = bind_time;
1:48a9884:         this.optimize_time   = optimize_time;
1:48a9884:         this.generate_time   = generate_time;
1:48a9884:         this.compile_time    = compile_time;
1:48a9884:         this.execute_time    = execute_time;
1:b096444:         this.begin_comp_time = DataTypeUtilities.clone( begin_comp_time );
1:b096444:         this.end_comp_time   = DataTypeUtilities.clone( end_comp_time );
1:b096444:         this.begin_exe_time  = DataTypeUtilities.clone( begin_exe_time );
1:b096444:         this.end_exe_time    = DataTypeUtilities.clone( end_exe_time );
1:48a9884:         
1:48a9884:     }
1:48a9884:     public void setStatementParameters(PreparedStatement ps)
1:48a9884:         throws SQLException
1:48a9884:     {
1:48a9884:         ps.setString(1, timing_id.toString());
1:638cea5:         ps.setObject(2, parse_time, Types.BIGINT);
1:638cea5:         ps.setObject(3, bind_time, Types.BIGINT);
1:638cea5:         ps.setObject(4, optimize_time, Types.BIGINT);
1:638cea5:         ps.setObject(5, generate_time, Types.BIGINT);
1:638cea5:         ps.setObject(6, compile_time, Types.BIGINT);
1:638cea5:         ps.setObject(7, execute_time, Types.BIGINT);
1:48a9884:         ps.setTimestamp(8, begin_comp_time);
1:48a9884:         ps.setTimestamp(9, end_comp_time);
1:48a9884:         ps.setTimestamp(10, begin_exe_time);
1:48a9884:         ps.setTimestamp(11, end_exe_time);
1:48a9884:     }
1:48a9884:     
1:48a9884:     public String getCatalogName() { return TABLENAME_STRING; }
1:48a9884:     static final String             TABLENAME_STRING = "SYSXPLAIN_STATEMENT_TIMINGS";
1:48a9884: 
1:48a9884:     private static final String[][] indexColumnNames =
1:48a9884:     {
1:48a9884:         {"TIMING_ID"}
1:48a9884:     };
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Builds a list of columns suitable for creating this Catalog.
1:48a9884:      *
1:48a9884:      * @return array of SystemColumn suitable for making this catalog.
1:48a9884:      */
1:48a9884:     public SystemColumn[] buildColumnList() {
1:48a9884:         return new SystemColumn[] {
1:48a9884:             SystemColumnImpl.getUUIDColumn("TIMING_ID", false),
1:48a9884:             SystemColumnImpl.getColumn("PARSE_TIME", Types.BIGINT, false),
1:48a9884:             SystemColumnImpl.getColumn("BIND_TIME", Types.BIGINT, false),
1:48a9884:             SystemColumnImpl.getColumn("OPTIMIZE_TIME", Types.BIGINT, false),
1:48a9884:             SystemColumnImpl.getColumn("GENERATE_TIME", Types.BIGINT, false),
1:48a9884:             SystemColumnImpl.getColumn("COMPILE_TIME", Types.BIGINT, false),
1:48a9884:             SystemColumnImpl.getColumn("EXECUTE_TIME", Types.BIGINT, false),
1:48a9884:             SystemColumnImpl.getColumn("BEGIN_COMP_TIME", Types.TIMESTAMP, false),
1:48a9884:             SystemColumnImpl.getColumn("END_COMP_TIME", Types.TIMESTAMP, false),
1:48a9884:             SystemColumnImpl.getColumn("BEGIN_EXE_TIME", Types.TIMESTAMP, false),
1:48a9884:             SystemColumnImpl.getColumn("END_EXE_TIME", Types.TIMESTAMP, false),
1:48a9884:         };
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:638cea5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ps.setObject(2, parse_time, Types.BIGINT);
1:         ps.setObject(3, bind_time, Types.BIGINT);
1:         ps.setObject(4, optimize_time, Types.BIGINT);
1:         ps.setObject(5, generate_time, Types.BIGINT);
1:         ps.setObject(6, compile_time, Types.BIGINT);
1:         ps.setObject(7, execute_time, Types.BIGINT);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b096444
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: import org.apache.derby.iapi.types.DataTypeUtilities;
/////////////////////////////////////////////////////////////////////////
1:         this.begin_comp_time = DataTypeUtilities.clone( begin_comp_time );
1:         this.end_comp_time   = DataTypeUtilities.clone( end_comp_time );
1:         this.begin_exe_time  = DataTypeUtilities.clone( begin_exe_time );
1:         this.end_exe_time    = DataTypeUtilities.clone( end_exe_time );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINStatementTimingsDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.Timestamp;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.impl.sql.catalog.SystemColumnImpl;
0: import java.sql.Types;
1: 
1: public class XPLAINStatementTimingsDescriptor extends XPLAINTableDescriptor 
1: {
1: 
1:     private UUID timing_id;  // the Timing UUID, which is saved in the xplain_Statements table, if statistics timing is switched on
1:     private Long parse_time; // the time needed for parsing the stmt text 
1:     private Long bind_time;  // the time needed for binding the node tree
1:     private Long optimize_time; // time needed for optimizing the node tree
1:     private Long generate_time; // time needed for class generation
1:     private Long compile_time; // time needed for parse+bind+optimize+generate
1:     private Long execute_time; // time needed for execution of class 
1:     private Timestamp begin_comp_time; // the begin compilation timestamp
1:     private Timestamp end_comp_time;   // the end   compilation timestamp
1:     private Timestamp begin_exe_time;  // the begin execution timestamp
1:     private Timestamp end_exe_time;    // the end   execution timestamp
1:     
1:     public XPLAINStatementTimingsDescriptor() {}
1:     public XPLAINStatementTimingsDescriptor
1:     (
1:             UUID timing_id,
1:             Long parse_time,
1:             Long bind_time,
1:             Long optimize_time,
1:             Long generate_time,
1:             Long compile_time,
1:             Long execute_time,
1:             Timestamp begin_comp_time,
1:             Timestamp end_comp_time,
1:             Timestamp begin_exe_time,
1:             Timestamp end_exe_time
1:     )
1:     {
1:         this.timing_id       = timing_id;
1:         this.parse_time      = parse_time;
1:         this.bind_time       = bind_time;
1:         this.optimize_time   = optimize_time;
1:         this.generate_time   = generate_time;
1:         this.compile_time    = compile_time;
1:         this.execute_time    = execute_time;
0:         this.begin_comp_time = begin_comp_time;
0:         this.end_comp_time   = end_comp_time;
0:         this.begin_exe_time  = begin_exe_time;
0:         this.end_exe_time    = end_exe_time;
1:         
1:     }
1:     public void setStatementParameters(PreparedStatement ps)
1:         throws SQLException
1:     {
1:         ps.setString(1, timing_id.toString());
0:         if (parse_time != null)
0:             ps.setLong(2, parse_time.longValue());
0:         else
0:             ps.setNull(2, Types.BIGINT);
0:         if (bind_time != null)
0:             ps.setLong(3, bind_time.longValue());
0:         else
0:             ps.setNull(3, Types.BIGINT);
0:         if (optimize_time != null)
0:             ps.setLong(4, optimize_time.longValue());
0:         else
0:             ps.setNull(4, Types.BIGINT);
0:         if (generate_time != null)
0:             ps.setLong(5, generate_time.longValue());
0:         else
0:             ps.setNull(5, Types.BIGINT);
0:         if (compile_time != null)
0:             ps.setLong(6, compile_time.longValue());
0:         else
0:             ps.setNull(6, Types.BIGINT);
0:         if (execute_time != null)
0:             ps.setLong(7, execute_time.longValue());
0:         else
0:             ps.setNull(7, Types.BIGINT);
1:         ps.setTimestamp(8, begin_comp_time);
1:         ps.setTimestamp(9, end_comp_time);
1:         ps.setTimestamp(10, begin_exe_time);
1:         ps.setTimestamp(11, end_exe_time);
1:     }
1:     
1:     public String getCatalogName() { return TABLENAME_STRING; }
1:     static final String             TABLENAME_STRING = "SYSXPLAIN_STATEMENT_TIMINGS";
1: 
1:     private static final String[][] indexColumnNames =
1:     {
1:         {"TIMING_ID"}
1:     };
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[] buildColumnList() {
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("TIMING_ID", false),
1:             SystemColumnImpl.getColumn("PARSE_TIME", Types.BIGINT, false),
1:             SystemColumnImpl.getColumn("BIND_TIME", Types.BIGINT, false),
1:             SystemColumnImpl.getColumn("OPTIMIZE_TIME", Types.BIGINT, false),
1:             SystemColumnImpl.getColumn("GENERATE_TIME", Types.BIGINT, false),
1:             SystemColumnImpl.getColumn("COMPILE_TIME", Types.BIGINT, false),
1:             SystemColumnImpl.getColumn("EXECUTE_TIME", Types.BIGINT, false),
1:             SystemColumnImpl.getColumn("BEGIN_COMP_TIME", Types.TIMESTAMP, false),
1:             SystemColumnImpl.getColumn("END_COMP_TIME", Types.TIMESTAMP, false),
1:             SystemColumnImpl.getColumn("BEGIN_EXE_TIME", Types.TIMESTAMP, false),
1:             SystemColumnImpl.getColumn("END_EXE_TIME", Types.TIMESTAMP, false),
1:         };
1:     }
1: 
1: }
============================================================================