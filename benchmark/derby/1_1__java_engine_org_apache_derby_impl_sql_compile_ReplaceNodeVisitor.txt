1:2bd5cbd: /*
1:2bd5cbd: 
1:2bd5cbd:    Derby - Class org.apache.derby.impl.sql.compile.ReplaceNodeVisitor
1:2bd5cbd: 
1:2bd5cbd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2bd5cbd:    contributor license agreements.  See the NOTICE file distributed with
1:2bd5cbd:    this work for additional information regarding copyright ownership.
1:2bd5cbd:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2bd5cbd:    (the "License"); you may not use this file except in compliance with
1:2bd5cbd:    the License.  You may obtain a copy of the License at
1:2bd5cbd: 
1:2bd5cbd:       http://www.apache.org/licenses/LICENSE-2.0
1:2bd5cbd: 
1:2bd5cbd:    Unless required by applicable law or agreed to in writing, software
1:2bd5cbd:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bd5cbd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bd5cbd:    See the License for the specific language governing permissions and
1:2bd5cbd:    limitations under the License.
1:2bd5cbd: 
1:2bd5cbd:  */
1:2bd5cbd: 
1:2bd5cbd: package org.apache.derby.impl.sql.compile;
1:2bd5cbd: 
1:2bd5cbd: import org.apache.derby.iapi.error.StandardException;
1:2bd5cbd: import org.apache.derby.iapi.sql.compile.Visitable;
1:2bd5cbd: import org.apache.derby.iapi.sql.compile.Visitor;
1:2bd5cbd: 
1:2bd5cbd: /**
1:2bd5cbd:  * Replace all occurrences of a specific node with another node.
1:2bd5cbd:  */
1:2bd5cbd: class ReplaceNodeVisitor implements Visitor {
1:2bd5cbd: 
1:2bd5cbd:     private final Visitable nodeToReplace;
1:2bd5cbd:     private final Visitable replacement;
1:2bd5cbd: 
1:2bd5cbd:     ReplaceNodeVisitor(Visitable nodeToReplace, Visitable replacement) {
1:2bd5cbd:         this.nodeToReplace = nodeToReplace;
1:2bd5cbd:         this.replacement = replacement;
1:2bd5cbd:     }
1:2bd5cbd: 
1:2bd5cbd:     @Override
1:2bd5cbd:     public Visitable visit(Visitable node) throws StandardException {
1:2bd5cbd:         return (node == nodeToReplace) ? replacement : node;
1:2bd5cbd:     }
1:2bd5cbd: 
1:2bd5cbd:     @Override
1:2bd5cbd:     public boolean visitChildrenFirst(Visitable node) {
1:2bd5cbd:         return false;
1:2bd5cbd:     }
1:2bd5cbd: 
1:2bd5cbd:     @Override
1:2bd5cbd:     public boolean stopTraversal() {
1:2bd5cbd:         return false;
1:2bd5cbd:     }
1:2bd5cbd: 
1:2bd5cbd:     @Override
1:2bd5cbd:     public boolean skipChildren(Visitable node) throws StandardException {
1:2bd5cbd:         return false;
1:2bd5cbd:     }
1:2bd5cbd: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2bd5cbd
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.ReplaceNodeVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
1: /**
1:  * Replace all occurrences of a specific node with another node.
1:  */
1: class ReplaceNodeVisitor implements Visitor {
1: 
1:     private final Visitable nodeToReplace;
1:     private final Visitable replacement;
1: 
1:     ReplaceNodeVisitor(Visitable nodeToReplace, Visitable replacement) {
1:         this.nodeToReplace = nodeToReplace;
1:         this.replacement = replacement;
1:     }
1: 
1:     @Override
1:     public Visitable visit(Visitable node) throws StandardException {
1:         return (node == nodeToReplace) ? replacement : node;
1:     }
1: 
1:     @Override
1:     public boolean visitChildrenFirst(Visitable node) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean stopTraversal() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean skipChildren(Visitable node) throws StandardException {
1:         return false;
1:     }
1: }
============================================================================