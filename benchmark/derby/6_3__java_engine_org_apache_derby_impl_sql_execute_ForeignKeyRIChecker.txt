1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.ForeignKeyRIChecker
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:4cc0287: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:4cc0287: import org.apache.derby.iapi.sql.Activation;
1:4cc0287: import org.apache.derby.iapi.sql.StatementUtil;
1:4cc0287: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:4cc0287: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:4cc0287: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A Referential Integrity checker for a foreign
1:eac0369:  * key constraint.  It makes sure the foreign key is
1:eac0369:  * intact.  This is used for a change to a foreign
1:eac0369:  * key column.  see ReferencedKeyRIChecker for the code
1:eac0369:  * that validates changes to referenced keys.
1:eac0369:  */
1:eac0369: public class ForeignKeyRIChecker extends GenericRIChecker
1:eac0369: {
1:eac0369: 	/**
1:4cc0287:      * @param lcc       the language connection context
1:eac0369: 	 * @param tc		the xact controller
1:6b50965: 	 * @param fkinfo	the foreign key information 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:4cc0287:     ForeignKeyRIChecker(
1:4cc0287:         LanguageConnectionContext lcc,
1:4cc0287:         TransactionController tc,
1:4cc0287:         FKInfo fkinfo) throws StandardException
1:eac0369: 	{
1:4cc0287:         super(lcc, tc, fkinfo);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (fkInfo.type != FKInfo.FOREIGN_KEY)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("invalid type "+fkInfo.type+" for a ForeignKeyRIChecker");
1:eac0369: 			}
1:eac0369: 		} 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Check that the row either has a null column(s), or
1:eac0369: 	 * corresponds to a row in the referenced key.
1:eac0369: 	 * <p> 
1:eac0369: 	 * If the referenced key is found, then it is locked
1:eac0369: 	 * when this method returns.  The lock is held until
1:eac0369: 	 * the next call to doCheck() or close().
1:eac0369: 	 *
1:4cc0287:      * @param a     the activation
1:eac0369: 	 * @param row	the row to check
1:4cc0287:      * @param restrictCheckOnly
1:18a6fb2:      *              {@code true} if the check is relevant only for RESTRICTED
1:18a6fb2:      *              referential action.
1:18a6fb2:      * @param deferredRowReq
2:18a6fb2:      *              dummy (interface obligation only)
1:eac0369: 	 *
1:4cc0287:      * @exception StandardException on unexpected error, or
1:eac0369: 	 *		on a foreign key violation
1:eac0369: 	 */
1:4cc0287:     void doCheck(Activation a,
1:4cc0287:                  ExecRow row,
1:18a6fb2:                  boolean restrictCheckOnly,
1:18a6fb2:                  int deferredRowReq) throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if(restrictCheckOnly) //RESTRICT rule checks are not valid here.
1:eac0369: 			return; 
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If any of the columns are null, then the
1:eac0369: 		** check always succeeds.
1:eac0369: 		*/
1:eac0369: 		if (isAnyFieldNull(row))
1:eac0369: 		{
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Otherwise, we had better find this row in the
1:eac0369: 		** referenced key
1:eac0369: 		*/
1:eac0369: 		ScanController scan = getScanController(fkInfo.refConglomNumber, refScoci, refDcoci, row);
1:eac0369: 		if (!scan.next())
1:eac0369: 		{
1:4cc0287:             final UUID fkId = fkInfo.fkIds[0];
1:4cc0287:             close();
1:eac0369: 
1:4cc0287:             if (fkInfo.deferrable[0] &&
1:4cc0287:                 lcc.isEffectivelyDeferred(lcc.getCurrentSQLSessionContext(a),
1:4cc0287:                         fkId)) {
1:4cc0287:                 deferredRowsHashTable =
1:4cc0287:                         DeferredConstraintsMemory.rememberFKViolation(
1:4cc0287:                                 lcc,
1:4cc0287:                                 deferredRowsHashTable,
1:4cc0287:                                 fkInfo.fkIds[0],
1:4cc0287:                                 indexQualifierRow.getRowArray(),
1:4cc0287:                                 fkInfo.schemaName,
1:4cc0287:                                 fkInfo.tableName);
1:4cc0287:             } else {
1:4cc0287:                 StandardException se = StandardException.newException(
1:4cc0287:                         SQLState.LANG_FK_VIOLATION,
1:4cc0287:                         fkInfo.fkConstraintNames[0],
1:4cc0287:                         fkInfo.tableName,
1:4cc0287:                         StatementUtil.typeName(fkInfo.stmtType),
1:4cc0287:                         RowUtil.toString(row, fkInfo.colArray));
1:4cc0287:                 throw se;
1:4cc0287:             }
1:4cc0287: 
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		/*
1:eac0369: 		** If we found the row, we are currently positioned on
1:eac0369: 		** the row when we leave this method.  So we hold the
1:eac0369: 		** lock on the referenced key, which is very important.
1:eac0369: 		*/	
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the isolation level for the scan for
1:eac0369: 	 * the RI check.
1:eac0369: 	 *
1:eac0369: 	 * NOTE: The level will eventually be instantaneous
1:0c5bc3a:      * locking once the implementation changes.
1:eac0369: 	 *
1:eac0369: 	 * @return The isolation level for the scan for
1:eac0369: 	 * the RI check.
1:eac0369: 	 */
1:eac0369: 	int getRICheckIsolationLevel()
1:eac0369: 	{
1:eac0369: 		return TransactionController.ISOLATION_READ_COMMITTED;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
commit:45da2f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:18a6fb2
/////////////////////////////////////////////////////////////////////////
1:      *              {@code true} if the check is relevant only for RESTRICTED
1:      *              referential action.
0:      * @param postCheck
1:      *              dummy (interface obligation only)
1:      * @param deferredRowReq
1:      *              dummy (interface obligation only)
1:                  boolean restrictCheckOnly,
0:                  boolean postCheck,
1:                  int deferredRowReq) throws StandardException
commit:4cc0287
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.StatementUtil;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:      * @param lcc       the language connection context
1:     ForeignKeyRIChecker(
1:         LanguageConnectionContext lcc,
1:         TransactionController tc,
1:         FKInfo fkinfo) throws StandardException
1:         super(lcc, tc, fkinfo);
/////////////////////////////////////////////////////////////////////////
1:      * @param a     the activation
1:      * @param restrictCheckOnly
1:      * @exception StandardException on unexpected error, or
1:     void doCheck(Activation a,
1:                  ExecRow row,
0:                  boolean restrictCheckOnly) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:             final UUID fkId = fkInfo.fkIds[0];
1:             close();
1:             if (fkInfo.deferrable[0] &&
1:                 lcc.isEffectivelyDeferred(lcc.getCurrentSQLSessionContext(a),
1:                         fkId)) {
1:                 deferredRowsHashTable =
1:                         DeferredConstraintsMemory.rememberFKViolation(
1:                                 lcc,
1:                                 deferredRowsHashTable,
0:                                 fkInfo.fkConglomNumbers[0],
0:                                 fkInfo.refConglomNumber,
1:                                 fkInfo.fkIds[0],
1:                                 indexQualifierRow.getRowArray(),
1:                                 fkInfo.schemaName,
1:                                 fkInfo.tableName);
1:             } else {
1:                 StandardException se = StandardException.newException(
1:                         SQLState.LANG_FK_VIOLATION,
1:                         fkInfo.fkConstraintNames[0],
1:                         fkInfo.tableName,
1:                         StatementUtil.typeName(fkInfo.stmtType),
1:                         RowUtil.toString(row, fkInfo.colArray));
1:                 throw se;
1:             }
1: 
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:      * locking once the implementation changes.
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param fkinfo	the foreign key information 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.ForeignKeyRIChecker
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.StatementUtil;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1:  * A Referential Integrity checker for a foreign
1:  * key constraint.  It makes sure the foreign key is
1:  * intact.  This is used for a change to a foreign
1:  * key column.  see ReferencedKeyRIChecker for the code
1:  * that validates changes to referenced keys.
1:  */
1: public class ForeignKeyRIChecker extends GenericRIChecker
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * @param tc		the xact controller
0: 	 * @param fkInfo	the foreign key information 
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	ForeignKeyRIChecker(TransactionController tc, FKInfo fkinfo)
0: 		throws StandardException
1: 	{
0: 		super(tc, fkinfo);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (fkInfo.type != FKInfo.FOREIGN_KEY)
1: 			{
1: 				SanityManager.THROWASSERT("invalid type "+fkInfo.type+" for a ForeignKeyRIChecker");
1: 			}
1: 		} 
1: 	}
1: 
1: 	/**
1: 	 * Check that the row either has a null column(s), or
1: 	 * corresponds to a row in the referenced key.
1: 	 * <p> 
1: 	 * If the referenced key is found, then it is locked
1: 	 * when this method returns.  The lock is held until
1: 	 * the next call to doCheck() or close().
1: 	 *
1: 	 * @param row	the row to check
1: 	 *
0: 	 * @exception StandardException on unexped error, or
1: 	 *		on a foreign key violation
1: 	 */
0: 	void doCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException
1: 	{
1: 
1: 		if(restrictCheckOnly) //RESTRICT rule checks are not valid here.
1: 			return; 
1: 
1: 		/*
1: 		** If any of the columns are null, then the
1: 		** check always succeeds.
1: 		*/
1: 		if (isAnyFieldNull(row))
1: 		{
1: 			return;
1: 		}
1: 
1: 		/*
1: 		** Otherwise, we had better find this row in the
1: 		** referenced key
1: 		*/
1: 		ScanController scan = getScanController(fkInfo.refConglomNumber, refScoci, refDcoci, row);
1: 		if (!scan.next())
1: 		{
0: 			close();
0: 			StandardException se = StandardException.newException(SQLState.LANG_FK_VIOLATION, fkInfo.fkConstraintNames[0],
0: 										fkInfo.tableName,
0: 										StatementUtil.typeName(fkInfo.stmtType),
0: 										RowUtil.toString(row, fkInfo.colArray));
1: 
0: 			throw se;
1: 		}
1: 		
1: 		/*
1: 		** If we found the row, we are currently positioned on
1: 		** the row when we leave this method.  So we hold the
1: 		** lock on the referenced key, which is very important.
1: 		*/	
1: 	}
1: 
1: 	/**
1: 	 * Get the isolation level for the scan for
1: 	 * the RI check.
1: 	 *
1: 	 * NOTE: The level will eventually be instantaneous
0: 	 * locking once the implemenation changes.
1: 	 *
1: 	 * @return The isolation level for the scan for
1: 	 * the RI check.
1: 	 */
1: 	int getRICheckIsolationLevel()
1: 	{
1: 		return TransactionController.ISOLATION_READ_COMMITTED;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.StatementUtil;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: /**
0:  * A Referential Integrity checker for a foreign
0:  * key constraint.  It makes sure the foreign key is
0:  * intact.  This is used for a change to a foreign
0:  * key column.  see ReferencedKeyRIChecker for the code
0:  * that validates changes to referenced keys.
0:  */
0: public class ForeignKeyRIChecker extends GenericRIChecker
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * @param tc		the xact controller
0: 	 * @param fkInfo	the foreign key information 
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	ForeignKeyRIChecker(TransactionController tc, FKInfo fkinfo)
0: 		throws StandardException
0: 	{
0: 		super(tc, fkinfo);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (fkInfo.type != FKInfo.FOREIGN_KEY)
0: 			{
0: 				SanityManager.THROWASSERT("invalid type "+fkInfo.type+" for a ForeignKeyRIChecker");
0: 			}
0: 		} 
0: 	}
0: 
0: 	/**
0: 	 * Check that the row either has a null column(s), or
0: 	 * corresponds to a row in the referenced key.
0: 	 * <p> 
0: 	 * If the referenced key is found, then it is locked
0: 	 * when this method returns.  The lock is held until
0: 	 * the next call to doCheck() or close().
0: 	 *
0: 	 * @param row	the row to check
0: 	 *
0: 	 * @exception StandardException on unexped error, or
0: 	 *		on a foreign key violation
0: 	 */
0: 	void doCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException
0: 	{
0: 
0: 		if(restrictCheckOnly) //RESTRICT rule checks are not valid here.
0: 			return; 
0: 
0: 		/*
0: 		** If any of the columns are null, then the
0: 		** check always succeeds.
0: 		*/
0: 		if (isAnyFieldNull(row))
0: 		{
0: 			return;
0: 		}
0: 
0: 		/*
0: 		** Otherwise, we had better find this row in the
0: 		** referenced key
0: 		*/
0: 		ScanController scan = getScanController(fkInfo.refConglomNumber, refScoci, refDcoci, row);
0: 		if (!scan.next())
0: 		{
0: 			close();
0: 			StandardException se = StandardException.newException(SQLState.LANG_FK_VIOLATION, fkInfo.fkConstraintNames[0],
0: 										fkInfo.tableName,
0: 										StatementUtil.typeName(fkInfo.stmtType),
0: 										RowUtil.toString(row, fkInfo.colArray));
0: 
0: 			throw se;
0: 		}
0: 		
0: 		/*
0: 		** If we found the row, we are currently positioned on
0: 		** the row when we leave this method.  So we hold the
0: 		** lock on the referenced key, which is very important.
0: 		*/	
0: 	}
0: 
0: 	/**
0: 	 * Get the isolation level for the scan for
0: 	 * the RI check.
0: 	 *
0: 	 * NOTE: The level will eventually be instantaneous
0: 	 * locking once the implemenation changes.
0: 	 *
0: 	 * @return The isolation level for the scan for
0: 	 * the RI check.
0: 	 */
0: 	int getRICheckIsolationLevel()
0: 	{
0: 		return TransactionController.ISOLATION_READ_COMMITTED;
0: 	}
0: }
============================================================================