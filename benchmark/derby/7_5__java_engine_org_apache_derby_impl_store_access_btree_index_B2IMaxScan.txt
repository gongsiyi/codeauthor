1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IMaxScan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeMaxScan;
1:eac0369: 
1:fa09146: // For JavaDoc references (i.e. @see)
1:fa09146: import org.apache.derby.iapi.store.access.GenericScanController;
1:eac0369: 
2:eac0369: /**
1:d7e478a: Scan used to find maximum value in the secondary index.
1:eac0369: 
1:d7e478a: This class implements an optimized interface to find the maximum row,
1:d7e478a: for a set of rows between an input start and stop key.
1:d7e478a: 
1:d7e478a: Note most work of this class is inherited from the generic btree implementation.
1:d7e478a: This class initializes the top level object and deals with locking information
1:d7e478a: specific to a secondary index implementation of a btree.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class B2IMaxScan extends BTreeMaxScan
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Fields of B2IMaxScan.
1:eac0369: 	*/
1:eac0369:     private ConglomerateController  base_cc_for_locking;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of B2IMaxScan.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	B2IMaxScan()
1:eac0369: 	{
1:eac0369: 		// Perform the generic b-tree scan construction.
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Close the scan.
1:eac0369: 	@see GenericScanController#newRowLocationTemplate
1:eac0369:     **/
1:eac0369:     public void close()
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369: 		super.close();
1:eac0369: 
1:eac0369:         if (base_cc_for_locking != null)
1:eac0369:         {
1:eac0369:             base_cc_for_locking.close();
1:eac0369:             base_cc_for_locking = null;
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Close the scan, a commit or abort is about to happen.
1:eac0369:     **/
1:eac0369:     public boolean closeForEndTransaction(boolean closeHeldScan)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean ret_val = super.closeForEndTransaction(closeHeldScan);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 ret_val, "B2IMaxScan never should be held across a commit.");
1:eac0369: 
1:eac0369:         if (base_cc_for_locking != null)
1:eac0369:         {
1:eac0369:             base_cc_for_locking.close();
1:eac0369:             base_cc_for_locking = null;
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(ret_val);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Initialize the scan for use.
1:eac0369: 	<p>
1:eac0369: 	Any changes to this method may have to be reflected in close as well.
1:eac0369:     <p>
1:eac0369:     The btree init opens the container (super.init), and stores away the
1:eac0369:     state of the qualifiers.  The actual searching for the first position
1:eac0369:     is delayed until the first next() call.
1:eac0369: 
1:eac0369: 	@exception  StandardException  Standard exception policy.
1:eac0369: 	**/
1:eac0369: 	public void init(
1:eac0369:     TransactionManager  xact_manager,
1:eac0369:     Transaction         rawtran,
1:eac0369:     int                 open_mode,
1:eac0369:     int                 lock_level,
1:eac0369:     LockingPolicy       locking_policy,
1:eac0369:     int                 isolation_level,
1:eac0369:     boolean             open_for_locking,
1:eac0369:     FormatableBitSet             scanColumnList,
1:eac0369:     B2I                 conglomerate,
1:eac0369:     B2IUndo             undo)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         // open and lock the base table.
1:eac0369: 
1:eac0369:         int base_open_mode = 
1:eac0369:             open_mode | TransactionController.OPENMODE_FOR_LOCK_ONLY;
1:eac0369: 
1:eac0369:         // open the base conglomerate - just to get lock
1:eac0369:         base_cc_for_locking = 
1:eac0369:             xact_manager.openConglomerate(
1:eac0369:                 conglomerate.baseConglomerateId, false, 
1:eac0369:                 base_open_mode, lock_level,
1:eac0369:                 isolation_level);
1:eac0369:         
1:eac0369:         BTreeLockingPolicy b2i_locking_policy = 
1:eac0369:             conglomerate.getBtreeLockingPolicy(
1:eac0369:                 rawtran, lock_level, open_mode, isolation_level, 
1:eac0369:                 base_cc_for_locking, this);
1:eac0369: 
1:eac0369: 		super.init(
1:eac0369:             xact_manager,
1:eac0369:             rawtran,
1:eac0369:             false,
1:eac0369:             open_mode,
1:eac0369:             lock_level,
1:eac0369:             b2i_locking_policy,
1:eac0369:             scanColumnList,
1:eac0369:             (DataValueDescriptor[]) null,// no start position supported
1:eac0369:             ScanController.NA,           // no start position supported
1:eac0369:             (Qualifier[][]) null,        // no qualifier supported
1:eac0369:             (DataValueDescriptor[]) null,// no stop position supported
1:eac0369:             ScanController.NA,           // no stop position supported
1:eac0369:             conglomerate,
1:eac0369:             undo,
1:eac0369:             (StaticCompiledOpenConglomInfo) null,
1:eac0369:             (DynamicCompiledOpenConglomInfo) null);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: // For JavaDoc references (i.e. @see)
1: import org.apache.derby.iapi.store.access.GenericScanController;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d7e478a
/////////////////////////////////////////////////////////////////////////
1: Scan used to find maximum value in the secondary index.
1: This class implements an optimized interface to find the maximum row,
1: for a set of rows between an input start and stop key.
1: 
1: Note most work of this class is inherited from the generic btree implementation.
1: This class initializes the top level object and deals with locking information
1: specific to a secondary index implementation of a btree.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IMaxScan
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.GenericScanController;
1: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import org.apache.derby.impl.store.access.btree.BTreeController;
1: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1: import org.apache.derby.impl.store.access.btree.BTreeMaxScan;
1: 
0: import org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;
1: 
1: /**
1: 
0:   A B2I controller object is the concrete class which corresponds to an open
0:   b-tree secondary index.
1: 
1: **/
1: 
1: public class B2IMaxScan extends BTreeMaxScan
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/*
1: 	** Fields of B2IMaxScan.
1: 	*/
1:     private ConglomerateController  base_cc_for_locking;
1: 
1: 	/*
1: 	** Methods of B2IMaxScan.
1: 	*/
1: 
1: 	B2IMaxScan()
1: 	{
1: 		// Perform the generic b-tree scan construction.
1: 		super();
1: 	}
1: 
1:     /**
1:     Close the scan.
1: 	@see GenericScanController#newRowLocationTemplate
1:     **/
1:     public void close()
1:         throws StandardException
1: 	{
1: 		super.close();
1: 
1:         if (base_cc_for_locking != null)
1:         {
1:             base_cc_for_locking.close();
1:             base_cc_for_locking = null;
1:         }
1: 	}
1: 
1:     /**
1:     Close the scan, a commit or abort is about to happen.
1:     **/
1:     public boolean closeForEndTransaction(boolean closeHeldScan)
1:         throws StandardException
1: 	{
1: 		boolean ret_val = super.closeForEndTransaction(closeHeldScan);
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(
1:                 ret_val, "B2IMaxScan never should be held across a commit.");
1: 
1:         if (base_cc_for_locking != null)
1:         {
1:             base_cc_for_locking.close();
1:             base_cc_for_locking = null;
1:         }
1: 
1:         return(ret_val);
1: 	}
1: 
1: 	/**
1: 	Initialize the scan for use.
1: 	<p>
1: 	Any changes to this method may have to be reflected in close as well.
1:     <p>
1:     The btree init opens the container (super.init), and stores away the
1:     state of the qualifiers.  The actual searching for the first position
1:     is delayed until the first next() call.
1: 
1: 	@exception  StandardException  Standard exception policy.
1: 	**/
1: 	public void init(
1:     TransactionManager  xact_manager,
1:     Transaction         rawtran,
1:     int                 open_mode,
1:     int                 lock_level,
1:     LockingPolicy       locking_policy,
1:     int                 isolation_level,
1:     boolean             open_for_locking,
1:     FormatableBitSet             scanColumnList,
1:     B2I                 conglomerate,
1:     B2IUndo             undo)
1:         throws StandardException
1: 	{
1:         // open and lock the base table.
1: 
1:         int base_open_mode = 
1:             open_mode | TransactionController.OPENMODE_FOR_LOCK_ONLY;
1: 
1:         // open the base conglomerate - just to get lock
1:         base_cc_for_locking = 
1:             xact_manager.openConglomerate(
1:                 conglomerate.baseConglomerateId, false, 
1:                 base_open_mode, lock_level,
1:                 isolation_level);
1:         
1:         BTreeLockingPolicy b2i_locking_policy = 
1:             conglomerate.getBtreeLockingPolicy(
1:                 rawtran, lock_level, open_mode, isolation_level, 
1:                 base_cc_for_locking, this);
1: 
1: 		super.init(
1:             xact_manager,
1:             rawtran,
1:             false,
1:             open_mode,
1:             lock_level,
1:             b2i_locking_policy,
1:             scanColumnList,
1:             (DataValueDescriptor[]) null,// no start position supported
1:             ScanController.NA,           // no start position supported
1:             (Qualifier[][]) null,        // no qualifier supported
1:             (DataValueDescriptor[]) null,// no stop position supported
1:             ScanController.NA,           // no stop position supported
1:             conglomerate,
1:             undo,
1:             (StaticCompiledOpenConglomInfo) null,
1:             (DynamicCompiledOpenConglomInfo) null);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.GenericScanController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import org.apache.derby.impl.store.access.btree.BTreeController;
0: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
0: import org.apache.derby.impl.store.access.btree.BTreeMaxScan;
0: 
0: import org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;
0: 
0: /**
0: 
0:   A B2I controller object is the concrete class which corresponds to an open
0:   b-tree secondary index.
0: 
0: **/
0: 
0: public class B2IMaxScan extends BTreeMaxScan
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/*
0: 	** Fields of B2IMaxScan.
0: 	*/
0:     private ConglomerateController  base_cc_for_locking;
0: 
0: 	/*
0: 	** Methods of B2IMaxScan.
0: 	*/
0: 
0: 	B2IMaxScan()
0: 	{
0: 		// Perform the generic b-tree scan construction.
0: 		super();
0: 	}
0: 
0:     /**
0:     Close the scan.
0: 	@see GenericScanController#newRowLocationTemplate
0:     **/
0:     public void close()
0:         throws StandardException
0: 	{
0: 		super.close();
0: 
0:         if (base_cc_for_locking != null)
0:         {
0:             base_cc_for_locking.close();
0:             base_cc_for_locking = null;
0:         }
0: 	}
0: 
0:     /**
0:     Close the scan, a commit or abort is about to happen.
0:     **/
0:     public boolean closeForEndTransaction(boolean closeHeldScan)
0:         throws StandardException
0: 	{
0: 		boolean ret_val = super.closeForEndTransaction(closeHeldScan);
0: 
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(
0:                 ret_val, "B2IMaxScan never should be held across a commit.");
0: 
0:         if (base_cc_for_locking != null)
0:         {
0:             base_cc_for_locking.close();
0:             base_cc_for_locking = null;
0:         }
0: 
0:         return(ret_val);
0: 	}
0: 
0: 	/**
0: 	Initialize the scan for use.
0: 	<p>
0: 	Any changes to this method may have to be reflected in close as well.
0:     <p>
0:     The btree init opens the container (super.init), and stores away the
0:     state of the qualifiers.  The actual searching for the first position
0:     is delayed until the first next() call.
0: 
0: 	@exception  StandardException  Standard exception policy.
0: 	**/
0: 	public void init(
0:     TransactionManager  xact_manager,
0:     Transaction         rawtran,
0:     int                 open_mode,
0:     int                 lock_level,
0:     LockingPolicy       locking_policy,
0:     int                 isolation_level,
0:     boolean             open_for_locking,
0:     FormatableBitSet             scanColumnList,
0:     B2I                 conglomerate,
0:     B2IUndo             undo)
0:         throws StandardException
0: 	{
0:         // open and lock the base table.
0: 
0:         int base_open_mode = 
0:             open_mode | TransactionController.OPENMODE_FOR_LOCK_ONLY;
0: 
0:         // open the base conglomerate - just to get lock
0:         base_cc_for_locking = 
0:             xact_manager.openConglomerate(
0:                 conglomerate.baseConglomerateId, false, 
0:                 base_open_mode, lock_level,
0:                 isolation_level);
0:         
0:         BTreeLockingPolicy b2i_locking_policy = 
0:             conglomerate.getBtreeLockingPolicy(
0:                 rawtran, lock_level, open_mode, isolation_level, 
0:                 base_cc_for_locking, this);
0: 
0: 		super.init(
0:             xact_manager,
0:             rawtran,
0:             false,
0:             open_mode,
0:             lock_level,
0:             b2i_locking_policy,
0:             scanColumnList,
0:             (DataValueDescriptor[]) null,// no start position supported
0:             ScanController.NA,           // no start position supported
0:             (Qualifier[][]) null,        // no qualifier supported
0:             (DataValueDescriptor[]) null,// no stop position supported
0:             ScanController.NA,           // no stop position supported
0:             conglomerate,
0:             undo,
0:             (StaticCompiledOpenConglomInfo) null,
0:             (DynamicCompiledOpenConglomInfo) null);
0: 	}
0: }
============================================================================