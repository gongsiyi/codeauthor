1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.loader.ClassInfo
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.loader;
1:eac0369: 
1:eac0369: import java.lang.reflect.Constructor;
1:eac0369: import java.lang.reflect.InvocationTargetException;
1:eac0369: 
1:eac0369: public class ClassInfo implements InstanceGetter {
1:eac0369: 
1:eac0369: 	private static final Class[] noParameters = new Class[0];
1:eac0369: 	private static final Object[] noArguments = new Object[0];
1:eac0369: 
1:073b862: 	private final Class<?> clazz;
1:eac0369: 	private boolean useConstructor = true;
1:eac0369: 	private Constructor noArgConstructor;
1:eac0369: 
1:073b862: 	public ClassInfo(Class<?> clazz) {
1:eac0369: 		this.clazz = clazz;
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Return the name of this class.
1:eac0369: 	*/
1:eac0369: 	public final String getClassName() {
1:eac0369: 		return clazz.getName();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the class object for this class.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public final Class getClassObject() {
1:eac0369: 
1:eac0369: 		return clazz;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create an instance of this class. Assumes that clazz has already been
1:eac0369: 		initialized. Optimizes Class.newInstance() by caching and using the
1:eac0369: 		no-arg Constructor directly. Class.newInstance() looks up the constructor
1:eac0369: 		each time.
1:eac0369: 
1:eac0369: 		@exception InstantiationException Zero arg constructor can not be executed
1:eac0369: 		@exception IllegalAccessException Class or zero arg constructor is not public.
1:eac0369: 		@exception InvocationTargetException Exception throw in zero-arg constructor.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Object getNewInstance()
1:4469400: 		throws InstantiationException,
1:4469400:                IllegalAccessException,
1:4469400:                InvocationTargetException,
1:4469400:                NoSuchMethodException
1:4469400:   {
1:eac0369: 
1:eac0369: 		if (!useConstructor) {
1:eac0369: 
1:4469400:             return clazz.getConstructor().newInstance();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (noArgConstructor == null) {
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				noArgConstructor =  clazz.getConstructor(noParameters);
1:eac0369: 
1:eac0369: 			} catch (NoSuchMethodException nsme) {
1:eac0369: 				// let Class.newInstace() generate the exception
1:eac0369: 				useConstructor = false;
1:eac0369: 				return getNewInstance();
1:eac0369: 
1:eac0369: 			} catch (SecurityException se) {
1:eac0369: 				// not allowed to to get a handle on the constructor
1:eac0369: 				// just use the standard mechanism.
1:eac0369: 				useConstructor = false;
1:eac0369: 				return getNewInstance();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			return noArgConstructor.newInstance(noArguments);
1:eac0369: 		} catch (IllegalArgumentException iae) {
1:eac0369: 			// can't happen since no arguments are passed.
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: 		throws InstantiationException,
1:                IllegalAccessException,
1:                InvocationTargetException,
1:                NoSuchMethodException
1:   {
1:             return clazz.getConstructor().newInstance();
commit:073b862
/////////////////////////////////////////////////////////////////////////
1: 	private final Class<?> clazz;
1: 	public ClassInfo(Class<?> clazz) {
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.loader.ClassInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.loader
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.loader;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: 
1: public class ClassInfo implements InstanceGetter {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private static final Class[] noParameters = new Class[0];
1: 	private static final Object[] noArguments = new Object[0];
1: 
0: 	private final Class clazz;
1: 	private boolean useConstructor = true;
1: 	private Constructor noArgConstructor;
1: 
0: 	public ClassInfo(Class clazz) {
1: 		this.clazz = clazz;
1: 	}
1: 
1: 	/**
1: 		Return the name of this class.
1: 	*/
1: 	public final String getClassName() {
1: 		return clazz.getName();
1: 	}
1: 
1: 	/**
1: 		Return the class object for this class.
1: 
1: 	*/
1: 	public final Class getClassObject() {
1: 
1: 		return clazz;
1: 	}
1: 
1: 	/**
1: 		Create an instance of this class. Assumes that clazz has already been
1: 		initialized. Optimizes Class.newInstance() by caching and using the
1: 		no-arg Constructor directly. Class.newInstance() looks up the constructor
1: 		each time.
1: 
1: 		@exception InstantiationException Zero arg constructor can not be executed
1: 		@exception IllegalAccessException Class or zero arg constructor is not public.
1: 		@exception InvocationTargetException Exception throw in zero-arg constructor.
1: 
1: 	*/
1: 	public Object getNewInstance()
0: 		throws InstantiationException, IllegalAccessException, InvocationTargetException  {
1: 
1: 		if (!useConstructor) {
1: 
0: 			return clazz.newInstance();
1: 		}
1: 
1: 		if (noArgConstructor == null) {
1: 
1: 			try {
1: 				noArgConstructor =  clazz.getConstructor(noParameters);
1: 
1: 			} catch (NoSuchMethodException nsme) {
1: 				// let Class.newInstace() generate the exception
1: 				useConstructor = false;
1: 				return getNewInstance();
1: 
1: 			} catch (SecurityException se) {
1: 				// not allowed to to get a handle on the constructor
1: 				// just use the standard mechanism.
1: 				useConstructor = false;
1: 				return getNewInstance();
1: 			}
1: 		}
1: 
1: 		try {
1: 			return noArgConstructor.newInstance(noArguments);
1: 		} catch (IllegalArgumentException iae) {
1: 			// can't happen since no arguments are passed.
1: 			return null;
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.loader
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.loader;
0: 
0: import java.lang.reflect.Constructor;
0: import java.lang.reflect.InvocationTargetException;
0: 
0: public class ClassInfo implements InstanceGetter {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private static final Class[] noParameters = new Class[0];
0: 	private static final Object[] noArguments = new Object[0];
0: 
0: 	private final Class clazz;
0: 	private boolean useConstructor = true;
0: 	private Constructor noArgConstructor;
0: 
0: 	public ClassInfo(Class clazz) {
0: 		this.clazz = clazz;
0: 	}
0: 
0: 	/**
0: 		Return the name of this class.
0: 	*/
0: 	public final String getClassName() {
0: 		return clazz.getName();
0: 	}
0: 
0: 	/**
0: 		Return the class object for this class.
0: 
0: 	*/
0: 	public final Class getClassObject() {
0: 
0: 		return clazz;
0: 	}
0: 
0: 	/**
0: 		Create an instance of this class. Assumes that clazz has already been
0: 		initialized. Optimizes Class.newInstance() by caching and using the
0: 		no-arg Constructor directly. Class.newInstance() looks up the constructor
0: 		each time.
0: 
0: 		@exception InstantiationException Zero arg constructor can not be executed
0: 		@exception IllegalAccessException Class or zero arg constructor is not public.
0: 		@exception InvocationTargetException Exception throw in zero-arg constructor.
0: 
0: 	*/
0: 	public Object getNewInstance()
0: 		throws InstantiationException, IllegalAccessException, InvocationTargetException  {
0: 
0: 		if (!useConstructor) {
0: 
0: 			return clazz.newInstance();
0: 		}
0: 
0: 		if (noArgConstructor == null) {
0: 
0: 			try {
0: 				noArgConstructor =  clazz.getConstructor(noParameters);
0: 
0: 			} catch (NoSuchMethodException nsme) {
0: 				// let Class.newInstace() generate the exception
0: 				useConstructor = false;
0: 				return getNewInstance();
0: 
0: 			} catch (SecurityException se) {
0: 				// not allowed to to get a handle on the constructor
0: 				// just use the standard mechanism.
0: 				useConstructor = false;
0: 				return getNewInstance();
0: 			}
0: 		}
0: 
0: 		try {
0: 			return noArgConstructor.newInstance(noArguments);
0: 		} catch (IllegalArgumentException iae) {
0: 			// can't happen since no arguments are passed.
0: 			return null;
0: 		}
0: 	}
0: }
============================================================================