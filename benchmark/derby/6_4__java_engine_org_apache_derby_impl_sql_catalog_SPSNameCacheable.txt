1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SPSNameCacheable
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:afe6225: import org.apache.derby.iapi.services.cache.Cacheable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:afe6225: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This class implements a Cacheable for a DataDictionary cache of
1:eac0369:  * sps descriptors, with the lookup key being the name/schema of the sps.
1:eac0369:  * Assumes client passes in a string that includes the schema name.
1:eac0369:  * <p>
1:eac0369:  * The cache ensures that the class of the target sps is loaded
1:eac0369:  * if the sps is found in cache.  This is ensured by calling
1:eac0369:  * loadGeneratedClass() on the sps when it is added to the cache.
1:eac0369:  * Each subsequent user of the sps cache will do its own load/unload
1:eac0369:  * on the class.  Because the class manager/loader maintains reference
1:eac0369:  * counts on the classes it is handling, the user load/unload will
1:eac0369:  * just increment/decrement the use count.  Only when the sps is
1:eac0369:  * uncached will it be unloaded.
1:eac0369:  */
1:eac0369: class SPSNameCacheable implements Cacheable
6:eac0369: {
1:eac0369: 	private TableKey 			identity;
1:eac0369: 	private SPSDescriptor		spsd;
1:eac0369: 	private final DataDictionaryImpl	dd;
1:eac0369: 
1:eac0369: 
1:eac0369: 	SPSNameCacheable(DataDictionaryImpl dd) {
1:eac0369: 		this.dd = dd;
6:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clearIdentity */
1:eac0369: 	public void clearIdentity()
1:eac0369: 	{
1:eac0369: 		if (spsd != null)
1:eac0369: 		{
1:eac0369: 			dd.spsCacheEntryRemoved(spsd);
1:eac0369: 
2:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
1:eac0369: 				{
1:eac0369: 					System.out.println("SPSCACHE: clearIdentity() on "+spsd.getName());
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			spsd = null;
1:eac0369: 			identity = null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#getIdentity */
1:eac0369: 	public Object getIdentity()
1:eac0369: 	{
1:eac0369: 		return identity;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#createIdentity */
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(key instanceof TableKey))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Key for a SPSNameCacheElement is a " +
1:eac0369: 						key.getClass().getName() +
1:eac0369: 						" instead of a TableKey");
1:eac0369: 			}
1:eac0369: 			if (!(createParameter instanceof SPSDescriptor))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Create parameter for a SPSNameCacheElement is a " +
1:eac0369: 					createParameter.getClass().getName() +
1:eac0369: 					"instead of a SPSDescriptorImpl");
1:eac0369: 			}			
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		identity = (TableKey)key;
1:eac0369: 		spsd = (SPSDescriptor) createParameter;
1:eac0369: 		
1:eac0369: 		if (spsd != null)
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
1:eac0369: 				{
1:eac0369: 					System.out.println("SPSCACHE: createIdentity() on "+spsd.getName());
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			dd.spsCacheEntryAdded(spsd);
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				spsd.loadGeneratedClass();
1:eac0369: 			} catch (StandardException e)
1:eac0369: 			{
1:eac0369: 				/*		
1:eac0369: 				** We cannot throw an exception here, and although
1:eac0369: 				** we don't expect a problem, we'll put some debugging
1:eac0369: 				** under sanity just in case.  Note that even if we
1:eac0369: 				** do get an exception here, everything else will work
1:eac0369: 				** ok -- subsequent attempts to access the generated
1:eac0369: 				** class for this sps will do a load themselves, and
1:eac0369: 				** they will throw their exception back to the user.
1:eac0369: 				*/	
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					System.out.println("Error loading class for "+spsd.getName());
1:eac0369: 					System.out.println(e);
1:eac0369: 					e.printStackTrace();
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			return this;
1:eac0369: 		}
2:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Cacheable#setIdentity
4:eac0369: 	 *
2:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public Cacheable setIdentity(Object key) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(key instanceof TableKey))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Key for a SPSNameCacheable Element is a " +
1:eac0369: 					key.getClass().getName() +
1:eac0369: 					" instead of a TableKey");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		
1:eac0369: 		identity = (TableKey)key ;
1:eac0369: 		spsd = dd.getUncachedSPSDescriptor(identity);
1:eac0369: 		if (spsd != null)
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
1:eac0369: 				{
1:eac0369: 					System.out.println("SPSCACHE: setIdentity() on "+spsd.getName());
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			dd.spsCacheEntryAdded(spsd);
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				spsd.loadGeneratedClass();
1:eac0369: 			} catch (StandardException e)
1:eac0369: 			{
1:eac0369: 				/*		
1:eac0369: 				** We cannot throw an exception here, and although
1:eac0369: 				** we don't expect a problem, we'll put some debugging
1:eac0369: 				** under sanity just in case.  Note that even if we
1:eac0369: 				** do get an exception here, everything else will work
1:eac0369: 				** ok -- subsequent attempts to access the generated
1:eac0369: 				** class for this sps will do a load themselves, and
1:eac0369: 				** they will throw their exception back to the user.
1:eac0369: 				*/	
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					System.out.println("Error loading class for "+spsd.getName());
1:eac0369: 					System.out.println(e);
1:eac0369: 					e.printStackTrace();
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clean */
1:eac0369: 	public void clean(boolean forRemove)
1:eac0369: 	{
1:eac0369: 		return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#isDirty */
1:eac0369: 	public boolean isDirty()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the sps descriptor that is associated with this Cacheable
1:eac0369: 	 */
1:eac0369: 	public SPSDescriptor getSPSDescriptor()
1:eac0369: 	{
1:eac0369: 		return spsd;
1:eac0369: 	}
1:eac0369: 
1:afe6225:     // /**
1:afe6225:     //  * Check the consistency of the table descriptor held by this TDCacheable
1:afe6225:     //  * versus an uncached table descriptor.
1:afe6225:     //  *
1:afe6225:     //  * @param uncachedSpsd  The uncached descriptor to compare to
1:afe6225:     //  * @param identity      The identity of the table descriptor
1:afe6225:     //  * @param reportInconsistent    A HeaderPrintWriter to send complaints to
1:afe6225:     //  *
1:afe6225:     //  * @return  true if the descriptors are the same, false if they're different
1:afe6225:     //  *
1:afe6225:     //  * @exception StandardException     Thrown on error
1:afe6225:     //  */
1:afe6225:     // private boolean checkConsistency(SPSDescriptor uncachedSpsd,
1:afe6225:     //                                     Object identity,
1:afe6225:     //                                     HeaderPrintWriter reportInconsistent)
1:afe6225:     //         throws StandardException
1:afe6225:     // {
1:afe6225:     //     boolean retval = true;
1:afe6225:     //
1:afe6225:     //     if (SanityManager.DEBUG)
1:afe6225:     //     {
1:afe6225:     //         if (uncachedSpsd == null)
1:afe6225:     //         {
1:afe6225:     //             reportInconsistent.println(
1:afe6225:     //                 "Inconsistent SPSNameCacheable: identity = " + identity +
1:afe6225:     //                 ", uncached table descriptor not found.");
1:afe6225:     //             retval = false;
1:afe6225:     //         }
1:afe6225:     //         else
1:afe6225:     //         {
1:afe6225:     //             if (
1:afe6225:     //                 (!uncachedSpsd.getText().equals(spsd.getText())) ||
1:afe6225:     //                 (!uncachedSpsd.getUsingText().equals(spsd.getUsingText())) ||
1:afe6225:     //                 (!uncachedSpsd.getQualifiedName().equals(spsd.getQualifiedName()))
1:afe6225:     //             )
1:afe6225:     //             {
1:afe6225:     //                 reportInconsistent.println(
1:afe6225:     //                     "Inconsistent SPSNameCacheable: identity = " + identity +
1:afe6225:     //                     ", cached  SPS = " +
1:afe6225:     //                     spsd +
1:afe6225:     //                     ", uncached SPS = " +
1:afe6225:     //                     uncachedSpsd);
1:eac0369: 
1:afe6225:     //                 retval = false;
1:afe6225:     //             }
1:afe6225:     //         }
1:afe6225:     //     }
1:afe6225:     //
1:afe6225:     //     return retval;
1:afe6225:     // }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:afe6225
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     // /**
1:     //  * Check the consistency of the table descriptor held by this TDCacheable
1:     //  * versus an uncached table descriptor.
1:     //  *
1:     //  * @param uncachedSpsd  The uncached descriptor to compare to
1:     //  * @param identity      The identity of the table descriptor
1:     //  * @param reportInconsistent    A HeaderPrintWriter to send complaints to
1:     //  *
1:     //  * @return  true if the descriptors are the same, false if they're different
1:     //  *
1:     //  * @exception StandardException     Thrown on error
1:     //  */
1:     // private boolean checkConsistency(SPSDescriptor uncachedSpsd,
1:     //                                     Object identity,
1:     //                                     HeaderPrintWriter reportInconsistent)
1:     //         throws StandardException
1:     // {
1:     //     boolean retval = true;
1:     //
1:     //     if (SanityManager.DEBUG)
1:     //     {
1:     //         if (uncachedSpsd == null)
1:     //         {
1:     //             reportInconsistent.println(
1:     //                 "Inconsistent SPSNameCacheable: identity = " + identity +
1:     //                 ", uncached table descriptor not found.");
1:     //             retval = false;
1:     //         }
1:     //         else
1:     //         {
1:     //             if (
1:     //                 (!uncachedSpsd.getText().equals(spsd.getText())) ||
1:     //                 (!uncachedSpsd.getUsingText().equals(spsd.getUsingText())) ||
1:     //                 (!uncachedSpsd.getQualifiedName().equals(spsd.getQualifiedName()))
1:     //             )
1:     //             {
1:     //                 reportInconsistent.println(
1:     //                     "Inconsistent SPSNameCacheable: identity = " + identity +
1:     //                     ", cached  SPS = " +
1:     //                     spsd +
1:     //                     ", uncached SPS = " +
1:     //                     uncachedSpsd);
1:     //                 retval = false;
1:     //             }
1:     //         }
1:     //     }
1:     //
1:     //     return retval;
1:     // }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1260b94
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SPSNameCacheable
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.util.Hashtable;
1: 
1: /**
1:  * This class implements a Cacheable for a DataDictionary cache of
1:  * sps descriptors, with the lookup key being the name/schema of the sps.
1:  * Assumes client passes in a string that includes the schema name.
1:  * <p>
1:  * The cache ensures that the class of the target sps is loaded
1:  * if the sps is found in cache.  This is ensured by calling
1:  * loadGeneratedClass() on the sps when it is added to the cache.
1:  * Each subsequent user of the sps cache will do its own load/unload
1:  * on the class.  Because the class manager/loader maintains reference
1:  * counts on the classes it is handling, the user load/unload will
1:  * just increment/decrement the use count.  Only when the sps is
1:  * uncached will it be unloaded.
1:  */
1: class SPSNameCacheable implements Cacheable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private TableKey 			identity;
1: 	private SPSDescriptor		spsd;
1: 	private final DataDictionaryImpl	dd;
1: 
1: 
1: 	SPSNameCacheable(DataDictionaryImpl dd) {
1: 		this.dd = dd;
1: 	}
1: 
1: 	/* Cacheable interface */
1: 
1: 	/** @see Cacheable#clearIdentity */
1: 	public void clearIdentity()
1: 	{
1: 		if (spsd != null)
1: 		{
1: 			dd.spsCacheEntryRemoved(spsd);
1: 
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
1: 				{
1: 					System.out.println("SPSCACHE: clearIdentity() on "+spsd.getName());
1: 				}
1: 			}
1: 			spsd = null;
1: 			identity = null;
1: 		}
1: 	}
1: 
1: 	/** @see Cacheable#getIdentity */
1: 	public Object getIdentity()
1: 	{
1: 		return identity;
1: 	}
1: 
1: 	/** @see Cacheable#createIdentity */
1: 	public Cacheable createIdentity(Object key, Object createParameter)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(key instanceof TableKey))
1: 			{
1: 				SanityManager.THROWASSERT("Key for a SPSNameCacheElement is a " +
1: 						key.getClass().getName() +
1: 						" instead of a TableKey");
1: 			}
1: 			if (!(createParameter instanceof SPSDescriptor))
1: 			{
1: 				SanityManager.THROWASSERT("Create parameter for a SPSNameCacheElement is a " +
1: 					createParameter.getClass().getName() +
1: 					"instead of a SPSDescriptorImpl");
1: 			}			
1: 		}
1: 
1: 		identity = (TableKey)key;
1: 		spsd = (SPSDescriptor) createParameter;
1: 		
1: 		if (spsd != null)
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
1: 				{
1: 					System.out.println("SPSCACHE: createIdentity() on "+spsd.getName());
1: 				}
1: 			}
1: 
1: 			dd.spsCacheEntryAdded(spsd);
1: 			try
1: 			{
1: 				spsd.loadGeneratedClass();
1: 			} catch (StandardException e)
1: 			{
1: 				/*		
1: 				** We cannot throw an exception here, and although
1: 				** we don't expect a problem, we'll put some debugging
1: 				** under sanity just in case.  Note that even if we
1: 				** do get an exception here, everything else will work
1: 				** ok -- subsequent attempts to access the generated
1: 				** class for this sps will do a load themselves, and
1: 				** they will throw their exception back to the user.
1: 				*/	
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					System.out.println("Error loading class for "+spsd.getName());
1: 					System.out.println(e);
1: 					e.printStackTrace();
1: 				}
1: 			}
1: 			return this;
1: 		}
1: 		else
1: 		{
1: 			return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see Cacheable#setIdentity
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public Cacheable setIdentity(Object key) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(key instanceof TableKey))
1: 			{
1: 				SanityManager.THROWASSERT("Key for a SPSNameCacheable Element is a " +
1: 					key.getClass().getName() +
1: 					" instead of a TableKey");
1: 			}
1: 		}
1: 
1: 		
1: 		identity = (TableKey)key ;
1: 		spsd = dd.getUncachedSPSDescriptor(identity);
1: 		if (spsd != null)
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
1: 				{
1: 					System.out.println("SPSCACHE: setIdentity() on "+spsd.getName());
1: 				}
1: 			}
1: 
1: 			dd.spsCacheEntryAdded(spsd);
1: 			try
1: 			{
1: 				spsd.loadGeneratedClass();
1: 			} catch (StandardException e)
1: 			{
1: 				/*		
1: 				** We cannot throw an exception here, and although
1: 				** we don't expect a problem, we'll put some debugging
1: 				** under sanity just in case.  Note that even if we
1: 				** do get an exception here, everything else will work
1: 				** ok -- subsequent attempts to access the generated
1: 				** class for this sps will do a load themselves, and
1: 				** they will throw their exception back to the user.
1: 				*/	
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					System.out.println("Error loading class for "+spsd.getName());
1: 					System.out.println(e);
1: 					e.printStackTrace();
1: 				}
1: 			}
1: 			return this;
1: 		}
1: 		else
1: 		{
1: 			return null;
1: 		}
1: 	}
1: 
1: 	/* Cacheable interface */
1: 
1: 	/** @see Cacheable#clean */
1: 	public void clean(boolean forRemove)
1: 	{
1: 		return;
1: 	}
1: 
1: 	/** @see Cacheable#isDirty */
1: 	public boolean isDirty()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Get the sps descriptor that is associated with this Cacheable
1: 	 */
1: 	public SPSDescriptor getSPSDescriptor()
1: 	{
1: 		return spsd;
1: 	}
1: 
1: 	/**
0: 	 * Check the consistency of the table descriptor held by this TDCacheable
0: 	 * versus an uncached table descriptor.
1: 	 *
0: 	 * @param uncachedSpsd	The uncached descriptor to compare to
0: 	 * @param identity		The identity of the table descriptor
0: 	 * @param reportInconsistent	A HeaderPrintWriter to send complaints to
1: 	 *
0: 	 * @return	true if the descriptors are the same, false if they're different
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	private boolean checkConsistency(SPSDescriptor uncachedSpsd,
0: 										Object identity,
0: 										HeaderPrintWriter reportInconsistent)
0: 			throws StandardException
1: 	{
0: 		boolean	retval = true;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			if (uncachedSpsd == null)
1: 			{
0: 				reportInconsistent.println(
0: 					"Inconsistent SPSNameCacheable: identity = " + identity +
0: 					", uncached table descriptor not found.");
0: 				retval = false;
1: 			}
1: 			else
1: 			{
0: 				if (
0: 					(!uncachedSpsd.getText().equals(spsd.getText())) ||
0: 					(!uncachedSpsd.getUsingText().equals(spsd.getUsingText())) ||
0: 					(!uncachedSpsd.getQualifiedName().equals(spsd.getQualifiedName()))
0: 			   	)
1: 				{
0: 					reportInconsistent.println(
0: 						"Inconsistent SPSNameCacheable: identity = " + identity +
0: 						", cached  SPS = " +
0: 						spsd +
0: 						", uncached SPS = " +
0: 						uncachedSpsd);
1: 
0: 					retval = false;
1: 				}
1: 			}
1: 		}
1: 
0: 		return retval;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Hashtable;
0: 
0: /**
0:  * This class implements a Cacheable for a DataDictionary cache of
0:  * sps descriptors, with the lookup key being the name/schema of the sps.
0:  * Assumes client passes in a string that includes the schema name.
0:  * <p>
0:  * The cache ensures that the class of the target sps is loaded
0:  * if the sps is found in cache.  This is ensured by calling
0:  * loadGeneratedClass() on the sps when it is added to the cache.
0:  * Each subsequent user of the sps cache will do its own load/unload
0:  * on the class.  Because the class manager/loader maintains reference
0:  * counts on the classes it is handling, the user load/unload will
0:  * just increment/decrement the use count.  Only when the sps is
0:  * uncached will it be unloaded.
0:  */
0: class SPSNameCacheable implements Cacheable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private TableKey 			identity;
0: 	private SPSDescriptor		spsd;
0: 	private final DataDictionaryImpl	dd;
0: 
0: 
0: 	SPSNameCacheable(DataDictionaryImpl dd) {
0: 		this.dd = dd;
0: 	}
0: 
0: 	/* Cacheable interface */
0: 
0: 	/** @see Cacheable#clearIdentity */
0: 	public void clearIdentity()
0: 	{
0: 		if (spsd != null)
0: 		{
0: 			dd.spsCacheEntryRemoved(spsd);
0: 
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
0: 				{
0: 					System.out.println("SPSCACHE: clearIdentity() on "+spsd.getName());
0: 				}
0: 			}
0: 			spsd = null;
0: 			identity = null;
0: 		}
0: 	}
0: 
0: 	/** @see Cacheable#getIdentity */
0: 	public Object getIdentity()
0: 	{
0: 		return identity;
0: 	}
0: 
0: 	/** @see Cacheable#createIdentity */
0: 	public Cacheable createIdentity(Object key, Object createParameter)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(key instanceof TableKey))
0: 			{
0: 				SanityManager.THROWASSERT("Key for a SPSNameCacheElement is a " +
0: 						key.getClass().getName() +
0: 						" instead of a TableKey");
0: 			}
0: 			if (!(createParameter instanceof SPSDescriptor))
0: 			{
0: 				SanityManager.THROWASSERT("Create parameter for a SPSNameCacheElement is a " +
0: 					createParameter.getClass().getName() +
0: 					"instead of a SPSDescriptorImpl");
0: 			}			
0: 		}
0: 
0: 		identity = (TableKey)key;
0: 		spsd = (SPSDescriptor) createParameter;
0: 		
0: 		if (spsd != null)
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
0: 				{
0: 					System.out.println("SPSCACHE: createIdentity() on "+spsd.getName());
0: 				}
0: 			}
0: 
0: 			dd.spsCacheEntryAdded(spsd);
0: 			try
0: 			{
0: 				spsd.loadGeneratedClass();
0: 			} catch (StandardException e)
0: 			{
0: 				/*		
0: 				** We cannot throw an exception here, and although
0: 				** we don't expect a problem, we'll put some debugging
0: 				** under sanity just in case.  Note that even if we
0: 				** do get an exception here, everything else will work
0: 				** ok -- subsequent attempts to access the generated
0: 				** class for this sps will do a load themselves, and
0: 				** they will throw their exception back to the user.
0: 				*/	
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					System.out.println("Error loading class for "+spsd.getName());
0: 					System.out.println(e);
0: 					e.printStackTrace();
0: 				}
0: 			}
0: 			return this;
0: 		}
0: 		else
0: 		{
0: 			return null;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see Cacheable#setIdentity
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public Cacheable setIdentity(Object key) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(key instanceof TableKey))
0: 			{
0: 				SanityManager.THROWASSERT("Key for a SPSNameCacheable Element is a " +
0: 					key.getClass().getName() +
0: 					" instead of a TableKey");
0: 			}
0: 		}
0: 
0: 		
0: 		identity = (TableKey)key ;
0: 		spsd = dd.getUncachedSPSDescriptor(identity);
0: 		if (spsd != null)
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (SanityManager.DEBUG_ON("SPSNameCacheTrace"))
0: 				{
0: 					System.out.println("SPSCACHE: setIdentity() on "+spsd.getName());
0: 				}
0: 			}
0: 
0: 			dd.spsCacheEntryAdded(spsd);
0: 			try
0: 			{
0: 				spsd.loadGeneratedClass();
0: 			} catch (StandardException e)
0: 			{
0: 				/*		
0: 				** We cannot throw an exception here, and although
0: 				** we don't expect a problem, we'll put some debugging
0: 				** under sanity just in case.  Note that even if we
0: 				** do get an exception here, everything else will work
0: 				** ok -- subsequent attempts to access the generated
0: 				** class for this sps will do a load themselves, and
0: 				** they will throw their exception back to the user.
0: 				*/	
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					System.out.println("Error loading class for "+spsd.getName());
0: 					System.out.println(e);
0: 					e.printStackTrace();
0: 				}
0: 			}
0: 			return this;
0: 		}
0: 		else
0: 		{
0: 			return null;
0: 		}
0: 	}
0: 
0: 	/* Cacheable interface */
0: 
0: 	/** @see Cacheable#clean */
0: 	public void clean(boolean forRemove)
0: 	{
0: 		return;
0: 	}
0: 
0: 	/** @see Cacheable#isDirty */
0: 	public boolean isDirty()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Get the sps descriptor that is associated with this Cacheable
0: 	 */
0: 	public SPSDescriptor getSPSDescriptor()
0: 	{
0: 		return spsd;
0: 	}
0: 
0: 	/**
0: 	 * Check the consistency of the table descriptor held by this TDCacheable
0: 	 * versus an uncached table descriptor.
0: 	 *
0: 	 * @param uncachedSpsd	The uncached descriptor to compare to
0: 	 * @param identity		The identity of the table descriptor
0: 	 * @param reportInconsistent	A HeaderPrintWriter to send complaints to
0: 	 *
0: 	 * @return	true if the descriptors are the same, false if they're different
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	private boolean checkConsistency(SPSDescriptor uncachedSpsd,
0: 										Object identity,
0: 										HeaderPrintWriter reportInconsistent)
0: 			throws StandardException
0: 	{
0: 		boolean	retval = true;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (uncachedSpsd == null)
0: 			{
0: 				reportInconsistent.println(
0: 					"Inconsistent SPSNameCacheable: identity = " + identity +
0: 					", uncached table descriptor not found.");
0: 				retval = false;
0: 			}
0: 			else
0: 			{
0: 				if (
0: 					(!uncachedSpsd.getText().equals(spsd.getText())) ||
0: 					(!uncachedSpsd.getUsingText().equals(spsd.getUsingText())) ||
0: 					(!uncachedSpsd.getQualifiedName().equals(spsd.getQualifiedName()))
0: 			   	)
0: 				{
0: 					reportInconsistent.println(
0: 						"Inconsistent SPSNameCacheable: identity = " + identity +
0: 						", cached  SPS = " +
0: 						spsd +
0: 						", uncached SPS = " +
0: 						uncachedSpsd);
0: 
0: 					retval = false;
0: 				}
0: 			}
0: 		}
0: 
0: 		return retval;
0: 	}
0: }
============================================================================