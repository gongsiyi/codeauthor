1:b2b30ec: /*
3:b2b30ec: 
1:bb0c274:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest
1:bb0c274: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:bb0c274: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:bb0c274: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:bb0c274: 
1:bb0c274:  */
1:b2b30ec: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:b2b30ec: 
1:b2b30ec: import java.io.IOException;
1:b2b30ec: import java.io.InputStream;
1:b2b30ec: import java.io.OutputStream;
1:b2b30ec: import java.sql.Blob;
1:b2b30ec: import java.sql.Connection;
1:1ae02c9: import junit.framework.Test;
1:b2b30ec: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:2333262: import org.apache.derbyTesting.junit.Decorator;
1:b2b30ec: import org.apache.derbyTesting.junit.TestConfiguration;
1:b2b30ec: 
1:b2b30ec: 
1:b2b30ec: 
1:b2b30ec: public class LobStreamTest extends BaseJDBCTestCase {
1:b2b30ec: 
1:b2b30ec:     private InputStream in = null;
1:b2b30ec:     private OutputStream out = null;
1:b2b30ec:     private Blob blob;
1:b2b30ec: 
1:b2b30ec:     public LobStreamTest(String testName) {
1:b2b30ec:         super(testName);
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     protected void setUp() throws Exception {
1:5d54436:         Connection conn = getConnection();
1:b2b30ec:         blob = conn.createBlob();
1:b2b30ec:         in = blob.getBinaryStream();
1:b2b30ec:         out = blob.setBinaryStream (1);
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     protected void tearDown() throws Exception {
1:b2b30ec:         blob.free();
1:5d54436:         blob = null;
1:5d54436:         super.tearDown();
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test cases
2:b2b30ec:      */
1:b2b30ec: 
1:b2b30ec:     /**
1:5d54436:      * Test read and write methods with no parameter.
1:b2b30ec:      */
1:b2b30ec:     public void testReadWriteNoParameters() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             int value = in.read();
1:5d54436:             assertEquals("Output does not match input", i%255, value);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * test read method with no parameters and write method with one parameter
1:b2b30ec:      */
1:b2b30ec:     public void testReadNoParameterWriteOneParameter() throws IOException {
1:b2b30ec:         byte[] b = new byte[100];
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             b[i%100] = (byte) (((byte)(i%255)) & 0xFF);
1:b2b30ec:             if (i%100 == 99) {
1:b2b30ec:                 out.write(b);
1:b2b30ec:             }
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             int value = in.read();
1:5d54436:             assertEquals("Output does not match input", i%255, value);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * test read and write method with one parameter
1:b2b30ec:      */
1:b2b30ec:     public void testReadWriteOneParameter() throws IOException {
1:b2b30ec: 
1:b2b30ec:         byte[] b = new byte[100];
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             b[i%100] = (byte) (((byte)(i%255)) & 0xFF);
1:b2b30ec:             if (i%100 == 99) {
1:b2b30ec:                 out.write(b);
1:b2b30ec:             }
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<80; i++) {
1:b2b30ec:             int count = in.read(b);
1:b2b30ec:             for (int j=0; j<count; j++) {
1:b2b30ec:                 int value = b[j] & 0xFF;
1:5d54436:                 assertEquals("Output does not match input",
1:b2b30ec:                                         (((i * 100) + j) % 255), value);
1:b2b30ec:             }
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * test read and write method with three parameter
1:b2b30ec:      */
1:b2b30ec:     public void testReadWriteThreeParameter() throws IOException {
1:b2b30ec: 
1:b2b30ec:         byte[] b = new byte[200];
1:b2b30ec:         int offset = 0;
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             b[(i%100) + offset] = (byte) (((byte)(i%255)) & 0xFF);
1:b2b30ec:             if (i%100 == 99) {
1:b2b30ec:                 out.write(b, offset, 100);
1:b2b30ec:                 offset += 1;
1:b2b30ec:             }
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         offset = 0;
1:b2b30ec:         for (int i=0; i<80; i++) {
1:b2b30ec:             int count = in.read(b, offset, 100);
1:b2b30ec:             for (int j=0; j<count; j++) {
1:b2b30ec:                 int value = b[j + offset] & 0xFF;
1:5d54436:                 assertEquals("Output does not match input",
1:b2b30ec:                                         (((i * 100) + j) % 255), value);
1:b2b30ec:             }
1:b2b30ec:             offset += 1;
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec: 
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test that stream returns -1 on end of stream when reading a byte at
1:b2b30ec:      * a time.
1:b2b30ec:      */
1:b2b30ec:     public void testEndOfStreamValue() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         int count = 0;
1:b2b30ec:         while (in.read() != -1) {
1:b2b30ec:             count++;
1:b2b30ec:         }
1:b2b30ec:         assertEquals("All values have been read", 8000, count);
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec: 
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test that read with one parameter returns the correct count
1:b2b30ec:      * at end of stream.
1:b2b30ec:      */
1:b2b30ec:     public void testEndOfStreamOnReadOneParameter() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8050; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         int count = 0, totalCount = 0;
1:b2b30ec:         byte[] b = new byte[100];
1:b2b30ec:         assertTrue("b.length should not be = 0", (b.length != 0));
1:b2b30ec:         while ((count = in.read(b)) != -1) {
1:b2b30ec:             assertTrue("Number of bytes read can not be = 0", (count != 0));
1:b2b30ec:             totalCount += count;
1:b2b30ec:         }
1:b2b30ec:         assertEquals("All values have been read", 8050, totalCount);
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec: 
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test that read with three parameter returns the correct count
1:b2b30ec:      * at end of stream.
1:b2b30ec:      */
1:b2b30ec:     public void testEndOfStreamOnReadThreeParameters() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8050; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         int count = 0, totalCount = 0, offset = 0;
1:b2b30ec:         byte[] b = new byte[200];
1:b2b30ec:         assertTrue("b.length should not be = 0", (b.length != 0));
1:b2b30ec:         while ((count = in.read(b, offset, 100)) != -1) {
1:b2b30ec:             assertTrue("Number of bytes read can not be = 0", (count != 0));
1:b2b30ec:             totalCount += count;
1:b2b30ec:             offset++;
1:b2b30ec:         }
1:b2b30ec:         assertEquals("All values have been read", 8050, totalCount);
1:b2b30ec: 
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test the skip method of the input stream
1:b2b30ec:      */
1:b2b30ec:     public void testSkip() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         int i = 0;
1:b2b30ec:         while (i < 8000) {
1:b2b30ec:             if ((i%255) < 100) {
1:b2b30ec:                 int value = in.read();
1:5d54436:                 assertEquals("Output does not match input", i%255, value);
1:b2b30ec:                 i++;
1:b2b30ec:             } else {
1:b2b30ec:                 long count = in.skip(155);
1:b2b30ec:                 i += count;
1:b2b30ec:             }
1:b2b30ec:         }
1:b2b30ec:         in.close();
1:b2b30ec:         out.close();
1:b2b30ec:         in = null;
1:b2b30ec:         out = null;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test write method with three parameters with invalid parameter
1:b2b30ec:      * values.
1:b2b30ec:      */
1:b2b30ec:      public void testWriteWithInvalidParameterValues() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // b is null
1:b2b30ec:         byte[] b = null;
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, 100, 20);
1:5d54436:             fail("byte[] = null should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected NullPointerException",
1:b2b30ec:                     e instanceof NullPointerException);
1:b2b30ec:         }
1:b2b30ec:         // length > b.length
1:b2b30ec:         b = new byte[100];
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, 0, 200);
1:5d54436:             fail("length > b.length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                     e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // offset > b.length
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, 150, 0);
1:5d54436:             fail("offset > b.length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                     e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // offset + length > b.length
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, 50, 100);
1:5d54436:             fail("length + offset > b.length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                     e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // offset is negative
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, -50, 100);
1:5d54436:             fail("negative offset should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                         e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         //length is negative
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, 0, -100);
1:5d54436:             fail("negative length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                 e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // stream is closed
1:b2b30ec:         out.close();
1:b2b30ec:         try {
1:b2b30ec:             out.write(b, 0, 100);
1:5d54436:             fail("Stream should be closed");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IOException", e instanceof IOException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         out = null;
1:b2b30ec:         in.close();
1:b2b30ec:         in = null;
1:b2b30ec:      }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Test write method with three parameters with invalid parameter
1:b2b30ec:      * values.
1:b2b30ec:      */
1:b2b30ec:      public void testReadWithInvalidParameterValues() throws IOException {
1:b2b30ec: 
1:b2b30ec:         for (int i=0; i<8000; i++) {
1:b2b30ec:             out.write((i%255));
1:b2b30ec:         }
1:b2b30ec:         out.close();
1:b2b30ec:         out = null;
1:b2b30ec: 
1:b2b30ec:         // b is null
1:b2b30ec:         byte[] b = null;
1:b2b30ec:         try {
1:b2b30ec:             in.read(b, 100, 20);
1:5d54436:             fail("byte[] = null should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected NullPointerException",
1:b2b30ec:                                         e instanceof NullPointerException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // length > b.length
1:b2b30ec:         b = new byte[100];
1:b2b30ec:         try {
1:b2b30ec:             int count = in.read(b, 0, 200);
1:5d54436:             fail("length > b.length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                     e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // offset > b.length
1:b2b30ec:         try {
1:b2b30ec:             in.read(b, 150, 0);
1:5d54436:             fail("offset > b.length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                         e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // offset + length > b.length
1:b2b30ec:         try {
1:b2b30ec:             int count = in.read(b, 50, 100);
1:5d54436:             fail("offset + length > b.length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                     e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // offset is negative
1:b2b30ec:         try {
1:b2b30ec:             in.read(b, -50, 100);
1:5d54436:             fail("negative offset should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                         e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         //length is negative
1:b2b30ec:         try {
1:b2b30ec:             in.read(b, 0, -100);
1:5d54436:             fail("negative length should cause exception");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IndexOutOfBoundException",
1:b2b30ec:                                     e instanceof IndexOutOfBoundsException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         // stream is closed
1:b2b30ec:         in.close();
1:b2b30ec:         try {
1:b2b30ec:             in.read(b, 0, 100);
1:5d54436:             fail("Stream should be closed");
1:b2b30ec:         } catch (Exception e) {
1:b2b30ec:             assertTrue("Expected IOException", e instanceof IOException);
1:b2b30ec:         }
1:b2b30ec: 
1:b2b30ec:         in = null;
1:b2b30ec:      }
1:b2b30ec: 
1:b2b30ec:      /**
1:b2b30ec:      * Suite method automatically generated by JUnit module.
1:b2b30ec:      */
1:b2b30ec:     public static Test suite() {
1:5d54436:         //testing only embedded driver generic test suite testing both
1:5d54436:         //client and ebedded is present in jdbcapi/LobStreamsTest
1:1ae02c9:         BaseTestSuite ts  = new BaseTestSuite("LobStreamTest");
1:2333262:         ts.addTest(TestConfiguration.embeddedSuite(LobStreamTest.class));
1:1ae02c9: 
1:1ae02c9:         BaseTestSuite encSuite =
1:1ae02c9:             new BaseTestSuite("LobStreamsTest:encrypted");
1:2333262:         encSuite.addTestSuite (LobStreamTest.class);
1:2333262:         ts.addTest(Decorator.encryptedDatabase (encSuite));
1:2333262:         return ts;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite ts  = new BaseTestSuite("LobStreamTest");
1: 
1:         BaseTestSuite encSuite =
1:             new BaseTestSuite("LobStreamsTest:encrypted");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d54436
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         blob = null;
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:      * Test read and write methods with no parameter.
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Output does not match input", i%255, value);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Output does not match input", i%255, value);
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals("Output does not match input",
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals("Output does not match input",
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals("Output does not match input", i%255, value);
/////////////////////////////////////////////////////////////////////////
1:             fail("byte[] = null should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("length > b.length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("offset > b.length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("length + offset > b.length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("negative offset should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("negative length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("Stream should be closed");
/////////////////////////////////////////////////////////////////////////
1:             fail("byte[] = null should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("length > b.length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("offset > b.length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("offset + length > b.length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("negative offset should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("negative length should cause exception");
/////////////////////////////////////////////////////////////////////////
1:             fail("Stream should be closed");
/////////////////////////////////////////////////////////////////////////
1:         //testing only embedded driver generic test suite testing both
1:         //client and ebedded is present in jdbcapi/LobStreamsTest
commit:2333262
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.Decorator;
/////////////////////////////////////////////////////////////////////////
0:         TestSuite ts  = new TestSuite ("LobStreamTest");
1:         ts.addTest(TestConfiguration.embeddedSuite(LobStreamTest.class));
0:         TestSuite encSuite = new TestSuite ("LobStreamsTest:encrypted");
1:         encSuite.addTestSuite (LobStreamTest.class);
1:         ts.addTest(Decorator.encryptedDatabase (encSuite));
1:         return ts;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
commit:ffb9317
/////////////////////////////////////////////////////////////////////////
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1: /*
0:  *
0:  * Derby - Class LobStreamTest
0:  *
0:  * Copyright 2006 The Apache Software Foundation or its
0:  * licensors, as applicable.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
0:  * either express or implied. See the License for the specific
0:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.io.IOException;
0: import junit.framework.*;
1: 
1: import java.io.InputStream;
1: import java.io.OutputStream;
0: import java.io.File;
1: import java.sql.Blob;
1: import java.sql.Connection;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: 
1: public class LobStreamTest extends BaseJDBCTestCase {
1: 
0:     private static final String dbName = "LobStreamTest";
0:     private static final boolean useLOBStreamControl = true;
1: 
0:     private Connection conn = null;
0:     File f = null;
1:     private InputStream in = null;
1:     private OutputStream out = null;
1:     private Blob blob;
1: 
1:     public LobStreamTest(String testName) {
1:         super(testName);
1:     }
1: 
1:     protected void setUp() throws Exception {
0:         conn = getConnection();
1:         blob = conn.createBlob();
1:         in = blob.getBinaryStream();
1:         out = blob.setBinaryStream (1);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         blob.free();
0:         conn.rollback();
0:         conn.close();
1:     }
1: 
1:     /**
1:      * Test cases
1:      */
1: 
1:     /**
0:      * Test read and write methods with one parameter.
1:      */
1:     public void testReadWriteNoParameters() throws IOException {
1: 
1:         for (int i=0; i<8000; i++) {
1:             out.write((i%255));
1:         }
1: 
1:         for (int i=0; i<8000; i++) {
1:             int value = in.read();
0:             assertEquals("Read value is equal to i", i%255, value);
1:         }
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1:     }
1: 
1:     /**
1:      * test read method with no parameters and write method with one parameter
1:      */
1:     public void testReadNoParameterWriteOneParameter() throws IOException {
1:         byte[] b = new byte[100];
1:         for (int i=0; i<8000; i++) {
1:             b[i%100] = (byte) (((byte)(i%255)) & 0xFF);
1:             if (i%100 == 99) {
1:                 out.write(b);
1:             }
1:         }
1: 
1:         for (int i=0; i<8000; i++) {
1:             int value = in.read();
0:             assertEquals("Read value is equal to i", i%255, value);
1:         }
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1:     }
1: 
1:     /**
1:      * test read and write method with one parameter
1:      */
1:     public void testReadWriteOneParameter() throws IOException {
1: 
1:         byte[] b = new byte[100];
1:         for (int i=0; i<8000; i++) {
1:             b[i%100] = (byte) (((byte)(i%255)) & 0xFF);
1:             if (i%100 == 99) {
1:                 out.write(b);
1:             }
1:         }
1: 
1:         for (int i=0; i<80; i++) {
1:             int count = in.read(b);
1:             for (int j=0; j<count; j++) {
1:                 int value = b[j] & 0xFF;
0:                 assertEquals("Read value is equal to i",
1:                                         (((i * 100) + j) % 255), value);
1:             }
1:         }
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1:     }
1: 
1:     /**
1:      * test read and write method with three parameter
1:      */
1:     public void testReadWriteThreeParameter() throws IOException {
1: 
1:         byte[] b = new byte[200];
1:         int offset = 0;
1:         for (int i=0; i<8000; i++) {
1:             b[(i%100) + offset] = (byte) (((byte)(i%255)) & 0xFF);
1:             if (i%100 == 99) {
1:                 out.write(b, offset, 100);
1:                 offset += 1;
1:             }
1:         }
1: 
1:         offset = 0;
1:         for (int i=0; i<80; i++) {
1:             int count = in.read(b, offset, 100);
1:             for (int j=0; j<count; j++) {
1:                 int value = b[j + offset] & 0xFF;
0:                 assertEquals("Read value is equal to i",
1:                                         (((i * 100) + j) % 255), value);
1:             }
1:             offset += 1;
1:         }
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1: 
1:     }
1: 
1:     /**
1:      * Test that stream returns -1 on end of stream when reading a byte at
1:      * a time.
1:      */
1:     public void testEndOfStreamValue() throws IOException {
1: 
1:         for (int i=0; i<8000; i++) {
1:             out.write((i%255));
1:         }
1: 
1:         int count = 0;
1:         while (in.read() != -1) {
1:             count++;
1:         }
1:         assertEquals("All values have been read", 8000, count);
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1: 
1:     }
1: 
1:     /**
1:      * Test that read with one parameter returns the correct count
1:      * at end of stream.
1:      */
1:     public void testEndOfStreamOnReadOneParameter() throws IOException {
1: 
1:         for (int i=0; i<8050; i++) {
1:             out.write((i%255));
1:         }
1: 
1:         int count = 0, totalCount = 0;
1:         byte[] b = new byte[100];
1:         assertTrue("b.length should not be = 0", (b.length != 0));
1:         while ((count = in.read(b)) != -1) {
1:             assertTrue("Number of bytes read can not be = 0", (count != 0));
1:             totalCount += count;
1:         }
1:         assertEquals("All values have been read", 8050, totalCount);
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1: 
1:     }
1: 
1:     /**
1:      * Test that read with three parameter returns the correct count
1:      * at end of stream.
1:      */
1:     public void testEndOfStreamOnReadThreeParameters() throws IOException {
1: 
1:         for (int i=0; i<8050; i++) {
1:             out.write((i%255));
1:         }
1: 
1:         int count = 0, totalCount = 0, offset = 0;
1:         byte[] b = new byte[200];
1:         assertTrue("b.length should not be = 0", (b.length != 0));
1:         while ((count = in.read(b, offset, 100)) != -1) {
1:             assertTrue("Number of bytes read can not be = 0", (count != 0));
1:             totalCount += count;
1:             offset++;
1:         }
1:         assertEquals("All values have been read", 8050, totalCount);
1: 
1:         in.close();
1:         in = null;
1:         out.close();
1:         out = null;
1:     }
1: 
1:     /**
1:      * Test the skip method of the input stream
1:      */
1:     public void testSkip() throws IOException {
1: 
1:         for (int i=0; i<8000; i++) {
1:             out.write((i%255));
1:         }
1: 
1:         int i = 0;
1:         while (i < 8000) {
1:             if ((i%255) < 100) {
1:                 int value = in.read();
0:                 assertEquals("Read value is equal to i", i%255, value);
1:                 i++;
1:             } else {
1:                 long count = in.skip(155);
1:                 i += count;
1:             }
1:         }
1:         in.close();
1:         out.close();
1:         in = null;
1:         out = null;
1:     }
1: 
1:     /**
1:      * Test write method with three parameters with invalid parameter
1:      * values.
1:      */
1:      public void testWriteWithInvalidParameterValues() throws IOException {
1: 
1:         for (int i=0; i<8000; i++) {
1:             out.write((i%255));
1:         }
1: 
1:         // b is null
1:         byte[] b = null;
1:         try {
1:             out.write(b, 100, 20);
0:             assertTrue("byte[] = null should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected NullPointerException",
1:                     e instanceof NullPointerException);
1:         }
1:         // length > b.length
1:         b = new byte[100];
1:         try {
1:             out.write(b, 0, 200);
0:             assertTrue("length > b.length should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                     e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // offset > b.length
1:         try {
1:             out.write(b, 150, 0);
0:             assertTrue("offset > b.length should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                     e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // offset + length > b.length
1:         try {
1:             out.write(b, 50, 100);
0:             assertTrue("length + offset > b.length should cause exception",
0:                     false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                     e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // offset is negative
1:         try {
1:             out.write(b, -50, 100);
0:             assertTrue("negative offset should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                         e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         //length is negative
1:         try {
1:             out.write(b, 0, -100);
0:             assertTrue("negative length should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                 e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // stream is closed
1:         out.close();
1:         try {
1:             out.write(b, 0, 100);
0:             assertTrue("Stream should be closed", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IOException", e instanceof IOException);
1:         }
1: 
1:         out = null;
1:         in.close();
1:         in = null;
1:      }
1: 
1:     /**
1:      * Test write method with three parameters with invalid parameter
1:      * values.
1:      */
1:      public void testReadWithInvalidParameterValues() throws IOException {
1: 
1:         for (int i=0; i<8000; i++) {
1:             out.write((i%255));
1:         }
1:         out.close();
1:         out = null;
1: 
1:         // b is null
1:         byte[] b = null;
1:         try {
1:             in.read(b, 100, 20);
0:             assertTrue("byte[] = null should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected NullPointerException",
1:                                         e instanceof NullPointerException);
1:         }
1: 
1:         // length > b.length
1:         b = new byte[100];
1:         try {
1:             int count = in.read(b, 0, 200);
0:             assertTrue("length > b.length should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                     e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // offset > b.length
1:         try {
1:             in.read(b, 150, 0);
0:             assertTrue("offset > b.length should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                         e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // offset + length > b.length
1:         try {
1:             int count = in.read(b, 50, 100);
0:             assertTrue("offset + length > b.length should cause exception",
0:                                                                         false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                     e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // offset is negative
1:         try {
1:             in.read(b, -50, 100);
0:             assertTrue("negative offset should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                         e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         //length is negative
1:         try {
1:             in.read(b, 0, -100);
0:             assertTrue("negative length should cause exception", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IndexOutOfBoundException",
1:                                     e instanceof IndexOutOfBoundsException);
1:         }
1: 
1:         // stream is closed
1:         in.close();
1:         try {
1:             in.read(b, 0, 100);
0:             assertTrue("Stream should be closed", false);
1:         } catch (Exception e) {
1:             assertTrue("Expected IOException", e instanceof IOException);
1:         }
1: 
1:         in = null;
1:      }
1: 
1:      /**
1:      * Suite method automatically generated by JUnit module.
1:      */
1:     public static Test suite() {
0:         return TestConfiguration.embeddedSuite(LobStreamTest.class);
1:     }
1: 
1: }
============================================================================