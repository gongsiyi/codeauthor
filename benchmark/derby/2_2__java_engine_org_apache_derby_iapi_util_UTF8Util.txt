1:d211792: /*
4:d211792: 
1:d211792:    Derby - Class org.apache.derby.iapi.util.UTF8Util
1:d211792: 
1:d211792:    Licensed to the Apache Software Foundation (ASF) under one
1:d211792:    or more contributor license agreements.  See the NOTICE file
1:d211792:    distributed with this work for additional information
1:d211792:    regarding copyright ownership.  The ASF licenses this file
1:d211792:    to you under the Apache License, Version 2.0 (the
1:d211792:    "License"); you may not use this file except in compliance
1:d211792:    with the License.  You may obtain a copy of the License at
1:d211792: 
1:d211792:      http://www.apache.org/licenses/LICENSE-2.0
1:d211792: 
1:d211792:    Unless required by applicable law or agreed to in writing,
1:d211792:    software distributed under the License is distributed on an
1:d211792:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d211792:    KIND, either express or implied.  See the License for the
1:d211792:    specific language governing permissions and limitations
1:d211792:    under the License.
1:d211792: 
2:d211792:  */
1:d211792: package org.apache.derby.iapi.util;
1:d211792: 
1:d211792: import java.io.EOFException;
1:d211792: import java.io.IOException;
1:d211792: import java.io.InputStream;
1:d211792: import java.io.UTFDataFormatException;
1:d211792: 
1:27628a0: import org.apache.derby.iapi.services.io.InputStreamUtil;
1:27628a0: 
2:d211792: /**
1:d211792:  * Utility methods for handling UTF-8 encoded byte streams.
2:d211792:  * <p>
1:5850042:  * Note that when the {@code skip} methods mention detection of invalid
1:d211792:  * UTF-8 encodings, it only checks the first byte of a character. For multibyte
1:d211792:  * encodings, the second and third byte are not checked for correctness, just
1:d211792:  * skipped and ignored.
2:d211792:  *
1:d211792:  * @see java.io.DataInput
1:d211792:  */
1:d211792: //@ThreadSafe
1:d211792: public final class UTF8Util {
1:d211792: 
1:d211792:     /** This class cannot be instantiated. */
1:d211792:     private UTF8Util() {}
1:d211792: 
1:d211792:     /**
1:d211792:      * Skip until the end-of-stream is reached.
1:d211792:      *
1:d211792:      * @param in byte stream with UTF-8 encoded characters
1:d211792:      * @return The number of characters skipped.
2:d211792:      * @throws IOException if reading from the stream fails
1:d211792:      * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
1:d211792:      */
1:d211792:     public static final long skipUntilEOF(InputStream in)
3:d211792:             throws IOException {
1:d211792:         // No need to do the skip in a loop, as Reader.read() returning -1
1:d211792:         // means EOF has been reached.
1:d211792:         // Note that a loop should be used if skip is used instead of read.
1:88ff3fa:         return internalSkip(in, Long.MAX_VALUE).charsSkipped();
6:d211792:     }
1:88ff3fa: 
1:88ff3fa:     /**
1:d211792:      * Skip the requested number of characters from the stream.
1:d211792:      * <p>
1:d211792:      * @param in byte stream with UTF-8 encoded characters
1:d211792:      * @param charsToSkip number of characters to skip
2:d211792:      * @return The number of bytes skipped.
1:d211792:      * @throws EOFException if end-of-stream is reached before the requested
1:d211792:      *      number of characters are skipped
1:d211792:      * @throws IOException if reading from the stream fails
1:d211792:      * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
1:d211792:      */
1:d211792:     public static final long skipFully(InputStream in, long charsToSkip)
1:d211792:             throws EOFException, IOException {
1:88ff3fa:         SkipCount skipped = internalSkip(in, charsToSkip);
1:88ff3fa:         if (skipped.charsSkipped() != charsToSkip) {
1:d211792:             throw new EOFException("Reached end-of-stream prematurely at " +
1:88ff3fa:                 "character/byte position " + skipped.charsSkipped() + "/" +
1:88ff3fa:                 skipped.bytesSkipped() + ", trying to skip " + charsToSkip);
1:d211792:         }
1:88ff3fa:         return skipped.bytesSkipped();
1:d211792:     }
1:d211792: 
1:d211792:     /**
1:d211792:      * Skip characters in the stream.
1:d211792:      * <p>
1:d211792:      * Note that a smaller number than requested might be skipped if the
1:d211792:      * end-of-stream is reached before the specified number of characters has
1:d211792:      * been decoded. It is up to the caller to decide if this is an error
1:d211792:      * or not. For instance, when determining the character length of a stream,
1:d211792:      * <code>Long.MAX_VALUE</code> could be passed as the requested number of
1:d211792:      * characters to skip.
1:d211792:      *
1:d211792:      * @param in byte stream with UTF-8 encoded characters
1:d211792:      * @param charsToSkip the number of characters to skip
1:d211792:      * @return A long array with counts; the characters skipped at position
1:8f00ae5:      *      <code>CHAR_COUNT</code>, the bytes skipped at position
1:d211792:      *      <code>BYTE_COUNT</code>. Note that the number of characters skipped
1:d211792:      *      may be smaller than the requested number.
1:d211792:      * @throws IOException if reading from the stream fails
1:d211792:      * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
1:d211792:      */
1:88ff3fa:     private static final SkipCount internalSkip(final InputStream in,
1:88ff3fa:                                                 final long charsToSkip)
1:d211792:             throws IOException {
1:d211792:         long charsSkipped = 0;
1:d211792:         long bytesSkipped = 0;
1:d211792:         // Decoding routine for modified UTF-8.
1:d211792:         // See java.io.DataInput
1:d211792:         while (charsSkipped < charsToSkip) {
1:d211792:             int c = in.read();
1:d211792:             if (c == -1) {
2:d211792:                 break;
1:d211792:             }
1:d211792:             charsSkipped++;
1:d211792:             if ((c & 0x80) == 0x00) { // 8th bit set (top bit)
1:d211792:                 // Found char of one byte width.
1:d211792:                 bytesSkipped++;
1:d211792:             } else if ((c & 0x60) == 0x40) { // 7th bit set, 6th bit unset
1:d211792:                 // Found char of two byte width.
1:27628a0:                 if (InputStreamUtil.skipPersistent(in, 1L) != 1L) {
1:d211792:                     // No second byte present.
1:d211792:                     throw new UTFDataFormatException(
1:d211792:                         "Second byte in two byte character missing; byte pos " +
1:d211792:                         bytesSkipped + " ; char pos " + charsSkipped);
1:d211792:                 }
1:d211792:                 bytesSkipped += 2;
1:d211792:             } else if ((c & 0x70) == 0x60) { // 7th and 6th bit set, 5th unset
1:d211792:                 // Found char of three byte width.
1:d211792:                 int skipped = 0;
1:d211792:                 if (c == 0xe0) {
1:d211792:                     // Check for Derby EOF marker.
1:d211792:                     int c1 = in.read();
1:d211792:                     int c2 = in.read();
1:d211792:                     if (c1 == 0x00 && c2 == 0x00) {
1:d211792:                         // Found Derby EOF marker, exit loop.
1:d211792:                         charsSkipped--; // Compensate by subtracting one.
1:d211792:                         break;
1:d211792:                     }
1:d211792:                     // Do some rudimentary error checking.
1:d211792:                     // Allow everything except EOF, which is the same as done in
1:d211792:                     // normal processing (skipPersistent below).
1:d211792:                     if (c1 != -1 && c2 != -1) {
1:d211792:                         skipped = 2;
1:d211792:                     }
2:d211792:                 } else {
1:27628a0:                     skipped = (int)InputStreamUtil.skipPersistent(in, 2L);
1:d211792:                 }
1:d211792:                 if (skipped != 2) {
1:d211792:                     // No second or third byte present
1:d211792:                     throw new UTFDataFormatException(
1:d211792:                         "Second or third byte in three byte character " +
1:d211792:                         "missing; byte pos " + bytesSkipped + " ; char pos " +
1:d211792:                         charsSkipped);
1:d211792:                 }
1:d211792:                 bytesSkipped += 3;
1:d211792:             } else {
1:d211792:                 throw new UTFDataFormatException(
1:d211792:                     "Invalid UTF-8 encoding encountered: (decimal) " + c);
1:d211792:             }
1:d211792:         }
1:d211792:         // We don't close the stream, since it might be reused. One example of
1:d211792:         // this is use of Resetable streams.
1:88ff3fa:         return new SkipCount(charsSkipped, bytesSkipped);
1:d211792:     }
1:d211792: 
1:d211792:     /**
1:88ff3fa:      * Helper class to hold skip counts; one for chars and one for bytes.
1:88ff3fa:      */
1:88ff3fa:     // @Immutable
1:88ff3fa:     private static final class SkipCount {
1:88ff3fa:         /** Number of bytes skipped. */
1:88ff3fa:         private final long byteCount;
1:88ff3fa:         /** Number of characters skipped. */
1:88ff3fa:         private final long charCount; 
1:88ff3fa: 
1:88ff3fa:         /**
1:88ff3fa:          * Creates a holder for the specified skip counts.
1:88ff3fa:          * 
1:88ff3fa:          * @param byteCount number of bytes
1:88ff3fa:          * @param charCount number of characters
1:88ff3fa:          */
1:88ff3fa:         SkipCount(long charCount, long byteCount) {
1:88ff3fa:             if (byteCount < 0 || charCount < 0) {
1:88ff3fa:                 // Don't allow negative counts.
1:88ff3fa:                 throw new IllegalArgumentException("charCount/byteCount " +
1:88ff3fa:                         "cannot be negative: " + charCount + "/" + byteCount);
1:88ff3fa:             }
1:88ff3fa:             if (byteCount < charCount) {
1:88ff3fa:                 // A char must always be represented by at least one byte.
1:88ff3fa:                 throw new IllegalArgumentException("Number of bytes cannot be" +
1:88ff3fa:                         "less than number of chars: " + byteCount + " < " +
1:88ff3fa:                         charCount);
1:88ff3fa:             }
1:88ff3fa:             this.byteCount = byteCount;
1:88ff3fa:             this.charCount = charCount;
1:88ff3fa:         }
1:88ff3fa: 
1:88ff3fa:         long charsSkipped() {
1:88ff3fa:             return this.charCount;
1:88ff3fa:         }
1:88ff3fa: 
1:88ff3fa:         long bytesSkipped() {
1:88ff3fa:             return this.byteCount;
1:88ff3fa:         }
1:88ff3fa:     }
1:d211792: } // End class UTF8Util
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:27628a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.InputStreamUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 if (InputStreamUtil.skipPersistent(in, 1L) != 1L) {
/////////////////////////////////////////////////////////////////////////
1:                     skipped = (int)InputStreamUtil.skipPersistent(in, 2L);
commit:0012545
/////////////////////////////////////////////////////////////////////////
0:                 if (StreamUtil.skipPersistent(in, 1L) != 1L) {
/////////////////////////////////////////////////////////////////////////
0:                     skipped = (int)StreamUtil.skipPersistent(in, 2L);
/////////////////////////////////////////////////////////////////////////
commit:5850042
/////////////////////////////////////////////////////////////////////////
1:  * Note that when the {@code skip} methods mention detection of invalid
commit:8f00ae5
/////////////////////////////////////////////////////////////////////////
1:      *      <code>CHAR_COUNT</code>, the bytes skipped at position
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:88ff3fa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return internalSkip(in, Long.MAX_VALUE).charsSkipped();
/////////////////////////////////////////////////////////////////////////
1:         SkipCount skipped = internalSkip(in, charsToSkip);
1:         if (skipped.charsSkipped() != charsToSkip) {
1:                 "character/byte position " + skipped.charsSkipped() + "/" +
1:                 skipped.bytesSkipped() + ", trying to skip " + charsToSkip);
1:         return skipped.bytesSkipped();
/////////////////////////////////////////////////////////////////////////
1:     private static final SkipCount internalSkip(final InputStream in,
1:                                                 final long charsToSkip)
/////////////////////////////////////////////////////////////////////////
1:         return new SkipCount(charsSkipped, bytesSkipped);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Helper class to hold skip counts; one for chars and one for bytes.
1:      */
1:     // @Immutable
1:     private static final class SkipCount {
1:         /** Number of bytes skipped. */
1:         private final long byteCount;
1:         /** Number of characters skipped. */
1:         private final long charCount; 
1: 
1:         /**
1:          * Creates a holder for the specified skip counts.
1:          * 
1:          * @param byteCount number of bytes
1:          * @param charCount number of characters
1:          */
1:         SkipCount(long charCount, long byteCount) {
1:             if (byteCount < 0 || charCount < 0) {
1:                 // Don't allow negative counts.
1:                 throw new IllegalArgumentException("charCount/byteCount " +
1:                         "cannot be negative: " + charCount + "/" + byteCount);
1:             }
1:             if (byteCount < charCount) {
1:                 // A char must always be represented by at least one byte.
1:                 throw new IllegalArgumentException("Number of bytes cannot be" +
1:                         "less than number of chars: " + byteCount + " < " +
1:                         charCount);
1:             }
1:             this.byteCount = byteCount;
1:             this.charCount = charCount;
1:         }
1: 
1:         long charsSkipped() {
1:             return this.charCount;
1:         }
1: 
1:         long bytesSkipped() {
1:             return this.byteCount;
1:         }
1:     }
commit:fc6ce84
/////////////////////////////////////////////////////////////////////////
commit:d211792
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.util.UTF8Util
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derby.iapi.util;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.UTFDataFormatException;
1: 
1: /**
1:  * Utility methods for handling UTF-8 encoded byte streams.
1:  * <p>
0:  * Note that when the <code>skip<code> methods mention detection of invalid
1:  * UTF-8 encodings, it only checks the first byte of a character. For multibyte
1:  * encodings, the second and third byte are not checked for correctness, just
1:  * skipped and ignored.
1:  *
1:  * @see java.io.DataInput
1:  */
1: //@ThreadSafe
1: public final class UTF8Util {
1: 
0:     /** Constant used to look up character count in an array. */
0:     private static final int CHAR_COUNT = 0;
0:     /** Constant used to look up byte count in an array. */
0:     private static final int BYTE_COUNT = 1;
1: 
1:     /** This class cannot be instantiated. */
1:     private UTF8Util() {}
1: 
1:     /**
1:      * Skip until the end-of-stream is reached.
1:      *
1:      * @param in byte stream with UTF-8 encoded characters
1:      * @return The number of characters skipped.
1:      * @throws IOException if reading from the stream fails
1:      * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
1:      */
1:     public static final long skipUntilEOF(InputStream in)
1:             throws IOException {
1:         // No need to do the skip in a loop, as Reader.read() returning -1
1:         // means EOF has been reached.
1:         // Note that a loop should be used if skip is used instead of read.
0:         return internalSkip(in, Long.MAX_VALUE)[CHAR_COUNT];
1:     }
1: 
1:     /**
1:      * Skip the requested number of characters from the stream.
1:      * <p>
1:      * @param in byte stream with UTF-8 encoded characters
1:      * @param charsToSkip number of characters to skip
1:      * @return The number of bytes skipped.
1:      * @throws EOFException if end-of-stream is reached before the requested
1:      *      number of characters are skipped
1:      * @throws IOException if reading from the stream fails
1:      * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
1:      */
1:     public static final long skipFully(InputStream in, long charsToSkip)
1:             throws EOFException, IOException {
0:         long[] counts = internalSkip(in, charsToSkip);
0:         if (counts[CHAR_COUNT] != charsToSkip) {
1:             throw new EOFException("Reached end-of-stream prematurely at " +
0:                 "character/byte position " + counts[CHAR_COUNT] + "/" +
0:                 counts[BYTE_COUNT] + ", trying to skip " + charsToSkip);
1:         }
0:         return counts[BYTE_COUNT];
1:     }
1: 
1:     /**
1:      * Skip characters in the stream.
1:      * <p>
1:      * Note that a smaller number than requested might be skipped if the
1:      * end-of-stream is reached before the specified number of characters has
1:      * been decoded. It is up to the caller to decide if this is an error
1:      * or not. For instance, when determining the character length of a stream,
1:      * <code>Long.MAX_VALUE</code> could be passed as the requested number of
1:      * characters to skip.
1:      *
1:      * @param in byte stream with UTF-8 encoded characters
1:      * @param charsToSkip the number of characters to skip
1:      * @return A long array with counts; the characters skipped at position
0:      *      <code>CHAR_COUNT<code>, the bytes skipped at position
1:      *      <code>BYTE_COUNT</code>. Note that the number of characters skipped
1:      *      may be smaller than the requested number.
1:      * @throws IOException if reading from the stream fails
1:      * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
1:      */
0:     private static final long[] internalSkip(final InputStream in,
0:                                              final long charsToSkip)
1:             throws IOException {
1:         long charsSkipped = 0;
1:         long bytesSkipped = 0;
1:         // Decoding routine for modified UTF-8.
1:         // See java.io.DataInput
1:         while (charsSkipped < charsToSkip) {
1:             int c = in.read();
1:             if (c == -1) {
1:                 break;
1:             }
1:             charsSkipped++;
1:             if ((c & 0x80) == 0x00) { // 8th bit set (top bit)
1:                 // Found char of one byte width.
1:                 bytesSkipped++;
1:             } else if ((c & 0x60) == 0x40) { // 7th bit set, 6th bit unset
1:                 // Found char of two byte width.
0:                 if (skipPersistent(in, 1L) != 1L) {
1:                     // No second byte present.
1:                     throw new UTFDataFormatException(
1:                         "Second byte in two byte character missing; byte pos " +
1:                         bytesSkipped + " ; char pos " + charsSkipped);
1:                 }
1:                 bytesSkipped += 2;
1:             } else if ((c & 0x70) == 0x60) { // 7th and 6th bit set, 5th unset
1:                 // Found char of three byte width.
1:                 int skipped = 0;
1:                 if (c == 0xe0) {
1:                     // Check for Derby EOF marker.
1:                     int c1 = in.read();
1:                     int c2 = in.read();
1:                     if (c1 == 0x00 && c2 == 0x00) {
1:                         // Found Derby EOF marker, exit loop.
1:                         charsSkipped--; // Compensate by subtracting one.
1:                         break;
1:                     }
1:                     // Do some rudimentary error checking.
1:                     // Allow everything except EOF, which is the same as done in
1:                     // normal processing (skipPersistent below).
1:                     if (c1 != -1 && c2 != -1) {
1:                         skipped = 2;
1:                     }
1:                 } else {
0:                     skipped = (int)skipPersistent(in, 2L);
1:                 }
1:                 if (skipped != 2) {
1:                     // No second or third byte present
1:                     throw new UTFDataFormatException(
1:                         "Second or third byte in three byte character " +
1:                         "missing; byte pos " + bytesSkipped + " ; char pos " +
1:                         charsSkipped);
1:                 }
1:                 bytesSkipped += 3;
1:             } else {
1:                 throw new UTFDataFormatException(
1:                     "Invalid UTF-8 encoding encountered: (decimal) " + c);
1:             }
1:         }
1:         // We don't close the stream, since it might be reused. One example of
1:         // this is use of Resetable streams.
0:         return new long[] {charsSkipped, bytesSkipped};
1:     }
1: 
1:     /**
0:      * Tries harder to skip the requested number of bytes.
1:      * <p>
0:      * Note that even if the method fails to skip the requested number of bytes,
0:      * it will not throw an exception. If this happens, the caller can be sure
0:      * that end-of-stream has been reached.
1:      *
0:      * @param in byte stream
0:      * @param bytesToSkip the number of bytes to skip
1:      * @return The number of bytes skipped.
1:      * @throws IOException if reading from the stream fails
1:      */
0:     private static final long skipPersistent(InputStream in, long bytesToSkip)
1:             throws IOException {
0:         long skipped = 0;
0:         while (skipped < bytesToSkip) {
0:             long skippedNow = in.skip(bytesToSkip - skipped);
0:             if (skippedNow <= 0) {
0:                 if (in.read() == -1) {
0:                     // EOF, return what we have and leave it up to caller to
0:                     // decide what to do about it.
1:                     break;
1:                 } else {
0:                     skippedNow = 1; // Added to count below.
1:                 }
1:             }
0:             skipped += skippedNow;
1:         }
0:         return skipped;
1:     }
1: 
0:     private static final boolean isDerbyEOFMarker(InputStream in)
1:             throws IOException {
0:         // Expected to have read 224 (0xe0), check if the two next bytes are 0.
0:         return (in.read() == 0x00 && in.read() == 0x00);
1:     }
1: } // End class UTF8Util
============================================================================