1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_MultiIterations
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.services.property.PropertyUtil;
1:2bc809f: 
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Abstract class which executes T_Generic. This splits the running
1:2bc809f: 	of a test into two parts, the test setup and running the test.
1:2bc809f: 	This allows the setup to be performed once, and then the
1:2bc809f: 	test itself to be run for a number of iterations. The number
1:2bc809f: 	iterations is set by the property derby.unittests.iterations
1:2bc809f: 	and defaults to 1.
1:2bc809f: 	<P>
1:2bc809f: 	Statistics are provided about each iteration in the error log. The statistics
1:2bc809f: 	are time for each iteration, used and total memory changes per iteration.
1:2bc809f: 
1:2bc809f: 	@see T_Generic
1:2bc809f: */
1:2bc809f: public abstract class T_MultiIterations extends T_Generic
1:2bc809f: {
1:2bc809f: 	protected T_MultiIterations()
1:2bc809f: 	{
1:2bc809f: 		super();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	
1:2bc809f: 	/**
1:2bc809f: 	  Run the test. The test should raise an exception if it
1:2bc809f: 	  fails. runTests should return if the tests pass.
1:2bc809f: 
1:2bc809f: 	  @exception T_Fail Test code throws these
1:2bc809f: 	  */
1:2bc809f: 	protected void runTests() throws T_Fail {
1:2bc809f: 
1:2bc809f: 		setupTest();
1:2bc809f: 
1:2bc809f: 		int	iterations = 1;
1:2bc809f: 
1:2bc809f: 		/*
1:2bc809f: 		** The property name for the number of iterations is
1:2bc809f: 		** derby.className.iterations.  For example, if the test
1:2bc809f: 		** class is derby.com.package.to.test.T_Tester,
1:2bc809f: 		** the property name is derby.T_Tester.iterations.
1:2bc809f: 		*/
1:2bc809f: 		String myClass = this.getClass().getName();
1:2bc809f: 		String noPackage = myClass.substring(myClass.lastIndexOf('.') + 1);
1:2bc809f: 		String propertyName = "derby." + noPackage + ".iterations";
1:2bc809f: 
1:2bc809f: 		String iter = PropertyUtil.getSystemProperty(propertyName);
1:2bc809f: 		if (iter != null) {
1:2bc809f: 			try {
1:2bc809f: 				iterations = Integer.parseInt(iter);
1:2bc809f: 			} catch (NumberFormatException nfe) {
1:2bc809f: 				// leave at one
1:2bc809f: 			}
1:2bc809f: 			if (iterations <= 0)
1:2bc809f: 				iterations = 1;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		for (int i = 0; i < iterations; i++) {
1:2bc809f: 			Runtime.getRuntime().gc();
1:2bc809f: 			long btm = Runtime.getRuntime().totalMemory();
1:2bc809f: 			long bfm = Runtime.getRuntime().freeMemory();
1:2bc809f: 			long bum = btm - bfm;
1:2bc809f: 
1:2bc809f: 			long start = System. currentTimeMillis();
1:2bc809f: 
1:2bc809f: 			runTestSet();
1:2bc809f: 
1:2bc809f: 			long end = System. currentTimeMillis();
1:2bc809f: 
1:2bc809f: 			Runtime.getRuntime().gc();
1:2bc809f: 			long atm = Runtime.getRuntime().totalMemory();
1:2bc809f: 			long afm = Runtime.getRuntime().freeMemory();
1:2bc809f: 			long aum = atm - afm;
1:2bc809f: 
1:2bc809f: 			out.println("Iteration " + i + " took " + (end - start) + "ms");
1:2bc809f: 			out.println("Total memory increased by " + (atm - btm) + " is " + atm);
1:2bc809f: 			out.println("Used  memory increased by " + (aum - bum) + " is " + aum);
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	**	  Abstract methods to implement for your test.
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Run once to set up the test.
1:2bc809f: 
1:2bc809f:         @exception T_Fail Test code throws these
1:2bc809f: 	*/
1:2bc809f: 	protected abstract void setupTest() throws T_Fail;
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Run once per-iteration to run the actual test.
1:2bc809f: 
1:2bc809f:         @exception T_Fail Test code throws these
1:2bc809f: 	*/
1:2bc809f: 	protected abstract void runTestSet() throws T_Fail;
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_MultiIterations
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	Abstract class which executes T_Generic. This splits the running
1: 	of a test into two parts, the test setup and running the test.
1: 	This allows the setup to be performed once, and then the
1: 	test itself to be run for a number of iterations. The number
1: 	iterations is set by the property derby.unittests.iterations
1: 	and defaults to 1.
1: 	<P>
1: 	Statistics are provided about each iteration in the error log. The statistics
1: 	are time for each iteration, used and total memory changes per iteration.
1: 
1: 	@see T_Generic
1: */
1: public abstract class T_MultiIterations extends T_Generic
1: {
1: 	protected T_MultiIterations()
1: 	{
1: 		super();
1: 	}
1: 
1: 	/*
1: 	** methods required by T_Generic
1: 	*/
1: 
1: 	
1: 	/**
1: 	  Run the test. The test should raise an exception if it
1: 	  fails. runTests should return if the tests pass.
1: 
1: 	  @exception T_Fail Test code throws these
1: 	  */
1: 	protected void runTests() throws T_Fail {
1: 
1: 		setupTest();
1: 
1: 		int	iterations = 1;
1: 
1: 		/*
1: 		** The property name for the number of iterations is
1: 		** derby.className.iterations.  For example, if the test
1: 		** class is derby.com.package.to.test.T_Tester,
1: 		** the property name is derby.T_Tester.iterations.
1: 		*/
1: 		String myClass = this.getClass().getName();
1: 		String noPackage = myClass.substring(myClass.lastIndexOf('.') + 1);
1: 		String propertyName = "derby." + noPackage + ".iterations";
1: 
1: 		String iter = PropertyUtil.getSystemProperty(propertyName);
1: 		if (iter != null) {
1: 			try {
1: 				iterations = Integer.parseInt(iter);
1: 			} catch (NumberFormatException nfe) {
1: 				// leave at one
1: 			}
1: 			if (iterations <= 0)
1: 				iterations = 1;
1: 		}
1: 
1: 		for (int i = 0; i < iterations; i++) {
1: 			Runtime.getRuntime().gc();
1: 			long btm = Runtime.getRuntime().totalMemory();
1: 			long bfm = Runtime.getRuntime().freeMemory();
1: 			long bum = btm - bfm;
1: 
1: 			long start = System. currentTimeMillis();
1: 
1: 			runTestSet();
1: 
1: 			long end = System. currentTimeMillis();
1: 
1: 			Runtime.getRuntime().gc();
1: 			long atm = Runtime.getRuntime().totalMemory();
1: 			long afm = Runtime.getRuntime().freeMemory();
1: 			long aum = atm - afm;
1: 
1: 			out.println("Iteration " + i + " took " + (end - start) + "ms");
1: 			out.println("Total memory increased by " + (atm - btm) + " is " + atm);
1: 			out.println("Used  memory increased by " + (aum - bum) + " is " + aum);
1: 		}
1: 	}
1: 
1: 	/*
1: 	**	  Abstract methods to implement for your test.
1: 	*/
1: 
1: 	/**
1: 		Run once to set up the test.
1: 
1:         @exception T_Fail Test code throws these
1: 	*/
1: 	protected abstract void setupTest() throws T_Fail;
1: 
1: 	/**
1: 		Run once per-iteration to run the actual test.
1: 
1:         @exception T_Fail Test code throws these
1: 	*/
1: 	protected abstract void runTestSet() throws T_Fail;
1: }
============================================================================