1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.load.ExportAbstract
1:345de35: 
1:6d913c6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6d913c6:    contributor license agreements.  See the NOTICE file distributed with
1:6d913c6:    this work for additional information regarding copyright ownership.
1:6d913c6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6d913c6:    (the "License"); you may not use this file except in compliance with
1:6d913c6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.load;
1:eac0369: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: import java.sql.Types;
1:eac0369: import java.util.Date;
1:84e347a: import java.io.InputStream;
1:2732872: import java.io.ObjectOutputStream;
1:84e347a: import java.io.Reader;
1:eac0369: 
1:2732872: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:2732872: import org.apache.derby.iapi.util.StringUtil;
1:2732872: 
2:eac0369: /**
1:eac0369:  * 
1:eac0369:  * <P>
1:eac0369:  */
1:eac0369: abstract class ExportAbstract {
1:eac0369: 
1:eac0369:   protected ControlInfo controlFileReader;
1:eac0369:   protected ExportResultSetForObject exportResultSetForObject;
1:eac0369:   protected ExportWriteDataAbstract exportWriteData;
1:eac0369:   protected Connection con;
1:eac0369:   protected String entityName;  //this can be a plain table name or qualified with schema also
1:eac0369:   protected String schemaName;
1:eac0369:   protected String selectStatement ;
1:84e347a:   protected boolean lobsInExtFile = false;
1:eac0369: 
1:eac0369:   //following makes the resultset using select * from entityName
1:eac0369:   protected ResultSet resultSetForEntity() throws Exception {
1:eac0369:     exportResultSetForObject = new ExportResultSetForObject(con, schemaName,
1:eac0369: 															entityName, 
1:eac0369: 															selectStatement);
1:eac0369: 
1:eac0369:     ResultSet rs = exportResultSetForObject.getResultSet();
1:eac0369:     return rs;
2:eac0369:   }
1:eac0369: 
1:84e347a:     /** convert resultset data for the current row to string array. 
1:84e347a:      * If large objects are being exported to an external file, 
1:84e347a:      * then write the lob  data into the external file and store 
1:84e347a:      * the lob data location  in the string array for that column.
1:84e347a:      * @param rs   resultset that contains the data to export.
1:84e347a:      * @param isLargeBinary  boolean array, whose elements will
1:84e347a:      *                      be true, if the column type is blob/or 
1:84e347a:      *                      other large binary type, otherwise false. 
1:84e347a:      * @param isLargeChar   boolean array, whose elements will
1:84e347a:      *                      be true, if the column type is clob/ 
1:84e347a:      *                      other large char type, otherwise false. 
1:84e347a:      * @return A string array of the row data to write to export file.
1:84e347a:      * @exception  Exception  if any errors during conversion. 
1:84e347a:      */
1:84e347a:     private String[] getOneRowAtATime(ResultSet rs, 
1:84e347a:                                       boolean[] isLargeBinary, 
1:84e347a:                                       boolean[] isLargeChar) 
1:84e347a:         throws Exception 
1:84e347a: 	{
1:eac0369: 
1:eac0369:     if (rs.next()){
1:c7a1d17:        int columnCount = exportResultSetForObject.getColumnCount();
1:c7a1d17: 	   ResultSetMetaData rsm=rs.getMetaData();
1:eac0369:        String[] rowObjects = new String[columnCount];
1:eac0369:        for (int colNum = 0; colNum < columnCount; colNum++) {
1:84e347a:            if (lobsInExtFile && 
1:84e347a:                (isLargeChar[colNum] || isLargeBinary[colNum])) 
1:84e347a:            {	
1:84e347a:                String LobExtLocation;
1:84e347a:                if (isLargeBinary[colNum]) {
1:84e347a: 
1:84e347a:                    // get input stream that has the column value as a 
1:84e347a:                    // stream of uninterpreted bytes; if the value is SQL NULL, 
1:84e347a:                    // the return value  is null
1:84e347a:                    InputStream is = rs.getBinaryStream(colNum + 1);
1:84e347a:                    LobExtLocation = 
1:84e347a:                        exportWriteData.writeBinaryColumnToExternalFile(is);
1:84e347a:                } else {
1:84e347a:                    // It is clob data, get character stream that has 
1:84e347a:                    // the column value. if the value is SQL NULL, the 
1:84e347a:                    // return value  is null
1:84e347a:                    Reader ir = rs.getCharacterStream(colNum + 1);
1:84e347a:                    LobExtLocation  = 
1:84e347a:                        exportWriteData.writeCharColumnToExternalFile(ir);
1:84e347a:                }
1:84e347a:                rowObjects[colNum]= LobExtLocation;
1:84e347a: 
1:84e347a:                // when lob data is written to the main export file, binary 
1:84e347a:                // data is written in hex format. getString() call on binary 
1:84e347a:                // columns returns the data in hex format, no special handling 
1:84e347a:                // required. In case of large char tpe like Clob, data 
1:84e347a:                // is written to main export file  similar to other char types. 
1:84e347a:                
1:84e347a:                // TODO : handling of Nulls. 
1:84e347a:            }
1:84e347a: 		   else {
1:2732872:                String columnValue;
1:2732872:                int jdbcColumnNumber = colNum + 1;
1:2732872:                
1:2732872:                if ( rsm.getColumnType( jdbcColumnNumber ) == java.sql.Types.JAVA_OBJECT )
1:2732872:                { columnValue = stringifyObject( rs.getObject( jdbcColumnNumber ) ); }
1:2732872:                else { columnValue = rs.getString( jdbcColumnNumber ); }
1:2732872:                
1:2732872: 			   rowObjects[colNum] = columnValue;
1:84e347a:            }
1:eac0369:        }
1:eac0369:        return rowObjects;
1:eac0369:     }
1:eac0369:     rs.close();
1:eac0369: 	exportResultSetForObject.close();
1:eac0369:     return null;
1:eac0369:   }
1:eac0369: 
1:2732872:     // write a Serializable as a string
1:2732872:     public static String stringifyObject( Object udt ) throws Exception
1:2732872:     {
1:2732872:         DynamicByteArrayOutputStream dbaos = new DynamicByteArrayOutputStream();
1:2732872:         ObjectOutputStream oos = new ObjectOutputStream( dbaos );
1:2732872:         
1:2732872:         oos.writeObject( udt );
1:2732872:         
1:2732872:         byte[] buffer = dbaos.getByteArray();
1:2732872:         int length = dbaos.getUsed();
1:2732872:         
1:2732872:         return StringUtil.toHexString( buffer, 0, length );
1:2732872:     }
1:2732872: 
1:eac0369:   //returns the control file reader corresponding to the control file passed
1:eac0369:   protected ControlInfo getControlFileReader(){
1:eac0369: 	  return controlFileReader; 
1:eac0369:   }
1:eac0369: 
1:eac0369:   protected abstract ExportWriteDataAbstract getExportWriteData() throws Exception;
1:eac0369: 
1:eac0369:   protected void doAllTheWork() throws Exception {
1:eac0369: 
1:eac0369: 	ResultSet rs = null;
1:eac0369: 	try {
1:eac0369:     	rs = resultSetForEntity();
1:eac0369:     	if (rs != null) {
1:eac0369: 			ResultSetMetaData rsmeta = rs.getMetaData();
1:eac0369: 			int ncols = rsmeta.getColumnCount();
1:eac0369: 			boolean[] isNumeric = new boolean[ncols];
1:84e347a: 			boolean[] isLargeChar = new boolean[ncols];
1:84e347a: 			boolean[] isLargeBinary = new boolean[ncols];
1:eac0369: 			for (int i = 0; i < ncols; i++) {
1:eac0369: 				int ctype = rsmeta.getColumnType(i+1);
1:eac0369: 				if (ctype == Types.BIGINT || ctype == Types.DECIMAL || ctype == Types.DOUBLE ||
1:eac0369: 						ctype == Types.FLOAT ||ctype == Types.INTEGER || ctype == Types.NUMERIC ||
1:eac0369: 						ctype == Types.REAL ||ctype == Types.SMALLINT || ctype == Types.TINYINT)
1:eac0369:     				isNumeric[i] = true;
1:84e347a: 				else 
1:eac0369: 					isNumeric[i] = false;
1:84e347a: 					
1:84e347a: 				if (ctype == Types.CLOB)
1:84e347a: 					isLargeChar[i] = true;
1:84e347a: 				else 
1:84e347a: 					isLargeChar[i]= false;
1:84e347a: 				
1:84e347a: 				if (ctype == Types.BLOB) 
1:84e347a: 					isLargeBinary[i] = true;
1:84e347a: 				else 
1:84e347a: 					isLargeBinary[i] = false;
1:eac0369: 			}
1:84e347a: 
1:84e347a: 
1:eac0369: 			exportWriteData = getExportWriteData();
1:eac0369: 			exportWriteData.writeColumnDefinitionOptionally(
1:eac0369: 						exportResultSetForObject.getColumnDefinition(),
1:eac0369: 						exportResultSetForObject.getColumnTypes());
1:eac0369: 			exportWriteData.setColumnLengths(controlFileReader.getColumnWidths());
1:eac0369: 
1:84e347a:        		// get one row at a time and write it to the output file
1:84e347a:             String[] oneRow = getOneRowAtATime(rs, 
1:84e347a:                                                isLargeBinary, 
1:84e347a:                                                isLargeChar);
1:eac0369:        		while (oneRow != null) {
1:eac0369:          		exportWriteData.writeData(oneRow, isNumeric);
1:84e347a:                 oneRow = getOneRowAtATime(rs, isLargeBinary, isLargeChar);
1:eac0369:        		}
1:eac0369: 		}
1:eac0369: 	} finally {
1:eac0369: 		//cleanup work after no more rows
1:eac0369: 		if (exportWriteData != null)
1:eac0369: 			exportWriteData.noMoreRows();
1:eac0369: 		if (rs != null)
1:eac0369: 			rs.close();
1:eac0369:     }
1:eac0369:   }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c7a1d17
/////////////////////////////////////////////////////////////////////////
1:        int columnCount = exportResultSetForObject.getColumnCount();
1: 	   ResultSetMetaData rsm=rs.getMetaData();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2732872
/////////////////////////////////////////////////////////////////////////
1: import java.io.ObjectOutputStream;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import org.apache.derby.iapi.util.StringUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1:                String columnValue;
1:                int jdbcColumnNumber = colNum + 1;
1:                
1:                if ( rsm.getColumnType( jdbcColumnNumber ) == java.sql.Types.JAVA_OBJECT )
1:                { columnValue = stringifyObject( rs.getObject( jdbcColumnNumber ) ); }
1:                else { columnValue = rs.getString( jdbcColumnNumber ); }
1:                
1: 			   rowObjects[colNum] = columnValue;
/////////////////////////////////////////////////////////////////////////
1:     // write a Serializable as a string
1:     public static String stringifyObject( Object udt ) throws Exception
1:     {
1:         DynamicByteArrayOutputStream dbaos = new DynamicByteArrayOutputStream();
1:         ObjectOutputStream oos = new ObjectOutputStream( dbaos );
1:         
1:         oos.writeObject( udt );
1:         
1:         byte[] buffer = dbaos.getByteArray();
1:         int length = dbaos.getUsed();
1:         
1:         return StringUtil.toHexString( buffer, 0, length );
1:     }
1: 
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:84e347a
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.Reader;
/////////////////////////////////////////////////////////////////////////
1:   protected boolean lobsInExtFile = false;
/////////////////////////////////////////////////////////////////////////
1:     /** convert resultset data for the current row to string array. 
1:      * If large objects are being exported to an external file, 
1:      * then write the lob  data into the external file and store 
1:      * the lob data location  in the string array for that column.
1:      * @param rs   resultset that contains the data to export.
1:      * @param isLargeBinary  boolean array, whose elements will
1:      *                      be true, if the column type is blob/or 
1:      *                      other large binary type, otherwise false. 
1:      * @param isLargeChar   boolean array, whose elements will
1:      *                      be true, if the column type is clob/ 
1:      *                      other large char type, otherwise false. 
1:      * @return A string array of the row data to write to export file.
1:      * @exception  Exception  if any errors during conversion. 
1:      */
1:     private String[] getOneRowAtATime(ResultSet rs, 
1:                                       boolean[] isLargeBinary, 
1:                                       boolean[] isLargeChar) 
1:         throws Exception 
1: 	{
1:            if (lobsInExtFile && 
1:                (isLargeChar[colNum] || isLargeBinary[colNum])) 
1:            {	
1:                String LobExtLocation;
1:                if (isLargeBinary[colNum]) {
1: 
1:                    // get input stream that has the column value as a 
1:                    // stream of uninterpreted bytes; if the value is SQL NULL, 
1:                    // the return value  is null
1:                    InputStream is = rs.getBinaryStream(colNum + 1);
1:                    LobExtLocation = 
1:                        exportWriteData.writeBinaryColumnToExternalFile(is);
1:                } else {
1:                    // It is clob data, get character stream that has 
1:                    // the column value. if the value is SQL NULL, the 
1:                    // return value  is null
1:                    Reader ir = rs.getCharacterStream(colNum + 1);
1:                    LobExtLocation  = 
1:                        exportWriteData.writeCharColumnToExternalFile(ir);
1:                }
1:                rowObjects[colNum]= LobExtLocation;
1: 
1:                // when lob data is written to the main export file, binary 
1:                // data is written in hex format. getString() call on binary 
1:                // columns returns the data in hex format, no special handling 
1:                // required. In case of large char tpe like Clob, data 
1:                // is written to main export file  similar to other char types. 
1:                
1:                // TODO : handling of Nulls. 
1:            }
1: 		   else {
0: 			   rowObjects[colNum]=rs.getString(colNum + 1);
1:            }
/////////////////////////////////////////////////////////////////////////
1: 			boolean[] isLargeChar = new boolean[ncols];
1: 			boolean[] isLargeBinary = new boolean[ncols];
1: 				else 
1: 					
1: 				if (ctype == Types.CLOB)
1: 					isLargeChar[i] = true;
1: 				else 
1: 					isLargeChar[i]= false;
1: 				
1: 				if (ctype == Types.BLOB) 
1: 					isLargeBinary[i] = true;
1: 				else 
1: 					isLargeBinary[i] = false;
1: 
1: 
1:        		// get one row at a time and write it to the output file
1:             String[] oneRow = getOneRowAtATime(rs, 
1:                                                isLargeBinary, 
1:                                                isLargeChar);
1:                 oneRow = getOneRowAtATime(rs, isLargeBinary, isLargeChar);
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:6d913c6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ab12b7e
/////////////////////////////////////////////////////////////////////////
0:        		rowObjects[colNum]=rs.getString(colNum + 1);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.load.ExportAbstract
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.Types;
1: import java.util.Date;
1: 
1: /**
1:  * 
1:  * <P>
1:  */
1: abstract class ExportAbstract {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:   protected ControlInfo controlFileReader;
1:   protected ExportResultSetForObject exportResultSetForObject;
1:   protected ExportWriteDataAbstract exportWriteData;
1:   protected Connection con;
1:   protected String entityName;  //this can be a plain table name or qualified with schema also
1:   protected String schemaName;
1:   protected String selectStatement ;
1:   
1: 
1:   //following makes the resultset using select * from entityName
1:   protected ResultSet resultSetForEntity() throws Exception {
1:     exportResultSetForObject = new ExportResultSetForObject(con, schemaName,
1: 															entityName, 
1: 															selectStatement);
1: 
1:     ResultSet rs = exportResultSetForObject.getResultSet();
1:     return rs;
1:   }
1: 
0:   //convert resultset data to string array
0:   public String[] getOneRowAtATime(ResultSet rs) throws Exception {
0:     int columnCount = exportResultSetForObject.getColumnCount();
1: 
0: 	ResultSetMetaData rsm=rs.getMetaData();
1:     if (rs.next()){
1:        String[] rowObjects = new String[columnCount];
1:        for (int colNum = 0; colNum < columnCount; colNum++) {
0:            if (rs.getObject(colNum + 1) != null)
0: 			{
0: 				rowObjects[colNum]=rs.getString(colNum + 1);
1: 			}
1:        }
1:        return rowObjects;
1:     }
1:     rs.close();
1: 	exportResultSetForObject.close();
1:     return null;
1:   }
1: 
1:   //returns the control file reader corresponding to the control file passed
1:   protected ControlInfo getControlFileReader(){
1: 	  return controlFileReader; 
1:   }
1: 
1:   protected abstract ExportWriteDataAbstract getExportWriteData() throws Exception;
1: 
1:   protected void doAllTheWork() throws Exception {
1: 
1: 	ResultSet rs = null;
1: 	try {
1:     	rs = resultSetForEntity();
1:     	if (rs != null) {
1: 			ResultSetMetaData rsmeta = rs.getMetaData();
1: 			int ncols = rsmeta.getColumnCount();
1: 			boolean[] isNumeric = new boolean[ncols];
1: 			for (int i = 0; i < ncols; i++) {
1: 				int ctype = rsmeta.getColumnType(i+1);
1: 				if (ctype == Types.BIGINT || ctype == Types.DECIMAL || ctype == Types.DOUBLE ||
1: 						ctype == Types.FLOAT ||ctype == Types.INTEGER || ctype == Types.NUMERIC ||
1: 						ctype == Types.REAL ||ctype == Types.SMALLINT || ctype == Types.TINYINT)
1:     				isNumeric[i] = true;
0: 				else
1: 					isNumeric[i] = false;
1: 			}
1: 			exportWriteData = getExportWriteData();
1: 			exportWriteData.writeColumnDefinitionOptionally(
1: 						exportResultSetForObject.getColumnDefinition(),
1: 						exportResultSetForObject.getColumnTypes());
1: 			exportWriteData.setColumnLengths(controlFileReader.getColumnWidths());
1: 
0:        		//get one row at a time and write it to the output file
0:        		String[] oneRow = getOneRowAtATime(rs);
1:        		while (oneRow != null) {
1:          		exportWriteData.writeData(oneRow, isNumeric);
0:          		oneRow = getOneRowAtATime(rs);
1:        		}
1: 		}
1: 	} finally {
1: 		//cleanup work after no more rows
1: 		if (exportWriteData != null)
1: 			exportWriteData.noMoreRows();
1: 		if (rs != null)
1: 			rs.close();
1:     }
1:   }
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.load;
0: 
0: import java.sql.Connection;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.Types;
0: import java.util.Date;
0: 
0: /**
0:  * 
0:  * <P>
0:  */
0: abstract class ExportAbstract {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:   protected ControlInfo controlFileReader;
0:   protected ExportResultSetForObject exportResultSetForObject;
0:   protected ExportWriteDataAbstract exportWriteData;
0:   protected Connection con;
0:   protected String entityName;  //this can be a plain table name or qualified with schema also
0:   protected String schemaName;
0:   protected String selectStatement ;
0:   
0: 
0:   //following makes the resultset using select * from entityName
0:   protected ResultSet resultSetForEntity() throws Exception {
0:     exportResultSetForObject = new ExportResultSetForObject(con, schemaName,
0: 															entityName, 
0: 															selectStatement);
0: 
0:     ResultSet rs = exportResultSetForObject.getResultSet();
0:     return rs;
0:   }
0: 
0:   //convert resultset data to string array
0:   public String[] getOneRowAtATime(ResultSet rs) throws Exception {
0:     int columnCount = exportResultSetForObject.getColumnCount();
0: 
0: 	ResultSetMetaData rsm=rs.getMetaData();
0:     if (rs.next()){
0:        String[] rowObjects = new String[columnCount];
0:        for (int colNum = 0; colNum < columnCount; colNum++) {
0:            if (rs.getObject(colNum + 1) != null)
0: 			{
0: 				rowObjects[colNum]=rs.getString(colNum + 1);
0: 			}
0:        }
0:        return rowObjects;
0:     }
0:     rs.close();
0: 	exportResultSetForObject.close();
0:     return null;
0:   }
0: 
0:   //returns the control file reader corresponding to the control file passed
0:   protected ControlInfo getControlFileReader(){
0: 	  return controlFileReader; 
0:   }
0: 
0:   protected abstract ExportWriteDataAbstract getExportWriteData() throws Exception;
0: 
0:   protected void doAllTheWork() throws Exception {
0: 
0: 	ResultSet rs = null;
0: 	try {
0:     	rs = resultSetForEntity();
0:     	if (rs != null) {
0: 			ResultSetMetaData rsmeta = rs.getMetaData();
0: 			int ncols = rsmeta.getColumnCount();
0: 			boolean[] isNumeric = new boolean[ncols];
0: 			for (int i = 0; i < ncols; i++) {
0: 				int ctype = rsmeta.getColumnType(i+1);
0: 				if (ctype == Types.BIGINT || ctype == Types.DECIMAL || ctype == Types.DOUBLE ||
0: 						ctype == Types.FLOAT ||ctype == Types.INTEGER || ctype == Types.NUMERIC ||
0: 						ctype == Types.REAL ||ctype == Types.SMALLINT || ctype == Types.TINYINT)
0:     				isNumeric[i] = true;
0: 				else
0: 					isNumeric[i] = false;
0: 			}
0: 			exportWriteData = getExportWriteData();
0: 			exportWriteData.writeColumnDefinitionOptionally(
0: 						exportResultSetForObject.getColumnDefinition(),
0: 						exportResultSetForObject.getColumnTypes());
0: 			exportWriteData.setColumnLengths(controlFileReader.getColumnWidths());
0: 
0:        		//get one row at a time and write it to the output file
0:        		String[] oneRow = getOneRowAtATime(rs);
0:        		while (oneRow != null) {
0:          		exportWriteData.writeData(oneRow, isNumeric);
0:          		oneRow = getOneRowAtATime(rs);
0:        		}
0: 		}
0: 	} finally {
0: 		//cleanup work after no more rows
0: 		if (exportWriteData != null)
0: 			exportWriteData.noMoreRows();
0: 		if (rs != null)
0: 			rs.close();
0:     }
0:   }
0: 
0: 
0: }
============================================================================