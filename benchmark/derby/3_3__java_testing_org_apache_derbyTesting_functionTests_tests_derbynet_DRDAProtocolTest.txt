1:34a7cbe: /*
2:34a7cbe:  
1:34a7cbe:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DRDAProtocolTest
1:34a7cbe:  
1:34a7cbe:    Licensed to the Apache Software Foundation (ASF) under one or more
1:34a7cbe:    contributor license agreements.  See the NOTICE file distributed with
1:34a7cbe:    this work for additional information regarding copyright ownership.
1:34a7cbe:    The ASF licenses this file to You under the Apache License, Version 2.0
1:34a7cbe:    (the "License"); you may not use this file except in compliance with
1:34a7cbe:    the License.  You may obtain a copy of the License at
1:34a7cbe:  
1:34a7cbe:       http://www.apache.org/licenses/LICENSE-2.0
1:34a7cbe:  
1:34a7cbe:    Unless required by applicable law or agreed to in writing, software
1:34a7cbe:    distributed under the License is distributed on an "AS IS" BASIS,
1:34a7cbe:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:34a7cbe:    See the License for the specific language governing permissions and
1:34a7cbe:    limitations under the License.
1:34a7cbe:  
1:34a7cbe:  */
1:34a7cbe: 
1:34a7cbe: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:34a7cbe: 
1:34a7cbe: import java.sql.Connection;
1:34a7cbe: import java.sql.PreparedStatement;
1:34a7cbe: import java.sql.ResultSet;
1:86bc9d5: import java.sql.SQLException;
1:34a7cbe: import java.sql.Statement;
1:34a7cbe: 
1:34a7cbe: import junit.framework.Test;
1:34a7cbe: 
1:34a7cbe: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:be7095f: import org.apache.derbyTesting.junit.JDBC;
1:34a7cbe: import org.apache.derbyTesting.junit.TestConfiguration;
1:34a7cbe: 
1:86bc9d5: /**
1:86bc9d5:  * Tests of the properties of the DRDA network protocol implementation.
1:34a7cbe:  */
1:34a7cbe: public class DRDAProtocolTest extends BaseJDBCTestCase {
1:34a7cbe:     
1:440c27c:     private String threadName;
1:440c27c: 
1:440c27c:     public void setUp() {
1:440c27c:         /* Save the thread name as it gets changed in one of the fixtures */
1:440c27c:         threadName = Thread.currentThread().getName();
1:440c27c:     }
1:440c27c: 
1:440c27c:     public void tearDown() throws Exception {
1:440c27c:         /* Restore the original thread name */
1:440c27c: 
1:440c27c:         super.tearDown();
1:440c27c: 
1:440c27c:         Thread.currentThread().setName(threadName);
1:440c27c:     }
1:440c27c: 
1:440c27c:     /**
1:440c27c:      * Tests the support for threads with characters not supported by EBCDIC
1:440c27c:      *
1:440c27c:      * @throws SQLException
1:440c27c:      */
1:440c27c:     public void testNonEBCDICCharacters() throws SQLException {
1:440c27c:         Thread.currentThread().setName("\u4e10");
1:440c27c: 
1:440c27c:         /* Open a connection while the thread name has Japanese characters */
1:440c27c:         Connection conn2 = openConnection("FIRSTDB1");
1:440c27c:         conn2.close();
1:440c27c:     }
1:440c27c: 
1:86bc9d5:     /** 
1:86bc9d5:      * Tests whether multiple connections to different databases
1:86bc9d5:      * on the same Derby instance are working without exceptions.
1:86bc9d5:      * 
1:86bc9d5:      * @throws SQLException if database interaction fails
2:86bc9d5:      */
1:86bc9d5:     public void testMultipleConnections() throws SQLException {
1:3df869c:         Connection conn1 = openConnection("FIRSTDB1");
1:34a7cbe:         conn1.setAutoCommit(false);
1:34a7cbe: 
1:34a7cbe:         Statement st = conn1.createStatement();
1:34a7cbe:         st.execute("create table FIRSTDB_T1 (i int, j int, k int)");
1:34a7cbe:         st.execute("insert into FIRSTDB_T1 values (1, 3, 5)");
1:34a7cbe:         PreparedStatement pSt1 =
1:34a7cbe:                 conn1.prepareStatement("select * from FIRSTDB_T1");
1:34a7cbe:         
1:34a7cbe:         ResultSet rs1 = pSt1.executeQuery();
1:34a7cbe:         rs1.next();
1:34a7cbe:         rs1.close();
1:be7095f:         pSt1.close();
1:be7095f:         st.close();
1:34a7cbe:         
1:3df869c:         Connection conn2 = openConnection("SECONDDB2");
1:34a7cbe:         conn2.setAutoCommit(false);
1:34a7cbe:         Statement st2 = conn2.createStatement();
1:34a7cbe:         st2.execute("create table SECONDDB_T1 (i int, j int, k int)");
1:34a7cbe:         st2.execute("insert into SECONDDB_T1 values (2, 4, 6)");
1:34a7cbe:         PreparedStatement pSt2 =
1:34a7cbe:                 conn2.prepareStatement("select * from SECONDDB_T1");
1:34a7cbe:         
1:34a7cbe:         rs1 = pSt2.executeQuery();
1:34a7cbe:         rs1.next();
1:34a7cbe:         rs1.close();
1:be7095f:         pSt2.close();
1:be7095f:         st2.close();
1:34a7cbe:         
1:be7095f:         JDBC.cleanup(conn1);
1:be7095f:         JDBC.cleanup(conn2);
1:34a7cbe:     }
1:34a7cbe:     
1:34a7cbe:     /* ------------------- end helper methods  -------------------------- */
1:34a7cbe:     public DRDAProtocolTest(String name) {
1:34a7cbe:         super(name);
1:34a7cbe:     }
1:34a7cbe:     
1:34a7cbe:     public static Test suite() {
1:3df869c:         Test test;
1:3df869c:         test = TestConfiguration.clientServerSuite(DRDAProtocolTest.class);
1:e5c9e58:         test = TestConfiguration.additionalDatabaseDecorator(test, "FIRSTDB1");
1:e5c9e58:         test = TestConfiguration.additionalDatabaseDecorator(test, "SECONDDB2");
1:3df869c:         return test;
1:34a7cbe:     }
1:34a7cbe: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:440c27c
/////////////////////////////////////////////////////////////////////////
1:     private String threadName;
1: 
1:     public void setUp() {
1:         /* Save the thread name as it gets changed in one of the fixtures */
1:         threadName = Thread.currentThread().getName();
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         /* Restore the original thread name */
1: 
1:         super.tearDown();
1: 
1:         Thread.currentThread().setName(threadName);
1:     }
1: 
1:     /**
1:      * Tests the support for threads with characters not supported by EBCDIC
1:      *
1:      * @throws SQLException
1:      */
1:     public void testNonEBCDICCharacters() throws SQLException {
1:         Thread.currentThread().setName("\u4e10");
1: 
1:         /* Open a connection while the thread name has Japanese characters */
1:         Connection conn2 = openConnection("FIRSTDB1");
1:         conn2.close();
1:     }
1: 
commit:34a7cbe
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DRDAProtocolTest
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
0: import javax.sql.DataSource;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
0: /** The test of the properties of the DRDA network protocol implementation.
1:   */
1: public class DRDAProtocolTest extends BaseJDBCTestCase {
1:     
0:     /** Test whether the multiple connections to different databases
0:       * on a same derby instance are working without exceptions. */
0:     public void testMultipleConnections() throws Exception {
0:         DataSource ds1 = JDBCDataSource.getDataSource("FIRSTDB1");
0:         JDBCDataSource.setBeanProperty(ds1, "connectionAttributes",
0:                                        "create=true");
0:         Connection conn1 = ds1.getConnection();
1:         conn1.setAutoCommit(false);
1: 
1:         Statement st = conn1.createStatement();
1:         st.execute("create table FIRSTDB_T1 (i int, j int, k int)");
1:         st.execute("insert into FIRSTDB_T1 values (1, 3, 5)");
1:         PreparedStatement pSt1 =
1:                 conn1.prepareStatement("select * from FIRSTDB_T1");
1:         
1:         ResultSet rs1 = pSt1.executeQuery();
1:         rs1.next();
1:         rs1.close();
1:         
0:         DataSource ds2 = JDBCDataSource.getDataSource("SECONDDB2");
0:         JDBCDataSource.setBeanProperty(ds2, "connectionAttributes",
0:                                        "create=true");
0:         Connection conn2 = ds2.getConnection();
1:         conn2.setAutoCommit(false);
1:         Statement st2 = conn2.createStatement();
1:         st2.execute("create table SECONDDB_T1 (i int, j int, k int)");
1:         st2.execute("insert into SECONDDB_T1 values (2, 4, 6)");
1:         PreparedStatement pSt2 =
1:                 conn2.prepareStatement("select * from SECONDDB_T1");
1:         
1:         rs1 = pSt2.executeQuery();
1:         rs1.next();
1:         rs1.close();
1:         
0:         conn1.rollback();
0:         conn1.close();
0:         conn2.rollback();
0:         conn2.close();
1:     }
1:     
1:     /* ------------------- end helper methods  -------------------------- */
1:     public DRDAProtocolTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
0:         return TestConfiguration.clientServerSuite(DRDAProtocolTest.class);
1:     }
1:     
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:be7095f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         pSt1.close();
1:         st.close();
/////////////////////////////////////////////////////////////////////////
1:         pSt2.close();
1:         st2.close();
1:         JDBC.cleanup(conn1);
1:         JDBC.cleanup(conn2);
commit:e5c9e58
/////////////////////////////////////////////////////////////////////////
1:         test = TestConfiguration.additionalDatabaseDecorator(test, "FIRSTDB1");
1:         test = TestConfiguration.additionalDatabaseDecorator(test, "SECONDDB2");
commit:3df869c
/////////////////////////////////////////////////////////////////////////
1:         Connection conn1 = openConnection("FIRSTDB1");
/////////////////////////////////////////////////////////////////////////
1:         Connection conn2 = openConnection("SECONDDB2");
/////////////////////////////////////////////////////////////////////////
1:         Test test;
1:         test = TestConfiguration.clientServerSuite(DRDAProtocolTest.class);
0:         test = TestConfiguration.singleUseDatabaseDecorator(test, "FIRSTDB1", false);
0:         test = TestConfiguration.singleUseDatabaseDecorator(test, "SECONDDB2", false);
1:         return test;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:86bc9d5
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: /**
1:  * Tests of the properties of the DRDA network protocol implementation.
1:  */
1:     /** 
1:      * Tests whether multiple connections to different databases
1:      * on the same Derby instance are working without exceptions.
1:      * 
1:      * @throws SQLException if database interaction fails
1:      */
1:     public void testMultipleConnections() throws SQLException {
/////////////////////////////////////////////////////////////////////////
============================================================================