1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.locks.LockTableVTI
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.locks;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Latch;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.NoSuchElementException;
1:eac0369: 
1:fa8c910: import java.util.Iterator;
1:eac0369: import java.util.ListIterator;
1:eac0369: import java.util.List;
1:fa8c910: import java.util.Map;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This provides an Enumeration of Latch's
1:eac0369: 	from a clone of the lock table. A Latch is badly named,
1:eac0369: 	it represents lock information.
1:eac0369:  */
1:eac0369: class LockTableVTI implements Enumeration
1:eac0369: {
1:eac0369: 	// the clonedLockTable temporarily holds a copy of the lock table.
1:eac0369: 	//
1:eac0369: 	// The copy is necessary because the real lock manager needs to be single
1:eac0369: 	// threaded while a snap shot is made.  After the copy is made, it can take
1:eac0369: 	// its time digesting the information without blocking the real lock
1:eac0369: 	// manager.
1:eac0369: 
1:fa8c910: 	private final Iterator outerControl;
1:eac0369: 	private Control control;
1:eac0369: 	private ListIterator grantedList;
1:eac0369: 	private ListIterator waitingList;
1:eac0369: 	private Latch nextLock;
1:eac0369: 
1:fa8c910: 	LockTableVTI(Map clonedLockTable)
1:eac0369: 	{
1:fa8c910: 		outerControl = clonedLockTable.values().iterator();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public boolean hasMoreElements() {
1:eac0369: 
1:eac0369: 		if (nextLock != null)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		for (;;) {
1:eac0369: 
1:eac0369: 			if (control == null) {
1:fa8c910: 				if (!outerControl.hasNext())
1:eac0369: 					return false;
1:eac0369: //System.out.println("new control lock ");
1:eac0369: 
1:fa8c910: 				control = (Control) outerControl.next();
1:eac0369: 
1:eac0369: 				List granted = control.getGranted();
1:eac0369: 				if (granted != null)
1:eac0369: 					grantedList = granted.listIterator();
1:eac0369: 
1:eac0369: 
1:eac0369: 				List waiting = control.getWaiting();
1:eac0369: 				if (waiting != null)
1:eac0369: 					waitingList = waiting.listIterator();
1:eac0369: 
1:eac0369: 				nextLock = control.getFirstGrant();
1:eac0369: 				if (nextLock == null) {
1:eac0369: 
1:eac0369: 					nextLock = getNextLock(control);
1:eac0369: 				}
1:eac0369: 				
1:eac0369: 			} else {
1:eac0369: 				nextLock = getNextLock(control);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 
1:eac0369: 			if (nextLock != null)
1:eac0369: 				return true;
1:eac0369: 
1:eac0369: 			control = null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private Latch getNextLock(Control control) {
1:eac0369: 		Latch lock = null;
1:eac0369: 		if (grantedList != null) {
1:eac0369: 			if (grantedList.hasNext()) {
1:7af858d: 				lock = (Latch) grantedList.next();
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 				grantedList = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (lock == null) {
1:eac0369: 			if (waitingList != null) {
1:eac0369: 				if (waitingList.hasNext()) {
1:7af858d: 					lock = (Latch) waitingList.next();
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 					waitingList = null;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return lock;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object nextElement() {
1:eac0369: 
1:eac0369: 		if (!hasMoreElements())
1:eac0369: 			throw new NoSuchElementException();
1:eac0369: 
1:eac0369: 		Latch ret = nextLock;
1:eac0369: 
1:eac0369: 		nextLock = null;
1:eac0369: 		return ret;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7af858d
/////////////////////////////////////////////////////////////////////////
1: 				lock = (Latch) grantedList.next();
/////////////////////////////////////////////////////////////////////////
1: 					lock = (Latch) waitingList.next();
commit:fa8c910
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 	private final Iterator outerControl;
1: 	LockTableVTI(Map clonedLockTable)
1: 		outerControl = clonedLockTable.values().iterator();
/////////////////////////////////////////////////////////////////////////
1: 				if (!outerControl.hasNext())
1: 				control = (Control) outerControl.next();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.locks.LockTableVTI
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
1: import org.apache.derby.iapi.services.locks.Latch;
1: 
0: import java.util.Hashtable;
0: import java.util.Vector;
1: import java.util.Enumeration;
1: import java.util.NoSuchElementException;
1: 
1: import java.util.ListIterator;
1: import java.util.List;
1: 
1: /**
1: 	This provides an Enumeration of Latch's
1: 	from a clone of the lock table. A Latch is badly named,
1: 	it represents lock information.
1:  */
1: class LockTableVTI implements Enumeration
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	// the clonedLockTable temporarily holds a copy of the lock table.
1: 	//
1: 	// The copy is necessary because the real lock manager needs to be single
1: 	// threaded while a snap shot is made.  After the copy is made, it can take
1: 	// its time digesting the information without blocking the real lock
1: 	// manager.
1: 
0: 	private final LockSet clonedLockTable;
0: 	private final Enumeration outerControl;
1: 	private Control control;
1: 	private ListIterator grantedList;
1: 	private ListIterator waitingList;
1: 	private Latch nextLock;
1: 
0: 	LockTableVTI(LockSet clonedLockTable)
1: 	{
0: 		this.clonedLockTable = clonedLockTable;
1: 
0: 		outerControl = clonedLockTable.elements();
1: 	}
1: 
1: 
1: 	public boolean hasMoreElements() {
1: 
1: 		if (nextLock != null)
1: 			return true;
1: 
1: 		for (;;) {
1: 
1: 			if (control == null) {
0: 				if (!outerControl.hasMoreElements())
1: 					return false;
1: //System.out.println("new control lock ");
1: 
0: 				control = (Control) outerControl.nextElement();
1: 
1: 				List granted = control.getGranted();
1: 				if (granted != null)
1: 					grantedList = granted.listIterator();
1: 
1: 
1: 				List waiting = control.getWaiting();
1: 				if (waiting != null)
1: 					waitingList = waiting.listIterator();
1: 
1: 				nextLock = control.getFirstGrant();
1: 				if (nextLock == null) {
1: 
1: 					nextLock = getNextLock(control);
1: 				}
1: 				
1: 			} else {
1: 				nextLock = getNextLock(control);
1: 			}
1: 
1: 
1: 			if (nextLock != null)
1: 				return true;
1: 
1: 			control = null;
1: 		}
1: 	}
1: 
1: 	private Latch getNextLock(Control control) {
1: 		Latch lock = null;
0: //System.out.println("next lock ");
1: 		if (grantedList != null) {
1: 			if (grantedList.hasNext()) {
0: 				lock = (Lock) grantedList.next();
1: 			}
1: 			else
1: 				grantedList = null;
1: 		}
1: 
1: 		if (lock == null) {
1: 			if (waitingList != null) {
1: 				if (waitingList.hasNext()) {
0: 					lock = (Lock) waitingList.next();
1: 				}
1: 				else
1: 					waitingList = null;
1: 			}
1: 		}
1: 
1: 		return lock;
1: 	}
1: 
1: 	public Object nextElement() {
1: 
1: 		if (!hasMoreElements())
1: 			throw new NoSuchElementException();
1: 
1: 		Latch ret = nextLock;
1: 
1: 		nextLock = null;
1: 		return ret;
1: 	}
1: }
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.locks;
0: 
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import java.util.Hashtable;
0: import java.util.Vector;
0: import java.util.Enumeration;
0: import java.util.NoSuchElementException;
0: 
0: import java.util.ListIterator;
0: import java.util.List;
0: 
0: /**
0: 	This provides an Enumeration of Latch's
0: 	from a clone of the lock table. A Latch is badly named,
0: 	it represents lock information.
0:  */
0: class LockTableVTI implements Enumeration
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	// the clonedLockTable temporarily holds a copy of the lock table.
0: 	//
0: 	// The copy is necessary because the real lock manager needs to be single
0: 	// threaded while a snap shot is made.  After the copy is made, it can take
0: 	// its time digesting the information without blocking the real lock
0: 	// manager.
0: 
0: 	private final LockSet clonedLockTable;
0: 	private final Enumeration outerControl;
0: 	private Control control;
0: 	private ListIterator grantedList;
0: 	private ListIterator waitingList;
0: 	private Latch nextLock;
0: 
0: 	LockTableVTI(LockSet clonedLockTable)
0: 	{
0: 		this.clonedLockTable = clonedLockTable;
0: 
0: 		outerControl = clonedLockTable.elements();
0: 	}
0: 
0: 
0: 	public boolean hasMoreElements() {
0: 
0: 		if (nextLock != null)
0: 			return true;
0: 
0: 		for (;;) {
0: 
0: 			if (control == null) {
0: 				if (!outerControl.hasMoreElements())
0: 					return false;
0: //System.out.println("new control lock ");
0: 
0: 				control = (Control) outerControl.nextElement();
0: 
0: 				List granted = control.getGranted();
0: 				if (granted != null)
0: 					grantedList = granted.listIterator();
0: 
0: 
0: 				List waiting = control.getWaiting();
0: 				if (waiting != null)
0: 					waitingList = waiting.listIterator();
0: 
0: 				nextLock = control.getFirstGrant();
0: 				if (nextLock == null) {
0: 
0: 					nextLock = getNextLock(control);
0: 				}
0: 				
0: 			} else {
0: 				nextLock = getNextLock(control);
0: 			}
0: 
0: 
0: 			if (nextLock != null)
0: 				return true;
0: 
0: 			control = null;
0: 		}
0: 	}
0: 
0: 	private Latch getNextLock(Control control) {
0: 		Latch lock = null;
0: //System.out.println("next lock ");
0: 		if (grantedList != null) {
0: 			if (grantedList.hasNext()) {
0: 				lock = (Lock) grantedList.next();
0: 			}
0: 			else
0: 				grantedList = null;
0: 		}
0: 
0: 		if (lock == null) {
0: 			if (waitingList != null) {
0: 				if (waitingList.hasNext()) {
0: 					lock = (Lock) waitingList.next();
0: 				}
0: 				else
0: 					waitingList = null;
0: 			}
0: 		}
0: 
0: 		return lock;
0: 	}
0: 
0: 	public Object nextElement() {
0: 
0: 		if (!hasMoreElements())
0: 			throw new NoSuchElementException();
0: 
0: 		Latch ret = nextLock;
0: 
0: 		nextLock = null;
0: 		return ret;
0: 	}
0: }
0: 
0: 
0: 
============================================================================