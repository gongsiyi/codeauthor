1:7e79830: /*
1:7e79830: 
1:7e79830:    Derby - Class org.apache.derby.iapi.tools.ToolUtils
1:7e79830: 
1:7e79830:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7e79830:    contributor license agreements.  See the NOTICE file distributed with
1:7e79830:    this work for additional information regarding copyright ownership.
1:7e79830:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7e79830:    (the "License"); you may not use this file except in compliance with
1:7e79830:    the License.  You may obtain a copy of the License at
1:7e79830: 
1:7e79830:       http://www.apache.org/licenses/LICENSE-2.0
1:7e79830: 
1:7e79830:    Unless required by applicable law or agreed to in writing, software
1:7e79830:    distributed under the License is distributed on an "AS IS" BASIS,
1:7e79830:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7e79830:    See the License for the specific language governing permissions and
1:7e79830:    limitations under the License.
1:7e79830: 
1:7e79830:  */
1:7e79830: 
1:7e79830: package org.apache.derby.iapi.tools;
1:7e79830: 
1:7e79830: public  abstract    class   ToolUtils
1:7e79830: {
1:7e79830: 	///////////////////////////////////////////////////////////////////
1:7e79830: 	//
1:7e79830: 	// Methods to copy arrays. We'd like to use java.util.copyOf(), but
1:7e79830:     // we have to run on Java 5. The same methods also appear in
1:7e79830:     // org.apache.derby.iapi.services.io.ArrayUtil. They are repeated here
1:7e79830:     // in order to avoid sealing issues.
1:7e79830: 	//
1:7e79830: 	///////////////////////////////////////////////////////////////////
1:7e79830: 
1:7e79830:     /** Copy an array of objects; the original array could be null */
1:7e79830:     public  static  Object[]    copy( Object[] original )
1:7e79830:     {
1:7e79830:         return (original == null) ? null : (Object[]) original.clone();
1:7e79830:     }
1:7e79830: 
1:7e79830:     /** Copy a (possibly null) array of strings */
1:7e79830:     public  static  String[]    copy( String[] original )
1:7e79830:     {
1:7e79830:         return (original == null) ? null : (String[]) original.clone();
1:7e79830:     }
1:7e79830: 
1:7e79830:     /** Copy a (possibly null) array of booleans */
1:7e79830:     public  static  boolean[]   copy( boolean[] original )
1:7e79830:     {
1:7e79830:         return (original == null) ? null : (boolean[]) original.clone();
1:7e79830:     }
1:7e79830: 
1:7e79830:     /** Copy a (possibly null) array of bytes */
1:7e79830:     public  static  byte[]   copy( byte[] original )
1:7e79830:     {
1:7e79830:         return (original == null) ? null : (byte[]) original.clone();
1:7e79830:     }
1:7e79830: 
1:7e79830:     /** Copy a (possibly null) array of ints */
1:7e79830:     public  static  int[]   copy( int[] original )
1:7e79830:     {
1:7e79830:         return (original == null) ? null : (int[]) original.clone();
1:7e79830:     }
1:7e79830: 
1:7e79830:     /** Copy a (possibly null) 2-dimensional array of ints */
1:7e79830:     public  static  int[][]   copy2( int[][] original )
1:7e79830:     {
1:7e79830:         if ( original == null ) { return null; }
1:7e79830: 
1:7e79830:         int[][] result = new int[ original.length ][];
1:7e79830:         for ( int i = 0; i < original.length; i++ )
1:7e79830:         {
1:7e79830:             result[ i ] = copy( original[ i ] );
1:7e79830:         }
1:7e79830:         
1:7e79830:         return result;
1:7e79830:     }
1:7e79830: 
1:7e79830: 
1:7e79830: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7e79830
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.tools.ToolUtils
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.tools;
1: 
1: public  abstract    class   ToolUtils
1: {
1: 	///////////////////////////////////////////////////////////////////
1: 	//
1: 	// Methods to copy arrays. We'd like to use java.util.copyOf(), but
1:     // we have to run on Java 5. The same methods also appear in
1:     // org.apache.derby.iapi.services.io.ArrayUtil. They are repeated here
1:     // in order to avoid sealing issues.
1: 	//
1: 	///////////////////////////////////////////////////////////////////
1: 
1:     /** Copy an array of objects; the original array could be null */
1:     public  static  Object[]    copy( Object[] original )
1:     {
1:         return (original == null) ? null : (Object[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) array of strings */
1:     public  static  String[]    copy( String[] original )
1:     {
1:         return (original == null) ? null : (String[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) array of booleans */
1:     public  static  boolean[]   copy( boolean[] original )
1:     {
1:         return (original == null) ? null : (boolean[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) array of bytes */
1:     public  static  byte[]   copy( byte[] original )
1:     {
1:         return (original == null) ? null : (byte[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) array of ints */
1:     public  static  int[]   copy( int[] original )
1:     {
1:         return (original == null) ? null : (int[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) 2-dimensional array of ints */
1:     public  static  int[][]   copy2( int[][] original )
1:     {
1:         if ( original == null ) { return null; }
1: 
1:         int[][] result = new int[ original.length ][];
1:         for ( int i = 0; i < original.length; i++ )
1:         {
1:             result[ i ] = copy( original[ i ] );
1:         }
1:         
1:         return result;
1:     }
1: 
1: 
1: }
============================================================================