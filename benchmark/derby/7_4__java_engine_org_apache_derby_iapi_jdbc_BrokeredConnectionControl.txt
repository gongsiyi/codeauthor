1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.jdbc.BrokeredConnectionControl
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.jdbc;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.sql.Statement;
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.CallableStatement;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Provides control over a BrokeredConnection
1:eac0369: */
1:eac0369: public interface BrokeredConnectionControl
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 		Return the real JDBC connection for the brokered connection.
1:eac0369: 	*/
1:da847a2: 	public EngineConnection	getRealConnection() throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Notify the control class that a SQLException was thrown
1:eac0369: 		during a call on one of the brokered connection's methods.
1:eac0369: 	*/
1:eac0369: 	public void notifyException(SQLException sqle);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Allow control over setting auto commit mode.
1:eac0369: 	*/
1:eac0369: 	public void checkAutoCommit(boolean autoCommit) throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Allow control over creating a Savepoint (JDBC 3.0)
1:eac0369: 	*/
1:eac0369: 	public void checkSavepoint() throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Allow control over calling rollback.
1:eac0369: 	*/
1:eac0369: 	public void checkRollback() throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Allow control over calling commit.
1:eac0369: 	*/
1:eac0369: 	public void checkCommit() throws SQLException;
1:eac0369: 
1:902041a:     /**
1:902041a:      * Check if the brokered connection can be closed.
1:902041a:      *
1:902041a:      * @throws SQLException if it is not allowed to call close on the brokered
1:902041a:      * connection
1:902041a:      */
1:902041a:     public void checkClose() throws SQLException;
1:902041a: 
1:eac0369: 	/**
1:eac0369: 		Can cursors be held across commits.
1:ce9d214:         @param downgrade true to downgrade the holdability,
1:ce9d214:         false to throw an exception.
1:eac0369: 	*/
1:ce9d214: 	public int checkHoldCursors(int holdability, boolean downgrade)
1:ce9d214:         throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:08cd3aa: 		Returns true if isolation level has been set using JDBC/SQL.
1:08cd3aa: 	*/
1:08cd3aa: 	public boolean isIsolationLevelSetUsingSQLorJDBC() throws SQLException;
1:08cd3aa: 	/**
1:08cd3aa: 		Reset the isolation level flag used to keep state in 
1:08cd3aa: 		BrokeredConnection. It will get set to true when isolation level 
1:08cd3aa: 		is set using JDBC/SQL. It will get reset to false at the start
1:08cd3aa: 		and the end of a global transaction.
1:08cd3aa: 	*/
1:08cd3aa: 	public void resetIsolationLevelFlag() throws SQLException;
1:08cd3aa: 
1:ad40eda:     /**
1:ad40eda:      * Is this a global transaction
1:ad40eda:      * @return true if this is a global XA transaction
1:ad40eda:      */
1:ad40eda:     public boolean isInGlobalTransaction();
1:ad40eda: 
1:08cd3aa: 	/**
1:eac0369: 		Close called on BrokeredConnection. If this call
1:eac0369: 		returns true then getRealConnection().close() will be called.
1:eac0369: 	*/
1:eac0369: 	public boolean closingConnection() throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Optionally wrap a Statement with another Statement.
1:eac0369: 	*/
1:eac0369: 	public Statement wrapStatement(Statement realStatement) throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Optionally wrap a PreparedStatement with another PreparedStatement.
1:eac0369: 	*/
1:eac0369: 	public PreparedStatement wrapStatement(PreparedStatement realStatement, String sql, Object generateKeys)  throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Optionally wrap a CallableStatement with an CallableStatement.
1:eac0369: 	*/
1:eac0369: 	public CallableStatement wrapStatement(CallableStatement realStatement, String sql) throws SQLException;
1:448ecb0:         
1:448ecb0:         /**
1:448ecb0:          * Close called on the associated PreparedStatement object
1:448ecb0:          * @param statement PreparedStatement object on which the close event 
1:448ecb0:          * occurred     
1:448ecb0:          */
1:448ecb0:         public void onStatementClose(PreparedStatement statement);
1:448ecb0:         
1:448ecb0:         /**
1:448ecb0:          * Error occurred on associated PreparedStatement object
1:448ecb0:          * @param statement PreparedStatement object on which the 
1:448ecb0:          * error occured
1:448ecb0:          * @param sqle      The SQLExeption that caused the error
1:448ecb0:          */
1:448ecb0:         public void onStatementErrorOccurred(PreparedStatement statement,SQLException sqle);
1:448ecb0:         
1:eac0369: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ad40eda
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Is this a global transaction
1:      * @return true if this is a global XA transaction
1:      */
1:     public boolean isInGlobalTransaction();
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:902041a
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check if the brokered connection can be closed.
1:      *
1:      * @throws SQLException if it is not allowed to call close on the brokered
1:      * connection
1:      */
1:     public void checkClose() throws SQLException;
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:448ecb0
/////////////////////////////////////////////////////////////////////////
1:         
1:         /**
1:          * Close called on the associated PreparedStatement object
1:          * @param statement PreparedStatement object on which the close event 
1:          * occurred     
1:          */
1:         public void onStatementClose(PreparedStatement statement);
1:         
1:         /**
1:          * Error occurred on associated PreparedStatement object
1:          * @param statement PreparedStatement object on which the 
1:          * error occured
1:          * @param sqle      The SQLExeption that caused the error
1:          */
1:         public void onStatementErrorOccurred(PreparedStatement statement,SQLException sqle);
1:         
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ce9d214
/////////////////////////////////////////////////////////////////////////
1:         @param downgrade true to downgrade the holdability,
1:         false to throw an exception.
1: 	public int checkHoldCursors(int holdability, boolean downgrade)
1:         throws SQLException;
commit:da847a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public EngineConnection	getRealConnection() throws SQLException;
/////////////////////////////////////////////////////////////////////////
commit:08cd3aa
/////////////////////////////////////////////////////////////////////////
1: 		Returns true if isolation level has been set using JDBC/SQL.
1: 	*/
1: 	public boolean isIsolationLevelSetUsingSQLorJDBC() throws SQLException;
1: 	/**
1: 		Reset the isolation level flag used to keep state in 
1: 		BrokeredConnection. It will get set to true when isolation level 
1: 		is set using JDBC/SQL. It will get reset to false at the start
1: 		and the end of a global transaction.
1: 	*/
1: 	public void resetIsolationLevelFlag() throws SQLException;
1: 
1: 	/**
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.jdbc.BrokeredConnectionControl
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.jdbc;
1: 
0: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.CallableStatement;
1: 
1: /**
1: 	Provides control over a BrokeredConnection
1: */
1: public interface BrokeredConnectionControl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 	/**
1: 		Return the real JDBC connection for the brokered connection.
1: 	*/
0: 	public Connection	getRealConnection() throws SQLException;
1: 
1: 	/**
1: 		Notify the control class that a SQLException was thrown
1: 		during a call on one of the brokered connection's methods.
1: 	*/
1: 	public void notifyException(SQLException sqle);
1: 
1: 
1: 	/**
1: 		Allow control over setting auto commit mode.
1: 	*/
1: 	public void checkAutoCommit(boolean autoCommit) throws SQLException;
1: 
1: 	/**
1: 		Allow control over creating a Savepoint (JDBC 3.0)
1: 	*/
1: 	public void checkSavepoint() throws SQLException;
1: 
1: 	/**
1: 		Allow control over calling rollback.
1: 	*/
1: 	public void checkRollback() throws SQLException;
1: 
1: 	/**
1: 		Allow control over calling commit.
1: 	*/
1: 	public void checkCommit() throws SQLException;
1: 
1: 	/**
1: 		Can cursors be held across commits.
1: 	*/
0: 	public void checkHoldCursors(int holdability) throws SQLException;
1: 
1: 	/**
1: 		Close called on BrokeredConnection. If this call
1: 		returns true then getRealConnection().close() will be called.
1: 	*/
1: 	public boolean closingConnection() throws SQLException;
1: 
1: 	/**
1: 		Optionally wrap a Statement with another Statement.
1: 	*/
1: 	public Statement wrapStatement(Statement realStatement) throws SQLException;
1: 
1: 	/**
1: 		Optionally wrap a PreparedStatement with another PreparedStatement.
1: 	*/
1: 	public PreparedStatement wrapStatement(PreparedStatement realStatement, String sql, Object generateKeys)  throws SQLException;
1: 
1: 	/**
1: 		Optionally wrap a CallableStatement with an CallableStatement.
1: 	*/
1: 	public CallableStatement wrapStatement(CallableStatement realStatement, String sql) throws SQLException;
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4383496
/////////////////////////////////////////////////////////////////////////
0: 
0: 	/** Set drdaID of underlying connection 
0: 	 * @param drdaID - drdaId of connection
0: 	 */
0: 	public void setDrdaID(String drdaID);	
0: 
0: 	/**
0: 	 *  Set the internal isolation level to use for preparing statements.
0: 	 *  used for Network Server
0: 	 *  @param level - isolation level for prepared statements 
0: 	 */
0: 	public void setPrepareIsolation(int level) throws SQLException;
0: 
0: 	/**
0: 	 *  Get the internal isolation level to use for preparing statements.
0: 	 *  @return prepare isolation level
0: 	 */
0: 	public int getPrepareIsolation() throws SQLException;
0: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.jdbc;
0: 
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.CallableStatement;
0: 
0: /**
0: 	Provides control over a BrokeredConnection
0: */
0: public interface BrokeredConnectionControl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	/**
0: 		Return the real JDBC connection for the brokered connection.
0: 	*/
0: 	public Connection	getRealConnection() throws SQLException;
0: 
0: 	/**
0: 		Notify the control class that a SQLException was thrown
0: 		during a call on one of the brokered connection's methods.
0: 	*/
0: 	public void notifyException(SQLException sqle);
0: 
0: 
0: 	/**
0: 		Allow control over setting auto commit mode.
0: 	*/
0: 	public void checkAutoCommit(boolean autoCommit) throws SQLException;
0: 
0: 	/**
0: 		Allow control over creating a Savepoint (JDBC 3.0)
0: 	*/
0: 	public void checkSavepoint() throws SQLException;
0: 
0: 	/**
0: 		Allow control over calling rollback.
0: 	*/
0: 	public void checkRollback() throws SQLException;
0: 
0: 	/**
0: 		Allow control over calling commit.
0: 	*/
0: 	public void checkCommit() throws SQLException;
0: 
0: 	/**
0: 		Can cursors be held across commits.
0: 	*/
0: 	public void checkHoldCursors(int holdability) throws SQLException;
0: 
0: 	/**
0: 		Close called on BrokeredConnection. If this call
0: 		returns true then getRealConnection().close() will be called.
0: 	*/
0: 	public boolean closingConnection() throws SQLException;
0: 
0: 	/**
0: 		Optionally wrap a Statement with another Statement.
0: 	*/
0: 	public Statement wrapStatement(Statement realStatement) throws SQLException;
0: 
0: 	/**
0: 		Optionally wrap a PreparedStatement with another PreparedStatement.
0: 	*/
0: 	public PreparedStatement wrapStatement(PreparedStatement realStatement, String sql, Object generateKeys)  throws SQLException;
0: 
0: 	/**
0: 		Optionally wrap a CallableStatement with an CallableStatement.
0: 	*/
0: 	public CallableStatement wrapStatement(CallableStatement realStatement, String sql) throws SQLException;
0: }
============================================================================