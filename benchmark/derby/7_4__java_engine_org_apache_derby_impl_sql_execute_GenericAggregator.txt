2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.GenericAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:4469400: import java.lang.reflect.Constructor;
1:4469400: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:354870e: import org.apache.derby.iapi.services.io.Storable;
1:354870e: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:354870e: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:354870e: import org.apache.derby.iapi.sql.execute.ExecRow;
1:354870e: import org.apache.derby.iapi.types.DataValueDescriptor;
1:354870e: import org.apache.derby.iapi.types.UserDataValue;
2:eac0369: /**
1:eac0369:  * Adaptor that sits between execution layer and aggregates.
1:eac0369:  *
1:eac0369:  */
1:eac0369: class GenericAggregator 
4:eac0369: {
1:354870e: 	private final AggregatorInfo			aggInfo;
1:eac0369: 	int						aggregatorColumnId;
1:eac0369: 	private int						inputColumnId;
1:eac0369: 	private int						resultColumnId;
1:eac0369: 
1:eac0369: 	private final ClassFactory		cf;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** We cache an aggregator to speed up
1:eac0369: 	** the instantiation of lots of aggregators.
1:eac0369: 	*/
1:eac0369: 	private ExecAggregator		cachedAggregator;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor:
1:eac0369: 	 *
1:eac0369: 	 * @param aggInfo 	information about the user aggregate
1:eac0369: 	 * @param cf		the class factory. 
1:eac0369: 	 */
1:eac0369: 	GenericAggregator
1:eac0369: 	(
1:eac0369: 		AggregatorInfo	aggInfo, 
1:eac0369: 		ClassFactory	cf
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		this.aggInfo = aggInfo;
1:eac0369: 		aggregatorColumnId = aggInfo.getAggregatorColNum();
1:eac0369: 		inputColumnId = aggInfo.getInputColNum();
1:eac0369: 		resultColumnId = aggInfo.getOutputColNum();
1:eac0369: 		this.cf = cf;
4:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Initialize the aggregator
1:eac0369: 	 *
1:eac0369: 	 * @param	row 	the row with the aggregator to be initialized
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException  on error
1:eac0369: 	 */
1:eac0369: 	void initialize(ExecRow row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(row != null, "row is null");
1:eac0369: 		}
1:eac0369: 
1:45075cc: 		UserDataValue aggregatorColumn = (UserDataValue) row.getColumn(aggregatorColumnId + 1);
1:eac0369: 
1:45075cc: 		ExecAggregator ua = (ExecAggregator) aggregatorColumn.getObject();
1:eac0369: 		if (ua == null)
1:eac0369: 		{
1:eac0369: 			ua = getAggregatorInstance();
1:eac0369: 			aggregatorColumn.setValue(ua);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Accumulate the aggregate results.  This is the
1:eac0369: 	 * guts of the aggregation.  We will call the user aggregate
1:eac0369: 	 * on itself to do the aggregation.
1:eac0369: 	 *
1:eac0369: 	 * @param	inputRow 	the row with the input colum
1:eac0369: 	 * @param	accumulateRow 	the row with the aggregator 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException  on error
1:eac0369: 	 */
1:eac0369: 	void accumulate(ExecRow	inputRow, 
1:eac0369: 							ExecRow	accumulateRow)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor	inputColumn = null;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), "bad accumulate call");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor aggregatorColumn = accumulateRow.getColumn(aggregatorColumnId + 1);
1:eac0369: 
1:eac0369: 		inputColumn = inputRow.getColumn(inputColumnId + 1);
1:eac0369: 
1:eac0369: 		accumulate(inputColumn, aggregatorColumn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Accumulate the aggregate results.  This is the
1:eac0369: 	 * guts of the aggregation.  We will call the user aggregate
1:eac0369: 	 * on itself to do the aggregation.
1:eac0369: 	 *
1:eac0369: 	 * @param	inputRow 	the row with the input colum
1:eac0369: 	 * @param	accumulateRow 	the row with the aggregator 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException  on error
1:eac0369: 	 */
1:eac0369: 	void accumulate(Object[]	inputRow, 
1:eac0369: 							Object[]	accumulateRow)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor	inputColumn = null;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), "bad accumulate call");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor aggregatorColumn = (DataValueDescriptor) accumulateRow[aggregatorColumnId];
1:eac0369: 		inputColumn = (DataValueDescriptor) inputRow[inputColumnId];
1:eac0369: 
1:eac0369: 		accumulate(inputColumn, aggregatorColumn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Accumulate the aggregate results.  This is the
1:eac0369: 	 * guts of the aggregation.  We will call the user aggregate
1:eac0369: 	 * on itself to do the aggregation.
1:eac0369: 	 *
1:eac0369: 	 * @param	inputColumn 
1:eac0369: 	 * @param	aggregatorColumn
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException  on error
1:eac0369: 	 */
1:eac0369: 	void accumulate(DataValueDescriptor	inputColumn, 
1:eac0369: 							DataValueDescriptor	aggregatorColumn)
1:eac0369: 		throws StandardException
1:eac0369: 	{
2:eac0369: 		ExecAggregator		ua;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Just to be on the safe side, confirm that we actually
1:eac0369: 			** have a Aggregator in this column.
1:eac0369: 			*/
1:eac0369: 			if (!(aggregatorColumn instanceof UserDataValue))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("accumlator column is not a UserDataValue as "+
1:eac0369: 					"expected, it is a "+aggregatorColumn.getClass().getName());
1:eac0369: 			}
1:eac0369: 		}
2:eac0369: 		ua = (ExecAggregator) aggregatorColumn.getObject();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If we don't have an aggregator, then we have to
1:eac0369: 		** create one now.  This happens when the input result
1:eac0369: 		** set is null.
1:eac0369: 		*/
1:eac0369: 		if (ua == null)
1:eac0369: 		{
1:eac0369: 			ua = getAggregatorInstance();
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		ua.accumulate(inputColumn, this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Merge the aggregate results.  This is the
1:eac0369: 	 * guts of the aggregation.  We will call the user aggregate
1:eac0369: 	 * on itself to do the aggregation.
1:eac0369: 	 *
1:eac0369: 	 * @param	inputRow 	the row with the input colum
1:eac0369: 	 * @param	mergeRow 	the row with the aggregator 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException  on error
1:eac0369: 	 */
1:eac0369: 	void merge(ExecRow	inputRow, 
1:eac0369: 							ExecRow	mergeRow)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		DataValueDescriptor mergeColumn = mergeRow.getColumn(aggregatorColumnId + 1);
1:eac0369: 		DataValueDescriptor inputColumn = inputRow.getColumn(aggregatorColumnId + 1);
1:eac0369: 
1:eac0369: 		merge(inputColumn, mergeColumn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Merge the aggregate results.  This is the
1:eac0369: 	 * guts of the aggregation.  We will call the user aggregate
1:eac0369: 	 * on itself to do the aggregation.
1:eac0369: 	 *
1:eac0369: 	 * @param	inputRow 	the row with the input colum
1:eac0369: 	 * @param	mergeRow 	the row with the aggregator 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException  on error
1:eac0369: 	 */
1:eac0369: 	void merge(Object[]	inputRow, 
1:eac0369: 							Object[]	mergeRow)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor mergeColumn = (DataValueDescriptor) mergeRow[aggregatorColumnId];
1:eac0369: 		DataValueDescriptor inputColumn = (DataValueDescriptor) inputRow[aggregatorColumnId];
1:eac0369: 
1:eac0369: 		merge(inputColumn, mergeColumn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the results of the aggregation and put it
1:eac0369: 	 * in the result column.
1:eac0369: 	 *
1:eac0369: 	 * @param	row	the row with the result and the aggregator
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	boolean finish(ExecRow row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor outputColumn = row.getColumn(resultColumnId + 1);
1:eac0369: 		DataValueDescriptor aggregatorColumn = row.getColumn(aggregatorColumnId + 1);
1:eac0369: 		/*
1:eac0369: 		** Just to be on the safe side, confirm that we actually
1:eac0369: 		** have a Aggregator in aggregatorColumn.
1:eac0369: 		*/
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(aggregatorColumn != null, "aggregatorColumn is null");
1:eac0369: 			SanityManager.ASSERT(outputColumn != null, "otuputColumn is null");
1:eac0369: 			SanityManager.ASSERT(aggregatorColumn instanceof UserDataValue,
1:eac0369: 				"accumlator column is not a UserDataValue as expected");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ExecAggregator ua = (ExecAggregator) aggregatorColumn.getObject();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If we don't have an aggregator, then we have to
1:eac0369: 		** create one now.  This happens when the input result
1:eac0369: 		** set is null.
1:eac0369: 		*/
1:eac0369: 		if (ua == null)
1:eac0369: 		{
1:eac0369: 			ua = getAggregatorInstance();
1:eac0369: 		}	
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		**
1:2c6f0a2: 		** We are going to copy
1:eac0369: 		** then entire DataValueDescriptor into the result column.
1:eac0369: 		** We could call setValue(result.setObject()), but we
1:eac0369: 		** might loose state (e.g. SQLBit.getObject() returns a
1:eac0369: 		** byte[] which looses the precision of the bit.  
1:eac0369: 		**
1:eac0369: 		*/
1:2c6f0a2: 		
1:2c6f0a2: 		DataValueDescriptor result = ua.getResult();
1:eac0369: 		if (result == null)
1:eac0369: 			outputColumn.setToNull();
1:eac0369: 		else
1:eac0369: 			outputColumn.setValue(result);
1:eac0369: 
1:eac0369: 		return ua.didEliminateNulls();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a new instance of the aggregator and initialize it.
1:eac0369: 	 *
1:eac0369: 	 * @return an exec aggregator
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	ExecAggregator getAggregatorInstance()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ExecAggregator aggregatorInstance;
1:eac0369: 		if (cachedAggregator == null)
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:4469400: 				Class<?> aggregatorClass = cf.loadApplicationClass(aggInfo.getAggregatorClassName());
1:4469400:                 Constructor<?> constructor = aggregatorClass.getConstructor();
1:4469400: 				Object agg = constructor.newInstance();
1:eac0369: 				aggregatorInstance = (ExecAggregator)agg;
1:eac0369: 				cachedAggregator = aggregatorInstance;
1:c8603c4: 
1:c8603c4: 				aggregatorInstance.setup
1:c8603c4:                     (
1:c8603c4:                      cf,
1:c8603c4:                      aggInfo.getAggregateName(),
1:6cc0702:                      aggInfo.getResultDescription().getColumnInfo( 0 ).getType()
1:c8603c4:                      );
1:eac0369: 
1:eac0369: 			} catch (Exception e)
1:eac0369: 			{
1:eac0369: 				throw StandardException.unexpectedUserException(e);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			aggregatorInstance = cachedAggregator.newAggregator();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369: 		return aggregatorInstance;
1:eac0369: 	}
1:eac0369: 			
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the column id that is being aggregated
1:eac0369: 	 */
1:eac0369: 	int getColumnId()
1:eac0369: 	{
1:eac0369: 		// Every sort has to have at least one column.
1:eac0369: 		return aggregatorColumnId;
1:eac0369: 	}
1:eac0369: 
1:b5105f3: 	DataValueDescriptor getInputColumnValue(ExecRow row)
1:b5105f3: 	    throws StandardException
1:b5105f3: 	{
1:b5105f3: 	    return row.getColumn(inputColumnId + 1);
1:b5105f3: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Merge two partial aggregations.  This is how the
1:eac0369: 	 * sorter merges partial aggregates.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	void merge(Storable aggregatorColumnIn,
1:eac0369: 						Storable aggregatorColumnOut)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ExecAggregator	uaIn;
1:eac0369: 		ExecAggregator	uaOut;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Just to be on the safe side, confirm that we actually
1:eac0369: 			** have a Aggregator in this column.
1:eac0369: 			*/
1:eac0369: 			if (!(aggregatorColumnIn instanceof UserDataValue))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("aggregatorColumnOut column is not "+
1:eac0369: 					"a UserAggreator as expected, "+
1:eac0369: 					"it is a "+aggregatorColumnIn.getClass().getName());
1:eac0369: 			}
1:eac0369: 			if (!(aggregatorColumnOut instanceof UserDataValue))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("aggregatorColumnIn column is not"+
1:eac0369: 					" a UserAggreator as expected, "+
1:eac0369: 					"it is a "+aggregatorColumnOut.getClass().getName());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		uaIn = (ExecAggregator)(((UserDataValue) aggregatorColumnIn).getObject());
1:eac0369: 		uaOut = (ExecAggregator)(((UserDataValue) aggregatorColumnOut).getObject());
1:eac0369: 
1:eac0369: 		uaOut.merge(uaIn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// MISC
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////
1:eac0369: 	AggregatorInfo getAggregatorInfo()
1:eac0369: 	{
1:eac0369: 		return aggInfo;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
1: 
/////////////////////////////////////////////////////////////////////////
1: 				Class<?> aggregatorClass = cf.loadApplicationClass(aggInfo.getAggregatorClassName());
1:                 Constructor<?> constructor = aggregatorClass.getConstructor();
1: 				Object agg = constructor.newInstance();
commit:6cc0702
/////////////////////////////////////////////////////////////////////////
1:                      aggInfo.getResultDescription().getColumnInfo( 0 ).getType()
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: 
1: 				aggregatorInstance.setup
1:                     (
1:                      cf,
1:                      aggInfo.getAggregateName(),
0:                      aggInfo.getResultDescription().getColumnInfo()[ 0 ].getType()
1:                      );
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:b5105f3
/////////////////////////////////////////////////////////////////////////
1: 	DataValueDescriptor getInputColumnValue(ExecRow row)
1: 	    throws StandardException
1: 	{
1: 	    return row.getColumn(inputColumnId + 1);
1: 	}
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:354870e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.UserDataValue;
1: 	private final AggregatorInfo			aggInfo;
/////////////////////////////////////////////////////////////////////////
commit:45075cc
/////////////////////////////////////////////////////////////////////////
1: 		UserDataValue aggregatorColumn = (UserDataValue) row.getColumn(aggregatorColumnId + 1);
1: 		ExecAggregator ua = (ExecAggregator) aggregatorColumn.getObject();
commit:2c6f0a2
/////////////////////////////////////////////////////////////////////////
1: 		** We are going to copy
1: 		
1: 		DataValueDescriptor result = ua.getResult();
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.GenericAggregator
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.UserDataValue;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.sql.ResultDescription;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: import java.sql.Statement;
1: /**
1:  * Adaptor that sits between execution layer and aggregates.
1:  *
0:  * @author jamie
1:  */
1: class GenericAggregator 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	AggregatorInfo			aggInfo;
1: 	int						aggregatorColumnId;
1: 	private int						inputColumnId;
1: 	private int						resultColumnId;
0: 	private ResultDescription		inputColumnResultDescription;
1: 
0: 	private	ExecRow[]			rowArray;
0: 	private	TemporaryRowHolderResultSet execResultSet;
1: 	private final ClassFactory		cf;
1: 
1: 	/*
1: 	** We cache an aggregator to speed up
1: 	** the instantiation of lots of aggregators.
1: 	*/
1: 	private ExecAggregator		cachedAggregator;
1: 
1: 	/**
1: 	 * Constructor:
1: 	 *
1: 	 * @param aggInfo 	information about the user aggregate
0: 	 * @param jdbcFactory 	the jdbc factory, may be null if
0: 	 *		this is a system aggregate
1: 	 * @param cf		the class factory. 
1: 	 */
1: 	GenericAggregator
1: 	(
1: 		AggregatorInfo	aggInfo, 
1: 		ClassFactory	cf
1: 	)
1: 	{
1: 		this.aggInfo = aggInfo;
1: 		aggregatorColumnId = aggInfo.getAggregatorColNum();
1: 		inputColumnId = aggInfo.getInputColNum();
1: 		resultColumnId = aggInfo.getOutputColNum();
0: 		int[] colArray = new int[1];
0: 		inputColumnResultDescription = aggInfo.getResultDescription();
1: 		this.cf = cf;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Initialize the aggregator
1: 	 *
1: 	 * @param	row 	the row with the aggregator to be initialized
1: 	 *
1: 	 * @exception StandardException  on error
1: 	 */
1: 	void initialize(ExecRow row)
1: 		throws StandardException
1: 	{
1: 		ExecAggregator		ua;
0: 		UserDataValue	aggregatorColumn;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(row != null, "row is null");
1: 		}
1: 
0: 		aggregatorColumn = (UserDataValue) row.getColumn(aggregatorColumnId + 1);
1: 
1: 		ua = (ExecAggregator) aggregatorColumn.getObject();
1: 		if (ua == null)
1: 		{
1: 			ua = getAggregatorInstance();
1: 			aggregatorColumn.setValue(ua);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Accumulate the aggregate results.  This is the
1: 	 * guts of the aggregation.  We will call the user aggregate
1: 	 * on itself to do the aggregation.
1: 	 *
1: 	 * @param	inputRow 	the row with the input colum
1: 	 * @param	accumulateRow 	the row with the aggregator 
1: 	 *
1: 	 * @exception StandardException  on error
1: 	 */
1: 	void accumulate(ExecRow	inputRow, 
1: 							ExecRow	accumulateRow)
1: 		throws StandardException
1: 	{
1: 		DataValueDescriptor	inputColumn = null;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), "bad accumulate call");
1: 		}
1: 
1: 		DataValueDescriptor aggregatorColumn = accumulateRow.getColumn(aggregatorColumnId + 1);
1: 
1: 		inputColumn = inputRow.getColumn(inputColumnId + 1);
1: 
1: 		accumulate(inputColumn, aggregatorColumn);
1: 	}
1: 
1: 	/**
1: 	 * Accumulate the aggregate results.  This is the
1: 	 * guts of the aggregation.  We will call the user aggregate
1: 	 * on itself to do the aggregation.
1: 	 *
1: 	 * @param	inputRow 	the row with the input colum
1: 	 * @param	accumulateRow 	the row with the aggregator 
1: 	 *
1: 	 * @exception StandardException  on error
1: 	 */
1: 	void accumulate(Object[]	inputRow, 
1: 							Object[]	accumulateRow)
1: 		throws StandardException
1: 	{
1: 		DataValueDescriptor	inputColumn = null;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), "bad accumulate call");
1: 		}
1: 
1: 		DataValueDescriptor aggregatorColumn = (DataValueDescriptor) accumulateRow[aggregatorColumnId];
1: 		inputColumn = (DataValueDescriptor) inputRow[inputColumnId];
1: 
1: 		accumulate(inputColumn, aggregatorColumn);
1: 	}
1: 
1: 	/**
1: 	 * Accumulate the aggregate results.  This is the
1: 	 * guts of the aggregation.  We will call the user aggregate
1: 	 * on itself to do the aggregation.
1: 	 *
1: 	 * @param	inputColumn 
1: 	 * @param	aggregatorColumn
1: 	 *
1: 	 * @exception StandardException  on error
1: 	 */
1: 	void accumulate(DataValueDescriptor	inputColumn, 
1: 							DataValueDescriptor	aggregatorColumn)
1: 		throws StandardException
1: 	{
1: 		ExecAggregator		ua;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			/*
1: 			** Just to be on the safe side, confirm that we actually
1: 			** have a Aggregator in this column.
1: 			*/
1: 			if (!(aggregatorColumn instanceof UserDataValue))
1: 			{
1: 				SanityManager.THROWASSERT("accumlator column is not a UserDataValue as "+
1: 					"expected, it is a "+aggregatorColumn.getClass().getName());
1: 			}
1: 		}
1: 		ua = (ExecAggregator) aggregatorColumn.getObject();
1: 
1: 		/*
1: 		** If we don't have an aggregator, then we have to
1: 		** create one now.  This happens when the input result
1: 		** set is null.
1: 		*/
1: 		if (ua == null)
1: 		{
1: 			ua = getAggregatorInstance();
1: 		}
1: 	
1: 		ua.accumulate(inputColumn, this);
1: 	}
1: 
1: 	/**
1: 	 * Merge the aggregate results.  This is the
1: 	 * guts of the aggregation.  We will call the user aggregate
1: 	 * on itself to do the aggregation.
1: 	 *
1: 	 * @param	inputRow 	the row with the input colum
1: 	 * @param	mergeRow 	the row with the aggregator 
1: 	 *
1: 	 * @exception StandardException  on error
1: 	 */
1: 	void merge(ExecRow	inputRow, 
1: 							ExecRow	mergeRow)
1: 		throws StandardException
1: 	{
1: 
1: 		DataValueDescriptor mergeColumn = mergeRow.getColumn(aggregatorColumnId + 1);
1: 		DataValueDescriptor inputColumn = inputRow.getColumn(aggregatorColumnId + 1);
1: 
1: 		merge(inputColumn, mergeColumn);
1: 	}
1: 
1: 	/**
1: 	 * Merge the aggregate results.  This is the
1: 	 * guts of the aggregation.  We will call the user aggregate
1: 	 * on itself to do the aggregation.
1: 	 *
1: 	 * @param	inputRow 	the row with the input colum
1: 	 * @param	mergeRow 	the row with the aggregator 
1: 	 *
1: 	 * @exception StandardException  on error
1: 	 */
1: 	void merge(Object[]	inputRow, 
1: 							Object[]	mergeRow)
1: 		throws StandardException
1: 	{
1: 		DataValueDescriptor mergeColumn = (DataValueDescriptor) mergeRow[aggregatorColumnId];
1: 		DataValueDescriptor inputColumn = (DataValueDescriptor) inputRow[aggregatorColumnId];
1: 
1: 		merge(inputColumn, mergeColumn);
1: 	}
1: 
1: 	/**
1: 	 * Get the results of the aggregation and put it
1: 	 * in the result column.
1: 	 *
1: 	 * @param	row	the row with the result and the aggregator
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	boolean finish(ExecRow row)
1: 		throws StandardException
1: 	{
1: 		DataValueDescriptor outputColumn = row.getColumn(resultColumnId + 1);
1: 		DataValueDescriptor aggregatorColumn = row.getColumn(aggregatorColumnId + 1);
1: 		/*
1: 		** Just to be on the safe side, confirm that we actually
1: 		** have a Aggregator in aggregatorColumn.
1: 		*/
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(aggregatorColumn != null, "aggregatorColumn is null");
1: 			SanityManager.ASSERT(outputColumn != null, "otuputColumn is null");
1: 			SanityManager.ASSERT(aggregatorColumn instanceof UserDataValue,
1: 				"accumlator column is not a UserDataValue as expected");
1: 		}
1: 
1: 		ExecAggregator ua = (ExecAggregator) aggregatorColumn.getObject();
1: 
1: 		/*
1: 		** If we don't have an aggregator, then we have to
1: 		** create one now.  This happens when the input result
1: 		** set is null.
1: 		*/
1: 		if (ua == null)
1: 		{
1: 			ua = getAggregatorInstance();
1: 		}	
1: 
0: 		Object result = ua.getResult();
1: 
1: 		/*
0: 		** Handle setting the result.  If null, call setToNull.
1: 		**
0: 		** If we got a DataValueDescriptor then we are going to copy
1: 		** then entire DataValueDescriptor into the result column.
1: 		** We could call setValue(result.setObject()), but we
1: 		** might loose state (e.g. SQLBit.getObject() returns a
1: 		** byte[] which looses the precision of the bit.  
1: 		**
0: 		** On an object, just call setValue().
1: 		*/
1: 		if (result == null)
1: 		{
1: 			outputColumn.setToNull();
1: 		}
1: 		/*
0: 		** See above as to why we cannot do: 
0: 		**		outputColumn.setValue(result.getObject());	
1: 		*/
0: 		else if (result instanceof DataValueDescriptor)
1: 		{
0: 			row.setColumn(resultColumnId + 1, (DataValueDescriptor)result);
1: 		}
1: 		else
1: 		{
1: 			outputColumn.setValue(result);
1: 		}
1: 
1: 		return ua.didEliminateNulls();
1: 	}
1: 
1: 	/**
1: 	 * Get a new instance of the aggregator and initialize it.
1: 	 *
1: 	 * @return an exec aggregator
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	ExecAggregator getAggregatorInstance()
1: 		throws StandardException
1: 	{
1: 		ExecAggregator aggregatorInstance;
1: 		if (cachedAggregator == null)
1: 		{
1: 			try
1: 			{
0: 				Class aggregatorClass = cf.loadApplicationClass(aggInfo.getAggregatorClassName());
0: 				Object agg = aggregatorClass.newInstance();
1: 				aggregatorInstance = (ExecAggregator)agg;
1: 				cachedAggregator = aggregatorInstance;
0: 				aggregatorInstance.setup(aggInfo.getAggregateName());
1: 
1: 			} catch (Exception e)
1: 			{
1: 				throw StandardException.unexpectedUserException(e);
1: 			}
1: 		}
1: 		else
1: 		{
1: 			aggregatorInstance = cachedAggregator.newAggregator();
1: 		}
1: 
1: 
1: 		return aggregatorInstance;
1: 	}
1: 			
1: 	/////////////////////////////////////////////////////////////
1: 	//
1: 	/////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Return the column id that is being aggregated
1: 	 */
1: 	int getColumnId()
1: 	{
1: 		// Every sort has to have at least one column.
1: 		return aggregatorColumnId;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Merge two partial aggregations.  This is how the
1: 	 * sorter merges partial aggregates.
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	void merge(Storable aggregatorColumnIn,
1: 						Storable aggregatorColumnOut)
1: 		throws StandardException
1: 	{
1: 		ExecAggregator	uaIn;
1: 		ExecAggregator	uaOut;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			/*
1: 			** Just to be on the safe side, confirm that we actually
1: 			** have a Aggregator in this column.
1: 			*/
1: 			if (!(aggregatorColumnIn instanceof UserDataValue))
1: 			{
1: 				SanityManager.THROWASSERT("aggregatorColumnOut column is not "+
1: 					"a UserAggreator as expected, "+
1: 					"it is a "+aggregatorColumnIn.getClass().getName());
1: 			}
1: 			if (!(aggregatorColumnOut instanceof UserDataValue))
1: 			{
1: 				SanityManager.THROWASSERT("aggregatorColumnIn column is not"+
1: 					" a UserAggreator as expected, "+
1: 					"it is a "+aggregatorColumnOut.getClass().getName());
1: 			}
1: 		}
1: 		uaIn = (ExecAggregator)(((UserDataValue) aggregatorColumnIn).getObject());
1: 		uaOut = (ExecAggregator)(((UserDataValue) aggregatorColumnOut).getObject());
1: 
1: 		uaOut.merge(uaIn);
1: 	}
1: 
1: 	//////////////////////////////////////////////////////
1: 	//
1: 	// MISC
1: 	//
1: 	//////////////////////////////////////////////////////
1: 	AggregatorInfo getAggregatorInfo()
1: 	{
1: 		return aggInfo;
1: 	}
1: 
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.UserDataValue;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: import java.sql.Statement;
0: /**
0:  * Adaptor that sits between execution layer and aggregates.
0:  *
0:  * @author jamie
0:  */
0: class GenericAggregator 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	AggregatorInfo			aggInfo;
0: 	int						aggregatorColumnId;
0: 	private int						inputColumnId;
0: 	private int						resultColumnId;
0: 	private ResultDescription		inputColumnResultDescription;
0: 
0: 	private	ExecRow[]			rowArray;
0: 	private	TemporaryRowHolderResultSet execResultSet;
0: 	private final ClassFactory		cf;
0: 
0: 	/*
0: 	** We cache an aggregator to speed up
0: 	** the instantiation of lots of aggregators.
0: 	*/
0: 	private ExecAggregator		cachedAggregator;
0: 
0: 	/**
0: 	 * Constructor:
0: 	 *
0: 	 * @param aggInfo 	information about the user aggregate
0: 	 * @param jdbcFactory 	the jdbc factory, may be null if
0: 	 *		this is a system aggregate
0: 	 * @param cf		the class factory. 
0: 	 */
0: 	GenericAggregator
0: 	(
0: 		AggregatorInfo	aggInfo, 
0: 		ClassFactory	cf
0: 	)
0: 	{
0: 		this.aggInfo = aggInfo;
0: 		aggregatorColumnId = aggInfo.getAggregatorColNum();
0: 		inputColumnId = aggInfo.getInputColNum();
0: 		resultColumnId = aggInfo.getOutputColNum();
0: 		int[] colArray = new int[1];
0: 		inputColumnResultDescription = aggInfo.getResultDescription();
0: 		this.cf = cf;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Initialize the aggregator
0: 	 *
0: 	 * @param	row 	the row with the aggregator to be initialized
0: 	 *
0: 	 * @exception StandardException  on error
0: 	 */
0: 	void initialize(ExecRow row)
0: 		throws StandardException
0: 	{
0: 		ExecAggregator		ua;
0: 		UserDataValue	aggregatorColumn;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(row != null, "row is null");
0: 		}
0: 
0: 		aggregatorColumn = (UserDataValue) row.getColumn(aggregatorColumnId + 1);
0: 
0: 		ua = (ExecAggregator) aggregatorColumn.getObject();
0: 		if (ua == null)
0: 		{
0: 			ua = getAggregatorInstance();
0: 			aggregatorColumn.setValue(ua);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Accumulate the aggregate results.  This is the
0: 	 * guts of the aggregation.  We will call the user aggregate
0: 	 * on itself to do the aggregation.
0: 	 *
0: 	 * @param	inputRow 	the row with the input colum
0: 	 * @param	accumulateRow 	the row with the aggregator 
0: 	 *
0: 	 * @exception StandardException  on error
0: 	 */
0: 	void accumulate(ExecRow	inputRow, 
0: 							ExecRow	accumulateRow)
0: 		throws StandardException
0: 	{
0: 		DataValueDescriptor	inputColumn = null;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), "bad accumulate call");
0: 		}
0: 
0: 		DataValueDescriptor aggregatorColumn = accumulateRow.getColumn(aggregatorColumnId + 1);
0: 
0: 		inputColumn = inputRow.getColumn(inputColumnId + 1);
0: 
0: 		accumulate(inputColumn, aggregatorColumn);
0: 	}
0: 
0: 	/**
0: 	 * Accumulate the aggregate results.  This is the
0: 	 * guts of the aggregation.  We will call the user aggregate
0: 	 * on itself to do the aggregation.
0: 	 *
0: 	 * @param	inputRow 	the row with the input colum
0: 	 * @param	accumulateRow 	the row with the aggregator 
0: 	 *
0: 	 * @exception StandardException  on error
0: 	 */
0: 	void accumulate(Object[]	inputRow, 
0: 							Object[]	accumulateRow)
0: 		throws StandardException
0: 	{
0: 		DataValueDescriptor	inputColumn = null;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), "bad accumulate call");
0: 		}
0: 
0: 		DataValueDescriptor aggregatorColumn = (DataValueDescriptor) accumulateRow[aggregatorColumnId];
0: 		inputColumn = (DataValueDescriptor) inputRow[inputColumnId];
0: 
0: 		accumulate(inputColumn, aggregatorColumn);
0: 	}
0: 
0: 	/**
0: 	 * Accumulate the aggregate results.  This is the
0: 	 * guts of the aggregation.  We will call the user aggregate
0: 	 * on itself to do the aggregation.
0: 	 *
0: 	 * @param	inputColumn 
0: 	 * @param	aggregatorColumn
0: 	 *
0: 	 * @exception StandardException  on error
0: 	 */
0: 	void accumulate(DataValueDescriptor	inputColumn, 
0: 							DataValueDescriptor	aggregatorColumn)
0: 		throws StandardException
0: 	{
0: 		ExecAggregator		ua;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			/*
0: 			** Just to be on the safe side, confirm that we actually
0: 			** have a Aggregator in this column.
0: 			*/
0: 			if (!(aggregatorColumn instanceof UserDataValue))
0: 			{
0: 				SanityManager.THROWASSERT("accumlator column is not a UserDataValue as "+
0: 					"expected, it is a "+aggregatorColumn.getClass().getName());
0: 			}
0: 		}
0: 		ua = (ExecAggregator) aggregatorColumn.getObject();
0: 
0: 		/*
0: 		** If we don't have an aggregator, then we have to
0: 		** create one now.  This happens when the input result
0: 		** set is null.
0: 		*/
0: 		if (ua == null)
0: 		{
0: 			ua = getAggregatorInstance();
0: 		}
0: 	
0: 		ua.accumulate(inputColumn, this);
0: 	}
0: 
0: 	/**
0: 	 * Merge the aggregate results.  This is the
0: 	 * guts of the aggregation.  We will call the user aggregate
0: 	 * on itself to do the aggregation.
0: 	 *
0: 	 * @param	inputRow 	the row with the input colum
0: 	 * @param	mergeRow 	the row with the aggregator 
0: 	 *
0: 	 * @exception StandardException  on error
0: 	 */
0: 	void merge(ExecRow	inputRow, 
0: 							ExecRow	mergeRow)
0: 		throws StandardException
0: 	{
0: 
0: 		DataValueDescriptor mergeColumn = mergeRow.getColumn(aggregatorColumnId + 1);
0: 		DataValueDescriptor inputColumn = inputRow.getColumn(aggregatorColumnId + 1);
0: 
0: 		merge(inputColumn, mergeColumn);
0: 	}
0: 
0: 	/**
0: 	 * Merge the aggregate results.  This is the
0: 	 * guts of the aggregation.  We will call the user aggregate
0: 	 * on itself to do the aggregation.
0: 	 *
0: 	 * @param	inputRow 	the row with the input colum
0: 	 * @param	mergeRow 	the row with the aggregator 
0: 	 *
0: 	 * @exception StandardException  on error
0: 	 */
0: 	void merge(Object[]	inputRow, 
0: 							Object[]	mergeRow)
0: 		throws StandardException
0: 	{
0: 		DataValueDescriptor mergeColumn = (DataValueDescriptor) mergeRow[aggregatorColumnId];
0: 		DataValueDescriptor inputColumn = (DataValueDescriptor) inputRow[aggregatorColumnId];
0: 
0: 		merge(inputColumn, mergeColumn);
0: 	}
0: 
0: 	/**
0: 	 * Get the results of the aggregation and put it
0: 	 * in the result column.
0: 	 *
0: 	 * @param	row	the row with the result and the aggregator
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	boolean finish(ExecRow row)
0: 		throws StandardException
0: 	{
0: 		DataValueDescriptor outputColumn = row.getColumn(resultColumnId + 1);
0: 		DataValueDescriptor aggregatorColumn = row.getColumn(aggregatorColumnId + 1);
0: 		/*
0: 		** Just to be on the safe side, confirm that we actually
0: 		** have a Aggregator in aggregatorColumn.
0: 		*/
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(aggregatorColumn != null, "aggregatorColumn is null");
0: 			SanityManager.ASSERT(outputColumn != null, "otuputColumn is null");
0: 			SanityManager.ASSERT(aggregatorColumn instanceof UserDataValue,
0: 				"accumlator column is not a UserDataValue as expected");
0: 		}
0: 
0: 		ExecAggregator ua = (ExecAggregator) aggregatorColumn.getObject();
0: 
0: 		/*
0: 		** If we don't have an aggregator, then we have to
0: 		** create one now.  This happens when the input result
0: 		** set is null.
0: 		*/
0: 		if (ua == null)
0: 		{
0: 			ua = getAggregatorInstance();
0: 		}	
0: 
0: 		Object result = ua.getResult();
0: 
0: 		/*
0: 		** Handle setting the result.  If null, call setToNull.
0: 		**
0: 		** If we got a DataValueDescriptor then we are going to copy
0: 		** then entire DataValueDescriptor into the result column.
0: 		** We could call setValue(result.setObject()), but we
0: 		** might loose state (e.g. SQLBit.getObject() returns a
0: 		** byte[] which looses the precision of the bit.  
0: 		**
0: 		** On an object, just call setValue().
0: 		*/
0: 		if (result == null)
0: 		{
0: 			outputColumn.setToNull();
0: 		}
0: 		/*
0: 		** See above as to why we cannot do: 
0: 		**		outputColumn.setValue(result.getObject());	
0: 		*/
0: 		else if (result instanceof DataValueDescriptor)
0: 		{
0: 			row.setColumn(resultColumnId + 1, (DataValueDescriptor)result);
0: 		}
0: 		else
0: 		{
0: 			outputColumn.setValue(result);
0: 		}
0: 
0: 		return ua.didEliminateNulls();
0: 	}
0: 
0: 	/**
0: 	 * Get a new instance of the aggregator and initialize it.
0: 	 *
0: 	 * @return an exec aggregator
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	ExecAggregator getAggregatorInstance()
0: 		throws StandardException
0: 	{
0: 		ExecAggregator aggregatorInstance;
0: 		if (cachedAggregator == null)
0: 		{
0: 			try
0: 			{
0: 				Class aggregatorClass = cf.loadApplicationClass(aggInfo.getAggregatorClassName());
0: 				Object agg = aggregatorClass.newInstance();
0: 				aggregatorInstance = (ExecAggregator)agg;
0: 				cachedAggregator = aggregatorInstance;
0: 				aggregatorInstance.setup(aggInfo.getAggregateName());
0: 
0: 			} catch (Exception e)
0: 			{
0: 				throw StandardException.unexpectedUserException(e);
0: 			}
0: 		}
0: 		else
0: 		{
0: 			aggregatorInstance = cachedAggregator.newAggregator();
0: 		}
0: 
0: 
0: 		return aggregatorInstance;
0: 	}
0: 			
0: 	/////////////////////////////////////////////////////////////
0: 	//
0: 	/////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Return the column id that is being aggregated
0: 	 */
0: 	int getColumnId()
0: 	{
0: 		// Every sort has to have at least one column.
0: 		return aggregatorColumnId;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Merge two partial aggregations.  This is how the
0: 	 * sorter merges partial aggregates.
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void merge(Storable aggregatorColumnIn,
0: 						Storable aggregatorColumnOut)
0: 		throws StandardException
0: 	{
0: 		ExecAggregator	uaIn;
0: 		ExecAggregator	uaOut;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			/*
0: 			** Just to be on the safe side, confirm that we actually
0: 			** have a Aggregator in this column.
0: 			*/
0: 			if (!(aggregatorColumnIn instanceof UserDataValue))
0: 			{
0: 				SanityManager.THROWASSERT("aggregatorColumnOut column is not "+
0: 					"a UserAggreator as expected, "+
0: 					"it is a "+aggregatorColumnIn.getClass().getName());
0: 			}
0: 			if (!(aggregatorColumnOut instanceof UserDataValue))
0: 			{
0: 				SanityManager.THROWASSERT("aggregatorColumnIn column is not"+
0: 					" a UserAggreator as expected, "+
0: 					"it is a "+aggregatorColumnOut.getClass().getName());
0: 			}
0: 		}
0: 		uaIn = (ExecAggregator)(((UserDataValue) aggregatorColumnIn).getObject());
0: 		uaOut = (ExecAggregator)(((UserDataValue) aggregatorColumnOut).getObject());
0: 
0: 		uaOut.merge(uaIn);
0: 	}
0: 
0: 	//////////////////////////////////////////////////////
0: 	//
0: 	// MISC
0: 	//
0: 	//////////////////////////////////////////////////////
0: 	AggregatorInfo getAggregatorInfo()
0: 	{
0: 		return aggInfo;
0: 	}
0: 
0: 
0: }
============================================================================