1:33776ff: /*
2:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.StatementRequestInterface
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:69e3d06: import java.util.ArrayList;
1:33776ff: import org.apache.derby.client.am.ColumnMetaData;
1:70f7692: import org.apache.derby.client.am.Section;
1:70f7692: import org.apache.derby.client.am.SqlException;
1:33776ff: 
1:33776ff: // In general, all required data is passed.
1:33776ff: // In addition, Material Statement objects are passed for convenient access to any material statement caches.
1:33776ff: // Implementations of this interface should not dereference common layer Statement state, as it is passed in,
1:33776ff: // but may dereference material layer Statement state if necessary for performance.
1:33776ff: 
1:0326967: interface StatementRequestInterface {
1:70f7692:     public void writeExecuteImmediate(NetStatement materialStatement,
1:70f7692:                                       String sql,
1:70f7692:                                       Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public void writePrepareDescribeOutput(NetStatement materialStatement,
1:70f7692:                                            String sql,
1:70f7692:                                            Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public void writePrepare(NetStatement materialStatement,
1:70f7692:                              String sql,
1:70f7692:                              Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public void writeOpenQuery(NetStatement materialStatement,
1:70f7692:                                Section section,
1:70f7692:                                int fetchSize,
1:70f7692:                                int resultSetType) throws SqlException;
1:70f7692: 
1:70f7692:     public void writeExecute(NetPreparedStatement materialPreparedStatement,
1:70f7692:                              Section section,
1:b13b17c:                              ColumnMetaData parameterMetaData,
1:70f7692:                              Object[] inputs,
1:70f7692:                              int numInputColumns,
1:70f7692:                              boolean outputExpected,
1:70f7692:                              // This is a hint to the material layer that more write commands will follow.
1:70f7692:                              // It is ignored by the driver in all cases except when blob data is written,
1:70f7692:                              // in which case this boolean is used to optimize the implementation.
1:70f7692:                              // Otherwise we wouldn't be able to chain after blob data is sent.
1:70f7692:                              // If we could always chain a no-op DDM after every execute that writes blobs
1:70f7692:                              // then we could just always set the chaining flag to on for blob send data
1:70f7692:                              boolean chainedWritesFollowingSetLob) throws SqlException;
1:33776ff: 
1:33776ff: 
1:70f7692:     public void writeOpenQuery(NetPreparedStatement materialPreparedStatement,
1:70f7692:                                Section section,
1:70f7692:                                int fetchSize,
1:70f7692:                                int resultSetType,
1:70f7692:                                int numInputColumns,
1:70f7692:                                ColumnMetaData parameterMetaData,
1:70f7692:                                Object[] inputs) throws SqlException;
1:33776ff: 
1:70f7692:     public void writeDescribeInput(NetPreparedStatement materialPreparedStatement,
1:70f7692:                                    Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public void writeDescribeOutput(NetPreparedStatement materialPreparedStatement,
1:70f7692:                                     Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public void writeExecuteCall(NetStatement materialStatement,
1:70f7692:                                  boolean outputExpected,
1:70f7692:                                  String procedureName,
1:70f7692:                                  Section section,
1:70f7692:                                  int fetchSize,
1:70f7692:                                  boolean suppressResultSets, // set to true for batched calls
1:70f7692:                                  int resultSetType,
1:70f7692:                                  ColumnMetaData parameterMetaData,
1:70f7692:                                  Object[] inputs) throws SqlException;
1:33776ff: 
1:33776ff: 
1:69e3d06:     public void writeSetSpecialRegister(Section section, ArrayList sqlsttList)
1:69e3d06:             throws SqlException;
1:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: interface StatementRequestInterface {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     public void writeSetSpecialRegister(Section section, ArrayList sqlsttList)
1:             throws SqlException;
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1:                              ColumnMetaData parameterMetaData,
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:29c10e3
/////////////////////////////////////////////////////////////////////////
0:     public void writeSetSpecialRegister(Section section, java.util.ArrayList sqlsttList) throws SqlException;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.Section;
1: import org.apache.derby.client.am.SqlException;
0: public interface StatementRequestInterface {
1:     public void writeExecuteImmediate(NetStatement materialStatement,
1:                                       String sql,
1:                                       Section section) throws SqlException;
1:     public void writePrepareDescribeOutput(NetStatement materialStatement,
1:                                            String sql,
1:                                            Section section) throws SqlException;
1:     public void writePrepare(NetStatement materialStatement,
1:                              String sql,
1:                              Section section) throws SqlException;
1:     public void writeOpenQuery(NetStatement materialStatement,
1:                                Section section,
1:                                int fetchSize,
1:                                int resultSetType) throws SqlException;
1: 
1:     public void writeExecute(NetPreparedStatement materialPreparedStatement,
1:                              Section section,
0:                              org.apache.derby.client.am.ColumnMetaData parameterMetaData,
1:                              Object[] inputs,
1:                              int numInputColumns,
1:                              boolean outputExpected,
1:                              // This is a hint to the material layer that more write commands will follow.
1:                              // It is ignored by the driver in all cases except when blob data is written,
1:                              // in which case this boolean is used to optimize the implementation.
1:                              // Otherwise we wouldn't be able to chain after blob data is sent.
1:                              // If we could always chain a no-op DDM after every execute that writes blobs
1:                              // then we could just always set the chaining flag to on for blob send data
1:                              boolean chainedWritesFollowingSetLob) throws SqlException;
1:     public void writeOpenQuery(NetPreparedStatement materialPreparedStatement,
1:                                Section section,
1:                                int fetchSize,
1:                                int resultSetType,
1:                                int numInputColumns,
1:                                ColumnMetaData parameterMetaData,
1:                                Object[] inputs) throws SqlException;
1:     public void writeDescribeInput(NetPreparedStatement materialPreparedStatement,
1:                                    Section section) throws SqlException;
1:     public void writeDescribeOutput(NetPreparedStatement materialPreparedStatement,
1:                                     Section section) throws SqlException;
1:     public void writeExecuteCall(NetStatement materialStatement,
1:                                  boolean outputExpected,
1:                                  String procedureName,
1:                                  Section section,
1:                                  int fetchSize,
1:                                  boolean suppressResultSets, // set to true for batched calls
1:                                  int resultSetType,
1:                                  ColumnMetaData parameterMetaData,
1:                                  Object[] inputs) throws SqlException;
0:     public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException;
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.StatementRequestInterface
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
0: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.client.am.Section;
1: import org.apache.derby.client.am.ColumnMetaData;
1: 
1: // In general, all required data is passed.
1: // In addition, Material Statement objects are passed for convenient access to any material statement caches.
1: // Implementations of this interface should not dereference common layer Statement state, as it is passed in,
1: // but may dereference material layer Statement state if necessary for performance.
0: public interface StatementRequestInterface
0: {
0:   public void writeExecuteImmediate (NetStatement materialStatement,
0:                                      String sql,
0:                                      Section section) throws SqlException;
1: 
0:   public void writePrepareDescribeOutput (NetStatement materialStatement,
0: 					  String sql,
0: 					  Section section) throws SqlException;
1: 
0:   public void writePrepare (NetStatement materialStatement,
0: 			    String sql,
0: 			    Section section) throws SqlException;
1: 
0:   public void writeOpenQuery (NetStatement materialStatement,
0:                               Section section,
0:                               int fetchSize,
0:                               int resultSetType) throws SqlException;
1: 
0:   public void writeExecute (NetPreparedStatement materialPreparedStatement,
0:                             Section section,
0:                             org.apache.derby.client.am.ColumnMetaData parameterMetaData,
0:                             Object[] inputs,
0:                             int numInputColumns,
0:                             boolean outputExpected,
0:                             // This is a hint to the material layer that more write commands will follow.
0:                             // It is ignored by the driver in all cases except when blob data is written,
0:                             // in which case this boolean is used to optimize the implementation.
0:                             // Otherwise we wouldn't be able to chain after blob data is sent.
0:                             // If we could always chain a no-op DDM after every execute that writes blobs
0:                             // then we could just always set the chaining flag to on for blob send data
0:                             boolean chainedWritesFollowingSetLob) throws SqlException;
1: 
1: 
0:   public void writeOpenQuery (NetPreparedStatement materialPreparedStatement,
0:                               Section section,
0:                               int fetchSize,
0:                               int resultSetType,
0:                               int numInputColumns,
0:                               ColumnMetaData parameterMetaData,
0:                               Object[] inputs) throws SqlException;
1: 
0:   public void writeDescribeInput (NetPreparedStatement materialPreparedStatement,
0: 				  Section section) throws SqlException;
1: 
0:   public void writeDescribeOutput (NetPreparedStatement materialPreparedStatement,
0: 				   Section section) throws SqlException;
1: 
0:   public void writeExecuteCall (NetStatement materialStatement,
0: 				boolean outputExpected,
0:                                 String procedureName,
0:                                 Section section,
0:                                 int fetchSize,
0:                                 boolean suppressResultSets, // set to true for batched calls
0:                                 int resultSetType,
0:                                 ColumnMetaData parameterMetaData,
0:                                 Object[] inputs) throws SqlException;
1: 
1: 
0:   public void writeSetSpecialRegister (java.util.ArrayList sqlsttList) throws SqlException;
1: }
============================================================================