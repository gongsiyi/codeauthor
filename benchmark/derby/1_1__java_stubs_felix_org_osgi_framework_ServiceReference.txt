1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceReference.java,v 1.20 2007/02/21 16:49:05 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A reference to a service.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The Framework returns <code>ServiceReference</code> objects from the
1:a8b6921:  * <code>BundleContext.getServiceReference</code> and
1:a8b6921:  * <code>BundleContext.getServiceReferences</code> methods.
1:a8b6921:  * <p>
1:a8b6921:  * A <code>ServiceReference</code> object may be shared between bundles and
1:a8b6921:  * can be used to examine the properties of the service and to get the service
1:a8b6921:  * object.
1:a8b6921:  * <p>
1:a8b6921:  * Every service registered in the Framework has a unique
1:a8b6921:  * <code>ServiceRegistration</code> object and may have multiple, distinct
1:a8b6921:  * <code>ServiceReference</code> objects referring to it.
1:a8b6921:  * <code>ServiceReference</code> objects associated with a
1:a8b6921:  * <code>ServiceRegistration</code> object have the same <code>hashCode</code>
1:a8b6921:  * and are considered equal (more specifically, their <code>equals()</code>
1:a8b6921:  * method will return <code>true</code> when compared).
1:a8b6921:  * <p>
1:a8b6921:  * If the same service object is registered multiple times,
1:a8b6921:  * <code>ServiceReference</code> objects associated with different
1:a8b6921:  * <code>ServiceRegistration</code> objects are not equal.
1:a8b6921:  * 
1:a8b6921:  * @see BundleContext#getServiceReference
1:a8b6921:  * @see BundleContext#getServiceReferences
1:a8b6921:  * @see BundleContext#getService
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.20 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface ServiceReference extends Comparable {
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the property value to which the specified property key is mapped
1:a8b6921: 	 * in the properties <code>Dictionary</code> object of the service
1:a8b6921: 	 * referenced by this <code>ServiceReference</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Property keys are case-insensitive.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method must continue to return property values after the service has
1:a8b6921: 	 * been unregistered. This is so references to unregistered services (for
1:a8b6921: 	 * example, <code>ServiceReference</code> objects stored in the log) can
1:a8b6921: 	 * still be interrogated.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param key The property key.
1:a8b6921: 	 * @return The property value to which the key is mapped; <code>null</code>
1:a8b6921: 	 *         if there is no property named after the key.
1:a8b6921: 	 */
1:a8b6921: 	public Object getProperty(String key);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns an array of the keys in the properties <code>Dictionary</code>
1:a8b6921: 	 * object of the service referenced by this <code>ServiceReference</code>
1:a8b6921: 	 * object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method will continue to return the keys after the service has been
1:a8b6921: 	 * unregistered. This is so references to unregistered services (for
1:a8b6921: 	 * example, <code>ServiceReference</code> objects stored in the log) can
1:a8b6921: 	 * still be interrogated.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method is <i>case-preserving </i>; this means that every key in the
1:a8b6921: 	 * returned array must have the same case as the corresponding key in the
1:a8b6921: 	 * properties <code>Dictionary</code> that was passed to the
1:a8b6921: 	 * {@link BundleContext#registerService(String[],Object,java.util.Dictionary)}
1:a8b6921: 	 * or {@link ServiceRegistration#setProperties} methods.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return An array of property keys.
1:a8b6921: 	 */
1:a8b6921: 	public String[] getPropertyKeys();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the bundle that registered the service referenced by this
1:a8b6921: 	 * <code>ServiceReference</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method must return <code>null</code> when the service has been
1:a8b6921: 	 * unregistered. This can be used to determine if the service has been
1:a8b6921: 	 * unregistered.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The bundle that registered the service referenced by this
1:a8b6921: 	 *         <code>ServiceReference</code> object; <code>null</code> if
1:a8b6921: 	 *         that service has already been unregistered.
1:a8b6921: 	 * @see BundleContext#registerService(String[],Object,java.util.Dictionary)
1:a8b6921: 	 */
1:a8b6921: 	public Bundle getBundle();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the bundles that are using the service referenced by this
1:a8b6921: 	 * <code>ServiceReference</code> object. Specifically, this method returns
1:a8b6921: 	 * the bundles whose usage count for that service is greater than zero.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return An array of bundles whose usage count for the service referenced
1:a8b6921: 	 *         by this <code>ServiceReference</code> object is greater than
1:a8b6921: 	 *         zero; <code>null</code> if no bundles are currently using that
1:a8b6921: 	 *         service.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.1
1:a8b6921: 	 */
1:a8b6921: 	public Bundle[] getUsingBundles();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Tests if the bundle that registered the service referenced by this
1:a8b6921: 	 * <code>ServiceReference</code> and the specified bundle use the same
1:a8b6921: 	 * source for the package of the specified class name.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method performs the following checks:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>Get the package name from the specified class name.</li>
1:a8b6921: 	 * <li>For the bundle that registered the service referenced by this
1:a8b6921: 	 * <code>ServiceReference</code> (registrant bundle); find the source for
1:a8b6921: 	 * the package. If no source is found then return <code>true</code> if the
1:a8b6921: 	 * registrant bundle is equal to the specified bundle; otherwise return
1:a8b6921: 	 * <code>false</code>.</li>
1:a8b6921: 	 * <li>If the package source of the registrant bundle is equal to the
1:a8b6921: 	 * package source of the specified bundle then return <code>true</code>;
1:a8b6921: 	 * otherwise return <code>false</code>.</li>
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param bundle The <code>Bundle</code> object to check.
1:a8b6921: 	 * @param className The class name to check.
1:a8b6921: 	 * @return <code>true</code> if the bundle which registered the service
1:a8b6921: 	 *         referenced by this <code>ServiceReference</code> and the
1:a8b6921: 	 *         specified bundle use the same source for the package of the
1:a8b6921: 	 *         specified class name. Otherwise <code>false</code> is returned.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public boolean isAssignableTo(Bundle bundle, String className);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Compares this <code>ServiceReference</code> with the specified
1:a8b6921: 	 * <code>ServiceReference</code> for order.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If this <code>ServiceReference</code> and the specified
1:a8b6921: 	 * <code>ServiceReference</code> have the same
1:a8b6921: 	 * {@link Constants#SERVICE_ID service id} they are equal. This
1:a8b6921: 	 * <code>ServiceReference</code> is less than the specified
1:a8b6921: 	 * <code>ServiceReference</code> if it has a lower
1:a8b6921: 	 * {@link Constants#SERVICE_RANKING service ranking} and greater if it has a
1:a8b6921: 	 * higher service ranking. Otherwise, if this <code>ServiceReference</code>
1:a8b6921: 	 * and the specified <code>ServiceReference</code> have the same
1:a8b6921: 	 * {@link Constants#SERVICE_RANKING service ranking}, this
1:a8b6921: 	 * <code>ServiceReference</code> is less than the specified
1:a8b6921: 	 * <code>ServiceReference</code> if it has a higher
1:a8b6921: 	 * {@link Constants#SERVICE_ID service id} and greater if it has a lower
1:a8b6921: 	 * service id.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param reference The <code>ServiceReference</code> to be compared.
1:a8b6921: 	 * @return Returns a negative integer, zero, or a positive integer if this
1:a8b6921: 	 *         <code>ServiceReference</code> is less than, equal to, or
1:a8b6921: 	 *         greater than the specified <code>ServiceReference</code>.
1:a8b6921: 	 * @since 1.4
1:a8b6921: 	 */
1:a8b6921: 	public int compareTo(Object reference);
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceReference.java,v 1.20 2007/02/21 16:49:05 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: /**
1:  * A reference to a service.
1:  * 
1:  * <p>
1:  * The Framework returns <code>ServiceReference</code> objects from the
1:  * <code>BundleContext.getServiceReference</code> and
1:  * <code>BundleContext.getServiceReferences</code> methods.
1:  * <p>
1:  * A <code>ServiceReference</code> object may be shared between bundles and
1:  * can be used to examine the properties of the service and to get the service
1:  * object.
1:  * <p>
1:  * Every service registered in the Framework has a unique
1:  * <code>ServiceRegistration</code> object and may have multiple, distinct
1:  * <code>ServiceReference</code> objects referring to it.
1:  * <code>ServiceReference</code> objects associated with a
1:  * <code>ServiceRegistration</code> object have the same <code>hashCode</code>
1:  * and are considered equal (more specifically, their <code>equals()</code>
1:  * method will return <code>true</code> when compared).
1:  * <p>
1:  * If the same service object is registered multiple times,
1:  * <code>ServiceReference</code> objects associated with different
1:  * <code>ServiceRegistration</code> objects are not equal.
1:  * 
1:  * @see BundleContext#getServiceReference
1:  * @see BundleContext#getServiceReferences
1:  * @see BundleContext#getService
1:  * @ThreadSafe
1:  * @version $Revision: 1.20 $
1:  */
1: 
1: public interface ServiceReference extends Comparable {
1: 	/**
1: 	 * Returns the property value to which the specified property key is mapped
1: 	 * in the properties <code>Dictionary</code> object of the service
1: 	 * referenced by this <code>ServiceReference</code> object.
1: 	 * 
1: 	 * <p>
1: 	 * Property keys are case-insensitive.
1: 	 * 
1: 	 * <p>
1: 	 * This method must continue to return property values after the service has
1: 	 * been unregistered. This is so references to unregistered services (for
1: 	 * example, <code>ServiceReference</code> objects stored in the log) can
1: 	 * still be interrogated.
1: 	 * 
1: 	 * @param key The property key.
1: 	 * @return The property value to which the key is mapped; <code>null</code>
1: 	 *         if there is no property named after the key.
1: 	 */
1: 	public Object getProperty(String key);
1: 
1: 	/**
1: 	 * Returns an array of the keys in the properties <code>Dictionary</code>
1: 	 * object of the service referenced by this <code>ServiceReference</code>
1: 	 * object.
1: 	 * 
1: 	 * <p>
1: 	 * This method will continue to return the keys after the service has been
1: 	 * unregistered. This is so references to unregistered services (for
1: 	 * example, <code>ServiceReference</code> objects stored in the log) can
1: 	 * still be interrogated.
1: 	 * 
1: 	 * <p>
1: 	 * This method is <i>case-preserving </i>; this means that every key in the
1: 	 * returned array must have the same case as the corresponding key in the
1: 	 * properties <code>Dictionary</code> that was passed to the
1: 	 * {@link BundleContext#registerService(String[],Object,java.util.Dictionary)}
1: 	 * or {@link ServiceRegistration#setProperties} methods.
1: 	 * 
1: 	 * @return An array of property keys.
1: 	 */
1: 	public String[] getPropertyKeys();
1: 
1: 	/**
1: 	 * Returns the bundle that registered the service referenced by this
1: 	 * <code>ServiceReference</code> object.
1: 	 * 
1: 	 * <p>
1: 	 * This method must return <code>null</code> when the service has been
1: 	 * unregistered. This can be used to determine if the service has been
1: 	 * unregistered.
1: 	 * 
1: 	 * @return The bundle that registered the service referenced by this
1: 	 *         <code>ServiceReference</code> object; <code>null</code> if
1: 	 *         that service has already been unregistered.
1: 	 * @see BundleContext#registerService(String[],Object,java.util.Dictionary)
1: 	 */
1: 	public Bundle getBundle();
1: 
1: 	/**
1: 	 * Returns the bundles that are using the service referenced by this
1: 	 * <code>ServiceReference</code> object. Specifically, this method returns
1: 	 * the bundles whose usage count for that service is greater than zero.
1: 	 * 
1: 	 * @return An array of bundles whose usage count for the service referenced
1: 	 *         by this <code>ServiceReference</code> object is greater than
1: 	 *         zero; <code>null</code> if no bundles are currently using that
1: 	 *         service.
1: 	 * 
1: 	 * @since 1.1
1: 	 */
1: 	public Bundle[] getUsingBundles();
1: 
1: 	/**
1: 	 * Tests if the bundle that registered the service referenced by this
1: 	 * <code>ServiceReference</code> and the specified bundle use the same
1: 	 * source for the package of the specified class name.
1: 	 * <p>
1: 	 * This method performs the following checks:
1: 	 * <ol>
1: 	 * <li>Get the package name from the specified class name.</li>
1: 	 * <li>For the bundle that registered the service referenced by this
1: 	 * <code>ServiceReference</code> (registrant bundle); find the source for
1: 	 * the package. If no source is found then return <code>true</code> if the
1: 	 * registrant bundle is equal to the specified bundle; otherwise return
1: 	 * <code>false</code>.</li>
1: 	 * <li>If the package source of the registrant bundle is equal to the
1: 	 * package source of the specified bundle then return <code>true</code>;
1: 	 * otherwise return <code>false</code>.</li>
1: 	 * </ol>
1: 	 * 
1: 	 * @param bundle The <code>Bundle</code> object to check.
1: 	 * @param className The class name to check.
1: 	 * @return <code>true</code> if the bundle which registered the service
1: 	 *         referenced by this <code>ServiceReference</code> and the
1: 	 *         specified bundle use the same source for the package of the
1: 	 *         specified class name. Otherwise <code>false</code> is returned.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public boolean isAssignableTo(Bundle bundle, String className);
1: 
1: 	/**
1: 	 * Compares this <code>ServiceReference</code> with the specified
1: 	 * <code>ServiceReference</code> for order.
1: 	 * 
1: 	 * <p>
1: 	 * If this <code>ServiceReference</code> and the specified
1: 	 * <code>ServiceReference</code> have the same
1: 	 * {@link Constants#SERVICE_ID service id} they are equal. This
1: 	 * <code>ServiceReference</code> is less than the specified
1: 	 * <code>ServiceReference</code> if it has a lower
1: 	 * {@link Constants#SERVICE_RANKING service ranking} and greater if it has a
1: 	 * higher service ranking. Otherwise, if this <code>ServiceReference</code>
1: 	 * and the specified <code>ServiceReference</code> have the same
1: 	 * {@link Constants#SERVICE_RANKING service ranking}, this
1: 	 * <code>ServiceReference</code> is less than the specified
1: 	 * <code>ServiceReference</code> if it has a higher
1: 	 * {@link Constants#SERVICE_ID service id} and greater if it has a lower
1: 	 * service id.
1: 	 * 
1: 	 * @param reference The <code>ServiceReference</code> to be compared.
1: 	 * @return Returns a negative integer, zero, or a positive integer if this
1: 	 *         <code>ServiceReference</code> is less than, equal to, or
1: 	 *         greater than the specified <code>ServiceReference</code>.
1: 	 * @since 1.4
1: 	 */
1: 	public int compareTo(Object reference);
1: }
============================================================================