1:ee0904b: /*
1:ee0904b:  
1:ee0904b:  Derby - Class org.apache.derbyTesting.system.langtest.utils.DataUtils
1:ee0904b:  
1:ee0904b:  Licensed to the Apache Software Foundation (ASF) under one or more
1:ee0904b:  contributor license agreements.  See the NOTICE file distributed with
1:ee0904b:  this work for additional information regarding copyright ownership.
1:ee0904b:  The ASF licenses this file to You under the Apache License, Version 2.0
1:ee0904b:  (the "License"); you may not use this file except in compliance with
1:ee0904b:  the License.  You may obtain a copy of the License at
1:ee0904b:  
1:ee0904b:  http://www.apache.org/licenses/LICENSE-2.0
1:ee0904b:  
1:ee0904b:  Unless required by applicable law or agreed to in writing, software
1:ee0904b:  distributed under the License is distributed on an "AS IS" BASIS,
1:ee0904b:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee0904b:  See the License for the specific language governing permissions and
1:ee0904b:  limitations under the License.
1:ee0904b:  
1:ee0904b:  */
1:ee0904b: package org.apache.derbyTesting.system.optimizer.utils;
1:ee0904b: 
1:ee0904b: import java.sql.Connection;
1:ee0904b: import java.sql.PreparedStatement;
1:ee0904b: import java.sql.ResultSet;
1:ee0904b: import java.sql.SQLException;
1:ee0904b: import java.sql.Statement;
1:ee0904b: import java.sql.Timestamp;
1:ee0904b: 
1:ee0904b: import org.apache.derbyTesting.system.optimizer.StaticValues;
1:ee0904b: /**
1:ee0904b:  * 
1:ee0904b:  * Class DataUtils: Utility class to drop/create database objects and populate data
1:ee0904b:  *
1:ee0904b:  */
1:ee0904b: 
1:ee0904b: 
1:ee0904b: public class DataUtils {
1:2b0fe66: 	public static void dropObjects(Connection conn, boolean verbose) throws SQLException {
1:ee0904b: 		Statement stmt = null;
1:2b0fe66: 		if (verbose)
1:2b0fe66: 			System.out.println("Dropping existing Tables and Views...");
1:ee0904b: 		for (int i=0;i<TestViews.dropViews.size();i++){
1:ee0904b: 			try{
1:ee0904b: 				stmt = conn.createStatement();
1:ee0904b: 				stmt.executeUpdate((String)TestViews.dropViews.get(i));
1:ee0904b: 			}catch(SQLException sqe){
1:ee0904b: 				if(!sqe.getSQLState().equalsIgnoreCase("X0X05")){
1:ee0904b: 					throw sqe;
1:ee0904b: 				}
1:ee0904b: 			}
1:ee0904b: 		}
1:ee0904b: 		for (int i = 1; i <= StaticValues.NUM_OF_TABLES; i++) {
1:ee0904b: 			try {
1:ee0904b: 				String tableName = StaticValues.TABLE_NAME + i;
1:ee0904b: 				stmt = conn.createStatement();
1:ee0904b: 				stmt.execute(StaticValues.DROP_TABLE+ tableName);
1:ee0904b: 				stmt.close();
1:ee0904b: 			} catch (SQLException sqe) {
1:ee0904b: 				if (!sqe.getSQLState().equalsIgnoreCase("42Y55")) {
1:ee0904b: 					throw sqe;
1:ee0904b: 				} 
1:ee0904b: 			}
1:ee0904b: 		}// end for
1:ee0904b: 	}
1:2b0fe66: 	public static void createObjects(Connection conn,boolean verbose) throws SQLException {
1:ee0904b: 		Statement stmt = null;
1:2b0fe66: 		if (verbose)
1:2b0fe66: 			System.out.println("Creating Tables...");
1:ee0904b: 		for (int i = 1; i <= StaticValues.NUM_OF_TABLES; i++) {
1:ee0904b: 			try {
1:ee0904b: 				String tableName = StaticValues.TABLE_NAME + i;
1:2b0fe66: 				if (verbose)
1:2b0fe66: 					System.out.println(" Creating Table - "+tableName);
1:ee0904b: 				stmt = conn.createStatement();
1:ee0904b: 				stmt.execute(StaticValues.CREATE_TABLE+ tableName+ StaticValues.TABLE_COLS);
1:ee0904b: 				
1:ee0904b: 				stmt.close();
1:ee0904b: 			} catch (SQLException sqe) {
1:ee0904b: 				if (!sqe.getSQLState().equalsIgnoreCase("X0Y32")) {
1:ee0904b: 					throw sqe;
1:ee0904b: 				} else {
1:2b0fe66: 							System.out.println("Table " + StaticValues.TABLE_NAME + i
1:ee0904b: 							+ " exists");
1:ee0904b: 				}
1:ee0904b: 
1:ee0904b: 			}
1:ee0904b: 		}// end for
1:2b0fe66: 		if (verbose)
1:2b0fe66: 			System.out.println("Creating Views...");
1:ee0904b: 		for (int i=0;i<TestViews.createViews.size();i++){
1:ee0904b: 			try{
1:ee0904b: 				stmt = conn.createStatement();
1:ee0904b: 				stmt.executeUpdate((String)TestViews.createViews.get(i));
1:ee0904b: 			}catch(SQLException sqe){
1:ee0904b: 				System.out.println("SQLState = "+sqe.getSQLState()+", "+sqe);
1:ee0904b: 				System.out.println("View statement ==> "+(String)TestViews.createViews.get(i)+" failed");
1:ee0904b: 			}
1:ee0904b: 		}
1:ee0904b: 	}
1:ee0904b: 
1:2b0fe66: 	public static void insertData(Connection conn,boolean verbose){
1:ee0904b: 		try{
1:ee0904b: 			String commonString = "String value for the ";
1:ee0904b: 			String valueForString = commonString + "varchar column ";
1:ee0904b: 			String valueForBitData = commonString + "bit data column ";
1:ee0904b: 			conn.setAutoCommit(false);
1:ee0904b: 			Statement stmt = conn.createStatement();
1:ee0904b: 			ResultSet rs = null;
1:ee0904b: 			int totalRows = 0;
1:ee0904b: 			for (int i = 1; i <= StaticValues.NUM_OF_TABLES; i++) {
1:ee0904b: 				String tableName = StaticValues.TABLE_NAME + i;
1:ee0904b: 				rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
1:ee0904b: 				while (rs.next()) {
1:ee0904b: 					totalRows = rs.getInt(1);
1:ee0904b: 				}
1:ee0904b: 				if (totalRows >= StaticValues.NUM_OF_ROWS) {
1:2b0fe66: 					if (verbose)
1:2b0fe66: 						System.out.println(" InsertData.insert_data() => "
1:ee0904b: 							+ totalRows + " exists in table " + tableName
1:ee0904b: 							+ "...");
1:ee0904b: 
1:ee0904b: 				}else{
1:ee0904b: 					if(totalRows>0){
1:2b0fe66: 						if (verbose)
1:2b0fe66: 							System.out.println("Dropping existing indexes from table: "
1:ee0904b: 								+ tableName);
1:ee0904b: 						try {
1:ee0904b: 							stmt.executeUpdate("DROP INDEX " + tableName
1:ee0904b: 									+ "_col4_idx");
1:ee0904b: 						} catch (SQLException sqe) {
1:ee0904b: 							if (!sqe.getSQLState().equalsIgnoreCase("42X65")) {
1:ee0904b: 								throw sqe;
1:ee0904b: 							}
1:ee0904b: 						}
1:ee0904b: 						try {
1:ee0904b: 							stmt.executeUpdate("DROP INDEX " + tableName
1:ee0904b: 									+ "_col7_idx");
1:ee0904b: 						} catch (SQLException sqe) {
1:ee0904b: 							if (!sqe.getSQLState().equalsIgnoreCase("42X65")) {
1:ee0904b: 								throw sqe;
1:ee0904b: 							}
1:ee0904b: 						}
1:2b0fe66: 						if (verbose)
1:2b0fe66: 							System.out.println("Rows deleted from " + tableName + "= "
1:ee0904b: 								+ stmt.executeUpdate("DELETE FROM " + tableName));
1:ee0904b: 					}
1:ee0904b: 					PreparedStatement ps = conn
1:ee0904b: 							.prepareStatement(StaticValues.INSERT_TABLE
1:ee0904b: 									+ tableName + StaticValues.INSERT_VALUES);
1:ee0904b: 					long start = System.currentTimeMillis();
1:ee0904b: 					int k = 1;
1:ee0904b: 					while (k <= StaticValues.NUM_OF_ROWS) {
1:ee0904b: 
1:ee0904b: 						ps.setInt(1, k);
1:ee0904b: 						ps.setString(2, valueForString + "in Table "
1:ee0904b: 								+ StaticValues.TABLE_NAME + i + ": " + k);
1:ee0904b: 						ps.setString(3, valueForBitData + "in Table "
1:ee0904b: 								+ StaticValues.TABLE_NAME + i + ": " + k);
1:ee0904b: 						ps.setString(4, StaticValues.TABLE_NAME + i + "_COL4:"
1:ee0904b: 								+ k);
1:ee0904b: 						ps.setString(5, StaticValues.TABLE_NAME + i + "_COL5:"
1:ee0904b: 								+ k);
1:ee0904b: 						ps.setString(6, StaticValues.TABLE_NAME + i + "_COL6:"
1:ee0904b: 								+ k);
1:ee0904b: 						ps.setString(7, StaticValues.TABLE_NAME + i + "_COL7:"
1:ee0904b: 								+ k);
1:ee0904b: 						ps.setInt(8, k);
1:ee0904b: 						/*
1:ee0904b: 						 * ps.setString(8, StaticValues.TABLE_NAME + i +
1:ee0904b: 						 * "_COL8:" + k);
1:ee0904b: 						 */
1:ee0904b: 						ps.setTimestamp(9, new Timestamp(System
1:ee0904b: 								.currentTimeMillis()));
1:ee0904b: 						ps.executeUpdate();
1:ee0904b: 						if ((k % 10000) == 0) {
1:ee0904b: 							conn.commit();
1:ee0904b: 						}
1:ee0904b: 						k++;
1:ee0904b: 					}
1:ee0904b: 					ps.close();
1:ee0904b: 					conn.commit();
1:2b0fe66: 					if (verbose)
1:2b0fe66: 						System.out.println("Inserted " + (k - 1) + " rows into "
1:ee0904b: 							+ tableName + " in "
1:ee0904b: 							+ (System.currentTimeMillis() - start)
1:ee0904b: 							+ " milliseconds");
1:ee0904b: 					conn.setAutoCommit(true);
1:ee0904b: 
1:2b0fe66: 					if (verbose)
1:2b0fe66: 						System.out.println("Creating indexes for table: "
1:ee0904b: 							+ tableName);
1:ee0904b: 
1:ee0904b: 					stmt.executeUpdate("CREATE INDEX " + tableName
1:ee0904b: 							+ "_col4_idx on " + tableName + "(col4)");
1:ee0904b: 					stmt.executeUpdate("CREATE INDEX " + tableName
1:ee0904b: 							+ "_col7_idx on " + tableName + "(col7)");
1:ee0904b: 				}//end else
1:ee0904b: 			}// end for
1:ee0904b: 		}catch (Exception se){
1:ee0904b: 			System.out.println(" EXCEPTION:" + se.getMessage());
1:ee0904b: 			System.out.println("Stack Trace :  \n" );
1:ee0904b: 			se.printStackTrace();
1:ee0904b: 			return;
1:ee0904b: 		}
1:ee0904b: 	}		
1:ee0904b: }
1:ee0904b: 			
1:ee0904b: 
1:ee0904b: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2b0fe66
/////////////////////////////////////////////////////////////////////////
1: 	public static void dropObjects(Connection conn, boolean verbose) throws SQLException {
1: 		if (verbose)
1: 			System.out.println("Dropping existing Tables and Views...");
/////////////////////////////////////////////////////////////////////////
1: 	public static void createObjects(Connection conn,boolean verbose) throws SQLException {
1: 		if (verbose)
1: 			System.out.println("Creating Tables...");
1: 				if (verbose)
1: 					System.out.println(" Creating Table - "+tableName);
/////////////////////////////////////////////////////////////////////////
1: 							System.out.println("Table " + StaticValues.TABLE_NAME + i
1: 		if (verbose)
1: 			System.out.println("Creating Views...");
/////////////////////////////////////////////////////////////////////////
1: 	public static void insertData(Connection conn,boolean verbose){
/////////////////////////////////////////////////////////////////////////
1: 					if (verbose)
1: 						System.out.println(" InsertData.insert_data() => "
1: 						if (verbose)
1: 							System.out.println("Dropping existing indexes from table: "
/////////////////////////////////////////////////////////////////////////
1: 						if (verbose)
1: 							System.out.println("Rows deleted from " + tableName + "= "
/////////////////////////////////////////////////////////////////////////
1: 					if (verbose)
1: 						System.out.println("Inserted " + (k - 1) + " rows into "
1: 					if (verbose)
1: 						System.out.println("Creating indexes for table: "
author:Army
-------------------------------------------------------------------------------
commit:ee0904b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.system.langtest.utils.DataUtils
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.system.optimizer.utils;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Timestamp;
1: 
1: import org.apache.derbyTesting.system.optimizer.StaticValues;
1: /**
1:  * 
1:  * Class DataUtils: Utility class to drop/create database objects and populate data
1:  *
1:  */
1: 
1: 
1: public class DataUtils {
0: 	public static void dropObjects(Connection conn) throws SQLException {
1: 		Statement stmt = null;
0: 		System.out.println("Dropping existing Tables and Views...");
1: 		for (int i=0;i<TestViews.dropViews.size();i++){
1: 			try{
1: 				stmt = conn.createStatement();
1: 				stmt.executeUpdate((String)TestViews.dropViews.get(i));
1: 			}catch(SQLException sqe){
1: 				if(!sqe.getSQLState().equalsIgnoreCase("X0X05")){
1: 					throw sqe;
1: 				}
1: 			}
1: 		}
1: 		for (int i = 1; i <= StaticValues.NUM_OF_TABLES; i++) {
1: 			try {
1: 				String tableName = StaticValues.TABLE_NAME + i;
1: 				stmt = conn.createStatement();
1: 				stmt.execute(StaticValues.DROP_TABLE+ tableName);
1: 				stmt.close();
1: 			} catch (SQLException sqe) {
1: 				if (!sqe.getSQLState().equalsIgnoreCase("42Y55")) {
1: 					throw sqe;
1: 				} 
1: 			}
1: 		}// end for
1: 	}
0: 	public static void createObjects(Connection conn) throws SQLException {
1: 		Statement stmt = null;
0: 		System.out.println("Creating Tables...");
1: 		for (int i = 1; i <= StaticValues.NUM_OF_TABLES; i++) {
1: 			try {
1: 				String tableName = StaticValues.TABLE_NAME + i;
0: 				System.out.println(" Creating Table - "+tableName);
1: 				stmt = conn.createStatement();
1: 				stmt.execute(StaticValues.CREATE_TABLE+ tableName+ StaticValues.TABLE_COLS);
1: 				
1: 				stmt.close();
1: 			} catch (SQLException sqe) {
1: 				if (!sqe.getSQLState().equalsIgnoreCase("X0Y32")) {
1: 					throw sqe;
1: 				} else {
0: 					System.out.println("Table " + StaticValues.TABLE_NAME + i
1: 							+ " exists");
1: 				}
1: 
1: 			}
1: 		}// end for
0: 		System.out.println("Creating Views...");
1: 		for (int i=0;i<TestViews.createViews.size();i++){
1: 			try{
1: 				stmt = conn.createStatement();
1: 				stmt.executeUpdate((String)TestViews.createViews.get(i));
1: 			}catch(SQLException sqe){
1: 				System.out.println("SQLState = "+sqe.getSQLState()+", "+sqe);
1: 				System.out.println("View statement ==> "+(String)TestViews.createViews.get(i)+" failed");
1: 			}
1: 		}
1: 	}
1: 
0: 	public static void insertData(Connection conn){
1: 		try{
1: 			String commonString = "String value for the ";
1: 			String valueForString = commonString + "varchar column ";
1: 			String valueForBitData = commonString + "bit data column ";
1: 			conn.setAutoCommit(false);
1: 			Statement stmt = conn.createStatement();
1: 			ResultSet rs = null;
1: 			int totalRows = 0;
1: 			for (int i = 1; i <= StaticValues.NUM_OF_TABLES; i++) {
1: 				String tableName = StaticValues.TABLE_NAME + i;
1: 				rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
1: 				while (rs.next()) {
1: 					totalRows = rs.getInt(1);
1: 				}
1: 				if (totalRows >= StaticValues.NUM_OF_ROWS) {
0: 					System.out.println(" InsertData.insert_data() => "
1: 							+ totalRows + " exists in table " + tableName
1: 							+ "...");
1: 
1: 				}else{
1: 					if(totalRows>0){
0: 						System.out.println("Dropping existing indexes from table: "
1: 								+ tableName);
1: 						try {
1: 							stmt.executeUpdate("DROP INDEX " + tableName
1: 									+ "_col4_idx");
1: 						} catch (SQLException sqe) {
1: 							if (!sqe.getSQLState().equalsIgnoreCase("42X65")) {
1: 								throw sqe;
1: 							}
1: 						}
1: 						try {
1: 							stmt.executeUpdate("DROP INDEX " + tableName
1: 									+ "_col7_idx");
1: 						} catch (SQLException sqe) {
1: 							if (!sqe.getSQLState().equalsIgnoreCase("42X65")) {
1: 								throw sqe;
1: 							}
1: 						}
0: 						System.out.println("Rows deleted from " + tableName + "= "
1: 								+ stmt.executeUpdate("DELETE FROM " + tableName));
1: 					}
1: 					PreparedStatement ps = conn
1: 							.prepareStatement(StaticValues.INSERT_TABLE
1: 									+ tableName + StaticValues.INSERT_VALUES);
1: 					long start = System.currentTimeMillis();
1: 					int k = 1;
1: 					while (k <= StaticValues.NUM_OF_ROWS) {
1: 
1: 						ps.setInt(1, k);
1: 						ps.setString(2, valueForString + "in Table "
1: 								+ StaticValues.TABLE_NAME + i + ": " + k);
1: 						ps.setString(3, valueForBitData + "in Table "
1: 								+ StaticValues.TABLE_NAME + i + ": " + k);
1: 						ps.setString(4, StaticValues.TABLE_NAME + i + "_COL4:"
1: 								+ k);
1: 						ps.setString(5, StaticValues.TABLE_NAME + i + "_COL5:"
1: 								+ k);
1: 						ps.setString(6, StaticValues.TABLE_NAME + i + "_COL6:"
1: 								+ k);
1: 						ps.setString(7, StaticValues.TABLE_NAME + i + "_COL7:"
1: 								+ k);
1: 						ps.setInt(8, k);
1: 						/*
1: 						 * ps.setString(8, StaticValues.TABLE_NAME + i +
1: 						 * "_COL8:" + k);
1: 						 */
1: 						ps.setTimestamp(9, new Timestamp(System
1: 								.currentTimeMillis()));
1: 						ps.executeUpdate();
1: 						if ((k % 10000) == 0) {
1: 							conn.commit();
1: 						}
1: 						k++;
1: 					}
1: 					ps.close();
1: 					conn.commit();
0: 					System.out.println("Inserted " + (k - 1) + " rows into "
1: 							+ tableName + " in "
1: 							+ (System.currentTimeMillis() - start)
1: 							+ " milliseconds");
1: 					conn.setAutoCommit(true);
1: 
0: 					System.out.println("Creating indexes for table: "
1: 							+ tableName);
1: 
1: 					stmt.executeUpdate("CREATE INDEX " + tableName
1: 							+ "_col4_idx on " + tableName + "(col4)");
1: 					stmt.executeUpdate("CREATE INDEX " + tableName
1: 							+ "_col7_idx on " + tableName + "(col7)");
1: 				}//end else
1: 			}// end for
1: 		}catch (Exception se){
1: 			System.out.println(" EXCEPTION:" + se.getMessage());
1: 			System.out.println("Stack Trace :  \n" );
1: 			se.printStackTrace();
1: 			return;
1: 		}
1: 	}		
1: }
1: 			
1: 
1: 
============================================================================