1:3c1f634: /*
1:3c1f634: 
1:3c1f634:    Derby - Class org.apache.derby.iapi.services.locks.CompatibilitySpace
1:3c1f634: 
1:3c1f634:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3c1f634:    contributor license agreements.  See the NOTICE file distributed with
1:3c1f634:    this work for additional information regarding copyright ownership.
1:3c1f634:    The ASF licenses this file to you under the Apache License, Version 2.0
1:3c1f634:    (the "License"); you may not use this file except in compliance with
1:3c1f634:    the License.  You may obtain a copy of the License at
1:3c1f634: 
1:3c1f634:       http://www.apache.org/licenses/LICENSE-2.0
1:3c1f634: 
1:3c1f634:    Unless required by applicable law or agreed to in writing, software
1:3c1f634:    distributed under the License is distributed on an "AS IS" BASIS,
1:3c1f634:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c1f634:    See the License for the specific language governing permissions and
1:3c1f634:    limitations under the License.
1:3c1f634: 
1:3c1f634: */
1:3c1f634: 
1:3c1f634: package org.apache.derby.iapi.services.locks;
1:3c1f634: 
1:3c1f634: /**
1:3c1f634:  * <p> This interface must be implemented by objects returned from
1:3c1f634:  * <code>LockFactory.createCompatibilitySpace()</code>. </p>
1:3c1f634:  *
1:3c1f634:  * <p> A <code>CompatibilitySpace</code> can have an owner (for instance a
1:3c1f634:  * transaction). Currently, the owner is used by the virtual lock table to find
1:3c1f634:  * out which transaction a lock belongs to. Some parts of the code also use the
1:3c1f634:  * owner as a group object which guarantees that the lock is released on a
1:3c1f634:  * commit or an abort. The owner has no special meaning to the lock manager and
1:3c1f634:  * can be any object, including <code>null</code>. </p>
1:3c1f634:  *
1:3c1f634:  * @see LockFactory#createCompatibilitySpace
1:3c1f634:  */
1:3c1f634: public interface CompatibilitySpace {
1:3c1f634:     /**
1:3c1f634:      * Gets an object representing the owner of the compatibility space.
1:3c1f634:      *
1:3c1f634:      * @return object representing the owner of the compatibility space, or
1:3c1f634:      * <code>null</code> if no owner has been specified.
1:3c1f634:      */
1:85e3e12:     LockOwner getOwner();
1:3c1f634: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:85e3e12
/////////////////////////////////////////////////////////////////////////
1:     LockOwner getOwner();
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.locks.CompatibilitySpace
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.iapi.services.locks;
1: 
1: /**
1:  * <p> This interface must be implemented by objects returned from
1:  * <code>LockFactory.createCompatibilitySpace()</code>. </p>
1:  *
1:  * <p> A <code>CompatibilitySpace</code> can have an owner (for instance a
1:  * transaction). Currently, the owner is used by the virtual lock table to find
1:  * out which transaction a lock belongs to. Some parts of the code also use the
1:  * owner as a group object which guarantees that the lock is released on a
1:  * commit or an abort. The owner has no special meaning to the lock manager and
1:  * can be any object, including <code>null</code>. </p>
1:  *
1:  * @see LockFactory#createCompatibilitySpace
1:  */
1: public interface CompatibilitySpace {
1:     /**
1:      * Gets an object representing the owner of the compatibility space.
1:      *
1:      * @return object representing the owner of the compatibility space, or
1:      * <code>null</code> if no owner has been specified.
1:      */
0:     Object getOwner();
1: }
============================================================================