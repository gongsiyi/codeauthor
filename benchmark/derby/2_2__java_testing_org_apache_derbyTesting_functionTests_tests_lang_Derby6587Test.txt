1:7d2377d: /*
3:7d2377d: 
1:7d2377d: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Derby6587Test
1:7d2377d: 
1:7d2377d: Licensed to the Apache Software Foundation (ASF) under one or more
1:7d2377d: contributor license agreements.  See the NOTICE file distributed with
1:7d2377d: this work for additional information regarding copyright ownership.
1:7d2377d: The ASF licenses this file to You under the Apache License, Version 2.0
1:7d2377d: (the "License"); you may not use this file except in compliance with
1:7d2377d: the License.  You may obtain a copy of the License at
1:7d2377d: 
1:7d2377d: http://www.apache.org/licenses/LICENSE-2.0
1:7d2377d: 
1:7d2377d: Unless required by applicable law or agreed to in writing, software
1:7d2377d: distributed under the License is distributed on an "AS IS" BASIS,
1:7d2377d: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d2377d: See the License for the specific language governing permissions and
1:7d2377d: limitations under the License.
1:7d2377d: 
1:7d2377d: */
1:7d2377d: package org.apache.derbyTesting.functionTests.tests.lang;
1:7d2377d: 
1:7d2377d: import java.sql.PreparedStatement;
1:7d2377d: import java.sql.SQLException;
1:7d2377d: import java.sql.Statement;
1:7d2377d: import junit.framework.Test;
1:7d2377d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7d2377d: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:7d2377d: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:7d2377d: 
1:7d2377d: /**
1:7d2377d:  * Test case for DERBY-6131: select from view with "upper" and "in" list 
1:7d2377d:  * throws a ClassCastException null value functionality.
1:7d2377d:  */
1:7d2377d: public class Derby6587Test extends BaseJDBCTestCase {
1:7d2377d: 
1:7d2377d:     public Derby6587Test(String name) {
1:7d2377d:         super(name);
1:7d2377d:     }
1:7d2377d: 
1:7d2377d:     public static Test suite(){
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Derby6587Test");
1:7d2377d:         suite.addTest(baseSuite("Derby6587:embedded"));
1:7d2377d:         return suite;
1:7d2377d:     }
1:7d2377d:     public static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(Derby6587Test.class, name);
1:7d2377d:         Test test = new SupportFilesSetup(suite, 
1:7d2377d:             new String[] {
1:7d2377d:                 "functionTests/testData/Derby6587/Derby6587_TABLE1_T.csv",
1:7d2377d:                 "functionTests/testData/Derby6587/Derby6587_TABLE2_T.csv"});
1:7d2377d:         return new CleanDatabaseTestSetup(test) {
1:7d2377d:             protected void decorateSQL(Statement stmt) throws SQLException {
1:7d2377d:                 stmt.executeUpdate(
1:7d2377d:                         "CREATE TABLE TABLE1_T " +
1:7d2377d:                         "(UUID char (16) for bit data NOT NULL," +
1:7d2377d:                         "NR integer NOT NULL," +
1:7d2377d:                         "TEXT varchar(200) NOT NULL," +
1:7d2377d:                         "CONSTRAINT IDX_1 PRIMARY KEY (UUID, NR))");
1:7d2377d:                 stmt.executeUpdate(
1:7d2377d:                         "CREATE TABLE TABLE2_T " +
1:7d2377d:                         "(UUID char (16) for bit data NOT NULL," +
1:7d2377d:                         "ID1 char(5) NOT NULL," +
1:7d2377d:                         "ID2 integer NOT NULL," +
1:7d2377d:                         "NR integer NOT NULL," +
1:7d2377d:                         "CONSTRAINT IDX_2 PRIMARY KEY (ID1, UUID))");
1:7d2377d:                 stmt.executeUpdate(
1:7d2377d:                         "ALTER TABLE TABLE2_T " +
1:7d2377d:                         "ADD CONSTRAINT FK_1 FOREIGN KEY (UUID, NR) " +
1:7d2377d:                         "REFERENCES TABLE1_T (UUID, NR) " +
1:7d2377d:                         "ON DELETE NO ACTION ON UPDATE NO ACTION");
1:7d2377d:             }
1:7d2377d:         };
1:7d2377d:     }
1:7d2377d: 
1:7d2377d:     public void setUp() throws SQLException{
1:7d2377d:         getConnection().setAutoCommit(false);
1:7d2377d:     }
1:7d2377d: 
1:7d2377d:     /**
1:7d2377d:      * Test the original user report of this issue:
1:7d2377d:      * <p>
1:7d2377d:      * the issue can be reproduced
1:7d2377d:      * 1. create table 1
1:7d2377d:      * 2. create table 2
1:7d2377d:      * 3. run bulk import on both tables
1:7d2377d:      * <p>
1:7d2377d:      **/
1:7d2377d:     public void testBulkImport()
1:7d2377d:         throws SQLException
1:7d2377d:     {
1:7d2377d:         getConnection();
1:7d2377d:         try {
1:7d2377d:             doImportFromFile( "extin/Derby6587_TABLE1_T.csv", "TABLE1_T" );
1:7d2377d:             doImportFromFile( "extin/Derby6587_TABLE2_T.csv", "TABLE2_T" );
1:7d2377d:         } catch (SQLException sqle) {
1:7d2377d:             // in the failing case, we hit a XIE0R, Import failed; INSERT on
1:7d2377d:             // TABLE2_T caused a violation of foreign key constraint FK_1...
1:7d2377d:             fail("caught SQLException: " + 
1:7d2377d:                 sqle.getSQLState() + "; " + sqle.getMessage());
1:7d2377d:         }
1:7d2377d:     }
1:7d2377d:     
1:7d2377d:     @Override
1:7d2377d:     protected void tearDown() throws Exception {
1:7d2377d:         BaseJDBCTestCase.dropTable(getConnection(), "TABLE2_T");
1:7d2377d:         BaseJDBCTestCase.dropTable(getConnection(), "TABLE1_T");
1:7d2377d:         super.tearDown();
1:7d2377d:     }
1:7d2377d:     
1:7d2377d:     // method which calls the import table, pre-filling some of the values
1:7d2377d:     private void doImportFromFile(String fileName, String toTable) 
1:7d2377d:             throws SQLException
1:7d2377d:    {
1:7d2377d:        String impsql = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE (? , ? , ? , ?, ? , ?, ?)";
1:7d2377d:        PreparedStatement ps = prepareStatement(impsql);
1:7d2377d:        ps.setString(1, "APP");
1:7d2377d:        ps.setString(2, toTable);
1:7d2377d:        ps.setString(3, fileName);
1:7d2377d:        ps.setString(4 , null);
1:7d2377d:        ps.setString(5 , null);
1:7d2377d:        ps.setString(6 , null);
1:7d2377d:        ps.setInt(7, 0); // assuming replace, otherwise this needs to be non-0
1:7d2377d:        ps.execute();
1:7d2377d:        ps.close();
1:7d2377d:    }
1:7d2377d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Derby6587Test");
1:         BaseTestSuite suite = new BaseTestSuite(Derby6587Test.class, name);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7d2377d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Derby6587Test
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * Test case for DERBY-6131: select from view with "upper" and "in" list 
1:  * throws a ClassCastException null value functionality.
1:  */
1: public class Derby6587Test extends BaseJDBCTestCase {
1: 
1:     public Derby6587Test(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite(){
0:         TestSuite suite = new TestSuite("Derby6587Test");
1:         suite.addTest(baseSuite("Derby6587:embedded"));
1:         return suite;
1:     }
1:     public static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(Derby6587Test.class, name);
1:         Test test = new SupportFilesSetup(suite, 
1:             new String[] {
1:                 "functionTests/testData/Derby6587/Derby6587_TABLE1_T.csv",
1:                 "functionTests/testData/Derby6587/Derby6587_TABLE2_T.csv"});
1:         return new CleanDatabaseTestSetup(test) {
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 stmt.executeUpdate(
1:                         "CREATE TABLE TABLE1_T " +
1:                         "(UUID char (16) for bit data NOT NULL," +
1:                         "NR integer NOT NULL," +
1:                         "TEXT varchar(200) NOT NULL," +
1:                         "CONSTRAINT IDX_1 PRIMARY KEY (UUID, NR))");
1:                 stmt.executeUpdate(
1:                         "CREATE TABLE TABLE2_T " +
1:                         "(UUID char (16) for bit data NOT NULL," +
1:                         "ID1 char(5) NOT NULL," +
1:                         "ID2 integer NOT NULL," +
1:                         "NR integer NOT NULL," +
1:                         "CONSTRAINT IDX_2 PRIMARY KEY (ID1, UUID))");
1:                 stmt.executeUpdate(
1:                         "ALTER TABLE TABLE2_T " +
1:                         "ADD CONSTRAINT FK_1 FOREIGN KEY (UUID, NR) " +
1:                         "REFERENCES TABLE1_T (UUID, NR) " +
1:                         "ON DELETE NO ACTION ON UPDATE NO ACTION");
1:             }
1:         };
1:     }
1: 
1:     public void setUp() throws SQLException{
1:         getConnection().setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Test the original user report of this issue:
1:      * <p>
1:      * the issue can be reproduced
1:      * 1. create table 1
1:      * 2. create table 2
1:      * 3. run bulk import on both tables
1:      * <p>
1:      **/
1:     public void testBulkImport()
1:         throws SQLException
1:     {
1:         getConnection();
1:         try {
1:             doImportFromFile( "extin/Derby6587_TABLE1_T.csv", "TABLE1_T" );
1:             doImportFromFile( "extin/Derby6587_TABLE2_T.csv", "TABLE2_T" );
1:         } catch (SQLException sqle) {
1:             // in the failing case, we hit a XIE0R, Import failed; INSERT on
1:             // TABLE2_T caused a violation of foreign key constraint FK_1...
1:             fail("caught SQLException: " + 
1:                 sqle.getSQLState() + "; " + sqle.getMessage());
1:         }
1:     }
1:     
1:     @Override
1:     protected void tearDown() throws Exception {
1:         BaseJDBCTestCase.dropTable(getConnection(), "TABLE2_T");
1:         BaseJDBCTestCase.dropTable(getConnection(), "TABLE1_T");
1:         super.tearDown();
1:     }
1:     
1:     // method which calls the import table, pre-filling some of the values
1:     private void doImportFromFile(String fileName, String toTable) 
1:             throws SQLException
1:    {
1:        String impsql = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE (? , ? , ? , ?, ? , ?, ?)";
1:        PreparedStatement ps = prepareStatement(impsql);
1:        ps.setString(1, "APP");
1:        ps.setString(2, toTable);
1:        ps.setString(3, fileName);
1:        ps.setString(4 , null);
1:        ps.setString(5 , null);
1:        ps.setString(6 , null);
1:        ps.setInt(7, 0); // assuming replace, otherwise this needs to be non-0
1:        ps.execute();
1:        ps.close();
1:    }
1: }
============================================================================