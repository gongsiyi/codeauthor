1:7e60c2a: /**
1:7e60c2a:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test
1:7e60c2a:  *  
1:7e60c2a:  * Licensed to the Apache Software Foundation (ASF) under one
1:7e60c2a:  * or more contributor license agreements.  See the NOTICE file
1:7e60c2a:  * distributed with this work for additional information
1:7e60c2a:  * regarding copyright ownership.  The ASF licenses this file
1:7e60c2a:  * to you under the Apache License, Version 2.0 (the
1:7e60c2a:  * "License"); you may not use this file except in compliance
1:7e60c2a:  * with the License.  You may obtain a copy of the License at
1:7e60c2a:  *
1:7e60c2a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7e60c2a:  *
1:7e60c2a:  * Unless required by applicable law or agreed to in writing,
1:7e60c2a:  * software distributed under the License is distributed on an
1:7e60c2a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7e60c2a:  * KIND, either express or implied.  See the License for the
1:7e60c2a:  * specific language governing permissions and limitations
1:7e60c2a:  * under the License.
1:7e60c2a:  */
1:7e60c2a: package org.apache.derbyTesting.functionTests.tests.lang;
4:7e60c2a: 
1:7e60c2a: import java.sql.Connection;
1:7e60c2a: import java.sql.PreparedStatement;
1:7e60c2a: import java.sql.ResultSet;
1:7e60c2a: import java.sql.SQLException;
1:7e60c2a: import java.sql.Statement;
1:7e60c2a: import junit.framework.Test;
1:7e60c2a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7e60c2a: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:7e60c2a: 
1:7e60c2a: /**
1:7e60c2a:  * Test all characters written through the UTF8 format.
1:7e60c2a:  */
1:7e60c2a: public class CharUTF8Test extends BaseJDBCTestCase {
1:7e60c2a: 	
1:7e60c2a: 	private PreparedStatement psSet;
1:7e60c2a: 	private PreparedStatement psGet;
1:7e60c2a: 	
1:7e60c2a: 	/**
1:7e60c2a: 	 * Basic constructor.
1:7e60c2a: 	 */	
1:7e60c2a: 	public CharUTF8Test(String name) {
1:7e60c2a: 		super(name);
1:7e60c2a: 	}
1:7e60c2a: 	
1:7e60c2a: 	/**
1:7e60c2a: 	 * Sets the auto commit to false.
1:7e60c2a: 	 */
1:7e60c2a: 	protected void initializeConnection(Connection conn) throws SQLException {
1:7e60c2a: 		conn.setAutoCommit(false);
1:7e60c2a: 	}
1:7e60c2a: 	
1:7e60c2a: 	/**
1:7e60c2a: 	 * Returns the implemented tests.
1:7e60c2a: 	 * 
1:7e60c2a: 	 * @return An instance of <code>Test</code> with the implemented tests to
1:7e60c2a: 	 *         run.
1:7e60c2a: 	 */
1:7e60c2a: 	public static Test suite() {
1:1ae02c9:         return new CleanDatabaseTestSetup(
1:1ae02c9:             new BaseTestSuite(CharUTF8Test.class)) {
1:1ae02c9: 
1:1ae02c9:             protected void decorateSQL(Statement stmt) throws SQLException {
1:7e60c2a: 				stmt.execute("CREATE TABLE TEST(id int not null primary key, body varchar(60))");
1:7e60c2a: 			}
1:7e60c2a: 		};
1:7e60c2a: 	}
1:7e60c2a: 
1:7e60c2a: 	protected void setUp() throws Exception {
1:7e60c2a: 		super.setUp();
1:7e60c2a: 		psSet = prepareStatement("insert into test values(?,?)");
1:7e60c2a: 		psGet = prepareStatement("select body from test where id=?");
1:7e60c2a: 	}
1:7e60c2a: 	
1:7e60c2a: 	protected void tearDown() throws Exception {
1:980db34:         // Forget the statements to allow them to be gc'ed. They will be
1:980db34:         // closed in super.tearDown().
1:980db34:         psSet = null;
1:980db34:         psGet = null;
1:7e60c2a: 		super.tearDown();
1:7e60c2a: 	}
1:7e60c2a: 	
1:7e60c2a: 	/**
1:7e60c2a: 	 * Tests the correct handling of UTF8 char sequence. 
1:7e60c2a: 	 * 
1:7e60c2a: 	 * This test iteratively writes on a test table a sequence of 60 UTF8 chars; next, in the same iteration, it 
1:7e60c2a: 	 * reads the string and checks if the written sequence is correct.
1:7e60c2a: 	 * 
1:7e60c2a: 	 * @throws SQLException
1:7e60c2a: 	 */
1:7e60c2a: 	public void testUTF8() throws SQLException {
1:7e60c2a: 		for (int i = Character.MIN_VALUE; i <= Character.MAX_VALUE; i++) {
1:7e60c2a: 			StringBuffer buff = new StringBuffer();
1:7e60c2a: 			buff.append((char) i);
1:7e60c2a: 
1:7e60c2a: 			if ((buff.length() == 60) || (i == Character.MAX_VALUE)) {
1:7e60c2a: 				String text = buff.toString();
1:7e60c2a: 				//System.out.println("Testing with last char value " + i + " length=" + text.length());
1:7e60c2a: 				
1:7e60c2a: 				setBody(i, text); // set the text
1:7e60c2a: 				
1:7e60c2a: 				String res = getBody(i); // now read the text
1:7e60c2a: 				assertEquals("Fetched string is incorrect (length = " + buff.length() + ")", text, res);
1:7e60c2a: 
1:7e60c2a: 				buff.setLength(0);
1:7e60c2a: 			}
1:7e60c2a: 		}		
1:7e60c2a: 	}
1:7e60c2a: 	
1:7e60c2a: 	/**
1:980db34: 	 * Checks if an empty UTF8 string is correctly handled.
1:7e60c2a: 	 * 
1:7e60c2a: 	 * @throws SQLException
1:7e60c2a: 	 */
1:7e60c2a: 	public void testEmptyStringUTF8() throws SQLException {
1:7e60c2a: 		setBody(-1, "");
1:7e60c2a: 		assertEquals("Empty string incorrect!", "", getBody(-1));
1:7e60c2a: 	}
1:7e60c2a: 	
1:7e60c2a: 	private void setBody(int key, String body) throws SQLException {       
1:7e60c2a: 		psSet.setInt(1, key);
1:7e60c2a: 		psSet.setString(2, body);
1:7e60c2a: 		psSet.executeUpdate();
1:7e60c2a: 	}
1:7e60c2a:         
1:7e60c2a:     private String getBody(int key) throws SQLException {
1:7e60c2a: 		String result = "NO RESULT";
1:7e60c2a: 
1:7e60c2a: 		psGet.setInt(1, key);
1:7e60c2a: 		ResultSet rs = psGet.executeQuery();
1:7e60c2a: 		if (rs.next()) {
1:7e60c2a: 			result = rs.getString(1);
1:7e60c2a: 		}
1:7e60c2a: 		rs.close();
1:7e60c2a: 		return result;
1:7e60c2a: 	}
1:7e60c2a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(
1:             new BaseTestSuite(CharUTF8Test.class)) {
1: 
1:             protected void decorateSQL(Statement stmt) throws SQLException {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:980db34
/////////////////////////////////////////////////////////////////////////
1:         // Forget the statements to allow them to be gc'ed. They will be
1:         // closed in super.tearDown().
1:         psSet = null;
1:         psGet = null;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * Checks if an empty UTF8 string is correctly handled.
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:7e60c2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * Test all characters written through the UTF8 format.
1:  */
1: public class CharUTF8Test extends BaseJDBCTestCase {
1: 	
1: 	private PreparedStatement psSet;
1: 	private PreparedStatement psGet;
1: 	
1: 	/**
1: 	 * Basic constructor.
1: 	 */	
1: 	public CharUTF8Test(String name) {
1: 		super(name);
1: 	}
1: 	
1: 	/**
1: 	 * Sets the auto commit to false.
1: 	 */
1: 	protected void initializeConnection(Connection conn) throws SQLException {
1: 		conn.setAutoCommit(false);
1: 	}
1: 	
1: 	/**
1: 	 * Returns the implemented tests.
1: 	 * 
1: 	 * @return An instance of <code>Test</code> with the implemented tests to
1: 	 *         run.
1: 	 */
1: 	public static Test suite() {
0: 		return new CleanDatabaseTestSetup(new TestSuite(CharUTF8Test.class)) {
0: 			protected void decorateSQL(Statement stmt) throws SQLException {
1: 				stmt.execute("CREATE TABLE TEST(id int not null primary key, body varchar(60))");
1: 			}
1: 		};
1: 	}
1: 
1: 	protected void setUp() throws Exception {
1: 		super.setUp();
1: 		psSet = prepareStatement("insert into test values(?,?)");
1: 		psGet = prepareStatement("select body from test where id=?");
1: 	}
1: 	
1: 	protected void tearDown() throws Exception {
0: 		psSet.close();
0: 		psGet.close();
1: 		super.tearDown();
1: 	}
1: 	
1: 	/**
1: 	 * Tests the correct handling of UTF8 char sequence. 
1: 	 * 
1: 	 * This test iteratively writes on a test table a sequence of 60 UTF8 chars; next, in the same iteration, it 
1: 	 * reads the string and checks if the written sequence is correct.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testUTF8() throws SQLException {
0: 		int off = 0;
1: 		
1: 		for (int i = Character.MIN_VALUE; i <= Character.MAX_VALUE; i++) {
1: 			StringBuffer buff = new StringBuffer();
1: 			buff.append((char) i);
1: 
1: 			if ((buff.length() == 60) || (i == Character.MAX_VALUE)) {
1: 				String text = buff.toString();
1: 				//System.out.println("Testing with last char value " + i + " length=" + text.length());
1: 				
1: 				setBody(i, text); // set the text
1: 				
1: 				String res = getBody(i); // now read the text
1: 				assertEquals("Fetched string is incorrect (length = " + buff.length() + ")", text, res);
1: 
1: 				buff.setLength(0);
1: 			}
1: 		}		
1: 	}
1: 	
1: 	/**
0: 	 * Checks if an ampty UTF8 string is correctly handled.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testEmptyStringUTF8() throws SQLException {
1: 		setBody(-1, "");
1: 		assertEquals("Empty string incorrect!", "", getBody(-1));
1: 	}
1: 	
1: 	private void setBody(int key, String body) throws SQLException {       
1: 		psSet.setInt(1, key);
1: 		psSet.setString(2, body);
1: 		psSet.executeUpdate();
1: 	}
1:         
1:     private String getBody(int key) throws SQLException {
1: 		String result = "NO RESULT";
1: 
1: 		psGet.setInt(1, key);
1: 		ResultSet rs = psGet.executeQuery();
1: 		if (rs.next()) {
1: 			result = rs.getString(1);
1: 		}
1: 		rs.close();
1: 		return result;
1: 	}
1: }
============================================================================