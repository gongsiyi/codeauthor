1:047a763: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.data.DataFactory
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:73bd5d4: import org.apache.derby.iapi.services.daemon.DaemonService;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Corruptable;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:25f99f5: import org.apache.derby.iapi.store.raw.Transaction;
1:888d12e: import org.apache.derby.iapi.store.raw.UndoHandler;
1:eac0369: import org.apache.derby.io.StorageFactory;
1:eac0369: import org.apache.derby.iapi.store.access.FileResource;
1:eac0369: import org.apache.derby.iapi.store.access.RowSource;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:25f99f5: import java.io.File;
1:eac0369: 
1:eac0369: public interface DataFactory extends Corruptable {
1:eac0369: 
1:eac0369: 	public static final String MODULE = "org.apache.derby.iapi.store.raw.data.DataFactory";
1:eac0369: 
4:eac0369: 	/**
1:eac0369: 		The temporary segment is called "tmp"
1:eac0369: 	 */
1:eac0369: 	public static final String TEMP_SEGMENT_NAME = "tmp";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The database lock
1:eac0369: 	 */
1:eac0369: 	public static final String DB_LOCKFILE_NAME = "db.lck";
1:eac0369: 
1:fe68e74: 	/**
1:eac0369: 	** file name that is used to acquire exclusive lock on DB.
1:eac0369: 	**/
1:eac0369: 	public static final String DB_EX_LOCKFILE_NAME = "dbex.lck";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Is the store read-only.
1:eac0369: 	*/
1:eac0369: 	public boolean isReadOnly();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Open a container that is not droped.
1:eac0369: 
1:eac0369: 		@param t the raw transaction that is opening the container
1:eac0369: 		@param containerId the container's identity
1:eac0369: 		@param locking the locking policy
1:eac0369: 		@param mode see the different mode in @see ContainerHandle
1:eac0369: 		then will return a null handle if the container is dropped.
1:eac0369: 
1:eac0369: 		@return the handle to the opened container
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	public ContainerHandle openContainer(RawTransaction t,
1:eac0369: 										 ContainerKey containerId,
1:eac0369: 										 LockingPolicy locking,
1:eac0369: 										 int mode)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:fe68e74: 	/**
1:eac0369: 		Open a container that may have been dropped.
1:eac0369: 		Only internal raw store code should call this, e.g. recovery.
1:eac0369: 
1:eac0369: 		@see #openContainer
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public RawContainerHandle openDroppedContainer(RawTransaction t,
1:eac0369: 												   ContainerKey containerId,
1:eac0369: 												   LockingPolicy locking,
1:eac0369: 												   int mode)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Add a container.
1:eac0369: 
1:eac0369: 		@param t the transaction that is creating the container
1:eac0369: 		@param segmentId the segment where the container is to go
1:eac0369: 		@param mode whether or not to LOGGED or not.  The effect of this mode
1:eac0369: 				is only for this addContainer call, not persisently stored
1:eac0369: 				throughout the lifetime of the container
1:6b50965: 		@param tableProperties properties of the container that is persistently
1:eac0369: 				stored throughout the lifetime of the container
1:eac0369: 
1:eac0369: 		@return the containerId of the newly created container
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error policy
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	public long addContainer(
1:eac0369:     RawTransaction  t,
1:eac0369:     long            segmentId,
1:eac0369:     long            containerid,
1:eac0369:     int             mode,
1:eac0369:     Properties      tableProperties,
1:eac0369:     int             temporaryFlag)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create and load a stream container.
1:eac0369: 
1:eac0369: 		@param t the transaction that is creating the container
1:eac0369: 		@param segmentId the segment where the container is to go
1:6b50965: 		@param tableProperties properties of the container that is persistently
1:eac0369: 				stored throughout the lifetime of the container
1:eac0369: 		@param rowSource the data to load the container with
1:eac0369: 
1:eac0369: 		@return the containerId of the newly created stream container
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error policy
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	public long addAndLoadStreamContainer(RawTransaction t, long segmentId,
1:eac0369: 			Properties tableProperties, RowSource rowSource)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Open a stream container.
1:eac0369: 
1:eac0369: 		@return a valid StreamContainerHandle or null if the container does not exist.
1:eac0369: 
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public StreamContainerHandle openStreamContainer(
1:eac0369:     RawTransaction  t,
1:eac0369:     long            segmentId,
1:eac0369:     long            containerId,
1:eac0369:     boolean         hold)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Drop and remove a stream container.
1:eac0369: 
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 	*/
1:eac0369: 	public void dropStreamContainer(RawTransaction t, long segmentId, long containerId)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:f57b07d: 		re-Create a container during redo recovery.
1:f57b07d: 
1:f57b07d:         Used if container is found to not exist during redo recovery of
1:f57b07d:         log records creating the container.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error policy
1:eac0369: 	 */
1:f57b07d: 	public void reCreateContainerForRedoRecovery(RawTransaction t,
1:eac0369: 			long segmentId, long containerId, ByteArray containerInfo)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	public void dropContainer(RawTransaction t, ContainerKey containerId)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	public void checkpoint() throws StandardException;
1:eac0369: 
1:eac0369: 	public void idle() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the identifier that uniquely identifies this raw store at runtime.
1:eac0369: 		This identifier is to be used as part of the lokcing key for objects
1:eac0369: 		locked in the raw store by value (e.g. Containers).
1:eac0369: 	*/
1:eac0369: 	public UUID getIdentifier();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		make data factory aware of which raw store factory it belongs to
1:eac0369: 		Also need to boot the LogFactory
1:eac0369: 
1:eac0369: 		@exception StandardException cannot boot the log factory
1:eac0369: 	*/
1:eac0369: 	public void setRawStoreFactory(RawStoreFactory rsf, boolean create,
1:eac0369: 								   Properties properties)
1:eac0369: 		 throws StandardException ;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return a record handle that is initialized to the given page number and
1:eac0369:         record id.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby exception policy.
1:eac0369: 
1:eac0369: 		@param segmentId    segment where the RecordHandle belongs.
1:eac0369: 		@param containerId  container where the RecordHandle belongs.
1:eac0369: 		@param pageNumber   the page number of the RecordHandle.
1:eac0369: 		@param recordId     the record id of the RecordHandle.
1:eac0369: 
1:eac0369: 		@see RecordHandle
1:eac0369: 	*/
1:eac0369: //	public RecordHandle makeRecordHandle(long segmentId, long containerId, long pageNumber, int recordId)
1:eac0369: //		 throws	StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Database creation finished
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby exception policy.
1:eac0369: 	*/
1:eac0369: 	public void createFinished() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get an object to handle non-transactional files.
1:eac0369: 	*/
1:eac0369: 	public FileResource getFileHandler();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Tell the data factory it is OK to remove committed deleted containers
1:eac0369: 		when the data factory shuts down.
1:eac0369: 	 */
1:eac0369: 	public void removeStubsOK();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Reclaim space used by this factory.  Called by post commit daemon.
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 	*/
1:eac0369: 	public int reclaimSpace(Serviceable work, ContextManager contextMgr)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called after recovery is performed.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	*/
1:eac0369: 	public void postRecovery() throws StandardException;
1:eac0369: 
1:73bd5d4:     /**
1:73bd5d4:      * Set up the data factory's caches to use the specified daemon service for
1:73bd5d4:      * background cleaning.
1:73bd5d4:      *
1:73bd5d4:      * @param daemon daemon service to use for background cleaning
1:73bd5d4:      */
1:73bd5d4:     public void setupCacheCleaner(DaemonService daemon);
1:73bd5d4: 
1:eac0369: 	/**
1:eac0369: 		Encrypt cleartext into ciphertext.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.crypto.CipherProvider#encrypt
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	 */
1:eac0369: 	public int encrypt(byte[] cleartext, int offset, int length,
1:ae71c74: 					   byte[] ciphertext, int outputOffset, 
1:ae71c74:                        boolean newEngine)
1:eac0369: 		 throws StandardException ;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Decrypt cleartext from ciphertext.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.crypto.CipherProvider#decrypt
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	 */
1:eac0369: 	public int decrypt(byte[] ciphertext, int offset, int length,
1:eac0369: 					   byte[] cleartext, int outputOffset)
1:eac0369: 		 throws StandardException ;
1:eac0369: 
1:ae71c74:     /**
1:d203eea:      * Decrypts all the containers in the data segment.
1:d203eea:      *
1:d203eea:      * @param t the transaction that is decrypting the container
1:d203eea:      * @exception StandardException Standard Derby Error Policy
1:d203eea: 	 */
1:d203eea:     void decryptAllContainers(RawTransaction t)
1:d203eea:             throws StandardException;
1:d203eea: 
1:d203eea:     /**
1:ae71c74: 	 * Encrypt all the containers in the data segment.
1:ae71c74:      * @param t the transaction that is encrypting the containers.
1:047a763:      * @exception StandardException Standard Derby Error Policy
1:047a763: 	 */
1:ae71c74: 	public void encryptAllContainers(RawTransaction t) 
1:047a763:         throws StandardException;
1:047a763: 
1:fe68e74:     /**
1:0a8f840:      * Removes old versions of the containers after a cryptographic operation
1:0a8f840:      * on the database.
1:ae71c74:      */
1:0a8f840:     public void removeOldVersionOfContainers()
1:ae71c74:         throws StandardException;
1:ae71c74: 
1:eac0369:     /**
1:89a6625:      * Sets whether the database is encrypted.
1:89a6625:      *
1:89a6625:      * @param isEncrypted {@code true} if the database is encrypted,
1:89a6625:      *      {@code false} otherwise
1:ae71c74:      */
1:89a6625:     public void setDatabaseEncrypted(boolean isEncrypted);
1:ae71c74: 
1:eac0369: 	/**
1:eac0369: 		Return the encryption block size used by the algorithm at time of
1:eac0369: 		encrypted database creation
1:eac0369: 	 */
1:eac0369: 	public int getEncryptionBlockSize();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - stop writing dirty pages or container to disk
1:3fd26f3: 	 * @exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public void freezePersistentStore() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - start writing dirty pages or container to disk
1:eac0369: 	 */
1:eac0369: 	public void unfreezePersistentStore();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - don't allow the persistent store to be frozen - or if
1:eac0369: 	 * it is already frozen, block.   A write is about to commence.
1:3fd26f3: 	 * @exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public void writeInProgress() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Backup restore - write finished, if this is the last writer, allow the
1:eac0369: 	 * persistent store to proceed.
1:eac0369: 	 */
1:eac0369: 	public void writeFinished();
1:eac0369: 
1:25f99f5: 	/**
1:25f99f5: 	 * Back up the data segment of the database.
1:25f99f5: 	 */
1:25f99f5: 	public void backupDataFiles(Transaction rt, File backupDir) throws StandardException;
1:25f99f5: 
1:eac0369:     /**
1:eac0369:      * Return an id which can be used to create a container.
1:eac0369:      * <p>
1:eac0369:      * Return an id number with is greater than any existing container
1:eac0369:      * in the current database.  Caller will use this to allocate future
1:eac0369:      * container numbers - most likely caching the value and then incrementing
1:eac0369:      * it as it is used.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The an id which can be used to create a container.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     long getMaxContainerId()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This function is called after a checkpoint to remove the stub files thar are not required
1:eac0369: 	 * during recovery. Crash recovery  uses these files to identify the dropped
1:eac0369: 	 * containers.   Stub files(d*.dat) gets creates  when a
1:eac0369: 	 * table/index(containers) dropped.
1:3fd26f3: 	 * @exception StandardException Standard Derby error policy
1:eac0369: 	 **/
1:eac0369:     public void removeDroppedContainerFileStubs(LogInstant redoLWM) throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @return The StorageFactory used by this dataFactory
1:eac0369:      */
1:eac0369:     public StorageFactory getStorageFactory();
1:eac0369: 
1:6da88fc:     /**
1:6da88fc:      * <p>
1:6da88fc:      * Get the root directory of the data storage area. It is always
1:6da88fc:      * guaranteed to be an absolute path, and it is prefixed with the
1:6da88fc:      * JDBC sub-sub-protocol if it is not a directory database. Examples:
1:6da88fc:      * </p>
1:6da88fc:      *
1:6da88fc:      * <dl>
1:6da88fc:      *     <dt>{@code /path/to/database}</dt>
1:6da88fc:      *     <dd>in case of a directory database</dd>
1:6da88fc:      *     <dt>{@code memory:/path/to/database}</dt>
1:6da88fc:      *     <dd> in case of a memory database</dd>
1:6da88fc:      * </dl>
1:6da88fc:      *
1:6da88fc:      * @return the root directory of the data storage area
1:6da88fc:      */
1:6da88fc:     String getRootDirectory();
1:6da88fc: 
1:eac0369: 	public void	stop();
1:2333262: 
1:2333262:     /**
1:2333262:      * Returns if data base is in encrypted mode.
1:2333262:      * @return true if database encrypted false otherwise
1:2333262:      */
1:2333262:     public boolean databaseEncrypted();
1:888d12e: 
1:888d12e:     /**
1:888d12e:         Register a handler class for insert undo events.
1:888d12e:         <P>
1:888d12e:         Register a class to be called when an undo of an insert 
1:888d12e:         is executed.  When an undo of an event is executed by
1:888d12e:         the raw store UndoHandler.insertUndoNotify() will be
1:888d12e:         called, allowing upper level callers to execute code
1:888d12e:         as necessary.  The initial need is for the access layer
1:888d12e:         to be able to queue post commit reclaim space in the
1:888d12e:         case of inserts which are aborted (including the normal
1:888d12e:         case of inserts failed for duplicate key violations)
1:888d12e:         (see DERBY-4057)
1:888d12e:         <p>
1:888d12e:         Currently the handler is only called on abort of inserts on
1:888d12e:         non-overflow pages that meet either of the following 2 
1:888d12e:         requirements:
1:888d12e:         1) the row has either overflow columns (long columns) or
1:888d12e:            the row columns span multiple pages (long rows).
1:888d12e:         2) after the action all user rows on the page are marked deleted.
1:888d12e: 
1:9fb8a06:         @param undo_handle client code supplied undo_handle. 
1:888d12e: 
1:888d12e:     */
1:888d12e:     public void setUndoInsertEventHandler(UndoHandler undo_handle);
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:9fb8a06
/////////////////////////////////////////////////////////////////////////
1:         @param undo_handle client code supplied undo_handle. 
commit:888d12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.UndoHandler;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:         Register a handler class for insert undo events.
1:         <P>
1:         Register a class to be called when an undo of an insert 
1:         is executed.  When an undo of an event is executed by
1:         the raw store UndoHandler.insertUndoNotify() will be
1:         called, allowing upper level callers to execute code
1:         as necessary.  The initial need is for the access layer
1:         to be able to queue post commit reclaim space in the
1:         case of inserts which are aborted (including the normal
1:         case of inserts failed for duplicate key violations)
1:         (see DERBY-4057)
1:         <p>
1:         Currently the handler is only called on abort of inserts on
1:         non-overflow pages that meet either of the following 2 
1:         requirements:
1:         1) the row has either overflow columns (long columns) or
1:            the row columns span multiple pages (long rows).
1:         2) after the action all user rows on the page are marked deleted.
1: 
0:         @param undo_handler client code supplied undo_handle. 
1: 
1:     */
1:     public void setUndoInsertEventHandler(UndoHandler undo_handle);
commit:f57b07d
/////////////////////////////////////////////////////////////////////////
1: 		re-Create a container during redo recovery.
1: 
1:         Used if container is found to not exist during redo recovery of
1:         log records creating the container.
1: 	public void reCreateContainerForRedoRecovery(RawTransaction t,
commit:25f99f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.Transaction;
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Back up the data segment of the database.
1: 	 */
1: 	public void backupDataFiles(Transaction rt, File backupDir) throws StandardException;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6da88fc
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Get the root directory of the data storage area. It is always
1:      * guaranteed to be an absolute path, and it is prefixed with the
1:      * JDBC sub-sub-protocol if it is not a directory database. Examples:
1:      * </p>
1:      *
1:      * <dl>
1:      *     <dt>{@code /path/to/database}</dt>
1:      *     <dd>in case of a directory database</dd>
1:      *     <dt>{@code memory:/path/to/database}</dt>
1:      *     <dd> in case of a memory database</dd>
1:      * </dl>
1:      *
1:      * @return the root directory of the data storage area
1:      */
1:     String getRootDirectory();
1: 
commit:73bd5d4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.daemon.DaemonService;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Set up the data factory's caches to use the specified daemon service for
1:      * background cleaning.
1:      *
1:      * @param daemon daemon service to use for background cleaning
1:      */
1:     public void setupCacheCleaner(DaemonService daemon);
1: 
commit:721f895
/////////////////////////////////////////////////////////////////////////
commit:2333262
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns if data base is in encrypted mode.
1:      * @return true if database encrypted false otherwise
1:      */
1:     public boolean databaseEncrypted();
commit:fe68e74
/////////////////////////////////////////////////////////////////////////
1: 	/**
/////////////////////////////////////////////////////////////////////////
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     /**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0a8f840
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Removes old versions of the containers after a cryptographic operation
1:      * on the database.
1:     public void removeOldVersionOfContainers()
commit:d203eea
/////////////////////////////////////////////////////////////////////////
1:      * Decrypts all the containers in the data segment.
1:      *
1:      * @param t the transaction that is decrypting the container
1:      * @exception StandardException Standard Derby Error Policy
1: 	 */
1:     void decryptAllContainers(RawTransaction t)
1:             throws StandardException;
1: 
1:     /**
commit:89a6625
/////////////////////////////////////////////////////////////////////////
1:      * Sets whether the database is encrypted.
1:      *
1:      * @param isEncrypted {@code true} if the database is encrypted,
1:      *      {@code false} otherwise
1:     public void setDatabaseEncrypted(boolean isEncrypted);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException  Standard Derby exception policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException  Standard Derby exception policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby exception policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby exception policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException  Standard Derby exception policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:047a763
/////////////////////////////////////////////////////////////////////////
0:      * Remove old versions of the containers after (re)encryption 
0:      * of the  database. 
0:      * @param inRecovery  <code> true </code>, if cleanup is 
0:      *                    happening during recovery.
1:      * @exception StandardException Standard Derby Error Policy
1:      */
0:     public void removeOldVersionOfContainers(boolean inRecovery) 
1:         throws StandardException;
1: 
1:     /*
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1: 					   byte[] ciphertext, int outputOffset, 
1:                        boolean newEngine)
/////////////////////////////////////////////////////////////////////////
1:     /**
1: 	 * Encrypt all the containers in the data segment.
1:      * @param t the transaction that is encrypting the containers.
0:      * @exception StandardException Standard Derby Error Policy
1: 	 */
1: 	public void encryptAllContainers(RawTransaction t) 
1:         throws StandardException;
1: 
0:     /*
0:      * Set that the database is encrypted.
1:      */
0:     public void setDatabaseEncrypted();
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		@param tableProperties properties of the container that is persistently
/////////////////////////////////////////////////////////////////////////
1: 		@param tableProperties properties of the container that is persistently
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.data.DataFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
1: import org.apache.derby.iapi.services.daemon.Serviceable;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.Corruptable;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.io.StorageFactory;
1: 
1: import org.apache.derby.iapi.store.access.FileResource;
1: import org.apache.derby.iapi.store.access.RowSource;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.util.ByteArray;
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.Properties;
1: 
1: public interface DataFactory extends Corruptable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	public static final String MODULE = "org.apache.derby.iapi.store.raw.data.DataFactory";
1: 
1: 	/**
1: 		The temporary segment is called "tmp"
1: 	 */
1: 	public static final String TEMP_SEGMENT_NAME = "tmp";
1: 
1: 	/**
1: 		The database lock
1: 	 */
1: 	public static final String DB_LOCKFILE_NAME = "db.lck";
1: 
0: 	/*
1: 	** file name that is used to acquire exclusive lock on DB.
1: 	**/
1: 	public static final String DB_EX_LOCKFILE_NAME = "dbex.lck";
1: 
1: 	/**
1: 		Is the store read-only.
1: 	*/
1: 	public boolean isReadOnly();
1: 
1: 
1: 	/**
1: 		Open a container that is not droped.
1: 
1: 		@param t the raw transaction that is opening the container
1: 		@param containerId the container's identity
1: 		@param locking the locking policy
1: 		@param mode see the different mode in @see ContainerHandle
0: 		@param droppedOK if true, then the container may be dropped.  If false,
1: 		then will return a null handle if the container is dropped.
1: 
1: 		@return the handle to the opened container
0: 		@exception StandardException Standard Cloudscape error policy
1: 
1: 	 */
1: 	public ContainerHandle openContainer(RawTransaction t,
1: 										 ContainerKey containerId,
1: 										 LockingPolicy locking,
1: 										 int mode)
1: 		 throws StandardException;
1: 
1: 	/**
1: 		Open a container that may have been dropped.
1: 		Only internal raw store code should call this, e.g. recovery.
1: 
1: 		@see #openContainer
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public RawContainerHandle openDroppedContainer(RawTransaction t,
1: 												   ContainerKey containerId,
1: 												   LockingPolicy locking,
1: 												   int mode)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Add a container.
1: 
1: 		@param t the transaction that is creating the container
1: 		@param segmentId the segment where the container is to go
1: 		@param mode whether or not to LOGGED or not.  The effect of this mode
1: 				is only for this addContainer call, not persisently stored
1: 				throughout the lifetime of the container
0: 		@param tablePropertes properties of the container that is persistently
1: 				stored throughout the lifetime of the container
1: 
1: 		@return the containerId of the newly created container
1: 
0: 		@exception StandardException Standard Cloudscape Error policy
1: 
1: 	 */
1: 	public long addContainer(
1:     RawTransaction  t,
1:     long            segmentId,
1:     long            containerid,
1:     int             mode,
1:     Properties      tableProperties,
1:     int             temporaryFlag)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Create and load a stream container.
1: 
1: 		@param t the transaction that is creating the container
1: 		@param segmentId the segment where the container is to go
0: 		@param tablePropertes properties of the container that is persistently
1: 				stored throughout the lifetime of the container
1: 		@param rowSource the data to load the container with
1: 
1: 		@return the containerId of the newly created stream container
1: 
0: 		@exception StandardException Standard Cloudscape Error policy
1: 
1: 	 */
1: 	public long addAndLoadStreamContainer(RawTransaction t, long segmentId,
1: 			Properties tableProperties, RowSource rowSource)
1: 		 throws StandardException;
1: 
1: 	/**
1: 		Open a stream container.
1: 
1: 		@return a valid StreamContainerHandle or null if the container does not exist.
1: 
0: 		@exception StandardException  Standard cloudscape exception policy
1: 
1: 	*/
1: 	public StreamContainerHandle openStreamContainer(
1:     RawTransaction  t,
1:     long            segmentId,
1:     long            containerId,
1:     boolean         hold)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Drop and remove a stream container.
1: 
0: 		@exception StandardException  Standard cloudscape exception policy
1: 	*/
1: 	public void dropStreamContainer(RawTransaction t, long segmentId, long containerId)
1: 		throws StandardException;
1: 
1: 	/**
0: 		re-Create a container during recovery load tran.
1: 
0: 		@exception StandardException Standard Cloudscape Error policy
1: 	 */
0: 	public void reCreateContainerForLoadTran(RawTransaction t,
1: 			long segmentId, long containerId, ByteArray containerInfo)
1: 		 throws StandardException;
1: 
1: 
1: 	public void dropContainer(RawTransaction t, ContainerKey containerId)
1: 		throws StandardException;
1: 
1: 	public void checkpoint() throws StandardException;
1: 
1: 	public void idle() throws StandardException;
1: 
1: 	/**
1: 		Return the identifier that uniquely identifies this raw store at runtime.
1: 		This identifier is to be used as part of the lokcing key for objects
1: 		locked in the raw store by value (e.g. Containers).
1: 	*/
1: 	public UUID getIdentifier();
1: 
1: 	/**
1: 		make data factory aware of which raw store factory it belongs to
1: 		Also need to boot the LogFactory
1: 
1: 		@exception StandardException cannot boot the log factory
1: 	*/
1: 	public void setRawStoreFactory(RawStoreFactory rsf, boolean create,
1: 								   Properties properties)
1: 		 throws StandardException ;
1: 
1: 	/**
1: 		Return a record handle that is initialized to the given page number and
1:         record id.
1: 
0: 		@exception StandardException Standard cloudscape exception policy.
1: 
1: 		@param segmentId    segment where the RecordHandle belongs.
1: 		@param containerId  container where the RecordHandle belongs.
1: 		@param pageNumber   the page number of the RecordHandle.
1: 		@param recordId     the record id of the RecordHandle.
1: 
1: 		@see RecordHandle
1: 	*/
1: //	public RecordHandle makeRecordHandle(long segmentId, long containerId, long pageNumber, int recordId)
1: //		 throws	StandardException;
1: 
1: 	/**
1: 		Database creation finished
1: 
0: 		@exception StandardException Standard cloudscape exception policy.
1: 	*/
1: 	public void createFinished() throws StandardException;
1: 
1: 	/**
1: 		Get an object to handle non-transactional files.
1: 	*/
1: 	public FileResource getFileHandler();
1: 
1: 	/**
1: 		Tell the data factory it is OK to remove committed deleted containers
1: 		when the data factory shuts down.
1: 	 */
1: 	public void removeStubsOK();
1: 
1: 	/**
0: 		Get cache statistics for the specified cache
1: 	*/
0: 	public long[] getCacheStats(String cacheName);
1: 
1: 	/**
0: 		Reset the cache statistics for the specified cache
1: 	*/
0: 	public void resetCacheStats(String cacheName);
1: 
1: 	/**
1: 		Reclaim space used by this factory.  Called by post commit daemon.
0: 		@exception StandardException  Standard cloudscape exception policy
1: 	*/
1: 	public int reclaimSpace(Serviceable work, ContextManager contextMgr)
1: 		 throws StandardException;
1: 
1: 	/**
1: 		Called after recovery is performed.
1: 
0: 		@exception StandardException Standard Cloudscape Error Policy
1: 	*/
1: 	public void postRecovery() throws StandardException;
1: 
1: 	/**
1: 		Encrypt cleartext into ciphertext.
1: 
1: 		@see org.apache.derby.iapi.services.crypto.CipherProvider#encrypt
0: 		@exception StandardException Standard Cloudscape Error Policy
1: 	 */
1: 	public int encrypt(byte[] cleartext, int offset, int length,
0: 					   byte[] ciphertext, int outputOffset)
1: 		 throws StandardException ;
1: 
1: 	/**
1: 		Decrypt cleartext from ciphertext.
1: 
1: 		@see org.apache.derby.iapi.services.crypto.CipherProvider#decrypt
0: 		@exception StandardException Standard Cloudscape Error Policy
1: 	 */
1: 	public int decrypt(byte[] ciphertext, int offset, int length,
1: 					   byte[] cleartext, int outputOffset)
1: 		 throws StandardException ;
1: 
1: 	/**
1: 		Return the encryption block size used by the algorithm at time of
1: 		encrypted database creation
1: 	 */
1: 	public int getEncryptionBlockSize();
1: 
1: 	/**
1: 	 * Backup restore - stop writing dirty pages or container to disk
0: 	 * @exception StandardException Standard Cloudscape error policy
1: 	 */
1: 	public void freezePersistentStore() throws StandardException;
1: 
1: 	/**
1: 	 * Backup restore - start writing dirty pages or container to disk
1: 	 */
1: 	public void unfreezePersistentStore();
1: 
1: 	/**
1: 	 * Backup restore - don't allow the persistent store to be frozen - or if
1: 	 * it is already frozen, block.   A write is about to commence.
0: 	 * @exception StandardException Standard Cloudscape error policy
1: 	 */
1: 	public void writeInProgress() throws StandardException;
1: 
1: 	/**
1: 	 * Backup restore - write finished, if this is the last writer, allow the
1: 	 * persistent store to proceed.
1: 	 */
1: 	public void writeFinished();
1: 
1:     /**
1:      * Return an id which can be used to create a container.
1:      * <p>
1:      * Return an id number with is greater than any existing container
1:      * in the current database.  Caller will use this to allocate future
1:      * container numbers - most likely caching the value and then incrementing
1:      * it as it is used.
1:      * <p>
1:      *
1: 	 * @return The an id which can be used to create a container.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     long getMaxContainerId()
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * This function is called after a checkpoint to remove the stub files thar are not required
1: 	 * during recovery. Crash recovery  uses these files to identify the dropped
1: 	 * containers.   Stub files(d*.dat) gets creates  when a
1: 	 * table/index(containers) dropped.
0: 	 * @exception StandardException Standard Cloudscape error policy
1: 	 **/
1:     public void removeDroppedContainerFileStubs(LogInstant redoLWM) throws StandardException;
1: 
1:     /**
1:      * @return The StorageFactory used by this dataFactory
1:      */
1:     public StorageFactory getStorageFactory();
1: 
1: 	public void	stop();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Corruptable;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.io.StorageFactory;
0: 
0: import org.apache.derby.iapi.store.access.FileResource;
0: import org.apache.derby.iapi.store.access.RowSource;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Properties;
0: 
0: public interface DataFactory extends Corruptable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	public static final String MODULE = "org.apache.derby.iapi.store.raw.data.DataFactory";
0: 
0: 	/**
0: 		The temporary segment is called "tmp"
0: 	 */
0: 	public static final String TEMP_SEGMENT_NAME = "tmp";
0: 
0: 	/**
0: 		The database lock
0: 	 */
0: 	public static final String DB_LOCKFILE_NAME = "db.lck";
0: 
0: 	/*
0: 	** file name that is used to acquire exclusive lock on DB.
0: 	**/
0: 	public static final String DB_EX_LOCKFILE_NAME = "dbex.lck";
0: 
0: 	/**
0: 		Is the store read-only.
0: 	*/
0: 	public boolean isReadOnly();
0: 
0: 
0: 	/**
0: 		Open a container that is not droped.
0: 
0: 		@param t the raw transaction that is opening the container
0: 		@param containerId the container's identity
0: 		@param locking the locking policy
0: 		@param mode see the different mode in @see ContainerHandle
0: 		@param droppedOK if true, then the container may be dropped.  If false,
0: 		then will return a null handle if the container is dropped.
0: 
0: 		@return the handle to the opened container
0: 		@exception StandardException Standard Cloudscape error policy
0: 
0: 	 */
0: 	public ContainerHandle openContainer(RawTransaction t,
0: 										 ContainerKey containerId,
0: 										 LockingPolicy locking,
0: 										 int mode)
0: 		 throws StandardException;
0: 
0: 	/**
0: 		Open a container that may have been dropped.
0: 		Only internal raw store code should call this, e.g. recovery.
0: 
0: 		@see #openContainer
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public RawContainerHandle openDroppedContainer(RawTransaction t,
0: 												   ContainerKey containerId,
0: 												   LockingPolicy locking,
0: 												   int mode)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Add a container.
0: 
0: 		@param t the transaction that is creating the container
0: 		@param segmentId the segment where the container is to go
0: 		@param mode whether or not to LOGGED or not.  The effect of this mode
0: 				is only for this addContainer call, not persisently stored
0: 				throughout the lifetime of the container
0: 		@param tablePropertes properties of the container that is persistently
0: 				stored throughout the lifetime of the container
0: 
0: 		@return the containerId of the newly created container
0: 
0: 		@exception StandardException Standard Cloudscape Error policy
0: 
0: 	 */
0: 	public long addContainer(
0:     RawTransaction  t,
0:     long            segmentId,
0:     long            containerid,
0:     int             mode,
0:     Properties      tableProperties,
0:     int             temporaryFlag)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Create and load a stream container.
0: 
0: 		@param t the transaction that is creating the container
0: 		@param segmentId the segment where the container is to go
0: 		@param tablePropertes properties of the container that is persistently
0: 				stored throughout the lifetime of the container
0: 		@param rowSource the data to load the container with
0: 
0: 		@return the containerId of the newly created stream container
0: 
0: 		@exception StandardException Standard Cloudscape Error policy
0: 
0: 	 */
0: 	public long addAndLoadStreamContainer(RawTransaction t, long segmentId,
0: 			Properties tableProperties, RowSource rowSource)
0: 		 throws StandardException;
0: 
0: 	/**
0: 		Open a stream container.
0: 
0: 		@return a valid StreamContainerHandle or null if the container does not exist.
0: 
0: 		@exception StandardException  Standard cloudscape exception policy
0: 
0: 	*/
0: 	public StreamContainerHandle openStreamContainer(
0:     RawTransaction  t,
0:     long            segmentId,
0:     long            containerId,
0:     boolean         hold)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Drop and remove a stream container.
0: 
0: 		@exception StandardException  Standard cloudscape exception policy
0: 	*/
0: 	public void dropStreamContainer(RawTransaction t, long segmentId, long containerId)
0: 		throws StandardException;
0: 
0: 	/**
0: 		re-Create a container during recovery load tran.
0: 
0: 		@exception StandardException Standard Cloudscape Error policy
0: 	 */
0: 	public void reCreateContainerForLoadTran(RawTransaction t,
0: 			long segmentId, long containerId, ByteArray containerInfo)
0: 		 throws StandardException;
0: 
0: 
0: 	public void dropContainer(RawTransaction t, ContainerKey containerId)
0: 		throws StandardException;
0: 
0: 	public void checkpoint() throws StandardException;
0: 
0: 	public void idle() throws StandardException;
0: 
0: 	/**
0: 		Return the identifier that uniquely identifies this raw store at runtime.
0: 		This identifier is to be used as part of the lokcing key for objects
0: 		locked in the raw store by value (e.g. Containers).
0: 	*/
0: 	public UUID getIdentifier();
0: 
0: 	/**
0: 		make data factory aware of which raw store factory it belongs to
0: 		Also need to boot the LogFactory
0: 
0: 		@exception StandardException cannot boot the log factory
0: 	*/
0: 	public void setRawStoreFactory(RawStoreFactory rsf, boolean create,
0: 								   Properties properties)
0: 		 throws StandardException ;
0: 
0: 	/**
0: 		Return a record handle that is initialized to the given page number and
0:         record id.
0: 
0: 		@exception StandardException Standard cloudscape exception policy.
0: 
0: 		@param segmentId    segment where the RecordHandle belongs.
0: 		@param containerId  container where the RecordHandle belongs.
0: 		@param pageNumber   the page number of the RecordHandle.
0: 		@param recordId     the record id of the RecordHandle.
0: 
0: 		@see RecordHandle
0: 	*/
0: //	public RecordHandle makeRecordHandle(long segmentId, long containerId, long pageNumber, int recordId)
0: //		 throws	StandardException;
0: 
0: 	/**
0: 		Database creation finished
0: 
0: 		@exception StandardException Standard cloudscape exception policy.
0: 	*/
0: 	public void createFinished() throws StandardException;
0: 
0: 	/**
0: 		Get an object to handle non-transactional files.
0: 	*/
0: 	public FileResource getFileHandler();
0: 
0: 	/**
0: 		Tell the data factory it is OK to remove committed deleted containers
0: 		when the data factory shuts down.
0: 	 */
0: 	public void removeStubsOK();
0: 
0: 	/**
0: 		Get cache statistics for the specified cache
0: 	*/
0: 	public long[] getCacheStats(String cacheName);
0: 
0: 	/**
0: 		Reset the cache statistics for the specified cache
0: 	*/
0: 	public void resetCacheStats(String cacheName);
0: 
0: 	/**
0: 		Reclaim space used by this factory.  Called by post commit daemon.
0: 		@exception StandardException  Standard cloudscape exception policy
0: 	*/
0: 	public int reclaimSpace(Serviceable work, ContextManager contextMgr)
0: 		 throws StandardException;
0: 
0: 	/**
0: 		Called after recovery is performed.
0: 
0: 		@exception StandardException Standard Cloudscape Error Policy
0: 	*/
0: 	public void postRecovery() throws StandardException;
0: 
0: 	/**
0: 		Encrypt cleartext into ciphertext.
0: 
0: 		@see org.apache.derby.iapi.services.crypto.CipherProvider#encrypt
0: 		@exception StandardException Standard Cloudscape Error Policy
0: 	 */
0: 	public int encrypt(byte[] cleartext, int offset, int length,
0: 					   byte[] ciphertext, int outputOffset)
0: 		 throws StandardException ;
0: 
0: 	/**
0: 		Decrypt cleartext from ciphertext.
0: 
0: 		@see org.apache.derby.iapi.services.crypto.CipherProvider#decrypt
0: 		@exception StandardException Standard Cloudscape Error Policy
0: 	 */
0: 	public int decrypt(byte[] ciphertext, int offset, int length,
0: 					   byte[] cleartext, int outputOffset)
0: 		 throws StandardException ;
0: 
0: 	/**
0: 		Return the encryption block size used by the algorithm at time of
0: 		encrypted database creation
0: 	 */
0: 	public int getEncryptionBlockSize();
0: 
0: 	/**
0: 	 * Backup restore - stop writing dirty pages or container to disk
0: 	 * @exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public void freezePersistentStore() throws StandardException;
0: 
0: 	/**
0: 	 * Backup restore - start writing dirty pages or container to disk
0: 	 */
0: 	public void unfreezePersistentStore();
0: 
0: 	/**
0: 	 * Backup restore - don't allow the persistent store to be frozen - or if
0: 	 * it is already frozen, block.   A write is about to commence.
0: 	 * @exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public void writeInProgress() throws StandardException;
0: 
0: 	/**
0: 	 * Backup restore - write finished, if this is the last writer, allow the
0: 	 * persistent store to proceed.
0: 	 */
0: 	public void writeFinished();
0: 
0:     /**
0:      * Return an id which can be used to create a container.
0:      * <p>
0:      * Return an id number with is greater than any existing container
0:      * in the current database.  Caller will use this to allocate future
0:      * container numbers - most likely caching the value and then incrementing
0:      * it as it is used.
0:      * <p>
0:      *
0: 	 * @return The an id which can be used to create a container.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     long getMaxContainerId()
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * This function is called after a checkpoint to remove the stub files thar are not required
0: 	 * during recovery. Crash recovery  uses these files to identify the dropped
0: 	 * containers.   Stub files(d*.dat) gets creates  when a
0: 	 * table/index(containers) dropped.
0: 	 * @exception StandardException Standard Cloudscape error policy
0: 	 **/
0:     public void removeDroppedContainerFileStubs(LogInstant redoLWM) throws StandardException;
0: 
0:     /**
0:      * @return The StorageFactory used by this dataFactory
0:      */
0:     public StorageFactory getStorageFactory();
0: 
0: 	public void	stop();
0: }
============================================================================