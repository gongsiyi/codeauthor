1:8b47bc7: /*
1:8b47bc7: 
1:8b47bc7:    Derby - Class org.apache.derby.iapi.services.cache.ClassSizeCatalog
1:8b47bc7: 
1:8b47bc7:    Licensed to the Apache Software Foundation (ASF) under one or more
1:8b47bc7:    contributor license agreements.  See the NOTICE file distributed with
1:8b47bc7:    this work for additional information regarding copyright ownership.
1:8b47bc7:    The ASF licenses this file to you under the Apache License, Version 2.0
1:8b47bc7:    (the "License"); you may not use this file except in compliance with
1:8b47bc7:    the License.  You may obtain a copy of the License at
1:8b47bc7: 
1:8b47bc7:       http://www.apache.org/licenses/LICENSE-2.0
1:8b47bc7: 
1:8b47bc7:    Unless required by applicable law or agreed to in writing, software
1:8b47bc7:    distributed under the License is distributed on an "AS IS" BASIS,
1:8b47bc7:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b47bc7:    See the License for the specific language governing permissions and
1:8b47bc7:    limitations under the License.
1:8b47bc7: 
1:8b47bc7:  */
1:8b47bc7: 
1:8b47bc7: package org.apache.derby.iapi.services.cache;
1:8b47bc7: 
1:8b47bc7: import java.util.Hashtable;
1:8b47bc7: 
1:8b47bc7: /**
1:8b47bc7:  * Map from class names to size coefficients. The size coefficients can be
1:8b47bc7:  * used to estimate how much memory an instance of the class takes.
1:8b47bc7:  * @see ClassSize#getSizeCoefficients(Class)
1:8b47bc7:  */
1:8b47bc7: abstract class ClassSizeCatalog extends Hashtable<String, int[]> {
1:8b47bc7:     /** The singleton instance of this class. */
1:8b47bc7:     private static final ClassSizeCatalog INSTANCE;
1:8b47bc7:     static {
1:8b47bc7:         // Do not let the compiler see ClassSizeCatalogImpl. Otherwise it will
1:8b47bc7:         // try to compile it. This may fail because ClassSizeCatalogImpl.java
1:8b47bc7:         // is not created until everything else has been compiled. Bury
1:8b47bc7:         // ClassSizeCatalogImpl in a string.
1:4469400:         String className = ClassSizeCatalog.class.getName() + "Impl";
1:8b47bc7:         try {
1:4469400:             Class<?> clazz = Class.forName(className);
1:4469400:             INSTANCE = (ClassSizeCatalog) clazz.getConstructor().newInstance();
1:8b47bc7:         } catch (Exception e) {
1:4469400:             System.out.println("Got error while instantiating " + className + ": " + e.getMessage());
1:4469400:             e.printStackTrace();
1:8b47bc7:             throw new ExceptionInInitializerError(e);
1:8b47bc7:         }
1:8b47bc7:     }
1:8b47bc7: 
1:8b47bc7:     /**
1:8b47bc7:      * Get the singleton {@code ClassSizeCatalog} instance.
1:8b47bc7:      */
1:8b47bc7:     static ClassSizeCatalog getInstance() {
1:8b47bc7:         return INSTANCE;
1:8b47bc7:     }
1:8b47bc7: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         String className = ClassSizeCatalog.class.getName() + "Impl";
1:             Class<?> clazz = Class.forName(className);
1:             INSTANCE = (ClassSizeCatalog) clazz.getConstructor().newInstance();
1:             System.out.println("Got error while instantiating " + className + ": " + e.getMessage());
1:             e.printStackTrace();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8b47bc7
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.cache.ClassSizeCatalog
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.cache;
1: 
1: import java.util.Hashtable;
1: 
1: /**
1:  * Map from class names to size coefficients. The size coefficients can be
1:  * used to estimate how much memory an instance of the class takes.
1:  * @see ClassSize#getSizeCoefficients(Class)
1:  */
1: abstract class ClassSizeCatalog extends Hashtable<String, int[]> {
1:     /** The singleton instance of this class. */
1:     private static final ClassSizeCatalog INSTANCE;
1:     static {
1:         // Do not let the compiler see ClassSizeCatalogImpl. Otherwise it will
1:         // try to compile it. This may fail because ClassSizeCatalogImpl.java
1:         // is not created until everything else has been compiled. Bury
1:         // ClassSizeCatalogImpl in a string.
1:         try {
0:             INSTANCE = (ClassSizeCatalog)
0:                 Class.forName(ClassSizeCatalog.class.getName() + "Impl")
0:                     .newInstance();
1:         } catch (Exception e) {
1:             throw new ExceptionInInitializerError(e);
1:         }
1:     }
1: 
1:     /**
1:      * Get the singleton {@code ClassSizeCatalog} instance.
1:      */
1:     static ClassSizeCatalog getInstance() {
1:         return INSTANCE;
1:     }
1: }
============================================================================