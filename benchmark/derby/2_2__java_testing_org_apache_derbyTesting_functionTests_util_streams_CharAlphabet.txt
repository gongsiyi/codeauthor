1:10cc70b: /*
1:10cc70b: 
1:10cc70b:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.CharAlphabet
1:10cc70b: 
1:10cc70b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10cc70b:    contributor license agreements.  See the NOTICE file distributed with
1:10cc70b:    this work for additional information regarding copyright ownership.
1:10cc70b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:10cc70b:    (the "License"); you may not use this file except in compliance with
1:10cc70b:    the License.  You may obtain a copy of the License at
1:10cc70b: 
1:10cc70b:       http://www.apache.org/licenses/LICENSE-2.0
1:10cc70b: 
1:10cc70b:    Unless required by applicable law or agreed to in writing, software
1:10cc70b:    distributed under the License is distributed on an "AS IS" BASIS,
1:10cc70b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10cc70b:    See the License for the specific language governing permissions and
1:10cc70b:    limitations under the License.
1:10cc70b: 
1:10cc70b:  */
1:10cc70b: 
1:10cc70b: package org.apache.derbyTesting.functionTests.util.streams;
1:10cc70b: 
1:10cc70b: /**
1:10cc70b:  * A looping alphabet, returning characters.
1:10cc70b:  *
1:10cc70b:  * The alphabet loops over a list of characters. The alphabet-object is used
1:10cc70b:  * by looping readers, which in turn is used for testing methods requiring
1:10cc70b:  * streaming inputs.
1:10cc70b:  *
1:10cc70b:  * The following alphabets have been defined:
1:10cc70b:  * <ul><li><em>Modern latin, lowercase</em> ; letters a - z (26)
1:10cc70b:  *     <li><em>Norwegian/Danish, lowercase</em> ; letters a - z, plus three
1:10cc70b:  *         additional letters (29)
1:10cc70b:  *     <li><em>Tamil</em> ; 46 Tamil letters from UNICODE U0B80
1:10cc70b:  *     <li><em>CJK subset</em> ; 12 letter from UNICODE CJK U4E00 
1:10cc70b:  * </ul>
1:10cc70b:  */
1:10cc70b: public class CharAlphabet {
1:10cc70b:     
1:10cc70b:     /** Modern latin, lowercase; a - z, 26 letters */
1:10cc70b:     public static char[] MODERNLATINLOWER = {
1:10cc70b:             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
1:10cc70b:             'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
1:10cc70b:         };
1:10cc70b: 
1:10cc70b:     /** Norwegian/Danish alphabet, lowercase; 29 letters */
1:10cc70b:     public static char[] NO_DK_LOWER = {
1:10cc70b:             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
1:10cc70b:             'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
1:10cc70b:             '\u00E6', '\u00F8', '\u00E5'
1:10cc70b:         };
1:10cc70b: 
1:10cc70b:     /** Subset of Tamil alphabet; 46 letters, UNICODE U0B80 */
1:10cc70b:     public static char[] TAMIL = {
1:10cc70b:             '\u0B85', '\u0B86', '\u0B87', '\u0B88', '\u0B89', '\u0B8A',
1:10cc70b:             '\u0B8E', '\u0B8F', '\u0B90', '\u0B92', '\u0B93', '\u0B94',
1:10cc70b:             '\u0B95', '\u0B99', '\u0B9A', '\u0B9C', '\u0B9E', '\u0B9F',
1:10cc70b:             '\u0BA3', '\u0BA4', '\u0BA8', '\u0BA9', '\u0BAA', '\u0BAE',
1:10cc70b:             '\u0BAF', '\u0BB0', '\u0BB1', '\u0BB2', '\u0BB3', '\u0BB4',
1:10cc70b:             '\u0BB5', '\u0BB6', '\u0BB7', '\u0BB8', '\u0BB9', '\u0BBE',
1:10cc70b:             '\u0BBF', '\u0BC0', '\u0BC1', '\u0BC2', '\u0BC6', '\u0BC7',
1:10cc70b:             '\u0BC8', '\u0BCA', '\u0BCB', '\u0BCC'
1:10cc70b:         };
1:10cc70b: 
1:10cc70b:     /** CJK subset; 12 letters, UNICODE U4E00 */
1:10cc70b:     public static char[] CJKSUBSET = {
1:10cc70b:             '\u4E00', '\u4E01', '\u4E02', '\u4E03', '\u4E04', '\u4E05',
1:10cc70b:             '\u4E06', '\u4E07', '\u4E08', '\u4E09', '\u4E0A', '\u4E0B'
1:10cc70b:         };
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Get a modern latin lowercase alphabet.
1:10cc70b:      */
1:10cc70b:     public static CharAlphabet modernLatinLowercase() {
1:10cc70b:         return new CharAlphabet("Modern latin lowercase",
1:10cc70b:                                 CharAlphabet.MODERNLATINLOWER);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Get a CJK subset alphabet.
1:10cc70b:      */
1:10cc70b:     public static CharAlphabet cjkSubset() {
1:10cc70b:         return new CharAlphabet("CJK subset",
1:10cc70b:                                 CharAlphabet.CJKSUBSET);
1:10cc70b:     }
1:10cc70b: 
1:88f1e26:     /**
1:88f1e26:      * Get a Tamil alphabet
1:88f1e26:      */
1:88f1e26:     public static CharAlphabet tamil() {
1:88f1e26:         return new CharAlphabet("Tamil", CharAlphabet.TAMIL);
1:88f1e26:     }
1:88f1e26: 
1:0881157:     /**
1:0881157:      * Get an alphabet consisting of a single character.
1:0881157:      */
1:0881157:     public static CharAlphabet singleChar(char ch) {
1:0881157:         return new CharAlphabet("Single char: " + ch, new char[] { ch });
1:0881157:     }
1:0881157: 
1:10cc70b:     /** Name of the alphabet. */
1:10cc70b:     private final String name;
1:10cc70b:     /** Characters in the alphabet. */
1:10cc70b:     private final char[] chars;
1:10cc70b:     /** Number of characters in the alphabet. */
1:10cc70b:     private final int charCount;
1:10cc70b:     /** Current offset into the alphabet/character array. */
1:10cc70b:     private int off = 0;
1:10cc70b:     
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet with the given name and characters.
1:10cc70b:      *
1:10cc70b:      * @param name name of the alphabet
1:10cc70b:      * @param chars characters in the alphabet.
1:10cc70b:      */
1:10cc70b:     private CharAlphabet(String name, char[] chars) {
1:10cc70b:         this.name = name;
1:10cc70b:         this.chars = chars;
1:10cc70b:         this.charCount = chars.length;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the name of the alphabet.
1:10cc70b:      */
1:10cc70b:     public String getName() {
1:10cc70b:         return this.name;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the number of characters in the alphabet.
1:10cc70b:      */
1:10cc70b:     public int charCount() {
1:10cc70b:         return this.charCount;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the next char as an <code>integer</code>.
1:10cc70b:      *
1:10cc70b:      * @return the next character in the alphabet as an <code>integer</code>
1:10cc70b:      */
1:10cc70b:     public int nextCharAsInt() {
1:10cc70b:         if (off >= charCount) {
1:10cc70b:             off = 0;
1:10cc70b:         }
1:10cc70b:         return (int)chars[off++];
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the next char.
1:10cc70b:      *
1:10cc70b:      * @return the next character in the alphabet
1:10cc70b:      */
1:10cc70b:     public char nextChar() {
1:10cc70b:         if (off >= charCount) {
1:10cc70b:             off = 0;
1:10cc70b:         }
1:10cc70b:         return chars[off++];
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Compute the next character to read after reading the specified number
1:10cc70b:      * of characters. 
1:10cc70b:      *
1:10cc70b:      * Besides from returning the index, the internal state of
1:10cc70b:      * the alphabet is updated.
1:10cc70b:      *
1:10cc70b:      * @param charsRead the number of characters read
1:10cc70b:      * @return the index of the next character
1:10cc70b:      */
1:10cc70b:     public int nextCharToRead(int charsRead) {
1:10cc70b:         off = (off + (charsRead % charCount)) % charCount;
1:10cc70b:         return off;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Reset the alphabet, the next character returned will be the first
1:10cc70b:      * character in the alphabet.
1:10cc70b:      */
1:10cc70b:     public void reset() {
1:10cc70b:         off = 0;
1:10cc70b:     }
1:aeb4325: 
1:aeb4325:     /**
1:aeb4325:      * Returns a clone of the alphabet.
1:aeb4325:      *
1:aeb4325:      * @return A clone.
1:aeb4325:      */
1:aeb4325:     public CharAlphabet getClone() {
1:aeb4325:         return new CharAlphabet(name, chars);
1:aeb4325:     }
1:aeb4325: 
1:aeb4325:     /**
1:aeb4325:      * Returns a friendlier textual representation of the alphabet.
1:aeb4325:      */
1:aeb4325:     public String toString() {
1:aeb4325:         return (name + "@" + hashCode() + "(charCount=" + charCount + ")");
1:aeb4325:     }
1:aeb4325: 
1:10cc70b: } // Enc class CharAlphabet
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0881157
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get an alphabet consisting of a single character.
1:      */
1:     public static CharAlphabet singleChar(char ch) {
1:         return new CharAlphabet("Single char: " + ch, new char[] { ch });
1:     }
1: 
commit:88f1e26
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get a Tamil alphabet
1:      */
1:     public static CharAlphabet tamil() {
1:         return new CharAlphabet("Tamil", CharAlphabet.TAMIL);
1:     }
1: 
commit:10cc70b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.CharAlphabet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.streams;
1: 
1: /**
1:  * A looping alphabet, returning characters.
1:  *
1:  * The alphabet loops over a list of characters. The alphabet-object is used
1:  * by looping readers, which in turn is used for testing methods requiring
1:  * streaming inputs.
1:  *
1:  * The following alphabets have been defined:
1:  * <ul><li><em>Modern latin, lowercase</em> ; letters a - z (26)
1:  *     <li><em>Norwegian/Danish, lowercase</em> ; letters a - z, plus three
1:  *         additional letters (29)
1:  *     <li><em>Tamil</em> ; 46 Tamil letters from UNICODE U0B80
1:  *     <li><em>CJK subset</em> ; 12 letter from UNICODE CJK U4E00 
1:  * </ul>
1:  */
1: public class CharAlphabet {
1:     
1:     /** Modern latin, lowercase; a - z, 26 letters */
1:     public static char[] MODERNLATINLOWER = {
1:             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
1:             'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
1:         };
1: 
1:     /** Norwegian/Danish alphabet, lowercase; 29 letters */
1:     public static char[] NO_DK_LOWER = {
1:             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
1:             'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
1:             '\u00E6', '\u00F8', '\u00E5'
1:         };
1: 
1:     /** Subset of Tamil alphabet; 46 letters, UNICODE U0B80 */
1:     public static char[] TAMIL = {
1:             '\u0B85', '\u0B86', '\u0B87', '\u0B88', '\u0B89', '\u0B8A',
1:             '\u0B8E', '\u0B8F', '\u0B90', '\u0B92', '\u0B93', '\u0B94',
1:             '\u0B95', '\u0B99', '\u0B9A', '\u0B9C', '\u0B9E', '\u0B9F',
1:             '\u0BA3', '\u0BA4', '\u0BA8', '\u0BA9', '\u0BAA', '\u0BAE',
1:             '\u0BAF', '\u0BB0', '\u0BB1', '\u0BB2', '\u0BB3', '\u0BB4',
1:             '\u0BB5', '\u0BB6', '\u0BB7', '\u0BB8', '\u0BB9', '\u0BBE',
1:             '\u0BBF', '\u0BC0', '\u0BC1', '\u0BC2', '\u0BC6', '\u0BC7',
1:             '\u0BC8', '\u0BCA', '\u0BCB', '\u0BCC'
1:         };
1: 
1:     /** CJK subset; 12 letters, UNICODE U4E00 */
1:     public static char[] CJKSUBSET = {
1:             '\u4E00', '\u4E01', '\u4E02', '\u4E03', '\u4E04', '\u4E05',
1:             '\u4E06', '\u4E07', '\u4E08', '\u4E09', '\u4E0A', '\u4E0B'
1:         };
1: 
1:     /**
1:      * Get a modern latin lowercase alphabet.
1:      */
1:     public static CharAlphabet modernLatinLowercase() {
1:         return new CharAlphabet("Modern latin lowercase",
1:                                 CharAlphabet.MODERNLATINLOWER);
1:     }
1: 
1:     /**
1:      * Get a CJK subset alphabet.
1:      */
1:     public static CharAlphabet cjkSubset() {
1:         return new CharAlphabet("CJK subset",
1:                                 CharAlphabet.CJKSUBSET);
1:     }
1: 
1:     /** Name of the alphabet. */
1:     private final String name;
1:     /** Characters in the alphabet. */
1:     private final char[] chars;
1:     /** Number of characters in the alphabet. */
1:     private final int charCount;
1:     /** Current offset into the alphabet/character array. */
1:     private int off = 0;
1:     
1:     /**
1:      * Create an alphabet with the given name and characters.
1:      *
1:      * @param name name of the alphabet
1:      * @param chars characters in the alphabet.
1:      */
1:     private CharAlphabet(String name, char[] chars) {
1:         this.name = name;
1:         this.chars = chars;
1:         this.charCount = chars.length;
1:     }
1: 
1:     /**
1:      * Return the name of the alphabet.
1:      */
1:     public String getName() {
1:         return this.name;
1:     }
1: 
1:     /**
1:      * Return the number of characters in the alphabet.
1:      */
1:     public int charCount() {
1:         return this.charCount;
1:     }
1: 
1:     /**
1:      * Return the next char as an <code>integer</code>.
1:      *
1:      * @return the next character in the alphabet as an <code>integer</code>
1:      */
1:     public int nextCharAsInt() {
1:         if (off >= charCount) {
1:             off = 0;
1:         }
1:         return (int)chars[off++];
1:     }
1: 
1:     /**
1:      * Return the next char.
1:      *
1:      * @return the next character in the alphabet
1:      */
1:     public char nextChar() {
1:         if (off >= charCount) {
1:             off = 0;
1:         }
1:         return chars[off++];
1:     }
1: 
1:     /**
1:      * Compute the next character to read after reading the specified number
1:      * of characters. 
1:      *
1:      * Besides from returning the index, the internal state of
1:      * the alphabet is updated.
1:      *
1:      * @param charsRead the number of characters read
1:      * @return the index of the next character
1:      */
1:     public int nextCharToRead(int charsRead) {
1:         off = (off + (charsRead % charCount)) % charCount;
1:         return off;
1:     }
1: 
1:     /**
1:      * Reset the alphabet, the next character returned will be the first
1:      * character in the alphabet.
1:      */
1:     public void reset() {
1:         off = 0;
1:     }
1: } // Enc class CharAlphabet
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:aeb4325
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a clone of the alphabet.
1:      *
1:      * @return A clone.
1:      */
1:     public CharAlphabet getClone() {
1:         return new CharAlphabet(name, chars);
1:     }
1: 
1:     /**
1:      * Returns a friendlier textual representation of the alphabet.
1:      */
1:     public String toString() {
1:         return (name + "@" + hashCode() + "(charCount=" + charCount + ")");
1:     }
1: 
============================================================================