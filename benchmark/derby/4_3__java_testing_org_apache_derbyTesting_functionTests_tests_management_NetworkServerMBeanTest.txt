1:d0a0144: /*
1:d0a0144: 
1:d0a0144:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest
1:d0a0144: 
1:d0a0144:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d0a0144:    contributor license agreements.  See the NOTICE file distributed with
1:d0a0144:    this work for additional information regarding copyright ownership.
1:d0a0144:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d0a0144:    (the "License"); you may not use this file except in compliance with
1:d0a0144:    the License.  You may obtain a copy of the License at
1:d0a0144: 
1:d0a0144:       http://www.apache.org/licenses/LICENSE-2.0
1:d0a0144: 
1:d0a0144:    Unless required by applicable law or agreed to in writing, software
1:d0a0144:    distributed under the License is distributed on an "AS IS" BASIS,
1:d0a0144:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0a0144:    See the License for the specific language governing permissions and
1:d0a0144:    limitations under the License.
1:d0a0144: 
1:d0a0144:  */
1:d0a0144: 
1:d0a0144: package org.apache.derbyTesting.functionTests.tests.management;
1:d0a0144: 
1:d0a0144: import java.util.Hashtable;
1:d0a0144: import javax.management.ObjectName;
1:d0a0144: import junit.framework.Test;
1:d0a0144: import org.apache.derbyTesting.junit.TestConfiguration;
1:d0a0144: 
1:d0a0144: /**
1:d0a0144:  * <p>
1:d0a0144:  * This JUnit test class is for testing the NetworkServerMBean that is available
1:d0a0144:  * with the Derby Network Server. Running these tests requires a JVM supporting 
1:d0a0144:  * J2SE 5.0 or better, due to the implementation's dependency of the platform 
1:d0a0144:  * management agent.</p>
1:d0a0144:  * <p>
1:d0a0144:  * This class currently tests the following:</p>
1:d0a0144:  * <ul>
1:d0a0144:  *   <li>That the attributes we expect to be available exist</li>
1:d0a0144:  *   <li>That these attributes are readable</li>
1:d0a0144:  *   <li>That these attributes have the correct type</li>
1:d0a0144:  *   <li>That these attributes have the correct value (with some exceptions)</li>
1:d0a0144:  * </ul>
1:d0a0144:  * <p>
1:d0a0144:  * The test fixtures will fail if an exception occurs (will be reported as an 
1:d0a0144:  * error in JUnit).</p>
1:d0a0144:  */
1:d0a0144: public class NetworkServerMBeanTest extends MBeanTest {
1:d0a0144:     
1:d0a0144:     public NetworkServerMBeanTest(String name) {
1:d0a0144:         super(name);
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public static Test suite() {
1:d0a0144:         
1:d0a0144:         // assumes that the suite will be wrapped by a setup or decorator
1:d0a0144:         // starting the network server.
1:d0a0144:         return MBeanTest.suite(NetworkServerMBeanTest.class, 
1:d0a0144:                                         "NetworkServerMBeanTest");
1:d0a0144:         
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     /**
1:d0a0144:      * <p>
1:d0a0144:      * Creates an object name instance for the Derby MBean whose object name's 
1:d0a0144:      * textual representation includes the following key properties:</p>
1:d0a0144:      * <ul>
1:d0a0144:      *   <li>type=NetworkServer</li>
1:d0a0144:      * </ul>
1:d0a0144:      * <p>
1:d0a0144:      * The object name may also include other key properties such as a system
1:d0a0144:      * identifier (DERBY-3466).</p>
1:d0a0144:      * @return the object name representing the NetworkServerMBean for the 
1:d0a0144:      *         Derby Network Server instance associated with this test 
1:d0a0144:      *         configuration.
1:d0a0144:      * @throws MalformedObjectNameException if the object name is not valid
1:d0a0144:      */
1:d0a0144:     private ObjectName getNetworkServerMBeanObjectName() 
1:d0a0144:             throws Exception {
1:d0a0144:         
1:d0a0144:         // get a reference to the NetworkServerMBean instance
1:d0a0144:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:d0a0144:         keyProps.put("type", "NetworkServer");
1:d0a0144:         return getDerbyMBeanName(keyProps);
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:         
1:d0a0144:     //
1:d0a0144:     // ---------- TEST FIXTURES ------------
1:d0a0144:     
1:d0a0144:     public void testAttributeAccumulatedConnectionCount() throws Exception {
1:d0a0144:         // TODO - make a connection or two and verify that the number increases
1:d0a0144:         Integer count = (Integer) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "AccumulatedConnectionCount");
1:d0a0144:         assertNotNull(count);
1:d0a0144:         // allowing the possibility that there has been some server activity
1:d0a0144:         assertTrue(count >= 0);
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeActiveConnectionCount() throws Exception {
1:d0a0144:         // TODO - make a connection or two and verify that the number changes
1:d0a0144:         Integer count = (Integer) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "ActiveConnectionCount");
1:d0a0144:         assertNotNull(count);
1:d0a0144:         // allowing the possibility that there are active connections
1:d0a0144:         assertTrue(count >= 0);
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeBytesReceived() throws Exception {
1:d0a0144:         // TODO - do some DB work and verify that the number increases
1:d0a0144:         Long bytesReceived = (Long) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "BytesReceived");
1:d0a0144:         assertNotNull(bytesReceived);
1:d0a0144:         // allowing the possibility that there has been some server activity
1:d0a0144:         assertTrue(bytesReceived >= 0);
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeBytesReceivedPerSecond() throws Exception {
1:d0a0144:         // TODO - do some DB work and verify that the number changes
1:d0a0144:         Integer bytesPerSec = (Integer) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "BytesReceivedPerSecond");
1:d0a0144:         assertNotNull(bytesPerSec);
1:d0a0144:         // allowing the possibility that there has been some server activity
1:d0a0144:         assertTrue(bytesPerSec >= 0);
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeBytesSent() throws Exception {
1:d0a0144:         // TODO - do some DB work and verify that the number increases
1:d0a0144:         Long bytesSent = (Long) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "BytesSent");
1:d0a0144:         assertNotNull(bytesSent);
1:d0a0144:         // allowing the possibility that there has been some server activity
1:d0a0144:         assertTrue(bytesSent >= 0);
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeBytesSentPerSecond() throws Exception {
1:d0a0144:         // TODO - do some DB work and verify that the number changes
1:d0a0144:         Integer bytesPerSec = (Integer) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "BytesSentPerSecond");
1:d0a0144:         assertNotNull(bytesPerSec);
1:d0a0144:         // allowing the possibility that there has been some server activity
1:d0a0144:         assertTrue(bytesPerSec >= 0);
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeConnectionCount() throws Exception {
1:d0a0144:         // TODO - connect to and disconnect from a DB and verify that the number changes
1:d0a0144:         Integer count = (Integer) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "ConnectionCount");
1:d0a0144:         assertNotNull(count);
1:d0a0144:         // allowing the possibility that there is or has been some server activity
1:d0a0144:         assertTrue(count >= 0);
1:d0a0144: 
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeConnectionThreadPoolSize() throws Exception {
1:d0a0144:         // TODO - connect to and disconnect from a DB and verify that the number changes
1:d0a0144:         Integer size = (Integer) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "ConnectionThreadPoolSize");
1:d0a0144:         assertNotNull(size);
1:d0a0144:         // allowing the possibility that there has been some server activity
1:d0a0144:         assertTrue(size >= 0);
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaHost() throws Exception {
1:d0a0144:         // localhost may also be 127.0.0.1
1:d0a0144:         // serverHost = expected host
1:d0a0144:         String serverHost = TestConfiguration.getCurrent().getHostName();
1:c360fc0:         if (serverHost.equals("localhost") || serverHost.equals("127.0.0.1") ||
1:c360fc0:                 serverHost.equals(" 0:0:0:0:0:0:0:1")) {
1:d0a0144:             String mbeanHost = (String) getAttribute(
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaHost");
1:d0a0144:             assertNotNull(mbeanHost);
1:c360fc0:             assertTrue("mbeanHost = " + mbeanHost + " (not localhost, 127.0.0.1, or  0:0:0:0:0:0:0:1)", 
1:1942bd1:             mbeanHost.equals("localhost") 
1:c360fc0:                     || mbeanHost.equals("127.0.0.1") ||
1:c360fc0:                     mbeanHost.equals("0:0:0:0:0:0:0:1"));
1:d0a0144:         } else {
1:d0a0144:             assertStringAttribute(serverHost,
1:d0a0144:                     getNetworkServerMBeanObjectName(), 
1:d0a0144:                     "DrdaHost");
1:d0a0144:         }
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testDrdaKeepAlive() throws Exception {
1:d0a0144:         // assumes that the default is kept and is true
1:d0a0144:         assertBooleanAttribute(true, 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaKeepAlive");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaMaxThreads() throws Exception {
1:d0a0144:         // assuming the default, 0
1:d0a0144:         assertIntAttribute(0, 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaMaxThreads");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaPortNumber() throws Exception {
1:d0a0144:         assertIntAttribute(TestConfiguration.getCurrent().getPort(), 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaPortNumber");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaSecurityMechanism() throws Exception {
1:d0a0144:         // assuming no security mechanism
1:d0a0144:         assertStringAttribute("", 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaSecurityMechanism");
1:d0a0144:     }
1:d0a0144: 
1:d0a0144:     public void testAttributeDrdaSslMode() throws Exception {
1:d0a0144:         // assuming that SSL is not enabled (off)
1:d0a0144:         assertStringAttribute("off", 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaSslMode");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaStreamOutBufferSize() throws Exception {
1:d0a0144:         // assuming that the buffer size is 0 (default)
1:b7c93fa:         assertIntAttribute(0,
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaStreamOutBufferSize");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaTimeSlice() throws Exception {
1:d0a0144:         // assuming 0 timeslice (default)
1:d0a0144:         assertIntAttribute(0, 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaTimeSlice");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaTraceAll() throws Exception {
1:d0a0144:         // assuming that traceall is not set (default)
1:d0a0144:         assertBooleanAttribute(false, 
1:d0a0144:                 getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaTraceAll");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeDrdaTraceDirectory() throws Exception {
1:d0a0144:         // assuming that the tracedirectory has not been set, meaning that it
1:d0a0144:         // is the value of derby.system.home, or user.dir (of the Network 
1:d0a0144:         // Server) if this has not been set.
1:d0a0144:         //
1:d0a0144:         // Temporary: NetworkServerTestSetup seems volatile in this area at the
1:d0a0144:         // moment (see derby-dev 2008-03-06); will defer value checking until
1:d0a0144:         // later.
1:d0a0144:           //assertStringAttribute("SomeDirectoryPath here", 
1:d0a0144:           //      getNetworkServerMBeanObjectName(), 
1:d0a0144:           //      "DrdaTraceDirectory");
1:d0a0144:         checkStringAttributeValue(getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "DrdaTraceDirectory");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeStartTime() throws Exception {
1:d0a0144:         // Haven't figured out how to test the actual value yet...
1:d0a0144:         // This will only check the attribute's existence, readability and 
1:d0a0144:         // return type.
1:d0a0144:         checkLongAttributeValue(getNetworkServerMBeanObjectName(), "StartTime");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeUptime() throws Exception {
1:d0a0144:         // Haven't figured out how to test the actual value yet...
1:d0a0144:         // This will only check the attribute's existence, readability and 
1:d0a0144:         // return type.
1:d0a0144:         checkLongAttributeValue(getNetworkServerMBeanObjectName(), "Uptime");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     public void testAttributeWaitingConnectionCount() throws Exception {
1:d0a0144:         // assuming that no connections are waiting.
1:d0a0144:         assertIntAttribute(0, getNetworkServerMBeanObjectName(), 
1:d0a0144:                 "WaitingConnectionCount");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     /**
1:d0a0144:      * This method invokes the ping operation. Because this will currently
1:d0a0144:      * result in a security exception on the server side when running with Jars
1:d0a0144:      * (due to a lacking SocketPermission), the ping operation is actually
1:d0a0144:      * only invoked when running from the classes directory.
1:d0a0144:      * This is hopefully only a temporary solution...
1:d0a0144:      * 
1:d0a0144:      * @throws java.lang.Exception if the operation fails
1:d0a0144:      */
1:d0a0144:     public void testOperationPing() throws Exception {
1:d0a0144:         /* disabling the contents of this test fixture when running with 
1:d0a0144:          * jars, until the network server has the permission to connect to 
1:d0a0144:          * itself.
1:d0a0144:          * Otherwise we get a security exception (if the security manager has 
1:d0a0144:          * been enabled).
1:d0a0144:          * 
1:d0a0144:          *    java.net.SocketPermission <host>:<port> connect,resolve
1:d0a0144:          * 
1:d0a0144:          * Since the default server policy file doesn't work when running with
1:d0a0144:          * classes, the network server should in that case have been started 
1:d0a0144:          * with no security manager (see 
1:d0a0144:          * NetworkServerTestSetup#startSeparateProcess).
1:d0a0144:          */
1:d0a0144:         if (TestConfiguration.loadingFromJars()) {
1:d0a0144:             println("testOperationPing: Won't invoke the ping operation " +
1:d0a0144:                     "since the code has been loaded from the jars.");
1:d0a0144:             return;
1:d0a0144:         } 
1:d0a0144:         // if the server is not running, an exception will be thrown when
1:d0a0144:         // invoking the ping operation.
1:d0a0144:         // assumes noSecurityManager or that the required SocketPermission has
1:d0a0144:         // been given to the network server.
1:d0a0144:         invokeOperation(getNetworkServerMBeanObjectName(), "ping");
1:d0a0144:     }
1:d0a0144:     
1:d0a0144: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c360fc0
/////////////////////////////////////////////////////////////////////////
1:         if (serverHost.equals("localhost") || serverHost.equals("127.0.0.1") ||
1:                 serverHost.equals(" 0:0:0:0:0:0:0:1")) {
1:             assertTrue("mbeanHost = " + mbeanHost + " (not localhost, 127.0.0.1, or  0:0:0:0:0:0:0:1)", 
1:                     || mbeanHost.equals("127.0.0.1") ||
1:                     mbeanHost.equals("0:0:0:0:0:0:0:1"));
commit:1942bd1
/////////////////////////////////////////////////////////////////////////
0:             assertTrue("mbeanHost = " + mbeanHost + " (not localhost or 127.0.0.1)", 
1:             mbeanHost.equals("localhost") 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b7c93fa
/////////////////////////////////////////////////////////////////////////
1:         assertIntAttribute(0,
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d0a0144
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.management;
1: 
1: import java.util.Hashtable;
1: import javax.management.ObjectName;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * <p>
1:  * This JUnit test class is for testing the NetworkServerMBean that is available
1:  * with the Derby Network Server. Running these tests requires a JVM supporting 
1:  * J2SE 5.0 or better, due to the implementation's dependency of the platform 
1:  * management agent.</p>
1:  * <p>
1:  * This class currently tests the following:</p>
1:  * <ul>
1:  *   <li>That the attributes we expect to be available exist</li>
1:  *   <li>That these attributes are readable</li>
1:  *   <li>That these attributes have the correct type</li>
1:  *   <li>That these attributes have the correct value (with some exceptions)</li>
1:  * </ul>
1:  * <p>
1:  * The test fixtures will fail if an exception occurs (will be reported as an 
1:  * error in JUnit).</p>
1:  */
1: public class NetworkServerMBeanTest extends MBeanTest {
1:     
1:     public NetworkServerMBeanTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:         
1:         // assumes that the suite will be wrapped by a setup or decorator
1:         // starting the network server.
1:         return MBeanTest.suite(NetworkServerMBeanTest.class, 
1:                                         "NetworkServerMBeanTest");
1:         
1:     }
1:     
1:     /**
1:      * <p>
1:      * Creates an object name instance for the Derby MBean whose object name's 
1:      * textual representation includes the following key properties:</p>
1:      * <ul>
1:      *   <li>type=NetworkServer</li>
1:      * </ul>
1:      * <p>
1:      * The object name may also include other key properties such as a system
1:      * identifier (DERBY-3466).</p>
1:      * @return the object name representing the NetworkServerMBean for the 
1:      *         Derby Network Server instance associated with this test 
1:      *         configuration.
1:      * @throws MalformedObjectNameException if the object name is not valid
1:      */
1:     private ObjectName getNetworkServerMBeanObjectName() 
1:             throws Exception {
1:         
1:         // get a reference to the NetworkServerMBean instance
1:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:         keyProps.put("type", "NetworkServer");
1:         return getDerbyMBeanName(keyProps);
1:     }
1:     
1:         
1:     //
1:     // ---------- TEST FIXTURES ------------
1:     
1:     public void testAttributeAccumulatedConnectionCount() throws Exception {
1:         // TODO - make a connection or two and verify that the number increases
1:         Integer count = (Integer) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "AccumulatedConnectionCount");
1:         assertNotNull(count);
1:         // allowing the possibility that there has been some server activity
1:         assertTrue(count >= 0);
1:     }
1: 
1:     public void testAttributeActiveConnectionCount() throws Exception {
1:         // TODO - make a connection or two and verify that the number changes
1:         Integer count = (Integer) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "ActiveConnectionCount");
1:         assertNotNull(count);
1:         // allowing the possibility that there are active connections
1:         assertTrue(count >= 0);
1:     }
1: 
1:     public void testAttributeBytesReceived() throws Exception {
1:         // TODO - do some DB work and verify that the number increases
1:         Long bytesReceived = (Long) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "BytesReceived");
1:         assertNotNull(bytesReceived);
1:         // allowing the possibility that there has been some server activity
1:         assertTrue(bytesReceived >= 0);
1:     }
1: 
1:     public void testAttributeBytesReceivedPerSecond() throws Exception {
1:         // TODO - do some DB work and verify that the number changes
1:         Integer bytesPerSec = (Integer) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "BytesReceivedPerSecond");
1:         assertNotNull(bytesPerSec);
1:         // allowing the possibility that there has been some server activity
1:         assertTrue(bytesPerSec >= 0);
1:     }
1: 
1:     public void testAttributeBytesSent() throws Exception {
1:         // TODO - do some DB work and verify that the number increases
1:         Long bytesSent = (Long) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "BytesSent");
1:         assertNotNull(bytesSent);
1:         // allowing the possibility that there has been some server activity
1:         assertTrue(bytesSent >= 0);
1:     }
1: 
1:     public void testAttributeBytesSentPerSecond() throws Exception {
1:         // TODO - do some DB work and verify that the number changes
1:         Integer bytesPerSec = (Integer) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "BytesSentPerSecond");
1:         assertNotNull(bytesPerSec);
1:         // allowing the possibility that there has been some server activity
1:         assertTrue(bytesPerSec >= 0);
1:     }
1: 
1:     public void testAttributeConnectionCount() throws Exception {
1:         // TODO - connect to and disconnect from a DB and verify that the number changes
1:         Integer count = (Integer) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "ConnectionCount");
1:         assertNotNull(count);
1:         // allowing the possibility that there is or has been some server activity
1:         assertTrue(count >= 0);
1: 
1:     }
1:     
1:     public void testAttributeConnectionThreadPoolSize() throws Exception {
1:         // TODO - connect to and disconnect from a DB and verify that the number changes
1:         Integer size = (Integer) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "ConnectionThreadPoolSize");
1:         assertNotNull(size);
1:         // allowing the possibility that there has been some server activity
1:         assertTrue(size >= 0);
1:     }
1:     
1:     public void testAttributeDrdaHost() throws Exception {
1:         // localhost may also be 127.0.0.1
1:         // serverHost = expected host
1:         String serverHost = TestConfiguration.getCurrent().getHostName();
0:         if (serverHost.equals("localhost") || serverHost.equals("127.0.0.1")) {
1:             String mbeanHost = (String) getAttribute(
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaHost");
1:             assertNotNull(mbeanHost);
0:             assertTrue(mbeanHost.equals("localhost") 
0:                     || mbeanHost.equals("127.0.0.1"));
1:         } else {
1:             assertStringAttribute(serverHost,
1:                     getNetworkServerMBeanObjectName(), 
1:                     "DrdaHost");
1:         }
1:     }
1:     
1:     public void testDrdaKeepAlive() throws Exception {
1:         // assumes that the default is kept and is true
1:         assertBooleanAttribute(true, 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaKeepAlive");
1:     }
1:     
1:     public void testAttributeDrdaMaxThreads() throws Exception {
1:         // assuming the default, 0
1:         assertIntAttribute(0, 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaMaxThreads");
1:     }
1:     
1:     public void testAttributeDrdaPortNumber() throws Exception {
1:         assertIntAttribute(TestConfiguration.getCurrent().getPort(), 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaPortNumber");
1:     }
1:     
1:     public void testAttributeDrdaSecurityMechanism() throws Exception {
1:         // assuming no security mechanism
1:         assertStringAttribute("", 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaSecurityMechanism");
1:     }
1: 
1:     public void testAttributeDrdaSslMode() throws Exception {
1:         // assuming that SSL is not enabled (off)
1:         assertStringAttribute("off", 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaSslMode");
1:     }
1:     
1:     public void testAttributeDrdaStreamOutBufferSize() throws Exception {
1:         // assuming that the buffer size is 0 (default)
0:         assertStringAttribute("0", 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaStreamOutBufferSize");
1:     }
1:     
1:     public void testAttributeDrdaTimeSlice() throws Exception {
1:         // assuming 0 timeslice (default)
1:         assertIntAttribute(0, 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaTimeSlice");
1:     }
1:     
1:     public void testAttributeDrdaTraceAll() throws Exception {
1:         // assuming that traceall is not set (default)
1:         assertBooleanAttribute(false, 
1:                 getNetworkServerMBeanObjectName(), 
1:                 "DrdaTraceAll");
1:     }
1:     
1:     public void testAttributeDrdaTraceDirectory() throws Exception {
1:         // assuming that the tracedirectory has not been set, meaning that it
1:         // is the value of derby.system.home, or user.dir (of the Network 
1:         // Server) if this has not been set.
1:         //
1:         // Temporary: NetworkServerTestSetup seems volatile in this area at the
1:         // moment (see derby-dev 2008-03-06); will defer value checking until
1:         // later.
1:           //assertStringAttribute("SomeDirectoryPath here", 
1:           //      getNetworkServerMBeanObjectName(), 
1:           //      "DrdaTraceDirectory");
1:         checkStringAttributeValue(getNetworkServerMBeanObjectName(), 
1:                 "DrdaTraceDirectory");
1:     }
1:     
1:     public void testAttributeStartTime() throws Exception {
1:         // Haven't figured out how to test the actual value yet...
1:         // This will only check the attribute's existence, readability and 
1:         // return type.
1:         checkLongAttributeValue(getNetworkServerMBeanObjectName(), "StartTime");
1:     }
1:     
1:     public void testAttributeUptime() throws Exception {
1:         // Haven't figured out how to test the actual value yet...
1:         // This will only check the attribute's existence, readability and 
1:         // return type.
1:         checkLongAttributeValue(getNetworkServerMBeanObjectName(), "Uptime");
1:     }
1:     
1:     public void testAttributeWaitingConnectionCount() throws Exception {
1:         // assuming that no connections are waiting.
1:         assertIntAttribute(0, getNetworkServerMBeanObjectName(), 
1:                 "WaitingConnectionCount");
1:     }
1:     
1:     /**
1:      * This method invokes the ping operation. Because this will currently
1:      * result in a security exception on the server side when running with Jars
1:      * (due to a lacking SocketPermission), the ping operation is actually
1:      * only invoked when running from the classes directory.
1:      * This is hopefully only a temporary solution...
1:      * 
1:      * @throws java.lang.Exception if the operation fails
1:      */
1:     public void testOperationPing() throws Exception {
1:         /* disabling the contents of this test fixture when running with 
1:          * jars, until the network server has the permission to connect to 
1:          * itself.
1:          * Otherwise we get a security exception (if the security manager has 
1:          * been enabled).
1:          * 
1:          *    java.net.SocketPermission <host>:<port> connect,resolve
1:          * 
1:          * Since the default server policy file doesn't work when running with
1:          * classes, the network server should in that case have been started 
1:          * with no security manager (see 
1:          * NetworkServerTestSetup#startSeparateProcess).
1:          */
1:         if (TestConfiguration.loadingFromJars()) {
1:             println("testOperationPing: Won't invoke the ping operation " +
1:                     "since the code has been loaded from the jars.");
1:             return;
1:         } 
1:         // if the server is not running, an exception will be thrown when
1:         // invoking the ping operation.
1:         // assumes noSecurityManager or that the required SocketPermission has
1:         // been given to the network server.
1:         invokeOperation(getNetworkServerMBeanObjectName(), "ping");
1:     }
1:     
1: }
============================================================================