1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecRow
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
7:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:e8e04bf: import org.apache.derby.iapi.sql.Row;
1:e8e04bf: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: /**
1:eac0369:  * Execution sees this extension of Row that provides connectivity
1:eac0369:  * to the Storage row interface and additional methods for manipulating
1:eac0369:  * Rows in execution's ResultSets.
1:eac0369:  *
1:eac0369:  */
1:76addbc: public interface ExecRow extends Row {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clone the Row and its contents.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return Row	A clone of the Row and its contents.
1:eac0369: 	 */
1:9495437: 	ExecRow getClone();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clone the Row.  The cloned row will contain clones of the
1:eac0369: 	 * specified columns and the same object as the original row
1:eac0369: 	 * for the other columns.
1:eac0369: 	 *
1:eac0369: 	 * @param clonedCols	1-based FormatableBitSet representing the columns to clone.
1:eac0369: 	 *
1:eac0369: 	 * @return Row	A clone of the Row and its contents.
1:eac0369: 	 */
1:9495437: 	ExecRow getClone(FormatableBitSet clonedCols);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a new row with the same columns type as this one, containing nulls.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	ExecRow	getNewNullRow();
1:eac0369: 
1:eac0369:     /**
1:109cb26:      * Reset all the <code>DataValueDescriptor</code>s in the row array to
1:109cb26:      * (SQL) null values. This method may reuse (and therefore modify) the
1:109cb26:      * objects currently contained in the row array.
1:eac0369:      */
1:109cb26:     void resetRowArray();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a clone of a DataValueDescriptor from an ExecRow.
1:eac0369: 	 *
1:6b50965: 	 * @param columnPosition (1 based)
1:eac0369: 	 */
1:9495437: 	DataValueDescriptor cloneColumn(int columnPosition);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a clone of the array form of the row that Access expects.
1:eac0369: 
1:eac0369: 		@see ExecRow#getRowArray
1:eac0369: 	*/
1:9495437: 	public DataValueDescriptor[] getRowArrayClone();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the array of objects that the store needs.
1:eac0369: 	*/
1:eac0369: 	public DataValueDescriptor[] getRowArray();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the array of objects
1:eac0369: 	*/
1:eac0369: 	public void setRowArray(DataValueDescriptor[] rowArray);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a new DataValueDescriptor[]
1:eac0369: 	 */
1:eac0369: 	public void getNewObjectArray();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	ExecRow getClone();
/////////////////////////////////////////////////////////////////////////
1: 	ExecRow getClone(FormatableBitSet clonedCols);
/////////////////////////////////////////////////////////////////////////
1: 	DataValueDescriptor cloneColumn(int columnPosition);
1: 	public DataValueDescriptor[] getRowArrayClone();
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0: 	ExecRow getClone() throws StandardException;
/////////////////////////////////////////////////////////////////////////
0: 	ExecRow getClone(FormatableBitSet clonedCols) throws StandardException;
/////////////////////////////////////////////////////////////////////////
0: 	DataValueDescriptor cloneColumn(int columnPosition) throws StandardException;
0: 	public DataValueDescriptor[] getRowArrayClone() throws StandardException;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e8e04bf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Row;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecRow
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface ExecRow extends Row {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.sql.Row;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1:  * Execution sees this extension of Row that provides connectivity
1:  * to the Storage row interface and additional methods for manipulating
1:  * Rows in execution's ResultSets.
1:  *
0:  * @author ames
1:  */
0: public interface ExecRow extends Row { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * Clone the Row and its contents.
1: 	 *
1: 	 *
1: 	 * @return Row	A clone of the Row and its contents.
1: 	 */
0: 	ExecRow getClone();
1: 
1: 	/**
1: 	 * Clone the Row.  The cloned row will contain clones of the
1: 	 * specified columns and the same object as the original row
1: 	 * for the other columns.
1: 	 *
1: 	 * @param clonedCols	1-based FormatableBitSet representing the columns to clone.
1: 	 *
1: 	 * @return Row	A clone of the Row and its contents.
1: 	 */
0: 	ExecRow getClone(FormatableBitSet clonedCols);
1: 
1: 	/**
1: 	 * Get a new row with the same columns type as this one, containing nulls.
1: 	 *
1: 	 */
1: 	ExecRow	getNewNullRow();
1: 
1: 	/**
1: 	 * Get a clone of a DataValueDescriptor from an ExecRow.
1: 	 *
0: 	 * @param int columnPosition (1 based)
1: 	 */
0: 	DataValueDescriptor cloneColumn(int columnPosition);
1: 
1: 	/**
1: 		Get a clone of the array form of the row that Access expects.
1: 
1: 		@see ExecRow#getRowArray
1: 	*/
0: 	public DataValueDescriptor[] getRowArrayClone();
1: 
1: 	/**
1: 		Return the array of objects that the store needs.
1: 	*/
1: 	public DataValueDescriptor[] getRowArray();
1: 
1: 	/**
1: 		Set the array of objects
1: 	*/
0: 	public void setRowArray(Storable[] rowArray);
1: 
0: 	// temp overload
1: 	public void setRowArray(DataValueDescriptor[] rowArray);
1: 
1: 	/**
1: 		Get a new DataValueDescriptor[]
1: 	 */
1: 	public void getNewObjectArray();
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:109cb26
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Reset all the <code>DataValueDescriptor</code>s in the row array to
1:      * (SQL) null values. This method may reuse (and therefore modify) the
1:      * objects currently contained in the row array.
0:      */
1:     void resetRowArray();
0: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param columnPosition (1 based)
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.sql.Row;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0:  * Execution sees this extension of Row that provides connectivity
0:  * to the Storage row interface and additional methods for manipulating
0:  * Rows in execution's ResultSets.
0:  *
0:  * @author ames
0:  */
0: public interface ExecRow extends Row { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Clone the Row and its contents.
0: 	 *
0: 	 *
0: 	 * @return Row	A clone of the Row and its contents.
0: 	 */
0: 	ExecRow getClone();
0: 
0: 	/**
0: 	 * Clone the Row.  The cloned row will contain clones of the
0: 	 * specified columns and the same object as the original row
0: 	 * for the other columns.
0: 	 *
0: 	 * @param clonedCols	1-based FormatableBitSet representing the columns to clone.
0: 	 *
0: 	 * @return Row	A clone of the Row and its contents.
0: 	 */
0: 	ExecRow getClone(FormatableBitSet clonedCols);
0: 
0: 	/**
0: 	 * Get a new row with the same columns type as this one, containing nulls.
0: 	 *
0: 	 */
0: 	ExecRow	getNewNullRow();
0: 
0: 	/**
0: 	 * Get a clone of a DataValueDescriptor from an ExecRow.
0: 	 *
0: 	 * @param int columnPosition (1 based)
0: 	 */
0: 	DataValueDescriptor cloneColumn(int columnPosition);
0: 
0: 	/**
0: 		Get a clone of the array form of the row that Access expects.
0: 
0: 		@see ExecRow#getRowArray
0: 	*/
0: 	public DataValueDescriptor[] getRowArrayClone();
0: 
0: 	/**
0: 		Return the array of objects that the store needs.
0: 	*/
0: 	public DataValueDescriptor[] getRowArray();
0: 
0: 	/**
0: 		Set the array of objects
0: 	*/
0: 	public void setRowArray(Storable[] rowArray);
0: 
0: 	// temp overload
0: 	public void setRowArray(DataValueDescriptor[] rowArray);
0: 
0: 	/**
0: 		Get a new DataValueDescriptor[]
0: 	 */
0: 	public void getNewObjectArray();
0: }
============================================================================