1:db8dae7: /*
4:db8dae7:  
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.IOException;
1:4469400: import java.lang.reflect.InvocationTargetException;
1:db8dae7: import java.sql.Connection;
1:db8dae7: import java.sql.PreparedStatement;
1:db8dae7: import java.sql.ResultSet;
1:db8dae7: import java.sql.SQLException;
1:db8dae7: import java.sql.Statement;
1:db8dae7: import junit.framework.Test;
1:38667d9: import org.apache.derby.jdbc.BasicClientDataSource40;
1:1ae02c9: import org.apache.derby.jdbc.ClientDataSourceInterface;
1:db8dae7: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c35e4f0: import org.apache.derbyTesting.junit.JDBC;
1:7ed87c8: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:db8dae7: import org.apache.derbyTesting.junit.TestConfiguration;
1:db8dae7: 
1:db8dae7: public class SimplePerfTest extends BaseJDBCTestCase
4:db8dae7: {
1:db8dae7:     
1:db8dae7:     public SimplePerfTest(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:7ed87c8:     private static String dbPath = "UNDEFINED!";
1:7ed87c8:     private static String masterHostName = "UNDEFINED!";
1:7ed87c8:     private static int masterPortNo = -1;
1:7ed87c8:     
1:db8dae7:     public static Test suite()
1:db8dae7:         throws Exception
1:7ed87c8:     {        
1:7ed87c8:         masterHostName = System.getProperty("test.serverHost", "localhost");
1:7ed87c8:         masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:7ed87c8:         dbPath = System.getProperty("test.dbPath", "wombat");
1:db8dae7:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SimplePerfTest");
1:db8dae7:         
1:db8dae7:         tuplesToInsert = Integer.parseInt(System.getProperty("test.inserts", "1000"));
1:db8dae7:         commitFreq = Integer.parseInt(System.getProperty("test.commitFreq", "0"));
1:db8dae7:         
1:7ed87c8:         suite.addTest(SimplePerfTest.suite(masterHostName, masterPortNo, dbPath));
1:7ed87c8:         // TestSetup setup = TestConfiguration.additionalDatabaseDecorator(suite,dbPath);
1:db8dae7:         
1:db8dae7:         return (Test)suite;
1:db8dae7:     }
1:db8dae7:     private static int tuplesToInsert = 0;
1:db8dae7:     private static int commitFreq = 0; // Means autocommit.
1:db8dae7:     /**
1:db8dae7:      * Adds this class to the *existing server* suite.
1:db8dae7:      */
1:7ed87c8:     public static Test suite(String serverHost, int serverPort, String dbPath)
1:7ed87c8:     {     
1:7ed87c8:         Test t = TestConfiguration.existingServerSuite(SimplePerfTest.class,false,serverHost,serverPort,dbPath);
1:7ed87c8:         return SecurityManagerSetup.noSecurityManager(t);
1:db8dae7:    }
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      *
1:db8dae7:      *
1:db8dae7:      * @throws SQLException, IOException, InterruptedException
1:db8dae7:      */
1:db8dae7:     public void testInserts()
1:c35e4f0:     throws SQLException, IOException, InterruptedException,
1:4469400:            ClassNotFoundException, IllegalAccessException, InstantiationException,
1:4469400:            NoSuchMethodException, InvocationTargetException
1:7ed87c8:     {        
1:7ed87c8:         String vc = "";
1:7ed87c8:         for ( int i=0;i<20000;i++ )
1:7ed87c8:         {
1:7ed87c8:             vc = vc+"a";
1:7ed87c8:         }
1:db8dae7:         
1:7ed87c8:         Connection conn = clientConnection(masterHostName, masterPortNo, dbPath);
1:db8dae7:         
1:db8dae7:         Statement s = conn.createStatement();
1:7ed87c8:         try{
1:7ed87c8:         s.executeUpdate("drop table t"); // Should not be required!
1:7ed87c8:         } catch (java.sql.SQLException ignore){
1:7ed87c8:             System.out.println("'drop table t' caused: "+ignore.getMessage());
1:7ed87c8:         }
1:7ed87c8:         s.executeUpdate("create table t (i integer primary key, vc varchar(20100))");
1:db8dae7:         
1:7ed87c8:         PreparedStatement pSt = conn.prepareStatement("insert into t values (?,?)");
1:db8dae7:         
1:db8dae7:         conn.setAutoCommit(commitFreq == 0 ? true : false); // commitFreq == 0 means do autocommit
1:db8dae7:         
1:db8dae7:         for (int i=0;i<tuplesToInsert;i++)
1:db8dae7:         {
1:db8dae7:             pSt.setInt(1, i);
1:7ed87c8:             pSt.setString(2, vc+i);
1:7ed87c8:             try {pSt.execute();}
1:7ed87c8:             catch (Exception e) {
1:7ed87c8:                 System.out.println("Exception when inserting: " + e.getMessage());
1:7ed87c8:                 return;
1:7ed87c8:             }
1:db8dae7:             // commit after each commitFreq insert
1:db8dae7:             if ((commitFreq != 0) && ((i % commitFreq) == 0)){System.out.println("i: "+i);conn.commit();}
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:         conn.commit();
1:db8dae7:         
1:db8dae7:         ResultSet rs = s.executeQuery("select count(*) from t");
1:db8dae7:         rs.next();
1:db8dae7:         int count = rs.getInt(1);
2:db8dae7:         System.out.println("count: "+count);
1:db8dae7:     }
1:db8dae7:     public void verifyTestInserts()
1:c35e4f0:         throws SQLException, IOException, InterruptedException,
1:c35e4f0:             ClassNotFoundException, IllegalAccessException,
1:4469400:                InstantiationException, NoSuchMethodException, InvocationTargetException
1:db8dae7:     {
1:7ed87c8:         Connection conn = clientConnection(masterHostName, masterPortNo, dbPath);
1:db8dae7:         
1:db8dae7:         Statement s = conn.createStatement();
1:db8dae7:         
1:db8dae7:         ResultSet rs = s.executeQuery("select count(*) from t");
1:db8dae7:         rs.next();
1:db8dae7:         int count = rs.getInt(1);
1:7ed87c8:         // System.out.println("count: "+count);
1:7ed87c8:     }
1:7ed87c8:     private Connection clientConnection(String hostName, int portNo, String dbPath)
1:c35e4f0:             throws SQLException, ClassNotFoundException, IllegalAccessException,
1:4469400:                    InstantiationException, NoSuchMethodException, InvocationTargetException
1:7ed87c8:     {
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:38667d9:             ds = new BasicClientDataSource40();
1:c35e4f0:         }
1:c35e4f0: 
1:7ed87c8:         ds.setDatabaseName(dbPath);
1:7ed87c8:         ds.setServerName(hostName);
1:7ed87c8:         ds.setPortNumber(portNo);
1:7ed87c8:         // ds.setConnectionAttributes(useEncryption(false));
1:7ed87c8:         return ds.getConnection();
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
/////////////////////////////////////////////////////////////////////////
1:            ClassNotFoundException, IllegalAccessException, InstantiationException,
1:            NoSuchMethodException, InvocationTargetException
/////////////////////////////////////////////////////////////////////////
1:                InstantiationException, NoSuchMethodException, InvocationTargetException
/////////////////////////////////////////////////////////////////////////
1:                    InstantiationException, NoSuchMethodException, InvocationTargetException
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDataSourceInterface;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SimplePerfTest");
commit:38667d9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:             ds = new BasicClientDataSource40();
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientDataSourceInterface;
0: import org.apache.derby.jdbc.NonJNDIClientDataSource40;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:     throws SQLException, IOException, InterruptedException,
0:         ClassNotFoundException, IllegalAccessException, InstantiationException
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException, IOException, InterruptedException,
1:             ClassNotFoundException, IllegalAccessException,
0:             InstantiationException
/////////////////////////////////////////////////////////////////////////
1:             throws SQLException, ClassNotFoundException, IllegalAccessException,
0:             InstantiationException
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                     "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds = new NonJNDIClientDataSource40();
1:         }
1: 
author:Ole Solberg
-------------------------------------------------------------------------------
commit:7ed87c8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
/////////////////////////////////////////////////////////////////////////
1:     private static String dbPath = "UNDEFINED!";
1:     private static String masterHostName = "UNDEFINED!";
1:     private static int masterPortNo = -1;
1:     
1:     {        
1:         masterHostName = System.getProperty("test.serverHost", "localhost");
1:         masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:         dbPath = System.getProperty("test.dbPath", "wombat");
1:         suite.addTest(SimplePerfTest.suite(masterHostName, masterPortNo, dbPath));
1:         // TestSetup setup = TestConfiguration.additionalDatabaseDecorator(suite,dbPath);
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite(String serverHost, int serverPort, String dbPath)
1:     {     
1:         Test t = TestConfiguration.existingServerSuite(SimplePerfTest.class,false,serverHost,serverPort,dbPath);
1:         return SecurityManagerSetup.noSecurityManager(t);
/////////////////////////////////////////////////////////////////////////
1:     {        
1:         String vc = "";
1:         for ( int i=0;i<20000;i++ )
1:         {
1:             vc = vc+"a";
1:         }
1:         Connection conn = clientConnection(masterHostName, masterPortNo, dbPath);
1:         try{
1:         s.executeUpdate("drop table t"); // Should not be required!
1:         } catch (java.sql.SQLException ignore){
1:             System.out.println("'drop table t' caused: "+ignore.getMessage());
1:         }
1:         s.executeUpdate("create table t (i integer primary key, vc varchar(20100))");
1:         PreparedStatement pSt = conn.prepareStatement("insert into t values (?,?)");
1:             pSt.setString(2, vc+i);
1:             try {pSt.execute();}
1:             catch (Exception e) {
1:                 System.out.println("Exception when inserting: " + e.getMessage());
1:                 return;
1:             }
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = clientConnection(masterHostName, masterPortNo, dbPath);
1:         // System.out.println("count: "+count);
1:     }
1:     private Connection clientConnection(String hostName, int portNo, String dbPath)
0:             throws SQLException
1:     {
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
1:         ds.setServerName(hostName);
1:         ds.setPortNumber(portNo);
1:         // ds.setConnectionAttributes(useEncryption(false));
1:         return ds.getConnection();
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class SimplePerfTest extends BaseJDBCTestCase
1: {
1:     
1:     public SimplePerfTest(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:         throws Exception
1:     {
0:         System.out.println("**** SimplePerfTest.suite()");
1:         
0:         String masterHostName = System.getProperty("test.serverHost", "localhost");
0:         int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:         
0:         TestSuite suite = new TestSuite("SimplePerfTest");
1:         
1:         tuplesToInsert = Integer.parseInt(System.getProperty("test.inserts", "1000"));
1:         commitFreq = Integer.parseInt(System.getProperty("test.commitFreq", "0"));
1:         
0:         suite.addTest(SimplePerfTest.suite(masterHostName, masterPortNo));
0:         System.out.println("*** Done suite.addTest(SimplePerfTest.suite())");
1:         
1:         return (Test)suite;
1:     }
1:     private static int tuplesToInsert = 0;
1:     private static int commitFreq = 0; // Means autocommit.
1:     /**
1:      * Adds this class to the *existing server* suite.
1:      */
0:     public static Test suite(String serverHost, int serverPort)
1:     {
0:         System.out.println("*** SimplePerfTest.suite(serverHost,serverPort)");
1:      
0:         Test t = TestConfiguration.existingServerSuite(SimplePerfTest.class,false,serverHost,serverPort);
0:         System.out.println("*** Done TestConfiguration.existingServerSuite(SimplePerfTest.class,false,serverHost,serverPort)");
0:         return t;
1:    }
1:     
1:     /**
1:      *
1:      *
1:      * @throws SQLException, IOException, InterruptedException
1:      */
1:     public void testInserts()
0:     throws SQLException, IOException, InterruptedException
1:     {
0:         System.out.println("**** SimplePerfTest.testInserts() "+
0:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:         
0:         Connection conn = getConnection();
1:         
1:         Statement s = conn.createStatement();
0:         s.executeUpdate("create table t (i integer primary key, vc varchar(20))");
1:         
0:         PreparedStatement pSt = prepareStatement("insert into t values (?,?)");
1:         
1:         conn.setAutoCommit(commitFreq == 0 ? true : false); // commitFreq == 0 means do autocommit
1:         
1:         for (int i=0;i<tuplesToInsert;i++)
1:         {
1:             pSt.setInt(1, i);
0:             pSt.setString(2, "i"+i);
0:             pSt.execute();
1:             // commit after each commitFreq insert
1:             if ((commitFreq != 0) && ((i % commitFreq) == 0)){System.out.println("i: "+i);conn.commit();}
1:         }
1:         
1:         conn.commit();
1:         
1:         ResultSet rs = s.executeQuery("select count(*) from t");
1:         rs.next();
1:         int count = rs.getInt(1);
1:         System.out.println("count: "+count);
0:         // s.executeUpdate("drop table t");
1:     }
1:     public void verifyTestInserts()
0:     throws SQLException, IOException, InterruptedException
1:     {
0:         System.out.println("**** SimplePerfTest.verifyTestInserts() "+
0:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:         
0:         Connection conn = getConnection();
1:         
1:         Statement s = conn.createStatement();
1:         
1:         ResultSet rs = s.executeQuery("select count(*) from t");
1:         rs.next();
1:         int count = rs.getInt(1);
1:         System.out.println("count: "+count);
1:     }
1: }
============================================================================