1:33776ff: /*
17:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetSqldta
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:b13b17c: import org.apache.derby.client.am.SqlException;
1:b13b17c: 
1:33776ff: 
1:0326967: class NetSqldta extends NetCursor {
1:33776ff: 
1:0326967:     NetSqldta(NetAgent netAgent) {
1:70f7692:         super(netAgent);
9:33776ff:     }
1:33776ff: 
1:b13b17c:     public boolean next() throws SqlException {
1:5e88312:         if (allRowsReceivedFromServer()) {
1:70f7692:             return false;
1:70f7692:         } else {
1:5e88312:             setAllRowsReceivedFromServer(true);
1:70f7692:             return true;
1:33776ff:         }
1:33776ff:     }
1:33776ff: 
1:70f7692:     protected boolean calculateColumnOffsetsForRow() {
1:70f7692:         int colNullIndicator = CodePoint.NULLDATA;
1:70f7692:         int length;
1:33776ff: 
1:70f7692:         extdtaPositions_.clear();  // reset positions for this row
1:70f7692: 
1:70f7692:         // read the da null indicator
1:70f7692:         if (readFdocaOneByte() == 0xff) {
1:70f7692:             return false;
1:70f7692:         }
1:70f7692: 
1:70f7692:         incrementRowsReadEvent();
1:70f7692:         // Use the arrays defined on the Cursor for forward-only cursors.
1:70f7692:         // can they ever be null
1:70f7692:         if (columnDataPosition_ == null || columnDataComputedLength_ == null || isNull_ == null) {
1:70f7692:             allocateColumnOffsetAndLengthArrays();
1:70f7692:         }
1:70f7692: 
1:70f7692:         // Loop through the columns
1:70f7692:         for (int index = 0; index < columns_; index++) {
1:70f7692:             // If column is nullable, read the 1-byte null indicator.
1:70f7692:             if (nullable_[index])
1:70f7692:             // Need to pass the column index so all previously calculated offsets can be
1:70f7692:             // readjusted if the query block splits on a column null indicator.
1:70f7692: 
1:70f7692:             // null indicators from FD:OCA data
1:70f7692:             // 0 to 127: a data value will flow.
1:70f7692:             // -1 to -128: no data value will flow.
1:70f7692:             {
1:70f7692:                 colNullIndicator = readFdocaOneByte();
1:70f7692:             }
1:70f7692: 
1:70f7692:             // If non-null column data
1:70f7692:             if (!nullable_[index] || (colNullIndicator >= 0 && colNullIndicator <= 127)) {
1:70f7692:                 isNull_[index] = false;
1:70f7692: 
1:70f7692:                 switch (typeToUseForComputingDataLength_[index]) {
1:70f7692:                 // for variable character string and variable byte string,
1:70f7692:                 // there are 2-byte of length in front of the data
1:70f7692:                 case Typdef.TWOBYTELENGTH:
1:70f7692:                     columnDataPosition_[index] = position_;
1:70f7692:                     length = readFdocaTwoByteLength();
1:70f7692:                     // skip length + the 2-byte length field
1:70f7692:                     if (isGraphic_[index]) {
1:70f7692:                         columnDataComputedLength_[index] = skipFdocaBytes(length * 2) + 2;
1:70f7692:                     } else {
1:70f7692:                         columnDataComputedLength_[index] = skipFdocaBytes(length) + 2;
1:70f7692:                     }
1:70f7692:                     break;
1:70f7692: 
1:70f7692:                     // for short variable character string and short variable byte string,
1:70f7692:                     // there is a 1-byte length in front of the data
1:70f7692:                 case Typdef.ONEBYTELENGTH:
1:70f7692:                     columnDataPosition_[index] = position_;
1:70f7692:                     length = readFdocaOneByte();
1:70f7692:                     // skip length + the 1-byte length field
1:70f7692:                     if (isGraphic_[index]) {
1:70f7692:                         columnDataComputedLength_[index] = skipFdocaBytes(length * 2) + 1;
1:70f7692:                     } else {
1:70f7692:                         columnDataComputedLength_[index] = skipFdocaBytes(length) + 1;
1:70f7692:                     }
1:70f7692:                     break;
1:70f7692: 
1:70f7692:                     // For decimal columns, determine the precision, scale, and the representation
1:70f7692:                 case Typdef.DECIMALLENGTH:
1:70f7692:                     columnDataPosition_[index] = position_;
1:70f7692:                     columnDataComputedLength_[index] = skipFdocaBytes(getDecimalLength(index));
1:70f7692:                     break;
1:70f7692: 
1:70f7692:                 case Typdef.LOBLENGTH:
1:70f7692:                     columnDataPosition_[index] = position_;
1:70f7692:                     columnDataComputedLength_[index] = this.skipFdocaBytes(fdocaLength_[index] & 0x7fff);
1:70f7692:                     break;
1:70f7692: 
1:70f7692:                 default:
1:70f7692:                     columnDataPosition_[index] = position_;
1:70f7692:                     if (isGraphic_[index]) {
1:70f7692:                         columnDataComputedLength_[index] = skipFdocaBytes(fdocaLength_[index] * 2);
1:70f7692:                     } else {
1:70f7692:                         columnDataComputedLength_[index] = skipFdocaBytes(fdocaLength_[index]);
1:70f7692:                     }
1:70f7692:                     break;
1:70f7692:                 }
1:70f7692:             } else if ((colNullIndicator & 0x80) == 0x80) {
1:70f7692:                 // Null data. Set the isNull indicator to true.
1:70f7692:                 isNull_[index] = true;
1:70f7692:             }
1:70f7692:         }
1:70f7692: 
1:5e88312:         if (!allRowsReceivedFromServer()) {
1:70f7692:             calculateLobColumnPositionsForRow();
1:70f7692:         }
1:70f7692: 
1:70f7692:         return true; // hardwired for now, this means the current row position is a valid position
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     private int skipFdocaBytes(int length) {
1:70f7692:         position_ += length;
1:70f7692:         return length;
1:70f7692:     }
1:33776ff: 
1:70f7692:     private int readFdocaOneByte() {
1:70f7692:         return dataBuffer_[position_++] & 0xff;
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     private int readFdocaTwoByteLength() {
1:70f7692:         return
1:70f7692:                 ((dataBuffer_[position_++] & 0xff) << 8) +
1:70f7692:                 ((dataBuffer_[position_++] & 0xff) << 0);
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:33776ff: }
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetSqldta extends NetCursor {
1:     NetSqldta(NetAgent netAgent) {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.SqlException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean next() throws SqlException {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5e88312
/////////////////////////////////////////////////////////////////////////
1:         if (allRowsReceivedFromServer()) {
1:             setAllRowsReceivedFromServer(true);
/////////////////////////////////////////////////////////////////////////
1:         if (!allRowsReceivedFromServer()) {
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class NetSqldta extends NetCursor {
0:     private NetConnection netConnection_;
0:     public NetSqldta(NetAgent netAgent) {
1:         super(netAgent);
0:         netConnection_ = netAgent.netConnection_;
0:     public boolean next() throws org.apache.derby.client.am.SqlException {
0:         if (allRowsReceivedFromServer_) {
1:             return false;
1:         } else {
0:             allRowsReceivedFromServer_ = true;
1:             return true;
1:     protected boolean calculateColumnOffsetsForRow() {
1:         int colNullIndicator = CodePoint.NULLDATA;
1:         int length;
1:         extdtaPositions_.clear();  // reset positions for this row
1: 
1:         // read the da null indicator
1:         if (readFdocaOneByte() == 0xff) {
1:             return false;
1:         }
1: 
1:         incrementRowsReadEvent();
1:         // Use the arrays defined on the Cursor for forward-only cursors.
1:         // can they ever be null
1:         if (columnDataPosition_ == null || columnDataComputedLength_ == null || isNull_ == null) {
1:             allocateColumnOffsetAndLengthArrays();
1:         }
1: 
1:         // Loop through the columns
1:         for (int index = 0; index < columns_; index++) {
1:             // If column is nullable, read the 1-byte null indicator.
1:             if (nullable_[index])
1:             // Need to pass the column index so all previously calculated offsets can be
1:             // readjusted if the query block splits on a column null indicator.
1: 
1:             // null indicators from FD:OCA data
1:             // 0 to 127: a data value will flow.
1:             // -1 to -128: no data value will flow.
1:             {
1:                 colNullIndicator = readFdocaOneByte();
1:             }
1: 
1:             // If non-null column data
1:             if (!nullable_[index] || (colNullIndicator >= 0 && colNullIndicator <= 127)) {
1:                 isNull_[index] = false;
1: 
1:                 switch (typeToUseForComputingDataLength_[index]) {
1:                 // for variable character string and variable byte string,
1:                 // there are 2-byte of length in front of the data
1:                 case Typdef.TWOBYTELENGTH:
1:                     columnDataPosition_[index] = position_;
1:                     length = readFdocaTwoByteLength();
1:                     // skip length + the 2-byte length field
1:                     if (isGraphic_[index]) {
1:                         columnDataComputedLength_[index] = skipFdocaBytes(length * 2) + 2;
1:                     } else {
1:                         columnDataComputedLength_[index] = skipFdocaBytes(length) + 2;
1:                     }
1:                     break;
1: 
1:                     // for short variable character string and short variable byte string,
1:                     // there is a 1-byte length in front of the data
1:                 case Typdef.ONEBYTELENGTH:
1:                     columnDataPosition_[index] = position_;
1:                     length = readFdocaOneByte();
1:                     // skip length + the 1-byte length field
1:                     if (isGraphic_[index]) {
1:                         columnDataComputedLength_[index] = skipFdocaBytes(length * 2) + 1;
1:                     } else {
1:                         columnDataComputedLength_[index] = skipFdocaBytes(length) + 1;
1:                     }
1:                     break;
1: 
1:                     // For decimal columns, determine the precision, scale, and the representation
1:                 case Typdef.DECIMALLENGTH:
1:                     columnDataPosition_[index] = position_;
1:                     columnDataComputedLength_[index] = skipFdocaBytes(getDecimalLength(index));
1:                     break;
1: 
1:                 case Typdef.LOBLENGTH:
1:                     columnDataPosition_[index] = position_;
1:                     columnDataComputedLength_[index] = this.skipFdocaBytes(fdocaLength_[index] & 0x7fff);
1:                     break;
1: 
1:                 default:
1:                     columnDataPosition_[index] = position_;
1:                     if (isGraphic_[index]) {
1:                         columnDataComputedLength_[index] = skipFdocaBytes(fdocaLength_[index] * 2);
1:                     } else {
1:                         columnDataComputedLength_[index] = skipFdocaBytes(fdocaLength_[index]);
1:                     }
1:                     break;
1:                 }
1:             } else if ((colNullIndicator & 0x80) == 0x80) {
1:                 // Null data. Set the isNull indicator to true.
1:                 isNull_[index] = true;
1:             }
1:         }
1: 
0:         if (!allRowsReceivedFromServer_) {
1:             calculateLobColumnPositionsForRow();
1:         }
1: 
1:         return true; // hardwired for now, this means the current row position is a valid position
1:     }
1:     private int skipFdocaBytes(int length) {
1:         position_ += length;
1:         return length;
1:     }
1:     private int readFdocaOneByte() {
1:         return dataBuffer_[position_++] & 0xff;
1:     }
1:     private int readFdocaTwoByteLength() {
1:         return
1:                 ((dataBuffer_[position_++] & 0xff) << 8) +
1:                 ((dataBuffer_[position_++] & 0xff) << 0);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetSqldta
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
1: 
1: 
0: public class NetSqldta extends NetCursor
0: {
0:   private NetConnection netConnection_;
1: 
1: 
0:   public NetSqldta (NetAgent netAgent)
0:   {
0:     super (netAgent);
0:     netConnection_ = netAgent.netConnection_;
1:   }
1: 
0:   public boolean next () throws org.apache.derby.client.am.SqlException
0:   {
0:     if (allRowsReceivedFromServer_)
0:       return false;
0:     else {
0:       allRowsReceivedFromServer_ = true;
0:       return true;
1:     }
1:   }
1: 
0:   protected boolean calculateColumnOffsetsForRow ()
0:   {
0:     int colNullIndicator = CodePoint.NULLDATA;
0:     int length ;
1: 
0:     extdtaPositions_.clear();  // reset positions for this row
1: 
0:     // read the da null indicator
0:     if (readFdocaOneByte() == 0xff)
0:       return false;
1: 
0:     incrementRowsReadEvent();
0:     // Use the arrays defined on the Cursor for forward-only cursors.
0:     // can they ever be null
0:     if (columnDataPosition_ == null || columnDataComputedLength_ == null || isNull_ == null)
0:       allocateColumnOffsetAndLengthArrays ();
1: 
0:     // Loop through the columns
0:     for (int index = 0; index < columns_; index++) {
0:       // If column is nullable, read the 1-byte null indicator.
0:       if (nullable_[index])
0:         // Need to pass the column index so all previously calculated offsets can be
0:         // readjusted if the query block splits on a column null indicator.
1: 
0:         // null indicators from FD:OCA data
0:         // 0 to 127: a data value will flow.
0:         // -1 to -128: no data value will flow.
0:         colNullIndicator = readFdocaOneByte ();
1: 
0:       // If non-null column data
0:       if (!nullable_[index] || (colNullIndicator >= 0 && colNullIndicator <= 127)) {
0:         isNull_[index] = false;
1: 
0:         switch (typeToUseForComputingDataLength_[index]) {
0:         // for variable character string and variable byte string,
0:         // there are 2-byte of length in front of the data
0:         case Typdef.TWOBYTELENGTH:
0:           columnDataPosition_[index] = position_;
0:           length = readFdocaTwoByteLength ();
0:           // skip length + the 2-byte length field
0:           if (isGraphic_[index])
0:             columnDataComputedLength_[index] = skipFdocaBytes (length*2) + 2;
0:           else
0:             columnDataComputedLength_[index] = skipFdocaBytes (length) + 2;
0:           break;
1: 
0:           // for short variable character string and short variable byte string,
0:           // there is a 1-byte length in front of the data
0:         case Typdef.ONEBYTELENGTH:
0:           columnDataPosition_[index] = position_;
0:           length = readFdocaOneByte ();
0:           // skip length + the 1-byte length field
0:           if (isGraphic_[index])
0:             columnDataComputedLength_[index] = skipFdocaBytes (length*2) + 1;
0:           else
0:             columnDataComputedLength_[index] = skipFdocaBytes (length) + 1;
0:           break;
1: 
0:         // For decimal columns, determine the precision, scale, and the representation
0:         case Typdef.DECIMALLENGTH:
0:           columnDataPosition_[index] = position_;
0:           columnDataComputedLength_[index] = skipFdocaBytes (getDecimalLength(index));
0:           break;
1: 
0:         case Typdef.LOBLENGTH:
0:           columnDataPosition_[index] = position_;
0:           columnDataComputedLength_[index] = this.skipFdocaBytes (fdocaLength_[index] & 0x7fff);
0:           break;
1: 
0:         default:
0:           columnDataPosition_[index] = position_;
0:           if (isGraphic_[index])
0:             columnDataComputedLength_[index] = skipFdocaBytes (fdocaLength_[index]*2);
0:           else
0:             columnDataComputedLength_[index] = skipFdocaBytes (fdocaLength_[index]);
0:           break;
1:         }
1:       }
0:       else if ((colNullIndicator & 0x80) == 0x80) {
0:         // Null data. Set the isNull indicator to true.
0:         isNull_[index] = true;
1:       }
1:     }
1: 
0:     if (!allRowsReceivedFromServer_)
0:       calculateLobColumnPositionsForRow();
1: 
0:     return true; // hardwired for now, this means the current row position is a valid position
1:   }
1: 
1: 
1: 
0:   private int skipFdocaBytes (int length)
0:   {
0:     position_ += length;
0:     return length;
1:   }
1: 
0:   private int readFdocaOneByte ()
0:   {
0:     return dataBuffer_[position_++] & 0xff;
1:   }
1: 
1: 
0:   private int readFdocaTwoByteLength ()
0:   {
0:     return
0:       ((dataBuffer_[position_++] & 0xff) << 8) +
0:       ((dataBuffer_[position_++] & 0xff) << 0);
1:   }
1: 
1: 
1: }
1: 
============================================================================