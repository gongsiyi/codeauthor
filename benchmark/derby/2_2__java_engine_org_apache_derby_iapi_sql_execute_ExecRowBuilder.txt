1:959fef2: /*
2:959fef2: 
1:959fef2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecRowBuilder
1:959fef2: 
1:959fef2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:959fef2:    contributor license agreements.  See the NOTICE file distributed with
1:959fef2:    this work for additional information regarding copyright ownership.
1:959fef2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:959fef2:    (the "License"); you may not use this file except in compliance with
1:959fef2:    the License.  You may obtain a copy of the License at
1:959fef2: 
1:959fef2:       http://www.apache.org/licenses/LICENSE-2.0
1:959fef2: 
1:959fef2:    Unless required by applicable law or agreed to in writing, software
1:959fef2:    distributed under the License is distributed on an "AS IS" BASIS,
1:959fef2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:959fef2:    See the License for the specific language governing permissions and
1:959fef2:    limitations under the License.
1:959fef2: 
2:959fef2:  */
1:959fef2: 
1:959fef2: package org.apache.derby.iapi.sql.execute;
1:959fef2: 
1:489530b: import java.io.IOException;
1:489530b: import java.io.ObjectInput;
1:489530b: import java.io.ObjectOutput;
1:959fef2: import org.apache.derby.iapi.error.StandardException;
1:489530b: import org.apache.derby.iapi.services.io.ArrayUtil;
1:489530b: import org.apache.derby.iapi.services.io.Formatable;
1:489530b: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:959fef2: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:959fef2: import org.apache.derby.iapi.types.DataValueDescriptor;
1:959fef2: 
2:959fef2: /**
1:489530b:  * <p>
1:959fef2:  * A class used for storing information on how to build {@code ExecRow}
1:959fef2:  * instances. Typically created by the compiler and used during execution
1:959fef2:  * to produce and reset row templates.
1:489530b:  * </p>
1:489530b:  *
1:489530b:  * <p>
1:489530b:  * This class must be {@code Formatable} so that it can be stored in the
1:489530b:  * database as part of a stored prepared statement generated for trigger
1:489530b:  * actions or metadata queries. The stored format does not need to be stable
1:489530b:  * across different versions, since the stored prepared statements are
1:489530b:  * discarded on upgrade and will never be read by other Derby versions than
1:489530b:  * the one that originally wrote them.
1:489530b:  * </p>
1:959fef2:  */
1:489530b: public class ExecRowBuilder implements Formatable {
1:959fef2: 
1:959fef2:     /** If true, the row should be an {@code ExecIndexRow}. */
1:489530b:     private boolean indexable;
1:959fef2: 
1:959fef2:     /**
1:959fef2:      * Array of templates used for creating NULL values to put in the row.
1:959fef2:      * The templates are either {@code DataValueDescriptor}s or
1:959fef2:      * {@code DataTypeDescriptor}s.
1:959fef2:      */
1:489530b:     private Object[] template;
1:959fef2: 
1:959fef2:     /** Array of 1-based column numbers for the columns to access. */
1:489530b:     private int[] columns;
1:959fef2: 
1:959fef2:     /** The number of columns to set in the row. */
1:959fef2:     private int count;
1:959fef2: 
1:959fef2:     /** The highest column number in the row. */
1:959fef2:     private int maxColumnNumber;
1:959fef2: 
1:959fef2:     /**
1:959fef2:      * Create an instance that produces an {@code ExecRow} instance of
1:959fef2:      * the specified size.
1:959fef2:      *
1:959fef2:      * @param size the number of columns to initialize in the produced row
1:959fef2:      * @param indexable {@code true} if the returned row should be an
1:959fef2:      * {@code ExecIndexRow}, {@code false} otherwise
1:959fef2:      */
1:959fef2:     public ExecRowBuilder(int size, boolean indexable) {
1:959fef2:         this.template = new Object[size];
1:959fef2:         this.columns = new int[size];
1:959fef2:         this.indexable = indexable;
1:959fef2:     }
1:959fef2: 
1:959fef2:     /**
1:489530b:      * Public no-arg constructor required by the {@code Formatable} interface.
1:489530b:      * Should not be called directly.
1:489530b:      */
1:489530b:     public ExecRowBuilder() {
1:489530b:     }
1:489530b: 
1:489530b:     /**
1:959fef2:      * Add a template from which a NULL value of the correct type can be
1:959fef2:      * created. It should either be a {@code DataValueDescriptor} or a
1:959fef2:      * {@code DataTypeDescriptor}.
1:959fef2:      *
1:959fef2:      * @param column the column number
1:959fef2:      * @param columnTemplate a template from which a NULL value can be created
1:959fef2:      * (either a {@code DataValueDescriptor} or a {@code DataTypeDescriptor})
1:959fef2:      */
1:959fef2:     public void setColumn(int column, Object columnTemplate) {
1:959fef2:         if (SanityManager.DEBUG &&
1:959fef2:                 !(columnTemplate instanceof DataTypeDescriptor) &&
1:959fef2:                 !(columnTemplate instanceof DataValueDescriptor)) {
1:959fef2:             SanityManager.THROWASSERT(
1:959fef2:                 "Expected DataTypeDescriptor or DataValueDescriptor. Got: " +
1:959fef2:                 ((columnTemplate == null) ? columnTemplate :
1:959fef2:                     columnTemplate.getClass().getName()));
1:959fef2:         }
1:959fef2:         template[count] = columnTemplate;
1:959fef2:         columns[count] = column;
1:959fef2:         count++;
1:959fef2:         maxColumnNumber = Math.max(maxColumnNumber, column);
1:959fef2:     }
1:959fef2: 
1:959fef2:     /**
1:959fef2:      * Build a new {@code ExecRow} instance with the columns specified by
1:959fef2:      * the {@link #setColumn(int, Object)} method initialized to empty (NULL)
1:959fef2:      * values.
1:959fef2:      *
1:959fef2:      * @param ef an execution factory used to create a row
1:959fef2:      * @return a row initialized with NULL values of the requested types
1:959fef2:      */
1:959fef2:     public ExecRow build(ExecutionFactory ef) throws StandardException {
1:959fef2:         ExecRow row = indexable ?
1:959fef2:                 ef.getIndexableRow(maxColumnNumber) :
1:959fef2:                 ef.getValueRow(maxColumnNumber);
1:959fef2: 
1:959fef2:         for (int i = 0; i < count; i++) {
1:959fef2:             Object o = template[i];
1:959fef2:             DataValueDescriptor dvd = (o instanceof DataValueDescriptor) ?
1:959fef2:                     ((DataValueDescriptor) o).getNewNull() :
1:959fef2:                     ((DataTypeDescriptor) o).getNull();
1:959fef2:             row.setColumn(columns[i], dvd);
1:959fef2:         }
1:959fef2: 
1:959fef2:         return row;
1:959fef2:     }
1:959fef2: 
1:959fef2:     /**
1:959fef2:      * Reset a row by creating fresh NULL values.
1:959fef2:      * @param row the row to reset
1:959fef2:      */
1:959fef2:     public void reset(ExecRow row) throws StandardException {
1:959fef2:         for (int i = 0; i < count; i++) {
1:959fef2:             int col = columns[i];
1:959fef2:             row.setColumn(col, row.getColumn(col).getNewNull());
1:959fef2:         }
1:959fef2:     }
1:489530b: 
1:489530b:     // Methods required by the Formatable interface.
1:489530b: 
1:489530b:     @Override
1:489530b:     public void writeExternal(ObjectOutput out) throws IOException {
1:489530b:         out.writeBoolean(indexable);
1:489530b:         ArrayUtil.writeArray(out, template);
1:489530b:         out.writeObject(columns);
1:489530b:         out.writeInt(count);
1:489530b:         out.writeInt(maxColumnNumber);
1:489530b:     }
1:489530b: 
1:489530b:     @Override
1:489530b:     public void readExternal(ObjectInput in)
1:489530b:             throws IOException, ClassNotFoundException {
1:489530b:         indexable = in.readBoolean();
1:489530b:         template = ArrayUtil.readObjectArray(in);
1:489530b:         columns = (int[]) in.readObject();
1:489530b:         count = in.readInt();
1:489530b:         maxColumnNumber = in.readInt();
1:489530b:     }
1:489530b: 
1:489530b:     @Override
1:489530b:     public int getTypeFormatId() {
1:489530b:         return StoredFormatIds.EXEC_ROW_BUILDER_ID;
1:489530b:     }
1:959fef2: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:489530b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:  * <p>
1:  * </p>
1:  *
1:  * <p>
1:  * This class must be {@code Formatable} so that it can be stored in the
1:  * database as part of a stored prepared statement generated for trigger
1:  * actions or metadata queries. The stored format does not need to be stable
1:  * across different versions, since the stored prepared statements are
1:  * discarded on upgrade and will never be read by other Derby versions than
1:  * the one that originally wrote them.
1:  * </p>
1: public class ExecRowBuilder implements Formatable {
1:     private boolean indexable;
1:     private Object[] template;
1:     private int[] columns;
/////////////////////////////////////////////////////////////////////////
1:      * Public no-arg constructor required by the {@code Formatable} interface.
1:      * Should not be called directly.
1:      */
1:     public ExecRowBuilder() {
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Methods required by the Formatable interface.
1: 
1:     @Override
1:     public void writeExternal(ObjectOutput out) throws IOException {
1:         out.writeBoolean(indexable);
1:         ArrayUtil.writeArray(out, template);
1:         out.writeObject(columns);
1:         out.writeInt(count);
1:         out.writeInt(maxColumnNumber);
1:     }
1: 
1:     @Override
1:     public void readExternal(ObjectInput in)
1:             throws IOException, ClassNotFoundException {
1:         indexable = in.readBoolean();
1:         template = ArrayUtil.readObjectArray(in);
1:         columns = (int[]) in.readObject();
1:         count = in.readInt();
1:         maxColumnNumber = in.readInt();
1:     }
1: 
1:     @Override
1:     public int getTypeFormatId() {
1:         return StoredFormatIds.EXEC_ROW_BUILDER_ID;
1:     }
commit:959fef2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecRowBuilder
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
0: import java.io.Serializable;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1:  * A class used for storing information on how to build {@code ExecRow}
1:  * instances. Typically created by the compiler and used during execution
1:  * to produce and reset row templates.
1:  */
0: public class ExecRowBuilder implements Serializable {
1: 
1:     /**
0:      * Serial version produced by the serialver utility. Needed in order to
0:      * make serialization work reliably across different compilers.
1:      */
0:     private static final long serialVersionUID = -1078823466492523202L;
1: 
1:     /** If true, the row should be an {@code ExecIndexRow}. */
0:     private final boolean indexable;
1: 
1:     /**
1:      * Array of templates used for creating NULL values to put in the row.
1:      * The templates are either {@code DataValueDescriptor}s or
1:      * {@code DataTypeDescriptor}s.
1:      */
0:     private final Object[] template;
1: 
1:     /** Array of 1-based column numbers for the columns to access. */
0:     private final int[] columns;
1: 
1:     /** The number of columns to set in the row. */
1:     private int count;
1: 
1:     /** The highest column number in the row. */
1:     private int maxColumnNumber;
1: 
1:     /**
1:      * Create an instance that produces an {@code ExecRow} instance of
1:      * the specified size.
1:      *
1:      * @param size the number of columns to initialize in the produced row
1:      * @param indexable {@code true} if the returned row should be an
1:      * {@code ExecIndexRow}, {@code false} otherwise
1:      */
1:     public ExecRowBuilder(int size, boolean indexable) {
1:         this.template = new Object[size];
1:         this.columns = new int[size];
1:         this.indexable = indexable;
1:     }
1: 
1:     /**
1:      * Add a template from which a NULL value of the correct type can be
1:      * created. It should either be a {@code DataValueDescriptor} or a
1:      * {@code DataTypeDescriptor}.
1:      *
1:      * @param column the column number
1:      * @param columnTemplate a template from which a NULL value can be created
1:      * (either a {@code DataValueDescriptor} or a {@code DataTypeDescriptor})
1:      */
1:     public void setColumn(int column, Object columnTemplate) {
1:         if (SanityManager.DEBUG &&
1:                 !(columnTemplate instanceof DataTypeDescriptor) &&
1:                 !(columnTemplate instanceof DataValueDescriptor)) {
1:             SanityManager.THROWASSERT(
1:                 "Expected DataTypeDescriptor or DataValueDescriptor. Got: " +
1:                 ((columnTemplate == null) ? columnTemplate :
1:                     columnTemplate.getClass().getName()));
1:         }
1:         template[count] = columnTemplate;
1:         columns[count] = column;
1:         count++;
1:         maxColumnNumber = Math.max(maxColumnNumber, column);
1:     }
1: 
1:     /**
1:      * Build a new {@code ExecRow} instance with the columns specified by
1:      * the {@link #setColumn(int, Object)} method initialized to empty (NULL)
1:      * values.
1:      *
1:      * @param ef an execution factory used to create a row
1:      * @return a row initialized with NULL values of the requested types
1:      */
1:     public ExecRow build(ExecutionFactory ef) throws StandardException {
1:         ExecRow row = indexable ?
1:                 ef.getIndexableRow(maxColumnNumber) :
1:                 ef.getValueRow(maxColumnNumber);
1: 
1:         for (int i = 0; i < count; i++) {
1:             Object o = template[i];
1:             DataValueDescriptor dvd = (o instanceof DataValueDescriptor) ?
1:                     ((DataValueDescriptor) o).getNewNull() :
1:                     ((DataTypeDescriptor) o).getNull();
1:             row.setColumn(columns[i], dvd);
1:         }
1: 
1:         return row;
1:     }
1: 
1:     /**
1:      * Reset a row by creating fresh NULL values.
1:      * @param row the row to reset
1:      */
1:     public void reset(ExecRow row) throws StandardException {
1:         for (int i = 0; i < count; i++) {
1:             int col = columns[i];
1:             row.setColumn(col, row.getColumn(col).getNewNull());
1:         }
1:     }
1: }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
============================================================================