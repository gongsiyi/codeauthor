1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextService;
1:3bb140c: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Defintion for the MAX()/MIN() aggregates.
1:eac0369:  *
1:eac0369:  */
1:3bb140c: class MaxMinAggregateDefinition
1:eac0369: 		implements AggregateDefinition 
1:eac0369: {
1:eac0369: 	private boolean isMax;
1:eac0369:   
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor.  Does nothing.  For ease
1:eac0369: 	 * Of use, only.
1:eac0369: 	 */
1:4469400:     public MaxMinAggregateDefinition() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Determines the result datatype.  Accept NumberDataValues
1:eac0369: 	 * only.  
1:eac0369: 	 * <P>
1:eac0369: 	 * <I>Note</I>: In the future you should be able to do
1:eac0369: 	 * a sum user data types.  One option would be to run
1:eac0369: 	 * sum on anything that implements divide().  
1:eac0369: 	 *
1:6b50965: 	 * @param inputType	the input type, either a user type or a java.lang object
1:eac0369: 	 *
1:eac0369: 	 * @return the output Class (null if cannot operate on
1:eac0369: 	 *	value expression of this type.
1:eac0369: 	 */
1:85ddc17: 	public final DataTypeDescriptor	getAggregator(DataTypeDescriptor inputType, 
1:eac0369: 				StringBuffer aggregatorClass) 
1:eac0369: 	{
1:eac0369: 		LanguageConnectionContext lcc = (LanguageConnectionContext)
1:a0dbbd7: 			QueryTreeNode.getContext(LanguageConnectionContext.CONTEXT_ID);
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** MIN and MAX may return null
1:eac0369: 			*/
1:85ddc17: 		DataTypeDescriptor dts = inputType.getNullabilityType(true);
1:eac0369: 		TypeId compType = dts.getTypeId();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the class implements NumberDataValue, then we
1:eac0369: 		** are in business.  Return type is same as input
1:eac0369: 		** type.
1:eac0369: 		*/
1:eac0369: 		if (compType.orderable(
1:eac0369: 						lcc.getLanguageConnectionFactory().getClassFactory()))
1:eac0369: 		{
1:eac0369: 			aggregatorClass.append(ClassName.MaxMinAggregator);
1:eac0369: 			
1:eac0369: 			return dts;
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This is set by the parser.
1:eac0369: 	 */
1:3bb140c:     final void setMaxOrMin(boolean isMax)
1:eac0369: 	{
1:eac0369: 		this.isMax = isMax;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return if the aggregator class is for min/max.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean true/false
1:eac0369: 	 */
1:3bb140c:     final boolean isMax()
1:eac0369: 	{
1:eac0369: 		return(isMax);
1:eac0369: 	}
1:a0dbbd7:     
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:     public MaxMinAggregateDefinition() { super(); }
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1: 			QueryTreeNode.getContext(LanguageConnectionContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1:     
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: class MaxMinAggregateDefinition
/////////////////////////////////////////////////////////////////////////
0:     MaxMinAggregateDefinition() { super(); }
/////////////////////////////////////////////////////////////////////////
1:     final void setMaxOrMin(boolean isMax)
/////////////////////////////////////////////////////////////////////////
1:     final boolean isMax()
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:85ddc17
/////////////////////////////////////////////////////////////////////////
1: 	public final DataTypeDescriptor	getAggregator(DataTypeDescriptor inputType, 
/////////////////////////////////////////////////////////////////////////
1: 		DataTypeDescriptor dts = inputType.getNullabilityType(true);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.impl.sql.execute.MaxMinAggregator;
1: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
1: /**
1:  * Defintion for the MAX()/MIN() aggregates.
1:  *
0:  * @author jamie
1:  */
0: public class MaxMinAggregateDefinition 
1: 		implements AggregateDefinition 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	private boolean isMax;
1:   
1: 	/**
1: 	 * Niladic constructor.  Does nothing.  For ease
1: 	 * Of use, only.
1: 	 */
0: 	public MaxMinAggregateDefinition() { super(); }
1: 
1: 	/**
1: 	 * Determines the result datatype.  Accept NumberDataValues
1: 	 * only.  
1: 	 * <P>
1: 	 * <I>Note</I>: In the future you should be able to do
1: 	 * a sum user data types.  One option would be to run
1: 	 * sum on anything that implements divide().  
1: 	 *
0: 	 * @param the input type, either a user type or a java.lang object
0: 	 * @param implementsInterface	the interface it implements
1: 	 *
1: 	 * @return the output Class (null if cannot operate on
1: 	 *	value expression of this type.
1: 	 */
0: 	public final TypeDescriptor	getAggregator(TypeDescriptor inputType, 
1: 				StringBuffer aggregatorClass) 
1: 	{
1: 		LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 			ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);
1: 
1: 			/*
1: 			** MIN and MAX may return null
1: 			*/
0: 		DataTypeDescriptor dts = new DataTypeDescriptor((DataTypeDescriptor) inputType, true);
1: 		TypeId compType = dts.getTypeId();
1: 
1: 		/*
1: 		** If the class implements NumberDataValue, then we
1: 		** are in business.  Return type is same as input
1: 		** type.
1: 		*/
1: 		if (compType.orderable(
1: 						lcc.getLanguageConnectionFactory().getClassFactory()))
1: 		{
1: 			aggregatorClass.append(ClassName.MaxMinAggregator);
1: 			
1: 			return dts;
1: 		}
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * This is set by the parser.
1: 	 */
0: 	public final void setMaxOrMin(boolean isMax)
1: 	{
1: 		this.isMax = isMax;
1: 	}
1: 
1: 	/**
1: 	 * Return if the aggregator class is for min/max.
1: 	 *
1: 	 * @return boolean true/false
1: 	 */
0: 	public final boolean isMax()
1: 	{
1: 		return(isMax);
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param inputType	the input type, either a user type or a java.lang object
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.impl.sql.execute.MaxMinAggregator;
0: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: /**
0:  * Defintion for the MAX()/MIN() aggregates.
0:  *
0:  * @author jamie
0:  */
0: public class MaxMinAggregateDefinition 
0: 		implements AggregateDefinition 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	private boolean isMax;
0:   
0: 	/**
0: 	 * Niladic constructor.  Does nothing.  For ease
0: 	 * Of use, only.
0: 	 */
0: 	public MaxMinAggregateDefinition() { super(); }
0: 
0: 	/**
0: 	 * Determines the result datatype.  Accept NumberDataValues
0: 	 * only.  
0: 	 * <P>
0: 	 * <I>Note</I>: In the future you should be able to do
0: 	 * a sum user data types.  One option would be to run
0: 	 * sum on anything that implements divide().  
0: 	 *
0: 	 * @param the input type, either a user type or a java.lang object
0: 	 * @param implementsInterface	the interface it implements
0: 	 *
0: 	 * @return the output Class (null if cannot operate on
0: 	 *	value expression of this type.
0: 	 */
0: 	public final TypeDescriptor	getAggregator(TypeDescriptor inputType, 
0: 				StringBuffer aggregatorClass) 
0: 	{
0: 		LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 			ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);
0: 
0: 			/*
0: 			** MIN and MAX may return null
0: 			*/
0: 		DataTypeDescriptor dts = new DataTypeDescriptor((DataTypeDescriptor) inputType, true);
0: 		TypeId compType = dts.getTypeId();
0: 
0: 		/*
0: 		** If the class implements NumberDataValue, then we
0: 		** are in business.  Return type is same as input
0: 		** type.
0: 		*/
0: 		if (compType.orderable(
0: 						lcc.getLanguageConnectionFactory().getClassFactory()))
0: 		{
0: 			aggregatorClass.append(ClassName.MaxMinAggregator);
0: 			
0: 			return dts;
0: 		}
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * This is set by the parser.
0: 	 */
0: 	public final void setMaxOrMin(boolean isMax)
0: 	{
0: 		this.isMax = isMax;
0: 	}
0: 
0: 	/**
0: 	 * Return if the aggregator class is for min/max.
0: 	 *
0: 	 * @return boolean true/false
0: 	 */
0: 	public final boolean isMax()
0: 	{
0: 		return(isMax);
0: 	}
0: }
============================================================================