1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.TransactionManager
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access.conglomerate;
1:eac0369: 
1:888d12e: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.access.SortController;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
4:eac0369: /**
1:eac0369: 
1:eac0369: The TransactionManager interface provides methods on the transaction needed
1:eac0369: by an access method implementer, but should not be visible to clients of a
1:eac0369: TransactionController.
1:eac0369: <p>
1:eac0369: @see TransactionController
1:eac0369: 
3:eac0369: **/
1:eac0369: 
1:eac0369: public interface TransactionManager extends TransactionController
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Constant used for the lock_level argument to openConglomerate() and 
1:eac0369:      * openScan() calls.  Pass in MODE_NONE if you want no table or row locks.
1:eac0369:      * This is currently only supported from within access.
1:eac0369:      **/
1:eac0369: 	static final int MODE_NONE      = 5;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * release lock immediately after getting lock.
1:eac0369:      **/
1:eac0369:     public static final int LOCK_INSTANT_DURATION   = 1;
1:eac0369:     /**
1:eac0369:      * hold lock until end of transaction.
1:eac0369:      **/
1:eac0369:     public static final int LOCK_COMMIT_DURATION    = 2;
1:eac0369:     /**
1:eac0369:      * Allow lock to be released manually prior to end transaction.
1:eac0369:      **/
1:eac0369:     public static final int LOCK_MANUAL_DURATION    = 3;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Add to the list of post commit work.
5:eac0369:      * <p>
1:eac0369:      * Add to the list of post commit work that may be processed after this
1:eac0369:      * transaction commits.  If this transaction aborts, then the post commit
1:eac0369:      * work list will be thrown away.  No post commit work will be taken out
1:eac0369:      * on a rollback to save point.
1:eac0369:      * <p>
1:eac0369:      * This routine simply delegates the work to the Rawstore transaction.
4:eac0369:      *
1:eac0369:      * @param work  The post commit work to do.
1:eac0369:      *
1:eac0369:      **/
1:eac0369: 	public void addPostCommitWork(Serviceable work);
1:eac0369: 
1:eac0369:     /**
1:b61f876:      *  Check to see if a database has been upgraded to the required
1:b61f876:      *  level in order to use a store feature.
1:b61f876:      *
1:b61f876:      * @param requiredMajorVersion  required database Engine major version
1:b61f876:      * @param requiredMinorVersion  required database Engine minor version
1:b61f876:      * @param feature               Non-null to throw an exception, null to 
1:b61f876:      *                              return the state of the version match.
1:b61f876:      *
1:b61f876:      * @return <code> true </code> if the database has been upgraded to 
1:b61f876:      *         the required level, <code> false </code> otherwise.
1:b61f876:      *
1:b61f876:      * @exception  StandardException 
1:b61f876:      *             if the database is not at the require version 
1:b61f876:      *             when <code>feature</code> feature is 
1:b61f876:      *             not <code> null </code>. 
1:b61f876:      */
1:b61f876: 	public boolean checkVersion(
1:b61f876:     int     requiredMajorVersion, 
1:b61f876:     int     requiredMinorVersion, 
1:b61f876:     String  feature) 
1:b61f876:         throws StandardException;
1:b61f876: 
1:b61f876:     /**
1:eac0369:      * The ScanManager.close() method has been called on "scan".
1:eac0369:      * <p>
1:eac0369:      * Take whatever cleanup action is appropriate to a closed scan.  It is
1:eac0369:      * likely this routine will remove references to the scan object that it
1:eac0369:      * was maintaining for cleanup purposes.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public void closeMe(ScanManager scan);
1:b61f876: 
1:eac0369:     /**
1:eac0369:      * The ConglomerateController.close() method has been called on 
1:eac0369:      * "conglom_control".
1:eac0369:      * <p>
1:eac0369:      * Take whatever cleanup action is appropriate to a closed 
1:eac0369:      * conglomerateController.  It is likely this routine will remove
1:eac0369:      * references to the ConglomerateController object that it was maintaining
1:eac0369:      * for cleanup purposes.
1:eac0369:      **/
1:eac0369:     public void closeMe(ConglomerateController conglom_control);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The SortController.close() method has been called on "sort_control".
1:eac0369:      * <p>
1:eac0369:      * Take whatever cleanup action is appropriate to a closed 
1:eac0369:      * sortController.  It is likely this routine will remove
1:eac0369:      * references to the SortController object that it was maintaining
1:eac0369:      * for cleanup purposes.
1:eac0369:      **/
1:eac0369:     public void closeMe(SortController sort_control);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get an Internal transaction.
1:eac0369:      * <p>
1:eac0369:      * Start an internal transaction.  An internal transaction is a completely
1:eac0369:      * separate transaction from the current user transaction.  All work done
1:eac0369:      * in the internal transaction must be physical (ie. it can be undone 
1:eac0369:      * physically by the rawstore at the page level, rather than logically 
1:eac0369:      * undone like btree insert/delete operations).  The rawstore guarantee's
1:eac0369:      * that in the case of a system failure all open Internal transactions are
1:eac0369:      * first undone in reverse order, and then other transactions are undone
1:eac0369:      * in reverse order.
1:eac0369:      * <p>
1:eac0369:      * Internal transactions are meant to implement operations which, if 
1:eac0369:      * interupted before completion will cause logical operations like tree
1:eac0369:      * searches to fail.  This special undo order insures that the state of
1:eac0369:      * the tree is restored to a consistent state before any logical undo 
1:eac0369:      * operation which may need to search the tree is performed.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The new internal transaction.
1:eac0369:      *
2:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public TransactionManager getInternalTransaction()
2:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the Transaction from the Transaction manager.
1:eac0369:      * <p>
1:eac0369:      * Access methods often need direct access to the "Transaction" - ie. the
1:eac0369:      * raw store transaction, so give access to it.
1:eac0369:      *
1:eac0369: 	 * @return The raw store transaction.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public Transaction getRawStoreXact()
1:eac0369:         throws StandardException;
1:888d12e: 
1:888d12e:     /**
1:888d12e:      * Return existing Conglomerate after doing lookup by ContainerKey
1:888d12e:      * <p>
1:888d12e:      * Throws exception if it can't find a matching conglomerate for the 
1:888d12e:      * ContainerKey.
1:888d12e:      * 
1:888d12e:      * @return If successful returns 
1:888d12e:      *
1:888d12e:      * @param container_key  container key of target conglomerate.
1:888d12e:      *
1:888d12e:      * @exception  StandardException  Standard exception policy.
1:888d12e:      **/
1:888d12e: 	public Conglomerate findExistingConglomerateFromKey(
1:888d12e:     ContainerKey container_key)
1:888d12e: 		throws StandardException;
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:888d12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.ContainerKey;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return existing Conglomerate after doing lookup by ContainerKey
1:      * <p>
1:      * Throws exception if it can't find a matching conglomerate for the 
1:      * ContainerKey.
1:      * 
1:      * @return If successful returns 
1:      *
1:      * @param container_key  container key of target conglomerate.
1:      *
1:      * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public Conglomerate findExistingConglomerateFromKey(
1:     ContainerKey container_key)
1: 		throws StandardException;
commit:b61f876
/////////////////////////////////////////////////////////////////////////
1:      *  Check to see if a database has been upgraded to the required
1:      *  level in order to use a store feature.
1:      *
1:      * @param requiredMajorVersion  required database Engine major version
1:      * @param requiredMinorVersion  required database Engine minor version
1:      * @param feature               Non-null to throw an exception, null to 
1:      *                              return the state of the version match.
1:      *
1:      * @return <code> true </code> if the database has been upgraded to 
1:      *         the required level, <code> false </code> otherwise.
1:      *
1:      * @exception  StandardException 
1:      *             if the database is not at the require version 
1:      *             when <code>feature</code> feature is 
1:      *             not <code> null </code>. 
1:      */
1: 	public boolean checkVersion(
1:     int     requiredMajorVersion, 
1:     int     requiredMinorVersion, 
1:     String  feature) 
1:         throws StandardException;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
commit:12c6ed9
/////////////////////////////////////////////////////////////////////////
0:      * @param conglom   Conglomerate object of the conglomerate being changed.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e051f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1985a18
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.TransactionManager
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.SortController;
1: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 
1: The TransactionManager interface provides methods on the transaction needed
1: by an access method implementer, but should not be visible to clients of a
1: TransactionController.
1: <p>
1: @see TransactionController
1: 
1: **/
1: 
1: public interface TransactionManager extends TransactionController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     /**
1:      * Constant used for the lock_level argument to openConglomerate() and 
1:      * openScan() calls.  Pass in MODE_NONE if you want no table or row locks.
1:      * This is currently only supported from within access.
1:      **/
1: 	static final int MODE_NONE      = 5;
1: 
1:     /**
1:      * release lock immediately after getting lock.
1:      **/
1:     public static final int LOCK_INSTANT_DURATION   = 1;
1:     /**
1:      * hold lock until end of transaction.
1:      **/
1:     public static final int LOCK_COMMIT_DURATION    = 2;
1:     /**
1:      * Allow lock to be released manually prior to end transaction.
1:      **/
1:     public static final int LOCK_MANUAL_DURATION    = 3;
1: 
1:     /**
1:      * Add to the list of post commit work.
1:      * <p>
1:      * Add to the list of post commit work that may be processed after this
1:      * transaction commits.  If this transaction aborts, then the post commit
1:      * work list will be thrown away.  No post commit work will be taken out
1:      * on a rollback to save point.
1:      * <p>
1:      * This routine simply delegates the work to the Rawstore transaction.
1:      *
1:      * @param work  The post commit work to do.
1:      *
1:      **/
1: 	public void addPostCommitWork(Serviceable work);
1: 
1:     /**
1:      * The ScanManager.close() method has been called on "scan".
1:      * <p>
1:      * Take whatever cleanup action is appropriate to a closed scan.  It is
1:      * likely this routine will remove references to the scan object that it
1:      * was maintaining for cleanup purposes.
1:      *
1:      **/
1:     public void closeMe(ScanManager scan);
1: 
1:     /**
1:      * The ConglomerateController.close() method has been called on 
1:      * "conglom_control".
1:      * <p>
1:      * Take whatever cleanup action is appropriate to a closed 
1:      * conglomerateController.  It is likely this routine will remove
1:      * references to the ConglomerateController object that it was maintaining
1:      * for cleanup purposes.
1:      **/
1:     public void closeMe(ConglomerateController conglom_control);
1: 
1:     /**
1:      * The SortController.close() method has been called on "sort_control".
1:      * <p>
1:      * Take whatever cleanup action is appropriate to a closed 
1:      * sortController.  It is likely this routine will remove
1:      * references to the SortController object that it was maintaining
1:      * for cleanup purposes.
1:      **/
1:     public void closeMe(SortController sort_control);
1: 
1:     /**
0:      * Get reference to access factory which started this transaction.
1:      * <p>
1:      *
0: 	 * @return The AccessFactory which started this transaction.
1:      **/
0:     public AccessFactory getAccessManager();
1: 
1:     /**
1:      * Get an Internal transaction.
1:      * <p>
1:      * Start an internal transaction.  An internal transaction is a completely
1:      * separate transaction from the current user transaction.  All work done
1:      * in the internal transaction must be physical (ie. it can be undone 
1:      * physically by the rawstore at the page level, rather than logically 
1:      * undone like btree insert/delete operations).  The rawstore guarantee's
1:      * that in the case of a system failure all open Internal transactions are
1:      * first undone in reverse order, and then other transactions are undone
1:      * in reverse order.
1:      * <p>
1:      * Internal transactions are meant to implement operations which, if 
1:      * interupted before completion will cause logical operations like tree
1:      * searches to fail.  This special undo order insures that the state of
1:      * the tree is restored to a consistent state before any logical undo 
1:      * operation which may need to search the tree is performed.
1:      * <p>
1:      *
1: 	 * @return The new internal transaction.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public TransactionManager getInternalTransaction()
1:         throws StandardException;
1: 
1:     /**
1:      * Get the Transaction from the Transaction manager.
1:      * <p>
1:      * Access methods often need direct access to the "Transaction" - ie. the
1:      * raw store transaction, so give access to it.
1:      *
1: 	 * @return The raw store transaction.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public Transaction getRawStoreXact()
1:         throws StandardException;
1: 
1:     /**
0:      * Do work necessary to maintain the current position in all the scans.
1:      * <p>
0:      * The latched page in the conglomerate "congomid" is changing, do
0:      * whatever is necessary to maintain the current position of all the
0:      * scans open in this transaction.
1:      * <p>
0:      * For some conglomerates this may be a no-op.
1:      * <p>
1:      *
0:      * @param conlgom   Conglomerate object of the conglomerate being changed.
0:      * @param page      Page in the conglomerate being changed.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public void saveScanPositions(Conglomerate conglom, Page page)
1:         throws StandardException;
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.SortController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 
0: The TransactionManager interface provides methods on the transaction needed
0: by an access method implementer, but should not be visible to clients of a
0: TransactionController.
0: <p>
0: @see TransactionController
0: 
0: **/
0: 
0: public interface TransactionManager extends TransactionController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     /**
0:      * Constant used for the lock_level argument to openConglomerate() and 
0:      * openScan() calls.  Pass in MODE_NONE if you want no table or row locks.
0:      * This is currently only supported from within access.
0:      **/
0: 	static final int MODE_NONE      = 5;
0: 
0:     /**
0:      * release lock immediately after getting lock.
0:      **/
0:     public static final int LOCK_INSTANT_DURATION   = 1;
0:     /**
0:      * hold lock until end of transaction.
0:      **/
0:     public static final int LOCK_COMMIT_DURATION    = 2;
0:     /**
0:      * Allow lock to be released manually prior to end transaction.
0:      **/
0:     public static final int LOCK_MANUAL_DURATION    = 3;
0: 
0:     /**
0:      * Add to the list of post commit work.
0:      * <p>
0:      * Add to the list of post commit work that may be processed after this
0:      * transaction commits.  If this transaction aborts, then the post commit
0:      * work list will be thrown away.  No post commit work will be taken out
0:      * on a rollback to save point.
0:      * <p>
0:      * This routine simply delegates the work to the Rawstore transaction.
0:      *
0:      * @param work  The post commit work to do.
0:      *
0:      **/
0: 	public void addPostCommitWork(Serviceable work);
0: 
0:     /**
0:      * The ScanManager.close() method has been called on "scan".
0:      * <p>
0:      * Take whatever cleanup action is appropriate to a closed scan.  It is
0:      * likely this routine will remove references to the scan object that it
0:      * was maintaining for cleanup purposes.
0:      *
0:      **/
0:     public void closeMe(ScanManager scan);
0: 
0:     /**
0:      * The ConglomerateController.close() method has been called on 
0:      * "conglom_control".
0:      * <p>
0:      * Take whatever cleanup action is appropriate to a closed 
0:      * conglomerateController.  It is likely this routine will remove
0:      * references to the ConglomerateController object that it was maintaining
0:      * for cleanup purposes.
0:      **/
0:     public void closeMe(ConglomerateController conglom_control);
0: 
0:     /**
0:      * The SortController.close() method has been called on "sort_control".
0:      * <p>
0:      * Take whatever cleanup action is appropriate to a closed 
0:      * sortController.  It is likely this routine will remove
0:      * references to the SortController object that it was maintaining
0:      * for cleanup purposes.
0:      **/
0:     public void closeMe(SortController sort_control);
0: 
0:     /**
0:      * Get reference to access factory which started this transaction.
0:      * <p>
0:      *
0: 	 * @return The AccessFactory which started this transaction.
0:      **/
0:     public AccessFactory getAccessManager();
0: 
0:     /**
0:      * Get an Internal transaction.
0:      * <p>
0:      * Start an internal transaction.  An internal transaction is a completely
0:      * separate transaction from the current user transaction.  All work done
0:      * in the internal transaction must be physical (ie. it can be undone 
0:      * physically by the rawstore at the page level, rather than logically 
0:      * undone like btree insert/delete operations).  The rawstore guarantee's
0:      * that in the case of a system failure all open Internal transactions are
0:      * first undone in reverse order, and then other transactions are undone
0:      * in reverse order.
0:      * <p>
0:      * Internal transactions are meant to implement operations which, if 
0:      * interupted before completion will cause logical operations like tree
0:      * searches to fail.  This special undo order insures that the state of
0:      * the tree is restored to a consistent state before any logical undo 
0:      * operation which may need to search the tree is performed.
0:      * <p>
0:      *
0: 	 * @return The new internal transaction.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public TransactionManager getInternalTransaction()
0:         throws StandardException;
0: 
0:     /**
0:      * Get the Transaction from the Transaction manager.
0:      * <p>
0:      * Access methods often need direct access to the "Transaction" - ie. the
0:      * raw store transaction, so give access to it.
0:      *
0: 	 * @return The raw store transaction.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public Transaction getRawStoreXact()
0:         throws StandardException;
0: 
0:     /**
0:      * Do work necessary to maintain the current position in all the scans.
0:      * <p>
0:      * The latched page in the conglomerate "congomid" is changing, do
0:      * whatever is necessary to maintain the current position of all the
0:      * scans open in this transaction.
0:      * <p>
0:      * For some conglomerates this may be a no-op.
0:      * <p>
0:      *
0:      * @param conlgom   Conglomerate object of the conglomerate being changed.
0:      * @param page      Page in the conglomerate being changed.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void saveScanPositions(Conglomerate conglom, Page page)
0:         throws StandardException;
0: }
============================================================================