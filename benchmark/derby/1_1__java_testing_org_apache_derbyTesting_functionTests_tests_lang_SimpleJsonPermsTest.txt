1:6b8ad38: /*
1:6b8ad38: 
1:6b8ad38:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SimpleJsonPermsTest
1:6b8ad38: 
1:6b8ad38:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6b8ad38:    contributor license agreements.  See the NOTICE file distributed with
1:6b8ad38:    this work for additional information regarding copyright ownership.
1:6b8ad38:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6b8ad38:    (the "License"); you may not use this file except in compliance with
1:6b8ad38:    the License.  You may obtain a copy of the License at
1:6b8ad38: 
1:6b8ad38:      http://www.apache.org/licenses/LICENSE-2.0
1:6b8ad38: 
1:6b8ad38:    Unless required by applicable law or agreed to in writing, software
1:6b8ad38:    distributed under the License is distributed on an "AS IS" BASIS,
1:6b8ad38:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b8ad38:    See the License for the specific language governing permissions and
1:6b8ad38:    limitations under the License.
1:6b8ad38: 
1:6b8ad38:  */
1:6b8ad38: 
1:6b8ad38: package org.apache.derbyTesting.functionTests.tests.lang;
1:6b8ad38: 
1:6b8ad38: import java.io.File;
1:6b8ad38: import java.sql.Connection;
1:6b8ad38: import java.sql.PreparedStatement;
1:6b8ad38: import java.sql.ResultSet;
1:6b8ad38: import java.sql.SQLException;
1:6b8ad38: import junit.framework.Test;
1:6b8ad38: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:6b8ad38: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:6b8ad38: import org.apache.derbyTesting.junit.BaseTestSuite;
1:6b8ad38: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:6b8ad38: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:6b8ad38: import org.apache.derbyTesting.junit.TestConfiguration;
1:6b8ad38: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:6b8ad38: 
1:6b8ad38: /**
1:6b8ad38:  * <p>
1:6b8ad38:  * Test permissions on objects created by the simpleJson optional tool.
1:6b8ad38:  * </p>
1:6b8ad38:  */
1:6b8ad38: public class SimpleJsonPermsTest extends BaseJDBCTestCase
1:6b8ad38: {
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     // CONSTANTS
1:6b8ad38:     //
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     private static  final   String      DB_NAME = "simplejsonpermsdb";
1:6b8ad38: 
1:6b8ad38:     private static  final   String      TEST_DBO = "TEST_DBO";
1:6b8ad38:     private static  final   String      ALICE = "ALICE";
1:6b8ad38:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE  };
1:6b8ad38: 
1:6b8ad38:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'simpleJson', true )";
1:6b8ad38:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'simpleJson', false )";
1:6b8ad38: 
1:6b8ad38:     private static  final   String      LACK_EXECUTE_PRIV = "42504";
1:6b8ad38: 
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     // STATE
1:6b8ad38:     //
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     // CONSTRUCTOR
1:6b8ad38:     //
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * Create a new instance.
1:6b8ad38:      */
1:6b8ad38: 
1:6b8ad38:     public SimpleJsonPermsTest(String name)
1:6b8ad38:     {
1:6b8ad38:         super(name);
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     // JUnit BEHAVIOR
1:6b8ad38:     //
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * Construct top level suite in this JUnit test
1:6b8ad38:      */
1:6b8ad38:     public static Test suite()
1:6b8ad38:     {
1:6b8ad38:         BaseTestSuite suite = (BaseTestSuite) TestConfiguration.embeddedSuite
1:6b8ad38:             ( SimpleJsonPermsTest.class );
1:6b8ad38: 
1:6b8ad38:         Test    customTest = new SupportFilesSetup
1:6b8ad38:             (
1:6b8ad38:              suite,
1:6b8ad38:              new String[]
1:6b8ad38:              { 
1:6b8ad38:                 "functionTests/tests/lang/json.dat",
1:6b8ad38:              }
1:6b8ad38:             );
1:6b8ad38:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:6b8ad38:             ( customTest, LEGAL_USERS, "SimpleJsonPermissions" );
1:6b8ad38:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, true );
1:6b8ad38: 
1:6b8ad38:         return authorizedTest;
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38:     //
1:6b8ad38:     // TESTS
1:6b8ad38:     //
1:6b8ad38:     ///////////////////////////////////////////////////////////////////////////////////
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * <p>
1:6b8ad38:      * Test that the simpleJson tool granst public access to its UDT and FUNCTIONs.
1:6b8ad38:      * </p>
1:6b8ad38:      */
1:6b8ad38:     public  void    test_001_basic()
1:6b8ad38:         throws Exception
1:6b8ad38:     {
1:6b8ad38:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:6b8ad38:         Connection  aliceConnection = openUserConnection( ALICE );
1:6b8ad38: 
1:6b8ad38:         // create a dummy table in order to create the schema
1:6b8ad38:         goodStatement( aliceConnection, "create table t( a int )" );
1:6b8ad38: 
1:6b8ad38:         // alice does not have permission to load the tool
1:6b8ad38:         expectExecutionError( aliceConnection, LACK_EXECUTE_PRIV, LOAD_TOOL );
1:6b8ad38: 
1:6b8ad38:         // but the dbo has permission
1:6b8ad38:         goodStatement( dboConnection, LOAD_TOOL );
1:6b8ad38: 
1:6b8ad38:         // alice can create a table function referencing the JSONArray udt
1:6b8ad38:         goodStatement
1:6b8ad38:             (
1:6b8ad38:              aliceConnection,
1:6b8ad38:              "create function f_double( jsonArray test_dbo.JSONArray )\n" +
1:6b8ad38:              "returns table\n" +
1:6b8ad38:              "(\n" +
1:6b8ad38:              "  str_col varchar( 10 ),\n" +
1:6b8ad38:              "  bool_col boolean,\n" +
1:6b8ad38:              "  num_col double\n" +
1:6b8ad38:              ")\n" +
1:6b8ad38:              "language java parameter style derby_jdbc_result_set contains sql\n" +
1:6b8ad38:              "external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray'\n"
1:6b8ad38:              );
1:6b8ad38: 
1:6b8ad38:         // alice can use the simpleJson functions
1:6b8ad38:         String[][]  stringResults = new String[][]
1:6b8ad38:             {
1:6b8ad38:                 { "abc","true", "127.0" },
1:6b8ad38:             };
1:6b8ad38:         String[][]  fileResults = new String[][]
1:6b8ad38:             {
1:6b8ad38:                 { "abc","true", "127.0" },
1:6b8ad38:                 { "def", "false", "1.2" },
1:6b8ad38:                 { "ghi", null, "345.67" },
1:6b8ad38:                 { "lmn", "true", "9.223372036854776E18" },    
1:6b8ad38:             };
1:6b8ad38:         
1:6b8ad38:         assertResults
1:6b8ad38:             (
1:6b8ad38:              aliceConnection,
1:6b8ad38:              "select * from table\n" +
1:6b8ad38:              "(\n" +
1:6b8ad38:              "    f_double\n" +
1:6b8ad38:              "    (\n" +
1:6b8ad38:              "        test_dbo.readArrayFromString\n" +
1:6b8ad38:              "        ( '[{ \"STR_COL\" : \"abc\", \"BOOL_COL\" : true, \"NUM_COL\" : 127 }]' )\n" +
1:6b8ad38:              "    )\n" +
1:6b8ad38:              ") t\n",
1:6b8ad38:              stringResults,
1:6b8ad38:              false
1:6b8ad38:              );
1:6b8ad38: 
1:6b8ad38:         PreparedStatement   ps = null;
1:6b8ad38:         ResultSet           rs = null;
1:6b8ad38:         File                inputFile = SupportFilesSetup.getReadOnly( "json.dat" );
1:6b8ad38:         
1:6b8ad38:         ps = aliceConnection.prepareStatement
1:6b8ad38:             (
1:6b8ad38:              "select * from table\n" +
1:6b8ad38:              "( f_double( test_dbo.readArrayFromFile( ?, 'UTF-8' ) ) ) t"
1:6b8ad38:              );
1:6b8ad38:         ps.setString( 1, PrivilegedFileOpsForTests.getAbsolutePath( inputFile ) );
1:6b8ad38:         rs = ps.executeQuery();
1:6b8ad38:         assertResults( rs, fileResults, false );
1:6b8ad38:         rs.close();
1:6b8ad38:         ps.close();
1:6b8ad38: 
1:6b8ad38:         ps = aliceConnection.prepareStatement
1:6b8ad38:             (
1:6b8ad38:              "select * from table\n" +
1:6b8ad38:              "( f_double( test_dbo.readArrayFromURL( ?, 'UTF-8' ) ) ) t"
1:6b8ad38:              );
1:6b8ad38:         String  inputFileURL = PrivilegedFileOpsForTests.toURI( inputFile ).toURL().toString();
1:6b8ad38:         ps.setString( 1, inputFileURL);
1:6b8ad38:         rs = ps.executeQuery();
1:6b8ad38:         assertResults( rs, fileResults, false );
1:6b8ad38:         rs.close();
1:6b8ad38:         ps.close();
1:6b8ad38: 
1:6b8ad38:         // tear down the test
1:6b8ad38:         goodStatement( aliceConnection, "drop table t" );
1:6b8ad38:         goodStatement( aliceConnection, "drop function f_double" );
1:6b8ad38: 
1:6b8ad38:         // alice cannot unload the tool
1:6b8ad38:         expectExecutionError( aliceConnection, LACK_EXECUTE_PRIV, UNLOAD_TOOL );
1:6b8ad38: 
1:6b8ad38:         // but the dbo can
1:6b8ad38:         goodStatement( dboConnection, UNLOAD_TOOL );
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SimpleJsonPermsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: 
1: /**
1:  * <p>
1:  * Test permissions on objects created by the simpleJson optional tool.
1:  * </p>
1:  */
1: public class SimpleJsonPermsTest extends BaseJDBCTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      DB_NAME = "simplejsonpermsdb";
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      ALICE = "ALICE";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE  };
1: 
1:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'simpleJson', true )";
1:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'simpleJson', false )";
1: 
1:     private static  final   String      LACK_EXECUTE_PRIV = "42504";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public SimpleJsonPermsTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
1:         BaseTestSuite suite = (BaseTestSuite) TestConfiguration.embeddedSuite
1:             ( SimpleJsonPermsTest.class );
1: 
1:         Test    customTest = new SupportFilesSetup
1:             (
1:              suite,
1:              new String[]
1:              { 
1:                 "functionTests/tests/lang/json.dat",
1:              }
1:             );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( customTest, LEGAL_USERS, "SimpleJsonPermissions" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, true );
1: 
1:         return authorizedTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that the simpleJson tool granst public access to its UDT and FUNCTIONs.
1:      * </p>
1:      */
1:     public  void    test_001_basic()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  aliceConnection = openUserConnection( ALICE );
1: 
1:         // create a dummy table in order to create the schema
1:         goodStatement( aliceConnection, "create table t( a int )" );
1: 
1:         // alice does not have permission to load the tool
1:         expectExecutionError( aliceConnection, LACK_EXECUTE_PRIV, LOAD_TOOL );
1: 
1:         // but the dbo has permission
1:         goodStatement( dboConnection, LOAD_TOOL );
1: 
1:         // alice can create a table function referencing the JSONArray udt
1:         goodStatement
1:             (
1:              aliceConnection,
1:              "create function f_double( jsonArray test_dbo.JSONArray )\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "  str_col varchar( 10 ),\n" +
1:              "  bool_col boolean,\n" +
1:              "  num_col double\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set contains sql\n" +
1:              "external name 'org.apache.derby.optional.api.SimpleJsonVTI.readArray'\n"
1:              );
1: 
1:         // alice can use the simpleJson functions
1:         String[][]  stringResults = new String[][]
1:             {
1:                 { "abc","true", "127.0" },
1:             };
1:         String[][]  fileResults = new String[][]
1:             {
1:                 { "abc","true", "127.0" },
1:                 { "def", "false", "1.2" },
1:                 { "ghi", null, "345.67" },
1:                 { "lmn", "true", "9.223372036854776E18" },    
1:             };
1:         
1:         assertResults
1:             (
1:              aliceConnection,
1:              "select * from table\n" +
1:              "(\n" +
1:              "    f_double\n" +
1:              "    (\n" +
1:              "        test_dbo.readArrayFromString\n" +
1:              "        ( '[{ \"STR_COL\" : \"abc\", \"BOOL_COL\" : true, \"NUM_COL\" : 127 }]' )\n" +
1:              "    )\n" +
1:              ") t\n",
1:              stringResults,
1:              false
1:              );
1: 
1:         PreparedStatement   ps = null;
1:         ResultSet           rs = null;
1:         File                inputFile = SupportFilesSetup.getReadOnly( "json.dat" );
1:         
1:         ps = aliceConnection.prepareStatement
1:             (
1:              "select * from table\n" +
1:              "( f_double( test_dbo.readArrayFromFile( ?, 'UTF-8' ) ) ) t"
1:              );
1:         ps.setString( 1, PrivilegedFileOpsForTests.getAbsolutePath( inputFile ) );
1:         rs = ps.executeQuery();
1:         assertResults( rs, fileResults, false );
1:         rs.close();
1:         ps.close();
1: 
1:         ps = aliceConnection.prepareStatement
1:             (
1:              "select * from table\n" +
1:              "( f_double( test_dbo.readArrayFromURL( ?, 'UTF-8' ) ) ) t"
1:              );
1:         String  inputFileURL = PrivilegedFileOpsForTests.toURI( inputFile ).toURL().toString();
1:         ps.setString( 1, inputFileURL);
1:         rs = ps.executeQuery();
1:         assertResults( rs, fileResults, false );
1:         rs.close();
1:         ps.close();
1: 
1:         // tear down the test
1:         goodStatement( aliceConnection, "drop table t" );
1:         goodStatement( aliceConnection, "drop function f_double" );
1: 
1:         // alice cannot unload the tool
1:         expectExecutionError( aliceConnection, LACK_EXECUTE_PRIV, UNLOAD_TOOL );
1: 
1:         // but the dbo can
1:         goodStatement( dboConnection, UNLOAD_TOOL );
1:     }
1: 
1: }
============================================================================