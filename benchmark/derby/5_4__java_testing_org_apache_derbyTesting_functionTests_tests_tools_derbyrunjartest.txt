1:50e065b: /*
1:83db8d6: 
1:50e065b:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.derbyrunjartest
1:83db8d6: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:83db8d6: 
1:50e065b:       http://www.apache.org/licenses/LICENSE-2.0
11:50e065b: 
1:50e065b:    Unless required by applicable law or agreed to in writing, software
1:50e065b:    distributed under the License is distributed on an "AS IS" BASIS,
1:50e065b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50e065b:    See the License for the specific language governing permissions and
1:50e065b:    limitations under the License.
1:50e065b: 
1:50e065b:  */
1:50e065b: 
1:50e065b: package org.apache.derbyTesting.functionTests.tests.tools;
1:50e065b: 
1:50e065b: import java.net.URL;
1:3919c52: import java.util.ArrayList;
1:3919c52: import java.util.Arrays;
1:3919c52: import junit.framework.Test;
1:3919c52: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:8f0d45d: import org.apache.derbyTesting.junit.Derby;
1:3919c52: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:50e065b: 
1:3919c52: /**
1:3919c52:  * Basic tests for exercising the {@code org.apache.derby.iapi.tools.run}
1:3919c52:  * class found in {@code derbyrun.jar}.
1:3919c52:  */
1:3919c52: public class derbyrunjartest extends BaseTestCase {
1:50e065b: 
1:3919c52:     public derbyrunjartest(String name) {
1:3919c52:         super(name);
1:3919c52:     }
1:a4aa5a7: 
1:3919c52:     public static Test suite() {
1:3919c52:         Class cl = derbyrunjartest.class;
1:001ac63: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(cl);
1:001ac63: 
1:001ac63:         // The server command can only be used on platforms that support
1:8f0d45d:         // the network server.
1:8f0d45d:         if (Derby.hasServer()) {
1:001ac63:             suite.addTest(new derbyrunjartest("xtestServer"));
1:001ac63:         }
1:001ac63: 
1:3919c52:         return new SecurityManagerSetup(
1:001ac63:                 suite,
1:3919c52:                 cl.getName().replace('.', '/') + ".policy",
1:3919c52:                 true);
1:3919c52:     }
1:3919c52: 
1:3919c52:     /**
1:3919c52:      * Invoke {@code org.apache.derby.iapi.tools.run} in a sub-process.
1:3919c52:      *
1:3919c52:      * @param toolArgs the arguments to pass to derbyrun.jar
1:3919c52:      * @param output expected lines of output
1:3919c52:      * @param exitCode expected exit code for the command
1:3919c52:      */
1:3919c52:     private void runtool(String[] toolArgs, String[] output, int exitCode)
1:3919c52:             throws Exception {
1:3919c52:         String runClassName = org.apache.derby.iapi.tools.run.class.getName();
1:3919c52:         URL result = SecurityManagerSetup.getURL(runClassName);
1:a4aa5a7:         String derbyrunloc = null;
1:83db8d6: 
1:83db8d6:         if (result.toString().endsWith(".jar")) {
1:a4aa5a7:             derbyrunloc = result.toString().substring(5);
1:50e065b:             if (System.getProperty("os.name").startsWith("Windows"))
1:50e065b:               derbyrunloc = derbyrunloc.substring(1);
1:a4aa5a7:         }
1:3919c52: 
1:c393694:         ArrayList<String> cmdArgs = new ArrayList<String>();
1:a4aa5a7: 
1:3919c52:         // Invoke java -jar derbyrun.jar if we are running from jars, or
1:3919c52:         // with fully qualified class name if we are running from classes.
1:3919c52:         if (derbyrunloc == null) {
1:3919c52:             cmdArgs.add(runClassName);
1:3919c52:         } else {
1:3919c52:             cmdArgs.add("-jar");
1:3919c52:             cmdArgs.add(derbyrunloc);
1:3919c52:         }
1:3919c52: 
1:3919c52:         cmdArgs.addAll(Arrays.asList(toolArgs));
1:3919c52: 
1:c393694:         String[] cmd = cmdArgs.toArray(new String[cmdArgs.size()]);
1:3919c52:         assertExecJavaCmdAsExpected(output, cmd, exitCode);
1:3919c52:     }
1:3919c52: 
1:3919c52:     public void testIJ() throws Exception {
1:3919c52:         String[] cmd = { "ij", "--help" };
1:3919c52:         String[] output = {
1:3919c52:             "Usage: java org.apache.derby.tools.ij [-p propertyfile] [inputfile]"
1:a4aa5a7:         };
1:3919c52:         runtool(cmd, output, 0);
1:a4aa5a7:     }
1:a4aa5a7: 
1:3919c52:     public void testSysinfo() throws Exception {
1:3919c52:         String[] cmd = { "sysinfo", "-cp", "help" };
1:3919c52:         String[] output = {
1:62d63f6:             "Usage: java org.apache.derby.tools.sysinfo -cp [ [ embedded ][ server ][ client] [ tools ] [ anyClass.class ] ]"
1:3919c52:         };
1:3919c52:         runtool(cmd, output, 0);
1:a4aa5a7:     }
1:a4aa5a7: 
1:3919c52:     public void testDblook() throws Exception {
1:3919c52:         String[] cmd = { "dblook" };
1:3919c52:         String[] output = {
1:62d63f6:             " Usage:",
1:62d63f6:             " java org.apache.derby.tools.dblook -d <source database url> [options]",
1:3919c52:             " 	where the source URL is the full URL, including the connection protocol",
1:3919c52:             " 	and any connection attributes that might apply.  For example, use",
1:3919c52:             " 	options include:",
1:62d63f6:             " 	-z <schema name> to specify a schema to which the DDL generation",
1:3919c52:             " 	 should be limited.  Only database objects with that schema will have",
1:3919c52:             " 	 their DDL generated.",
1:62d63f6:             " 	-t <table one> <table two> ... to specify a list of tables for which",
1:3919c52:             " 	 the DDL will be generated; any tables not in the list will be ignored.",
1:3919c52:             " 	-td <value> to specify what should be appended to the end",
1:3919c52:             " 	 of each DDL statement.",
1:3919c52:             "		This defaults to ';'.",
1:3919c52:             " 	-noview to prevent the generation of DDL for views.",
1:3919c52:             " 	-append to keep from overwriting the output files.",
1:3919c52:             " 	-verbose to have error messages printed to the console (in addition",
1:3919c52:             " 	 to the log file).  If not specified, errors will only be printed to the",
1:3919c52:             " 	 log file.",
1:3919c52:             " 	-o <filename> to specify the file name to which the generated DDL",
1:3919c52:             " 	 will be written.",
1:3919c52:             " 		If not specified, default is the console.",
1:3919c52:         };
1:3919c52:         runtool(cmd, output, 0);
1:3919c52:     }
1:3919c52: 
1:001ac63:     public void xtestServer() throws Exception {
1:3919c52:         String[] cmd = { "server" };
1:3919c52:         String[] output = {
1:3919c52:             "Usage: NetworkServerControl <commands> ",
1:3919c52:             "Commands:",
1:62d63f6:             "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:62d63f6:             "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:62d63f6:             "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:             "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:             "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:             "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:             "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:             "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:             "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:             "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:3919c52:         };
1:3919c52:         runtool(cmd, output, 1);
1:a4aa5a7:     }
2:a4aa5a7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(cl);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> cmdArgs = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:         String[] cmd = cmdArgs.toArray(new String[cmdArgs.size()]);
commit:8f0d45d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.Derby;
/////////////////////////////////////////////////////////////////////////
1:         // the network server.
1:         if (Derby.hasServer()) {
commit:001ac63
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1: 
0:         TestSuite suite = new TestSuite(cl);
1: 
1:         // The server command can only be used on platforms that support
0:         // the network server. Specifically, it does not work in J2ME
0:         // environments.
0:         if (JDBC.vmSupportsJDBC3()) {
1:             suite.addTest(new derbyrunjartest("xtestServer"));
1:         }
1: 
1:                 suite,
/////////////////////////////////////////////////////////////////////////
1:     public void xtestServer() throws Exception {
commit:3919c52
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: /**
1:  * Basic tests for exercising the {@code org.apache.derby.iapi.tools.run}
1:  * class found in {@code derbyrun.jar}.
1:  */
1: public class derbyrunjartest extends BaseTestCase {
1:     public derbyrunjartest(String name) {
1:         super(name);
1:     }
1:     public static Test suite() {
1:         Class cl = derbyrunjartest.class;
1:         return new SecurityManagerSetup(
0:                 new TestSuite(cl),
1:                 cl.getName().replace('.', '/') + ".policy",
1:                 true);
1:     }
1: 
1:     /**
1:      * Invoke {@code org.apache.derby.iapi.tools.run} in a sub-process.
1:      *
1:      * @param toolArgs the arguments to pass to derbyrun.jar
1:      * @param output expected lines of output
1:      * @param exitCode expected exit code for the command
1:      */
1:     private void runtool(String[] toolArgs, String[] output, int exitCode)
1:             throws Exception {
1:         String runClassName = org.apache.derby.iapi.tools.run.class.getName();
1:         URL result = SecurityManagerSetup.getURL(runClassName);
0:         ArrayList cmdArgs = new ArrayList();
1: 
1:         // Invoke java -jar derbyrun.jar if we are running from jars, or
1:         // with fully qualified class name if we are running from classes.
1:         if (derbyrunloc == null) {
1:             cmdArgs.add(runClassName);
1:         } else {
1:             cmdArgs.add("-jar");
1:             cmdArgs.add(derbyrunloc);
1:         }
1: 
1:         cmdArgs.addAll(Arrays.asList(toolArgs));
1: 
0:         String[] cmd = (String[]) cmdArgs.toArray(new String[cmdArgs.size()]);
1:         assertExecJavaCmdAsExpected(output, cmd, exitCode);
1:     }
1: 
1:     public void testIJ() throws Exception {
1:         String[] cmd = { "ij", "--help" };
1:         String[] output = {
1:             "Usage: java org.apache.derby.tools.ij [-p propertyfile] [inputfile]"
1:         runtool(cmd, output, 0);
1:     public void testSysinfo() throws Exception {
1:         String[] cmd = { "sysinfo", "-cp", "help" };
1:         String[] output = {
0:             "USAGE: java org.apache.derby.tools.sysinfo -cp [ [ embedded ][ server ][ client] [ tools ] [ anyClass.class ] ]"
1:         };
1:         runtool(cmd, output, 0);
1:     public void testDblook() throws Exception {
1:         String[] cmd = { "dblook" };
1:         String[] output = {
0:             " USAGE:",
0:             " java org.apache.derby.tools.dblook -d <sourceDBUrl> [OPTIONS]",
1:             " 	where the source URL is the full URL, including the connection protocol",
1:             " 	and any connection attributes that might apply.  For example, use",
1:             " 	options include:",
0:             " 	-z <schemaName> to specify a schema to which the DDL generation",
1:             " 	 should be limited.  Only database objects with that schema will have",
1:             " 	 their DDL generated.",
0:             " 	-t <tableOne> <tableTwo> ... to specify a list of tables for which",
1:             " 	 the DDL will be generated; any tables not in the list will be ignored.",
1:             " 	-td <value> to specify what should be appended to the end",
1:             " 	 of each DDL statement.",
1:             "		This defaults to ';'.",
1:             " 	-noview to prevent the generation of DDL for views.",
1:             " 	-append to keep from overwriting the output files.",
1:             " 	-verbose to have error messages printed to the console (in addition",
1:             " 	 to the log file).  If not specified, errors will only be printed to the",
1:             " 	 log file.",
1:             " 	-o <filename> to specify the file name to which the generated DDL",
1:             " 	 will be written.",
1:             " 		If not specified, default is the console.",
1:         };
1:         runtool(cmd, output, 0);
1:     }
1: 
0:     public void testServer() throws Exception {
1:         String[] cmd = { "server" };
1:         String[] output = {
1:             "Usage: NetworkServerControl <commands> ",
1:             "Commands:",
0:             "start [-h <host>] [-p <portnumber>] [-noSecurityManager] [-ssl <sslmode>]",
0:             "shutdown [-h <host>][-p <portnumber>] [-ssl <sslmode>] [-user <username>] [-password <password>]",
0:             "ping [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "sysinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "runtimeinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "logconnections {on|off} [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "maxthreads <max>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "timeslice <milliseconds>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "trace {on|off} [-s <session id>][-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:             "tracedirectory <traceDirectory>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
1:         };
1:         runtool(cmd, output, 1);
commit:7398101
/////////////////////////////////////////////////////////////////////////
0:             saver.finish();
commit:a4aa5a7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Vector;
0: import org.apache.derbyTesting.functionTests.harness.jvm;
0:     public static void main(String[] args) throws Exception
/////////////////////////////////////////////////////////////////////////
0:         jvm jvm = null;
1:         String derbyrunloc = null;
1:             derbyrunloc = result.toString().substring(5);
0:             if ((System.getProperty("java.vm.name") != null) &&
0:                     System.getProperty("java.vm.name").equals("J9")) {
0:                 jvm = jvm.getJvm("j9_13");
0:             } else {
0:                 jvm = jvm.getJvm("currentjvm"); // ensure compatibility
1:             }
1:         }
0:         String[][] testCommands = new String[][] {
0:             {"ij", "--help"},
0:             {"sysinfo", "-cp", "help"},
0:             {"dblook"},
0:             {"server"},
1:         };
0:         for (int i = 0; i < testCommands.length; i++) {
0:             runtool(jvm, derbyrunloc, testCommands[i]);
0:     private static void runtool(jvm jvm, String loc, String[] args)
0:         throws IOException
0:         System.out.println(concatenate(args) + ':');
1: 
0:         if (jvm == null) {
0:             org.apache.derby.iapi.tools.run.main(args);
0:             return;
1:         }
1: 
0:         Vector cmd = jvm.getCommandLine();
0:         cmd.addElement("-jar");
0:         cmd.addElement(loc);
0:         for (int i=0; i < args.length; i++) {
0:             cmd.addElement(args[i]);
1:         }
0:         String command = concatenate((String[]) cmd.toArray(new String[0]));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static String concatenate(String[] args) {
0:         StringBuffer buf = new StringBuffer();
0:         for (int i = 0; i < args.length; i++) {
0:             buf.append(args[i]);
0:             if (i + 1 < args.length) buf.append(' ');
1:         }
0:         return buf.toString();
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0325a5d
/////////////////////////////////////////////////////////////////////////
1:             "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:             "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
commit:62d63f6
/////////////////////////////////////////////////////////////////////////
1:             "Usage: java org.apache.derby.tools.sysinfo -cp [ [ embedded ][ server ][ client] [ tools ] [ anyClass.class ] ]"
/////////////////////////////////////////////////////////////////////////
1:             " Usage:",
1:             " java org.apache.derby.tools.dblook -d <source database url> [options]",
1:             " 	-z <schema name> to specify a schema to which the DDL generation",
1:             " 	-t <table one> <table two> ... to specify a list of tables for which",
/////////////////////////////////////////////////////////////////////////
1:             "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:             "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:             "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:             "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:             "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:             "logconnections {on|off} [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:             "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:             "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:             "trace {on|off} [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:             "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
commit:853f07d
/////////////////////////////////////////////////////////////////////////
0:             " java org.apache.derby.tools.dblook -d <sourceDBUrl> [options]",
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:c43dca1
/////////////////////////////////////////////////////////////////////////
0:             jvm = jvm.getJvm("currentjvm"); // ensure compatibility
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:83db8d6
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     public static void main(String[] args) throws IOException
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (result.toString().endsWith(".jar")) {
/////////////////////////////////////////////////////////////////////////
0:         } else {
0:             String[] ij = {"ij", "--help"};
0:             System.out.println("ij --help:");
0:             org.apache.derby.iapi.tools.run.main(ij);
1: 
0:             String[] sysinfo = {"sysinfo", "-cp", "help"}; 
0:             System.out.println("sysinfo -cp help:");
0:             org.apache.derby.iapi.tools.run.main(sysinfo);
1: 
0:             String[] dblook = {"dblook"};
0:             System.out.println("dblook:");
0:             org.apache.derby.iapi.tools.run.main(dblook);
1: 
0:             String[] server = {"server"};
0:             System.out.println("server:");
0:             org.apache.derby.iapi.tools.run.main(server);
/////////////////////////////////////////////////////////////////////////
0:         System.out.println(tool + ':');
/////////////////////////////////////////////////////////////////////////
commit:50e065b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.derbyrunjartest
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
0: import java.lang.Process;
0: import java.lang.Runtime;
0: import java.lang.SecurityException;
1: import java.net.URL;
0: import java.security.CodeSource;
1: 
0: import org.apache.derbyTesting.functionTests.harness.BackgroundStreamSaver;
1: 
0: public class derbyrunjartest {
1: 
0:     public static void main(String[] args)
0:     {
0:         // get location of run class.
0:         CodeSource cs = null;
0:         try {
0:             cs = org.apache.derby.iapi.tools.run.class.getProtectionDomain().getCodeSource();
0:         } catch (SecurityException se) {
0:             System.out.println("Security exception: " + se.getMessage());
0:         }
1:  
0:         URL result = cs.getLocation();
1:      
0:         if (!result.toString().startsWith("file:")) { exitNow(); } else
0:         {
0:             String derbyrunloc = result.toString().substring(5);
1:             if (System.getProperty("os.name").startsWith("Windows"))
1:               derbyrunloc = derbyrunloc.substring(1);
0:             runtool(derbyrunloc, "ij --help");
0:             runtool(derbyrunloc, "sysinfo -cp help");
0:             runtool(derbyrunloc, "dblook");
0:             runtool(derbyrunloc, "server");
0:         }
0:     }
1: 
0:     private static void runtool(String loc, String tool)
0:     {
0:         String command = "java -jar " + loc + ' ' + tool;
0:         Process pr = null;
1: 
0:         System.out.println(command + ':');
0:         try
0:         {
0:             pr = Runtime.getRuntime().exec(command);
0:             BackgroundStreamSaver saver = 
0:                         new BackgroundStreamSaver(pr.getInputStream(), System.out);
0:             pr.waitFor();
0:             pr.destroy();
0:         } catch(Throwable t) {
0:             System.out.println("Process exception: " + t.getMessage());
0:             if (pr != null)
0:             {
0:                 pr.destroy();
0:                 pr = null;
0:             }
0:         }
0:     }
1: 
0:     public static void exitNow()
0:     {
0:         System.out.println("This test must be run from jar files. Exiting.");
0:     }
0: }
============================================================================