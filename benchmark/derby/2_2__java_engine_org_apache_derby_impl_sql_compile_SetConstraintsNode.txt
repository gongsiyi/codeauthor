1:09bee7d: /*
3:09bee7d: 
1:09bee7d:    Derby - Class org.apache.derby.impl.sql.compile.SetConstraintsNode
1:09bee7d: 
1:09bee7d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:09bee7d:    contributor license agreements.  See the NOTICE file distributed with
1:09bee7d:    this work for additional information regarding copyright ownership.
1:09bee7d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:09bee7d:    (the "License"); you may not use this file except in compliance with
1:09bee7d:    the License.  You may obtain a copy of the License at
1:09bee7d: 
1:09bee7d:       http://www.apache.org/licenses/LICENSE-2.0
1:09bee7d: 
1:09bee7d:    Unless required by applicable law or agreed to in writing, software
1:09bee7d:    distributed under the License is distributed on an "AS IS" BASIS,
1:09bee7d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09bee7d:    See the License for the specific language governing permissions and
1:09bee7d:    limitations under the License.
1:09bee7d: 
1:09bee7d:  */
1:09bee7d: 
1:09bee7d: package     org.apache.derby.impl.sql.compile;
1:09bee7d: 
1:09bee7d: import java.util.List;
1:09bee7d: import org.apache.derby.iapi.error.StandardException;
1:09bee7d: import org.apache.derby.iapi.services.context.ContextManager;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:09bee7d: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:af1c18c: import org.apache.derby.shared.common.sanity.SanityManager;
1:09bee7d: 
1:09bee7d: /**
1:09bee7d:  * A SetConstraintsNode is the root of a QueryTree that represents a
1:09bee7d:  * SET CONSTRAINTS statement.
1:09bee7d:  */
1:09bee7d: 
1:09bee7d: class SetConstraintsNode extends MiscellaneousStatementNode
1:09bee7d: {
1:09bee7d:     /**
1:09bee7d:      * List of strings representing the constraints we want to
1:09bee7d:      * set. If empty, this means ALL.
1:09bee7d:      */
1:09bee7d:     final private List<TableName> constraints;
1:09bee7d: 
1:09bee7d:     /**
1:09bee7d:      * Encodes IMMEDIATE (false), DEFERRED (true)
1:09bee7d:      */
1:09bee7d:     final private boolean deferred;
1:09bee7d: 
1:09bee7d:     /**
1:09bee7d:      *
1:09bee7d:      * @param constraints List of strings representing the constraints
1:09bee7d:      *                    we want to set (empty means ALL).
1:09bee7d:      * @param deferred    Encodes IMMEDIATE ({@code false}) or DEFERRED
1:09bee7d:      *                    ({@code true})
1:09bee7d:      * @param cm          The context manager
1:09bee7d:      */
1:09bee7d:     SetConstraintsNode(
1:09bee7d:             List<TableName> constraints,
1:09bee7d:             boolean deferred,
1:09bee7d:             ContextManager cm) {
1:09bee7d:         super(cm);
1:09bee7d:         this.constraints = constraints;
1:09bee7d:         this.deferred = deferred;
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     /**
1:09bee7d:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:09bee7d:      * for how this should be done for tree printing.
1:09bee7d:      *
1:09bee7d:      * @return  This object as a String
1:09bee7d:      */
1:69f8afa:     @Override
1:09bee7d:     public String toString()
1:09bee7d:     {
1:09bee7d:         if (SanityManager.DEBUG) {
1:09bee7d:             return super.toString() + formatList(constraints) + ":" +
1:09bee7d:                     (deferred ? " DEFERRED" : " IMMEDIATE")  + "\n";
1:09bee7d:         } else {
1:09bee7d:             return "";
1:09bee7d:         }
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     String formatList(List<TableName> constraints) {
1:af1c18c:         if (SanityManager.DEBUG) {
1:af1c18c:             StringBuilder sb = new StringBuilder();
1:09bee7d: 
1:af1c18c:             if (constraints == null) {
1:af1c18c:                 return "ALL";
1:af1c18c:             } else {
1:af1c18c:                 for (TableName tn : constraints) {
1:af1c18c:                     sb.append(tn);
1:af1c18c:                     sb.append(", ");
1:af1c18c:                 }
1:af1c18c: 
1:af1c18c:                 return sb.substring(0, Math.max(0, sb.length() - 2));
1:af1c18c:             }
1:af1c18c:         } else {
1:af1c18c:             return "";
1:09bee7d:         }
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     public String statementToString()
1:09bee7d:     {
1:09bee7d:         return "SET CONSTRAINTS";
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     /**
1:09bee7d:      * Create the Constant information that will drive the guts of
1:09bee7d:      * Execution.
1:09bee7d:      *
1:09bee7d:      * @exception StandardException         Thrown on failure
1:09bee7d:      */
1:09bee7d:     @Override
1:09bee7d:     public ConstantAction   makeConstantAction() throws StandardException
1:09bee7d:     {
1:09bee7d:         return getGenericConstantActionFactory().
1:09bee7d:             getSetConstraintsConstantAction(constraints, deferred);
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     @Override
1:09bee7d:     public void bindStatement() throws StandardException
1:09bee7d:     {
1:09bee7d:         if (constraints != null) {
1:09bee7d:             for (TableName c : constraints) {
1:eab88ec:                 c.bind();
1:09bee7d:             }
1:09bee7d:         }
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (constraints != null) {
1:69f8afa:             for (int i = 0; i < constraints.size(); i++) {
1:69f8afa:                 constraints.set(i, (TableName) constraints.get(i).accept(v));
1:69f8afa:             }
1:69f8afa:         }
1:69f8afa:     }
1:09bee7d: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:eab88ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 c.bind();
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (constraints != null) {
1:             for (int i = 0; i < constraints.size(); i++) {
1:                 constraints.set(i, (TableName) constraints.get(i).accept(v));
1:             }
1:         }
1:     }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             StringBuilder sb = new StringBuilder();
1:             if (constraints == null) {
1:                 return "ALL";
1:             } else {
1:                 for (TableName tn : constraints) {
1:                     sb.append(tn);
1:                     sb.append(", ");
1:                 }
1: 
1:                 return sb.substring(0, Math.max(0, sb.length() - 2));
1:             }
1:         } else {
1:             return "";
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.SetConstraintsNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package     org.apache.derby.impl.sql.compile;
1: 
1: import java.util.List;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.shared.common.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: /**
1:  * A SetConstraintsNode is the root of a QueryTree that represents a
1:  * SET CONSTRAINTS statement.
1:  */
1: 
1: class SetConstraintsNode extends MiscellaneousStatementNode
1: {
1:     /**
1:      * List of strings representing the constraints we want to
1:      * set. If empty, this means ALL.
1:      */
1:     final private List<TableName> constraints;
1: 
1:     /**
1:      * Encodes IMMEDIATE (false), DEFERRED (true)
1:      */
1:     final private boolean deferred;
1: 
1:     /**
1:      *
1:      * @param constraints List of strings representing the constraints
1:      *                    we want to set (empty means ALL).
1:      * @param deferred    Encodes IMMEDIATE ({@code false}) or DEFERRED
1:      *                    ({@code true})
1:      * @param cm          The context manager
0:      * @throws StandardException
1:      */
1:     SetConstraintsNode(
1:             List<TableName> constraints,
1:             boolean deferred,
1:             ContextManager cm) {
1:         super(cm);
1:         this.constraints = constraints;
1:         this.deferred = deferred;
1:     }
1: 
1:     /**
1:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:      * for how this should be done for tree printing.
1:      *
1:      * @return  This object as a String
1:      */
1:     @Override
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG) {
1:             return super.toString() + formatList(constraints) + ":" +
1:                     (deferred ? " DEFERRED" : " IMMEDIATE")  + "\n";
1:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     String formatList(List<TableName> constraints) {
0:         StringBuilder sb = new StringBuilder();
1: 
0:         for (TableName tn : constraints) {
0:             sb.append(tn);
0:             sb.append(", ");
1:         }
1: 
0:         return sb.substring(0, Math.max(0, sb.length() - 2));
1:     }
1: 
1:     public String statementToString()
1:     {
1:         return "SET CONSTRAINTS";
1:     }
1: 
1:     /**
1:      * Create the Constant information that will drive the guts of
1:      * Execution.
1:      *
1:      * @exception StandardException         Thrown on failure
1:      */
1:     @Override
1:     public ConstantAction   makeConstantAction() throws StandardException
1:     {
1:         return getGenericConstantActionFactory().
1:             getSetConstraintsConstantAction(constraints, deferred);
1:     }
1: 
1:     @Override
1:     public void bindStatement() throws StandardException
1:     {
0:         final DataDictionary dd = getDataDictionary();
1: 
1:         if (constraints != null) {
1:             for (TableName c : constraints) {
0:                 c.bind(dd);
1:             }
1:         }
1:     }
1: 
1: }
============================================================================