1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.TargetResultSet
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * The TargetResultSet interface is used to provide additional
1:eac0369:  * operations on result sets that are the target of a bulk insert 
1:eac0369:  * or update.  This is useful because bulk insert is upside down -
1:eac0369:  * the insert is done via the store.
2:eac0369:  *
1:eac0369:  */
1:eac0369: public interface TargetResultSet extends ResultSet
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Pass a changed row and the row location for that row
1:eac0369: 	 * to the target result set.
1:eac0369: 	 *
1:eac0369: 	 * @param execRow		The changed row.
1:eac0369: 	 * @param rowLocation	The row location of the row.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369: 	 */
1:eac0369: 	public void changedRow(ExecRow execRow, RowLocation rowLocation) throws StandardException;
1:eac0369: 
1:af1c18c:     public void offendingRowLocation(
1:af1c18c:             RowLocation rl, long constainerId) throws StandardException;
1:eac0369: 	/**
1:eac0369: 	 * Preprocess the source row prior to getting it back from the source.
1:eac0369: 	 * This is useful for bulk insert where the store stands between the target and 
1:eac0369: 	 * the source.
1:eac0369: 	 *
1:eac0369: 	 * @param sourceRow	The source row.
1:eac0369: 	 *
1:eac0369: 	 * @return The preprocessed source row.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369: 	 */
1:eac0369: 	public ExecRow preprocessSourceRow(ExecRow sourceRow) throws StandardException;
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     public void offendingRowLocation(
1:             RowLocation rl, long constainerId) throws StandardException;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.TargetResultSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.sql.ResultSet;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1:  * The TargetResultSet interface is used to provide additional
1:  * operations on result sets that are the target of a bulk insert 
1:  * or update.  This is useful because bulk insert is upside down -
1:  * the insert is done via the store.
1:  *
0:  * @author jerry
1:  */
1: public interface TargetResultSet extends ResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Pass a changed row and the row location for that row
1: 	 * to the target result set.
1: 	 *
1: 	 * @param execRow		The changed row.
1: 	 * @param rowLocation	The row location of the row.
1: 	 *
0: 	 * @return Nothing.
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1: 	 */
1: 	public void changedRow(ExecRow execRow, RowLocation rowLocation) throws StandardException;
1: 
1: 	/**
1: 	 * Preprocess the source row prior to getting it back from the source.
1: 	 * This is useful for bulk insert where the store stands between the target and 
1: 	 * the source.
1: 	 *
1: 	 * @param sourceRow	The source row.
1: 	 *
1: 	 * @return The preprocessed source row.
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1: 	 */
1: 	public ExecRow preprocessSourceRow(ExecRow sourceRow) throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0:  * The TargetResultSet interface is used to provide additional
0:  * operations on result sets that are the target of a bulk insert 
0:  * or update.  This is useful because bulk insert is upside down -
0:  * the insert is done via the store.
0:  *
0:  * @author jerry
0:  */
0: public interface TargetResultSet extends ResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Pass a changed row and the row location for that row
0: 	 * to the target result set.
0: 	 *
0: 	 * @param execRow		The changed row.
0: 	 * @param rowLocation	The row location of the row.
0: 	 *
0: 	 * @return Nothing.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void changedRow(ExecRow execRow, RowLocation rowLocation) throws StandardException;
0: 
0: 	/**
0: 	 * Preprocess the source row prior to getting it back from the source.
0: 	 * This is useful for bulk insert where the store stands between the target and 
0: 	 * the source.
0: 	 *
0: 	 * @param sourceRow	The source row.
0: 	 *
0: 	 * @return The preprocessed source row.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public ExecRow preprocessSourceRow(ExecRow sourceRow) throws StandardException;
0: }
============================================================================