1:dff95a1: /*
1:6ce7ab2: 
1:dff95a1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL
1:6ce7ab2: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
4:dff95a1: 
1:dff95a1:       http://www.apache.org/licenses/LICENSE-2.0
1:dff95a1: 
1:dff95a1:    Unless required by applicable law or agreed to in writing, software
1:dff95a1:    distributed under the License is distributed on an "AS IS" BASIS,
1:dff95a1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dff95a1:    See the License for the specific language governing permissions and
1:dff95a1:    limitations under the License.
1:dff95a1: 
1:dff95a1:  */
1:6ce7ab2: 
1:6ce7ab2: package org.apache.derbyTesting.functionTests.tests.lang;
1:6ce7ab2: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.DatabaseMetaData;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:3bd1dd8: import org.apache.derbyTesting.junit.JDBC;
1:c61536a: import org.apache.derbyTesting.junit.TestConfiguration;
1:6ce7ab2: 
1:6ce7ab2: /**
1:6ce7ab2:  * Test the dependency system for active statements when 
1:6ce7ab2:  * a DDL is executed in a separate connection after the
1:6ce7ab2:  * prepare but before the execute.
1:6ce7ab2:  *
1:6ce7ab2:  */
1:6ce7ab2: public class PrepareExecuteDDL extends BaseJDBCTestCase {
1:6ce7ab2: 	
1:03a99e2:     /**
1:03a99e2:      * Connection to execute the DDL on. Needs
1:03a99e2:      * to be different to the single connection
1:03a99e2:      * provided by the super-class. This connection
1:03a99e2:      * is used to execute DDL while the other connection
1:03a99e2:      * has open objcts dependent on the objct changed by the DDL.
1:03a99e2:      */
1:6ce7ab2: 	private Connection connDDL;
1:6ce7ab2: 	
1:6ce7ab2: 	/**
1:6ce7ab2: 	 * List of statements that are prepared and then executed.
1:6ce7ab2: 	 * The testPrepareExecute method prepares each statement
1:6ce7ab2: 	 * in this list, executes one DDL, executes each prepared
1:6ce7ab2: 	 * statement and then checks the result.
1:6ce7ab2: 	 * <BR>
1:6ce7ab2: 	 * The result checking is driven off the initial text
1:6ce7ab2: 	 * of the statement.
1:6ce7ab2: 	 */
1:6ce7ab2: 	private static final String[] STMTS =
1:6ce7ab2: 	{
1:6ce7ab2: 		"SELECT * FROM PED001",
1:6ce7ab2: 		"SELECT A, B FROM PED001",
1:6ff35b4: 		"GRANT SELECT ON PED001 TO U_PED_001",
1:6ff35b4: 		"GRANT SELECT(A,B) ON PED001 TO U_PED_001",
1:6ff35b4: 		"REVOKE SELECT(A,B) ON PED001 FROM U_PED_001",
1:6ff35b4: 		"REVOKE SELECT ON PED001 FROM U_PED_001",
1:6ce7ab2: 	};
1:6ce7ab2: 	
1:6ce7ab2: 	/**
1:6ce7ab2: 	 * All the DDL commands that will be executed, one per
1:6ce7ab2: 	 * fixture, as the mutation between the prepare and execute.
1:6ce7ab2: 	 */
1:6ce7ab2: 	private static final String[] DDL =
1:6ce7ab2: 	{
1:6ce7ab2: 		"ALTER TABLE PED001 ADD COLUMN D BIGINT",
1:6ce7ab2: 		"ALTER TABLE PED001 ADD CONSTRAINT PED001_PK PRIMARY KEY (A)",
1:6ce7ab2: 		"ALTER TABLE PED001 LOCKSIZE ROW",
1:6ce7ab2: 		"ALTER TABLE PED001 LOCKSIZE TABLE",
1:6ce7ab2: 		"DROP TABLE PED001",
1:6ce7ab2: 	};
1:6ce7ab2: 	
1:6ce7ab2: 	/**
1:6ce7ab2: 	 * Create a suite of tests, one per statement in DDL.
1:c61536a:      * This test is for testing the embedded dependency system
1:c61536a:      * though possibly it could be used for testing in client
1:c61536a:      * as well.
1:6ce7ab2: 	 */
1:6ce7ab2:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("PrepareExecuteDDL");
1:6ce7ab2:         for (int i = 0; i < DDL.length; i++)
1:6ce7ab2:         	suite.addTest(new PrepareExecuteDDL("testPrepareExcute", DDL[i]));
1:c61536a:         return TestConfiguration.sqlAuthorizationDecorator(suite);
1:6ce7ab2:     }
1:6ce7ab2: 	private final String ddl;
1:6ce7ab2: 	
1:6ce7ab2: 	private PrepareExecuteDDL(String name, String ddl)
1:6ce7ab2: 	{
1:6ce7ab2: 		super(name);
1:6ce7ab2: 		this.ddl = ddl;
1:6ce7ab2: 	}
1:6ce7ab2: 	
1:6ff35b4: 	private boolean tableDropped()
1:6ff35b4: 	{
1:6ff35b4: 		return ddl.startsWith("DROP TABLE ");
1:6ff35b4: 	}
1:6ff35b4: 	
1:6ce7ab2: 	public void testPrepareExcute() throws SQLException
1:6ce7ab2: 	{
1:03a99e2:         Connection conn = getConnection();
1:6ff35b4:         
1:6ce7ab2: 		PreparedStatement[] psa= new PreparedStatement[STMTS.length];
1:6ce7ab2: 		for (int i = 0; i < STMTS.length; i++)
1:6ce7ab2: 		{
1:6ce7ab2: 			String sql = STMTS[i];
1:6ce7ab2: 			psa[i] = conn.prepareStatement(sql);
1:6ce7ab2: 		}
1:6ce7ab2: 		
1:6ce7ab2: 		connDDL.createStatement().execute(ddl);
1:6ce7ab2: 		
1:6ce7ab2: 		for (int i = 0; i < STMTS.length; i++)
1:6ce7ab2: 		{
1:6ce7ab2: 			String sql = STMTS[i];
1:6ce7ab2: 			if (sql.startsWith("SELECT "))
1:6ce7ab2: 				checkSelect(psa[i], sql);
1:6ff35b4: 			else if (sql.startsWith("GRANT ")
1:6ff35b4: 					|| sql.startsWith("REVOKE "))
1:6ff35b4: 				checkGrantRevoke(psa[i], sql);
1:6ff35b4: 			else
1:6ff35b4: 				fail("unknown SQL" + sql);
1:6ff35b4:             
1:6ff35b4:             psa[i].close();
1:6ce7ab2: 		}
1:6ce7ab2: 	}
1:6ce7ab2: 	
1:6ce7ab2: 	private void checkSelect(PreparedStatement ps, String sql)
1:6ce7ab2: 	throws SQLException
1:6ce7ab2: 	{
1:6ce7ab2: 		assertEquals(true, sql.startsWith("SELECT "));
1:6ce7ab2: 		
1:6ce7ab2: 		boolean result;
1:6ce7ab2: 		try {
1:6ce7ab2: 			result = ps.execute();
1:6ce7ab2: 		} catch (SQLException e) {
1:6ce7ab2: 			
1:6ce7ab2: 			//TODO: Use DMD to see if table exists or not.
1:6ce7ab2: 			assertSQLState("42X05", e);
1:6ff35b4: 			assertTrue(tableDropped());
1:6ce7ab2: 			
1:6ce7ab2: 			return;
1:6ce7ab2: 		}
1:6ce7ab2: 		assertTrue(result);
1:6ce7ab2: 		
1:6ce7ab2: 		ResultSet rs = ps.getResultSet();
1:6ce7ab2: 		
1:6ce7ab2: 		DatabaseMetaData dmd = connDDL.getMetaData();
1:6ce7ab2: 		JDBC.assertMetaDataMatch(dmd, rs.getMetaData());
1:6ce7ab2: 		
1:6ce7ab2: 		boolean isSelectStar = sql.startsWith("SELECT * ");
1:6ce7ab2: 		
1:6ce7ab2: 		if (isSelectStar)
1:6ce7ab2: 			;
1:6ce7ab2: 		
1:70b437c: 		JDBC.assertDrainResults(rs);
1:6ce7ab2: 	}
1:6ff35b4: 	
1:6ce7ab2: 	
1:6ff35b4: 	private void checkGrantRevoke(PreparedStatement ps, String sql)
1:6ff35b4: 	throws SQLException
1:6ff35b4: 	{
1:6ff35b4: 		assertEquals(true, sql.startsWith("GRANT ")
1:6ff35b4: 				|| sql.startsWith("REVOKE "));
1:6ff35b4: 		
1:6ff35b4: 		try {
1:6ff35b4: 			assertFalse(ps.execute());
1:6ff35b4: 		} catch (SQLException e) {
1:6ff35b4: 			
1:6ff35b4: 			assertSQLState("42X05", e);
1:6ff35b4: 			assertTrue(tableDropped());
1:6ff35b4: 			
1:6ff35b4: 			return;
1:6ff35b4: 		}
1:6ff35b4: 	}	
1:6ce7ab2: 	/**
1:6ce7ab2: 	 * Set the fixture up with a clean, standard table PED001.
1:6ce7ab2: 	 */
1:6ce7ab2: 	protected void setUp() throws SQLException
1:6ce7ab2: 	{
1:6ce7ab2: 		
1:6ff35b4: 		connDDL = openDefaultConnection();
1:6ce7ab2: 		Statement s = connDDL.createStatement();
1:6ce7ab2: 		
1:6ce7ab2: 		s.execute(
1:6ce7ab2: 		"CREATE TABLE PED001 (A INT NOT NULL, B DECIMAL(6,4), C VARCHAR(20))");
1:6ce7ab2: 		
1:6ce7ab2: 		s.close();
1:6ce7ab2: 	}
1:6ce7ab2: 	
1:6ce7ab2: 	/**
1:6ce7ab2: 	 * Tear-down the fixture by removing the table (if it still
1:6ce7ab2: 	 * exists).
1:6ce7ab2: 	 */
1:6ff35b4: 	protected void tearDown() throws Exception
1:6ce7ab2: 	{
1:6ff35b4: 		Statement s = connDDL.createStatement();
1:6ce7ab2: 		try {
1:6ce7ab2: 			s.execute("DROP TABLE PED001");
1:6ce7ab2: 		} catch (SQLException e) {
1:6ce7ab2: 			assertSQLState("42Y55", e);
1:6ce7ab2: 		}
1:6ce7ab2: 		s.close();
1:6ce7ab2: 		JDBC.cleanup(connDDL);
1:05101f8: 		connDDL = null;
1:6ff35b4:         super.tearDown();
1:6ce7ab2: 		
1:6ce7ab2: 	}
1:6ce7ab2: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("PrepareExecuteDDL");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:05101f8
/////////////////////////////////////////////////////////////////////////
1: 		connDDL = null;
commit:c61536a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:      * This test is for testing the embedded dependency system
1:      * though possibly it could be used for testing in client
1:      * as well.
1:         return TestConfiguration.sqlAuthorizationDecorator(suite);
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("PrepareExecuteDDL");
commit:70b437c
/////////////////////////////////////////////////////////////////////////
1: 		JDBC.assertDrainResults(rs);
commit:0c4649d
/////////////////////////////////////////////////////////////////////////
0: 		JDBC.assertDrainResults(rs, -1);
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Connection to execute the DDL on. Needs
1:      * to be different to the single connection
1:      * provided by the super-class. This connection
1:      * is used to execute DDL while the other connection
1:      * has open objcts dependent on the objct changed by the DDL.
1:      */
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = getConnection();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
commit:6ff35b4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		"GRANT SELECT ON PED001 TO U_PED_001",
1: 		"GRANT SELECT(A,B) ON PED001 TO U_PED_001",
1: 		"REVOKE SELECT(A,B) ON PED001 FROM U_PED_001",
1: 		"REVOKE SELECT ON PED001 FROM U_PED_001",
/////////////////////////////////////////////////////////////////////////
1: 	private boolean tableDropped()
1: 	{
1: 		return ddl.startsWith("DROP TABLE ");
1: 	}
1: 	
0:         Connection conn = getXConnection();
1:         
/////////////////////////////////////////////////////////////////////////
1: 			else if (sql.startsWith("GRANT ")
1: 					|| sql.startsWith("REVOKE "))
1: 				checkGrantRevoke(psa[i], sql);
1: 			else
1: 				fail("unknown SQL" + sql);
1:             
1:             psa[i].close();
/////////////////////////////////////////////////////////////////////////
1: 			assertTrue(tableDropped());
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private void checkGrantRevoke(PreparedStatement ps, String sql)
1: 	throws SQLException
1: 	{
1: 		assertEquals(true, sql.startsWith("GRANT ")
1: 				|| sql.startsWith("REVOKE "));
1: 		
1: 		try {
1: 			assertFalse(ps.execute());
1: 		} catch (SQLException e) {
1: 			
1: 			assertSQLState("42X05", e);
1: 			assertTrue(tableDropped());
1: 			
1: 			return;
1: 		}
1: 	}	
1: 		connDDL = openDefaultConnection();
1: 	protected void tearDown() throws Exception
1: 		Statement s = connDDL.createStatement();
1:         super.tearDown();
commit:6ce7ab2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
0: import org.apache.derbyTesting.functionTests.util.JDBC;
1: 
0: import java.sql.*;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Test the dependency system for active statements when 
1:  * a DDL is executed in a separate connection after the
1:  * prepare but before the execute.
1:  *
1:  */
1: public class PrepareExecuteDDL extends BaseJDBCTestCase {
1: 	
0: 	private Connection conn;
1: 	private Connection connDDL;
1: 	
1: 	/**
1: 	 * List of statements that are prepared and then executed.
1: 	 * The testPrepareExecute method prepares each statement
1: 	 * in this list, executes one DDL, executes each prepared
1: 	 * statement and then checks the result.
1: 	 * <BR>
1: 	 * The result checking is driven off the initial text
1: 	 * of the statement.
1: 	 */
1: 	private static final String[] STMTS =
1: 	{
1: 		"SELECT * FROM PED001",
1: 		"SELECT A, B FROM PED001",
1: 	};
1: 	
1: 	/**
1: 	 * All the DDL commands that will be executed, one per
1: 	 * fixture, as the mutation between the prepare and execute.
1: 	 */
1: 	private static final String[] DDL =
1: 	{
1: 		"ALTER TABLE PED001 ADD COLUMN D BIGINT",
1: 		"ALTER TABLE PED001 ADD CONSTRAINT PED001_PK PRIMARY KEY (A)",
1: 		"ALTER TABLE PED001 LOCKSIZE ROW",
1: 		"ALTER TABLE PED001 LOCKSIZE TABLE",
1: 		"DROP TABLE PED001",
1: 	};
1: 	
1: 	/**
1: 	 * Create a suite of tests, one per statement in DDL.
1: 	 */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite();
1:         for (int i = 0; i < DDL.length; i++)
1:         	suite.addTest(new PrepareExecuteDDL("testPrepareExcute", DDL[i]));
0:         return suite;
1:     }
1: 	private final String ddl;
1: 	
1: 	private PrepareExecuteDDL(String name, String ddl)
1: 	{
1: 		super(name);
1: 		this.ddl = ddl;
1: 	}
1: 	
1: 	public void testPrepareExcute() throws SQLException
1: 	{
1: 		PreparedStatement[] psa= new PreparedStatement[STMTS.length];
1: 		for (int i = 0; i < STMTS.length; i++)
1: 		{
1: 			String sql = STMTS[i];
1: 			psa[i] = conn.prepareStatement(sql);
1: 		}
1: 		
1: 		connDDL.createStatement().execute(ddl);
1: 		
1: 		for (int i = 0; i < STMTS.length; i++)
1: 		{
1: 			String sql = STMTS[i];
1: 			if (sql.startsWith("SELECT "))
1: 				checkSelect(psa[i], sql);
1: 		}
1: 	}
1: 	
1: 	private void checkSelect(PreparedStatement ps, String sql)
1: 	throws SQLException
1: 	{
1: 		assertEquals(true, sql.startsWith("SELECT "));
1: 		
1: 		boolean result;
1: 		try {
1: 			result = ps.execute();
1: 		} catch (SQLException e) {
1: 			
1: 			//TODO: Use DMD to see if table exists or not.
1: 			assertSQLState("42X05", e);
1: 			
1: 			return;
1: 		}
1: 		assertTrue(result);
1: 		
1: 		ResultSet rs = ps.getResultSet();
1: 		
1: 		DatabaseMetaData dmd = connDDL.getMetaData();
1: 		JDBC.assertMetaDataMatch(dmd, rs.getMetaData());
1: 		
1: 		boolean isSelectStar = sql.startsWith("SELECT * ");
1: 		
1: 		if (isSelectStar)
1: 			;
1: 		
0: 		JDBC.assertDrainResults(rs);
1: 	}
1: 	
1: 	/**
1: 	 * Set the fixture up with a clean, standard table PED001.
1: 	 */
1: 	protected void setUp() throws SQLException
1: 	{
1: 		
0: 		connDDL = getConnection();
1: 		Statement s = connDDL.createStatement();
1: 		
1: 		s.execute(
1: 		"CREATE TABLE PED001 (A INT NOT NULL, B DECIMAL(6,4), C VARCHAR(20))");
1: 		
1: 		s.close();
1: 		
0: 		conn = getConnection();
1: 	}
1: 	
1: 	/**
1: 	 * Tear-down the fixture by removing the table (if it still
1: 	 * exists).
1: 	 */
0: 	protected void tearDown() throws SQLException
1: 	{
0: 		Statement s = conn.createStatement();
1: 		try {
1: 			s.execute("DROP TABLE PED001");
1: 		} catch (SQLException e) {
1: 			assertSQLState("42Y55", e);
1: 		}
1: 		s.close();
0: 		JDBC.cleanup(conn);
1: 		JDBC.cleanup(connDDL);
1: 		
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
0: }
============================================================================