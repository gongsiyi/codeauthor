1:a826375: /*
1:a826375: 
1:a826375:    Derby - Class org.apache.derby.impl.sql.compile.DMLModGeneratedColumnsStatementNode
1:a826375: 
1:a826375: 
1:a826375:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a826375:    contributor license agreements.  See the NOTICE file distributed with
1:a826375:    this work for additional information regarding copyright ownership.
1:a826375:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a826375:    (the "License"); you may not use this file except in compliance with
1:a826375:    the License.  You may obtain a copy of the License at
1:a826375: 
1:a826375:       http://www.apache.org/licenses/LICENSE-2.0
1:a826375: 
1:a826375:    Unless required by applicable law or agreed to in writing, software
1:a826375:    distributed under the License is distributed on an "AS IS" BASIS,
1:a826375:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a826375:    See the License for the specific language governing permissions and
1:a826375:    limitations under the License.
1:a826375: 
1:a826375:  */
1:a826375: 
1:a826375: package	org.apache.derby.impl.sql.compile;
1:a826375: 
1:a826375: import org.apache.derby.iapi.error.StandardException;
1:a826375: 
1:a826375: import org.apache.derby.iapi.services.context.ContextManager;
1:a826375: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:a826375: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1:a826375: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:a826375: import org.apache.derby.iapi.types.RowLocation;
1:a826375: 
1:a826375: /**
1:a826375:  * A DMLModGeneratedColumnsStatementNode for a table(with identity columns)
1:a826375:  *  modification: to wit, INSERT, UPDATE.
1:a826375:  * The code below used to reside in InsertNode but when we fixed DERBY-6414,
1:a826375:  *  rather than duplicating the code in UpdateNode, we moved the common code 
1:a826375:  *  for insert and update of identity columns to this class.
1:a826375:  *
1:a826375:  */
1:a826375: abstract class DMLModGeneratedColumnsStatementNode extends DMLModStatementNode
1:a826375: {
1:a826375: 
1:a826375:     protected   RowLocation[] 		autoincRowLocation;
1:a826375: 
1:a826375:     protected   String              identitySequenceUUIDString;
1:a826375: 
1:a826375:     DMLModGeneratedColumnsStatementNode
1:a826375:     (
1:a826375:      ResultSetNode resultSet,
1:a826375:      MatchingClauseNode matchingClause,
1:a826375:      int statementType,
1:a826375:      ContextManager cm
1:a826375:     )
1:a826375:     {
1:a826375:         super(resultSet, matchingClause, statementType, cm);
1:a826375:     }
1:a826375: 
1:a826375:     DMLModGeneratedColumnsStatementNode
1:a826375:     (
1:a826375:      ResultSetNode resultSet,
1:a826375:      MatchingClauseNode matchingClause,
1:a826375:      ContextManager cm
1:a826375:     )
1:a826375:     {
1:a826375:         super(resultSet, matchingClause, cm);
1:a826375:     }
1:a826375: 
1:a826375:     // if this is 10.11 or higher and the table has an identity column,
1:a826375:     // get the uuid of the sequence generator backing the identity column
1:a826375:     protected String getUUIDofSequenceGenerator() throws StandardException
1:a826375:     {
1:a826375:         DataDictionary dataDictionary = getDataDictionary();
1:a826375:         if (targetTableDescriptor.tableHasAutoincrement() &&
1:a826375:             dataDictionary.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11, null))
1:a826375:         {
1:a826375:             SequenceDescriptor  seq = dataDictionary.getSequenceDescriptor(
1:a826375:                 dataDictionary.getSystemSchemaDescriptor(),
1:a826375:                 TableDescriptor.makeSequenceName(targetTableDescriptor.getUUID()));
1:a826375:             return (seq.getUUID().toString());
1:a826375:         }
1:a826375:         return null;
1:a826375:     }
1:a826375: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a826375
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.DMLModGeneratedColumnsStatementNode
1: 
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1:  * A DMLModGeneratedColumnsStatementNode for a table(with identity columns)
1:  *  modification: to wit, INSERT, UPDATE.
1:  * The code below used to reside in InsertNode but when we fixed DERBY-6414,
1:  *  rather than duplicating the code in UpdateNode, we moved the common code 
1:  *  for insert and update of identity columns to this class.
1:  *
1:  */
1: abstract class DMLModGeneratedColumnsStatementNode extends DMLModStatementNode
1: {
1: 
1:     protected   RowLocation[] 		autoincRowLocation;
1: 
1:     protected   String              identitySequenceUUIDString;
1: 
1:     DMLModGeneratedColumnsStatementNode
1:     (
1:      ResultSetNode resultSet,
1:      MatchingClauseNode matchingClause,
1:      int statementType,
1:      ContextManager cm
1:     )
1:     {
1:         super(resultSet, matchingClause, statementType, cm);
1:     }
1: 
1:     DMLModGeneratedColumnsStatementNode
1:     (
1:      ResultSetNode resultSet,
1:      MatchingClauseNode matchingClause,
1:      ContextManager cm
1:     )
1:     {
1:         super(resultSet, matchingClause, cm);
1:     }
1: 
1:     // if this is 10.11 or higher and the table has an identity column,
1:     // get the uuid of the sequence generator backing the identity column
1:     protected String getUUIDofSequenceGenerator() throws StandardException
1:     {
1:         DataDictionary dataDictionary = getDataDictionary();
1:         if (targetTableDescriptor.tableHasAutoincrement() &&
1:             dataDictionary.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11, null))
1:         {
1:             SequenceDescriptor  seq = dataDictionary.getSequenceDescriptor(
1:                 dataDictionary.getSystemSchemaDescriptor(),
1:                 TableDescriptor.makeSequenceName(targetTableDescriptor.getUUID()));
1:             return (seq.getUUID().toString());
1:         }
1:         return null;
1:     }
1: }
============================================================================