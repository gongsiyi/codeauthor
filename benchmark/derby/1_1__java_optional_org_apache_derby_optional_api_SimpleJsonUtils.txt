1:2c38f3c: /*
3:2c38f3c: 
1:2c38f3c:    Derby - Class org.apache.derby.optional.api.SimpleJsonUtils
1:2c38f3c: 
1:2c38f3c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2c38f3c:    contributor license agreements.  See the NOTICE file distributed with
1:2c38f3c:    this work for additional information regarding copyright ownership.
1:2c38f3c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2c38f3c:    (the "License"); you may not use this file except in compliance with
1:2c38f3c:    the License.  You may obtain a copy of the License at
1:2c38f3c: 
1:2c38f3c:       http://www.apache.org/licenses/LICENSE-2.0
1:2c38f3c: 
1:2c38f3c:    Unless required by applicable law or agreed to in writing, software
1:2c38f3c:    distributed under the License is distributed on an "AS IS" BASIS,
1:2c38f3c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2c38f3c:    See the License for the specific language governing permissions and
1:2c38f3c:    limitations under the License.
1:2c38f3c: 
2:2c38f3c:  */
1:2c38f3c: 
1:2c38f3c: package org.apache.derby.optional.api;
1:2c38f3c: 
1:4394bdd: import java.io.FileInputStream;
1:4394bdd: import java.io.InputStream;
1:4394bdd: import java.io.InputStreamReader;
1:4394bdd: import java.io.IOException;
1:4394bdd: import java.io.Reader;
1:4394bdd: import java.io.StringReader;
1:4394bdd: import java.io.UnsupportedEncodingException;
1:4394bdd: import java.net.MalformedURLException;
1:4394bdd: import java.net.URL;
1:4394bdd: import java.security.AccessController;
1:4394bdd: import java.security.PrivilegedActionException;
1:4394bdd: import java.security.PrivilegedExceptionAction;
1:2c38f3c: import java.sql.Blob;
1:2c38f3c: import java.sql.Clob;
1:2c38f3c: import java.sql.Connection;
1:2c38f3c: import java.sql.DriverManager;
1:2c38f3c: import java.sql.PreparedStatement;
1:2c38f3c: import java.sql.ResultSet;
1:2c38f3c: import java.sql.ResultSetMetaData;
1:2c38f3c: import java.sql.SQLException;
1:2c38f3c: 
1:2c38f3c: import org.json.simple.JSONArray;
1:2c38f3c: import org.json.simple.JSONObject;
1:4394bdd: import org.json.simple.parser.JSONParser;
1:2c38f3c: 
1:961b0f4: import org.apache.derby.iapi.types.HarmonySerialClob;
1:2c38f3c: import org.apache.derby.iapi.util.StringUtil;
1:6b8ad38: import org.apache.derby.optional.utils.ToolUtilities;
1:2c38f3c: 
2:2c38f3c: /**
2:2c38f3c:  * <p>
1:2c38f3c:  * Utility methods for simple JSON support.
2:2c38f3c:  * </p>
1:2c38f3c:  */
1:2c38f3c: public abstract class SimpleJsonUtils
3:2c38f3c: {
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //  CONSTANTS
1:2c38f3c:     //
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //  STATE
1:2c38f3c:     //
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //  PUBLIC BEHAVIOR
1:2c38f3c:     //
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:2c38f3c:      * Pack a ResultSet into a JSONArray. This method could be called
1:2c38f3c:      * client-side on any query result from any DBMS. Each row is
1:2c38f3c:      * converted into a JSONObject whose keys are the corresponding
1:2c38f3c:      * column names from the ResultSet.
1:2c38f3c:      * Closes the ResultSet once it has been drained. Datatypes map
1:2c38f3c:      * to JSON values as follows:
1:2c38f3c:      * </p>
1:2c38f3c:      *
1:2c38f3c:      * <ul>
1:2c38f3c:      * <li><i>NULL</i> - The JSON null literal.</li>
1:2c38f3c:      * <li><i>SMALLINT, INT, BIGINT</i> - JSON integer values.</li>
1:2c38f3c:      * <li><i>DOUBLE, FLOAT, REAL, DECIMAL, NUMERIC</i> - JSON floating point values.</li>
1:2c38f3c:      * <li><i>CHAR, VARCHAR, LONG VARCHAR, CLOB</i> - JSON string values.</li>
1:2c38f3c:      * <li><i>BLOB, VARCHAR FOR BIT DATA, LONG VARCHAR FOR BIT DATA</i> - The
1:2c38f3c:      * byte array is turned into a hex string (2 hex digits per byte) and the
1:2c38f3c:      * result is returned as a JSON string.</li>
1:2c38f3c:      * <li><i>All other types</i> - Converted to JSON
1:2c38f3c:      * string values via their toString() methods.</li>
1:2c38f3c:      * </ul>
1:2c38f3c:      */
1:2c38f3c:     @SuppressWarnings("unchecked")
1:2c38f3c:     public  static  JSONArray   toJSON( ResultSet rs )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         ResultSetMetaData   rsmd = rs.getMetaData();
1:2c38f3c:         int                 columnCount = rsmd.getColumnCount();
1:2c38f3c:         JSONArray           result = new JSONArray();
1:2c38f3c: 
1:2c38f3c:         try {
1:2c38f3c:             while( rs.next() )
1:2c38f3c:             {
1:2c38f3c:                 JSONObject  row = new JSONObject();
1:2c38f3c: 
1:2c38f3c:                 for ( int i = 1; i <= columnCount; i++ )
1:2c38f3c:                 {
1:2c38f3c:                     String  keyName = rsmd.getColumnName( i );
1:2c38f3c:                     Object  value = getLegalJsonValue( rs.getObject( i ) );
1:2c38f3c: 
1:2c38f3c:                     row.put( keyName, value );
3:2c38f3c:                 }
1:4394bdd: 
1:2c38f3c:                 result.add( row );
1:4394bdd:             }
1:2c38f3c:         }
1:2c38f3c:         finally
1:4394bdd:         {
1:2c38f3c:             if ( rs != null )
1:4394bdd:             {
1:2c38f3c:                 rs.close();
1:2c38f3c:             }
1:2c38f3c:         }
1:4394bdd: 
1:2c38f3c:         return result;
1:2c38f3c:     }
1:2c38f3c: 
1:4394bdd:     /**
1:4394bdd:      * Construct a JSONArray from a Reader.
1:4394bdd:      */
1:4394bdd:     public static JSONArray readArray( Reader reader )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         JSONParser  parser = new JSONParser();
1:4394bdd:         
1:4394bdd:         Object  obj = null;
1:4394bdd:         try {
1:4394bdd:             obj = parser.parse( reader );
1:4394bdd:         }
1:6b8ad38:         catch( Throwable t) { throw ToolUtilities.wrap( t ); }
1:4394bdd: 
1:4394bdd:         if ( (obj == null) || !(obj instanceof JSONArray) )
1:4394bdd:         {
1:4394bdd:             throw new SQLException( "Document is not a JSON array." );
1:4394bdd:         }
1:4394bdd: 
1:4394bdd:         return (JSONArray) obj;
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:4394bdd:      * SQL FUNCTION to convert a JSON document string into a JSONArray.
1:4394bdd:      * This function is registered by the simpleJson optional tool.
1:4394bdd:      * </p>
1:4394bdd:      */
1:4394bdd:     public  static  JSONArray   readArrayFromString( String document )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         if ( document == null ) { document = ""; }
1:4394bdd: 
1:4394bdd:         return readArray( new StringReader( document ) );
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     /**
1:fd0d01f:      * Read a JSONArray from an InputStream. Close the stream
1:fd0d01f:      * after reading the JSONArray.
1:4394bdd:      */
1:4394bdd:     public static JSONArray readArrayFromStream
1:4394bdd:         ( InputStream inputStream, String characterSetName )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         try {
1:4394bdd:             return readArray( new InputStreamReader( inputStream, characterSetName ) );
1:4394bdd:         }
1:6b8ad38:         catch (UnsupportedEncodingException uee) { throw ToolUtilities.wrap( uee ); }
1:fd0d01f:         finally
1:fd0d01f:         {
1:fd0d01f:             try {
1:fd0d01f:                 inputStream.close();
1:fd0d01f:             }
1:6b8ad38:             catch (IOException ioe) { throw ToolUtilities.wrap( ioe ); }
1:fd0d01f:         }
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * SQL FUNCTION to read a JSONArray from a File. This function
1:4394bdd:      * is registered by the simpleJson optional tool.
1:4394bdd:      */
1:4394bdd:     public static JSONArray readArrayFromFile
1:4394bdd:         ( String fileName, String characterSetName )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         FileInputStream fis = null;
1:4394bdd:         final String name_of_file = fileName;
1:4394bdd:         
1:4394bdd:         try {
1:4394bdd:             fis = AccessController.doPrivileged(
1:4394bdd:              new PrivilegedExceptionAction<FileInputStream>()
1:4394bdd:              {
1:4394bdd:                  public FileInputStream run() throws IOException
1:4394bdd:                  {
1:4394bdd:                      return new FileInputStream( name_of_file );
1:4394bdd:                  }
1:4394bdd:              }
1:4394bdd:              );
1:4394bdd:         }
1:6b8ad38:         catch (PrivilegedActionException pae) { throw ToolUtilities.wrap( pae ); }
1:4394bdd: 
1:4394bdd:         return readArrayFromStream( fis, characterSetName );
1:4394bdd:     }
1:4394bdd: 
1:4394bdd:     /**
1:4394bdd:      * SQL FUNCTION to read a JSONArray from an URL address.
1:4394bdd:      * This function is registered by the simpleJson optional tool.
1:4394bdd:      */
1:4394bdd:     public static JSONArray readArrayFromURL
1:4394bdd:         ( String urlString, String characterSetName )
1:4394bdd:         throws SQLException
1:4394bdd:     {
1:4394bdd:         InputStream inputStream = null;
1:4394bdd:         final   String  url_string = urlString;
1:4394bdd:         
1:4394bdd:         try {
1:4394bdd:             inputStream = AccessController.doPrivileged(
1:4394bdd:              new PrivilegedExceptionAction<InputStream>()
1:4394bdd:              {
1:4394bdd:                  public InputStream run() throws IOException, MalformedURLException
1:4394bdd:                  {
1:4394bdd:                      URL url = new URL( url_string );
1:4394bdd:                      return url.openStream();
1:4394bdd:                  }
1:4394bdd:              }
1:4394bdd:              );
1:4394bdd:         }
1:6b8ad38:         catch (PrivilegedActionException pae) { throw ToolUtilities.wrap( pae ); }
1:4394bdd:         
1:4394bdd:         return readArrayFromStream( inputStream, characterSetName );
1:4394bdd:     }
1:4394bdd: 
1:961b0f4:     /**
1:961b0f4:      * SQL FUNCTION to convert a JSONArray into a CLOB.
1:961b0f4:      */
1:961b0f4:     public static Clob arrayToClob( JSONArray array )
1:961b0f4:     {
1:961b0f4:         if ( array == null ) { return null; }
1:961b0f4:         else { return new HarmonySerialClob( array.toJSONString() ); }
1:961b0f4:     }
1:4394bdd: 
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //  MINIONS
1:2c38f3c:     //
1:2c38f3c:     /////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:4394bdd:     /**
1:4394bdd:      * <p>
1:2c38f3c:      * Turns an object into something which is a legal JSON value.
1:4394bdd:      * </p>
1:4394bdd:      */
1:2c38f3c:     private static  Object  getLegalJsonValue( Object obj )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         if (
1:2c38f3c:             (obj == null) ||
1:2c38f3c:             (obj instanceof Long) ||
1:2c38f3c:             (obj instanceof Double) ||
1:2c38f3c:             (obj instanceof Boolean) ||
1:2c38f3c:             (obj instanceof String) ||
1:2c38f3c:             (obj instanceof JSONObject) ||
1:2c38f3c:             (obj instanceof JSONArray)
1:2c38f3c:             )
1:2c38f3c:         {
1:2c38f3c:             return obj;
1:2c38f3c:         }
1:2c38f3c:         // other exact integers
1:2c38f3c:         else if (
1:2c38f3c:                  (obj instanceof Byte) ||
1:2c38f3c:                  (obj instanceof Short) ||
1:2c38f3c:                  (obj instanceof Integer)
1:2c38f3c:                  )
1:2c38f3c:         {
1:2c38f3c:             return ((Number) obj).longValue();
1:2c38f3c:         }
1:2c38f3c:         // all other numbers, including BigDecimal
1:2c38f3c:         else if (obj instanceof Number) { return ((Number) obj).doubleValue(); }
1:2c38f3c:         else if (obj instanceof Clob)
1:2c38f3c:         {
1:2c38f3c:             Clob    clob = (Clob) obj;
1:2c38f3c:             return clob.getSubString( 1, (int) clob.length() );
1:2c38f3c:         }
1:2c38f3c:         else if (obj instanceof Blob)
1:2c38f3c:         {
1:2c38f3c:             Blob    blob = (Blob) obj;
1:2c38f3c:             return formatBytes( blob.getBytes( 1, (int) blob.length() ) );
1:2c38f3c:         }
1:2c38f3c:         if (obj instanceof byte[])
1:2c38f3c:         {
1:2c38f3c:             return formatBytes( (byte[]) obj );
1:2c38f3c:         }
1:2c38f3c:         // catch-all
1:2c38f3c:         else { return obj.toString(); }
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  String  formatBytes( byte[] bytes )
1:2c38f3c:     {
1:2c38f3c:         return StringUtil.toHexString( bytes, 0, bytes.length );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  Connection  getDerbyConnection() throws SQLException
1:2c38f3c:     {
1:2c38f3c:         return DriverManager.getConnection( "jdbc:default:connection" );
1:4394bdd:     }
1:4394bdd:     
1:2c38f3c: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:961b0f4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.HarmonySerialClob;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * SQL FUNCTION to convert a JSONArray into a CLOB.
1:      */
1:     public static Clob arrayToClob( JSONArray array )
1:     {
1:         if ( array == null ) { return null; }
1:         else { return new HarmonySerialClob( array.toJSONString() ); }
1:     }
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.utils.ToolUtilities;
/////////////////////////////////////////////////////////////////////////
1:         catch( Throwable t) { throw ToolUtilities.wrap( t ); }
/////////////////////////////////////////////////////////////////////////
1:         catch (UnsupportedEncodingException uee) { throw ToolUtilities.wrap( uee ); }
1:             catch (IOException ioe) { throw ToolUtilities.wrap( ioe ); }
/////////////////////////////////////////////////////////////////////////
1:         catch (PrivilegedActionException pae) { throw ToolUtilities.wrap( pae ); }
/////////////////////////////////////////////////////////////////////////
1:         catch (PrivilegedActionException pae) { throw ToolUtilities.wrap( pae ); }
/////////////////////////////////////////////////////////////////////////
commit:fd0d01f
/////////////////////////////////////////////////////////////////////////
1:      * Read a JSONArray from an InputStream. Close the stream
1:      * after reading the JSONArray.
/////////////////////////////////////////////////////////////////////////
1:         finally
1:         {
1:             try {
1:                 inputStream.close();
1:             }
0:             catch (IOException ioe) { throw wrap( ioe ); }
1:         }
commit:4394bdd
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.IOException;
1: import java.io.Reader;
1: import java.io.StringReader;
1: import java.io.UnsupportedEncodingException;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: import org.json.simple.parser.JSONParser;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Construct a JSONArray from a Reader.
1:      */
1:     public static JSONArray readArray( Reader reader )
1:         throws SQLException
1:     {
1:         JSONParser  parser = new JSONParser();
1:         
1:         Object  obj = null;
1:         try {
1:             obj = parser.parse( reader );
1:         }
0:         catch( Throwable t) { throw wrap( t ); }
1: 
1:         if ( (obj == null) || !(obj instanceof JSONArray) )
1:         {
1:             throw new SQLException( "Document is not a JSON array." );
1:         }
1: 
1:         return (JSONArray) obj;
1:     }
1: 
1:     /**
1:      * <p>
1:      * SQL FUNCTION to convert a JSON document string into a JSONArray.
1:      * This function is registered by the simpleJson optional tool.
1:      * </p>
1:      */
1:     public  static  JSONArray   readArrayFromString( String document )
1:         throws SQLException
1:     {
1:         if ( document == null ) { document = ""; }
1: 
1:         return readArray( new StringReader( document ) );
1:     }
1: 
1:     /**
0:      * Read a JSONArray from an InputStream.
1:      */
1:     public static JSONArray readArrayFromStream
1:         ( InputStream inputStream, String characterSetName )
1:         throws SQLException
1:     {
1:         try {
1:             return readArray( new InputStreamReader( inputStream, characterSetName ) );
1:         }
0:         catch (UnsupportedEncodingException uee) { throw wrap( uee ); }
1:     }
1: 
1:     /**
1:      * SQL FUNCTION to read a JSONArray from a File. This function
1:      * is registered by the simpleJson optional tool.
1:      */
1:     public static JSONArray readArrayFromFile
1:         ( String fileName, String characterSetName )
1:         throws SQLException
1:     {
1:         FileInputStream fis = null;
1:         final String name_of_file = fileName;
1:         
1:         try {
1:             fis = AccessController.doPrivileged(
1:              new PrivilegedExceptionAction<FileInputStream>()
1:              {
1:                  public FileInputStream run() throws IOException
1:                  {
1:                      return new FileInputStream( name_of_file );
1:                  }
1:              }
1:              );
1:         }
0:         catch (PrivilegedActionException pae) { throw wrap( pae ); }
1: 
1:         return readArrayFromStream( fis, characterSetName );
1:     }
1: 
1:     /**
1:      * SQL FUNCTION to read a JSONArray from an URL address.
1:      * This function is registered by the simpleJson optional tool.
1:      */
1:     public static JSONArray readArrayFromURL
1:         ( String urlString, String characterSetName )
1:         throws SQLException
1:     {
1:         InputStream inputStream = null;
1:         final   String  url_string = urlString;
1:         
1:         try {
1:             inputStream = AccessController.doPrivileged(
1:              new PrivilegedExceptionAction<InputStream>()
1:              {
1:                  public InputStream run() throws IOException, MalformedURLException
1:                  {
1:                      URL url = new URL( url_string );
1:                      return url.openStream();
1:                  }
1:              }
1:              );
1:         }
0:         catch (PrivilegedActionException pae) { throw wrap( pae ); }
1:         
1:         return readArrayFromStream( inputStream, characterSetName );
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * <p>
0:      * Wrap an exception in a SQLException.
1:      * </p>
1:      */
0:     static SQLException wrap( Throwable t )
1:     {
0:         String  message = t.getMessage();
0:         if ( (message == null) || (message.length() == 0) )
1:         {
0:             message = t.toString();
1:         }
1:         
0:         return new SQLException( message, t );
1:     }
1:     
commit:2c38f3c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.optional.api.SimpleJsonUtils
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.optional.api;
1: 
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: 
1: import org.json.simple.JSONArray;
1: import org.json.simple.JSONObject;
1: 
1: import org.apache.derby.iapi.util.StringUtil;
1: 
1: /**
1:  * <p>
1:  * Utility methods for simple JSON support.
1:  * </p>
1:  */
1: public abstract class SimpleJsonUtils
1: {
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  PUBLIC BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Pack a ResultSet into a JSONArray. This method could be called
1:      * client-side on any query result from any DBMS. Each row is
1:      * converted into a JSONObject whose keys are the corresponding
1:      * column names from the ResultSet.
1:      * Closes the ResultSet once it has been drained. Datatypes map
1:      * to JSON values as follows:
1:      * </p>
1:      *
1:      * <ul>
1:      * <li><i>NULL</i> - The JSON null literal.</li>
1:      * <li><i>SMALLINT, INT, BIGINT</i> - JSON integer values.</li>
1:      * <li><i>DOUBLE, FLOAT, REAL, DECIMAL, NUMERIC</i> - JSON floating point values.</li>
1:      * <li><i>CHAR, VARCHAR, LONG VARCHAR, CLOB</i> - JSON string values.</li>
1:      * <li><i>BLOB, VARCHAR FOR BIT DATA, LONG VARCHAR FOR BIT DATA</i> - The
1:      * byte array is turned into a hex string (2 hex digits per byte) and the
1:      * result is returned as a JSON string.</li>
1:      * <li><i>All other types</i> - Converted to JSON
1:      * string values via their toString() methods.</li>
1:      * </ul>
1:      */
1:     @SuppressWarnings("unchecked")
1:     public  static  JSONArray   toJSON( ResultSet rs )
1:         throws SQLException
1:     {
1:         ResultSetMetaData   rsmd = rs.getMetaData();
1:         int                 columnCount = rsmd.getColumnCount();
1:         JSONArray           result = new JSONArray();
1: 
1:         try {
1:             while( rs.next() )
1:             {
1:                 JSONObject  row = new JSONObject();
1: 
1:                 for ( int i = 1; i <= columnCount; i++ )
1:                 {
1:                     String  keyName = rsmd.getColumnName( i );
1:                     Object  value = getLegalJsonValue( rs.getObject( i ) );
1: 
1:                     row.put( keyName, value );
1:                 }
1: 
1:                 result.add( row );
1:             }
1:         }
1:         finally
1:         {
1:             if ( rs != null )
1:             {
1:                 rs.close();
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Turns an object into something which is a legal JSON value.
1:      * </p>
1:      */
1:     private static  Object  getLegalJsonValue( Object obj )
1:         throws SQLException
1:     {
1:         if (
1:             (obj == null) ||
1:             (obj instanceof Long) ||
1:             (obj instanceof Double) ||
1:             (obj instanceof Boolean) ||
1:             (obj instanceof String) ||
1:             (obj instanceof JSONObject) ||
1:             (obj instanceof JSONArray)
1:             )
1:         {
1:             return obj;
1:         }
1:         // other exact integers
1:         else if (
1:                  (obj instanceof Byte) ||
1:                  (obj instanceof Short) ||
1:                  (obj instanceof Integer)
1:                  )
1:         {
1:             return ((Number) obj).longValue();
1:         }
1:         // all other numbers, including BigDecimal
1:         else if (obj instanceof Number) { return ((Number) obj).doubleValue(); }
1:         else if (obj instanceof Clob)
1:         {
1:             Clob    clob = (Clob) obj;
1:             return clob.getSubString( 1, (int) clob.length() );
1:         }
1:         else if (obj instanceof Blob)
1:         {
1:             Blob    blob = (Blob) obj;
1:             return formatBytes( blob.getBytes( 1, (int) blob.length() ) );
1:         }
1:         if (obj instanceof byte[])
1:         {
1:             return formatBytes( (byte[]) obj );
1:         }
1:         // catch-all
1:         else { return obj.toString(); }
1:     }
1: 
1:     private static  String  formatBytes( byte[] bytes )
1:     {
1:         return StringUtil.toHexString( bytes, 0, bytes.length );
1:     }
1: 
1:     private static  Connection  getDerbyConnection() throws SQLException
1:     {
1:         return DriverManager.getConnection( "jdbc:default:connection" );
1:     }
1: }
============================================================================