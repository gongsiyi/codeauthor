1:a69fa12: /*
1:a69fa12: 
1:a69fa12:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest
1:a69fa12: 
1:a69fa12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a69fa12:    contributor license agreements.  See the NOTICE file distributed with
1:a69fa12:    this work for additional information regarding copyright ownership.
1:a69fa12:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a69fa12:    (the "License"); you may not use this file except in compliance with
1:a69fa12:    the License.  You may obtain a copy of the License at
1:a69fa12: 
1:a69fa12:       http://www.apache.org/licenses/LICENSE-2.0
1:a69fa12: 
1:a69fa12:    Unless required by applicable law or agreed to in writing, software
1:a69fa12:    distributed under the License is distributed on an "AS IS" BASIS,
1:a69fa12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a69fa12:    See the License for the specific language governing permissions and
1:a69fa12:    limitations under the License.
1:a69fa12: 
1:a69fa12:  */
1:a69fa12: package org.apache.derbyTesting.functionTests.tests.compatibility;
1:a69fa12: 
1:a69fa12: import java.sql.Connection;
1:a69fa12: import java.sql.PreparedStatement;
1:a69fa12: import java.sql.ResultSet;
1:a69fa12: import java.sql.SQLException;
1:a69fa12: import java.sql.Types;
1:a69fa12: 
1:a69fa12: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:a69fa12: import org.apache.derbyTesting.junit.DerbyVersion;
1:a69fa12: import org.apache.derbyTesting.junit.Version;
1:a69fa12: 
1:a69fa12: /**
1:a69fa12:  * Abstract test case with common functionality often required when writing
1:a69fa12:  * JDBC client driver compatibility tests.
1:a69fa12:  */
1:a69fa12: abstract class AbstractCompatibilityTest
1:a69fa12:         extends BaseJDBCTestCase
1:a69fa12: {
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12:     //
1:a69fa12:     //    CONSTANTS
1:a69fa12:     //
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12: 
1:a69fa12:     public static final String SERVER_VERSION_FUNCTION = "getVMVersion";
1:a69fa12: 
1:a69fa12:     private static final String VERSION_PROPERTY = "java.version";
1:a69fa12: 
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12:     //
1:a69fa12:     //    STATE
1:a69fa12:     //
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12: 
1:a69fa12:     private static Version _clientVMLevel;        // level of client-side vm
1:a69fa12:     private static Version _serverVMLevel;        // level of server vm
1:a69fa12:     private static DerbyVersion _driverLevel;     // client rev level
1:a69fa12: 
1:a69fa12:     public AbstractCompatibilityTest(String name) {
1:a69fa12:         super(name);
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12:     //
1:a69fa12:     //    PUBLIC BEHAVIOR
1:a69fa12:     //
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12: 
1:a69fa12:     public DerbyVersion getServerVersion() throws SQLException {
1:a69fa12:         return getServerVersion(getConnection());
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Get the version of the server.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     protected static DerbyVersion getServerVersion(Connection con)
1:a69fa12:             throws SQLException {
1:a69fa12:         return DerbyVersion.parseVersionString(
1:a69fa12:                 con.getMetaData().getDatabaseProductVersion());
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Get the version of the client.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public DerbyVersion getDriverVersion()
1:a69fa12:             throws SQLException {
1:a69fa12:         if (_driverLevel == null) {
1:a69fa12:             _driverLevel = DerbyVersion.parseVersionString(
1:a69fa12:                     getConnection().getMetaData().getDriverVersion());
1:a69fa12:         }
1:a69fa12:         return _driverLevel;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Get the vm level of the server.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public    static    Version    getServerVMVersion()    { return _serverVMLevel; }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Get the vm level of the client.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public    Version    getClientVMVersion() { return _clientVMLevel; }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      *  Report whether the server supports ANSI UDTs.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public boolean serverSupportsUDTs()
1:a69fa12:             throws SQLException {
1:a69fa12:         return serverSupportsUDTs(getConnection());
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     public static boolean serverSupportsUDTs(Connection con)
1:a69fa12:             throws SQLException {
1:a69fa12:         return getServerVersion(con).atLeast( DerbyVersion._10_6 );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12:     //
1:a69fa12:     //    DATABASE-SIDE FUNCTIONS
1:a69fa12:     //
1:a69fa12:     /////////////////////////////////////////////////////////////
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Get the vm level of the server.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public    static    String    getVMVersion()
1:a69fa12:     {
1:a69fa12:         return System.getProperty( VERSION_PROPERTY );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     // POTENTIALLY TEMPORARY METHODS - CLEANUP LATER
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Assert two objects are equal, allowing nulls to be equal.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public    void    compareObjects( String message, Object left, Object right )
1:a69fa12:             throws SQLException
1:a69fa12:     {
1:a69fa12:         message = message + "\n\t expected = " + left + "\n\t actual = " + right;
1:a69fa12: 
1:a69fa12:         if ( left == null )
1:a69fa12:         {
1:a69fa12:             assertNull( message, right );
1:a69fa12:         }
1:a69fa12:         else
1:a69fa12:         {
1:a69fa12:             assertNotNull( message, right );
1:a69fa12: 
1:a69fa12:             if ( left instanceof byte[] ) { compareBytes( message, left, right ); }
1:a69fa12:             else if ( left instanceof java.util.Date ) { compareDates( message, left, right ); }
1:a69fa12:             else { assertTrue( message, left.equals( right ) ); }
1:a69fa12:         }
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Assert two byte arrays are equal, allowing nulls to be equal.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public    void    compareBytes( String message, Object left, Object right )
1:a69fa12:     {
1:a69fa12:         if ( left == null )    { assertNull( message, right ); }
1:a69fa12:         else { assertNotNull( right ); }
1:a69fa12: 
1:a69fa12:         if ( !(left instanceof byte[] ) ) { fail( message ); }
1:a69fa12:         if ( !(right instanceof byte[] ) ) { fail( message ); }
1:a69fa12: 
1:a69fa12:         byte[]    leftBytes = (byte[]) left;
1:a69fa12:         byte[]    rightBytes = (byte[]) right;
1:a69fa12:         int        count = leftBytes.length;
1:a69fa12: 
1:a69fa12:         assertEquals( message, count, rightBytes.length );
1:a69fa12: 
1:a69fa12:         for ( int i = 0; i < count; i++ )
1:a69fa12:         {
1:a69fa12:             assertEquals( message + "[ " + i + " ]", leftBytes[ i ], rightBytes[ i ] );
1:a69fa12:         }
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Assert two Dates are equal, allowing nulls to be equal.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     public    void    compareDates( String message, Object left, Object right )
1:a69fa12:     {
1:a69fa12:         if ( left == null )    { assertNull( message, right ); }
1:a69fa12:         else { assertNotNull( right ); }
1:a69fa12: 
1:a69fa12:         if ( !(left instanceof java.util.Date ) ) { fail( message ); }
1:a69fa12:         if ( !(right instanceof java.util.Date ) ) { fail( message ); }
1:a69fa12: 
1:a69fa12:         assertEquals( message, left.toString(), right.toString() );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Read a column from a ResultSet given its column name and expected jdbc
1:a69fa12:      * type. This method is useful if you are want to verify the getXXX() logic
1:a69fa12:      * most naturally fitting the declared SQL type.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     private static final int JDBC_BOOLEAN = 16;
1:a69fa12:     protected    Object    getColumn( ResultSet rs, String columnName, int jdbcType )
1:a69fa12:         throws SQLException
1:a69fa12:     {
1:a69fa12:         Object        retval = null;
1:a69fa12: 
1:a69fa12:         switch( jdbcType )
1:a69fa12:         {
1:a69fa12:             case JDBC_BOOLEAN:
1:a69fa12:                 retval = Boolean.valueOf(rs.getBoolean(columnName));
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.BIGINT:
1:39b3237:                 retval = rs.getLong( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.BLOB:
1:a69fa12:                 retval = rs.getBlob( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.CHAR:
1:a69fa12:             case Types.LONGVARCHAR:
1:a69fa12:             case Types.VARCHAR:
1:a69fa12:                 retval = rs.getString( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.BINARY:
1:a69fa12:             case Types.LONGVARBINARY:
1:a69fa12:             case Types.VARBINARY:
1:a69fa12:                 retval = rs.getBytes( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.CLOB:
1:a69fa12:                 retval = rs.getClob( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.DATE:
1:a69fa12:                 retval = rs.getDate( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.DECIMAL:
1:a69fa12:             case Types.NUMERIC:
1:a69fa12:                 retval = rs.getBigDecimal( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.DOUBLE:
1:39b3237:                 retval = rs.getDouble( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.REAL:
1:39b3237:                 retval = rs.getFloat( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.INTEGER:
1:39b3237:                 retval = rs.getInt( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.SMALLINT:
1:39b3237:                 retval = rs.getShort( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.TIME:
1:a69fa12:                 retval = rs.getTime( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.TIMESTAMP:
1:a69fa12:                 retval = rs.getTimestamp( columnName );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             default:
1:a69fa12:                 fail( "Unknown jdbc type " + jdbcType + " used to retrieve column: " + columnName );
1:a69fa12:                 break;
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         if ( rs.wasNull() ) { retval = null; }
1:a69fa12: 
1:a69fa12:         return retval;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Stuff a PreparedStatement parameter given its 1-based parameter position
1:a69fa12:      * and expected jdbc type. This method is useful for testing the setXXX()
1:a69fa12:      * methods most natural for a declared SQL type.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     protected    void    setParameter( PreparedStatement ps, int param, int jdbcType, Object value )
1:a69fa12:         throws SQLException
1:a69fa12:     {
1:a69fa12:         if ( value == null )
1:a69fa12:         {
1:a69fa12:             ps.setNull( param, jdbcType );
1:a69fa12: 
1:a69fa12:             return;
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         switch( jdbcType )
1:a69fa12:         {
1:a69fa12:             case JDBC_BOOLEAN:
1:a69fa12:                 ps.setBoolean( param, ((Boolean) value ).booleanValue() );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.BIGINT:
1:a69fa12:                 ps.setLong( param, ((Long) value ).longValue() );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.BLOB:
1:a69fa12:                 ps.setBlob( param, ((java.sql.Blob) value ) );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.CHAR:
1:a69fa12:             case Types.LONGVARCHAR:
1:a69fa12:             case Types.VARCHAR:
1:a69fa12:                 ps.setString( param, ((String) value ) );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.BINARY:
1:a69fa12:             case Types.LONGVARBINARY:
1:a69fa12:             case Types.VARBINARY:
1:a69fa12:                 ps.setBytes( param, (byte[]) value );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.CLOB:
1:a69fa12:                 ps.setClob( param, ((java.sql.Clob) value ) );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.DATE:
1:a69fa12:                 ps.setDate( param, ((java.sql.Date) value ) );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.DECIMAL:
1:a69fa12:             case Types.NUMERIC:
1:a69fa12:                 ps.setBigDecimal( param, ((java.math.BigDecimal) value ) );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.DOUBLE:
1:a69fa12:                 ps.setDouble( param, ((Double) value ).doubleValue() );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.REAL:
1:a69fa12:                 ps.setFloat( param, ((Float) value ).floatValue() );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.INTEGER:
1:a69fa12:                 ps.setInt( param, ((Integer) value ).intValue() );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.SMALLINT:
1:a69fa12:                 ps.setShort( param, ((Short) value ).shortValue() );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.TIME:
1:a69fa12:                 ps.setTime( param, (java.sql.Time) value );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             case Types.TIMESTAMP:
1:a69fa12:                 ps.setTimestamp( param, (java.sql.Timestamp) value );
1:a69fa12:                 break;
1:a69fa12: 
1:a69fa12:             default:
1:a69fa12:                 fail( "Unknown jdbc type: " + jdbcType );
1:a69fa12:                 break;
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:     }
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Drop a function regardless of whether it exists. If the function does not
1:a69fa12:      * exist, don't log an error unless
1:a69fa12:      * running in debug mode. This method is to be used for reinitializing
1:a69fa12:      * a schema in case a previous test run failed to clean up after itself.
1:a69fa12:      * Do not use this method if you need to verify that the function really exists.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     protected    void    dropFunction(String name )
1:a69fa12:     {
1:a69fa12:         dropSchemaObject(FUNCTION, name, false );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Drop a procedure regardless of whether it exists. If the procedure does
1:a69fa12:      * not exist, don't log an error unless
1:a69fa12:      * running in debug mode. This method is to be used for reinitializing
1:a69fa12:      * a schema in case a previous test run failed to clean up after itself.
1:a69fa12:      * Do not use this method if you need to verify that the procedure really exists.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     protected    void    dropProcedure(String name )
1:a69fa12:     {
1:a69fa12:         dropSchemaObject(PROCEDURE, name, false );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * <p>
1:a69fa12:      * Drop a UDT regardless of whether it exists. If the UDT does
1:a69fa12:      * not exist, don't log an error unless
1:a69fa12:      * running in debug mode. This method is to be used for reinitializing
1:a69fa12:      * a schema in case a previous test run failed to clean up after itself.
1:a69fa12:      * Do not use this method if you need to verify that the UDT really exists.
1:a69fa12:      * </p>
1:a69fa12:      */
1:a69fa12:     protected    void    dropUDT(String name )
1:a69fa12:     {
1:a69fa12:         dropSchemaObject(TYPE, name, true );
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     protected    void    dropSchemaObject(String genus, String objectName, boolean restrict )
1:a69fa12:     {
1:a69fa12:         try {
1:a69fa12:             String text = "drop " + genus + " " + objectName;
1:a69fa12:             if ( restrict ) { text = text + " restrict"; }
1:a69fa12:             PreparedStatement ps = prepareStatement(text );
1:a69fa12: 
1:a69fa12:             ps.execute();
1:a69fa12:             ps.close();
1:a69fa12:         }
1:a69fa12:         catch (SQLException e)
1:a69fa12:         {
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     private    static    final    String    FUNCTION = "function";
1:a69fa12:     private    static    final    String    PROCEDURE = "procedure";
1:a69fa12:     private    static    final    String    TYPE = "type";
1:a69fa12: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:                 retval = rs.getLong( columnName );
/////////////////////////////////////////////////////////////////////////
1:                 retval = rs.getDouble( columnName );
1:                 retval = rs.getFloat( columnName );
1:                 retval = rs.getInt( columnName );
1:                 retval = rs.getShort( columnName );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:a69fa12
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.compatibility;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DerbyVersion;
1: import org.apache.derbyTesting.junit.Version;
1: 
1: /**
1:  * Abstract test case with common functionality often required when writing
1:  * JDBC client driver compatibility tests.
1:  */
1: abstract class AbstractCompatibilityTest
1:         extends BaseJDBCTestCase
1: {
1:     /////////////////////////////////////////////////////////////
1:     //
1:     //    CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////
1: 
1:     public static final String SERVER_VERSION_FUNCTION = "getVMVersion";
1: 
1:     private static final String VERSION_PROPERTY = "java.version";
1: 
1:     /////////////////////////////////////////////////////////////
1:     //
1:     //    STATE
1:     //
1:     /////////////////////////////////////////////////////////////
1: 
1:     private static Version _clientVMLevel;        // level of client-side vm
1:     private static Version _serverVMLevel;        // level of server vm
1:     private static DerbyVersion _driverLevel;     // client rev level
1: 
1:     public AbstractCompatibilityTest(String name) {
1:         super(name);
1:     }
1: 
1:     /////////////////////////////////////////////////////////////
1:     //
1:     //    PUBLIC BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////
1: 
1:     public DerbyVersion getServerVersion() throws SQLException {
1:         return getServerVersion(getConnection());
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the version of the server.
1:      * </p>
1:      */
1:     protected static DerbyVersion getServerVersion(Connection con)
1:             throws SQLException {
1:         return DerbyVersion.parseVersionString(
1:                 con.getMetaData().getDatabaseProductVersion());
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the version of the client.
1:      * </p>
1:      */
1:     public DerbyVersion getDriverVersion()
1:             throws SQLException {
1:         if (_driverLevel == null) {
1:             _driverLevel = DerbyVersion.parseVersionString(
1:                     getConnection().getMetaData().getDriverVersion());
1:         }
1:         return _driverLevel;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the vm level of the server.
1:      * </p>
1:      */
1:     public    static    Version    getServerVMVersion()    { return _serverVMLevel; }
1: 
1:     /**
1:      * <p>
1:      * Get the vm level of the client.
1:      * </p>
1:      */
1:     public    Version    getClientVMVersion() { return _clientVMLevel; }
1: 
1:     /**
1:      * <p>
1:      *  Report whether the server supports ANSI UDTs.
1:      * </p>
1:      */
1:     public boolean serverSupportsUDTs()
1:             throws SQLException {
1:         return serverSupportsUDTs(getConnection());
1:     }
1: 
1:     public static boolean serverSupportsUDTs(Connection con)
1:             throws SQLException {
1:         return getServerVersion(con).atLeast( DerbyVersion._10_6 );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////
1:     //
1:     //    DATABASE-SIDE FUNCTIONS
1:     //
1:     /////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the vm level of the server.
1:      * </p>
1:      */
1:     public    static    String    getVMVersion()
1:     {
1:         return System.getProperty( VERSION_PROPERTY );
1:     }
1: 
1:     // POTENTIALLY TEMPORARY METHODS - CLEANUP LATER
1: 
1:     /**
1:      * <p>
1:      * Assert two objects are equal, allowing nulls to be equal.
1:      * </p>
1:      */
1:     public    void    compareObjects( String message, Object left, Object right )
1:             throws SQLException
1:     {
1:         message = message + "\n\t expected = " + left + "\n\t actual = " + right;
1: 
1:         if ( left == null )
1:         {
1:             assertNull( message, right );
1:         }
1:         else
1:         {
1:             assertNotNull( message, right );
1: 
1:             if ( left instanceof byte[] ) { compareBytes( message, left, right ); }
1:             else if ( left instanceof java.util.Date ) { compareDates( message, left, right ); }
1:             else { assertTrue( message, left.equals( right ) ); }
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Assert two byte arrays are equal, allowing nulls to be equal.
1:      * </p>
1:      */
1:     public    void    compareBytes( String message, Object left, Object right )
1:     {
1:         if ( left == null )    { assertNull( message, right ); }
1:         else { assertNotNull( right ); }
1: 
1:         if ( !(left instanceof byte[] ) ) { fail( message ); }
1:         if ( !(right instanceof byte[] ) ) { fail( message ); }
1: 
1:         byte[]    leftBytes = (byte[]) left;
1:         byte[]    rightBytes = (byte[]) right;
1:         int        count = leftBytes.length;
1: 
1:         assertEquals( message, count, rightBytes.length );
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             assertEquals( message + "[ " + i + " ]", leftBytes[ i ], rightBytes[ i ] );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Assert two Dates are equal, allowing nulls to be equal.
1:      * </p>
1:      */
1:     public    void    compareDates( String message, Object left, Object right )
1:     {
1:         if ( left == null )    { assertNull( message, right ); }
1:         else { assertNotNull( right ); }
1: 
1:         if ( !(left instanceof java.util.Date ) ) { fail( message ); }
1:         if ( !(right instanceof java.util.Date ) ) { fail( message ); }
1: 
1:         assertEquals( message, left.toString(), right.toString() );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Read a column from a ResultSet given its column name and expected jdbc
1:      * type. This method is useful if you are want to verify the getXXX() logic
1:      * most naturally fitting the declared SQL type.
1:      * </p>
1:      */
1:     private static final int JDBC_BOOLEAN = 16;
1:     protected    Object    getColumn( ResultSet rs, String columnName, int jdbcType )
1:         throws SQLException
1:     {
1:         Object        retval = null;
1: 
1:         switch( jdbcType )
1:         {
1:             case JDBC_BOOLEAN:
1:                 retval = Boolean.valueOf(rs.getBoolean(columnName));
1:                 break;
1: 
1:             case Types.BIGINT:
0:                 retval = new Long( rs.getLong( columnName ) );
1:                 break;
1: 
1:             case Types.BLOB:
1:                 retval = rs.getBlob( columnName );
1:                 break;
1: 
1:             case Types.CHAR:
1:             case Types.LONGVARCHAR:
1:             case Types.VARCHAR:
1:                 retval = rs.getString( columnName );
1:                 break;
1: 
1:             case Types.BINARY:
1:             case Types.LONGVARBINARY:
1:             case Types.VARBINARY:
1:                 retval = rs.getBytes( columnName );
1:                 break;
1: 
1:             case Types.CLOB:
1:                 retval = rs.getClob( columnName );
1:                 break;
1: 
1:             case Types.DATE:
1:                 retval = rs.getDate( columnName );
1:                 break;
1: 
1:             case Types.DECIMAL:
1:             case Types.NUMERIC:
1:                 retval = rs.getBigDecimal( columnName );
1:                 break;
1: 
1:             case Types.DOUBLE:
0:                 retval = new Double( rs.getDouble( columnName ) );
1:                 break;
1: 
1:             case Types.REAL:
0:                 retval = new Float( rs.getFloat( columnName ) );
1:                 break;
1: 
1:             case Types.INTEGER:
0:                 retval = new Integer( rs.getInt( columnName ) );
1:                 break;
1: 
1:             case Types.SMALLINT:
0:                 retval = new Short( rs.getShort( columnName ) );
1:                 break;
1: 
1:             case Types.TIME:
1:                 retval = rs.getTime( columnName );
1:                 break;
1: 
1:             case Types.TIMESTAMP:
1:                 retval = rs.getTimestamp( columnName );
1:                 break;
1: 
1:             default:
1:                 fail( "Unknown jdbc type " + jdbcType + " used to retrieve column: " + columnName );
1:                 break;
1:         }
1: 
1:         if ( rs.wasNull() ) { retval = null; }
1: 
1:         return retval;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Stuff a PreparedStatement parameter given its 1-based parameter position
1:      * and expected jdbc type. This method is useful for testing the setXXX()
1:      * methods most natural for a declared SQL type.
1:      * </p>
1:      */
1:     protected    void    setParameter( PreparedStatement ps, int param, int jdbcType, Object value )
1:         throws SQLException
1:     {
1:         if ( value == null )
1:         {
1:             ps.setNull( param, jdbcType );
1: 
1:             return;
1:         }
1: 
1:         switch( jdbcType )
1:         {
1:             case JDBC_BOOLEAN:
1:                 ps.setBoolean( param, ((Boolean) value ).booleanValue() );
1:                 break;
1: 
1:             case Types.BIGINT:
1:                 ps.setLong( param, ((Long) value ).longValue() );
1:                 break;
1: 
1:             case Types.BLOB:
1:                 ps.setBlob( param, ((java.sql.Blob) value ) );
1:                 break;
1: 
1:             case Types.CHAR:
1:             case Types.LONGVARCHAR:
1:             case Types.VARCHAR:
1:                 ps.setString( param, ((String) value ) );
1:                 break;
1: 
1:             case Types.BINARY:
1:             case Types.LONGVARBINARY:
1:             case Types.VARBINARY:
1:                 ps.setBytes( param, (byte[]) value );
1:                 break;
1: 
1:             case Types.CLOB:
1:                 ps.setClob( param, ((java.sql.Clob) value ) );
1:                 break;
1: 
1:             case Types.DATE:
1:                 ps.setDate( param, ((java.sql.Date) value ) );
1:                 break;
1: 
1:             case Types.DECIMAL:
1:             case Types.NUMERIC:
1:                 ps.setBigDecimal( param, ((java.math.BigDecimal) value ) );
1:                 break;
1: 
1:             case Types.DOUBLE:
1:                 ps.setDouble( param, ((Double) value ).doubleValue() );
1:                 break;
1: 
1:             case Types.REAL:
1:                 ps.setFloat( param, ((Float) value ).floatValue() );
1:                 break;
1: 
1:             case Types.INTEGER:
1:                 ps.setInt( param, ((Integer) value ).intValue() );
1:                 break;
1: 
1:             case Types.SMALLINT:
1:                 ps.setShort( param, ((Short) value ).shortValue() );
1:                 break;
1: 
1:             case Types.TIME:
1:                 ps.setTime( param, (java.sql.Time) value );
1:                 break;
1: 
1:             case Types.TIMESTAMP:
1:                 ps.setTimestamp( param, (java.sql.Timestamp) value );
1:                 break;
1: 
1:             default:
1:                 fail( "Unknown jdbc type: " + jdbcType );
1:                 break;
1:         }
1: 
1:     }
1:     /**
1:      * <p>
1:      * Drop a function regardless of whether it exists. If the function does not
1:      * exist, don't log an error unless
1:      * running in debug mode. This method is to be used for reinitializing
1:      * a schema in case a previous test run failed to clean up after itself.
1:      * Do not use this method if you need to verify that the function really exists.
1:      * </p>
1:      */
1:     protected    void    dropFunction(String name )
1:     {
1:         dropSchemaObject(FUNCTION, name, false );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Drop a procedure regardless of whether it exists. If the procedure does
1:      * not exist, don't log an error unless
1:      * running in debug mode. This method is to be used for reinitializing
1:      * a schema in case a previous test run failed to clean up after itself.
1:      * Do not use this method if you need to verify that the procedure really exists.
1:      * </p>
1:      */
1:     protected    void    dropProcedure(String name )
1:     {
1:         dropSchemaObject(PROCEDURE, name, false );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Drop a UDT regardless of whether it exists. If the UDT does
1:      * not exist, don't log an error unless
1:      * running in debug mode. This method is to be used for reinitializing
1:      * a schema in case a previous test run failed to clean up after itself.
1:      * Do not use this method if you need to verify that the UDT really exists.
1:      * </p>
1:      */
1:     protected    void    dropUDT(String name )
1:     {
1:         dropSchemaObject(TYPE, name, true );
1:     }
1: 
1:     protected    void    dropSchemaObject(String genus, String objectName, boolean restrict )
1:     {
1:         try {
1:             String text = "drop " + genus + " " + objectName;
1:             if ( restrict ) { text = text + " restrict"; }
1:             PreparedStatement ps = prepareStatement(text );
1: 
1:             ps.execute();
1:             ps.close();
1:         }
1:         catch (SQLException e)
1:         {
1:         }
1: 
1:     }
1: 
1:     private    static    final    String    FUNCTION = "function";
1:     private    static    final    String    PROCEDURE = "procedure";
1:     private    static    final    String    TYPE = "type";
1: }
============================================================================