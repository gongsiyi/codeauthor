1:7a816cb: /*
2:7a816cb: 
1:7a816cb:    Derby - Class org.apache.derby.impl.services.cache.ReplacementPolicy
1:7a816cb: 
1:7a816cb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a816cb:    contributor license agreements.  See the NOTICE file distributed with
1:7a816cb:    this work for additional information regarding copyright ownership.
1:7a816cb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a816cb:    (the "License"); you may not use this file except in compliance with
1:7a816cb:    the License.  You may obtain a copy of the License at
1:7a816cb: 
1:7a816cb:       http://www.apache.org/licenses/LICENSE-2.0
1:7a816cb: 
1:7a816cb:    Unless required by applicable law or agreed to in writing, software
1:7a816cb:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a816cb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a816cb:    See the License for the specific language governing permissions and
1:7a816cb:    limitations under the License.
1:7a816cb: 
2:7a816cb:  */
1:7a816cb: 
1:7a816cb: package org.apache.derby.impl.services.cache;
1:7a816cb: 
1:7a816cb: import org.apache.derby.iapi.error.StandardException;
1:7a816cb: 
2:7a816cb: /**
1:7a816cb:  * Interface that must be implemented by classes that provide a replacement
1:7a816cb:  * algorithm for <code>ConcurrentCache</code>.
1:d8bdc4c:  */
1:7a816cb: interface ReplacementPolicy {
1:d8bdc4c:     /**
1:7a816cb:      * Insert an entry into the <code>ReplacementPolicy</code>'s data
1:7a816cb:      * structure, possibly evicting another entry. The entry should be
1:7a816cb:      * uninitialized when the method is called (that is, its
1:7a816cb:      * <code>Cacheable</code> should be <code>null</code>), and it should be
1:7a816cb:      * locked. When the method returns, the entry may have been initialized
1:7a816cb:      * with a <code>Cacheable</code> which is ready to be reused. It is also
1:7a816cb:      * possible that the <code>Cacheable</code> is still <code>null</code> when
1:7a816cb:      * the method returns, in which case the caller must allocate one itself.
1:0b57378:      * The entry will be associated with a {@code Callback} object that it can
1:0b57378:      * use to communicate back to the replacement policy events (for instance,
1:0b57378:      * that it has been accessed or become invalid).
1:7a816cb:      *
1:7a816cb:      * @param entry the entry to insert
1:7a816cb:      * @exception StandardException if an error occurs while inserting the
1:7a816cb:      * entry
1:0b57378:      *
1:0b57378:      * @see CacheEntry#setCallback(ReplacementPolicy.Callback)
1:7a816cb:      */
1:0b57378:     void insertEntry(CacheEntry entry) throws StandardException;
1:d8bdc4c: 
1:7a816cb:     /**
1:d8bdc4c:      * Try to shrink the cache if it has exceeded its maximum size. It is not
1:d8bdc4c:      * guaranteed that the cache will actually shrink.
1:d8bdc4c:      */
1:d8bdc4c:     void doShrink();
1:86ee0a0: 
1:86ee0a0:     /**
1:6da88fc:      * Get the number of entries allocated in the data structure that holds
1:6da88fc:      * cached objects. This number could include empty entries for objects
1:6da88fc:      * that have been removed from the cache, if those entries are still
1:6da88fc:      * kept in the data structure for reuse.
1:86ee0a0:      *
1:6da88fc:      * @return the number of entries allocated in the cache
1:86ee0a0:      */
1:6da88fc:     int size();
1:d8bdc4c: 
1:d8bdc4c:     /**
1:7a816cb:      * The interface for the callback objects that <code>ConcurrentCache</code>
1:7a816cb:      * uses to notify the replacement algorithm about events such as look-ups
1:7a816cb:      * and removals. Each <code>Callback</code> object is associated with a
1:7a816cb:      * single entry in the cache.
1:7a816cb:      */
1:7a816cb:     interface Callback {
1:7a816cb:         /**
1:7a816cb:          * Notify the replacement algorithm that the cache entry has been
1:7a816cb:          * accessed. The replacement algorithm can use this information to
1:7a816cb:          * collect statistics about access frequency which can be used to
1:7a816cb:          * determine the order of evictions.
1:7a816cb:          *
1:7a816cb:          * <p>
1:7a816cb:          *
1:7a816cb:          * The entry associated with the callback object must be locked by the
1:7a816cb:          * current thread.
1:7a816cb:          */
1:7a816cb:         void access();
1:7a816cb: 
1:7a816cb:         /**
1:7a816cb:          * Notify the replacement algorithm that the entry associated with this
1:7a816cb:          * callback object has been removed, and the callback object and the
1:7a816cb:          * <code>Cacheable</code> can be reused.
1:7a816cb:          *
1:7a816cb:          * <p>
1:7a816cb:          *
1:7a816cb:          * The entry associated with the callback object must be locked by the
1:7a816cb:          * current thread.
1:7a816cb:          */
1:7a816cb:         void free();
1:7a816cb:     }
1:7a816cb: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6da88fc
/////////////////////////////////////////////////////////////////////////
1:      * Get the number of entries allocated in the data structure that holds
1:      * cached objects. This number could include empty entries for objects
1:      * that have been removed from the cache, if those entries are still
1:      * kept in the data structure for reuse.
1:      * @return the number of entries allocated in the cache
1:     int size();
commit:86ee0a0
/////////////////////////////////////////////////////////////////////////
0:      * Get the number of free entries that could be reused for new objects
0:      * without growing the cache.
1:      *
0:      * @return the number of free entries
1:      */
0:     int freeEntries();
1: 
1:     /**
commit:2d09c33
/////////////////////////////////////////////////////////////////////////
commit:0b57378
/////////////////////////////////////////////////////////////////////////
1:      * The entry will be associated with a {@code Callback} object that it can
1:      * use to communicate back to the replacement policy events (for instance,
1:      * that it has been accessed or become invalid).
1:      *
1:      * @see CacheEntry#setCallback(ReplacementPolicy.Callback)
1:     void insertEntry(CacheEntry entry) throws StandardException;
commit:d8bdc4c
/////////////////////////////////////////////////////////////////////////
1:      * Try to shrink the cache if it has exceeded its maximum size. It is not
1:      * guaranteed that the cache will actually shrink.
1:      */
1:     void doShrink();
1: 
1:     /**
0:      * Try to reduce the size of the cache as much as possible by removing
0:      * invalid entries. Depending on the underlying data structure, this might
0:      * be a very expensive operation. The implementations are therefore allowed
0:      * to ignore calls to this method when they think the cost outweighs the
0:      * benefit.
1:      */
0:     void trimToSize();
1: 
1:     /**
commit:7a816cb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.cache.ReplacementPolicy
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.cache;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Interface that must be implemented by classes that provide a replacement
1:  * algorithm for <code>ConcurrentCache</code>.
1:  */
1: interface ReplacementPolicy {
1:     /**
1:      * Insert an entry into the <code>ReplacementPolicy</code>'s data
1:      * structure, possibly evicting another entry. The entry should be
1:      * uninitialized when the method is called (that is, its
1:      * <code>Cacheable</code> should be <code>null</code>), and it should be
1:      * locked. When the method returns, the entry may have been initialized
1:      * with a <code>Cacheable</code> which is ready to be reused. It is also
1:      * possible that the <code>Cacheable</code> is still <code>null</code> when
1:      * the method returns, in which case the caller must allocate one itself.
1:      *
1:      * @param entry the entry to insert
0:      * @return a callback object that can be used to notify the replacement
0:      * algorithm about operations performed on the cached object
1:      * @exception StandardException if an error occurs while inserting the
1:      * entry
1:      */
0:     Callback insertEntry(CacheEntry entry) throws StandardException;
1: 
1:     /**
1:      * The interface for the callback objects that <code>ConcurrentCache</code>
1:      * uses to notify the replacement algorithm about events such as look-ups
1:      * and removals. Each <code>Callback</code> object is associated with a
1:      * single entry in the cache.
1:      */
1:     interface Callback {
1:         /**
1:          * Notify the replacement algorithm that the cache entry has been
1:          * accessed. The replacement algorithm can use this information to
1:          * collect statistics about access frequency which can be used to
1:          * determine the order of evictions.
1:          *
1:          * <p>
1:          *
1:          * The entry associated with the callback object must be locked by the
1:          * current thread.
1:          */
1:         void access();
1: 
1:         /**
1:          * Notify the replacement algorithm that the entry associated with this
1:          * callback object has been removed, and the callback object and the
1:          * <code>Cacheable</code> can be reused.
1:          *
1:          * <p>
1:          *
1:          * The entry associated with the callback object must be locked by the
1:          * current thread.
1:          */
1:         void free();
1:     }
1: }
============================================================================