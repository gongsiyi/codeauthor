1:2ee5c41: /**
1:2ee5c41:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest
1:2ee5c41:  *  
1:2ee5c41:  * Licensed to the Apache Software Foundation (ASF) under one
1:2ee5c41:  * or more contributor license agreements.  See the NOTICE file
1:2ee5c41:  * distributed with this work for additional information
1:2ee5c41:  * regarding copyright ownership.  The ASF licenses this file
1:2ee5c41:  * to you under the Apache License, Version 2.0 (the
1:2ee5c41:  * "License"); you may not use this file except in compliance
1:2ee5c41:  * with the License.  You may obtain a copy of the License at
1:2ee5c41:  *
1:2ee5c41:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2ee5c41:  *
1:2ee5c41:  * Unless required by applicable law or agreed to in writing,
1:2ee5c41:  * software distributed under the License is distributed on an
1:2ee5c41:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2ee5c41:  * KIND, either express or implied.  See the License for the
1:2ee5c41:  * specific language governing permissions and limitations
1:2ee5c41:  * under the License.
1:2ee5c41:  */
1:2ee5c41: package org.apache.derbyTesting.functionTests.tests.lang;
3:2ee5c41: 
1:2ee5c41: import java.sql.Connection;
1:2ee5c41: import java.sql.DatabaseMetaData;
1:2ee5c41: import java.sql.PreparedStatement;
1:2ee5c41: import java.sql.ResultSet;
1:2ee5c41: import java.sql.SQLException;
1:2ee5c41: import java.sql.Statement;
1:2ee5c41: import java.util.BitSet;
1:2ee5c41: import junit.framework.Test;
1:2ee5c41: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:2ee5c41: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:2ee5c41: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:2ee5c41: 
1:2ee5c41: /**
1:2ee5c41:  * Test BackingStoreHashtable spilling to disk.
1:2ee5c41:  * BackingStoreHashtable is used to implement hash joins, distinct, scroll insensitive cursors,
1:2ee5c41:  * outer joins, and the HAVING clause.
1:2ee5c41:  */
1:2ee5c41: public class SpillHashTest extends BaseJDBCTestCase {
1:2ee5c41: 
1:2ee5c41:     private static final String[] prep = {
1:2ee5c41:         "create table ta (ca1 integer, ca2 char(200))",
1:2ee5c41:         "create table tb (cb1 integer, cb2 char(200))",
1:2ee5c41:         "insert into ta(ca1,ca2) values(null, 'Anull')",
1:2ee5c41:         "insert into tb(cb1,cb2) values(null, 'Bnull')"
1:2ee5c41:     };	
1:2ee5c41:     
1:2ee5c41:     private static final String[][] initDupVals = {
1:2ee5c41:         { "0a", "0b"},
1:2ee5c41:         { "1a", "1b"},
1:2ee5c41:         { "2a"}
1:2ee5c41:     };
1:2ee5c41:     
1:2ee5c41:     private static final String[][] spillDupVals = { 
1:2ee5c41:     	{}, 
1:2ee5c41:     	{ "1c" }, 
1:2ee5c41:     	{ "2b" },
1:2ee5c41: 		{ "3a", "3b", "3c" } 
1:2ee5c41:     };
1:2ee5c41:     
1:2ee5c41:     private static final int LOTS_OF_ROWS = 10000;
1:2ee5c41:     
1:2ee5c41:     private PreparedStatement joinStmt;
1:2ee5c41:     private PreparedStatement distinctStmt;    
1:2ee5c41: 	
1:2ee5c41: 	/**
1:2ee5c41: 	 * Basic constructor.
1:2ee5c41: 	 */
1:2ee5c41: 	public SpillHashTest(String name) {
1:2ee5c41: 		super(name);
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41: 	/**
1:2ee5c41: 	 * Sets the auto commit to false.
1:2ee5c41: 	 */
1:2ee5c41: 	protected void initializeConnection(Connection conn) throws SQLException {
1:2ee5c41: 		conn.setAutoCommit(false);
1:2ee5c41: 	}
1:2ee5c41: 		
1:2ee5c41: 	/**
1:2ee5c41: 	 * Returns the implemented tests.
1:2ee5c41: 	 * 
1:2ee5c41: 	 * @return An instance of <code>Test</code> with the implemented tests to
1:2ee5c41: 	 *         run.
1:2ee5c41: 	 */
1:2ee5c41: 	public static Test suite() {
1:1ae02c9:         // suite of tests with light load on the tables
1:1ae02c9:         BaseTestSuite light = new BaseTestSuite();
1:1ae02c9: 
1:1ae02c9:         // suite of tests with heavy load on the tables
1:1ae02c9:         BaseTestSuite heavy = new BaseTestSuite();
1:2ee5c41: 		
1:2ee5c41: 		light.addTest(new SpillHashTest("testJoinLight"));
1:2ee5c41: 		light.addTest(new SpillHashTest("testDistinctLight"));
1:2ee5c41: 		light.addTest(new SpillHashTest("testCursorLight"));
1:2ee5c41: 		heavy.addTest(new SpillHashTest("testJoinHeavy"));
1:2ee5c41: 		heavy.addTest(new SpillHashTest("testDistinctHeavy"));
1:2ee5c41: 		heavy.addTest(new SpillHashTest("testCursorHeavy"));		
1:2ee5c41: 		
1:2ee5c41: 		Test lightSetup = new BaseJDBCTestSetup(light) {
1:2ee5c41: 			protected void setUp() throws Exception {
1:2ee5c41: 				super.setUp();
1:2ee5c41: 				Statement stmt = getConnection().createStatement();
1:2ee5c41: 	            PreparedStatement insA = stmt.getConnection().prepareStatement("insert into ta(ca1,ca2) values(?,?)");
1:2ee5c41: 	            PreparedStatement insB = stmt.getConnection().prepareStatement("insert into tb(cb1,cb2) values(?,?)");
1:2ee5c41: 	            	            
1:2ee5c41: 	            insertDups(insA, insB, initDupVals);
1:2ee5c41: 	            getConnection().commit();
1:2ee5c41: 	            stmt.close();
1:2ee5c41: 	            
1:2ee5c41: 	            //System.out.println("2");
1:2ee5c41: 			}
1:2ee5c41: 		};
1:2ee5c41: 		
1:2ee5c41: 		Test heavySetup = new BaseJDBCTestSetup(heavy) {
1:2ee5c41: 			protected void setUp() throws Exception {
1:2ee5c41: 				super.setUp();
1:2ee5c41: 				Statement stmt = getConnection().createStatement();
1:2ee5c41: 	            PreparedStatement insA = stmt.getConnection().prepareStatement("insert into ta(ca1,ca2) values(?,?)");
1:2ee5c41: 	            PreparedStatement insB = stmt.getConnection().prepareStatement("insert into tb(cb1,cb2) values(?,?)");				
1:2ee5c41: 	            
1:2ee5c41: 	            for (int i = 1; i <= LOTS_OF_ROWS; i++) {
1:2ee5c41: 					insA.setInt(1, i);
1:2ee5c41: 					insA.setString(2, ca2Val(i));
1:2ee5c41: 					insA.executeUpdate();
1:2ee5c41: 					insB.setInt(1, i);
1:2ee5c41: 					insB.setString(2, cb2Val(i));
1:2ee5c41: 					insB.executeUpdate();
1:2ee5c41: 
1:2ee5c41: 					if ((i & 0xff) == 0)
1:2ee5c41: 						stmt.getConnection().commit();
1:2ee5c41: 				}
1:2ee5c41: 				insertDups(insA, insB, spillDupVals);
1:2ee5c41: 				
1:2ee5c41: 				getConnection().commit();
1:2ee5c41: 				stmt.close();
1:2ee5c41: 				
1:2ee5c41: 				//System.out.println("3");				
1:2ee5c41: 			}
1:2ee5c41: 		};
1:2ee5c41: 		
1:1ae02c9:         BaseTestSuite mainSuite = new BaseTestSuite();
1:2ee5c41: 		
1:2ee5c41: 		mainSuite.addTest(lightSetup);
1:2ee5c41: 		mainSuite.addTest(heavySetup);
1:2ee5c41: 		
1:2ee5c41: 		return new CleanDatabaseTestSetup(mainSuite) {
1:2ee5c41: 			protected void decorateSQL(Statement stmt) throws SQLException {
1:2ee5c41: 	            for(int i = 0; i < prep.length; i++) {
1:2ee5c41: 	            	stmt.executeUpdate(prep[i]);
1:2ee5c41: 	            }
1:2ee5c41: 	            
1:2ee5c41: 	            //System.out.println("1");
1:2ee5c41: 			}						
1:2ee5c41: 		};
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	protected void setUp() throws Exception {
1:2ee5c41:         joinStmt = getConnection().prepareStatement("select ta.ca1, ta.ca2, tb.cb2 from ta, tb where ca1 = cb1");
1:2ee5c41: 		distinctStmt = getConnection().prepareStatement("select distinct ca1 from ta");
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	protected void tearDown() throws Exception {
1:2ee5c41: 		joinStmt.close();
1:2ee5c41: 		distinctStmt.close();
1:2ee5c41:         joinStmt = null;
1:2ee5c41:         distinctStmt = null;
1:2ee5c41: 		super.tearDown();
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	public void testJoinLight() throws SQLException {
1:2ee5c41: 		runJoin(getConnection(), 0, new String[][][] {initDupVals});
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41: 	public void testDistinctLight() throws SQLException {
1:2ee5c41: 		runDistinct(getConnection(), 0, new String[][][] {initDupVals});
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41: 	public void testCursorLight() throws SQLException {
1:2ee5c41: 		runCursor(getConnection(), 0, new String[][][] {initDupVals});
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	public void testJoinHeavy() throws SQLException {
1:2ee5c41: 		runJoin(getConnection(), LOTS_OF_ROWS, new String[][][] {initDupVals, spillDupVals});
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41: 	public void testDistinctHeavy() throws SQLException {
1:2ee5c41: 		runDistinct(getConnection(), LOTS_OF_ROWS, new String[][][] {initDupVals, spillDupVals});
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41: 	public void testCursorHeavy() throws SQLException {
1:2ee5c41: 		runCursor(getConnection(), LOTS_OF_ROWS, new String[][][] {initDupVals, spillDupVals});
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41: 	private static void insertDups(PreparedStatement insA,
1:2ee5c41: 			PreparedStatement insB, String[][] dupVals) throws SQLException {
1:2ee5c41: 		for (int i = 0; i < dupVals.length; i++) {
1:2ee5c41: 			insA.setInt(1, -i);
1:2ee5c41: 			insB.setInt(1, -i);
1:2ee5c41: 			String[] vals = dupVals[i];
1:2ee5c41: 			for (int j = 0; j < vals.length; j++) {
1:2ee5c41: 				insA.setString(2, "A" + vals[j]);
1:2ee5c41: 				insA.executeUpdate();
1:2ee5c41: 				insB.setString(2, "B" + vals[j]);
1:2ee5c41: 				insB.executeUpdate();
1:2ee5c41: 			}
1:2ee5c41: 		}
1:2ee5c41: 	} 
1:2ee5c41: 	
1:2ee5c41:     private static String ca2Val(int col1Val) {
1:2ee5c41: 		return "A" + col1Val;
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	private static String cb2Val(int col1Val) {
1:2ee5c41: 		return "B" + col1Val;
1:2ee5c41: 	}
1:2ee5c41: 	
1:2ee5c41:     private void runJoin(Connection conn, int maxColValue,
1:2ee5c41: 			String[][][] dupVals) throws SQLException {
1:2ee5c41: 		int expectedRowCount = maxColValue; // plus expected duplicates, to be counted below
1:2ee5c41: 		ResultSet rs = joinStmt.executeQuery();
1:2ee5c41: 		BitSet joinRowFound = new BitSet(maxColValue);
1:2ee5c41: 		int dupKeyCount = 0;
1:2ee5c41: 
1:2ee5c41: 		for (int i = 0; i < dupVals.length; i++) {
1:2ee5c41: 			if (dupVals[i].length > dupKeyCount)
1:2ee5c41: 				dupKeyCount = dupVals[i].length;
1:2ee5c41: 		}
1:2ee5c41: 		BitSet[] dupsFound = new BitSet[dupKeyCount];
1:2ee5c41: 		int[] dupCount = new int[dupKeyCount];
1:2ee5c41: 		for (int i = 0; i < dupKeyCount; i++) {
1:2ee5c41: 			// count the number of rows with column(1) == -i
1:2ee5c41: 			dupCount[i] = 0;
1:2ee5c41: 			for (int j = 0; j < dupVals.length; j++) {
1:2ee5c41: 				if (i < dupVals[j].length)
1:2ee5c41: 					dupCount[i] += dupVals[j][i].length;
1:2ee5c41: 			}
1:2ee5c41: 			dupsFound[i] = new BitSet(dupCount[i] * dupCount[i]);
1:2ee5c41: 			expectedRowCount += dupCount[i] * dupCount[i];
1:2ee5c41: 		}
1:2ee5c41: 
1:2ee5c41: 		int count;
1:2ee5c41: 		for (count = 0; rs.next(); count++) {
1:2ee5c41: 			int col1Val = rs.getInt(1);
1:2ee5c41: 			
1:2ee5c41: 			assertFalse("Null in join column.", rs.wasNull());
1:2ee5c41: 			assertFalse("Invalid value in first join column.", col1Val > maxColValue);
1:2ee5c41: 			if (col1Val > 0) {
1:2ee5c41: 				assertFalse("Multiple rows for value " + col1Val, joinRowFound.get(col1Val - 1));
1:2ee5c41: 				joinRowFound.set(col1Val - 1);
1:2ee5c41: 				String col2Val = trim(rs.getString(2));
1:2ee5c41: 				String col3Val = trim(rs.getString(3));
1:2ee5c41: 				assertFalse("Incorrect value in column 2 or 3 of join.", 
1:2ee5c41: 						!(ca2Val(col1Val).equals(col2Val) && cb2Val(col1Val).equals(col3Val)));
1:2ee5c41: 			} else {
1:2ee5c41: 				// col1Val <= 0, there are duplicates in the source tables
1:2ee5c41: 				int dupKeyIdx = -col1Val;
1:2ee5c41: 				int col2Idx = findDupVal(rs, 2, 'A', dupKeyIdx, dupVals);
1:2ee5c41: 				int col3Idx = findDupVal(rs, 3, 'B', dupKeyIdx, dupVals);
1:2ee5c41: 				if (col2Idx < 0 || col3Idx < 0) {
1:2ee5c41: 					continue;
1:2ee5c41: 				}
1:2ee5c41: 				int idx = col2Idx + dupCount[dupKeyIdx] * col3Idx;
1:2ee5c41: 				assertFalse("Repeat of row with key value 0", dupsFound[dupKeyIdx].get(idx));
1:2ee5c41: 				dupsFound[dupKeyIdx].set(idx);
1:2ee5c41: 			}
1:2ee5c41: 		}
1:2ee5c41: 		
1:2ee5c41: 		assertEquals("Incorrect number of rows in join.", expectedRowCount, count);
1:2ee5c41: 		rs.close();
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	private static int findDupVal(ResultSet rs, int col, char prefix,
1:2ee5c41: 			int keyIdx, String[][][] dupVals) throws SQLException {
1:2ee5c41: 		String colVal = rs.getString(col);
1:2ee5c41: 		if (colVal != null && colVal.length() > 1 || colVal.charAt(0) == prefix) {
1:2ee5c41: 			colVal = trim(colVal.substring(1));
1:2ee5c41: 			int dupIdx = 0;
1:2ee5c41: 			for (int i = 0; i < dupVals.length; i++) {
1:2ee5c41: 				if (keyIdx < dupVals[i].length) {
1:2ee5c41: 					for (int j = 0; j < dupVals[i][keyIdx].length; j++, dupIdx++) {
1:2ee5c41: 						if (colVal.equals(dupVals[i][keyIdx][j]))
1:2ee5c41: 							return dupIdx;
1:2ee5c41: 					}
1:2ee5c41: 				}
1:2ee5c41: 			}
1:2ee5c41: 		}
1:2ee5c41: 		fail("Incorrect value in column " + col + " of join with duplicate keys.");
1:2ee5c41: 		return -1;
1:2ee5c41: 	} // end of findDupVal
1:2ee5c41: 
1:2ee5c41: 	private static String trim(String str) {
1:2ee5c41: 		if (str == null)
1:2ee5c41: 			return str;
1:2ee5c41: 		return str.trim();
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	private void runDistinct(Connection conn, int maxColValue,
1:2ee5c41: 			String[][][] dupVals) throws SQLException {
1:2ee5c41: 		//System.out.println("Running distinct");
1:2ee5c41: 		ResultSet rs = distinctStmt.executeQuery();
1:2ee5c41: 		checkAllCa1(rs, false, false, maxColValue, dupVals, "DISTINCT");
1:2ee5c41: 		rs.close();
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	private static void runCursor(Connection conn, int maxColValue,
1:2ee5c41: 			String[][][] dupVals) throws SQLException {
1:2ee5c41: 		//System.out.println("Running scroll insensitive cursor");
1:2ee5c41: 		DatabaseMetaData dmd = conn.getMetaData();
1:2ee5c41: 		boolean holdOverCommit = dmd.supportsOpenCursorsAcrossCommit();
1:2ee5c41: 		Statement stmt;
1:2ee5c41: 		if (holdOverCommit)
1:2ee5c41: 			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:2ee5c41: 					ResultSet.CONCUR_READ_ONLY,
1:2ee5c41: 					ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:2ee5c41: 		else
1:2ee5c41: 			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:2ee5c41: 					ResultSet.CONCUR_READ_ONLY);
1:2ee5c41: 		ResultSet rs = stmt.executeQuery("SELECT ca1 FROM ta");
1:2ee5c41: 		checkAllCa1(rs, true, holdOverCommit, maxColValue, dupVals,
1:2ee5c41: 				"scroll insensitive cursor");
1:2ee5c41: 		rs.close();
1:2ee5c41: 	}
1:2ee5c41: 
1:2ee5c41: 	private static void checkAllCa1(ResultSet rs, boolean expectDups,
1:2ee5c41: 			boolean holdOverCommit, int maxColValue, String[][][] dupVals,
1:2ee5c41: 			String label) throws SQLException {
1:2ee5c41: 		int dupKeyCount = 0;
1:2ee5c41: 		for (int i = 0; i < dupVals.length; i++) {
1:2ee5c41: 			if (dupVals[i].length > dupKeyCount)
1:2ee5c41: 				dupKeyCount = dupVals[i].length;
1:2ee5c41: 		}
1:2ee5c41: 		int[] expectedDupCount = new int[dupKeyCount];
1:2ee5c41: 		int[] dupFoundCount = new int[dupKeyCount];
1:2ee5c41: 		for (int i = 0; i < dupKeyCount; i++) {
1:2ee5c41: 
1:2ee5c41: 			dupFoundCount[i] = 0;
1:2ee5c41: 			if (!expectDups)
1:2ee5c41: 				expectedDupCount[i] = 1;
1:2ee5c41: 			else {
1:2ee5c41: 				expectedDupCount[i] = 0;
1:2ee5c41: 				for (int j = 0; j < dupVals.length; j++) {
1:2ee5c41: 					if (i < dupVals[j].length)
1:2ee5c41: 						expectedDupCount[i] += dupVals[j][i].length;
1:2ee5c41: 				}
1:2ee5c41: 			}
1:2ee5c41: 		}
1:2ee5c41: 		BitSet found = new BitSet(maxColValue);
1:2ee5c41: 		int count = 0;
1:2ee5c41: 		boolean nullFound = false;
1:2ee5c41: 
1:2ee5c41: 		for (count = 0; rs.next();) {
1:2ee5c41: 			int col1Val = rs.getInt(1);
1:2ee5c41: 			if (rs.wasNull()) {
1:2ee5c41: 				if (nullFound) {
1:2ee5c41: 					fail("Too many nulls returned by " + label);
1:2ee5c41: 				}
1:2ee5c41: 				nullFound = true;
1:2ee5c41: 				continue;
1:2ee5c41: 			}
1:2ee5c41: 			assertFalse("Invalid value returned by " + label,
1:2ee5c41: 					col1Val <= -dupKeyCount || col1Val > maxColValue);
1:2ee5c41: 			if (col1Val <= 0) {
1:2ee5c41: 				dupFoundCount[-col1Val]++;
1:2ee5c41: 				if (!expectDups) {
1:2ee5c41: 					assertFalse(label + " returned a duplicate.",
1:2ee5c41: 							dupFoundCount[-col1Val] > 1);
1:2ee5c41: 				} else {
1:2ee5c41: 					assertFalse(
1:2ee5c41: 							label + " returned too many duplicates.",
1:2ee5c41: 							dupFoundCount[-col1Val] > expectedDupCount[-col1Val]);
1:2ee5c41: 				}
1:2ee5c41: 			} else {
1:2ee5c41: 				assertFalse(label + " returned a duplicate.", found
1:2ee5c41: 						.get(col1Val));
1:2ee5c41: 				found.set(col1Val);
1:2ee5c41: 				count++;
1:2ee5c41: 			}
1:2ee5c41: 			if (holdOverCommit) {
1:2ee5c41: 				rs.getStatement().getConnection().commit();
1:2ee5c41: 				holdOverCommit = false;
1:2ee5c41: 			}
1:2ee5c41: 		}
1:2ee5c41: 		assertFalse("Incorrect number of rows in " + label,
1:2ee5c41: 				count != maxColValue);
1:2ee5c41: 		for (int i = 0; i < dupFoundCount.length; i++) {
1:2ee5c41: 			assertFalse("A duplicate key row is missing in " + label,
1:2ee5c41: 					dupFoundCount[i] != expectedDupCount[i]);
1:2ee5c41: 		}
1:2ee5c41: 	}
1:2ee5c41: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         // suite of tests with light load on the tables
1:         BaseTestSuite light = new BaseTestSuite();
1: 
1:         // suite of tests with heavy load on the tables
1:         BaseTestSuite heavy = new BaseTestSuite();
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite mainSuite = new BaseTestSuite();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2ee5c41
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.BitSet;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * Test BackingStoreHashtable spilling to disk.
1:  * BackingStoreHashtable is used to implement hash joins, distinct, scroll insensitive cursors,
1:  * outer joins, and the HAVING clause.
1:  */
1: public class SpillHashTest extends BaseJDBCTestCase {
1: 
1:     private static final String[] prep = {
1:         "create table ta (ca1 integer, ca2 char(200))",
1:         "create table tb (cb1 integer, cb2 char(200))",
1:         "insert into ta(ca1,ca2) values(null, 'Anull')",
1:         "insert into tb(cb1,cb2) values(null, 'Bnull')"
1:     };	
1:     
1:     private static final String[][] initDupVals = {
1:         { "0a", "0b"},
1:         { "1a", "1b"},
1:         { "2a"}
1:     };
1:     
1:     private static final String[][] spillDupVals = { 
1:     	{}, 
1:     	{ "1c" }, 
1:     	{ "2b" },
1: 		{ "3a", "3b", "3c" } 
1:     };
1:     
1:     private static final int LOTS_OF_ROWS = 10000;
1:     
1:     private PreparedStatement joinStmt;
1:     private PreparedStatement distinctStmt;    
1: 	
1: 	/**
1: 	 * Basic constructor.
1: 	 */
1: 	public SpillHashTest(String name) {
1: 		super(name);
1: 	}
1: 	
1: 	/**
1: 	 * Sets the auto commit to false.
1: 	 */
1: 	protected void initializeConnection(Connection conn) throws SQLException {
1: 		conn.setAutoCommit(false);
1: 	}
1: 		
1: 	/**
1: 	 * Returns the implemented tests.
1: 	 * 
1: 	 * @return An instance of <code>Test</code> with the implemented tests to
1: 	 *         run.
1: 	 */
1: 	public static Test suite() {
0: 		TestSuite light = new TestSuite(); // suite of tests with light load on the tables
0: 		TestSuite heavy = new TestSuite(); // suite of tests with heavy load on the tables
1: 		
1: 		light.addTest(new SpillHashTest("testJoinLight"));
1: 		light.addTest(new SpillHashTest("testDistinctLight"));
1: 		light.addTest(new SpillHashTest("testCursorLight"));
1: 		heavy.addTest(new SpillHashTest("testJoinHeavy"));
1: 		heavy.addTest(new SpillHashTest("testDistinctHeavy"));
1: 		heavy.addTest(new SpillHashTest("testCursorHeavy"));		
1: 		
1: 		Test lightSetup = new BaseJDBCTestSetup(light) {
1: 			protected void setUp() throws Exception {
1: 				super.setUp();
1: 				Statement stmt = getConnection().createStatement();
1: 	            PreparedStatement insA = stmt.getConnection().prepareStatement("insert into ta(ca1,ca2) values(?,?)");
1: 	            PreparedStatement insB = stmt.getConnection().prepareStatement("insert into tb(cb1,cb2) values(?,?)");
1: 	            	            
1: 	            insertDups(insA, insB, initDupVals);
1: 	            getConnection().commit();
1: 	            stmt.close();
1: 	            
1: 	            //System.out.println("2");
1: 			}
1: 		};
1: 		
1: 		Test heavySetup = new BaseJDBCTestSetup(heavy) {
1: 			protected void setUp() throws Exception {
1: 				super.setUp();
1: 				Statement stmt = getConnection().createStatement();
1: 	            PreparedStatement insA = stmt.getConnection().prepareStatement("insert into ta(ca1,ca2) values(?,?)");
1: 	            PreparedStatement insB = stmt.getConnection().prepareStatement("insert into tb(cb1,cb2) values(?,?)");				
1: 	            
1: 	            for (int i = 1; i <= LOTS_OF_ROWS; i++) {
1: 					insA.setInt(1, i);
1: 					insA.setString(2, ca2Val(i));
1: 					insA.executeUpdate();
1: 					insB.setInt(1, i);
1: 					insB.setString(2, cb2Val(i));
1: 					insB.executeUpdate();
1: 
1: 					if ((i & 0xff) == 0)
1: 						stmt.getConnection().commit();
1: 				}
1: 				insertDups(insA, insB, spillDupVals);
1: 				
1: 				getConnection().commit();
1: 				stmt.close();
1: 				
1: 				//System.out.println("3");				
1: 			}
1: 		};
1: 		
0: 		TestSuite mainSuite = new TestSuite();
1: 		
1: 		mainSuite.addTest(lightSetup);
1: 		mainSuite.addTest(heavySetup);
1: 		
1: 		return new CleanDatabaseTestSetup(mainSuite) {
1: 			protected void decorateSQL(Statement stmt) throws SQLException {
1: 	            for(int i = 0; i < prep.length; i++) {
1: 	            	stmt.executeUpdate(prep[i]);
1: 	            }
1: 	            
1: 	            //System.out.println("1");
1: 			}						
1: 		};
1: 	}
1: 
1: 	protected void setUp() throws Exception {
1:         joinStmt = getConnection().prepareStatement("select ta.ca1, ta.ca2, tb.cb2 from ta, tb where ca1 = cb1");
1: 		distinctStmt = getConnection().prepareStatement("select distinct ca1 from ta");
1: 	}
1: 
1: 	protected void tearDown() throws Exception {
1: 		joinStmt.close();
1: 		distinctStmt.close();
1:         joinStmt = null;
1:         distinctStmt = null;
1: 		super.tearDown();
1: 	}
1: 
1: 	public void testJoinLight() throws SQLException {
1: 		runJoin(getConnection(), 0, new String[][][] {initDupVals});
1: 	}
1: 	
1: 	public void testDistinctLight() throws SQLException {
1: 		runDistinct(getConnection(), 0, new String[][][] {initDupVals});
1: 	}
1: 	
1: 	public void testCursorLight() throws SQLException {
1: 		runCursor(getConnection(), 0, new String[][][] {initDupVals});
1: 	}
1: 
1: 	public void testJoinHeavy() throws SQLException {
1: 		runJoin(getConnection(), LOTS_OF_ROWS, new String[][][] {initDupVals, spillDupVals});
1: 	}
1: 	
1: 	public void testDistinctHeavy() throws SQLException {
1: 		runDistinct(getConnection(), LOTS_OF_ROWS, new String[][][] {initDupVals, spillDupVals});
1: 	}
1: 	
1: 	public void testCursorHeavy() throws SQLException {
1: 		runCursor(getConnection(), LOTS_OF_ROWS, new String[][][] {initDupVals, spillDupVals});
1: 	}
1: 	
1: 	private static void insertDups(PreparedStatement insA,
1: 			PreparedStatement insB, String[][] dupVals) throws SQLException {
1: 		for (int i = 0; i < dupVals.length; i++) {
1: 			insA.setInt(1, -i);
1: 			insB.setInt(1, -i);
1: 			String[] vals = dupVals[i];
1: 			for (int j = 0; j < vals.length; j++) {
1: 				insA.setString(2, "A" + vals[j]);
1: 				insA.executeUpdate();
1: 				insB.setString(2, "B" + vals[j]);
1: 				insB.executeUpdate();
1: 			}
1: 		}
1: 	} 
1: 	
1:     private static String ca2Val(int col1Val) {
1: 		return "A" + col1Val;
1: 	}
1: 
1: 	private static String cb2Val(int col1Val) {
1: 		return "B" + col1Val;
1: 	}
1: 	
1:     private void runJoin(Connection conn, int maxColValue,
1: 			String[][][] dupVals) throws SQLException {
1: 		int expectedRowCount = maxColValue; // plus expected duplicates, to be counted below
1: 		ResultSet rs = joinStmt.executeQuery();
1: 		BitSet joinRowFound = new BitSet(maxColValue);
1: 		int dupKeyCount = 0;
1: 
1: 		for (int i = 0; i < dupVals.length; i++) {
1: 			if (dupVals[i].length > dupKeyCount)
1: 				dupKeyCount = dupVals[i].length;
1: 		}
1: 		BitSet[] dupsFound = new BitSet[dupKeyCount];
1: 		int[] dupCount = new int[dupKeyCount];
1: 		for (int i = 0; i < dupKeyCount; i++) {
1: 			// count the number of rows with column(1) == -i
1: 			dupCount[i] = 0;
1: 			for (int j = 0; j < dupVals.length; j++) {
1: 				if (i < dupVals[j].length)
1: 					dupCount[i] += dupVals[j][i].length;
1: 			}
1: 			dupsFound[i] = new BitSet(dupCount[i] * dupCount[i]);
1: 			expectedRowCount += dupCount[i] * dupCount[i];
1: 		}
1: 
1: 		int count;
1: 		for (count = 0; rs.next(); count++) {
1: 			int col1Val = rs.getInt(1);
1: 			
1: 			assertFalse("Null in join column.", rs.wasNull());
1: 			assertFalse("Invalid value in first join column.", col1Val > maxColValue);
1: 			if (col1Val > 0) {
1: 				assertFalse("Multiple rows for value " + col1Val, joinRowFound.get(col1Val - 1));
1: 				joinRowFound.set(col1Val - 1);
1: 				String col2Val = trim(rs.getString(2));
1: 				String col3Val = trim(rs.getString(3));
1: 				assertFalse("Incorrect value in column 2 or 3 of join.", 
1: 						!(ca2Val(col1Val).equals(col2Val) && cb2Val(col1Val).equals(col3Val)));
1: 			} else {
1: 				// col1Val <= 0, there are duplicates in the source tables
1: 				int dupKeyIdx = -col1Val;
1: 				int col2Idx = findDupVal(rs, 2, 'A', dupKeyIdx, dupVals);
1: 				int col3Idx = findDupVal(rs, 3, 'B', dupKeyIdx, dupVals);
1: 				if (col2Idx < 0 || col3Idx < 0) {
1: 					continue;
1: 				}
1: 				int idx = col2Idx + dupCount[dupKeyIdx] * col3Idx;
1: 				assertFalse("Repeat of row with key value 0", dupsFound[dupKeyIdx].get(idx));
1: 				dupsFound[dupKeyIdx].set(idx);
1: 			}
1: 		}
1: 		
1: 		assertEquals("Incorrect number of rows in join.", expectedRowCount, count);
1: 		rs.close();
1: 	}
1: 
1: 	private static int findDupVal(ResultSet rs, int col, char prefix,
1: 			int keyIdx, String[][][] dupVals) throws SQLException {
1: 		String colVal = rs.getString(col);
1: 		if (colVal != null && colVal.length() > 1 || colVal.charAt(0) == prefix) {
1: 			colVal = trim(colVal.substring(1));
1: 			int dupIdx = 0;
1: 			for (int i = 0; i < dupVals.length; i++) {
1: 				if (keyIdx < dupVals[i].length) {
1: 					for (int j = 0; j < dupVals[i][keyIdx].length; j++, dupIdx++) {
1: 						if (colVal.equals(dupVals[i][keyIdx][j]))
1: 							return dupIdx;
1: 					}
1: 				}
1: 			}
1: 		}
1: 		fail("Incorrect value in column " + col + " of join with duplicate keys.");
1: 		return -1;
1: 	} // end of findDupVal
1: 
1: 	private static String trim(String str) {
1: 		if (str == null)
1: 			return str;
1: 		return str.trim();
1: 	}
1: 
1: 	private void runDistinct(Connection conn, int maxColValue,
1: 			String[][][] dupVals) throws SQLException {
1: 		//System.out.println("Running distinct");
1: 		ResultSet rs = distinctStmt.executeQuery();
1: 		checkAllCa1(rs, false, false, maxColValue, dupVals, "DISTINCT");
1: 		rs.close();
1: 	}
1: 
1: 	private static void runCursor(Connection conn, int maxColValue,
1: 			String[][][] dupVals) throws SQLException {
1: 		//System.out.println("Running scroll insensitive cursor");
1: 		DatabaseMetaData dmd = conn.getMetaData();
1: 		boolean holdOverCommit = dmd.supportsOpenCursorsAcrossCommit();
1: 		Statement stmt;
1: 		if (holdOverCommit)
1: 			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1: 					ResultSet.CONCUR_READ_ONLY,
1: 					ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 		else
1: 			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1: 					ResultSet.CONCUR_READ_ONLY);
1: 		ResultSet rs = stmt.executeQuery("SELECT ca1 FROM ta");
1: 		checkAllCa1(rs, true, holdOverCommit, maxColValue, dupVals,
1: 				"scroll insensitive cursor");
1: 		rs.close();
1: 	}
1: 
1: 	private static void checkAllCa1(ResultSet rs, boolean expectDups,
1: 			boolean holdOverCommit, int maxColValue, String[][][] dupVals,
1: 			String label) throws SQLException {
1: 		int dupKeyCount = 0;
1: 		for (int i = 0; i < dupVals.length; i++) {
1: 			if (dupVals[i].length > dupKeyCount)
1: 				dupKeyCount = dupVals[i].length;
1: 		}
1: 		int[] expectedDupCount = new int[dupKeyCount];
1: 		int[] dupFoundCount = new int[dupKeyCount];
1: 		for (int i = 0; i < dupKeyCount; i++) {
1: 
1: 			dupFoundCount[i] = 0;
1: 			if (!expectDups)
1: 				expectedDupCount[i] = 1;
1: 			else {
1: 				expectedDupCount[i] = 0;
1: 				for (int j = 0; j < dupVals.length; j++) {
1: 					if (i < dupVals[j].length)
1: 						expectedDupCount[i] += dupVals[j][i].length;
1: 				}
1: 			}
1: 		}
1: 		BitSet found = new BitSet(maxColValue);
1: 		int count = 0;
1: 		boolean nullFound = false;
1: 
1: 		for (count = 0; rs.next();) {
1: 			int col1Val = rs.getInt(1);
1: 			if (rs.wasNull()) {
1: 				if (nullFound) {
1: 					fail("Too many nulls returned by " + label);
1: 				}
1: 				nullFound = true;
1: 				continue;
1: 			}
1: 			assertFalse("Invalid value returned by " + label,
1: 					col1Val <= -dupKeyCount || col1Val > maxColValue);
1: 			if (col1Val <= 0) {
1: 				dupFoundCount[-col1Val]++;
1: 				if (!expectDups) {
1: 					assertFalse(label + " returned a duplicate.",
1: 							dupFoundCount[-col1Val] > 1);
1: 				} else {
1: 					assertFalse(
1: 							label + " returned too many duplicates.",
1: 							dupFoundCount[-col1Val] > expectedDupCount[-col1Val]);
1: 				}
1: 			} else {
1: 				assertFalse(label + " returned a duplicate.", found
1: 						.get(col1Val));
1: 				found.set(col1Val);
1: 				count++;
1: 			}
1: 			if (holdOverCommit) {
1: 				rs.getStatement().getConnection().commit();
1: 				holdOverCommit = false;
1: 			}
1: 		}
1: 		assertFalse("Incorrect number of rows in " + label,
1: 				count != maxColValue);
1: 		for (int i = 0; i < dupFoundCount.length; i++) {
1: 			assertFalse("A duplicate key row is missing in " + label,
1: 					dupFoundCount[i] != expectedDupCount[i]);
1: 		}
1: 	}
1: }
============================================================================