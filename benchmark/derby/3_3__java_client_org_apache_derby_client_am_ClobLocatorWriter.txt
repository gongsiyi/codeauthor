1:61aec23: /*
1:61aec23:  
1:61aec23:    Derby - Class org.apache.derby.client.am.ClobLocatorWriter
1:61aec23:  
1:61aec23:    Licensed to the Apache Software Foundation (ASF) under one or more
1:61aec23:    contributor license agreements.  See the NOTICE file distributed with
1:61aec23:    this work for additional information regarding copyright ownership.
1:61aec23:    The ASF licenses this file to You under the Apache License, Version 2.0
1:61aec23:    (the "License"); you may not use this file except in compliance with
1:61aec23:    the License.  You may obtain a copy of the License at
1:61aec23:  
1:61aec23:       http://www.apache.org/licenses/LICENSE-2.0
1:61aec23:  
1:61aec23:    Unless required by applicable law or agreed to in writing, software
1:61aec23:    distributed under the License is distributed on an "AS IS" BASIS,
1:61aec23:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61aec23:    See the License for the specific language governing permissions and
1:61aec23:    limitations under the License.
1:61aec23:  
1:61aec23:  */
1:61aec23: 
1:61aec23: package org.apache.derby.client.am;
1:61aec23: 
1:61aec23: import java.io.IOException;
1:69e3d06: import java.io.Writer;
1:61aec23: 
1:61aec23: /**
1:b13b17c:  * An {@code Writer} that will use an locator to write the
1:61aec23:  * Clob value into the server.
1:61aec23:  * <p>
1:b13b17c:  * This {@code Writer} implementation is pretty basic.  No
1:b13b17c:  * buffering of data is done.  Hence, for efficiency {@code #write(char[])}
1:b13b17c:  * should be used instead of {@code #write(int)}.
1:61aec23:  */
1:69e3d06: class ClobLocatorWriter extends Writer {
1:61aec23:     /**
1:61aec23:      * Connection used to read Clob from server.
1:61aec23:      */
1:69e3d06:     private final ClientConnection connection;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * The Clob to be accessed.
1:61aec23:      */
1:69e3d06:     private final ClientClob clob;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * Current position in the underlying Clob.
1:61aec23:      * Clobs are indexed from 1
1:61aec23:      */
1:61aec23:     private long currentPos;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * Stores the information to whether this Writer has been
1:61aec23:      * closed or not. Is set to true if close() has been
1:61aec23:      * called. Is false otherwise.
1:61aec23:      */
1:61aec23:     private boolean isClosed = false;
1:61aec23:     
1:61aec23:     /**
1:b13b17c:      * Create a {@code Writer} for writing to the
1:b13b17c:      * {@code Clob} value represented by the given locator based
1:b13b17c:      * {@code Clob} object.
1:61aec23:      * @param connection connection to be used to write to the
1:b13b17c:      *        {@code Clob} value on the server
1:b13b17c:      * @param clob {@code Clob} object that contains locator for
1:b13b17c:      *        the {@code Clob} value on the server.
1:b13b17c:      * @param pos the position in the {@code CLOB} value at which
1:61aec23:      *        to start writing; the first position is 1
1:61aec23:      */
1:69e3d06:     ClobLocatorWriter(
1:69e3d06:             ClientConnection connection,
1:69e3d06:             ClientClob clob,
1:69e3d06:             long pos) throws SqlException {
1:69e3d06: 
1:61aec23:         if (pos-1 > clob.sqlLength()) {
1:61aec23:             throw new IndexOutOfBoundsException();
2:61aec23:         }
1:61aec23:         
1:61aec23:         this.connection = connection;
1:61aec23:         this.clob = clob;
1:61aec23:         this.currentPos = pos;
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Writer#close()
1:61aec23:      */
1:61aec23:     public void close() throws IOException {
1:61aec23:         if (isClosed) {
1:61aec23:             return;
1:61aec23:         }
1:61aec23:         isClosed = true;
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:b13b17c:      * Check to see if this {@code Writer} is closed. If it
1:b13b17c:      * is closed throw an {@code IOException} that states that
1:61aec23:      * the stream is closed.
1:61aec23:      *
1:61aec23:      * @throws IOException if isClosed = true.
1:61aec23:      */
1:61aec23:     private void checkClosed() throws IOException {
1:61aec23:         //if isClosed=true this means that close() has
1:61aec23:         //been called on this Writer already.
1:61aec23:         if(isClosed) {
1:61aec23:             //since this method would be used from the write method
1:61aec23:             //implementations throw an IOException that states that
1:61aec23:             //these operations cannot be done once close has been
1:61aec23:             //called.
1:61aec23:             throw new IOException("This operation is not " +
1:61aec23:                     "permitted because the" +
1:61aec23:                     "Writer has been closed");
1:61aec23:         }
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Writer#write(int)
1:61aec23:      *
1:61aec23:      * This method writes one Character at a time to the server. For more
1:61aec23:      * efficient writing, use #write(char[]).
1:61aec23:      */
1:61aec23:     public void write(int c) throws IOException {
1:61aec23:         char[] ca = {(char )c};
1:61aec23:         writeCharacters(ca, 0, ca.length);
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Writer#write(char[])
1:61aec23:      */
1:b565f41:     public void write(char[] c) throws IOException {
1:61aec23:         checkClosed();
1:61aec23:         writeCharacters(c, 0, c.length);
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Writer#flush()
1:61aec23:      */
1:61aec23:     public void flush() {
1:61aec23:         //There is no necessity to flush since each write
1:61aec23:         //automatically calls the stored procedure to write
1:61aec23:         //the characters to the locator on the server.
1:61aec23:     }
1:61aec23:     
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.Writer#write(char[], int, int)
1:61aec23:      */
1:61aec23:     public void write(char[] c, int off, int len) throws IOException {
1:61aec23:         checkClosed();
1:61aec23:         if (len == 0) return;
1:61aec23:         if ((off < 0) || (off > c.length) || (len < 0) ||
1:50227f1:                 (len > c.length - off)) {
1:61aec23:             throw new IndexOutOfBoundsException();
1:61aec23:         }
1:61aec23:         writeCharacters(c, off, len);
1:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:b13b17c:      * Write the {@code char[]} to the {@code Clob} value on
1:61aec23:      * the server; starting from the current position of this stream.
1:61aec23:      *
1:61aec23:      * @param c The character array containing the chars to be written
1:61aec23:      * @throws java.io.IOException Wrapped SqlException if writing
1:61aec23:      *         to server fails.
1:61aec23:      */
1:61aec23:     private void writeCharacters(char[] c, int off, int len)
1:61aec23:     throws IOException {
1:61aec23:         try {
1:a8908bd:             clob.setStringX(currentPos, new String(c, off, len), 0, len);
1:a6f48dd:             currentPos += len;
1:61aec23:         } catch (SqlException ex) {
1:61aec23:             IOException ioEx= new IOException();
1:61aec23:             ioEx.initCause(ex);
1:61aec23:             throw ioEx;
1:61aec23:         }
1:61aec23:     }
1:61aec23: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
1:     public void write(char[] c) throws IOException {
commit:0326967
/////////////////////////////////////////////////////////////////////////
0:     public void wriUSLte(char[] c) throws IOException {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.Writer;
/////////////////////////////////////////////////////////////////////////
1: class ClobLocatorWriter extends Writer {
1:     private final ClientConnection connection;
1:     private final ClientClob clob;
/////////////////////////////////////////////////////////////////////////
1:     ClobLocatorWriter(
1:             ClientConnection connection,
1:             ClientClob clob,
1:             long pos) throws SqlException {
1: 
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1:  * An {@code Writer} that will use an locator to write the
1:  * This {@code Writer} implementation is pretty basic.  No
1:  * buffering of data is done.  Hence, for efficiency {@code #write(char[])}
1:  * should be used instead of {@code #write(int)}.
/////////////////////////////////////////////////////////////////////////
1:      * Create a {@code Writer} for writing to the
1:      * {@code Clob} value represented by the given locator based
1:      * {@code Clob} object.
1:      *        {@code Clob} value on the server
1:      * @param clob {@code Clob} object that contains locator for
1:      *        the {@code Clob} value on the server.
1:      * @param pos the position in the {@code CLOB} value at which
/////////////////////////////////////////////////////////////////////////
1:      * Check to see if this {@code Writer} is closed. If it
1:      * is closed throw an {@code IOException} that states that
/////////////////////////////////////////////////////////////////////////
1:      * Write the {@code char[]} to the {@code Clob} value on
commit:ee33904
/////////////////////////////////////////////////////////////////////////
0:  * buffering of data is done.  Hence, for efficiency #write(char[])
0: class ClobLocatorWriter extends java.io.Writer {
/////////////////////////////////////////////////////////////////////////
0:     ClobLocatorWriter(Connection connection, Clob clob, long pos)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1:             clob.setStringX(currentPos, new String(c, off, len), 0, len);
commit:61aec23
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.ClobLocatorWriter
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.io.IOException;
1: 
1: /**
0:  * An <code>Writer</code> that will use an locator to write the
1:  * Clob value into the server.
1:  * <p>
0:  * This <code>Writer</code> implementation is pretty basic.  No
0:  * buffering of data is done.  Hence, for efficieny #write(char[])
0:  * should be used instead of #write(int).
1:  */
0: public class ClobLocatorWriter extends java.io.Writer {
1:     /**
1:      * Connection used to read Clob from server.
1:      */
0:     private Connection connection;
1:     
1:     /**
1:      * The Clob to be accessed.
1:      */
0:     private Clob clob;
1:     
1:     /**
1:      * Current position in the underlying Clob.
1:      * Clobs are indexed from 1
1:      */
1:     private long currentPos;
1:     
1:     /**
1:      * Stores the information to whether this Writer has been
1:      * closed or not. Is set to true if close() has been
1:      * called. Is false otherwise.
1:      */
1:     private boolean isClosed = false;
1:     
1:     /**
0:      * Create a <code>Writer</code> for writing to the
0:      * <code>Clob</code> value represented by the given locator based
0:      * <code>Clob</code> object.
1:      * @param connection connection to be used to write to the
0:      *        <code>Clob</code> value on the server
0:      * @param clob <code>Clob</code> object that contains locator for
0:      *        the <code>Clob</code> value on the server.
0:      * @param pos the position in the <code>CLOB</code> value at which
1:      *        to start writing; the first position is 1
0:      * @throws org.apache.derby.client.am.SqlException
1:      */
0:     public ClobLocatorWriter(Connection connection, Clob clob, long pos)
0:     throws SqlException {
1:         if (pos-1 > clob.sqlLength()) {
1:             throw new IndexOutOfBoundsException();
1:         }
1:         
1:         this.connection = connection;
1:         this.clob = clob;
1:         this.currentPos = pos;
1:     }
1:     
1:     /**
1:      * @see java.io.Writer#close()
1:      */
1:     public void close() throws IOException {
1:         if (isClosed) {
1:             return;
1:         }
1:         isClosed = true;
0:         connection = null;
0:         clob = null;
1:     }
1:     
1:     /**
0:      * Check to see if this <code>Writer</code> is closed. If it
0:      * is closed throw an <code>IOException</code> that states that
1:      * the stream is closed.
1:      *
1:      * @throws IOException if isClosed = true.
1:      */
1:     private void checkClosed() throws IOException {
1:         //if isClosed=true this means that close() has
1:         //been called on this Writer already.
1:         if(isClosed) {
1:             //since this method would be used from the write method
1:             //implementations throw an IOException that states that
1:             //these operations cannot be done once close has been
1:             //called.
1:             throw new IOException("This operation is not " +
1:                     "permitted because the" +
1:                     "Writer has been closed");
1:         }
1:     }
1:     
1:     /**
1:      * @see java.io.Writer#write(int)
1:      *
1:      * This method writes one Character at a time to the server. For more
1:      * efficient writing, use #write(char[]).
1:      */
1:     public void write(int c) throws IOException {
1:         char[] ca = {(char )c};
1:         writeCharacters(ca, 0, ca.length);
1:     }
1:     
1:     /**
1:      * @see java.io.Writer#write(char[])
1:      */
0:     public void write(char[] c) throws IOException {
1:         checkClosed();
1:         writeCharacters(c, 0, c.length);
1:     }
1:     
1:     /**
1:      * @see java.io.Writer#flush()
1:      */
1:     public void flush() {
1:         //There is no necessity to flush since each write
1:         //automatically calls the stored procedure to write
1:         //the characters to the locator on the server.
1:     }
1:     
1:     
1:     /**
1:      * @see java.io.Writer#write(char[], int, int)
1:      */
1:     public void write(char[] c, int off, int len) throws IOException {
1:         checkClosed();
1:         if (len == 0) return;
1:         if ((off < 0) || (off > c.length) || (len < 0) ||
0:                 (off+len > c.length) || (off+len < 0)) {
1:             throw new IndexOutOfBoundsException();
1:         }
1:         writeCharacters(c, off, len);
1:     }
1:     
1:     /**
0:      * Write the <code>char[]</code> to the <code>Clob</code> value on
1:      * the server; starting from the current position of this stream.
1:      *
1:      * @param c The character array containing the chars to be written
1:      * @throws java.io.IOException Wrapped SqlException if writing
1:      *         to server fails.
1:      */
1:     private void writeCharacters(char[] c, int off, int len)
1:     throws IOException {
1:         try {
0:             connection.locatorProcedureCall().clobSetString
0:                     (clob.locator_, currentPos, c.length, 
0:                     new String(c, off, len));
0:             currentPos += c.length;
0:             if (currentPos-1 > clob.sqlLength()) {
0:                 // Wrote past the old end of the Clob value, update length
0:                 clob.setSqlLength(currentPos - 1);
1:             }
1:         } catch (SqlException ex) {
1:             IOException ioEx= new IOException();
1:             ioEx.initCause(ex);
1:             throw ioEx;
1:         }
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a6f48dd
/////////////////////////////////////////////////////////////////////////
0:                     (clob.locator_, currentPos, len,
1:             currentPos += len;
commit:50227f1
/////////////////////////////////////////////////////////////////////////
0:     private final Connection connection;
0:     private final Clob clob;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 (len > c.length - off)) {
============================================================================