1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.IsNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:eac0369: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:3bb140c: class IsNode extends BinaryLogicalOperatorNode
1:eac0369: {
1:4549ad4: 	private boolean		notMe;	// set to true if we're to negate the sense of this node
1:eac0369: 
2:eac0369: 	/**
1:3bb140c:      * Constructor for an IsNode
2:eac0369: 	 *
1:eac0369: 	 * @param leftOperand	The left operand of the IS
1:eac0369: 	 * @param rightOperand	The right operand of the IS
1:eac0369: 	 * @param notMe			Whether to reverse the sense of this node.
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:     IsNode(ValueNode leftOperand,
1:3bb140c:            ValueNode rightOperand,
1:3bb140c:            boolean notMe,
1:3bb140c:            ContextManager cm)
1:eac0369: 	{
1:4549ad4: 		// the false for shortCir
1:3bb140c:         super(leftOperand, rightOperand, "is", cm );
1:3bb140c:         this.notMe = notMe;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this logical operator.  All that has to be done for binding
1:eac0369: 	 * a logical operator is to bind the operands, check that both operands
1:eac0369: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         super.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		leftOperand.checkIsBoolean();
1:eac0369: 		rightOperand.checkIsBoolean();
1:eac0369: 
1:eac0369: 		setType(leftOperand.getTypeServices());
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Eliminate NotNodes in the current query block. We just mark whether
1:eac0369: 	 * this IS node is under an eliminated NOT node.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode	Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( underNotNode ) { notMe = !notMe; }
1:eac0369: 
1:eac0369: 		leftOperand = leftOperand.eliminateNots( false);
1:eac0369: 		rightOperand = rightOperand.eliminateNots( false );
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do the 1st step in putting child expressions into conjunctive normal
1:eac0369: 	 * form.  This step ensures that the top level of the child expression is
1:eac0369: 	 * a chain of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public ValueNode putAndsOnTop() 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		leftOperand = leftOperand.putAndsOnTop();
1:eac0369: 		rightOperand = rightOperand.putAndsOnTop();
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that putAndsOnTop() did its job correctly.  Verify that the top level 
1:eac0369: 	 * of the expression is a chain of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *
1:eac0369: 	 * @return		Boolean which reflects validity of the tree.
1:eac0369: 	 */
1:eac0369: 	public boolean verifyPutAndsOnTop()
1:eac0369: 	{
1:eac0369: 		return ( leftOperand.verifyPutAndsOnTop() && rightOperand.verifyPutAndsOnTop() );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Finish putting an expression into conjunctive normal
1:eac0369: 	 * form.  An expression tree in conjunctive normal form meets
1:eac0369: 	 * the following criteria:
1:eac0369: 	 *		o  If the expression tree is not null,
1:eac0369: 	 *		   the top level will be a chain of AndNodes terminating
1:eac0369: 	 *		   in a true BooleanConstantNode.
1:eac0369: 	 *		o  The left child of an AndNode will never be an AndNode.
1:eac0369: 	 *		o  Any right-linked chain that includes an AndNode will
1:eac0369: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *		o  The left child of an OrNode will never be an OrNode.
1:eac0369: 	 *		o  Any right-linked chain that includes an OrNode will
1:eac0369: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
1:eac0369: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
1:eac0369: 	 *		   leaf nodes for purposes of expression normalization.
1:eac0369: 	 *		   In other words, we won't do any normalization under
1:eac0369: 	 *		   those nodes.
1:eac0369: 	 *
1:eac0369: 	 * In addition, we track whether or not we are under a top level AndNode.  
1:eac0369: 	 * SubqueryNodes need to know this for subquery flattening.
1:eac0369: 	 *
1:eac0369: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public ValueNode changeToCNF(boolean underTopAndNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		leftOperand = leftOperand.changeToCNF(false );
1:eac0369: 		rightOperand = rightOperand.changeToCNF(false );
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
1:eac0369: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
1:eac0369: 	 *				      leftOperand is not instanceof AndNode
1:eac0369: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
1:eac0369: 	 *					  leftOperand is not instanceof OrNode
1:eac0369: 	 *
1:eac0369: 	 * @return		Boolean which reflects validity of the tree.
1:eac0369: 	 */
1:eac0369: 	public boolean verifyChangeToCNF()
1:eac0369: 	{
1:eac0369: 		return	( leftOperand.verifyChangeToCNF() && rightOperand.verifyChangeToCNF() );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do code generation for this logical binary operator.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb the method  the expression will go into
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		String				evaluatorMethodName;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Generate the return value. Generated code is:
1:eac0369: 		**
1:eac0369: 		**	<fieldLeft>.<evaluatorMethodName>(<fieldRight>)
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		if ( notMe ) { evaluatorMethodName = "isNot"; }
1:eac0369: 		else { evaluatorMethodName = "is"; }
1:eac0369: 
1:eac0369: 		leftOperand.generateExpression(acb, mb);
1:eac0369: 		rightOperand.generateExpression(acb, mb);
1:eac0369: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue, evaluatorMethodName,
1:eac0369: 							ClassName.BooleanDataValue, 1);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: class IsNode extends BinaryLogicalOperatorNode
1:      * Constructor for an IsNode
1:      * @param cm            The context manager
1:     IsNode(ValueNode leftOperand,
1:            ValueNode rightOperand,
1:            boolean notMe,
1:            ContextManager cm)
1:         super(leftOperand, rightOperand, "is", cm );
0:         setNodeType(C_NodeTypes.IS_NODE);
1:         this.notMe = notMe;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         super.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4549ad4
/////////////////////////////////////////////////////////////////////////
1: 	private boolean		notMe;	// set to true if we're to negate the sense of this node
/////////////////////////////////////////////////////////////////////////
1: 		// the false for shortCir
0: 		super.init(leftOperand, rightOperand, "is" );
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.IsNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import java.lang.reflect.Modifier;
1: 
0: import java.util.Vector;
1: 
0: public class IsNode extends BinaryLogicalOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	boolean		notMe;	// set to true if we're to negate the sense of this node
1: 
1: 	/**
0: 	 * Initializer for an IsNode
1: 	 *
1: 	 * @param leftOperand	The left operand of the IS
1: 	 * @param rightOperand	The right operand of the IS
1: 	 * @param notMe			Whether to reverse the sense of this node.
1: 	 */
1: 
0: 	public void init(
0: 							Object leftOperand,
0: 							Object rightOperand,
0: 							Object notMe )
1: 	{
0: 		super.init(leftOperand, rightOperand, Boolean.FALSE, "is" );
0: 		this.notMe = ((Boolean) notMe).booleanValue();
1: 	}
1: 
1: 	/**
1: 	 * Bind this logical operator.  All that has to be done for binding
1: 	 * a logical operator is to bind the operands, check that both operands
1: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
1: 			throws StandardException
1: 	{
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
1: 
1: 		leftOperand.checkIsBoolean();
1: 		rightOperand.checkIsBoolean();
1: 
1: 		setType(leftOperand.getTypeServices());
1: 
1: 		return this;
1: 	}
1: 
1: 	
1: 	/**
1: 	 * Eliminate NotNodes in the current query block. We just mark whether
1: 	 * this IS node is under an eliminated NOT node.
1: 	 *
1: 	 * @param	underNotNode	Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 					throws StandardException
1: 	{
1: 		if ( underNotNode ) { notMe = !notMe; }
1: 
1: 		leftOperand = leftOperand.eliminateNots( false);
1: 		rightOperand = rightOperand.eliminateNots( false );
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Do the 1st step in putting child expressions into conjunctive normal
1: 	 * form.  This step ensures that the top level of the child expression is
1: 	 * a chain of AndNodes terminated by a true BooleanConstantNode.
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public ValueNode putAndsOnTop() 
1: 					throws StandardException
1: 	{
1: 		leftOperand = leftOperand.putAndsOnTop();
1: 		rightOperand = rightOperand.putAndsOnTop();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Verify that putAndsOnTop() did its job correctly.  Verify that the top level 
1: 	 * of the expression is a chain of AndNodes terminated by a true BooleanConstantNode.
1: 	 *
1: 	 * @return		Boolean which reflects validity of the tree.
1: 	 */
1: 	public boolean verifyPutAndsOnTop()
1: 	{
1: 		return ( leftOperand.verifyPutAndsOnTop() && rightOperand.verifyPutAndsOnTop() );
1: 	}
1: 
1: 	/**
1: 	 * Finish putting an expression into conjunctive normal
1: 	 * form.  An expression tree in conjunctive normal form meets
1: 	 * the following criteria:
1: 	 *		o  If the expression tree is not null,
1: 	 *		   the top level will be a chain of AndNodes terminating
1: 	 *		   in a true BooleanConstantNode.
1: 	 *		o  The left child of an AndNode will never be an AndNode.
1: 	 *		o  Any right-linked chain that includes an AndNode will
1: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
1: 	 *		o  The left child of an OrNode will never be an OrNode.
1: 	 *		o  Any right-linked chain that includes an OrNode will
1: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
1: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
1: 	 *		   leaf nodes for purposes of expression normalization.
1: 	 *		   In other words, we won't do any normalization under
1: 	 *		   those nodes.
1: 	 *
1: 	 * In addition, we track whether or not we are under a top level AndNode.  
1: 	 * SubqueryNodes need to know this for subquery flattening.
1: 	 *
1: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public ValueNode changeToCNF(boolean underTopAndNode) 
1: 					throws StandardException
1: 	{
1: 		leftOperand = leftOperand.changeToCNF(false );
1: 		rightOperand = rightOperand.changeToCNF(false );
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
1: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
1: 	 *				      leftOperand is not instanceof AndNode
1: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
1: 	 *					  leftOperand is not instanceof OrNode
1: 	 *
1: 	 * @return		Boolean which reflects validity of the tree.
1: 	 */
1: 	public boolean verifyChangeToCNF()
1: 	{
1: 		return	( leftOperand.verifyChangeToCNF() && rightOperand.verifyChangeToCNF() );
1: 	}
1: 
1: 
1: 	/**
1: 	 * Do code generation for this logical binary operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb the method  the expression will go into
1: 	 *
0: 	 * @return	An Expression to evaluate this logical binary operator
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 		throws StandardException
1: 	{
1: 		String				evaluatorMethodName;
1: 
1: 		/*
1: 		** Generate the return value. Generated code is:
1: 		**
1: 		**	<fieldLeft>.<evaluatorMethodName>(<fieldRight>)
1: 		*/
1: 
1: 		if ( notMe ) { evaluatorMethodName = "isNot"; }
1: 		else { evaluatorMethodName = "is"; }
1: 
1: 		leftOperand.generateExpression(acb, mb);
1: 		rightOperand.generateExpression(acb, mb);
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue, evaluatorMethodName,
1: 							ClassName.BooleanDataValue, 1);
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: import java.util.Vector;
0: 
0: public class IsNode extends BinaryLogicalOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	boolean		notMe;	// set to true if we're to negate the sense of this node
0: 
0: 	/**
0: 	 * Initializer for an IsNode
0: 	 *
0: 	 * @param leftOperand	The left operand of the IS
0: 	 * @param rightOperand	The right operand of the IS
0: 	 * @param notMe			Whether to reverse the sense of this node.
0: 	 */
0: 
0: 	public void init(
0: 							Object leftOperand,
0: 							Object rightOperand,
0: 							Object notMe )
0: 	{
0: 		super.init(leftOperand, rightOperand, Boolean.FALSE, "is" );
0: 		this.notMe = ((Boolean) notMe).booleanValue();
0: 	}
0: 
0: 	/**
0: 	 * Bind this logical operator.  All that has to be done for binding
0: 	 * a logical operator is to bind the operands, check that both operands
0: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
0: 			throws StandardException
0: 	{
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
0: 
0: 		leftOperand.checkIsBoolean();
0: 		rightOperand.checkIsBoolean();
0: 
0: 		setType(leftOperand.getTypeServices());
0: 
0: 		return this;
0: 	}
0: 
0: 	
0: 	/**
0: 	 * Eliminate NotNodes in the current query block. We just mark whether
0: 	 * this IS node is under an eliminated NOT node.
0: 	 *
0: 	 * @param	underNotNode	Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 					throws StandardException
0: 	{
0: 		if ( underNotNode ) { notMe = !notMe; }
0: 
0: 		leftOperand = leftOperand.eliminateNots( false);
0: 		rightOperand = rightOperand.eliminateNots( false );
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Do the 1st step in putting child expressions into conjunctive normal
0: 	 * form.  This step ensures that the top level of the child expression is
0: 	 * a chain of AndNodes terminated by a true BooleanConstantNode.
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode putAndsOnTop() 
0: 					throws StandardException
0: 	{
0: 		leftOperand = leftOperand.putAndsOnTop();
0: 		rightOperand = rightOperand.putAndsOnTop();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Verify that putAndsOnTop() did its job correctly.  Verify that the top level 
0: 	 * of the expression is a chain of AndNodes terminated by a true BooleanConstantNode.
0: 	 *
0: 	 * @return		Boolean which reflects validity of the tree.
0: 	 */
0: 	public boolean verifyPutAndsOnTop()
0: 	{
0: 		return ( leftOperand.verifyPutAndsOnTop() && rightOperand.verifyPutAndsOnTop() );
0: 	}
0: 
0: 	/**
0: 	 * Finish putting an expression into conjunctive normal
0: 	 * form.  An expression tree in conjunctive normal form meets
0: 	 * the following criteria:
0: 	 *		o  If the expression tree is not null,
0: 	 *		   the top level will be a chain of AndNodes terminating
0: 	 *		   in a true BooleanConstantNode.
0: 	 *		o  The left child of an AndNode will never be an AndNode.
0: 	 *		o  Any right-linked chain that includes an AndNode will
0: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
0: 	 *		o  The left child of an OrNode will never be an OrNode.
0: 	 *		o  Any right-linked chain that includes an OrNode will
0: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
0: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
0: 	 *		   leaf nodes for purposes of expression normalization.
0: 	 *		   In other words, we won't do any normalization under
0: 	 *		   those nodes.
0: 	 *
0: 	 * In addition, we track whether or not we are under a top level AndNode.  
0: 	 * SubqueryNodes need to know this for subquery flattening.
0: 	 *
0: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode changeToCNF(boolean underTopAndNode) 
0: 					throws StandardException
0: 	{
0: 		leftOperand = leftOperand.changeToCNF(false );
0: 		rightOperand = rightOperand.changeToCNF(false );
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
0: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
0: 	 *				      leftOperand is not instanceof AndNode
0: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
0: 	 *					  leftOperand is not instanceof OrNode
0: 	 *
0: 	 * @return		Boolean which reflects validity of the tree.
0: 	 */
0: 	public boolean verifyChangeToCNF()
0: 	{
0: 		return	( leftOperand.verifyChangeToCNF() && rightOperand.verifyChangeToCNF() );
0: 	}
0: 
0: 
0: 	/**
0: 	 * Do code generation for this logical binary operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb the method  the expression will go into
0: 	 *
0: 	 * @return	An Expression to evaluate this logical binary operator
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 		throws StandardException
0: 	{
0: 		String				evaluatorMethodName;
0: 
0: 		/*
0: 		** Generate the return value. Generated code is:
0: 		**
0: 		**	<fieldLeft>.<evaluatorMethodName>(<fieldRight>)
0: 		*/
0: 
0: 		if ( notMe ) { evaluatorMethodName = "isNot"; }
0: 		else { evaluatorMethodName = "is"; }
0: 
0: 		leftOperand.generateExpression(acb, mb);
0: 		rightOperand.generateExpression(acb, mb);
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue, evaluatorMethodName,
0: 							ClassName.BooleanDataValue, 1);
0: 	}
0: }
============================================================================