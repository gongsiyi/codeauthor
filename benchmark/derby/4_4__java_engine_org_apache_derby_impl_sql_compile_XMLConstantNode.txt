1:099e28f: /*
5:099e28f: 
1:099e28f:    Derby - Class org.apache.derby.impl.sql.compile.XMLConstantNode
1:099e28f: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:099e28f: 
1:099e28f:       http://www.apache.org/licenses/LICENSE-2.0
1:099e28f: 
1:099e28f:    Unless required by applicable law or agreed to in writing, software
1:099e28f:    distributed under the License is distributed on an "AS IS" BASIS,
1:099e28f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:099e28f:    See the License for the specific language governing permissions and
1:099e28f:    limitations under the License.
1:099e28f: 
3:099e28f:  */
1:099e28f: 
1:099e28f: package    org.apache.derby.impl.sql.compile;
1:099e28f: 
1:099e28f: import org.apache.derby.iapi.error.StandardException;
1:099e28f: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:099e28f: import org.apache.derby.iapi.types.TypeId;
1:099e28f: 
1:099e28f: public final class XMLConstantNode extends ConstantNode
3:099e28f: {
1:3bb140c:     XMLConstantNode(TypeId t, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(t, true, 0, cm);
2:099e28f:     }
1:099e28f: 
3:099e28f:     /**
1:099e28f:      * Return an Object representing the bind time value of this
1:099e28f:      * expression tree.  If the expression tree does not evaluate to
1:099e28f:      * a constant at bind time then we return null.
6:099e28f:      *
1:099e28f:      * @return An Object representing the bind time value of this
1:099e28f:      *  expression tree (null if not a bind time constant).
1:099e28f:      *
1:099e28f:      * @exception StandardException        Thrown on error
1:099e28f:      */
1:3bb140c:     @Override
1:099e28f:     Object getConstantValueAsObject() throws StandardException 
1:099e28f:     {
1:099e28f:         return value.getObject();
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * This generates the proper constant.  For an XML value,
1:099e28f:      * this constant value is simply the XML string (which is
1:099e28f:      * just null because null values are the only types of
1:099e28f:      * XML constants we can have).
1:099e28f:      *
1:099e28f:      * @param acb The ExpressionClassBuilder for the class being built
1:099e28f:      * @param mb The method the code to place the code
1:099e28f:      *
1:099e28f:      * @exception StandardException        Thrown on error
1:099e28f:      */
1:099e28f:     void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
2:099e28f:         throws StandardException
1:099e28f:     {
1:099e28f:         // The generated java is the expression:
1:099e28f:         // "#getString()"
1:1a48949:         mb.push(value.getString());
1:099e28f:     }
1:099e28f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1:     XMLConstantNode(TypeId t, ContextManager cm)
1:             throws StandardException {
1:         super(t, true, 0, cm);
0:         setNodeType(C_NodeTypes.XML_CONSTANT_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a48949
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         mb.push(value.getString());
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.XMLConstantNode
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package    org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.util.ReuseFactory;
1: 
1: public final class XMLConstantNode extends ConstantNode
1: {
1:     /**
0:      * Initializer for an XMLConstantNode.
1:      *
0:      * @param arg1 The TypeId for the type of the node
1:      *
0:      * @exception StandardException
1:      */
0:     public void init(
0:                     Object arg1)
1:         throws StandardException
1:     {
0:         super.init(
0:                     arg1,
0:                     Boolean.TRUE,
0:                     ReuseFactory.getInteger(0));
1:     }
1: 
1:     /**
0:      * Return the value from this XMLConstantNode as a string.
1:      *
0:      * @return The value of this XMLConstantNode as a string.
1:      *
0:      * @exception StandardException Thrown on error
1:      */
0:     public String getString() throws StandardException
1:     {
0:         return value.getString();
1:     }
1: 
1:     /**
1:      * Return an Object representing the bind time value of this
1:      * expression tree.  If the expression tree does not evaluate to
1:      * a constant at bind time then we return null.
1:      *
1:      * @return An Object representing the bind time value of this
1:      *  expression tree (null if not a bind time constant).
1:      *
1:      * @exception StandardException        Thrown on error
1:      */
1:     Object getConstantValueAsObject() throws StandardException 
1:     {
1:         return value.getObject();
1:     }
1: 
1:     /**
1:      * This generates the proper constant.  For an XML value,
1:      * this constant value is simply the XML string (which is
1:      * just null because null values are the only types of
1:      * XML constants we can have).
1:      *
1:      * @param acb The ExpressionClassBuilder for the class being built
1:      * @param mb The method the code to place the code
1:      *
0:      * @return The compiled Expression, 
1:      *
1:      * @exception StandardException        Thrown on error
1:      */
1:     void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1:         throws StandardException
1:     {
1:         // The generated java is the expression:
1:         // "#getString()"
0:         mb.push(getString());
1:     }
1: }
============================================================================