1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ChainAllocPageOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: 
1:eac0369: 
1:eac0369: // Allocation page operation - to allocate, deallocate or free a page
1:eac0369: public final class ChainAllocPageOperation extends PhysicalPageOperation
1:eac0369: {
1:eac0369: 
1:eac0369: 	protected long newAllocPageNum;	// the next alloc page's page number
1:eac0369: 	protected long newAllocPageOffset; // the next alloc page's page offset 
1:eac0369: 
1:3546404:     ChainAllocPageOperation(AllocPage allocPage, long pageNumber, long pageOffset)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		super(allocPage);
1:eac0369: 
1:eac0369: 		newAllocPageNum = pageNumber;
1:eac0369: 		newAllocPageOffset = pageOffset;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public ChainAllocPageOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		CompressedNumber.writeLong(out, newAllocPageNum);
1:eac0369: 		CompressedNumber.writeLong(out, newAllocPageOffset);
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException cannot read object from input
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		newAllocPageNum = CompressedNumber.readLong(in);
1:eac0369: 		newAllocPageOffset = CompressedNumber.readLong(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_CHAIN_ALLOC_PAGE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/** 
1:eac0369: 		Link the next alloc page into the page chain
1:eac0369: 		@exception StandardException container Handle is not active
1:eac0369: 	*/
1:eac0369: 	public final void doMe(Transaction tran, LogInstant instant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(this.page instanceof AllocPage);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		((AllocPage)page).chainNextAllocPage(instant, newAllocPageNum, newAllocPageOffset);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Undoable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Unlink the next alloc page from the page chain
1:eac0369: 
1:eac0369: 		@exception StandardException Thrown by methods I call
1:eac0369: 		@see PhysicalPageOperation#undoMe
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
1:eac0369: 					   LimitObjectInput in)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(undoPage != null, "undo Page null");
1:eac0369: 			SanityManager.ASSERT(undoPage instanceof AllocPage, 
1:eac0369: 								 "undo Page is not an allocPage");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		((AllocPage)undoPage).chainNextAllocPage(CLRInstant,
1:eac0369: 											 ContainerHandle.INVALID_PAGE_NUMBER, 
1:eac0369: 											 0 /* undefine */);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * method to support BeforeImageLogging
1:eac0369: 	 */
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
1:eac0369: 	{
1:eac0369: 		// nobody should be calling this since there is no
1:eac0369: 		// BI_AllocPageOperation
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("cannot call restoreMe on BI_ChainAllocPageOperation");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/** debug */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String str = super.toString();
1:eac0369: 			str += " Chain new alloc page number " + newAllocPageNum + " at " +
1:eac0369: 				newAllocPageOffset + " to " + getPageId();
1:eac0369: 			return str;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     ChainAllocPageOperation(AllocPage allocPage, long pageNumber, long pageOffset)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ChainAllocPageOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: import java.io.ObjectInput;
1: 
1: 
1: // Allocation page operation - to allocate, deallocate or free a page
1: public final class ChainAllocPageOperation extends PhysicalPageOperation
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected long newAllocPageNum;	// the next alloc page's page number
1: 	protected long newAllocPageOffset; // the next alloc page's page offset 
1: 
0: 	public ChainAllocPageOperation(AllocPage allocPage, long pageNumber, long pageOffset)
1: 		 throws StandardException
1: 	{
1: 		super(allocPage);
1: 
1: 		newAllocPageNum = pageNumber;
1: 		newAllocPageOffset = pageOffset;
1: 	}
1: 	
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public ChainAllocPageOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 		CompressedNumber.writeLong(out, newAllocPageNum);
1: 		CompressedNumber.writeLong(out, newAllocPageOffset);
1: 	}
1: 
1: 	/**
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException cannot read object from input
1: 	*/
1: 	public void readExternal(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		newAllocPageNum = CompressedNumber.readLong(in);
1: 		newAllocPageOffset = CompressedNumber.readLong(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_CHAIN_ALLOC_PAGE;
1: 	}
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/** 
1: 		Link the next alloc page into the page chain
1: 		@exception StandardException container Handle is not active
1: 	*/
1: 	public final void doMe(Transaction tran, LogInstant instant, LimitObjectInput in) 
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(this.page instanceof AllocPage);
1: 		}
1: 
1: 		((AllocPage)page).chainNextAllocPage(instant, newAllocPageNum, newAllocPageOffset);
1: 	}
1: 
1: 	/*
1: 	 * Undoable methods
1: 	 */
1: 
1: 	/**
1: 		Unlink the next alloc page from the page chain
1: 
1: 		@exception StandardException Thrown by methods I call
1: 		@see PhysicalPageOperation#undoMe
1: 	*/
1: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
1: 					   LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(undoPage != null, "undo Page null");
1: 			SanityManager.ASSERT(undoPage instanceof AllocPage, 
1: 								 "undo Page is not an allocPage");
1: 		}
1: 
1: 		((AllocPage)undoPage).chainNextAllocPage(CLRInstant,
1: 											 ContainerHandle.INVALID_PAGE_NUMBER, 
1: 											 0 /* undefine */);
1: 	}
1: 
1: 	/*
1: 	 * method to support BeforeImageLogging
1: 	 */
1: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
1: 	{
1: 		// nobody should be calling this since there is no
1: 		// BI_AllocPageOperation
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("cannot call restoreMe on BI_ChainAllocPageOperation");
1: 	}
1: 
1: 
1: 	/** debug */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String str = super.toString();
1: 			str += " Chain new alloc page number " + newAllocPageNum + " at " +
1: 				newAllocPageOffset + " to " + getPageId();
1: 			return str;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: import java.io.ObjectInput;
0: 
0: 
0: // Allocation page operation - to allocate, deallocate or free a page
0: public final class ChainAllocPageOperation extends PhysicalPageOperation
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected long newAllocPageNum;	// the next alloc page's page number
0: 	protected long newAllocPageOffset; // the next alloc page's page offset 
0: 
0: 	public ChainAllocPageOperation(AllocPage allocPage, long pageNumber, long pageOffset)
0: 		 throws StandardException
0: 	{
0: 		super(allocPage);
0: 
0: 		newAllocPageNum = pageNumber;
0: 		newAllocPageOffset = pageOffset;
0: 	}
0: 	
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public ChainAllocPageOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 		CompressedNumber.writeLong(out, newAllocPageNum);
0: 		CompressedNumber.writeLong(out, newAllocPageOffset);
0: 	}
0: 
0: 	/**
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException cannot read object from input
0: 	*/
0: 	public void readExternal(ObjectInput in)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		newAllocPageNum = CompressedNumber.readLong(in);
0: 		newAllocPageOffset = CompressedNumber.readLong(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_CHAIN_ALLOC_PAGE;
0: 	}
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/** 
0: 		Link the next alloc page into the page chain
0: 		@exception StandardException container Handle is not active
0: 	*/
0: 	public final void doMe(Transaction tran, LogInstant instant, LimitObjectInput in) 
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(this.page instanceof AllocPage);
0: 		}
0: 
0: 		((AllocPage)page).chainNextAllocPage(instant, newAllocPageNum, newAllocPageOffset);
0: 	}
0: 
0: 	/*
0: 	 * Undoable methods
0: 	 */
0: 
0: 	/**
0: 		Unlink the next alloc page from the page chain
0: 
0: 		@exception StandardException Thrown by methods I call
0: 		@see PhysicalPageOperation#undoMe
0: 	*/
0: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
0: 					   LimitObjectInput in)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(undoPage != null, "undo Page null");
0: 			SanityManager.ASSERT(undoPage instanceof AllocPage, 
0: 								 "undo Page is not an allocPage");
0: 		}
0: 
0: 		((AllocPage)undoPage).chainNextAllocPage(CLRInstant,
0: 											 ContainerHandle.INVALID_PAGE_NUMBER, 
0: 											 0 /* undefine */);
0: 	}
0: 
0: 	/*
0: 	 * method to support BeforeImageLogging
0: 	 */
0: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
0: 	{
0: 		// nobody should be calling this since there is no
0: 		// BI_AllocPageOperation
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("cannot call restoreMe on BI_ChainAllocPageOperation");
0: 	}
0: 
0: 
0: 	/** debug */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String str = super.toString();
0: 			str += " Chain new alloc page number " + newAllocPageNum + " at " +
0: 				newAllocPageOffset + " to " + getPageId();
0: 			return str;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: }
0: 
============================================================================