1:37ce91b: /*
2:37ce91b: 
1:37ce91b:    Derby - Class org.apache.derby.client.net.NaiveTrustManager
1:37ce91b: 
1:37ce91b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:37ce91b:    contributor license agreements.  See the NOTICE file distributed with
1:37ce91b:    this work for additional information regarding copyright ownership.
1:37ce91b:    The ASF licenses this file to You under the Apache License, Version 2.0
1:37ce91b:    (the "License"); you may not use this file except in compliance with
1:37ce91b:    the License.  You may obtain a copy of the License at
1:37ce91b: 
1:37ce91b:       http://www.apache.org/licenses/LICENSE-2.0
1:37ce91b: 
1:37ce91b:    Unless required by applicable law or agreed to in writing, software
1:37ce91b:    distributed under the License is distributed on an "AS IS" BASIS,
1:37ce91b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:37ce91b:    See the License for the specific language governing permissions and
1:37ce91b:    limitations under the License.
1:37ce91b: 
1:37ce91b: */
1:37ce91b: 
1:37ce91b: package org.apache.derby.client.net;
1:37ce91b: 
1:7ae0ee5: import java.io.FileInputStream;
1:69e3d06: import java.io.IOException;
1:69e3d06: import java.security.KeyManagementException;
1:37ce91b: import javax.net.SocketFactory;
1:37ce91b: import javax.net.ssl.SSLContext;
1:37ce91b: import javax.net.ssl.TrustManager;
1:37ce91b: import javax.net.ssl.X509TrustManager;
1:7ae0ee5: import javax.net.ssl.KeyManagerFactory;
1:7ae0ee5: import java.security.KeyStore;
1:69e3d06: import java.security.KeyStoreException;
1:69e3d06: import java.security.NoSuchAlgorithmException;
1:69e3d06: import java.security.NoSuchProviderException;
1:69e3d06: import java.security.UnrecoverableKeyException;
1:37ce91b: import java.security.cert.X509Certificate;
1:37ce91b: import java.security.cert.CertificateException;
1:7ae0ee5: 
1:37ce91b: 
1:37ce91b: /**
1:37ce91b:  * This is a naive trust manager we use when we don't want server
1:37ce91b:  * authentication. Any certificate will be accepted. 
1:37ce91b:  **/
1:0326967: class NaiveTrustManager
1:37ce91b:     implements X509TrustManager
1:37ce91b: {
1:37ce91b: 
1:37ce91b:     /**
1:37ce91b:      * We don't want more than one instence of this TrustManager
1:37ce91b:      */
1:37ce91b:     private NaiveTrustManager()
1:37ce91b:     {
2:37ce91b:     }
1:37ce91b: 
1:37ce91b:     static private TrustManager[] thisManager = null;
1:37ce91b: 
1:37ce91b:     /** 
1:37ce91b:      * Generate a socket factory with this trust manager. Derby
1:37ce91b:      * Utility routine which is not part of the X509TrustManager
1:37ce91b:      * interface.
1:37ce91b:      **/
1:0326967:     static SocketFactory getSocketFactory()
1:69e3d06:         throws NoSuchAlgorithmException,
1:69e3d06:                KeyManagementException,
1:69e3d06:                NoSuchProviderException,
1:69e3d06:                KeyStoreException,
1:69e3d06:                UnrecoverableKeyException,
1:69e3d06:                CertificateException,
1:69e3d06:                IOException
1:37ce91b:     {
1:37ce91b:         if (thisManager == null) {
1:37ce91b:             thisManager = new TrustManager [] {new NaiveTrustManager()};
1:37ce91b:         }
1:7ae0ee5: 
1:f78eb01:         SSLContext ctx = SSLContext.getInstance("TLS");
1:7ae0ee5:         
1:7ae0ee5:         if (ctx.getProvider().getName().equals("SunJSSE") &&
1:7ae0ee5:             (System.getProperty("javax.net.ssl.keyStore") != null) &&
1:7ae0ee5:             (System.getProperty("javax.net.ssl.keyStorePassword") != null)) {
1:7ae0ee5:             
1:7ae0ee5:             // SunJSSE does not give you a working default keystore
1:7ae0ee5:             // when using your own trust manager. Since a keystore is
1:7ae0ee5:             // needed on the client when the server does
1:7ae0ee5:             // peerAuthentication, we have to provide one working the
1:7ae0ee5:             // same way as the default one.
1:7ae0ee5: 
1:7ae0ee5:             String keyStore = 
1:7ae0ee5:                 System.getProperty("javax.net.ssl.keyStore");
1:7ae0ee5:             String keyStorePassword =
1:7ae0ee5:                 System.getProperty("javax.net.ssl.keyStorePassword");
1:7ae0ee5:             
1:7ae0ee5:             KeyStore ks = KeyStore.getInstance("JKS");
1:7ae0ee5:             ks.load(new FileInputStream(keyStore),
1:7ae0ee5:                     keyStorePassword.toCharArray());
1:7ae0ee5:             
1:7ae0ee5:             KeyManagerFactory kmf = 
1:7ae0ee5:                 KeyManagerFactory.getInstance("SunX509", "SunJSSE");
1:7ae0ee5:             kmf.init(ks, keyStorePassword.toCharArray());
1:7ae0ee5: 
1:7ae0ee5:             ctx.init(kmf.getKeyManagers(),
1:7ae0ee5:                      thisManager,
1:7ae0ee5:                      null); // Use default random source
1:7ae0ee5:         } else {
1:7ae0ee5:             ctx.init(null, // Use default key manager
1:7ae0ee5:                      thisManager,
1:7ae0ee5:                      null); // Use default random source
1:7ae0ee5:         }
1:7ae0ee5: 
1:37ce91b:         return ctx.getSocketFactory();
1:7ae0ee5:      }
1:37ce91b:     
1:37ce91b:     /** 
1:37ce91b:      * Checks wether the we trust the client. Since this trust manager
1:37ce91b:      * is just for the Derby clients, this routine is actually never
1:37ce91b:      * called, but need to be here when we implement X509TrustManager.
1:37ce91b:      * @param chain The client's certificate chain
1:37ce91b:      * @param authType authorization type (e.g. "RSA" or "DHE_DSS")
1:37ce91b:      **/
1:37ce91b:     public void checkClientTrusted(X509Certificate[] chain, 
1:37ce91b:                                    String authType)
1:37ce91b:         throws CertificateException
1:37ce91b:     {
1:7ae0ee5:         // Reject all attemtpts to trust a client. We should never end
1:37ce91b:         // up here.
1:37ce91b:         throw new CertificateException();
1:37ce91b:     }
1:37ce91b:     
1:37ce91b:     /** 
1:37ce91b:      * Checks wether the we trust the server, which we allways will.
1:37ce91b:      * @param chain The server's certificate chain
1:37ce91b:      * @param authType authorization type (e.g. "RSA" or "DHE_DSS")
1:37ce91b:      **/
1:37ce91b:     public void checkServerTrusted(X509Certificate[] chain, 
1:37ce91b:                                    String authType)
1:37ce91b:         throws CertificateException
1:37ce91b:     {
1:37ce91b:         // Do nothing. We trust everyone.
1:37ce91b:     }
1:37ce91b:     
1:37ce91b:     /**
1:37ce91b:      * Return an array of certificate authority certificates which are
1:37ce91b:      * trusted for authenticating peers. Not relevant for this trust
1:37ce91b:      * manager.
1:37ce91b:      */
1:37ce91b:     public X509Certificate[] getAcceptedIssuers()
1:37ce91b:     {
1:37ce91b:         return new X509Certificate[0];
1:37ce91b:     }
1:37ce91b:     
1:37ce91b: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f78eb01
/////////////////////////////////////////////////////////////////////////
1:         SSLContext ctx = SSLContext.getInstance("TLS");
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NaiveTrustManager
/////////////////////////////////////////////////////////////////////////
1:     static SocketFactory getSocketFactory()
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.security.KeyManagementException;
1: import java.security.KeyStoreException;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.NoSuchProviderException;
1: import java.security.UnrecoverableKeyException;
/////////////////////////////////////////////////////////////////////////
1:         throws NoSuchAlgorithmException,
1:                KeyManagementException,
1:                NoSuchProviderException,
1:                KeyStoreException,
1:                UnrecoverableKeyException,
1:                CertificateException,
1:                IOException
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:7ae0ee5
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import javax.net.ssl.KeyManagerFactory;
1: import java.security.KeyStore;
1: 
/////////////////////////////////////////////////////////////////////////
0:                java.security.KeyManagementException,
0:                java.security.NoSuchProviderException,
0:                java.security.KeyStoreException,
0:                java.security.UnrecoverableKeyException,
0:                java.security.cert.CertificateException,
0:                java.io.IOException
1: 
1:         
1:         if (ctx.getProvider().getName().equals("SunJSSE") &&
1:             (System.getProperty("javax.net.ssl.keyStore") != null) &&
1:             (System.getProperty("javax.net.ssl.keyStorePassword") != null)) {
1:             
1:             // SunJSSE does not give you a working default keystore
1:             // when using your own trust manager. Since a keystore is
1:             // needed on the client when the server does
1:             // peerAuthentication, we have to provide one working the
1:             // same way as the default one.
1: 
1:             String keyStore = 
1:                 System.getProperty("javax.net.ssl.keyStore");
1:             String keyStorePassword =
1:                 System.getProperty("javax.net.ssl.keyStorePassword");
1:             
1:             KeyStore ks = KeyStore.getInstance("JKS");
1:             ks.load(new FileInputStream(keyStore),
1:                     keyStorePassword.toCharArray());
1:             
1:             KeyManagerFactory kmf = 
1:                 KeyManagerFactory.getInstance("SunX509", "SunJSSE");
1:             kmf.init(ks, keyStorePassword.toCharArray());
1: 
1:             ctx.init(kmf.getKeyManagers(),
1:                      thisManager,
1:                      null); // Use default random source
1:         } else {
1:             ctx.init(null, // Use default key manager
1:                      thisManager,
1:                      null); // Use default random source
1:         }
1: 
1:      }
/////////////////////////////////////////////////////////////////////////
1:         // Reject all attemtpts to trust a client. We should never end
commit:37ce91b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NaiveTrustManager
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.TrustManager;
1: import javax.net.ssl.X509TrustManager;
1: import java.security.cert.X509Certificate;
1: import java.security.cert.CertificateException;
1: 
1: /**
1:  * This is a naive trust manager we use when we don't want server
1:  * authentication. Any certificate will be accepted. 
1:  **/
0: public class NaiveTrustManager
1:     implements X509TrustManager
1: {
1: 
1:     /**
1:      * We don't want more than one instence of this TrustManager
1:      */
1:     private NaiveTrustManager()
1:     {
1:     }
1: 
1:     static private TrustManager[] thisManager = null;
1: 
1:     /** 
1:      * Generate a socket factory with this trust manager. Derby
1:      * Utility routine which is not part of the X509TrustManager
1:      * interface.
1:      **/
0:     public static SocketFactory getSocketFactory()
0:         throws java.security.NoSuchAlgorithmException,
0:                java.security.KeyManagementException
1:     {
1:         if (thisManager == null) {
1:             thisManager = new TrustManager [] {new NaiveTrustManager()};
1:         }
1:         
0:         SSLContext ctx = SSLContext.getInstance("SSL");
0:         ctx.init(null, // Use default key manager
0:                  thisManager,
0:                  null); // Use default random source
1:         return ctx.getSocketFactory();
1:     }
1:     
1:     /** 
1:      * Checks wether the we trust the client. Since this trust manager
1:      * is just for the Derby clients, this routine is actually never
1:      * called, but need to be here when we implement X509TrustManager.
1:      * @param chain The client's certificate chain
1:      * @param authType authorization type (e.g. "RSA" or "DHE_DSS")
1:      **/
1:     public void checkClientTrusted(X509Certificate[] chain, 
1:                                    String authType)
1:         throws CertificateException
1:     {
0:         // Reject all attemtpts to truts a client. We should never end
1:         // up here.
1:         throw new CertificateException();
1:     }
1:     
1:     /** 
1:      * Checks wether the we trust the server, which we allways will.
1:      * @param chain The server's certificate chain
1:      * @param authType authorization type (e.g. "RSA" or "DHE_DSS")
1:      **/
1:     public void checkServerTrusted(X509Certificate[] chain, 
1:                                    String authType)
1:         throws CertificateException
1:     {
1:         // Do nothing. We trust everyone.
1:     }
1:     
1:     /**
1:      * Return an array of certificate authority certificates which are
1:      * trusted for authenticating peers. Not relevant for this trust
1:      * manager.
1:      */
1:     public X509Certificate[] getAcceptedIssuers()
1:     {
1:         return new X509Certificate[0];
1:     }
1:     
1: }
============================================================================