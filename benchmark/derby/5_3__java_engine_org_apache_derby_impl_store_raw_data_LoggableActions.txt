1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.LoggableActions
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.data.PageActions;
1:eac0369: import org.apache.derby.impl.store.raw.data.BasePage;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: public class LoggableActions implements PageActions  {
1:eac0369: 
1:eac0369: 
1:eac0369: 	public void actionDelete(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             slot, 
1:eac0369:     int             recordId, 
1:eac0369:     boolean         delete, 
1:eac0369:     LogicalUndo     undo)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		DeleteOperation lop = 
1:eac0369:             new DeleteOperation(t, page, slot, recordId, delete, undo);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int actionUpdate(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId,
1:eac0369:     Object[]   row, 
1:eac0369:     FormatableBitSet                 validColumns,
1:eac0369:     int                     realStartColumn, 
1:eac0369:     DynamicByteArrayOutputStream  logBuffer, 
1:eac0369:     int                     realSpaceOnPage, 
1:eac0369:     RecordHandle            headRowHandle)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		UpdateOperation lop = 
1:eac0369: 			new UpdateOperation(t, page, slot, recordId, row, validColumns,
1:eac0369: 								realStartColumn, logBuffer,
1:eac0369: 								realSpaceOnPage, headRowHandle);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 
1:eac0369: 		return lop.getNextStartColumn();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionPurge(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             slot, 
1:eac0369:     int             num_rows, 
1:eac0369:     int[]           recordIds,
1:eac0369: 	boolean         logData)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		PurgeOperation lop = 
1:eac0369:             new PurgeOperation(t, page, slot, num_rows, recordIds, logData);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionUpdateField(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId, 
1:eac0369:     int                     fieldId,
1:eac0369:     Object     newValue, 
1:eac0369:     LogicalUndo             undo)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		UpdateFieldOperation lop = 
1:eac0369:             new UpdateFieldOperation(
1:eac0369:                     t, page, slot, recordId, fieldId, newValue, undo);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int actionInsert(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId,
1:eac0369:     Object[]                row, 
1:eac0369:     FormatableBitSet                 validColumns, 
1:eac0369:     LogicalUndo             undo, 
1:eac0369:     byte                    insertFlag,
1:eac0369:     int                     startColumn, 
1:eac0369:     boolean                 isLongColumn, 
1:eac0369:     int                     realStartColumn, 
1:eac0369:     DynamicByteArrayOutputStream  logBuffer,
1:eac0369:     int                     realSpaceOnPage, 
1:eac0369:     int                     overflowThreshold)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		InsertOperation lop = new InsertOperation(t, page, slot, recordId,
1:eac0369: 			row, validColumns, undo, insertFlag, startColumn, isLongColumn,
1:eac0369: 			realStartColumn, logBuffer, realSpaceOnPage, overflowThreshold);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 		return (lop.getNextStartColumn());
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionCopyRows(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        destPage, 
1:eac0369:     BasePage        srcPage,
1:eac0369:     int             srcSlot, 
1:eac0369:     int             numRows, 
1:eac0369:     int             destSlot, 
1:eac0369:     int[]           recordIds)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		CopyRowsOperation lop = 
1:eac0369:             new CopyRowsOperation(
1:eac0369:                     t, destPage, srcPage,srcSlot, numRows, destSlot, recordIds);
1:eac0369: 
1:eac0369: 		doAction(t, destPage, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionInvalidatePage(RawTransaction t, BasePage page)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		
1:eac0369: 		InvalidatePageOperation lop = new InvalidatePageOperation(page);
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionInitPage(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             initFlag,
1:eac0369:     int             pageFormatId, 
1:eac0369:     long            pageOffset)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		InitPageOperation lop = 
1:eac0369: 			new InitPageOperation(page, initFlag, pageFormatId, pageOffset);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionShrinkReservedSpace(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             slot, 
1:eac0369:     int             recordId, 
1:eac0369:     int             newValue, 
1:eac0369:     int             oldValue)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		SetReservedSpaceOperation lop = 
1:eac0369: 			new SetReservedSpaceOperation(
1:eac0369:                     page, slot, recordId, newValue, oldValue);
1:eac0369: 
1:eac0369: 		doAction(t, page, lop);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private void doAction(RawTransaction t, BasePage page, Loggable lop)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		long oldversion = 0;		// sanity check
1:eac0369: 		LogInstant oldLogInstant = null; // sanity check
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			oldLogInstant = page.getLastLogInstant();
1:eac0369: 			oldversion = page.getPageVersion();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// mark the page as pre-dirtied so that if a checkpoint happens after
1:eac0369: 		// the log record is sent to the log stream, the cache cleaning will
1:eac0369: 		// wait for this change.
1:eac0369: 		page.preDirty();
1:eac0369: 
1:eac0369: 		t.logAndDo(lop);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			// log instant may not supported by underlying log factory, in that
1:eac0369: 			// case, it is expected to stay null
1:eac0369: 			if (oldLogInstant != null &&  page.getLastLogInstant() != null &&
1:eac0369: 							! oldLogInstant.lessThan(page.getLastLogInstant()))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 								 "old log instant = " + oldLogInstant + 
1:eac0369: 								 " lastlog = " + page.getLastLogInstant() );
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(
1:eac0369:                     oldversion == ((PageBasicOperation)lop).getPageVersion());
1:eac0369: 			SanityManager.ASSERT(page.getPageVersion() > oldversion);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.LoggableActions
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.impl.store.raw.data.PageActions;
1: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
1: import java.io.IOException;
1: 
1: 
1: 
1: public class LoggableActions implements PageActions  {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 
1: 	public void actionDelete(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             slot, 
1:     int             recordId, 
1:     boolean         delete, 
1:     LogicalUndo     undo)
1: 		throws StandardException
1: 	{
1: 
1: 		DeleteOperation lop = 
1:             new DeleteOperation(t, page, slot, recordId, delete, undo);
1: 
1: 		doAction(t, page, lop);
1: 	}
1: 
1: 	public int actionUpdate(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId,
1:     Object[]   row, 
1:     FormatableBitSet                 validColumns,
1:     int                     realStartColumn, 
1:     DynamicByteArrayOutputStream  logBuffer, 
1:     int                     realSpaceOnPage, 
1:     RecordHandle            headRowHandle)
1: 		throws StandardException
1: 	{
1: 		UpdateOperation lop = 
1: 			new UpdateOperation(t, page, slot, recordId, row, validColumns,
1: 								realStartColumn, logBuffer,
1: 								realSpaceOnPage, headRowHandle);
1: 
1: 		doAction(t, page, lop);
1: 
1: 		return lop.getNextStartColumn();
1: 	}
1: 
1: 	public void actionPurge(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             slot, 
1:     int             num_rows, 
1:     int[]           recordIds,
1: 	boolean         logData)
1: 		throws StandardException
1: 	{
1: 		PurgeOperation lop = 
1:             new PurgeOperation(t, page, slot, num_rows, recordIds, logData);
1: 
1: 		doAction(t, page, lop);
1: 	}
1: 
1: 	public void actionUpdateField(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId, 
1:     int                     fieldId,
1:     Object     newValue, 
1:     LogicalUndo             undo)
1: 		throws StandardException
1: 	{
1: 		UpdateFieldOperation lop = 
1:             new UpdateFieldOperation(
1:                     t, page, slot, recordId, fieldId, newValue, undo);
1: 
1: 		doAction(t, page, lop);
1: 	}
1: 
1: 	public int actionInsert(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId,
1:     Object[]                row, 
1:     FormatableBitSet                 validColumns, 
1:     LogicalUndo             undo, 
1:     byte                    insertFlag,
1:     int                     startColumn, 
1:     boolean                 isLongColumn, 
1:     int                     realStartColumn, 
1:     DynamicByteArrayOutputStream  logBuffer,
1:     int                     realSpaceOnPage, 
1:     int                     overflowThreshold)
1: 		throws StandardException
1: 	{
1: 		InsertOperation lop = new InsertOperation(t, page, slot, recordId,
1: 			row, validColumns, undo, insertFlag, startColumn, isLongColumn,
1: 			realStartColumn, logBuffer, realSpaceOnPage, overflowThreshold);
1: 
1: 		doAction(t, page, lop);
1: 		return (lop.getNextStartColumn());
1: 
1: 	}
1: 
1: 	public void actionCopyRows(
1:     RawTransaction  t, 
1:     BasePage        destPage, 
1:     BasePage        srcPage,
1:     int             srcSlot, 
1:     int             numRows, 
1:     int             destSlot, 
1:     int[]           recordIds)
1: 		throws StandardException
1: 	{
1: 
1: 		CopyRowsOperation lop = 
1:             new CopyRowsOperation(
1:                     t, destPage, srcPage,srcSlot, numRows, destSlot, recordIds);
1: 
1: 		doAction(t, destPage, lop);
1: 	}
1: 
1: 	public void actionInvalidatePage(RawTransaction t, BasePage page)
1: 		 throws StandardException
1: 	{
1: 		
1: 		InvalidatePageOperation lop = new InvalidatePageOperation(page);
1: 		doAction(t, page, lop);
1: 	}
1: 
1: 	public void actionInitPage(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             initFlag,
1:     int             pageFormatId, 
1:     long            pageOffset)
1: 		 throws StandardException
1: 	{
1: 		InitPageOperation lop = 
1: 			new InitPageOperation(page, initFlag, pageFormatId, pageOffset);
1: 
1: 		doAction(t, page, lop);
1: 	}
1: 
1: 	public void actionShrinkReservedSpace(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             slot, 
1:     int             recordId, 
1:     int             newValue, 
1:     int             oldValue)
1: 		 throws StandardException
1: 	{
1: 
1: 		SetReservedSpaceOperation lop = 
1: 			new SetReservedSpaceOperation(
1:                     page, slot, recordId, newValue, oldValue);
1: 
1: 		doAction(t, page, lop);
1: 	}
1: 
1: 	private void doAction(RawTransaction t, BasePage page, Loggable lop)
1: 		 throws StandardException
1: 	{
1: 		long oldversion = 0;		// sanity check
1: 		LogInstant oldLogInstant = null; // sanity check
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			oldLogInstant = page.getLastLogInstant();
1: 			oldversion = page.getPageVersion();
1: 		}
1: 
1: 		// mark the page as pre-dirtied so that if a checkpoint happens after
1: 		// the log record is sent to the log stream, the cache cleaning will
1: 		// wait for this change.
1: 		page.preDirty();
1: 
1: 		t.logAndDo(lop);
1: 
1: 		if (SanityManager.DEBUG) {
1: 			// log instant may not supported by underlying log factory, in that
1: 			// case, it is expected to stay null
1: 			if (oldLogInstant != null &&  page.getLastLogInstant() != null &&
1: 							! oldLogInstant.lessThan(page.getLastLogInstant()))
1: 				SanityManager.THROWASSERT(
1: 								 "old log instant = " + oldLogInstant + 
1: 								 " lastlog = " + page.getLastLogInstant() );
1: 
1: 			SanityManager.ASSERT(
1:                     oldversion == ((PageBasicOperation)lop).getPageVersion());
1: 			SanityManager.ASSERT(page.getPageVersion() > oldversion);
1: 		}
1: 
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.PageActions;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: 
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: import java.io.IOException;
0: 
0: 
0: 
0: public class LoggableActions implements PageActions  {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 
0: 	public void actionDelete(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             slot, 
0:     int             recordId, 
0:     boolean         delete, 
0:     LogicalUndo     undo)
0: 		throws StandardException
0: 	{
0: 
0: 		DeleteOperation lop = 
0:             new DeleteOperation(t, page, slot, recordId, delete, undo);
0: 
0: 		doAction(t, page, lop);
0: 	}
0: 
0: 	public int actionUpdate(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId,
0:     Object[]   row, 
0:     FormatableBitSet                 validColumns,
0:     int                     realStartColumn, 
0:     DynamicByteArrayOutputStream  logBuffer, 
0:     int                     realSpaceOnPage, 
0:     RecordHandle            headRowHandle)
0: 		throws StandardException
0: 	{
0: 		UpdateOperation lop = 
0: 			new UpdateOperation(t, page, slot, recordId, row, validColumns,
0: 								realStartColumn, logBuffer,
0: 								realSpaceOnPage, headRowHandle);
0: 
0: 		doAction(t, page, lop);
0: 
0: 		return lop.getNextStartColumn();
0: 	}
0: 
0: 	public void actionPurge(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             slot, 
0:     int             num_rows, 
0:     int[]           recordIds,
0: 	boolean         logData)
0: 		throws StandardException
0: 	{
0: 		PurgeOperation lop = 
0:             new PurgeOperation(t, page, slot, num_rows, recordIds, logData);
0: 
0: 		doAction(t, page, lop);
0: 	}
0: 
0: 	public void actionUpdateField(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId, 
0:     int                     fieldId,
0:     Object     newValue, 
0:     LogicalUndo             undo)
0: 		throws StandardException
0: 	{
0: 		UpdateFieldOperation lop = 
0:             new UpdateFieldOperation(
0:                     t, page, slot, recordId, fieldId, newValue, undo);
0: 
0: 		doAction(t, page, lop);
0: 	}
0: 
0: 	public int actionInsert(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId,
0:     Object[]                row, 
0:     FormatableBitSet                 validColumns, 
0:     LogicalUndo             undo, 
0:     byte                    insertFlag,
0:     int                     startColumn, 
0:     boolean                 isLongColumn, 
0:     int                     realStartColumn, 
0:     DynamicByteArrayOutputStream  logBuffer,
0:     int                     realSpaceOnPage, 
0:     int                     overflowThreshold)
0: 		throws StandardException
0: 	{
0: 		InsertOperation lop = new InsertOperation(t, page, slot, recordId,
0: 			row, validColumns, undo, insertFlag, startColumn, isLongColumn,
0: 			realStartColumn, logBuffer, realSpaceOnPage, overflowThreshold);
0: 
0: 		doAction(t, page, lop);
0: 		return (lop.getNextStartColumn());
0: 
0: 	}
0: 
0: 	public void actionCopyRows(
0:     RawTransaction  t, 
0:     BasePage        destPage, 
0:     BasePage        srcPage,
0:     int             srcSlot, 
0:     int             numRows, 
0:     int             destSlot, 
0:     int[]           recordIds)
0: 		throws StandardException
0: 	{
0: 
0: 		CopyRowsOperation lop = 
0:             new CopyRowsOperation(
0:                     t, destPage, srcPage,srcSlot, numRows, destSlot, recordIds);
0: 
0: 		doAction(t, destPage, lop);
0: 	}
0: 
0: 	public void actionInvalidatePage(RawTransaction t, BasePage page)
0: 		 throws StandardException
0: 	{
0: 		
0: 		InvalidatePageOperation lop = new InvalidatePageOperation(page);
0: 		doAction(t, page, lop);
0: 	}
0: 
0: 	public void actionInitPage(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             initFlag,
0:     int             pageFormatId, 
0:     long            pageOffset)
0: 		 throws StandardException
0: 	{
0: 		InitPageOperation lop = 
0: 			new InitPageOperation(page, initFlag, pageFormatId, pageOffset);
0: 
0: 		doAction(t, page, lop);
0: 	}
0: 
0: 	public void actionShrinkReservedSpace(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             slot, 
0:     int             recordId, 
0:     int             newValue, 
0:     int             oldValue)
0: 		 throws StandardException
0: 	{
0: 
0: 		SetReservedSpaceOperation lop = 
0: 			new SetReservedSpaceOperation(
0:                     page, slot, recordId, newValue, oldValue);
0: 
0: 		doAction(t, page, lop);
0: 	}
0: 
0: 	private void doAction(RawTransaction t, BasePage page, Loggable lop)
0: 		 throws StandardException
0: 	{
0: 		long oldversion = 0;		// sanity check
0: 		LogInstant oldLogInstant = null; // sanity check
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			oldLogInstant = page.getLastLogInstant();
0: 			oldversion = page.getPageVersion();
0: 		}
0: 
0: 		// mark the page as pre-dirtied so that if a checkpoint happens after
0: 		// the log record is sent to the log stream, the cache cleaning will
0: 		// wait for this change.
0: 		page.preDirty();
0: 
0: 		t.logAndDo(lop);
0: 
0: 		if (SanityManager.DEBUG) {
0: 			// log instant may not supported by underlying log factory, in that
0: 			// case, it is expected to stay null
0: 			if (oldLogInstant != null &&  page.getLastLogInstant() != null &&
0: 							! oldLogInstant.lessThan(page.getLastLogInstant()))
0: 				SanityManager.THROWASSERT(
0: 								 "old log instant = " + oldLogInstant + 
0: 								 " lastlog = " + page.getLastLogInstant() );
0: 
0: 			SanityManager.ASSERT(
0:                     oldversion == ((PageBasicOperation)lop).getPageVersion());
0: 			SanityManager.ASSERT(page.getPageVersion() > oldversion);
0: 		}
0: 
0: 	}
0: 
0: }
============================================================================