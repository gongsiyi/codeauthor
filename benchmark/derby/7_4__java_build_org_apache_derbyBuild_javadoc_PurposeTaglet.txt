1:eac0369: /*
1:cd3749b: 
1:cd3749b:    Derby - Class org.apache.derbyBuild.javadoc.PurposeTaglet
1:cd3749b: 
1:de243e0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:de243e0:    contributor license agreements.  See the NOTICE file distributed with
1:de243e0:    this work for additional information regarding copyright ownership.
1:de243e0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:de243e0:    (the "License"); you may not use this file except in compliance with
1:de243e0:    the License.  You may obtain a copy of the License at
1:cd3749b: 
1:cd3749b:       http://www.apache.org/licenses/LICENSE-2.0
1:cd3749b: 
1:cd3749b:    Unless required by applicable law or agreed to in writing, software
1:cd3749b:    distributed under the License is distributed on an "AS IS" BASIS,
1:cd3749b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd3749b:    See the License for the specific language governing permissions and
1:cd3749b:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: package org.apache.derbyBuild.javadoc;
1:eac0369: 
1:eac0369: import com.sun.tools.doclets.Taglet;
1:eac0369: import com.sun.javadoc.*;
1:eac0369: import java.util.Map;
1:eac0369: 
1:eac0369: public class PurposeTaglet implements Taglet {
1:eac0369: 
1:787ceb4:     private String NAME = "derby.purpose";
1:eac0369:     private String ROWNAME = "Purpose";
1:eac0369: 
2:eac0369:     /**
1:eac0369:      * Returns the name of this taglet
1:eac0369:      * @return NAME
1:eac0369:      */
1:eac0369:     public String getName() {
1:eac0369:         return NAME;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose not expected to be used in field documentation.
1:eac0369:      * @return false
1:eac0369:      */
1:eac0369:     public boolean inField() {
1:eac0369:         return false;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose not expected to be used in constructor documentation.
1:eac0369:      * @return false
1:eac0369:      */
1:eac0369:     public boolean inConstructor() {
1:eac0369:         return false;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose not expected to be used in method documentation.
1:eac0369:      * @return false
1:eac0369:      */
1:eac0369:     public boolean inMethod() {
1:eac0369:         return false;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose can be used in overview documentation.
1:eac0369:      * @return true
1:eac0369:      */
1:eac0369:     public boolean inOverview() {
1:eac0369:         return true;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose can be used in package documentation.
1:eac0369:      * @return true
1:eac0369:      */
1:eac0369:     public boolean inPackage() {
1:eac0369:         return true;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose can be used in type documentation.
1:eac0369:      * @return true
1:eac0369:      */
1:eac0369:     public boolean inType() {
1:eac0369:         return true;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * purpose is not an inline tag.
1:eac0369:      * @return false
1:eac0369:      */
1:eac0369:     public boolean isInlineTag() {
1:eac0369:         return false;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Register this Taglet.
1:eac0369:      * @param tagletMap
1:eac0369:      */
1:38b9499:     public static void register(Map<String, Taglet> tagletMap) {
1:eac0369:        PurposeTaglet tag = new PurposeTaglet();
1:eac0369:        Taglet t = (Taglet) tagletMap.get(tag.getName());
1:eac0369:        if (t != null) {
1:eac0369:            tagletMap.remove(tag.getName());
1:eac0369:        }
1:eac0369:        tagletMap.put(tag.getName(), tag);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Embed the contents of the purpose tag as a row
1:eac0369:      * in the disk format table.
1:eac0369:      * @param tag The tag to embed to the disk format the table.
1:eac0369:      */
1:eac0369:     public String toString(Tag tag) {
1:eac0369:         return "<tr><td>" + ROWNAME + "</td>"
1:eac0369:                + "<td>" + tag.text() + "</td></tr>\n";
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Embed multiple purpose tags as cells in the disk format table.
1:eac0369:      * @param tags An array of tags to add to the disk format table.
1:eac0369:      */
1:eac0369:     public String toString(Tag[] tags) {
1:eac0369:         if (tags.length == 0) {
1:eac0369:             return null;
1:eac0369:         }
1:eac0369:         String result = "<tr><td>" + ROWNAME + "</td><td>";
1:eac0369:         for (int i = 0; i < tags.length; i++) {
1:eac0369:             if (i > 0) {
1:eac0369:                 result += "";
1:eac0369:             }
1:eac0369:             result += tags[i].text() + "</td></tr>";
1:eac0369:         }
1:eac0369:         return result + "\n";
1:eac0369:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1:     private String NAME = "derby.purpose";
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:38b9499
/////////////////////////////////////////////////////////////////////////
1:     public static void register(Map<String, Taglet> tagletMap) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:ef786d1
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:de243e0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cd3749b
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyBuild.javadoc.PurposeTaglet
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:b201557
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyBuild.javadoc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: package org.apache.derbyBuild.javadoc;
1: 
1: import com.sun.tools.doclets.Taglet;
1: import com.sun.javadoc.*;
1: import java.util.Map;
1: 
0: // Adapted from ToDoTaglet.java, Copyright  2002.
1: 
1: public class PurposeTaglet implements Taglet {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
0:     private String NAME = "purpose";
1:     private String ROWNAME = "Purpose";
1: 
1:     /**
1:      * Returns the name of this taglet
1:      * @return NAME
1:      */
1:     public String getName() {
1:         return NAME;
1:     }
1: 
1:     /**
1:      * purpose not expected to be used in field documentation.
1:      * @return false
1:      */
1:     public boolean inField() {
1:         return false;
1:     }
1: 
1:     /**
1:      * purpose not expected to be used in constructor documentation.
1:      * @return false
1:      */
1:     public boolean inConstructor() {
1:         return false;
1:     }
1: 
1:     /**
1:      * purpose not expected to be used in method documentation.
1:      * @return false
1:      */
1:     public boolean inMethod() {
1:         return false;
1:     }
1: 
1:     /**
1:      * purpose can be used in overview documentation.
1:      * @return true
1:      */
1:     public boolean inOverview() {
1:         return true;
1:     }
1: 
1:     /**
1:      * purpose can be used in package documentation.
1:      * @return true
1:      */
1:     public boolean inPackage() {
1:         return true;
1:     }
1: 
1:     /**
1:      * purpose can be used in type documentation.
1:      * @return true
1:      */
1:     public boolean inType() {
1:         return true;
1:     }
1: 
1:     /**
1:      * purpose is not an inline tag.
1:      * @return false
1:      */
1:     public boolean isInlineTag() {
1:         return false;
1:     }
1: 
1:     /**
1:      * Register this Taglet.
1:      * @param tagletMap
1:      */
0:     public static void register(Map tagletMap) {
1:        PurposeTaglet tag = new PurposeTaglet();
1:        Taglet t = (Taglet) tagletMap.get(tag.getName());
1:        if (t != null) {
1:            tagletMap.remove(tag.getName());
1:        }
1:        tagletMap.put(tag.getName(), tag);
1:     }
1: 
1:     /**
1:      * Embed the contents of the purpose tag as a row
1:      * in the disk format table.
1:      * @param tag The tag to embed to the disk format the table.
1:      */
1:     public String toString(Tag tag) {
1:         return "<tr><td>" + ROWNAME + "</td>"
1:                + "<td>" + tag.text() + "</td></tr>\n";
1:     }
1: 
1:     /**
1:      * Embed multiple purpose tags as cells in the disk format table.
1:      * @param tags An array of tags to add to the disk format table.
1:      */
1:     public String toString(Tag[] tags) {
1:         if (tags.length == 0) {
1:             return null;
1:         }
1:         String result = "<tr><td>" + ROWNAME + "</td><td>";
1:         for (int i = 0; i < tags.length; i++) {
1:             if (i > 0) {
1:                 result += "";
1:             }
1:             result += tags[i].text() + "</td></tr>";
1:         }
1:         return result + "\n";
1:     }
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyBuild.javadoc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: package org.apache.derbyBuild.javadoc;
0: 
0: import com.sun.tools.doclets.Taglet;
0: import com.sun.javadoc.*;
0: import java.util.Map;
0: 
0: // Adapted from ToDoTaglet.java, Copyright  2002.
0: 
0: public class PurposeTaglet implements Taglet {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0:     private String NAME = "purpose";
0:     private String ROWNAME = "Purpose";
0: 
0:     /**
0:      * Returns the name of this taglet
0:      * @return NAME
0:      */
0:     public String getName() {
0:         return NAME;
0:     }
0: 
0:     /**
0:      * purpose not expected to be used in field documentation.
0:      * @return false
0:      */
0:     public boolean inField() {
0:         return false;
0:     }
0: 
0:     /**
0:      * purpose not expected to be used in constructor documentation.
0:      * @return false
0:      */
0:     public boolean inConstructor() {
0:         return false;
0:     }
0: 
0:     /**
0:      * purpose not expected to be used in method documentation.
0:      * @return false
0:      */
0:     public boolean inMethod() {
0:         return false;
0:     }
0: 
0:     /**
0:      * purpose can be used in overview documentation.
0:      * @return true
0:      */
0:     public boolean inOverview() {
0:         return true;
0:     }
0: 
0:     /**
0:      * purpose can be used in package documentation.
0:      * @return true
0:      */
0:     public boolean inPackage() {
0:         return true;
0:     }
0: 
0:     /**
0:      * purpose can be used in type documentation.
0:      * @return true
0:      */
0:     public boolean inType() {
0:         return true;
0:     }
0: 
0:     /**
0:      * purpose is not an inline tag.
0:      * @return false
0:      */
0:     public boolean isInlineTag() {
0:         return false;
0:     }
0: 
0:     /**
0:      * Register this Taglet.
0:      * @param tagletMap
0:      */
0:     public static void register(Map tagletMap) {
0:        PurposeTaglet tag = new PurposeTaglet();
0:        Taglet t = (Taglet) tagletMap.get(tag.getName());
0:        if (t != null) {
0:            tagletMap.remove(tag.getName());
0:        }
0:        tagletMap.put(tag.getName(), tag);
0:     }
0: 
0:     /**
0:      * Embed the contents of the purpose tag as a row
0:      * in the disk format table.
0:      * @param tag The tag to embed to the disk format the table.
0:      */
0:     public String toString(Tag tag) {
0:         return "<tr><td>" + ROWNAME + "</td>"
0:                + "<td>" + tag.text() + "</td></tr>\n";
0:     }
0: 
0:     /**
0:      * Embed multiple purpose tags as cells in the disk format table.
0:      * @param tags An array of tags to add to the disk format table.
0:      */
0:     public String toString(Tag[] tags) {
0:         if (tags.length == 0) {
0:             return null;
0:         }
0:         String result = "<tr><td>" + ROWNAME + "</td><td>";
0:         for (int i = 0; i < tags.length; i++) {
0:             if (i > 0) {
0:                 result += "";
0:             }
0:             result += tags[i].text() + "</td></tr>";
0:         }
0:         return result + "\n";
0:     }
0: }
0: 
============================================================================