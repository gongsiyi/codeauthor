1:73a34db: /*
1:73a34db: 
1:73a34db:    Derby - Class org.apache.derby.impl.services.cache.CacheEntry
1:73a34db: 
1:73a34db:    Licensed to the Apache Software Foundation (ASF) under one or more
1:73a34db:    contributor license agreements.  See the NOTICE file distributed with
1:73a34db:    this work for additional information regarding copyright ownership.
1:73a34db:    The ASF licenses this file to you under the Apache License, Version 2.0
1:73a34db:    (the "License"); you may not use this file except in compliance with
1:73a34db:    the License.  You may obtain a copy of the License at
1:73a34db: 
1:73a34db:       http://www.apache.org/licenses/LICENSE-2.0
1:73a34db: 
1:73a34db:    Unless required by applicable law or agreed to in writing, software
1:73a34db:    distributed under the License is distributed on an "AS IS" BASIS,
1:73a34db:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:73a34db:    See the License for the specific language governing permissions and
1:73a34db:    limitations under the License.
1:73a34db: 
1:73a34db:  */
1:73a34db: 
1:73a34db: package org.apache.derby.impl.services.cache;
1:73a34db: 
1:73a34db: import java.util.concurrent.locks.Condition;
1:73a34db: import java.util.concurrent.locks.ReentrantLock;
1:73a34db: import org.apache.derby.iapi.services.cache.Cacheable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:73a34db: 
1:73a34db: /**
1:73a34db:  * Class representing an entry in the cache. It is used by
1:73a34db:  * <code>ConcurrentCache</code>. When a thread invokes any of the methods in
1:a0ab25a:  * this class, except <code>lock()</code>, it must first have called
1:a0ab25a:  * <code>lock()</code> to ensure exclusive access to the entry.
1:a0ab25a:  *
1:a0ab25a:  * <p>
1:a0ab25a:  *
1:a0ab25a:  * When no thread holds the lock on the entry, it must be in one of the
1:a0ab25a:  * following states:
1:a0ab25a:  *
1:a0ab25a:  * <dl>
1:a0ab25a:  *
1:45c4ca4:  * <dt>Uninitialized</dt> <dd>The entry object has just been constructed, but
1:45c4ca4:  * has not yet been initialized. In this state, <code>isValid()</code> returns
1:45c4ca4:  * <code>false</code>, whereas <code>isKept()</code> returns <code>true</code>
1:45c4ca4:  * in order to prevent removal of the entry until it has been initialized.
1:45c4ca4:  * When the entry is in this state, calls to
1:45c4ca4:  * <code>lockWhenIdentityIsSet()</code> will block until
1:45c4ca4:  * <code>settingIdentityComplete()</code> has been called.</dd>
1:a0ab25a:  *
1:a0ab25a:  * <dt>Unkept</dt> <dd>In this state, the entry object contains a reference to
1:a0ab25a:  * a <code>Cacheable</code> and the keep count is zero. <code>isValid()</code>
1:a0ab25a:  * returns <code>true</code> and <code>isKept()</code> returns
1:a0ab25a:  * <code>false</code> in this state. <code>getCacheable()</code> returns a
1:a0ab25a:  * non-null value.<dd>
1:a0ab25a:  *
1:a0ab25a:  * <dt>Kept</dt> <dd>Same as the unkept state, except that the keep count is
1:a0ab25a:  * positive and <code>isKept()</code> returns <code>true</code>.</dd>
1:a0ab25a:  *
1:a0ab25a:  * <dt>Removed</dt> <dd>The entry has been removed from the cache. In this
1:a0ab25a:  * state, <code>isValid()</code> and <code>isKept()</code> return
2:a0ab25a:  * <code>false</code>, and <code>getCacheable()</code> returns
1:a0ab25a:  * <code>null</code>. When an entry has entered the removed state, it cannot be
1:a0ab25a:  * transitioned back to any of the other states.</dd>
1:a0ab25a:  *
1:a0ab25a:  * </dl>
1:a0ab25a:  *
1:a0ab25a:  * <p>
1:a0ab25a:  *
1:a0ab25a:  * To prevent deadlocks, each thread should normally lock only one entry at a
1:a0ab25a:  * time. In some cases it is legitimate to hold the lock on two entries, for
1:a0ab25a:  * instance if an entry must be evicted to make room for a new entry. If this
1:a0ab25a:  * is the case, exactly one of the two entries must be in the uninitialized
1:a0ab25a:  * state, and the uninitialized entry must be locked before the lock on the
1:a0ab25a:  * other entry can be requested.
1:73a34db:  */
1:73a34db: final class CacheEntry {
1:73a34db:     /** Mutex which guards the internal state of the entry. */
1:73a34db:     private final ReentrantLock mutex = new ReentrantLock();
1:7a816cb: 
1:73a34db:     /**
1:73a34db:      * The cached object. If it is null, it means that the entry is invalid
1:73a34db:      * (either uninitialized or removed).
1:73a34db:      */
1:73a34db:     private Cacheable cacheable;
1:7a816cb: 
1:73a34db:     /** How many threads are currently keeping this entry. */
1:73a34db:     private int keepCount;
1:7a816cb: 
1:73a34db:     /**
1:73a34db:      * Condition variable used to notify a thread that it is allowed to remove
1:73a34db:      * the entry from the cache. If it is null, there is no thread waiting for
1:73a34db:      * the entry to be unkept.
1:73a34db:      */
1:73a34db:     private Condition forRemove;
1:73a34db: 
1:73a34db:     /**
1:45c4ca4:      * Condition variable used to notify a thread that the setting of this
1:45c4ca4:      * entry's identity is complete. This variable is non-null when the object
1:45c4ca4:      * is created, and will be set to null when the identity has been set.
1:45c4ca4:      * @see #settingIdentityComplete()
1:45c4ca4:      */
1:45c4ca4:     private Condition settingIdentity = mutex.newCondition();
1:45c4ca4: 
1:45c4ca4:     /**
1:7a816cb:      * Callback object used to notify the replacement algorithm about events on
1:7a816cb:      * the cached objects (like accesses and requests for removal).
1:7a816cb:      */
1:7a816cb:     private ReplacementPolicy.Callback callback;
1:7a816cb: 
1:7a816cb:     /**
1:73a34db:      * Block until the current thread is granted exclusive access to the entry.
1:73a34db:      */
1:73a34db:     void lock() {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(!mutex.isHeldByCurrentThread());
1:73a34db:         }
1:73a34db:         mutex.lock();
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:45c4ca4:      * Block until this entry's cacheable has been initialized (that is, until
1:086dee2:      * {@code settingIdentityComplete()} has been called on this object). If
1:086dee2:      * the cacheable has been initialized before this method is called, it will
1:086dee2:      * return immediately. The entry must have been locked for exclusive access
1:086dee2:      * before this method is called. If the method needs to wait, it will
1:086dee2:      * release the lock and reobtain it when it wakes up again.
1:45c4ca4:      */
1:086dee2:     void waitUntilIdentityIsSet() {
1:086dee2:         if (SanityManager.DEBUG) {
1:086dee2:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:086dee2:         }
1:45c4ca4:         while (settingIdentity != null) {
1:45c4ca4:             settingIdentity.awaitUninterruptibly();
1:45c4ca4:         }
1:45c4ca4:     }
1:45c4ca4: 
1:45c4ca4:     /**
1:73a34db:      * Give up exclusive access.
1:73a34db:      */
1:73a34db:     void unlock() {
1:73a34db:         mutex.unlock();
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:45c4ca4:      * Notify this entry that the initialization of its cacheable has been
1:45c4ca4:      * completed. This method should be called after
1:45c4ca4:      * <code>Cacheable.setIdentity()</code> or
1:45c4ca4:      * <code>Cacheable.createIdentity()</code> has been called.
1:45c4ca4:      */
1:45c4ca4:     void settingIdentityComplete() {
1:45c4ca4:         if (SanityManager.DEBUG) {
1:45c4ca4:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:45c4ca4:         }
1:45c4ca4:         settingIdentity.signalAll();
1:45c4ca4:         settingIdentity = null;
1:45c4ca4:     }
1:45c4ca4: 
1:45c4ca4:     /**
1:73a34db:      * Increase the keep count for this entry. An entry which is kept cannot be
1:73a34db:      * removed from the cache.
1:651fa21:      *
1:651fa21:      * @param accessed if <code>true</code>, notify the entry's callback object
1:651fa21:      * that it has been accessed (normally because of calls to create, find or
1:651fa21:      * findCached); otherwise, don't notify the callback object
1:73a34db:      */
1:651fa21:     void keep(boolean accessed) {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:73a34db:         }
1:73a34db:         keepCount++;
1:651fa21:         if (accessed) {
1:651fa21:             callback.access();
1:651fa21:         }
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:73a34db:      * Decrement the keep count for this entry. An entry cannot be removed from
1:73a34db:      * the cache until its keep count is zero.
1:73a34db:      */
1:73a34db:     void unkeep() {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(isKept());
1:73a34db:         }
1:73a34db:         keepCount--;
1:73a34db:         if (forRemove != null && keepCount == 1) {
1:73a34db:             // This entry is only kept by the thread waiting in
1:73a34db:             // unkeepForRemove(). Signal that the entry can be removed.
1:73a34db:             forRemove.signal();
1:73a34db:         }
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:73a34db:      * Check whether or not this entry is kept.
1:73a34db:      *
1:73a34db:      * @return <code>true</code> if the object is kept
1:73a34db:      */
1:73a34db:     boolean isKept() {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:73a34db:             SanityManager.ASSERT(keepCount >= 0);
1:73a34db:         }
1:73a34db:         return keepCount > 0;
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:73a34db:      * Unkeep the entry and wait until no other thread is keeping it. This
1:73a34db:      * method is used when a thread requests the removal of the entry. As
1:73a34db:      * defined by the contract of <code>CacheManager.remove()</code>, it is the
1:73a34db:      * responsibility of the caller to ensure that only a single thread
1:73a34db:      * executes this method on an object.
1:73a34db:      *
1:73a34db:      * @see org.apache.derby.iapi.services.cache.CacheManager#remove
1:73a34db:      */
1:73a34db:     void unkeepForRemove() {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(isKept());
1:73a34db:             SanityManager.ASSERT(forRemove == null);
1:73a34db:         }
1:73a34db:         if (keepCount > 1) {
1:73a34db:             forRemove = mutex.newCondition();
1:73a34db:             while (keepCount > 1) {
1:73a34db:                 forRemove.awaitUninterruptibly();
1:73a34db:             }
1:73a34db:             forRemove = null;
1:73a34db:         }
1:73a34db:         keepCount--;
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:73a34db:      * Set the cached object held by this entry.
1:73a34db:      *
1:73a34db:      * @param c a cacheable, or <code>null</code> if the entry is about to be
1:73a34db:      * removed
1:73a34db:      */
1:73a34db:     void setCacheable(Cacheable c) {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:73a34db:         }
1:73a34db:         cacheable = c;
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:73a34db:      * Return the cached object held by this entry.
1:73a34db:      *
1:73a34db:      * @return the cached object in this entry
1:73a34db:      */
1:73a34db:     Cacheable getCacheable() {
1:73a34db:         if (SanityManager.DEBUG) {
1:73a34db:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:73a34db:         }
1:73a34db:         return cacheable;
1:73a34db:     }
1:73a34db: 
1:73a34db:     /**
1:45c4ca4:      * Check whether this entry holds a valid object. That is, it must hold
1:45c4ca4:      * a non-null <code>Cacheable</code> and have completed setting its
1:45c4ca4:      * identity.
1:73a34db:      *
1:73a34db:      * @return <code>true</code> if the entry holds a valid object
1:73a34db:      */
1:73a34db:     boolean isValid() {
1:45c4ca4:         if (SanityManager.DEBUG) {
1:45c4ca4:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:45c4ca4:         }
1:45c4ca4:         return (settingIdentity == null) && (cacheable != null);
1:73a34db:     }
1:7a816cb: 
1:7a816cb:     /**
1:7a816cb:      * Set the callback object used to notify the replacement algorithm about
1:7a816cb:      * actions performed on the cached object.
1:7a816cb:      *
1:7a816cb:      * @param cb the callback object
1:7a816cb:      */
1:7a816cb:     void setCallback(ReplacementPolicy.Callback cb) {
1:7a816cb:         if (SanityManager.DEBUG) {
1:7a816cb:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:7a816cb:         }
1:7a816cb:         callback = cb;
1:7a816cb:     }
1:7a816cb: 
1:7a816cb:     /**
1:7a816cb:      * Clear this entry and notify the replacement algorithm that the
1:7a816cb:      * <code>Cacheable</code> can be reused.
1:7a816cb:      */
1:7a816cb:     void free() {
1:7a816cb:         if (SanityManager.DEBUG) {
1:7a816cb:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:7a816cb:         }
1:7a816cb:         if (callback != null) {
1:7a816cb:             // The entry was inserted into the ReplacementPolicy before
1:7a816cb:             // removal. Now we need to mark it as free.
1:7a816cb:             callback.free();
1:7a816cb:         }
1:7a816cb:         cacheable = null;
1:7a816cb:     }
1:73a34db: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:086dee2
/////////////////////////////////////////////////////////////////////////
1:      * {@code settingIdentityComplete()} has been called on this object). If
1:      * the cacheable has been initialized before this method is called, it will
1:      * return immediately. The entry must have been locked for exclusive access
1:      * before this method is called. If the method needs to wait, it will
1:      * release the lock and reobtain it when it wakes up again.
1:     void waitUntilIdentityIsSet() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
commit:45c4ca4
/////////////////////////////////////////////////////////////////////////
1:  * <dt>Uninitialized</dt> <dd>The entry object has just been constructed, but
1:  * has not yet been initialized. In this state, <code>isValid()</code> returns
1:  * <code>false</code>, whereas <code>isKept()</code> returns <code>true</code>
1:  * in order to prevent removal of the entry until it has been initialized.
1:  * When the entry is in this state, calls to
1:  * <code>lockWhenIdentityIsSet()</code> will block until
1:  * <code>settingIdentityComplete()</code> has been called.</dd>
/////////////////////////////////////////////////////////////////////////
1:      * Condition variable used to notify a thread that the setting of this
1:      * entry's identity is complete. This variable is non-null when the object
1:      * is created, and will be set to null when the identity has been set.
1:      * @see #settingIdentityComplete()
1:      */
1:     private Condition settingIdentity = mutex.newCondition();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Block until this entry's cacheable has been initialized (that is, until
0:      * <code>settingIdentityComplete()</code> has been called on this object)
0:      * and the current thread is granted exclusive access to the entry.
1:      */
0:     void lockWhenIdentityIsSet() {
0:         lock();
1:         while (settingIdentity != null) {
1:             settingIdentity.awaitUninterruptibly();
1:         }
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Notify this entry that the initialization of its cacheable has been
1:      * completed. This method should be called after
1:      * <code>Cacheable.setIdentity()</code> or
1:      * <code>Cacheable.createIdentity()</code> has been called.
1:      */
1:     void settingIdentityComplete() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         settingIdentity.signalAll();
1:         settingIdentity = null;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Check whether this entry holds a valid object. That is, it must hold
1:      * a non-null <code>Cacheable</code> and have completed setting its
1:      * identity.
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         return (settingIdentity == null) && (cacheable != null);
commit:651fa21
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param accessed if <code>true</code>, notify the entry's callback object
1:      * that it has been accessed (normally because of calls to create, find or
1:      * findCached); otherwise, don't notify the callback object
1:     void keep(boolean accessed) {
1:         if (accessed) {
1:             callback.access();
1:         }
commit:7a816cb
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Callback object used to notify the replacement algorithm about events on
1:      * the cached objects (like accesses and requests for removal).
1:      */
1:     private ReplacementPolicy.Callback callback;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:         callback.access();
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set the callback object used to notify the replacement algorithm about
1:      * actions performed on the cached object.
1:      *
1:      * @param cb the callback object
1:      */
1:     void setCallback(ReplacementPolicy.Callback cb) {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         callback = cb;
1:     }
1: 
1:     /**
1:      * Clear this entry and notify the replacement algorithm that the
1:      * <code>Cacheable</code> can be reused.
1:      */
1:     void free() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         if (callback != null) {
1:             // The entry was inserted into the ReplacementPolicy before
1:             // removal. Now we need to mark it as free.
1:             callback.free();
1:         }
1:         cacheable = null;
1:     }
commit:a0ab25a
/////////////////////////////////////////////////////////////////////////
1:  * this class, except <code>lock()</code>, it must first have called
1:  * <code>lock()</code> to ensure exclusive access to the entry.
1:  *
1:  * <p>
1:  *
1:  * When no thread holds the lock on the entry, it must be in one of the
1:  * following states:
1:  *
1:  * <dl>
1:  *
0:  * <dt>Uninitialized</dt> <dd>The entry object has just been constructed. In
0:  * this state, <code>isValid()</code> and <code>isKept()</code> return
1:  * <code>false</code>, and <code>getCacheable()</code> returns
0:  * <code>null</code>. As long as the entry is in this state, the reference to
0:  * the object should not be made available to other threads than the one that
0:  * created it, since there is no way for other threads to see the difference
0:  * between an uninitialized entry and a removed entry.</dd>
1:  *
1:  * <dt>Unkept</dt> <dd>In this state, the entry object contains a reference to
1:  * a <code>Cacheable</code> and the keep count is zero. <code>isValid()</code>
1:  * returns <code>true</code> and <code>isKept()</code> returns
1:  * <code>false</code> in this state. <code>getCacheable()</code> returns a
1:  * non-null value.<dd>
1:  *
1:  * <dt>Kept</dt> <dd>Same as the unkept state, except that the keep count is
1:  * positive and <code>isKept()</code> returns <code>true</code>.</dd>
1:  *
1:  * <dt>Removed</dt> <dd>The entry has been removed from the cache. In this
1:  * state, <code>isValid()</code> and <code>isKept()</code> return
1:  * <code>false</code>, and <code>getCacheable()</code> returns
1:  * <code>null</code>. When an entry has entered the removed state, it cannot be
1:  * transitioned back to any of the other states.</dd>
1:  *
1:  * </dl>
1:  *
1:  * <p>
1:  *
1:  * To prevent deadlocks, each thread should normally lock only one entry at a
1:  * time. In some cases it is legitimate to hold the lock on two entries, for
1:  * instance if an entry must be evicted to make room for a new entry. If this
1:  * is the case, exactly one of the two entries must be in the uninitialized
1:  * state, and the uninitialized entry must be locked before the lock on the
1:  * other entry can be requested.
commit:73a34db
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.cache.CacheEntry
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.cache;
1: 
1: import java.util.concurrent.locks.Condition;
1: import java.util.concurrent.locks.ReentrantLock;
1: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * Class representing an entry in the cache. It is used by
1:  * <code>ConcurrentCache</code>. When a thread invokes any of the methods in
0:  * this class, except <code>lock()</code>, it must have called
0:  * <code>lock()</code> to ensure exclusive access to the entry. No thread
0:  * should ever lock more than one entry in order to prevent deadlocks.
1:  */
1: final class CacheEntry {
1:     /** Mutex which guards the internal state of the entry. */
1:     private final ReentrantLock mutex = new ReentrantLock();
1:     /**
1:      * The cached object. If it is null, it means that the entry is invalid
1:      * (either uninitialized or removed).
1:      */
1:     private Cacheable cacheable;
1:     /** How many threads are currently keeping this entry. */
1:     private int keepCount;
1:     /**
1:      * Condition variable used to notify a thread that it is allowed to remove
1:      * the entry from the cache. If it is null, there is no thread waiting for
1:      * the entry to be unkept.
1:      */
1:     private Condition forRemove;
1: 
1:     /**
1:      * Block until the current thread is granted exclusive access to the entry.
1:      */
1:     void lock() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(!mutex.isHeldByCurrentThread());
1:         }
1:         mutex.lock();
1:     }
1: 
1:     /**
1:      * Give up exclusive access.
1:      */
1:     void unlock() {
1:         mutex.unlock();
1:     }
1: 
1:     /**
1:      * Increase the keep count for this entry. An entry which is kept cannot be
1:      * removed from the cache.
1:      */
0:     void keep() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         keepCount++;
1:     }
1: 
1:     /**
1:      * Decrement the keep count for this entry. An entry cannot be removed from
1:      * the cache until its keep count is zero.
1:      */
1:     void unkeep() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(isKept());
1:         }
1:         keepCount--;
1:         if (forRemove != null && keepCount == 1) {
1:             // This entry is only kept by the thread waiting in
1:             // unkeepForRemove(). Signal that the entry can be removed.
1:             forRemove.signal();
1:         }
1:     }
1: 
1:     /**
1:      * Check whether or not this entry is kept.
1:      *
1:      * @return <code>true</code> if the object is kept
1:      */
1:     boolean isKept() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:             SanityManager.ASSERT(keepCount >= 0);
1:         }
1:         return keepCount > 0;
1:     }
1: 
1:     /**
1:      * Unkeep the entry and wait until no other thread is keeping it. This
1:      * method is used when a thread requests the removal of the entry. As
1:      * defined by the contract of <code>CacheManager.remove()</code>, it is the
1:      * responsibility of the caller to ensure that only a single thread
1:      * executes this method on an object.
1:      *
1:      * @see org.apache.derby.iapi.services.cache.CacheManager#remove
1:      */
1:     void unkeepForRemove() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(isKept());
1:             SanityManager.ASSERT(forRemove == null);
1:         }
1:         if (keepCount > 1) {
1:             forRemove = mutex.newCondition();
1:             while (keepCount > 1) {
1:                 forRemove.awaitUninterruptibly();
1:             }
1:             forRemove = null;
1:         }
1:         keepCount--;
1:     }
1: 
1:     /**
1:      * Set the cached object held by this entry.
1:      *
1:      * @param c a cacheable, or <code>null</code> if the entry is about to be
1:      * removed
1:      */
1:     void setCacheable(Cacheable c) {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         cacheable = c;
1:     }
1: 
1:     /**
1:      * Return the cached object held by this entry.
1:      *
1:      * @return the cached object in this entry
1:      */
1:     Cacheable getCacheable() {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(mutex.isHeldByCurrentThread());
1:         }
1:         return cacheable;
1:     }
1: 
1:     /**
0:      * Check whether this entry holds a valid object.
1:      *
1:      * @return <code>true</code> if the entry holds a valid object
1:      */
1:     boolean isValid() {
0:         return getCacheable() != null;
1:     }
1: }
============================================================================