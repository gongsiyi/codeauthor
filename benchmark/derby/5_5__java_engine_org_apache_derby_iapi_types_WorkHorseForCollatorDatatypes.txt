1:3a2db6b: /*
7:3a2db6b: 
1:3a2db6b:    Derby - Class org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes
1:3a2db6b:  
1:3a2db6b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3a2db6b:    contributor license agreements.  See the NOTICE file distributed with
1:3a2db6b:    this work for additional information regarding copyright ownership.
1:3a2db6b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:3a2db6b:    (the "License"); you may not use this file except in compliance with
1:3a2db6b:    the License.  You may obtain a copy of the License at
1:3a2db6b: 
1:3a2db6b:       http://www.apache.org/licenses/LICENSE-2.0
1:3a2db6b: 
1:3a2db6b:    Unless required by applicable law or agreed to in writing, software
1:3a2db6b:    distributed under the License is distributed on an "AS IS" BASIS,
1:3a2db6b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a2db6b:    See the License for the specific language governing permissions and
1:3a2db6b:    limitations under the License.
1:3a2db6b: 
6:3a2db6b:  */
1:3841b98: 
1:3a2db6b: package org.apache.derby.iapi.types;
1:3a2db6b: 
1:3841b98: import org.apache.derby.iapi.reference.SQLState;
1:3a2db6b: 
1:3a2db6b: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3a2db6b: 
1:3a2db6b: import java.text.CollationElementIterator;
1:3841b98: import java.text.CollationKey;
1:3a2db6b: import java.text.RuleBasedCollator;
1:3a2db6b: 
5:3a2db6b: /**
1:3a2db6b:  * WorkHorseForCollatorDatatypes class holds on to RuleBasedCollator,
1:3a2db6b:  * and the base SQLChar object for the collation sensitive SQLChar,
1:3a2db6b:  * SQLVarchar, SQLLongvarchar and SQLClob. This class uses RuleBasedCollator
1:3a2db6b:  * and SQLChar object in the collation sensitive methods to do the comparison. 
1:3a2db6b:  * The reason for encapsulating this here is that the collation version of 
1:3a2db6b:  * SQLChar, SQLVarchar, SQLLongvarchar and SQLClob do not all have to duplicate  
1:3a2db6b:  * the code for collation sensitive methods. Instead, they can simply delegate
1:3a2db6b:  * the work to methods defined in this class. 
1:3a2db6b:  */
1:403684d: final class WorkHorseForCollatorDatatypes  
9:3a2db6b: {
1:3a2db6b: 	/** 
1:3a2db6b: 	 * Use this object for collation on character datatype. This collator
1:3a2db6b: 	 * object is passed as a parameter to the constructor.
1:3a2db6b: 	 */
1:403684d: 	private RuleBasedCollator collatorForCharacterDatatypes;
1:3a2db6b: 	/**
1:3a2db6b: 	 * collatorForCharacterDatatypes will be used on this SQLChar to determine
1:3a2db6b: 	 * collationElementsForString. The collationElementsForString is used by
1:3a2db6b: 	 * the like method to do Collator specific comparison.
1:3a2db6b: 	 * This SQLChar object is passed as a parameter to the constructor.
1:3a2db6b: 	 */
1:403684d: 	private SQLChar stringData;
1:3a2db6b: 
1:403684d: 	WorkHorseForCollatorDatatypes(
1:3a2db6b: 			RuleBasedCollator collatorForCharacterDatatypes,
1:3a2db6b: 			SQLChar stringData)
1:3a2db6b: 	{
1:3a2db6b: 		this.collatorForCharacterDatatypes = collatorForCharacterDatatypes;
1:3a2db6b: 		this.stringData = stringData;
9:3a2db6b: 	}
1:3841b98: 	
1:dbfbecb: 	/** @see SQLChar#stringCompare(SQLChar, SQLChar) */
1:403684d: 	int stringCompare(SQLChar str1, SQLChar str2)
1:3841b98: 	throws StandardException
1:3841b98: 	{
1:7076568: 		CollationKey ckey1 = str1.getCollationKey();
1:3841b98: 		CollationKey ckey2 = str2.getCollationKey();
1:3841b98: 		
1:3841b98: 		/*
1:3841b98: 		** By convention, nulls sort High, and null == null
1:3841b98: 		*/
1:3841b98: 		if (ckey1 == null || ckey2 == null)
1:3841b98: 		{
1:3841b98: 			if (ckey1 != null)	// str2 == null
1:3841b98: 				return -1;
1:3841b98: 			if (ckey2 != null)	// this == null
1:3841b98: 				return 1;
1:3841b98: 			return 0;			// both == null
1:3841b98: 		}
1:3a2db6b: 
1:3841b98: 		return ckey1.compareTo(ckey2);
1:3841b98: 	}
1:3841b98: 	
1:3a2db6b: 	/**
1:3a2db6b: 	 * This method implements the like function for char (with no escape value).
1:3a2db6b: 	 * The difference in this method and the same method in SQLChar is that 
1:3a2db6b: 	 * here we use special Collator object to do the comparison rather than
1:3a2db6b: 	 * using the Collator object associated with the default jvm locale.
3:3a2db6b: 	 *
1:3a2db6b: 	 * @param pattern		The pattern to use
1:3a2db6b: 	 *
1:3a2db6b: 	 * @return	A SQL boolean value telling whether the first operand is
1:3a2db6b: 	 *			like the second operand
1:3a2db6b: 	 *
1:3a2db6b: 	 * @exception StandardException		Thrown on error
1:3a2db6b: 	 */
1:403684d: 	BooleanDataValue like(DataValueDescriptor pattern)
2:3a2db6b: 								throws StandardException
1:3a2db6b: 	{
1:3a2db6b: 		Boolean likeResult;
1:3a2db6b: 
2:3a2db6b: 		if (SanityManager.DEBUG)
1:3a2db6b: 			SanityManager.ASSERT(
1:3a2db6b: 				pattern instanceof CollationElementsInterface,
1:3a2db6b: 				"Both the operands must be instances of CollationElementsInterface");
1:f148f1f: 		likeResult = Like.like(stringData.getCharArray(), 
1:f148f1f: 				stringData.getLength(), 
1:f148f1f: 				((SQLChar)pattern).getCharArray(), 
1:f148f1f: 				pattern.getLength(), 
1:f148f1f: 				null, 
1:f148f1f: 				0,
1:3a2db6b: 				collatorForCharacterDatatypes);
1:3a2db6b: 
1:f148f1f: 		return SQLBoolean.truthValue(stringData ,
1:3a2db6b: 									 pattern,
1:3a2db6b: 									 likeResult);
1:3a2db6b: 	}
1:3841b98: 	
1:3841b98: 	/**
1:3841b98: 	 * This method implements the like function for char with an escape value.
1:3841b98: 	 * 
1:3841b98: 	 * @param pattern		The pattern to use
1:3841b98: 	 * 
1:3841b98: 	 * @return	A SQL boolean value telling whether the first operand is
1:3841b98: 	 * 			like the second operand
1:3841b98: 	 *
1:3841b98: 	 * @exception StandardException		Thrown on error
1:3841b98: 	 */
1:403684d: 	BooleanDataValue like(DataValueDescriptor pattern, 
1:3841b98: 			DataValueDescriptor escape)	throws StandardException
1:3841b98: 	{
1:3841b98: 		Boolean likeResult;
1:3841b98: 
1:3841b98: 		if (SanityManager.DEBUG)
1:3841b98: 			SanityManager.ASSERT(
1:3841b98: 							 pattern instanceof CollationElementsInterface &&
1:3841b98: 							 escape instanceof CollationElementsInterface,
1:3841b98: 			"All three operands must be instances of CollationElementsInterface");
1:3841b98: 		
1:3841b98: 		// ANSI states a null escape yields 'unknown' results 
1:3841b98: 		//
1:3841b98: 		// This method is only called when we have an escape clause, so this 
1:3841b98: 		// test is valid
1:3841b98: 
1:3841b98: 		if (escape.isNull())
1:3841b98: 		{
1:3841b98: 			throw StandardException.newException(SQLState.LANG_ESCAPE_IS_NULL);
1:3841b98: 		}
1:3841b98: 
1:3841b98: 		CollationElementsInterface escapeCharacter = (CollationElementsInterface) escape;
1:3841b98: 
1:35d6658:         if (escape.getLength() != 1 ||
1:35d6658:                 !escapeCharacter.hasSingleCollationElement())
1:3841b98: 		{
1:3841b98: 			throw StandardException.newException(SQLState.LANG_INVALID_ESCAPE_CHARACTER,
1:4a4b0a8: 					escapeCharacter.toString());
1:3841b98: 		}
1:f148f1f: 		likeResult = Like.like(stringData.getCharArray(), 
1:f148f1f: 				stringData.getLength(), 
1:f148f1f: 				((SQLChar)pattern).getCharArray(), 
1:f148f1f: 				pattern.getLength(), 
1:f148f1f: 				((SQLChar)escape).getCharArray(), 
1:f148f1f: 				escape.getLength(),
1:3841b98: 				collatorForCharacterDatatypes);
1:3841b98: 
1:3841b98: 		return SQLBoolean.truthValue(stringData,
1:3841b98: 								 pattern,
1:3841b98: 								 likeResult);
1:3841b98: 	}
1:3a2db6b: 
1:3a2db6b: 	/**
1:3a2db6b: 	 * Get the RuleBasedCollator which is getting used for collation sensitive
1:3a2db6b: 	 * methods. 
1:3a2db6b: 	 */
1:403684d: 	RuleBasedCollator getCollatorForCollation()
1:3a2db6b: 	{
1:3a2db6b: 		return(collatorForCharacterDatatypes);
1:3a2db6b: 	}
1:3a2db6b: 
1:cf42729:     /**
1:cf42729:      * Check if the string consists of a single collation element.
1:cf42729:      * @return {@code true} iff it's a single collation element
1:cf42729:      * @see CollationElementsInterface#hasSingleCollationElement()
1:cf42729:      */
1:cf42729:     boolean hasSingleCollationElement() throws StandardException {
1:cf42729:         if (stringData.isNull()) {
1:cf42729:             return false;
1:cf42729:         }
1:3a2db6b: 
1:cf42729:         CollationElementIterator cei =
1:f18b8d0:             collatorForCharacterDatatypes.getCollationElementIterator(
1:3a2db6b:                 stringData.getString());
1:3a2db6b: 
1:cf42729:         // First call next() to see that there is at least one element, and
1:cf42729:         // then call next() to see that there is no more than one element.
1:cf42729:         return cei.next() != CollationElementIterator.NULLORDER &&
1:cf42729:                 cei.next() == CollationElementIterator.NULLORDER;
1:cf42729:     }
1:3a2db6b: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:35d6658
/////////////////////////////////////////////////////////////////////////
1:         if (escape.getLength() != 1 ||
1:                 !escapeCharacter.hasSingleCollationElement())
commit:cf42729
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		if (!escapeCharacter.hasSingleCollationElement())
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check if the string consists of a single collation element.
1:      * @return {@code true} iff it's a single collation element
1:      * @see CollationElementsInterface#hasSingleCollationElement()
1:      */
1:     boolean hasSingleCollationElement() throws StandardException {
1:         if (stringData.isNull()) {
1:             return false;
1:         }
1:         CollationElementIterator cei =
1:         // First call next() to see that there is at least one element, and
1:         // then call next() to see that there is no more than one element.
1:         return cei.next() != CollationElementIterator.NULLORDER &&
1:                 cei.next() == CollationElementIterator.NULLORDER;
1:     }
commit:4a4b0a8
/////////////////////////////////////////////////////////////////////////
1: 					escapeCharacter.toString());
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f148f1f
/////////////////////////////////////////////////////////////////////////
1: 		likeResult = Like.like(stringData.getCharArray(), 
1: 				stringData.getLength(), 
1: 				((SQLChar)pattern).getCharArray(), 
1: 				pattern.getLength(), 
1: 				null, 
1: 				0,
1: 		return SQLBoolean.truthValue(stringData ,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		likeResult = Like.like(stringData.getCharArray(), 
1: 				stringData.getLength(), 
1: 				((SQLChar)pattern).getCharArray(), 
1: 				pattern.getLength(), 
1: 				((SQLChar)escape).getCharArray(), 
1: 				escape.getLength(),
commit:dbfbecb
/////////////////////////////////////////////////////////////////////////
1: 	/** @see SQLChar#stringCompare(SQLChar, SQLChar) */
commit:7076568
/////////////////////////////////////////////////////////////////////////
0: 	protected int stringCompare(SQLChar str1, SQLChar str2)
1: 		CollationKey ckey1 = str1.getCollationKey();
commit:3841b98
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import java.text.CollationKey;
/////////////////////////////////////////////////////////////////////////
0: 	// For null strings, cKey = null.
0: 	private CollationKey cKey; 
1: 
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	/** @see SQLChar.stringCompare(SQLChar, SQLChar) */
0: 	protected int stringCompare(SQLChar str2)
1: 	throws StandardException
1: 	{
0: 		CollationKey ckey1 = stringData.getCollationKey();
1: 		CollationKey ckey2 = str2.getCollationKey();
1: 		
1: 		/*
1: 		** By convention, nulls sort High, and null == null
1: 		*/
1: 		if (ckey1 == null || ckey2 == null)
1: 		{
1: 			if (ckey1 != null)	// str2 == null
1: 				return -1;
1: 			if (ckey2 != null)	// this == null
1: 				return 1;
1: 			return 0;			// both == null
1: 		}
1: 		return ckey1.compareTo(ckey2);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * This method implements the like function for char with an escape value.
1: 	 * 
1: 	 * @param pattern		The pattern to use
1: 	 * 
1: 	 * @return	A SQL boolean value telling whether the first operand is
1: 	 * 			like the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public BooleanDataValue like(DataValueDescriptor pattern, 
1: 			DataValueDescriptor escape)	throws StandardException
1: 	{
1: 		Boolean likeResult;
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(
1: 							 pattern instanceof CollationElementsInterface &&
1: 							 escape instanceof CollationElementsInterface,
1: 			"All three operands must be instances of CollationElementsInterface");
1: 		
1: 		// ANSI states a null escape yields 'unknown' results 
1: 		//
1: 		// This method is only called when we have an escape clause, so this 
1: 		// test is valid
1: 
1: 		if (escape.isNull())
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_ESCAPE_IS_NULL);
1: 		}
1: 
0: 		CollationElementsInterface patternToCheck = (CollationElementsInterface) pattern;
1: 		CollationElementsInterface escapeCharacter = (CollationElementsInterface) escape;
1: 
0: 		if (escapeCharacter.getCollationElementsForString() != null && 
0: 				(escapeCharacter.getCountOfCollationElements() != 1))
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_INVALID_ESCAPE_CHARACTER,
0: 					new String(escapeCharacter.toString()));
1: 		}
0: 		likeResult = Like.like(
0: 				getCollationElementsForString(),
0: 				getCountOfCollationElements(),
0: 				patternToCheck.getCollationElementsForString(),
0: 				patternToCheck.getCountOfCollationElements(),
0: 				escapeCharacter.getCollationElementsForString(),
0: 				escapeCharacter.getCountOfCollationElements(),
1: 				collatorForCharacterDatatypes);
1: 
1: 		return SQLBoolean.truthValue(stringData,
1: 								 pattern,
1: 								 likeResult);
1: 	}
commit:3a2db6b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.text.CollationElementIterator;
1: import java.text.RuleBasedCollator;
1: 
1: /**
1:  * WorkHorseForCollatorDatatypes class holds on to RuleBasedCollator,
1:  * and the base SQLChar object for the collation sensitive SQLChar,
1:  * SQLVarchar, SQLLongvarchar and SQLClob. This class uses RuleBasedCollator
1:  * and SQLChar object in the collation sensitive methods to do the comparison. 
1:  * The reason for encapsulating this here is that the collation version of 
1:  * SQLChar, SQLVarchar, SQLLongvarchar and SQLClob do not all have to duplicate  
1:  * the code for collation sensitive methods. Instead, they can simply delegate
1:  * the work to methods defined in this class. 
1:  */
0: public class WorkHorseForCollatorDatatypes  
1: {
1: 	/** 
1: 	 * Use this object for collation on character datatype. This collator
1: 	 * object is passed as a parameter to the constructor.
1: 	 */
0: 	RuleBasedCollator collatorForCharacterDatatypes;
1: 	/**
1: 	 * collatorForCharacterDatatypes will be used on this SQLChar to determine
1: 	 * collationElementsForString. The collationElementsForString is used by
1: 	 * the like method to do Collator specific comparison.
1: 	 * This SQLChar object is passed as a parameter to the constructor.
1: 	 */
0: 	SQLChar stringData;
1: 	/**
0: 	 * Following is the array holding a series of collation elements for the
0: 	 * string. It will be used in the like method. This gets initialized when
0: 	 * the like method is first invoked. 
1: 	 */
0: 	private int[]	collationElementsForString;
1: 	/** 
0: 	 * Number of valid collation elements in the array above. Note that this 
0: 	 * might be smaller than the actual size of the array above. Gets 
0: 	 * initialized when the like method is first invoked.
1: 	 */
0: 	private int		countOfCollationElements;
1: 
0: 	public WorkHorseForCollatorDatatypes(
1: 			RuleBasedCollator collatorForCharacterDatatypes,
1: 			SQLChar stringData)
1: 	{
1: 		this.collatorForCharacterDatatypes = collatorForCharacterDatatypes;
1: 		this.stringData = stringData;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the like function for char (with no escape value).
1: 	 * The difference in this method and the same method in SQLChar is that 
1: 	 * here we use special Collator object to do the comparison rather than
1: 	 * using the Collator object associated with the default jvm locale.
1: 	 *
1: 	 * @param pattern		The pattern to use
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is
1: 	 *			like the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public BooleanDataValue like(DataValueDescriptor pattern)
1: 								throws StandardException
1: 	{
1: 		Boolean likeResult;
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(
1: 				pattern instanceof CollationElementsInterface,
1: 				"Both the operands must be instances of CollationElementsInterface");
0: 		CollationElementsInterface patternToCheck = (CollationElementsInterface) pattern;
0: 		likeResult = Like.like(
0: 				getCollationElementsForString(),
0: 				getCountOfCollationElements(),
0: 				patternToCheck.getCollationElementsForString(),
0: 				patternToCheck.getCountOfCollationElements(),
1: 				collatorForCharacterDatatypes);
1: 
0: 		return SQLBoolean.truthValue(stringData,
1: 									 pattern,
1: 									 likeResult);
1: 	}
1: 
1: 	/**
1: 	 * Get the RuleBasedCollator which is getting used for collation sensitive
1: 	 * methods. 
1: 	 */
0: 	protected RuleBasedCollator getCollatorForCollation()
1: 	{
1: 		return(collatorForCharacterDatatypes);
1: 	}
1: 
1: 	/**
0: 	 * This method returns the count of collation elements for SQLChar object.
0: 	 * It method will return the correct value only if method   
0: 	 * getCollationElementsForString has been called previously on the SQLChar
0: 	 * object. 
1: 	 *
0: 	 * @return count of collation elements for this instance of CollatorSQLChar
1: 	 */
0: 	protected int getCountOfCollationElements()
1: 	{
0: 		return countOfCollationElements;
1: 	}
1: 
1: 	/**
0: 	 * This method translates the string into a series of collation elements.
0: 	 * These elements will get used in the like method.
1: 	 * 
0: 	 * @return an array of collation elements for the string
0: 	 * @throws StandardException
1: 	 */
0: 	protected int[] getCollationElementsForString()
1: 		throws StandardException
1: 	{
0: 		if (stringData.isNull())
1: 		{
0: 			return (int[]) null;
1: 		}
1: 
0: 		if (collationElementsForString != null)
1: 		{
0: 			return collationElementsForString;
1: 		}
1: 
0: 		// countOfCollationElements should always be 0 when collationElementsForString is null
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			if (countOfCollationElements != 0)
1: 			{
0: 				SanityManager.THROWASSERT(
0: 					"countOfCollationElements expected to be 0, not " + countOfCollationElements);
1: 			}
1: 		}
1: 
0: 		collationElementsForString = new int[stringData.getLength()];
1: 
0: 		CollationElementIterator cei = collatorForCharacterDatatypes.getCollationElementIterator(
1: 				stringData.getString());
0: 		int nextInt;
0: 		while ((nextInt = cei.next()) != CollationElementIterator.NULLORDER)
1: 		{
0: 			/* Believe it or not, a String might have more
0: 			 * collation elements than characters.
0: 			 * So, we handle that case by increasing the int array
0: 			 * by 5 and copying array elements.
1: 			 */
0: 			if (countOfCollationElements == collationElementsForString.length)
1: 			{
0: 				int[] expandedArray = new int[countOfCollationElements + 5];
0: 				System.arraycopy(collationElementsForString, 0, expandedArray, 
0: 						0, collationElementsForString.length);
0: 				collationElementsForString = expandedArray;
1: 			}
0: 			collationElementsForString[countOfCollationElements++] = nextInt;
1: 		}
1: 
0: 		return collationElementsForString;
1: 	}
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f18b8d0
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:         // Caching of collationElementsForString is not working properly, in 
0:         // order to cache it needs to get invalidated everytime the container
0:         // type's value is changed - through any interface, eg: readExternal, 
0:         // setValue, ...  To get proper behavior, disabling caching, and will
0:         // file a performance enhancement to implement correct caching.
0:         collationElementsForString = null;
0:         countOfCollationElements   = 0;
0: 
0: 
0: 		// countOfCollationElements should always be 0 when 
0:         // collationElementsForString is null
0: 					"countOfCollationElements expected to be 0, not " + 
0:                     countOfCollationElements);
0:         
0: 		CollationElementIterator cei = 
1:             collatorForCharacterDatatypes.getCollationElementIterator(
0:                 stringData.getString());
0: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:403684d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: final class WorkHorseForCollatorDatatypes  
1: 	private RuleBasedCollator collatorForCharacterDatatypes;
1: 	private SQLChar stringData;
/////////////////////////////////////////////////////////////////////////
1: 	WorkHorseForCollatorDatatypes(
/////////////////////////////////////////////////////////////////////////
1: 	int stringCompare(SQLChar str1, SQLChar str2)
/////////////////////////////////////////////////////////////////////////
1: 	BooleanDataValue like(DataValueDescriptor pattern)
/////////////////////////////////////////////////////////////////////////
1: 	BooleanDataValue like(DataValueDescriptor pattern, 
/////////////////////////////////////////////////////////////////////////
1: 	RuleBasedCollator getCollatorForCollation()
/////////////////////////////////////////////////////////////////////////
0: 	int getCountOfCollationElements()
/////////////////////////////////////////////////////////////////////////
0: 	int[] getCollationElementsForString()
============================================================================