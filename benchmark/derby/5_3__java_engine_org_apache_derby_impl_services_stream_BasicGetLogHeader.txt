1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.stream.BasicGetLogHeader
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.stream;
1:eac0369: 
1:6500326: import java.util.Date;
1:eac0369: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Get a header to prepend to a line of output. *
1:eac0369:  * A HeaderPrintWriter requires an object which implements
1:eac0369:  * this interface to construct line headers.
1:eac0369:  *
1:eac0369:  * @see org.apache.derby.iapi.services.stream.HeaderPrintWriter
1:eac0369:  */
1:eac0369: 
1:eac0369: class BasicGetLogHeader implements PrintWriterGetHeader
1:eac0369: {
1:eac0369: 	
1:eac0369: 	private boolean doThreadId;
1:eac0369: 	private boolean doTimeStamp;
1:eac0369: 	private String tag;
1:eac0369: 
1:eac0369: 	/* 
1:eac0369: 	 * STUB: This should take a header template. Check if
1:eac0369: 	 *		 the error message facility provides something.
1:eac0369: 	 *	
1:eac0369: 	 *		 This should be localizable. How?
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a BasicGetLogHeader object.
1:eac0369: 	 * <p>
1:eac0369: 	 * @param doThreadId	true means include the calling thread's
1:eac0369: 	 *							id in the header.
1:eac0369: 	 * @param doTimeStamp	true means include the current time in 
1:eac0369: 	 *							the header.
1:eac0369: 	 * @param tag			A string to prefix the header. null
1:eac0369: 	 *						means don't prefix the header with
1:eac0369: 	 *						a string.
1:eac0369: 	 */
1:eac0369: 	BasicGetLogHeader(boolean doThreadId,
1:eac0369: 				boolean doTimeStamp,
1:eac0369: 				String tag){
1:eac0369: 		this.doThreadId = doThreadId;
1:eac0369: 		this.doTimeStamp = doTimeStamp;
1:eac0369: 		this.tag = tag;
1:eac0369: 	}	
1:eac0369: 	
1:eac0369: 	public String getHeader()
1:eac0369: 	{
1:eac0369: 		StringBuffer header = new StringBuffer(48);
1:eac0369: 
1:eac0369: 		if (tag != null) {
1:eac0369: 			header.append(tag);
1:eac0369: 			header.append(' ');
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (doTimeStamp) {
1:6500326: 			header.append(new Date());
1:eac0369: 			header.append(' ');
1:eac0369: 		}
1:6500326: 
1:eac0369: 		if (doThreadId) {
1:eac0369: 			header.append(Thread.currentThread().toString());
1:eac0369: 			header.append(' ');
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return header.toString();
1:eac0369: 	}
1:eac0369: }
1:eac0369: 	
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6500326
/////////////////////////////////////////////////////////////////////////
1: import java.util.Date;
/////////////////////////////////////////////////////////////////////////
1: 			header.append(new Date());
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.stream.BasicGetLogHeader
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.stream
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.stream;
1: 
1: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
0: import org.apache.derby.iapi.util.CheapDateFormatter;
1: 
1: /**
1:  * Get a header to prepend to a line of output. *
1:  * A HeaderPrintWriter requires an object which implements
1:  * this interface to construct line headers.
1:  *
1:  * @see org.apache.derby.iapi.services.stream.HeaderPrintWriter
1:  */
1: 
1: class BasicGetLogHeader implements PrintWriterGetHeader
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	
1: 	private boolean doThreadId;
1: 	private boolean doTimeStamp;
1: 	private String tag;
1: 
1: 	/* 
1: 	 * STUB: This should take a header template. Check if
1: 	 *		 the error message facility provides something.
1: 	 *	
1: 	 *		 This should be localizable. How?
1: 	 */
1: 	/**
1: 	 * Constructor for a BasicGetLogHeader object.
1: 	 * <p>
1: 	 * @param doThreadId	true means include the calling thread's
1: 	 *							id in the header.
1: 	 * @param doTimeStamp	true means include the current time in 
1: 	 *							the header.
1: 	 * @param tag			A string to prefix the header. null
1: 	 *						means don't prefix the header with
1: 	 *						a string.
1: 	 */
1: 	BasicGetLogHeader(boolean doThreadId,
1: 				boolean doTimeStamp,
1: 				String tag){
1: 		this.doThreadId = doThreadId;
1: 		this.doTimeStamp = doTimeStamp;
1: 		this.tag = tag;
1: 	}	
1: 	
1: 	public String getHeader()
1: 	{
1: 		StringBuffer header = new StringBuffer(48);
1: 
1: 		if (tag != null) {
1: 			header.append(tag);
1: 			header.append(' ');
1: 		}
1: 
1: 		if (doTimeStamp) {
0: 			long currentTime = System.currentTimeMillis();
1: 
0: 			header.append(CheapDateFormatter.formatDate(currentTime));
1: 			header.append(' ');
1: 
1: 		}
1: 		if (doThreadId) {
1: 			header.append(Thread.currentThread().toString());
1: 			header.append(' ');
1: 		}
1: 
1: 		return header.toString();
1: 	}
1: }
1: 	
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.stream
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.stream;
0: 
0: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
0: import org.apache.derby.iapi.util.CheapDateFormatter;
0: 
0: /**
0:  * Get a header to prepend to a line of output. *
0:  * A HeaderPrintWriter requires an object which implements
0:  * this interface to construct line headers.
0:  *
0:  * @see org.apache.derby.iapi.services.stream.HeaderPrintWriter
0:  */
0: 
0: class BasicGetLogHeader implements PrintWriterGetHeader
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	
0: 	private boolean doThreadId;
0: 	private boolean doTimeStamp;
0: 	private String tag;
0: 
0: 	/* 
0: 	 * STUB: This should take a header template. Check if
0: 	 *		 the error message facility provides something.
0: 	 *	
0: 	 *		 This should be localizable. How?
0: 	 */
0: 	/**
0: 	 * Constructor for a BasicGetLogHeader object.
0: 	 * <p>
0: 	 * @param doThreadId	true means include the calling thread's
0: 	 *							id in the header.
0: 	 * @param doTimeStamp	true means include the current time in 
0: 	 *							the header.
0: 	 * @param tag			A string to prefix the header. null
0: 	 *						means don't prefix the header with
0: 	 *						a string.
0: 	 */
0: 	BasicGetLogHeader(boolean doThreadId,
0: 				boolean doTimeStamp,
0: 				String tag){
0: 		this.doThreadId = doThreadId;
0: 		this.doTimeStamp = doTimeStamp;
0: 		this.tag = tag;
0: 	}	
0: 	
0: 	public String getHeader()
0: 	{
0: 		StringBuffer header = new StringBuffer(48);
0: 
0: 		if (tag != null) {
0: 			header.append(tag);
0: 			header.append(' ');
0: 		}
0: 
0: 		if (doTimeStamp) {
0: 			long currentTime = System.currentTimeMillis();
0: 
0: 			header.append(CheapDateFormatter.formatDate(currentTime));
0: 			header.append(' ');
0: 
0: 		}
0: 		if (doThreadId) {
0: 			header.append(Thread.currentThread().toString());
0: 			header.append(' ');
0: 		}
0: 
0: 		return header.toString();
0: 	}
0: }
0: 	
============================================================================