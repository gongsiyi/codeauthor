1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.vti.DeferModification
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.vti;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This interface is implemented by a read/write VTI class that wants to control when
1:eac0369:  * modifications to the VTI are deferred, or to be notified that a it is to be modified.
1:eac0369:  * Consider the following statement:<br>
1:eac0369:  * UPDATE NEW myVTI(...)
1:eac0369:  *  SET cost = cost + 10
1:dbed020:  *  WHERE cost &lt; 15
1:eac0369:  *<p>
1:eac0369:  * Updating a column that is used in the WHERE clause might or might not give the VTI implementation trouble;
1:eac0369:  * the update might cause the same row to be selected more than once. This problem can be solved by building the
1:eac0369:  * complete list of rows to be updated and the new column values before updating any rows. The updates are applied
1:eac0369:  * after the list is built. This process is called "deferred update".
1:eac0369:  *<p>
1:eac0369:  * By default, updates on a VTI are deferred when the VTI ResultSet
1:eac0369:  * is scrollable (ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE), and one or more of the following is true.
1:eac0369:  *<ol>
1:eac0369:  *<li>One or more of the columns in the SET clause is also used in the WHERE
1:eac0369:  * clause and the VTI ResultSet is sensitive. We do not defer updates
1:eac0369:  * when the ResultSet is TYPE_SCROLL_INSENSITIVE because it is not necessary.
1:eac0369:  *<li>The where clause contains a subselect on a VTI from the same class as the
1:eac0369:  * target VTI. We do not look at the VTI parameters, just the VTI class name.
1:eac0369:  *</ol>
1:eac0369:  *<p>
1:eac0369:  * By default, deletes on a VTI are deferred in a similar situation: when the VTI ResultSet
1:eac0369:  * is scrollable (ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE), and
1:eac0369:  * the where clause contains a subselect on a VTI from the same class as the
1:eac0369:  * target VTI. We do not look at the VTI parameters, just the VTI class name.
1:eac0369:  *<p>
1:eac0369:  * By default, inserts into a VTI are deferred when the same VTI class is used as both
1:eac0369:  * the source and target. It does not depend on the scrollability of the
1:eac0369:  * VTI ResultSet because inserts can be deferred without scrolling the ResultSet.
1:eac0369:  *<p>
1:eac0369:  * If these defaults are not appropriate then the class implementing the VTI should also implement
1:eac0369:  * this interface (org.apache.derby.vti.DeferModification).
1:eac0369:  *<p>
1:eac0369:  * (A read/write VTI is implemented by a class that implements the java.sql.PreparedStatement interface,
1:eac0369:  * often by extending the UpdatableVTITemplate interface. @see UpdatableVTITemplate).
1:eac0369:  *<p>
1:eac0369:  * Update and delete statement deferral is implemented by scrolling the VTI's ResultSet. Therefore,
1:eac0369:  * updates and deletes on a VTI are never deferred unless the VTI's ResultSets are scrollable, even
1:eac0369:  * if the DeferModification interface methods return <b>true</b>.
1:eac0369:  * Therefore for an update or delete to be deferred the VTI getResultSetType() method must return
1:eac0369:  * ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE and the VTI must produce scrollable
1:eac0369:  * java.sql.ResultSets that implement the getRow() and absolute() methods. If your VTI is implemented as
1:eac0369:  * an extension to UpdatableVTITemplate then you must override the getResultSetMethod:
1:eac0369:  * UpdatableVTITemplate.getResultSetType()
1:eac0369:  * throws an exception. If your VTI's ResultSets are implemented as extensions to VTITemplate then you must
1:eac0369:  * override the getRow() and absolute() methods: VTITemplate.getRow() and absolute() throw exceptions.
1:eac0369:  *<p>
1:eac0369:  * This interface is not used when the VTI is referenced only in a subselect; it is only used when a
1:eac0369:  * VTI appears as the target of an INSERT, UPDATE, or DELETE statement.
1:eac0369:  */
1:eac0369: public interface DeferModification
1:eac0369: {
1:eac0369: 
1:eac0369:     public static final int INSERT_STATEMENT = 1;
1:eac0369:     public static final int UPDATE_STATEMENT = 2;
1:eac0369:     public static final int DELETE_STATEMENT = 3;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called during preparation of an insert, update, or delete statement with this VTI
1:eac0369:      * as the target. It indicates whether the statement should be deferred irregardless of the other clauses
1:eac0369:      * in the statement. If alwaysDefer returns <b>true</b> then the other methods in this interface
1:eac0369:      * are not called. (At least not for this statement type).
1:eac0369:      *
1:eac0369:      * @param statementType One of INSERT_STATEMENT, UPDATE_STATEMENT, DELETE_STATEMENT.
1:eac0369:      *
1:eac0369:      * @return <b>true</b> if the statement type should always be deferred on this VTI,
1:eac0369:      *         <b>false</b> other criteria (see below) should be examined to determine
1:eac0369:      *         whether to defer the modification.
1:eac0369:      *
1:eac0369:      * @exception SQLException on an unexpected condition.
1:eac0369:      */
1:eac0369:     public boolean alwaysDefer( int statementType)
1:eac0369:         throws SQLException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called during preparation of an update or delete statement on the virtual
1:eac0369:      * table if getResultSetType() returns ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_SENSITIVE and
1:eac0369:      * alwaysDefer( statementType) returns <b>false</b>.
1:eac0369:      * ColumnRequiresDefer is called once for each column that is being updated,
1:eac0369:      * or each column in a DELETE where clause until
1:eac0369:      * it returns <b>true</b> or until all the columns have been exhausted.
1:eac0369:      *
1:eac0369:      * @param statementType UPDATE_STATEMENT or DELETE_STATEMENT.
1:eac0369:      * @param columnName the name of one of the columns being updated
1:eac0369:      * @param inWhereClause indicates whether the column also appears in the where clause
1:eac0369:      *
1:eac0369:      * @return <b>true</b> if the update must be deferred
1:eac0369:      *         <b>false</b> if this column does not require a deferred update
1:eac0369:      *
1:eac0369:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
1:eac0369:      */
1:eac0369:     public boolean columnRequiresDefer( int statementType,
1:eac0369:                                         String columnName,
1:eac0369:                                         boolean inWhereClause)
1:eac0369:         throws SQLException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called during preparation of an insert, update, or delete statement that has this virtual
1:eac0369:      * table as its target and that has a sub-select. It is invoked once for each regular table in a sub-select,
1:eac0369:      * if it has not already been determined that the statement should be deferred or that the VTI does not support
1:eac0369:      * deferral.
1:eac0369:      *
1:eac0369:      * @param statementType the statement type: INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT.
1:eac0369:      * @param schemaName the schema of the table in the sub-select.
1:eac0369:      * @param tableName the name of the table in the sub-select.
1:eac0369:      *
1:eac0369:      * @return <b>true</b> if the modification must be deferred
1:eac0369:      *         <b>false</b> if this source table does not necessitate a deferred modification
1:eac0369:      *
1:eac0369:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
1:eac0369:      */
1:eac0369:     public boolean subselectRequiresDefer( int statementType,
1:eac0369:                                            String schemaName,
1:eac0369:                                            String tableName)
1:eac0369:         throws SQLException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called during preparation of an insert, update, or delete statement that has this virtual
1:eac0369:      * table as its target and that has a sub-select. It is invoked once for each virtual table in the sub-select,
1:eac0369:      * if it has not already been determined that the statement should be deferred or that the VTI does not support
1:eac0369:      * deferral.
1:eac0369:      *
1:eac0369:      * @param statementType the statement type: INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT.
1:eac0369:      * @param VTIClassName the name of the class implementing the VTI in the sub-select.
1:eac0369:      *
1:eac0369:      * @return <b>true</b> if the modification must be deferred
1:eac0369:      *         <b>false</b> if this source table does not necessitate a deferred modification
1:eac0369:      *
1:eac0369:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
1:eac0369:      */
1:eac0369:     public boolean subselectRequiresDefer( int statementType,
1:eac0369:                                            String VTIClassName)
1:eac0369:         throws SQLException;
1:eac0369: 
1:eac0369:     /**
1:2c21843:      * This VTI method is called by Derby when a VTI modification (insert, update, or delete)
1:eac0369:      * is executed. It is called after the VTI has been instantiated but before any rows are read,
1:eac0369:      * inserted, updated, or deleted.
1:eac0369:      *
1:eac0369:      * @param statementType one of INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT
1:eac0369:      * @param deferred <b>true</b> if the modification will be deferred, <b>false</b> if not.
1:eac0369:      *
1:eac0369:      * @exception SQLException thrown on an unexpected failure
1:eac0369:      */
1:eac0369:     public void modificationNotify( int statementType,
1:eac0369:                                     boolean deferred)
1:eac0369:         throws SQLException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  *  WHERE cost &lt; 15
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2c21843
/////////////////////////////////////////////////////////////////////////
1:      * This VTI method is called by Derby when a VTI modification (insert, update, or delete)
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.vti.DeferModification
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
1: import java.sql.SQLException;
1: 
1: /**
1:  * This interface is implemented by a read/write VTI class that wants to control when
1:  * modifications to the VTI are deferred, or to be notified that a it is to be modified.
1:  * Consider the following statement:<br>
1:  * UPDATE NEW myVTI(...)
1:  *  SET cost = cost + 10
0:  *  WHERE cost < 15
1:  *<p>
1:  * Updating a column that is used in the WHERE clause might or might not give the VTI implementation trouble;
1:  * the update might cause the same row to be selected more than once. This problem can be solved by building the
1:  * complete list of rows to be updated and the new column values before updating any rows. The updates are applied
1:  * after the list is built. This process is called "deferred update".
1:  *<p>
1:  * By default, updates on a VTI are deferred when the VTI ResultSet
1:  * is scrollable (ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE), and one or more of the following is true.
1:  *<ol>
1:  *<li>One or more of the columns in the SET clause is also used in the WHERE
1:  * clause and the VTI ResultSet is sensitive. We do not defer updates
1:  * when the ResultSet is TYPE_SCROLL_INSENSITIVE because it is not necessary.
1:  *<li>The where clause contains a subselect on a VTI from the same class as the
1:  * target VTI. We do not look at the VTI parameters, just the VTI class name.
1:  *</ol>
1:  *<p>
1:  * By default, deletes on a VTI are deferred in a similar situation: when the VTI ResultSet
1:  * is scrollable (ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE), and
1:  * the where clause contains a subselect on a VTI from the same class as the
1:  * target VTI. We do not look at the VTI parameters, just the VTI class name.
1:  *<p>
1:  * By default, inserts into a VTI are deferred when the same VTI class is used as both
1:  * the source and target. It does not depend on the scrollability of the
1:  * VTI ResultSet because inserts can be deferred without scrolling the ResultSet.
1:  *<p>
1:  * If these defaults are not appropriate then the class implementing the VTI should also implement
1:  * this interface (org.apache.derby.vti.DeferModification).
1:  *<p>
1:  * (A read/write VTI is implemented by a class that implements the java.sql.PreparedStatement interface,
1:  * often by extending the UpdatableVTITemplate interface. @see UpdatableVTITemplate).
1:  *<p>
1:  * Update and delete statement deferral is implemented by scrolling the VTI's ResultSet. Therefore,
1:  * updates and deletes on a VTI are never deferred unless the VTI's ResultSets are scrollable, even
1:  * if the DeferModification interface methods return <b>true</b>.
1:  * Therefore for an update or delete to be deferred the VTI getResultSetType() method must return
1:  * ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE and the VTI must produce scrollable
1:  * java.sql.ResultSets that implement the getRow() and absolute() methods. If your VTI is implemented as
1:  * an extension to UpdatableVTITemplate then you must override the getResultSetMethod:
1:  * UpdatableVTITemplate.getResultSetType()
1:  * throws an exception. If your VTI's ResultSets are implemented as extensions to VTITemplate then you must
1:  * override the getRow() and absolute() methods: VTITemplate.getRow() and absolute() throw exceptions.
1:  *<p>
1:  * This interface is not used when the VTI is referenced only in a subselect; it is only used when a
1:  * VTI appears as the target of an INSERT, UPDATE, or DELETE statement.
1:  */
1: public interface DeferModification
1: {
1: 
1:     /**
0:        IBM Copyright &copy notice.
1:     */
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1:     public static final int INSERT_STATEMENT = 1;
1:     public static final int UPDATE_STATEMENT = 2;
1:     public static final int DELETE_STATEMENT = 3;
1: 
1:     /**
1:      * This method is called during preparation of an insert, update, or delete statement with this VTI
1:      * as the target. It indicates whether the statement should be deferred irregardless of the other clauses
1:      * in the statement. If alwaysDefer returns <b>true</b> then the other methods in this interface
1:      * are not called. (At least not for this statement type).
1:      *
1:      * @param statementType One of INSERT_STATEMENT, UPDATE_STATEMENT, DELETE_STATEMENT.
1:      *
1:      * @return <b>true</b> if the statement type should always be deferred on this VTI,
1:      *         <b>false</b> other criteria (see below) should be examined to determine
1:      *         whether to defer the modification.
1:      *
1:      * @exception SQLException on an unexpected condition.
1:      */
1:     public boolean alwaysDefer( int statementType)
1:         throws SQLException;
1: 
1:     /**
1:      * This method is called during preparation of an update or delete statement on the virtual
1:      * table if getResultSetType() returns ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_SENSITIVE and
1:      * alwaysDefer( statementType) returns <b>false</b>.
1:      * ColumnRequiresDefer is called once for each column that is being updated,
1:      * or each column in a DELETE where clause until
1:      * it returns <b>true</b> or until all the columns have been exhausted.
1:      *
1:      * @param statementType UPDATE_STATEMENT or DELETE_STATEMENT.
1:      * @param columnName the name of one of the columns being updated
1:      * @param inWhereClause indicates whether the column also appears in the where clause
1:      *
1:      * @return <b>true</b> if the update must be deferred
1:      *         <b>false</b> if this column does not require a deferred update
1:      *
1:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
1:      */
1:     public boolean columnRequiresDefer( int statementType,
1:                                         String columnName,
1:                                         boolean inWhereClause)
1:         throws SQLException;
1: 
1:     /**
1:      * This method is called during preparation of an insert, update, or delete statement that has this virtual
1:      * table as its target and that has a sub-select. It is invoked once for each regular table in a sub-select,
1:      * if it has not already been determined that the statement should be deferred or that the VTI does not support
1:      * deferral.
1:      *
1:      * @param statementType the statement type: INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT.
1:      * @param schemaName the schema of the table in the sub-select.
1:      * @param tableName the name of the table in the sub-select.
1:      *
1:      * @return <b>true</b> if the modification must be deferred
1:      *         <b>false</b> if this source table does not necessitate a deferred modification
1:      *
1:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
1:      */
1:     public boolean subselectRequiresDefer( int statementType,
1:                                            String schemaName,
1:                                            String tableName)
1:         throws SQLException;
1: 
1:     /**
1:      * This method is called during preparation of an insert, update, or delete statement that has this virtual
1:      * table as its target and that has a sub-select. It is invoked once for each virtual table in the sub-select,
1:      * if it has not already been determined that the statement should be deferred or that the VTI does not support
1:      * deferral.
1:      *
1:      * @param statementType the statement type: INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT.
1:      * @param VTIClassName the name of the class implementing the VTI in the sub-select.
1:      *
1:      * @return <b>true</b> if the modification must be deferred
1:      *         <b>false</b> if this source table does not necessitate a deferred modification
1:      *
1:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
1:      */
1:     public boolean subselectRequiresDefer( int statementType,
1:                                            String VTIClassName)
1:         throws SQLException;
1: 
1:     /**
0:      * This VTI method is called by Cloudscape when a VTI modification (insert, update, or delete)
1:      * is executed. It is called after the VTI has been instantiated but before any rows are read,
1:      * inserted, updated, or deleted.
1:      *
1:      * @param statementType one of INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT
1:      * @param deferred <b>true</b> if the modification will be deferred, <b>false</b> if not.
1:      *
1:      * @exception SQLException thrown on an unexpected failure
1:      */
1:     public void modificationNotify( int statementType,
1:                                     boolean deferred)
1:         throws SQLException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.vti;
0: 
0: import java.sql.SQLException;
0: 
0: /**
0:  * This interface is implemented by a read/write VTI class that wants to control when
0:  * modifications to the VTI are deferred, or to be notified that a it is to be modified.
0:  * Consider the following statement:<br>
0:  * UPDATE NEW myVTI(...)
0:  *  SET cost = cost + 10
0:  *  WHERE cost < 15
0:  *<p>
0:  * Updating a column that is used in the WHERE clause might or might not give the VTI implementation trouble;
0:  * the update might cause the same row to be selected more than once. This problem can be solved by building the
0:  * complete list of rows to be updated and the new column values before updating any rows. The updates are applied
0:  * after the list is built. This process is called "deferred update".
0:  *<p>
0:  * By default, updates on a VTI are deferred when the VTI ResultSet
0:  * is scrollable (ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE), and one or more of the following is true.
0:  *<ol>
0:  *<li>One or more of the columns in the SET clause is also used in the WHERE
0:  * clause and the VTI ResultSet is sensitive. We do not defer updates
0:  * when the ResultSet is TYPE_SCROLL_INSENSITIVE because it is not necessary.
0:  *<li>The where clause contains a subselect on a VTI from the same class as the
0:  * target VTI. We do not look at the VTI parameters, just the VTI class name.
0:  *</ol>
0:  *<p>
0:  * By default, deletes on a VTI are deferred in a similar situation: when the VTI ResultSet
0:  * is scrollable (ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE), and
0:  * the where clause contains a subselect on a VTI from the same class as the
0:  * target VTI. We do not look at the VTI parameters, just the VTI class name.
0:  *<p>
0:  * By default, inserts into a VTI are deferred when the same VTI class is used as both
0:  * the source and target. It does not depend on the scrollability of the
0:  * VTI ResultSet because inserts can be deferred without scrolling the ResultSet.
0:  *<p>
0:  * If these defaults are not appropriate then the class implementing the VTI should also implement
0:  * this interface (org.apache.derby.vti.DeferModification).
0:  *<p>
0:  * (A read/write VTI is implemented by a class that implements the java.sql.PreparedStatement interface,
0:  * often by extending the UpdatableVTITemplate interface. @see UpdatableVTITemplate).
0:  *<p>
0:  * Update and delete statement deferral is implemented by scrolling the VTI's ResultSet. Therefore,
0:  * updates and deletes on a VTI are never deferred unless the VTI's ResultSets are scrollable, even
0:  * if the DeferModification interface methods return <b>true</b>.
0:  * Therefore for an update or delete to be deferred the VTI getResultSetType() method must return
0:  * ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_INSENSITIVE and the VTI must produce scrollable
0:  * java.sql.ResultSets that implement the getRow() and absolute() methods. If your VTI is implemented as
0:  * an extension to UpdatableVTITemplate then you must override the getResultSetMethod:
0:  * UpdatableVTITemplate.getResultSetType()
0:  * throws an exception. If your VTI's ResultSets are implemented as extensions to VTITemplate then you must
0:  * override the getRow() and absolute() methods: VTITemplate.getRow() and absolute() throw exceptions.
0:  *<p>
0:  * This interface is not used when the VTI is referenced only in a subselect; it is only used when a
0:  * VTI appears as the target of an INSERT, UPDATE, or DELETE statement.
0:  */
0: public interface DeferModification
0: {
0: 
0:     /**
0:        IBM Copyright &copy notice.
0:     */
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0:     public static final int INSERT_STATEMENT = 1;
0:     public static final int UPDATE_STATEMENT = 2;
0:     public static final int DELETE_STATEMENT = 3;
0: 
0:     /**
0:      * This method is called during preparation of an insert, update, or delete statement with this VTI
0:      * as the target. It indicates whether the statement should be deferred irregardless of the other clauses
0:      * in the statement. If alwaysDefer returns <b>true</b> then the other methods in this interface
0:      * are not called. (At least not for this statement type).
0:      *
0:      * @param statementType One of INSERT_STATEMENT, UPDATE_STATEMENT, DELETE_STATEMENT.
0:      *
0:      * @return <b>true</b> if the statement type should always be deferred on this VTI,
0:      *         <b>false</b> other criteria (see below) should be examined to determine
0:      *         whether to defer the modification.
0:      *
0:      * @exception SQLException on an unexpected condition.
0:      */
0:     public boolean alwaysDefer( int statementType)
0:         throws SQLException;
0: 
0:     /**
0:      * This method is called during preparation of an update or delete statement on the virtual
0:      * table if getResultSetType() returns ResultSet.TYPE_SCROLL_SENSITIVE or TYPE_SCROLL_SENSITIVE and
0:      * alwaysDefer( statementType) returns <b>false</b>.
0:      * ColumnRequiresDefer is called once for each column that is being updated,
0:      * or each column in a DELETE where clause until
0:      * it returns <b>true</b> or until all the columns have been exhausted.
0:      *
0:      * @param statementType UPDATE_STATEMENT or DELETE_STATEMENT.
0:      * @param columnName the name of one of the columns being updated
0:      * @param inWhereClause indicates whether the column also appears in the where clause
0:      *
0:      * @return <b>true</b> if the update must be deferred
0:      *         <b>false</b> if this column does not require a deferred update
0:      *
0:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
0:      */
0:     public boolean columnRequiresDefer( int statementType,
0:                                         String columnName,
0:                                         boolean inWhereClause)
0:         throws SQLException;
0: 
0:     /**
0:      * This method is called during preparation of an insert, update, or delete statement that has this virtual
0:      * table as its target and that has a sub-select. It is invoked once for each regular table in a sub-select,
0:      * if it has not already been determined that the statement should be deferred or that the VTI does not support
0:      * deferral.
0:      *
0:      * @param statementType the statement type: INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT.
0:      * @param schemaName the schema of the table in the sub-select.
0:      * @param tableName the name of the table in the sub-select.
0:      *
0:      * @return <b>true</b> if the modification must be deferred
0:      *         <b>false</b> if this source table does not necessitate a deferred modification
0:      *
0:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
0:      */
0:     public boolean subselectRequiresDefer( int statementType,
0:                                            String schemaName,
0:                                            String tableName)
0:         throws SQLException;
0: 
0:     /**
0:      * This method is called during preparation of an insert, update, or delete statement that has this virtual
0:      * table as its target and that has a sub-select. It is invoked once for each virtual table in the sub-select,
0:      * if it has not already been determined that the statement should be deferred or that the VTI does not support
0:      * deferral.
0:      *
0:      * @param statementType the statement type: INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT.
0:      * @param VTIClassName the name of the class implementing the VTI in the sub-select.
0:      *
0:      * @return <b>true</b> if the modification must be deferred
0:      *         <b>false</b> if this source table does not necessitate a deferred modification
0:      *
0:      * @exception SQLException a parameter is invalid or there is another unexpected failure.
0:      */
0:     public boolean subselectRequiresDefer( int statementType,
0:                                            String VTIClassName)
0:         throws SQLException;
0: 
0:     /**
0:      * This VTI method is called by Cloudscape when a VTI modification (insert, update, or delete)
0:      * is executed. It is called after the VTI has been instantiated but before any rows are read,
0:      * inserted, updated, or deleted.
0:      *
0:      * @param statementType one of INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT
0:      * @param deferred <b>true</b> if the modification will be deferred, <b>false</b> if not.
0:      *
0:      * @exception SQLException thrown on an unexpected failure
0:      */
0:     public void modificationNotify( int statementType,
0:                                     boolean deferred)
0:         throws SQLException;
0: }
============================================================================