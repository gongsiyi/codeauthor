1:c5935ad: /*
1:c5935ad:  
1:c5935ad: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_Encrypted_1
1:c5935ad:  
1:c5935ad: Licensed to the Apache Software Foundation (ASF) under one or more
1:c5935ad: contributor license agreements.  See the NOTICE file distributed with
1:c5935ad: this work for additional information regarding copyright ownership.
1:c5935ad: The ASF licenses this file to You under the Apache License, Version 2.0
1:c5935ad: (the "License"); you may not use this file except in compliance with
1:c5935ad: the License.  You may obtain a copy of the License at
1:c5935ad:  
1:c5935ad:    http://www.apache.org/licenses/LICENSE-2.0
1:c5935ad:  
1:c5935ad: Unless required by applicable law or agreed to in writing, software
1:c5935ad: distributed under the License is distributed on an "AS IS" BASIS,
1:c5935ad: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5935ad: See the License for the specific language governing permissions and
1:c5935ad: limitations under the License.
1:c5935ad:  
1:c5935ad:  */
1:c5935ad: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:c5935ad: 
1:c5935ad: import java.sql.Connection;
1:c5935ad: import java.sql.SQLException;
1:c5935ad: import junit.framework.Test;
1:c35e4f0: import org.apache.derby.jdbc.ClientDataSourceInterface;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c35e4f0: import org.apache.derbyTesting.junit.JDBC;
1:c5935ad: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:c5935ad: 
1:c5935ad: 
1:c5935ad: /**
1:c5935ad:  * Testing replication of encrypted databases.
1:c5935ad:  * Required DERBY-3890.
1:c5935ad:  * 
1:c5935ad:  */
1:c5935ad: 
1:c5935ad: public class ReplicationRun_Local_Encrypted_1 extends ReplicationRun
1:c5935ad: {
1:c5935ad:     
1:c5935ad:     public ReplicationRun_Local_Encrypted_1(String testcaseName)
1:c5935ad:     {
1:c5935ad:         
1:c5935ad:         super(testcaseName);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     protected void setUp() throws Exception
1:c5935ad:     {
1:c5935ad:         super.setUp();
1:c5935ad:         dataEncryption = "bootPassword=dilldall"; // Run the tests with encryption.
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     protected void tearDown() throws Exception
1:c5935ad:     {
1:c5935ad:         dataEncryption = null;
1:c5935ad:         super.tearDown();
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     public static Test suite()
1:c5935ad:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_Encrypted_1 Suite");
1:c5935ad:         
1:c5935ad:         suite.addTestSuite( ReplicationRun_Local_Encrypted_1.class);
1:c5935ad:         
1:c5935ad:         return SecurityManagerSetup.noSecurityManager(suite);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:         
1:c5935ad:     /**
1:c5935ad:      * Do a simple test to verify replication can be performed
1:c5935ad:      * on an encrypted database.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:c5935ad:     public void testReplication_Encrypted_1_stdLoad()
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         makeReadyForReplication();
1:c5935ad:         
1:c5935ad:         // Run a "load" on the master to make sure there
1:c5935ad:         // has been replication to slave.
1:c5935ad:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:c5935ad:         util.DEBUG("replicationTest: " + replicationTest);
1:c5935ad:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:c5935ad:         util.DEBUG("replicationVerify: " + replicationVerify);
1:c5935ad:         
1:c5935ad:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:c5935ad:                 jvmVersion,
1:c5935ad:                 testClientHost,
1:c5935ad:                 masterServerHost, masterServerPort,
1:c5935ad:                 replicatedDb);
1:c5935ad:         
1:c5935ad:         failOver(jvmVersion,
1:c5935ad:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:c5935ad:                 masterServerHost,  // Where the master db is run.
1:c5935ad:                 masterServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:                 
1:c5935ad:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:c5935ad:                 slaveServerHost,slaveServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         verifySlave(); // Starts slave and does a very simple verification.
1:c5935ad:         
1:c5935ad:         // We should verify the master as well, at least to see that we still can connect.
1:c5935ad:         verifyMaster();
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 slaveServerHost, slaveServerPort);
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 masterServerHost, masterServerPort);
1:c5935ad:         
1:c5935ad:     }
1:c5935ad:         
1:c5935ad:     /**
1:c5935ad:      * Verify connection to the encrypted, replicated database:
1:c5935ad:      * A) Database has not been shut down:
1:c5935ad:      * further connects from the same JVM will succeed
1:c5935ad:      * - connect without specifying encryption,
1:c5935ad:      * - blank password,
1:c5935ad:      * - incorrect password.
1:c5935ad:      * B) After shutdown:
1:c5935ad:      * Re-connects without correct password will fail
1:c5935ad:      * - re-connecting as if un-encrypted,
1:c5935ad:      * - blank password,
1:c5935ad:      * - incorrect password.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:c5935ad:     public void testReplication_Encrypted_1_miniLoad_negative()
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         makeReadyForReplication();
1:c5935ad:                 
1:c5935ad:         // Replication "load"
1:c5935ad:         String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:c5935ad:                 replicatedDb;
1:c5935ad:         
1:c5935ad:         int tuplesToInsert = 10000;
1:c5935ad:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:c5935ad:                 dbPath, tuplesToInsert);
1:c5935ad: 
1:c5935ad:         
1:c5935ad:         failOver(jvmVersion,
1:c5935ad:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:c5935ad:                 masterServerHost,  // Where the master db is run.
1:c5935ad:                 masterServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:                 
1:c5935ad:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:c5935ad:                 slaveServerHost,slaveServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         // verifySlave();
1:c5935ad:         String slaveDbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:c5935ad:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath, tuplesToInsert);
1:c5935ad:         
1:c5935ad:         // We should verify the master as well, 
1:c5935ad:         // at least to see that we still can connect.
1:c5935ad:         // verifyMaster();
1:c5935ad:         String masterDbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:c5935ad:         _verifyDatabase(masterServerHost, masterServerPort,
1:c5935ad:             masterDbPath, tuplesToInsert);
1:c5935ad:         
1:c5935ad:         // Since the db has not been shutdown after the correct connect
1:c5935ad:         // further connects from the same JVM will succeed
1:c5935ad:         dataEncryption = null;
1:c5935ad:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath),
1:c5935ad:             null);
1:c5935ad:         
1:c5935ad:         // try connecting with blank password
1:c5935ad:         dataEncryption = "bootPassword=;";
1:c5935ad:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath),
1:c5935ad:             null);
1:c5935ad:         
1:c5935ad:         // try connecting with wrong password
1:c5935ad:         dataEncryption = "bootPassword=dill2dall";
1:c5935ad:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath),
1:c5935ad:             null);
1:c5935ad:         
1:c5935ad:         // Shutdown the db to test reconnect with incorrect passwords
1:c5935ad:         shutdownDb(jvmVersion,
1:c5935ad:             slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDatabasePath+FS+slaveDbSubPath, replicatedDb,
1:c5935ad:             testClientHost);
1:c5935ad:         
1:c5935ad:         // Negative test - try connecting without password
1:c5935ad:         dataEncryption = null;
1:c5935ad:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath),
1:c5935ad:             "XJ040");
1:c5935ad:         
1:c5935ad:         // Negative test - try connecting with blank password
1:c5935ad:         dataEncryption = "bootPassword=;";
1:c5935ad:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath),
1:c5935ad:             "XJ040");
1:c5935ad:         
1:c5935ad:         // Negative test - try connecting with wrong password
1:c5935ad:         dataEncryption = "bootPassword=dill2dall";
1:c5935ad:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath),
1:c5935ad:             "XJ040");
1:c5935ad:         
1:c5935ad:         // Reset to correct passwd.
1:c5935ad:         dataEncryption = "bootPassword=dilldall";
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 slaveServerHost, slaveServerPort);
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 masterServerHost, masterServerPort);
1:c5935ad:         
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     SQLException _connectToSlave(String slaveServerHost, int slaveServerPort,
1:c5935ad:             String dbPath) 
1:c35e4f0:         throws Exception
1:c5935ad:     {
1:c5935ad:         util.DEBUG("_connectToSlave");
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:c35e4f0: 
1:c5935ad:         ds.setDatabaseName(dbPath);
1:c5935ad:         ds.setServerName(slaveServerHost);
1:c5935ad:         ds.setPortNumber(slaveServerPort);
1:c5935ad:         ds.setConnectionAttributes(useEncryption(false));
1:c5935ad:         try {
1:c5935ad:             Connection conn = ds.getConnection();
1:c5935ad:             conn.close();
1:c5935ad:             return null; // If successfull.
1:c5935ad:         } catch (SQLException se) {
1:c5935ad:             return se;
1:c5935ad:         }       
1:c5935ad:     }
1:c5935ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_Encrypted_1
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.jdbc.ClientDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Testing replication of encrypted databases.
1:  * Required DERBY-3890.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_Encrypted_1 extends ReplicationRun
1: {
1:     
1:     public ReplicationRun_Local_Encrypted_1(String testcaseName)
1:     {
1:         
1:         super(testcaseName);
1: 
1:     }
1:     
1:     protected void setUp() throws Exception
1:     {
1:         super.setUp();
1:         dataEncryption = "bootPassword=dilldall"; // Run the tests with encryption.
1:     }
1:     
1:     protected void tearDown() throws Exception
1:     {
1:         dataEncryption = null;
1:         super.tearDown();
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_Encrypted_1 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_Encrypted_1.class);
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:         
1:     /**
1:      * Do a simple test to verify replication can be performed
1:      * on an encrypted database.
1:      * @throws java.lang.Exception
1:      */
1:     public void testReplication_Encrypted_1_stdLoad()
1:     throws Exception
1:     {
1:         makeReadyForReplication();
1:         
1:         // Run a "load" on the master to make sure there
1:         // has been replication to slave.
1:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:         util.DEBUG("replicationTest: " + replicationTest);
1:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:         util.DEBUG("replicationVerify: " + replicationVerify);
1:         
1:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:                 jvmVersion,
1:                 testClientHost,
1:                 masterServerHost, masterServerPort,
1:                 replicatedDb);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:                 
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         verifySlave(); // Starts slave and does a very simple verification.
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         verifyMaster();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1:         
1:     /**
1:      * Verify connection to the encrypted, replicated database:
1:      * A) Database has not been shut down:
1:      * further connects from the same JVM will succeed
1:      * - connect without specifying encryption,
1:      * - blank password,
1:      * - incorrect password.
1:      * B) After shutdown:
1:      * Re-connects without correct password will fail
1:      * - re-connecting as if un-encrypted,
1:      * - blank password,
1:      * - incorrect password.
1:      * @throws java.lang.Exception
1:      */
1:     public void testReplication_Encrypted_1_miniLoad_negative()
1:     throws Exception
1:     {
1:         makeReadyForReplication();
1:                 
1:         // Replication "load"
1:         String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:                 replicatedDb;
1:         
1:         int tuplesToInsert = 10000;
1:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:                 dbPath, tuplesToInsert);
1: 
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:                 
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         // verifySlave();
1:         String slaveDbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:             slaveDbPath, tuplesToInsert);
1:         
1:         // We should verify the master as well, 
1:         // at least to see that we still can connect.
1:         // verifyMaster();
1:         String masterDbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:         _verifyDatabase(masterServerHost, masterServerPort,
1:             masterDbPath, tuplesToInsert);
1:         
1:         // Since the db has not been shutdown after the correct connect
1:         // further connects from the same JVM will succeed
1:         dataEncryption = null;
1:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:             slaveDbPath),
1:             null);
1:         
1:         // try connecting with blank password
1:         dataEncryption = "bootPassword=;";
1:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:             slaveDbPath),
1:             null);
1:         
1:         // try connecting with wrong password
1:         dataEncryption = "bootPassword=dill2dall";
1:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:             slaveDbPath),
1:             null);
1:         
1:         // Shutdown the db to test reconnect with incorrect passwords
1:         shutdownDb(jvmVersion,
1:             slaveServerHost, slaveServerPort,
1:             slaveDatabasePath+FS+slaveDbSubPath, replicatedDb,
1:             testClientHost);
1:         
1:         // Negative test - try connecting without password
1:         dataEncryption = null;
1:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:             slaveDbPath),
1:             "XJ040");
1:         
1:         // Negative test - try connecting with blank password
1:         dataEncryption = "bootPassword=;";
1:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:             slaveDbPath),
1:             "XJ040");
1:         
1:         // Negative test - try connecting with wrong password
1:         dataEncryption = "bootPassword=dill2dall";
1:         assertException(_connectToSlave(slaveServerHost, slaveServerPort,
1:             slaveDbPath),
1:             "XJ040");
1:         
1:         // Reset to correct passwd.
1:         dataEncryption = "bootPassword=dilldall";
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1:     
1:     SQLException _connectToSlave(String slaveServerHost, int slaveServerPort,
1:             String dbPath) 
0:         throws SQLException
1:     {
1:         util.DEBUG("_connectToSlave");
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
1:         ds.setServerName(slaveServerHost);
1:         ds.setPortNumber(slaveServerPort);
1:         ds.setConnectionAttributes(useEncryption(false));
1:         try {
1:             Connection conn = ds.getConnection();
1:             conn.close();
1:             return null; // If successfull.
1:         } catch (SQLException se) {
1:             return se;
1:         }       
1:     }
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_Encrypted_1 Suite");
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                "org.apache.derby.jdbc.BasicClientDataSource40").newInstance();
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDataSourceInterface;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         throws Exception
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.NonJNDIClientDataSource40").newInstance();
1:         }
1: 
============================================================================