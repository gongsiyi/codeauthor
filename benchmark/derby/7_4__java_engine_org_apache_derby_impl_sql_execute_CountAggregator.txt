1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CountAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:c8603c4: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:c8603c4: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Aggregator for COUNT()/COUNT(*).  
1:eac0369:  */
1:eac0369: public final class CountAggregator 
1:eac0369: 	extends SystemAggregator
1:eac0369: {
1:eac0369: 	private long value;
1:eac0369: 	private boolean isCountStar;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 */
1:c8603c4: 	public void setup( ClassFactory cf, String aggregateName, DataTypeDescriptor returnType )
1:eac0369: 	{
1:eac0369: 		isCountStar = aggregateName.equals("COUNT(*)");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see ExecAggregator#merge
1:eac0369: 	 *
1:eac0369: 	 * @exception	StandardException	on error
1:eac0369: 	 */
1:eac0369: 	public void merge(ExecAggregator addend)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(addend instanceof CountAggregator,
1:eac0369: 				"addend is supposed to be the same type of aggregator for the merge operator");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		value += ((CountAggregator)addend).value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the result of the aggregation.  Just
1:eac0369: 	 * spit out the running count.
1:eac0369: 	 *
1:eac0369: 	 * @return the value as a Long 
1:eac0369: 	 */
1:2c6f0a2: 	public DataValueDescriptor getResult()
1:eac0369: 	{
1:2c6f0a2: 		return new org.apache.derby.iapi.types.SQLLongint(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Accumulate for count().  Toss out all nulls in this kind of count.
1:eac0369: 	 * Increment the count for count(*). Count even the null values.
1:eac0369: 	 *
1:eac0369: 	 * @param addend	value to be added in
1:eac0369: 	 * @param ga		the generic aggregator that is calling me
1:eac0369: 	 *
1:eac0369: 	 * @see ExecAggregator#accumulate
1:eac0369: 	 */
1:eac0369: 	public void accumulate(DataValueDescriptor addend, Object ga)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (isCountStar)
1:eac0369: 			value++;
1:eac0369: 		else
1:eac0369: 			super.accumulate(addend, ga);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected final void accumulate(DataValueDescriptor addend) {
1:eac0369: 			value++;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @return ExecAggregator the new aggregator
1:eac0369: 	 */
1:eac0369: 	public ExecAggregator newAggregator()
1:eac0369: 	{
1:eac0369: 		CountAggregator ca = new CountAggregator();
1:eac0369: 		ca.isCountStar = isCountStar;
1:eac0369: 		return ca;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isCountStar()
1:eac0369: 	{
1:eac0369: 		return isCountStar;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// EXTERNALIZABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/** 
1:eac0369: 	 * Although we are not expected to be persistent per se,
1:eac0369: 	 * we may be written out by the sorter temporarily.  So
1:eac0369: 	 * we need to be able to write ourselves out and read
1:eac0369: 	 * ourselves back in.  
1:eac0369: 	 * 
1:eac0369: 	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public final void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		out.writeBoolean(isCountStar);
1:eac0369: 		out.writeLong(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	* @see java.io.Externalizable#readExternal 
1:eac0369: 	*
1:eac0369: 	* @exception IOException io exception
1:eac0369: 	* @exception ClassNotFoundException on error
1:eac0369: 	*/
1:eac0369: 	public final void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		isCountStar = in.readBoolean();
1:eac0369: 		value = in.readLong();
1:eac0369: 	}	
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// FORMATABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId() { return StoredFormatIds.AGG_COUNT_V01_ID; }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
/////////////////////////////////////////////////////////////////////////
1: 	public void setup( ClassFactory cf, String aggregateName, DataTypeDescriptor returnType )
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2c6f0a2
/////////////////////////////////////////////////////////////////////////
1: 	public DataValueDescriptor getResult()
1: 		return new org.apache.derby.iapi.types.SQLLongint(value);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CountAggregator
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  * Aggregator for COUNT()/COUNT(*).  
0:  * @author jamie
1:  */
1: public final class CountAggregator 
1: 	extends SystemAggregator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private long value;
1: 	private boolean isCountStar;
1: 
1: 	/**
1: 	 */
0: 	public void setup(String aggregateName)
1: 	{
1: 		isCountStar = aggregateName.equals("COUNT(*)");
1: 	}
1: 
1: 	/**
1: 	 * @see ExecAggregator#merge
1: 	 *
1: 	 * @exception	StandardException	on error
1: 	 */
1: 	public void merge(ExecAggregator addend)
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(addend instanceof CountAggregator,
1: 				"addend is supposed to be the same type of aggregator for the merge operator");
1: 		}
1: 
1: 		value += ((CountAggregator)addend).value;
1: 	}
1: 
1: 	/**
1: 	 * Return the result of the aggregation.  Just
1: 	 * spit out the running count.
1: 	 *
1: 	 * @return the value as a Long 
1: 	 */
0: 	public Object getResult()
1: 	{
0: 		return new Long(value);
1: 	}
1: 
1: 
1: 	/**
1: 	 * Accumulate for count().  Toss out all nulls in this kind of count.
1: 	 * Increment the count for count(*). Count even the null values.
1: 	 *
1: 	 * @param addend	value to be added in
1: 	 * @param ga		the generic aggregator that is calling me
1: 	 *
1: 	 * @see ExecAggregator#accumulate
1: 	 */
1: 	public void accumulate(DataValueDescriptor addend, Object ga)
1: 		throws StandardException
1: 	{
1: 		if (isCountStar)
1: 			value++;
1: 		else
1: 			super.accumulate(addend, ga);
1: 	}
1: 
1: 	protected final void accumulate(DataValueDescriptor addend) {
1: 			value++;
1: 	}
1: 
1: 	/**
1: 	 * @return ExecAggregator the new aggregator
1: 	 */
1: 	public ExecAggregator newAggregator()
1: 	{
1: 		CountAggregator ca = new CountAggregator();
1: 		ca.isCountStar = isCountStar;
1: 		return ca;
1: 	}
1: 
1: 	public boolean isCountStar()
1: 	{
1: 		return isCountStar;
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// EXTERNALIZABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/** 
1: 	 * Although we are not expected to be persistent per se,
1: 	 * we may be written out by the sorter temporarily.  So
1: 	 * we need to be able to write ourselves out and read
1: 	 * ourselves back in.  
1: 	 * 
1: 	 * @exception IOException thrown on error
1: 	 */
1: 	public final void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		out.writeBoolean(isCountStar);
1: 		out.writeLong(value);
1: 	}
1: 
1: 	/** 
1: 	* @see java.io.Externalizable#readExternal 
1: 	*
1: 	* @exception IOException io exception
1: 	* @exception ClassNotFoundException on error
1: 	*/
1: 	public final void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		isCountStar = in.readBoolean();
1: 		value = in.readLong();
1: 	}	
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// FORMATABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId() { return StoredFormatIds.AGG_COUNT_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  * Aggregator for COUNT()/COUNT(*).  
0:  * @author jamie
0:  */
0: public final class CountAggregator 
0: 	extends SystemAggregator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private long value;
0: 	private boolean isCountStar;
0: 
0: 	/**
0: 	 */
0: 	public void setup(String aggregateName)
0: 	{
0: 		isCountStar = aggregateName.equals("COUNT(*)");
0: 	}
0: 
0: 	/**
0: 	 * @see ExecAggregator#merge
0: 	 *
0: 	 * @exception	StandardException	on error
0: 	 */
0: 	public void merge(ExecAggregator addend)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(addend instanceof CountAggregator,
0: 				"addend is supposed to be the same type of aggregator for the merge operator");
0: 		}
0: 
0: 		value += ((CountAggregator)addend).value;
0: 	}
0: 
0: 	/**
0: 	 * Return the result of the aggregation.  Just
0: 	 * spit out the running count.
0: 	 *
0: 	 * @return the value as a Long 
0: 	 */
0: 	public Object getResult()
0: 	{
0: 		return new Long(value);
0: 	}
0: 
0: 
0: 	/**
0: 	 * Accumulate for count().  Toss out all nulls in this kind of count.
0: 	 * Increment the count for count(*). Count even the null values.
0: 	 *
0: 	 * @param addend	value to be added in
0: 	 * @param ga		the generic aggregator that is calling me
0: 	 *
0: 	 * @see ExecAggregator#accumulate
0: 	 */
0: 	public void accumulate(DataValueDescriptor addend, Object ga)
0: 		throws StandardException
0: 	{
0: 		if (isCountStar)
0: 			value++;
0: 		else
0: 			super.accumulate(addend, ga);
0: 	}
0: 
0: 	protected final void accumulate(DataValueDescriptor addend) {
0: 			value++;
0: 	}
0: 
0: 	/**
0: 	 * @return ExecAggregator the new aggregator
0: 	 */
0: 	public ExecAggregator newAggregator()
0: 	{
0: 		CountAggregator ca = new CountAggregator();
0: 		ca.isCountStar = isCountStar;
0: 		return ca;
0: 	}
0: 
0: 	public boolean isCountStar()
0: 	{
0: 		return isCountStar;
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// EXTERNALIZABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/** 
0: 	 * Although we are not expected to be persistent per se,
0: 	 * we may be written out by the sorter temporarily.  So
0: 	 * we need to be able to write ourselves out and read
0: 	 * ourselves back in.  
0: 	 * 
0: 	 * @exception IOException thrown on error
0: 	 */
0: 	public final void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		out.writeBoolean(isCountStar);
0: 		out.writeLong(value);
0: 	}
0: 
0: 	/** 
0: 	* @see java.io.Externalizable#readExternal 
0: 	*
0: 	* @exception IOException io exception
0: 	* @exception ClassNotFoundException on error
0: 	*/
0: 	public final void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		isCountStar = in.readBoolean();
0: 		value = in.readLong();
0: 	}	
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// FORMATABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId() { return StoredFormatIds.AGG_COUNT_V01_ID; }
0: }
============================================================================