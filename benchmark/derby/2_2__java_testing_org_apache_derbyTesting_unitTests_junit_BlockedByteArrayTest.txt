1:33467a5: /*
3:33467a5: 
1:33467a5:    Derby - Class org.apache.derbyTesting.unitTests.junit.BlockedByteArrayTest
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derbyTesting.unitTests.junit;
1:33467a5: 
1:33467a5: import java.io.IOException;
1:33467a5: import java.io.InputStream;
1:33467a5: import java.util.Arrays;
1:33467a5: import junit.framework.Test;
1:33467a5: import org.apache.derby.impl.io.vfmem.BlockedByteArray;
1:33467a5: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:33467a5: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:33467a5: 
1:33467a5: /**
1:33467a5:  * Basic tests of the {@code BlockedByteArrayTest}.
1:33467a5:  */
1:33467a5: public class BlockedByteArrayTest
1:33467a5:         extends BaseTestCase {
1:33467a5: 
1:33467a5:     public BlockedByteArrayTest(String name) {
1:33467a5:         super(name);
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testLengthNoInitialBlocksWriteSingleByte() {
1:33467a5:         BlockedByteArray src = new BlockedByteArray();
1:33467a5:         assertEquals(0, src.length());
1:33467a5:         src.writeByte(0, (byte)1);
1:33467a5:         assertEquals(1, src.length());
1:33467a5:         for (int i=0; i < 66*1024; i++) {
1:33467a5:             src.writeByte(1 + i, (byte)i);
1:33467a5:             assertEquals(i +2, src.length());
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testLengthNoInitialBlocksWriteMultipleBytes4K() {
1:33467a5:         BlockedByteArray src = new BlockedByteArray();
1:33467a5:         byte[] buf = new byte[4*1024];
1:33467a5:         Arrays.fill(buf, (byte)1);
1:33467a5:         src.writeBytes(0, buf, 0, buf.length);
1:33467a5:         assertEquals(buf.length, src.length());
1:33467a5:         Arrays.fill(buf, (byte)2);
1:33467a5:         src.writeBytes(buf.length, buf, 0, buf.length);
1:33467a5:         assertEquals(2 * buf.length, src.length());
1:33467a5:         src.writeByte(69, (byte)8);
1:33467a5:         assertEquals(2 * buf.length, src.length());
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testLengthNoInitialBlocksWriteMultipleBytes4KPlussAFew() {
1:33467a5:         BlockedByteArray src = new BlockedByteArray();
1:33467a5:         byte[] buf = new byte[4*1024+37];
1:33467a5:         Arrays.fill(buf, (byte)1);
1:33467a5:         src.writeBytes(0, buf, 0, buf.length);
1:33467a5:         assertEquals(buf.length, src.length());
1:33467a5:         Arrays.fill(buf, (byte)2);
1:33467a5:         src.writeBytes(buf.length, buf, 0, buf.length);
1:33467a5:         assertEquals(2 * buf.length, src.length());
1:33467a5:         src.writeByte(54, (byte)7);
1:33467a5:         assertEquals(2 * buf.length, src.length());
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testReadArray()
1:33467a5:             throws IOException {
1:33467a5:         int size = 65*1024;
1:33467a5:         BlockedByteArray src = createBlockedByteArray(size);
1:33467a5:         byte[] buf = new byte[4*1024];
1:33467a5:         int read = 0;
1:33467a5:         while (read < size) {
1:33467a5:             read += src.read(read, buf, 0, buf.length);
1:33467a5:         }
1:33467a5:         src = createBlockedByteArray(size);
1:33467a5:         buf = new byte[2567];
1:33467a5:         read = 0;
1:33467a5:         while (read < size) {
1:33467a5:             read += src.read(read, buf, 0, buf.length);
1:33467a5:         }
1:33467a5:         src = createBlockedByteArray(size);
1:33467a5:         buf = new byte[16*1024];
1:33467a5:         read = 0;
1:33467a5:         while (read < size) {
1:33467a5:             read += src.read(read, buf, 0, buf.length);
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testReadSingle()
1:33467a5:             throws IOException {
1:33467a5:         int size = 65*1024;
1:33467a5:         BlockedByteArray src = createBlockedByteArray(size);
1:33467a5:         int read = 0;
1:33467a5:         while (src.read(read) != -1) {
1:33467a5:             read++;
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testLength()
1:33467a5:             throws IOException {
1:33467a5:         BlockedByteArray src = createBlockedByteArray(0);
1:33467a5:         assertEquals(0L, src.length());
1:33467a5:         src.writeByte(0L, (byte)1);
1:33467a5:         assertEquals(1L, src.length());
1:33467a5:         src.writeByte(0L, (byte)1);
1:33467a5:         assertEquals(1L, src.length());
1:33467a5:         src.writeByte(9L, (byte)2);
1:33467a5:         assertEquals(10L, src.length());
1:33467a5:         byte[] bytes = new byte[4096];
1:33467a5:         Arrays.fill(bytes, (byte)7);
1:33467a5:         src.writeBytes(0L, bytes, 0, bytes.length);
1:33467a5:         assertEquals(bytes.length, src.length());
1:33467a5:         src.writeBytes(bytes.length, bytes, 0, bytes.length);
1:33467a5:         assertEquals(2*bytes.length, src.length());
1:33467a5: 
1:33467a5:         // Test setLength
1:33467a5:         src.setLength(55555);
1:33467a5:         assertEquals(55555, src.length());
1:33467a5:         src.setLength(44444);
1:33467a5:         assertEquals(44444, src.length());
1:33467a5:     }
1:33467a5: 
1:7a7a1a3:     /**
1:7a7a1a3:      * Performs a series of capacity changes.
1:7a7a1a3:      *
1:7a7a1a3:      * @throws IOException if something goes wrong
1:7a7a1a3:      */
1:7a7a1a3:     public void testCapacityGrowth()
1:7a7a1a3:             throws IOException {
1:7a7a1a3:         BlockedByteArray src = createBlockedByteArray(0);
1:7a7a1a3:         src.setLength(1*1024*1024); // 1 MB
1:7a7a1a3:         src.setLength(10*1024*1024); // 10 MB
1:7a7a1a3:         src.setLength(5*1024*1024); // 5 MB
1:7a7a1a3:         src.setLength(7*1024*1024); // 7 MB
1:7a7a1a3:         assertEquals(7*1024*1024L, src.length());
1:7a7a1a3:         src.setLength(0); // 0 bytes
1:7a7a1a3:         assertEquals(0L, src.length());
1:7a7a1a3:         src.setLength(39*1024*1024); // 39 MB
1:7a7a1a3:         src.setLength(39*1024*1024+1); // 39 MB +1 B
1:7a7a1a3:         assertEquals(39*1024*1024+1L, src.length());
1:7a7a1a3:         src.setLength(39*1024*1024); // 39 MB
1:1b025bd:         assertEquals(39*1024*1024L, src.length());
1:7a7a1a3:         src.setLength(39*1024*1024); // 39 MB
1:1b025bd:         assertEquals(39*1024*1024L, src.length());
1:7a7a1a3:         src.setLength(-1); // Invalid value - causes array to be truncated.
1:7a7a1a3:         assertEquals(0L, src.length());
1:7a7a1a3:     }
1:7a7a1a3: 
1:33467a5:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(BlockedByteArrayTest.class);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Creates a blocked byte array and fills it with data.
1:33467a5:      *
1:33467a5:      * @param length requested length
1:33467a5:      * @return A filled blocked byte array.
1:33467a5:      * @throws IOException if reading from the source fails
1:33467a5:      */
1:33467a5:     private BlockedByteArray createBlockedByteArray(long length)
1:33467a5:             throws IOException {
1:33467a5:         BlockedByteArray data = new BlockedByteArray();
1:33467a5:         InputStream src = new LoopingAlphabetStream(length);
1:33467a5:         byte[] buf = new byte[4*1024];
1:33467a5:         long pos = 0;
1:33467a5:         while (pos < length) {
1:33467a5:             int readFromSrc = src.read(buf);
1:33467a5:             pos += data.writeBytes(pos, buf, 0, readFromSrc);
1:33467a5:         }
1:33467a5:         return data;
1:33467a5:     }
1:33467a5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(BlockedByteArrayTest.class);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:1b025bd
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(39*1024*1024L, src.length());
1:         assertEquals(39*1024*1024L, src.length());
commit:7a7a1a3
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Performs a series of capacity changes.
1:      *
1:      * @throws IOException if something goes wrong
1:      */
1:     public void testCapacityGrowth()
1:             throws IOException {
1:         BlockedByteArray src = createBlockedByteArray(0);
1:         src.setLength(1*1024*1024); // 1 MB
1:         src.setLength(10*1024*1024); // 10 MB
1:         src.setLength(5*1024*1024); // 5 MB
1:         src.setLength(7*1024*1024); // 7 MB
1:         assertEquals(7*1024*1024L, src.length());
0:         src.setLength(75*1024*1024); // 75 MB
1:         src.setLength(0); // 0 bytes
1:         assertEquals(0L, src.length());
1:         src.setLength(39*1024*1024); // 39 MB
1:         src.setLength(39*1024*1024+1); // 39 MB +1 B
1:         assertEquals(39*1024*1024+1L, src.length());
1:         src.setLength(39*1024*1024); // 39 MB
1:         src.setLength(39*1024*1024); // 39 MB
1:         src.setLength(-1); // Invalid value - causes array to be truncated.
1:         assertEquals(0L, src.length());
1:     }
1: 
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.BlockedByteArrayTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Arrays;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.impl.io.vfmem.BlockedByteArray;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Basic tests of the {@code BlockedByteArrayTest}.
1:  */
1: public class BlockedByteArrayTest
1:         extends BaseTestCase {
1: 
1:     public BlockedByteArrayTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testLengthNoInitialBlocksWriteSingleByte() {
1:         BlockedByteArray src = new BlockedByteArray();
1:         assertEquals(0, src.length());
1:         src.writeByte(0, (byte)1);
1:         assertEquals(1, src.length());
1:         for (int i=0; i < 66*1024; i++) {
1:             src.writeByte(1 + i, (byte)i);
1:             assertEquals(i +2, src.length());
1:         }
1:     }
1: 
1:     public void testLengthNoInitialBlocksWriteMultipleBytes4K() {
1:         BlockedByteArray src = new BlockedByteArray();
1:         byte[] buf = new byte[4*1024];
1:         Arrays.fill(buf, (byte)1);
1:         src.writeBytes(0, buf, 0, buf.length);
1:         assertEquals(buf.length, src.length());
1:         Arrays.fill(buf, (byte)2);
1:         src.writeBytes(buf.length, buf, 0, buf.length);
1:         assertEquals(2 * buf.length, src.length());
1:         src.writeByte(69, (byte)8);
1:         assertEquals(2 * buf.length, src.length());
1:     }
1: 
1:     public void testLengthNoInitialBlocksWriteMultipleBytes4KPlussAFew() {
1:         BlockedByteArray src = new BlockedByteArray();
1:         byte[] buf = new byte[4*1024+37];
1:         Arrays.fill(buf, (byte)1);
1:         src.writeBytes(0, buf, 0, buf.length);
1:         assertEquals(buf.length, src.length());
1:         Arrays.fill(buf, (byte)2);
1:         src.writeBytes(buf.length, buf, 0, buf.length);
1:         assertEquals(2 * buf.length, src.length());
1:         src.writeByte(54, (byte)7);
1:         assertEquals(2 * buf.length, src.length());
1:     }
1: 
1:     public void testReadArray()
1:             throws IOException {
1:         int size = 65*1024;
1:         BlockedByteArray src = createBlockedByteArray(size);
1:         byte[] buf = new byte[4*1024];
1:         int read = 0;
1:         while (read < size) {
1:             read += src.read(read, buf, 0, buf.length);
1:         }
1:         src = createBlockedByteArray(size);
1:         buf = new byte[2567];
1:         read = 0;
1:         while (read < size) {
1:             read += src.read(read, buf, 0, buf.length);
1:         }
1:         src = createBlockedByteArray(size);
1:         buf = new byte[16*1024];
1:         read = 0;
1:         while (read < size) {
1:             read += src.read(read, buf, 0, buf.length);
1:         }
1:     }
1: 
1:     public void testReadSingle()
1:             throws IOException {
1:         int size = 65*1024;
1:         BlockedByteArray src = createBlockedByteArray(size);
1:         int read = 0;
1:         while (src.read(read) != -1) {
1:             read++;
1:         }
1:     }
1: 
1:     public void testLength()
1:             throws IOException {
1:         BlockedByteArray src = createBlockedByteArray(0);
1:         assertEquals(0L, src.length());
1:         src.writeByte(0L, (byte)1);
1:         assertEquals(1L, src.length());
1:         src.writeByte(0L, (byte)1);
1:         assertEquals(1L, src.length());
1:         src.writeByte(9L, (byte)2);
1:         assertEquals(10L, src.length());
1:         byte[] bytes = new byte[4096];
1:         Arrays.fill(bytes, (byte)7);
1:         src.writeBytes(0L, bytes, 0, bytes.length);
1:         assertEquals(bytes.length, src.length());
1:         src.writeBytes(bytes.length, bytes, 0, bytes.length);
1:         assertEquals(2*bytes.length, src.length());
1: 
1:         // Test setLength
1:         src.setLength(55555);
1:         assertEquals(55555, src.length());
1:         src.setLength(44444);
1:         assertEquals(44444, src.length());
1:     }
1: 
1:     public static Test suite() {
0:         return new TestSuite(BlockedByteArrayTest.class);
1:     }
1: 
1:     /**
1:      * Creates a blocked byte array and fills it with data.
1:      *
1:      * @param length requested length
1:      * @return A filled blocked byte array.
1:      * @throws IOException if reading from the source fails
1:      */
1:     private BlockedByteArray createBlockedByteArray(long length)
1:             throws IOException {
1:         BlockedByteArray data = new BlockedByteArray();
1:         InputStream src = new LoopingAlphabetStream(length);
1:         byte[] buf = new byte[4*1024];
1:         long pos = 0;
1:         while (pos < length) {
1:             int readFromSrc = src.read(buf);
1:             pos += data.writeBytes(pos, buf, 0, readFromSrc);
1:         }
1:         return data;
1:     }
1: }
============================================================================