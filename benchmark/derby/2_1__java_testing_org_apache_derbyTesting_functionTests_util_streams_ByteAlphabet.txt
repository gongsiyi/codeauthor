1:10cc70b: /*
1:10cc70b: 
1:10cc70b:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet
1:10cc70b: 
1:10cc70b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10cc70b:    contributor license agreements.  See the NOTICE file distributed with
1:10cc70b:    this work for additional information regarding copyright ownership.
1:10cc70b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:10cc70b:    (the "License"); you may not use this file except in compliance with
1:10cc70b:    the License.  You may obtain a copy of the License at
1:10cc70b: 
1:10cc70b:       http://www.apache.org/licenses/LICENSE-2.0
1:10cc70b: 
1:10cc70b:    Unless required by applicable law or agreed to in writing, software
1:10cc70b:    distributed under the License is distributed on an "AS IS" BASIS,
1:10cc70b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10cc70b:    See the License for the specific language governing permissions and
1:10cc70b:    limitations under the License.
1:10cc70b: 
1:10cc70b:  */
1:10cc70b: 
1:10cc70b: package org.apache.derbyTesting.functionTests.util.streams;
1:10cc70b: 
1:10cc70b: import java.io.UnsupportedEncodingException;
1:10cc70b: 
1:10cc70b: /**
1:10cc70b:  * A looping alphabet, returning bytes in a specified encoding.
1:10cc70b:  *
1:10cc70b:  * The alphabet loops over a list of bytes representing characters. The
1:10cc70b:  * alphabet-object is used by looping stream, which in turn is used for testing
1:10cc70b:  * methods requiring streaming inputs.
1:10cc70b:  *
1:10cc70b:  * The following alphabets have been defined:
1:10cc70b:  * <ul><li><em>Modern latin, lowercase</em> ; letters a - z (26)
1:10cc70b:  *     <li><em>Norwegian/Danish, lowercase</em> ; letters a - z, plus three
1:10cc70b:  *         additional letters (29)
1:10cc70b:  *     <li><em>Tamil</em> ; 46 Tamil letters from UNICODE U0B80
1:10cc70b:  *     <li><em>CJK subset</em> ; 12 letter from UNICODE CJK U4E00
1:10cc70b:  * </ul>
1:10cc70b:  */
1:10cc70b: public class ByteAlphabet {
1:10cc70b: 
1:10cc70b:     /** The name of the alphabet. */
1:10cc70b:     private final String name;
1:10cc70b:     /** The encoding used to represent characters as bytes. */
1:10cc70b:     private final String encoding;
1:10cc70b:     /** The bytes representing the characters in the alphabet. */
1:10cc70b:     private final byte[] bytes;
1:10cc70b:     /** The number of characters in the alphabet. */
1:10cc70b:     private final int charCount;
1:10cc70b:     /** The number of byes in the alphabet. */
1:10cc70b:     private final int byteCount;
1:10cc70b:     /** Offset into the byte array. */
1:10cc70b:     private int boff = 0;
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet returning bytes representing the lowercase letters
1:10cc70b:      * a-z in the "US-ASCII" encoding.
1:10cc70b:      */
1:10cc70b:     public static ByteAlphabet modernLatinLowercase() {
1:10cc70b:         return new ByteAlphabet("Modern latin lowercase, US-ASCII",
1:10cc70b:                             CharAlphabet.MODERNLATINLOWER,
1:10cc70b:                             "US-ASCII");
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet returning bytes representing the 29 lowercase
1:10cc70b:      * letters in the Norwegian/Danish alphabet in the "ISO-8859-1" encoding.
1:10cc70b:      */
1:10cc70b:     public static ByteAlphabet norwegianLowercase() {
1:10cc70b:         return new ByteAlphabet("Norwegian/Danish lowercase, ISO-8859-1",
1:10cc70b:                         CharAlphabet.NO_DK_LOWER,
1:10cc70b:                         "ISO-8859-1");
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet returning bytes representing a subset of the Tamil
1:10cc70b:      * alphabet in the UTF-8 encoding.
1:10cc70b:      */
1:10cc70b:     public static ByteAlphabet tamilUTF8() {
1:10cc70b:         return new ByteAlphabet("Tamil, UTF-8",
1:10cc70b:                         CharAlphabet.TAMIL,
1:10cc70b:                         "UTF8");
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet returning bytes representing a subset of the Tamil
1:10cc70b:      * alphabet in the UTF-16BE encoding.
1:10cc70b:      */
1:10cc70b:     public static ByteAlphabet tamilUTF16BE() {
1:10cc70b:         return new ByteAlphabet("Tamil, UTF-16BE",
1:10cc70b:                         CharAlphabet.TAMIL,
1:10cc70b:                         "UTF-16BE");
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet returning bytes representing a subset of the CJK
1:10cc70b:      * alphabet in the UTF-8 encoding.
1:10cc70b:      */
1:10cc70b:     public static ByteAlphabet cjkSubsetUTF8() {
1:10cc70b:         return new ByteAlphabet("CJK subset, UTF-8",
1:10cc70b:                         CharAlphabet.CJKSUBSET,
1:10cc70b:                         "UTF8");
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create an alphabet returning bytes representing a subset of the CJK
1:10cc70b:      * alphabet in the UTF-16BE encoding.
1:10cc70b:      */
1:10cc70b:     public static ByteAlphabet cjkSubsetUTF16BE() {
1:10cc70b:         return new ByteAlphabet("CJK subset, UTF-16BE",
1:10cc70b:                         CharAlphabet.CJKSUBSET,
1:10cc70b:                         "UTF-16BE");
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:0881157:      * Create an alphabet that consists of a single byte.
1:0881157:      */
1:0881157:     public static ByteAlphabet singleByte(byte b) {
1:0881157:         return new ByteAlphabet(
1:0881157:                 "Single byte: " + b,
1:0881157:                 new char[] { (char) (b & 0xff) },
1:0881157:                 "US-ASCII");
1:0881157:     }
1:0881157: 
1:0881157:     /**
1:10cc70b:      * Create an alphabet with the given name, the given characters and using
1:10cc70b:      * the specified encoding to represent the characters as bytes.
1:10cc70b:      *
1:10cc70b:      * @param name the name of the alphabet
1:10cc70b:      * @param chars the characters in the alphabet
1:10cc70b:      * @param encoding the encoding to use to represent characters as bytes
1:10cc70b:      */
1:10cc70b:     private ByteAlphabet(String name, char[] chars, String encoding) {
1:10cc70b:         this.name = name;
1:10cc70b:         this.encoding = encoding;
1:10cc70b:         this.charCount = chars.length;
1:10cc70b:         String tmpStr = new String(chars);
1:10cc70b:         byte[] tmpBytes;
1:10cc70b:         try {
1:10cc70b:             tmpBytes = tmpStr.getBytes(encoding);
1:10cc70b:         } catch (UnsupportedEncodingException uee) {
1:10cc70b:             // We are nasty and ignore this...
1:10cc70b:             tmpBytes = new byte[] {0};
1:10cc70b:         }
1:10cc70b:         this.bytes = tmpBytes;
1:0881157:         this.byteCount = tmpBytes.length;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the name of the alphabet.
1:10cc70b:      */
1:10cc70b:     public String getName() {
1:10cc70b:         return this.name;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the encoding used to represent characters as bytes.
1:10cc70b:      */
1:10cc70b:     public String getEncoding() {
1:10cc70b:         return this.encoding;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the number of characters in the alphabet.
1:10cc70b:      */
1:10cc70b:     public int charCount() {
1:10cc70b:         return charCount;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the number of bytes in the alphabet.
1:10cc70b:      *
1:10cc70b:      * The number of bytes in the alphabet is noramlly different from the
1:10cc70b:      * number of characters in the alphabet, but it depends on the
1:10cc70b:      * characters in the alphabet and encoding used to represent them as
1:10cc70b:      * bytes.
1:10cc70b:      */
1:10cc70b:     public int byteCount() {
1:10cc70b:         return byteCount;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return the next byte in the alphabet.
1:10cc70b:      */
1:10cc70b:     public byte nextByte() {
1:10cc70b:         if (boff >= byteCount) {
1:10cc70b:             boff = 0;
1:10cc70b:         }
1:10cc70b:         return bytes[boff++];
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Reset the alphabet, the next byte returned is the first byte in the
1:10cc70b:      * alphabet, which might not be a complete character.
1:10cc70b:      */
1:10cc70b:     public void reset() {
1:10cc70b:         boff = 0;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Compute the next byte to read after reading the specified number
1:10cc70b:      * of bytes.
1:10cc70b:      *
1:10cc70b:      * Besides from returning the index, the internal state of
1:10cc70b:      * the alphabet is updated.
1:10cc70b:      *
1:10cc70b:      * @param bytesRead the number of bytes read
1:10cc70b:      * @return the index of the next byte
1:10cc70b:      */
1:10cc70b:     public int nextByteToRead(int bytesRead) {
1:10cc70b:         boff = (boff + (bytesRead % byteCount)) % byteCount;
1:10cc70b:         return boff;
1:10cc70b:     }
1:10cc70b: } // End class ByteAlphabet
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0881157
/////////////////////////////////////////////////////////////////////////
1:      * Create an alphabet that consists of a single byte.
1:      */
1:     public static ByteAlphabet singleByte(byte b) {
1:         return new ByteAlphabet(
1:                 "Single byte: " + b,
1:                 new char[] { (char) (b & 0xff) },
1:                 "US-ASCII");
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:         this.byteCount = tmpBytes.length;
commit:10cc70b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.streams;
1: 
1: import java.io.UnsupportedEncodingException;
1: 
1: /**
1:  * A looping alphabet, returning bytes in a specified encoding.
1:  *
1:  * The alphabet loops over a list of bytes representing characters. The
1:  * alphabet-object is used by looping stream, which in turn is used for testing
1:  * methods requiring streaming inputs.
1:  *
1:  * The following alphabets have been defined:
1:  * <ul><li><em>Modern latin, lowercase</em> ; letters a - z (26)
1:  *     <li><em>Norwegian/Danish, lowercase</em> ; letters a - z, plus three
1:  *         additional letters (29)
1:  *     <li><em>Tamil</em> ; 46 Tamil letters from UNICODE U0B80
1:  *     <li><em>CJK subset</em> ; 12 letter from UNICODE CJK U4E00 
1:  * </ul>
1:  */
1: public class ByteAlphabet {
1: 
1:     /** The name of the alphabet. */
1:     private final String name;
1:     /** The encoding used to represent characters as bytes. */
1:     private final String encoding;
1:     /** The bytes representing the characters in the alphabet. */
1:     private final byte[] bytes;
1:     /** The number of characters in the alphabet. */
1:     private final int charCount;
1:     /** The number of byes in the alphabet. */
1:     private final int byteCount;
1:     /** Offset into the byte array. */
1:     private int boff = 0;
1: 
1:     /**
1:      * Create an alphabet returning bytes representing the lowercase letters
1:      * a-z in the "US-ASCII" encoding.
1:      */
1:     public static ByteAlphabet modernLatinLowercase() {
1:         return new ByteAlphabet("Modern latin lowercase, US-ASCII",
1:                             CharAlphabet.MODERNLATINLOWER,
1:                             "US-ASCII");
1:     }
1: 
1:     /**
1:      * Create an alphabet returning bytes representing the 29 lowercase
1:      * letters in the Norwegian/Danish alphabet in the "ISO-8859-1" encoding.
1:      */
1:     public static ByteAlphabet norwegianLowercase() {
1:         return new ByteAlphabet("Norwegian/Danish lowercase, ISO-8859-1",
1:                         CharAlphabet.NO_DK_LOWER,
1:                         "ISO-8859-1");
1:     }
1: 
1:     /**
1:      * Create an alphabet returning bytes representing a subset of the Tamil
1:      * alphabet in the UTF-8 encoding.
1:      */
1:     public static ByteAlphabet tamilUTF8() {
1:         return new ByteAlphabet("Tamil, UTF-8",
1:                         CharAlphabet.TAMIL,
1:                         "UTF8");
1:     }
1: 
1:     /**
1:      * Create an alphabet returning bytes representing a subset of the Tamil
1:      * alphabet in the UTF-16BE encoding.
1:      */
1:     public static ByteAlphabet tamilUTF16BE() {
1:         return new ByteAlphabet("Tamil, UTF-16BE",
1:                         CharAlphabet.TAMIL,
1:                         "UTF-16BE");
1:     }
1: 
1:     /**
1:      * Create an alphabet returning bytes representing a subset of the CJK
1:      * alphabet in the UTF-8 encoding.
1:      */
1:     public static ByteAlphabet cjkSubsetUTF8() {
1:         return new ByteAlphabet("CJK subset, UTF-8",
1:                         CharAlphabet.CJKSUBSET,
1:                         "UTF8");
1:     }
1: 
1:     /**
1:      * Create an alphabet returning bytes representing a subset of the CJK
1:      * alphabet in the UTF-16BE encoding.
1:      */
1:     public static ByteAlphabet cjkSubsetUTF16BE() {
1:         return new ByteAlphabet("CJK subset, UTF-16BE",
1:                         CharAlphabet.CJKSUBSET,
1:                         "UTF-16BE");
1:     }
1: 
1:     /**
1:      * Create an alphabet with the given name, the given characters and using
1:      * the specified encoding to represent the characters as bytes.
1:      *
1:      * @param name the name of the alphabet
1:      * @param chars the characters in the alphabet
1:      * @param encoding the encoding to use to represent characters as bytes
1:      */
1:     private ByteAlphabet(String name, char[] chars, String encoding) {
1:         this.name = name;
1:         this.encoding = encoding;
1:         this.charCount = chars.length;
1:         String tmpStr = new String(chars);
1:         byte[] tmpBytes;
0:         int tmpByteCount;
1:         try {
1:             tmpBytes = tmpStr.getBytes(encoding);
0:             tmpByteCount = tmpBytes.length;
1:         } catch (UnsupportedEncodingException uee) {
1:             // We are nasty and ignore this...
1:             tmpBytes = new byte[] {0};
0:             tmpByteCount = 1;
1:         }
1:         this.bytes = tmpBytes;
0:         this.byteCount = tmpByteCount;
1:     }
1: 
1:     /**
1:      * Return the name of the alphabet.
1:      */
1:     public String getName() {
1:         return this.name;
1:     }
1: 
1:     /**
1:      * Return the encoding used to represent characters as bytes.
1:      */
1:     public String getEncoding() {
1:         return this.encoding;
1:     }
1: 
1:     /**
1:      * Return the number of characters in the alphabet.
1:      */
1:     public int charCount() {
1:         return charCount;
1:     }
1: 
1:     /**
1:      * Return the number of bytes in the alphabet.
1:      *
1:      * The number of bytes in the alphabet is noramlly different from the
1:      * number of characters in the alphabet, but it depends on the
1:      * characters in the alphabet and encoding used to represent them as
1:      * bytes.
1:      */
1:     public int byteCount() {
1:         return byteCount;
1:     }
1: 
1:     /**
1:      * Return the next byte in the alphabet.
1:      */
1:     public byte nextByte() {
1:         if (boff >= byteCount) {
1:             boff = 0;
1:         }
1:         return bytes[boff++]; 
1:     }
1:     
1:     /**
1:      * Reset the alphabet, the next byte returned is the first byte in the
1:      * alphabet, which might not be a complete character.
1:      */
1:     public void reset() {
1:         boff = 0;
1:     }
1: 
1:     /**
1:      * Compute the next byte to read after reading the specified number
1:      * of bytes. 
1:      *
1:      * Besides from returning the index, the internal state of
1:      * the alphabet is updated.
1:      *
1:      * @param bytesRead the number of bytes read
1:      * @return the index of the next byte
1:      */
1:     public int nextByteToRead(int bytesRead) {
1:         boff = (boff + (bytesRead % byteCount)) % byteCount;
1:         return boff;
1:     }
1: } // End class ByteAlphabet
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8ae64be
/////////////////////////////////////////////////////////////////////////
0:  *     <li><em>CJK subset</em> ; 12 letter from UNICODE CJK U4E00
/////////////////////////////////////////////////////////////////////////
0:         return bytes[boff++];
0: 
/////////////////////////////////////////////////////////////////////////
0:      * of bytes.
============================================================================