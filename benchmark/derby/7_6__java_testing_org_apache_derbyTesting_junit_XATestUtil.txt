1:6e10422: /*
5:6e10422: 
1:eddb67d:    Derby - Class org.apache.derbyTesting.junit.XATestUtil
1:6e10422: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:6e10422: 
1:6e10422:       http://www.apache.org/licenses/LICENSE-2.0
1:6e10422: 
1:6e10422:    Unless required by applicable law or agreed to in writing, software
1:6e10422:    distributed under the License is distributed on an "AS IS" BASIS,
1:6e10422:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e10422:    See the License for the specific language governing permissions and
1:6e10422:    limitations under the License.
1:6e10422: 
1:6e10422:  */
1:6e10422: 
1:bb29639: package org.apache.derbyTesting.junit;
1:6e10422: 
1:6e10422: import java.io.Serializable;
1:6e10422: import java.sql.Connection;
1:6e10422: import java.sql.ResultSet;
1:6e10422: import java.sql.SQLException;
1:6e10422: import java.sql.Statement;
1:8f0d45d: import java.util.Arrays;
1:6e10422: 
1:6e10422: import javax.transaction.xa.XAException;
1:6e10422: import javax.transaction.xa.Xid;
1:6e10422: 
1:2f455bb: // Note: this class is used as indicator class in sysinfo for the 
1:2f455bb: // presence of org.apache.derbyTesting package classes.
1:6e10422: public class XATestUtil {
1:6e10422:     
1:6e10422:     /**
1:6e10422:      * Return a new Xid for testing.
1:6e10422:     */
1:8f0d45d:     public static Xid getXid(int formatId, int b1, int b2) {
1:8f0d45d:         byte[] globalId = new byte[Xid.MAXGTRIDSIZE];
1:8f0d45d:         byte[] branchId = new byte[Xid.MAXBQUALSIZE];
1:8f0d45d: 
1:8f0d45d:         for (int i = 0; i < globalId.length; i++) {
1:8f0d45d:             globalId[i] = (byte) (b1 + i);
1:8f0d45d:         }
1:8f0d45d: 
1:8f0d45d:         for (int i = 0; i < branchId.length; i++) {
1:8f0d45d:             branchId[i] = (byte) (b2 + i);
1:8f0d45d:         }
1:8f0d45d: 
1:8f0d45d:         return getXid(formatId, globalId, branchId);
1:8f0d45d:     }
1:8f0d45d: 
1:8f0d45d:     public static Xid getXid(int formatId, byte[] globalId, byte[] branchId) {
1:8f0d45d:         return new utilXid(formatId, globalId, branchId);
4:6e10422:     }
1:6e10422:     
1:6e10422:     /**
1:6e10422:      * Dump an unexpected XAException.
1:6e10422:      * @param tag Useful info to print
1:6e10422:      * @param xae The exception
1:6e10422:      */
1:6e10422:     public static void dumpXAException(String tag, XAException xae) {
1:6e10422: 
1:6e10422:         System.out.println(tag + " : XAException - " + xae.getMessage()
1:6e10422:                 + " errorCode " + errorCode(xae));
1:6e10422:         xae.printStackTrace(System.out);
1:6e10422:     }
1:6e10422: 
1:6e10422:     /**
1:6e10422:      * Create a view that allows useful inspection of the active
1:6e10422:      * global transactions.
1:6e10422:     */
1:4c80863:     public static void createXATransactionView(Statement s) throws SQLException
1:6e10422:     {
1:6e10422:         s.execute(
1:6e10422:                 "create view XATESTUTIL.global_xactTable as " +
1:6e10422:                 "select  cast(global_xid as char(2)) as gxid," +
1:6e10422:                 " status, " +
1:e07f9c9:                 " CAST (case when first_instant is NULL then 'NULL' else 'false' end AS VARCHAR(8)) as readOnly, " +
1:6e10422:                 " cast (username as char(10)) as username, type " +
1:6e10422:                 " from syscs_diag.transaction_table");
1:6e10422:     }
1:6e10422:     
1:6e10422:     /**
1:6e10422:      * Display the active global transactions.
1:6e10422:      * @param conn
1:6e10422:      * @throws SQLException
1:6e10422:      */
1:bb29639:     public static void checkXATransactionView(Connection conn,String[][] expectedRows) throws SQLException
1:6e10422:     {
2:6e10422:         Statement s = conn.createStatement();
1:6e10422:         ResultSet rs = s.executeQuery(
1:6e10422:                 "select * from XATESTUTIL.global_xactTable where gxid is not null order by gxid");
1:bb29639:         if (expectedRows == null)
1:bb29639:             JDBC.assertEmpty(rs);
1:bb29639:         else
1:f2c5f97:             JDBC.assertUnorderedResultSet(rs, expectedRows);
1:6e10422:         rs.close();
1:6e10422:     }
1:6e10422:     
1:6e10422:     /**
1:6e10422:      * Return a string for the error code of the XAException.
1:6e10422:     */
1:6e10422:     public static String errorCode(XAException e)
1:6e10422:     {
1:6e10422:         String error;
1:6e10422:         switch(e.errorCode)
1:6e10422:         {
1:6e10422:         case XAException.XA_HEURCOM : error = "XA_HEURCOM "; break;
1:6e10422:         case XAException.XA_HEURHAZ : error = "XA_HEURHAZ"; break;
1:6e10422:         case XAException.XA_HEURMIX : error = "XA_HEURMIX"; break;
1:6e10422:         case XAException.XA_HEURRB : error = "XA_HEURRB "; break;
1:6e10422:         case XAException.XA_NOMIGRATE : error = "XA_NOMIGRATE "; break;
1:6e10422:         case XAException.XA_RBCOMMFAIL : error = "XA_RBCOMMFAIL "; break;
1:6e10422:         case XAException.XA_RBDEADLOCK : error = "XA_RBDEADLOCK "; break;
1:6e10422:         case XAException.XA_RBINTEGRITY : error = "XA_RBINTEGRITY "; break;
1:6e10422:         case XAException.XA_RBOTHER : error = "XA_RBOTHER "; break;
1:6e10422:         case XAException.XA_RBPROTO : error = "XA_RBPROTO "; break;
1:6e10422:         case XAException.XA_RBROLLBACK : error = "XA_RBROLLBACK "; break;
1:6e10422:         case XAException.XA_RBTIMEOUT : error = "XA_RBTIMEOUT "; break;
1:6e10422:         case XAException.XA_RBTRANSIENT : error = "XA_RBTRANSIENT "; break;
1:6e10422:         case XAException.XA_RDONLY : error = "XA_RDONLY "; break;
1:6e10422:         case XAException.XA_RETRY : error = "XA_RETRY "; break;
1:6e10422:         case XAException.XAER_ASYNC : error = "XAER_ASYNC "; break;
1:6e10422:         case XAException.XAER_DUPID : error = "XAER_DUPID "; break;
1:6e10422:         case XAException.XAER_INVAL : error = "XAER_INVAL "; break;
1:6e10422:         case XAException.XAER_NOTA : error = "XAER_NOTA "; break;
1:6e10422:         case XAException.XAER_OUTSIDE : error = "XAER_OUTSIDE "; break;
1:6e10422:         case XAException.XAER_PROTO : error = "XAER_PROTO "; break;
1:6e10422:         case XAException.XAER_RMERR : error = "XAER_RMERR "; break;
1:6e10422:         case XAException.XAER_RMFAIL : error = "XAER_RMFAIL "; break;
1:6e10422:         default: error = Integer.toString(e.errorCode); break;
1:6e10422:         }        
1:6e10422:         return error;
1:6e10422:     }
1:6e10422:     
1:6e10422: }
1:6e10422: /**
1:6e10422:  * Simple utility class implementation of Xid for tests.
1:6e10422:  *
1:6e10422:  */
1:6e10422: class utilXid implements Xid, Serializable {
1:6e10422:     private static final long serialVersionUID = 64467338100036L;
1:6e10422: 
1:6e10422:     private final int format_id;
1:6e10422: 
1:6e10422:     private byte[] global_id;
1:6e10422: 
1:6e10422:     private byte[] branch_id;
1:6e10422: 
1:8f0d45d:     utilXid(int format_id, byte[] global_id, byte[] branch_id) {
1:8f0d45d:         this.format_id = format_id;
1:8f0d45d:         this.global_id = global_id;
1:8f0d45d:         this.branch_id = branch_id;
1:6e10422:     }
1:6e10422: 
1:6e10422:     /**
1:6e10422:      * Obtain the format id part of the Xid.
1:6e10422:      * <p>
1:6e10422:      *
1:6e10422:      * @return Format identifier. O means the OSI CCR format.
1:6e10422:      **/
1:6e10422:     public int getFormatId() {
1:6e10422:         return (format_id);
1:6e10422:     }
1:6e10422: 
1:6e10422:     /**
1:6e10422:      * Obtain the global transaction identifier part of XID as an array of 
1:6e10422:      * bytes.
1:6e10422:      * <p>
1:6e10422:      *
1:6e10422:      * @return A byte array containing the global transaction identifier.
1:6e10422:      **/
1:6e10422:     public byte[] getGlobalTransactionId() {
1:6e10422:         return (global_id);
1:6e10422:     }
1:6e10422: 
1:6e10422:     /**
1:6e10422:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:6e10422:      * <p>
1:6e10422:      *
1:6e10422:      * @return A byte array containing the branch qualifier of the transaction.
1:6e10422:      **/
1:6e10422:     public byte[] getBranchQualifier() {
1:6e10422:         return (branch_id);
1:bb29639:     }
1:8f0d45d: 
1:8f0d45d:     public boolean equals(Object obj) {
1:8f0d45d:         boolean ret = false;
1:8f0d45d: 
1:8f0d45d:         if (obj instanceof utilXid) {
1:8f0d45d:             utilXid that = (utilXid) obj;
1:8f0d45d:             ret = this.format_id == that.format_id &&
1:8f0d45d:                     Arrays.equals(this.global_id, that.global_id) &&
1:8f0d45d:                     Arrays.equals(this.branch_id, that.branch_id);
1:8f0d45d:         }
1:8f0d45d: 
1:8f0d45d:         return ret;
1:8f0d45d:     }
1:8f0d45d: 
1:8f0d45d:     public int hashCode() {
1:8f0d45d:         int hash = 7;
1:8f0d45d:         hash = 41 * hash + this.format_id;
1:8f0d45d:         hash = 41 * hash + Arrays.hashCode(this.global_id);
1:8f0d45d:         hash = 41 * hash + Arrays.hashCode(this.branch_id);
1:8f0d45d:         return hash;
1:8f0d45d:     }
1:6e10422: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:2f455bb
/////////////////////////////////////////////////////////////////////////
1: // Note: this class is used as indicator class in sysinfo for the 
1: // presence of org.apache.derbyTesting package classes.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8f0d45d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:     public static Xid getXid(int formatId, int b1, int b2) {
1:         byte[] globalId = new byte[Xid.MAXGTRIDSIZE];
1:         byte[] branchId = new byte[Xid.MAXBQUALSIZE];
1: 
1:         for (int i = 0; i < globalId.length; i++) {
1:             globalId[i] = (byte) (b1 + i);
1:         }
1: 
1:         for (int i = 0; i < branchId.length; i++) {
1:             branchId[i] = (byte) (b2 + i);
1:         }
1: 
1:         return getXid(formatId, globalId, branchId);
1:     }
1: 
1:     public static Xid getXid(int formatId, byte[] globalId, byte[] branchId) {
1:         return new utilXid(formatId, globalId, branchId);
/////////////////////////////////////////////////////////////////////////
1:     utilXid(int format_id, byte[] global_id, byte[] branch_id) {
1:         this.format_id = format_id;
1:         this.global_id = global_id;
1:         this.branch_id = branch_id;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean equals(Object obj) {
1:         boolean ret = false;
1: 
1:         if (obj instanceof utilXid) {
1:             utilXid that = (utilXid) obj;
1:             ret = this.format_id == that.format_id &&
1:                     Arrays.equals(this.global_id, that.global_id) &&
1:                     Arrays.equals(this.branch_id, that.branch_id);
1:         }
1: 
1:         return ret;
1:     }
1: 
1:     public int hashCode() {
1:         int hash = 7;
1:         hash = 41 * hash + this.format_id;
1:         hash = 41 * hash + Arrays.hashCode(this.global_id);
1:         hash = 41 * hash + Arrays.hashCode(this.branch_id);
1:         return hash;
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eddb67d
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.junit.XATestUtil
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:f2c5f97
/////////////////////////////////////////////////////////////////////////
1:             JDBC.assertUnorderedResultSet(rs, expectedRows);
commit:bb29639
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.junit;
/////////////////////////////////////////////////////////////////////////
1:     public static void checkXATransactionView(Connection conn,String[][] expectedRows) throws SQLException
1:         if (expectedRows == null)
1:             JDBC.assertEmpty(rs);
1:         else
0:             JDBC.assertFullResultSet(rs, expectedRows);
/////////////////////////////////////////////////////////////////////////
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9c86d82
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4c80863
/////////////////////////////////////////////////////////////////////////
1:     public static void createXATransactionView(Statement s) throws SQLException
/////////////////////////////////////////////////////////////////////////
commit:e07f9c9
/////////////////////////////////////////////////////////////////////////
1:                 " CAST (case when first_instant is NULL then 'NULL' else 'false' end AS VARCHAR(8)) as readOnly, " +
commit:6e10422
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.impl.services.bytecode.CodeChunk
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.Serializable;
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.Xid;
1: 
0: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: public class XATestUtil {
1:     
1:     /**
1:      * Return a new Xid for testing.
1:     */
0:     public static Xid getXid(int xid, int b1, int b2) {
0:         return new utilXid(xid, b1, b2);
1:     }
1:     
1:     /**
1:      * Dump an unexpected XAException.
1:      * @param tag Useful info to print
1:      * @param xae The exception
1:      */
1:     public static void dumpXAException(String tag, XAException xae) {
1: 
1:         System.out.println(tag + " : XAException - " + xae.getMessage()
1:                 + " errorCode " + errorCode(xae));
1:         xae.printStackTrace(System.out);
1:     }
1: 
1:     /**
1:      * Create a view that allows useful inspection of the active
1:      * global transactions.
1:     */
0:     public static void createXATransactionView(Connection conn) throws SQLException
1:     {
1:         Statement s = conn.createStatement();
1:         s.execute(
1:                 "create view XATESTUTIL.global_xactTable as " +
1:                 "select  cast(global_xid as char(2)) as gxid," +
1:                 " status, " +
0:                 " case when first_instant is NULL then 'NULL' else 'false' end as readOnly, " +
1:                 " cast (username as char(10)) as username, type " +
1:                 " from syscs_diag.transaction_table");
0:         s.close();
1:     }
1:     
1:     /**
1:      * Display the active global transactions.
1:      * @param conn
1:      * @throws SQLException
1:      */
0:     public static void showXATransactionView(Connection conn) throws SQLException
1:     {
1:         Statement s = conn.createStatement();
1:         ResultSet rs = s.executeQuery(
1:                 "select * from XATESTUTIL.global_xactTable where gxid is not null order by gxid");
0:         JDBCDisplayUtil.DisplayResults(System.out, rs, conn);
1:         rs.close();
1:     }
1:     
1:     /**
1:      * Return a string for the error code of the XAException.
1:     */
1:     public static String errorCode(XAException e)
1:     {
1:         String error;
1:         switch(e.errorCode)
1:         {
1:         case XAException.XA_HEURCOM : error = "XA_HEURCOM "; break;
1:         case XAException.XA_HEURHAZ : error = "XA_HEURHAZ"; break;
1:         case XAException.XA_HEURMIX : error = "XA_HEURMIX"; break;
1:         case XAException.XA_HEURRB : error = "XA_HEURRB "; break;
1:         case XAException.XA_NOMIGRATE : error = "XA_NOMIGRATE "; break;
1:         case XAException.XA_RBCOMMFAIL : error = "XA_RBCOMMFAIL "; break;
1:         case XAException.XA_RBDEADLOCK : error = "XA_RBDEADLOCK "; break;
1:         case XAException.XA_RBINTEGRITY : error = "XA_RBINTEGRITY "; break;
1:         case XAException.XA_RBOTHER : error = "XA_RBOTHER "; break;
1:         case XAException.XA_RBPROTO : error = "XA_RBPROTO "; break;
1:         case XAException.XA_RBROLLBACK : error = "XA_RBROLLBACK "; break;
1:         case XAException.XA_RBTIMEOUT : error = "XA_RBTIMEOUT "; break;
1:         case XAException.XA_RBTRANSIENT : error = "XA_RBTRANSIENT "; break;
1:         case XAException.XA_RDONLY : error = "XA_RDONLY "; break;
1:         case XAException.XA_RETRY : error = "XA_RETRY "; break;
1:         case XAException.XAER_ASYNC : error = "XAER_ASYNC "; break;
1:         case XAException.XAER_DUPID : error = "XAER_DUPID "; break;
1:         case XAException.XAER_INVAL : error = "XAER_INVAL "; break;
1:         case XAException.XAER_NOTA : error = "XAER_NOTA "; break;
1:         case XAException.XAER_OUTSIDE : error = "XAER_OUTSIDE "; break;
1:         case XAException.XAER_PROTO : error = "XAER_PROTO "; break;
1:         case XAException.XAER_RMERR : error = "XAER_RMERR "; break;
1:         case XAException.XAER_RMFAIL : error = "XAER_RMFAIL "; break;
1:         default: error = Integer.toString(e.errorCode); break;
1:         }        
1:         return error;
1:     }
1:     
1: }
1: /**
1:  * Simple utility class implementation of Xid for tests.
1:  *
1:  */
1: class utilXid implements Xid, Serializable {
1:     private static final long serialVersionUID = 64467338100036L;
1: 
1:     private final int format_id;
1: 
1:     private byte[] global_id;
1: 
1:     private byte[] branch_id;
1: 
0:     utilXid(int xid, int b1, int b2) {
0:         format_id = xid;
0:         global_id = new byte[Xid.MAXGTRIDSIZE];
0:         branch_id = new byte[Xid.MAXBQUALSIZE];
1: 
0:         for (int i = 0; i < global_id.length; i++) {
0:             global_id[i] = (byte) (b1 + i);
1:         }
1: 
0:         for (int i = 0; i < branch_id.length; i++) {
0:             branch_id[i] = (byte) (b2 + i);
1:         }
1:     }
1: 
1:     /**
1:      * Obtain the format id part of the Xid.
1:      * <p>
1:      *
1:      * @return Format identifier. O means the OSI CCR format.
1:      **/
1:     public int getFormatId() {
1:         return (format_id);
1:     }
1: 
1:     /**
1:      * Obtain the global transaction identifier part of XID as an array of 
1:      * bytes.
1:      * <p>
1:      *
1:      * @return A byte array containing the global transaction identifier.
1:      **/
1:     public byte[] getGlobalTransactionId() {
1:         return (global_id);
1:     }
1: 
1:     /**
1:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:      * <p>
1:      *
1:      * @return A byte array containing the branch qualifier of the transaction.
1:      **/
1:     public byte[] getBranchQualifier() {
1:         return (branch_id);
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
============================================================================