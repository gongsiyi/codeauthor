1:80eb35f: /*
2:80eb35f: 
1:80eb35f:    Derby - Class org.apache.derby.impl.sql.execute.DropSequenceConstantAction
1:80eb35f: 
1:80eb35f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:80eb35f:    contributor license agreements.  See the NOTICE file distributed with
1:80eb35f:    this work for additional information regarding copyright ownership.
1:80eb35f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:80eb35f:    (the "License"); you may not use this file except in compliance with
1:80eb35f:    the License.  You may obtain a copy of the License at
1:80eb35f: 
1:80eb35f:       http://www.apache.org/licenses/LICENSE-2.0
1:80eb35f: 
1:80eb35f:    Unless required by applicable law or agreed to in writing, software
1:80eb35f:    distributed under the License is distributed on an "AS IS" BASIS,
1:80eb35f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80eb35f:    See the License for the specific language governing permissions and
1:80eb35f:    limitations under the License.
1:80eb35f: 
1:80eb35f:  */
1:80eb35f: 
1:80eb35f: package org.apache.derby.impl.sql.execute;
1:80eb35f: 
1:80eb35f: import org.apache.derby.iapi.error.StandardException;
1:80eb35f: import org.apache.derby.iapi.sql.Activation;
1:80eb35f: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:80eb35f: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:80eb35f: import org.apache.derby.iapi.store.access.TransactionController;
1:80eb35f: import org.apache.derby.shared.common.reference.SQLState;
1:80eb35f: 
1:80eb35f: /**
1:80eb35f:  * This class  describes actions that are ALWAYS performed for a
1:80eb35f:  * DROP SEQUENCE Statement at Execution time.
1:80eb35f:  */
1:80eb35f: 
1:80eb35f: class DropSequenceConstantAction extends DDLConstantAction {
1:80eb35f: 
1:80eb35f: 
1:80eb35f:     private final String sequenceName;
1:80eb35f:     private final SchemaDescriptor schemaDescriptor;
1:80eb35f: 
1:80eb35f:     // CONSTRUCTORS
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * Make the ConstantAction for a DROP SEQUENCE statement.
1:80eb35f:      *
1:80eb35f:      * @param sequenceName sequence name to be dropped
1:80eb35f:      */
1:80eb35f:     DropSequenceConstantAction(SchemaDescriptor sd, String sequenceName) {
1:80eb35f:         this.sequenceName = sequenceName;
1:80eb35f:         this.schemaDescriptor = sd;
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     ///////////////////////////////////////////////
1:80eb35f:     //
1:80eb35f:     // OBJECT SHADOWS
1:80eb35f:     //
1:80eb35f:     ///////////////////////////////////////////////
1:80eb35f: 
1:80eb35f:     public String toString() {
1:80eb35f:         // Do not put this under SanityManager.DEBUG - it is needed for
1:80eb35f:         // error reporting.
1:80eb35f:         return "DROP SEQUENCE " + sequenceName;
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     // INTERFACE METHODS
1:80eb35f: 
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * This is the guts of the Execution-time logic for DROP SEQUENCE.
1:80eb35f:      *
1:80eb35f:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
1:80eb35f:      */
1:80eb35f:     public void executeConstantAction(Activation activation)
1:80eb35f:             throws StandardException {
1:80eb35f:         LanguageConnectionContext lcc =
1:80eb35f:                 activation.getLanguageConnectionContext();
1:80eb35f:         DataDictionary dd = lcc.getDataDictionary();
1:80eb35f:         TransactionController tc = lcc.getTransactionExecute();
1:80eb35f: 
1:80eb35f:         /*
1:80eb35f:         ** Inform the data dictionary that we are about to write to it.
1:80eb35f:         ** There are several calls to data dictionary "get" methods here
1:80eb35f:         ** that might be done in "read" mode in the data dictionary, but
1:80eb35f:         ** it seemed safer to do this whole operation in "write" mode.
1:80eb35f:         **
1:80eb35f:         ** We tell the data dictionary we're done writing at the end of
1:80eb35f:         ** the transaction.
1:80eb35f:         */
1:80eb35f:         dd.startWriting(lcc);
1:fac3fe7:         dd.clearSequenceCaches();
1:80eb35f: 
1:80eb35f:         SequenceDescriptor sequenceDescriptor = dd.getSequenceDescriptor(schemaDescriptor, sequenceName);
1:80eb35f: 
1:80eb35f:         if (sequenceDescriptor == null) {
1:80eb35f: 
1:80eb35f:             throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND_DURING_EXECUTION, "SEQUENCE",
1:80eb35f:                     (schemaDescriptor.getObjectName() + "." + sequenceName));
1:80eb35f:         }
1:80eb35f: 
1:80eb35f:         sequenceDescriptor.drop(lcc);
1:80eb35f:     }
1:80eb35f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fac3fe7
/////////////////////////////////////////////////////////////////////////
1:         dd.clearSequenceCaches();
/////////////////////////////////////////////////////////////////////////
commit:80eb35f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.DropSequenceConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: /**
1:  * This class  describes actions that are ALWAYS performed for a
1:  * DROP SEQUENCE Statement at Execution time.
1:  */
1: 
1: class DropSequenceConstantAction extends DDLConstantAction {
1: 
1: 
1:     private final String sequenceName;
1:     private final SchemaDescriptor schemaDescriptor;
1: 
1:     // CONSTRUCTORS
1: 
1:     /**
1:      * Make the ConstantAction for a DROP SEQUENCE statement.
1:      *
1:      * @param sequenceName sequence name to be dropped
1:      */
1:     DropSequenceConstantAction(SchemaDescriptor sd, String sequenceName) {
1:         this.sequenceName = sequenceName;
1:         this.schemaDescriptor = sd;
1:     }
1: 
1:     ///////////////////////////////////////////////
1:     //
1:     // OBJECT SHADOWS
1:     //
1:     ///////////////////////////////////////////////
1: 
1:     public String toString() {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1:         return "DROP SEQUENCE " + sequenceName;
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1: 
1:     /**
1:      * This is the guts of the Execution-time logic for DROP SEQUENCE.
1:      *
1:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
1:      */
1:     public void executeConstantAction(Activation activation)
1:             throws StandardException {
1:         LanguageConnectionContext lcc =
1:                 activation.getLanguageConnectionContext();
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
1:         /*
1:         ** Inform the data dictionary that we are about to write to it.
1:         ** There are several calls to data dictionary "get" methods here
1:         ** that might be done in "read" mode in the data dictionary, but
1:         ** it seemed safer to do this whole operation in "write" mode.
1:         **
1:         ** We tell the data dictionary we're done writing at the end of
1:         ** the transaction.
1:         */
1:         dd.startWriting(lcc);
1: 
1:         SequenceDescriptor sequenceDescriptor = dd.getSequenceDescriptor(schemaDescriptor, sequenceName);
1: 
1:         if (sequenceDescriptor == null) {
1: 
1:             throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND_DURING_EXECUTION, "SEQUENCE",
1:                     (schemaDescriptor.getObjectName() + "." + sequenceName));
1:         }
1: 
1:         sequenceDescriptor.drop(lcc);
1: 
1:     }
1: }
============================================================================