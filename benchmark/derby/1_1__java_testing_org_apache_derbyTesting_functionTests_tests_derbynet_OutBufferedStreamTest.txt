1:780767d: /*
1:780767d: 
1:780767d: Derby -
1:780767d: Class org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStreamTest
1:780767d: 
1:780767d: Licensed to the Apache Software Foundation (ASF) under one or more
1:780767d: contributor license agreements.  See the NOTICE file distributed with
1:780767d: this work for additional information regarding copyright ownership.
1:780767d: The ASF licenses this file to You under the Apache License, Version 2.0
1:780767d: (the "License"); you may not use this file except in compliance with
1:780767d: the License.  You may obtain a copy of the License at
1:780767d: 
1:780767d: http://www.apache.org/licenses/LICENSE-2.0
1:780767d: 
1:780767d: Unless required by applicable law or agreed to in writing, software
1:780767d: distributed under the License is distributed on an "AS IS" BASIS,
1:780767d: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:780767d: See the License for the specific language governing permissions and
1:780767d: limitations under the License.
1:780767d: 
1:780767d:  */
1:780767d: 
1:780767d: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:780767d: 
1:780767d: import java.io.ByteArrayInputStream;
1:780767d: import java.io.IOException;
1:780767d: import java.io.InputStream;
1:780767d: import java.sql.PreparedStatement;
1:780767d: import java.sql.ResultSet;
1:780767d: import java.sql.SQLException;
1:780767d: import java.sql.Statement;
1:780767d: import java.util.Properties;
1:780767d: 
1:780767d: import junit.framework.Test;
1:780767d: 
1:780767d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:780767d: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:2301e09: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:780767d: import org.apache.derbyTesting.junit.TestConfiguration;
1:780767d: 
1:780767d: /**
1:780767d:  *
1:780767d:  * This program tests streaming a blob with derby.drda.streamOutBufferSize
1:780767d:  * configuration.
1:780767d:  *
1:780767d:  * When derby.drda.streamOutBufferSize is configured,
1:780767d:  * a buffer of configured size is placed at network server just before
1:780767d:  * sending the stream to the client.
1:780767d:  *
1:780767d:  * Buffer size is 131072
1:780767d:  */
1:780767d: public class OutBufferedStreamTest extends BaseJDBCTestCase {
1:780767d: 
1:780767d:     /**
1:780767d:      * This constructor takes the name of the test.
1:780767d:      *
1:780767d:      * @param name
1:780767d:      */
1:780767d:     public OutBufferedStreamTest(String name) {
1:780767d:         super(name);
1:780767d:     }
1:780767d: 
1:780767d:     /**
1:780767d:      * Returns the testsuite with a clientServerDecorator and a
1:780767d:      * CleanDatabaseTestSetup with a table. Also sets system property
1:780767d:      * derby.drda.streamOutBufferSize=131072.
1:780767d:      *
1:780767d:      * @return the testsuite
1:780767d:      */
1:780767d:     public static Test suite() {
1:2301e09:         Properties properties = new Properties();
1:2301e09:         properties.setProperty("derby.drda.streamOutBufferSize", "131072");
1:780767d: 
1:2301e09:         Test suite = TestConfiguration.clientServerSuite (OutBufferedStreamTest.class);
1:2301e09:         suite = new SystemPropertyTestSetup(suite, properties);
1:780767d: 
1:2301e09:         return new CleanDatabaseTestSetup(suite) {
1:780767d:             /**
1:780767d:              * Creates the table used in the test case.
1:780767d:              *
1:780767d:              * @throws SQLException
1:780767d:              */
1:780767d:             protected void decorateSQL(Statement s) throws SQLException {
1:780767d:                 /* Create a table */
1:780767d:                 s.execute("create table TEST_TABLE( TEST_COL blob( 65536 ))");
1:780767d:                 getConnection().commit();
1:780767d: 
1:780767d:             }
1:780767d:         };
1:780767d: 
1:780767d:     }
1:780767d: 
1:780767d:     /**
1:780767d:      *  This test inserts a blob of length 65536 containing the series 0-255
1:780767d:      *  256 times and then reads the data back and checks that it is correct.
1:780767d:      */
1:780767d:     public void testOutBufferStream() {
1:780767d: 
1:780767d:         try {
1:780767d:             PreparedStatement insertLobSt = prepareStatement(
1:780767d:                                 "insert into TEST_TABLE( TEST_COL ) values(?)");
1:780767d: 
1:780767d:             insertLobSt.setBinaryStream(1, createOriginalDataInputStream(65536),
1:780767d:                                                                          65536);
1:780767d:             insertLobSt.executeUpdate();
1:780767d:             insertLobSt.close();
1:780767d:             commit();
1:780767d: 
1:780767d:             PreparedStatement st = prepareStatement(
1:780767d:                                             "select TEST_COL from TEST_TABLE");
1:780767d:             ResultSet rs = st.executeQuery();
1:780767d: 
1:780767d:             rs.next();
1:780767d: 
1:780767d:             InputStream is = rs.getBinaryStream(1);
1:780767d: 
1:780767d:             int[][] expected = new int[256][256];
1:780767d:             int[][] actual = new int[256][256];
1:780767d: 
1:780767d:             //Build the expected array.
1:780767d:             for (int i = 0; i < 256; i++) {
1:780767d:                 for (int j = 0; j < 256; j++) {
1:780767d:                     expected[i][j] = j;
1:780767d:                 }
1:780767d:             }
1:780767d: 
1:780767d:             //Read data from the lob and build array.
1:780767d:             for (int i = 0; i < 256; i++) {
1:780767d:                 for (int j = 0; j < 256; j++) {
1:780767d:                     actual[i][j] = is.read();
1:780767d:                 }
1:780767d: 
1:780767d:             }
1:780767d: 
1:780767d:             //Assert that the arrays are equal.
1:780767d:             for (int i = 0; i < 256; i++) {
1:780767d:                 for (int j = 0; j < 256; j++) {
1:780767d:                     assertEquals("Not correct: Line " + i + " pos " + j,
1:780767d:                                  expected[i][j], actual[i][j]);
1:780767d:                 }
1:780767d:             }
1:780767d: 
1:780767d:             is.close();
1:780767d:             rs.close();
1:780767d:             st.close();
1:780767d:             commit();
1:780767d:         } catch (SQLException e) {
1:780767d:             e.printStackTrace();
1:780767d:         } catch (IOException e) {
1:780767d:             e.printStackTrace();
1:780767d:         }
1:780767d:     }
1:780767d: 
1:780767d:     /**
1:780767d:      * Build a ByteArrayInputStream of the given length, with values
1:780767d:      * from 0 t0 255 so they will fit into a byte.
1:780767d:      */
1:780767d:     private static ByteArrayInputStream createOriginalDataInputStream(int length) {
1:780767d: 
1:780767d:         byte[] originalValue = new byte[length];
1:780767d: 
1:780767d:         for (int i = 0; i < originalValue.length; i++) {
1:780767d:             originalValue[i] = (byte) (i % 256);
1:780767d:         }
1:780767d: 
1:780767d:         return new ByteArrayInputStream(originalValue);
1:780767d: 
1:780767d:     }
1:780767d: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:2301e09
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         Properties properties = new Properties();
1:         properties.setProperty("derby.drda.streamOutBufferSize", "131072");
1:         Test suite = TestConfiguration.clientServerSuite (OutBufferedStreamTest.class);
1:         suite = new SystemPropertyTestSetup(suite, properties);
1:         return new CleanDatabaseTestSetup(suite) {
commit:780767d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby -
1: Class org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStreamTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  *
1:  * This program tests streaming a blob with derby.drda.streamOutBufferSize
1:  * configuration.
1:  *
1:  * When derby.drda.streamOutBufferSize is configured,
1:  * a buffer of configured size is placed at network server just before
1:  * sending the stream to the client.
1:  *
1:  * Buffer size is 131072
1:  */
1: public class OutBufferedStreamTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * This constructor takes the name of the test.
1:      *
1:      * @param name
1:      */
1:     public OutBufferedStreamTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Returns the testsuite with a clientServerDecorator and a
1:      * CleanDatabaseTestSetup with a table. Also sets system property
1:      * derby.drda.streamOutBufferSize=131072.
1:      *
1:      * @return the testsuite
1:      */
1:     public static Test suite() {
0:         Properties sysprops = System.getProperties();
0:         sysprops.put("derby.drda.streamOutBufferSize", "131072");
1: 
0:         TestSuite s = new TestSuite("OutBufferedStreamTest");
0:         s.addTestSuite(OutBufferedStreamTest.class);
1: 
0:         return new CleanDatabaseTestSetup(
0:                                   TestConfiguration.clientServerDecorator(s)) {
1:             /**
1:              * Creates the table used in the test case.
1:              *
1:              * @throws SQLException
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 /* Create a table */
1:                 s.execute("create table TEST_TABLE( TEST_COL blob( 65536 ))");
1:                 getConnection().commit();
1: 
1:             }
1:         };
1: 
1:     }
1: 
1:     /**
1:      *  This test inserts a blob of length 65536 containing the series 0-255
1:      *  256 times and then reads the data back and checks that it is correct.
1:      */
1:     public void testOutBufferStream() {
1: 
1:         try {
1:             PreparedStatement insertLobSt = prepareStatement(
1:                                 "insert into TEST_TABLE( TEST_COL ) values(?)");
1: 
1:             insertLobSt.setBinaryStream(1, createOriginalDataInputStream(65536),
1:                                                                          65536);
1:             insertLobSt.executeUpdate();
1:             insertLobSt.close();
1:             commit();
1: 
1:             PreparedStatement st = prepareStatement(
1:                                             "select TEST_COL from TEST_TABLE");
1:             ResultSet rs = st.executeQuery();
1: 
1:             rs.next();
1: 
1:             InputStream is = rs.getBinaryStream(1);
1: 
1:             int[][] expected = new int[256][256];
1:             int[][] actual = new int[256][256];
1: 
1:             //Build the expected array.
1:             for (int i = 0; i < 256; i++) {
1:                 for (int j = 0; j < 256; j++) {
1:                     expected[i][j] = j;
1:                 }
1:             }
1: 
1:             //Read data from the lob and build array.
1:             for (int i = 0; i < 256; i++) {
1:                 for (int j = 0; j < 256; j++) {
1:                     actual[i][j] = is.read();
1:                 }
1: 
1:             }
1: 
1:             //Assert that the arrays are equal.
1:             for (int i = 0; i < 256; i++) {
1:                 for (int j = 0; j < 256; j++) {
1:                     assertEquals("Not correct: Line " + i + " pos " + j,
1:                                  expected[i][j], actual[i][j]);
1:                 }
1:             }
1: 
1:             is.close();
1:             rs.close();
1:             st.close();
1:             commit();
1:         } catch (SQLException e) {
1:             e.printStackTrace();
1:         } catch (IOException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     /**
1:      * Build a ByteArrayInputStream of the given length, with values
1:      * from 0 t0 255 so they will fit into a byte.
1:      */
1:     private static ByteArrayInputStream createOriginalDataInputStream(int length) {
1: 
1:         byte[] originalValue = new byte[length];
1: 
1:         for (int i = 0; i < originalValue.length; i++) {
1:             originalValue[i] = (byte) (i % 256);
1:         }
1: 
1:         return new ByteArrayInputStream(originalValue);
1: 
1:     }
1: }
============================================================================