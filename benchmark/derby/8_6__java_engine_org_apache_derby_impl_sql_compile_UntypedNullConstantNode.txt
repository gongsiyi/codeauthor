1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.UntypedNullConstantNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * An UntypedNullConstantNode represents a SQL NULL before it has
1:eac0369:  * been bound.  The bind() operation will replace the UntypedNullConstantNodes
1:eac0369:  * with typed ConstantNodes.
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class UntypedNullConstantNode extends ConstantNode
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Constructor for an UntypedNullConstantNode.  Untyped constants
1:eac0369: 	 * contain no state (not too surprising).
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:    UntypedNullConstantNode(ContextManager cm)
1:eac0369: 	{
1:3bb140c:        super(cm);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the length
1:eac0369: 	 *
1:eac0369: 	 * @return	The length of the value this node represents
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	//public int	getLength()
1:eac0369: 	//{
1:eac0369: 	//	if (SanityManager.DEBUG)
1:eac0369: 	//	SanityManager.ASSERT(false,
1:eac0369: 	//	  "Unimplemented method - should not be called on UntypedNullConstantNode");
1:eac0369: 	//	return 0;
1:eac0369: 	//}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Should never be called for UntypedNullConstantNode because
1:eac0369: 	 * we shouldn't make it to generate
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the expression will go into
1:eac0369: 	 */
1:eac0369: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.THROWASSERT("generateConstant() not expected to be called for UntypedNullConstantNode because we have implemented our own generateExpression().");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Translate a Default node into a default value, given a type descriptor.
1:eac0369: 	 *
1:eac0369: 	 * @param typeDescriptor	A description of the required data type.
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:    @Override
1:3bb140c:     DataValueDescriptor convertDefaultNode(DataTypeDescriptor typeDescriptor)
1:dbfbecb: 	throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** The default value is null, so set nullability to TRUE
1:eac0369: 		*/
1:eac0369: 		return typeDescriptor.getNull();
1:eac0369: 	}
1:eac0369: 	
1:2054f14: 	/** @see ValueNode#bindExpression(FromList, SubqueryList, List)
1:eac0369: 	 * @see ResultColumnList#bindUntypedNullsToResultColumns
1:eac0369: 	 * This does nothing-- the node is actually bound when
1:eac0369: 	 * bindUntypedNullsToResultColumns is called.
1:eac0369: 	 */
1:3bb140c:    @Override
1:3bb140c:     ValueNode bindExpression(FromList fromList,
1:3bb140c:                              SubqueryList subqueryList,
1:3bb140c:                              List<AggregateNode> aggregates)
1:eac0369: 	{
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
/////////////////////////////////////////////////////////////////////////
1:    UntypedNullConstantNode(ContextManager cm)
1:        super(cm);
0:         setNodeType(C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE);
/////////////////////////////////////////////////////////////////////////
1:    @Override
1:     DataValueDescriptor convertDefaultNode(DataTypeDescriptor typeDescriptor)
/////////////////////////////////////////////////////////////////////////
1:    @Override
1:     ValueNode bindExpression(FromList fromList,
1:                              SubqueryList subqueryList,
1:                              List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
0:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
commit:47d4a4c
/////////////////////////////////////////////////////////////////////////
commit:2054f14
/////////////////////////////////////////////////////////////////////////
1: 	/** @see ValueNode#bindExpression(FromList, SubqueryList, List)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public ValueNode bindExpression(
0:         FromList fromList, SubqueryList	subqueryList, List aggregateVector)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:dbfbecb
/////////////////////////////////////////////////////////////////////////
1: 	throws StandardException
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.UntypedNullConstantNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import java.util.Vector;
1: /**
1:  * An UntypedNullConstantNode represents a SQL NULL before it has
1:  * been bound.  The bind() operation will replace the UntypedNullConstantNodes
1:  * with typed ConstantNodes.
1:  */
1: 
1: public final class UntypedNullConstantNode extends ConstantNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Constructor for an UntypedNullConstantNode.  Untyped constants
1: 	 * contain no state (not too surprising).
1: 	 */
1: 
0: 	public UntypedNullConstantNode()
1: 	{
0: 		super();
1: 	}
1: 
1: 	/**
1: 	 * Return the length
1: 	 *
1: 	 * @return	The length of the value this node represents
1: 	 *
1: 	 */
1: 
1: 	//public int	getLength()
1: 	//{
1: 	//	if (SanityManager.DEBUG)
1: 	//	SanityManager.ASSERT(false,
1: 	//	  "Unimplemented method - should not be called on UntypedNullConstantNode");
1: 	//	return 0;
1: 	//}
1: 
1: 	/**
1: 	 * Should never be called for UntypedNullConstantNode because
1: 	 * we shouldn't make it to generate
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the expression will go into
1: 	 */
1: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.THROWASSERT("generateConstant() not expected to be called for UntypedNullConstantNode because we have implemented our own generateExpression().");
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Translate a Default node into a default value, given a type descriptor.
1: 	 *
1: 	 * @param typeDescriptor	A description of the required data type.
1: 	 *
1: 	 */
0: 	public DataValueDescriptor convertDefaultNode(DataTypeDescriptor typeDescriptor)
1: 	{
1: 		/*
1: 		** The default value is null, so set nullability to TRUE
1: 		*/
1: 		return typeDescriptor.getNull();
1: 	}
1: 	
0: 	/** @see ValueNode#bindExpression(FromList, SubqueryList, Vector)
1: 	 * @see ResultColumnList#bindUntypedNullsToResultColumns
1: 	 * This does nothing-- the node is actually bound when
1: 	 * bindUntypedNullsToResultColumns is called.
1: 	 */
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList	subqueryList, Vector aggregateVector)
1: 	{
1: 		return this;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import java.util.Vector;
0: /**
0:  * An UntypedNullConstantNode represents a SQL NULL before it has
0:  * been bound.  The bind() operation will replace the UntypedNullConstantNodes
0:  * with typed ConstantNodes.
0:  */
0: 
0: public final class UntypedNullConstantNode extends ConstantNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Constructor for an UntypedNullConstantNode.  Untyped constants
0: 	 * contain no state (not too surprising).
0: 	 */
0: 
0: 	public UntypedNullConstantNode()
0: 	{
0: 		super();
0: 	}
0: 
0: 	/**
0: 	 * Return the length
0: 	 *
0: 	 * @return	The length of the value this node represents
0: 	 *
0: 	 */
0: 
0: 	//public int	getLength()
0: 	//{
0: 	//	if (SanityManager.DEBUG)
0: 	//	SanityManager.ASSERT(false,
0: 	//	  "Unimplemented method - should not be called on UntypedNullConstantNode");
0: 	//	return 0;
0: 	//}
0: 
0: 	/**
0: 	 * Should never be called for UntypedNullConstantNode because
0: 	 * we shouldn't make it to generate
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the expression will go into
0: 	 */
0: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.THROWASSERT("generateConstant() not expected to be called for UntypedNullConstantNode because we have implemented our own generateExpression().");
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Translate a Default node into a default value, given a type descriptor.
0: 	 *
0: 	 * @param typeDescriptor	A description of the required data type.
0: 	 *
0: 	 */
0: 	public DataValueDescriptor convertDefaultNode(DataTypeDescriptor typeDescriptor)
0: 	{
0: 		/*
0: 		** The default value is null, so set nullability to TRUE
0: 		*/
0: 		return typeDescriptor.getNull();
0: 	}
0: 	
0: 	/** @see ValueNode#bindExpression(FromList, SubqueryList, Vector)
0: 	 * @see ResultColumnList#bindUntypedNullsToResultColumns
0: 	 * This does nothing-- the node is actually bound when
0: 	 * bindUntypedNullsToResultColumns is called.
0: 	 */
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList	subqueryList, Vector aggregateVector)
0: 	{
0: 		return this;
0: 	}
0: }
============================================================================