1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.ProcessStreamResult
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
21:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.io.*;
1:67614ad: import java.sql.Timestamp;
1:67614ad: 
1:67614ad: 
1:67614ad: public class ProcessStreamResult implements Runnable
2:67614ad: {
1:67614ad: 
1:fb605fe: 	protected InputStream in; 
1:fb605fe: 	protected OutputStreamWriter outStream;
1:fb605fe: 	// Encoding to be used to read output of test jvm process
1:fb605fe: 	protected String encoding;
1:02a8e2e: 
1:02a8e2e:     /**
1:02a8e2e:      * Flag to find out if the work was finished 
1:02a8e2e:      * successfully without being interrupted 
1:02a8e2e:      * in between because of a timeout setting
1:02a8e2e:      */
1:67614ad: 	protected boolean finished;
1:67614ad: 	protected IOException ioe;
1:67614ad: 	protected Thread myThread;
1:67614ad: 	protected long startTime;
1:02a8e2e:     
1:02a8e2e:     /**
1:02a8e2e:      * Flag to keep state of whether the myThread has timed out.
1:02a8e2e:      * When interrupted is true, the myThread will exit 
1:02a8e2e:      * from its work. 
1:02a8e2e:      */
1:67614ad: 	protected boolean interrupted;
1:02a8e2e:     
1:02a8e2e:     /**
1:02a8e2e:      * time in minutes for myThread to timeout in case it 
1:02a8e2e:      * has not finished its work before that.
1:02a8e2e:      * timeout handling only comes into effect only when Wait()
1:02a8e2e:      * is called.
1:02a8e2e:      */
1:67614ad: 	protected int timeout;
1:fb605fe: 
1:67614ad: 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
1:fb605fe: 		    String timemin) throws IOException, InterruptedException
1:fb605fe: 	{
1:958e256: 		this(in, bos, timemin, null, null);
1:fb605fe: 	}
1:958e256: 
1:fb605fe: 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
1:958e256: 	  String timemin, String inEncoding, String outEncoding)
1:958e256: 		throws IOException, InterruptedException
1:67614ad: 	{
1:67614ad: 		this.in = in;
1:958e256:         if (outEncoding == null) {
1:958e256:             this.outStream = new OutputStreamWriter(bos);
1:958e256:         } else {
1:958e256:             this.outStream = new OutputStreamWriter(bos, outEncoding);
1:958e256:         }
1:958e256:         this.encoding = inEncoding;
1:67614ad:         this.startTime = System.currentTimeMillis();
1:67614ad:         if (timemin != null)
1:67614ad:         {
1:39b3237:             Integer i = Integer.valueOf(timemin);
1:67614ad:             timeout = i.intValue();
3:67614ad:         }
1:67614ad:         else
1:67614ad:             timeout = 0;
1:67614ad: 		myThread = new Thread(this);
1:67614ad: 		myThread.setPriority(Thread.MIN_PRIORITY);
1:67614ad: 		myThread.start();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public void run()
1:67614ad: 	{
1:67614ad:         //System.out.println("Thread run... " + tname);
1:67614ad:         if ( in == null )
1:67614ad:         {
1:67614ad:             System.out.println("The inputstream is null");
1:67614ad:             System.exit(1);
1:67614ad:         }
1:67614ad:         
1:67614ad: 		try
1:67614ad: 		{
1:fb605fe: 			char[] ca = new char[1024];
1:67614ad: 			int valid;
1:67614ad: 			interrupted = false;
1:fb605fe: 			
1:fb605fe: 			// Create an InputStreamReader with encoding, if specified. 
1:fb605fe: 			// Otherwise, use default.
1:fb605fe: 			InputStreamReader inStream;
1:fb605fe: 			if(encoding != null)
1:fb605fe:         		inStream = new InputStreamReader(in, encoding);
1:fb605fe:         	else
1:fb605fe:         		inStream = new InputStreamReader(in);
1:fb605fe: 			
1:02a8e2e:             // keep reading from the stream as long as we have not 
1:02a8e2e:             // timed out
1:02a8e2e: 			while (((valid = inStream.read(ca, 0, ca.length)) != -1) &&
1:02a8e2e:                     !interrupted)
1:67614ad: 			{
1:67614ad: 			    //System.out.println("Still reading thread: " + tname);
1:67614ad: /*				if (timeout > 0) {
1:67614ad: 					long millis = System.currentTimeMillis();
1:67614ad: 
1:67614ad: 					long diff = millis - startTime;
1:67614ad: 
1:67614ad: 					int mins = (int) (diff / (1000 * 60));
1:67614ad: 
1:67614ad: 					if (mins > timeout) {
1:67614ad: 						System.out.println("Timeout, kill the thread... ");
1:67614ad: 						//myThread.dumpStack();
1:67614ad: 						synchronized (this)
1:67614ad: 						{
1:67614ad: 							interrupted = true;
1:67614ad: 							finished = true;
1:67614ad: 							notifyAll();
1:67614ad: 							return;
1:67614ad: 						}
1:67614ad: 					}
1:67614ad: 			    }
1:fb605fe: */    			outStream.write(ca, 0, valid);
1:fb605fe:     			outStream.flush();
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 		catch (IOException ioe)
1:67614ad: 		{
1:67614ad: 			//System.out.println(ioe);
1:67614ad: 			//ioe.printStackTrace();
1:67614ad: 		}
1:67614ad: 
1:02a8e2e:         // if we timed out, then just leave
1:02a8e2e:         if ( interrupted )
1:02a8e2e:             return;
1:02a8e2e:         
1:67614ad: 		synchronized (this)
1:67614ad: 		{
1:02a8e2e:             // successfully finished the work, notifyAll and leave.
1:67614ad: 			finished = true;
1:67614ad: 			notifyAll();
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:02a8e2e:     /**
1:02a8e2e:      * Wait till the myThread has finished its work or incase a timeout was set on this 
1:02a8e2e:      * object, then to set a flag to indicate the myThread to leave at the end of the 
1:02a8e2e:      * timeout period.
1:02a8e2e:      * 
1:02a8e2e:      * Behavior is as follows:
1:dbed020:      * 1) If timeout is set to a valid value (&gt;0) - in this case, if myThread has not
1:02a8e2e:      * finished its work by the time this method was called, then it will wait
1:02a8e2e:      * till the timeout has elapsed or if the myThread has finished its work.
1:02a8e2e:      * 
1:dbed020:      * 2)If timeout is not set ( &lt;= 0) - in this case, if myThread has not
1:02a8e2e:      * finished its work by the time this method was called, then it will wait
1:02a8e2e:      * till myThread has finished its work.
1:02a8e2e:      * 
1:02a8e2e:      * If timeout is set to a valid value, and the timeout amount of time has elapsed, 
1:02a8e2e:      * then the interrupted  flag is set to true to indicate that it is time for the 
1:02a8e2e:      * myThread to stop its work and leave.
1:02a8e2e:      *
1:02a8e2e:      * @return true if the timeout happened before myThread work was finished
1:02a8e2e:      *         else false
1:02a8e2e:      * @throws IOException
1:02a8e2e:      */
1:67614ad: 	public boolean Wait() throws IOException
1:67614ad: 	{
1:67614ad: 	    synchronized(this)
1:67614ad: 	    {
1:02a8e2e:             // It is possible that we have finished the work 
1:02a8e2e:             // by the time this method Wait() was called,
1:02a8e2e:             // so need to check if that is the case, before we
1:02a8e2e:             // go into a wait.
1:02a8e2e:             if ( finished )
1:02a8e2e:                 return interrupted;
1:02a8e2e:             
1:67614ad: 			if (timeout > 0) {
1:67614ad: 				long millis = System.currentTimeMillis();
1:67614ad: 
1:67614ad: 				long diff = millis - startTime;
1:67614ad: 
1:67614ad: 				int mins = (int) (diff / (1000 * 60));
1:67614ad: 
1:67614ad: 				if (mins > timeout)
1:67614ad: 				{
1:02a8e2e:                     interrupted = true;
1:67614ad: 					return interrupted;
1:67614ad: 				}
1:67614ad: 			}
1:67614ad: 			try
1:67614ad: 			{
1:02a8e2e:                 // find timeout in milliseconds
1:02a8e2e:                 long timeoutms = timeout * 60 *1000L;
1:02a8e2e:                 
1:02a8e2e:                 if ( timeout > 0 )
1:02a8e2e:                     // wait till notified or till timeoutms has elapsed
1:02a8e2e:                     wait(timeoutms);
1:02a8e2e:                 else
1:02a8e2e:                     wait(); // wait till notified
1:02a8e2e:                 
1:02a8e2e:                 // if myThread didnt finish its work and we reached
1:02a8e2e:                 // here, that means we just timedout. 
1:02a8e2e:                 // In that case, indicate that we were interrupted and leave.
1:02a8e2e:                 // myThread will read the value of interrupted and 
1:02a8e2e:                 // stop its work and leave.
1:02a8e2e:     		    if ( !finished )
1:02a8e2e:                     interrupted = true;
1:02a8e2e:             }
1:67614ad: 			catch (InterruptedException ie)
1:67614ad: 			{
1:02a8e2e:                 interrupted = true;
1:67614ad: 				System.out.println("Interrupted: " + ie.toString());
1:67614ad: 			}
1:67614ad: 	    }
1:67614ad: 	    return interrupted;
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * 1) If timeout is set to a valid value (&gt;0) - in this case, if myThread has not
1:      * 2)If timeout is not set ( &lt;= 0) - in this case, if myThread has not
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             Integer i = Integer.valueOf(timemin);
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:02a8e2e
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Flag to find out if the work was finished 
1:      * successfully without being interrupted 
1:      * in between because of a timeout setting
1:      */
1:     
1:     /**
1:      * Flag to keep state of whether the myThread has timed out.
1:      * When interrupted is true, the myThread will exit 
1:      * from its work. 
1:      */
1:     
1:     /**
1:      * time in minutes for myThread to timeout in case it 
1:      * has not finished its work before that.
1:      * timeout handling only comes into effect only when Wait()
1:      * is called.
1:      */
/////////////////////////////////////////////////////////////////////////
1:             // keep reading from the stream as long as we have not 
1:             // timed out
1: 			while (((valid = inStream.read(ca, 0, ca.length)) != -1) &&
1:                     !interrupted)
/////////////////////////////////////////////////////////////////////////
1:         // if we timed out, then just leave
1:         if ( interrupted )
1:             return;
1:         
1:             // successfully finished the work, notifyAll and leave.
1:     /**
1:      * Wait till the myThread has finished its work or incase a timeout was set on this 
1:      * object, then to set a flag to indicate the myThread to leave at the end of the 
1:      * timeout period.
1:      * 
1:      * Behavior is as follows:
0:      * 1) If timeout is set to a valid value (>0) - in this case, if myThread has not
1:      * finished its work by the time this method was called, then it will wait
1:      * till the timeout has elapsed or if the myThread has finished its work.
1:      * 
0:      * 2)If timeout is not set ( <= 0) - in this case, if myThread has not
1:      * finished its work by the time this method was called, then it will wait
1:      * till myThread has finished its work.
1:      * 
1:      * If timeout is set to a valid value, and the timeout amount of time has elapsed, 
1:      * then the interrupted  flag is set to true to indicate that it is time for the 
1:      * myThread to stop its work and leave.
1:      *
1:      * @return true if the timeout happened before myThread work was finished
1:      *         else false
1:      * @throws IOException
1:      */
1:             // It is possible that we have finished the work 
1:             // by the time this method Wait() was called,
1:             // so need to check if that is the case, before we
1:             // go into a wait.
1:             if ( finished )
1:                 return interrupted;
1:             
/////////////////////////////////////////////////////////////////////////
1:                     interrupted = true;
1:                 // find timeout in milliseconds
1:                 long timeoutms = timeout * 60 *1000L;
1:                 
1:                 if ( timeout > 0 )
1:                     // wait till notified or till timeoutms has elapsed
1:                     wait(timeoutms);
1:                 else
1:                     wait(); // wait till notified
1:                 
1:                 // if myThread didnt finish its work and we reached
1:                 // here, that means we just timedout. 
1:                 // In that case, indicate that we were interrupted and leave.
1:                 // myThread will read the value of interrupted and 
1:                 // stop its work and leave.
1:     		    if ( !finished )
1:                     interrupted = true;
1:             }
1:                 interrupted = true;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:958e256
/////////////////////////////////////////////////////////////////////////
1: 		this(in, bos, timemin, null, null);
1: 
1: 	  String timemin, String inEncoding, String outEncoding)
1: 		throws IOException, InterruptedException
1:         if (outEncoding == null) {
1:             this.outStream = new OutputStreamWriter(bos);
1:         } else {
1:             this.outStream = new OutputStreamWriter(bos, outEncoding);
1:         }
1:         this.encoding = inEncoding;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:fb605fe
/////////////////////////////////////////////////////////////////////////
1: 	protected InputStream in; 
1: 	protected OutputStreamWriter outStream;
1: 	// Encoding to be used to read output of test jvm process
1: 	protected String encoding;
/////////////////////////////////////////////////////////////////////////
1: 		    String timemin) throws IOException, InterruptedException
1: 	{
0: 		this(in, bos, timemin, null);
1: 	}
1: 	
1: 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
0: 	  String timemin, String encoding) throws IOException, InterruptedException
0: 		this.outStream = new OutputStreamWriter(bos);
0: 		this.encoding = encoding;
/////////////////////////////////////////////////////////////////////////
1: 			char[] ca = new char[1024];
1: 			
1: 			// Create an InputStreamReader with encoding, if specified. 
1: 			// Otherwise, use default.
1: 			InputStreamReader inStream;
1: 			if(encoding != null)
1:         		inStream = new InputStreamReader(in, encoding);
1:         	else
1:         		inStream = new InputStreamReader(in);
1: 			
0: 			while ((valid = inStream.read(ca, 0, ca.length)) != -1)
/////////////////////////////////////////////////////////////////////////
1: */    			outStream.write(ca, 0, valid);
1:     			outStream.flush();
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.io.*;
1: import java.sql.Timestamp;
1: 
1: 
1: public class ProcessStreamResult implements Runnable
1: { 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
0: 	protected InputStream in;
0: 	protected BufferedOutputStream bos;
1: 	protected boolean finished;
1: 	protected IOException ioe;
1: 	protected Thread myThread;
1: 	protected long startTime;
1: 	protected boolean interrupted;
1: 	protected int timeout;
1: 
1: 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
0: 	    String timemin) throws IOException, InterruptedException
1: 	{
1: 		this.in = in;
0:         this.bos = bos;
1:         this.startTime = System.currentTimeMillis();
1:         if (timemin != null)
1:         {
0:             Integer i = new Integer(timemin);
1:             timeout = i.intValue();
1:         }
1:         else
1:             timeout = 0;
1: 		myThread = new Thread(this);
1: 		myThread.setPriority(Thread.MIN_PRIORITY);
1: 		myThread.start();
1: 	}
1: 
1: 	public void run()
1: 	{
1:         //System.out.println("Thread run... " + tname);
1:         if ( in == null )
1:         {
1:             System.out.println("The inputstream is null");
1:             System.exit(1);
1:         }
1:         
1: 		try
1: 		{
0: 			byte[] ba = new byte[1024];
1: 			int valid;
1: 			interrupted = false;
0: 			while ((valid = in.read(ba, 0, ba.length)) != -1)
1: 			{
1: 			    //System.out.println("Still reading thread: " + tname);
1: /*				if (timeout > 0) {
1: 					long millis = System.currentTimeMillis();
1: 
1: 					long diff = millis - startTime;
1: 
1: 					int mins = (int) (diff / (1000 * 60));
1: 
1: 					if (mins > timeout) {
1: 						System.out.println("Timeout, kill the thread... ");
1: 						//myThread.dumpStack();
1: 						synchronized (this)
1: 						{
1: 							interrupted = true;
1: 							finished = true;
1: 							notifyAll();
1: 							return;
1: 						}
1: 					}
1: 			    }
0: */    			bos.write(ba, 0, valid);
0:     			bos.flush();
1: 			}
1: 		}
1: 		catch (IOException ioe)
1: 		{
1: 			//System.out.println(ioe);
1: 			//ioe.printStackTrace();
1: 		}
1: 
1: 		synchronized (this)
1: 		{
1: 			finished = true;
1: 			notifyAll();
1: 		}
1: 	}
1: 
1: 	public boolean Wait() throws IOException
1: 	{
1: 	    synchronized(this)
1: 	    {
1: 			if (timeout > 0) {
1: 				long millis = System.currentTimeMillis();
1: 
1: 				long diff = millis - startTime;
1: 
1: 				int mins = (int) (diff / (1000 * 60));
1: 
1: 				if (mins > timeout)
1: 				{
1: 					return interrupted;
1: 				}
1: 			}
1: 			try
1: 			{
0: 				while (!finished && !interrupted)
1: 				{
0: 					wait();
1: 				}
1: 			}
1: 			catch (InterruptedException ie)
1: 			{
1: 				System.out.println("Interrupted: " + ie.toString());
1: 			}
1: 	    }
1: 	    return interrupted;
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.ProcessStreamResult
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.io.*;
0: import java.sql.Timestamp;
1: 
1: 
0: public class ProcessStreamResult implements Runnable
0: {
1: 
0: 	protected InputStream in;
0: 	protected BufferedOutputStream bos;
0: 	protected boolean finished;
0: 	protected IOException ioe;
0: 	protected Thread myThread;
0: 	protected long startTime;
0: 	protected boolean interrupted;
0: 	protected int timeout;
1: 
0: 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
0: 	    String timemin) throws IOException, InterruptedException
0: 	{
0: 		this.in = in;
0:         this.bos = bos;
0:         this.startTime = System.currentTimeMillis();
0:         if (timemin != null)
0:         {
0:             Integer i = new Integer(timemin);
0:             timeout = i.intValue();
0:         }
0:         else
0:             timeout = 0;
0: 		myThread = new Thread(this);
0: 		myThread.setPriority(Thread.MIN_PRIORITY);
0: 		myThread.start();
0: 	}
1: 
0: 	public void run()
0: 	{
0:         //System.out.println("Thread run... " + tname);
0:         if ( in == null )
0:         {
0:             System.out.println("The inputstream is null");
0:             System.exit(1);
0:         }
1:         
0: 		try
0: 		{
0: 			byte[] ba = new byte[1024];
0: 			int valid;
0: 			interrupted = false;
0: 			while ((valid = in.read(ba, 0, ba.length)) != -1)
0: 			{
0: 			    //System.out.println("Still reading thread: " + tname);
0: /*				if (timeout > 0) {
0: 					long millis = System.currentTimeMillis();
1: 
0: 					long diff = millis - startTime;
1: 
0: 					int mins = (int) (diff / (1000 * 60));
1: 
0: 					if (mins > timeout) {
0: 						System.out.println("Timeout, kill the thread... ");
0: 						//myThread.dumpStack();
0: 						synchronized (this)
0: 						{
0: 							interrupted = true;
0: 							finished = true;
0: 							notifyAll();
0: 							return;
0: 						}
0: 					}
0: 			    }
0: */    			bos.write(ba, 0, valid);
0:     			bos.flush();
0: 			}
0: 		}
0: 		catch (IOException ioe)
0: 		{
0: 			//System.out.println(ioe);
0: 			//ioe.printStackTrace();
0: 		}
1: 
0: 		synchronized (this)
0: 		{
0: 			finished = true;
0: 			notifyAll();
0: 		}
0: 	}
1: 
0: 	public boolean Wait() throws IOException
0: 	{
0: 	    synchronized(this)
0: 	    {
0: 			if (timeout > 0) {
0: 				long millis = System.currentTimeMillis();
1: 
0: 				long diff = millis - startTime;
1: 
0: 				int mins = (int) (diff / (1000 * 60));
1: 
0: 				if (mins > timeout)
0: 				{
0: 					return interrupted;
0: 				}
0: 			}
0: 			try
0: 			{
0: 				while (!finished && !interrupted)
0: 				{
0: 					wait();
0: 				}
0: 			}
0: 			catch (InterruptedException ie)
0: 			{
0: 				System.out.println("Interrupted: " + ie.toString());
0: 			}
0: 	    }
0: 	    return interrupted;
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.ProcessStreamResult
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================