1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizerFactory
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This is simply the factory for creating an optimizer.
1:eac0369: 	<p>
1:eac0369: 	There is expected to be only one of these configured per database.
1:eac0369:  */
1:eac0369: 
1:5d24b1a: public interface OptimizerFactory {
1:eac0369: 	/**
1:eac0369: 		Module name for the monitor's module locating system.
1:eac0369: 	 */
1:eac0369: 	String MODULE = "org.apache.derby.iapi.sql.compile.OptimizerFactory";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Only one optimizer level should exist in the database, however, the
1:eac0369: 	 * connection may have multiple instances of that optimizer
1:eac0369: 	 * at a given time.
2:eac0369: 	 *
1:6b50965: 	 * @param optimizableList	The list of Optimizables to optimize.
1:eac0369: 	 * @param predicateList	The list of unassigned OptimizablePredicates.
1:eac0369: 	 * @param dDictionary	The DataDictionary to use.
1:eac0369: 	 * @param requiredRowOrdering	The required ordering of the rows to
1:eac0369: 	 *								come out of the optimized result set
1:eac0369: 	 * @param numTablesInQuery	The number of tables in the current query
1:a56ecfa: 	 * @param overridingPlan    (Optional) A complete plan specified by optimizer overrides. Must have been bound already.
1:eac0369: 	 * @param lcc			The LanguageConnectionContext
1:eac0369: 	 *
1:eac0369: 	 * RESOLVE - We probably want to pass a subquery list, once we define a
1:eac0369: 	 * new interface for them, so that the Optimizer can out where to attach
1:eac0369: 	 * the subqueries.
1:eac0369: 	 *
2:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public Optimizer getOptimizer( OptimizableList optimizableList,
1:eac0369: 								  OptimizablePredicateList predicateList,
1:eac0369: 								  DataDictionary dDictionary,
1:eac0369: 								  RequiredRowOrdering requiredRowOrdering,
1:eac0369: 								  int numTablesInQuery,
1:a56ecfa: 								  OptimizerPlan overridingPlan,
1:eac0369: 								  LanguageConnectionContext lcc)
2:eac0369: 			throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return a new CostEstimate.
1:eac0369: 	 */
1:6a270cb: 	public CostEstimate getCostEstimate();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not the optimizer associated with
1:eac0369: 	 * this factory supports optimizer trace.
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not the optimizer associated with
1:eac0369: 	 * this factory supports optimizer trace.
1:eac0369: 	 */
1:eac0369: 	public boolean supportsOptimizerTrace();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the maxMemoryPerTable setting, this is used in
1:eac0369: 	 * optimizer, as well as subquery materialization at run time.
1:eac0369: 	 *
1:eac0369: 	 * @return	maxMemoryPerTable value
1:eac0369: 	 */
1:eac0369: 	public int getMaxMemoryPerTable();
1:3bb140c: 
1:3bb140c:     /**
1:3bb140c:      * Tell whether to do join order optimization.
1:3bb140c:      *
1:3bb140c:      * @return  {@code true} means do join order optimization, {@code false}
1:3bb140c:      *          means don't do it.
1:3bb140c:      */
1:3bb140c:     public abstract boolean doJoinOrderOptimization();
1:3bb140c: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6a270cb
/////////////////////////////////////////////////////////////////////////
1: 	public CostEstimate getCostEstimate();
commit:a56ecfa
/////////////////////////////////////////////////////////////////////////
1: 	 * @param overridingPlan    (Optional) A complete plan specified by optimizer overrides. Must have been bound already.
/////////////////////////////////////////////////////////////////////////
1: 								  OptimizerPlan overridingPlan,
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Tell whether to do join order optimization.
1:      *
1:      * @return  {@code true} means do join order optimization, {@code false}
1:      *          means don't do it.
1:      */
1:     public abstract boolean doJoinOrderOptimization();
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param optimizableList	The list of Optimizables to optimize.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.OptimizerFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface OptimizerFactory {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	This is simply the factory for creating an optimizer.
1: 	<p>
1: 	There is expected to be only one of these configured per database.
1:  */
1: 
0: public interface OptimizerFactory { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 		Module name for the monitor's module locating system.
1: 	 */
1: 	String MODULE = "org.apache.derby.iapi.sql.compile.OptimizerFactory";
1: 
1: 	/**
1: 	 * Only one optimizer level should exist in the database, however, the
1: 	 * connection may have multiple instances of that optimizer
1: 	 * at a given time.
1: 	 *
0: 	 * @param ofc the optimizer context for the current connection
0: 	 * @param optimizable	The list of Optimizables to optimize.
1: 	 * @param predicateList	The list of unassigned OptimizablePredicates.
1: 	 * @param dDictionary	The DataDictionary to use.
1: 	 * @param requiredRowOrdering	The required ordering of the rows to
1: 	 *								come out of the optimized result set
1: 	 * @param numTablesInQuery	The number of tables in the current query
1: 	 * @param lcc			The LanguageConnectionContext
1: 	 *
1: 	 * RESOLVE - We probably want to pass a subquery list, once we define a
1: 	 * new interface for them, so that the Optimizer can out where to attach
1: 	 * the subqueries.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public Optimizer getOptimizer( OptimizableList optimizableList,
1: 								  OptimizablePredicateList predicateList,
1: 								  DataDictionary dDictionary,
1: 								  RequiredRowOrdering requiredRowOrdering,
1: 								  int numTablesInQuery,
1: 								  LanguageConnectionContext lcc)
1: 			throws StandardException;
1: 
1: 
1: 	/**
1: 	 * Return a new CostEstimate.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public CostEstimate getCostEstimate()
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * Return whether or not the optimizer associated with
1: 	 * this factory supports optimizer trace.
1: 	 *
1: 	 * @return Whether or not the optimizer associated with
1: 	 * this factory supports optimizer trace.
1: 	 */
1: 	public boolean supportsOptimizerTrace();
1: 
1: 	/**
1: 	 * Return the maxMemoryPerTable setting, this is used in
1: 	 * optimizer, as well as subquery materialization at run time.
1: 	 *
1: 	 * @return	maxMemoryPerTable value
1: 	 */
1: 	public int getMaxMemoryPerTable();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	This is simply the factory for creating an optimizer.
0: 	<p>
0: 	There is expected to be only one of these configured per database.
0:  */
0: 
0: public interface OptimizerFactory { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 		Module name for the monitor's module locating system.
0: 	 */
0: 	String MODULE = "org.apache.derby.iapi.sql.compile.OptimizerFactory";
0: 
0: 	/**
0: 	 * Only one optimizer level should exist in the database, however, the
0: 	 * connection may have multiple instances of that optimizer
0: 	 * at a given time.
0: 	 *
0: 	 * @param ofc the optimizer context for the current connection
0: 	 * @param optimizable	The list of Optimizables to optimize.
0: 	 * @param predicateList	The list of unassigned OptimizablePredicates.
0: 	 * @param dDictionary	The DataDictionary to use.
0: 	 * @param requiredRowOrdering	The required ordering of the rows to
0: 	 *								come out of the optimized result set
0: 	 * @param numTablesInQuery	The number of tables in the current query
0: 	 * @param lcc			The LanguageConnectionContext
0: 	 *
0: 	 * RESOLVE - We probably want to pass a subquery list, once we define a
0: 	 * new interface for them, so that the Optimizer can out where to attach
0: 	 * the subqueries.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public Optimizer getOptimizer( OptimizableList optimizableList,
0: 								  OptimizablePredicateList predicateList,
0: 								  DataDictionary dDictionary,
0: 								  RequiredRowOrdering requiredRowOrdering,
0: 								  int numTablesInQuery,
0: 								  LanguageConnectionContext lcc)
0: 			throws StandardException;
0: 
0: 
0: 	/**
0: 	 * Return a new CostEstimate.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public CostEstimate getCostEstimate()
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * Return whether or not the optimizer associated with
0: 	 * this factory supports optimizer trace.
0: 	 *
0: 	 * @return Whether or not the optimizer associated with
0: 	 * this factory supports optimizer trace.
0: 	 */
0: 	public boolean supportsOptimizerTrace();
0: 
0: 	/**
0: 	 * Return the maxMemoryPerTable setting, this is used in
0: 	 * optimizer, as well as subquery materialization at run time.
0: 	 *
0: 	 * @return	maxMemoryPerTable value
0: 	 */
0: 	public int getMaxMemoryPerTable();
0: }
============================================================================