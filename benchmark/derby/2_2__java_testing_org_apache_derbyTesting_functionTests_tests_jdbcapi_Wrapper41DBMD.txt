1:81ee700: /*
1:81ee700:  
1:81ee700:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Wrapper41DBMD
1:81ee700:  
1:81ee700:    Licensed to the Apache Software Foundation (ASF) under one or more
1:81ee700:    contributor license agreements.  See the NOTICE file distributed with
1:81ee700:    this work for additional information regarding copyright ownership.
1:81ee700:    The ASF licenses this file to you under the Apache License, Version 2.0
1:81ee700:    (the "License"); you may not use this file except in compliance with
1:81ee700:    the License.  You may obtain a copy of the License at
1:81ee700:  
1:81ee700:       http://www.apache.org/licenses/LICENSE-2.0
1:81ee700:  
1:81ee700:    Unless required by applicable law or agreed to in writing, software
1:81ee700:    distributed under the License is distributed on an "AS IS" BASIS,
1:81ee700:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81ee700:    See the License for the specific language governing permissions and
1:81ee700:    limitations under the License.
1:81ee700:  
1:81ee700:  */
1:81ee700: 
1:81ee700: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:81ee700: 
1:81ee700: import java.sql.SQLException;
1:81ee700: 
1:81ee700: import org.apache.derby.impl.jdbc.EmbedDatabaseMetaData;
1:69e3d06: import org.apache.derby.client.am.ClientDatabaseMetaData;
1:81ee700: 
1:81ee700: /**
1:81ee700:  * A wrapper around the new DatabaseMetaData methods added by JDBC 4.1.
1:81ee700:  * We can eliminate this class after Java 7 goes GA and we are allowed
1:81ee700:  * to use the Java 7 compiler to build our released versions of derbyTesting.jar.
1:81ee700:  */
1:81ee700: public  class   Wrapper41DBMD
1:81ee700: {
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700:     //
1:81ee700:     // STATE
1:81ee700:     //
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700: 
1:0be2189:     protected EmbedDatabaseMetaData    _embedded;
1:69e3d06:     protected ClientDatabaseMetaData      _netclient;
1:81ee700:     
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700:     //
1:81ee700:     // CONSTRUCTORS
1:81ee700:     //
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700: 
1:81ee700:     public Wrapper41DBMD( Object wrapped ) throws Exception
1:81ee700:     {
1:81ee700:         if ( wrapped instanceof EmbedDatabaseMetaData ) { _embedded = (EmbedDatabaseMetaData) wrapped; }
1:69e3d06:         else if ( wrapped instanceof ClientDatabaseMetaData ) { _netclient = (ClientDatabaseMetaData) wrapped; }
1:81ee700:         else { throw nothingWrapped(); }
1:81ee700:     }
1:81ee700:     
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700:     //
1:81ee700:     // JDBC 4.1 BEHAVIOR
1:81ee700:     //
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700: 
1:81ee700:     public  boolean    generatedKeyAlwaysReturned() throws SQLException
1:81ee700:     {
1:81ee700:         if ( _embedded != null ) { return _embedded.generatedKeyAlwaysReturned(); }
1:81ee700:         else if ( _netclient != null ) { return _netclient.generatedKeyAlwaysReturned(); }
1:81ee700:         else { throw nothingWrapped(); }
1:81ee700:     }
1:81ee700: 
1:81ee700:     public  java.sql.ResultSet    getPseudoColumns
1:81ee700:         ( String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern )
1:81ee700:         throws SQLException
1:81ee700:     {
1:81ee700:         if ( _embedded != null ) { return _embedded.getPseudoColumns( catalog, schemaPattern, tableNamePattern, columnNamePattern ); }
1:81ee700:         else if ( _netclient != null ) { return _netclient.getPseudoColumns( catalog, schemaPattern, tableNamePattern, columnNamePattern ); }
1:81ee700:         else { throw nothingWrapped(); }
1:81ee700:     }
1:81ee700: 
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700:     //
1:81ee700:     // OTHER PUBLIC BEHAVIOR
1:81ee700:     //
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700: 
1:81ee700:     public java.sql.DatabaseMetaData   getWrappedObject() throws SQLException
1:81ee700:     {
1:81ee700:         if ( _embedded != null ) { return _embedded; }
1:81ee700:         else if ( _netclient != null ) { return _netclient; }
1:81ee700:         else { throw nothingWrapped(); }
1:81ee700:     }
1:81ee700: 
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700:     //
1:81ee700:     // MINIONS
1:81ee700:     //
1:81ee700:     ///////////////////////////////////////////////////////////////////////
1:81ee700: 
1:0be2189:     protected SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1:81ee700: 
1:81ee700: }
1:81ee700: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientDatabaseMetaData;
/////////////////////////////////////////////////////////////////////////
1:     protected ClientDatabaseMetaData      _netclient;
/////////////////////////////////////////////////////////////////////////
1:         else if ( wrapped instanceof ClientDatabaseMetaData ) { _netclient = (ClientDatabaseMetaData) wrapped; }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0be2189
/////////////////////////////////////////////////////////////////////////
1:     protected EmbedDatabaseMetaData    _embedded;
0:     protected DatabaseMetaData      _netclient;
/////////////////////////////////////////////////////////////////////////
1:     protected SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
commit:81ee700
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Wrapper41DBMD
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.impl.jdbc.EmbedDatabaseMetaData;
0: import org.apache.derby.client.am.DatabaseMetaData;
1: 
1: /**
1:  * A wrapper around the new DatabaseMetaData methods added by JDBC 4.1.
1:  * We can eliminate this class after Java 7 goes GA and we are allowed
1:  * to use the Java 7 compiler to build our released versions of derbyTesting.jar.
1:  */
1: public  class   Wrapper41DBMD
1: {
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
0:     private EmbedDatabaseMetaData    _embedded;
0:     private DatabaseMetaData      _netclient;
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public Wrapper41DBMD( Object wrapped ) throws Exception
1:     {
1:         if ( wrapped instanceof EmbedDatabaseMetaData ) { _embedded = (EmbedDatabaseMetaData) wrapped; }
0:         else if ( wrapped instanceof DatabaseMetaData ) { _netclient = (DatabaseMetaData) wrapped; }
1:         else { throw nothingWrapped(); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // JDBC 4.1 BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public  boolean    generatedKeyAlwaysReturned() throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded.generatedKeyAlwaysReturned(); }
1:         else if ( _netclient != null ) { return _netclient.generatedKeyAlwaysReturned(); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     public  java.sql.ResultSet    getPseudoColumns
1:         ( String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern )
1:         throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded.getPseudoColumns( catalog, schemaPattern, tableNamePattern, columnNamePattern ); }
1:         else if ( _netclient != null ) { return _netclient.getPseudoColumns( catalog, schemaPattern, tableNamePattern, columnNamePattern ); }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public java.sql.DatabaseMetaData   getWrappedObject() throws SQLException
1:     {
1:         if ( _embedded != null ) { return _embedded; }
1:         else if ( _netclient != null ) { return _netclient; }
1:         else { throw nothingWrapped(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
0:     private SQLException nothingWrapped() { return new SQLException( "Nothing wrapped!" ); }
1: 
1: }
1: 
============================================================================