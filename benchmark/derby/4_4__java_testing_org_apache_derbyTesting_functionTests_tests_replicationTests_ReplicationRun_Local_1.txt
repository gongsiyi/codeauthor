1:017ac10: /*
9:017ac10:  
1:9c2b1f3: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_local_1
1:017ac10:  
1:017ac10: Licensed to the Apache Software Foundation (ASF) under one or more
1:017ac10: contributor license agreements.  See the NOTICE file distributed with
1:017ac10: this work for additional information regarding copyright ownership.
1:017ac10: The ASF licenses this file to You under the Apache License, Version 2.0
1:017ac10: (the "License"); you may not use this file except in compliance with
1:017ac10: the License.  You may obtain a copy of the License at
1:017ac10:  
1:017ac10:    http://www.apache.org/licenses/LICENSE-2.0
1:017ac10:  
1:017ac10: Unless required by applicable law or agreed to in writing, software
1:017ac10: distributed under the License is distributed on an "AS IS" BASIS,
1:017ac10: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:017ac10: See the License for the specific language governing permissions and
1:017ac10: limitations under the License.
1:017ac10:  
1:017ac10:  */
1:017ac10: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:017ac10: 
1:017ac10: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:017ac10: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:017ac10: 
1:017ac10: 
1:017ac10: /**
1:017ac10:  * Run a replication test on localhost
1:017ac10:  * by using default values for master and slave hosts,
1:017ac10:  * and master and slave ports.
1:017ac10:  * 
1:017ac10:  */
1:017ac10: 
1:017ac10: public class ReplicationRun_Local_1 extends ReplicationRun
5:017ac10: {
1:017ac10:     
1:017ac10:     /**
1:017ac10:      * Creates a new instance of ReplicationRun_Local
1:017ac10:      * @param testcaseName Identifying the test.
1:017ac10:      */
1:017ac10:     public ReplicationRun_Local_1(String testcaseName)
1:017ac10:     {
1:017ac10:         super(testcaseName);
5:017ac10:     }
1:017ac10:     
1:017ac10:     public static Test suite()
1:017ac10:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_1 Suite");
1:017ac10:         
1:017ac10:         suite.addTestSuite( ReplicationRun_Local_1.class );
1:017ac10:         
1:017ac10:         return SecurityManagerSetup.noSecurityManager(suite);
1:017ac10: 
1:017ac10:     }
1:017ac10:     
1:f41a8a7:     public void testReplication_Local_1_InsertUpdateDeleteOnMaster()
1:017ac10:     throws Exception
1:017ac10:     {
1:017ac10:         cleanAllTestHosts();
1:017ac10:         
1:017ac10:         initEnvironment();
1:017ac10:         
1:017ac10:         initMaster(masterServerHost,
1:017ac10:                 replicatedDb);
1:017ac10:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:017ac10:                 masterServerHost, ALL_INTERFACES, masterServerPort,
1:017ac10:                 masterDbSubPath);
1:017ac10:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:017ac10:                 slaveServerHost, ALL_INTERFACES, slaveServerPort,
1:017ac10:                 slaveDbSubPath);
1:017ac10:         
1:017ac10:         startServerMonitor(slaveServerHost);
1:017ac10:         
1:017ac10:         bootMasterDatabase(jvmVersion,
1:017ac10:                 masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
1:017ac10:                 masterServerHost, masterServerPort,
1:017ac10:                 null // bootLoad, // The "test" to start when booting db.
1:017ac10:                 );
1:017ac10:         
1:017ac10:         initSlave(slaveServerHost,
1:017ac10:                 jvmVersion,
1:017ac10:                 replicatedDb);
1:017ac10:         
1:017ac10:         startSlave(jvmVersion, replicatedDb,
1:017ac10:                 slaveServerHost, slaveServerPort,
1:017ac10:                 slaveServerHost, 
1:017ac10:                 slaveReplPort,
1:017ac10:                 testClientHost);
1:017ac10:         
1:017ac10:         startMaster(jvmVersion, replicatedDb,
1:017ac10:                 masterServerHost, masterServerPort,
1:017ac10:                 masterServerHost,
1:017ac10:                 slaveServerPort, slaveServerHost,
1:017ac10:                 slaveReplPort);
1:017ac10:         
1:017ac10:         // Replication "load"
1:017ac10:         String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:017ac10:                 replicatedDb;
1:f41a8a7:         
1:f41a8a7:         int tuplesToInsert = 10000;
1:017ac10:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:f41a8a7:                 dbPath, tuplesToInsert);
1:017ac10:         
1:017ac10:         failOver(jvmVersion,
1:017ac10:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:017ac10:                 masterServerHost, masterServerPort,
1:017ac10:                 testClientHost);
1:017ac10:         
1:017ac10:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:017ac10:                 slaveServerHost,slaveServerPort,
1:017ac10:                 testClientHost);
1:017ac10:         
1:017ac10:         // verifySlave();
1:017ac10:         dbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:017ac10:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:f41a8a7:             dbPath, tuplesToInsert);
1:017ac10:         // We should verify the master as well, 
1:017ac10:         // at least to see that we still can connect.
1:017ac10:         // verifyMaster();
1:017ac10:         dbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:017ac10:         _verifyDatabase(masterServerHost, masterServerPort,
1:f41a8a7:             dbPath, tuplesToInsert);
1:017ac10:     }
1:017ac10: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_1 Suite");
commit:9c2b1f3
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_local_1
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testReplication_Local_1_InsertUpdateDeleteOnMaster()
/////////////////////////////////////////////////////////////////////////
1:         
1:         int tuplesToInsert = 10000;
1:                 dbPath, tuplesToInsert);
/////////////////////////////////////////////////////////////////////////
1:             dbPath, tuplesToInsert);
1:             dbPath, tuplesToInsert);
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:017ac10
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.jdbc.ClientDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_1 extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_1(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_1 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_1.class );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:     
0:     public void testReplication_Local_1()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost, ALL_INTERFACES, masterServerPort,
1:                 masterDbSubPath);
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost, ALL_INTERFACES, slaveServerPort,
1:                 slaveDbSubPath);
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb);
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, slaveServerPort,
1:                 slaveServerHost, 
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 masterServerHost,
1:                 slaveServerPort, slaveServerHost,
1:                 slaveReplPort);
1:         
1:         // Replication "load"
1:         String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:                 replicatedDb;
1:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
0:                 dbPath);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         // verifySlave();
1:         dbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:         _verifyDatabase(slaveServerHost, slaveServerPort,
0:             dbPath);
1:         // We should verify the master as well, 
1:         // at least to see that we still can connect.
1:         // verifyMaster();
1:         dbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:         _verifyDatabase(masterServerHost, masterServerPort,
0:             dbPath);
1:     }
1:     
0:     private final int noTuplesToInsert = 10000;
0:     private void _testInsertUpdateDeleteOnMaster(String serverHost, 
0:             int serverPort,
0:             String dbPath)
0:         throws SQLException
1:     {
0:         util.DEBUG("_testInsertUpdateDeleteOnMaster: " + serverHost + ":" +
0:                    serverPort + "/" + dbPath);
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
0:         ds.setDatabaseName(dbPath);
0:         ds.setServerName(serverHost);
0:         ds.setPortNumber(serverPort);
0:         Connection conn = ds.getConnection();
1:         
0:         PreparedStatement ps = conn.prepareStatement("create table t(i integer primary key, s varchar(64))");
1:         
0:         ps.execute();
1:         
0:         ps = conn.prepareStatement("insert into t values (?,?)");
0:         for (int i = 0; i< noTuplesToInsert; i++)
1:         {
0:             ps.setInt(1,i);
0:             ps.setString(2,"dilldall"+i);
0:             ps.execute();
0:             if ( (i % 10000) == 0 ) conn.commit();
1:         }
1:         
0:         _verify(conn);
1:         
0:         conn.close();
1:     }
0:     private void _verifyDatabase(String serverHost, 
0:             int serverPort,
0:             String dbPath)
0:         throws SQLException
1:     {
0:         util.DEBUG("_verifyDatabase: "+serverHost+":"+serverPort+"/"+dbPath);
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
0:         ds.setDatabaseName(dbPath);
0:         ds.setServerName(serverHost);
0:         ds.setPortNumber(serverPort);
0:         Connection conn = ds.getConnection();
1:         
0:         _verify(conn);
1:         
0:         conn.close();
1:     }
0:     private void _verify(Connection conn)
0:         throws SQLException
1:     {
0:         Statement s = conn.createStatement();
0:         ResultSet rs = s.executeQuery("select count(*) from t");
0:         rs.next();
0:         int count = rs.getInt(1);
0:         rs = s.executeQuery("select max(i) from t");
0:         rs.next();
0:         int max = rs.getInt(1);
0:         util.DEBUG("_verify: " + count + "/" + noTuplesToInsert + " " + max +
0:                    "/" + (noTuplesToInsert - 1));
0:         assertEquals("Expected "+ noTuplesToInsert +" tuples, got "+ count +".",
0:                      noTuplesToInsert, count);
0:         assertEquals("Expected " +(noTuplesToInsert-1) +" max, got " + max +".",
0:                      noTuplesToInsert - 1, max);
1:     }
1: }
============================================================================