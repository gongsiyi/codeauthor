1:9c285a7: /*
1:9c285a7:  * Derby - Class org.apache.derbyTesting.functionTests.util.TimeZoneTestSetup
1:9c285a7:  *
1:9c285a7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9c285a7:  * contributor license agreements.  See the NOTICE file distributed with
1:9c285a7:  * this work for additional information regarding copyright ownership.
1:9c285a7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9c285a7:  * (the "License"); you may not use this file except in compliance with
1:9c285a7:  * the License.  You may obtain a copy of the License at
1:9c285a7:  *
1:9c285a7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9c285a7:  *
1:9c285a7:  * Unless required by applicable law or agreed to in writing,
1:9c285a7:  * software distributed under the License is distributed on an
1:9c285a7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:9c285a7:  * either express or implied. See the License for the specific
1:9c285a7:  * language governing permissions and limitations under the License.
1:9c285a7:  */
1:9c285a7: 
1:9c285a7: package org.apache.derbyTesting.junit;
1:9c285a7: 
1:37ad9f3: import java.security.AccessController;
1:37ad9f3: import java.security.PrivilegedAction;
1:9c285a7: import java.util.TimeZone;
1:9c285a7: import junit.framework.Test;
1:9c285a7: 
1:9c285a7: /**
1:9c285a7:  * Decorator that changes the default timezone of the runtime environment
1:9c285a7:  * for the duration of the test.
1:9c285a7:  */
1:9c285a7: public class TimeZoneTestSetup extends BaseTestSetup {
1:9c285a7:     /** Original timezone. */
1:9c285a7:     private TimeZone savedDefault;
1:9c285a7:     /** The timezone to use as default while running the test. */
1:9c285a7:     private TimeZone requestedDefault;
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Wrap a test in a decorator that changes the default timezone.
1:9c285a7:      * @param test the test to decorate
1:9c285a7:      * @param timeZoneID the ID of the timezone to use
1:9c285a7:      */
1:9c285a7:     public TimeZoneTestSetup(Test test, String timeZoneID) {
1:9c285a7:         this(test, TimeZone.getTimeZone(timeZoneID));
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Wrap a test in a decorator that changes the default timezone.
1:9c285a7:      * @param test the test to decorate
1:9c285a7:      * @param zone the timezone to use
1:9c285a7:      */
1:9c285a7:     public TimeZoneTestSetup(Test test, TimeZone zone) {
1:9c285a7:         super(test);
1:9c285a7:         this.requestedDefault = zone;
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Set the timezone.
1:9c285a7:      */
1:9c285a7:     protected void setUp() {
1:9c285a7:         savedDefault = TimeZone.getDefault();
1:37ad9f3:         setDefault(requestedDefault);
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Reset the timezone.
1:9c285a7:      */
1:9c285a7:     protected void tearDown() {
1:37ad9f3:         setDefault(savedDefault);
1:9c285a7:         savedDefault = null;
1:9c285a7:         requestedDefault = null;
1:9c285a7:     }
1:37ad9f3:     
1:6bd3847:     public static void setDefault(final TimeZone tz) {
1:37ad9f3:         if (tz== null) {
1:37ad9f3:             throw new IllegalArgumentException("tz cannot be <null>");
1:9c285a7:         }
1:37ad9f3:         AccessController.doPrivileged(
1:6bd3847:                 new PrivilegedAction<Void>() {
1:6bd3847:                     public Void run() {
1:37ad9f3:                         TimeZone.setDefault(tz);
1:37ad9f3:                         return null;
1:37ad9f3:                     }});
1:37ad9f3:     }
1:37ad9f3: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6bd3847
/////////////////////////////////////////////////////////////////////////
1:     public static void setDefault(final TimeZone tz) {
1:                 new PrivilegedAction<Void>() {
1:                     public Void run() {
commit:9c285a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.TimeZoneTestSetup
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.junit;
1: 
1: import java.util.TimeZone;
1: import junit.framework.Test;
1: 
1: /**
1:  * Decorator that changes the default timezone of the runtime environment
1:  * for the duration of the test.
1:  */
1: public class TimeZoneTestSetup extends BaseTestSetup {
1:     /** Original timezone. */
1:     private TimeZone savedDefault;
1:     /** The timezone to use as default while running the test. */
1:     private TimeZone requestedDefault;
1: 
1:     /**
1:      * Wrap a test in a decorator that changes the default timezone.
1:      * @param test the test to decorate
1:      * @param timeZoneID the ID of the timezone to use
1:      */
1:     public TimeZoneTestSetup(Test test, String timeZoneID) {
1:         this(test, TimeZone.getTimeZone(timeZoneID));
1:     }
1: 
1:     /**
1:      * Wrap a test in a decorator that changes the default timezone.
1:      * @param test the test to decorate
1:      * @param zone the timezone to use
1:      */
1:     public TimeZoneTestSetup(Test test, TimeZone zone) {
1:         super(test);
1:         this.requestedDefault = zone;
1:     }
1: 
1:     /**
1:      * Set the timezone.
1:      */
1:     protected void setUp() {
1:         savedDefault = TimeZone.getDefault();
0:         TimeZone.setDefault(requestedDefault);
1:     }
1: 
1:     /**
1:      * Reset the timezone.
1:      */
1:     protected void tearDown() {
0:         TimeZone.setDefault(savedDefault);
1:         savedDefault = null;
1:         requestedDefault = null;
1:     }
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:37ad9f3
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:         setDefault(requestedDefault);
1:         setDefault(savedDefault);
1:     
0:     private void setDefault(final TimeZone tz) throws SecurityException{
1:         if (tz== null) {
1:             throw new IllegalArgumentException("tz cannot be <null>");
1:         }
1:         AccessController.doPrivileged(
0:                 new PrivilegedAction<Object>() {
0:                     public Object run() throws SecurityException {
1:                         TimeZone.setDefault(tz);
1:                         return null;
1:                     }});
1:     }
============================================================================