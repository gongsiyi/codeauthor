1:c8603c4: /*
1:c8603c4: 
1:c8603c4:    Derby - Class org.apache.derby.agg.Aggregator
1:c8603c4: 
1:c8603c4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c8603c4:    contributor license agreements.  See the NOTICE file distributed with
1:c8603c4:    this work for additional information regarding copyright ownership.
1:c8603c4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:c8603c4:    (the "License"); you may not use this file except in compliance with
1:c8603c4:    the License.  You may obtain a copy of the License at
1:c8603c4: 
1:c8603c4:       http://www.apache.org/licenses/LICENSE-2.0
1:c8603c4: 
1:c8603c4:    Unless required by applicable law or agreed to in writing, software
1:c8603c4:    distributed under the License is distributed on an "AS IS" BASIS,
1:c8603c4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8603c4:    See the License for the specific language governing permissions and
1:c8603c4:    limitations under the License.
1:c8603c4: 
1:c8603c4:  */
1:c8603c4: package org.apache.derby.agg;
1:c8603c4: 
1:c8603c4: import java.io.Serializable;
1:c8603c4: 
1:c8603c4: /**
1:c8603c4:  * <p>
1:c8603c4:  * Behavior of a user-defined Derby aggregator. Aggregates values
1:c8603c4:  * of type V and returns a result of type R. In addition to the methods
1:c8603c4:  * in the interface, implementing classes must have a 0-arg public
1:c8603c4:  * constructor.
1:c8603c4:  * </p>
1:c8603c4:  */
1:c8603c4: public interface Aggregator<V,R,A extends Aggregator<V,R,A>>    extends Serializable
1:c8603c4: {
1:c8603c4:     /** Initialize the Aggregator */
1:c8603c4:     public void init();
1:c8603c4: 
1:c8603c4:     /** Accumulate the next scalar value */
1:c8603c4:     public  void    accumulate( V value );
1:c8603c4: 
1:c8603c4:     /**
1:0e07b2e:      * <p>
1:c8603c4:      * For merging another partial result into this Aggregator.
1:c8603c4:      * This lets the SQL interpreter divide the incoming rows into
1:c8603c4:      * subsets, aggregating each subset in isolation, and then merging
1:0e07b2e:      * the partial results together. This method can be called when
1:0e07b2e:      * performing a grouped aggregation with a large number of groups.
1:0e07b2e:      * While processing such a query, Derby may write intermediate grouped
1:0e07b2e:      * results to disk. The intermediate results may be retrieved and merged
1:0e07b2e:      * with later results if Derby encounters later rows which belong to groups
1:0e07b2e:      * whose intermediate results have been written to disk. This situation can
1:0e07b2e:      * occur with a query like the following:
1:0e07b2e:      * </p>
1:0e07b2e:      *
1:0e07b2e:      * <pre>
1:0e07b2e:      * select a, mode( b ) from mode_inputs group by a order by a
1:0e07b2e:      * </pre>
1:c8603c4:      */
1:c8603c4:     public  void    merge( A otherAggregator );
1:c8603c4: 
1:c8603c4:     /** Return the result scalar value */
1:c8603c4:     public  R   terminate();
1:c8603c4: }
1:c8603c4: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0e07b2e
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * the partial results together. This method can be called when
1:      * performing a grouped aggregation with a large number of groups.
1:      * While processing such a query, Derby may write intermediate grouped
1:      * results to disk. The intermediate results may be retrieved and merged
1:      * with later results if Derby encounters later rows which belong to groups
1:      * whose intermediate results have been written to disk. This situation can
1:      * occur with a query like the following:
1:      * </p>
1:      *
1:      * <pre>
1:      * select a, mode( b ) from mode_inputs group by a order by a
1:      * </pre>
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.agg.Aggregator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.agg;
1: 
1: import java.io.Serializable;
1: 
1: /**
1:  * <p>
1:  * Behavior of a user-defined Derby aggregator. Aggregates values
1:  * of type V and returns a result of type R. In addition to the methods
1:  * in the interface, implementing classes must have a 0-arg public
1:  * constructor.
1:  * </p>
1:  */
1: public interface Aggregator<V,R,A extends Aggregator<V,R,A>>    extends Serializable
1: {
1:     /** Initialize the Aggregator */
1:     public void init();
1: 
1:     /** Accumulate the next scalar value */
1:     public  void    accumulate( V value );
1: 
1:     /**
1:      * For merging another partial result into this Aggregator.
1:      * This lets the SQL interpreter divide the incoming rows into
1:      * subsets, aggregating each subset in isolation, and then merging
0:      * the partial results together.
1:      */
1:     public  void    merge( A otherAggregator );
1: 
1:     /** Return the result scalar value */
1:     public  R   terminate();
1: }
1: 
============================================================================