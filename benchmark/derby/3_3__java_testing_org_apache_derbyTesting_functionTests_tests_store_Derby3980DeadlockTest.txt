1:11850ac: /*
1:11850ac:  *
1:11850ac:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.Derby3980DeadlockTest
1:11850ac:  *
1:11850ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:11850ac:  * contributor license agreements.  See the NOTICE file distributed with
1:11850ac:  * this work for additional information regarding copyright ownership.
1:11850ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:11850ac:  * (the "License"); you may not use this file except in compliance with
1:11850ac:  * the License.  You may obtain a copy of the License at
1:11850ac:  *
1:11850ac:  *    http://www.apache.org/licenses/LICENSE-2.0
1:11850ac:  *
1:11850ac:  * Unless required by applicable law or agreed to in writing,
1:11850ac:  * software distributed under the License is distributed on an
1:11850ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:11850ac:  * either express or implied. See the License for the specific
1:11850ac:  * language governing permissions and limitations under the License.
1:11850ac:  */
1:11850ac: package org.apache.derbyTesting.functionTests.tests.store;
5:11850ac: 
1:11850ac: 
1:4c5c16b: import java.io.File;
1:11850ac: import java.sql.Connection;
1:11850ac: import java.sql.ResultSet;
1:11850ac: import java.sql.SQLException;
1:11850ac: import java.sql.Statement;
1:11850ac: import java.util.LinkedList;
1:4c5c16b: import java.util.Properties;
1:11850ac: 
1:11850ac: import junit.framework.Test;
1:11850ac: 
1:11850ac: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:4c5c16b: import org.apache.derbyTesting.junit.BaseTestCase;
1:11850ac: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:11850ac: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:4c5c16b: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:4c5c16b: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:11850ac: import org.apache.derbyTesting.junit.TestConfiguration;
1:11850ac: 
2:11850ac: /**
1:11850ac:  * Test to test two threads doing select then delete of a row
1:11850ac:  * using REPEATABLE_READ isolation level.  We should get a 
1:11850ac:  * deadlock (SQLState 40001);
1:11850ac:  *
1:11850ac:  */
1:11850ac: public class Derby3980DeadlockTest extends BaseJDBCTestCase {
1:11850ac:     private final int THREAD_COUNT = 2;
1:c393694:     private final LinkedList<Throwable> listExceptions =
1:c393694:             new LinkedList<Throwable>();
1:b32256d:     private final Object syncObject = new Object();
1:11850ac:     private int startedCount = 0;
1:b32256d:     private static final String fprefix = "javacore";
1:b32256d:     private static final String POLICY_FILE_NAME =
1:b32256d:         "org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.policy";
1:11850ac:     
1:11850ac:     public Derby3980DeadlockTest(String name) {
1:11850ac:         super(name);
4:11850ac:     }
1:11850ac: 
1:11850ac:     
1:11850ac:     public void test3980Deadlock() {
1:11850ac:         Thread [] t = new Thread[THREAD_COUNT];
1:11850ac:         createThreads(t);
1:11850ac:         waitForThreads(t);
1:11850ac:         checkExceptions();        
1:11850ac:     }
1:11850ac:     
1:11850ac:     
1:4c5c16b:     /**
1:11850ac:      * Check we have one deadlock exception.
1:11850ac:      */
1:11850ac:     private void checkExceptions() {        
1:4c5c16b:         //Due to timing, you might see ERROR 40XL1: A lock could not be obtained
1:4c5c16b:         //instead of ERROR 40001 (DERBY-3980)
1:c393694:         for (Throwable t : listExceptions) {
1:c393694:             if (t instanceof SQLException) {
1:c393694:                 assertSQLState("40001", (SQLException) t);
1:c393694:             } else {
1:c393694:                 fail("Unexpected exception", t);
1:c393694:             }
1:11850ac:         }
1:11850ac:         assertEquals("Expected 1 exception, got" + listExceptions.size(),
1:11850ac:                 1,listExceptions.size());
1:11850ac:     }
1:4c5c16b:     /**
1:4c5c16b:      * Decorate a test with SecurityManagerSetup, clientServersuite, and
1:4c5c16b:      * SupportFilesSetup.
1:4c5c16b:      * 
1:4c5c16b:      * @return the decorated test
1:4c5c16b:      */
1:4c5c16b:     private static Test decorateTest() {
1:4c5c16b:         Test test = TestConfiguration.clientServerSuite(Derby3980DeadlockTest.class);
1:4c5c16b:         Properties diagProperties = new Properties();
1:4c5c16b:         diagProperties.setProperty("derby.stream.error.extendedDiagSeverityLevel", "30000");
1:4c5c16b:         diagProperties.setProperty("derby.infolog.append", "true");
1:4c5c16b:         test = new SystemPropertyTestSetup(test, diagProperties, true);
1:4c5c16b:      
1:4c5c16b:         // Install a security manager using the initial policy file.
1:b32256d:         return new SecurityManagerSetup(test, POLICY_FILE_NAME);
1:4c5c16b:     }
1:4c5c16b:     
1:11850ac:     private void waitForThreads(Thread[] t) {
1:11850ac:         for (int i = 0; i < THREAD_COUNT; i++)
1:11850ac:         {   
1:4c5c16b:             try {
1:11850ac:                 t[i].join();
1:11850ac:             } catch (InterruptedException e){
1:11850ac:                fail(
1:11850ac:                         "FAIL - InterruptedException  thrown waiting for the threads");
1:4c5c16b:             }
1:4c5c16b:         }
1:4c5c16b:         
1:4c5c16b:     }
1:4c5c16b: 
1:11850ac:     private void createThreads(Thread[] t) {
1:11850ac:         for (int i = 0; i < THREAD_COUNT; i++)
1:11850ac:         {   
1:11850ac:             t[i] = new Thread(new Runnable() {
1:11850ac:                 public void run() {threadWorker(); }
1:11850ac: 
1:11850ac:                 private void threadWorker() {
1:11850ac:                     Connection threadConnection = null;
1:11850ac:                     
2:11850ac:                     try {
1:11850ac:                         synchronized (syncObject) {
1:11850ac:                             
1:11850ac:                             /* If a connection hasn't been opened for this thread, open one */
1:11850ac:                             if (threadConnection == null){
1:11850ac:                                 threadConnection = openDefaultConnection();
1:11850ac:                             }
1:11850ac:                             
1:11850ac:                             /* A new thread started, so we increment the counter */
1:11850ac:                             startedCount++;
1:11850ac:                             
1:11850ac:                             /* Wake all the threads to run the check below */
1:11850ac:                             syncObject.notifyAll();
1:11850ac:                             
1:11850ac:                             while (startedCount < THREAD_COUNT) {
1:11850ac:                                 syncObject.wait();
1:11850ac:                             }
1:11850ac:                         }          
1:11850ac:                         Statement stmt = threadConnection.createStatement();
1:11850ac:                     
1:11850ac:                     threadConnection.setAutoCommit(false);
1:11850ac:                     /* set isolation level to repeatable read */
1:11850ac:                     threadConnection.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
1:11850ac:                     
1:11850ac:                     ResultSet rs = stmt.executeQuery("select * from t where i = 456");
1:11850ac:                     while (rs.next());
1:11850ac:                     
1:4c5c16b:                     //stmt.executeUpdate("update t set i = 456 where i = 456")
1:11850ac:                     stmt.executeUpdate("delete from t  where i = 456");
1:11850ac:                     threadConnection.commit();
1:11850ac:                     } catch (Exception e) {
1:11850ac:                         synchronized(syncObject){
1:11850ac:                             listExceptions.add(e);
1:11850ac:                         }
1:11850ac:                     }
1:11850ac: 
1:11850ac:                     
1:11850ac:                 }},"Thread"+i);
1:11850ac:             t[i].start();
1:11850ac:         }
1:11850ac:         
1:11850ac:     }
1:11850ac: 
1:11850ac:     public static Test suite() {
1:4c5c16b:     Test suite = decorateTest();
1:4c5c16b:  
1:11850ac:     return new  CleanDatabaseTestSetup(
1:11850ac:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 5, 10)) {
1:4c5c16b:          /**
1:11850ac:           * Creates the table used in the test cases.
1:11850ac:           * 
1:11850ac:           */
1:11850ac:          protected void decorateSQL(Statement s) throws SQLException {
1:11850ac:             s.executeUpdate("CREATE TABLE T (I INT)");
1:11850ac:             s.executeUpdate("INSERT INTO T VALUES(456)");
1:11850ac:          }
1:11850ac:       
1:11850ac:      };
1:11850ac: 	
1:11850ac:     }
1:11850ac: 
1:11850ac:     /**
1:4c5c16b:      * Use tearDown to cleanup some of the diagnostic information files
1:4c5c16b:      */
1:4c5c16b:     protected void tearDown() throws Exception {
1:4c5c16b:         String dsh = BaseTestCase.getSystemProperty("user.dir");
1:4c5c16b:         try {
1:4c5c16b:           File basedir = new File(dsh);
1:4c5c16b:           String[] list = BaseTestCase.getFilesWith(basedir, fprefix);
1:4c5c16b:           removeFiles(list);
1:4c5c16b:         } catch (IllegalArgumentException e) {
1:4c5c16b:             fail("open directory");
1:4c5c16b:         }   
1:4c5c16b:         
1:4c5c16b:         super.tearDown();
1:4c5c16b:     }
1:11850ac: }
1:11850ac: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final LinkedList<Throwable> listExceptions =
1:             new LinkedList<Throwable>();
/////////////////////////////////////////////////////////////////////////
1:         for (Throwable t : listExceptions) {
1:             if (t instanceof SQLException) {
1:                 assertSQLState("40001", (SQLException) t);
1:             } else {
1:                 fail("Unexpected exception", t);
1:             }
commit:b32256d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private final LinkedList listExceptions = new LinkedList();
1:     private final Object syncObject = new Object();
1:     private static final String fprefix = "javacore";
1:     private static final String POLICY_FILE_NAME =
1:         "org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.policy";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new SecurityManagerSetup(test, POLICY_FILE_NAME);
author:Lily Wei
-------------------------------------------------------------------------------
commit:4c5c16b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.Properties;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
0:     private String fprefix = "javacore";
0:     private static String TARGET_POLICY_FILE_NAME="derby3980deadlock.policy";
/////////////////////////////////////////////////////////////////////////
1:         //Due to timing, you might see ERROR 40XL1: A lock could not be obtained
1:         //instead of ERROR 40001 (DERBY-3980)
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Decorate a test with SecurityManagerSetup, clientServersuite, and
1:      * SupportFilesSetup.
1:      * 
1:      * @return the decorated test
1:      */
1:     private static Test decorateTest() {
0:         String policyName = new Derby3980DeadlockTest("test").makePolicyName();
1:         Test test = TestConfiguration.clientServerSuite(Derby3980DeadlockTest.class);
1:         Properties diagProperties = new Properties();
1:         diagProperties.setProperty("derby.stream.error.extendedDiagSeverityLevel", "30000");
1:         diagProperties.setProperty("derby.infolog.append", "true");
1:         test = new SystemPropertyTestSetup(test, diagProperties, true);
1:      
1:         // Install a security manager using the initial policy file.
0:         test = new SecurityManagerSetup(test, policyName);
0:         // Copy over the policy file we want to use.
0:         String POLICY_FILE_NAME=
0:             "functionTests/tests/store/Derby3980DeadlockTest.policy";
1: 
0:         test = new SupportFilesSetup
0:         (
0:                 test,
0:                 null,
0:                 new String[] { POLICY_FILE_NAME },
0:                 null,
0:                 new String[] { TARGET_POLICY_FILE_NAME}
0:         );
0:         return test;
1:     }
1:     /**
0:      * Generate the name of the local policy file
0:      * @return the name of the local testing policy file
0:      **/
0:     private String makePolicyName() {
1:         try {
0:             String  userDir = getSystemProperty( "user.dir" );
0:             String  fileName = userDir + File.separator + 
0:             SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
0:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
0:         catch (Exception e) {
0:             fail("Unexpected exception caught by " +
0:                     "makePolicyName(): " + e );
0:             return null;
1:         }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:                     //stmt.executeUpdate("update t set i = 456 where i = 456")
/////////////////////////////////////////////////////////////////////////
1:     Test suite = decorateTest();
1:  
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Use tearDown to cleanup some of the diagnostic information files
1:      */
1:     protected void tearDown() throws Exception {
1:         String dsh = BaseTestCase.getSystemProperty("user.dir");
1:         try {
1:           File basedir = new File(dsh);
1:           String[] list = BaseTestCase.getFilesWith(basedir, fprefix);
1:           removeFiles(list);
1:         } catch (IllegalArgumentException e) {
1:             fail("open directory");
1:         }   
1:         
1:         super.tearDown();
1:     }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:11850ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.Derby3980DeadlockTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.util.Iterator;
1: import java.util.LinkedList;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test to test two threads doing select then delete of a row
1:  * using REPEATABLE_READ isolation level.  We should get a 
1:  * deadlock (SQLState 40001);
1:  *
1:  */
1: public class Derby3980DeadlockTest extends BaseJDBCTestCase {
1:     private final int THREAD_COUNT = 2;
0:     private LinkedList  listExceptions = new LinkedList();
0:     private Object syncObject = new Object();
1:     private int startedCount = 0;
1:     
1:     public Derby3980DeadlockTest(String name) {
1:         super(name);
1:     }
1: 
1:     
1:     public void test3980Deadlock() {
1:         Thread [] t = new Thread[THREAD_COUNT];
1:         createThreads(t);
1:         waitForThreads(t);
1:         checkExceptions();        
1:     }
1:     
1:     
1:     /**
1:      * Check we have one deadlock exception.
1:      */
1:     private void checkExceptions() {        
0:         for( Iterator i = listExceptions.iterator(); i.hasNext(); ) {
0:             SQLException e = (SQLException) i.next();
0:             assertSQLState("40001",e);
1:         }
1:         assertEquals("Expected 1 exception, got" + listExceptions.size(),
1:                 1,listExceptions.size());
1:     }
1: 
1:     private void waitForThreads(Thread[] t) {
1:         for (int i = 0; i < THREAD_COUNT; i++)
1:         {   
1:             try {
1:                 t[i].join();
1:             } catch (InterruptedException e){
1:                fail(
1:                         "FAIL - InterruptedException  thrown waiting for the threads");
1:             }
1:         }
1:         
1:     }
1: 
1:     private void createThreads(Thread[] t) {
1:         for (int i = 0; i < THREAD_COUNT; i++)
1:         {   
1:             t[i] = new Thread(new Runnable() {
1:                 public void run() {threadWorker(); }
1: 
1:                 private void threadWorker() {
1:                     Connection threadConnection = null;
1:                     
1:                     try {
1:                         synchronized (syncObject) {
1:                             
1:                             /* If a connection hasn't been opened for this thread, open one */
1:                             if (threadConnection == null){
1:                                 threadConnection = openDefaultConnection();
1:                             }
1:                             
1:                             /* A new thread started, so we increment the counter */
1:                             startedCount++;
1:                             
1:                             /* Wake all the threads to run the check below */
1:                             syncObject.notifyAll();
1:                             
1:                             while (startedCount < THREAD_COUNT) {
1:                                 syncObject.wait();
1:                             }
1:                         }          
1:                         Statement stmt = threadConnection.createStatement();
1:                     
1:                     threadConnection.setAutoCommit(false);
1:                     /* set isolation level to repeatable read */
1:                     threadConnection.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
1:                     
1:                     ResultSet rs = stmt.executeQuery("select * from t where i = 456");
1:                     while (rs.next());
1:                     
0:                     //stmt.executeUpdate("update t set i = 456 where i = 456");
1:                     stmt.executeUpdate("delete from t  where i = 456");
1:                     threadConnection.commit();
1:                     } catch (Exception e) {
1:                         synchronized(syncObject){
1:                             listExceptions.add(e);
1:                         }
1:                     }
1: 
1:                     
1:                 }},"Thread"+i);
1:             t[i].start();
1:         }
1:         
1:     }
1: 
1:     public static Test suite() {
1: 
0: 	Test suite = TestConfiguration.embeddedSuite(Derby3980DeadlockTest.class);
1:     return new  CleanDatabaseTestSetup(
1:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 5, 10)) {
1:          /**
1:           * Creates the table used in the test cases.
1:           * 
1:           */
1:          protected void decorateSQL(Statement s) throws SQLException {
1:             s.executeUpdate("CREATE TABLE T (I INT)");
1:             s.executeUpdate("INSERT INTO T VALUES(456)");
1:          }
1:       
1:      };
1: 	
1:     }
1: 
1: }
1: 
============================================================================