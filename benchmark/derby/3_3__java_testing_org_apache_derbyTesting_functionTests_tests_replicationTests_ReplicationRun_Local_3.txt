1:f41a8a7: /*
5:f41a8a7:  
1:f41a8a7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3
1:f41a8a7:  
1:f41a8a7: Licensed to the Apache Software Foundation (ASF) under one or more
1:f41a8a7: contributor license agreements.  See the NOTICE file distributed with
1:f41a8a7: this work for additional information regarding copyright ownership.
1:f41a8a7: The ASF licenses this file to You under the Apache License, Version 2.0
1:f41a8a7: (the "License"); you may not use this file except in compliance with
1:f41a8a7: the License.  You may obtain a copy of the License at
1:f41a8a7:  
1:f41a8a7:    http://www.apache.org/licenses/LICENSE-2.0
1:f41a8a7:  
1:f41a8a7: Unless required by applicable law or agreed to in writing, software
1:f41a8a7: distributed under the License is distributed on an "AS IS" BASIS,
1:f41a8a7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f41a8a7: See the License for the specific language governing permissions and
1:f41a8a7: limitations under the License.
1:f41a8a7:  
1:f41a8a7:  */
1:f41a8a7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:f41a8a7: 
1:f41a8a7: import java.sql.Connection;
1:f41a8a7: import java.sql.SQLException;
1:c35e4f0: import org.apache.derby.jdbc.ClientDataSourceInterface;
1:c35e4f0: import org.apache.derbyTesting.junit.JDBC;
1:f41a8a7: 
1:f41a8a7: 
1:f41a8a7: /**
1:c5935ad:  * Defining startSlave, stopmaster, stopSlave and
1:c5935ad:  * failOver methods returning SQLException for
1:c5935ad:  * negative testing (ReplicationRun_Local_3 set of tests).
1:f41a8a7:  * 
1:f41a8a7:  */
1:f41a8a7: 
1:f41a8a7: public class ReplicationRun_Local_3 extends ReplicationRun
4:f41a8a7: {
1:f41a8a7:     
1:f41a8a7:     /**
1:f41a8a7:      * Creates a new instance of ReplicationRun_Local
1:f41a8a7:      * @param testcaseName Identifying the test.
1:f41a8a7:      */
1:f41a8a7:     public ReplicationRun_Local_3(String testcaseName)
1:f41a8a7:     {
1:f41a8a7:         super(testcaseName);
5:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     //////////////////////////////////////////////////////////////
1:f41a8a7:     ////
1:f41a8a7:     //// The replication test framework (testReplication()):
1:f41a8a7:     //// a) "clean" replication run starting master and slave servers,
1:f41a8a7:     ////     preparing master and slave databases,
1:f41a8a7:     ////     starting and stopping replication and doing
1:f41a8a7:     ////     failover for a "normal"/"failure free" replication
1:f41a8a7:     ////     test run.
1:f41a8a7:     ////
1:f41a8a7:     //////////////////////////////////////////////////////////////
1:f41a8a7:     
1:f41a8a7: 
1:f41a8a7:     SQLException _failOver(String serverHost, int serverPort, String dbPath) 
1:c35e4f0:             throws Exception
1:f41a8a7:     {
1:f41a8a7:         util.DEBUG("BEGIN _failOver"); 
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:4469400:             ds =  (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:c35e4f0: 
2:f41a8a7:         ds.setDatabaseName(dbPath);
1:f41a8a7:         ds.setServerName(serverHost);
1:f41a8a7:         ds.setPortNumber(serverPort);
1:c5935ad:         ds.setConnectionAttributes("failover=true"
1:c5935ad:                 +useEncryption(false));
2:f41a8a7:         try {
1:f41a8a7:             Connection conn = ds.getConnection(); // 
2:f41a8a7:             conn.close();
1:f41a8a7:             util.DEBUG("END   _failOver. Got Connection");
1:f41a8a7:             return null; // If successfull - could only happen on slave after a master stopMaster.
2:f41a8a7:         } catch (SQLException se) {
1:f41a8a7:             util.DEBUG("END   _failOver. " + se.getSQLState());
2:f41a8a7:             return se;
1:f41a8a7:         }
1:f41a8a7:         
1:f41a8a7:     }
1:f41a8a7: 
1:f41a8a7:     SQLException _startSlaveTrueAndCreateTrue(String serverHost, 
1:f41a8a7:             int serverPort,
2:f41a8a7:             String dbPath) 
1:c35e4f0:         throws Exception
1:f41a8a7:     {
1:f41a8a7:         util.DEBUG("_startSlaveTrueAndCreateTrue");
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:c35e4f0: 
1:f41a8a7:         ds.setDatabaseName(dbPath);
1:f41a8a7:         ds.setServerName(serverHost);
1:f41a8a7:         ds.setPortNumber(serverPort);
1:c5935ad:         ds.setConnectionAttributes("startSlave=true;create=true"
1:c5935ad:                 +useEncryption(true));
1:f41a8a7:         try {
1:f41a8a7:             Connection conn = ds.getConnection(); // XRE10 - REPLICATION_CONFLICTING_ATTRIBUTES
1:f41a8a7:             conn.close();
1:f41a8a7:             return null; // Should never get here.
1:f41a8a7:         } catch (SQLException se) {
1:f41a8a7:             return se;
1:f41a8a7:         }
1:f41a8a7:     }
1:f41a8a7: 
1:f41a8a7:     SQLException _stopMaster(String masterServerHost, int masterServerPort, String dbPath) 
1:c35e4f0:             throws Exception
1:f41a8a7:     {
1:f41a8a7:         util.DEBUG("_stopMaster");
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:c35e4f0: 
1:f41a8a7:         ds.setDatabaseName(dbPath);
1:f41a8a7:         ds.setServerName(masterServerHost);
1:f41a8a7:         ds.setPortNumber(masterServerPort);
1:c5935ad:         ds.setConnectionAttributes("stopMaster=true"
1:c5935ad:                 +useEncryption(false));
1:f41a8a7:         try {
1:f41a8a7:             Connection conn = ds.getConnection(); // 
1:f41a8a7:             conn.close();
2:f41a8a7:             return null; // If successfull.
1:f41a8a7:         } catch (SQLException se) {
1:f41a8a7:             util.DEBUG(se.getErrorCode()+" "+se.getSQLState()+" "+se.getMessage());
1:f41a8a7:             return se;
1:f41a8a7:         }       
1:f41a8a7:     }
1:f41a8a7: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:             ds =  (ClientDataSourceInterface) clazz.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
1:  * Defining startSlave, stopmaster, stopSlave and
1:  * failOver methods returning SQLException for
1:  * negative testing (ReplicationRun_Local_3 set of tests).
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ds.setConnectionAttributes("failover=true"
1:                 +useEncryption(false));
/////////////////////////////////////////////////////////////////////////
1:         ds.setConnectionAttributes("startSlave=true;create=true"
1:                 +useEncryption(true));
/////////////////////////////////////////////////////////////////////////
1:         ds.setConnectionAttributes("stopMaster=true"
1:                 +useEncryption(false));
/////////////////////////////////////////////////////////////////////////
0:         ds.setConnectionAttributes("stopSlave=true"
0:                 +useEncryption(false));
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                "org.apache.derby.jdbc.BasicClientDataSource40").newInstance();
/////////////////////////////////////////////////////////////////////////
0:                "org.apache.derby.jdbc.BasicClientDataSource40").newInstance();
/////////////////////////////////////////////////////////////////////////
0:                "org.apache.derby.jdbc.BasicClientDataSource40").newInstance();
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDataSourceInterface;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:             throws Exception
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds =  (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.NonJNDIClientDataSource40").newInstance();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         throws Exception
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.NonJNDIClientDataSource40").newInstance();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             throws Exception
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.NonJNDIClientDataSource40").newInstance();
1:         }
1: 
commit:dfbf41e
/////////////////////////////////////////////////////////////////////////
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
0: import org.apache.derby.jdbc.ClientDataSource;
1: 
1: 
1: /**
0:  * Run a replication test on localhost
0:  * by using default values for master and slave hosts,
0:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_3 extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_3(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
0:     protected void setUp() throws Exception
1:     {
0:         super.setUp();
1:     }
1:     
0:     protected void tearDown() throws Exception
1:     {
0:         super.tearDown();
1:     }
1:         
1:     //////////////////////////////////////////////////////////////
1:     ////
1:     //// The replication test framework (testReplication()):
1:     //// a) "clean" replication run starting master and slave servers,
1:     ////     preparing master and slave databases,
1:     ////     starting and stopping replication and doing
1:     ////     failover for a "normal"/"failure free" replication
1:     ////     test run.
1:     ////
1:     //////////////////////////////////////////////////////////////
1:     
1: 
1:     SQLException _failOver(String serverHost, int serverPort, String dbPath) 
1:     {
1:         util.DEBUG("BEGIN _failOver"); 
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
1:         ds.setServerName(serverHost);
1:         ds.setPortNumber(serverPort);
0:         ds.setConnectionAttributes("failover=true");
1:         try {
1:             Connection conn = ds.getConnection(); // 
1:             conn.close();
1:             util.DEBUG("END   _failOver. Got Connection");
1:             return null; // If successfull - could only happen on slave after a master stopMaster.
1:         } catch (SQLException se) {
1:             util.DEBUG("END   _failOver. " + se.getSQLState());
1:             return se;
1:         }
1:         
1:     }
1: 
1:     SQLException _startSlaveTrueAndCreateTrue(String serverHost, 
1:             int serverPort,
1:             String dbPath) 
0:         throws SQLException 
1:     {
1:         util.DEBUG("_startSlaveTrueAndCreateTrue");
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
1:         ds.setServerName(serverHost);
1:         ds.setPortNumber(serverPort);
0:         ds.setConnectionAttributes("startSlave=true;create=true");
1:         try {
1:             Connection conn = ds.getConnection(); // XRE10 - REPLICATION_CONFLICTING_ATTRIBUTES
1:             conn.close();
1:             return null; // Should never get here.
1:         } catch (SQLException se) {
1:             return se;
1:         }
1:     }
1: 
1:     SQLException _stopMaster(String masterServerHost, int masterServerPort, String dbPath) 
1:     {
1:         util.DEBUG("_stopMaster");
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
1:         ds.setServerName(masterServerHost);
1:         ds.setPortNumber(masterServerPort);
0:         ds.setConnectionAttributes("stopMaster=true");
1:         try {
1:             Connection conn = ds.getConnection(); // 
1:             conn.close();
1:             return null; // If successfull.
1:         } catch (SQLException se) {
1:             util.DEBUG(se.getErrorCode()+" "+se.getSQLState()+" "+se.getMessage());
1:             return se;
1:         }       
1:     }
1: 
0:     SQLException _stopSlave(String slaveServerHost, int slaveServerPort,
1:             String dbPath) 
0:         throws SQLException
1:     {
0:         util.DEBUG("_stopSlave");
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
0:         ds.setServerName(slaveServerHost);
0:         ds.setPortNumber(slaveServerPort);
0:         ds.setConnectionAttributes("stopSlave=true");
1:         try {
0:             Connection conn = ds.getConnection();
1:             conn.close();
1:             return null; // If successfull.
1:         } catch (SQLException se) {
1:             return se;
1:         }       
1:     }
1:     
1: }
============================================================================