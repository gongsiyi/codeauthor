1:eac0369: /*
6:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.CounterOutputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.EOFException;
1:eac0369: 
3:eac0369: /**
1:eac0369: 	An OutputStream that simply provides methods to count the number
1:eac0369: 	of bytes written to an underlying stream.
1:eac0369: */
1:eac0369: 
1:eac0369: public class CounterOutputStream extends OutputStream implements Limit {
1:eac0369: 
1:eac0369: 	protected OutputStream out;
1:eac0369: 	private int count;
1:eac0369: 	private int limit;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create a CounterOutputStream that will discard any bytes
1:eac0369: 		written but still coutn them and call its reset method
1:eac0369: 		so that the count is intially zero.
1:eac0369: 	*/
1:eac0369: 	public CounterOutputStream() {
1:75ec275:         limit = -1;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setOutputStream(OutputStream out) {
1:eac0369: 		this.out = out;
1:eac0369: 		setLimit(-1);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get count of bytes written to the stream since the last
1:eac0369: 		reset() call.
1:eac0369: 	*/
1:eac0369: 	public int getCount() {
1:eac0369: 		return count;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set a limit at which an exception will be thrown. This allows callers
1:eac0369: 		to count the number of bytes up to some point, without having to complete
1:eac0369: 		the count. E.g. a caller may only want to see if some object will write out
1:eac0369: 		over 4096 bytes, without waiting for all 200,000 bytes of the object to be written.
1:eac0369: 		<BR>
1:eac0369: 		If the passed in limit is 0 or negative then the stream will count bytes without
1:eac0369: 		throwing an exception.
1:eac0369: 
1:eac0369: 		@see EOFException
1:eac0369: 	*/
1:eac0369: 	public void setLimit(int limit) {
1:eac0369: 
1:eac0369: 		count = 0;
1:eac0369: 
1:eac0369: 		this.limit = limit;
1:eac0369: 
1:eac0369: 		return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int clearLimit() {
1:eac0369: 
1:eac0369: 		int unused = limit - count;
1:eac0369: 		limit = 0;
1:eac0369: 
1:eac0369: 		return unused;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of OutputStream
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Add 1 to the count.
1:eac0369: 
2:eac0369: 		@see OutputStream#write
1:eac0369: 	*/
1:eac0369: 	public  void write(int b) throws IOException {
1:eac0369: 		
1:eac0369: 		if ((limit >= 0) && ((count + 1) > limit)) {
2:eac0369: 			throw new EOFException();
1:eac0369: 		}
1:eac0369: 
1:75ec275: 		if (out != null) out.write(b);
1:eac0369: 		count++;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Add len to the count, discard the data.
1:eac0369: 
1:eac0369: 		@see OutputStream#write
1:eac0369: 	*/
1:eac0369: 	public void write(byte b[], int off, int len) throws IOException {
1:eac0369: 
1:eac0369: 		if ((limit >= 0) && ((count + len) > limit)) {
1:eac0369: 			throw new EOFException();
1:eac0369: 		}
1:eac0369: 
1:75ec275: 		if (out != null) out.write(b, off, len);
1:eac0369: 		count += len;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:75ec275
/////////////////////////////////////////////////////////////////////////
1:         limit = -1;
/////////////////////////////////////////////////////////////////////////
1: 		if (out != null) out.write(b);
/////////////////////////////////////////////////////////////////////////
1: 		if (out != null) out.write(b, off, len);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.CounterOutputStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.OutputStream;
1: import java.io.IOException;
1: import java.io.EOFException;
1: 
1: /**
1: 	An OutputStream that simply provides methods to count the number
1: 	of bytes written to an underlying stream.
1: */
1: 
1: public class CounterOutputStream extends OutputStream implements Limit {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	protected OutputStream out;
1: 	private int count;
1: 	private int limit;
1: 
1: 	/**
1: 		Create a CounterOutputStream that will discard any bytes
1: 		written but still coutn them and call its reset method
1: 		so that the count is intially zero.
1: 	*/
1: 	public CounterOutputStream() {
0: 		super();
1: 	}
1: 
1: 	public void setOutputStream(OutputStream out) {
1: 		this.out = out;
1: 		setLimit(-1);
1: 	}
1: 
1: 	/**
1: 		Get count of bytes written to the stream since the last
1: 		reset() call.
1: 	*/
1: 	public int getCount() {
1: 		return count;
1: 	}
1: 
1: 	/**
1: 		Set a limit at which an exception will be thrown. This allows callers
1: 		to count the number of bytes up to some point, without having to complete
1: 		the count. E.g. a caller may only want to see if some object will write out
1: 		over 4096 bytes, without waiting for all 200,000 bytes of the object to be written.
1: 		<BR>
1: 		If the passed in limit is 0 or negative then the stream will count bytes without
1: 		throwing an exception.
1: 
1: 		@see EOFException
1: 	*/
1: 	public void setLimit(int limit) {
1: 
1: 		count = 0;
1: 
1: 		this.limit = limit;
1: 
1: 		return;
1: 	}
1: 
1: 	public int clearLimit() {
1: 
1: 		int unused = limit - count;
1: 		limit = 0;
1: 
1: 		return unused;
1: 	}
1: 
1: 	/*
1: 	** Methods of OutputStream
1: 	*/
1: 
1: 	/**
1: 		Add 1 to the count.
1: 
1: 		@see OutputStream#write
1: 	*/
1: 	public  void write(int b) throws IOException {
1: 		
1: 		if ((limit >= 0) && ((count + 1) > limit)) {
1: 			throw new EOFException();
1: 		}
1: 
0: 		out.write(b);
1: 		count++;
1: 	}
1: 
1: 	/**
0: 		Add b.length to the count.
1: 
1: 		@see OutputStream#write
1: 	*/
0: 	public void write(byte b[]) throws IOException {
1: 		
0: 		if ((limit >= 0) && ((count + b.length) > limit)) {
1: 			throw new EOFException();
1: 		}
1: 
0: 		out.write(b);
0: 		count += b.length;
1: 	}
1: 
1: 	/**
1: 		Add len to the count, discard the data.
1: 
1: 		@see OutputStream#write
1: 	*/
1: 	public void write(byte b[], int off, int len) throws IOException {
1: 
1: 		if ((limit >= 0) && ((count + len) > limit)) {
1: 			throw new EOFException();
1: 		}
1: 
0: 		out.write(b, off, len);
1: 		count += len;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.io.EOFException;
0: 
0: /**
0: 	An OutputStream that simply provides methods to count the number
0: 	of bytes written to an underlying stream.
0: */
0: 
0: public class CounterOutputStream extends OutputStream implements Limit {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	protected OutputStream out;
0: 	private int count;
0: 	private int limit;
0: 
0: 	/**
0: 		Create a CounterOutputStream that will discard any bytes
0: 		written but still coutn them and call its reset method
0: 		so that the count is intially zero.
0: 	*/
0: 	public CounterOutputStream() {
0: 		super();
0: 	}
0: 
0: 	public void setOutputStream(OutputStream out) {
0: 		this.out = out;
0: 		setLimit(-1);
0: 	}
0: 
0: 	/**
0: 		Get count of bytes written to the stream since the last
0: 		reset() call.
0: 	*/
0: 	public int getCount() {
0: 		return count;
0: 	}
0: 
0: 	/**
0: 		Set a limit at which an exception will be thrown. This allows callers
0: 		to count the number of bytes up to some point, without having to complete
0: 		the count. E.g. a caller may only want to see if some object will write out
0: 		over 4096 bytes, without waiting for all 200,000 bytes of the object to be written.
0: 		<BR>
0: 		If the passed in limit is 0 or negative then the stream will count bytes without
0: 		throwing an exception.
0: 
0: 		@see EOFException
0: 	*/
0: 	public void setLimit(int limit) {
0: 
0: 		count = 0;
0: 
0: 		this.limit = limit;
0: 
0: 		return;
0: 	}
0: 
0: 	public int clearLimit() {
0: 
0: 		int unused = limit - count;
0: 		limit = 0;
0: 
0: 		return unused;
0: 	}
0: 
0: 	/*
0: 	** Methods of OutputStream
0: 	*/
0: 
0: 	/**
0: 		Add 1 to the count.
0: 
0: 		@see OutputStream#write
0: 	*/
0: 	public  void write(int b) throws IOException {
0: 		
0: 		if ((limit >= 0) && ((count + 1) > limit)) {
0: 			throw new EOFException();
0: 		}
0: 
0: 		out.write(b);
0: 		count++;
0: 	}
0: 
0: 	/**
0: 		Add b.length to the count.
0: 
0: 		@see OutputStream#write
0: 	*/
0: 	public void write(byte b[]) throws IOException {
0: 		
0: 		if ((limit >= 0) && ((count + b.length) > limit)) {
0: 			throw new EOFException();
0: 		}
0: 
0: 		out.write(b);
0: 		count += b.length;
0: 	}
0: 
0: 	/**
0: 		Add len to the count, discard the data.
0: 
0: 		@see OutputStream#write
0: 	*/
0: 	public void write(byte b[], int off, int len) throws IOException {
0: 
0: 		if ((limit >= 0) && ((count + len) > limit)) {
0: 			throw new EOFException();
0: 		}
0: 
0: 		out.write(b, off, len);
0: 		count += len;
0: 	}
0: }
============================================================================