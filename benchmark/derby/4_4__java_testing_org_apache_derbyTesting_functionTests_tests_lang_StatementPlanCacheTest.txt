1:a43ee19: /*
1:a43ee19: *
1:a43ee19: * Derby - Class org.apache.derbyTesting.functionTests.lang.StatementPlanCacheTest
1:a43ee19: *
1:a43ee19: * Licensed to the Apache Software Foundation (ASF) under one or more
1:a43ee19: * contributor license agreements.  See the NOTICE file distributed with
1:a43ee19: * this work for additional information regarding copyright ownership.
1:a43ee19: * The ASF licenses this file to You under the Apache License, Version 2.0
1:a43ee19: * (the "License"); you may not use this file except in compliance with
1:a43ee19: * the License.  You may obtain a copy of the License at
1:a43ee19: *
1:a43ee19: *    http://www.apache.org/licenses/LICENSE-2.0
1:a43ee19: *
1:a43ee19: * Unless required by applicable law or agreed to in writing, 
1:a43ee19: * software distributed under the License is distributed on an 
1:a43ee19: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:a43ee19: * either express or implied. See the License for the specific 
1:a43ee19: * language governing permissions and limitations under the License.
1:a43ee19: */
1:a43ee19: package org.apache.derbyTesting.functionTests.tests.lang;
5:a43ee19: 
1:5e94b1c: import java.sql.CallableStatement;
1:5e94b1c: import java.sql.Connection;
1:a43ee19: import java.sql.PreparedStatement;
1:a43ee19: import java.sql.ResultSet;
1:a43ee19: import java.sql.SQLException;
1:a43ee19: import java.sql.Statement;
1:a43ee19: import junit.framework.Test;
1:a43ee19: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a43ee19: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:a43ee19: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:a43ee19: 
1:a43ee19: /**
1:a43ee19:  * Tests statement plan caching.
1:a43ee19:  * <BR>
1:a43ee19:  * Size of the cache can be configured by derby.language.statementCacheSize.
1:a43ee19:  * derby.language.statementCacheSize.
1:a43ee19:  * <BR>
1:a43ee19:  * The statement cache can be viewed using the diagnostic table
1:a43ee19:  * SYSCS_DIAG.STATEMENT_CACHE
1:a43ee19:  * <BR>
1:a43ee19:  * The test also uses the fact that toString() for a Derby embedded
1:a43ee19:  * prepared statement returns a string identifier that matches the
1:a43ee19:  * ID column of SYSCS_DIAG.STATEMENT_CACHE.
1:a43ee19:  *
1:a43ee19:  */
1:a43ee19: public class StatementPlanCacheTest extends BaseJDBCTestCase {
1:a43ee19:     
1:a43ee19:     private static int CACHE_SIZE;
1:a43ee19:     
1:a43ee19:     private int statmentCacheSize;
1:a43ee19:     private PreparedStatement cacheInPlanPS_ID;
1:a43ee19:     private PreparedStatement cacheInPlanPS_TEXT;
1:a43ee19:   
1:a43ee19:     public StatementPlanCacheTest(String name) {
1:a43ee19:         super(name);
1:a43ee19:         statmentCacheSize = CACHE_SIZE;
2:a43ee19:     }
1:a43ee19:     
1:a43ee19:     /**
1:a43ee19:      * Runs in embedded only since it's testing the server side cache.
1:a43ee19:      */
1:a43ee19:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("StatementPlanCacheTest");
1:a43ee19:         
1:a43ee19:         CACHE_SIZE = 100; // default cache size
1:a43ee19:         suite.addTest(baseSuite("default"));
1:a43ee19:         suite.addTest(suiteWithSizeSet(5));
1:a43ee19:         suite.addTest(suiteWithSizeSet(140));
1:a43ee19:         
1:a43ee19:         // no caching
1:a43ee19:         suite.addTest(DatabasePropertyTestSetup.singleProperty(
1:a43ee19:                 new StatementPlanCacheTest("noCachingTest"),
1:a43ee19:                 "derby.language.statementCacheSize", "0", true));
1:a43ee19:         
1:a43ee19:         
1:293a5e6:         return new CleanDatabaseTestSetup(suite);
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     private static Test suiteWithSizeSet(int cacheSize)
1:a43ee19:     {
1:a43ee19:         // Sets up the cache size picked up by the constructor of this class
1:a43ee19:         CACHE_SIZE = cacheSize;
1:a43ee19:         String cs = Integer.toString(cacheSize);
1:a43ee19:         return DatabasePropertyTestSetup.singleProperty(
1:a43ee19:                 baseSuite(cs),
1:a43ee19:                 "derby.language.statementCacheSize", cs, true);
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     private static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(
1:1ae02c9:             "StatementPlanCacheTest:derby.language.statementCacheSize=" + name);
1:a43ee19:         suite.addTestSuite(StatementPlanCacheTest.class);
1:a43ee19:         return suite;
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     /**
1:a43ee19:      * Prepare the statement that sees if a statement given its
1:a43ee19:      * ID is in the cache. We hold onto it so that the statement
1:a43ee19:      * cache can be emptied and executing this will not alter
1:a43ee19:      * the state of cache.
1:a43ee19:      * Empty the statement cache so that each fixture starts
1:a43ee19:      * out with an empty cache.
1:a43ee19:      */
1:a43ee19:     protected void setUp() throws SQLException  {
1:a43ee19:         cacheInPlanPS_ID = prepareStatement(
1:a43ee19:                 "SELECT COUNT(ID) FROM SYSCS_DIAG.STATEMENT_CACHE WHERE ID = ?");
1:a43ee19:         cacheInPlanPS_TEXT = prepareStatement(
1:a43ee19:                 "SELECT COUNT(ID) FROM SYSCS_DIAG.STATEMENT_CACHE WHERE " +
1:a43ee19:                 "SCHEMANAME = ? AND SQL_TEXT = ?");
1:9850fb9:         emptyStatementCache();
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     protected void tearDown() throws Exception {
1:a43ee19:         cacheInPlanPS_ID.close();
1:98ceb6f:         cacheInPlanPS_ID = null;
1:a43ee19:         cacheInPlanPS_TEXT.close();
1:98ceb6f:         cacheInPlanPS_TEXT = null;
1:a43ee19:         super.tearDown();
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     /**
1:a43ee19:      * Check that when the cache size is set to zero that
1:a43ee19:      * no caching takes place. Tests with Statement, PreparedStatement
1:a43ee19:      * and CallableStatement.
1:a43ee19:      */
1:a43ee19:     public void noCachingTest() throws SQLException
1:a43ee19:     {
1:a43ee19:         String schema = this.getTestConfiguration().getUserName();
1:a43ee19:         
1:a43ee19:         String sql = "VALUES 1";
2:a43ee19:         Statement s = createStatement();
1:a43ee19:         s.executeQuery(sql).close();
2:a43ee19:         s.close();
1:a43ee19:         
1:a43ee19:         assertFalse(sql, isPlanInCache(schema, sql));
1:a43ee19:         
1:a43ee19:         prepareStatement(sql).close();
1:a43ee19:         assertFalse(sql, isPlanInCache(schema, sql));
1:a43ee19:         
1:a43ee19:         sql = "CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(0)";
1:a43ee19:         prepareCall(sql).close();
1:a43ee19:         assertFalse(sql, isPlanInCache(schema, sql));
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     /**
1:5e94b1c:      * Check that the same plan can be shared across
1:5e94b1c:      * Statement, PreparedStatement and CallableStatement.
1:5e94b1c:      */
1:5e94b1c:     public void testAcrossStatementObjects() throws SQLException
1:5e94b1c:     {
1:5e94b1c:         String schema = this.getTestConfiguration().getUserName();
1:5e94b1c:         
1:5e94b1c:         String sql = sql = "CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(0)";
1:5e94b1c:         Statement s = createStatement();
1:5e94b1c:         s.execute(sql);
1:5e94b1c:         s.close();
1:5e94b1c:         
1:5e94b1c:         assertTrue(sql, isPlanInCache(schema, sql));
1:5e94b1c:         
1:5e94b1c:         PreparedStatement ps = prepareStatement(sql);
1:5e94b1c:         assertTrue(sql, isPlanInCache(ps));
1:5e94b1c:                
1:5e94b1c:         CallableStatement cs = prepareCall(sql);      
1:5e94b1c:         assertTrue(sql, isPlanInCache(cs));
1:5e94b1c:              
1:5e94b1c:         // Check the prepared statement matches the callable
1:5e94b1c:         assertEquals(ps.toString(), cs.toString());
1:5e94b1c:         
1:5e94b1c:         ps.close();
1:5e94b1c:         cs.close();
1:5e94b1c:     }
1:5e94b1c:     
1:5e94b1c:     /**
1:a43ee19:      * Test that statements that fail to compile do not end up in the cache.
1:a43ee19:      */
1:a43ee19:     public void testCompileFailuresNotInCache() throws SQLException
1:a43ee19:     {
1:a43ee19:         String schema = this.getTestConfiguration().getUserName();
1:a43ee19:         
1:a43ee19:         // Parse error
1:a43ee19:         String sql = "TO BE OR NOT TO BE";
1:a43ee19:         assertCompileError("42X01", sql);
1:a43ee19:         assertFalse(sql, isPlanInCache(schema, sql));
1:a43ee19:         
1:a43ee19:         // Valid tokens but missing elements
1:a43ee19:         sql = "CREATE PROCEDURE BAD_PROC() EXTERNAL NAME 'lll' LANGUAGE JAVA";
1:a43ee19:         assertCompileError("42X01", sql);
1:a43ee19:         assertFalse(sql, isPlanInCache(schema, sql));
1:a43ee19:         
1:a43ee19:         // Bind error
1:a43ee19:         sql = "SELECT * FROM NO_SUCH_TABLE_EXISTS";
1:a43ee19:         assertCompileError("42X05", sql);
1:a43ee19:         assertFalse(sql, isPlanInCache(schema, sql));  
1:a43ee19:     } 
1:a43ee19:     
1:a43ee19:     /**
1:a43ee19:      * Test statement caching according to the size of the cache
1:a43ee19:      * using PreparedStatement.
1:a43ee19:      * 
1:a43ee19:      */
1:a43ee19:     public void testPreparedStatementPlanCaching() throws SQLException
1:a43ee19:     {
1:a43ee19:         checkPreparedPlanInCache(statmentCacheSize, "VALUES &");
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     /**
1:a43ee19:      * Test statement caching according to the size of the cache
1:a43ee19:      * using CallableStatement.
1:a43ee19:      * 
1:a43ee19:      */
1:a43ee19:     public void testCallableStatementPlanCaching() throws SQLException
1:a43ee19:     {
1:a43ee19:         checkPreparedPlanInCache(statmentCacheSize,
1:a43ee19:                 "CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(&)");
1:a43ee19:     }    
1:a43ee19:     
1:a43ee19:    
1:a43ee19:     /**
1:a43ee19:      * Compile a number of statements based upon the sqlbase
1:dbed020:      * replacing the and with a number increasing from 0 to number - 1
1:a43ee19:      * 
1:a43ee19:      * Uses PreparedStatement unless sqlbase starts with CALL then
1:a43ee19:      * CallableStatement is used.
1:a43ee19:      * 
1:a43ee19:      * Asserts that the statements appear in the cache and that recompiling
1:a43ee19:      * it picks up the same plan.
1:a43ee19:      */
1:a43ee19:     private void checkPreparedPlanInCache(int number,
1:a43ee19:             String sqlBase) throws SQLException
1:a43ee19:     {
1:a43ee19:         boolean isCall = sqlBase.startsWith("CALL ");
1:a43ee19:         
1:a43ee19:         String[] sql = new String[number];
1:a43ee19:         String[] firstCompileID = new String[sql.length];
1:a43ee19:         
1:a43ee19:         for (int i = 0; i < firstCompileID.length; i++ )
1:a43ee19:         {
1:a43ee19:            
1:a43ee19:             sql[i] = getSQL(sqlBase, i);
1:a43ee19:             PreparedStatement ps = isCall ?
1:a43ee19:                     prepareCall(sql[i]) : prepareStatement(sql[i]);
1:a43ee19:             assertTrue(sql[i], isPlanInCache(ps));
1:a43ee19:             firstCompileID[i] = ps.toString();
1:a43ee19:             ps.close();
1:a43ee19:         }
1:a43ee19:         
1:a43ee19:         
1:a43ee19:         for (int i = 0; i < firstCompileID.length; i++ )
1:a43ee19:         {
1:5e94b1c:             // Check caching is across statements
1:a43ee19:             PreparedStatement ps = isCall ?
1:a43ee19:                     prepareCall(sql[i]) : prepareStatement(sql[i]);
1:a43ee19:             PreparedStatement ps2 = isCall ?
1:a43ee19:                     prepareCall(sql[i]) : prepareStatement(sql[i]);
1:a43ee19:             assertTrue(sql[i], isPlanInCache(ps));
1:a43ee19:             assertEquals(sql[i], firstCompileID[i], ps.toString());
1:a43ee19:             assertEquals(sql[i], ps.toString(), ps2.toString());
1:a43ee19:             ps.close();
1:a43ee19:             ps2.close();
1:5e94b1c:             
1:5e94b1c:             // Check the caching is across connections
1:5e94b1c:             Connection c2 = openDefaultConnection();
1:5e94b1c:             PreparedStatement psD = isCall ?
1:5e94b1c:                     c2.prepareCall(sql[i]) : c2.prepareStatement(sql[i]);
1:5e94b1c:             
1:5e94b1c:             assertEquals(sql[i], firstCompileID[i], psD.toString());
1:5e94b1c:             psD.close();
1:5e94b1c:             c2.close();
1:5e94b1c:             
1:a43ee19:         }
1:a43ee19:         
1:a43ee19:         String schema = this.getTestConfiguration().getUserName();
1:a43ee19:         
1:a43ee19:         // Now check that futher statements throw out existing cache entries.
1:a43ee19:         for (int n = firstCompileID.length; n < firstCompileID.length*2; n++)
1:a43ee19:         {
1:a43ee19:             // Compile a new statement, ends up in cache.
1:a43ee19:             String sqlN = getSQL(sqlBase, n);
1:a43ee19:             PreparedStatement ps = isCall ?
1:a43ee19:                     prepareCall(sqlN) : prepareStatement(sqlN);
1:a43ee19:             assertTrue(sqlN, isPlanInCache(ps));
1:a43ee19:             
1:a43ee19:             ps.close();
1:a43ee19:         }
1:a43ee19:         
1:a43ee19:         // Can only assume some of the original statements will
1:a43ee19:         // have been thrown out.
1:a43ee19:         boolean thrownOut = false;
1:a43ee19:         for (int i = 0; i < sql.length; i++)
1:a43ee19:         {
1:a43ee19:             if (isPlanInCache(schema, sql[i]))
1:a43ee19:                 continue;
1:a43ee19:             
1:a43ee19:            thrownOut = true;
1:a43ee19:            break;             
1:a43ee19:         }
1:a43ee19:         
1:a43ee19:         
1:a43ee19: 
1:a43ee19:         assertTrue("Expect a plan to thrown out", thrownOut);
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     private static String getSQL(String sqlBase, int i)
1:a43ee19:     {
1:a43ee19:         StringBuffer sb = new StringBuffer();
1:a43ee19:         int rp = sqlBase.indexOf('&');
1:a43ee19:         sb.append(sqlBase.substring(0, rp));
1:a43ee19:         sb.append(i);
1:a43ee19:         if (rp+1 < sqlBase.length())
1:a43ee19:             sb.append(sqlBase.substring(rp+1));
1:a43ee19:         
1:a43ee19:         
1:a43ee19:         return sb.toString();       
1:a43ee19:     }
1:a43ee19:     
1:a43ee19:     private boolean isPlanInCache(PreparedStatement ps) throws SQLException {
1:a43ee19:         cacheInPlanPS_ID.setString(1, ps.toString());
1:a43ee19:         ResultSet rs = cacheInPlanPS_ID.executeQuery();
1:a43ee19:         rs.next();
1:a43ee19:         int count = rs.getInt(1);
1:a43ee19:         rs.close();
1:a43ee19:         assertTrue("Statement in cache multiple times ", count <= 1);
1:a43ee19:         return count == 1;
1:a43ee19:     }
1:a43ee19:     private boolean isPlanInCache(String schema, String sql) throws SQLException {
1:a43ee19:         cacheInPlanPS_TEXT.setString(1, schema);
1:a43ee19:         cacheInPlanPS_TEXT.setString(2, sql);
1:a43ee19:         ResultSet rs = cacheInPlanPS_TEXT.executeQuery();
1:a43ee19:         rs.next();
1:a43ee19:         int count = rs.getInt(1);
1:a43ee19:         rs.close();
1:a43ee19:         assertTrue("Statement in cache multiple times ", count <= 1);
1:a43ee19:         cacheInPlanPS_TEXT.clearParameters();
1:a43ee19:         return count == 1;
1:a43ee19:     }
1:a43ee19: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * replacing the and with a number increasing from 0 to number - 1
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("StatementPlanCacheTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(
1:             "StatementPlanCacheTest:derby.language.statementCacheSize=" + name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9850fb9
/////////////////////////////////////////////////////////////////////////
1:         emptyStatementCache();
commit:98ceb6f
/////////////////////////////////////////////////////////////////////////
1:         cacheInPlanPS_ID = null;
1:         cacheInPlanPS_TEXT = null;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:293a5e6
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(suite);
/////////////////////////////////////////////////////////////////////////
0:         s.execute("CALL SYSCS_UTIL.SYSCS_EMPTY_STATEMENT_CACHE()");
commit:5e94b1c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
/////////////////////////////////////////////////////////////////////////
1:      * Check that the same plan can be shared across
1:      * Statement, PreparedStatement and CallableStatement.
1:      */
1:     public void testAcrossStatementObjects() throws SQLException
1:     {
1:         String schema = this.getTestConfiguration().getUserName();
1:         
1:         String sql = sql = "CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(0)";
1:         Statement s = createStatement();
1:         s.execute(sql);
1:         s.close();
1:         
1:         assertTrue(sql, isPlanInCache(schema, sql));
1:         
1:         PreparedStatement ps = prepareStatement(sql);
1:         assertTrue(sql, isPlanInCache(ps));
1:                
1:         CallableStatement cs = prepareCall(sql);      
1:         assertTrue(sql, isPlanInCache(cs));
1:              
1:         // Check the prepared statement matches the callable
1:         assertEquals(ps.toString(), cs.toString());
1:         
1:         ps.close();
1:         cs.close();
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1:             // Check caching is across statements
/////////////////////////////////////////////////////////////////////////
1:             
1:             // Check the caching is across connections
1:             Connection c2 = openDefaultConnection();
1:             PreparedStatement psD = isCall ?
1:                     c2.prepareCall(sql[i]) : c2.prepareStatement(sql[i]);
1:             
1:             assertEquals(sql[i], firstCompileID[i], psD.toString());
1:             psD.close();
1:             c2.close();
1:             
commit:a43ee19
/////////////////////////////////////////////////////////////////////////
1: /*
1: *
1: * Derby - Class org.apache.derbyTesting.functionTests.lang.StatementPlanCacheTest
1: *
1: * Licensed to the Apache Software Foundation (ASF) under one or more
1: * contributor license agreements.  See the NOTICE file distributed with
1: * this work for additional information regarding copyright ownership.
1: * The ASF licenses this file to You under the Apache License, Version 2.0
1: * (the "License"); you may not use this file except in compliance with
1: * the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing, 
1: * software distributed under the License is distributed on an 
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1: * either express or implied. See the License for the specific 
1: * language governing permissions and limitations under the License.
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: 
1: /**
1:  * Tests statement plan caching.
1:  * <BR>
1:  * Size of the cache can be configured by derby.language.statementCacheSize.
1:  * derby.language.statementCacheSize.
1:  * <BR>
1:  * The statement cache can be viewed using the diagnostic table
1:  * SYSCS_DIAG.STATEMENT_CACHE
1:  * <BR>
1:  * The test also uses the fact that toString() for a Derby embedded
1:  * prepared statement returns a string identifier that matches the
1:  * ID column of SYSCS_DIAG.STATEMENT_CACHE.
1:  *
1:  */
1: public class StatementPlanCacheTest extends BaseJDBCTestCase {
1:     
1:     private static int CACHE_SIZE;
1:     
1:     private int statmentCacheSize;
1:     private PreparedStatement cacheInPlanPS_ID;
1:     private PreparedStatement cacheInPlanPS_TEXT;
1:   
1:     public StatementPlanCacheTest(String name) {
1:         super(name);
1:         statmentCacheSize = CACHE_SIZE;
1:     }
1:     
1:     /**
1:      * Runs in embedded only since it's testing the server side cache.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("StatementPlanCacheTest");
1:         
1:         CACHE_SIZE = 100; // default cache size
1:         suite.addTest(baseSuite("default"));
1:         suite.addTest(suiteWithSizeSet(5));
1:         suite.addTest(suiteWithSizeSet(140));
1:         
1:         // no caching
1:         suite.addTest(DatabasePropertyTestSetup.singleProperty(
1:                 new StatementPlanCacheTest("noCachingTest"),
1:                 "derby.language.statementCacheSize", "0", true));
1:         
1:         
0:         return new CleanDatabaseTestSetup(suite) {
0:             protected void decorateSQL(Statement s) throws SQLException {
0:                 s.execute("CREATE PROCEDURE EMPTY_STATEMENT_CACHE() " +
0:                         "LANGUAGE JAVA PARAMETER STYLE JAVA " +
0:                         "NO SQL " +
0:                         "EXTERNAL NAME 'org.apache.derby.diag.StatementCache.emptyCache'");
1:             }
1:             
0:         };
1:     }
1:     
1:     private static Test suiteWithSizeSet(int cacheSize)
1:     {
1:         // Sets up the cache size picked up by the constructor of this class
1:         CACHE_SIZE = cacheSize;
1:         String cs = Integer.toString(cacheSize);
1:         return DatabasePropertyTestSetup.singleProperty(
1:                 baseSuite(cs),
1:                 "derby.language.statementCacheSize", cs, true);
1:     }
1:     
1:     private static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite("StatementPlanCacheTest:derby.language.statementCacheSize=" + name);
1:         suite.addTestSuite(StatementPlanCacheTest.class);
1:         return suite;
1:     }
1:     
1:     /**
1:      * Prepare the statement that sees if a statement given its
1:      * ID is in the cache. We hold onto it so that the statement
1:      * cache can be emptied and executing this will not alter
1:      * the state of cache.
1:      * Empty the statement cache so that each fixture starts
1:      * out with an empty cache.
1:      */
1:     protected void setUp() throws SQLException  {
1:         cacheInPlanPS_ID = prepareStatement(
1:                 "SELECT COUNT(ID) FROM SYSCS_DIAG.STATEMENT_CACHE WHERE ID = ?");
1:         cacheInPlanPS_TEXT = prepareStatement(
1:                 "SELECT COUNT(ID) FROM SYSCS_DIAG.STATEMENT_CACHE WHERE " +
1:                 "SCHEMANAME = ? AND SQL_TEXT = ?");
1:         Statement s = createStatement();
0:         s.execute("CALL EMPTY_STATEMENT_CACHE()");
1:         s.close();
1:        
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         cacheInPlanPS_ID.close();
1:         cacheInPlanPS_TEXT.close();
1:         super.tearDown();
1:     }
1:     
1:     /**
1:      * Check that when the cache size is set to zero that
1:      * no caching takes place. Tests with Statement, PreparedStatement
1:      * and CallableStatement.
1:      */
1:     public void noCachingTest() throws SQLException
1:     {
1:         String schema = this.getTestConfiguration().getUserName();
1:         
1:         String sql = "VALUES 1";
1:         Statement s = createStatement();
1:         s.executeQuery(sql).close();
1:         s.close();
1:         
1:         assertFalse(sql, isPlanInCache(schema, sql));
1:         
1:         prepareStatement(sql).close();
1:         assertFalse(sql, isPlanInCache(schema, sql));
1:         
1:         sql = "CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(0)";
1:         prepareCall(sql).close();
1:         assertFalse(sql, isPlanInCache(schema, sql));
1:     }
1:     
1:     /**
1:      * Test that statements that fail to compile do not end up in the cache.
1:      */
1:     public void testCompileFailuresNotInCache() throws SQLException
1:     {
1:         String schema = this.getTestConfiguration().getUserName();
1:         
1:         // Parse error
1:         String sql = "TO BE OR NOT TO BE";
1:         assertCompileError("42X01", sql);
1:         assertFalse(sql, isPlanInCache(schema, sql));
1:         
1:         // Valid tokens but missing elements
1:         sql = "CREATE PROCEDURE BAD_PROC() EXTERNAL NAME 'lll' LANGUAGE JAVA";
1:         assertCompileError("42X01", sql);
1:         assertFalse(sql, isPlanInCache(schema, sql));
1:         
1:         // Bind error
1:         sql = "SELECT * FROM NO_SUCH_TABLE_EXISTS";
1:         assertCompileError("42X05", sql);
1:         assertFalse(sql, isPlanInCache(schema, sql));  
1:     } 
1:     
1:     /**
1:      * Test statement caching according to the size of the cache
1:      * using PreparedStatement.
1:      * 
1:      */
1:     public void testPreparedStatementPlanCaching() throws SQLException
1:     {
1:         checkPreparedPlanInCache(statmentCacheSize, "VALUES &");
1:     }
1:     
1:     /**
1:      * Test statement caching according to the size of the cache
1:      * using CallableStatement.
1:      * 
1:      */
1:     public void testCallableStatementPlanCaching() throws SQLException
1:     {
1:         checkPreparedPlanInCache(statmentCacheSize,
1:                 "CALL SYSCS_UTIL.SYSCS_SET_STATISTICS_TIMING(&)");
1:     }    
1:     
1:    
1:     /**
1:      * Compile a number of statements based upon the sqlbase
0:      * replacing the & with a number increasing from 0 to number - 1
1:      * 
1:      * Uses PreparedStatement unless sqlbase starts with CALL then
1:      * CallableStatement is used.
1:      * 
1:      * Asserts that the statements appear in the cache and that recompiling
1:      * it picks up the same plan.
1:      */
1:     private void checkPreparedPlanInCache(int number,
1:             String sqlBase) throws SQLException
1:     {
1:         boolean isCall = sqlBase.startsWith("CALL ");
1:         
1:         String[] sql = new String[number];
1:         String[] firstCompileID = new String[sql.length];
1:         
1:         for (int i = 0; i < firstCompileID.length; i++ )
1:         {
1:            
1:             sql[i] = getSQL(sqlBase, i);
1:             PreparedStatement ps = isCall ?
1:                     prepareCall(sql[i]) : prepareStatement(sql[i]);
1:             assertTrue(sql[i], isPlanInCache(ps));
1:             firstCompileID[i] = ps.toString();
1:             ps.close();
1:         }
1:         
1:         
1:         for (int i = 0; i < firstCompileID.length; i++ )
1:         {
1:             PreparedStatement ps = isCall ?
1:                     prepareCall(sql[i]) : prepareStatement(sql[i]);
1:             PreparedStatement ps2 = isCall ?
1:                     prepareCall(sql[i]) : prepareStatement(sql[i]);
1:             assertTrue(sql[i], isPlanInCache(ps));
1:             assertEquals(sql[i], firstCompileID[i], ps.toString());
1:             assertEquals(sql[i], ps.toString(), ps2.toString());
1:             ps.close();
1:             ps2.close();
1:         }
1:         
1:         String schema = this.getTestConfiguration().getUserName();
1:         
1:         // Now check that futher statements throw out existing cache entries.
1:         for (int n = firstCompileID.length; n < firstCompileID.length*2; n++)
1:         {
1:             // Compile a new statement, ends up in cache.
1:             String sqlN = getSQL(sqlBase, n);
1:             PreparedStatement ps = isCall ?
1:                     prepareCall(sqlN) : prepareStatement(sqlN);
1:             assertTrue(sqlN, isPlanInCache(ps));
1:             
1:             ps.close();
1:         }
1:         
1:         // Can only assume some of the original statements will
1:         // have been thrown out.
1:         boolean thrownOut = false;
1:         for (int i = 0; i < sql.length; i++)
1:         {
1:             if (isPlanInCache(schema, sql[i]))
1:                 continue;
1:             
1:            thrownOut = true;
1:            break;             
1:         }
1:         
1:         
1: 
1:         assertTrue("Expect a plan to thrown out", thrownOut);
1:     }
1:     
1:     private static String getSQL(String sqlBase, int i)
1:     {
1:         StringBuffer sb = new StringBuffer();
1:         int rp = sqlBase.indexOf('&');
1:         sb.append(sqlBase.substring(0, rp));
1:         sb.append(i);
1:         if (rp+1 < sqlBase.length())
1:             sb.append(sqlBase.substring(rp+1));
1:         
1:         
1:         return sb.toString();       
1:     }
1:     
1:     private boolean isPlanInCache(PreparedStatement ps) throws SQLException {
1:         cacheInPlanPS_ID.setString(1, ps.toString());
1:         ResultSet rs = cacheInPlanPS_ID.executeQuery();
1:         rs.next();
1:         int count = rs.getInt(1);
1:         rs.close();
1:         assertTrue("Statement in cache multiple times ", count <= 1);
1:         return count == 1;
1:     }
1:     private boolean isPlanInCache(String schema, String sql) throws SQLException {
1:         cacheInPlanPS_TEXT.setString(1, schema);
1:         cacheInPlanPS_TEXT.setString(2, sql);
1:         ResultSet rs = cacheInPlanPS_TEXT.executeQuery();
1:         rs.next();
1:         int count = rs.getInt(1);
1:         rs.close();
1:         assertTrue("Statement in cache multiple times ", count <= 1);
1:         cacheInPlanPS_TEXT.clearParameters();
1:         return count == 1;
1:     }
1: }
============================================================================