1:c8603c4: /*
5:c8603c4: 
1:c8603c4:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GenericMode
1:c8603c4: 
1:c8603c4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c8603c4:    contributor license agreements.  See the NOTICE file distributed with
1:c8603c4:    this work for additional information regarding copyright ownership.
1:c8603c4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:c8603c4:    (the "License"); you may not use this file except in compliance with
1:c8603c4:    the License.  You may obtain a copy of the License at
1:c8603c4: 
1:c8603c4:      http://www.apache.org/licenses/LICENSE-2.0
1:c8603c4: 
1:c8603c4:    Unless required by applicable law or agreed to in writing, software
1:c8603c4:    distributed under the License is distributed on an "AS IS" BASIS,
1:c8603c4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8603c4:    See the License for the specific language governing permissions and
1:c8603c4:    limitations under the License.
1:c8603c4: 
1:c8603c4:  */
1:c8603c4: package org.apache.derbyTesting.functionTests.tests.lang;
1:c8603c4: 
1:f798a41: import java.math.BigDecimal;
1:c8603c4: import java.util.Arrays;
1:f798a41: import java.util.Collections;
1:c8603c4: import java.util.HashMap;
1:c8603c4: 
1:c8603c4: import org.apache.derby.agg.Aggregator;
1:c8603c4: 
1:f798a41: /**
1:f798a41:  * <p>
1:f798a41:  * This is a generic mode aggregator for testing with many types.
1:f798a41:  * </p>
1:f798a41:  */
1:0ad97c9: public  class   GenericMode<B extends Comparable<B>>    implements  Aggregator<B,B,GenericMode<B>>
1:c8603c4: {
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // NESTED CLASSES
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:f798a41:     public  static  final   class   BigDecimalMode extends GenericMode<BigDecimal> {}
1:f798a41:     public  static  final   class   BooleanMode extends GenericMode<Boolean> {}
1:f798a41:     public  static  final   class   ShortMode extends GenericMode<Short> {}
1:c8603c4:     public  static  final   class   IntMode extends GenericMode<Integer> {}
1:f798a41:     public  static  final   class   BigintMode extends GenericMode<Long> {}
1:f798a41:     public  static  final   class   DoubleMode extends GenericMode<Double> {}
1:f798a41:     public  static  final   class   RealMode extends GenericMode<Float> {}
1:c8603c4:     public  static  final   class   StringMode extends GenericMode<String> {}
1:0acf797:     public  static  final   class   FullNameMode extends GenericMode<FullName> {}
1:c8603c4:     
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // STATE
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:0ad97c9:     private HashMap<B,Accumulator<B>>  _accumulators;
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // CONSTRUCTOR
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     public  GenericMode() {}
1:c8603c4:     
1:c8603c4:     public  void    init()
1:c8603c4:     {
1:0ad97c9:         _accumulators = new HashMap<B,Accumulator<B>>();
1:c8603c4:     }
1:0ad97c9:     public  void    accumulate( B value )
1:c8603c4:     {
1:c8603c4:         getAccumulator( value ).add( 1 );
1:c8603c4:     }
1:0ad97c9:     public  void    merge( GenericMode<B> otherAggregator )
1:c8603c4:     {
1:0ad97c9:         HashMap<B,Accumulator<B>>  otherAccumulators = otherAggregator._accumulators;
1:c8603c4:         
1:0ad97c9:         for ( B value : otherAccumulators.keySet() )
1:c8603c4:         {
1:c8603c4:             getAccumulator( value ).add( otherAccumulators.get( value ).getCount() );
1:c8603c4:         }
1:c8603c4:     }
1:c8603c4: 
1:0ad97c9:     public  B terminate()
1:c8603c4:     {
1:f798a41:         return _accumulators.isEmpty() ? null : Collections.max( _accumulators.values() ).getValue();
1:c8603c4:     }
1:c8603c4: 
1:0ad97c9:     private Accumulator<B>   getAccumulator( B value )
1:c8603c4:     {
1:0ad97c9:         Accumulator<B>   retval = _accumulators.get( value );
1:c8603c4:         if ( retval == null )
1:c8603c4:         {
1:0ad97c9:             retval = new Accumulator<B>( value );
1:c8603c4:             _accumulators.put( value, retval );
1:c8603c4:         }
1:c8603c4: 
1:c8603c4:         return retval;
1:c8603c4:     }
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // NESTED CLASSES
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:0ad97c9:     public  static  final   class   Accumulator<B extends Comparable<B>> implements  Comparable<Accumulator<B>>
1:c8603c4:     {
1:0ad97c9:         private B _value;
1:c8603c4:         private int         _count;
1:c8603c4: 
1:0ad97c9:         public  Accumulator( B value )
1:c8603c4:         {
1:c8603c4:             _value = value;
1:c8603c4:             _count = 0;
1:c8603c4:         }
1:c8603c4: 
1:c8603c4:         public  void    add( int increment ) { _count += increment; }
1:c8603c4: 
1:0ad97c9:         public  B getValue() { return _value; }
1:c8603c4:         public  int     getCount() { return _count; }
1:c8603c4: 
1:c8603c4:         // Comparable behavior
1:0ad97c9:         public  int compareTo( Accumulator<B> that )
1:c8603c4:         {
1:c8603c4:             int retval = this._count - that._count;
1:c8603c4: 
1:c8603c4:             if ( retval != 0 ) { return retval; }
1:c8603c4:             else { return this._value.compareTo( that._value ); }
1:c8603c4:         }
1:c8603c4:     }
1:c8603c4: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0ad97c9
/////////////////////////////////////////////////////////////////////////
1: public  class   GenericMode<B extends Comparable<B>>    implements  Aggregator<B,B,GenericMode<B>>
/////////////////////////////////////////////////////////////////////////
1:     private HashMap<B,Accumulator<B>>  _accumulators;
/////////////////////////////////////////////////////////////////////////
1:         _accumulators = new HashMap<B,Accumulator<B>>();
1:     public  void    accumulate( B value )
1:     public  void    merge( GenericMode<B> otherAggregator )
1:         HashMap<B,Accumulator<B>>  otherAccumulators = otherAggregator._accumulators;
1:         for ( B value : otherAccumulators.keySet() )
1:     public  B terminate()
1:     private Accumulator<B>   getAccumulator( B value )
1:         Accumulator<B>   retval = _accumulators.get( value );
1:             retval = new Accumulator<B>( value );
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   class   Accumulator<B extends Comparable<B>> implements  Comparable<Accumulator<B>>
1:         private B _value;
1:         public  Accumulator( B value )
/////////////////////////////////////////////////////////////////////////
1:         public  B getValue() { return _value; }
1:         public  int compareTo( Accumulator<B> that )
commit:f798a41
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: import java.util.Collections;
1: /**
1:  * <p>
1:  * This is a generic mode aggregator for testing with many types.
1:  * </p>
1:  */
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   class   BigDecimalMode extends GenericMode<BigDecimal> {}
1:     public  static  final   class   BooleanMode extends GenericMode<Boolean> {}
1:     public  static  final   class   ShortMode extends GenericMode<Short> {}
1:     public  static  final   class   BigintMode extends GenericMode<Long> {}
1:     public  static  final   class   DoubleMode extends GenericMode<Double> {}
1:     public  static  final   class   RealMode extends GenericMode<Float> {}
/////////////////////////////////////////////////////////////////////////
1:         return _accumulators.isEmpty() ? null : Collections.max( _accumulators.values() ).getValue();
/////////////////////////////////////////////////////////////////////////
commit:0acf797
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   class   FullNameMode extends GenericMode<FullName> {}
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GenericMode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.util.Arrays;
1: import java.util.HashMap;
1: 
1: import org.apache.derby.agg.Aggregator;
1: 
0: public  class   GenericMode<V extends Comparable<V>>    implements  Aggregator<V,V,GenericMode<V>>
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   class   IntMode extends GenericMode<Integer> {}
1:     public  static  final   class   StringMode extends GenericMode<String> {}
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     private HashMap<V,Accumulator<V>>  _accumulators;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  GenericMode() {}
1:     
1:     public  void    init()
1:     {
0:         _accumulators = new HashMap<V,Accumulator<V>>();
1:     }
0:     public  void    accumulate( V value )
1:     {
1:         getAccumulator( value ).add( 1 );
1:     }
0:     public  void    merge( GenericMode<V> otherAggregator )
1:     {
0:         HashMap<V,Accumulator<V>>  otherAccumulators = otherAggregator._accumulators;
1:         
0:         for ( V value : otherAccumulators.keySet() )
1:         {
1:             getAccumulator( value ).add( otherAccumulators.get( value ).getCount() );
1:         }
1:     }
1: 
0:     // Generic arrays can't be created, so we have to cast the value on the way out.
0:     // Suppress the resulting compiler warning.
0:     @SuppressWarnings("unchecked")
0:     public  V terminate()
1:     {
0:         int     numAccumulators = _accumulators.size();
0:         if ( numAccumulators == 0 ) { return null; }
1:         
0:         Accumulator[]   accumulators = new Accumulator[ numAccumulators ];
1: 
0:         accumulators = _accumulators.values().toArray( accumulators );
0:         Arrays.sort( accumulators );
1:         
0:         return (V) accumulators[ numAccumulators - 1 ].getValue();
1:     }
1: 
0:     private Accumulator<V>   getAccumulator( V value )
1:     {
0:         Accumulator<V>   retval = _accumulators.get( value );
1:         if ( retval == null )
1:         {
0:             retval = new Accumulator<V>( value );
1:             _accumulators.put( value, retval );
1:         }
1: 
1:         return retval;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     public  static  final   class   Accumulator<V extends Comparable<V>> implements  Comparable<Accumulator<V>>
1:     {
0:         private V _value;
1:         private int         _count;
1: 
0:         public  Accumulator( V value )
1:         {
1:             _value = value;
1:             _count = 0;
1:         }
1: 
1:         public  void    add( int increment ) { _count += increment; }
1: 
0:         public  V getValue() { return _value; }
1:         public  int     getCount() { return _count; }
1: 
1:         // Comparable behavior
0:         public  int compareTo( Accumulator<V> that )
1:         {
0:             if ( that == null ) { return 1; }
1: 
1:             int retval = this._count - that._count;
1: 
1:             if ( retval != 0 ) { return retval; }
1:             else { return this._value.compareTo( that._value ); }
1:         }
1:     }
1: }
============================================================================