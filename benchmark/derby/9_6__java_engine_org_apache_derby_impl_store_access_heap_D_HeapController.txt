1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.heap.D_HeapController
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.heap;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
1:eac0369: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   The HeapController_D class implements the Diagnostics protocol for the
1:eac0369:   HeapController class.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: class TableStats
1:eac0369: {
1:eac0369:     public int num_pages          = 0; // number of pages in heap.
1:eac0369:     public int num_overflow_pgs   = 0; // number of overflow pages heap.
1:eac0369:     public int num_entries        = 0; // number recs on page
1:eac0369:     public int num_deleted        = 0; // number of recs on page marked deleted.
1:eac0369:     public long max_pageno        = 0; // biggest page number allocated
1:eac0369:     public long num_free_bytes    = 0; // number of free bytes on the pages.
1:eac0369:     public long num_res_bytes     = 0; // number of reserved bytes on the pages.
1:eac0369:     public long num_overflow_rows = 0; // number of over flow rows on page.
1:eac0369:     public long num_rowsize_bytes = 0; // number of bytes in rows.
1:eac0369:     public long min_rowsize_bytes = Long.MAX_VALUE; // length of shortest row.
1:eac0369:     public long max_rowsize_bytes = Long.MIN_VALUE; // length of longest row.
1:eac0369: }
1:eac0369: 
1:eac0369: public class D_HeapController extends DiagnosticableGeneric
1:eac0369: {
1:eac0369:     /* Private/Protected methods of This class: */
1:eac0369:     private static void diag_page(
1:eac0369:     Page        page,
1:eac0369:     Properties  prop,
1:eac0369:     TableStats  stat)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         stat.num_pages++;
1:eac0369:         stat.num_entries += page.recordCount();
1:eac0369:         stat.num_deleted += 
1:eac0369:             (page.recordCount() - page.nonDeletedRecordCount());
1:eac0369:         stat.max_pageno = Math.max(stat.max_pageno, page.getPageNumber());
1:eac0369: 
1:eac0369:         DiagnosticUtil.findDiagnostic(page).diag_detail(prop);
1:eac0369: 
1:eac0369:         // number of free bytes on page.
1:eac0369:         int free_bytes = 
1:eac0369:             Integer.parseInt(prop.getProperty(Page.DIAG_BYTES_FREE));
1:eac0369: 
1:eac0369:         stat.num_free_bytes += free_bytes;
1:eac0369: 
1:eac0369:         // number of bytes reserved on page.
1:eac0369:         int res_bytes = 
1:eac0369:             Integer.parseInt(prop.getProperty(Page.DIAG_BYTES_RESERVED));
1:eac0369: 
1:eac0369:         stat.num_res_bytes += res_bytes;
1:eac0369: 
1:eac0369:         // overflow rows.
1:eac0369:         int overflow = 
1:eac0369:             Integer.parseInt(prop.getProperty(Page.DIAG_NUMOVERFLOWED));
1:eac0369: 
1:eac0369:         stat.num_overflow_rows += overflow;
1:eac0369: 
1:eac0369:         // size of rows.
1:eac0369:         int rowsize = 
1:eac0369:             Integer.parseInt(prop.getProperty(Page.DIAG_ROWSIZE));
1:eac0369: 
1:eac0369:         stat.num_rowsize_bytes += rowsize;
1:eac0369: 
1:eac0369:         // minimum row size.
1:eac0369:         int min_rowsize = 
1:eac0369:             Integer.parseInt(prop.getProperty(Page.DIAG_MINROWSIZE));
1:eac0369: 
1:eac0369:         if (min_rowsize != 0)
1:eac0369:             stat.min_rowsize_bytes = 
1:eac0369:                 Math.min(stat.min_rowsize_bytes, min_rowsize);
1:eac0369: 
1:eac0369:         // maximum row size.
1:eac0369:         int max_rowsize = 
1:eac0369:             Integer.parseInt(prop.getProperty(Page.DIAG_MAXROWSIZE));
1:eac0369: 
1:eac0369:         stat.max_rowsize_bytes = Math.max(stat.max_rowsize_bytes, max_rowsize);
1:eac0369:     }
1:eac0369: 
1:eac0369:     private static String out_summary(
1:eac0369:     String  hdr,
1:eac0369:     long    value,
1:eac0369:     double  ratio,
1:eac0369:     String  ratio_desc)
1:eac0369:     {
1:eac0369:         String short_str;
1:eac0369: 
1:eac0369:         if (ratio > 0.001)
1:eac0369:         {
1:c7a1d17:             String double_str = "" + ratio;
1:eac0369:             short_str = double_str.substring(
1:eac0369:                 0, 
1:eac0369:                 Math.min(double_str.lastIndexOf(".") + 3, double_str.length()));
1:eac0369:         }
1:eac0369:         else 
1:eac0369:         {
1:eac0369:             short_str = "NA";
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(
1:eac0369:             "\t" + hdr + value + ".\t(" + short_str + 
1:eac0369:             " " + ratio_desc + ").\n");
1:eac0369:     }
1:eac0369:             
1:eac0369: 
1:eac0369:     private static String diag_tabulate(
1:eac0369:     Properties  prop,
1:eac0369:     TableStats stat)
1:eac0369:     {
1:4a4b0a8:         String ret_string   = "";
1:eac0369: 
1:eac0369:         // Totals:
1:eac0369:         ret_string += 
1:eac0369:             "Heap conglom has:\n" + 
1:eac0369:             "\t" + prop.getProperty(Page.DIAG_PAGE_SIZE) + " bytes per page\n" +
1:eac0369:             "\t" + stat.num_pages           + " total used pages (" +
1:eac0369:                 (Integer.parseInt(prop.getProperty(Page.DIAG_PAGE_SIZE)) * 
1:eac0369:                      stat.num_pages) + 
1:eac0369:                 " bytes)\n"            +
1:eac0369:             "\tmaximum page number   = " + stat.max_pageno + ".\n"         +
1:eac0369:             "\treserved space %      = " + prop.getProperty(Page.DIAG_RESERVED_SPACE) + "%.\n"         +
1:eac0369:             "\tminimum record size   = " + prop.getProperty(Page.DIAG_MINIMUM_REC_SIZE) + ".\n"         +
1:eac0369:             "\tminimum record length = " + stat.min_rowsize_bytes + ".\n" +
1:eac0369:             "\tmaximum record length = " + stat.max_rowsize_bytes + ".\n" +
1:eac0369:             "\t# of bytes in rows    = " + stat.num_rowsize_bytes + "." +
1:eac0369:                 "\t(" + 
1:eac0369:                     (stat.num_entries == 0 ? 
1:eac0369:                          0 : (stat.num_rowsize_bytes / stat.num_entries)) + 
1:eac0369:                 " bytes/row).\n"                                            +
1:eac0369:             out_summary(
1:eac0369:                 "# of reserved bytes   = ", 
1:eac0369:                 stat.num_res_bytes,
1:eac0369:                 (stat.num_res_bytes / stat.num_pages),
1:eac0369:                 "reserved bytes/page") +
1:eac0369:             out_summary(
1:eac0369:                 "# of free bytes       = ",
1:eac0369:                 stat.num_free_bytes,
1:eac0369:                 (stat.num_free_bytes / stat.num_pages),
1:eac0369:                 "free bytes/page")  +
1:eac0369:             out_summary(
1:eac0369:                 "# of total records    = ",
1:eac0369:                 stat.num_entries,
1:eac0369:                 (((double) stat.num_entries) / stat.num_pages),
1:eac0369:                 "records/page") +
1:eac0369:             out_summary(
1:eac0369:                 "# of overflow records = ",
1:eac0369:                 stat.num_overflow_rows,
1:eac0369:                 (((double) stat.num_overflow_rows) / stat.num_pages),
1:eac0369:                 "overflow records/page") +
1:eac0369:             out_summary(
1:eac0369:                 "# of deleted records  = ",
1:eac0369:                 stat.num_deleted,
1:eac0369:                 (((double) stat.num_deleted) / stat.num_pages),
1:eac0369:                 "deleted records/page"); 
1:eac0369: 
1:eac0369:         return(ret_string);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Diagnosticable
1:eac0369: 	*/
1:eac0369:     public void init(Object obj)
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(obj instanceof HeapController);
1:eac0369: 
1:eac0369:         super.init(obj);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Default implementation of diagnostic on the object.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a string with whatever diagnostic information
1:eac0369:      * you would like to provide about this object.
1:eac0369:      * <p>
1:eac0369:      * This routine should be overriden by a real implementation of the
1:eac0369:      * diagnostic information you would like to provide.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return A string with diagnostic information about the object.
1:eac0369:      *
1:94f158a:      * @exception StandardException  Standard Derby exception policy
1:eac0369:      **/
1:eac0369:     public String diag()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         long pageid;
1:eac0369:         ContainerHandle container = 
1:eac0369:             ((HeapController) this.diag_object).getOpenConglom().getContainer();
1:eac0369: 
1:eac0369:         TableStats stat = new TableStats();
1:eac0369: 
1:eac0369:         // ask page to provide diag info:
1:eac0369:         Properties prop = new Properties();
1:eac0369:         prop.put(Page.DIAG_PAGE_SIZE,        "");
1:eac0369:         prop.put(Page.DIAG_BYTES_FREE,       "");
1:eac0369:         prop.put(Page.DIAG_BYTES_RESERVED,   "");
1:eac0369:         prop.put(Page.DIAG_RESERVED_SPACE,   "");
1:eac0369:         prop.put(Page.DIAG_MINIMUM_REC_SIZE, "");
1:eac0369:         prop.put(Page.DIAG_NUMOVERFLOWED,    "");
1:eac0369:         prop.put(Page.DIAG_ROWSIZE,          "");
1:eac0369:         prop.put(Page.DIAG_MINROWSIZE,       "");
1:eac0369:         prop.put(Page.DIAG_MAXROWSIZE,       "");
1:eac0369: 
1:eac0369:         // scan all pages in the heap gathering summary stats in stat
1:eac0369:         Page page = container.getFirstPage();
1:eac0369: 
1:eac0369:         while (page != null)
1:eac0369:         {
1:56a7b39:             D_HeapController.diag_page(page, prop, stat);
1:eac0369:             pageid = page.getPageNumber();
1:eac0369:             page.unlatch();
1:eac0369:             page = container.getNextPage(pageid);
1:eac0369:         }
1:eac0369: 
1:56a7b39:         return(D_HeapController.diag_tabulate(prop, stat));
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4a4b0a8
/////////////////////////////////////////////////////////////////////////
1:         String ret_string   = "";
commit:c7a1d17
/////////////////////////////////////////////////////////////////////////
1:             String double_str = "" + ratio;
author:Lily Wei
-------------------------------------------------------------------------------
commit:56a7b39
/////////////////////////////////////////////////////////////////////////
1:             D_HeapController.diag_page(page, prop, stat);
1:         return(D_HeapController.diag_tabulate(prop, stat));
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException  Standard Derby exception policy
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.heap.D_HeapController
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.heap
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.heap;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.services.diag.Diagnosticable;
1: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
1: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1: 
1: 
1: import java.util.Properties;
1: 
1: 
1: /**
1: 
1:   The HeapController_D class implements the Diagnostics protocol for the
1:   HeapController class.
1: 
1: **/
1: 
1: class TableStats
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     public int num_pages          = 0; // number of pages in heap.
1:     public int num_overflow_pgs   = 0; // number of overflow pages heap.
1:     public int num_entries        = 0; // number recs on page
1:     public int num_deleted        = 0; // number of recs on page marked deleted.
1:     public long max_pageno        = 0; // biggest page number allocated
1:     public long num_free_bytes    = 0; // number of free bytes on the pages.
1:     public long num_res_bytes     = 0; // number of reserved bytes on the pages.
1:     public long num_overflow_rows = 0; // number of over flow rows on page.
1:     public long num_rowsize_bytes = 0; // number of bytes in rows.
1:     public long min_rowsize_bytes = Long.MAX_VALUE; // length of shortest row.
1:     public long max_rowsize_bytes = Long.MIN_VALUE; // length of longest row.
1: }
1: 
1: public class D_HeapController extends DiagnosticableGeneric
1: {
1:     /* Private/Protected methods of This class: */
1:     private static void diag_page(
1:     Page        page,
1:     Properties  prop,
1:     TableStats  stat)
1:         throws StandardException
1:     {
1:         stat.num_pages++;
1:         stat.num_entries += page.recordCount();
1:         stat.num_deleted += 
1:             (page.recordCount() - page.nonDeletedRecordCount());
1:         stat.max_pageno = Math.max(stat.max_pageno, page.getPageNumber());
1: 
1:         DiagnosticUtil.findDiagnostic(page).diag_detail(prop);
1: 
1:         // number of free bytes on page.
1:         int free_bytes = 
1:             Integer.parseInt(prop.getProperty(Page.DIAG_BYTES_FREE));
1: 
1:         stat.num_free_bytes += free_bytes;
1: 
1:         // number of bytes reserved on page.
1:         int res_bytes = 
1:             Integer.parseInt(prop.getProperty(Page.DIAG_BYTES_RESERVED));
1: 
1:         stat.num_res_bytes += res_bytes;
1: 
1:         // overflow rows.
1:         int overflow = 
1:             Integer.parseInt(prop.getProperty(Page.DIAG_NUMOVERFLOWED));
1: 
1:         stat.num_overflow_rows += overflow;
1: 
1:         // size of rows.
1:         int rowsize = 
1:             Integer.parseInt(prop.getProperty(Page.DIAG_ROWSIZE));
1: 
1:         stat.num_rowsize_bytes += rowsize;
1: 
1:         // minimum row size.
1:         int min_rowsize = 
1:             Integer.parseInt(prop.getProperty(Page.DIAG_MINROWSIZE));
1: 
1:         if (min_rowsize != 0)
1:             stat.min_rowsize_bytes = 
1:                 Math.min(stat.min_rowsize_bytes, min_rowsize);
1: 
1:         // maximum row size.
1:         int max_rowsize = 
1:             Integer.parseInt(prop.getProperty(Page.DIAG_MAXROWSIZE));
1: 
1:         stat.max_rowsize_bytes = Math.max(stat.max_rowsize_bytes, max_rowsize);
1:     }
1: 
1:     private static String out_summary(
1:     String  hdr,
1:     long    value,
1:     double  ratio,
1:     String  ratio_desc)
1:     {
0:         String double_str = "" + ratio;
1:         String short_str;
1: 
1:         if (ratio > 0.001)
1:         {
1:             short_str = double_str.substring(
1:                 0, 
1:                 Math.min(double_str.lastIndexOf(".") + 3, double_str.length()));
1:         }
1:         else 
1:         {
1:             short_str = "NA";
1:         }
1: 
1:         return(
1:             "\t" + hdr + value + ".\t(" + short_str + 
1:             " " + ratio_desc + ").\n");
1:     }
1:             
1: 
1:     private static String diag_tabulate(
1:     Properties  prop,
1:     TableStats stat)
1:     {
0:         String ret_string   = new String();
1: 
1:         // Totals:
1:         ret_string += 
1:             "Heap conglom has:\n" + 
1:             "\t" + prop.getProperty(Page.DIAG_PAGE_SIZE) + " bytes per page\n" +
1:             "\t" + stat.num_pages           + " total used pages (" +
1:                 (Integer.parseInt(prop.getProperty(Page.DIAG_PAGE_SIZE)) * 
1:                      stat.num_pages) + 
1:                 " bytes)\n"            +
1:             "\tmaximum page number   = " + stat.max_pageno + ".\n"         +
1:             "\treserved space %      = " + prop.getProperty(Page.DIAG_RESERVED_SPACE) + "%.\n"         +
1:             "\tminimum record size   = " + prop.getProperty(Page.DIAG_MINIMUM_REC_SIZE) + ".\n"         +
1:             "\tminimum record length = " + stat.min_rowsize_bytes + ".\n" +
1:             "\tmaximum record length = " + stat.max_rowsize_bytes + ".\n" +
1:             "\t# of bytes in rows    = " + stat.num_rowsize_bytes + "." +
1:                 "\t(" + 
1:                     (stat.num_entries == 0 ? 
1:                          0 : (stat.num_rowsize_bytes / stat.num_entries)) + 
1:                 " bytes/row).\n"                                            +
1:             out_summary(
1:                 "# of reserved bytes   = ", 
1:                 stat.num_res_bytes,
1:                 (stat.num_res_bytes / stat.num_pages),
1:                 "reserved bytes/page") +
1:             out_summary(
1:                 "# of free bytes       = ",
1:                 stat.num_free_bytes,
1:                 (stat.num_free_bytes / stat.num_pages),
1:                 "free bytes/page")  +
1:             out_summary(
1:                 "# of total records    = ",
1:                 stat.num_entries,
1:                 (((double) stat.num_entries) / stat.num_pages),
1:                 "records/page") +
1:             out_summary(
1:                 "# of overflow records = ",
1:                 stat.num_overflow_rows,
1:                 (((double) stat.num_overflow_rows) / stat.num_pages),
1:                 "overflow records/page") +
1:             out_summary(
1:                 "# of deleted records  = ",
1:                 stat.num_deleted,
1:                 (((double) stat.num_deleted) / stat.num_pages),
1:                 "deleted records/page"); 
1: 
1:         return(ret_string);
1:     }
1: 
1: 	/*
1: 	** Methods of Diagnosticable
1: 	*/
1:     public void init(Object obj)
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(obj instanceof HeapController);
1: 
1:         super.init(obj);
1:     }
1: 
1: 
1:     /**
1:      * Default implementation of diagnostic on the object.
1:      * <p>
1:      * This routine returns a string with whatever diagnostic information
1:      * you would like to provide about this object.
1:      * <p>
1:      * This routine should be overriden by a real implementation of the
1:      * diagnostic information you would like to provide.
1:      * <p>
1:      *
1: 	 * @return A string with diagnostic information about the object.
1:      *
0:      * @exception StandardException  Standard cloudscape exception policy
1:      **/
1:     public String diag()
1:         throws StandardException
1:     {
1:         long pageid;
1:         ContainerHandle container = 
1:             ((HeapController) this.diag_object).getOpenConglom().getContainer();
1: 
1:         TableStats stat = new TableStats();
1: 
1:         // ask page to provide diag info:
1:         Properties prop = new Properties();
1:         prop.put(Page.DIAG_PAGE_SIZE,        "");
1:         prop.put(Page.DIAG_BYTES_FREE,       "");
1:         prop.put(Page.DIAG_BYTES_RESERVED,   "");
1:         prop.put(Page.DIAG_RESERVED_SPACE,   "");
1:         prop.put(Page.DIAG_MINIMUM_REC_SIZE, "");
1:         prop.put(Page.DIAG_NUMOVERFLOWED,    "");
1:         prop.put(Page.DIAG_ROWSIZE,          "");
1:         prop.put(Page.DIAG_MINROWSIZE,       "");
1:         prop.put(Page.DIAG_MAXROWSIZE,       "");
1: 
1:         // scan all pages in the heap gathering summary stats in stat
1:         Page page = container.getFirstPage();
1: 
1:         while (page != null)
1:         {
0:             this.diag_page(page, prop, stat);
1:             pageid = page.getPageNumber();
1:             page.unlatch();
1:             page = container.getNextPage(pageid);
1:         }
1: 
0:         return(this.diag_tabulate(prop, stat));
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.heap
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.heap;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.services.diag.Diagnosticable;
0: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
0: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
0: 
0: 
0: import java.util.Properties;
0: 
0: 
0: /**
0: 
0:   The HeapController_D class implements the Diagnostics protocol for the
0:   HeapController class.
0: 
0: **/
0: 
0: class TableStats
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     public int num_pages          = 0; // number of pages in heap.
0:     public int num_overflow_pgs   = 0; // number of overflow pages heap.
0:     public int num_entries        = 0; // number recs on page
0:     public int num_deleted        = 0; // number of recs on page marked deleted.
0:     public long max_pageno        = 0; // biggest page number allocated
0:     public long num_free_bytes    = 0; // number of free bytes on the pages.
0:     public long num_res_bytes     = 0; // number of reserved bytes on the pages.
0:     public long num_overflow_rows = 0; // number of over flow rows on page.
0:     public long num_rowsize_bytes = 0; // number of bytes in rows.
0:     public long min_rowsize_bytes = Long.MAX_VALUE; // length of shortest row.
0:     public long max_rowsize_bytes = Long.MIN_VALUE; // length of longest row.
0: }
0: 
0: public class D_HeapController extends DiagnosticableGeneric
0: {
0:     /* Private/Protected methods of This class: */
0:     private static void diag_page(
0:     Page        page,
0:     Properties  prop,
0:     TableStats  stat)
0:         throws StandardException
0:     {
0:         stat.num_pages++;
0:         stat.num_entries += page.recordCount();
0:         stat.num_deleted += 
0:             (page.recordCount() - page.nonDeletedRecordCount());
0:         stat.max_pageno = Math.max(stat.max_pageno, page.getPageNumber());
0: 
0:         DiagnosticUtil.findDiagnostic(page).diag_detail(prop);
0: 
0:         // number of free bytes on page.
0:         int free_bytes = 
0:             Integer.parseInt(prop.getProperty(Page.DIAG_BYTES_FREE));
0: 
0:         stat.num_free_bytes += free_bytes;
0: 
0:         // number of bytes reserved on page.
0:         int res_bytes = 
0:             Integer.parseInt(prop.getProperty(Page.DIAG_BYTES_RESERVED));
0: 
0:         stat.num_res_bytes += res_bytes;
0: 
0:         // overflow rows.
0:         int overflow = 
0:             Integer.parseInt(prop.getProperty(Page.DIAG_NUMOVERFLOWED));
0: 
0:         stat.num_overflow_rows += overflow;
0: 
0:         // size of rows.
0:         int rowsize = 
0:             Integer.parseInt(prop.getProperty(Page.DIAG_ROWSIZE));
0: 
0:         stat.num_rowsize_bytes += rowsize;
0: 
0:         // minimum row size.
0:         int min_rowsize = 
0:             Integer.parseInt(prop.getProperty(Page.DIAG_MINROWSIZE));
0: 
0:         if (min_rowsize != 0)
0:             stat.min_rowsize_bytes = 
0:                 Math.min(stat.min_rowsize_bytes, min_rowsize);
0: 
0:         // maximum row size.
0:         int max_rowsize = 
0:             Integer.parseInt(prop.getProperty(Page.DIAG_MAXROWSIZE));
0: 
0:         stat.max_rowsize_bytes = Math.max(stat.max_rowsize_bytes, max_rowsize);
0:     }
0: 
0:     private static String out_summary(
0:     String  hdr,
0:     long    value,
0:     double  ratio,
0:     String  ratio_desc)
0:     {
0:         String double_str = "" + ratio;
0:         String short_str;
0: 
0:         if (ratio > 0.001)
0:         {
0:             short_str = double_str.substring(
0:                 0, 
0:                 Math.min(double_str.lastIndexOf(".") + 3, double_str.length()));
0:         }
0:         else 
0:         {
0:             short_str = "NA";
0:         }
0: 
0:         return(
0:             "\t" + hdr + value + ".\t(" + short_str + 
0:             " " + ratio_desc + ").\n");
0:     }
0:             
0: 
0:     private static String diag_tabulate(
0:     Properties  prop,
0:     TableStats stat)
0:     {
0:         String ret_string   = new String();
0: 
0:         // Totals:
0:         ret_string += 
0:             "Heap conglom has:\n" + 
0:             "\t" + prop.getProperty(Page.DIAG_PAGE_SIZE) + " bytes per page\n" +
0:             "\t" + stat.num_pages           + " total used pages (" +
0:                 (Integer.parseInt(prop.getProperty(Page.DIAG_PAGE_SIZE)) * 
0:                      stat.num_pages) + 
0:                 " bytes)\n"            +
0:             "\tmaximum page number   = " + stat.max_pageno + ".\n"         +
0:             "\treserved space %      = " + prop.getProperty(Page.DIAG_RESERVED_SPACE) + "%.\n"         +
0:             "\tminimum record size   = " + prop.getProperty(Page.DIAG_MINIMUM_REC_SIZE) + ".\n"         +
0:             "\tminimum record length = " + stat.min_rowsize_bytes + ".\n" +
0:             "\tmaximum record length = " + stat.max_rowsize_bytes + ".\n" +
0:             "\t# of bytes in rows    = " + stat.num_rowsize_bytes + "." +
0:                 "\t(" + 
0:                     (stat.num_entries == 0 ? 
0:                          0 : (stat.num_rowsize_bytes / stat.num_entries)) + 
0:                 " bytes/row).\n"                                            +
0:             out_summary(
0:                 "# of reserved bytes   = ", 
0:                 stat.num_res_bytes,
0:                 (stat.num_res_bytes / stat.num_pages),
0:                 "reserved bytes/page") +
0:             out_summary(
0:                 "# of free bytes       = ",
0:                 stat.num_free_bytes,
0:                 (stat.num_free_bytes / stat.num_pages),
0:                 "free bytes/page")  +
0:             out_summary(
0:                 "# of total records    = ",
0:                 stat.num_entries,
0:                 (((double) stat.num_entries) / stat.num_pages),
0:                 "records/page") +
0:             out_summary(
0:                 "# of overflow records = ",
0:                 stat.num_overflow_rows,
0:                 (((double) stat.num_overflow_rows) / stat.num_pages),
0:                 "overflow records/page") +
0:             out_summary(
0:                 "# of deleted records  = ",
0:                 stat.num_deleted,
0:                 (((double) stat.num_deleted) / stat.num_pages),
0:                 "deleted records/page"); 
0: 
0:         return(ret_string);
0:     }
0: 
0: 	/*
0: 	** Methods of Diagnosticable
0: 	*/
0:     public void init(Object obj)
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(obj instanceof HeapController);
0: 
0:         super.init(obj);
0:     }
0: 
0: 
0:     /**
0:      * Default implementation of diagnostic on the object.
0:      * <p>
0:      * This routine returns a string with whatever diagnostic information
0:      * you would like to provide about this object.
0:      * <p>
0:      * This routine should be overriden by a real implementation of the
0:      * diagnostic information you would like to provide.
0:      * <p>
0:      *
0: 	 * @return A string with diagnostic information about the object.
0:      *
0:      * @exception StandardException  Standard cloudscape exception policy
0:      **/
0:     public String diag()
0:         throws StandardException
0:     {
0:         long pageid;
0:         ContainerHandle container = 
0:             ((HeapController) this.diag_object).getOpenConglom().getContainer();
0: 
0:         TableStats stat = new TableStats();
0: 
0:         // ask page to provide diag info:
0:         Properties prop = new Properties();
0:         prop.put(Page.DIAG_PAGE_SIZE,        "");
0:         prop.put(Page.DIAG_BYTES_FREE,       "");
0:         prop.put(Page.DIAG_BYTES_RESERVED,   "");
0:         prop.put(Page.DIAG_RESERVED_SPACE,   "");
0:         prop.put(Page.DIAG_MINIMUM_REC_SIZE, "");
0:         prop.put(Page.DIAG_NUMOVERFLOWED,    "");
0:         prop.put(Page.DIAG_ROWSIZE,          "");
0:         prop.put(Page.DIAG_MINROWSIZE,       "");
0:         prop.put(Page.DIAG_MAXROWSIZE,       "");
0: 
0:         // scan all pages in the heap gathering summary stats in stat
0:         Page page = container.getFirstPage();
0: 
0:         while (page != null)
0:         {
0:             this.diag_page(page, prop, stat);
0:             pageid = page.getPageNumber();
0:             page.unlatch();
0:             page = container.getNextPage(pageid);
0:         }
0: 
0:         return(this.diag_tabulate(prop, stat));
0:     }
0: }
============================================================================