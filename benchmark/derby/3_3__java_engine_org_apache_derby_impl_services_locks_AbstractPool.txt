1:d11eded: /*
1:d11eded: 
1:d11eded:    Derby - Class org.apache.derby.impl.services.locks.AbstractPool
1:d11eded: 
1:d11eded:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d11eded:    contributor license agreements.  See the NOTICE file distributed with
1:d11eded:    this work for additional information regarding copyright ownership.
1:d11eded:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d11eded:    (the "License"); you may not use this file except in compliance with
1:d11eded:    the License.  You may obtain a copy of the License at
1:d11eded: 
1:d11eded:       http://www.apache.org/licenses/LICENSE-2.0
1:d11eded: 
1:d11eded:    Unless required by applicable law or agreed to in writing, software
1:d11eded:    distributed under the License is distributed on an "AS IS" BASIS,
1:d11eded:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d11eded:    See the License for the specific language governing permissions and
1:d11eded:    limitations under the License.
1:d11eded: 
1:d11eded:  */
1:d11eded: 
1:d11eded: package org.apache.derby.impl.services.locks;
1:d11eded: 
1:d11eded: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:d11eded: import org.apache.derby.iapi.services.locks.LockFactory;
1:d11eded: import org.apache.derby.iapi.services.locks.C_LockFactory;
1:d11eded: import org.apache.derby.iapi.services.locks.Lockable;
1:d11eded: import org.apache.derby.iapi.services.locks.Limit;
1:d11eded: 
1:d11eded: import org.apache.derby.iapi.error.StandardException;
1:d11eded: 
1:d11eded: import org.apache.derby.iapi.services.property.PropertyUtil;
1:d11eded: import org.apache.derby.iapi.services.daemon.Serviceable;
1:d11eded: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:d11eded: import org.apache.derby.iapi.util.Matchable;
1:d11eded: import org.apache.derby.iapi.reference.Property;
1:d11eded: 
1:d11eded: import java.io.Serializable;
1:d11eded: import java.util.Dictionary;
1:d11eded: import java.util.Enumeration;
1:85e3e12: import org.apache.derby.iapi.reference.SQLState;
1:85e3e12: import org.apache.derby.iapi.services.locks.LockOwner;
1:d11eded: 
1:d11eded: /**
1:d11eded:  * An abstract implementation of LockFactory that allows different
1:d11eded:  * implementations of the lock table to be plugged in. All the methods of
1:d11eded:  * <code>LockFactory</code> are implemented. Subclasses must implement the
1:d11eded:  * <code>createLockTable()</code> method and make it return the desired
1:d11eded:  * <code>LockTable</code> object.
1:d11eded:  *
1:d11eded:  * <BR> MT - Mutable - Container Object : Thread Aware
1:d11eded:  */
1:d11eded: abstract class AbstractPool implements LockFactory
1:d11eded: {
1:d11eded: 	/**
1:d11eded: 		The complete set of locks in the system
1:d11eded: 
1:d11eded: 		<BR>
1:d11eded: 		MT - immutable - content dynamic : LockSet is ThreadSafe
1:d11eded: 	*/
1:d11eded: 	protected final LockTable lockTable;
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		True if all deadlocks errors should be logged.
1:d11eded: 	*/
1:d11eded: 	int deadlockMonitor;
1:d11eded: 
1:d11eded: 	protected AbstractPool() {
1:d11eded: 		lockTable = createLockTable();
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 	 * Create the lock table that contains the mapping from
1:d11eded: 	 * <code>Lockable</code>s to locks.
1:d11eded: 	 *
1:d11eded: 	 * @return an object implementing the <code>LockTable</code> interface
1:d11eded: 	 */
1:d11eded: 	protected abstract LockTable createLockTable();
1:d11eded: 
1:d11eded: 	/*
1:d11eded: 	** Methods of LockFactory
1:d11eded: 	*/
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Lock a specific object with a timeout.
1:d11eded: 
1:d11eded: 		<BR>
1:d11eded: 		MT - thread safe
1:d11eded: 
1:d11eded: 		@exception StandardException Standard Derby error policy
1:d11eded: 
1:d11eded: 		@see LockFactory#lockObject
1:d11eded: 	*/
1:d11eded: 	public boolean lockObject(CompatibilitySpace compatibilitySpace,
1:d11eded: 								Object group,
1:d11eded: 								Lockable ref, Object qualifier, int timeout)
1:d11eded: 			throws StandardException
1:d11eded: 	{
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1:d11eded: 
1:d11eded: 				D_LockControl.debugLock("Lock Request before Grant: ", 
1:d11eded:                     compatibilitySpace, group, ref, qualifier, timeout);
1:d11eded: 
1:d11eded:                 if (SanityManager.DEBUG_ON(Constants.LOCK_STACK_TRACE))
1:d11eded:                 {
1:d11eded:                     // The following will print the stack trace of the lock
1:d11eded:                     // request to the log.  
1:d11eded:                     Throwable t = new Throwable();
1:d11eded:                    java.io.PrintWriter istream = SanityManager.GET_DEBUG_STREAM();
1:d11eded: 
1:d11eded:                     istream.println("Stack trace of lock request:");
1:d11eded:                     t.printStackTrace(istream);
1:d11eded:                 }
1:d11eded: 			}
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		Lock lock = 
1:d11eded:             lockTable.lockObject(compatibilitySpace, ref, qualifier, timeout);
1:d11eded: 
1:d11eded: 		// See if NO_WAIT was passed in and the lock could not be granted.
1:d11eded: 		if (lock == null) {
1:d11eded: 			if (SanityManager.DEBUG) {
1:85e3e12:                 SanityManager.ASSERT(noLockWait(timeout, compatibilitySpace),
1:85e3e12:                                      "timeout not NO_WAIT");
1:d11eded: 			}
1:85e3e12: 
1:85e3e12:             // If this is a timed wait, we should behave as if we timed out
1:85e3e12:             // and throw a LOCK_TIMEOUT.
1:85e3e12:             if (timeout == C_LockFactory.TIMED_WAIT) {
1:85e3e12:                 throw StandardException.newException(SQLState.LOCK_TIMEOUT);
1:85e3e12:             }
1:85e3e12: 
1:d11eded: 			return false;
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1:d11eded: 				D_LockControl.debugLock(
1:d11eded:                     "Lock Request Granted: ", 
1:d11eded:                     compatibilitySpace, group, ref, qualifier, timeout);
1:d11eded: 			}
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		((LockSpace) compatibilitySpace).addLock(group, lock);
1:d11eded: 
1:d11eded: 		return true;
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 	 * Create an object which can be used as a compatibility space within this
1:d11eded: 	 * lock manager.
1:d11eded: 	 *
1:d11eded: 	 * @param owner the owner of the compatibility space
1:d11eded: 	 * @return an object which represents a compatibility space
1:d11eded: 	 */
1:85e3e12: 	public CompatibilitySpace createCompatibilitySpace(LockOwner owner) {
1:d11eded: 		return new LockSpace(owner);
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Unlock a specific object
1:d11eded: 
1:d11eded: 		<BR>
1:d11eded: 		MT - thread safe
1:d11eded: 
1:d11eded: 		@see LockFactory#unlock
1:d11eded: 	*/
1:d11eded: 
1:d11eded: 	public int unlock(CompatibilitySpace compatibilitySpace, Object group,
1:d11eded: 					  Lockable ref, Object qualifier)
1:d11eded: 	{
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1:d11eded: 				D_LockControl.debugLock("Lock Unlock: ", 
1:d11eded:                     compatibilitySpace, group, ref, qualifier, -1);
1:d11eded: 			}
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		int count =
1:d11eded: 			((LockSpace) compatibilitySpace).unlockReference(
1:d11eded: 				lockTable, ref, qualifier, group);
1:d11eded: 
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			SanityManager.ASSERT(
1:d11eded:                 (count == 0) || (count == 1), "count = " + count);
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		return count;
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Unlock a group of objects. 
1:d11eded: 
1:d11eded: 		<BR>
1:d11eded: 		MT - thread safe
1:d11eded: 
1:d11eded: 		@param group handle of group that objects were locked with.
1:d11eded: 		If group is	null then this call is equivilent to unlockAll().
1:d11eded: 
1:d11eded: 		@see LockFactory#unlockGroup
1:d11eded: 	*/
1:d11eded: 	public void unlockGroup(CompatibilitySpace compatibilitySpace,
1:d11eded: 							Object group) {
1:d11eded: 
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1:d11eded: 				D_LockControl.debugLock("Lock Unlock Group: ",
1:d11eded: 										compatibilitySpace, group);
1:d11eded: 			}
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		((LockSpace) compatibilitySpace).unlockGroup(lockTable, group);
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	public void unlockGroup(CompatibilitySpace compatibilitySpace, Object group,
1:d11eded: 							Matchable key) {
1:d11eded: 
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1:d11eded: 				D_LockControl.debugLock("Lock Unlock Group: ",
1:d11eded: 										compatibilitySpace, group);
1:d11eded: 			}
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		((LockSpace) compatibilitySpace).unlockGroup(lockTable, group, key);
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Transfer a set of locks from one group to another.
1:d11eded: 
1:d11eded:   		<BR>
1:d11eded: 		MT - thread safe
1:d11eded: 
1:d11eded: 		@see LockFactory#transfer
1:d11eded: 	*/
1:d11eded: 	public void transfer(CompatibilitySpace compatibilitySpace, Object oldGroup,
1:d11eded: 						 Object newGroup) {
1:d11eded: 
1:d11eded: 		if (SanityManager.DEBUG) {
1:d11eded: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1:d11eded: 				StringBuffer sb = new StringBuffer("Lock Transfer:");
1:d11eded: 
1:d11eded: 				D_LockControl.debugAppendObject(
1:d11eded:                     sb, " CompatibilitySpace=", compatibilitySpace);
1:d11eded: 				D_LockControl.debugAppendObject(sb, " Old Group=", oldGroup);
1:d11eded: 				D_LockControl.debugAppendObject(sb, " New Group=", newGroup);
1:d11eded: 
1:d11eded: 				D_LockControl.debugAddThreadInfo(sb);
1:d11eded: 
1:d11eded: 				SanityManager.DEBUG(Constants.LOCK_TRACE, sb.toString());
1:d11eded: 			}
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		((LockSpace) compatibilitySpace).transfer(oldGroup, newGroup);
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Returns true if locks by anyone are blocking anyone else
1:d11eded: 	*/
1:d11eded: 	public boolean anyoneBlocked() {
1:d11eded: 		return lockTable.anyoneBlocked();
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Return true if locks are held in this group and this space.
1:d11eded: 
1:d11eded: 		<BR>
1:d11eded: 		MT - thread safe
1:d11eded: 
1:d11eded: 		@param group handle of group that objects were locked with.
1:d11eded: 
1:d11eded: 		@see LockFactory#areLocksHeld
1:d11eded: 	*/
1:d11eded: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace,
1:d11eded: 								Object group) {
1:d11eded: 		return ((LockSpace) compatibilitySpace).areLocksHeld(group);
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Return true if locks are held in this space
1:d11eded: 		
1:d11eded: 		<BR>
1:d11eded: 		MT - thread safe
1:d11eded: 
1:d11eded: 		@see LockFactory#areLocksHeld
1:d11eded: 	*/
1:d11eded: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace) {
1:d11eded: 		return ((LockSpace) compatibilitySpace).areLocksHeld();
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	public boolean zeroDurationlockObject(CompatibilitySpace compatibilitySpace,
1:d11eded: 										  Lockable ref, Object qualifier,
1:d11eded: 										  int timeout)
1:d11eded: 		throws StandardException {
1:85e3e12: 		boolean success = lockTable.zeroDurationLockObject(
1:d11eded: 			compatibilitySpace, ref, qualifier, timeout);
1:85e3e12: 
1:85e3e12:         if (!success) {
1:85e3e12: 
1:85e3e12:             // zeroDurationLockObject should only return false if we have
1:85e3e12:             // requested that we shouldn't wait for locks. Otherwise, an
1:85e3e12:             // exception should have been thrown.
1:85e3e12:             if (SanityManager.DEBUG) {
1:85e3e12:                 SanityManager.ASSERT(noLockWait(timeout, compatibilitySpace),
1:85e3e12:                                      "Should have timed out");
1:85e3e12:             }
1:85e3e12: 
1:85e3e12:             // If this is a timed wait, we should behave as if we timed out and
1:85e3e12:             // throw LOCK_TIMEOUT.
1:85e3e12:             if (timeout == C_LockFactory.TIMED_WAIT) {
1:85e3e12:                 throw StandardException.newException(SQLState.LOCK_TIMEOUT);
1:85e3e12:             }
1:85e3e12:         }
1:85e3e12: 
1:85e3e12:         return success;
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	public boolean isLockHeld(CompatibilitySpace compatibilitySpace,
1:d11eded: 							  Object group, Lockable ref, Object qualifier) {
1:d11eded: 		return ((LockSpace) compatibilitySpace).isLockHeld(
1:d11eded: 			group, ref, qualifier);
1:d11eded: 	}
1:d11eded: 
1:39c6ffc: 	/**
1:39c6ffc: 		Get the lock timeout in milliseconds. A negative number means that
1:39c6ffc:         there is no timeout.
1:39c6ffc: 	*/
1:39c6ffc: 	public int getWaitTimeout() { return lockTable.getWaitTimeout(); }
1:39c6ffc: 
1:d11eded: 	public void setLimit(CompatibilitySpace compatibilitySpace,
1:d11eded: 						 Object group, int limit, Limit callback) {
1:d11eded: 		((LockSpace) compatibilitySpace).setLimit(group, limit, callback);
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Clear a limit set by setLimit.
1:d11eded: 	*/
1:d11eded: 	public void clearLimit(CompatibilitySpace compatibilitySpace, Object group)
1:d11eded: 	{
1:d11eded: 		((LockSpace) compatibilitySpace).clearLimit(group);
1:d11eded: 	}
1:d11eded: 
1:85e3e12:     /**
1:85e3e12:      * Check if we should not wait for locks, given the specified timeout and
1:85e3e12:      * compatibility space. If the timeout is {@code C_LockFactory.NO_WAIT} or
1:85e3e12:      * the {@code LockOwner} has the {@code noWait} flag set, we shouldn't
1:85e3e12:      * wait for locks.
1:85e3e12:      *
1:85e3e12:      * @param timeout the specified timeout
1:85e3e12:      * @param compat the compatibility space
1:85e3e12:      * @return {@code true} if we shouldn't wait for locks, {@code false}
1:85e3e12:      * otherwise
1:85e3e12:      */
1:85e3e12:     static boolean noLockWait(int timeout, CompatibilitySpace compat) {
1:85e3e12:         if (timeout == C_LockFactory.NO_WAIT) {
1:85e3e12:             return true;
1:85e3e12:         } else {
1:85e3e12:             LockOwner owner = compat.getOwner();
1:85e3e12:             return owner != null && owner.noWait();
1:85e3e12:         }
1:85e3e12:     }
1:85e3e12: 
1:d11eded: //EXCLUDE-START-lockdiag- 
1:d11eded: 
1:d11eded: 	/**
1:d11eded: 		Routines to support lock diagnostics VTIs for the benefit of VirtualLockTable
1:d11eded: 	 */
1:d11eded: 	/* package */
1:d11eded: 	public Enumeration makeVirtualLockTable()
1:d11eded: 	{
1:d11eded: 		// make a shallow copy of the locktable.
1:d11eded: 		LockTableVTI myclone = new LockTableVTI(lockTable.shallowClone());
1:d11eded: 
1:d11eded: 		return myclone;
1:d11eded: 	}
1:d11eded: //EXCLUDE-END-lockdiag- 
1:d11eded: 
1:d11eded: 
1:d11eded: 	/*
1:d11eded: 	** Methods of PropertySetCallback
1:d11eded: 	*/
1:d11eded: 
1:d11eded: 	public void init(boolean dbOnly, Dictionary p) {
1:d11eded: 
1:d11eded: 		getAndApply(dbOnly, p, Property.DEADLOCK_TIMEOUT);
1:d11eded: 		getAndApply(dbOnly, p, Property.LOCKWAIT_TIMEOUT);
1:d11eded: 		getAndApply(dbOnly, p, Property.DEADLOCK_MONITOR);
1:d11eded: //EXCLUDE-START-lockdiag- 
1:d11eded:         getAndApply(dbOnly, p, Property.DEADLOCK_TRACE);
1:d11eded: //EXCLUDE-END-lockdiag- 
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	private void getAndApply(boolean dbOnly, Dictionary p, String key) {
1:d11eded: 
1:d11eded: 		try {
1:d11eded: 
1:7af858d: 			Serializable value = (Serializable) PropertyUtil.getPropertyFromSet(dbOnly, p, key);
1:d11eded: 			if (value != null) {
1:d11eded: 				validate(key, value, p);
1:d11eded: 				apply(key, value, p);
1:d11eded: 			}
1:d11eded: 		} catch (StandardException se) {
1:d11eded: 			// just ignore value at bootup.
1:d11eded: 		}
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	
1:d11eded: 	public boolean validate(String key, Serializable value, Dictionary p)
1:d11eded: 		throws StandardException {
1:d11eded: 
1:d11eded: 		if (!key.startsWith(Property.LOCKS_INTRO))
1:d11eded: 			return false;
1:d11eded: 
1:d11eded: 		if (value != null) {
1:d11eded: 
1:d11eded: 			if (key.equals(Property.DEADLOCK_TIMEOUT))
1:d11eded: 				getWaitValue((String) value,  Property.DEADLOCK_TIMEOUT_DEFAULT);
1:d11eded: 			else if (key.equals(Property.LOCKWAIT_TIMEOUT))
1:d11eded: 				getWaitValue((String) value,  Property.WAIT_TIMEOUT_DEFAULT);
1:d11eded: 			else if (key.equals(Property.DEADLOCK_MONITOR))
1:d11eded: 				PropertyUtil.booleanProperty(Property.DEADLOCK_MONITOR, value, false);
1:d11eded:             else if (key.equals(Property.DEADLOCK_TRACE))
1:d11eded:                 PropertyUtil.booleanProperty(Property.DEADLOCK_TRACE, value, false);
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		return true;
1:d11eded: 	}
1:d11eded: 
1:d11eded:     public Serviceable apply(String key, Serializable value, Dictionary p)
1:d11eded: 		throws StandardException {
1:d11eded: 
1:d11eded: 		if (value == null) {
1:d11eded: 			// a delete, fill in the new value
1:d11eded: 			value = PropertyUtil.getPropertyFromSet(p, key);
1:d11eded: 		}
1:d11eded: 
1:d11eded: 		String svalue = (String) value;
1:d11eded: 
1:d11eded: 		if (key.equals(Property.DEADLOCK_TIMEOUT))
1:d11eded: 			lockTable.setDeadlockTimeout(
1:d11eded: 				getWaitValue(svalue,  Property.DEADLOCK_TIMEOUT_DEFAULT));
1:d11eded: 		else if (key.equals(Property.LOCKWAIT_TIMEOUT))
1:d11eded: 			lockTable.setWaitTimeout(
1:d11eded: 				getWaitValue(svalue,  Property.WAIT_TIMEOUT_DEFAULT));
1:d11eded: 		else if (key.equals(Property.DEADLOCK_MONITOR)) {
1:d11eded: 			deadlockMonitor = PropertyUtil.booleanProperty(Property.DEADLOCK_MONITOR, svalue, false) ?
1:d11eded: 				StandardException.REPORT_ALWAYS : StandardException.REPORT_DEFAULT;
1:d11eded: 		}
1:d11eded: //EXCLUDE-START-lockdiag- 
1:d11eded:         else if (key.equals(Property.DEADLOCK_TRACE))
1:d11eded:             lockTable.setDeadlockTrace(PropertyUtil.booleanProperty(Property.DEADLOCK_TRACE, svalue, false));
1:d11eded: //EXCLUDE-END-lockdiag- 
1:d11eded: 
1:d11eded: 		return null;
1:d11eded: 	}
1:d11eded: 	
1:d11eded:     public Serializable map(String key, Serializable value, Dictionary p) {
1:d11eded: 		return null;
1:d11eded: 	}
1:d11eded: 
1:d11eded: 	/*
1:d11eded: 	** Property related methods
1:d11eded: 	*/
1:d11eded: 	
1:d11eded: 	private static int getWaitValue(String value, int defaultValue ) {
1:d11eded: 
1:d11eded: 		// properties are defined in seconds
1:d11eded: 		int wait = PropertyUtil.handleInt(value, Integer.MIN_VALUE, Integer.MAX_VALUE / 1000, defaultValue);
1:d11eded: 
1:d11eded: 		if (wait < 0)
1:d11eded: 			wait = C_LockFactory.WAIT_FOREVER;
1:d11eded: 		else
1:d11eded: 			// convert to milliseconds
1:d11eded: 			wait *= 1000;
1:d11eded: 
1:d11eded: 		return wait;
1:d11eded: 	}
1:d11eded: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7af858d
/////////////////////////////////////////////////////////////////////////
1: 			Serializable value = (Serializable) PropertyUtil.getPropertyFromSet(dbOnly, p, key);
commit:85e3e12
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.locks.LockOwner;
/////////////////////////////////////////////////////////////////////////
1:                 SanityManager.ASSERT(noLockWait(timeout, compatibilitySpace),
1:                                      "timeout not NO_WAIT");
1: 
1:             // If this is a timed wait, we should behave as if we timed out
1:             // and throw a LOCK_TIMEOUT.
1:             if (timeout == C_LockFactory.TIMED_WAIT) {
1:                 throw StandardException.newException(SQLState.LOCK_TIMEOUT);
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 	public CompatibilitySpace createCompatibilitySpace(LockOwner owner) {
/////////////////////////////////////////////////////////////////////////
1: 		boolean success = lockTable.zeroDurationLockObject(
1: 
1:         if (!success) {
1: 
1:             // zeroDurationLockObject should only return false if we have
1:             // requested that we shouldn't wait for locks. Otherwise, an
1:             // exception should have been thrown.
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.ASSERT(noLockWait(timeout, compatibilitySpace),
1:                                      "Should have timed out");
1:             }
1: 
1:             // If this is a timed wait, we should behave as if we timed out and
1:             // throw LOCK_TIMEOUT.
1:             if (timeout == C_LockFactory.TIMED_WAIT) {
1:                 throw StandardException.newException(SQLState.LOCK_TIMEOUT);
1:             }
1:         }
1: 
1:         return success;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check if we should not wait for locks, given the specified timeout and
1:      * compatibility space. If the timeout is {@code C_LockFactory.NO_WAIT} or
1:      * the {@code LockOwner} has the {@code noWait} flag set, we shouldn't
1:      * wait for locks.
1:      *
1:      * @param timeout the specified timeout
1:      * @param compat the compatibility space
1:      * @return {@code true} if we shouldn't wait for locks, {@code false}
1:      * otherwise
1:      */
1:     static boolean noLockWait(int timeout, CompatibilitySpace compat) {
1:         if (timeout == C_LockFactory.NO_WAIT) {
1:             return true;
1:         } else {
1:             LockOwner owner = compat.getOwner();
1:             return owner != null && owner.noWait();
1:         }
1:     }
1: 
commit:d11eded
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.locks.AbstractPool
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: import org.apache.derby.iapi.services.locks.C_LockFactory;
1: import org.apache.derby.iapi.services.locks.Lockable;
1: import org.apache.derby.iapi.services.locks.Limit;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.services.daemon.Serviceable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.util.Matchable;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import java.io.Serializable;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: 
1: /**
1:  * An abstract implementation of LockFactory that allows different
1:  * implementations of the lock table to be plugged in. All the methods of
1:  * <code>LockFactory</code> are implemented. Subclasses must implement the
1:  * <code>createLockTable()</code> method and make it return the desired
1:  * <code>LockTable</code> object.
1:  *
1:  * <BR> MT - Mutable - Container Object : Thread Aware
1:  */
1: abstract class AbstractPool implements LockFactory
1: {
1: 	/**
1: 		The complete set of locks in the system
1: 
1: 		<BR>
1: 		MT - immutable - content dynamic : LockSet is ThreadSafe
1: 	*/
1: 	protected final LockTable lockTable;
1: 
1: 	/**
1: 		True if all deadlocks errors should be logged.
1: 	*/
1: 	int deadlockMonitor;
1: 
1: 	protected AbstractPool() {
1: 		lockTable = createLockTable();
1: 	}
1: 
1: 	/**
1: 	 * Create the lock table that contains the mapping from
1: 	 * <code>Lockable</code>s to locks.
1: 	 *
1: 	 * @return an object implementing the <code>LockTable</code> interface
1: 	 */
1: 	protected abstract LockTable createLockTable();
1: 
1: 	/*
1: 	** Methods of LockFactory
1: 	*/
1: 
1: 	/**
1: 		Lock a specific object with a timeout.
1: 
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@exception StandardException Standard Derby error policy
1: 
1: 		@see LockFactory#lockObject
1: 	*/
1: 	public boolean lockObject(CompatibilitySpace compatibilitySpace,
1: 								Object group,
1: 								Lockable ref, Object qualifier, int timeout)
1: 			throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1: 
1: 				D_LockControl.debugLock("Lock Request before Grant: ", 
1:                     compatibilitySpace, group, ref, qualifier, timeout);
1: 
1:                 if (SanityManager.DEBUG_ON(Constants.LOCK_STACK_TRACE))
1:                 {
1:                     // The following will print the stack trace of the lock
1:                     // request to the log.  
1:                     Throwable t = new Throwable();
1:                    java.io.PrintWriter istream = SanityManager.GET_DEBUG_STREAM();
1: 
1:                     istream.println("Stack trace of lock request:");
1:                     t.printStackTrace(istream);
1:                 }
1: 			}
1: 		}
1: 
1: 		Lock lock = 
1:             lockTable.lockObject(compatibilitySpace, ref, qualifier, timeout);
1: 
1: 		// See if NO_WAIT was passed in and the lock could not be granted.
1: 		if (lock == null) {
1: 			if (SanityManager.DEBUG) {
0: 				SanityManager.ASSERT(timeout == C_LockFactory.NO_WAIT, "timeout not NO_WAIT");
1: 			}
1: 			return false;
1: 		}
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1: 				D_LockControl.debugLock(
1:                     "Lock Request Granted: ", 
1:                     compatibilitySpace, group, ref, qualifier, timeout);
1: 			}
1: 		}
1: 
1: 		((LockSpace) compatibilitySpace).addLock(group, lock);
1: 
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Create an object which can be used as a compatibility space within this
1: 	 * lock manager.
1: 	 *
1: 	 * @param owner the owner of the compatibility space
1: 	 * @return an object which represents a compatibility space
1: 	 */
0: 	public CompatibilitySpace createCompatibilitySpace(Object owner) {
1: 		return new LockSpace(owner);
1: 	}
1: 
1: 	/**
1: 		Unlock a specific object
1: 
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@see LockFactory#unlock
1: 	*/
1: 
1: 	public int unlock(CompatibilitySpace compatibilitySpace, Object group,
1: 					  Lockable ref, Object qualifier)
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1: 				D_LockControl.debugLock("Lock Unlock: ", 
1:                     compatibilitySpace, group, ref, qualifier, -1);
1: 			}
1: 		}
1: 
1: 		int count =
1: 			((LockSpace) compatibilitySpace).unlockReference(
1: 				lockTable, ref, qualifier, group);
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(
1:                 (count == 0) || (count == 1), "count = " + count);
1: 		}
1: 
1: 		return count;
1: 	}
1: 
1: 	/**
1: 		Unlock a group of objects. 
1: 
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@param group handle of group that objects were locked with.
1: 		If group is	null then this call is equivilent to unlockAll().
1: 
1: 		@see LockFactory#unlockGroup
1: 	*/
1: 	public void unlockGroup(CompatibilitySpace compatibilitySpace,
1: 							Object group) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1: 				D_LockControl.debugLock("Lock Unlock Group: ",
1: 										compatibilitySpace, group);
1: 			}
1: 		}
1: 
1: 		((LockSpace) compatibilitySpace).unlockGroup(lockTable, group);
1: 	}
1: 
1: 	public void unlockGroup(CompatibilitySpace compatibilitySpace, Object group,
1: 							Matchable key) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1: 				D_LockControl.debugLock("Lock Unlock Group: ",
1: 										compatibilitySpace, group);
1: 			}
1: 		}
1: 
1: 		((LockSpace) compatibilitySpace).unlockGroup(lockTable, group, key);
1: 	}
1: 
1: 	/**
1: 		Transfer a set of locks from one group to another.
1: 
1:   		<BR>
1: 		MT - thread safe
1: 
1: 		@see LockFactory#transfer
1: 	*/
1: 	public void transfer(CompatibilitySpace compatibilitySpace, Object oldGroup,
1: 						 Object newGroup) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE)) {
1: 				StringBuffer sb = new StringBuffer("Lock Transfer:");
1: 
1: 				D_LockControl.debugAppendObject(
1:                     sb, " CompatibilitySpace=", compatibilitySpace);
1: 				D_LockControl.debugAppendObject(sb, " Old Group=", oldGroup);
1: 				D_LockControl.debugAppendObject(sb, " New Group=", newGroup);
1: 
1: 				D_LockControl.debugAddThreadInfo(sb);
1: 
1: 				SanityManager.DEBUG(Constants.LOCK_TRACE, sb.toString());
1: 			}
1: 		}
1: 
1: 		((LockSpace) compatibilitySpace).transfer(oldGroup, newGroup);
1: 	}
1: 
1: 	/**
1: 		Returns true if locks by anyone are blocking anyone else
1: 	*/
1: 	public boolean anyoneBlocked() {
1: 		return lockTable.anyoneBlocked();
1: 	}
1: 
1: 	/**
1: 		Return true if locks are held in this group and this space.
1: 
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@param group handle of group that objects were locked with.
1: 
1: 		@see LockFactory#areLocksHeld
1: 	*/
1: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace,
1: 								Object group) {
1: 		return ((LockSpace) compatibilitySpace).areLocksHeld(group);
1: 	}
1: 
1: 	/**
1: 		Return true if locks are held in this space
1: 		
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@see LockFactory#areLocksHeld
1: 	*/
1: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace) {
1: 		return ((LockSpace) compatibilitySpace).areLocksHeld();
1: 	}
1: 
1: 	public boolean zeroDurationlockObject(CompatibilitySpace compatibilitySpace,
1: 										  Lockable ref, Object qualifier,
1: 										  int timeout)
1: 		throws StandardException {
0: 		return lockTable.zeroDurationLockObject(
1: 			compatibilitySpace, ref, qualifier, timeout);
1: 	}
1: 
1: 	public boolean isLockHeld(CompatibilitySpace compatibilitySpace,
1: 							  Object group, Lockable ref, Object qualifier) {
1: 		return ((LockSpace) compatibilitySpace).isLockHeld(
1: 			group, ref, qualifier);
1: 	}
1: 
1: 	public void setLimit(CompatibilitySpace compatibilitySpace,
1: 						 Object group, int limit, Limit callback) {
1: 		((LockSpace) compatibilitySpace).setLimit(group, limit, callback);
1: 	}
1: 
1: 	/**
1: 		Clear a limit set by setLimit.
1: 	*/
1: 	public void clearLimit(CompatibilitySpace compatibilitySpace, Object group)
1: 	{
1: 		((LockSpace) compatibilitySpace).clearLimit(group);
1: 	}
1: 
1: //EXCLUDE-START-lockdiag- 
1: 
1: 	/**
1: 		Routines to support lock diagnostics VTIs for the benefit of VirtualLockTable
1: 	 */
1: 	/* package */
1: 	public Enumeration makeVirtualLockTable()
1: 	{
1: 		// make a shallow copy of the locktable.
1: 		LockTableVTI myclone = new LockTableVTI(lockTable.shallowClone());
1: 
1: 		return myclone;
1: 	}
1: //EXCLUDE-END-lockdiag- 
1: 
1: 
1: 	/*
1: 	** Methods of PropertySetCallback
1: 	*/
1: 
1: 	public void init(boolean dbOnly, Dictionary p) {
1: 
1: 		getAndApply(dbOnly, p, Property.DEADLOCK_TIMEOUT);
1: 		getAndApply(dbOnly, p, Property.LOCKWAIT_TIMEOUT);
1: 		getAndApply(dbOnly, p, Property.DEADLOCK_MONITOR);
1: //EXCLUDE-START-lockdiag- 
1:         getAndApply(dbOnly, p, Property.DEADLOCK_TRACE);
1: //EXCLUDE-END-lockdiag- 
1: 	}
1: 
1: 	private void getAndApply(boolean dbOnly, Dictionary p, String key) {
1: 
1: 		try {
1: 
0: 			Serializable value = (String) PropertyUtil.getPropertyFromSet(dbOnly, p, key);
1: 			if (value != null) {
1: 				validate(key, value, p);
1: 				apply(key, value, p);
1: 			}
1: 		} catch (StandardException se) {
1: 			// just ignore value at bootup.
1: 		}
1: 	}
1: 
1: 	
1: 	public boolean validate(String key, Serializable value, Dictionary p)
1: 		throws StandardException {
1: 
1: 		if (!key.startsWith(Property.LOCKS_INTRO))
1: 			return false;
1: 
1: 		if (value != null) {
1: 
1: 			if (key.equals(Property.DEADLOCK_TIMEOUT))
1: 				getWaitValue((String) value,  Property.DEADLOCK_TIMEOUT_DEFAULT);
1: 			else if (key.equals(Property.LOCKWAIT_TIMEOUT))
1: 				getWaitValue((String) value,  Property.WAIT_TIMEOUT_DEFAULT);
1: 			else if (key.equals(Property.DEADLOCK_MONITOR))
1: 				PropertyUtil.booleanProperty(Property.DEADLOCK_MONITOR, value, false);
1:             else if (key.equals(Property.DEADLOCK_TRACE))
1:                 PropertyUtil.booleanProperty(Property.DEADLOCK_TRACE, value, false);
1: 		}
1: 
1: 		return true;
1: 	}
1: 
1:     public Serviceable apply(String key, Serializable value, Dictionary p)
1: 		throws StandardException {
1: 
1: 		if (value == null) {
1: 			// a delete, fill in the new value
1: 			value = PropertyUtil.getPropertyFromSet(p, key);
1: 		}
1: 
1: 		String svalue = (String) value;
1: 
1: 		if (key.equals(Property.DEADLOCK_TIMEOUT))
1: 			lockTable.setDeadlockTimeout(
1: 				getWaitValue(svalue,  Property.DEADLOCK_TIMEOUT_DEFAULT));
1: 		else if (key.equals(Property.LOCKWAIT_TIMEOUT))
1: 			lockTable.setWaitTimeout(
1: 				getWaitValue(svalue,  Property.WAIT_TIMEOUT_DEFAULT));
1: 		else if (key.equals(Property.DEADLOCK_MONITOR)) {
1: 			deadlockMonitor = PropertyUtil.booleanProperty(Property.DEADLOCK_MONITOR, svalue, false) ?
1: 				StandardException.REPORT_ALWAYS : StandardException.REPORT_DEFAULT;
1: 		}
1: //EXCLUDE-START-lockdiag- 
1:         else if (key.equals(Property.DEADLOCK_TRACE))
1:             lockTable.setDeadlockTrace(PropertyUtil.booleanProperty(Property.DEADLOCK_TRACE, svalue, false));
1: //EXCLUDE-END-lockdiag- 
1: 
1: 		return null;
1: 	}
1: 	
1:     public Serializable map(String key, Serializable value, Dictionary p) {
1: 		return null;
1: 	}
1: 
1: 	/*
1: 	** Property related methods
1: 	*/
1: 	
1: 	private static int getWaitValue(String value, int defaultValue ) {
1: 
1: 		// properties are defined in seconds
1: 		int wait = PropertyUtil.handleInt(value, Integer.MIN_VALUE, Integer.MAX_VALUE / 1000, defaultValue);
1: 
1: 		if (wait < 0)
1: 			wait = C_LockFactory.WAIT_FOREVER;
1: 		else
1: 			// convert to milliseconds
1: 			wait *= 1000;
1: 
1: 		return wait;
1: 	}
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39c6ffc
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 		Get the lock timeout in milliseconds. A negative number means that
1:         there is no timeout.
1: 	*/
1: 	public int getWaitTimeout() { return lockTable.getWaitTimeout(); }
1: 
============================================================================