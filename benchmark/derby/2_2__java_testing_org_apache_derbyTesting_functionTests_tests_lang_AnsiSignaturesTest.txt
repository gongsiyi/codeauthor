1:5c04fbc: /*
3:5c04fbc: 
1:5c04fbc:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest
1:ef42635: 
1:5c04fbc:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5c04fbc:    contributor license agreements.  See the NOTICE file distributed with
1:5c04fbc:    this work for additional information regarding copyright ownership.
1:5c04fbc:    The ASF licenses this file to you under the Apache License, Version 2.0
1:5c04fbc:    (the "License"); you may not use this file except in compliance with
1:5c04fbc:    the License.  You may obtain a copy of the License at
1:5c04fbc: 
1:5c04fbc:      http://www.apache.org/licenses/LICENSE-2.0
1:5c04fbc: 
1:5c04fbc:    Unless required by applicable law or agreed to in writing, software
1:5c04fbc:    distributed under the License is distributed on an "AS IS" BASIS,
1:5c04fbc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5c04fbc:    See the License for the specific language governing permissions and
1:5c04fbc:    limitations under the License.
1:5c04fbc: 
1:5c04fbc:  */
1:5c04fbc: 
1:5c04fbc: package org.apache.derbyTesting.functionTests.tests.lang;
1:5c04fbc: 
1:75a4806: import java.sql.Blob;
1:ffac5c3: import java.sql.CallableStatement;
1:75a4806: import java.sql.Clob;
1:5c04fbc: import java.sql.Connection;
1:5c04fbc: import java.sql.PreparedStatement;
1:5c04fbc: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:ffac5c3: import java.sql.Types;
1:5c04fbc: import junit.framework.Test;
1:5c04fbc: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:5c04fbc: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:7294977: import org.apache.derbyTesting.junit.JDBC;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:5c04fbc: 
1:5c04fbc: /**
1:5c04fbc:  * <p>
1:5c04fbc:  * Test that Derby resolves routines according to the ANSI method
1:5c04fbc:  * resolution rules. Those rules are summarized in DERBY-3652.
1:5c04fbc:  * </p>
1:5c04fbc:  */
1:5c04fbc: public class AnsiSignaturesTest extends BaseJDBCTestCase
1:5c04fbc: {
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:7294977:     //
1:5c04fbc:     // CONSTANTS
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:5c04fbc:     public  static  final   String  MISSING_METHOD_SQLSTATE = "XJ001";
1:5c04fbc:     public  static  final   String  TRIED_ALL_COMBINATIONS = "42X50";
1:5c04fbc:     public  static  final   String  AMBIGUOUS = "42X73";
1:5c04fbc:     
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:5c04fbc:     // STATE
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:5c04fbc:     // CONSTRUCTOR
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:5c04fbc: 
1:5c04fbc:     /**
1:5c04fbc:      * Create a new instance.
1:5c04fbc:      */
1:5c04fbc: 
1:5c04fbc:     public AnsiSignaturesTest(String name)
1:5c04fbc:     {
1:5c04fbc:         super(name);
2:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:5c04fbc:     // JUnit BEHAVIOR
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:5c04fbc: 
1:5c04fbc:     /**
1:5c04fbc:      * Construct top level suite in this JUnit test
1:5c04fbc:      */
1:5c04fbc:     public static Test suite()
1:5c04fbc:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.defaultSuite(
1:1ae02c9:             AnsiSignaturesTest.class);
1:5c04fbc: 
1:5c04fbc:         return new CleanDatabaseTestSetup( suite );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:5c04fbc:     // SUCCESSFUL RESOLUTIONS
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:9a62527:     public  void    test_boolean_boolean_boolean()
1:a584888:         throws Exception
1:a584888:     {
1:a584888:         declareAndRunFunction
1:9a62527:             ( "boolean_boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:a584888:     }
1:9a62527:     public  void    test_boolean_Boolean_boolean()
1:a584888:         throws Exception
1:a584888:     {
1:a584888:         declareAndRunFunction
1:9a62527:             ( "boolean_Boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:9a62527:     }
1:9a62527:     public  void    test_boolean_boolean_Boolean()
1:9a62527:         throws Exception
1:9a62527:     {
1:9a62527:         declareAndRunFunction
1:9a62527:             ( "boolean_boolean_Boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:9a62527:     }
1:9a62527:     public  void    test_boolean_Boolean_Boolean()
1:9a62527:         throws Exception
1:9a62527:     {
1:9a62527:         declareAndRunFunction
1:9a62527:             ( "boolean_Boolean_Boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:a584888:     }
1:a584888:     
1:5c04fbc:     public  void    test_smallint_short_short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "smallint_short_short", "smallint", new String[] { "smallint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_short_Integer()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7827537:         declareAndRunFunction
1:7827537:             ( "smallint_short_Integer", "smallint", new String[] { "smallint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_Integer_short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7827537:         declareAndRunFunction
1:7827537:             ( "smallint_Integer_short", "smallint", new String[] { "smallint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_Integer_Integer()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7827537:         declareAndRunFunction
1:7827537:             ( "smallint_Integer_Integer", "smallint", new String[] { "smallint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_integer_int_int()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "integer_int_int", "int", new String[] { "int" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_integer_int_Integer()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "integer_int_Integer", "int", new String[] { "int" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_integer_Integer_int()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "integer_Integer_int", "int", new String[] { "int" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_integer_Integer_Integer()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "integer_Integer_Integer", "int", new String[] { "int" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_bigint_long_long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "bigint_long_long", "bigint", new String[] { "bigint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_bigint_long_Long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "bigint_long_Long", "bigint", new String[] { "bigint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_bigint_Long_long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "bigint_Long_long", "bigint", new String[] { "bigint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_bigint_Long_Long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "bigint_Long_Long", "bigint", new String[] { "bigint" }, "3", "3" );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_real_float_float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "real_float_float", "real", new String[] { "real" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_real_float_Float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "real_float_Float", "real", new String[] { "real" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_real_Float_float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "real_Float_float", "real", new String[] { "real" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_real_Float_Float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "real_Float_Float", "real", new String[] { "real" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_double_double_double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "double_double_double", "double", new String[] { "double" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_double_double_Double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "double_double_Double", "double", new String[] { "double" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_double_Double_double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "double_Double_double", "double", new String[] { "double" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_double_Double_Double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndRunFunction
1:5c04fbc:             ( "double_Double_Double", "double", new String[] { "double" }, "3.0", "3.0" );
1:5c04fbc:     }
1:5c04fbc: 
1:886e6e1:     public  void    test_numeric_BigDecimal_BigDecimal()
1:886e6e1:         throws Exception
1:886e6e1:     {
1:e8903d6:         //
1:7294977:         // On small device platforms, this raises an exception in the byte-code
1:7294977:         // compiler. See DERBY-3697.
1:7294977:         //
1:7294977:         if ( JDBC.vmSupportsJSR169() ) { return; }
1:7294977:         
1:886e6e1:         declareAndRunFunction
1:886e6e1:             ( "numeric_BigDecimal_BigDecimal", "numeric( 7, 2 )", new String[] { "numeric( 7, 2 )" }, "12345.67", "12345.67" );
1:886e6e1:     }
1:886e6e1:     
1:e8903d6:     public  void    test_decimal_BigDecimal_BigDecimal()
1:e8903d6:         throws Exception
1:e8903d6:     {
1:e8903d6:         //
1:e8903d6:         // On small device platforms, this raises an exception in the byte-code
1:e8903d6:         // compiler. See DERBY-3697.
1:5c04fbc:         //
1:e8903d6:         if ( JDBC.vmSupportsJSR169() ) { return; }
1:e8903d6:         
1:e8903d6:         declareAndRunFunction
1:e8903d6:             ( "decimal_BigDecimal_BigDecimal", "decimal( 7, 2 )", new String[] { "decimal( 7, 2 )" }, "12345.67", "12345.67" );
1:e8903d6:     }
1:e8903d6:     
1:0ba6f9d:     public  void    test_varchar_String_String()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndRunFunction
1:0ba6f9d:             ( "varchar_String_String", "varchar( 10 )", new String[] { "varchar( 10 )" }, "'3.0'", "3.0" );
1:0ba6f9d:     }
1:886e6e1: 
1:9de50b2:     public  void    test_char_String_String()
1:9de50b2:         throws Exception
1:9de50b2:     {
1:9de50b2:         declareAndRunFunction
1:9de50b2:             ( "char_String_String", "char( 10 )", new String[] { "char( 10 )" }, "'3.0'", "3.0       " );
1:9de50b2:     }
1:9de50b2: 
1:9de50b2:     public  void    test_longvarchar_String_String()
1:9de50b2:         throws Exception
1:9de50b2:     {
1:9de50b2:         // long varchar is not allowed as an argument type in a Derby routine
1:9de50b2:         declareAndRunFunction
1:9de50b2:             ( "longvarchar_String_String", "long varchar", new String[] { "varchar( 10 )" }, "'3.0'", "3.0" );
1:9de50b2:     }
1:9de50b2: 
1:d391eec:     public  void    test_bigint__smallint_int_bigint_real_double()
1:d391eec:         throws Exception
1:d391eec:     {
1:d391eec:         declareAndRunFunction
1:d391eec:             (
1:d391eec:              "bigint__smallint_int_bigint_real_double",
1:d391eec:              "bigint",
1:d391eec:               new String[] { "smallint", "int", "bigint", "real", "double" },
1:d391eec:              "3, 3, 3, 3.0, 3.0",
1:d391eec:              "3"
1:d391eec:              );
1:d391eec:     }
1:d391eec: 
1:d391eec:     public  void    test_flipped_bigint__smallint_int_bigint_real_double()
1:d391eec:         throws Exception
1:d391eec:     {
1:d391eec:         declareAndRunFunction
1:d391eec:             (
1:d391eec:              "flipped_bigint__smallint_int_bigint_real_double",
1:d391eec:              "bigint",
1:d391eec:               new String[] { "smallint", "int", "bigint", "real", "double" },
1:d391eec:              "3, 3, 3, 3.0, 3.0",
1:d391eec:              "3"
1:d391eec:              );
1:d391eec:     }
1:d391eec: 
1:f6abacb:     public  void    test_binary_bytes_bytes()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndRunFunction
1:f6abacb:             ( "binary_bytes_bytes", "char( 2 ) for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2" );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:     public  void    test_binary_bytes_int()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndRunFunction
1:f6abacb:             ( "binary_bytes_int", "char( 1 ) for bit data", new String[] { "integer" }, "3", "03" );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:     public  void    test_varbinary_bytes_bytes()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndRunFunction
1:f6abacb:             ( "varbinary_bytes_bytes", "varchar( 2 ) for bit data", new String[] { "varchar( 2 ) for bit data" }, "X'a1b2'", "a1b2" );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:     public  void    test_varbinary_bytes_int()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndRunFunction
1:f6abacb:             ( "varbinary_bytes_int", "char( 1 ) for bit data", new String[] { "integer" }, "3", "03" );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:     public  void    test_longvarbinary_bytes_bytes()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndRunFunction
1:f6abacb:             ( "longvarbinary_bytes_bytes", "long varchar for bit data", new String[] { "varchar(2) for bit data" }, "X'a1b2'", "a1b2" );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:     public  void    test_longvarbinary_bytes_int()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndRunFunction
1:f6abacb:             ( "longvarbinary_bytes_int", "long varchar for bit data", new String[] { "integer" }, "3", "03" );
1:f6abacb:     }
1:f6abacb: 
1:e8903d6:     public  void    test_date_Date_Date()
1:e8903d6:         throws Exception
1:e8903d6:     {
1:e8903d6:         declareAndRunFunction
1:e8903d6:             ( "date_Date_Date", "date", new String[] { "date" }, "date('1994-02-23')", "1994-02-23" );
1:e8903d6:     }
1:e8903d6: 
1:e8903d6:     public  void    test_time_Time_Time()
1:e8903d6:         throws Exception
1:e8903d6:     {
1:e8903d6:         declareAndRunFunction
1:e8903d6:             ( "time_Time_Time", "time", new String[] { "time" }, "time('15:09:02')", "15:09:02" );
1:e8903d6:     }
1:e8903d6: 
1:e8903d6:     public  void    test_timestamp_Timestamp_Timestamp()
1:e8903d6:         throws Exception
1:e8903d6:     {
1:e8903d6:         declareAndRunFunction
1:e8903d6:             ( "timestamp_Timestamp_Timestamp", "timestamp", new String[] { "timestamp" }, "timestamp('1962-09-23 03:23:34.234')", "1962-09-23 03:23:34.234" );
1:e8903d6:     }
1:e8903d6: 
1:638f1b4:     public  void    test_clob_Clob_String()
1:638f1b4:         throws Exception
1:638f1b4:     {
1:75a4806:         Connection  conn = getConnection();
1:75a4806: 
1:638f1b4:         declareAndRunFunction
1:638f1b4:             ( "clob_Clob_String", "clob", new String[] { "varchar( 10 )" }, "'3'", "3" );
1:75a4806: 
1:75a4806:         // now test clob arguments
1:75a4806:         declareFunction( conn, "varchar_Clob_Clob", "varchar( 10 )", new String[] { "clob" } );
1:75a4806: 
1:75a4806:         runFunction( conn, "varchar_Clob_Clob", " \"clob_Clob_String\"( 'abc' )", "abc", null );
1:75a4806: 
1:75a4806:         // make sure that you can set lob-typed ? parameters
1:75a4806:         PreparedStatement ps = chattyPrepare( conn, "values ( \"varchar_Clob_Clob\"( ? ) )" );
1:75a4806:         String expectedValue = "abcdef";
1:75a4806:         Clob clob = AnsiSignatures.clob_Clob_String( expectedValue );
1:75a4806:         ps.setClob( 1, clob );
1:75a4806:         String actualValue = (String) getScalarString( ps );
1:75a4806:         assertTrue( expectedValue.equals( actualValue ) );
1:638f1b4:     }
1:e8903d6: 
1:638f1b4:     public  void    test_blob_Blob_String()
1:638f1b4:         throws Exception
1:638f1b4:     {
1:75a4806:         Connection  conn = getConnection();
1:75a4806: 
1:638f1b4:         declareAndRunFunction
1:638f1b4:             ( "blob_Blob_String", "blob", new String[] { "varchar( 10 )" }, "'3'", "33" );
1:75a4806: 
1:75a4806:         // now test blob arguments
1:75a4806:         declareFunction( conn, "varchar_Blob_Blob", "varchar( 10 )", new String[] { "blob" } );
1:75a4806: 
1:75a4806:         runFunction( conn, "varchar_Blob_Blob", " \"blob_Blob_String\"( 'abc' )", "abc", null );
1:75a4806: 
1:75a4806:         // make sure that you can set lob-typed ? parameters
1:75a4806:         PreparedStatement ps = chattyPrepare( conn, "values ( \"varchar_Blob_Blob\"( ? ) )" );
1:75a4806:         String expectedValue = "34";
1:75a4806:         Blob blob = AnsiSignatures.blob_Blob_String( expectedValue );
1:75a4806:         ps.setBlob( 1, blob );
1:75a4806:         String actualValue = getScalarString( ps );
1:75a4806:         assertTrue( expectedValue.equals( actualValue ) );
1:638f1b4:     }
1:5c04fbc: 
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:5c04fbc:     // SHOULD NOT RESOLVE
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:5c04fbc:     public  void    test_smallint_bad_short_Short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:7827537:             ( "smallint_bad_short_Short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_bad_Short_short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "smallint_bad_Short_short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_bad_Short_Short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "smallint_bad_Short_Short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:0ba6f9d:     // BAD RETURN TYPES
1:0ba6f9d:     //
1:0ba6f9d:     ///////////////////////////////////////////////////////////////////////////////////
1:0ba6f9d: 
1:a584888:     public  void    test_boolean_badreturn_byte_int()
1:a584888:         throws Exception
1:a584888:     {
1:a584888:         declareAndFailFunction
1:a584888:             ( "boolean_badreturn_byte_int", "boolean", new String[] { "int" }, "3", "true", TRIED_ALL_COMBINATIONS );
1:a584888:     }
1:a584888: 
1:0ba6f9d:     public  void    test_smallint_badreturn_byte_short()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "smallint_badreturn_byte_short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:0ba6f9d:     }
1:0ba6f9d: 
1:0ba6f9d:     public  void    test_integer_badreturn_byte_int()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "integer_badreturn_byte_int", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:0ba6f9d:     }
1:0ba6f9d: 
1:0ba6f9d:     public  void    test_bigint_badreturn_byte_long()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "bigint_badreturn_byte_long", "bigint", new String[] { "bigint" }, "3", "3",  TRIED_ALL_COMBINATIONS );
1:0ba6f9d:     }
1:0ba6f9d: 
1:0ba6f9d:     public  void    test_real_badreturn_byte_float()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "real_badreturn_byte_float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:0ba6f9d:     }
1:0ba6f9d: 
1:0ba6f9d:      public  void    test_double_badreturn_byte_double()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "double_badreturn_byte_double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:0ba6f9d:     }
1:0ba6f9d: 
1:f6abacb:      public  void    test_binary_badreturn_bytes_bytes()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndFailFunction
1:f6abacb:             ( "binary_badreturn_bytes_bytes", "char( 2 ) for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:      public  void    test_varbinary_badreturn_bytes_bytes()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndFailFunction
1:f6abacb:             ( "varbinary_badreturn_bytes_bytes", "varchar( 2 ) for bit data", new String[] { "varchar( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
1:f6abacb:     }
1:f6abacb: 
1:f6abacb:      public  void    test_longvarbinary_badreturn_bytes_bytes()
1:f6abacb:         throws Exception
1:f6abacb:     {
1:f6abacb:         declareAndFailFunction
1:f6abacb:             ( "longvarbinary_badreturn_bytes_bytes", "long varchar for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
1:f6abacb:     }
1:f6abacb: 
1:0ba6f9d:     ///////////////////////////////////////////////////////////////////////////////////
1:0ba6f9d:     //
1:5c04fbc:     // AMBIGUOUS METHODS
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:9a62527:     public  void    test_boolean_amb_boolean_boolean()
1:9a62527:         throws Exception
1:9a62527:     {
1:9a62527:         declareAndFailFunction
1:9a62527:              ( "boolean_amb_boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true", AMBIGUOUS );
1:9a62527:     }
1:9a62527:     public  void    test_boolean_amb_Boolean_boolean()
1:9a62527:         throws Exception
1:9a62527:     {
1:9a62527:         declareAndFailFunction
1:9a62527:             ( "boolean_amb_Boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true", AMBIGUOUS );
1:9a62527:     }
1:9a62527: 
1:5c04fbc:     public  void    test_smallint_amb_short_short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:6886d9e:         declareAndFailFunction
1:6886d9e:             ( "smallint_amb_short_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_amb_Integer_short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:6886d9e:         declareAndFailFunction
1:6886d9e:             ( "smallint_amb_Integer_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:5c04fbc:     }
1:0ba6f9d:     public  void    test_smallint_amb_byte_short()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "smallint_amb_byte_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:0ba6f9d:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_integer_amb_int_int()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:              ( "integer_amb_int_int", "int", new String[] { "int" }, "3", "3", AMBIGUOUS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_integer_amb_Integer_int()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "integer_amb_Integer_int", "int", new String[] { "int" }, "3", "3", AMBIGUOUS );
1:5c04fbc:     }
1:0ba6f9d:     public  void    test_integer_amb_byte_int()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:              ( "integer_amb_byte_int", "int", new String[] { "int" }, "3", "3", AMBIGUOUS );
1:0ba6f9d:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_bigint_amb_long_long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "bigint_amb_long_long", "bigint", new String[] { "bigint" }, "3", "3", AMBIGUOUS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_bigint_amb_Long_long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "bigint_amb_Long_long", "bigint", new String[] { "bigint" }, "3", "3", AMBIGUOUS );
1:5c04fbc:     }
1:0ba6f9d:     public  void    test_bigint_amb_byte_long()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "bigint_amb_byte_long", "bigint", new String[] { "bigint" }, "3", "3", AMBIGUOUS );
1:0ba6f9d:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_real_amb_float_float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "real_amb_float_float", "real", new String[] { "real" }, "3.0", "3.0", AMBIGUOUS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_real_amb_Float_float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "real_amb_Float_float", "real", new String[] { "real" }, "3.0", "3.0", AMBIGUOUS );
1:5c04fbc:     }
1:0ba6f9d:     public  void    test_real_amb_byte_float()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "real_amb_byte_float", "real", new String[] { "real" }, "3.0", "3.0", AMBIGUOUS );
1:0ba6f9d:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_double_amb_double_double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "double_amb_double_double", "double", new String[] { "double" }, "3.0", "3.0", AMBIGUOUS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_double_amb_Double_double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "double_amb_Double_double", "double", new String[] { "double" }, "3.0", "3.0", AMBIGUOUS );
1:5c04fbc:     }
1:0ba6f9d:     public  void    test_double_amb_byte_double()
1:0ba6f9d:         throws Exception
1:0ba6f9d:     {
1:0ba6f9d:         declareAndFailFunction
1:0ba6f9d:             ( "double_amb_byte_double", "double", new String[] { "double" }, "3.0", "3.0", AMBIGUOUS );
1:0ba6f9d:     }
1:75a4806:     
1:0ba6f9d:     
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:5c04fbc:     // UNRESOLVABLE METHODS
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:9a62527:     public  void    test_boolean_unres_boolean()
1:9a62527:         throws Exception
1:9a62527:     {
1:9a62527:         declareAndFailFunction
1:9a62527:             ( "boolean_unres_boolean", "boolean", new String[] { "boolean" }, "true", "true", TRIED_ALL_COMBINATIONS );
1:9a62527:     }
1:9a62527:     public  void    test_boolean_unres_Boolean()
1:9a62527:         throws Exception
1:9a62527:     {
1:9a62527:         declareAndFailFunction
1:9a62527:             ( "boolean_unres_Boolean", "boolean", new String[] { "boolean" }, "true", "true", TRIED_ALL_COMBINATIONS );
1:9a62527:     }
1:9a62527:     
1:5c04fbc:     public  void    test_smallint_unres_short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:7827537:             ( "smallint_unres_short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_smallint_unres_Short()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7827537:         declareAndFailFunction
1:7827537:             ( "smallint_unres_Short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     public  void    test_integer_unres_int()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7542aac:         declareAndFailFunction
1:7542aac:             ( "integer_unres_int", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_integer_unres_Integer()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7542aac:         declareAndFailFunction
1:7542aac:             ( "integer_unres_Integer", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     
1:5c04fbc:     public  void    test_bigint_unres_long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7542aac:         declareAndFailFunction
1:7542aac:             ( "bigint_unres_long", "bigint", new String[] { "bigint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_bigint_unres_Long()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7542aac:         declareAndFailFunction
1:7542aac:             ( "bigint_unres_Long", "bigint", new String[] { "bigint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:         
1:5c04fbc:     public  void    test_real_unres_float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7542aac:         declareAndFailFunction
1:7542aac:             ( "real_unres_float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_real_unres_Float()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:7542aac:         declareAndFailFunction
1:7542aac:             ( "real_unres_Float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:         
1:5c04fbc:     public  void    test_double_unres_double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "double_unres_double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc:     public  void    test_double_unres_Double()
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         declareAndFailFunction
1:5c04fbc:             ( "double_unres_Double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:         
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc:     //
1:ffac5c3:     // PRODEDURES
1:ffac5c3:     //
1:ffac5c3:     ///////////////////////////////////////////////////////////////////////////////////
1:ffac5c3: 
1:ffac5c3:     public  void    test_wrapperOutputArgs()
1:ffac5c3:         throws Exception
1:ffac5c3:     {
1:ffac5c3:         Connection  conn = getConnection();
1:ffac5c3:         PreparedStatement   ps = conn.prepareStatement
1:ffac5c3:             (
1:ffac5c3:              "create procedure wrapperProc\n" +
1:ffac5c3:              "(\n" +
1:ffac5c3:              "    out bigintCol bigint,\n" +
1:ffac5c3:              "    out booleanCol boolean,\n" +
1:ffac5c3:              "    out doubleCol double,\n" +
1:ffac5c3:              "    out floatCol float,\n" +
1:ffac5c3:              "    out intCol int,\n" +
1:ffac5c3:              "    out realCol real,\n" +
1:ffac5c3:              "    out smallintCol smallint\n" +
1:ffac5c3:              ")\n" +
1:ffac5c3:              "language java\n" +
1:ffac5c3:              "parameter style java\n" +
1:ffac5c3:              "no sql\n" +
1:ffac5c3:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.wrapperProc'\n"
1:ffac5c3:              );
1:ffac5c3:         ps.execute();
1:ffac5c3:         ps.close();
1:ffac5c3: 
1:ffac5c3:         CallableStatement cs = conn.prepareCall
1:ffac5c3:             (
1:ffac5c3:              "call wrapperProc(  ?, ?, ?, ?, ?, ?, ? )"
1:ffac5c3:              );
1:ffac5c3:         int param = 1;
1:ffac5c3:         cs.registerOutParameter( param++, Types.BIGINT );
1:ffac5c3:         cs.registerOutParameter( param++, Types.BOOLEAN );
1:ffac5c3:         cs.registerOutParameter( param++, Types.DOUBLE );
1:ffac5c3:         cs.registerOutParameter( param++, Types.FLOAT );
1:ffac5c3:         cs.registerOutParameter( param++, Types.INTEGER );
1:ffac5c3:         cs.registerOutParameter( param++, Types.REAL );
1:ffac5c3:         cs.registerOutParameter( param++, Types.SMALLINT );
1:ffac5c3: 
1:ffac5c3:         cs.execute();
1:ffac5c3:         param = 1;
1:ffac5c3:         assertEquals( 1L, cs.getLong( param++ ) );
1:ffac5c3:         assertEquals( true, cs.getBoolean( param++ ) );
1:ffac5c3:         assertEquals( 1.0, cs.getDouble( param++ ), 0.0 );
1:ffac5c3:         assertEquals( 1.0, cs.getDouble( param++ ), 0.0 );
1:ffac5c3:         assertEquals( 1, cs.getInt( param++ ) );
1:ffac5c3:         assertEquals( 1.0F, cs.getFloat( param++ ), 0.0F );
1:ffac5c3:         assertEquals( (short) 1, cs.getShort( param++ ) );
1:ffac5c3:     }
1:ffac5c3:     
1:ffac5c3:     ///////////////////////////////////////////////////////////////////////////////////
1:ffac5c3:     //
1:5c04fbc:     // MINIONS
1:5c04fbc:     //
1:5c04fbc:     ///////////////////////////////////////////////////////////////////////////////////
1:5c04fbc: 
1:5c04fbc:     /**
1:5c04fbc:      * <p>
1:5c04fbc:      * Declare and run a function.
1:5c04fbc:      * </p>
1:5c04fbc:      */
1:5c04fbc:     private void declareAndRunFunction( String name, String returnType, String[] argTypes, String args, String result )
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         Connection  conn = getConnection();
1:5c04fbc: 
1:5c04fbc:         declareFunction( conn, name, returnType, argTypes );
1:5c04fbc:         runFunction( conn, name, args, result, null );
1:5c04fbc:     }
1:5c04fbc:     
1:5c04fbc:     /**
1:5c04fbc:      * <p>
1:5c04fbc:      * Declare and run a function and expect the function to fail.
1:5c04fbc:      * </p>
1:5c04fbc:      */
1:5c04fbc:     private void declareAndFailFunction( String name, String returnType, String[] argTypes, String args, String result, String sqlstate )
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         Connection  conn = getConnection();
1:5c04fbc: 
1:5c04fbc:         declareFunction( conn, name, returnType, argTypes );
1:5c04fbc:         runFunction( conn, name, args, result, sqlstate );
1:5c04fbc:     }
1:5c04fbc:     
1:5c04fbc:     /**
1:5c04fbc:      * <p>
1:5c04fbc:      * Run a function. If sqlstate is not null, then we expect the run to fail.
1:5c04fbc:      * </p>
1:5c04fbc:      */
1:5c04fbc:     private void runFunction( Connection conn, String name, String args, String result, String sqlstate )
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         StringBuffer    buffer = new StringBuffer();
1:5c04fbc: 
1:5c04fbc:         buffer.append( "values ( " + doubleQuote( name ) + "( " + args + " ) )" );
1:5c04fbc: 
1:5c04fbc:         String          query = buffer.toString();
1:5c04fbc: 
1:5c04fbc:         println( query );
1:5c04fbc: 
1:5c04fbc:         PreparedStatement   ps = null;
1:5c04fbc:         ResultSet               rs = null;
1:5c04fbc: 
1:5c04fbc:         try {
1:5c04fbc:             ps = conn.prepareStatement( query );
1:5c04fbc:             rs = ps.executeQuery();
1:5c04fbc: 
1:5c04fbc:             rs.next();
1:5c04fbc: 
1:5c04fbc:             assertEquals( rs.getString( 1 ), result );
1:5c04fbc: 
1:5c04fbc:             if ( sqlstate != null )
1:5c04fbc:             {
1:5c04fbc:                 fail( "Should have failed with sqlstate: " + sqlstate );
1:5c04fbc:             }
1:5c04fbc:         }
1:5c04fbc:         catch (SQLException se)
1:5c04fbc:         {
1:5c04fbc:             assertSQLState( sqlstate, se );
1:5c04fbc:         }
1:5c04fbc:         finally
1:5c04fbc:         {
1:5c04fbc:             if ( rs != null ) { rs.close(); }
1:5c04fbc:             if ( ps != null ) { ps.close(); }
1:5c04fbc:         }
1:5c04fbc:     }
1:5c04fbc:     
1:5c04fbc:     /**
1:5c04fbc:      * <p>
1:5c04fbc:      * Declare a function with the given name, return type, and argument type.
1:5c04fbc:      * </p>
1:5c04fbc:      */
1:5c04fbc:     private void declareFunction( Connection conn, String name, String returnType, String[] argTypes )
1:5c04fbc:         throws Exception
1:5c04fbc:     {
1:5c04fbc:         StringBuffer    buffer = new StringBuffer();
1:5c04fbc:         int                 count = argTypes.length;
1:5c04fbc: 
1:5c04fbc:         buffer.append( "create function " + doubleQuote( name ) );
1:5c04fbc:         buffer.append( "\n(" );
1:5c04fbc:         for ( int i = 0; i < count; i++ )
1:5c04fbc:         {
1:5c04fbc:             if ( i > 0 ) { buffer.append( "," ); }
1:5c04fbc:             buffer.append( "\n\ta_" + i + " " + argTypes[ i ] );
1:5c04fbc:         }
1:5c04fbc:         buffer.append( "\n)\n" );
1:5c04fbc:         buffer.append( "returns " + returnType );
1:5c04fbc:         buffer.append( "\nlanguage java\nparameter style java\nno sql\n" );
1:5c04fbc:         buffer.append( "external name '" + AnsiSignatures.class.getName() + "." + name + "'" );
1:5c04fbc: 
1:5c04fbc:         String  ddl = buffer.toString();
1:5c04fbc: 
1:5c04fbc:         println( ddl );
1:5c04fbc: 
1:5c04fbc:         PreparedStatement ps = conn.prepareStatement( ddl );
1:5c04fbc: 
1:5c04fbc:         ps.execute();
1:5c04fbc:         ps.close();
1:5c04fbc: 
1:5c04fbc:         conn.commit();
1:5c04fbc:     }
1:5c04fbc: 
1:5c04fbc:     private String  doubleQuote( String raw )
1:5c04fbc:     {
1:5c04fbc:         return '"' + raw + '"';
1:5c04fbc:     }
1:5c04fbc:     
1:75a4806:     /**
1:75a4806:      * Prepare a statement and report its sql text.
1:75a4806:      */
1:75a4806:     protected PreparedStatement   chattyPrepare( Connection conn, String text )
1:75a4806:         throws SQLException
1:75a4806:     {
1:75a4806:         println( "Preparing statement:\n\t" + text );
1:75a4806:         
1:75a4806:         return conn.prepareStatement( text );
1:75a4806:     }
1:75a4806: 
1:75a4806:     /** Get a scalar result from a query */
1:75a4806:     private String getScalarString( PreparedStatement ps ) throws Exception
1:75a4806:     {
1:75a4806:         ResultSet rs = ps.executeQuery();
1:75a4806:         rs.next();
1:75a4806:         String retval = rs.getString( 1 );
1:75a4806: 
1:75a4806:         rs.close();
1:75a4806:         ps.close();
1:75a4806: 
1:75a4806:         return retval;
1:1ae02c9:     }
1:75a4806:   
1:75a4806: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.defaultSuite(
1:             AnsiSignaturesTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ffac5c3
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:     // PRODEDURES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    test_wrapperOutputArgs()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1:         PreparedStatement   ps = conn.prepareStatement
1:             (
1:              "create procedure wrapperProc\n" +
1:              "(\n" +
1:              "    out bigintCol bigint,\n" +
1:              "    out booleanCol boolean,\n" +
1:              "    out doubleCol double,\n" +
1:              "    out floatCol float,\n" +
1:              "    out intCol int,\n" +
1:              "    out realCol real,\n" +
1:              "    out smallintCol smallint\n" +
1:              ")\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.wrapperProc'\n"
1:              );
1:         ps.execute();
1:         ps.close();
1: 
1:         CallableStatement cs = conn.prepareCall
1:             (
1:              "call wrapperProc(  ?, ?, ?, ?, ?, ?, ? )"
1:              );
1:         int param = 1;
1:         cs.registerOutParameter( param++, Types.BIGINT );
1:         cs.registerOutParameter( param++, Types.BOOLEAN );
1:         cs.registerOutParameter( param++, Types.DOUBLE );
1:         cs.registerOutParameter( param++, Types.FLOAT );
1:         cs.registerOutParameter( param++, Types.INTEGER );
1:         cs.registerOutParameter( param++, Types.REAL );
1:         cs.registerOutParameter( param++, Types.SMALLINT );
1: 
1:         cs.execute();
1:         param = 1;
1:         assertEquals( 1L, cs.getLong( param++ ) );
1:         assertEquals( true, cs.getBoolean( param++ ) );
1:         assertEquals( 1.0, cs.getDouble( param++ ), 0.0 );
1:         assertEquals( 1.0, cs.getDouble( param++ ), 0.0 );
1:         assertEquals( 1, cs.getInt( param++ ) );
1:         assertEquals( 1.0F, cs.getFloat( param++ ), 0.0F );
1:         assertEquals( (short) 1, cs.getShort( param++ ) );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:75a4806
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Blob;
1: import java.sql.Clob;
/////////////////////////////////////////////////////////////////////////
1:         Connection  conn = getConnection();
1: 
1: 
1:         // now test clob arguments
1:         declareFunction( conn, "varchar_Clob_Clob", "varchar( 10 )", new String[] { "clob" } );
1: 
1:         runFunction( conn, "varchar_Clob_Clob", " \"clob_Clob_String\"( 'abc' )", "abc", null );
1: 
1:         // make sure that you can set lob-typed ? parameters
1:         PreparedStatement ps = chattyPrepare( conn, "values ( \"varchar_Clob_Clob\"( ? ) )" );
1:         String expectedValue = "abcdef";
1:         Clob clob = AnsiSignatures.clob_Clob_String( expectedValue );
1:         ps.setClob( 1, clob );
1:         String actualValue = (String) getScalarString( ps );
1:         assertTrue( expectedValue.equals( actualValue ) );
1:         Connection  conn = getConnection();
1: 
1: 
1:         // now test blob arguments
1:         declareFunction( conn, "varchar_Blob_Blob", "varchar( 10 )", new String[] { "blob" } );
1: 
1:         runFunction( conn, "varchar_Blob_Blob", " \"blob_Blob_String\"( 'abc' )", "abc", null );
1: 
1:         // make sure that you can set lob-typed ? parameters
1:         PreparedStatement ps = chattyPrepare( conn, "values ( \"varchar_Blob_Blob\"( ? ) )" );
1:         String expectedValue = "34";
1:         Blob blob = AnsiSignatures.blob_Blob_String( expectedValue );
1:         ps.setBlob( 1, blob );
1:         String actualValue = getScalarString( ps );
1:         assertTrue( expectedValue.equals( actualValue ) );
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Prepare a statement and report its sql text.
1:      */
1:     protected PreparedStatement   chattyPrepare( Connection conn, String text )
1:         throws SQLException
1:     {
1:         println( "Preparing statement:\n\t" + text );
1:         
1:         return conn.prepareStatement( text );
1:     }
1: 
1:     /** Get a scalar result from a query */
1:     private String getScalarString( PreparedStatement ps ) throws Exception
1:     {
1:         ResultSet rs = ps.executeQuery();
1:         rs.next();
1:         String retval = rs.getString( 1 );
1: 
1:         rs.close();
1:         ps.close();
1: 
1:         return retval;
1:     }
1:   
commit:9a62527
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_boolean_boolean_boolean()
1:             ( "boolean_boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:     public  void    test_boolean_Boolean_boolean()
1:             ( "boolean_Boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:     }
1:     public  void    test_boolean_boolean_Boolean()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "boolean_boolean_Boolean", "boolean", new String[] { "boolean" }, "true", "true" );
1:     }
1:     public  void    test_boolean_Boolean_Boolean()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "boolean_Boolean_Boolean", "boolean", new String[] { "boolean" }, "true", "true" );
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_boolean_amb_boolean_boolean()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:              ( "boolean_amb_boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true", AMBIGUOUS );
1:     }
1:     public  void    test_boolean_amb_Boolean_boolean()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "boolean_amb_Boolean_boolean", "boolean", new String[] { "boolean" }, "true", "true", AMBIGUOUS );
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_boolean_unres_boolean()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "boolean_unres_boolean", "boolean", new String[] { "boolean" }, "true", "true", TRIED_ALL_COMBINATIONS );
1:     }
1:     public  void    test_boolean_unres_Boolean()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "boolean_unres_Boolean", "boolean", new String[] { "boolean" }, "true", "true", TRIED_ALL_COMBINATIONS );
1:     }
1:     
commit:a584888
/////////////////////////////////////////////////////////////////////////
0:     public  void    test_boolean_boolean_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
0:             ( "boolean_boolean_int", "boolean", new String[] { "int" }, "3", "true" );
1:     }
0:     public  void    test_boolean_Boolean_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
0:             ( "boolean_Boolean_int", "boolean", new String[] { "int" }, "3", "true" );
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_boolean_badreturn_byte_int()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "boolean_badreturn_byte_int", "boolean", new String[] { "int" }, "3", "true", TRIED_ALL_COMBINATIONS );
1:     }
1: 
commit:22917ef
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = (TestSuite) TestConfiguration.defaultSuite(AnsiSignaturesTest.class);
commit:638f1b4
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_clob_Clob_String()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "clob_Clob_String", "clob", new String[] { "varchar( 10 )" }, "'3'", "3" );
1:     }
1:     public  void    test_blob_Blob_String()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "blob_Blob_String", "blob", new String[] { "varchar( 10 )" }, "'3'", "33" );
1:     }
commit:ef42635
/////////////////////////////////////////////////////////////////////////
0:     // FIXME
0:     //    public  void    test_blob_Blob_String()
0:     //        throws Exception
0:     //    {
0:     //        declareAndRunFunction
0:     //            ( "blob_Blob_String", "blob", new String[] { "varchar( 10 )" }, "'3'", "3" );
0:     //    }
1: 
commit:e8903d6
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_decimal_BigDecimal_BigDecimal()
1:         throws Exception
1:     {
1:         //
1:         // On small device platforms, this raises an exception in the byte-code
1:         // compiler. See DERBY-3697.
1:         //
1:         if ( JDBC.vmSupportsJSR169() ) { return; }
1:         
1:         declareAndRunFunction
1:             ( "decimal_BigDecimal_BigDecimal", "decimal( 7, 2 )", new String[] { "decimal( 7, 2 )" }, "12345.67", "12345.67" );
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_date_Date_Date()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "date_Date_Date", "date", new String[] { "date" }, "date('1994-02-23')", "1994-02-23" );
1:     }
1: 
1:     public  void    test_time_Time_Time()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "time_Time_Time", "time", new String[] { "time" }, "time('15:09:02')", "15:09:02" );
1:     }
1: 
1:     public  void    test_timestamp_Timestamp_Timestamp()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "timestamp_Timestamp_Timestamp", "timestamp", new String[] { "timestamp" }, "timestamp('1962-09-23 03:23:34.234')", "1962-09-23 03:23:34.234" );
1:     }
1: 
0:     // FIXME
0:     //    public  void    test_clob_Clob_String()
0:     //        throws Exception
0:     //    {
0:     //        declareAndRunFunction
0:     //            ( "clob_Clob_String", "clob", new String[] { "varchar( 10 )" }, "'3'", "3" );
0:     //    }
1: 
commit:9de50b2
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_char_String_String()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "char_String_String", "char( 10 )", new String[] { "char( 10 )" }, "'3.0'", "3.0       " );
1:     }
1: 
1:     public  void    test_longvarchar_String_String()
1:         throws Exception
1:     {
1:         // long varchar is not allowed as an argument type in a Derby routine
1:         declareAndRunFunction
1:             ( "longvarchar_String_String", "long varchar", new String[] { "varchar( 10 )" }, "'3.0'", "3.0" );
1:     }
1: 
commit:f6abacb
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_binary_bytes_bytes()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "binary_bytes_bytes", "char( 2 ) for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2" );
1:     }
1: 
1:     public  void    test_binary_bytes_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "binary_bytes_int", "char( 1 ) for bit data", new String[] { "integer" }, "3", "03" );
1:     }
1: 
1:     public  void    test_varbinary_bytes_bytes()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "varbinary_bytes_bytes", "varchar( 2 ) for bit data", new String[] { "varchar( 2 ) for bit data" }, "X'a1b2'", "a1b2" );
1:     }
1: 
1:     public  void    test_varbinary_bytes_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "varbinary_bytes_int", "char( 1 ) for bit data", new String[] { "integer" }, "3", "03" );
1:     }
1: 
1:     public  void    test_longvarbinary_bytes_bytes()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "longvarbinary_bytes_bytes", "long varchar for bit data", new String[] { "varchar(2) for bit data" }, "X'a1b2'", "a1b2" );
1:     }
1: 
1:     public  void    test_longvarbinary_bytes_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "longvarbinary_bytes_int", "long varchar for bit data", new String[] { "integer" }, "3", "03" );
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      public  void    test_binary_badreturn_bytes_bytes()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "binary_badreturn_bytes_bytes", "char( 2 ) for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:      public  void    test_varbinary_badreturn_bytes_bytes()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "varbinary_badreturn_bytes_bytes", "varchar( 2 ) for bit data", new String[] { "varchar( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:      public  void    test_longvarbinary_badreturn_bytes_bytes()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "longvarbinary_badreturn_bytes_bytes", "long varchar for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
1:     }
1: 
commit:d391eec
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_bigint__smallint_int_bigint_real_double()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             (
1:              "bigint__smallint_int_bigint_real_double",
1:              "bigint",
1:               new String[] { "smallint", "int", "bigint", "real", "double" },
1:              "3, 3, 3, 3.0, 3.0",
1:              "3"
1:              );
1:     }
1: 
1:     public  void    test_flipped_bigint__smallint_int_bigint_real_double()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             (
1:              "flipped_bigint__smallint_int_bigint_real_double",
1:              "bigint",
1:               new String[] { "smallint", "int", "bigint", "real", "double" },
1:              "3, 3, 3, 3.0, 3.0",
1:              "3"
1:              );
1:     }
1: 
commit:7294977
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // On small device platforms, this raises an exception in the byte-code
1:         // compiler. See DERBY-3697.
1:         //
1:         if ( JDBC.vmSupportsJSR169() ) { return; }
1:         
commit:886e6e1
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_numeric_BigDecimal_BigDecimal()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "numeric_BigDecimal_BigDecimal", "numeric( 7, 2 )", new String[] { "numeric( 7, 2 )" }, "12345.67", "12345.67" );
1:     }
1:     
1: 
commit:0ba6f9d
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_varchar_String_String()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "varchar_String_String", "varchar( 10 )", new String[] { "varchar( 10 )" }, "'3.0'", "3.0" );
1:     }
/////////////////////////////////////////////////////////////////////////
1:     // BAD RETURN TYPES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    test_smallint_badreturn_byte_short()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "smallint_badreturn_byte_short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:     public  void    test_integer_badreturn_byte_int()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "integer_badreturn_byte_int", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:     public  void    test_bigint_badreturn_byte_long()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "bigint_badreturn_byte_long", "bigint", new String[] { "bigint" }, "3", "3",  TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:     public  void    test_real_badreturn_byte_float()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "real_badreturn_byte_float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:      public  void    test_double_badreturn_byte_double()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "double_badreturn_byte_double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_smallint_amb_byte_short()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "smallint_amb_byte_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_integer_amb_byte_int()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:              ( "integer_amb_byte_int", "int", new String[] { "int" }, "3", "3", AMBIGUOUS );
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_bigint_amb_byte_long()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "bigint_amb_byte_long", "bigint", new String[] { "bigint" }, "3", "3", AMBIGUOUS );
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_real_amb_byte_float()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "real_amb_byte_float", "real", new String[] { "real" }, "3.0", "3.0", AMBIGUOUS );
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_double_amb_byte_double()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "double_amb_byte_double", "double", new String[] { "double" }, "3.0", "3.0", AMBIGUOUS );
1:     }
1: 
commit:6886d9e
/////////////////////////////////////////////////////////////////////////
1:         declareAndFailFunction
1:             ( "smallint_amb_short_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:         declareAndFailFunction
1:             ( "smallint_amb_Integer_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
commit:7827537
/////////////////////////////////////////////////////////////////////////
1:         declareAndRunFunction
1:             ( "smallint_short_Integer", "smallint", new String[] { "smallint" }, "3", "3" );
1:         declareAndRunFunction
1:             ( "smallint_Integer_short", "smallint", new String[] { "smallint" }, "3", "3" );
1:         declareAndRunFunction
1:             ( "smallint_Integer_Integer", "smallint", new String[] { "smallint" }, "3", "3" );
/////////////////////////////////////////////////////////////////////////
1:             ( "smallint_bad_short_Short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
/////////////////////////////////////////////////////////////////////////
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "smallint_amb_short_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "smallint_amb_Integer_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
/////////////////////////////////////////////////////////////////////////
1:             ( "smallint_unres_short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:         declareAndFailFunction
1:             ( "smallint_unres_Short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
commit:7542aac
/////////////////////////////////////////////////////////////////////////
1:         declareAndFailFunction
1:             ( "integer_unres_int", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:         declareAndFailFunction
1:             ( "integer_unres_Integer", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:         declareAndFailFunction
1:             ( "bigint_unres_long", "bigint", new String[] { "bigint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:         declareAndFailFunction
1:             ( "bigint_unres_Long", "bigint", new String[] { "bigint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:         declareAndFailFunction
1:             ( "real_unres_float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:         declareAndFailFunction
1:             ( "real_unres_Float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
commit:5c04fbc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.DriverManager;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * <p>
1:  * Test that Derby resolves routines according to the ANSI method
1:  * resolution rules. Those rules are summarized in DERBY-3652.
1:  * </p>
1:  */
1: public class AnsiSignaturesTest extends BaseJDBCTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   String  MISSING_METHOD_SQLSTATE = "XJ001";
1:     public  static  final   String  TRIED_ALL_COMBINATIONS = "42X50";
1:     public  static  final   String  AMBIGUOUS = "42X73";
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public AnsiSignaturesTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(AnsiSignaturesTest.class);
1: 
1:         return new CleanDatabaseTestSetup( suite );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // SUCCESSFUL RESOLUTIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    test_smallint_short_short()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "smallint_short_short", "smallint", new String[] { "smallint" }, "3", "3" );
1:     }
1:     public  void    test_smallint_short_Integer()
1:         throws Exception
1:     {
0:         // FIXME declareAndRunFunction
0:         // FIXME ( "smallint_short_Integer", "smallint", new String[] { "smallint" }, "3", "3" );
1:     }
1:     public  void    test_smallint_Integer_short()
1:         throws Exception
1:     {
0:         // FIXME declareAndRunFunction
0:         // FIXME ( "smallint_Integer_short", "smallint", new String[] { "smallint" }, "3", "3" );
1:     }
1:     public  void    test_smallint_Integer_Integer()
1:         throws Exception
1:     {
0:         // FIXME declareAndRunFunction
0:         // FIXME ( "smallint_Integer_Integer", "smallint", new String[] { "smallint" }, "3", "3" );
1:     }
1: 
1:     public  void    test_integer_int_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "integer_int_int", "int", new String[] { "int" }, "3", "3" );
1:     }
1:     public  void    test_integer_int_Integer()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "integer_int_Integer", "int", new String[] { "int" }, "3", "3" );
1:     }
1:     public  void    test_integer_Integer_int()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "integer_Integer_int", "int", new String[] { "int" }, "3", "3" );
1:     }
1:     public  void    test_integer_Integer_Integer()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "integer_Integer_Integer", "int", new String[] { "int" }, "3", "3" );
1:     }
1: 
1:     public  void    test_bigint_long_long()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "bigint_long_long", "bigint", new String[] { "bigint" }, "3", "3" );
1:     }
1:     public  void    test_bigint_long_Long()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "bigint_long_Long", "bigint", new String[] { "bigint" }, "3", "3" );
1:     }
1:     public  void    test_bigint_Long_long()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "bigint_Long_long", "bigint", new String[] { "bigint" }, "3", "3" );
1:     }
1:     public  void    test_bigint_Long_Long()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "bigint_Long_Long", "bigint", new String[] { "bigint" }, "3", "3" );
1:     }
1: 
1:     public  void    test_real_float_float()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "real_float_float", "real", new String[] { "real" }, "3.0", "3.0" );
1:     }
1:     public  void    test_real_float_Float()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "real_float_Float", "real", new String[] { "real" }, "3.0", "3.0" );
1:     }
1:     public  void    test_real_Float_float()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "real_Float_float", "real", new String[] { "real" }, "3.0", "3.0" );
1:     }
1:     public  void    test_real_Float_Float()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "real_Float_Float", "real", new String[] { "real" }, "3.0", "3.0" );
1:     }
1: 
1:     public  void    test_double_double_double()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "double_double_double", "double", new String[] { "double" }, "3.0", "3.0" );
1:     }
1:     public  void    test_double_double_Double()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "double_double_Double", "double", new String[] { "double" }, "3.0", "3.0" );
1:     }
1:     public  void    test_double_Double_double()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "double_Double_double", "double", new String[] { "double" }, "3.0", "3.0" );
1:     }
1:     public  void    test_double_Double_Double()
1:         throws Exception
1:     {
1:         declareAndRunFunction
1:             ( "double_Double_Double", "double", new String[] { "double" }, "3.0", "3.0" );
1:     }
1: 
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // SHOULD NOT RESOLVE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    test_smallint_bad_short_Short()
1:         throws Exception
1:     {
1:         declareAndFailFunction
0:             ( "smallint_bad_short_Short", "smallint", new String[] { "smallint" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1:     public  void    test_smallint_bad_Short_short()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "smallint_bad_Short_short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:     }
1:     public  void    test_smallint_bad_Short_Short()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "smallint_bad_Short_Short", "smallint", new String[] { "smallint" }, "3", "3", TRIED_ALL_COMBINATIONS );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // AMBIGUOUS METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    test_smallint_amb_short_short()
1:         throws Exception
1:     {
0:         // FIXME declareAndFailFunction
0:         // FIXME ( "smallint_amb_short_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:     }
1:     public  void    test_smallint_amb_Integer_short()
1:         throws Exception
1:     {
0:         // FIXME declareAndFailFunction
0:         // FIXME ( "smallint_amb_Integer_short", "smallint", new String[] { "smallint" }, "3", "3", AMBIGUOUS );
1:     }
1: 
1:     public  void    test_integer_amb_int_int()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:              ( "integer_amb_int_int", "int", new String[] { "int" }, "3", "3", AMBIGUOUS );
1:     }
1:     public  void    test_integer_amb_Integer_int()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "integer_amb_Integer_int", "int", new String[] { "int" }, "3", "3", AMBIGUOUS );
1:     }
1: 
1:     public  void    test_bigint_amb_long_long()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "bigint_amb_long_long", "bigint", new String[] { "bigint" }, "3", "3", AMBIGUOUS );
1:     }
1:     public  void    test_bigint_amb_Long_long()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "bigint_amb_Long_long", "bigint", new String[] { "bigint" }, "3", "3", AMBIGUOUS );
1:     }
1: 
1:     public  void    test_real_amb_float_float()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "real_amb_float_float", "real", new String[] { "real" }, "3.0", "3.0", AMBIGUOUS );
1:     }
1:     public  void    test_real_amb_Float_float()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "real_amb_Float_float", "real", new String[] { "real" }, "3.0", "3.0", AMBIGUOUS );
1:     }
1: 
1:     public  void    test_double_amb_double_double()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "double_amb_double_double", "double", new String[] { "double" }, "3.0", "3.0", AMBIGUOUS );
1:     }
1:     public  void    test_double_amb_Double_double()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "double_amb_Double_double", "double", new String[] { "double" }, "3.0", "3.0", AMBIGUOUS );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // UNRESOLVABLE METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  void    test_smallint_unres_short()
1:         throws Exception
1:     {
1:         declareAndFailFunction
0:             ( "smallint_unres_short", "smallint", new String[] { "smallint" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1:     public  void    test_smallint_unres_Short()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "smallint_unres_Short", "smallint", new String[] { "smallint" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1: 
1:     public  void    test_integer_unres_int()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "integer_unres_int", "int", new String[] { "int" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1:     public  void    test_integer_unres_Integer()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "integer_unres_Integer", "int", new String[] { "int" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1:     
1:     public  void    test_bigint_unres_long()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "bigint_unres_long", "bigint", new String[] { "bigint" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1:     public  void    test_bigint_unres_Long()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "bigint_unres_Long", "bigint", new String[] { "bigint" }, "3", "3", MISSING_METHOD_SQLSTATE );
1:     }
1:         
1:     public  void    test_real_unres_float()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "real_unres_float", "real", new String[] { "real" }, "3.0", "3.0", MISSING_METHOD_SQLSTATE );
1:     }
1:     public  void    test_real_unres_Float()
1:         throws Exception
1:     {
0:         //FIXME declareAndFailFunction
0:         //FIXME ( "real_unres_Float", "real", new String[] { "real" }, "3.0", "3.0", MISSING_METHOD_SQLSTATE );
1:     }
1:         
1:     public  void    test_double_unres_double()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "double_unres_double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:     }
1:     public  void    test_double_unres_Double()
1:         throws Exception
1:     {
1:         declareAndFailFunction
1:             ( "double_unres_Double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
1:     }
1: 
1:         
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Declare and run a function.
1:      * </p>
1:      */
1:     private void declareAndRunFunction( String name, String returnType, String[] argTypes, String args, String result )
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         declareFunction( conn, name, returnType, argTypes );
1:         runFunction( conn, name, args, result, null );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Declare and run a function and expect the function to fail.
1:      * </p>
1:      */
1:     private void declareAndFailFunction( String name, String returnType, String[] argTypes, String args, String result, String sqlstate )
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         declareFunction( conn, name, returnType, argTypes );
1:         runFunction( conn, name, args, result, sqlstate );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Run a function. If sqlstate is not null, then we expect the run to fail.
1:      * </p>
1:      */
1:     private void runFunction( Connection conn, String name, String args, String result, String sqlstate )
1:         throws Exception
1:     {
1:         StringBuffer    buffer = new StringBuffer();
1: 
1:         buffer.append( "values ( " + doubleQuote( name ) + "( " + args + " ) )" );
1: 
1:         String          query = buffer.toString();
1: 
1:         println( query );
1: 
1:         PreparedStatement   ps = null;
1:         ResultSet               rs = null;
1: 
1:         try {
1:             ps = conn.prepareStatement( query );
1:             rs = ps.executeQuery();
1: 
1:             rs.next();
1: 
1:             assertEquals( rs.getString( 1 ), result );
1: 
1:             if ( sqlstate != null )
1:             {
1:                 fail( "Should have failed with sqlstate: " + sqlstate );
1:             }
1:         }
1:         catch (SQLException se)
1:         {
1:             assertSQLState( sqlstate, se );
1:         }
1:         finally
1:         {
1:             if ( rs != null ) { rs.close(); }
1:             if ( ps != null ) { ps.close(); }
1:         }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Declare a function with the given name, return type, and argument type.
1:      * </p>
1:      */
1:     private void declareFunction( Connection conn, String name, String returnType, String[] argTypes )
1:         throws Exception
1:     {
1:         StringBuffer    buffer = new StringBuffer();
1:         int                 count = argTypes.length;
1: 
1:         buffer.append( "create function " + doubleQuote( name ) );
1:         buffer.append( "\n(" );
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             if ( i > 0 ) { buffer.append( "," ); }
1:             buffer.append( "\n\ta_" + i + " " + argTypes[ i ] );
1:         }
1:         buffer.append( "\n)\n" );
1:         buffer.append( "returns " + returnType );
1:         buffer.append( "\nlanguage java\nparameter style java\nno sql\n" );
1:         buffer.append( "external name '" + AnsiSignatures.class.getName() + "." + name + "'" );
1: 
1:         String  ddl = buffer.toString();
1: 
1:         println( ddl );
1: 
1:         PreparedStatement ps = conn.prepareStatement( ddl );
1: 
1:         ps.execute();
1:         ps.close();
1: 
1:         conn.commit();
1:     }
1: 
1:     private String  doubleQuote( String raw )
1:     {
1:         return '"' + raw + '"';
1:     }
1:     
1: }
============================================================================