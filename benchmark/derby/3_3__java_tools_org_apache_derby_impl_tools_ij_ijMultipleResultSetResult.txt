1:7b5fc1e: /*
2:7b5fc1e: 
1:7b5fc1e: Derby - Class org.apache.derby.impl.tools.ij.ijResultSetResult
1:7b5fc1e: 
1:7b5fc1e: Licensed to the Apache Software Foundation (ASF) under one
1:7b5fc1e: or more contributor license agreements.  See the NOTICE file
1:7b5fc1e: distributed with this work for additional information
1:7b5fc1e: regarding copyright ownership.  The ASF licenses this file
1:7b5fc1e: to you under the Apache License, Version 2.0 (the
1:7b5fc1e: "License"); you may not use this file except in compliance
1:7b5fc1e: with the License.  You may obtain a copy of the License at
1:7b5fc1e: 
1:7b5fc1e: http://www.apache.org/licenses/LICENSE-2.0
1:7b5fc1e: 
1:7b5fc1e: Unless required by applicable law or agreed to in writing, software
1:7b5fc1e: distributed under the License is distributed on an "AS IS" BASIS,
1:7b5fc1e: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b5fc1e: See the License for the specific language governing permissions and
1:7b5fc1e: limitations under the License.
1:7b5fc1e: 
2:7b5fc1e: */
1:7b5fc1e: 
1:7b5fc1e: package org.apache.derby.impl.tools.ij;
1:7b5fc1e: 
1:7b5fc1e: import java.sql.Connection;
1:7b5fc1e: import java.sql.ResultSet;
1:7b5fc1e: import java.sql.Statement;
1:7b5fc1e: import java.sql.SQLException;
1:7b5fc1e: import java.sql.SQLWarning;
1:7b5fc1e: 
1:7b5fc1e: import java.util.List;
1:7b5fc1e: import java.util.ArrayList;
1:7b5fc1e: 
1:7e79830: import org.apache.derby.iapi.tools.ToolUtils;
1:7e79830: 
2:7b5fc1e: /**
1:7b5fc1e:  * This impl is intended to be used with multiple resultsets, where
1:7b5fc1e:  * the execution of the statement is already complete.
1:7b5fc1e:  */
1:7b5fc1e: public class ijMultipleResultSetResult extends ijResultImpl {
1:7b5fc1e: 
1:16d3334:     private ArrayList<ResultSet> resultSets = null;
1:7b5fc1e: 
1:7e79830:     private int[] displayColumns = null;
1:7e79830:     private int[] columnWidths = null;
1:7b5fc1e: 
1:7b5fc1e:     /**
1:7b5fc1e:      * Create a ijResultImpl that represents multiple result sets, only
1:7b5fc1e:      * displaying a subset of the columns, using specified column widths.
1:7b5fc1e:      * 
1:7b5fc1e:      * @param resultSets The result sets to display
1:7b5fc1e:      * @param display Which column numbers to display, or null to display
1:7b5fc1e:      *                all columns.
1:7b5fc1e:      * @param widths  The widths of the columns specified in 'display', or
1:7b5fc1e:      *                null to display using default column sizes.
1:7b5fc1e:      */
1:16d3334:     public ijMultipleResultSetResult(List<ResultSet> resultSets, int[] display,
1:7b5fc1e:                                      int[] widths) throws SQLException {
1:16d3334:         this.resultSets = new ArrayList<ResultSet>();
1:7b5fc1e:         this.resultSets.addAll(resultSets);
1:7b5fc1e: 
1:7e79830:         displayColumns = ToolUtils.copy( display );
1:7e79830:         columnWidths   = ToolUtils.copy( widths );
2:7b5fc1e:     }
1:7b5fc1e: 
1:7b5fc1e: 
1:7b5fc1e:     public void addResultSet(ResultSet rs){
1:7b5fc1e:         resultSets.add(rs);
1:7b5fc1e:     }
1:7b5fc1e: 
1:7b5fc1e:     public boolean isMultipleResultSetResult(){
1:7b5fc1e:         return true;
1:7b5fc1e:     }
1:7b5fc1e: 
1:16d3334:     public List<ResultSet> getMultipleResultSets() {
1:0d15ddc:         return new ArrayList<ResultSet>(resultSets);
1:7b5fc1e:     }
1:7b5fc1e: 
1:7b5fc1e:     public void closeStatement() throws SQLException {
1:7b5fc1e:         if (resultSets != null) {
1:7b5fc1e:             ResultSet rs = null;
1:7b5fc1e:             for (int i = 0; i<resultSets.size(); i++){
1:16d3334:                 rs = resultSets.get(i);
1:7b5fc1e:                 if(rs.getStatement() != null) rs.getStatement().close();
1:7b5fc1e:                 else rs.close(); 
1:7b5fc1e:             }
1:7b5fc1e:         }
1:7b5fc1e:     }
1:7b5fc1e: 
1:7e79830:     public int[] getColumnDisplayList() { return ToolUtils.copy( displayColumns ); }
1:7e79830:     public int[] getColumnWidthList() { return ToolUtils.copy( columnWidths ); }
1:7b5fc1e: 
1:7b5fc1e:     /**
1:7b5fc1e:      * @return the warnings from all resultsets as one SQLWarning chain
1:7b5fc1e:      */
1:7b5fc1e:     public SQLWarning getSQLWarnings() throws SQLException { 
1:7b5fc1e:         SQLWarning warning = null;
1:7b5fc1e:         ResultSet rs = null;
1:7b5fc1e:         for (int i=0; i<resultSets.size(); i++){
1:16d3334:             rs = resultSets.get(i);
1:7b5fc1e:             if (rs.getWarnings() != null) {
1:7b5fc1e:                 if (warning == null) warning = rs.getWarnings();
1:7b5fc1e:                 else                 warning.setNextWarning(rs.getWarnings());
1:7b5fc1e:             }
1:7b5fc1e:         }
1:7b5fc1e:         return warning;
1:7b5fc1e:     }
1:7b5fc1e:     
1:7b5fc1e:     /**
1:7b5fc1e:      * Clears the warnings in all resultsets
1:7b5fc1e:      */
1:7b5fc1e:     public void clearSQLWarnings() throws SQLException {
1:7b5fc1e:         for (int i=0; i<resultSets.size(); i++){
1:16d3334:             (resultSets.get(i)).clearWarnings();
1:7b5fc1e:         }
1:7b5fc1e:     }
1:7b5fc1e: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0d15ddc
/////////////////////////////////////////////////////////////////////////
1:         return new ArrayList<ResultSet>(resultSets);
commit:92a1cca
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1:     private ArrayList<ResultSet> resultSets = null;
/////////////////////////////////////////////////////////////////////////
1:     public ijMultipleResultSetResult(List<ResultSet> resultSets, int[] display,
1:         this.resultSets = new ArrayList<ResultSet>();
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
1:     public List<ResultSet> getMultipleResultSets() {
0:         return (List<ResultSet>) resultSets.clone();
1:                 rs = resultSets.get(i);
/////////////////////////////////////////////////////////////////////////
1:             rs = resultSets.get(i);
/////////////////////////////////////////////////////////////////////////
1:             (resultSets.get(i)).clearWarnings();
commit:7e79830
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.tools.ToolUtils;
1: 
0:     private ArrayList resultSets = null;
1:     private int[] displayColumns = null;
1:     private int[] columnWidths = null;
/////////////////////////////////////////////////////////////////////////
1:         displayColumns = ToolUtils.copy( display );
1:         columnWidths   = ToolUtils.copy( widths );
/////////////////////////////////////////////////////////////////////////
0:         return (List) resultSets.clone();
/////////////////////////////////////////////////////////////////////////
1:     public int[] getColumnDisplayList() { return ToolUtils.copy( displayColumns ); }
1:     public int[] getColumnWidthList() { return ToolUtils.copy( columnWidths ); }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:7b5fc1e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derby.impl.tools.ij.ijResultSetResult
1: 
1: Licensed to the Apache Software Foundation (ASF) under one
1: or more contributor license agreements.  See the NOTICE file
1: distributed with this work for additional information
1: regarding copyright ownership.  The ASF licenses this file
1: to you under the Apache License, Version 2.0 (the
1: "License"); you may not use this file except in compliance
1: with the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: 
1: /**
1:  * This impl is intended to be used with multiple resultsets, where
1:  * the execution of the statement is already complete.
1:  */
1: public class ijMultipleResultSetResult extends ijResultImpl {
1: 
0:     List resultSets = null;
1: 
0:     int[] displayColumns = null;
0:     int[] columnWidths = null;
1: 
1:     /**
0:      * Create a ijResultImpl that represents multiple result set.
1:      */
0:     public ijMultipleResultSetResult(List resultSets) throws SQLException {
0:         resultSets = new ArrayList();
0:         resultSets.addAll(resultSets);
1:     }
1: 
1:     /**
1:      * Create a ijResultImpl that represents multiple result sets, only
1:      * displaying a subset of the columns, using specified column widths.
1:      * 
1:      * @param resultSets The result sets to display
1:      * @param display Which column numbers to display, or null to display
1:      *                all columns.
1:      * @param widths  The widths of the columns specified in 'display', or
1:      *                null to display using default column sizes.
1:      */
0:     public ijMultipleResultSetResult(List resultSets, int[] display,
1:                                      int[] widths) throws SQLException {
0:         this.resultSets = new ArrayList();
1:         this.resultSets.addAll(resultSets);
1: 
0:         displayColumns = display;
0:         columnWidths   = widths;
1:     }
1: 
1: 
1:     public void addResultSet(ResultSet rs){
1:         resultSets.add(rs);
1:     }
1: 
1:     public boolean isMultipleResultSetResult(){
1:         return true;
1:     }
1: 
0:     public List getMultipleResultSets() {
0:         return resultSets;
1:     }
1: 
1:     public void closeStatement() throws SQLException {
1:         if (resultSets != null) {
1:             ResultSet rs = null;
1:             for (int i = 0; i<resultSets.size(); i++){
0:                 rs = (ResultSet)resultSets.get(i);
1:                 if(rs.getStatement() != null) rs.getStatement().close();
1:                 else rs.close(); 
1:             }
1:         }
1:     }
1: 
0:     public int[] getColumnDisplayList() { return displayColumns; }
0:     public int[] getColumnWidthList() { return columnWidths; }
1: 
1:     /**
1:      * @return the warnings from all resultsets as one SQLWarning chain
1:      */
1:     public SQLWarning getSQLWarnings() throws SQLException { 
1:         SQLWarning warning = null;
1:         ResultSet rs = null;
1:         for (int i=0; i<resultSets.size(); i++){
0:             rs = (ResultSet)resultSets.get(i);
1:             if (rs.getWarnings() != null) {
1:                 if (warning == null) warning = rs.getWarnings();
1:                 else                 warning.setNextWarning(rs.getWarnings());
1:             }
1:         }
1:         return warning;
1:     }
1:     
1:     /**
1:      * Clears the warnings in all resultsets
1:      */
1:     public void clearSQLWarnings() throws SQLException {
1:         for (int i=0; i<resultSets.size(); i++){
0:             ((ResultSet)resultSets.get(i)).clearWarnings();
1:         }
1:     }
1: }
============================================================================