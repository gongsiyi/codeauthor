1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.CopySuppFiles
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:67614ad: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
14:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.io.*;
1:67614ad: import java.util.StringTokenizer;
1:67614ad: 
2:67614ad: /**
1:67614ad:   For tests which require support files.
1:67614ad:   Copy them to the output directory for the test.
1:67614ad:   */
1:67614ad: public class CopySuppFiles
2:67614ad: {
1:67614ad: 
1:67614ad: 	public static void main(String[] args) throws Exception
1:67614ad: 	{
3:67614ad: 	}
1:67614ad: 
1:67614ad: 	public static void copyFiles(File outDir, String suppFiles)
1:67614ad: 	    throws ClassNotFoundException, IOException
1:67614ad: 	{
1:67614ad: 	    // suppFiles is a comma separated list of the files
1:67614ad: 	    StringTokenizer st = new StringTokenizer(suppFiles,",");
1:67614ad: 	    String scriptName = ""; // example: test/math.sql
1:67614ad: 	    InputStream is = null; // To be used for each support file
1:67614ad:         while (st.hasMoreTokens())
1:67614ad:         {
1:67614ad:             scriptName = st.nextToken();
1:67614ad:     	    File suppFile = null;
1:67614ad:     	    String fileName = "";
1:67614ad:     	    // Try to locate the file
1:67614ad:             is = RunTest.loadTestResource(scriptName); 
1:67614ad:     		if ( is == null )
1:67614ad:     			System.out.println("Could not locate: " + scriptName);
1:67614ad:     		else
1:67614ad:     		{
1:67614ad:     		    // Copy the support file so the test can use it
1:67614ad:     			int index = scriptName.lastIndexOf('/');
1:67614ad:     			fileName = scriptName.substring(index+1);
1:67614ad:  //   			suppFile = new File((new File(outDir, fileName)).getCanonicalPath());
1:67614ad: 
1:67614ad: 		//these calls to getCanonicalPath catch IOExceptions as a workaround to
1:67614ad: 		//a bug in the EPOC jvm. 
1:67614ad:     		try {suppFile = new File((new File(outDir, fileName)).getCanonicalPath());}
1:67614ad: 		catch (IOException e) {
1:67614ad: 		    File f = new File(outDir, fileName);
1:67614ad: 		    FileWriter fw = new FileWriter(f);
1:67614ad: 		    fw.close();
1:67614ad: 		    suppFile = new File(f.getCanonicalPath());
1:67614ad: 		}
1:1edcdb3:                 // need to make a guess so we copy text files to local encoding
1:1edcdb3:                 // on non-ascii systems...
1:93e65c7: 		        if ((fileName.indexOf("sql") > 0) || (fileName.indexOf("txt") > 0) || (fileName.indexOf(".view") > 0) || (fileName.indexOf(".policy") > 0) || (fileName.indexOf(".multi") > 0) || (fileName.indexOf(".properties") > 0))
1:1edcdb3:                 {
1:1edcdb3:                     BufferedReader inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
1:1edcdb3:                     PrintWriter pw = new PrintWriter
1:1edcdb3:                        ( new BufferedWriter(new FileWriter(suppFile), 10000), true );
1:1edcdb3:                     int c;
1:1edcdb3:                     while ((c = inFile.read()) != -1)
1:1edcdb3:                         pw.write(c);
1:1edcdb3:                     pw.flush();
1:1edcdb3:                     pw.close();
1:1edcdb3:                 }
1:1edcdb3:                 else
1:1edcdb3:                 {
1:1edcdb3:                     FileOutputStream fos = new FileOutputStream(suppFile);
1:1edcdb3:                     byte[] data = new byte[4096];
1:1edcdb3:                     int len;
1:1edcdb3:                     while ((len = is.read(data)) != -1)
1:1edcdb3:                     {
1:1edcdb3:                         fos.write(data, 0, len);
1:1edcdb3:                     }
1:1edcdb3:                     fos.close();
1:1edcdb3:                 }
1:1edcdb3:     		}
1:67614ad:         }
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:93e65c7
/////////////////////////////////////////////////////////////////////////
1: 		        if ((fileName.indexOf("sql") > 0) || (fileName.indexOf("txt") > 0) || (fileName.indexOf(".view") > 0) || (fileName.indexOf(".policy") > 0) || (fileName.indexOf(".multi") > 0) || (fileName.indexOf(".properties") > 0))
commit:1edcdb3
/////////////////////////////////////////////////////////////////////////
1:                 // need to make a guess so we copy text files to local encoding
1:                 // on non-ascii systems...
0: 		        if ((fileName.indexOf("sql") > 0) || (fileName.indexOf("txt") > 0) || (fileName.indexOf(".view") > 0) || (fileName.indexOf(".policy") > 0))
1:                 {
1:                     BufferedReader inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
1:                     PrintWriter pw = new PrintWriter
1:                        ( new BufferedWriter(new FileWriter(suppFile), 10000), true );
1:                     int c;
1:                     while ((c = inFile.read()) != -1)
1:                         pw.write(c);
1:                     pw.flush();
1:                     pw.close();
1:                 }
1:                 else
1:                 {
1:                     FileOutputStream fos = new FileOutputStream(suppFile);
1:                     byte[] data = new byte[4096];
1:                     int len;
1:                     while ((len = is.read(data)) != -1)
1:                     {
1:                         fos.write(data, 0, len);
1:                     }
1:                     fos.close();
1:                 }
1:     		}
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.io.*;
1: import java.util.StringTokenizer;
1: 
1: /**
1:   For tests which require support files.
1:   Copy them to the output directory for the test.
1:   */
1: public class CopySuppFiles
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	public static void main(String[] args) throws Exception
1: 	{
1: 	}
1: 
1: 	public static void copyFiles(File outDir, String suppFiles)
1: 	    throws ClassNotFoundException, IOException
1: 	{
1: 	    // suppFiles is a comma separated list of the files
1: 	    StringTokenizer st = new StringTokenizer(suppFiles,",");
1: 	    String scriptName = ""; // example: test/math.sql
1: 	    InputStream is = null; // To be used for each support file
1:         while (st.hasMoreTokens())
1:         {
1:             scriptName = st.nextToken();
1:     	    File suppFile = null;
1:     	    String fileName = "";
1:     	    // Try to locate the file
1:             is = RunTest.loadTestResource(scriptName); 
1:     		if ( is == null )
1:     			System.out.println("Could not locate: " + scriptName);
1:     		else
1:     		{
1:     		    // Copy the support file so the test can use it
1:     			int index = scriptName.lastIndexOf('/');
1:     			fileName = scriptName.substring(index+1);
1:  //   			suppFile = new File((new File(outDir, fileName)).getCanonicalPath());
1: 
1: 		//these calls to getCanonicalPath catch IOExceptions as a workaround to
1: 		//a bug in the EPOC jvm. 
1:     		try {suppFile = new File((new File(outDir, fileName)).getCanonicalPath());}
1: 		catch (IOException e) {
1: 		    File f = new File(outDir, fileName);
1: 		    FileWriter fw = new FileWriter(f);
1: 		    fw.close();
1: 		    suppFile = new File(f.getCanonicalPath());
1: 		}
1: 
1: 
0:     			FileOutputStream fos = new FileOutputStream(suppFile);
0:                 byte[] data = new byte[4096];
0:                 int len;
0:     			while ((len = is.read(data)) != -1)
1:     			{
0:     			    fos.write(data, 0, len);
1:     			}
0:     			fos.close();
1: 			}
1:         }
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.CopySuppFiles
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.io.*;
0: import java.util.StringTokenizer;
1: 
0: /**
0:   For tests which require support files.
0:   Copy them to the output directory for the test.
0:   */
0: public class CopySuppFiles
0: {
1: 
0: 	public static void main(String[] args) throws Exception
0: 	{
0: 	}
1: 
0: 	public static void copyFiles(File outDir, String suppFiles)
0: 	    throws ClassNotFoundException, IOException
0: 	{
0: 	    // suppFiles is a comma separated list of the files
0: 	    StringTokenizer st = new StringTokenizer(suppFiles,",");
0: 	    String scriptName = ""; // example: test/math.sql
0: 	    InputStream is = null; // To be used for each support file
0:         while (st.hasMoreTokens())
0:         {
0:             scriptName = st.nextToken();
0:     	    File suppFile = null;
0:     	    String fileName = "";
0:     	    // Try to locate the file
0:             is = RunTest.loadTestResource(scriptName); 
0:     		if ( is == null )
0:     			System.out.println("Could not locate: " + scriptName);
0:     		else
0:     		{
0:     		    // Copy the support file so the test can use it
0:     			int index = scriptName.lastIndexOf('/');
0:     			fileName = scriptName.substring(index+1);
0:  //   			suppFile = new File((new File(outDir, fileName)).getCanonicalPath());
1: 
0: 		//these calls to getCanonicalPath catch IOExceptions as a workaround to
0: 		//a bug in the EPOC jvm. 
0:     		try {suppFile = new File((new File(outDir, fileName)).getCanonicalPath());}
0: 		catch (IOException e) {
0: 		    File f = new File(outDir, fileName);
0: 		    FileWriter fw = new FileWriter(f);
0: 		    fw.close();
0: 		    suppFile = new File(f.getCanonicalPath());
0: 		}
1: 
1: 
0:     			FileOutputStream fos = new FileOutputStream(suppFile);
0:                 byte[] data = new byte[4096];
0:                 int len;
0:     			while ((len = is.read(data)) != -1)
0:     			{
0:     			    fos.write(data, 0, len);
0:     			}
0:     			fos.close();
0: 			}
0:         }
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.CopySuppFiles
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================