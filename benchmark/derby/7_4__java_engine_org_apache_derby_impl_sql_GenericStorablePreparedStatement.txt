1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.GenericStorablePreparedStatement
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.sql.PreparedStatement;
1:eac0369: import org.apache.derby.iapi.sql.Statement;
1:eac0369: import org.apache.derby.iapi.sql.StorablePreparedStatement;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedClass;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:a0dbbd7: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:eac0369: import java.sql.Timestamp;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedClass;
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
2:eac0369: /**
1:eac0369:  * Prepared statement that can be made persistent.
1:eac0369:  */
1:eac0369: public class GenericStorablePreparedStatement
1:eac0369: 	extends GenericPreparedStatement implements Formatable, StorablePreparedStatement
1:eac0369: {
1:eac0369: 
1:eac0369: 	// formatable
1:eac0369: 	private ByteArray 		byteCode;
1:eac0369: 	private String 			className;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor, for formatable
1:eac0369: 	 * only.
1:eac0369: 	 */
1:eac0369: 	public GenericStorablePreparedStatement()
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	GenericStorablePreparedStatement(Statement stmt)
1:eac0369: 	{
1:eac0369: 		super(stmt);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get our byte code array.  Used
1:eac0369: 	 * by others to save off our byte
1:eac0369: 	 * code for us.
2:eac0369: 	 *
1:eac0369: 	 * @return the byte code saver
1:eac0369: 	 */
1:eac0369: 	ByteArray getByteCodeSaver()
1:eac0369: 	{
1:eac0369: 		if (byteCode == null) {
1:eac0369: 			byteCode = new ByteArray();
1:eac0369: 		}
1:eac0369: 		return byteCode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get and load the activation class.  Will always
1:eac0369: 	 * return a loaded/valid class or null if the class
1:eac0369: 	 * cannot be loaded.  
1:eac0369: 	 *
1:eac0369: 	 * @return the generated class, or null if the
1:eac0369: 	 *		class cannot be loaded 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public GeneratedClass getActivationClass()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (activationClass == null)
1:eac0369: 			loadGeneratedClass();
1:eac0369: 
1:eac0369: 		return activationClass;
1:eac0369: 	}
1:eac0369: 
1:d387dac: 	void setActivationClass(GeneratedClass ac) {
1:eac0369: 
1:eac0369: 		super.setActivationClass(ac);
1:eac0369: 		if (ac != null) {
1:eac0369: 			className = ac.getName();
1:eac0369: 
1:eac0369: 			// see if this is an pre-compiled class
1:eac0369: 			if (byteCode != null && byteCode.getArray() == null)
1:eac0369: 				byteCode = null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// STORABLEPREPAREDSTATEMENT INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Load up the class from the saved bytes.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public void loadGeneratedClass()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		LanguageConnectionContext lcc =
1:a0dbbd7: 			(LanguageConnectionContext) getContext
1:eac0369: 				                                  (LanguageConnectionContext.CONTEXT_ID);
1:eac0369: 		ClassFactory classFactory = lcc.getLanguageConnectionFactory().getClassFactory();
1:eac0369: 
1:eac0369: 		GeneratedClass gc = classFactory.loadGeneratedClass(className, byteCode);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** No special try catch logic to write out bad classes
1:eac0369: 		** here.  We don't expect any problems, and in any 
1:eac0369: 		** event, we don't have the class builder available
1:eac0369: 		** here.
1:eac0369: 		*/
1:eac0369: 		setActivationClass(gc);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// EXTERNALIZABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/** 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeObject(getCursorInfo());
1:eac0369: 		out.writeBoolean(needsSavepoint());
1:eac0369: 		out.writeBoolean(isAtomic);
1:eac0369: 		out.writeObject(executionConstants);
1:eac0369: 		out.writeObject(resultDesc);
1:eac0369: 
1:eac0369: 		// savedObjects may be null
1:eac0369: 		if (savedObjects == null)
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(false);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{	
1:eac0369: 			out.writeBoolean(true);
1:eac0369: 			ArrayUtil.writeArrayLength(out, savedObjects);
1:eac0369: 			ArrayUtil.writeArrayItems(out, savedObjects);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Write out the class name and byte code
1:eac0369: 		** if we have them.  They might be null if
1:eac0369: 		** we don't want to write out the plan, and
1:eac0369: 		** would prefer it just write out null (e.g.
1:eac0369: 		** we know the plan is invalid).
1:eac0369: 		*/
1:eac0369: 		out.writeObject(className);
1:eac0369: 		out.writeBoolean(byteCode != null);
1:eac0369: 		if (byteCode != null)
1:eac0369: 		    byteCode.writeExternal(out);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	 
1:eac0369: 	/** 
1:eac0369: 	 * @see java.io.Externalizable#readExternal 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 * @exception ClassNotFoundException on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		setCursorInfo((CursorInfo)in.readObject());
1:eac0369: 		setNeedsSavepoint(in.readBoolean());
1:eac0369: 		isAtomic = (in.readBoolean());
1:eac0369: 		executionConstants = (ConstantAction) in.readObject();
1:eac0369: 		resultDesc = (ResultDescription) in.readObject();
1:eac0369: 
1:eac0369: 		if (in.readBoolean())
1:eac0369: 		{
1:eac0369: 			savedObjects = new Object[ArrayUtil.readArrayLength(in)];
1:eac0369: 			ArrayUtil.readArrayItems(in, savedObjects);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		className = (String)in.readObject();
1:eac0369: 		if (in.readBoolean()) {
1:eac0369: 			byteCode = new ByteArray();
1:eac0369: 			byteCode.readExternal(in);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			byteCode = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// FORMATABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int getTypeFormatId()	{ return StoredFormatIds.STORABLE_PREPARED_STATEMENT_V01_ID; }
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// MISC
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	public boolean isStorable() {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String acn;
1:eac0369: 			if (activationClass ==null)
1:eac0369: 				acn = "null";
1:eac0369: 			else
1:eac0369: 				acn = activationClass.getName();
1:eac0369: 
1:eac0369:  			return "GSPS " + System.identityHashCode(this) + " activationClassName="+acn+" className="+className;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	} 
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContext( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContext( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContext( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 			(LanguageConnectionContext) getContext
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContext( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContext( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContext( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d387dac
/////////////////////////////////////////////////////////////////////////
1: 	void setActivationClass(GeneratedClass ac) {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.GenericStorablePreparedStatement
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.PreparedStatement;
1: import org.apache.derby.iapi.sql.Statement;
1: import org.apache.derby.iapi.sql.StorablePreparedStatement;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedClass;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.context.ContextService;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import java.sql.Timestamp;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.loader.GeneratedClass;
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: /**
1:  * Prepared statement that can be made persistent.
0:  * @author jamie
1:  */
1: public class GenericStorablePreparedStatement
1: 	extends GenericPreparedStatement implements Formatable, StorablePreparedStatement
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	// formatable
1: 	private ByteArray 		byteCode;
1: 	private String 			className;
1: 
1: 	/**
1: 	 * Niladic constructor, for formatable
1: 	 * only.
1: 	 */
1: 	public GenericStorablePreparedStatement()
1: 	{
1: 		super();
1: 	}
1: 
1: 	GenericStorablePreparedStatement(Statement stmt)
1: 	{
1: 		super(stmt);
1: 	}
1: 
1: 	/**
1: 	 * Get our byte code array.  Used
1: 	 * by others to save off our byte
1: 	 * code for us.
1: 	 *
1: 	 * @return the byte code saver
1: 	 */
1: 	ByteArray getByteCodeSaver()
1: 	{
1: 		if (byteCode == null) {
1: 			byteCode = new ByteArray();
1: 		}
1: 		return byteCode;
1: 	}
1: 
1: 	/**
1: 	 * Get and load the activation class.  Will always
1: 	 * return a loaded/valid class or null if the class
1: 	 * cannot be loaded.  
1: 	 *
1: 	 * @return the generated class, or null if the
1: 	 *		class cannot be loaded 
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public GeneratedClass getActivationClass()
1: 		throws StandardException
1: 	{
1: 		if (activationClass == null)
1: 			loadGeneratedClass();
1: 
1: 		return activationClass;
1: 	}
1: 
0: 	public void setActivationClass(GeneratedClass ac) {
1: 
1: 		super.setActivationClass(ac);
1: 		if (ac != null) {
1: 			className = ac.getName();
1: 
1: 			// see if this is an pre-compiled class
1: 			if (byteCode != null && byteCode.getArray() == null)
1: 				byteCode = null;
1: 		}
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// STORABLEPREPAREDSTATEMENT INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Load up the class from the saved bytes.
1: 	 *
0: 	 * @return the generated class, or null if we
0: 	 *	 don't have the byte code
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public void loadGeneratedClass()
1: 		throws StandardException
1: 	{
1: 		LanguageConnectionContext lcc =
0: 			(LanguageConnectionContext) ContextService.getContext
1: 				                                  (LanguageConnectionContext.CONTEXT_ID);
1: 		ClassFactory classFactory = lcc.getLanguageConnectionFactory().getClassFactory();
1: 
1: 		GeneratedClass gc = classFactory.loadGeneratedClass(className, byteCode);
1: 
1: 		/*
1: 		** No special try catch logic to write out bad classes
1: 		** here.  We don't expect any problems, and in any 
1: 		** event, we don't have the class builder available
1: 		** here.
1: 		*/
1: 		setActivationClass(gc);
1: 	}
1: 
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// EXTERNALIZABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/** 
1: 	 *
1: 	 * @exception IOException on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeObject(getCursorInfo());
1: 		out.writeBoolean(needsSavepoint());
1: 		out.writeBoolean(isAtomic);
1: 		out.writeObject(executionConstants);
1: 		out.writeObject(resultDesc);
1: 
1: 		// savedObjects may be null
1: 		if (savedObjects == null)
1: 		{
1: 			out.writeBoolean(false);
1: 		}
1: 		else
1: 		{	
1: 			out.writeBoolean(true);
1: 			ArrayUtil.writeArrayLength(out, savedObjects);
1: 			ArrayUtil.writeArrayItems(out, savedObjects);
1: 		}
1: 
1: 		/*
1: 		** Write out the class name and byte code
1: 		** if we have them.  They might be null if
1: 		** we don't want to write out the plan, and
1: 		** would prefer it just write out null (e.g.
1: 		** we know the plan is invalid).
1: 		*/
1: 		out.writeObject(className);
1: 		out.writeBoolean(byteCode != null);
1: 		if (byteCode != null)
1: 		    byteCode.writeExternal(out);
1: 	}
1: 
1: 	 
1: 	/** 
1: 	 * @see java.io.Externalizable#readExternal 
1: 	 *
1: 	 * @exception IOException on error
1: 	 * @exception ClassNotFoundException on error
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		setCursorInfo((CursorInfo)in.readObject());
1: 		setNeedsSavepoint(in.readBoolean());
1: 		isAtomic = (in.readBoolean());
1: 		executionConstants = (ConstantAction) in.readObject();
1: 		resultDesc = (ResultDescription) in.readObject();
1: 
1: 		if (in.readBoolean())
1: 		{
1: 			savedObjects = new Object[ArrayUtil.readArrayLength(in)];
1: 			ArrayUtil.readArrayItems(in, savedObjects);
1: 		}
1: 
1: 		className = (String)in.readObject();
1: 		if (in.readBoolean()) {
1: 			byteCode = new ByteArray();
1: 			byteCode.readExternal(in);
1: 		}
1: 		else
1: 			byteCode = null;
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// FORMATABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int getTypeFormatId()	{ return StoredFormatIds.STORABLE_PREPARED_STATEMENT_V01_ID; }
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// MISC
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	public boolean isStorable() {
1: 		return true;
1: 	}
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String acn;
1: 			if (activationClass ==null)
1: 				acn = "null";
1: 			else
1: 				acn = activationClass.getName();
1: 
1:  			return "GSPS " + System.identityHashCode(this) + " activationClassName="+acn+" className="+className;
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	} 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.services.monitor.ModuleFactory;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.PreparedStatement;
0: import org.apache.derby.iapi.sql.Statement;
0: import org.apache.derby.iapi.sql.StorablePreparedStatement;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedClass;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.context.ContextService;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import java.sql.Timestamp;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.loader.GeneratedClass;
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: /**
0:  * Prepared statement that can be made persistent.
0:  * @author jamie
0:  */
0: public class GenericStorablePreparedStatement
0: 	extends GenericPreparedStatement implements Formatable, StorablePreparedStatement
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	// formatable
0: 	private ByteArray 		byteCode;
0: 	private String 			className;
0: 
0: 	/**
0: 	 * Niladic constructor, for formatable
0: 	 * only.
0: 	 */
0: 	public GenericStorablePreparedStatement()
0: 	{
0: 		super();
0: 	}
0: 
0: 	GenericStorablePreparedStatement(Statement stmt)
0: 	{
0: 		super(stmt);
0: 	}
0: 
0: 	/**
0: 	 * Get our byte code array.  Used
0: 	 * by others to save off our byte
0: 	 * code for us.
0: 	 *
0: 	 * @return the byte code saver
0: 	 */
0: 	ByteArray getByteCodeSaver()
0: 	{
0: 		if (byteCode == null) {
0: 			byteCode = new ByteArray();
0: 		}
0: 		return byteCode;
0: 	}
0: 
0: 	/**
0: 	 * Get and load the activation class.  Will always
0: 	 * return a loaded/valid class or null if the class
0: 	 * cannot be loaded.  
0: 	 *
0: 	 * @return the generated class, or null if the
0: 	 *		class cannot be loaded 
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public GeneratedClass getActivationClass()
0: 		throws StandardException
0: 	{
0: 		if (activationClass == null)
0: 			loadGeneratedClass();
0: 
0: 		return activationClass;
0: 	}
0: 
0: 	public void setActivationClass(GeneratedClass ac) {
0: 
0: 		super.setActivationClass(ac);
0: 		if (ac != null) {
0: 			className = ac.getName();
0: 
0: 			// see if this is an pre-compiled class
0: 			if (byteCode != null && byteCode.getArray() == null)
0: 				byteCode = null;
0: 		}
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// STORABLEPREPAREDSTATEMENT INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Load up the class from the saved bytes.
0: 	 *
0: 	 * @return the generated class, or null if we
0: 	 *	 don't have the byte code
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public void loadGeneratedClass()
0: 		throws StandardException
0: 	{
0: 		LanguageConnectionContext lcc =
0: 			(LanguageConnectionContext) ContextService.getContext
0: 				                                  (LanguageConnectionContext.CONTEXT_ID);
0: 		ClassFactory classFactory = lcc.getLanguageConnectionFactory().getClassFactory();
0: 
0: 		GeneratedClass gc = classFactory.loadGeneratedClass(className, byteCode);
0: 
0: 		/*
0: 		** No special try catch logic to write out bad classes
0: 		** here.  We don't expect any problems, and in any 
0: 		** event, we don't have the class builder available
0: 		** here.
0: 		*/
0: 		setActivationClass(gc);
0: 	}
0: 
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// EXTERNALIZABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/** 
0: 	 *
0: 	 * @exception IOException on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeObject(getCursorInfo());
0: 		out.writeBoolean(needsSavepoint());
0: 		out.writeBoolean(isAtomic);
0: 		out.writeObject(executionConstants);
0: 		out.writeObject(resultDesc);
0: 
0: 		// savedObjects may be null
0: 		if (savedObjects == null)
0: 		{
0: 			out.writeBoolean(false);
0: 		}
0: 		else
0: 		{	
0: 			out.writeBoolean(true);
0: 			ArrayUtil.writeArrayLength(out, savedObjects);
0: 			ArrayUtil.writeArrayItems(out, savedObjects);
0: 		}
0: 
0: 		/*
0: 		** Write out the class name and byte code
0: 		** if we have them.  They might be null if
0: 		** we don't want to write out the plan, and
0: 		** would prefer it just write out null (e.g.
0: 		** we know the plan is invalid).
0: 		*/
0: 		out.writeObject(className);
0: 		out.writeBoolean(byteCode != null);
0: 		if (byteCode != null)
0: 		    byteCode.writeExternal(out);
0: 	}
0: 
0: 	 
0: 	/** 
0: 	 * @see java.io.Externalizable#readExternal 
0: 	 *
0: 	 * @exception IOException on error
0: 	 * @exception ClassNotFoundException on error
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		setCursorInfo((CursorInfo)in.readObject());
0: 		setNeedsSavepoint(in.readBoolean());
0: 		isAtomic = (in.readBoolean());
0: 		executionConstants = (ConstantAction) in.readObject();
0: 		resultDesc = (ResultDescription) in.readObject();
0: 
0: 		if (in.readBoolean())
0: 		{
0: 			savedObjects = new Object[ArrayUtil.readArrayLength(in)];
0: 			ArrayUtil.readArrayItems(in, savedObjects);
0: 		}
0: 
0: 		className = (String)in.readObject();
0: 		if (in.readBoolean()) {
0: 			byteCode = new ByteArray();
0: 			byteCode.readExternal(in);
0: 		}
0: 		else
0: 			byteCode = null;
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// FORMATABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.STORABLE_PREPARED_STATEMENT_V01_ID; }
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// MISC
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	public boolean isStorable() {
0: 		return true;
0: 	}
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String acn;
0: 			if (activationClass ==null)
0: 				acn = "null";
0: 			else
0: 				acn = activationClass.getName();
0: 
0:  			return "GSPS " + System.identityHashCode(this) + " activationClassName="+acn+" className="+className;
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	} 
0: }
============================================================================