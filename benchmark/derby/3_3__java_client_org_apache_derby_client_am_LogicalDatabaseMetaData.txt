1:ef81d0e: /*
1:ef81d0e: 
1:ef81d0e:    Derby - Class org.apache.derby.client.am.LogicalDatabaseMetaData
1:ef81d0e: 
1:ef81d0e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ef81d0e:    contributor license agreements.  See the NOTICE file distributed with
1:ef81d0e:    this work for additional information regarding copyright ownership.
1:ef81d0e:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ef81d0e:    (the "License"); you may not use this file except in compliance with
1:ef81d0e:    the License.  You may obtain a copy of the License at
1:ef81d0e: 
1:ef81d0e:       http://www.apache.org/licenses/LICENSE-2.0
1:ef81d0e: 
1:ef81d0e:    Unless required by applicable law or agreed to in writing, software
1:ef81d0e:    distributed under the License is distributed on an "AS IS" BASIS,
1:ef81d0e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef81d0e:    See the License for the specific language governing permissions and
1:ef81d0e:    limitations under the License.
1:ef81d0e: 
1:ef81d0e:  */
1:ef81d0e: package org.apache.derby.client.am;
1:ef81d0e: 
1:69e3d06: import java.sql.Connection;
1:69e3d06: import java.sql.DatabaseMetaData;
1:69e3d06: import java.sql.ResultSet;
1:9a0cdf1: import java.sql.RowIdLifetime;
1:ef81d0e: import java.sql.SQLException;
1:9a0cdf1: import org.apache.derby.shared.common.reference.SQLState;
1:ef81d0e: 
1:ef81d0e: /**
1:ef81d0e:  * A metadata object to be used with logical connections when connection
1:ef81d0e:  * pooling is being used.
1:ef81d0e:  * <p>
1:ef81d0e:  * The purpose of this object is to make sure references to the underlying
1:ef81d0e:  * physical connection don't leak to the client / user, and to make the
1:ef81d0e:  * lifetime of the metadata object equal to the logical connection instead
1:ef81d0e:  * of the underlying physical connection.
1:ef81d0e:  */
1:0326967: class LogicalDatabaseMetaData implements DatabaseMetaData {
1:ef81d0e: 
1:ef81d0e:     /** The associated logical connection. */
1:ef81d0e:     private final LogicalConnection logicalCon;
1:ef81d0e:     /** Error message destination, if any. */
1:9a0cdf1:     private final LogWriter logWriter;
1:ef81d0e:     /** Cached value for the driver major version. */
1:ef81d0e:     private final int driverMajorVersion;
1:ef81d0e:     /** Cached value for the driver minor version. */
1:ef81d0e:     private final int driverMinorVersion;
1:ef81d0e: 
1:ef81d0e:     /**
1:ef81d0e:      * Creates a new logical database metadata object.
1:ef81d0e:      *
1:ef81d0e:      * @param logicalCon the associated logical connection
1:ef81d0e:      * @param logWriter destination for log/error messages
1:ef81d0e:      * @throws SQLException if obtaining the JDBC driver versions fail
1:ef81d0e:      */
1:0326967:     LogicalDatabaseMetaData(LogicalConnection logicalCon,
1:0326967:                             LogWriter logWriter)
7:ef81d0e:             throws SQLException {
1:ef81d0e:         this.logicalCon = logicalCon;
1:ef81d0e:         this.logWriter = logWriter;
1:ef81d0e:         // Implementation note: Cache values, as these two methods are not
1:ef81d0e:         // allowed to throw SQLException.
1:ef81d0e:         this.driverMajorVersion =
1:ef81d0e:                 logicalCon.getRealMetaDataObject().getDriverMajorVersion();
1:ef81d0e:         this.driverMinorVersion =
1:ef81d0e:                 logicalCon.getRealMetaDataObject().getDriverMinorVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     /**
1:ef81d0e:      * Returns the real metadata object if appropriate.
1:ef81d0e:      * <p>
1:ef81d0e:      * This is just a convenience wrapper method.
1:ef81d0e:      *
1:ef81d0e:      * @return Metadata object from the underlying physical connection.
1:ef81d0e:      * @throws SQLException if the logical connection has been closed, or
1:ef81d0e:      *      obtaining the metadata object fails
1:ef81d0e:      */
1:69e3d06:     final DatabaseMetaData getRealMetaDataObject()
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return this.logicalCon.getRealMetaDataObject();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean allProceduresAreCallable() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().allProceduresAreCallable();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean allTablesAreSelectable() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().allTablesAreSelectable();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getURL() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getURL();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getUserName() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getUserName();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean isReadOnly() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().isReadOnly();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean nullsAreSortedHigh() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().nullsAreSortedHigh();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean nullsAreSortedLow() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().nullsAreSortedLow();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean nullsAreSortedAtStart() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().nullsAreSortedAtStart();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean nullsAreSortedAtEnd() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().nullsAreSortedAtEnd();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getDatabaseProductName() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDatabaseProductName();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getDatabaseProductVersion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDatabaseProductVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getDriverName() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDriverName();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getDriverVersion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDriverVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getDriverMajorVersion() {
1:ef81d0e:         return this.driverMajorVersion;
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getDriverMinorVersion() {
1:ef81d0e:         return this.driverMinorVersion;
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean usesLocalFiles() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().usesLocalFiles();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean usesLocalFilePerTable() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().usesLocalFilePerTable();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsMixedCaseIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsMixedCaseIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean storesUpperCaseIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().storesUpperCaseIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean storesLowerCaseIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().storesLowerCaseIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean storesMixedCaseIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().storesMixedCaseIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsMixedCaseQuotedIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().storesUpperCaseQuotedIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().storesLowerCaseQuotedIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().storesMixedCaseQuotedIdentifiers();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getIdentifierQuoteString() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getIdentifierQuoteString();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getSQLKeywords() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSQLKeywords();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getNumericFunctions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getNumericFunctions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getStringFunctions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getStringFunctions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getSystemFunctions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSystemFunctions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getTimeDateFunctions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getTimeDateFunctions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getSearchStringEscape() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSearchStringEscape();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getExtraNameCharacters() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getExtraNameCharacters();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsAlterTableWithAddColumn() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsAlterTableWithAddColumn();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsAlterTableWithDropColumn() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsAlterTableWithDropColumn();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsColumnAliasing() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsColumnAliasing();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean nullPlusNonNullIsNull() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().nullPlusNonNullIsNull();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsConvert() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsConvert();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsConvert(int fromType, int toType)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsConvert(fromType, toType);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsTableCorrelationNames() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsTableCorrelationNames();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsDifferentTableCorrelationNames()
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsDifferentTableCorrelationNames();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsExpressionsInOrderBy() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsExpressionsInOrderBy();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsOrderByUnrelated() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsOrderByUnrelated();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsGroupBy() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsGroupBy();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsGroupByUnrelated() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsGroupByUnrelated();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsGroupByBeyondSelect() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsGroupByBeyondSelect();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsLikeEscapeClause() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsLikeEscapeClause();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsMultipleResultSets() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsMultipleResultSets();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsMultipleTransactions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsMultipleTransactions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsNonNullableColumns() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsNonNullableColumns();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsMinimumSQLGrammar() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsMinimumSQLGrammar();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCoreSQLGrammar() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCoreSQLGrammar();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsExtendedSQLGrammar() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsExtendedSQLGrammar();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsANSI92EntryLevelSQL() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsANSI92EntryLevelSQL();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsANSI92IntermediateSQL() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsANSI92IntermediateSQL();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsANSI92FullSQL() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsANSI92FullSQL();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsIntegrityEnhancementFacility() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsIntegrityEnhancementFacility();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsOuterJoins() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsOuterJoins();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsFullOuterJoins() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsFullOuterJoins();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsLimitedOuterJoins() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsLimitedOuterJoins();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getSchemaTerm() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSchemaTerm();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getProcedureTerm() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getProcedureTerm();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getCatalogTerm() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getCatalogTerm();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean isCatalogAtStart() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().isCatalogAtStart();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public String getCatalogSeparator() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getCatalogSeparator();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSchemasInDataManipulation() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSchemasInDataManipulation();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSchemasInProcedureCalls() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSchemasInProcedureCalls();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSchemasInTableDefinitions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSchemasInTableDefinitions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSchemasInIndexDefinitions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSchemasInIndexDefinitions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSchemasInPrivilegeDefinitions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCatalogsInDataManipulation() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCatalogsInDataManipulation();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCatalogsInProcedureCalls() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCatalogsInProcedureCalls();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCatalogsInTableDefinitions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCatalogsInTableDefinitions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCatalogsInIndexDefinitions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCatalogsInIndexDefinitions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCatalogsInPrivilegeDefinitions()
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCatalogsInPrivilegeDefinitions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsPositionedDelete() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsPositionedDelete();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsPositionedUpdate() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsPositionedUpdate();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSelectForUpdate() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSelectForUpdate();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsStoredProcedures() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsStoredProcedures();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSubqueriesInComparisons() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSubqueriesInComparisons();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSubqueriesInExists() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSubqueriesInExists();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSubqueriesInIns() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSubqueriesInIns();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSubqueriesInQuantifieds() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSubqueriesInQuantifieds();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsCorrelatedSubqueries() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsCorrelatedSubqueries();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsUnion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsUnion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsUnionAll() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsUnionAll();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsOpenCursorsAcrossCommit() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsOpenCursorsAcrossCommit();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsOpenCursorsAcrossRollback() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsOpenCursorsAcrossRollback();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsOpenStatementsAcrossCommit() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsOpenStatementsAcrossCommit();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsOpenStatementsAcrossRollback() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsOpenStatementsAcrossRollback();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxBinaryLiteralLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxBinaryLiteralLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxCharLiteralLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxCharLiteralLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxColumnNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxColumnNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxColumnsInGroupBy() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxColumnsInGroupBy();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxColumnsInIndex() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxColumnsInIndex();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxColumnsInOrderBy() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxColumnsInOrderBy();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxColumnsInSelect() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxColumnsInSelect();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxColumnsInTable() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxColumnsInTable();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxConnections() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxConnections();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxCursorNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxCursorNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxIndexLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxIndexLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxSchemaNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxSchemaNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxProcedureNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxProcedureNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxCatalogNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxCatalogNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxRowSize() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxRowSize();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean doesMaxRowSizeIncludeBlobs() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().doesMaxRowSizeIncludeBlobs();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxStatementLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxStatementLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxStatements() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxStatements();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxTableNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxTableNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxTablesInSelect() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxTablesInSelect();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getMaxUserNameLength() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getMaxUserNameLength();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getDefaultTransactionIsolation() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDefaultTransactionIsolation();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsTransactions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsTransactions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsTransactionIsolationLevel(int level)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsTransactionIsolationLevel(level);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsDataDefinitionAndDataManipulationTransactions()
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().
1:ef81d0e:                 supportsDataDefinitionAndDataManipulationTransactions();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsDataManipulationTransactionsOnly()
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().
1:ef81d0e:                 supportsDataManipulationTransactionsOnly();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean dataDefinitionCausesTransactionCommit() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().dataDefinitionCausesTransactionCommit();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean dataDefinitionIgnoredInTransactions() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().dataDefinitionIgnoredInTransactions();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getProcedures(
1:ef81d0e:             String catalog, String schemaPattern, String procedureNamePattern)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getProcedures(
1:ef81d0e:                 catalog, schemaPattern, procedureNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getProcedureColumns(
1:b13b17c:             String catalog,
1:b13b17c:             String schemaPattern,
1:b13b17c:             String procedureNamePattern,
1:b13b17c:             String columnNamePattern) throws SQLException {
1:b13b17c: 
1:ef81d0e:         return getRealMetaDataObject().getProcedureColumns(catalog,
1:ef81d0e:                 schemaPattern, procedureNamePattern, columnNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getTables(String catalog, String schemaPattern,
1:ef81d0e:             String tableNamePattern, String[] types)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getTables(
1:ef81d0e:                 catalog, schemaPattern, tableNamePattern, types);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getSchemas() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSchemas();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getCatalogs() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getCatalogs();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getTableTypes() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getTableTypes();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getColumns(String catalog, String schemaPattern,
1:ef81d0e:             String tableNamePattern, String columnNamePattern)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getColumns(
1:ef81d0e:                 catalog, schemaPattern, tableNamePattern, columnNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getColumnPrivileges(String catalog, String schema,
1:ef81d0e:             String table, String columnNamePattern)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getColumnPrivileges(
1:ef81d0e:                 catalog, schema, table, columnNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getTablePrivileges(
1:b13b17c:             String catalog,
1:b13b17c:             String schemaPattern,
1:b13b17c:             String tableNamePattern) throws SQLException {
1:b13b17c: 
1:ef81d0e:         return getRealMetaDataObject().getTablePrivileges(
1:ef81d0e:                 catalog, schemaPattern, tableNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getBestRowIdentifier(
1:b13b17c:             String catalog,
1:b13b17c:             String schema,
1:b13b17c:             String table,
1:b13b17c:             int scope,
1:b13b17c:             boolean nullable) throws SQLException {
1:b13b17c: 
1:ef81d0e:         return getRealMetaDataObject().getBestRowIdentifier(
1:ef81d0e:                 catalog, schema, table, scope, nullable);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getVersionColumns(
1:ef81d0e:             String catalog, String schema, String table)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getVersionColumns(
1:ef81d0e:                 catalog, schema, table);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getPrimaryKeys(
1:b13b17c:             String catalog,
1:b13b17c:             String schema,
1:b13b17c:             String table) throws SQLException {
1:b13b17c: 
1:ef81d0e:         return getRealMetaDataObject().getPrimaryKeys(catalog, schema, table);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getImportedKeys(
1:ef81d0e:             String catalog, String schema, String table)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getImportedKeys(catalog, schema, table);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getExportedKeys(
1:ef81d0e:             String catalog, String schema, String table)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getExportedKeys(catalog, schema, table);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getCrossReference(String parentCatalog,
1:ef81d0e:             String parentSchema, String parentTable, String foreignCatalog,
1:ef81d0e:             String foreignSchema, String foreignTable)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getCrossReference(
1:ef81d0e:                 parentCatalog, parentSchema, parentTable, foreignCatalog,
1:ef81d0e:                 foreignSchema, foreignTable);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getTypeInfo() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getTypeInfo();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getIndexInfo(
1:b13b17c:             String catalog,
1:b13b17c:             String schema,
1:b13b17c:             String table,
1:b13b17c:             boolean unique,
1:b13b17c:             boolean approximate) throws SQLException {
1:b13b17c: 
1:ef81d0e:         return getRealMetaDataObject().getIndexInfo(
1:ef81d0e:                 catalog, schema, table, unique, approximate);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsResultSetType(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsResultSetType(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsResultSetConcurrency(int type, int concurrency)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsResultSetConcurrency(
1:ef81d0e:                 type, concurrency);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean ownUpdatesAreVisible(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().ownUpdatesAreVisible(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean ownDeletesAreVisible(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().ownDeletesAreVisible(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean ownInsertsAreVisible(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().ownInsertsAreVisible(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean othersUpdatesAreVisible(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().othersUpdatesAreVisible(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean othersDeletesAreVisible(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().othersDeletesAreVisible(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean othersInsertsAreVisible(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().othersInsertsAreVisible(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean updatesAreDetected(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().updatesAreDetected(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean deletesAreDetected(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().deletesAreDetected(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean insertsAreDetected(int type) throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().insertsAreDetected(type);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsBatchUpdates() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsBatchUpdates();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getUDTs(String catalog, String schemaPattern,
1:ef81d0e:             String typeNamePattern, int[] types)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getUDTs(
1:ef81d0e:                 catalog, schemaPattern, typeNamePattern, types);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public Connection getConnection() throws SQLException {
1:ef81d0e:         getRealMetaDataObject(); // Just check if the connection is still open.
1:ef81d0e:         return this.logicalCon;
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsSavepoints() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsSavepoints();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsNamedParameters() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsNamedParameters();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsMultipleOpenResults() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsMultipleOpenResults();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsGetGeneratedKeys() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsGetGeneratedKeys();
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getSuperTypes(
1:ef81d0e:             String catalog, String schemaPattern, String typeNamePattern)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSuperTypes(
1:ef81d0e:                 catalog, schemaPattern, typeNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getSuperTables(
1:ef81d0e:             String catalog, String schemaPattern, String tableNamePattern)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSuperTables(
1:ef81d0e:                 catalog, schemaPattern, tableNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:69e3d06:     public ResultSet getAttributes(
1:b13b17c:             String catalog,
1:b13b17c:             String schemaPattern,
1:b13b17c:             String typeNamePattern,
1:b13b17c:             String attributeNamePattern) throws SQLException {
1:b13b17c: 
1:ef81d0e:         return getRealMetaDataObject().getAttributes(
1:ef81d0e:                 catalog, schemaPattern, typeNamePattern, attributeNamePattern);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsResultSetHoldability(int holdability)
1:ef81d0e:             throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsResultSetHoldability(
1:ef81d0e:                 holdability);
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getResultSetHoldability() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getResultSetHoldability();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getDatabaseMajorVersion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDatabaseMajorVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getDatabaseMinorVersion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getDatabaseMinorVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getJDBCMajorVersion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getJDBCMajorVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getJDBCMinorVersion() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getJDBCMinorVersion();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public int getSQLStateType() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().getSQLStateType();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean locatorsUpdateCopy() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().locatorsUpdateCopy();
1:ef81d0e:     }
1:ef81d0e: 
1:ef81d0e:     public boolean supportsStatementPooling() throws SQLException {
1:ef81d0e:         return getRealMetaDataObject().supportsStatementPooling();
1:ef81d0e:     }
1:9a0cdf1: 
1:9a0cdf1:     // JDBC 4.0 methods
1:9a0cdf1: 
1:9a0cdf1:     public boolean autoCommitFailureClosesAllResultSets()
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getRealMetaDataObject().autoCommitFailureClosesAllResultSets();
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public ResultSet getClientInfoProperties()
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getRealMetaDataObject().getClientInfoProperties();
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public ResultSet getFunctions(String catalog, String schemaPattern,
1:9a0cdf1:                                   String functionNamePattern)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getRealMetaDataObject().getFunctions(
1:9a0cdf1:                 catalog, schemaPattern, functionNamePattern);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public ResultSet getFunctionColumns(
1:9a0cdf1:             String catalog, String schemaPattern,
1:9a0cdf1:             String functionNamePattern,
1:9a0cdf1:             String columnNamePattern) throws SQLException {
1:9a0cdf1: 
1:9a0cdf1:         return getRealMetaDataObject().getFunctionColumns(
1:9a0cdf1:                 catalog, schemaPattern, functionNamePattern, columnNamePattern);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public RowIdLifetime getRowIdLifetime()
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getRealMetaDataObject().getRowIdLifetime();
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public ResultSet getSchemas(String catalog, String schemaPattern)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getRealMetaDataObject().getSchemas(catalog, schemaPattern);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public boolean isWrapperFor(Class<?> interfaces)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         getRealMetaDataObject(); // Check for open connection.
1:9a0cdf1:         return interfaces.isInstance(this);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public boolean supportsStoredFunctionsUsingCallSyntax()
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getRealMetaDataObject().supportsStoredFunctionsUsingCallSyntax();
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public <T> T unwrap(Class<T> interfaces)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         getRealMetaDataObject(); // Check for open connection.
1:9a0cdf1:         try {
1:9a0cdf1:             return interfaces.cast(this);
1:9a0cdf1:         } catch (ClassCastException cce) {
1:9a0cdf1:             throw new SqlException(
1:9a0cdf1:                                 logWriter,
1:9a0cdf1:                                 new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),
1:9a0cdf1:                                 interfaces
1:9a0cdf1:                             ).getSQLException();
1:9a0cdf1:         }
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     /////////////////////////////////////////////////////////////////////////
1:9a0cdf1:     //
1:9a0cdf1:     //  JDBC 4.1 - New public methods
1:9a0cdf1:     //
1:9a0cdf1:     /////////////////////////////////////////////////////////////////////////
1:9a0cdf1: 
1:9a0cdf1:     /** See DatabaseMetaData javadoc */
1:9a0cdf1:     public  boolean generatedKeyAlwaysReturned() throws SQLException
1:9a0cdf1:     {
1:9a0cdf1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:9a0cdf1:             generatedKeyAlwaysReturned();
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     /**
1:9a0cdf1:     * See DatabaseMetaData javadoc. Empty ResultSet because Derby does
1:9a0cdf1:     * not support pseudo columns.
1:9a0cdf1:     */
1:9a0cdf1:     public ResultSet getPseudoColumns
1:9a0cdf1:         ( String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern )
1:9a0cdf1:         throws SQLException
1:9a0cdf1:     {
1:9a0cdf1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:9a0cdf1:             getPseudoColumns(catalog,
1:9a0cdf1:                              schemaPattern,
1:9a0cdf1:                              tableNamePattern,
1:9a0cdf1:                              columnNamePattern);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     /////////////////////////////////////////////////////////////////////////
1:9a0cdf1:     //
1:9a0cdf1:     //  JDBC 4.2 - New public methods
1:9a0cdf1:     //
1:9a0cdf1:     /////////////////////////////////////////////////////////////////////////
1:9a0cdf1: 
1:9a0cdf1:     /** See DatabaseMetaData javadoc */
1:9a0cdf1:     public  long getMaxLogicalLobSize() throws SQLException
1:9a0cdf1:     {
1:9a0cdf1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:9a0cdf1:             getMaxLogicalLobSize();
1:9a0cdf1:     }
1:9a0cdf1:     public  boolean supportsRefCursors() throws SQLException
1:9a0cdf1:     {
1:9a0cdf1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:9a0cdf1:             supportsRefCursors();
1:9a0cdf1:     }
1:ef81d0e: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.RowIdLifetime;
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:     private final LogWriter logWriter;
/////////////////////////////////////////////////////////////////////////
1: 
1:     // JDBC 4.0 methods
1: 
1:     public boolean autoCommitFailureClosesAllResultSets()
1:             throws SQLException {
1:         return getRealMetaDataObject().autoCommitFailureClosesAllResultSets();
1:     }
1: 
1:     public ResultSet getClientInfoProperties()
1:             throws SQLException {
1:         return getRealMetaDataObject().getClientInfoProperties();
1:     }
1: 
1:     public ResultSet getFunctions(String catalog, String schemaPattern,
1:                                   String functionNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getFunctions(
1:                 catalog, schemaPattern, functionNamePattern);
1:     }
1: 
1:     public ResultSet getFunctionColumns(
1:             String catalog, String schemaPattern,
1:             String functionNamePattern,
1:             String columnNamePattern) throws SQLException {
1: 
1:         return getRealMetaDataObject().getFunctionColumns(
1:                 catalog, schemaPattern, functionNamePattern, columnNamePattern);
1:     }
1: 
1:     public RowIdLifetime getRowIdLifetime()
1:             throws SQLException {
1:         return getRealMetaDataObject().getRowIdLifetime();
1:     }
1: 
1:     public ResultSet getSchemas(String catalog, String schemaPattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getSchemas(catalog, schemaPattern);
1:     }
1: 
1:     public boolean isWrapperFor(Class<?> interfaces)
1:             throws SQLException {
1:         getRealMetaDataObject(); // Check for open connection.
1:         return interfaces.isInstance(this);
1:     }
1: 
1:     public boolean supportsStoredFunctionsUsingCallSyntax()
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsStoredFunctionsUsingCallSyntax();
1:     }
1: 
1:     public <T> T unwrap(Class<T> interfaces)
1:             throws SQLException {
1:         getRealMetaDataObject(); // Check for open connection.
1:         try {
1:             return interfaces.cast(this);
1:         } catch (ClassCastException cce) {
1:             throw new SqlException(
1:                                 logWriter,
1:                                 new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),
1:                                 interfaces
1:                             ).getSQLException();
1:         }
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  JDBC 4.1 - New public methods
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /** See DatabaseMetaData javadoc */
1:     public  boolean generatedKeyAlwaysReturned() throws SQLException
1:     {
1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:             generatedKeyAlwaysReturned();
1:     }
1: 
1:     /**
1:     * See DatabaseMetaData javadoc. Empty ResultSet because Derby does
1:     * not support pseudo columns.
1:     */
1:     public ResultSet getPseudoColumns
1:         ( String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern )
1:         throws SQLException
1:     {
1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:             getPseudoColumns(catalog,
1:                              schemaPattern,
1:                              tableNamePattern,
1:                              columnNamePattern);
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  JDBC 4.2 - New public methods
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /** See DatabaseMetaData javadoc */
1:     public  long getMaxLogicalLobSize() throws SQLException
1:     {
1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:             getMaxLogicalLobSize();
1:     }
1:     public  boolean supportsRefCursors() throws SQLException
1:     {
1:         return ((ClientDatabaseMetaData)getRealMetaDataObject()).
1:             supportsRefCursors();
1:     }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class LogicalDatabaseMetaData implements DatabaseMetaData {
/////////////////////////////////////////////////////////////////////////
1:     LogicalDatabaseMetaData(LogicalConnection logicalCon,
1:                             LogWriter logWriter)
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
/////////////////////////////////////////////////////////////////////////
0: public class LogicalDatabaseMetaData implements DatabaseMetaData {
/////////////////////////////////////////////////////////////////////////
1:     final DatabaseMetaData getRealMetaDataObject()
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getProcedures(
1:     public ResultSet getProcedureColumns(
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getTables(String catalog, String schemaPattern,
1:     public ResultSet getSchemas() throws SQLException {
1:     public ResultSet getCatalogs() throws SQLException {
1:     public ResultSet getTableTypes() throws SQLException {
1:     public ResultSet getColumns(String catalog, String schemaPattern,
1:     public ResultSet getColumnPrivileges(String catalog, String schema,
1:     public ResultSet getTablePrivileges(
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getBestRowIdentifier(
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getVersionColumns(
1:     public ResultSet getPrimaryKeys(
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getImportedKeys(
1:     public ResultSet getExportedKeys(
1:     public ResultSet getCrossReference(String parentCatalog,
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getTypeInfo() throws SQLException {
1:     public ResultSet getIndexInfo(
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getUDTs(String catalog, String schemaPattern,
1:     public Connection getConnection() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet getSuperTypes(
1:     public ResultSet getSuperTables(
1:     public ResultSet getAttributes(
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ResultSet getProcedures(
0:     public java.sql.ResultSet getProcedureColumns(
1:             String catalog,
1:             String schemaPattern,
1:             String procedureNamePattern,
1:             String columnNamePattern) throws SQLException {
1: 
0:     public java.sql.ResultSet getTables(String catalog, String schemaPattern,
0:     public java.sql.ResultSet getSchemas() throws SQLException {
0:     public java.sql.ResultSet getCatalogs() throws SQLException {
0:     public java.sql.ResultSet getTableTypes() throws SQLException {
0:     public java.sql.ResultSet getColumns(String catalog, String schemaPattern,
0:     public java.sql.ResultSet getColumnPrivileges(String catalog, String schema,
0:     public java.sql.ResultSet getTablePrivileges(
1:             String catalog,
1:             String schemaPattern,
1:             String tableNamePattern) throws SQLException {
1: 
0:     public java.sql.ResultSet getBestRowIdentifier(
1:             String catalog,
1:             String schema,
1:             String table,
1:             int scope,
1:             boolean nullable) throws SQLException {
1: 
0:     public java.sql.ResultSet getVersionColumns(
0:     public java.sql.ResultSet getPrimaryKeys(
1:             String catalog,
1:             String schema,
1:             String table) throws SQLException {
1: 
0:     public java.sql.ResultSet getImportedKeys(
0:     public java.sql.ResultSet getExportedKeys(
0:     public java.sql.ResultSet getCrossReference(String parentCatalog,
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ResultSet getTypeInfo() throws SQLException {
0:     public java.sql.ResultSet getIndexInfo(
1:             String catalog,
1:             String schema,
1:             String table,
1:             boolean unique,
1:             boolean approximate) throws SQLException {
1: 
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ResultSet getUDTs(String catalog, String schemaPattern,
0:     public java.sql.Connection getConnection() throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ResultSet getSuperTypes(
0:     public java.sql.ResultSet getSuperTables(
0:     public java.sql.ResultSet getAttributes(
1:             String catalog,
1:             String schemaPattern,
1:             String typeNamePattern,
1:             String attributeNamePattern) throws SQLException {
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:ef81d0e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalDatabaseMetaData
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
0: import java.sql.Connection;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /**
1:  * A metadata object to be used with logical connections when connection
1:  * pooling is being used.
1:  * <p>
1:  * The purpose of this object is to make sure references to the underlying
1:  * physical connection don't leak to the client / user, and to make the
1:  * lifetime of the metadata object equal to the logical connection instead
1:  * of the underlying physical connection.
1:  */
0: public class LogicalDatabaseMetaData
0:         implements java.sql.DatabaseMetaData {
1: 
1:     /** The associated logical connection. */
1:     private final LogicalConnection logicalCon;
1:     /** Error message destination, if any. */
0:     final LogWriter logWriter;
1:     /** Cached value for the driver major version. */
1:     private final int driverMajorVersion;
1:     /** Cached value for the driver minor version. */
1:     private final int driverMinorVersion;
1: 
1:     /**
1:      * Creates a new logical database metadata object.
1:      *
1:      * @param logicalCon the associated logical connection
1:      * @param logWriter destination for log/error messages
1:      * @throws SQLException if obtaining the JDBC driver versions fail
1:      */
0:     public LogicalDatabaseMetaData(LogicalConnection logicalCon,
0:                                    LogWriter logWriter)
1:             throws SQLException {
1:         this.logicalCon = logicalCon;
1:         this.logWriter = logWriter;
1:         // Implementation note: Cache values, as these two methods are not
1:         // allowed to throw SQLException.
1:         this.driverMajorVersion =
1:                 logicalCon.getRealMetaDataObject().getDriverMajorVersion();
1:         this.driverMinorVersion =
1:                 logicalCon.getRealMetaDataObject().getDriverMinorVersion();
1:     }
1: 
1:     /**
1:      * Returns the real metadata object if appropriate.
1:      * <p>
1:      * This is just a convenience wrapper method.
1:      *
1:      * @return Metadata object from the underlying physical connection.
1:      * @throws SQLException if the logical connection has been closed, or
1:      *      obtaining the metadata object fails
1:      */
0:     final java.sql.DatabaseMetaData getRealMetaDataObject()
1:             throws SQLException {
1:         return this.logicalCon.getRealMetaDataObject();
1:     }
1: 
1:     public boolean allProceduresAreCallable() throws SQLException {
1:         return getRealMetaDataObject().allProceduresAreCallable();
1:     }
1: 
1:     public boolean allTablesAreSelectable() throws SQLException {
1:         return getRealMetaDataObject().allTablesAreSelectable();
1:     }
1: 
1:     public String getURL() throws SQLException {
1:         return getRealMetaDataObject().getURL();
1:     }
1: 
1:     public String getUserName() throws SQLException {
1:         return getRealMetaDataObject().getUserName();
1:     }
1: 
1:     public boolean isReadOnly() throws SQLException {
1:         return getRealMetaDataObject().isReadOnly();
1:     }
1: 
1:     public boolean nullsAreSortedHigh() throws SQLException {
1:         return getRealMetaDataObject().nullsAreSortedHigh();
1:     }
1: 
1:     public boolean nullsAreSortedLow() throws SQLException {
1:         return getRealMetaDataObject().nullsAreSortedLow();
1:     }
1: 
1:     public boolean nullsAreSortedAtStart() throws SQLException {
1:         return getRealMetaDataObject().nullsAreSortedAtStart();
1:     }
1: 
1:     public boolean nullsAreSortedAtEnd() throws SQLException {
1:         return getRealMetaDataObject().nullsAreSortedAtEnd();
1:     }
1: 
1:     public String getDatabaseProductName() throws SQLException {
1:         return getRealMetaDataObject().getDatabaseProductName();
1:     }
1: 
1:     public String getDatabaseProductVersion() throws SQLException {
1:         return getRealMetaDataObject().getDatabaseProductVersion();
1:     }
1: 
1:     public String getDriverName() throws SQLException {
1:         return getRealMetaDataObject().getDriverName();
1:     }
1: 
1:     public String getDriverVersion() throws SQLException {
1:         return getRealMetaDataObject().getDriverVersion();
1:     }
1: 
1:     public int getDriverMajorVersion() {
1:         return this.driverMajorVersion;
1:     }
1: 
1:     public int getDriverMinorVersion() {
1:         return this.driverMinorVersion;
1:     }
1: 
1:     public boolean usesLocalFiles() throws SQLException {
1:         return getRealMetaDataObject().usesLocalFiles();
1:     }
1: 
1:     public boolean usesLocalFilePerTable() throws SQLException {
1:         return getRealMetaDataObject().usesLocalFilePerTable();
1:     }
1: 
1:     public boolean supportsMixedCaseIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().supportsMixedCaseIdentifiers();
1:     }
1: 
1:     public boolean storesUpperCaseIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().storesUpperCaseIdentifiers();
1:     }
1: 
1:     public boolean storesLowerCaseIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().storesLowerCaseIdentifiers();
1:     }
1: 
1:     public boolean storesMixedCaseIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().storesMixedCaseIdentifiers();
1:     }
1: 
1:     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().supportsMixedCaseQuotedIdentifiers();
1:     }
1: 
1:     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().storesUpperCaseQuotedIdentifiers();
1:     }
1: 
1:     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().storesLowerCaseQuotedIdentifiers();
1:     }
1: 
1:     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {
1:         return getRealMetaDataObject().storesMixedCaseQuotedIdentifiers();
1:     }
1: 
1:     public String getIdentifierQuoteString() throws SQLException {
1:         return getRealMetaDataObject().getIdentifierQuoteString();
1:     }
1: 
1:     public String getSQLKeywords() throws SQLException {
1:         return getRealMetaDataObject().getSQLKeywords();
1:     }
1: 
1:     public String getNumericFunctions() throws SQLException {
1:         return getRealMetaDataObject().getNumericFunctions();
1:     }
1: 
1:     public String getStringFunctions() throws SQLException {
1:         return getRealMetaDataObject().getStringFunctions();
1:     }
1: 
1:     public String getSystemFunctions() throws SQLException {
1:         return getRealMetaDataObject().getSystemFunctions();
1:     }
1: 
1:     public String getTimeDateFunctions() throws SQLException {
1:         return getRealMetaDataObject().getTimeDateFunctions();
1:     }
1: 
1:     public String getSearchStringEscape() throws SQLException {
1:         return getRealMetaDataObject().getSearchStringEscape();
1:     }
1: 
1:     public String getExtraNameCharacters() throws SQLException {
1:         return getRealMetaDataObject().getExtraNameCharacters();
1:     }
1: 
1:     public boolean supportsAlterTableWithAddColumn() throws SQLException {
1:         return getRealMetaDataObject().supportsAlterTableWithAddColumn();
1:     }
1: 
1:     public boolean supportsAlterTableWithDropColumn() throws SQLException {
1:         return getRealMetaDataObject().supportsAlterTableWithDropColumn();
1:     }
1: 
1:     public boolean supportsColumnAliasing() throws SQLException {
1:         return getRealMetaDataObject().supportsColumnAliasing();
1:     }
1: 
1:     public boolean nullPlusNonNullIsNull() throws SQLException {
1:         return getRealMetaDataObject().nullPlusNonNullIsNull();
1:     }
1: 
1:     public boolean supportsConvert() throws SQLException {
1:         return getRealMetaDataObject().supportsConvert();
1:     }
1: 
1:     public boolean supportsConvert(int fromType, int toType)
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsConvert(fromType, toType);
1:     }
1: 
1:     public boolean supportsTableCorrelationNames() throws SQLException {
1:         return getRealMetaDataObject().supportsTableCorrelationNames();
1:     }
1: 
1:     public boolean supportsDifferentTableCorrelationNames()
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsDifferentTableCorrelationNames();
1:     }
1: 
1:     public boolean supportsExpressionsInOrderBy() throws SQLException {
1:         return getRealMetaDataObject().supportsExpressionsInOrderBy();
1:     }
1: 
1:     public boolean supportsOrderByUnrelated() throws SQLException {
1:         return getRealMetaDataObject().supportsOrderByUnrelated();
1:     }
1: 
1:     public boolean supportsGroupBy() throws SQLException {
1:         return getRealMetaDataObject().supportsGroupBy();
1:     }
1: 
1:     public boolean supportsGroupByUnrelated() throws SQLException {
1:         return getRealMetaDataObject().supportsGroupByUnrelated();
1:     }
1: 
1:     public boolean supportsGroupByBeyondSelect() throws SQLException {
1:         return getRealMetaDataObject().supportsGroupByBeyondSelect();
1:     }
1: 
1:     public boolean supportsLikeEscapeClause() throws SQLException {
1:         return getRealMetaDataObject().supportsLikeEscapeClause();
1:     }
1: 
1:     public boolean supportsMultipleResultSets() throws SQLException {
1:         return getRealMetaDataObject().supportsMultipleResultSets();
1:     }
1: 
1:     public boolean supportsMultipleTransactions() throws SQLException {
1:         return getRealMetaDataObject().supportsMultipleTransactions();
1:     }
1: 
1:     public boolean supportsNonNullableColumns() throws SQLException {
1:         return getRealMetaDataObject().supportsNonNullableColumns();
1:     }
1: 
1:     public boolean supportsMinimumSQLGrammar() throws SQLException {
1:         return getRealMetaDataObject().supportsMinimumSQLGrammar();
1:     }
1: 
1:     public boolean supportsCoreSQLGrammar() throws SQLException {
1:         return getRealMetaDataObject().supportsCoreSQLGrammar();
1:     }
1: 
1:     public boolean supportsExtendedSQLGrammar() throws SQLException {
1:         return getRealMetaDataObject().supportsExtendedSQLGrammar();
1:     }
1: 
1:     public boolean supportsANSI92EntryLevelSQL() throws SQLException {
1:         return getRealMetaDataObject().supportsANSI92EntryLevelSQL();
1:     }
1: 
1:     public boolean supportsANSI92IntermediateSQL() throws SQLException {
1:         return getRealMetaDataObject().supportsANSI92IntermediateSQL();
1:     }
1: 
1:     public boolean supportsANSI92FullSQL() throws SQLException {
1:         return getRealMetaDataObject().supportsANSI92FullSQL();
1:     }
1: 
1:     public boolean supportsIntegrityEnhancementFacility() throws SQLException {
1:         return getRealMetaDataObject().supportsIntegrityEnhancementFacility();
1:     }
1: 
1:     public boolean supportsOuterJoins() throws SQLException {
1:         return getRealMetaDataObject().supportsOuterJoins();
1:     }
1: 
1:     public boolean supportsFullOuterJoins() throws SQLException {
1:         return getRealMetaDataObject().supportsFullOuterJoins();
1:     }
1: 
1:     public boolean supportsLimitedOuterJoins() throws SQLException {
1:         return getRealMetaDataObject().supportsLimitedOuterJoins();
1:     }
1: 
1:     public String getSchemaTerm() throws SQLException {
1:         return getRealMetaDataObject().getSchemaTerm();
1:     }
1: 
1:     public String getProcedureTerm() throws SQLException {
1:         return getRealMetaDataObject().getProcedureTerm();
1:     }
1: 
1:     public String getCatalogTerm() throws SQLException {
1:         return getRealMetaDataObject().getCatalogTerm();
1:     }
1: 
1:     public boolean isCatalogAtStart() throws SQLException {
1:         return getRealMetaDataObject().isCatalogAtStart();
1:     }
1: 
1:     public String getCatalogSeparator() throws SQLException {
1:         return getRealMetaDataObject().getCatalogSeparator();
1:     }
1: 
1:     public boolean supportsSchemasInDataManipulation() throws SQLException {
1:         return getRealMetaDataObject().supportsSchemasInDataManipulation();
1:     }
1: 
1:     public boolean supportsSchemasInProcedureCalls() throws SQLException {
1:         return getRealMetaDataObject().supportsSchemasInProcedureCalls();
1:     }
1: 
1:     public boolean supportsSchemasInTableDefinitions() throws SQLException {
1:         return getRealMetaDataObject().supportsSchemasInTableDefinitions();
1:     }
1: 
1:     public boolean supportsSchemasInIndexDefinitions() throws SQLException {
1:         return getRealMetaDataObject().supportsSchemasInIndexDefinitions();
1:     }
1: 
1:     public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {
1:         return getRealMetaDataObject().supportsSchemasInPrivilegeDefinitions();
1:     }
1: 
1:     public boolean supportsCatalogsInDataManipulation() throws SQLException {
1:         return getRealMetaDataObject().supportsCatalogsInDataManipulation();
1:     }
1: 
1:     public boolean supportsCatalogsInProcedureCalls() throws SQLException {
1:         return getRealMetaDataObject().supportsCatalogsInProcedureCalls();
1:     }
1: 
1:     public boolean supportsCatalogsInTableDefinitions() throws SQLException {
1:         return getRealMetaDataObject().supportsCatalogsInTableDefinitions();
1:     }
1: 
1:     public boolean supportsCatalogsInIndexDefinitions() throws SQLException {
1:         return getRealMetaDataObject().supportsCatalogsInIndexDefinitions();
1:     }
1: 
1:     public boolean supportsCatalogsInPrivilegeDefinitions()
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsCatalogsInPrivilegeDefinitions();
1:     }
1: 
1:     public boolean supportsPositionedDelete() throws SQLException {
1:         return getRealMetaDataObject().supportsPositionedDelete();
1:     }
1: 
1:     public boolean supportsPositionedUpdate() throws SQLException {
1:         return getRealMetaDataObject().supportsPositionedUpdate();
1:     }
1: 
1:     public boolean supportsSelectForUpdate() throws SQLException {
1:         return getRealMetaDataObject().supportsSelectForUpdate();
1:     }
1: 
1:     public boolean supportsStoredProcedures() throws SQLException {
1:         return getRealMetaDataObject().supportsStoredProcedures();
1:     }
1: 
1:     public boolean supportsSubqueriesInComparisons() throws SQLException {
1:         return getRealMetaDataObject().supportsSubqueriesInComparisons();
1:     }
1: 
1:     public boolean supportsSubqueriesInExists() throws SQLException {
1:         return getRealMetaDataObject().supportsSubqueriesInExists();
1:     }
1: 
1:     public boolean supportsSubqueriesInIns() throws SQLException {
1:         return getRealMetaDataObject().supportsSubqueriesInIns();
1:     }
1: 
1:     public boolean supportsSubqueriesInQuantifieds() throws SQLException {
1:         return getRealMetaDataObject().supportsSubqueriesInQuantifieds();
1:     }
1: 
1:     public boolean supportsCorrelatedSubqueries() throws SQLException {
1:         return getRealMetaDataObject().supportsCorrelatedSubqueries();
1:     }
1: 
1:     public boolean supportsUnion() throws SQLException {
1:         return getRealMetaDataObject().supportsUnion();
1:     }
1: 
1:     public boolean supportsUnionAll() throws SQLException {
1:         return getRealMetaDataObject().supportsUnionAll();
1:     }
1: 
1:     public boolean supportsOpenCursorsAcrossCommit() throws SQLException {
1:         return getRealMetaDataObject().supportsOpenCursorsAcrossCommit();
1:     }
1: 
1:     public boolean supportsOpenCursorsAcrossRollback() throws SQLException {
1:         return getRealMetaDataObject().supportsOpenCursorsAcrossRollback();
1:     }
1: 
1:     public boolean supportsOpenStatementsAcrossCommit() throws SQLException {
1:         return getRealMetaDataObject().supportsOpenStatementsAcrossCommit();
1:     }
1: 
1:     public boolean supportsOpenStatementsAcrossRollback() throws SQLException {
1:         return getRealMetaDataObject().supportsOpenStatementsAcrossRollback();
1:     }
1: 
1:     public int getMaxBinaryLiteralLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxBinaryLiteralLength();
1:     }
1: 
1:     public int getMaxCharLiteralLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxCharLiteralLength();
1:     }
1: 
1:     public int getMaxColumnNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxColumnNameLength();
1:     }
1: 
1:     public int getMaxColumnsInGroupBy() throws SQLException {
1:         return getRealMetaDataObject().getMaxColumnsInGroupBy();
1:     }
1: 
1:     public int getMaxColumnsInIndex() throws SQLException {
1:         return getRealMetaDataObject().getMaxColumnsInIndex();
1:     }
1: 
1:     public int getMaxColumnsInOrderBy() throws SQLException {
1:         return getRealMetaDataObject().getMaxColumnsInOrderBy();
1:     }
1: 
1:     public int getMaxColumnsInSelect() throws SQLException {
1:         return getRealMetaDataObject().getMaxColumnsInSelect();
1:     }
1: 
1:     public int getMaxColumnsInTable() throws SQLException {
1:         return getRealMetaDataObject().getMaxColumnsInTable();
1:     }
1: 
1:     public int getMaxConnections() throws SQLException {
1:         return getRealMetaDataObject().getMaxConnections();
1:     }
1: 
1:     public int getMaxCursorNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxCursorNameLength();
1:     }
1: 
1:     public int getMaxIndexLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxIndexLength();
1:     }
1: 
1:     public int getMaxSchemaNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxSchemaNameLength();
1:     }
1: 
1:     public int getMaxProcedureNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxProcedureNameLength();
1:     }
1: 
1:     public int getMaxCatalogNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxCatalogNameLength();
1:     }
1: 
1:     public int getMaxRowSize() throws SQLException {
1:         return getRealMetaDataObject().getMaxRowSize();
1:     }
1: 
1:     public boolean doesMaxRowSizeIncludeBlobs() throws SQLException {
1:         return getRealMetaDataObject().doesMaxRowSizeIncludeBlobs();
1:     }
1: 
1:     public int getMaxStatementLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxStatementLength();
1:     }
1: 
1:     public int getMaxStatements() throws SQLException {
1:         return getRealMetaDataObject().getMaxStatements();
1:     }
1: 
1:     public int getMaxTableNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxTableNameLength();
1:     }
1: 
1:     public int getMaxTablesInSelect() throws SQLException {
1:         return getRealMetaDataObject().getMaxTablesInSelect();
1:     }
1: 
1:     public int getMaxUserNameLength() throws SQLException {
1:         return getRealMetaDataObject().getMaxUserNameLength();
1:     }
1: 
1:     public int getDefaultTransactionIsolation() throws SQLException {
1:         return getRealMetaDataObject().getDefaultTransactionIsolation();
1:     }
1: 
1:     public boolean supportsTransactions() throws SQLException {
1:         return getRealMetaDataObject().supportsTransactions();
1:     }
1: 
1:     public boolean supportsTransactionIsolationLevel(int level)
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsTransactionIsolationLevel(level);
1:     }
1: 
1:     public boolean supportsDataDefinitionAndDataManipulationTransactions()
1:             throws SQLException {
1:         return getRealMetaDataObject().
1:                 supportsDataDefinitionAndDataManipulationTransactions();
1:     }
1: 
1:     public boolean supportsDataManipulationTransactionsOnly()
1:             throws SQLException {
1:         return getRealMetaDataObject().
1:                 supportsDataManipulationTransactionsOnly();
1:     }
1: 
1:     public boolean dataDefinitionCausesTransactionCommit() throws SQLException {
1:         return getRealMetaDataObject().dataDefinitionCausesTransactionCommit();
1:     }
1: 
1:     public boolean dataDefinitionIgnoredInTransactions() throws SQLException {
1:         return getRealMetaDataObject().dataDefinitionIgnoredInTransactions();
1:     }
1: 
0:     public ResultSet getProcedures(
1:             String catalog, String schemaPattern, String procedureNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getProcedures(
1:                 catalog, schemaPattern, procedureNamePattern);
1:     }
1: 
0:     public ResultSet getProcedureColumns(String catalog, String schemaPattern,
0:             String procedureNamePattern, String columnNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getProcedureColumns(catalog,
1:                 schemaPattern, procedureNamePattern, columnNamePattern);
1:     }
1: 
0:     public ResultSet getTables(String catalog, String schemaPattern,
1:             String tableNamePattern, String[] types)
1:             throws SQLException {
1:         return getRealMetaDataObject().getTables(
1:                 catalog, schemaPattern, tableNamePattern, types);
1:     }
1: 
0:     public ResultSet getSchemas() throws SQLException {
1:         return getRealMetaDataObject().getSchemas();
1:     }
1: 
0:     public ResultSet getCatalogs() throws SQLException {
1:         return getRealMetaDataObject().getCatalogs();
1:     }
1: 
0:     public ResultSet getTableTypes() throws SQLException {
1:         return getRealMetaDataObject().getTableTypes();
1:     }
1: 
0:     public ResultSet getColumns(String catalog, String schemaPattern,
1:             String tableNamePattern, String columnNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getColumns(
1:                 catalog, schemaPattern, tableNamePattern, columnNamePattern);
1:     }
1: 
0:     public ResultSet getColumnPrivileges(String catalog, String schema,
1:             String table, String columnNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getColumnPrivileges(
1:                 catalog, schema, table, columnNamePattern);
1:     }
1: 
0:     public ResultSet getTablePrivileges(String catalog, String schemaPattern,
0:             String tableNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getTablePrivileges(
1:                 catalog, schemaPattern, tableNamePattern);
1:     }
1: 
0:     public ResultSet getBestRowIdentifier(String catalog, String schema,
0:             String table, int scope, boolean nullable)
1:             throws SQLException {
1:         return getRealMetaDataObject().getBestRowIdentifier(
1:                 catalog, schema, table, scope, nullable);
1:     }
1: 
0:     public ResultSet getVersionColumns(
1:             String catalog, String schema, String table)
1:             throws SQLException {
1:         return getRealMetaDataObject().getVersionColumns(
1:                 catalog, schema, table);
1:     }
1: 
0:     public ResultSet getPrimaryKeys(String catalog, String schema, String table)
1:             throws SQLException {
1:         return getRealMetaDataObject().getPrimaryKeys(catalog, schema, table);
1:     }
1: 
0:     public ResultSet getImportedKeys(
1:             String catalog, String schema, String table)
1:             throws SQLException {
1:         return getRealMetaDataObject().getImportedKeys(catalog, schema, table);
1:     }
1: 
0:     public ResultSet getExportedKeys(
1:             String catalog, String schema, String table)
1:             throws SQLException {
1:         return getRealMetaDataObject().getExportedKeys(catalog, schema, table);
1:     }
1: 
0:     public ResultSet getCrossReference(String parentCatalog,
1:             String parentSchema, String parentTable, String foreignCatalog,
1:             String foreignSchema, String foreignTable)
1:             throws SQLException {
1:         return getRealMetaDataObject().getCrossReference(
1:                 parentCatalog, parentSchema, parentTable, foreignCatalog,
1:                 foreignSchema, foreignTable);
1:     }
1: 
0:     public ResultSet getTypeInfo() throws SQLException {
1:         return getRealMetaDataObject().getTypeInfo();
1:     }
1: 
0:     public ResultSet getIndexInfo(String catalog, String schema, String table,
0:             boolean unique, boolean approximate)
1:             throws SQLException {
1:         return getRealMetaDataObject().getIndexInfo(
1:                 catalog, schema, table, unique, approximate);
1:     }
1: 
1:     public boolean supportsResultSetType(int type) throws SQLException {
1:         return getRealMetaDataObject().supportsResultSetType(type);
1:     }
1: 
1:     public boolean supportsResultSetConcurrency(int type, int concurrency)
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsResultSetConcurrency(
1:                 type, concurrency);
1:     }
1: 
1:     public boolean ownUpdatesAreVisible(int type) throws SQLException {
1:         return getRealMetaDataObject().ownUpdatesAreVisible(type);
1:     }
1: 
1:     public boolean ownDeletesAreVisible(int type) throws SQLException {
1:         return getRealMetaDataObject().ownDeletesAreVisible(type);
1:     }
1: 
1:     public boolean ownInsertsAreVisible(int type) throws SQLException {
1:         return getRealMetaDataObject().ownInsertsAreVisible(type);
1:     }
1: 
1:     public boolean othersUpdatesAreVisible(int type) throws SQLException {
1:         return getRealMetaDataObject().othersUpdatesAreVisible(type);
1:     }
1: 
1:     public boolean othersDeletesAreVisible(int type) throws SQLException {
1:         return getRealMetaDataObject().othersDeletesAreVisible(type);
1:     }
1: 
1:     public boolean othersInsertsAreVisible(int type) throws SQLException {
1:         return getRealMetaDataObject().othersInsertsAreVisible(type);
1:     }
1: 
1:     public boolean updatesAreDetected(int type) throws SQLException {
1:         return getRealMetaDataObject().updatesAreDetected(type);
1:     }
1: 
1:     public boolean deletesAreDetected(int type) throws SQLException {
1:         return getRealMetaDataObject().deletesAreDetected(type);
1:     }
1: 
1:     public boolean insertsAreDetected(int type) throws SQLException {
1:         return getRealMetaDataObject().insertsAreDetected(type);
1:     }
1: 
1:     public boolean supportsBatchUpdates() throws SQLException {
1:         return getRealMetaDataObject().supportsBatchUpdates();
1:     }
1: 
0:     public ResultSet getUDTs(String catalog, String schemaPattern,
1:             String typeNamePattern, int[] types)
1:             throws SQLException {
1:         return getRealMetaDataObject().getUDTs(
1:                 catalog, schemaPattern, typeNamePattern, types);
1:     }
1: 
0:     public Connection getConnection() throws SQLException {
1:         getRealMetaDataObject(); // Just check if the connection is still open.
1:         return this.logicalCon;
1:     }
1: 
1:     public boolean supportsSavepoints() throws SQLException {
1:         return getRealMetaDataObject().supportsSavepoints();
1:     }
1: 
1:     public boolean supportsNamedParameters() throws SQLException {
1:         return getRealMetaDataObject().supportsNamedParameters();
1:     }
1: 
1:     public boolean supportsMultipleOpenResults() throws SQLException {
1:         return getRealMetaDataObject().supportsMultipleOpenResults();
1:     }
1: 
1:     public boolean supportsGetGeneratedKeys() throws SQLException {
1:         return getRealMetaDataObject().supportsGetGeneratedKeys();
1:     }
1: 
0:     public ResultSet getSuperTypes(
1:             String catalog, String schemaPattern, String typeNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getSuperTypes(
1:                 catalog, schemaPattern, typeNamePattern);
1:     }
1: 
0:     public ResultSet getSuperTables(
1:             String catalog, String schemaPattern, String tableNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getSuperTables(
1:                 catalog, schemaPattern, tableNamePattern);
1:     }
1: 
0:     public ResultSet getAttributes(String catalog, String schemaPattern,
0:             String typeNamePattern, String attributeNamePattern)
1:             throws SQLException {
1:         return getRealMetaDataObject().getAttributes(
1:                 catalog, schemaPattern, typeNamePattern, attributeNamePattern);
1:     }
1: 
1:     public boolean supportsResultSetHoldability(int holdability)
1:             throws SQLException {
1:         return getRealMetaDataObject().supportsResultSetHoldability(
1:                 holdability);
1:     }
1: 
1:     public int getResultSetHoldability() throws SQLException {
1:         return getRealMetaDataObject().getResultSetHoldability();
1:     }
1: 
1:     public int getDatabaseMajorVersion() throws SQLException {
1:         return getRealMetaDataObject().getDatabaseMajorVersion();
1:     }
1: 
1:     public int getDatabaseMinorVersion() throws SQLException {
1:         return getRealMetaDataObject().getDatabaseMinorVersion();
1:     }
1: 
1:     public int getJDBCMajorVersion() throws SQLException {
1:         return getRealMetaDataObject().getJDBCMajorVersion();
1:     }
1: 
1:     public int getJDBCMinorVersion() throws SQLException {
1:         return getRealMetaDataObject().getJDBCMinorVersion();
1:     }
1: 
1:     public int getSQLStateType() throws SQLException {
1:         return getRealMetaDataObject().getSQLStateType();
1:     }
1: 
1:     public boolean locatorsUpdateCopy() throws SQLException {
1:         return getRealMetaDataObject().locatorsUpdateCopy();
1:     }
1: 
1:     public boolean supportsStatementPooling() throws SQLException {
1:         return getRealMetaDataObject().supportsStatementPooling();
1:     }
1: }
============================================================================