1:f719de6: /*
1:f719de6: 
1:f719de6:    Derby - Class org.apache.derby.iapi.types.PositionedStream
1:f719de6: 
1:f719de6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f719de6:    contributor license agreements.  See the NOTICE file distributed with
1:f719de6:    this work for additional information regarding copyright ownership.
1:f719de6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f719de6:    (the "License"); you may not use this file except in compliance with
1:f719de6:    the License.  You may obtain a copy of the License at
1:f719de6: 
1:f719de6:       http://www.apache.org/licenses/LICENSE-2.0
1:f719de6: 
1:f719de6:    Unless required by applicable law or agreed to in writing, software
1:f719de6:    distributed under the License is distributed on an "AS IS" BASIS,
1:f719de6:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f719de6:    See the License for the specific language governing permissions and
1:f719de6:    limitations under the License.
1:f719de6: 
1:f719de6:  */
1:f719de6: package org.apache.derby.iapi.types;
1:f719de6: 
1:f719de6: import java.io.IOException;
1:f719de6: import java.io.InputStream;
1:f719de6: import org.apache.derby.iapi.error.StandardException;
1:f719de6: 
1:f719de6: /**
1:f719de6:  * This interface describes a stream that is aware of its own position and can
1:f719de6:  * reposition itself on request.
1:f719de6:  * <p>
1:f719de6:  * This interface doesn't convey any information about how expensive it is for
1:f719de6:  * the stream to reposition itself.
1:f719de6:  */
1:f719de6: public interface PositionedStream {
1:f719de6: 
1:f719de6:     /**
1:f719de6:      * Returns a reference to self as an {@code InputStream}.
1:f719de6:      * <p>
1:f719de6:      * This method is not allowed to return {@code null}.
1:f719de6:      *
1:f719de6:      * @return An {@code InputStream} reference to self.
1:f719de6:      */
1:f719de6:     InputStream asInputStream();
1:f719de6: 
1:f719de6:     /**
1:f719de6:      * Returns the current byte position of the stream.
1:f719de6:      *
1:f719de6:      * @return Current byte position of the stream.
1:f719de6:      */
1:f719de6:     long getPosition();
1:f719de6: 
1:f719de6:     /**
1:f719de6:      * Repositions the stream to the requested byte position.
1:f719de6:      * <p>
1:f719de6:      * If the repositioning fails because the stream is exhausted, most likely
1:f719de6:      * because of an invalid position specified by the user, the stream is
1:f719de6:      * reset to position zero and an {@code EOFException} is thrown.
1:f719de6:      *
1:f719de6:      * @param requestedPos requested byte position, first position is {@code 0}
1:f719de6:      * @throws IOException if accessing the stream fails
1:f668d94:      * @throws java.io.EOFException if the requested position is equal to or
1:f668d94:      *      larger than the length of the stream
1:f719de6:      * @throws StandardException if an error occurs in store
1:f719de6:      */
1:f719de6:     void reposition(long requestedPos)
1:f719de6:             throws IOException, StandardException;
1:f719de6: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      * @throws java.io.EOFException if the requested position is equal to or
1:      *      larger than the length of the stream
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:f719de6
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.PositionedStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.iapi.types;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * This interface describes a stream that is aware of its own position and can
1:  * reposition itself on request.
1:  * <p>
1:  * This interface doesn't convey any information about how expensive it is for
1:  * the stream to reposition itself.
1:  */
1: public interface PositionedStream {
1: 
1:     /**
1:      * Returns a reference to self as an {@code InputStream}.
1:      * <p>
1:      * This method is not allowed to return {@code null}.
1:      *
1:      * @return An {@code InputStream} reference to self.
1:      */
1:     InputStream asInputStream();
1: 
1:     /**
1:      * Returns the current byte position of the stream.
1:      *
1:      * @return Current byte position of the stream.
1:      */
1:     long getPosition();
1: 
1:     /**
1:      * Repositions the stream to the requested byte position.
1:      * <p>
1:      * If the repositioning fails because the stream is exhausted, most likely
1:      * because of an invalid position specified by the user, the stream is
1:      * reset to position zero and an {@code EOFException} is thrown.
1:      *
1:      * @param requestedPos requested byte position, first position is {@code 0}
1:      * @throws IOException if accessing the stream fails
0:      * @throws EOFException if the requested position is equal to or larger
0:      *      than the length of the stream
1:      * @throws StandardException if an error occurs in store
1:      */
1:     void reposition(long requestedPos)
1:             throws IOException, StandardException;
1: }
============================================================================