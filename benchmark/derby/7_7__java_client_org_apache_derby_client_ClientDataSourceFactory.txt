1:62d2020: /*
4:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.ClientDataSourceFactory
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
2:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client;
1:33776ff: 
1:62d2020: import java.lang.reflect.Method;
1:62d2020: import java.util.Enumeration;
1:69e3d06: import java.util.Hashtable;
1:69e3d06: import java.util.Locale;
1:69e3d06: import javax.naming.Context;
1:69e3d06: import javax.naming.Name;
1:62d2020: 
1:62d2020: import javax.naming.RefAddr;
1:62d2020: import javax.naming.Reference;
1:69e3d06: import javax.naming.spi.ObjectFactory;
1:62d2020: 
2:33776ff: /**
1:af93171:  * The data source factory for Derby client driver data sources.
1:af93171:  * <p>
1:af93171:  * This factory reconstructs a Derby data source object when it is retrieved
1:af93171:  * from JNDI. References are needed since many naming services don't have the
1:af93171:  * ability to store Java objects in their serialized form. When a data source
1:af93171:  * object is bound in this type of naming service the
1:af93171:  * {@link javax.naming.Reference} for that object is actually stored by the
1:af93171:  * JNDI implementation, not the data source object itself.
1:af93171:  * <p>
1:af93171:  * A JNDI administrator is responsible for making sure that both the object
1:af93171:  * factory and data source implementation classes provided by a JDBC driver
1:af93171:  * vendor are accessible to the JNDI service provider at runtime.
1:af93171:  * <p>
1:af93171:  * An object factory implements the {@link javax.naming.spi.ObjectFactory}
1:af93171:  * interface. This interface contains a single method, {@code getObjectInstance}
1:af93171:  * which is called by a JNDI service provider to reconstruct an object when that
1:af93171:  * object is retrieved from JNDI. A JDBC driver vendor should provide an object
1:af93171:  * factory as part of their JDBC 2.0 product.
1:70f7692:  *
1:8bc0bec:  * @see org.apache.derby.jdbc.ClientDataSource
1:af93171:  * @see org.apache.derby.jdbc.ClientConnectionPoolDataSource
1:af93171:  * @see org.apache.derby.jdbc.ClientXADataSource
1:70f7692:  */
1:69e3d06: public class ClientDataSourceFactory implements ObjectFactory {
1:33776ff: 
1:af93171:     public ClientDataSourceFactory() {}
1:33776ff: 
1:70f7692:     /**
1:af93171:      * Reconstructs a Derby client-driver data source object from a JNDI data
1:af93171:      * source reference.
1:af93171:      * <p>
1:af93171:      * The {@code getObjectInstance} method is passed a reference that
1:af93171:      * corresponds to the object being retrieved as its first parameter. The
1:af93171:      * other parameters are optional in the case of JDBC data source objects.
1:af93171:      * The object factory should use the information contained in the reference
1:af93171:      * to reconstruct the data source. If for some reason, a data source
1:af93171:      * object cannot be reconstructed from the reference, a value of
1:af93171:      * {@code null} may be returned. This allows other object factories that may
1:af93171:      * be registered in JNDI to be tried. If an exception is thrown then no
1:af93171:      * other object factories are tried.
1:70f7692:      *
1:af93171:      * @param refObj the possibly {@code null} object containing location or
1:af93171:      *      reference information that can be used in creating an object
1:af93171:      * @param name the name of this object relative to {@code nameContext}, or
1:af93171:      *      {@code null} if no name is specified
1:af93171:      * @param nameContext context relative to which the name parameter is
1:af93171:      *      specified, or {@code null} if name is relative to the default
1:af93171:      *      initial context.
1:af93171:      * @param environment possibly {@code null} environment that is used in
1:af93171:      *      creating the object.
2:33776ff:      *
1:af93171:      * @return Object created, or {@code null} if no attempt to create the
1:af93171:      *      object is made.
1:af93171:      * @throws Exception if recreating the object fails
1:70f7692:      */
1:70f7692:     public Object getObjectInstance(Object refObj,
1:69e3d06:                                     Name name,
1:69e3d06:                                     Context nameContext,
1:69e3d06:                                     Hashtable environment) throws Exception {
1:0b884ea:         Object ds = null;
1:69e3d06:         if (refObj instanceof Reference) {
1:69e3d06:             Reference ref = (Reference) refObj;
1:33776ff: 
1:0b884ea:             // See if this object belongs to Derby.
1:0b884ea:             String className = ref.getClassName();
1:0b884ea:             if (className != null &&
1:0b884ea:                     className.startsWith("org.apache.derby.jdbc.Client")) {
1:0b884ea:                 // Create the proper data source object shell.
1:4469400:                 Class<?> clazz = Class.forName(className);
1:4469400:                 ds = clazz.getConstructor().newInstance();
1:33776ff: 
1:0b884ea:                 // Fill in the data source object shell with values from the
1:0b884ea:                 // jndi reference.
1:0b884ea:                 ClientDataSourceFactory.setBeanProperties(ds, ref);
1:0b884ea:             }
1:0b884ea:         }
1:70f7692:         return ds;
2:70f7692:     }
1:62d2020:     
1:62d2020:     /** Reflect lookup for Java bean method taking a single String arg */
1:62d2020:     private static final Class[] STRING_ARG = { "".getClass() };
1:62d2020:     /** Reflect lookup for Java bean method taking a single int arg */
1:62d2020:     private static final Class[] INT_ARG = { Integer.TYPE };
1:62d2020:     /** Reflect lookup for Java bean method taking a single boolean arg */
1:62d2020:     private static final Class[] BOOLEAN_ARG = { Boolean.TYPE };
1:62d2020:     /** Reflect lookup for Java bean method taking a single short arg */
1:62d2020:     private static final Class[] SHORT_ARG = { Short.TYPE };
1:62d2020:     
1:af93171:     /**
1:62d2020:      * Set the Java bean properties for an object from its Reference. The
1:62d2020:      * Reference contains a set of StringRefAddr values with the key being the
1:62d2020:      * bean name and the value a String representation of the bean's value. This
1:62d2020:      * code looks for setXXX() method where the set method corresponds to the
1:62d2020:      * standard bean naming scheme and has a single parameter of type String,
1:62d2020:      * int, boolean or short.
1:62d2020:      */
1:62d2020:     private static void setBeanProperties(Object ds, Reference ref)
1:62d2020:             throws Exception {
1:62d2020: 
1:62d2020:         for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
1:62d2020: 
1:62d2020:             RefAddr attribute = (RefAddr) e.nextElement();
1:62d2020: 
1:62d2020:             String propertyName = attribute.getType();
1:62d2020: 
1:62d2020:             String value = (String) attribute.getContent();
1:62d2020: 
1:62d2020:             String methodName = "set"
1:62d2020:                     + propertyName.substring(0, 1).toUpperCase(
1:69e3d06:                             Locale.ENGLISH)
1:62d2020:                     + propertyName.substring(1);
1:62d2020: 
1:62d2020:             Method m;
1:62d2020: 
1:62d2020:             Object argValue;
1:62d2020:             try {
1:62d2020:                 m = ds.getClass().getMethod(methodName, STRING_ARG);
1:62d2020:                 argValue = value;
1:62d2020:             } catch (NoSuchMethodException nsme) {
1:62d2020:                 try {
1:62d2020:                     m = ds.getClass().getMethod(methodName, INT_ARG);
1:62d2020:                     argValue = Integer.valueOf(value);
1:62d2020:                 } catch (NoSuchMethodException nsme2) {
1:62d2020:                     try {
1:62d2020:                         m = ds.getClass().getMethod(methodName, BOOLEAN_ARG);
1:62d2020:                         argValue = Boolean.valueOf(value);
1:62d2020:                     } catch (NoSuchMethodException nsme3) {
1:62d2020:                         m = ds.getClass().getMethod(methodName, SHORT_ARG);
1:62d2020:                         argValue = Short.valueOf(value);
1:62d2020:                     }
1:62d2020:                 }
1:62d2020:             }
1:62d2020:             m.invoke(ds, new Object[] { argValue });
1:62d2020:         }
1:62d2020:     }
1:70f7692: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:                 Class<?> clazz = Class.forName(className);
1:                 ds = clazz.getConstructor().newInstance();
commit:17d490d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSource;
/////////////////////////////////////////////////////////////////////////
0:         ClientBaseDataSource ds = null;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import java.util.Locale;
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.spi.ObjectFactory;
/////////////////////////////////////////////////////////////////////////
1: public class ClientDataSourceFactory implements ObjectFactory {
/////////////////////////////////////////////////////////////////////////
1:                                     Name name,
1:                                     Context nameContext,
1:                                     Hashtable environment) throws Exception {
1:         if (refObj instanceof Reference) {
1:             Reference ref = (Reference) refObj;
/////////////////////////////////////////////////////////////////////////
1:                             Locale.ENGLISH)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:af93171
/////////////////////////////////////////////////////////////////////////
1:  * The data source factory for Derby client driver data sources.
1:  * <p>
1:  * This factory reconstructs a Derby data source object when it is retrieved
1:  * from JNDI. References are needed since many naming services don't have the
1:  * ability to store Java objects in their serialized form. When a data source
1:  * object is bound in this type of naming service the
1:  * {@link javax.naming.Reference} for that object is actually stored by the
1:  * JNDI implementation, not the data source object itself.
1:  * <p>
1:  * A JNDI administrator is responsible for making sure that both the object
1:  * factory and data source implementation classes provided by a JDBC driver
1:  * vendor are accessible to the JNDI service provider at runtime.
1:  * <p>
1:  * An object factory implements the {@link javax.naming.spi.ObjectFactory}
1:  * interface. This interface contains a single method, {@code getObjectInstance}
1:  * which is called by a JNDI service provider to reconstruct an object when that
1:  * object is retrieved from JNDI. A JDBC driver vendor should provide an object
1:  * factory as part of their JDBC 2.0 product.
1:  * @see org.apache.derby.jdbc.ClientConnectionPoolDataSource
1:  * @see org.apache.derby.jdbc.ClientXADataSource
1:     public ClientDataSourceFactory() {}
1:      * Reconstructs a Derby client-driver data source object from a JNDI data
1:      * source reference.
1:      * <p>
1:      * The {@code getObjectInstance} method is passed a reference that
1:      * corresponds to the object being retrieved as its first parameter. The
1:      * other parameters are optional in the case of JDBC data source objects.
1:      * The object factory should use the information contained in the reference
1:      * to reconstruct the data source. If for some reason, a data source
1:      * object cannot be reconstructed from the reference, a value of
1:      * {@code null} may be returned. This allows other object factories that may
1:      * be registered in JNDI to be tried. If an exception is thrown then no
1:      * other object factories are tried.
1:      * @param refObj the possibly {@code null} object containing location or
1:      *      reference information that can be used in creating an object
1:      * @param name the name of this object relative to {@code nameContext}, or
1:      *      {@code null} if no name is specified
1:      * @param nameContext context relative to which the name parameter is
1:      *      specified, or {@code null} if name is relative to the default
1:      *      initial context.
1:      * @param environment possibly {@code null} environment that is used in
1:      *      creating the object.
1:      * @return Object created, or {@code null} if no attempt to create the
1:      *      object is made.
1:      * @throws Exception if recreating the object fails
/////////////////////////////////////////////////////////////////////////
1:     /**
commit:0b884ea
/////////////////////////////////////////////////////////////////////////
1:         Object ds = null;
0:         if (refObj instanceof javax.naming.Reference) {
0:             javax.naming.Reference ref = (javax.naming.Reference) refObj;
1:             // See if this object belongs to Derby.
1:             String className = ref.getClassName();
1:             if (className != null &&
1:                     className.startsWith("org.apache.derby.jdbc.Client")) {
1:                 // Create the proper data source object shell.
0:                 ds = Class.forName(className).newInstance();
1:                 // Fill in the data source object shell with values from the
1:                 // jndi reference.
1:                 ClientDataSourceFactory.setBeanProperties(ds, ref);
1:             }
1:         }
commit:8bc0bec
/////////////////////////////////////////////////////////////////////////
1:  * @see org.apache.derby.jdbc.ClientDataSource
commit:a8d30d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Object ds = Class.forName(ref.getClassName()).newInstance();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:62d2020
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import java.util.Enumeration;
1: 
1: import javax.naming.RefAddr;
1: import javax.naming.Reference;
1: 
/////////////////////////////////////////////////////////////////////////
0:         ClientDataSourceFactory.setBeanProperties(ds, ref);
1:     
1:     /** Reflect lookup for Java bean method taking a single String arg */
1:     private static final Class[] STRING_ARG = { "".getClass() };
1:     /** Reflect lookup for Java bean method taking a single int arg */
1:     private static final Class[] INT_ARG = { Integer.TYPE };
1:     /** Reflect lookup for Java bean method taking a single boolean arg */
1:     private static final Class[] BOOLEAN_ARG = { Boolean.TYPE };
1:     /** Reflect lookup for Java bean method taking a single short arg */
1:     private static final Class[] SHORT_ARG = { Short.TYPE };
1:     
1:     /*
1:      * Set the Java bean properties for an object from its Reference. The
1:      * Reference contains a set of StringRefAddr values with the key being the
1:      * bean name and the value a String representation of the bean's value. This
1:      * code looks for setXXX() method where the set method corresponds to the
1:      * standard bean naming scheme and has a single parameter of type String,
1:      * int, boolean or short.
1:      */
1:     private static void setBeanProperties(Object ds, Reference ref)
1:             throws Exception {
1: 
1:         for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
1: 
1:             RefAddr attribute = (RefAddr) e.nextElement();
1: 
1:             String propertyName = attribute.getType();
1: 
1:             String value = (String) attribute.getContent();
1: 
1:             String methodName = "set"
1:                     + propertyName.substring(0, 1).toUpperCase(
0:                             java.util.Locale.ENGLISH)
1:                     + propertyName.substring(1);
1: 
1:             Method m;
1: 
1:             Object argValue;
1:             try {
1:                 m = ds.getClass().getMethod(methodName, STRING_ARG);
1:                 argValue = value;
1:             } catch (NoSuchMethodException nsme) {
1:                 try {
1:                     m = ds.getClass().getMethod(methodName, INT_ARG);
1:                     argValue = Integer.valueOf(value);
1:                 } catch (NoSuchMethodException nsme2) {
1:                     try {
1:                         m = ds.getClass().getMethod(methodName, BOOLEAN_ARG);
1:                         argValue = Boolean.valueOf(value);
1:                     } catch (NoSuchMethodException nsme3) {
1:                         m = ds.getClass().getMethod(methodName, SHORT_ARG);
1:                         argValue = Short.valueOf(value);
1:                     }
1:                 }
1:             }
1:             m.invoke(ds, new Object[] { argValue });
1:         }
1:     }
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:f787cd0
/////////////////////////////////////////////////////////////////////////
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
0:  * The data source factory currrently for ClientDataSource only. This factory will support XA and pooling-enabled data
0:  * sources in the future.
0:  * <p/>
0:  * This factory reconstructs a DERBY simple data source object when it is retrieved from JNDI. References are needed
0:  * since many naming services don't have the ability to store Java objects in their serialized form. When a data source
0:  * object is bound in this type of naming service the Reference for that object is actually stored by the JNDI
0:  * implementation, not the data source object itself.
0:  * <p/>
0:  * A JNDI administrator is responsible for making sure that both the object factory and data source implementation
0:  * classes provided by a JDBC driver vendor are accessible to the JNDI service provider at runtime.
0:  * <p/>
0:  * An object factory implements the javax.naming.spi.ObjectFactory interface. This interface contains a single method,
0:  * getObjectInstance, which is called by a JNDI service provider to reconstruct an object when that object is retrieved
0:  * from JNDI. A JDBC driver vendor should provide an object factory as part of their JDBC 2.0 product.
1:  */
0: public class ClientDataSourceFactory implements javax.naming.spi.ObjectFactory {
0:     static final String className__ = "org.apache.derby.jdbc.ClientDataSourceFactory";
0:     public ClientDataSourceFactory() {
1:     }
1:     /**
0:      * Reconstructs a ClientDataSource object from a JNDI data source reference.
0:      * <p/>
0:      * The getObjectInstance() method is passed a reference that corresponds to the object being retrieved as its first
0:      * parameter. The other parameters are optional in the case of JDBC data source objects. The object factory should
0:      * use the information contained in the reference to reconstruct the data source. If for some reason, a data source
0:      * object cannot be reconstructed from the reference, a value of null may be returned. This allows other object
0:      * factories that may be registered in JNDI to be tried. If an exception is thrown then no other object factories
0:      * are tried.
1:      *
0:      * @param refObj      The possibly null object containing location or reference information that can be used in
0:      *                    creating an object.
0:      * @param name        The name of this object relative to nameContext, or null if no name is specified.
0:      * @param nameContext Context relative to which the name parameter is specified, or null if name is relative to the
0:      *                    default initial context.
0:      * @param environment Possibly null environment that is used in creating the object.
1:      *
0:      * @return object created; null if an object cannot be created
1:      */
1:     public Object getObjectInstance(Object refObj,
0:                                     javax.naming.Name name,
0:                                     javax.naming.Context nameContext,
0:                                     java.util.Hashtable environment) throws java.lang.Exception {
0:         javax.naming.Reference ref = (javax.naming.Reference) refObj;
0:         // Create the proper data source object shell.
0:         ClientDataSource ds = null;
0:         if (ref.getClassName().equals(ClientDataSource.className__)) {
0:             ds = new ClientDataSource();
0:         } else if (ref.getClassName().equals(ClientXADataSource.className__)) {
0:             ds = new ClientXADataSource();
0:         } else if (ref.getClassName().equals(ClientConnectionPoolDataSource.className__)) {
0:             ds = new ClientConnectionPoolDataSource();
0:         } else {
0:             return null;
1:         }
0:         // Fill in the data source object shell with values from the jndi reference.
0:         ds.hydrateFromReference(ref);
1:         return ds;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derby.client.ClientDataSourceFactory
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client;
1: 
0: import org.apache.derby.jdbc.ClientDataSource;
0: import org.apache.derby.jdbc.ClientXADataSource;
0: import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
1: 
1: /**
0:  * The data source factory currrently for ClientDataSource only.
0:  * This factory will support XA and pooling-enabled data sources in the future.
0:  * <p>
0:  * This factory reconstructs a DERBY simple data source object
0:  * when it is retrieved from JNDI.
0:  * References are needed since many naming services
0:  * don't have the ability to store Java objects in their serialized form.
0:  * When a data source object is bound in this type of naming service the
0:  * Reference for that object is actually stored by the JNDI implementation,
0:  * not the data source object itself.
0:  * <p>
0:  * A JNDI administrator is responsible for making sure that both the object factory and
0:  * data source implementation classes provided by a JDBC driver vendor are accessible to
0:  * the JNDI service provider at runtime.
0:  * <p>
0:  * An object factory implements the javax.naming.spi.ObjectFactory interface. This
0:  * interface contains a single method, getObjectInstance, which is called by a JNDI
0:  * service provider to reconstruct an object when that object is retrieved from JNDI. A
0:  * JDBC driver vendor should provide an object factory as part of their JDBC 2.0 product.
1:  *
0:  * @see ClientDataSource
0:  **/
0: public class ClientDataSourceFactory implements javax.naming.spi.ObjectFactory
0: {
0:   static final String className__ = "org.apache.derby.jdbc.ClientDataSourceFactory";
1: 
0:   public ClientDataSourceFactory ()
0:   { }
1: 
1:   /**
0:    * Reconstructs a ClientDataSource object from a JNDI data source reference.
0:    * <p>
0:    * The getObjectInstance() method is passed a reference that corresponds to the object
0:    * being retrieved as its first parameter. The other parameters are optional in the case of
0:    * JDBC data source objects. The object factory should use the information contained in
0:    * the reference to reconstruct the data source. If for some reason, a data source object cannot
0:    * be reconstructed from the reference, a value of null may be returned. This allows
0:    * other object factories that may be registered in JNDI to be tried. If an exception is
0:    * thrown then no other object factories are tried.
1:    *
0:    * @param refObj
0:    *   The possibly null object containing location or reference information
0:    *   that can be used in creating an object.
0:    * @param name
0:    *   The name of this object relative to nameContext, or null if no name is specified.
0:    * @param nameContext
0:    *   Context relative to which the name parameter is specified,
0:    *   or null if name is relative to the default initial context.
0:    * @param environment
0:    *   Possibly null environment that is used in creating the object.
0:    * @return
0:    *   object created; null if an object cannot be created
1:    */
0:   public Object getObjectInstance (Object refObj,
0:                                    javax.naming.Name name,
0:                                    javax.naming.Context nameContext,
0:                                    java.util.Hashtable environment) throws java.lang.Exception
0:   {
0:     javax.naming.Reference ref = (javax.naming.Reference) refObj;
1: 
0:     // Create the proper data source object shell.
0:     ClientDataSource ds = null;
0:     if (ref.getClassName().equals (ClientDataSource.className__))
0:       ds = new ClientDataSource();
0:     else if (ref.getClassName().equals (ClientXADataSource.className__))
0:       ds = new ClientXADataSource();
0:     else if (ref.getClassName().equals (ClientConnectionPoolDataSource.className__))
0:       ds = new ClientConnectionPoolDataSource();
0:     else
0:       return null;
1: 
0:     // Fill in the data source object shell with values from the jndi reference.
0:     ds.hydrateFromReference (ref);
1: 
0:     return ds;
0:   }
0: }
============================================================================