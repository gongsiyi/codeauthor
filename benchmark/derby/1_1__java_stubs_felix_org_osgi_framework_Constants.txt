1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/Constants.java,v 1.32 2007/02/20 00:07:22 hargrave Exp $
1:a8b6921:  *
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  *
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * Defines standard names for the OSGi environment system properties, service
1:a8b6921:  * properties, and Manifest header attribute keys.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The values associated with these keys are of type
1:a8b6921:  * <code>java.lang.String</code>, unless otherwise indicated.
1:a8b6921:  * 
1:a8b6921:  * @since 1.1
1:a8b6921:  * @version $Revision: 1.32 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface Constants {
1:a8b6921: 	/**
1:a8b6921: 	 * Location identifier of the OSGi <i>system bundle </i>, which is defined
1:a8b6921: 	 * to be &quot;System Bundle&quot;.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SYSTEM_BUNDLE_LOCATION					= "System Bundle";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Alias for the symbolic name of the OSGi <i>system bundle </i>. It is
1:a8b6921: 	 * defined to be &quot;system.bundle&quot;.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SYSTEM_BUNDLE_SYMBOLICNAME				= "system.bundle";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Category&quot;) identifying the
1:a8b6921: 	 * bundle's category.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_CATEGORY							= "Bundle-Category";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-ClassPath&quot;) identifying a list
1:a8b6921: 	 * of directories and embedded JAR files, which are bundle resources used to
1:a8b6921: 	 * extend the bundle's classpath.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_CLASSPATH						= "Bundle-ClassPath";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Copyright&quot;) identifying the
1:a8b6921: 	 * bundle's copyright information.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_COPYRIGHT						= "Bundle-Copyright";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Description&quot;) containing a brief
1:a8b6921: 	 * description of the bundle's functionality.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_DESCRIPTION						= "Bundle-Description";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Name&quot;) identifying the bundle's
1:a8b6921: 	 * name.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_NAME								= "Bundle-Name";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-NativeCode&quot;) identifying a
1:a8b6921: 	 * number of hardware environments and the native language code libraries
1:a8b6921: 	 * that the bundle is carrying for each of these environments.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_NATIVECODE						= "Bundle-NativeCode";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Export-Package&quot;) identifying the
1:a8b6921: 	 * packages that the bundle offers to the Framework for export.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	EXPORT_PACKAGE							= "Export-Package";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Export-Service&quot;) identifying the fully
1:a8b6921: 	 * qualified class names of the services that the bundle may register (used
1:a8b6921: 	 * for informational purposes only).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @deprecated As of 1.2.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	EXPORT_SERVICE							= "Export-Service";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Import-Package&quot;) identifying the
1:a8b6921: 	 * packages on which the bundle depends.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	IMPORT_PACKAGE							= "Import-Package";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;DynamicImport-Package&quot;) identifying the
1:a8b6921: 	 * packages that the bundle may dynamically import during execution.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.2
1:a8b6921: 	 */
1:a8b6921: 	public static final String	DYNAMICIMPORT_PACKAGE					= "DynamicImport-Package";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Import-Service&quot;) identifying the fully
1:a8b6921: 	 * qualified class names of the services that the bundle requires (used for
1:a8b6921: 	 * informational purposes only).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @deprecated As of 1.2.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	IMPORT_SERVICE							= "Import-Service";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Vendor&quot;) identifying the
1:a8b6921: 	 * bundle's vendor.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_VENDOR							= "Bundle-Vendor";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Version&quot;) identifying the
1:a8b6921: 	 * bundle's version.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_VERSION							= "Bundle-Version";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-DocURL&quot;) identifying the
1:a8b6921: 	 * bundle's documentation URL, from which further information about the
1:a8b6921: 	 * bundle may be obtained.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_DOCURL							= "Bundle-DocURL";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-ContactAddress&quot;) identifying the
1:a8b6921: 	 * contact address where problems with the bundle may be reported; for
1:a8b6921: 	 * example, an email address.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_CONTACTADDRESS					= "Bundle-ContactAddress";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;Bundle-Activator&quot;)
1:a8b6921: 	 * identifying the bundle's activator class.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If present, this header specifies the name of the bundle resource class
1:a8b6921: 	 * that implements the <code>BundleActivator</code> interface and whose
1:a8b6921: 	 * <code>start</code> and <code>stop</code> methods are called by the
1:a8b6921: 	 * Framework when the bundle is started and stopped, respectively.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_ACTIVATOR						= "Bundle-Activator";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-UpdateLocation&quot;) identifying the
1:a8b6921: 	 * location from which a new bundle version is obtained during a bundle
1:a8b6921: 	 * update operation.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_UPDATELOCATION					= "Bundle-UpdateLocation";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;specification-version&quot;)
1:a8b6921: 	 * identifying the version of a package specified in the Export-Package or
1:a8b6921: 	 * Import-Package manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * @deprecated As of 1.3. This has been replaced by
1:a8b6921: 	 *             {@link #VERSION_ATTRIBUTE}.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	PACKAGE_SPECIFICATION_VERSION			= "specification-version";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;processor&quot;) identifying the
1:a8b6921: 	 * processor required to run native bundle code specified in the
1:a8b6921: 	 * Bundle-NativeCode manifest header).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-NativeCode: http.so ; processor=x86 ...
1:a8b6921: 	 * </pre>
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_NATIVECODE_PROCESSOR				= "processor";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;osname&quot;) identifying the
1:a8b6921: 	 * operating system required to run native bundle code specified in the
1:a8b6921: 	 * Bundle-NativeCode manifest header).
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-NativeCode: http.so ; osname=Linux ...
1:a8b6921: 	 * </pre>
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_NATIVECODE_OSNAME				= "osname";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;osversion&quot;) identifying the
1:a8b6921: 	 * operating system version required to run native bundle code specified in
1:a8b6921: 	 * the Bundle-NativeCode manifest header).
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-NativeCode: http.so ; osversion=&quot;2.34&quot; ...
1:a8b6921: 	 * </pre>
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_NATIVECODE_OSVERSION				= "osversion";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;language&quot;) identifying the
1:a8b6921: 	 * language in which the native bundle code is written specified in the
1:a8b6921: 	 * Bundle-NativeCode manifest header. See ISO 639 for possible values.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-NativeCode: http.so ; language=nl_be ...
1:a8b6921: 	 * </pre>
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_NATIVECODE_LANGUAGE				= "language";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-RequiredExecutionEnvironment&quot;)
1:a8b6921: 	 * identifying the required execution environment for the bundle. The
1:a8b6921: 	 * service platform may run this bundle if any of the execution environments
1:a8b6921: 	 * named in this header matches one of the execution environments it
1:a8b6921: 	 * implements.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.2
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_REQUIREDEXECUTIONENVIRONMENT		= "Bundle-RequiredExecutionEnvironment";
1:a8b6921: 
1:a8b6921: 	/*
1:a8b6921: 	 * Framework environment properties.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.version&quot;) identifying the Framework
1:a8b6921: 	 * version.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_VERSION						= "org.osgi.framework.version";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.vendor&quot;) identifying the Framework
1:a8b6921: 	 * implementation vendor.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_VENDOR						= "org.osgi.framework.vendor";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.language&quot;) identifying the Framework
1:a8b6921: 	 * implementation language (see ISO 639 for possible values).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_LANGUAGE						= "org.osgi.framework.language";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.os.name&quot;) identifying the Framework
1:a8b6921: 	 * host-computer's operating system.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_OS_NAME						= "org.osgi.framework.os.name";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.os.version&quot;) identifying the Framework
1:a8b6921: 	 * host-computer's operating system version number.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_OS_VERSION					= "org.osgi.framework.os.version";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.processor&quot;) identifying the Framework
1:a8b6921: 	 * host-computer's processor name.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_PROCESSOR						= "org.osgi.framework.processor";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.executionenvironment&quot;) identifying
1:a8b6921: 	 * execution environments provided by the Framework.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.2
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_EXECUTIONENVIRONMENT			= "org.osgi.framework.executionenvironment";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.bootdelegation&quot;) identifying packages for
1:a8b6921: 	 * which the Framework must delegate class loading to the boot class path.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_BOOTDELEGATION				= "org.osgi.framework.bootdelegation";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.framework.system.packages&quot;) identifying package which
1:a8b6921: 	 * the system bundle must export.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	FRAMEWORK_SYSTEMPACKAGES				= "org.osgi.framework.system.packages";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.supports.framework.extension&quot;) identifying whether
1:a8b6921: 	 * the Framework supports framework extension bundles. As of version 1.4,
1:a8b6921: 	 * the value of this property must be <code>true</code>. The Framework
1:a8b6921: 	 * must support framework extension bundles.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SUPPORTS_FRAMEWORK_EXTENSION			= "org.osgi.supports.framework.extension";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.supports.bootclasspath.extension&quot;) identifying
1:a8b6921: 	 * whether the Framework supports bootclasspath extension bundles. If the
1:a8b6921: 	 * value of this property is <code>true</code>, then the Framework
1:a8b6921: 	 * supports bootclasspath extension bundles. The default value is
1:a8b6921: 	 * <code>false</code>.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SUPPORTS_BOOTCLASSPATH_EXTENSION		= "org.osgi.supports.bootclasspath.extension";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.supports.framework.fragment&quot;) identifying whether the
1:a8b6921: 	 * Framework supports fragment bundles. As of version 1.4, the value of this
1:a8b6921: 	 * property must be <code>true</code>. The Framework must support
1:a8b6921: 	 * fragment bundles.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SUPPORTS_FRAMEWORK_FRAGMENT				= "org.osgi.supports.framework.fragment";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Framework environment property (named
1:a8b6921: 	 * &quot;org.osgi.supports.framework.requirebundle&quot;) identifying
1:a8b6921: 	 * whether the Framework supports the <code>Require-Bundle</code> manifest
1:a8b6921: 	 * header. As of version 1.4, the value of this property must be
1:a8b6921: 	 * <code>true</code>. The Framework must support the
1:a8b6921: 	 * <code>Require-Bundle</code> manifest header.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property may be retrieved by calling the
1:a8b6921: 	 * <code>BundleContext.getProperty</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SUPPORTS_FRAMEWORK_REQUIREBUNDLE		= "org.osgi.supports.framework.requirebundle";
1:a8b6921: 
1:a8b6921: 	/*
1:a8b6921: 	 * Service properties.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Service property (named &quot;objectClass&quot;) identifying all of the
1:a8b6921: 	 * class names under which a service was registered in the Framework (of
1:a8b6921: 	 * type <code>java.lang.String[]</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This property is set by the Framework when a service is registered.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	OBJECTCLASS								= "objectClass";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Service property (named &quot;service.id&quot;) identifying a service's
1:a8b6921: 	 * registration number (of type <code>java.lang.Long</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of this property is assigned by the Framework when a service is
1:a8b6921: 	 * registered. The Framework assigns a unique value that is larger than all
1:a8b6921: 	 * previously assigned values since the Framework was started. These values
1:a8b6921: 	 * are NOT persistent across restarts of the Framework.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SERVICE_ID								= "service.id";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Service property (named &quot;service.pid&quot;) identifying a service's
1:a8b6921: 	 * persistent identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This property may be supplied in the <code>properties</code>
1:a8b6921: 	 * <code>Dictionary</code>
1:a8b6921: 	 * object passed to the <code>BundleContext.registerService</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A service's persistent identifier uniquely identifies the service and
1:a8b6921: 	 * persists across multiple Framework invocations.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * By convention, every bundle has its own unique namespace, starting with
1:a8b6921: 	 * the bundle's identifier (see {@link Bundle#getBundleId}) and followed by
1:a8b6921: 	 * a dot (.). A bundle may use this as the prefix of the persistent
1:a8b6921: 	 * identifiers for the services it registers.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SERVICE_PID								= "service.pid";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Service property (named &quot;service.ranking&quot;) identifying a
1:a8b6921: 	 * service's ranking number (of type <code>java.lang.Integer</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This property may be supplied in the <code>properties
1:a8b6921: 	 * Dictionary</code>
1:a8b6921: 	 * object passed to the <code>BundleContext.registerService</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The service ranking is used by the Framework to determine the <i>default
1:a8b6921: 	 * </i> service to be returned from a call to the
1:a8b6921: 	 * {@link BundleContext#getServiceReference} method: If more than one
1:a8b6921: 	 * service implements the specified class, the <code>ServiceReference</code>
1:a8b6921: 	 * object with the highest ranking is returned.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The default ranking is zero (0). A service with a ranking of
1:a8b6921: 	 * <code>Integer.MAX_VALUE</code> is very likely to be returned as the
1:a8b6921: 	 * default service, whereas a service with a ranking of
1:a8b6921: 	 * <code>Integer.MIN_VALUE</code> is very unlikely to be returned.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the supplied property value is not of type
1:a8b6921: 	 * <code>java.lang.Integer</code>, it is deemed to have a ranking value
1:a8b6921: 	 * of zero.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SERVICE_RANKING							= "service.ranking";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Service property (named &quot;service.vendor&quot;) identifying a
1:a8b6921: 	 * service's vendor.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This property may be supplied in the properties <code>Dictionary</code>
1:a8b6921: 	 * object passed to the <code>BundleContext.registerService</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SERVICE_VENDOR							= "service.vendor";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Service property (named &quot;service.description&quot;) identifying a
1:a8b6921: 	 * service's description.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This property may be supplied in the properties <code>Dictionary</code>
1:a8b6921: 	 * object passed to the <code>BundleContext.registerService</code> method.
1:a8b6921: 	 */
1:a8b6921: 	public static final String	SERVICE_DESCRIPTION						= "service.description";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-SymbolicName&quot;) identifying the
1:a8b6921: 	 * bundle's symbolic name.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	BUNDLE_SYMBOLICNAME						= "Bundle-SymbolicName";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;singleton&quot;) identifying
1:a8b6921: 	 * whether a bundle is a singleton. The default value is <code>false</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-SymbolicName: com.acme.module.test; singleton:=true
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	SINGLETON_DIRECTIVE						= "singleton";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;fragment-attachment&quot;)
1:a8b6921: 	 * identifying if and when a fragment may attach to a host bundle. The
1:a8b6921: 	 * default value is <code>&quot;always&quot;</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;never&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#FRAGMENT_ATTACHMENT_ALWAYS
1:a8b6921: 	 * @see Constants#FRAGMENT_ATTACHMENT_RESOLVETIME
1:a8b6921: 	 * @see Constants#FRAGMENT_ATTACHMENT_NEVER
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	FRAGMENT_ATTACHMENT_DIRECTIVE			= "fragment-attachment";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;always&quot;) identifying a
1:a8b6921: 	 * fragment attachment type of always. A fragment attachment type of always
1:a8b6921: 	 * indicates that fragments are allowed to attach to the host bundle at any
1:a8b6921: 	 * time (while the host is resolved or during the process of resolving the
1:a8b6921: 	 * host bundle).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;always&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#FRAGMENT_ATTACHMENT_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	FRAGMENT_ATTACHMENT_ALWAYS				= "always";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;resolve-time&quot;)
1:a8b6921: 	 * identifying a fragment attachment type of resolve-time. A fragment
1:a8b6921: 	 * attachment type of resolve-time indicates that fragments are allowed to
1:a8b6921: 	 * attach to the host bundle only during the process of resolving the host
1:a8b6921: 	 * bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;resolve-time&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#FRAGMENT_ATTACHMENT_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	FRAGMENT_ATTACHMENT_RESOLVETIME			= "resolve-time";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;never&quot;) identifying a
1:a8b6921: 	 * fragment attachment type of never. A fragment attachment type of never
1:a8b6921: 	 * indicates that no fragments are allowed to attach to the host bundle at
1:a8b6921: 	 * any time.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;never&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#FRAGMENT_ATTACHMENT_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	FRAGMENT_ATTACHMENT_NEVER				= "never";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-Localization&quot;) identifying the
1:a8b6921: 	 * base name of the bundle's localization entries.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see #BUNDLE_LOCALIZATION_DEFAULT_BASENAME
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	BUNDLE_LOCALIZATION						= "Bundle-Localization";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Default value for the <code>Bundle-Localization</code> manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see #BUNDLE_LOCALIZATION
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	BUNDLE_LOCALIZATION_DEFAULT_BASENAME	= "OSGI-INF/l10n/bundle";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Require-Bundle&quot;) identifying the
1:a8b6921: 	 * symbolic names of other bundles required by the bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	REQUIRE_BUNDLE							= "Require-Bundle";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;bundle-version&quot;) identifying
1:a8b6921: 	 * a range of versions for a bundle specified in the Require-Bundle or
1:a8b6921: 	 * Fragment-Host manifest headers. The default value is <code>0.0.0</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Require-Bundle manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; bundle-version=&quot;1.1&quot;
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; bundle-version=&quot;[1.0,2.0)&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle-version attribute value uses a mathematical interval notation
1:a8b6921: 	 * to specify a range of bundle versions. A bundle-version attribute value
1:a8b6921: 	 * specified as a single version means a version range that includes any
1:a8b6921: 	 * bundle version greater than or equal to the specified version.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public static final String	BUNDLE_VERSION_ATTRIBUTE				= "bundle-version";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Fragment-Host&quot;) identifying the
1:a8b6921: 	 * symbolic name of another bundle for which that the bundle is a fragment.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	FRAGMENT_HOST							= "Fragment-Host";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;selection-filter&quot;) is used
1:a8b6921: 	 * for selection by filtering based upon system properties.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in manifest headers like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-NativeCode: libgtk.so; selection-filter=&quot;(ws=gtk)&quot;; ...
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	SELECTION_FILTER_ATTRIBUTE				= "selection-filter";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-ManifestVersion&quot;) identifying
1:a8b6921: 	 * the bundle manifest version. A bundle manifest may express the version of
1:a8b6921: 	 * the syntax in which it is written by specifying a bundle manifest
1:a8b6921: 	 * version. Bundles exploiting OSGi R4, or later, syntax must specify a
1:a8b6921: 	 * bundle manifest version.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The bundle manifest version defined by OSGi R4 or, more specifically, by
1:a8b6921: 	 * V1.3 of the OSGi Framework Specification is "2".
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	BUNDLE_MANIFESTVERSION					= "Bundle-ManifestVersion";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;version&quot;) identifying the
1:a8b6921: 	 * version of a package specified in the Export-Package or Import-Package
1:a8b6921: 	 * manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Export-Package or Import-Package
1:a8b6921: 	 * manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Import-Package: org.osgi.framework; version=&quot;1.1&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	VERSION_ATTRIBUTE						= "version";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header attribute (named &quot;bundle-symbolic-name&quot;)
1:a8b6921: 	 * identifying the symbolic name of a bundle that exports a package
1:a8b6921: 	 * specified in the Import-Package manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value is encoded in the Import-Package manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Import-Package: org.osgi.framework; bundle-symbolic-name=&quot;com.acme.module.test&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	BUNDLE_SYMBOLICNAME_ATTRIBUTE			= "bundle-symbolic-name";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;resolution&quot;) identifying the
1:a8b6921: 	 * resolution type in the Import-Package or Require-Bundle manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Import-Package or Require-Bundle
1:a8b6921: 	 * manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Import-Package: org.osgi.framework; resolution:=&quot;optional&quot;
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; resolution:=&quot;optional&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#RESOLUTION_MANDATORY
1:a8b6921: 	 * @see Constants#RESOLUTION_OPTIONAL
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	RESOLUTION_DIRECTIVE					= "resolution";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;mandatory&quot;) identifying
1:a8b6921: 	 * a mandatory resolution type. A mandatory resolution type indicates that
1:a8b6921: 	 * the import package or require bundle must be resolved when the bundle is
1:a8b6921: 	 * resolved. If such an import or require bundle cannot be resolved, the
1:a8b6921: 	 * module fails to resolve.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Import-Package or Require-Bundle
1:a8b6921: 	 * manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Import-Package: org.osgi.framework; resolution:=&quot;manditory&quot;
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; resolution:=&quot;manditory&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#RESOLUTION_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	RESOLUTION_MANDATORY					= "mandatory";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;optional&quot;) identifying
1:a8b6921: 	 * an optional resolution type. An optional resolution type indicates that
1:a8b6921: 	 * the import or require bundle is optional and the bundle may be resolved
1:a8b6921: 	 * without the import or require bundle being resolved. If the import or
1:a8b6921: 	 * require bundle is not resolved when the bundle is resolved, the import or
1:a8b6921: 	 * require bundle may not be resolved before the bundle is refreshed.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Import-Package or Require-Bundle
1:a8b6921: 	 * manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Import-Package: org.osgi.framework; resolution:=&quot;optional&quot;
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; resolution:=&quot;optional&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#RESOLUTION_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	RESOLUTION_OPTIONAL						= "optional";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;uses&quot;) identifying a list of
1:a8b6921: 	 * packages that an exported package uses.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Export-Package manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Export-Package: org.osgi.util.tracker; uses:=&quot;org.osgi.framework&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	USES_DIRECTIVE							= "uses";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;include&quot;).
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This directive is used by the Import-Package manifest header to identify
1:a8b6921: 	 * a list of classes of the specified package which must be allowed to be
1:a8b6921: 	 * exported. The directive value is encoded in the Import-Package manifest
1:a8b6921: 	 * header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Import-Package: org.osgi.framework; include:=&quot;MyClass*&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This directive is also used by the Bundle-ActivationPolicy manifest
1:a8b6921: 	 * header to identify the packages from which class loads will trigger lazy
1:a8b6921: 	 * activation. The directive value is encoded in the Bundle-ActivationPolicy
1:a8b6921: 	 * manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-ActivationPolicy: lazy; include:=&quot;org.osgi.framework&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	INCLUDE_DIRECTIVE						= "include";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;exclude&quot;).
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This directive is used by the Export-Package manifest header to identify
1:a8b6921: 	 * a list of classes of the specified package which must not be allowed to
1:a8b6921: 	 * be exported. The directive value is encoded in the Export-Package
1:a8b6921: 	 * manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Export-Package: org.osgi.framework; exclude:=&quot;*Impl&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This directive is also used by the Bundle-ActivationPolicy manifest
1:a8b6921: 	 * header to identify the packages from which class loads will not trigger
1:a8b6921: 	 * lazy activation. The directive value is encoded in the
1:a8b6921: 	 * Bundle-ActivationPolicy manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Bundle-ActivationPolicy: lazy; exclude:=&quot;org.osgi.framework&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	EXCLUDE_DIRECTIVE						= "exclude";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;mandatory&quot;) identifying names
1:a8b6921: 	 * of matching attributes which must be specified by matching Import-Package
1:a8b6921: 	 * statements in the Export-Package manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Export-Package manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Export-Package: org.osgi.framework; mandatory:=&quot;bundle-symbolic-name&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	MANDATORY_DIRECTIVE						= "mandatory";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;visibility&quot;) identifying the
1:a8b6921: 	 * visibility of a reqiured bundle in the Require-Bundle manifest header.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Require-Bundle manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; visibility:=&quot;reexport&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#VISIBILITY_PRIVATE
1:a8b6921: 	 * @see Constants#VISIBILITY_REEXPORT
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	VISIBILITY_DIRECTIVE					= "visibility";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;private&quot;) identifying a
1:a8b6921: 	 * private visibility type. A private visibility type indicates that any
1:a8b6921: 	 * packages that are exported by the required bundle are not made visible on
1:a8b6921: 	 * the export signature of the requiring bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Require-Bundle manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; visibility:=&quot;private&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#VISIBILITY_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	VISIBILITY_PRIVATE						= "private";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;reexport&quot;) identifying
1:a8b6921: 	 * a reexport visibility type. A reexport visibility type indicates any
1:a8b6921: 	 * packages that are exported by the required bundle are re-exported by the
1:a8b6921: 	 * requiring bundle. Any arbitrary arbitrary matching attributes with which
1:a8b6921: 	 * they were exported by the required bundle are deleted.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Require-Bundle manifest header
1:a8b6921: 	 * like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Require-Bundle: com.acme.module.test; visibility:=&quot;reexport&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#VISIBILITY_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	VISIBILITY_REEXPORT						= "reexport";
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive (named &quot;extension&quot;) identifying the
1:a8b6921: 	 * type of the extension fragment.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Fragment-Host manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Fragment-Host: system.bundle; extension:=&quot;framework&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#EXTENSION_FRAMEWORK
1:a8b6921: 	 * @see Constants#EXTENSION_BOOTCLASSPATH
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	EXTENSION_DIRECTIVE						= "extension";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;framework&quot;) identifying
1:a8b6921: 	 * the type of extension fragment. An extension fragment type of framework
1:a8b6921: 	 * indicates that the extension fragment is to be loaded by the framework's
1:a8b6921: 	 * class loader.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Fragment-Host manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Fragment-Host: system.bundle; extension:=&quot;framework&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#EXTENSION_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	EXTENSION_FRAMEWORK						= "framework";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header directive value (named &quot;bootclasspath&quot;)
1:a8b6921: 	 * identifying the type of extension fragment. An extension fragment type of
1:a8b6921: 	 * bootclasspath indicates that the extension fragment is to be loaded by
1:a8b6921: 	 * the boot class loader.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The directive value is encoded in the Fragment-Host manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *     Fragment-Host: system.bundle; extension:=&quot;bootclasspath&quot;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#EXTENSION_DIRECTIVE
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static String	EXTENSION_BOOTCLASSPATH					= "bootclasspath";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Manifest header (named &quot;Bundle-ActivationPolicy&quot;) identifying
1:a8b6921: 	 * the bundle's activation policy.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1:a8b6921: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.4
1:a8b6921: 	 * @see Constants#ACTIVATION_LAZY
1:a8b6921: 	 * @see Constants#INCLUDE_DIRECTIVE
1:a8b6921: 	 * @see Constants#EXCLUDE_DIRECTIVE
1:a8b6921: 	 */
1:a8b6921: 	public final static String	BUNDLE_ACTIVATIONPOLICY					= "Bundle-ActivationPolicy";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Bundle activation policy (named &quot;lazy&quot;) declaring the bundle
1:a8b6921: 	 * must be activated when the first class load is made from the bundle.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A bundle with the lazy activation policy that is started with the
1:a8b6921: 	 * {@link Bundle#START_ACTIVATION_POLICY START_ACTIVATION_POLICY} option
1:a8b6921: 	 * will wait in the {@link Bundle#STARTING STARTING} state until the first
1:a8b6921: 	 * class load from the bundle occurs. The bundle will then be activated
1:a8b6921: 	 * before the class is returned to the requestor.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The activation policy value is specified as in the
1:a8b6921: 	 * Bundle-ActivationPolicy manifest header like:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 *       Bundle-ActivationPolicy: lazy
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Constants#BUNDLE_ACTIVATIONPOLICY
1:a8b6921: 	 * @see Bundle#start(int)
1:a8b6921: 	 * @see Bundle#START_ACTIVATION_POLICY
1:a8b6921: 	 * @since 1.4
1:a8b6921: 	 */
1:a8b6921: 	public final static String	ACTIVATION_LAZY							= "lazy";
1:a8b6921: 
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/Constants.java,v 1.32 2007/02/20 00:07:22 hargrave Exp $
1:  *
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: /**
1:  * Defines standard names for the OSGi environment system properties, service
1:  * properties, and Manifest header attribute keys.
1:  * 
1:  * <p>
1:  * The values associated with these keys are of type
1:  * <code>java.lang.String</code>, unless otherwise indicated.
1:  * 
1:  * @since 1.1
1:  * @version $Revision: 1.32 $
1:  */
1: 
1: public interface Constants {
1: 	/**
1: 	 * Location identifier of the OSGi <i>system bundle </i>, which is defined
1: 	 * to be &quot;System Bundle&quot;.
1: 	 */
1: 	public static final String	SYSTEM_BUNDLE_LOCATION					= "System Bundle";
1: 
1: 	/**
1: 	 * Alias for the symbolic name of the OSGi <i>system bundle </i>. It is
1: 	 * defined to be &quot;system.bundle&quot;.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	SYSTEM_BUNDLE_SYMBOLICNAME				= "system.bundle";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Category&quot;) identifying the
1: 	 * bundle's category.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_CATEGORY							= "Bundle-Category";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-ClassPath&quot;) identifying a list
1: 	 * of directories and embedded JAR files, which are bundle resources used to
1: 	 * extend the bundle's classpath.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_CLASSPATH						= "Bundle-ClassPath";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Copyright&quot;) identifying the
1: 	 * bundle's copyright information.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_COPYRIGHT						= "Bundle-Copyright";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Description&quot;) containing a brief
1: 	 * description of the bundle's functionality.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_DESCRIPTION						= "Bundle-Description";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Name&quot;) identifying the bundle's
1: 	 * name.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_NAME								= "Bundle-Name";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-NativeCode&quot;) identifying a
1: 	 * number of hardware environments and the native language code libraries
1: 	 * that the bundle is carrying for each of these environments.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_NATIVECODE						= "Bundle-NativeCode";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Export-Package&quot;) identifying the
1: 	 * packages that the bundle offers to the Framework for export.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	EXPORT_PACKAGE							= "Export-Package";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Export-Service&quot;) identifying the fully
1: 	 * qualified class names of the services that the bundle may register (used
1: 	 * for informational purposes only).
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @deprecated As of 1.2.
1: 	 */
1: 	public static final String	EXPORT_SERVICE							= "Export-Service";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Import-Package&quot;) identifying the
1: 	 * packages on which the bundle depends.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	IMPORT_PACKAGE							= "Import-Package";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;DynamicImport-Package&quot;) identifying the
1: 	 * packages that the bundle may dynamically import during execution.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.2
1: 	 */
1: 	public static final String	DYNAMICIMPORT_PACKAGE					= "DynamicImport-Package";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Import-Service&quot;) identifying the fully
1: 	 * qualified class names of the services that the bundle requires (used for
1: 	 * informational purposes only).
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @deprecated As of 1.2.
1: 	 */
1: 	public static final String	IMPORT_SERVICE							= "Import-Service";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Vendor&quot;) identifying the
1: 	 * bundle's vendor.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_VENDOR							= "Bundle-Vendor";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Version&quot;) identifying the
1: 	 * bundle's version.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_VERSION							= "Bundle-Version";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-DocURL&quot;) identifying the
1: 	 * bundle's documentation URL, from which further information about the
1: 	 * bundle may be obtained.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_DOCURL							= "Bundle-DocURL";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-ContactAddress&quot;) identifying the
1: 	 * contact address where problems with the bundle may be reported; for
1: 	 * example, an email address.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_CONTACTADDRESS					= "Bundle-ContactAddress";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;Bundle-Activator&quot;)
1: 	 * identifying the bundle's activator class.
1: 	 * 
1: 	 * <p>
1: 	 * If present, this header specifies the name of the bundle resource class
1: 	 * that implements the <code>BundleActivator</code> interface and whose
1: 	 * <code>start</code> and <code>stop</code> methods are called by the
1: 	 * Framework when the bundle is started and stopped, respectively.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_ACTIVATOR						= "Bundle-Activator";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-UpdateLocation&quot;) identifying the
1: 	 * location from which a new bundle version is obtained during a bundle
1: 	 * update operation.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 */
1: 	public static final String	BUNDLE_UPDATELOCATION					= "Bundle-UpdateLocation";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;specification-version&quot;)
1: 	 * identifying the version of a package specified in the Export-Package or
1: 	 * Import-Package manifest header.
1: 	 * 
1: 	 * @deprecated As of 1.3. This has been replaced by
1: 	 *             {@link #VERSION_ATTRIBUTE}.
1: 	 */
1: 	public static final String	PACKAGE_SPECIFICATION_VERSION			= "specification-version";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;processor&quot;) identifying the
1: 	 * processor required to run native bundle code specified in the
1: 	 * Bundle-NativeCode manifest header).
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-NativeCode: http.so ; processor=x86 ...
1: 	 * </pre>
1: 	 */
1: 	public static final String	BUNDLE_NATIVECODE_PROCESSOR				= "processor";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;osname&quot;) identifying the
1: 	 * operating system required to run native bundle code specified in the
1: 	 * Bundle-NativeCode manifest header).
1: 	 * <p>
1: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-NativeCode: http.so ; osname=Linux ...
1: 	 * </pre>
1: 	 */
1: 	public static final String	BUNDLE_NATIVECODE_OSNAME				= "osname";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;osversion&quot;) identifying the
1: 	 * operating system version required to run native bundle code specified in
1: 	 * the Bundle-NativeCode manifest header).
1: 	 * <p>
1: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-NativeCode: http.so ; osversion=&quot;2.34&quot; ...
1: 	 * </pre>
1: 	 */
1: 	public static final String	BUNDLE_NATIVECODE_OSVERSION				= "osversion";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;language&quot;) identifying the
1: 	 * language in which the native bundle code is written specified in the
1: 	 * Bundle-NativeCode manifest header. See ISO 639 for possible values.
1: 	 * <p>
1: 	 * The attribute value is encoded in the Bundle-NativeCode manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-NativeCode: http.so ; language=nl_be ...
1: 	 * </pre>
1: 	 */
1: 	public static final String	BUNDLE_NATIVECODE_LANGUAGE				= "language";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-RequiredExecutionEnvironment&quot;)
1: 	 * identifying the required execution environment for the bundle. The
1: 	 * service platform may run this bundle if any of the execution environments
1: 	 * named in this header matches one of the execution environments it
1: 	 * implements.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.2
1: 	 */
1: 	public static final String	BUNDLE_REQUIREDEXECUTIONENVIRONMENT		= "Bundle-RequiredExecutionEnvironment";
1: 
1: 	/*
1: 	 * Framework environment properties.
1: 	 */
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.version&quot;) identifying the Framework
1: 	 * version.
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 */
1: 	public static final String	FRAMEWORK_VERSION						= "org.osgi.framework.version";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.vendor&quot;) identifying the Framework
1: 	 * implementation vendor.
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 */
1: 	public static final String	FRAMEWORK_VENDOR						= "org.osgi.framework.vendor";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.language&quot;) identifying the Framework
1: 	 * implementation language (see ISO 639 for possible values).
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 */
1: 	public static final String	FRAMEWORK_LANGUAGE						= "org.osgi.framework.language";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.os.name&quot;) identifying the Framework
1: 	 * host-computer's operating system.
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 */
1: 	public static final String	FRAMEWORK_OS_NAME						= "org.osgi.framework.os.name";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.os.version&quot;) identifying the Framework
1: 	 * host-computer's operating system version number.
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 */
1: 	public static final String	FRAMEWORK_OS_VERSION					= "org.osgi.framework.os.version";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.processor&quot;) identifying the Framework
1: 	 * host-computer's processor name.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 */
1: 	public static final String	FRAMEWORK_PROCESSOR						= "org.osgi.framework.processor";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.executionenvironment&quot;) identifying
1: 	 * execution environments provided by the Framework.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.2
1: 	 */
1: 	public static final String	FRAMEWORK_EXECUTIONENVIRONMENT			= "org.osgi.framework.executionenvironment";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.bootdelegation&quot;) identifying packages for
1: 	 * which the Framework must delegate class loading to the boot class path.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	FRAMEWORK_BOOTDELEGATION				= "org.osgi.framework.bootdelegation";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.framework.system.packages&quot;) identifying package which
1: 	 * the system bundle must export.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	FRAMEWORK_SYSTEMPACKAGES				= "org.osgi.framework.system.packages";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.supports.framework.extension&quot;) identifying whether
1: 	 * the Framework supports framework extension bundles. As of version 1.4,
1: 	 * the value of this property must be <code>true</code>. The Framework
1: 	 * must support framework extension bundles.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	SUPPORTS_FRAMEWORK_EXTENSION			= "org.osgi.supports.framework.extension";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.supports.bootclasspath.extension&quot;) identifying
1: 	 * whether the Framework supports bootclasspath extension bundles. If the
1: 	 * value of this property is <code>true</code>, then the Framework
1: 	 * supports bootclasspath extension bundles. The default value is
1: 	 * <code>false</code>.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	SUPPORTS_BOOTCLASSPATH_EXTENSION		= "org.osgi.supports.bootclasspath.extension";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.supports.framework.fragment&quot;) identifying whether the
1: 	 * Framework supports fragment bundles. As of version 1.4, the value of this
1: 	 * property must be <code>true</code>. The Framework must support
1: 	 * fragment bundles.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	SUPPORTS_FRAMEWORK_FRAGMENT				= "org.osgi.supports.framework.fragment";
1: 
1: 	/**
1: 	 * Framework environment property (named
1: 	 * &quot;org.osgi.supports.framework.requirebundle&quot;) identifying
1: 	 * whether the Framework supports the <code>Require-Bundle</code> manifest
1: 	 * header. As of version 1.4, the value of this property must be
1: 	 * <code>true</code>. The Framework must support the
1: 	 * <code>Require-Bundle</code> manifest header.
1: 	 * <p>
1: 	 * The value of this property may be retrieved by calling the
1: 	 * <code>BundleContext.getProperty</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	SUPPORTS_FRAMEWORK_REQUIREBUNDLE		= "org.osgi.supports.framework.requirebundle";
1: 
1: 	/*
1: 	 * Service properties.
1: 	 */
1: 
1: 	/**
1: 	 * Service property (named &quot;objectClass&quot;) identifying all of the
1: 	 * class names under which a service was registered in the Framework (of
1: 	 * type <code>java.lang.String[]</code>).
1: 	 * 
1: 	 * <p>
1: 	 * This property is set by the Framework when a service is registered.
1: 	 */
1: 	public static final String	OBJECTCLASS								= "objectClass";
1: 
1: 	/**
1: 	 * Service property (named &quot;service.id&quot;) identifying a service's
1: 	 * registration number (of type <code>java.lang.Long</code>).
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property is assigned by the Framework when a service is
1: 	 * registered. The Framework assigns a unique value that is larger than all
1: 	 * previously assigned values since the Framework was started. These values
1: 	 * are NOT persistent across restarts of the Framework.
1: 	 */
1: 	public static final String	SERVICE_ID								= "service.id";
1: 
1: 	/**
1: 	 * Service property (named &quot;service.pid&quot;) identifying a service's
1: 	 * persistent identifier.
1: 	 * 
1: 	 * <p>
1: 	 * This property may be supplied in the <code>properties</code>
1: 	 * <code>Dictionary</code>
1: 	 * object passed to the <code>BundleContext.registerService</code> method.
1: 	 * 
1: 	 * <p>
1: 	 * A service's persistent identifier uniquely identifies the service and
1: 	 * persists across multiple Framework invocations.
1: 	 * 
1: 	 * <p>
1: 	 * By convention, every bundle has its own unique namespace, starting with
1: 	 * the bundle's identifier (see {@link Bundle#getBundleId}) and followed by
1: 	 * a dot (.). A bundle may use this as the prefix of the persistent
1: 	 * identifiers for the services it registers.
1: 	 */
1: 	public static final String	SERVICE_PID								= "service.pid";
1: 
1: 	/**
1: 	 * Service property (named &quot;service.ranking&quot;) identifying a
1: 	 * service's ranking number (of type <code>java.lang.Integer</code>).
1: 	 * 
1: 	 * <p>
1: 	 * This property may be supplied in the <code>properties
1: 	 * Dictionary</code>
1: 	 * object passed to the <code>BundleContext.registerService</code> method.
1: 	 * 
1: 	 * <p>
1: 	 * The service ranking is used by the Framework to determine the <i>default
1: 	 * </i> service to be returned from a call to the
1: 	 * {@link BundleContext#getServiceReference} method: If more than one
1: 	 * service implements the specified class, the <code>ServiceReference</code>
1: 	 * object with the highest ranking is returned.
1: 	 * 
1: 	 * <p>
1: 	 * The default ranking is zero (0). A service with a ranking of
1: 	 * <code>Integer.MAX_VALUE</code> is very likely to be returned as the
1: 	 * default service, whereas a service with a ranking of
1: 	 * <code>Integer.MIN_VALUE</code> is very unlikely to be returned.
1: 	 * 
1: 	 * <p>
1: 	 * If the supplied property value is not of type
1: 	 * <code>java.lang.Integer</code>, it is deemed to have a ranking value
1: 	 * of zero.
1: 	 */
1: 	public static final String	SERVICE_RANKING							= "service.ranking";
1: 
1: 	/**
1: 	 * Service property (named &quot;service.vendor&quot;) identifying a
1: 	 * service's vendor.
1: 	 * 
1: 	 * <p>
1: 	 * This property may be supplied in the properties <code>Dictionary</code>
1: 	 * object passed to the <code>BundleContext.registerService</code> method.
1: 	 */
1: 	public static final String	SERVICE_VENDOR							= "service.vendor";
1: 
1: 	/**
1: 	 * Service property (named &quot;service.description&quot;) identifying a
1: 	 * service's description.
1: 	 * 
1: 	 * <p>
1: 	 * This property may be supplied in the properties <code>Dictionary</code>
1: 	 * object passed to the <code>BundleContext.registerService</code> method.
1: 	 */
1: 	public static final String	SERVICE_DESCRIPTION						= "service.description";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-SymbolicName&quot;) identifying the
1: 	 * bundle's symbolic name.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	BUNDLE_SYMBOLICNAME						= "Bundle-SymbolicName";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;singleton&quot;) identifying
1: 	 * whether a bundle is a singleton. The default value is <code>false</code>.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-SymbolicName: com.acme.module.test; singleton:=true
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	SINGLETON_DIRECTIVE						= "singleton";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;fragment-attachment&quot;)
1: 	 * identifying if and when a fragment may attach to a host bundle. The
1: 	 * default value is <code>&quot;always&quot;</code>.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;never&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#FRAGMENT_ATTACHMENT_ALWAYS
1: 	 * @see Constants#FRAGMENT_ATTACHMENT_RESOLVETIME
1: 	 * @see Constants#FRAGMENT_ATTACHMENT_NEVER
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	FRAGMENT_ATTACHMENT_DIRECTIVE			= "fragment-attachment";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;always&quot;) identifying a
1: 	 * fragment attachment type of always. A fragment attachment type of always
1: 	 * indicates that fragments are allowed to attach to the host bundle at any
1: 	 * time (while the host is resolved or during the process of resolving the
1: 	 * host bundle).
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;always&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#FRAGMENT_ATTACHMENT_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	FRAGMENT_ATTACHMENT_ALWAYS				= "always";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;resolve-time&quot;)
1: 	 * identifying a fragment attachment type of resolve-time. A fragment
1: 	 * attachment type of resolve-time indicates that fragments are allowed to
1: 	 * attach to the host bundle only during the process of resolving the host
1: 	 * bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;resolve-time&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#FRAGMENT_ATTACHMENT_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	FRAGMENT_ATTACHMENT_RESOLVETIME			= "resolve-time";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;never&quot;) identifying a
1: 	 * fragment attachment type of never. A fragment attachment type of never
1: 	 * indicates that no fragments are allowed to attach to the host bundle at
1: 	 * any time.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Bundle-SymbolicName manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:=&quot;never&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#FRAGMENT_ATTACHMENT_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	FRAGMENT_ATTACHMENT_NEVER				= "never";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-Localization&quot;) identifying the
1: 	 * base name of the bundle's localization entries.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @see #BUNDLE_LOCALIZATION_DEFAULT_BASENAME
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	BUNDLE_LOCALIZATION						= "Bundle-Localization";
1: 
1: 	/**
1: 	 * Default value for the <code>Bundle-Localization</code> manifest header.
1: 	 * 
1: 	 * @see #BUNDLE_LOCALIZATION
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	BUNDLE_LOCALIZATION_DEFAULT_BASENAME	= "OSGI-INF/l10n/bundle";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Require-Bundle&quot;) identifying the
1: 	 * symbolic names of other bundles required by the bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	REQUIRE_BUNDLE							= "Require-Bundle";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;bundle-version&quot;) identifying
1: 	 * a range of versions for a bundle specified in the Require-Bundle or
1: 	 * Fragment-Host manifest headers. The default value is <code>0.0.0</code>.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value is encoded in the Require-Bundle manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Require-Bundle: com.acme.module.test; bundle-version=&quot;1.1&quot;
1: 	 *     Require-Bundle: com.acme.module.test; bundle-version=&quot;[1.0,2.0)&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * <p>
1: 	 * The bundle-version attribute value uses a mathematical interval notation
1: 	 * to specify a range of bundle versions. A bundle-version attribute value
1: 	 * specified as a single version means a version range that includes any
1: 	 * bundle version greater than or equal to the specified version.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public static final String	BUNDLE_VERSION_ATTRIBUTE				= "bundle-version";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Fragment-Host&quot;) identifying the
1: 	 * symbolic name of another bundle for which that the bundle is a fragment.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	FRAGMENT_HOST							= "Fragment-Host";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;selection-filter&quot;) is used
1: 	 * for selection by filtering based upon system properties.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value is encoded in manifest headers like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-NativeCode: libgtk.so; selection-filter=&quot;(ws=gtk)&quot;; ...
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	SELECTION_FILTER_ATTRIBUTE				= "selection-filter";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-ManifestVersion&quot;) identifying
1: 	 * the bundle manifest version. A bundle manifest may express the version of
1: 	 * the syntax in which it is written by specifying a bundle manifest
1: 	 * version. Bundles exploiting OSGi R4, or later, syntax must specify a
1: 	 * bundle manifest version.
1: 	 * <p>
1: 	 * The bundle manifest version defined by OSGi R4 or, more specifically, by
1: 	 * V1.3 of the OSGi Framework Specification is "2".
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	BUNDLE_MANIFESTVERSION					= "Bundle-ManifestVersion";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;version&quot;) identifying the
1: 	 * version of a package specified in the Export-Package or Import-Package
1: 	 * manifest header.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value is encoded in the Export-Package or Import-Package
1: 	 * manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Import-Package: org.osgi.framework; version=&quot;1.1&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	VERSION_ATTRIBUTE						= "version";
1: 
1: 	/**
1: 	 * Manifest header attribute (named &quot;bundle-symbolic-name&quot;)
1: 	 * identifying the symbolic name of a bundle that exports a package
1: 	 * specified in the Import-Package manifest header.
1: 	 * 
1: 	 * <p>
1: 	 * The attribute value is encoded in the Import-Package manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Import-Package: org.osgi.framework; bundle-symbolic-name=&quot;com.acme.module.test&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	BUNDLE_SYMBOLICNAME_ATTRIBUTE			= "bundle-symbolic-name";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;resolution&quot;) identifying the
1: 	 * resolution type in the Import-Package or Require-Bundle manifest header.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Import-Package or Require-Bundle
1: 	 * manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Import-Package: org.osgi.framework; resolution:=&quot;optional&quot;
1: 	 *     Require-Bundle: com.acme.module.test; resolution:=&quot;optional&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#RESOLUTION_MANDATORY
1: 	 * @see Constants#RESOLUTION_OPTIONAL
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	RESOLUTION_DIRECTIVE					= "resolution";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;mandatory&quot;) identifying
1: 	 * a mandatory resolution type. A mandatory resolution type indicates that
1: 	 * the import package or require bundle must be resolved when the bundle is
1: 	 * resolved. If such an import or require bundle cannot be resolved, the
1: 	 * module fails to resolve.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Import-Package or Require-Bundle
1: 	 * manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Import-Package: org.osgi.framework; resolution:=&quot;manditory&quot;
1: 	 *     Require-Bundle: com.acme.module.test; resolution:=&quot;manditory&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#RESOLUTION_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	RESOLUTION_MANDATORY					= "mandatory";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;optional&quot;) identifying
1: 	 * an optional resolution type. An optional resolution type indicates that
1: 	 * the import or require bundle is optional and the bundle may be resolved
1: 	 * without the import or require bundle being resolved. If the import or
1: 	 * require bundle is not resolved when the bundle is resolved, the import or
1: 	 * require bundle may not be resolved before the bundle is refreshed.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Import-Package or Require-Bundle
1: 	 * manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Import-Package: org.osgi.framework; resolution:=&quot;optional&quot;
1: 	 *     Require-Bundle: com.acme.module.test; resolution:=&quot;optional&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#RESOLUTION_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	RESOLUTION_OPTIONAL						= "optional";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;uses&quot;) identifying a list of
1: 	 * packages that an exported package uses.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Export-Package manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Export-Package: org.osgi.util.tracker; uses:=&quot;org.osgi.framework&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	USES_DIRECTIVE							= "uses";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;include&quot;).
1: 	 * <p>
1: 	 * This directive is used by the Import-Package manifest header to identify
1: 	 * a list of classes of the specified package which must be allowed to be
1: 	 * exported. The directive value is encoded in the Import-Package manifest
1: 	 * header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Import-Package: org.osgi.framework; include:=&quot;MyClass*&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * <p>
1: 	 * This directive is also used by the Bundle-ActivationPolicy manifest
1: 	 * header to identify the packages from which class loads will trigger lazy
1: 	 * activation. The directive value is encoded in the Bundle-ActivationPolicy
1: 	 * manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-ActivationPolicy: lazy; include:=&quot;org.osgi.framework&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	INCLUDE_DIRECTIVE						= "include";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;exclude&quot;).
1: 	 * <p>
1: 	 * This directive is used by the Export-Package manifest header to identify
1: 	 * a list of classes of the specified package which must not be allowed to
1: 	 * be exported. The directive value is encoded in the Export-Package
1: 	 * manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Export-Package: org.osgi.framework; exclude:=&quot;*Impl&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * <p>
1: 	 * This directive is also used by the Bundle-ActivationPolicy manifest
1: 	 * header to identify the packages from which class loads will not trigger
1: 	 * lazy activation. The directive value is encoded in the
1: 	 * Bundle-ActivationPolicy manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Bundle-ActivationPolicy: lazy; exclude:=&quot;org.osgi.framework&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	EXCLUDE_DIRECTIVE						= "exclude";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;mandatory&quot;) identifying names
1: 	 * of matching attributes which must be specified by matching Import-Package
1: 	 * statements in the Export-Package manifest header.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Export-Package manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Export-Package: org.osgi.framework; mandatory:=&quot;bundle-symbolic-name&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	MANDATORY_DIRECTIVE						= "mandatory";
1: 
1: 	/**
1: 	 * Manifest header directive (named &quot;visibility&quot;) identifying the
1: 	 * visibility of a reqiured bundle in the Require-Bundle manifest header.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Require-Bundle manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Require-Bundle: com.acme.module.test; visibility:=&quot;reexport&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#VISIBILITY_PRIVATE
1: 	 * @see Constants#VISIBILITY_REEXPORT
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	VISIBILITY_DIRECTIVE					= "visibility";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;private&quot;) identifying a
1: 	 * private visibility type. A private visibility type indicates that any
1: 	 * packages that are exported by the required bundle are not made visible on
1: 	 * the export signature of the requiring bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Require-Bundle manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Require-Bundle: com.acme.module.test; visibility:=&quot;private&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#VISIBILITY_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	VISIBILITY_PRIVATE						= "private";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;reexport&quot;) identifying
1: 	 * a reexport visibility type. A reexport visibility type indicates any
1: 	 * packages that are exported by the required bundle are re-exported by the
1: 	 * requiring bundle. Any arbitrary arbitrary matching attributes with which
1: 	 * they were exported by the required bundle are deleted.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Require-Bundle manifest header
1: 	 * like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Require-Bundle: com.acme.module.test; visibility:=&quot;reexport&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#VISIBILITY_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	VISIBILITY_REEXPORT						= "reexport";
1: 	/**
1: 	 * Manifest header directive (named &quot;extension&quot;) identifying the
1: 	 * type of the extension fragment.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Fragment-Host manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Fragment-Host: system.bundle; extension:=&quot;framework&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#EXTENSION_FRAMEWORK
1: 	 * @see Constants#EXTENSION_BOOTCLASSPATH
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	EXTENSION_DIRECTIVE						= "extension";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;framework&quot;) identifying
1: 	 * the type of extension fragment. An extension fragment type of framework
1: 	 * indicates that the extension fragment is to be loaded by the framework's
1: 	 * class loader.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Fragment-Host manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Fragment-Host: system.bundle; extension:=&quot;framework&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#EXTENSION_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	EXTENSION_FRAMEWORK						= "framework";
1: 
1: 	/**
1: 	 * Manifest header directive value (named &quot;bootclasspath&quot;)
1: 	 * identifying the type of extension fragment. An extension fragment type of
1: 	 * bootclasspath indicates that the extension fragment is to be loaded by
1: 	 * the boot class loader.
1: 	 * 
1: 	 * <p>
1: 	 * The directive value is encoded in the Fragment-Host manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *     Fragment-Host: system.bundle; extension:=&quot;bootclasspath&quot;
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#EXTENSION_DIRECTIVE
1: 	 * @since 1.3
1: 	 */
1: 	public final static String	EXTENSION_BOOTCLASSPATH					= "bootclasspath";
1: 
1: 	/**
1: 	 * Manifest header (named &quot;Bundle-ActivationPolicy&quot;) identifying
1: 	 * the bundle's activation policy.
1: 	 * <p>
1: 	 * The attribute value may be retrieved from the <code>Dictionary</code>
1: 	 * object returned by the <code>Bundle.getHeaders</code> method.
1: 	 * 
1: 	 * @since 1.4
1: 	 * @see Constants#ACTIVATION_LAZY
1: 	 * @see Constants#INCLUDE_DIRECTIVE
1: 	 * @see Constants#EXCLUDE_DIRECTIVE
1: 	 */
1: 	public final static String	BUNDLE_ACTIVATIONPOLICY					= "Bundle-ActivationPolicy";
1: 
1: 	/**
1: 	 * Bundle activation policy (named &quot;lazy&quot;) declaring the bundle
1: 	 * must be activated when the first class load is made from the bundle.
1: 	 * <p>
1: 	 * A bundle with the lazy activation policy that is started with the
1: 	 * {@link Bundle#START_ACTIVATION_POLICY START_ACTIVATION_POLICY} option
1: 	 * will wait in the {@link Bundle#STARTING STARTING} state until the first
1: 	 * class load from the bundle occurs. The bundle will then be activated
1: 	 * before the class is returned to the requestor.
1: 	 * <p>
1: 	 * The activation policy value is specified as in the
1: 	 * Bundle-ActivationPolicy manifest header like:
1: 	 * 
1: 	 * <pre>
1: 	 *       Bundle-ActivationPolicy: lazy
1: 	 * </pre>
1: 	 * 
1: 	 * @see Constants#BUNDLE_ACTIVATIONPOLICY
1: 	 * @see Bundle#start(int)
1: 	 * @see Bundle#START_ACTIVATION_POLICY
1: 	 * @since 1.4
1: 	 */
1: 	public final static String	ACTIVATION_LAZY							= "lazy";
1: 
1: }
============================================================================