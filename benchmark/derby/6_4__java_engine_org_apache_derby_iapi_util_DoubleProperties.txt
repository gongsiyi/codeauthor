1:eac0369: /*
1:7ecc1f2: 
1:a844e87:    Derby - Class org.apache.derby.iapi.util.DoubleProperties
1:7ecc1f2: 
1:11ec54f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11ec54f:    contributor license agreements.  See the NOTICE file distributed with
1:11ec54f:    this work for additional information regarding copyright ownership.
1:11ec54f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:11ec54f:    (the "License"); you may not use this file except in compliance with
1:11ec54f:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.util;
1:eac0369: 
1:1966619: import java.util.Collections;
1:eac0369: import java.util.Enumeration;
1:1966619: import java.util.HashSet;
1:1966619: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A properties object that links two independent
1:eac0369: 	properties together. The read property set is always
1:eac0369: 	searched first, with the write property set being
1:eac0369: 	second. But any put() calls are always made directly to
1:eac0369: 	the write object.
1:eac0369: 
1:1966619:     Only the put(), propertyNames() and getProperty() methods are supported
1:eac0369: 	by this class.
1:eac0369: */
1:eac0369: 
1:eac0369: public final class DoubleProperties extends Properties {
1:eac0369: 
1:eac0369: 	private final Properties read;
1:eac0369: 	private final Properties write;
1:eac0369: 
1:eac0369: 	public DoubleProperties(Properties read, Properties write) {
1:eac0369: 		this.read = read;
1:eac0369: 		this.write = write;
5:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object put(Object key, Object value) {
1:eac0369: 		return write.put(key, value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String getProperty(String key) {
1:eac0369: 
1:eac0369: 		return read.getProperty(key, write.getProperty(key));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String getProperty(String key, String defaultValue) {
1:eac0369: 		return read.getProperty(key, write.getProperty(key, defaultValue));
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:dfc9ab0: 	public Enumeration<Object> propertyNames() {
1:dfc9ab0:         HashSet<Object> names = new HashSet<Object>();
1:1966619:         addAllNames(write, names);
1:1966619:         addAllNames(read, names);
1:1966619:         return Collections.enumeration(names);
1:eac0369: 	}
1:1966619: 
1:1966619:     /**
1:1966619:      * Add all property names in the Properties object {@code src} to the
1:1966619:      * HashSet {@code dest}.
1:1966619:      */
1:dfc9ab0:     private static void addAllNames(Properties src, HashSet<Object> dest) {
1:1966619:         if (src != null) {
1:1966619:             for (Enumeration e = src.propertyNames(); e.hasMoreElements(); ) {
1:1966619:                 dest.add(e.nextElement());
1:1966619:             }
1:1966619:         }
1:1966619:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dfc9ab0
/////////////////////////////////////////////////////////////////////////
1: 	public Enumeration<Object> propertyNames() {
1:         HashSet<Object> names = new HashSet<Object>();
/////////////////////////////////////////////////////////////////////////
1:     private static void addAllNames(Properties src, HashSet<Object> dest) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1966619
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:     Only the put(), propertyNames() and getProperty() methods are supported
/////////////////////////////////////////////////////////////////////////
0:         HashSet names = new HashSet();
1:         addAllNames(write, names);
1:         addAllNames(read, names);
1:         return Collections.enumeration(names);
1: 
1:     /**
1:      * Add all property names in the Properties object {@code src} to the
1:      * HashSet {@code dest}.
1:      */
0:     private static void addAllNames(Properties src, HashSet dest) {
1:         if (src != null) {
1:             for (Enumeration e = src.propertyNames(); e.hasMoreElements(); ) {
1:                 dest.add(e.nextElement());
1:             }
1:         }
1:     }
commit:a844e87
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.util.DoubleProperties
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11ec54f
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class com.ihost.cs.DoubleProperties
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package com.ihost.cs
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.util;
1: 
0: import java.util.Properties;
1: import java.util.Enumeration;
1: 
1: /**
1: 	A properties object that links two independent
1: 	properties together. The read property set is always
1: 	searched first, with the write property set being
1: 	second. But any put() calls are always made directly to
1: 	the write object.
1: 
0:     Only the put(), keys() and getProperty() methods are supported
1: 	by this class.
1: */
1: 
1: public final class DoubleProperties extends Properties {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private final Properties read;
1: 	private final Properties write;
1: 
1: 	public DoubleProperties(Properties read, Properties write) {
1: 		this.read = read;
1: 		this.write = write;
1: 	}
1: 
1: 	public Object put(Object key, Object value) {
1: 		return write.put(key, value);
1: 	}
1: 
1: 	public String getProperty(String key) {
1: 
1: 		return read.getProperty(key, write.getProperty(key));
1: 	}
1: 
1: 	public String getProperty(String key, String defaultValue) {
1: 		return read.getProperty(key, write.getProperty(key, defaultValue));
1: 
1: 	}
1: 
0: 	public Enumeration propertyNames() {
1: 
0: 		Properties p = new Properties();
1: 
0: 		if (write != null) {
1: 
0: 			for (Enumeration e = write.propertyNames(); e.hasMoreElements(); ) {
0: 				String key = (String) e.nextElement();
0: 				p.put(key, write.getProperty(key));
1: 			}
1: 		}
1: 
0: 		if (read != null) {
0: 			for (Enumeration e = read.propertyNames(); e.hasMoreElements(); ) {
0: 				String key = (String) e.nextElement();
0: 				p.put(key, read.getProperty(key));
1: 			}
1: 		}
0: 		return p.keys();
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package com.ihost.cs
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.util;
0: 
0: import java.util.Properties;
0: import java.util.Enumeration;
0: 
0: /**
0: 	A properties object that links two independent
0: 	properties together. The read property set is always
0: 	searched first, with the write property set being
0: 	second. But any put() calls are always made directly to
0: 	the write object.
0: 
0:     Only the put(), keys() and getProperty() methods are supported
0: 	by this class.
0: */
0: 
0: public final class DoubleProperties extends Properties {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private final Properties read;
0: 	private final Properties write;
0: 
0: 	public DoubleProperties(Properties read, Properties write) {
0: 		this.read = read;
0: 		this.write = write;
0: 	}
0: 
0: 	public Object put(Object key, Object value) {
0: 		return write.put(key, value);
0: 	}
0: 
0: 	public String getProperty(String key) {
0: 
0: 		return read.getProperty(key, write.getProperty(key));
0: 	}
0: 
0: 	public String getProperty(String key, String defaultValue) {
0: 		return read.getProperty(key, write.getProperty(key, defaultValue));
0: 
0: 	}
0: 
0: 	public Enumeration propertyNames() {
0: 
0: 		Properties p = new Properties();
0: 
0: 		if (write != null) {
0: 
0: 			for (Enumeration e = write.propertyNames(); e.hasMoreElements(); ) {
0: 				String key = (String) e.nextElement();
0: 				p.put(key, write.getProperty(key));
0: 			}
0: 		}
0: 
0: 		if (read != null) {
0: 			for (Enumeration e = read.propertyNames(); e.hasMoreElements(); ) {
0: 				String key = (String) e.nextElement();
0: 				p.put(key, read.getProperty(key));
0: 			}
0: 		}
0: 		return p.keys();
0: 	}
0: }
============================================================================