1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Diagnosticable
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:2bc809f: import org.apache.derby.iapi.services.diag.Diagnosticable;
1:2bc809f: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.store.access.AccessFactory;
1:2bc809f: import org.apache.derby.iapi.store.access.ConglomerateController;
1:2bc809f: import org.apache.derby.iapi.store.access.TransactionController;
1:2bc809f: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:2bc809f: import org.apache.derby.iapi.store.raw.ContainerKey;
1:2bc809f: import org.apache.derby.iapi.store.raw.Page;
1:2bc809f: import org.apache.derby.iapi.store.raw.Transaction;
1:2bc809f: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_MultiIterations;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: import org.apache.derby.iapi.reference.Property;
1:2bc809f: 
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: // DEBUGGING:
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 
1:2bc809f:   This T_Diagnosticable class provides a sample of how to use the "Diagnostic"
1:2bc809f:   facility.  The classes methods are built to be called by a "values" or
1:2bc809f:   a "call" statement from "ij".  Eventually there will be some sort of 
1:2bc809f:   diagnostic monitor which will be used to call the various "D_*" routines.
1:2bc809f: 
1:2bc809f: **/
1:2bc809f: 
1:2bc809f: 
1:2bc809f: public class T_Diagnosticable extends T_MultiIterations
1:2bc809f: {
1:2bc809f:     private static final String testService = "DiagnosticableTest";
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     /* Constructors for This class: */
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * No arg Constructor.
1:2bc809f:      **/
1:2bc809f:     public T_Diagnosticable()
1:2bc809f:     {
1:2bc809f:     }
1:2bc809f: 
1:2bc809f:     /* Private/Protected methods of This class: */
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * Simple test of DiagnosticUtil interfaces.
1:2bc809f:      * <p>
1:2bc809f:      * Simple test of DiagnosticUtil.toDiagString() and 
1:2bc809f:      * DiagnosticUtil.findDiagnostic() interfaces.
1:2bc809f:      *
1:2bc809f: 	 * @exception  T_Fail  If test fails for some reason.
1:2bc809f:      **/
1:2bc809f:     private void t_001()
1:2bc809f:         throws T_Fail
1:2bc809f:     {
1:2bc809f:         // Create object with also has a diagnostic interface:
1:2bc809f:         Object diag_obj = new T_DiagTestClass1("object with diag interface");
1:2bc809f: 
1:2bc809f: 		// Create an object in a sub-class that doesn't have a D_ class, but
1:2bc809f: 		// its super-class does.
1:2bc809f: 		Object diagSubObj = new T_DiagTestClass1Sub("sub-class");
1:2bc809f: 
1:2bc809f:         // Create object with neither Diagnosticable:
1:39b3237:         Object obj = (long) 5;
1:2bc809f: 
1:2bc809f:         // Test just getting a single string back, from each type of object.
1:2bc809f:         String          str          = null;
1:2bc809f:         String          expected_str = null;
1:2bc809f:         Diagnosticable  helper_class = null;
1:2bc809f: 
1:2bc809f:         // Here the string should come from the Diagnostic object's diag().
1:2bc809f:         str          = DiagnosticUtil.toDiagString(diag_obj);
1:2bc809f:         expected_str = "D_T_DiagTestClass1: object with diag interface";
1:2bc809f: 
1:2bc809f:         if (str.compareTo(expected_str) != 0)
1:2bc809f:         {
1:2bc809f: 			throw T_Fail.testFailMsg(
1:2bc809f:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:2bc809f:                 "), expected: (" + expected_str + ").");
1:2bc809f:         }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:         // make sure right class was found.
1:2bc809f:       
1:2bc809f:         helper_class = DiagnosticUtil.findDiagnostic(diag_obj);
1:2bc809f:         
1:2bc809f:         if (!(helper_class instanceof D_T_DiagTestClass1))
1:2bc809f:             throw T_Fail.testFailMsg("Bad helper class lookup.");
1:2bc809f: 
1:2bc809f:         // make sure helper class gives right string.
1:2bc809f:         
1:2bc809f:         try
1:2bc809f:         {
1:2bc809f:             str = helper_class.diag();
1:2bc809f:         }
1:2bc809f:         catch (Throwable t)
1:2bc809f:         {
1:2bc809f: 			throw T_Fail.testFailMsg(
1:2bc809f:                 "Unexpected exception from helper_class.diag() call");
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         if (!str.equals(expected_str))
1:2bc809f:         {
1:2bc809f: 			throw T_Fail.testFailMsg(
1:2bc809f:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:2bc809f:                 "), expected: (" + expected_str + ").");
1:2bc809f:         }
1:2bc809f: 
1:2bc809f: 		// make sure the Diagnostic class picks up a super-version of the D_ class
1:2bc809f:         str          = DiagnosticUtil.toDiagString(diagSubObj);
1:2bc809f:         expected_str = "D_T_DiagTestClass1: sub-class";
1:2bc809f:         if (!str.equals(expected_str))
1:2bc809f:         {
1:2bc809f: 			throw T_Fail.testFailMsg(
1:2bc809f:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:2bc809f:                 "), expected: (" + expected_str + ").");
1:2bc809f:         }
1:2bc809f:         
1:2bc809f:         // Here the string should just be the system's default toString.
1:2bc809f:         str          = DiagnosticUtil.toDiagString(obj);
1:2bc809f:         expected_str = "5";
1:2bc809f: 
1:2bc809f:         if (str.compareTo(expected_str) != 0)
1:2bc809f:         {
1:2bc809f: 			throw T_Fail.testFailMsg(
1:2bc809f:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:2bc809f:                 "), expected: (" + expected_str + ").");
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         // check that lookup for this class return correctly returns null,
1:2bc809f:         // since help class does not exist.
1:2bc809f:         helper_class = DiagnosticUtil.findDiagnostic(obj);
1:2bc809f: 
1:2bc809f:         if (helper_class != null)
1:2bc809f:             throw T_Fail.testFailMsg("Bad helper class - should be null.");
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     /* Public Methods of T_MultiIterations class: */
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * Routine one once per invocation of the test by the driver.
1:2bc809f:      * <p>
1:2bc809f:      * Do work that should only be done once, no matter how many times
1:2bc809f:      * runTests() may be executed.
1:2bc809f:      *
1:2bc809f: 	 * @exception  T_Fail  Thrown on any error.
1:2bc809f:      **/
1:2bc809f:     protected void setupTest()
1:2bc809f: 		throws T_Fail
1:2bc809f:     {
1:2bc809f: 		// don't automatic boot this service if it gets left around
1:2bc809f: 		if (startParams == null) {
1:2bc809f: 			startParams = new Properties();
1:2bc809f: 		}
1:2bc809f: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1:2bc809f: 		// remove the service directory to ensure a clean run
1:2bc809f: 		startParams.put(Property.DELETE_ON_CREATE, Boolean.TRUE.toString());
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public String getModuleToTestProtocolName() {
1:2bc809f:         return("org.apache.derby.iapi.services.diag.DiagnosticUtil");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f:     /**
1:2bc809f:      * Driver routine for the btree secondary index tests.
1:2bc809f:      * <p>
1:2bc809f:      *
1:2bc809f: 	 * @exception  T_Fail  Throws T_Fail on any test failure.
1:2bc809f:      **/
1:2bc809f: 	protected void runTestSet() throws T_Fail
1:2bc809f: 	{
1:2bc809f:         out.println("Executing " + testService + " test.");
1:2bc809f: 
1:2bc809f:         t_001();
1:2bc809f: 
1:2bc809f:         out.println("Finished Executing " + testService + " test.");
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:         Object obj = (long) 5;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Diagnosticable
1: 
0:    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.diag.Diagnosticable;
1: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: 
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_MultiIterations;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import java.util.Properties;
1: 
1: // DEBUGGING:
1: 
1: /**
1: 
1:   This T_Diagnosticable class provides a sample of how to use the "Diagnostic"
1:   facility.  The classes methods are built to be called by a "values" or
1:   a "call" statement from "ij".  Eventually there will be some sort of 
1:   diagnostic monitor which will be used to call the various "D_*" routines.
1: 
1: **/
1: 
1: 
1: public class T_Diagnosticable extends T_MultiIterations
1: {
1:     private static final String testService = "DiagnosticableTest";
1: 
1: 
1:     /* Constructors for This class: */
1: 
1:     /**
1:      * No arg Constructor.
1:      **/
1:     public T_Diagnosticable()
1:     {
1:     }
1: 
1:     /* Private/Protected methods of This class: */
1: 
1:     /**
1:      * Simple test of DiagnosticUtil interfaces.
1:      * <p>
1:      * Simple test of DiagnosticUtil.toDiagString() and 
1:      * DiagnosticUtil.findDiagnostic() interfaces.
1:      *
1: 	 * @exception  T_Fail  If test fails for some reason.
1:      **/
1:     private void t_001()
1:         throws T_Fail
1:     {
1:         // Create object with also has a diagnostic interface:
1:         Object diag_obj = new T_DiagTestClass1("object with diag interface");
1: 
1: 		// Create an object in a sub-class that doesn't have a D_ class, but
1: 		// its super-class does.
1: 		Object diagSubObj = new T_DiagTestClass1Sub("sub-class");
1: 
1:         // Create object with neither Diagnosticable:
0:         Object obj = new Long(5);
1: 
1:         // Test just getting a single string back, from each type of object.
1:         String          str          = null;
1:         String          expected_str = null;
1:         Diagnosticable  helper_class = null;
1: 
1:         // Here the string should come from the Diagnostic object's diag().
1:         str          = DiagnosticUtil.toDiagString(diag_obj);
1:         expected_str = "D_T_DiagTestClass1: object with diag interface";
1: 
1:         if (str.compareTo(expected_str) != 0)
1:         {
1: 			throw T_Fail.testFailMsg(
1:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:                 "), expected: (" + expected_str + ").");
1:         }
1: 
1: 
1:         // make sure right class was found.
1:       
1:         helper_class = DiagnosticUtil.findDiagnostic(diag_obj);
1:         
1:         if (!(helper_class instanceof D_T_DiagTestClass1))
1:             throw T_Fail.testFailMsg("Bad helper class lookup.");
1: 
1:         // make sure helper class gives right string.
1:         
1:         try
1:         {
1:             str = helper_class.diag();
1:         }
1:         catch (Throwable t)
1:         {
1: 			throw T_Fail.testFailMsg(
1:                 "Unexpected exception from helper_class.diag() call");
1:         }
1: 
1:         if (!str.equals(expected_str))
1:         {
1: 			throw T_Fail.testFailMsg(
1:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:                 "), expected: (" + expected_str + ").");
1:         }
1: 
1: 		// make sure the Diagnostic class picks up a super-version of the D_ class
1:         str          = DiagnosticUtil.toDiagString(diagSubObj);
1:         expected_str = "D_T_DiagTestClass1: sub-class";
1:         if (!str.equals(expected_str))
1:         {
1: 			throw T_Fail.testFailMsg(
1:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:                 "), expected: (" + expected_str + ").");
1:         }
1:         
1:         // Here the string should just be the system's default toString.
1:         str          = DiagnosticUtil.toDiagString(obj);
1:         expected_str = "5";
1: 
1:         if (str.compareTo(expected_str) != 0)
1:         {
1: 			throw T_Fail.testFailMsg(
1:                 "DiagnosticUtil.toDiagString() failed, got: (" + str + 
1:                 "), expected: (" + expected_str + ").");
1:         }
1: 
1:         // check that lookup for this class return correctly returns null,
1:         // since help class does not exist.
1:         helper_class = DiagnosticUtil.findDiagnostic(obj);
1: 
1:         if (helper_class != null)
1:             throw T_Fail.testFailMsg("Bad helper class - should be null.");
1:     }
1: 
1: 
1:     /* Public Methods of T_MultiIterations class: */
1: 
1:     /**
1:      * Routine one once per invocation of the test by the driver.
1:      * <p>
1:      * Do work that should only be done once, no matter how many times
1:      * runTests() may be executed.
1:      *
1: 	 * @exception  T_Fail  Thrown on any error.
1:      **/
1:     protected void setupTest()
1: 		throws T_Fail
1:     {
1: 		// don't automatic boot this service if it gets left around
1: 		if (startParams == null) {
1: 			startParams = new Properties();
1: 		}
1: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1: 		// remove the service directory to ensure a clean run
1: 		startParams.put(Property.DELETE_ON_CREATE, Boolean.TRUE.toString());
1:     }
1: 
1: 	/*
1: 	** Methods required by T_Generic
1: 	*/
1: 
1: 	public String getModuleToTestProtocolName() {
1:         return("org.apache.derby.iapi.services.diag.DiagnosticUtil");
1: 	}
1: 
1:     /**
1:      * Driver routine for the btree secondary index tests.
1:      * <p>
1:      *
1: 	 * @exception  T_Fail  Throws T_Fail on any test failure.
1:      **/
1: 	protected void runTestSet() throws T_Fail
1: 	{
1:         out.println("Executing " + testService + " test.");
1: 
1:         t_001();
1: 
1:         out.println("Finished Executing " + testService + " test.");
1: 	}
1: }
============================================================================