1:273ce5e: /*
1:273ce5e:  *
1:273ce5e:  * Derby - Class org.apache.derbyTesting.junit.SupportFilesSetup
1:273ce5e:  *
1:273ce5e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:273ce5e:  * contributor license agreements.  See the NOTICE file distributed with
1:273ce5e:  * this work for additional information regarding copyright ownership.
1:273ce5e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:273ce5e:  * (the "License"); you may not use this file except in compliance with
1:273ce5e:  * the License.  You may obtain a copy of the License at
1:273ce5e:  *
1:273ce5e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:273ce5e:  *
1:273ce5e:  * Unless required by applicable law or agreed to in writing, 
1:273ce5e:  * software distributed under the License is distributed on an 
1:273ce5e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:273ce5e:  * either express or implied. See the License for the specific 
1:273ce5e:  * language governing permissions and limitations under the License.
1:273ce5e:  */
1:273ce5e: package org.apache.derbyTesting.junit;
8:273ce5e: 
1:273ce5e: import java.io.File;
1:273ce5e: import java.io.FileOutputStream;
1:273ce5e: import java.io.IOException;
1:273ce5e: import java.io.InputStream;
1:273ce5e: import java.io.OutputStream;
1:273ce5e: import java.net.MalformedURLException;
1:273ce5e: import java.net.URL;
1:273ce5e: import java.security.AccessController;
1:2510115: import java.security.PrivilegedAction;
1:273ce5e: import java.security.PrivilegedActionException;
1:2510115: import java.security.PrivilegedExceptionAction;
1:273ce5e: 
1:273ce5e: import junit.extensions.TestSetup;
1:273ce5e: import junit.framework.Test;
1:2510115: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:273ce5e: 
1:273ce5e: /**
1:273ce5e:  * A decorator that copies test resources from the classpath
1:273ce5e:  * into the file system at setUp time. Resources are named
1:273ce5e:  * relative to org/apache/derbyTesting/, e.g. the name
1:273ce5e:  * passed into the constructor should be something like
1:273ce5e:  * funtionTests/test/lang/mytest.sql
1:273ce5e:  * <BR>
1:273ce5e:  * Read only resources are placed into ${user.dir}/extin/name
1:273ce5e:  * Read-write resources are placed into ${user.dir}/extinout/name
1:273ce5e:  * write only output files can be created in ${user.dir}/extout
1:273ce5e:  * 
1:273ce5e:  * These locations map to entries in the test policy file that
1:273ce5e:  * have restricted permissions granted.
1:273ce5e:  * 
1:273ce5e:  * All the three folders are created even if no files are
1:273ce5e:  * copied into them.
1:273ce5e:  * 
1:273ce5e:  * In each case the name of a file is the base name of the resource,
1:273ce5e:  * no package structure is retained.
1:273ce5e:  * 
1:273ce5e:  * A test may access such a resource using either files or URLs.
1:273ce5e:  * The static utility methods must be used to obtain the location
1:273ce5e:  * of any resource. In the future this decorator may create sub-folders
1:273ce5e:  * to ensure that tests run in paralled do not interfere with each other.
1:273ce5e:  * 
1:273ce5e:  * tearDown removes the three folders and their contents.
1:273ce5e:  * 
1:273ce5e:  */
1:273ce5e: public class SupportFilesSetup extends TestSetup {
1:59a5a70: 
1:59a5a70:     public  static  final   String  EXTIN = "extin";
1:59a5a70:     public  static  final   String  EXTINOUT = "extinout";
1:59a5a70:     public  static  final   String  EXTOUT = "extout";
1:273ce5e:     
1:273ce5e:     private String[] readOnly;
1:273ce5e:     private String[] readWrite;
1:c9c3c8e:     private String[] readOnlyTargetFileNames;
1:c9c3c8e:     private String[] readWriteTargetFileNames;
1:273ce5e: 
1:273ce5e:     /**
1:273ce5e:      * Create all the folders but don't copy any resources.
1:273ce5e:      */
1:273ce5e:     public SupportFilesSetup(Test test)
1:273ce5e:     {
1:273ce5e:         this(test, (String[]) null, (String[]) null);
6:273ce5e:     }
1:e17a43d: 
1:273ce5e:     /**
1:273ce5e:      * Create all the folders and copy a set of resources into
1:273ce5e:      * the read only folder.
1:273ce5e:      */
1:273ce5e:     public SupportFilesSetup(Test test, String[] readOnly)
1:273ce5e:     {
1:c9c3c8e:         this(test, readOnly, (String[]) null, (String[]) null, (String[]) null);
1:e17a43d:     }
1:e17a43d:     
1:273ce5e:     /**
1:273ce5e:      * Create all the folders, copy a set of resources into
1:273ce5e:      * the read only folder and copy a set of resources into
1:273ce5e:      * the read write folder.
1:273ce5e:    */
1:273ce5e:     public SupportFilesSetup(Test test, String[] readOnly, String[] readWrite)
1:273ce5e:     {
1:c9c3c8e:         this(test, readOnly, readWrite, (String[]) null, (String[]) null);
1:c9c3c8e:     }
1:c9c3c8e:     
1:c9c3c8e:     /**
1:c9c3c8e:      * Create all the folders, copy a set of resources into
1:c9c3c8e:      * the read only folder and copy a set of resources into
1:c9c3c8e:      * the read write folder. If specified, use the specific target file
1:c9c3c8e:      * supplied by the caller.
1:c9c3c8e:      */
1:c9c3c8e:     public SupportFilesSetup
1:c9c3c8e:         (Test test, String[] readOnly, String[] readWrite, String[] readOnlyTargetFileNames, String[] readWriteTargetFileNames)
1:c9c3c8e:     {
1:273ce5e:         super(test);
1:273ce5e:         this.readOnly = readOnly;
1:273ce5e:         this.readWrite = readWrite;
1:c9c3c8e:         this.readOnlyTargetFileNames = readOnlyTargetFileNames;
1:c9c3c8e:         this.readWriteTargetFileNames = readWriteTargetFileNames;
1:273ce5e:     }
1:273ce5e:     
1:273ce5e:     protected void setUp() throws PrivilegedActionException, IOException
1:273ce5e:     {
1:59a5a70:         privCopyFiles(EXTIN, readOnly, readOnlyTargetFileNames);
1:59a5a70:         privCopyFiles(EXTINOUT, readWrite, readWriteTargetFileNames);
1:59a5a70:         privCopyFiles(EXTOUT, (String[]) null, (String[]) null);
1:273ce5e:     }
1:273ce5e:     
1:273ce5e:     protected void tearDown()
1:273ce5e:     {
1:59a5a70:         DropDatabaseSetup.removeDirectory(EXTIN);
1:59a5a70:         DropDatabaseSetup.removeDirectory(EXTINOUT);
1:59a5a70:         DropDatabaseSetup.removeDirectory(EXTOUT);
1:273ce5e:     }
1:273ce5e:     
1:59a5a70:     public  static   void privCopyFiles(final String dirName, final String[] resources, final String[] targetNames)
1:273ce5e:     throws PrivilegedActionException
1:273ce5e:     {
1:2510115:         AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
1:2510115:             public Void run() throws IOException, PrivilegedActionException {
1:c9c3c8e:               copyFiles(dirName, resources, targetNames);
2:c0a8467:               return null;
1:273ce5e:             }
1:273ce5e:         });
1:e3b570d: 
1:273ce5e:     }
1:273ce5e:     
1:59a5a70:     private static  void copyFiles(String dirName, String[] resources, String[] targetNames)
1:273ce5e:         throws PrivilegedActionException, IOException
1:273ce5e:     {
1:273ce5e:         File dir = new File(dirName);
1:273ce5e:         dir.mkdir();
1:767541b:         
1:273ce5e:         if (resources == null)
1:273ce5e:             return;
1:767541b: 
1:273ce5e:         for (int i = 0; i < resources.length; i++)
1:273ce5e:         {
1:273ce5e:             String name =
1:273ce5e:                 "org/apache/derbyTesting/".concat(resources[i]);
1:273ce5e:             
1:c9c3c8e:             String baseName;
1:c9c3c8e: 
1:c9c3c8e:             if ( targetNames == null )
1:c9c3c8e:             {
1:c9c3c8e:                 // by default, just the same file name as the source file
1:c9c3c8e:                 baseName = name.substring(name.lastIndexOf('/') + 1);
1:c9c3c8e:             }
1:c9c3c8e:             else
1:c9c3c8e:             {
1:c9c3c8e:                 // we let the caller override the target file name
1:c9c3c8e:                 baseName = targetNames[ i ];
1:c9c3c8e:             }
1:273ce5e:             
1:c9c3c8e:                         URL url = BaseTestCase.getTestResource(name);
1:273ce5e:             assertNotNull(name, url);
1:273ce5e:             
1:273ce5e:             InputStream in = BaseTestCase.openTestResource(url);
1:273ce5e:             
1:273ce5e:             File copy = new File(dir, baseName);
1:273ce5e:             copy.delete();
1:273ce5e:             
1:273ce5e:             OutputStream out = new FileOutputStream(copy);
1:273ce5e:             
1:273ce5e:             byte[] buf = new byte[32*1024];
1:273ce5e:             
1:273ce5e:             for (;;) {
1:273ce5e:                 int read = in.read(buf);
1:273ce5e:                 if (read == -1)
1:273ce5e:                     break;
1:273ce5e:                 out.write(buf, 0, read);
1:273ce5e:             }
1:273ce5e:             in.close();
1:273ce5e:             out.flush();
1:273ce5e:             out.close();
1:273ce5e:         }
1:273ce5e:     }
1:273ce5e:     
1:e3b570d:     /**
1:273ce5e:      * Obtain the URL to the local copy of a read-only resource.
1:92a2169:      * @param name Base name for the resouce.
1:273ce5e:      */
1:273ce5e:     public static URL getReadOnlyURL(String name) throws MalformedURLException
1:273ce5e:     {
1:767541b:         return getURL(getReadOnly(name));
1:273ce5e:     }
1:273ce5e:     /**
1:273ce5e:      * Obtain the URL to the local copy of a read-write resource.
3:273ce5e:      * @param name Base name for the resouce.
1:273ce5e:      */
1:273ce5e:     public static URL getReadWriteURL(String name) throws MalformedURLException
1:273ce5e:     {
1:767541b:         return getURL(getReadWrite(name));
1:273ce5e:     }
1:273ce5e:     /**
1:273ce5e:      * Obtain the URL to the local copy of a write-only resource.
1:273ce5e:      * @param name Base name for the resouce.
1:273ce5e:      */
1:273ce5e:     public static URL getWriteOnlyURL(String name) throws MalformedURLException
1:273ce5e:     {
1:767541b:         return getURL(getWriteOnly(name));
1:273ce5e:     }
1:273ce5e:     
1:273ce5e:     
1:273ce5e:     /**
1:273ce5e:      * Obtain a File for the local copy of a read-only resource.
1:273ce5e:      * @param name Base name for the resouce.
1:273ce5e:      */
1:273ce5e:     public static File getReadOnly(String name)
1:273ce5e:     {
1:59a5a70:         return getFile(EXTIN, name);
1:273ce5e:     }
1:92a2169:     
1:92a2169:     /**
1:92a2169:      * Get the full name of the file.
1:2510115:      * @param name Base name for the resource.
1:92a2169:      */
1:2510115:     public static String getReadOnlyFileName(final String name)
1:92a2169:     {
1:2510115:         return AccessController.doPrivileged(
1:2510115:                 new PrivilegedAction<String>() {
1:2510115:             public String run() {
1:2510115:                 return getReadOnly(name).getAbsolutePath();
1:92a2169:             }
1:2510115:         });
1:92a2169:     }
1:92a2169:     
1:273ce5e:     /**
1:e3b570d:      * Get the full name of the file.
1:e3b570d:      * @param name short name of file
1:e3b570d:      * @return absolute path of file in EXTINOUT
1:e3b570d:      */
1:e3b570d:     public static String getReadWriteFileName(final String name)
1:e3b570d:     {
1:e3b570d:         return AccessController.doPrivileged(
1:e3b570d:                 new PrivilegedAction<String>() {
1:e3b570d:             public String run() {
1:e3b570d:                 return getReadWrite(name).getAbsolutePath();
1:92a2169:             }
1:e3b570d:         });
1:92a2169:     }
1:e3b570d:     
1:273ce5e:     /**
1:273ce5e:      * Obtain a File for the local copy of a read-write resource.
1:0c5bc3a:      * @param name Base name for the resource.
1:273ce5e:      */
1:273ce5e:     public static File getReadWrite(String name)
1:273ce5e:     {
1:59a5a70:         return getFile(EXTINOUT, name);
1:e3b570d:     }
1:273ce5e:     /**
1:273ce5e:      * Obtain a File for the local copy of a write-only resource.
1:273ce5e:      * @param name Base name for the resouce.
1:273ce5e:      */
1:273ce5e:     public static File getWriteOnly(String name)
1:273ce5e:     {
1:59a5a70:         return getFile(EXTOUT, name);
1:e3b570d:     }
1:273ce5e:     
1:273ce5e:     private static File getFile(String dirName, String name)
1:273ce5e:     {
1:273ce5e:         File dir = new File(dirName);
1:273ce5e:         return new File(dir, name);
1:767541b:     }
1:767541b:     
1:767541b:     private static URL getURL(final File file) throws MalformedURLException
1:767541b:     {
1:92a2169:         try {
1:2510115:             return AccessController.doPrivileged(
1:2510115:                     new PrivilegedExceptionAction<URL>() {
1:2510115:                 public URL run() throws MalformedURLException {
1:eec86ed:                     return file.toURI().toURL();
1:767541b:                 }
1:2510115:             });
1:92a2169:         } catch (PrivilegedActionException e) {
1:767541b:             throw (MalformedURLException) e.getException();
1:e17a43d:         } 
1:e17a43d:     }
1:e17a43d: 
1:e17a43d: 
1:c0a8467:     public static void deleteFile(final String fileName) 
1:e17a43d:     {
1:c670aa4:         deleteFile( new File(fileName) );
1:c670aa4:     }
1:c670aa4: 
1:c670aa4:     public static void deleteFile(final File file ) 
1:c670aa4:     {
1:c670aa4:         if (PrivilegedFileOpsForTests.exists(file)) {
1:c670aa4:             assertTrue(PrivilegedFileOpsForTests.delete(file));
1:2510115:         }
1:767541b:     }
1:767541b: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c670aa4
/////////////////////////////////////////////////////////////////////////
1:         deleteFile( new File(fileName) );
1:     }
1: 
1:     public static void deleteFile(final File file ) 
1:     {
1:         if (PrivilegedFileOpsForTests.exists(file)) {
1:             assertTrue(PrivilegedFileOpsForTests.delete(file));
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1:                     return file.toURI().toURL();
commit:92a2169
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Get the full name of the file.
1:      * @param name Base name for the resouce.
1:      */
0:     public static String getReadOnlyFileName(String name)
0:         throws Exception
1:     {
0:         final   String  finalName = name;
1:         try {
0:             return (String) AccessController.doPrivileged
0:             (new java.security.PrivilegedExceptionAction(){
1: 
0:                 public Object run() throws MalformedURLException{
0:                     return getReadOnly(  finalName ).getAbsolutePath();
1:                 }
1:             }
0:              );
1:         } catch (PrivilegedActionException e) {
0:             throw e.getException();
1:         } 
1:     }
commit:59a5a70
/////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   String  EXTIN = "extin";
1:     public  static  final   String  EXTINOUT = "extinout";
1:     public  static  final   String  EXTOUT = "extout";
/////////////////////////////////////////////////////////////////////////
1:         privCopyFiles(EXTIN, readOnly, readOnlyTargetFileNames);
1:         privCopyFiles(EXTINOUT, readWrite, readWriteTargetFileNames);
1:         privCopyFiles(EXTOUT, (String[]) null, (String[]) null);
1:         DropDatabaseSetup.removeDirectory(EXTIN);
1:         DropDatabaseSetup.removeDirectory(EXTINOUT);
1:         DropDatabaseSetup.removeDirectory(EXTOUT);
1:     public  static   void privCopyFiles(final String dirName, final String[] resources, final String[] targetNames)
/////////////////////////////////////////////////////////////////////////
1:     private static  void copyFiles(String dirName, String[] resources, String[] targetNames)
/////////////////////////////////////////////////////////////////////////
1:         return getFile(EXTIN, name);
/////////////////////////////////////////////////////////////////////////
1:         return getFile(EXTINOUT, name);
/////////////////////////////////////////////////////////////////////////
1:         return getFile(EXTOUT, name);
commit:c9c3c8e
/////////////////////////////////////////////////////////////////////////
1:     private String[] readOnlyTargetFileNames;
1:     private String[] readWriteTargetFileNames;
/////////////////////////////////////////////////////////////////////////
1:         this(test, readOnly, (String[]) null, (String[]) null, (String[]) null);
/////////////////////////////////////////////////////////////////////////
1:         this(test, readOnly, readWrite, (String[]) null, (String[]) null);
1:     }
1:     
1:     /**
1:      * Create all the folders, copy a set of resources into
1:      * the read only folder and copy a set of resources into
1:      * the read write folder. If specified, use the specific target file
1:      * supplied by the caller.
1:      */
1:     public SupportFilesSetup
1:         (Test test, String[] readOnly, String[] readWrite, String[] readOnlyTargetFileNames, String[] readWriteTargetFileNames)
1:     {
1:         this.readOnlyTargetFileNames = readOnlyTargetFileNames;
1:         this.readWriteTargetFileNames = readWriteTargetFileNames;
0:         privCopyFiles("extin", readOnly, readOnlyTargetFileNames);
0:         privCopyFiles("extinout", readWrite, readWriteTargetFileNames);
0:         privCopyFiles("extout", (String[]) null, (String[]) null);
/////////////////////////////////////////////////////////////////////////
0:     private void privCopyFiles(final String dirName, final String[] resources, final String[] targetNames)
1:               copyFiles(dirName, resources, targetNames);
0:     private void copyFiles(String dirName, String[] resources, String[] targetNames)
/////////////////////////////////////////////////////////////////////////
1:             String baseName;
1: 
1:             if ( targetNames == null )
1:             {
1:                 // by default, just the same file name as the source file
1:                 baseName = name.substring(name.lastIndexOf('/') + 1);
1:             }
1:             else
1:             {
1:                 // we let the caller override the target file name
1:                 baseName = targetNames[ i ];
1:             }
1:                         URL url = BaseTestCase.getTestResource(name);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:      * @param name Base name for the resource.
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:e3b570d
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Get the full name of the file.
1:      * @param name short name of file
1:      * @return absolute path of file in EXTINOUT
1:      */
1:     public static String getReadWriteFileName(final String name)
1:     {
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<String>() {
1:             public String run() {
1:                 return getReadWrite(name).getAbsolutePath();
1:             }
1:         });
1:     }
1:     
commit:c0a8467
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.Assert;
/////////////////////////////////////////////////////////////////////////
1:     public static void deleteFile(final String fileName) 
0:         AccessController.doPrivileged
0:                         File delFile = new File(fileName);
0:                         if (!delFile.exists())
1:                                 return null;
0:                          Assert.assertTrue(delFile.delete());
1:                          return null;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2510115
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedExceptionAction;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
1:         AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
1:             public Void run() throws IOException, PrivilegedActionException {
/////////////////////////////////////////////////////////////////////////
1:      * @param name Base name for the resource.
1:     public static String getReadOnlyFileName(final String name)
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<String>() {
1:             public String run() {
1:                 return getReadOnly(name).getAbsolutePath();
1:         });
/////////////////////////////////////////////////////////////////////////
1:             return AccessController.doPrivileged(
1:                     new PrivilegedExceptionAction<URL>() {
1:                 public URL run() throws MalformedURLException {
1:             });
/////////////////////////////////////////////////////////////////////////
0:         File f = new File(fileName);
0:         if (PrivilegedFileOpsForTests.exists(f)) {
0:             assertTrue(PrivilegedFileOpsForTests.delete(f));
1:         }
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:e17a43d
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:     public static boolean deleteFile(final String fileName) 
1:     {
0:         Boolean ret = (Boolean) AccessController.doPrivileged
0:             (new java.security.PrivilegedAction() {
1:                         
0:                     public Object run() {
0:                         return Boolean.valueOf((new File(fileName)).delete());
1:                     }
1:                 }
0:              );
1:             
0:         return ret.booleanValue();
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:767541b
/////////////////////////////////////////////////////////////////////////
1:         return getURL(getReadOnly(name));
/////////////////////////////////////////////////////////////////////////
1:         return getURL(getReadWrite(name));
/////////////////////////////////////////////////////////////////////////
1:         return getURL(getWriteOnly(name));
/////////////////////////////////////////////////////////////////////////
1:     
1:     private static URL getURL(final File file) throws MalformedURLException
1:     {
0:         try {
0:             return (URL) AccessController.doPrivileged
0:             (new java.security.PrivilegedExceptionAction(){
1: 
0:                 public Object run() throws MalformedURLException{
0:                 return file.toURL();
1: 
1:                 }
1:             }
0:              );
0:         } catch (PrivilegedActionException e) {
1:             throw (MalformedURLException) e.getException();
1:         } 
1:     }
commit:273ce5e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.SupportFilesSetup
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: 
1: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: 
1: /**
1:  * A decorator that copies test resources from the classpath
1:  * into the file system at setUp time. Resources are named
1:  * relative to org/apache/derbyTesting/, e.g. the name
1:  * passed into the constructor should be something like
1:  * funtionTests/test/lang/mytest.sql
1:  * <BR>
1:  * Read only resources are placed into ${user.dir}/extin/name
1:  * Read-write resources are placed into ${user.dir}/extinout/name
1:  * write only output files can be created in ${user.dir}/extout
1:  * 
1:  * These locations map to entries in the test policy file that
1:  * have restricted permissions granted.
1:  * 
1:  * All the three folders are created even if no files are
1:  * copied into them.
1:  * 
1:  * In each case the name of a file is the base name of the resource,
1:  * no package structure is retained.
1:  * 
1:  * A test may access such a resource using either files or URLs.
1:  * The static utility methods must be used to obtain the location
1:  * of any resource. In the future this decorator may create sub-folders
1:  * to ensure that tests run in paralled do not interfere with each other.
1:  * 
1:  * tearDown removes the three folders and their contents.
1:  * 
1:  */
1: public class SupportFilesSetup extends TestSetup {
1:     
1:     private String[] readOnly;
1:     private String[] readWrite;
1: 
1:     /**
1:      * Create all the folders but don't copy any resources.
1:      */
1:     public SupportFilesSetup(Test test)
1:     {
1:         this(test, (String[]) null, (String[]) null);
1:     }
1: 
1:     /**
1:      * Create all the folders and copy a set of resources into
1:      * the read only folder.
1:      */
1:     public SupportFilesSetup(Test test, String[] readOnly)
1:     {
0:         this(test, readOnly, (String[]) null);
1:     }
1:     
1:     /**
1:      * Create all the folders, copy a set of resources into
1:      * the read only folder and copy a set of resources into
1:      * the read write folder.
1:    */
1:     public SupportFilesSetup(Test test, String[] readOnly, String[] readWrite)
1:     {
1:         super(test);
1:         this.readOnly = readOnly;
1:         this.readWrite = readWrite;
1:     }
1:     
1:     protected void setUp() throws PrivilegedActionException, IOException
1:     {
0:         privCopyFiles("extin", readOnly);
0:         privCopyFiles("extinout", readWrite);
0:         privCopyFiles("extout", (String[]) null);
1:     }
1:     
1:     protected void tearDown()
1:     {
0:         DropDatabaseSetup.removeDirectory("extin");
0:         DropDatabaseSetup.removeDirectory("extinout");
0:         DropDatabaseSetup.removeDirectory("extout");
1:     }
1:     
0:     private void privCopyFiles(final String dirName, final String[] resources)
1:     throws PrivilegedActionException
1:     {
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedExceptionAction(){
1:             
0:             public Object run() throws IOException, PrivilegedActionException { 
0:               copyFiles(dirName, resources);
0:               return null;
1:             }
1:         });
1: 
1:     }
1:     
0:     private void copyFiles(String dirName, String[] resources)
1:         throws PrivilegedActionException, IOException
1:     {
1:         File dir = new File(dirName);
1:         dir.mkdir();
1:         
1:         if (resources == null)
1:             return;
1: 
1:         for (int i = 0; i < resources.length; i++)
1:         {
1:             String name =
1:                 "org/apache/derbyTesting/".concat(resources[i]);
1:             
0:             String baseName = name.substring(name.lastIndexOf('/') + 1);
1:             
1:             
0:             URL url = BaseTestCase.getTestResource(name);
1:             assertNotNull(name, url);
1:             
1:             InputStream in = BaseTestCase.openTestResource(url);
1:             
1:             File copy = new File(dir, baseName);
1:             copy.delete();
1:             
1:             OutputStream out = new FileOutputStream(copy);
1:             
1:             byte[] buf = new byte[32*1024];
1:             
1:             for (;;) {
1:                 int read = in.read(buf);
1:                 if (read == -1)
1:                     break;
1:                 out.write(buf, 0, read);
1:             }
1:             in.close();
1:             out.flush();
1:             out.close();
1:         }
1:     }
1:     
1:     /**
1:      * Obtain the URL to the local copy of a read-only resource.
1:      * @param name Base name for the resouce.
1:      */
1:     public static URL getReadOnlyURL(String name) throws MalformedURLException
1:     {
0:         return getReadOnly(name).toURL();
1:     }
1:     /**
1:      * Obtain the URL to the local copy of a read-write resource.
1:      * @param name Base name for the resouce.
1:      */
1:     public static URL getReadWriteURL(String name) throws MalformedURLException
1:     {
0:         return getReadWrite(name).toURL();
1:     }
1:     /**
1:      * Obtain the URL to the local copy of a write-only resource.
1:      * @param name Base name for the resouce.
1:      */
1:     public static URL getWriteOnlyURL(String name) throws MalformedURLException
1:     {
0:         return getWriteOnly(name).toURL();
1:     }
1:     
1:     
1:     /**
1:      * Obtain a File for the local copy of a read-only resource.
1:      * @param name Base name for the resouce.
1:      */
1:     public static File getReadOnly(String name)
1:     {
0:         return getFile("extin", name);
1:     }
1:     /**
1:      * Obtain a File for the local copy of a read-write resource.
1:      * @param name Base name for the resouce.
1:      */
1:     public static File getReadWrite(String name)
1:     {
0:         return getFile("extinout", name);
1:     }
1:     /**
1:      * Obtain a File for the local copy of a write-only resource.
1:      * @param name Base name for the resouce.
1:      */
1:     public static File getWriteOnly(String name)
1:     {
0:         return getFile("extout", name);
1:     }
1:     
1:     private static File getFile(String dirName, String name)
1:     {
1:         File dir = new File(dirName);
1:         return new File(dir, name);
1:     }
1: }
============================================================================