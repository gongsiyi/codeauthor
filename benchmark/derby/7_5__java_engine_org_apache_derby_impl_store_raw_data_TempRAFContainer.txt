1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.TempRAFContainer
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.data.BaseContainerHandle;
1:eac0369: import org.apache.derby.impl.store.raw.data.BasePage;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFactory;
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	needsSync is never true - DONE
1:eac0369: 	An exception never marks the store as corrupt
1:eac0369: 	clean() does not stubbify
1:eac0369: 	preAllocate() does nothing - DONE
1:eac0369: 	getFileName() returns a file in the tmp directory - DONE
1:eac0369: 	flushAll does nothing - DONE
1:eac0369: 	file descriptor is never synced
1:eac0369: */
1:eac0369: class TempRAFContainer extends RAFContainer {
1:eac0369: 
1:eac0369: 	protected int inUseCount;
1:eac0369: 
1:eac0369: 	TempRAFContainer(BaseDataFileFactory factory) {
1:eac0369: 		super(factory);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public Cacheable setIdentity(Object key) throws StandardException {
1:eac0369: 
1:eac0369: 		ContainerKey newIdentity = (ContainerKey) key;
1:eac0369: 		if (newIdentity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT) {
1:eac0369: 
1:c6ca304: 			FileContainer realContainer =
1:c6ca304: 					(FileContainer) dataFactory.newContainerObject();
1:eac0369: 			return realContainer.setIdent(newIdentity);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return super.setIdentity(newIdentity);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
1:eac0369: 
1:eac0369: 		ContainerKey newIdentity = (ContainerKey) key;
1:eac0369: 
1:eac0369: 		if (newIdentity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT) {
1:c6ca304: 			Cacheable realContainer = dataFactory.newContainerObject();
1:eac0369: 			return realContainer.createIdentity(newIdentity, createParameter);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return createIdent(newIdentity, createParameter);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException
1:eac0369: 	{
1:eac0369: 		// discard all of my pages in the cache
1:eac0369: 		pageCache.discard(identity);
1:eac0369: 		
1:eac0369: 		synchronized(this) {	
1:eac0369: 			// prevent anybody from looking at this container again
1:eac0369: 			setDroppedState(true);
1:eac0369: 			setCommittedDropState(true);
1:eac0369: 			setDirty(false);
1:eac0369: 			needsSync = false;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		removeFile(getFileName(identity, false, false, false));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Preallocate page.  Since we don't sync when we write page anyway, no
1:eac0369: 		need to preallocate page.
1:eac0369: 	*/
1:eac0369: 	protected int preAllocate(long lastPreallocPagenum, int preAllocSize)
1:eac0369: 	{
1:eac0369: 		return 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write the page, if it's within range of the current page range of the container.
1:eac0369: 		If we do write it then don't request that it be synced.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	protected void writePage(long pageNumber, byte[] pageData, boolean syncPage) throws IOException, StandardException {
1:eac0369: 		if (!this.getDroppedState()) {
1:eac0369: 			super.writePage(pageNumber, pageData, false);
1:eac0369: 		}
1:eac0369: 		needsSync = false;
1:eac0369: 	}
1:eac0369: 
1:7a92d1f: 	StorageFile getFileName(ContainerKey identity, boolean stub,
1:eac0369:         boolean errorOK, boolean tryAlternatePath)
1:eac0369: 	{
1:eac0369: 		return privGetFileName( identity, stub, errorOK, tryAlternatePath);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected StorageFile privGetFileName(ContainerKey identity, boolean stub,
1:eac0369:         boolean errorOK, boolean tryAlternatePath)
1:eac0369: 	{
1:eac0369: 		return dataFactory.storageFactory.newStorageFile( dataFactory.storageFactory.getTempDir(),
1:eac0369:                                                     "T" + identity.getContainerId() + ".tmp");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Add a page without locking the container, only one user will be accessing this
1:eac0369: 		table at a time.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public Page addPage(BaseContainerHandle handle, boolean isOverflow) throws StandardException {
1:eac0369: 
1:eac0369: 		BasePage newPage = newPage(handle, (RawTransaction) null, handle, isOverflow);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(newPage.isLatched());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return newPage;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void truncate(BaseContainerHandle handle) throws StandardException {
1:eac0369: 
1:eac0369: 		// stop anyone from writing any of my pages out
1:eac0369: 		synchronized(this)
1:eac0369: 		{
1:eac0369: 			setDroppedState(true);
1:eac0369: 			setCommittedDropState(true);
1:eac0369: 			setDirty(false);
1:eac0369: 			needsSync = false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// discard all of my pages in the cache
1:eac0369: 		while (pageCache.discard(identity) != true)
1:eac0369: 			;
1:eac0369: 
1:eac0369: 		removeFile(getFileName(identity, false, true, false));
1:eac0369: 
1:eac0369: 		createIdent(identity, this);
1:eac0369: 
1:eac0369: 		addPage(handle, false).unlatch();
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Lock the container and mark the container as in-use by this container handle.
1:eac0369: 
1:eac0369: 		@param droppedOK if true, use this container even if it is dropped.,
1:eac0369: 		@return true if the container can be used, false if it has been dropped
1:eac0369: 		since the lock was requested and droppedOK is not true.
1:eac0369: 
1:eac0369: 		@exception StandardException I cannot be opened for update.
1:eac0369: 	*/
1:eac0369: 	protected boolean use(BaseContainerHandle handle, boolean forUpdate,
1:eac0369: 						  boolean droppedOK) 
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		if (super.use(handle, forUpdate, droppedOK)) {
1:eac0369: 			inUseCount++;
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Discontinue use of this container. Note that the unlockContainer
1:eac0369: 		call made from this method may not release any locks. The container
1:eac0369: 		lock may be held until the end of the transaction.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	protected void letGo(BaseContainerHandle handle) {
1:eac0369: 
1:eac0369: 		inUseCount--;
1:eac0369: 		super.letGo(handle);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns true if only a single handle is connected to this container.
1:eac0369: 	*/
1:eac0369: 	public boolean isSingleUser() {
1:eac0369: 		return inUseCount == 1;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c6ca304
/////////////////////////////////////////////////////////////////////////
1: 			FileContainer realContainer =
1: 					(FileContainer) dataFactory.newContainerObject();
/////////////////////////////////////////////////////////////////////////
1: 			Cacheable realContainer = dataFactory.newContainerObject();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1: 	StorageFile getFileName(ContainerKey identity, boolean stub,
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.TempRAFContainer
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.impl.store.raw.data.BaseContainerHandle;
1: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: 
1: import org.apache.derby.io.StorageFactory;
1: import org.apache.derby.io.StorageFile;
1: 
1: import java.io.IOException;
1: 
1: /**
1: 	needsSync is never true - DONE
1: 	An exception never marks the store as corrupt
1: 	clean() does not stubbify
1: 	preAllocate() does nothing - DONE
1: 	getFileName() returns a file in the tmp directory - DONE
1: 	flushAll does nothing - DONE
1: 	file descriptor is never synced
1: */
1: class TempRAFContainer extends RAFContainer {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected int inUseCount;
1: 
1: 	TempRAFContainer(BaseDataFileFactory factory) {
1: 		super(factory);
1: 	}
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public Cacheable setIdentity(Object key) throws StandardException {
1: 
1: 		ContainerKey newIdentity = (ContainerKey) key;
1: 		if (newIdentity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT) {
1: 
0: 			RAFContainer realContainer = new RAFContainer(dataFactory);
1: 			return realContainer.setIdent(newIdentity);
1: 		}
1: 
1: 		return super.setIdentity(newIdentity);
1: 
1: 	}
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
1: 
1: 		ContainerKey newIdentity = (ContainerKey) key;
1: 
1: 		if (newIdentity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT) {
0: 			RAFContainer realContainer = new RAFContainer(dataFactory);
1: 			return realContainer.createIdentity(newIdentity, createParameter);
1: 		}
1: 
1: 		return createIdent(newIdentity, createParameter);
1: 	}
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException
1: 	{
1: 		// discard all of my pages in the cache
1: 		pageCache.discard(identity);
1: 		
1: 		synchronized(this) {	
1: 			// prevent anybody from looking at this container again
1: 			setDroppedState(true);
1: 			setCommittedDropState(true);
1: 			setDirty(false);
1: 			needsSync = false;
1: 
1: 		}
1: 
1: 		removeFile(getFileName(identity, false, false, false));
1: 	}
1: 
1: 	/**
1: 		Preallocate page.  Since we don't sync when we write page anyway, no
1: 		need to preallocate page.
1: 	*/
1: 	protected int preAllocate(long lastPreallocPagenum, int preAllocSize)
1: 	{
1: 		return 0;
1: 	}
1: 
1: 
1: 	/**
1: 		Write the page, if it's within range of the current page range of the container.
1: 		If we do write it then don't request that it be synced.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	protected void writePage(long pageNumber, byte[] pageData, boolean syncPage) throws IOException, StandardException {
1: 		if (!this.getDroppedState()) {
1: 			super.writePage(pageNumber, pageData, false);
1: 		}
1: 		needsSync = false;
1: 	}
1: 
0: 	protected StorageFile getFileName(ContainerKey identity, boolean stub,
1:         boolean errorOK, boolean tryAlternatePath)
1: 	{
1: 		return privGetFileName( identity, stub, errorOK, tryAlternatePath);
1: 	}
1: 
1: 	protected StorageFile privGetFileName(ContainerKey identity, boolean stub,
1:         boolean errorOK, boolean tryAlternatePath)
1: 	{
1: 		return dataFactory.storageFactory.newStorageFile( dataFactory.storageFactory.getTempDir(),
1:                                                     "T" + identity.getContainerId() + ".tmp");
1: 	}
1: 
1: 	/**
1: 		Add a page without locking the container, only one user will be accessing this
1: 		table at a time.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public Page addPage(BaseContainerHandle handle, boolean isOverflow) throws StandardException {
1: 
1: 		BasePage newPage = newPage(handle, (RawTransaction) null, handle, isOverflow);
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(newPage.isLatched());
1: 		}
1: 
1: 		return newPage;
1: 	}
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void truncate(BaseContainerHandle handle) throws StandardException {
1: 
1: 		// stop anyone from writing any of my pages out
1: 		synchronized(this)
1: 		{
1: 			setDroppedState(true);
1: 			setCommittedDropState(true);
1: 			setDirty(false);
1: 			needsSync = false;
1: 		}
1: 
1: 		// discard all of my pages in the cache
1: 		while (pageCache.discard(identity) != true)
1: 			;
1: 
1: 		removeFile(getFileName(identity, false, true, false));
1: 
1: 		createIdent(identity, this);
1: 
1: 		addPage(handle, false).unlatch();
1: 	}
1: 	/**
1: 		Lock the container and mark the container as in-use by this container handle.
1: 
1: 		@param droppedOK if true, use this container even if it is dropped.,
1: 		@return true if the container can be used, false if it has been dropped
1: 		since the lock was requested and droppedOK is not true.
1: 
1: 		@exception StandardException I cannot be opened for update.
1: 	*/
1: 	protected boolean use(BaseContainerHandle handle, boolean forUpdate,
1: 						  boolean droppedOK) 
1: 		throws StandardException {
1: 
1: 		if (super.use(handle, forUpdate, droppedOK)) {
1: 			inUseCount++;
1: 			return true;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
1: 		Discontinue use of this container. Note that the unlockContainer
1: 		call made from this method may not release any locks. The container
1: 		lock may be held until the end of the transaction.
1: 
1: 	*/
1: 	protected void letGo(BaseContainerHandle handle) {
1: 
1: 		inUseCount--;
1: 		super.letGo(handle);
1: 	}
1: 
1: 
1: 	/**
1: 		Returns true if only a single handle is connected to this container.
1: 	*/
1: 	public boolean isSingleUser() {
1: 		return inUseCount == 1;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.BaseContainerHandle;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: 
0: import org.apache.derby.io.StorageFactory;
0: import org.apache.derby.io.StorageFile;
0: 
0: import java.io.IOException;
0: 
0: /**
0: 	needsSync is never true - DONE
0: 	An exception never marks the store as corrupt
0: 	clean() does not stubbify
0: 	preAllocate() does nothing - DONE
0: 	getFileName() returns a file in the tmp directory - DONE
0: 	flushAll does nothing - DONE
0: 	file descriptor is never synced
0: */
0: class TempRAFContainer extends RAFContainer {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected int inUseCount;
0: 
0: 	TempRAFContainer(BaseDataFileFactory factory) {
0: 		super(factory);
0: 	}
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public Cacheable setIdentity(Object key) throws StandardException {
0: 
0: 		ContainerKey newIdentity = (ContainerKey) key;
0: 		if (newIdentity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT) {
0: 
0: 			RAFContainer realContainer = new RAFContainer(dataFactory);
0: 			return realContainer.setIdent(newIdentity);
0: 		}
0: 
0: 		return super.setIdentity(newIdentity);
0: 
0: 	}
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
0: 
0: 		ContainerKey newIdentity = (ContainerKey) key;
0: 
0: 		if (newIdentity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT) {
0: 			RAFContainer realContainer = new RAFContainer(dataFactory);
0: 			return realContainer.createIdentity(newIdentity, createParameter);
0: 		}
0: 
0: 		return createIdent(newIdentity, createParameter);
0: 	}
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException
0: 	{
0: 		// discard all of my pages in the cache
0: 		pageCache.discard(identity);
0: 		
0: 		synchronized(this) {	
0: 			// prevent anybody from looking at this container again
0: 			setDroppedState(true);
0: 			setCommittedDropState(true);
0: 			setDirty(false);
0: 			needsSync = false;
0: 
0: 		}
0: 
0: 		removeFile(getFileName(identity, false, false, false));
0: 	}
0: 
0: 	/**
0: 		Preallocate page.  Since we don't sync when we write page anyway, no
0: 		need to preallocate page.
0: 	*/
0: 	protected int preAllocate(long lastPreallocPagenum, int preAllocSize)
0: 	{
0: 		return 0;
0: 	}
0: 
0: 
0: 	/**
0: 		Write the page, if it's within range of the current page range of the container.
0: 		If we do write it then don't request that it be synced.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	protected void writePage(long pageNumber, byte[] pageData, boolean syncPage) throws IOException, StandardException {
0: 		if (!this.getDroppedState()) {
0: 			super.writePage(pageNumber, pageData, false);
0: 		}
0: 		needsSync = false;
0: 	}
0: 
0: 	protected StorageFile getFileName(ContainerKey identity, boolean stub,
0:         boolean errorOK, boolean tryAlternatePath)
0: 	{
0: 		return privGetFileName( identity, stub, errorOK, tryAlternatePath);
0: 	}
0: 
0: 	protected StorageFile privGetFileName(ContainerKey identity, boolean stub,
0:         boolean errorOK, boolean tryAlternatePath)
0: 	{
0: 		return dataFactory.storageFactory.newStorageFile( dataFactory.storageFactory.getTempDir(),
0:                                                     "T" + identity.getContainerId() + ".tmp");
0: 	}
0: 
0: 	/**
0: 		Add a page without locking the container, only one user will be accessing this
0: 		table at a time.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public Page addPage(BaseContainerHandle handle, boolean isOverflow) throws StandardException {
0: 
0: 		BasePage newPage = newPage(handle, (RawTransaction) null, handle, isOverflow);
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(newPage.isLatched());
0: 		}
0: 
0: 		return newPage;
0: 	}
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void truncate(BaseContainerHandle handle) throws StandardException {
0: 
0: 		// stop anyone from writing any of my pages out
0: 		synchronized(this)
0: 		{
0: 			setDroppedState(true);
0: 			setCommittedDropState(true);
0: 			setDirty(false);
0: 			needsSync = false;
0: 		}
0: 
0: 		// discard all of my pages in the cache
0: 		while (pageCache.discard(identity) != true)
0: 			;
0: 
0: 		removeFile(getFileName(identity, false, true, false));
0: 
0: 		createIdent(identity, this);
0: 
0: 		addPage(handle, false).unlatch();
0: 	}
0: 	/**
0: 		Lock the container and mark the container as in-use by this container handle.
0: 
0: 		@param droppedOK if true, use this container even if it is dropped.,
0: 		@return true if the container can be used, false if it has been dropped
0: 		since the lock was requested and droppedOK is not true.
0: 
0: 		@exception StandardException I cannot be opened for update.
0: 	*/
0: 	protected boolean use(BaseContainerHandle handle, boolean forUpdate,
0: 						  boolean droppedOK) 
0: 		throws StandardException {
0: 
0: 		if (super.use(handle, forUpdate, droppedOK)) {
0: 			inUseCount++;
0: 			return true;
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 		Discontinue use of this container. Note that the unlockContainer
0: 		call made from this method may not release any locks. The container
0: 		lock may be held until the end of the transaction.
0: 
0: 	*/
0: 	protected void letGo(BaseContainerHandle handle) {
0: 
0: 		inUseCount--;
0: 		super.letGo(handle);
0: 	}
0: 
0: 
0: 	/**
0: 		Returns true if only a single handle is connected to this container.
0: 	*/
0: 	public boolean isSingleUser() {
0: 		return inUseCount == 1;
0: 	}
0: }
============================================================================