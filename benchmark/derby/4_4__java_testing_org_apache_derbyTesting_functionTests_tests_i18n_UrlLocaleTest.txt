1:0d6fda9: /*
2:0d6fda9:  *
1:0d6fda9:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UrlLocaleTest
1:0d6fda9:  *
1:0d6fda9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d6fda9:  * contributor license agreements.  See the NOTICE file distributed with
1:0d6fda9:  * this work for additional information regarding copyright ownership.
1:0d6fda9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d6fda9:  * (the "License"); you may not use this file except in compliance with
1:0d6fda9:  * the License.  You may obtain a copy of the License at
1:0d6fda9:  *
1:0d6fda9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0d6fda9:  *
1:0d6fda9:  * Unless required by applicable law or agreed to in writing, 
1:0d6fda9:  * software distributed under the License is distributed on an 
1:0d6fda9:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:0d6fda9:  * either express or implied. See the License for the specific 
1:0d6fda9:  * i18n governing permissions and limitations under the License.
1:0d6fda9:  */
6:0d6fda9: 
1:0d6fda9: package org.apache.derbyTesting.functionTests.tests.i18n;
1:0d6fda9: 
1:0d6fda9: import java.net.MalformedURLException;
1:0d6fda9: import java.sql.Connection;
1:0d6fda9: import java.sql.DriverManager;
1:0d6fda9: import java.sql.SQLException;
1:8c41013: import java.sql.SQLWarning;
1:0d6fda9: import java.sql.Statement;
1:86e7a0a: import java.util.Locale;
1:0d6fda9: import junit.framework.Test;
1:0d6fda9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0d6fda9: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:8c41013: import org.apache.derbyTesting.junit.LocaleTestSetup;
1:0d6fda9: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:0d6fda9: import org.apache.derbyTesting.junit.TestConfiguration;
1:0d6fda9: 
1:0d6fda9: 
1:0d6fda9: 
1:0d6fda9: public class UrlLocaleTest extends BaseJDBCTestCase {
1:0d6fda9:     
1:0d6fda9:     public UrlLocaleTest(String name) {
1:0d6fda9:         super(name);
1:0d6fda9:     }
1:0d6fda9: 
1:0d6fda9: 
1:0d6fda9:     
1:e3b570d:     /**
1:0d6fda9:      * Shutdown on tearDown to make sure all databases can be removed.
1:0d6fda9:      * @throws Exception 
1:0d6fda9:      * @see org.apache.derbyTesting.junit.BaseJDBCTestCase#tearDown()
1:0d6fda9:      */
1:0d6fda9:     public void tearDown() throws Exception {
1:0d6fda9:         super.tearDown();
1:0d6fda9:         TestConfiguration.getCurrent().shutdownEngine();
1:0d6fda9:         // Reregister driver for any subsequent tests
1:0d6fda9:         String driverClass =
1:0d6fda9:                 TestConfiguration.getCurrent().getJDBCClient().getJDBCDriverName();
1:4469400:         Class<?> clazz = Class.forName(driverClass);
1:4469400:         clazz.getConstructor().newInstance();
1:0d6fda9:     }
1:0d6fda9:     
1:0d6fda9:     /**
1:0d6fda9:      * Test valid territory settings on URL
1:8c41013:      * 
1:0d6fda9:      */
1:0d6fda9:     public void testURLLocale()  throws SQLException, MalformedURLException {
1:0d6fda9:         // check this current database was created with the default locale
1:0d6fda9:         Statement s = createStatement();
1:0d6fda9:         s.executeUpdate("call checkRDefaultLoc()");
1:0d6fda9:         
1:0d6fda9:             // create a swiss database
1:e3b570d:         String url = getReadWriteJDBCURL("swissdb");
1:0d6fda9:         url += ";create=true;territory=fr_CH";
3:0d6fda9:         Connection locConn = DriverManager.getConnection(url);
1:0d6fda9:         createLocaleProcedures(locConn);
1:0d6fda9:         Statement locStatement = locConn.createStatement();
1:0d6fda9:         locStatement.executeUpdate("call checkDatabaseLoc('fr_CH')");
1:0d6fda9:         locStatement.close();
1:0d6fda9:         locConn.close();
1:0d6fda9:         
1:0d6fda9:         //-- create a Hindi in India database (hi_IN)
1:0d6fda9:         
1:e3b570d:         url = getReadWriteJDBCURL("hindi");
1:0d6fda9:         url += ";create=true;territory=hi_IN";
2:0d6fda9:         locConn = DriverManager.getConnection(url);
1:0d6fda9:         createLocaleProcedures(locConn);
1:0d6fda9:         locStatement = locConn.createStatement();
1:0d6fda9:         locStatement.executeUpdate("call checkDatabaseLoc('hi_IN')");
1:0d6fda9:         locStatement.close();
1:0d6fda9:         locConn.close();
1:0d6fda9:        //- now try one with a variant
1:0d6fda9:        // -- create a English in Israel database for JavaOS en_IL_JavaOS
1:e3b570d:         url = getReadWriteJDBCURL("Israel");
1:0d6fda9:         url += ";create=true;territory=en_IL_JavaOS";
1:8c41013:         locConn = DriverManager.getConnection(url);
1:0d6fda9:         createLocaleProcedures(locConn);
1:0d6fda9:         locStatement = locConn.createStatement();
1:0d6fda9:         locStatement.executeUpdate("call checkDatabaseLoc('en_IL_JavaOS')");
1:0d6fda9:         locStatement.close();
1:0d6fda9:         locConn.close();
1:0d6fda9:         
1:0d6fda9:         // now try with just a language - we support this
1:0d6fda9:         // as some vms do.
1:e3b570d:         url = getReadWriteJDBCURL("bacon");
1:0d6fda9:         url += ";create=true;territory=da";
1:0d6fda9:         locConn = DriverManager.getConnection(url);
1:0d6fda9:         createLocaleProcedures(locConn);
1:0d6fda9:         locStatement = locConn.createStatement();
1:0d6fda9:         locStatement.executeUpdate("call checkDatabaseLoc('da')");
1:0d6fda9:         locStatement.close();
1:0d6fda9:         locConn.close();
1:0d6fda9:                 
1:0d6fda9:     }
1:0d6fda9: 
1:0d6fda9:     
1:0d6fda9:     
1:0d6fda9:     /**
1:0d6fda9:      * Test invalid territory settings
1:0d6fda9:      */
1:0d6fda9:     public void testUrlLocaleNegative() throws SQLException {
1:0d6fda9:         //Connection without territory specified in territory attribute        
1:c55d855:         String url = getReadWriteJDBCURL("fail1");
1:0d6fda9:         url += ";create=true;territory=";
1:8c41013:         checkInvalidTerritoryFormat(url);
1:0d6fda9:         //- database will not have been created so this connection will fail
1:c55d855:         url = getReadWriteJDBCURL("fail1");
1:0d6fda9:         try {
1:c55d855:             DriverManager.getConnection(url);
1:0d6fda9:             fail("Database connect " + url + " should fail because db does not exist");
1:0d6fda9:         }    catch (SQLException se ) {   
1:0d6fda9:             assertSQLState("XJ004", se);
1:0d6fda9:           }
1:0d6fda9:         //Invalid territory specification
1:8c41013:         checkInvalidTerritoryFormat("en_");
1:8c41013:         checkInvalidTerritoryFormat("en_d");
1:8c41013:         checkInvalidTerritoryFormat("en-US");
1:86e7a0a:         
1:0d6fda9:     }
1:0d6fda9: 
1:8c41013:     /**
1:86e7a0a:      * Test valid message resolution for an unknown Locale.
1:8c41013:      * converted from i18n/messageLocale.sql
1:86e7a0a:      *
1:86e7a0a:      * This test case must run in a decorator that sets the locale to one
1:86e7a0a:      * that is not recognized by Derby.
1:8c41013:      */
1:86e7a0a:     public void messageLocale_unknown() throws SQLException {
1:8c41013:         String url = getReadWriteJDBCURL("rrTTdb");
1:8c41013:         url += ";create=true";
1:8c41013:         Connection locConn = DriverManager.getConnection(url);
1:8c41013:         Statement s = locConn.createStatement();
1:8c41013:         createLocaleProcedures(locConn);
1:8c41013:         // check this current database was created with the default locale rr_TT
1:8c41013:         s.executeUpdate("call checkDefaultLoc()");
1:8c41013:         // check database Locale
1:8c41013:         s.executeUpdate("call checkDatabaseLoc('rr_TT')");
1:8c41013:         // Expect an error in English because rr_TT has no translated messages.
1:8c41013:         // Language is determined by choosing a random word (that we hope 
1:8c41013:         // won't change) in the current 
1:8c41013:         try {
1:8c41013:             s.executeUpdate("create table t1 oops (i int)");
1:8c41013:         } catch (SQLException se) {
1:8c41013:             assertSQLState("42X01", se);
1:8c41013:             assertTrue("Expected English Message with \"Encountered\" " ,
1:8c41013:                       (se.getMessage().indexOf("Encountered") != -1));
1:8c41013:             
1:8c41013:         }
1:8c41013:         // Setup for warning
1:8c41013:         s.executeUpdate("create table t2 (i int)");
1:8c41013:         s.executeUpdate("create index i2_a on t2(i)");
1:8c41013: 
1:8c41013:         // Expect WARNING to also be English. Index is a duplicate
1:8c41013:         s.executeUpdate("create index i2_b on t2(i)");
1:8c41013:         SQLWarning sqlw = s.getWarnings();
1:8c41013:         assertSQLState("01504", sqlw);
1:8c41013:         assertTrue("Expected English warning", 
1:8c41013:                 sqlw.getMessage().indexOf("duplicate") != -1);
1:8c41013:         
1:8c41013:         s.close();
1:8c41013:         locConn.close();
1:86e7a0a:     }
1:8c41013:         
1:86e7a0a:     /**
1:86e7a0a:      * Test valid message resolution for German Locale.
1:86e7a0a:      * converted from i18n/messageLocale.sql
1:86e7a0a:      *
1:86e7a0a:      * This test case must run in a decorator that sets the default locale
1:86e7a0a:      * to Locale.GERMANY.
1:86e7a0a:      */
1:86e7a0a:     public void messageLocale_Germany() throws SQLException {
1:8c41013:         //create a database with a locale that has a small
1:8c41013:         // number of messages. Missing ones will default to
1:8c41013:         // the locale of the default locale: German;
1:86e7a0a:         String url = getReadWriteJDBCURL("qqPPdb");
1:8c41013:         url += ";create=true;territory=qq_PP_testOnly";
1:86e7a0a:         Connection locConn = DriverManager.getConnection(url);
1:86e7a0a:         Statement s = locConn.createStatement();
1:8c41013:         s.executeUpdate("create table t2 (i int)");
1:8c41013:         s.executeUpdate("create index i2_a on t2(i)");
1:8c41013:         // Error that is in qq_PP messages
1:8c41013:         try {
1:8c41013:             s.executeUpdate("create table t1 oops (i int)");
1:8c41013:         } catch (SQLException se) {
1:8c41013:             assertSQLState("42X01", se);
1:8c41013:             assertTrue("Expected qq_PP Message with \"Encountered\" " ,
1:8c41013:                       (se.getMessage().indexOf("Encountered") != -1));
1:8c41013:             
1:8c41013:         }
1:8c41013:         
1:8c41013:         // Expect WARNING to be in German (default) because there is no 
1:8c41013:         //qq_PP message. Index is a duplicate
1:8c41013:         s.executeUpdate("create index i2_b on t2(i)");
1:86e7a0a:         SQLWarning sqlw = s.getWarnings();
1:8c41013:         assertSQLState("01504", sqlw);
1:8c41013:         assertTrue("Expected German warning with Duplikat", 
1:8c41013:                 sqlw.getMessage().indexOf(" Duplikat") != -1);
1:8c41013:         
1:8c41013:         // Error from default German Locale as it does not exist in qq_PP
1:8c41013:         // from default locale (German);
1:8c41013:         try {
1:8c41013:             s.executeUpdate("drop table t3");
1:8c41013:         } catch (SQLException se) {
1:8c41013:             assertSQLState("42Y55", se);
1:8c41013:             assertTrue("Expected German Message with vorhanden"  ,
1:8c41013:                       (se.getMessage().indexOf("vorhanden") != -1));
1:8c41013:             
1:8c41013:         }
1:8c41013:         
1:8c41013:         //Now all English messages
1:8c41013:         url =  getReadWriteJDBCURL("enUSdb");
1:8c41013:         url += ";create=true;territory=en_US";
1:8c41013:         locConn = DriverManager.getConnection(url);
2:8c41013:         s = locConn.createStatement();
1:8c41013:         s.executeUpdate("create table t2 (i int)");
1:8c41013:         s.executeUpdate("create index i2_a on t2(i)");
1:8c41013: 
1:8c41013:         try {
1:8c41013:             s.executeUpdate("create table t1 oops (i int)");
1:8c41013:         } catch (SQLException se) {
1:8c41013:             assertSQLState("42X01", se);
1:8c41013:             assertTrue("Expected English message with \"Encountered\" " ,
1:8c41013:                       (se.getMessage().indexOf("Encountered") != -1));
1:8c41013:             
1:8c41013:         }
1:8c41013:         
1:8c41013:         // Expect WARNING to be in English because it is English db
1:8c41013:         // Even though German default Locale still
1:8c41013:         s.executeUpdate("create index i2_b on t2(i)");
2:8c41013:          sqlw = s.getWarnings();
1:8c41013:         assertSQLState("01504", sqlw);
1:8c41013:         assertTrue("Expected English warning with duplicate", 
1:8c41013:                 sqlw.getMessage().indexOf("duplicate") != -1);
1:8c41013:  
1:8c41013:         try {
1:8c41013:             s.executeUpdate("drop table t3");
1:8c41013:         } catch (SQLException se) {
1:8c41013:             assertSQLState("42Y55", se);
1:8c41013:             assertTrue("Expected English Message with performed"  ,
1:8c41013:                       (se.getMessage().indexOf("performed") != -1));
1:8c41013:             
1:8c41013:         }
1:8c41013:         
1:8c41013:     }
1:8c41013:   
1:8c41013:     private void checkInvalidTerritoryFormat(String territory) {
1:0d6fda9:         try {
1:c55d855:             String url = getReadWriteJDBCURL("fail3");
1:0d6fda9:             url += ";create=true;territory=" + territory;
1:c55d855:             DriverManager.getConnection(url);
1:0d6fda9:             fail("connection without territory: " + url + "should have failed");
1:0d6fda9:         } catch (SQLException se ) {
1:0d6fda9:           assertSQLState("XJ041", se);
1:0d6fda9:           assertSQLState("XBM0X", se.getNextException());
1:0d6fda9:         }
1:0d6fda9:     }
1:8c41013:     
1:0d6fda9:     /**
1:e3b570d:      * Get JDBC URL for database to be accessed in the read-write directory
1:e3b570d:      * @param dbname short database name to be created 
1:a98538e:      * @return the JDBC URL for the database
1:e3b570d:      */
1:e3b570d:     private static String getReadWriteJDBCURL(String dbname)
1:e3b570d:    {
1:e3b570d:         return TestConfiguration.getCurrent().
1:e3b570d:         getJDBCUrl(SupportFilesSetup.getReadWriteFileName(dbname));
1:e3b570d:     }
1:0d6fda9:     
1:0d6fda9:     /**
1:0d6fda9:      * Create procedures to test current territory value
1:0d6fda9:      * 
1:0d6fda9:      */
1:0d6fda9:     private static void createLocaleProcedures(Connection conn) throws SQLException {
1:0d6fda9:         Statement s = conn.createStatement();
1:0d6fda9:         s.executeUpdate("create procedure checkDatabaseLoc(in locale " +
1:0d6fda9:         "char(12)) parameter style java language java external name " +
1:0d6fda9:                 "'org.apache.derbyTesting.functionTests.tests.i18n." +
1:0d6fda9:                 "DefaultLocale.checkDatabaseLocale'");
1:0d6fda9:         s.executeUpdate("create procedure checkRDefaultLoc() parameter " +
1:0d6fda9:                     "style java language java external name " +
1:0d6fda9:                     "'org.apache.derbyTesting.functionTests.tests.i18n." +
1:0d6fda9:                     "DefaultLocale.checkRDefaultLocale'");
1:8c41013:         s.executeUpdate("create procedure checkDefaultLoc() parameter " +
1:8c41013:                 "style java language java external name " +
1:8c41013:                 "'org.apache.derbyTesting.functionTests.tests.i18n." +
1:8c41013:                 "DefaultLocale.checkDefaultLocale'");
1:0d6fda9:     }
1:0d6fda9:     
1:0d6fda9:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite();
1:0d6fda9:         suite.addTestSuite(UrlLocaleTest.class);
1:86e7a0a:         suite.addTest(new LocaleTestSetup(
1:86e7a0a:                 new UrlLocaleTest("messageLocale_unknown"),
1:86e7a0a:                 new Locale("rr", "TT")));
1:86e7a0a:         suite.addTest(new LocaleTestSetup(
1:86e7a0a:                 new UrlLocaleTest("messageLocale_Germany"),
1:86e7a0a:                 Locale.GERMANY));
1:86e7a0a: 
1:0d6fda9:         Test tsuite =  new CleanDatabaseTestSetup(suite) {
1:0d6fda9:             /**
1:0d6fda9:              * Creates the table used in the test cases.
1:0d6fda9:              *
1:0d6fda9:              */
1:0d6fda9:             protected void decorateSQL(Statement s) throws SQLException {
1:0d6fda9:                 createLocaleProcedures(s.getConnection());
1:0d6fda9:             }
1:0d6fda9:         };
1:0d6fda9:         tsuite = new SupportFilesSetup(tsuite);
1:0d6fda9:         return tsuite;
1:0d6fda9:     }
1:0d6fda9:  
1:0d6fda9: }
1:0d6fda9: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz = Class.forName(driverClass);
1:         clazz.getConstructor().newInstance();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e7a0a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Test valid message resolution for an unknown Locale.
1:      *
1:      * This test case must run in a decorator that sets the locale to one
1:      * that is not recognized by Derby.
1:     public void messageLocale_unknown() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     }
1:     /**
1:      * Test valid message resolution for German Locale.
1:      * converted from i18n/messageLocale.sql
1:      *
1:      * This test case must run in a decorator that sets the default locale
1:      * to Locale.GERMANY.
1:      */
1:     public void messageLocale_Germany() throws SQLException {
1:         String url = getReadWriteJDBCURL("qqPPdb");
1:         Connection locConn = DriverManager.getConnection(url);
1:         Statement s = locConn.createStatement();
/////////////////////////////////////////////////////////////////////////
1:         SQLWarning sqlw = s.getWarnings();
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(new LocaleTestSetup(
1:                 new UrlLocaleTest("messageLocale_unknown"),
1:                 new Locale("rr", "TT")));
1:         suite.addTest(new LocaleTestSetup(
1:                 new UrlLocaleTest("messageLocale_Germany"),
1:                 Locale.GERMANY));
1: 
commit:a98538e
/////////////////////////////////////////////////////////////////////////
1:      * @return the JDBC URL for the database
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c55d855
/////////////////////////////////////////////////////////////////////////
1:         String url = getReadWriteJDBCURL("fail1");
1:         url = getReadWriteJDBCURL("fail1");
1:             DriverManager.getConnection(url);
/////////////////////////////////////////////////////////////////////////
1:             String url = getReadWriteJDBCURL("fail3");
1:             DriverManager.getConnection(url);
commit:8c41013
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLWarning;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.LocaleTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         checkInvalidTerritoryFormat(url);
/////////////////////////////////////////////////////////////////////////
1:         checkInvalidTerritoryFormat("en_");
1:         checkInvalidTerritoryFormat("en_d");
1:         checkInvalidTerritoryFormat("en-US");
1:     /**
0:      * Test valid message resolution for Locale
1:      * converted from i18n/messageLocale.sql
1:      * 
1:      */
0:     public void testMessageLocale()  throws SQLException {
0:         // Test with unknown Locale. Should have all English messages
0:         LocaleTestSetup.setDefaultLocale(
0:             new java.util.Locale("rr", "TT"));
1:         String url = getReadWriteJDBCURL("rrTTdb");
1:         url += ";create=true";
1:         Connection locConn = DriverManager.getConnection(url);
1:         Statement s = locConn.createStatement();
1:         createLocaleProcedures(locConn);
1:         // check this current database was created with the default locale rr_TT
1:         s.executeUpdate("call checkDefaultLoc()");
1:         // check database Locale
1:         s.executeUpdate("call checkDatabaseLoc('rr_TT')");
1:         // Expect an error in English because rr_TT has no translated messages.
1:         // Language is determined by choosing a random word (that we hope 
1:         // won't change) in the current 
1:         try {
1:             s.executeUpdate("create table t1 oops (i int)");
1:         } catch (SQLException se) {
1:             assertSQLState("42X01", se);
1:             assertTrue("Expected English Message with \"Encountered\" " ,
1:                       (se.getMessage().indexOf("Encountered") != -1));
1:             
1:         }
1:         // Setup for warning
1:         s.executeUpdate("create table t2 (i int)");
1:         s.executeUpdate("create index i2_a on t2(i)");
1:         // Expect WARNING to also be English. Index is a duplicate
1:         s.executeUpdate("create index i2_b on t2(i)");
1:         SQLWarning sqlw = s.getWarnings();
1:         assertSQLState("01504", sqlw);
1:         assertTrue("Expected English warning", 
1:                 sqlw.getMessage().indexOf("duplicate") != -1);
1:         
1:         s.close();
1:         locConn.close();
1:       
1:         
0:        // Set default Locale to German
0:         LocaleTestSetup.setDefaultLocale(new java.util.Locale("de","DE"));
1:         
1:         //create a database with a locale that has a small
1:         // number of messages. Missing ones will default to
1:         // the locale of the default locale: German;
0:         url =  getReadWriteJDBCURL("qqPPdb");
1:         url += ";create=true;territory=qq_PP_testOnly";
1:         locConn = DriverManager.getConnection(url);
1:         s = locConn.createStatement();
1:         s.executeUpdate("create table t2 (i int)");
1:         s.executeUpdate("create index i2_a on t2(i)");
1:         // Error that is in qq_PP messages
1:         try {
1:             s.executeUpdate("create table t1 oops (i int)");
1:         } catch (SQLException se) {
1:             assertSQLState("42X01", se);
1:             assertTrue("Expected qq_PP Message with \"Encountered\" " ,
1:                       (se.getMessage().indexOf("Encountered") != -1));
1:             
1:         }
1:         
1:         // Expect WARNING to be in German (default) because there is no 
1:         //qq_PP message. Index is a duplicate
1:         s.executeUpdate("create index i2_b on t2(i)");
1:         sqlw = s.getWarnings();
1:         assertSQLState("01504", sqlw);
1:         assertTrue("Expected German warning with Duplikat", 
1:                 sqlw.getMessage().indexOf(" Duplikat") != -1);
1:         
1:         // Error from default German Locale as it does not exist in qq_PP
1:         // from default locale (German);
1:         try {
1:             s.executeUpdate("drop table t3");
1:         } catch (SQLException se) {
1:             assertSQLState("42Y55", se);
1:             assertTrue("Expected German Message with vorhanden"  ,
1:                       (se.getMessage().indexOf("vorhanden") != -1));
1:             
1:         }
1:         
1:         //Now all English messages
1:         url =  getReadWriteJDBCURL("enUSdb");
1:         url += ";create=true;territory=en_US";
1:         locConn = DriverManager.getConnection(url);
1:         s = locConn.createStatement();
1:         s.executeUpdate("create table t2 (i int)");
1:         s.executeUpdate("create index i2_a on t2(i)");
1: 
1:         try {
1:             s.executeUpdate("create table t1 oops (i int)");
1:         } catch (SQLException se) {
1:             assertSQLState("42X01", se);
1:             assertTrue("Expected English message with \"Encountered\" " ,
1:                       (se.getMessage().indexOf("Encountered") != -1));
1:             
1:         }
1:         
1:         // Expect WARNING to be in English because it is English db
1:         // Even though German default Locale still
1:         s.executeUpdate("create index i2_b on t2(i)");
1:          sqlw = s.getWarnings();
1:         assertSQLState("01504", sqlw);
1:         assertTrue("Expected English warning with duplicate", 
1:                 sqlw.getMessage().indexOf("duplicate") != -1);
1:  
1:         try {
1:             s.executeUpdate("drop table t3");
1:         } catch (SQLException se) {
1:             assertSQLState("42Y55", se);
1:             assertTrue("Expected English Message with performed"  ,
1:                       (se.getMessage().indexOf("performed") != -1));
1:             
1:         }
1:         
1:     }
1:   
1:     private void checkInvalidTerritoryFormat(String territory) {
/////////////////////////////////////////////////////////////////////////
1:         s.executeUpdate("create procedure checkDefaultLoc() parameter " +
1:                 "style java language java external name " +
1:                 "'org.apache.derbyTesting.functionTests.tests.i18n." +
1:                 "DefaultLocale.checkDefaultLocale'");
commit:e3b570d
/////////////////////////////////////////////////////////////////////////
1:         String url = getReadWriteJDBCURL("swissdb");
/////////////////////////////////////////////////////////////////////////
1:         url = getReadWriteJDBCURL("hindi");
/////////////////////////////////////////////////////////////////////////
1:         url = getReadWriteJDBCURL("Israel");
/////////////////////////////////////////////////////////////////////////
1:         url = getReadWriteJDBCURL("bacon");
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get JDBC URL for database to be accessed in the read-write directory
1:      * @param dbname short database name to be created 
0:      * @return
1:      */
1:     private static String getReadWriteJDBCURL(String dbname)
1:    {
1:         return TestConfiguration.getCurrent().
1:         getJDBCUrl(SupportFilesSetup.getReadWriteFileName(dbname));
1:     }
commit:0d6fda9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UrlLocaleTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * i18n governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.i18n;
1: 
1: import java.net.MalformedURLException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: 
1: public class UrlLocaleTest extends BaseJDBCTestCase {
1:     
1:     public UrlLocaleTest(String name) {
1:         super(name);
1:     }
1: 
1: 
1:     
1:     /**
1:      * Shutdown on tearDown to make sure all databases can be removed.
1:      * @throws Exception 
1:      * @see org.apache.derbyTesting.junit.BaseJDBCTestCase#tearDown()
1:      */
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:         TestConfiguration.getCurrent().shutdownEngine();
1:         // Reregister driver for any subsequent tests
1:         String driverClass =
1:                 TestConfiguration.getCurrent().getJDBCClient().getJDBCDriverName();
0:         Class.forName(driverClass).newInstance();
1:     }
1:     
1:     /**
1:      * Test valid territory settings on URL
1:      * 
1:      */
1:     public void testURLLocale()  throws SQLException, MalformedURLException {
1:         // check this current database was created with the default locale
1:         Statement s = createStatement();
1:         s.executeUpdate("call checkRDefaultLoc()");
1:         
1:             // create a swiss database
0:         String url = TestConfiguration.getCurrent().
0:                 getJDBCUrl(SupportFilesSetup.getReadWrite("swissdb").getPath());
1:         url += ";create=true;territory=fr_CH";
1:         Connection locConn = DriverManager.getConnection(url);
1:         createLocaleProcedures(locConn);
1:         Statement locStatement = locConn.createStatement();
1:         locStatement.executeUpdate("call checkDatabaseLoc('fr_CH')");
1:         locStatement.close();
1:         locConn.close();
1:         
1:         //-- create a Hindi in India database (hi_IN)
1:         
0:         url = TestConfiguration.getCurrent().getJDBCUrl(
0:                 SupportFilesSetup.getReadWrite("hindi").getPath());
1:         url += ";create=true;territory=hi_IN";
1:         locConn = DriverManager.getConnection(url);
1:         createLocaleProcedures(locConn);
1:         locStatement = locConn.createStatement();
1:         locStatement.executeUpdate("call checkDatabaseLoc('hi_IN')");
1:         locStatement.close();
1:         locConn.close();
1:        //- now try one with a variant
1:        // -- create a English in Israel database for JavaOS en_IL_JavaOS
0:         url = TestConfiguration.getCurrent().
0:                 getJDBCUrl(SupportFilesSetup.getReadWrite("Israel").getPath());
1:         url += ";create=true;territory=en_IL_JavaOS";
1:         locConn = DriverManager.getConnection(url);
1:         createLocaleProcedures(locConn);
1:         locStatement = locConn.createStatement();
1:         locStatement.executeUpdate("call checkDatabaseLoc('en_IL_JavaOS')");
1:         locStatement.close();
1:         locConn.close();
1:         
1:         // now try with just a language - we support this
1:         // as some vms do.
0:         url = TestConfiguration.getCurrent().
0:                 getJDBCUrl(SupportFilesSetup.getReadWrite("bacon").getPath());
1:         url += ";create=true;territory=da";
1:         locConn = DriverManager.getConnection(url);
1:         createLocaleProcedures(locConn);
1:         locStatement = locConn.createStatement();
1:         locStatement.executeUpdate("call checkDatabaseLoc('da')");
1:         locStatement.close();
1:         locConn.close();
1:                 
1:     }
1: 
1:     
1:     
1:     /**
1:      * Test invalid territory settings
1:      */
1:     public void testUrlLocaleNegative() throws SQLException {
1:         //Connection without territory specified in territory attribute        
0:         String url = TestConfiguration.getCurrent().getJDBCUrl("../extinout/fail1");
1:         url += ";create=true;territory=";
0:         testInvalidTerritoryFormat(url);
1:         //- database will not have been created so this connection will fail
0:         url = TestConfiguration.getCurrent().getJDBCUrl("../extinout/fail1");
1:         try {
1:             Connection locConn = DriverManager.getConnection(url);
1:             fail("Database connect " + url + " should fail because db does not exist");
1:         }    catch (SQLException se ) {   
1:             assertSQLState("XJ004", se);
1:           }
1:         //Invalid territory specification
0:         testInvalidTerritoryFormat("en_");
0:         testInvalidTerritoryFormat("en_d");
0:         testInvalidTerritoryFormat("en-US");
1:         
1:     }
1: 
0:     private void testInvalidTerritoryFormat(String territory) {
1:         try {
0:             String url = TestConfiguration.getCurrent().getJDBCUrl("../extinout/fail3");
1:             url += ";create=true;territory=" + territory;
1:             Connection locConn = DriverManager.getConnection(url);
1:             fail("connection without territory: " + url + "should have failed");
1:         } catch (SQLException se ) {
1:           assertSQLState("XJ041", se);
1:           assertSQLState("XBM0X", se.getNextException());
1:         }
1:     }
1:     
1:     
1:     /**
1:      * Create procedures to test current territory value
1:      * 
1:      */
1:     private static void createLocaleProcedures(Connection conn) throws SQLException {
1:         Statement s = conn.createStatement();
1:         s.executeUpdate("create procedure checkDatabaseLoc(in locale " +
1:         "char(12)) parameter style java language java external name " +
1:                 "'org.apache.derbyTesting.functionTests.tests.i18n." +
1:                 "DefaultLocale.checkDatabaseLocale'");
1:         s.executeUpdate("create procedure checkRDefaultLoc() parameter " +
1:                     "style java language java external name " +
1:                     "'org.apache.derbyTesting.functionTests.tests.i18n." +
1:                     "DefaultLocale.checkRDefaultLocale'");
1: 
1:     }
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite();
1:         suite.addTestSuite(UrlLocaleTest.class);
1:         Test tsuite =  new CleanDatabaseTestSetup(suite) {
1:             /**
1:              * Creates the table used in the test cases.
1:              *
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 createLocaleProcedures(s.getConnection());
1:             }
1:         };
1:         tsuite = new SupportFilesSetup(tsuite);
1:         return tsuite;
1:     }
1:  
1: }
1: 
============================================================================