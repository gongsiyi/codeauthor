1:0d2840c: /*
1:0d2840c:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.GenMog
1:0d2840c: 
1:0d2840c:    Licensed to the Apache Software Foundation (ASF) under one
1:0d2840c:    or more contributor license agreements.  See the NOTICE file
1:0d2840c:    distributed with this work for additional information
1:0d2840c:    regarding copyright ownership.  The ASF licenses this file
1:0d2840c:    to you under the Apache License, Version 2.0 (the
1:0d2840c:    "License"); you may not use this file except in compliance
1:0d2840c:    with the License.  You may obtain a copy of the License at
1:0d2840c: 
1:0d2840c:      http://www.apache.org/licenses/LICENSE-2.0
1:0d2840c: 
1:0d2840c:    Unless required by applicable law or agreed to in writing,
1:0d2840c:    software distributed under the License is distributed on an
1:0d2840c:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0d2840c:    KIND, either express or implied.  See the License for the
1:0d2840c:    specific language governing permissions and limitations
1:0d2840c:    under the License.
1:0d2840c:  */
1:0d2840c: 
1:0d2840c: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:0d2840c: 
1:0d2840c: import java.util.Random;
1:0d2840c: import org.apache.derbyTesting.junit.BaseTestCase;
1:0d2840c: 
1:0d2840c: /**
1:0d2840c:  * Simple utility to generate a mixture-of-Gaussian configuration.
1:0d2840c:  */
1:0d2840c: public class GenMog
1:0d2840c: {
1:0d2840c:   /** default constructor */
1:0d2840c:   public GenMog() { rng = new Random(System.currentTimeMillis()); }
1:0d2840c: 
1:0d2840c:   /** constructor with specified RNG */
1:0d2840c:   public GenMog(Random rng) { this.rng = rng; }
1:0d2840c: 
1:0d2840c:   /** Generate a mixture-of-Gaussian configuration. */
1:0d2840c:   public void generate()
1:0d2840c:   {
1:0d2840c:     // number of Gaussian components
1:0d2840c:     n = 1 + rng.nextInt(max_n);
1:0d2840c: 
1:0d2840c:     // weights associated with the Gaussian components
1:0d2840c:     double sum = 0.0;
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       double w;
1:0d2840c:       do { w = rng.nextDouble(); } while (w <= 0.0);
1:0d2840c:       weight[i] = w;
1:0d2840c:       sum += w;
1:0d2840c:     }
1:0d2840c:     for (int i=0; i<n; ++i) { weight[i] /= sum; }
1:0d2840c: 
1:0d2840c:     // (mean, var) parameters for the Gaussian components
1:0d2840c:     double oldm = 0.0, olds = 0.0;
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final double s = min_s + rng.nextDouble() * (max_s - min_s);
1:0d2840c:       final double m = oldm + 2.0 * olds + 2.0 * s;
1:0d2840c:       mean[i] = m;
1:0d2840c:       var[i] = s * s;
1:0d2840c:       oldm = m;
1:0d2840c:       olds = s;
1:0d2840c:     }
1:0d2840c: 
1:0d2840c:     // diagnostic messages
1:0d2840c:     BaseTestCase.println("GENERATED: n = " + n);
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       BaseTestCase.println("(w, m, v) = (" +
1:0d2840c:               weight[i] + ", " + mean[i] + ", " + var[i] + ")");
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** random number generator in use */
1:0d2840c:   public Random rng;
1:0d2840c: 
1:0d2840c:   /** maximum number of Gaussian components */
1:0d2840c:   public final static int max_n = 6;
1:0d2840c:   /** minimum value for the standard deviation parameter */
1:0d2840c:   public final static double min_s = 1.0;
1:0d2840c:   /** maximum value for the standard deviation parameter */
1:0d2840c:   public final static double max_s = 6.0;
1:0d2840c: 
1:0d2840c:   /** actual number of Gaussian components */
1:0d2840c:   public int n;
1:0d2840c:   /** weights associated with the Gaussian components */
1:0d2840c:   public final double weight[] = new double[max_n];
1:0d2840c:   /** mean parameters for the Gaussian components */
1:0d2840c:   public final double mean[] = new double[max_n];
1:0d2840c:   /** variance parameters for the Gaussian components */
1:0d2840c:   public final double var[] = new double[max_n];
1:0d2840c: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0d2840c
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.GenMog
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import java.util.Random;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Simple utility to generate a mixture-of-Gaussian configuration.
1:  */
1: public class GenMog
1: {
1:   /** default constructor */
1:   public GenMog() { rng = new Random(System.currentTimeMillis()); }
1: 
1:   /** constructor with specified RNG */
1:   public GenMog(Random rng) { this.rng = rng; }
1: 
1:   /** Generate a mixture-of-Gaussian configuration. */
1:   public void generate()
1:   {
1:     // number of Gaussian components
1:     n = 1 + rng.nextInt(max_n);
1: 
1:     // weights associated with the Gaussian components
1:     double sum = 0.0;
1:     for (int i=0; i<n; ++i) {
1:       double w;
1:       do { w = rng.nextDouble(); } while (w <= 0.0);
1:       weight[i] = w;
1:       sum += w;
1:     }
1:     for (int i=0; i<n; ++i) { weight[i] /= sum; }
1: 
1:     // (mean, var) parameters for the Gaussian components
1:     double oldm = 0.0, olds = 0.0;
1:     for (int i=0; i<n; ++i) {
1:       final double s = min_s + rng.nextDouble() * (max_s - min_s);
1:       final double m = oldm + 2.0 * olds + 2.0 * s;
1:       mean[i] = m;
1:       var[i] = s * s;
1:       oldm = m;
1:       olds = s;
1:     }
1: 
1:     // diagnostic messages
1:     BaseTestCase.println("GENERATED: n = " + n);
1:     for (int i=0; i<n; ++i) {
1:       BaseTestCase.println("(w, m, v) = (" +
1:               weight[i] + ", " + mean[i] + ", " + var[i] + ")");
1:     }
1:   }
1: 
1:   /** random number generator in use */
1:   public Random rng;
1: 
1:   /** maximum number of Gaussian components */
1:   public final static int max_n = 6;
1:   /** minimum value for the standard deviation parameter */
1:   public final static double min_s = 1.0;
1:   /** maximum value for the standard deviation parameter */
1:   public final static double max_s = 6.0;
1: 
1:   /** actual number of Gaussian components */
1:   public int n;
1:   /** weights associated with the Gaussian components */
1:   public final double weight[] = new double[max_n];
1:   /** mean parameters for the Gaussian components */
1:   public final double mean[] = new double[max_n];
1:   /** variance parameters for the Gaussian components */
1:   public final double var[] = new double[max_n];
1: }
============================================================================