1:7eebc80: /*
1:7eebc80:  *
1:7eebc80:  * Derby - Class RollBackWrappingWhenFailOnImportTest
1:7eebc80:  *
1:7eebc80:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7eebc80:  * contributor license agreements.  See the NOTICE file distributed with
1:7eebc80:  * this work for additional information regarding copyright ownership.
1:7eebc80:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7eebc80:  * (the "License"); you may not use this file except in compliance with
1:7eebc80:  * the License.  You may obtain a copy of the License at
1:7eebc80:  *
1:7eebc80:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7eebc80:  *
1:7eebc80:  * Unless required by applicable law or agreed to in writing, 
1:7eebc80:  * software distributed under the License is distributed on an 
1:7eebc80:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:7eebc80:  * either express or implied. See the License for the specific 
1:7eebc80:  * language governing permissions and limitations under the License.
1:7eebc80:  */
1:7eebc80: package org.apache.derbyTesting.functionTests.tests.tools;
6:7eebc80: 
1:7eebc80: import java.sql.CallableStatement;
1:7eebc80: import java.sql.Connection;
1:7eebc80: import java.sql.SQLException;
1:7eebc80: import java.util.Properties;
1:7eebc80: import junit.framework.Test;
1:7eebc80: import org.apache.derby.impl.jdbc.EmbedConnection;
1:595307e: import org.apache.derby.jdbc.InternalDriver;
1:7eebc80: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7eebc80: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:7eebc80: import org.apache.derbyTesting.junit.JDBC;
1:7eebc80: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:7eebc80: import org.apache.derbyTesting.junit.TestConfiguration;
1:7eebc80: 
1:7eebc80: /**
1:7eebc80:  * This test case comes from DERBY-4443. It's for show changes related to 
1:7eebc80:  * wrap rollback in exception handlers in try-catch.
1:7eebc80:  * In this test case, a MockInternalDriver is used to create a MockConnectionFailWhenRollBack
1:7eebc80:  * which will fail when rollback() is called.
1:7eebc80:  * 
1:7eebc80:  */
1:7eebc80: public class RollBackWrappingWhenFailOnImportTest extends BaseJDBCTestCase {
1:595307e:     class MockInternalDriver extends InternalDriver {
1:7eebc80: 
1:850aba4:         public class MockConnectionFailWhenRollBack extends EmbedConnection {
1:7eebc80: 
1:7eebc80:             public MockConnectionFailWhenRollBack(Connection connection) {
1:7eebc80:                 super((EmbedConnection)connection);
1:7eebc80:             }
1:7eebc80: 
1:7eebc80:             public void rollback() throws SQLException {
1:7eebc80:                 throw new SQLException("error in roll back", "XJ058");
1:7eebc80:             }
1:7eebc80:         }
1:7eebc80: 
1:25c1e7b:         public Connection connect( String url, Properties info, int loginTimeout ) {
1:7eebc80:             Connection conn = null;
1:7eebc80:             try {
1:25c1e7b:                 conn = super.connect( url, info, loginTimeout );
1:7eebc80:             } catch (Exception e) {
1:7eebc80:                 //this exception is ignored for mocking
1:7eebc80:             }
1:7eebc80:             return new MockConnectionFailWhenRollBack(conn);
1:7eebc80:         }
1:7eebc80:     }
1:7eebc80: 
1:7eebc80:     private String nonexistentFileName = "test/test.dat";
1:7eebc80: 
1:7eebc80:     public RollBackWrappingWhenFailOnImportTest(String name) {
1:7eebc80:         super(name);        
1:7eebc80:     }
1:7eebc80:     
1:7eebc80:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("RollBackWrappingWhenFailOnImportTest");
1:7eebc80:         
1:7eebc80:         if (!JDBC.vmSupportsJDBC3()) {
1:7eebc80:             return suite;
1:7eebc80:         }       
1:7eebc80:         
1:7eebc80:         Test test = new CleanDatabaseTestSetup(
1:7eebc80:                 TestConfiguration.embeddedSuite(
1:7eebc80:                         RollBackWrappingWhenFailOnImportTest.class));
1:7eebc80:                         
1:7eebc80:         suite.addTest(test);
1:7eebc80:         
1:7eebc80:         return suite;
1:7eebc80:     }
1:7eebc80: 
1:7eebc80:     protected void setUp() throws Exception {
1:7eebc80:         openDefaultConnection();
1:7eebc80:         
1:7eebc80:         MockInternalDriver dvr = new MockInternalDriver();
1:7eebc80:         dvr.boot(false, null);
1:7eebc80:         
1:7eebc80:         SupportFilesSetup.deleteFile(nonexistentFileName);
1:7eebc80:     }
1:7eebc80:     
1:7eebc80:     protected void tearDown() throws Exception {        
1:7eebc80:         try {           
1:7eebc80:             getTestConfiguration().shutdownEngine();            
1:7eebc80:         } catch (Exception e) {
1:7eebc80:             //Ignore exception for shut down mock driver            
1:7eebc80:         }        
1:7eebc80:         
1:7eebc80:         super.tearDown();
1:7eebc80:     }
1:7eebc80: 
1:7eebc80:     public void testRollBackWhenFailOnImportTable() throws SQLException { 
1:7eebc80:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE (" +
1:7eebc80:                 "null, 'IMP_EMP', '"  + nonexistentFileName + "test/test.dat" + 
1:7eebc80:                 "' , null, null, null, 0) ";
1:7eebc80:         realTestRollBackWhenImportOnNonexistentFile(callSentence);
1:7eebc80:     }
1:7eebc80:     
1:7eebc80:     public void testRollBackWhenFailOnImportTableLobsFromEXTFile() throws SQLException {
1:7eebc80:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(" +
1:7eebc80:                 "null, 'IET1' , '" + nonexistentFileName + "', null, null, null, 0)";
1:7eebc80:         realTestRollBackWhenImportOnNonexistentFile(callSentence);
1:7eebc80:     }
1:7eebc80:     
1:7eebc80:     public void testRollBackWhenFailOnImportData() throws SQLException {
1:7eebc80:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_DATA(null, 'IMP_EMP', " +
1:7eebc80:                 "null, null, '" + nonexistentFileName +  "', null, null, null, 1) ";
1:7eebc80:         realTestRollBackWhenImportOnNonexistentFile(callSentence);        
1:7eebc80:     }  
1:7eebc80:     
1:7eebc80:     public void testRollBackWhenFailOnImportDataLobsFromExtFile() throws SQLException {
1:7eebc80:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(" +
1:7eebc80:                 "null, 'IET1', null, null, '" + nonexistentFileName +
1:7eebc80:                 "', null, null, null, 1)";
1:7eebc80:         
1:7eebc80:         realTestRollBackWhenImportOnNonexistentFile(callSentence);
1:7eebc80:     }
1:7eebc80:     
1:7eebc80:     /**
1:7eebc80:      * Call passed importSentence and process the error.
1:7eebc80:      * @param importSentence a call sentence to to import data from a nonexistent file.
1:7eebc80:      */
1:7eebc80:     private void realTestRollBackWhenImportOnNonexistentFile(
1:7eebc80:             String importSentence) throws SQLException {
1:7eebc80:       //import a non-existing file will certainly fail
1:7eebc80:         CallableStatement cSt = prepareCall(importSentence);
1:7eebc80:         
1:7eebc80:         try {
1:7eebc80:             cSt.executeUpdate();
1:7eebc80:             fail("a SQLException should be thrown " +
1:7eebc80:                     "as we import data from a nonexistent file");
1:7eebc80:         } catch (SQLException e) {            
1:7eebc80:             assertSQLState("XIE0M", e);
1:7eebc80:             assertSQLState("XJ058", e.getNextException());            
1:7eebc80:         } finally {
1:7eebc80:             cSt.close();
1:7eebc80:         }
1:7eebc80:     }
1:7eebc80: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("RollBackWrappingWhenFailOnImportTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:595307e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.InternalDriver;
/////////////////////////////////////////////////////////////////////////
1:     class MockInternalDriver extends InternalDriver {
commit:850aba4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         public class MockConnectionFailWhenRollBack extends EmbedConnection {
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5570eb0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.Driver40;
/////////////////////////////////////////////////////////////////////////
0:     class MockInternalDriver extends Driver40 {
commit:25c1e7b
/////////////////////////////////////////////////////////////////////////
1:         public Connection connect( String url, Properties info, int loginTimeout ) {
1:                 conn = super.connect( url, info, loginTimeout );
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7eebc80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class RollBackWrappingWhenFailOnImportTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
1: import java.sql.CallableStatement;
1: 
1: 
1: import java.sql.Connection;
1: 
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.impl.jdbc.EmbedConnection;
0: import org.apache.derby.impl.jdbc.EmbedConnection30;
0: import org.apache.derby.jdbc.Driver30;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This test case comes from DERBY-4443. It's for show changes related to 
1:  * wrap rollback in exception handlers in try-catch.
1:  * In this test case, a MockInternalDriver is used to create a MockConnectionFailWhenRollBack
1:  * which will fail when rollback() is called.
1:  * 
1:  */
1: public class RollBackWrappingWhenFailOnImportTest extends BaseJDBCTestCase {
0:     class MockInternalDriver extends Driver30 {
1: 
0:         public class MockConnectionFailWhenRollBack extends EmbedConnection30 {
1: 
1:             public MockConnectionFailWhenRollBack(Connection connection) {
1:                 super((EmbedConnection)connection);
1:             }
1: 
1:             public void rollback() throws SQLException {
1:                 throw new SQLException("error in roll back", "XJ058");
1:             }
1:         }
1: 
0:         public Connection connect(String url, Properties info) {
1:             Connection conn = null;
1:             try {
0:                 conn = super.connect(url, info);
1:             } catch (Exception e) {
1:                 //this exception is ignored for mocking
1:             }
1:             return new MockConnectionFailWhenRollBack(conn);
1:         }
1:     }
1: 
1:     private String nonexistentFileName = "test/test.dat";
1: 
1:     public RollBackWrappingWhenFailOnImportTest(String name) {
1:         super(name);        
1:     }
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("RollBackWrappingWhenFailOnImportTest");
1:         
1:         if (!JDBC.vmSupportsJDBC3()) {
1:             return suite;
1:         }       
1:         
1:         Test test = new CleanDatabaseTestSetup(
1:                 TestConfiguration.embeddedSuite(
1:                         RollBackWrappingWhenFailOnImportTest.class));
1:                         
1:         suite.addTest(test);
1:         
1:         return suite;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         openDefaultConnection();
1:         
1:         MockInternalDriver dvr = new MockInternalDriver();
1:         dvr.boot(false, null);
1:         
1:         SupportFilesSetup.deleteFile(nonexistentFileName);
1:     }
1:     
1:     protected void tearDown() throws Exception {        
1:         try {           
1:             getTestConfiguration().shutdownEngine();            
1:         } catch (Exception e) {
1:             //Ignore exception for shut down mock driver            
1:         }        
1:         
1:         super.tearDown();
1:     }
1: 
1:     public void testRollBackWhenFailOnImportTable() throws SQLException { 
1:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE (" +
1:                 "null, 'IMP_EMP', '"  + nonexistentFileName + "test/test.dat" + 
1:                 "' , null, null, null, 0) ";
1:         realTestRollBackWhenImportOnNonexistentFile(callSentence);
1:     }
1:     
1:     public void testRollBackWhenFailOnImportTableLobsFromEXTFile() throws SQLException {
1:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(" +
1:                 "null, 'IET1' , '" + nonexistentFileName + "', null, null, null, 0)";
1:         realTestRollBackWhenImportOnNonexistentFile(callSentence);
1:     }
1:     
1:     public void testRollBackWhenFailOnImportData() throws SQLException {
1:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_DATA(null, 'IMP_EMP', " +
1:                 "null, null, '" + nonexistentFileName +  "', null, null, null, 1) ";
1:         realTestRollBackWhenImportOnNonexistentFile(callSentence);        
1:     }  
1:     
1:     public void testRollBackWhenFailOnImportDataLobsFromExtFile() throws SQLException {
1:         String callSentence = "call SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(" +
1:                 "null, 'IET1', null, null, '" + nonexistentFileName +
1:                 "', null, null, null, 1)";
1:         
1:         realTestRollBackWhenImportOnNonexistentFile(callSentence);
1:     }
1:     
1:     /**
1:      * Call passed importSentence and process the error.
1:      * @param importSentence a call sentence to to import data from a nonexistent file.
1:      */
1:     private void realTestRollBackWhenImportOnNonexistentFile(
1:             String importSentence) throws SQLException {
1:       //import a non-existing file will certainly fail
1:         CallableStatement cSt = prepareCall(importSentence);
1:         
1:         try {
1:             cSt.executeUpdate();
1:             fail("a SQLException should be thrown " +
1:                     "as we import data from a nonexistent file");
1:         } catch (SQLException e) {            
1:             assertSQLState("XIE0M", e);
1:             assertSQLState("XJ058", e.getNextException());            
1:         } finally {
1:             cSt.close();
1:         }
1:     }
1: }
============================================================================