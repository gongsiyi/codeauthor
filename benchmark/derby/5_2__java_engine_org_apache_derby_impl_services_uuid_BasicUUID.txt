1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.uuid.BasicUUID
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.uuid;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.io.StringReader;
1:eac0369: 
1:eac0369: 
1:eac0369: public class BasicUUID implements UUID, Formatable
6:eac0369: {
1:eac0369: 	/*
1:eac0369: 	** Fields of BasicUUID
1:eac0369: 	*/
1:eac0369: 	
1:eac0369: 	private long majorId; // only using 48 bits
1:eac0369: 	private long timemillis;
1:eac0369: 	private int sequence;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of BasicUUID
1:eac0369: 	*/
1:eac0369: 
4:eac0369: 	/**
2:eac0369: 		Constructor only called by BasicUUIDFactory.
2:eac0369: 	**/
1:eac0369: 	public BasicUUID(long majorId, long timemillis, int sequence)
1:eac0369: 	{
1:eac0369: 		this.majorId = majorId;
1:eac0369: 		this.timemillis = timemillis;
1:eac0369: 		this.sequence = sequence;
6:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Constructor only called by BasicUUIDFactory.
1:eac0369: 		Constructs a UUID from the string representation
1:eac0369: 		produced by toString.
1:eac0369: 		@see BasicUUID#toString
1:eac0369: 	**/
1:eac0369: 	public BasicUUID(String uuidstring)
1:eac0369: 	{
1:eac0369: 		StringReader sr = new StringReader(uuidstring);
1:eac0369: 		sequence = (int) readMSB(sr);
1:eac0369: 
1:eac0369: 		long ltimemillis = readMSB(sr) << 32;
1:eac0369: 		ltimemillis += readMSB(sr) << 16;
1:eac0369: 		ltimemillis += readMSB(sr);
2:eac0369: 		timemillis = ltimemillis;
1:eac0369: 		majorId = readMSB(sr);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public BasicUUID() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write this out.
1:eac0369: 		@exception IOException error writing to log stream
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		out.writeLong(majorId);
1:eac0369: 		out.writeLong(timemillis);
1:eac0369: 		out.writeInt(sequence);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException
1:eac0369: 	{
1:eac0369: 		majorId = in.readLong();
1:eac0369: 		timemillis = in.readLong();
1:eac0369: 		sequence = in.readInt();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.BASIC_UUID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private static void writeMSB(char[] data, int offset, long value, int nbytes)
1:eac0369:     {
1:eac0369:     	for (int i = nbytes - 1; i >= 0; i--)
1:eac0369: 		{
1:eac0369: 		   long b = (value & (255L << (8 * i))) >>> (8 * i);
1:eac0369: 
1:eac0369: 		   int c = (int) ((b & 0xf0) >> 4);
1:eac0369: 		   data[offset++] = (char) (c < 10 ? c + '0' : (c - 10) + 'a');
1:eac0369: 		   c = (int) (b & 0x0f);
1:eac0369: 		   data[offset++] = (char) (c < 10 ? c + '0' : (c - 10) + 'a');
1:eac0369: 		} 
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369: 		Read a long value, msb first, from its character 
1:eac0369: 		representation in the string reader, using '-' or
1:eac0369: 		end of string to delimit.
1:eac0369: 	**/
1:eac0369: 	private static long readMSB(StringReader sr)
1:eac0369:     {
1:eac0369: 		long value = 0;
1:eac0369: 
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			int c;
1:eac0369: 			while ((c = sr.read()) != -1)
1:eac0369: 			{
1:eac0369: 				if (c == '-')
1:eac0369: 					break;
1:eac0369: 				value <<= 4;
1:eac0369: 
1:eac0369: 				int nibble;
1:eac0369: 				if (c <= '9')
1:eac0369: 					nibble = c - '0';
1:eac0369: 				else if (c <= 'F')
1:eac0369: 					nibble = c - 'A' + 10;
1:eac0369: 				else
1:eac0369: 					nibble = c - 'a' + 10;
1:eac0369: 				value += nibble;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		catch (Exception e)
1:eac0369: 		{
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return value;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of UUID
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Implement value equality.
1:eac0369: 
1:eac0369: 	**/
1:eac0369: 	public boolean equals(Object otherObject)
1:eac0369: 	{
1:eac0369: 		if (!(otherObject instanceof BasicUUID))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		BasicUUID other = (BasicUUID) otherObject;
1:eac0369: 
1:eac0369: 		return (this.sequence == other.sequence)
1:eac0369: 			&& (this.timemillis == other.timemillis)
1:eac0369: 			&& (this.majorId == other.majorId);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Provide a hashCode which is compatible with
1:eac0369: 		the equals() method.
1:eac0369: 	**/
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		long hc = majorId ^ timemillis;
1:eac0369: 
1:eac0369: 		return sequence ^ ((int) (hc >> 4));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Produce a string representation of this UUID which
1:eac0369: 		can be passed to UUIDFactory.recreateUUID later on
1:eac0369: 		to reconstruct it.  The funny representation is 
1:eac0369: 		designed to (sort of) match the format of Microsoft's
1:eac0369: 		UUIDGEN utility.
1:eac0369: 	 */
1:eac0369: 	public String toString() {return stringWorkhorse( '-' );}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Produce a string representation of this UUID which
1:eac0369: 		is suitable for use as a unique ANSI identifier.
1:eac0369: 	 */
1:eac0369: 	public String toANSIidentifier() {return "U" + stringWorkhorse( 'X' );}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Private workhorse of the string making routines.
1:eac0369: 	  *
1:eac0369: 	  *	@param	separator	Character to separate number blocks.
1:eac0369: 	  *                     Null means do not include a separator.
1:eac0369: 	  *
1:eac0369: 	  *	@return	string representation of UUID.
1:eac0369: 	  */
1:eac0369: 	public	String	stringWorkhorse( char separator )
1:eac0369: 	{
1:eac0369: 		char[] data = new char[36];
1:eac0369: 
1:eac0369: 		writeMSB(data, 0, (long) sequence, 4);
1:eac0369: 
1:eac0369: 		int offset = 8;
1:eac0369: 		if (separator != 0) data[offset++] = separator;
1:eac0369: 
2:eac0369: 		long ltimemillis = timemillis;
1:eac0369: 		writeMSB(data, offset, (ltimemillis & 0x0000ffff00000000L) >>> 32, 2);
1:eac0369: 		offset += 4;
1:eac0369: 		if (separator != 0) data[offset++] = separator;
1:eac0369: 		writeMSB(data, offset, (ltimemillis & 0x00000000ffff0000L) >>> 16, 2);
1:eac0369: 		offset += 4;
1:eac0369: 		if (separator != 0) data[offset++] = separator;
1:eac0369: 		writeMSB(data, offset, (ltimemillis & 0x000000000000ffffL), 2);
1:eac0369: 		offset += 4;
1:eac0369: 		if (separator != 0) data[offset++] = separator;
1:eac0369: 		writeMSB(data, offset, majorId, 6);
1:eac0369: 		offset += 12;
1:eac0369: 
1:eac0369: 		return new String(data, 0, offset);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Clone this UUID.
1:eac0369: 
1:eac0369: 	  @return	a copy of this UUID
1:eac0369: 	  */
1:eac0369: 	public UUID cloneMe()
1:eac0369: 	{
1:eac0369: 		return	new	BasicUUID(majorId, timemillis, sequence);
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b9bd28c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.uuid.BasicUUID
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:8a59b6c
/////////////////////////////////////////////////////////////////////////
0: 		result[0] = (byte)(lsequence >>> 24);
0: 		result[1] = (byte)(lsequence >>> 16);
0: 		result[2] = (byte)(lsequence >>> 8);
0: 		result[3] = (byte)lsequence;
0: 		result[4] = (byte)(ltimemillis >>> 40);
0: 		result[5] = (byte)(ltimemillis >>> 32);
0: 		result[6] = (byte)(ltimemillis >>> 24);
0: 		result[7] = (byte)(ltimemillis >>> 16);
0:  		result[8] = (byte)(ltimemillis >>> 8);
0: 		result[9] = (byte)ltimemillis;
0: 		result[10] = (byte)(linetaddr >>> 40);
0: 		result[11] = (byte)(linetaddr >>> 32);
0: 		result[12] = (byte)(linetaddr >>> 24);
0: 		result[13] = (byte)(linetaddr >>> 16);
0: 		result[14] = (byte)(linetaddr >>> 8);
0: 		result[15] = (byte)linetaddr;
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.uuid
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.uuid;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.io.StringReader;
1: 
1: 
1: public class BasicUUID implements UUID, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/*
1: 	** Fields of BasicUUID
1: 	*/
1: 	
1: 	private long majorId; // only using 48 bits
1: 	private long timemillis;
1: 	private int sequence;
1: 
1: 	/*
1: 	** Methods of BasicUUID
1: 	*/
1: 
1: 	/**
1: 		Constructor only called by BasicUUIDFactory.
1: 	**/
1: 	public BasicUUID(long majorId, long timemillis, int sequence)
1: 	{
1: 		this.majorId = majorId;
1: 		this.timemillis = timemillis;
1: 		this.sequence = sequence;
1: 	}
1: 
1: 	/**
1: 		Constructor only called by BasicUUIDFactory.
1: 		Constructs a UUID from the string representation
1: 		produced by toString.
1: 		@see BasicUUID#toString
1: 	**/
1: 	public BasicUUID(String uuidstring)
1: 	{
1: 		StringReader sr = new StringReader(uuidstring);
1: 		sequence = (int) readMSB(sr);
1: 
1: 		long ltimemillis = readMSB(sr) << 32;
1: 		ltimemillis += readMSB(sr) << 16;
1: 		ltimemillis += readMSB(sr);
1: 		timemillis = ltimemillis;
1: 		majorId = readMSB(sr);
1: 	}
1: 
1: 	/**
1: 		Constructor only called by BasicUUIDFactory.
0: 		Constructs a UUID from the byte array representation
0: 		produced by toByteArrayio.
0: 		@see BasicUUID#toByteArray
1: 	**/
0: 	public BasicUUID(byte[] b)
1: 	{
0: 		int lsequence = 0;
0: 		for (int ix = 0; ix < 4; ix++)
1: 		{
0: 			lsequence = lsequence << 8;
0: 			lsequence = lsequence | (0xff & b[ix]);
1: 		}
1: 
0: 		long ltimemillis = 0;
0: 		for (int ix = 4; ix < 10; ix++)
1: 		{
0: 			ltimemillis = ltimemillis << 8;
0: 			ltimemillis = ltimemillis | (0xff & b[ix]);
1: 		}
1: 
0: 		long linetaddr = 0;
0: 		for (int ix = 10; ix < 16; ix++)
1: 		{
0: 			linetaddr = linetaddr << 8;
0: 			linetaddr = linetaddr | (0xff & b[ix]);
1: 		}
1: 
0: 		sequence = lsequence;
1: 		timemillis = ltimemillis;
0: 		majorId = linetaddr;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public BasicUUID() { super(); }
1: 
1: 	/**
1: 		Write this out.
1: 		@exception IOException error writing to log stream
1: 	*/
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
0: 		// RESOLVE: write out the byte array instead?
1: 		out.writeLong(majorId);
1: 		out.writeLong(timemillis);
1: 		out.writeInt(sequence);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 	*/
1: 	public void readExternal(ObjectInput in) throws IOException
1: 	{
1: 		majorId = in.readLong();
1: 		timemillis = in.readLong();
1: 		sequence = in.readInt();
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.BASIC_UUID;
1: 	}
1: 
1: 	private static void writeMSB(char[] data, int offset, long value, int nbytes)
1:     {
1:     	for (int i = nbytes - 1; i >= 0; i--)
1: 		{
1: 		   long b = (value & (255L << (8 * i))) >>> (8 * i);
1: 
1: 		   int c = (int) ((b & 0xf0) >> 4);
1: 		   data[offset++] = (char) (c < 10 ? c + '0' : (c - 10) + 'a');
1: 		   c = (int) (b & 0x0f);
1: 		   data[offset++] = (char) (c < 10 ? c + '0' : (c - 10) + 'a');
1: 		} 
1:     }
1: 
1:     /**
1: 		Read a long value, msb first, from its character 
1: 		representation in the string reader, using '-' or
1: 		end of string to delimit.
1: 	**/
1: 	private static long readMSB(StringReader sr)
1:     {
1: 		long value = 0;
1: 
1: 		try
1: 		{
1: 			int c;
1: 			while ((c = sr.read()) != -1)
1: 			{
1: 				if (c == '-')
1: 					break;
1: 				value <<= 4;
1: 
1: 				int nibble;
1: 				if (c <= '9')
1: 					nibble = c - '0';
1: 				else if (c <= 'F')
1: 					nibble = c - 'A' + 10;
1: 				else
1: 					nibble = c - 'a' + 10;
1: 				value += nibble;
1: 			}
1: 		}
1: 		catch (Exception e)
1: 		{
1: 		}
1: 
1: 		return value;
1:     }
1: 
1: 	/*
1: 	** Methods of UUID
1: 	*/
1: 
1: 	/**
1: 		Implement value equality.
1: 
1: 	**/
1: 	public boolean equals(Object otherObject)
1: 	{
1: 		if (!(otherObject instanceof BasicUUID))
1: 			return false;
1: 
1: 		BasicUUID other = (BasicUUID) otherObject;
1: 
1: 		return (this.sequence == other.sequence)
1: 			&& (this.timemillis == other.timemillis)
1: 			&& (this.majorId == other.majorId);
1: 	}
1: 
1: 	/**
1: 		Provide a hashCode which is compatible with
1: 		the equals() method.
1: 	**/
1: 	public int hashCode()
1: 	{
1: 		long hc = majorId ^ timemillis;
1: 
1: 		return sequence ^ ((int) (hc >> 4));
1: 	}
1: 
1: 	/**
1: 		Produce a string representation of this UUID which
1: 		can be passed to UUIDFactory.recreateUUID later on
1: 		to reconstruct it.  The funny representation is 
1: 		designed to (sort of) match the format of Microsoft's
1: 		UUIDGEN utility.
1: 	 */
1: 	public String toString() {return stringWorkhorse( '-' );}
1: 
1: 	/**
1: 		Produce a string representation of this UUID which
1: 		is suitable for use as a unique ANSI identifier.
1: 	 */
1: 	public String toANSIidentifier() {return "U" + stringWorkhorse( 'X' );}
1: 
1: 	/**
1: 	  *	Private workhorse of the string making routines.
1: 	  *
1: 	  *	@param	separator	Character to separate number blocks.
1: 	  *                     Null means do not include a separator.
1: 	  *
1: 	  *	@return	string representation of UUID.
1: 	  */
1: 	public	String	stringWorkhorse( char separator )
1: 	{
1: 		char[] data = new char[36];
1: 
1: 		writeMSB(data, 0, (long) sequence, 4);
1: 
1: 		int offset = 8;
1: 		if (separator != 0) data[offset++] = separator;
1: 
1: 		long ltimemillis = timemillis;
1: 		writeMSB(data, offset, (ltimemillis & 0x0000ffff00000000L) >>> 32, 2);
1: 		offset += 4;
1: 		if (separator != 0) data[offset++] = separator;
1: 		writeMSB(data, offset, (ltimemillis & 0x00000000ffff0000L) >>> 16, 2);
1: 		offset += 4;
1: 		if (separator != 0) data[offset++] = separator;
1: 		writeMSB(data, offset, (ltimemillis & 0x000000000000ffffL), 2);
1: 		offset += 4;
1: 		if (separator != 0) data[offset++] = separator;
1: 		writeMSB(data, offset, majorId, 6);
1: 		offset += 12;
1: 
1: 		return new String(data, 0, offset);
1: 	}
1: 
1: 	/**
0: 	  Store this UUID in a byte array. Arrange the bytes in the UUID
0: 	  in the same order the code which stores a UUID in a string
0: 	  does.
1: 	  
0: 	  @see org.apache.derby.catalog.UUID#toByteArray
1: 	*/
0: 	public byte[] toByteArray()
1: 	{
0: 		byte[] result = new byte[16];
1: 
0: 		int lsequence = sequence; 
0: 		result[0] = (byte)((lsequence & 0xff000000) >>> 24);
0: 		result[1] = (byte)((lsequence & 0x00ff0000) >>> 16);
0: 		result[2] = (byte)((lsequence & 0x0000ff00) >>> 8);
0: 		result[3] = (byte) (lsequence & 0x000000ff);
1: 
1: 		long ltimemillis = timemillis;
0: 		result[4] = (byte)((ltimemillis & 0x0000ff0000000000L) >>> 40);
0: 		result[5] = (byte)((ltimemillis & 0x000000ff00000000L) >>> 32);
0: 		result[6] = (byte)((ltimemillis & 0x00000000ff000000L) >>> 24);
0: 		result[7] = (byte)((ltimemillis & 0x0000000000ff0000L) >>> 16);
0:  		result[8] = (byte)((ltimemillis & 0x000000000000ff00L) >>> 8);
0: 		result[9] = (byte) (ltimemillis & 0x00000000000000ffL);
1: 
0: 		long linetaddr = majorId;
0: 		result[10] = (byte)((linetaddr & 0x0000ff0000000000L) >>> 40);
0: 		result[11] = (byte)((linetaddr & 0x000000ff00000000L) >>> 32);
0: 		result[12] = (byte)((linetaddr & 0x00000000ff000000L) >>> 24);
0: 		result[13] = (byte)((linetaddr & 0x0000000000ff0000L) >>> 16);
0: 		result[14] = (byte)((linetaddr & 0x000000000000ff00L) >>> 8);
0: 		result[15] = (byte) (linetaddr & 0x00000000000000ffL);
1: 
0: 		return result;
1: 	}
1: 
1: 	/**
1: 	  Clone this UUID.
1: 
1: 	  @return	a copy of this UUID
1: 	  */
1: 	public UUID cloneMe()
1: 	{
1: 		return	new	BasicUUID(majorId, timemillis, sequence);
1: 	}
1: 
0: 	public String toHexString() {return stringWorkhorse( (char) 0 );}
1: }
1: 
commit:d2a30a0
/////////////////////////////////////////////////////////////////////////
0: 		result[0] = (byte)((lsequence & 0xff000000) >>> 24);
0: 		result[1] = (byte)((lsequence & 0x00ff0000) >>> 16);
0: 		result[2] = (byte)((lsequence & 0x0000ff00) >>> 8);
0: 		result[3] = (byte) (lsequence & 0x000000ff);
0: 		result[4] = (byte)((ltimemillis & 0x0000ff0000000000L) >>> 40);
0: 		result[5] = (byte)((ltimemillis & 0x000000ff00000000L) >>> 32);
0: 		result[6] = (byte)((ltimemillis & 0x00000000ff000000L) >>> 24);
0: 		result[7] = (byte)((ltimemillis & 0x0000000000ff0000L) >>> 16);
0:  		result[8] = (byte)((ltimemillis & 0x000000000000ff00L) >>> 8);
0: 		result[9] = (byte) (ltimemillis & 0x00000000000000ffL);
0: 		result[10] = (byte)((linetaddr & 0x0000ff0000000000L) >>> 40);
0: 		result[11] = (byte)((linetaddr & 0x000000ff00000000L) >>> 32);
0: 		result[12] = (byte)((linetaddr & 0x00000000ff000000L) >>> 24);
0: 		result[13] = (byte)((linetaddr & 0x0000000000ff0000L) >>> 16);
0: 		result[14] = (byte)((linetaddr & 0x000000000000ff00L) >>> 8);
0: 		result[15] = (byte) (linetaddr & 0x00000000000000ffL);
commit:42261f8
/////////////////////////////////////////////////////////////////////////
0: 		result[0] = (byte)(lsequence >>> 24);
0: 		result[1] = (byte)(lsequence >>> 16);
0: 		result[2] = (byte)(lsequence >>> 8);
0: 		result[3] = (byte)lsequence;
0: 		result[4] = (byte)(ltimemillis >>> 40);
0: 		result[5] = (byte)(ltimemillis >>> 32);
0: 		result[6] = (byte)(ltimemillis >>> 24);
0: 		result[7] = (byte)(ltimemillis >>> 16);
0:  		result[8] = (byte)(ltimemillis >>> 8);
0: 		result[9] = (byte)ltimemillis;
0: 		result[10] = (byte)(linetaddr >>> 40);
0: 		result[11] = (byte)(linetaddr >>> 32);
0: 		result[12] = (byte)(linetaddr >>> 24);
0: 		result[13] = (byte)(linetaddr >>> 16);
0: 		result[14] = (byte)(linetaddr >>> 8);
0: 		result[15] = (byte)linetaddr;
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.uuid
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.uuid;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.io.StringReader;
0: 
0: 
0: public class BasicUUID implements UUID, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/*
0: 	** Fields of BasicUUID
0: 	*/
0: 	
0: 	private long majorId; // only using 48 bits
0: 	private long timemillis;
0: 	private int sequence;
0: 
0: 	/*
0: 	** Methods of BasicUUID
0: 	*/
0: 
0: 	/**
0: 		Constructor only called by BasicUUIDFactory.
0: 	**/
0: 	public BasicUUID(long majorId, long timemillis, int sequence)
0: 	{
0: 		this.majorId = majorId;
0: 		this.timemillis = timemillis;
0: 		this.sequence = sequence;
0: 	}
0: 
0: 	/**
0: 		Constructor only called by BasicUUIDFactory.
0: 		Constructs a UUID from the string representation
0: 		produced by toString.
0: 		@see BasicUUID#toString
0: 	**/
0: 	public BasicUUID(String uuidstring)
0: 	{
0: 		StringReader sr = new StringReader(uuidstring);
0: 		sequence = (int) readMSB(sr);
0: 
0: 		long ltimemillis = readMSB(sr) << 32;
0: 		ltimemillis += readMSB(sr) << 16;
0: 		ltimemillis += readMSB(sr);
0: 		timemillis = ltimemillis;
0: 		majorId = readMSB(sr);
0: 	}
0: 
0: 	/**
0: 		Constructor only called by BasicUUIDFactory.
0: 		Constructs a UUID from the byte array representation
0: 		produced by toByteArrayio.
0: 		@see BasicUUID#toByteArray
0: 	**/
0: 	public BasicUUID(byte[] b)
0: 	{
0: 		int lsequence = 0;
0: 		for (int ix = 0; ix < 4; ix++)
0: 		{
0: 			lsequence = lsequence << 8;
0: 			lsequence = lsequence | (0xff & b[ix]);
0: 		}
0: 
0: 		long ltimemillis = 0;
0: 		for (int ix = 4; ix < 10; ix++)
0: 		{
0: 			ltimemillis = ltimemillis << 8;
0: 			ltimemillis = ltimemillis | (0xff & b[ix]);
0: 		}
0: 
0: 		long linetaddr = 0;
0: 		for (int ix = 10; ix < 16; ix++)
0: 		{
0: 			linetaddr = linetaddr << 8;
0: 			linetaddr = linetaddr | (0xff & b[ix]);
0: 		}
0: 
0: 		sequence = lsequence;
0: 		timemillis = ltimemillis;
0: 		majorId = linetaddr;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public BasicUUID() { super(); }
0: 
0: 	/**
0: 		Write this out.
0: 		@exception IOException error writing to log stream
0: 	*/
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		// RESOLVE: write out the byte array instead?
0: 		out.writeLong(majorId);
0: 		out.writeLong(timemillis);
0: 		out.writeInt(sequence);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 	*/
0: 	public void readExternal(ObjectInput in) throws IOException
0: 	{
0: 		majorId = in.readLong();
0: 		timemillis = in.readLong();
0: 		sequence = in.readInt();
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.BASIC_UUID;
0: 	}
0: 
0: 	private static void writeMSB(char[] data, int offset, long value, int nbytes)
0:     {
0:     	for (int i = nbytes - 1; i >= 0; i--)
0: 		{
0: 		   long b = (value & (255L << (8 * i))) >>> (8 * i);
0: 
0: 		   int c = (int) ((b & 0xf0) >> 4);
0: 		   data[offset++] = (char) (c < 10 ? c + '0' : (c - 10) + 'a');
0: 		   c = (int) (b & 0x0f);
0: 		   data[offset++] = (char) (c < 10 ? c + '0' : (c - 10) + 'a');
0: 		} 
0:     }
0: 
0:     /**
0: 		Read a long value, msb first, from its character 
0: 		representation in the string reader, using '-' or
0: 		end of string to delimit.
0: 	**/
0: 	private static long readMSB(StringReader sr)
0:     {
0: 		long value = 0;
0: 
0: 		try
0: 		{
0: 			int c;
0: 			while ((c = sr.read()) != -1)
0: 			{
0: 				if (c == '-')
0: 					break;
0: 				value <<= 4;
0: 
0: 				int nibble;
0: 				if (c <= '9')
0: 					nibble = c - '0';
0: 				else if (c <= 'F')
0: 					nibble = c - 'A' + 10;
0: 				else
0: 					nibble = c - 'a' + 10;
0: 				value += nibble;
0: 			}
0: 		}
0: 		catch (Exception e)
0: 		{
0: 		}
0: 
0: 		return value;
0:     }
0: 
0: 	/*
0: 	** Methods of UUID
0: 	*/
0: 
0: 	/**
0: 		Implement value equality.
0: 
0: 	**/
0: 	public boolean equals(Object otherObject)
0: 	{
0: 		if (!(otherObject instanceof BasicUUID))
0: 			return false;
0: 
0: 		BasicUUID other = (BasicUUID) otherObject;
0: 
0: 		return (this.sequence == other.sequence)
0: 			&& (this.timemillis == other.timemillis)
0: 			&& (this.majorId == other.majorId);
0: 	}
0: 
0: 	/**
0: 		Provide a hashCode which is compatible with
0: 		the equals() method.
0: 	**/
0: 	public int hashCode()
0: 	{
0: 		long hc = majorId ^ timemillis;
0: 
0: 		return sequence ^ ((int) (hc >> 4));
0: 	}
0: 
0: 	/**
0: 		Produce a string representation of this UUID which
0: 		can be passed to UUIDFactory.recreateUUID later on
0: 		to reconstruct it.  The funny representation is 
0: 		designed to (sort of) match the format of Microsoft's
0: 		UUIDGEN utility.
0: 	 */
0: 	public String toString() {return stringWorkhorse( '-' );}
0: 
0: 	/**
0: 		Produce a string representation of this UUID which
0: 		is suitable for use as a unique ANSI identifier.
0: 	 */
0: 	public String toANSIidentifier() {return "U" + stringWorkhorse( 'X' );}
0: 
0: 	/**
0: 	  *	Private workhorse of the string making routines.
0: 	  *
0: 	  *	@param	separator	Character to separate number blocks.
0: 	  *                     Null means do not include a separator.
0: 	  *
0: 	  *	@return	string representation of UUID.
0: 	  */
0: 	public	String	stringWorkhorse( char separator )
0: 	{
0: 		char[] data = new char[36];
0: 
0: 		writeMSB(data, 0, (long) sequence, 4);
0: 
0: 		int offset = 8;
0: 		if (separator != 0) data[offset++] = separator;
0: 
0: 		long ltimemillis = timemillis;
0: 		writeMSB(data, offset, (ltimemillis & 0x0000ffff00000000L) >>> 32, 2);
0: 		offset += 4;
0: 		if (separator != 0) data[offset++] = separator;
0: 		writeMSB(data, offset, (ltimemillis & 0x00000000ffff0000L) >>> 16, 2);
0: 		offset += 4;
0: 		if (separator != 0) data[offset++] = separator;
0: 		writeMSB(data, offset, (ltimemillis & 0x000000000000ffffL), 2);
0: 		offset += 4;
0: 		if (separator != 0) data[offset++] = separator;
0: 		writeMSB(data, offset, majorId, 6);
0: 		offset += 12;
0: 
0: 		return new String(data, 0, offset);
0: 	}
0: 
0: 	/**
0: 	  Store this UUID in a byte array. Arrange the bytes in the UUID
0: 	  in the same order the code which stores a UUID in a string
0: 	  does.
0: 	  
0: 	  @see org.apache.derby.catalog.UUID#toByteArray
0: 	*/
0: 	public byte[] toByteArray()
0: 	{
0: 		byte[] result = new byte[16];
0: 
0: 		int lsequence = sequence; 
0: 		result[0] = (byte)((lsequence & 0xff000000) >>> 24);
0: 		result[1] = (byte)((lsequence & 0x00ff0000) >>> 16);
0: 		result[2] = (byte)((lsequence & 0x0000ff00) >>> 8);
0: 		result[3] = (byte) (lsequence & 0x000000ff);
0: 
0: 		long ltimemillis = timemillis;
0: 		result[4] = (byte)((ltimemillis & 0x0000ff0000000000L) >>> 40);
0: 		result[5] = (byte)((ltimemillis & 0x000000ff00000000L) >>> 32);
0: 		result[6] = (byte)((ltimemillis & 0x00000000ff000000L) >>> 24);
0: 		result[7] = (byte)((ltimemillis & 0x0000000000ff0000L) >>> 16);
0:  		result[8] = (byte)((ltimemillis & 0x000000000000ff00L) >>> 8);
0: 		result[9] = (byte) (ltimemillis & 0x00000000000000ffL);
0: 
0: 		long linetaddr = majorId;
0: 		result[10] = (byte)((linetaddr & 0x0000ff0000000000L) >>> 40);
0: 		result[11] = (byte)((linetaddr & 0x000000ff00000000L) >>> 32);
0: 		result[12] = (byte)((linetaddr & 0x00000000ff000000L) >>> 24);
0: 		result[13] = (byte)((linetaddr & 0x0000000000ff0000L) >>> 16);
0: 		result[14] = (byte)((linetaddr & 0x000000000000ff00L) >>> 8);
0: 		result[15] = (byte) (linetaddr & 0x00000000000000ffL);
0: 
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	  Clone this UUID.
0: 
0: 	  @return	a copy of this UUID
0: 	  */
0: 	public UUID cloneMe()
0: 	{
0: 		return	new	BasicUUID(majorId, timemillis, sequence);
0: 	}
0: 
0: 	public String toHexString() {return stringWorkhorse( (char) 0 );}
0: }
0: 
============================================================================