1:ee2a860: /*
1:ee2a860:  * Derby - class org.apache.derby.impl.drda.DRDAString
2:ee2a860:  *
1:59e5225:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:  * contributor license agreements.  See the NOTICE file distributed with
1:59e5225:  * this work for additional information regarding copyright ownership.
1:59e5225:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:  * (the "License"); you may not use this file except in compliance with
1:59e5225:  * the License.  You may obtain a copy of the License at
1:ee2a860:  *
1:ee2a860:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ee2a860:  *
1:ee2a860:  * Unless required by applicable law or agreed to in writing, software
1:ee2a860:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee2a860:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
1:ee2a860:  * implied. See the License for the specific language governing
1:ee2a860:  * permissions and limitations under the License.
1:ee2a860:  *
1:ee2a860:  */
1:ee2a860: 
1:ee2a860: package org.apache.derby.impl.drda;
1:ee2a860: 
1:ee2a860: /**
1:ee2a860:  * This class provides functionality for reusing buffers and strings
1:ee2a860:  * when parsing DRDA packets. A byte array representing a string is
1:ee2a860:  * stored internally. When the string is requested as a
1:ee2a860:  * <code>String</code> object, the byte array is converted to a
1:ee2a860:  * string, and the string is cached to avoid unnecessary conversion
1:ee2a860:  * later.
1:ee2a860:  */
1:ee2a860: final class DRDAString {
1:ee2a860:     /** Buffer representing the string. */
1:ee2a860:     private byte[] buffer;
1:1451af7:     
1:1451af7:     /** Keep the DDMWriter as it contains the current CCSID manager being used */
1:1451af7:     private final DDMWriter writer;
1:ee2a860: 
1:ee2a860:     /** True if the contents were modified in the previous call to
1:ee2a860:      * <code>setBytes</code>. */
1:ee2a860:     private boolean modified;
1:ee2a860: 
1:ee2a860:     /** The previously generated string. */
1:ee2a860:     private String cachedString;
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Create a new <code>DRDAString</code> instance.
1:ee2a860:      *
1:e9ffbf6:      * @param w a <code>DDMWriter</code> which holds current CCSidManager
1:e9ffbf6:      * and which encoding is used
1:ee2a860:      */
1:1451af7:     DRDAString(DDMWriter w) {
1:ee2a860:         this.buffer = new byte[0];
1:1451af7:         this.writer = w;
1:ee2a860:         this.cachedString = null;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Check whether the internal buffer contains the same data as
1:ee2a860:      * another byte buffer.
1:ee2a860:      *
1:ee2a860:      * @param buf a byte array
1:ee2a860:      * @param offset start position in the byte array
1:ee2a860:      * @param size how many bytes to read from the byte array
1:ee2a860:      * @return <code>true</code> if the internal buffer contains the
1:ee2a860:      * same data as the specified byte array
1:ee2a860:      */
1:ee2a860:     private boolean equalTo(byte[] buf, int offset, int size) {
1:ee2a860:         int len = buffer.length;
1:ee2a860:         if (len != size) return false;
1:ee2a860:         for (int i = 0; i < len; ++i) {
1:ee2a860:             if (buffer[i] != buf[i+offset]) return false;
1:ee2a860:         }
1:ee2a860:         return true;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Modify the internal byte buffer. If the new data is equal to
1:ee2a860:      * the old data, the cached values are not cleared.
1:ee2a860:      *
1:ee2a860:      * @param src the new bytes
1:ee2a860:      * @param offset start offset
1:ee2a860:      * @param size number of bytes to use
1:ee2a860:      */
1:ee2a860:     public void setBytes(byte[] src, int offset, int size) {
1:ee2a860:         if (equalTo(src, offset, size)) {
1:ee2a860:             modified = false;
1:ee2a860:             return;
1:ee2a860:         }
1:ee2a860:         if (buffer.length != size) {
1:ee2a860:             buffer = new byte[size];
1:ee2a860:         }
1:ee2a860:         System.arraycopy(src, offset, buffer, 0, size);
1:ee2a860:         modified = true;
1:ee2a860:         cachedString = null;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Check whether the contents of the <code>DRDAString</code> were
1:ee2a860:      * modified in the previous call to <code>setBytes()</code>.
1:ee2a860:      *
1:ee2a860:      * @return <code>true</code> if the contents were modified
1:ee2a860:      */
1:ee2a860:     public boolean wasModified() {
1:ee2a860:         return modified;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Convert the internal byte array to a string. The string value
1:ee2a860:      * is cached.
1:ee2a860:      *
1:ee2a860:      * @return a <code>String</code> value
1:ee2a860:      */
1:ee2a860:     public String toString() {
1:ee2a860:         if (cachedString == null) {
1:ee2a860:             cachedString =
1:1451af7:                 writer.getCurrentCcsidManager().convertToJavaString(buffer);
1:ee2a860:         }
1:ee2a860:         return cachedString;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Return the length in bytes of the internal string
1:ee2a860:      * representation.
1:ee2a860:      *
1:ee2a860:      * @return length of internal representation
1:ee2a860:      */
1:ee2a860:     public int length() {
1:ee2a860:         return buffer.length;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Return the internal byte array. The returned array should not
1:ee2a860:      * be modified, as it is used internally in
1:ee2a860:      * <code>DRDAString</code>. The value of the array might be
1:ee2a860:      * modified by subsequent calls to
1:ee2a860:      * <code>DRDAString.setBytes()</code>.
1:ee2a860:      *
1:ee2a860:      * @return internal buffer
1:ee2a860:      */
1:ee2a860:     public byte[] getBytes() {
1:ee2a860:         return buffer;
1:ee2a860:     }
1:ee2a860: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:e9ffbf6
/////////////////////////////////////////////////////////////////////////
1:      * @param w a <code>DDMWriter</code> which holds current CCSidManager
1:      * and which encoding is used
commit:1451af7
/////////////////////////////////////////////////////////////////////////
1:     
1:     /** Keep the DDMWriter as it contains the current CCSID manager being used */
1:     private final DDMWriter writer;
/////////////////////////////////////////////////////////////////////////
1:     DRDAString(DDMWriter w) {
1:         this.writer = w;
/////////////////////////////////////////////////////////////////////////
1:                 writer.getCurrentCcsidManager().convertToJavaString(buffer);
commit:cdfb2d1
/////////////////////////////////////////////////////////////////////////
0:                 ccsidManager.convertToJavaString(buffer);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
0:     DRDAString(CcsidManager m) {
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:ee2a860
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - class org.apache.derby.impl.drda.DRDAString
1:  *
0:  * Copyright 2005 The Apache Software Foundation or its licensors, as
0:  * applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you
0:  * may not use this file except in compliance with the License. You
0:  * may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
1:  * implied. See the License for the specific language governing
1:  * permissions and limitations under the License.
1:  *
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
1: /**
1:  * This class provides functionality for reusing buffers and strings
1:  * when parsing DRDA packets. A byte array representing a string is
1:  * stored internally. When the string is requested as a
1:  * <code>String</code> object, the byte array is converted to a
1:  * string, and the string is cached to avoid unnecessary conversion
1:  * later.
1:  */
1: final class DRDAString {
1:     /** Buffer representing the string. */
1:     private byte[] buffer;
0:     /** Object used to convert byte buffer to string. */
0:     private final CcsidManager ccsidManager;
1: 
1:     /** True if the contents were modified in the previous call to
1:      * <code>setBytes</code>. */
1:     private boolean modified;
1: 
1:     /** The previously generated string. */
1:     private String cachedString;
1: 
1:     /**
1:      * Create a new <code>DRDAString</code> instance.
1:      *
0:      * @param m a <code>CcsidManager</code> value specifying
0:      * which encoding is used
1:      */
0:     public DRDAString(CcsidManager m) {
1:         this.buffer = new byte[0];
0:         this.ccsidManager = m;
1:         this.cachedString = null;
1:     }
1: 
1:     /**
1:      * Check whether the internal buffer contains the same data as
1:      * another byte buffer.
1:      *
1:      * @param buf a byte array
1:      * @param offset start position in the byte array
1:      * @param size how many bytes to read from the byte array
1:      * @return <code>true</code> if the internal buffer contains the
1:      * same data as the specified byte array
1:      */
1:     private boolean equalTo(byte[] buf, int offset, int size) {
1:         int len = buffer.length;
1:         if (len != size) return false;
1:         for (int i = 0; i < len; ++i) {
1:             if (buffer[i] != buf[i+offset]) return false;
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Modify the internal byte buffer. If the new data is equal to
1:      * the old data, the cached values are not cleared.
1:      *
1:      * @param src the new bytes
1:      * @param offset start offset
1:      * @param size number of bytes to use
1:      */
1:     public void setBytes(byte[] src, int offset, int size) {
1:         if (equalTo(src, offset, size)) {
1:             modified = false;
1:             return;
1:         }
1:         if (buffer.length != size) {
1:             buffer = new byte[size];
1:         }
1:         System.arraycopy(src, offset, buffer, 0, size);
1:         modified = true;
1:         cachedString = null;
1:     }
1: 
1:     /**
1:      * Check whether the contents of the <code>DRDAString</code> were
1:      * modified in the previous call to <code>setBytes()</code>.
1:      *
1:      * @return <code>true</code> if the contents were modified
1:      */
1:     public boolean wasModified() {
1:         return modified;
1:     }
1: 
1:     /**
1:      * Convert the internal byte array to a string. The string value
1:      * is cached.
1:      *
1:      * @return a <code>String</code> value
1:      */
1:     public String toString() {
1:         if (cachedString == null) {
1:             cachedString =
0:                 ccsidManager.convertToUCS2(buffer);
1:         }
1:         return cachedString;
1:     }
1: 
1:     /**
1:      * Return the length in bytes of the internal string
1:      * representation.
1:      *
1:      * @return length of internal representation
1:      */
1:     public int length() {
1:         return buffer.length;
1:     }
1: 
1:     /**
1:      * Return the internal byte array. The returned array should not
1:      * be modified, as it is used internally in
1:      * <code>DRDAString</code>. The value of the array might be
1:      * modified by subsequent calls to
1:      * <code>DRDAString.setBytes()</code>.
1:      *
1:      * @return internal buffer
1:      */
1:     public byte[] getBytes() {
1:         return buffer;
1:     }
1: }
============================================================================