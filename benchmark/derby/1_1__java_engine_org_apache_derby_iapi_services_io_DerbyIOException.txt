1:10cc70b: /*
1:10cc70b: 
1:10cc70b:    Derby - Class org.apache.derby.iapi.service.io.DerbyIOException
1:10cc70b: 
1:10cc70b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10cc70b:    contributor license agreements.  See the NOTICE file distributed with
1:10cc70b:    this work for additional information regarding copyright ownership.
1:10cc70b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:10cc70b:    (the "License"); you may not use this file except in compliance with
1:10cc70b:    the License.  You may obtain a copy of the License at
1:10cc70b: 
1:10cc70b:       http://www.apache.org/licenses/LICENSE-2.0
1:10cc70b: 
1:10cc70b:    Unless required by applicable law or agreed to in writing, software
1:10cc70b:    distributed under the License is distributed on an "AS IS" BASIS,
1:10cc70b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10cc70b:    See the License for the specific language governing permissions and
1:10cc70b:    limitations under the License.
1:10cc70b: 
1:10cc70b:  */
1:10cc70b: 
1:10cc70b: package org.apache.derby.iapi.services.io;
1:10cc70b: 
1:10cc70b: import java.io.IOException;
1:10cc70b: 
1:10cc70b: /**
1:10cc70b:  * A subclass of <code>IOException</code> that carries a SQL state.
1:10cc70b:  *
1:10cc70b:  * The original reason for adding it was to separate between
1:10cc70b:  * <code>IOException</code>s generated by the application stream and the ones
1:10cc70b:  * generated by the Derby wrapper streams, see for instance
1:10cc70b:  * <code>RawToBinaryFormatStream</code>. Without this distinction, the user
1:10cc70b:  * would not be able to easily write <code>catch</code>-blocks to handle
1:10cc70b:  * specific errors happening when reading streams.
1:10cc70b:  */
1:10cc70b: public final class DerbyIOException
1:10cc70b:     extends IOException {
1:10cc70b: 
1:10cc70b:     /** A Derby SQLState. */
1:10cc70b:     private final String sqlState;
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a new Derby IO exception.
1:10cc70b:      *
1:10cc70b:      * @param msg a string describing the error
1:10cc70b:      * @param sqlState a Derby SQLState describing the error
1:10cc70b:      */
1:10cc70b:     public DerbyIOException(String msg, String sqlState) {
1:10cc70b:         super(msg);
1:10cc70b:         this.sqlState = sqlState;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     public String getSQLState() {
1:10cc70b:         return sqlState;
1:10cc70b:     }
1:10cc70b: } // End class DerbyIOException
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:10cc70b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.service.io.DerbyIOException
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * A subclass of <code>IOException</code> that carries a SQL state.
1:  *
1:  * The original reason for adding it was to separate between
1:  * <code>IOException</code>s generated by the application stream and the ones
1:  * generated by the Derby wrapper streams, see for instance
1:  * <code>RawToBinaryFormatStream</code>. Without this distinction, the user
1:  * would not be able to easily write <code>catch</code>-blocks to handle
1:  * specific errors happening when reading streams.
1:  */
1: public final class DerbyIOException
1:     extends IOException {
1: 
1:     /** A Derby SQLState. */
1:     private final String sqlState;
1: 
1:     /**
1:      * Create a new Derby IO exception.
1:      *
1:      * @param msg a string describing the error
1:      * @param sqlState a Derby SQLState describing the error
1:      */
1:     public DerbyIOException(String msg, String sqlState) {
1:         super(msg);
1:         this.sqlState = sqlState;
1:     }
1: 
1:     public String getSQLState() {
1:         return sqlState;
1:     }
1: } // End class DerbyIOException
============================================================================