1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.GenericAggregateResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
15:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import java.util.Vector;
1:bbb545e: import org.w3c.dom.Element;
1:bbb545e: import org.w3c.dom.Node;
1:bbb545e: import org.w3c.dom.NodeList;
1:b31849d: 
1:e8aba82: import org.apache.derby.iapi.error.SQLWarningFactory;
1:b31849d: import org.apache.derby.iapi.error.StandardException;
1:b31849d: import org.apache.derby.iapi.reference.SQLState;
1:b31849d: import org.apache.derby.iapi.services.loader.ClassFactory;
1:b31849d: import org.apache.derby.iapi.sql.Activation;
1:b31849d: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:b31849d: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:d868eed: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:d868eed: import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
1:d868eed: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:b31849d: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Generic aggregation utilities.
1:eac0369:  *
1:eac0369:  */
1:eac0369: abstract class GenericAggregateResultSet extends NoPutResultSetImpl
1:eac0369: {
1:eac0369: 	protected GenericAggregator[]		aggregates;	
1:eac0369: 	protected AggregatorInfoList	aggInfoList;	
1:eac0369: 	public NoPutResultSet source;
1:eac0369: 	protected	NoPutResultSet	originalSource; // used for run time stats only
1:d868eed:     private final ExecIndexRow rowTemplate;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor
1:eac0369: 	 *
1:eac0369: 	 * @param a activation
1:d868eed: 	 * @param ra reference to a saved row allocator instance
1:eac0369: 	 * @param resultSetNumber result set number
1:eac0369: 	 * @param optimizerEstimatedRowCount optimizer estimated row count
1:eac0369: 	 * @param optimizerEstimatedCost optimizer estimated cost
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	GenericAggregateResultSet
1:eac0369: 	(
1:eac0369: 		NoPutResultSet s,
1:eac0369: 		int	aggregateItem,
1:eac0369: 		Activation 	a,
1:d868eed: 		int ra,
1:eac0369: 		int 			resultSetNumber,
1:eac0369: 		double 			optimizerEstimatedRowCount,
1:f77f36d: 		double 			optimizerEstimatedCost
1:eac0369: 	) 
1:eac0369: 		throws StandardException 
1:eac0369: 	{
1:eac0369: 		super(a, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369: 		source = s;
1:eac0369: 		originalSource = s;
1:eac0369: 
1:d868eed:         ExecPreparedStatement ps = a.getPreparedStatement();
1:d868eed:         ExecutionFactory ef = a.getExecutionFactory();
1:eac0369: 
1:d868eed:         rowTemplate = ef.getIndexableRow(
1:d868eed:                 ((ExecRowBuilder) ps.getSavedObject(ra)).build(ef));
1:eac0369: 
1:d868eed: 		aggInfoList = (AggregatorInfoList) ps.getSavedObject(aggregateItem);
1:eac0369: 		aggregates = getSortAggregators(aggInfoList, false, 
1:eac0369: 				a.getLanguageConnectionContext(), s);
1:eac0369: 	}
1:eac0369: 
1:d868eed:     /**
1:d868eed:      * Get a template row of the right shape for sorting or returning results.
1:d868eed:      * The template is cached, so it may need to be cloned if callers use it
1:d868eed:      * for multiple purposes at the same time.
1:d868eed:      *
1:d868eed:      * @return a row template of the right shape for this result set
1:d868eed:      */
1:d868eed:     ExecIndexRow getRowTemplate() {
1:d868eed:         return rowTemplate;
1:d868eed:     }
1:d868eed: 
1:eac0369: 	/**
1:eac0369: 	 * For each AggregatorInfo in the list, generate a
1:eac0369: 	 * GenericAggregator and stick it in an array of
1:eac0369: 	 * GenericAggregators.
1:eac0369: 	 *
1:eac0369: 	 * @param list 	the list of aggregators to set up	
1:eac0369: 	 * @param eliminateDistincts	should distincts be ignored.  
1:eac0369: 	 *		Used to toss out distinct aggregates for a prelim
1:eac0369: 	 *		sort.
1:eac0369: 	 * @param lcc the lcc
1:eac0369: 	 * @param inputResultSet the incoming result set
1:eac0369: 	 *
1:eac0369: 	 * @return the array of GenericAggregators
1:eac0369: 	 * 
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */	
1:801cf0d:     @SuppressWarnings("UseOfObsoleteCollectionType")
1:eac0369: 	protected final GenericAggregator[] getSortAggregators
1:eac0369: 	(
1:eac0369: 		AggregatorInfoList 			list,
1:eac0369: 		boolean 					eliminateDistincts,
1:eac0369: 		LanguageConnectionContext	lcc,
1:eac0369: 		NoPutResultSet				inputResultSet	
1:eac0369: 	) throws StandardException
1:eac0369: 	{
1:eac0369: 		GenericAggregator 	aggregators[]; 
1:801cf0d:         Vector<GenericAggregator>
1:801cf0d:                 tmpAggregators = new Vector<GenericAggregator>();
1:eac0369: 		ClassFactory		cf = lcc.getLanguageConnectionFactory().getClassFactory();
1:eac0369: 
1:801cf0d:         for (AggregatorInfo aggInfo : list)
1:eac0369: 		{
1:eac0369: 			if (! (eliminateDistincts && aggInfo.isDistinct()))
1:eac0369: 			// if (eliminateDistincts == aggInfo.isDistinct())
1:eac0369: 			{
1:eac0369: 				tmpAggregators.addElement(new GenericAggregator(aggInfo, cf));
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 		aggregators = new GenericAggregator[tmpAggregators.size()];
1:eac0369: 		tmpAggregators.copyInto(aggregators);
1:eac0369: 		// System.out.println("size of sort aggregates " + tmpAggregators.size());
1:eac0369: 
1:eac0369: 		return aggregators;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Finish the aggregation for the current row.  
1:eac0369: 	 * Basically call finish() on each aggregator on
1:eac0369: 	 * this row.  Called once per grouping on a vector
1:eac0369: 	 * aggregate or once per table on a scalar aggregate.
1:eac0369: 	 *
1:eac0369: 	 * If the input row is null, then rowAllocator is
1:eac0369: 	 * invoked to create a new row.  That row is then
1:eac0369: 	 * initialized and used for the output of the aggregation.
1:eac0369: 	 *
1:6b50965: 	 * @param 	row	the row to finish aggregation
1:eac0369: 	 *
1:eac0369: 	 * @return	the result row.  If the input row != null, then
1:eac0369: 	 *	the result row == input row
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected final ExecIndexRow finishAggregation(ExecIndexRow row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		int	size = aggregates.length;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the row in which we are to place the aggregate
1:eac0369: 		** result is null, then we have an empty input set.
1:eac0369: 		** So we'll have to create our own row and set it
1:eac0369: 		** up.  Note: we needn't initialize in this case,
1:eac0369: 		** finish() will take care of it for us.
1:eac0369: 		*/ 
1:eac0369: 		if (row == null)
1:eac0369: 		{
1:d868eed: 			row = getRowTemplate();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		setCurrentRow(row);
1:eac0369: 
1:eac0369: 		boolean eliminatedNulls = false;
1:eac0369: 		for (int i = 0; i < size; i++)
1:eac0369: 		{
1:eac0369: 			GenericAggregator currAggregate = aggregates[i];
1:eac0369: 			if (currAggregate.finish(row))
1:eac0369: 				eliminatedNulls = true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (eliminatedNulls)
1:e8aba82: 			addWarning(SQLWarningFactory.newSQLWarning(SQLState.LANG_NULL_ELIMINATED_IN_SET_FUNCTION));
1:eac0369: 	
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:801cf0d:     @Override
1:eac0369: 	public void finish() throws StandardException {
1:eac0369: 		source.finish();
1:eac0369: 		super.finish();
1:eac0369: 	}
1:eac0369: 
1:bbb545e:     public Element toXML( Element parentNode, String tag ) throws Exception
1:bbb545e:     {
1:bbb545e:         // don't report the redundant originalSource node
1:bbb545e:         
1:bbb545e:         Element result = super.toXML( parentNode, tag );
1:bbb545e:         NodeList    children = result.getChildNodes();
1:bbb545e:         for ( int i = 0; i < children.getLength(); i++ )
1:bbb545e:         {
1:bbb545e:             Node child = children.item( 0 );
1:bbb545e:             if ( "originalSource".equals( child.getNodeName() ) ) { result.removeChild( child ); }
1:bbb545e:         }
1:bbb545e: 
1:bbb545e:         return result;
1:bbb545e:     }
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("UseOfObsoleteCollectionType")
/////////////////////////////////////////////////////////////////////////
1:         Vector<GenericAggregator>
1:                 tmpAggregators = new Vector<GenericAggregator>();
1:         for (AggregatorInfo aggInfo : list)
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bbb545e
/////////////////////////////////////////////////////////////////////////
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: import org.w3c.dom.NodeList;
/////////////////////////////////////////////////////////////////////////
1:     public Element toXML( Element parentNode, String tag ) throws Exception
1:     {
1:         // don't report the redundant originalSource node
1:         
1:         Element result = super.toXML( parentNode, tag );
1:         NodeList    children = result.getChildNodes();
1:         for ( int i = 0; i < children.getLength(); i++ )
1:         {
1:             Node child = children.item( 0 );
1:             if ( "originalSource".equals( child.getNodeName() ) ) { result.removeChild( child ); }
1:         }
1: 
1:         return result;
1:     }
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0: 		Vector<GenericAggregator> tmpAggregators = new Vector<GenericAggregator>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d868eed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1: import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
/////////////////////////////////////////////////////////////////////////
1:     private final ExecIndexRow rowTemplate;
1: 	 * @param ra reference to a saved row allocator instance
/////////////////////////////////////////////////////////////////////////
1: 		int ra,
/////////////////////////////////////////////////////////////////////////
1:         ExecPreparedStatement ps = a.getPreparedStatement();
1:         ExecutionFactory ef = a.getExecutionFactory();
1:         rowTemplate = ef.getIndexableRow(
1:                 ((ExecRowBuilder) ps.getSavedObject(ra)).build(ef));
1: 		aggInfoList = (AggregatorInfoList) ps.getSavedObject(aggregateItem);
1:     /**
1:      * Get a template row of the right shape for sorting or returning results.
1:      * The template is cached, so it may need to be cloned if callers use it
1:      * for multiple purposes at the same time.
1:      *
1:      * @return a row template of the right shape for this result set
1:      */
1:     ExecIndexRow getRowTemplate() {
1:         return rowTemplate;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 			row = getRowTemplate();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e8aba82
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.SQLWarningFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			addWarning(SQLWarningFactory.newSQLWarning(SQLState.LANG_NULL_ELIMINATED_IN_SET_FUNCTION));
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
commit:b31849d
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: import org.apache.derby.impl.jdbc.EmbedSQLWarning;
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		double 			optimizerEstimatedCost
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.GenericAggregateResultSet
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ScanController;
1: 
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
0: import org.apache.derby.impl.jdbc.EmbedSQLWarning;
1: 
0: import java.util.Properties;
1: import java.util.Vector;
0: import java.sql.SQLException;
1: 
1: /**
1:  * Generic aggregation utilities.
1:  *
0:  * @author jamie
1:  */
1: abstract class GenericAggregateResultSet extends NoPutResultSetImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	protected GenericAggregator[]		aggregates;	
0: 	protected GeneratedMethod			rowAllocator;
1: 	protected AggregatorInfoList	aggInfoList;	
1: 	public NoPutResultSet source;
0:     protected GeneratedMethod closeCleanup;
1: 	protected	NoPutResultSet	originalSource; // used for run time stats only
1: 
1: 	/**
1: 	 * Constructor
1: 	 *
1: 	 * @param a activation
0: 	 * @param ra row allocator generated method
1: 	 * @param resultSetNumber result set number
1: 	 * @param optimizerEstimatedRowCount optimizer estimated row count
1: 	 * @param optimizerEstimatedCost optimizer estimated cost
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	GenericAggregateResultSet
1: 	(
1: 		NoPutResultSet s,
1: 		int	aggregateItem,
1: 		Activation 	a,
0: 		GeneratedMethod	ra,
1: 		int 			resultSetNumber,
1: 		double 			optimizerEstimatedRowCount,
0: 		double 			optimizerEstimatedCost,
0: 		GeneratedMethod c
1: 	) 
1: 		throws StandardException 
1: 	{
1: 		super(a, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
1: 		source = s;
1: 		originalSource = s;
0: 		closeCleanup = c;
1: 
1: 
0: 		rowAllocator = ra;
1: 
0: 		aggInfoList = (AggregatorInfoList) (a.getPreparedStatement().getSavedObject(aggregateItem));
1: 		aggregates = getSortAggregators(aggInfoList, false, 
1: 				a.getLanguageConnectionContext(), s);
1: 	}
1: 
1: 	/**
1: 	 * For each AggregatorInfo in the list, generate a
1: 	 * GenericAggregator and stick it in an array of
1: 	 * GenericAggregators.
1: 	 *
1: 	 * @param list 	the list of aggregators to set up	
1: 	 * @param eliminateDistincts	should distincts be ignored.  
1: 	 *		Used to toss out distinct aggregates for a prelim
1: 	 *		sort.
1: 	 * @param lcc the lcc
1: 	 * @param inputResultSet the incoming result set
1: 	 *
1: 	 * @return the array of GenericAggregators
1: 	 * 
1: 	 * @exception StandardException on error
1: 	 */	
1: 	protected final GenericAggregator[] getSortAggregators
1: 	(
1: 		AggregatorInfoList 			list,
1: 		boolean 					eliminateDistincts,
1: 		LanguageConnectionContext	lcc,
1: 		NoPutResultSet				inputResultSet	
1: 	) throws StandardException
1: 	{
1: 		GenericAggregator 	aggregators[]; 
0: 		Vector tmpAggregators = new Vector();
1: 		ClassFactory		cf = lcc.getLanguageConnectionFactory().getClassFactory();
1: 
0: 		int count = list.size();
0: 		for (int i = 0; i < count; i++)
1: 		{
0: 			AggregatorInfo aggInfo = (AggregatorInfo) list.elementAt(i);
1: 			if (! (eliminateDistincts && aggInfo.isDistinct()))
1: 			// if (eliminateDistincts == aggInfo.isDistinct())
1: 			{
1: 				tmpAggregators.addElement(new GenericAggregator(aggInfo, cf));
1: 			}
1: 		}
1: 
1: 
1: 
1: 		aggregators = new GenericAggregator[tmpAggregators.size()];
1: 		tmpAggregators.copyInto(aggregators);
1: 		// System.out.println("size of sort aggregates " + tmpAggregators.size());
1: 
1: 		return aggregators;
1: 	}
1: 
1: 	/**
1: 	 * Finish the aggregation for the current row.  
1: 	 * Basically call finish() on each aggregator on
1: 	 * this row.  Called once per grouping on a vector
1: 	 * aggregate or once per table on a scalar aggregate.
1: 	 *
1: 	 * If the input row is null, then rowAllocator is
1: 	 * invoked to create a new row.  That row is then
1: 	 * initialized and used for the output of the aggregation.
1: 	 *
0: 	 * @param 	the row to finish aggregation
1: 	 *
1: 	 * @return	the result row.  If the input row != null, then
1: 	 *	the result row == input row
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	protected final ExecIndexRow finishAggregation(ExecIndexRow row)
1: 		throws StandardException
1: 	{
1: 		int	size = aggregates.length;
1: 
1: 		/*
1: 		** If the row in which we are to place the aggregate
1: 		** result is null, then we have an empty input set.
1: 		** So we'll have to create our own row and set it
1: 		** up.  Note: we needn't initialize in this case,
1: 		** finish() will take care of it for us.
1: 		*/ 
1: 		if (row == null)
1: 		{
0: 			row = getExecutionFactory().getIndexableRow((ExecRow) rowAllocator.invoke(activation));
1: 		}
1: 
1: 		setCurrentRow(row);
0: 		currentRow = row;
1: 
1: 		boolean eliminatedNulls = false;
1: 		for (int i = 0; i < size; i++)
1: 		{
1: 			GenericAggregator currAggregate = aggregates[i];
1: 			if (currAggregate.finish(row))
1: 				eliminatedNulls = true;
1: 		}
1: 
1: 		if (eliminatedNulls)
0: 			addWarning(EmbedSQLWarning.newEmbedSQLWarning(SQLState.LANG_NULL_ELIMINATED_IN_SET_FUNCTION));
1: 	
1: 		return row;
1: 	}
1: 
1: 	public void finish() throws StandardException {
1: 		source.finish();
1: 		super.finish();
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param 	row	the row to finish aggregation
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ScanController;
0: 
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
0: import org.apache.derby.impl.jdbc.EmbedSQLWarning;
0: 
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.sql.SQLException;
0: 
0: /**
0:  * Generic aggregation utilities.
0:  *
0:  * @author jamie
0:  */
0: abstract class GenericAggregateResultSet extends NoPutResultSetImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected GenericAggregator[]		aggregates;	
0: 	protected GeneratedMethod			rowAllocator;
0: 	protected AggregatorInfoList	aggInfoList;	
0: 	public NoPutResultSet source;
0:     protected GeneratedMethod closeCleanup;
0: 	protected	NoPutResultSet	originalSource; // used for run time stats only
0: 
0: 	/**
0: 	 * Constructor
0: 	 *
0: 	 * @param a activation
0: 	 * @param ra row allocator generated method
0: 	 * @param resultSetNumber result set number
0: 	 * @param optimizerEstimatedRowCount optimizer estimated row count
0: 	 * @param optimizerEstimatedCost optimizer estimated cost
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	GenericAggregateResultSet
0: 	(
0: 		NoPutResultSet s,
0: 		int	aggregateItem,
0: 		Activation 	a,
0: 		GeneratedMethod	ra,
0: 		int 			resultSetNumber,
0: 		double 			optimizerEstimatedRowCount,
0: 		double 			optimizerEstimatedCost,
0: 		GeneratedMethod c
0: 	) 
0: 		throws StandardException 
0: 	{
0: 		super(a, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
0: 		source = s;
0: 		originalSource = s;
0: 		closeCleanup = c;
0: 
0: 
0: 		rowAllocator = ra;
0: 
0: 		aggInfoList = (AggregatorInfoList) (a.getPreparedStatement().getSavedObject(aggregateItem));
0: 		aggregates = getSortAggregators(aggInfoList, false, 
0: 				a.getLanguageConnectionContext(), s);
0: 	}
0: 
0: 	/**
0: 	 * For each AggregatorInfo in the list, generate a
0: 	 * GenericAggregator and stick it in an array of
0: 	 * GenericAggregators.
0: 	 *
0: 	 * @param list 	the list of aggregators to set up	
0: 	 * @param eliminateDistincts	should distincts be ignored.  
0: 	 *		Used to toss out distinct aggregates for a prelim
0: 	 *		sort.
0: 	 * @param lcc the lcc
0: 	 * @param inputResultSet the incoming result set
0: 	 *
0: 	 * @return the array of GenericAggregators
0: 	 * 
0: 	 * @exception StandardException on error
0: 	 */	
0: 	protected final GenericAggregator[] getSortAggregators
0: 	(
0: 		AggregatorInfoList 			list,
0: 		boolean 					eliminateDistincts,
0: 		LanguageConnectionContext	lcc,
0: 		NoPutResultSet				inputResultSet	
0: 	) throws StandardException
0: 	{
0: 		GenericAggregator 	aggregators[]; 
0: 		Vector tmpAggregators = new Vector();
0: 		ClassFactory		cf = lcc.getLanguageConnectionFactory().getClassFactory();
0: 
0: 		int count = list.size();
0: 		for (int i = 0; i < count; i++)
0: 		{
0: 			AggregatorInfo aggInfo = (AggregatorInfo) list.elementAt(i);
0: 			if (! (eliminateDistincts && aggInfo.isDistinct()))
0: 			// if (eliminateDistincts == aggInfo.isDistinct())
0: 			{
0: 				tmpAggregators.addElement(new GenericAggregator(aggInfo, cf));
0: 			}
0: 		}
0: 
0: 
0: 
0: 		aggregators = new GenericAggregator[tmpAggregators.size()];
0: 		tmpAggregators.copyInto(aggregators);
0: 		// System.out.println("size of sort aggregates " + tmpAggregators.size());
0: 
0: 		return aggregators;
0: 	}
0: 
0: 	/**
0: 	 * Finish the aggregation for the current row.  
0: 	 * Basically call finish() on each aggregator on
0: 	 * this row.  Called once per grouping on a vector
0: 	 * aggregate or once per table on a scalar aggregate.
0: 	 *
0: 	 * If the input row is null, then rowAllocator is
0: 	 * invoked to create a new row.  That row is then
0: 	 * initialized and used for the output of the aggregation.
0: 	 *
0: 	 * @param 	the row to finish aggregation
0: 	 *
0: 	 * @return	the result row.  If the input row != null, then
0: 	 *	the result row == input row
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	protected final ExecIndexRow finishAggregation(ExecIndexRow row)
0: 		throws StandardException
0: 	{
0: 		int	size = aggregates.length;
0: 
0: 		/*
0: 		** If the row in which we are to place the aggregate
0: 		** result is null, then we have an empty input set.
0: 		** So we'll have to create our own row and set it
0: 		** up.  Note: we needn't initialize in this case,
0: 		** finish() will take care of it for us.
0: 		*/ 
0: 		if (row == null)
0: 		{
0: 			row = getExecutionFactory().getIndexableRow((ExecRow) rowAllocator.invoke(activation));
0: 		}
0: 
0: 		setCurrentRow(row);
0: 		currentRow = row;
0: 
0: 		boolean eliminatedNulls = false;
0: 		for (int i = 0; i < size; i++)
0: 		{
0: 			GenericAggregator currAggregate = aggregates[i];
0: 			if (currAggregate.finish(row))
0: 				eliminatedNulls = true;
0: 		}
0: 
0: 		if (eliminatedNulls)
0: 			addWarning(EmbedSQLWarning.newEmbedSQLWarning(SQLState.LANG_NULL_ELIMINATED_IN_SET_FUNCTION));
0: 	
0: 		return row;
0: 	}
0: 
0: 	public void finish() throws StandardException {
0: 		source.finish();
0: 		super.finish();
0: 	}
0: 
0: }
============================================================================