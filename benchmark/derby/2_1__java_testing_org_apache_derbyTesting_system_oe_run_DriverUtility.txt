1:0d6b409: /*
2:0d6b409:  *
1:0d6b409:  * Derby - Class org.apache.derbyTesting.system.oe.run.DriverUtility
1:0d6b409:  *
1:0d6b409:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d6b409:  * contributor license agreements. See the NOTICE file distributed with this
1:0d6b409:  * work for additional information regarding copyright ownership. The ASF
1:0d6b409:  * licenses this file to You under the Apache License, Version 2.0 (the
1:0d6b409:  * "License"); you may not use this file except in compliance with the License.
1:0d6b409:  * You may obtain a copy of the License at
1:0d6b409:  *
1:0d6b409:  * http://www.apache.org/licenses/LICENSE-2.0
1:0d6b409:  *
1:0d6b409:  * Unless required by applicable law or agreed to in writing, software
1:0d6b409:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:0d6b409:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:0d6b409:  * License for the specific language governing permissions and limitations under
1:0d6b409:  * the License.
1:0d6b409:  */
1:0d6b409: package org.apache.derbyTesting.system.oe.run;
1:0d6b409: 
1:0d6b409: import java.sql.SQLException;
1:0d6b409: import java.sql.DriverManager;
1:0d6b409: import java.sql.Connection;
1:0d6b409: import org.apache.derbyTesting.system.oe.client.Load;
1:0d6b409: import org.apache.derbyTesting.system.oe.load.SimpleInsert;
1:956dcad: import org.apache.derbyTesting.system.oe.util.HandleCheckError;
1:0d6b409: import org.apache.derbyTesting.system.oe.util.OEChecks;
1:0d6b409: 
1:0d6b409: /**
1:0d6b409:  * Driver to do the load phase for the Order Entry benchmark.
1:0d6b409:  *
1:0d6b409:  * This class takes in following arguments currently:
1:0d6b409:  * Usage: java org.apache.derbyTesting.system.oe.run.DriverUtility options
1:0d6b409:  * Options:
1:0d6b409:  * <OL>
1:0d6b409:  * <LI>-scale warehouse scaling factor. Takes a short value. If not specified 
1:0d6b409:  * defaults to 1
1:0d6b409:  * <LI>-doChecks check consistency of data, takes a boolean value. If not specified, defaults to true
1:0d6b409:  * <LI>-driver jdbc driver class to use
1:0d6b409:  * <LI>-dbUrl  database connection url 
1:0d6b409:  * <LI>-help prints usage
1:0d6b409:  * </OL>
1:0d6b409:  *
1:0d6b409:  * To load database with scale of 2
1:0d6b409:  * and to not do any checks, the command to run the test is as follows:
1:0d6b409:  * <BR>
1:0d6b409:  * java org.apache.derbyTesting.system.oe.run.DriverUtility -driver org.apache.derby.jdbc.ClientDriver -dbUrl 'jdbc:derby://localhost:1527/db' -scale 2 -doChecks false
1:0d6b409:  * <BR>
1:0d6b409:  */
1:0d6b409: public class DriverUtility {
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Database connection
1:0d6b409:      */
1:0d6b409:     private Connection conn = null;
1:0d6b409:     /**
1:0d6b409:      * Warehouse scale factor
1:0d6b409:      */
1:0d6b409:     private static short scale = 1;
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Database connection url
1:0d6b409:      */
1:0d6b409:     private static String dbUrl = "jdbc:derby:wombat;create=true";
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * JDBC Driver class
1:0d6b409:      */
1:0d6b409:     private static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * flag to indicate if we should perform consistency, cardinality checks
1:0d6b409:      * after the load
1:0d6b409:      */
1:0d6b409:     private static boolean doChecks = true;
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Create a test case with the given name.
1:0d6b409:      */
1:0d6b409:     public DriverUtility() {
1:0d6b409: 
1:0d6b409:         try {
1:0d6b409:             Class.forName(driver);
1:0d6b409:         } catch (Exception e) {
1:0d6b409:             e.printStackTrace();
1:0d6b409:             System.exit(1);
1:0d6b409:         }
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Run OE load
1:0d6b409:      * @param args supply arguments for benchmark.
1:0d6b409:      * @throws Exception
1:0d6b409:      */
1:0d6b409:     public static void main(String[] args) throws Exception {
1:0d6b409:         parseArgs(args);
1:0d6b409:         DriverUtility oe = new DriverUtility();
1:0d6b409:         oe.populate();
1:0d6b409:         if ( doChecks )
1:0d6b409:             oe.allChecks();
1:0d6b409:         oe.cleanup();
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * @return the connection
1:0d6b409:      * @throws SQLException
1:0d6b409:      */
1:0d6b409:     public Connection getConnection() throws SQLException {
1:0d6b409:         if ( conn == null)
1:0d6b409:         {
1:0d6b409:             System.out.println("dbUrl="+dbUrl);
1:0d6b409:             conn = DriverManager.getConnection(dbUrl);
1:0d6b409:         }
1:0d6b409:         return conn;
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Populate the OE database.
1:0d6b409:      * Assumption is that the schema is already loaded
1:0d6b409:      * in the database.
1:0d6b409:      */
1:0d6b409:     public void populate() throws Exception {
1:0d6b409:         // Use simple insert statements to insert data.
1:0d6b409:         // currently only this form of load is present, once we have
1:0d6b409:         // different implementations, the loading mechanism will need
1:0d6b409:         // to be configurable taking an option from the command line
1:0d6b409:         // arguments.
1:0d6b409:         Load loader = new SimpleInsert();
1:0d6b409:         loader.setupLoad(getConnection(), scale);
1:0d6b409:         long start = System.currentTimeMillis();
1:0d6b409:         loader.populateAllTables();
1:0d6b409:         long stop = System.currentTimeMillis();
1:0d6b409:         System.out.println("Time to load (ms)=" + (stop - start));
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * Do the necessary checks to see if database is in consistent state
1:0d6b409:      */
1:0d6b409:     public void allChecks() throws Exception {
1:0d6b409:         OEChecks checks = new OEChecks();
1:956dcad:         checks.initialize(new HandleCheckError(), getConnection(), scale);
1:0d6b409:         long start = System.currentTimeMillis();
1:0d6b409:         checks.checkAllRowCounts();
1:0d6b409:         long stop = System.currentTimeMillis();
1:0d6b409:         System.out.println("Time to do checks (ms)=" + (stop - start));
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * parse arguments.
1:0d6b409:      * @param args arguments to parse
1:0d6b409:      */
1:0d6b409:     private static void parseArgs(String[] args) {
1:0d6b409:         for (int i = 0; i < args.length; i++) {
1:0d6b409:             String arg = args[i];
1:0d6b409:             if (arg.equals("-scale")) {
1:0d6b409:                 scale = Short.parseShort(args[++i]);
1:0d6b409:             } else if (arg.equals("-driver")) {
1:0d6b409:                 driver = args[++i];
1:0d6b409:             } else if (arg.equals("-dbUrl")) {
1:0d6b409:                 dbUrl = args[++i];
1:0d6b409:             } else if (arg.equals("-doChecks")) {
1:0d6b409:                 doChecks = (args[++i].equals("false")? false:true);
1:0d6b409:             } else if (arg.equals("-help")) {
1:0d6b409:                 printUsage();
1:0d6b409:                 System.exit(0);
1:0d6b409:             } else {
1:0d6b409:                 System.err.println("Invalid option: " + args[i]);
1:0d6b409:                 System.exit(1);
1:0d6b409:             }
1:0d6b409:         }
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * prints the usage
1:0d6b409:      */
1:0d6b409:     private static void printUsage() {
1:0d6b409:         System.out.println("Usage: java org.apache.derbyTesting.system.oe." +
1:0d6b409:                         "run.DriverUtility options");
1:0d6b409:         System.out.println();
1:0d6b409:         System.out.println("Options:");
1:0d6b409:         System.out.println("  -scale warehouse scaling factor. " +
1:0d6b409:                         "Takes a short value. If not specified defaults to 1");
1:0d6b409:         System.out.println("  -doChecks  should consistency checks be run" +
1:0d6b409:                         " on the database. Takes a boolean value");
1:0d6b409:         System.out.println("  -driver  the class of the jdbc driver");
1:0d6b409:         System.out.println("  -dbUrl  the database connection url");
1:0d6b409:         System.out.println("  -help prints usage");
1:0d6b409:         System.out.println();
1:0d6b409:     }
1:0d6b409: 
1:0d6b409:     /**
1:0d6b409:      * cleanup resources. 
1:0d6b409:      * @throws SQLException
1:0d6b409:      */
1:0d6b409:     public void cleanup() throws SQLException {
1:0d6b409:         if (conn != null)
1:0d6b409:             conn.close();
1:0d6b409:     }
1:0d6b409: 
1:0d6b409: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:956dcad
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.util.HandleCheckError;
/////////////////////////////////////////////////////////////////////////
1:         checks.initialize(new HandleCheckError(), getConnection(), scale);
commit:0d6b409
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.run.DriverUtility
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  */
1: package org.apache.derbyTesting.system.oe.run;
1: 
1: import java.sql.SQLException;
1: import java.sql.DriverManager;
1: import java.sql.Connection;
1: import org.apache.derbyTesting.system.oe.client.Load;
1: import org.apache.derbyTesting.system.oe.load.SimpleInsert;
1: import org.apache.derbyTesting.system.oe.util.OEChecks;
1: 
1: /**
1:  * Driver to do the load phase for the Order Entry benchmark.
1:  *
1:  * This class takes in following arguments currently:
1:  * Usage: java org.apache.derbyTesting.system.oe.run.DriverUtility options
1:  * Options:
1:  * <OL>
1:  * <LI>-scale warehouse scaling factor. Takes a short value. If not specified 
1:  * defaults to 1
1:  * <LI>-doChecks check consistency of data, takes a boolean value. If not specified, defaults to true
1:  * <LI>-driver jdbc driver class to use
1:  * <LI>-dbUrl  database connection url 
1:  * <LI>-help prints usage
1:  * </OL>
1:  *
1:  * To load database with scale of 2
1:  * and to not do any checks, the command to run the test is as follows:
1:  * <BR>
1:  * java org.apache.derbyTesting.system.oe.run.DriverUtility -driver org.apache.derby.jdbc.ClientDriver -dbUrl 'jdbc:derby://localhost:1527/db' -scale 2 -doChecks false
1:  * <BR>
1:  */
1: public class DriverUtility {
1: 
1:     /**
1:      * Database connection
1:      */
1:     private Connection conn = null;
1:     /**
1:      * Warehouse scale factor
1:      */
1:     private static short scale = 1;
1: 
1:     /**
1:      * Database connection url
1:      */
1:     private static String dbUrl = "jdbc:derby:wombat;create=true";
1: 
1:     /**
1:      * JDBC Driver class
1:      */
1:     private static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1: 
1:     /**
1:      * flag to indicate if we should perform consistency, cardinality checks
1:      * after the load
1:      */
1:     private static boolean doChecks = true;
1: 
1:     /**
1:      * Create a test case with the given name.
1:      *
0:      * @param name
0:      *            of the test case.
1:      */
1:     public DriverUtility() {
1: 
1:         try {
1:             Class.forName(driver);
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:             System.exit(1);
1:         }
1:     }
1: 
1:     /**
1:      * Run OE load
1:      * @param args supply arguments for benchmark.
1:      * @throws Exception
1:      */
1:     public static void main(String[] args) throws Exception {
1:         parseArgs(args);
1:         DriverUtility oe = new DriverUtility();
1:         oe.populate();
1:         if ( doChecks )
1:             oe.allChecks();
1:         oe.cleanup();
1:     }
1: 
1:     /**
1:      * @return the connection
1:      * @throws SQLException
1:      */
1:     public Connection getConnection() throws SQLException {
1:         if ( conn == null)
1:         {
1:             System.out.println("dbUrl="+dbUrl);
1:             conn = DriverManager.getConnection(dbUrl);
1:         }
1:         return conn;
1:     }
1: 
1:     /**
1:      * Populate the OE database.
1:      * Assumption is that the schema is already loaded
1:      * in the database.
1:      */
1:     public void populate() throws Exception {
1:         // Use simple insert statements to insert data.
1:         // currently only this form of load is present, once we have
1:         // different implementations, the loading mechanism will need
1:         // to be configurable taking an option from the command line
1:         // arguments.
1:         Load loader = new SimpleInsert();
1:         loader.setupLoad(getConnection(), scale);
1:         long start = System.currentTimeMillis();
1:         loader.populateAllTables();
1:         long stop = System.currentTimeMillis();
1:         System.out.println("Time to load (ms)=" + (stop - start));
1:     }
1: 
1:     /**
1:      * Do the necessary checks to see if database is in consistent state
1:      */
1:     public void allChecks() throws Exception {
1:         OEChecks checks = new OEChecks();
0:         checks.initialize(getConnection(), scale);
1:         long start = System.currentTimeMillis();
1:         checks.checkAllRowCounts();
1:         long stop = System.currentTimeMillis();
1:         System.out.println("Time to do checks (ms)=" + (stop - start));
1:     }
1: 
1:     /**
1:      * parse arguments.
1:      * @param args arguments to parse
1:      */
1:     private static void parseArgs(String[] args) {
1:         for (int i = 0; i < args.length; i++) {
1:             String arg = args[i];
1:             if (arg.equals("-scale")) {
1:                 scale = Short.parseShort(args[++i]);
1:             } else if (arg.equals("-driver")) {
1:                 driver = args[++i];
1:             } else if (arg.equals("-dbUrl")) {
1:                 dbUrl = args[++i];
1:             } else if (arg.equals("-doChecks")) {
1:                 doChecks = (args[++i].equals("false")? false:true);
1:             } else if (arg.equals("-help")) {
1:                 printUsage();
1:                 System.exit(0);
1:             } else {
1:                 System.err.println("Invalid option: " + args[i]);
1:                 System.exit(1);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * prints the usage
1:      */
1:     private static void printUsage() {
1:         System.out.println("Usage: java org.apache.derbyTesting.system.oe." +
1:                         "run.DriverUtility options");
1:         System.out.println();
1:         System.out.println("Options:");
1:         System.out.println("  -scale warehouse scaling factor. " +
1:                         "Takes a short value. If not specified defaults to 1");
1:         System.out.println("  -doChecks  should consistency checks be run" +
1:                         " on the database. Takes a boolean value");
1:         System.out.println("  -driver  the class of the jdbc driver");
1:         System.out.println("  -dbUrl  the database connection url");
1:         System.out.println("  -help prints usage");
1:         System.out.println();
1:     }
1: 
1:     /**
1:      * cleanup resources. 
1:      * @throws SQLException
1:      */
1:     public void cleanup() throws SQLException {
1:         if (conn != null)
1:             conn.close();
1:     }
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
============================================================================