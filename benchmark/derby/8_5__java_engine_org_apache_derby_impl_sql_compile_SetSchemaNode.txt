2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.SetSchemaNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:38b5979: 
1:38b5979: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:eac0369: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
1:3bb140c: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * A SetSchemaNode is the root of a QueryTree that 
1:eac0369:  * represents a SET SCHEMA statement.  It isn't
1:eac0369:  * replicated, but it generates a ConstantAction
1:eac0369:  * because it is basically easier than generating
1:eac0369:  * the code from scratch.
5:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class SetSchemaNode extends MiscellaneousStatementNode
3:eac0369: {
1:eac0369: 	private String 	name;
1:eac0369: 	private int 	type;
1:eac0369: 	
1:eac0369: 	/**
1:3bb140c:      * Constructor for a SetSchemaNode
1:eac0369: 	 *
1:eac0369: 	 * @param schemaName	The name of the new schema
1:eac0369: 	 * @param type			Type of schema name could be USER or dynamic parameter
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     SetSchemaNode(
1:3bb140c:             String schemaName,
1:3bb140c:             int type,
1:3bb140c:             ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.name = schemaName;
1:3bb140c:         this.type = type;
2:eac0369: 	}
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() + 
1:eac0369: 				(type == StatementType.SET_SCHEMA_USER ? "schemaName: \nUSER\n" :
1:eac0369: 				(type == StatementType.SET_SCHEMA_DYNAMIC ? "schemaName: \n?\n" : 
1:eac0369: 					"schemaName: " + "\n" + name + "\n"));
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "SET SCHEMA";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return	getGenericConstantActionFactory().getSetSchemaConstantAction(name, type);		
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Generate code, need to push parameters
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ActivationClassBuilder for the class being built
1:eac0369: 	 * @param mb the method  for the execute() method to be built
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
2:eac0369: 							throws StandardException
1:eac0369: 	{
1:eac0369: 		//generate the parameters for the DYNAMIC SET SCHEMA
2:eac0369: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
1:eac0369: 			generateParameterValueSet(acb);
1:eac0369: 
1:eac0369: 		// The generated java is the expression:
1:eac0369: 		// return ResultSetFactory.getMiscResultSet(this )
1:eac0369: 
1:eac0369: 		acb.pushGetResultSetFactoryExpression(mb);
1:eac0369: 
1:eac0369: 		acb.pushThisAsActivation(mb); // first arg
1:eac0369: 
1:eac0369: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getMiscResultSet",
1:eac0369: 						ClassName.ResultSet, 1);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Generate the code to create the ParameterValueSet, if necessary,
1:eac0369: 	 * when constructing the activation.  Also generate the code to call
1:eac0369: 	 * a method that will throw an exception if we try to execute without
1:eac0369: 	 * all the parameters being set.
1:eac0369: 	 * 
1:eac0369: 	 * @param acb	The ActivationClassBuilder for the class we're building
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	void generateParameterValueSet(ActivationClassBuilder acb)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:3bb140c:         List<ParameterNode>
1:3bb140c:             parameterList = getCompilerContext().getParameterList();
1:eac0369: 		// parameter list size should be 1
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(parameterList != null && parameterList.size() == 1);
1:eac0369: 			
1:eac0369: 		ParameterNode.generateParameterValueSet ( acb, 1, parameterList);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the type of activation this class
1:eac0369: 	 * generates.
1:eac0369: 	 * 
1:eac0369: 	 * @return  NEED_PARAM_ACTIVATION or
1:eac0369: 	 *			NEED_NOTHING_ACTIVATION depending on params
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	int activationKind()
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** We need parameters 
1:eac0369: 		** only for those that have parameters.
1:eac0369: 		*/
1:eac0369: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
1:eac0369: 		{
1:eac0369: 			return StatementNode.NEED_PARAM_ACTIVATION;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return StatementNode.NEED_NOTHING_ACTIVATION;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
/////////////////////////////////////////////////////////////////////////
1: class SetSchemaNode extends MiscellaneousStatementNode
1:      * Constructor for a SetSchemaNode
1:      * @param cm            The context manager
1:     SetSchemaNode(
1:             String schemaName,
1:             int type,
1:             ContextManager cm) {
1:         super(cm);
1:         this.name = schemaName;
1:         this.type = type;
0:         setNodeType(C_NodeTypes.SET_SCHEMA_NODE);
1:     /**
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         List<ParameterNode>
1:             parameterList = getCompilerContext().getParameterList();
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
commit:38b5979
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
0: 		List parameterList = getCompilerContext().getParameterList();
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7736829
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.SetSchemaNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.StatementType;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: 
0: import java.util.Vector;
1: 
1: 
1: /**
1:  * A SetSchemaNode is the root of a QueryTree that 
1:  * represents a SET SCHEMA statement.  It isn't
1:  * replicated, but it generates a ConstantAction
1:  * because it is basically easier than generating
1:  * the code from scratch.
1:  *
0:  * @author jamie
1:  */
1: 
0: public class SetSchemaNode extends MiscellaneousStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private String 	name;
1: 	private int 	type;
1: 	
1: 	/**
0: 	 * Initializer for a SetSchemaNode
1: 	 *
1: 	 * @param schemaName	The name of the new schema
1: 	 * @param type			Type of schema name could be USER or dynamic parameter
1: 	 *
1: 	 */
0: 	public void init(Object schemaName, Object type)
1: 	{
0: 		this.name = (String) schemaName;
0: 		if (type != null)
0: 			this.type = ((Integer)type).intValue();
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() + 
1: 				(type == StatementType.SET_SCHEMA_USER ? "schemaName: \nUSER\n" :
1: 				(type == StatementType.SET_SCHEMA_DYNAMIC ? "schemaName: \n?\n" : 
1: 					"schemaName: " + "\n" + name + "\n"));
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		return "SET SCHEMA";
1: 	}
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return	getGenericConstantActionFactory().getSetSchemaConstantAction(name, type);		
1: 	}
1: 	/**
1: 	 * Generate code, need to push parameters
1: 	 *
1: 	 * @param acb	The ActivationClassBuilder for the class being built
1: 	 * @param mb the method  for the execute() method to be built
1: 	 *
0: 	 * @return		A compiled expression returning the RepCreatePublicationResultSet
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generate(ActivationClassBuilder acb,
0: 								MethodBuilder mb)
1: 							throws StandardException
1: 	{
1: 		//generate the parameters for the DYNAMIC SET SCHEMA
1: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
1: 			generateParameterValueSet(acb);
1: 
1: 		// The generated java is the expression:
1: 		// return ResultSetFactory.getMiscResultSet(this )
1: 
1: 		acb.pushGetResultSetFactoryExpression(mb);
1: 
1: 		acb.pushThisAsActivation(mb); // first arg
1: 
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getMiscResultSet",
1: 						ClassName.ResultSet, 1);
1: 
1: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
0: 			generateParameterHolders(acb);
1: 	}
1: 	/**
1: 	 * Generate the code to create the ParameterValueSet, if necessary,
1: 	 * when constructing the activation.  Also generate the code to call
1: 	 * a method that will throw an exception if we try to execute without
1: 	 * all the parameters being set.
1: 	 * 
1: 	 * @param acb	The ActivationClassBuilder for the class we're building
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
1: 	void generateParameterValueSet(ActivationClassBuilder acb)
1: 		throws StandardException
1: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
1: 		// parameter list size should be 1
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(parameterList != null && parameterList.size() == 1);
1: 			
1: 		ParameterNode.generateParameterValueSet ( acb, 1, parameterList);
1: 	}
1: 
1: 	/*
0: 	** When all other generation is done for the statement,
0: 	** we need to ensure all of the parameters have been touched.
1: 	*
0: 	*	@param	acb				ActivationClassBuilder
1: 	*
1: 	*/
0: 	void generateParameterHolders(ActivationClassBuilder acb) 
1: 		throws StandardException
1: 	{
0: 		Vector pList = getCompilerContext().getParameterList();
0: 		// we should have already failed if pList doesn't have at least 1 parameter
1: 
0: 		ParameterNode.generateParameterHolders( acb,  pList);
1: 			
1: 	}
1: 	/**
1: 	 * Returns the type of activation this class
1: 	 * generates.
1: 	 * 
1: 	 * @return  NEED_PARAM_ACTIVATION or
1: 	 *			NEED_NOTHING_ACTIVATION depending on params
1: 	 *
1: 	 */
1: 	int activationKind()
1: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
1: 		/*
1: 		** We need parameters 
1: 		** only for those that have parameters.
1: 		*/
1: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
1: 		{
1: 			return StatementNode.NEED_PARAM_ACTIVATION;
1: 		}
1: 		else
1: 		{
1: 			return StatementNode.NEED_NOTHING_ACTIVATION;
1: 		}
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: 
0: import java.util.Vector;
0: 
0: 
0: /**
0:  * A SetSchemaNode is the root of a QueryTree that 
0:  * represents a SET SCHEMA statement.  It isn't
0:  * replicated, but it generates a ConstantAction
0:  * because it is basically easier than generating
0:  * the code from scratch.
0:  *
0:  * @author jamie
0:  */
0: 
0: public class SetSchemaNode extends MiscellaneousStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private String 	name;
0: 	private int 	type;
0: 	
0: 	/**
0: 	 * Initializer for a SetSchemaNode
0: 	 *
0: 	 * @param schemaName	The name of the new schema
0: 	 * @param type			Type of schema name could be USER or dynamic parameter
0: 	 *
0: 	 */
0: 	public void init(Object schemaName, Object type)
0: 	{
0: 		this.name = (String) schemaName;
0: 		if (type != null)
0: 			this.type = ((Integer)type).intValue();
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() + 
0: 				(type == StatementType.SET_SCHEMA_USER ? "schemaName: \nUSER\n" :
0: 				(type == StatementType.SET_SCHEMA_DYNAMIC ? "schemaName: \n?\n" : 
0: 					"schemaName: " + "\n" + name + "\n"));
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		return "SET SCHEMA";
0: 	}
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return	getGenericConstantActionFactory().getSetSchemaConstantAction(name, type);		
0: 	}
0: 	/**
0: 	 * Generate code, need to push parameters
0: 	 *
0: 	 * @param acb	The ActivationClassBuilder for the class being built
0: 	 * @param mb the method  for the execute() method to be built
0: 	 *
0: 	 * @return		A compiled expression returning the RepCreatePublicationResultSet
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generate(ActivationClassBuilder acb,
0: 								MethodBuilder mb)
0: 							throws StandardException
0: 	{
0: 		//generate the parameters for the DYNAMIC SET SCHEMA
0: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
0: 			generateParameterValueSet(acb);
0: 
0: 		// The generated java is the expression:
0: 		// return ResultSetFactory.getMiscResultSet(this )
0: 
0: 		acb.pushGetResultSetFactoryExpression(mb);
0: 
0: 		acb.pushThisAsActivation(mb); // first arg
0: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getMiscResultSet",
0: 						ClassName.ResultSet, 1);
0: 
0: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
0: 			generateParameterHolders(acb);
0: 	}
0: 	/**
0: 	 * Generate the code to create the ParameterValueSet, if necessary,
0: 	 * when constructing the activation.  Also generate the code to call
0: 	 * a method that will throw an exception if we try to execute without
0: 	 * all the parameters being set.
0: 	 * 
0: 	 * @param acb	The ActivationClassBuilder for the class we're building
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	void generateParameterValueSet(ActivationClassBuilder acb)
0: 		throws StandardException
0: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
0: 		// parameter list size should be 1
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(parameterList != null && parameterList.size() == 1);
0: 			
0: 		ParameterNode.generateParameterValueSet ( acb, 1, parameterList);
0: 	}
0: 
0: 	/*
0: 	** When all other generation is done for the statement,
0: 	** we need to ensure all of the parameters have been touched.
0: 	*
0: 	*	@param	acb				ActivationClassBuilder
0: 	*
0: 	*/
0: 	void generateParameterHolders(ActivationClassBuilder acb) 
0: 		throws StandardException
0: 	{
0: 		Vector pList = getCompilerContext().getParameterList();
0: 		// we should have already failed if pList doesn't have at least 1 parameter
0: 
0: 		ParameterNode.generateParameterHolders( acb,  pList);
0: 			
0: 	}
0: 	/**
0: 	 * Returns the type of activation this class
0: 	 * generates.
0: 	 * 
0: 	 * @return  NEED_PARAM_ACTIVATION or
0: 	 *			NEED_NOTHING_ACTIVATION depending on params
0: 	 *
0: 	 */
0: 	int activationKind()
0: 	{
0: 		Vector parameterList = getCompilerContext().getParameterList();
0: 		/*
0: 		** We need parameters 
0: 		** only for those that have parameters.
0: 		*/
0: 		if (type == StatementType.SET_SCHEMA_DYNAMIC)
0: 		{
0: 			return StatementNode.NEED_PARAM_ACTIVATION;
0: 		}
0: 		else
0: 		{
0: 			return StatementNode.NEED_NOTHING_ACTIVATION;
0: 		}
0: 	}
0: }
============================================================================