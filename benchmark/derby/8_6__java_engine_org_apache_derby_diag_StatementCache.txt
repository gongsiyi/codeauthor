1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.diag.StatementCache
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
19:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.diag;
1:eac0369: 
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: import java.security.AccessController;
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: import java.sql.Timestamp;
1:293a5e6: import java.sql.Types;
1:f07c8c7: import java.util.Collection;
1:f07c8c7: import java.util.Iterator;
1:eac0369: import java.util.Vector;
1:eac0369: 
1:431cefd: import org.apache.derby.iapi.error.StandardException;
1:293a5e6: import org.apache.derby.iapi.reference.Limits;
1:293a5e6: import org.apache.derby.iapi.services.cache.CacheManager;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:431cefd: import org.apache.derby.iapi.services.context.ContextService;
1:293a5e6: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:293a5e6: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:293a5e6: import org.apache.derby.iapi.util.StringUtil;
1:293a5e6: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1:293a5e6: import org.apache.derby.impl.sql.GenericPreparedStatement;
1:293a5e6: import org.apache.derby.impl.sql.GenericStatement;
1:293a5e6: import org.apache.derby.impl.sql.conn.CachedStatement;
1:293a5e6: import org.apache.derby.vti.VTITemplate;
1:f07c8c7: 
3:eac0369: /**
1:eac0369: 	StatementCache is a virtual table that shows the contents of the SQL statement cache.
1:eac0369: 	
1:eac0369: 	This virtual table can be invoked by calling it directly.
1:eac0369: 	<PRE> select * from new org.apache.derby.diag.StatementCache() t</PRE>
1:eac0369: 
1:eac0369: 
1:eac0369: 	<P>The StatementCache virtual table has the following columns:
1:eac0369: 	<UL>
1:eac0369: 	<LI> ID CHAR(36) - not nullable.  Internal identifier of the compiled statement.
1:eac0369: 	<LI> SCHEMANAME VARCHAR(128) - nullable.  Schema the statement was compiled in.
1:eac0369: 	<LI> SQL_TEXT VARCHAR(32672) - not nullable.  Text of the statement
1:1ed2c99: 	<LI> UNICODE BIT/BOOLEAN - not nullable.  Always true.
1:eac0369: 	<LI> VALID BIT/BOOLEAN - not nullable.  True if the statement is currently valid, false otherwise
1:eac0369: 	<LI> COMPILED_AT TIMESTAMP nullable - time statement was compiled, requires STATISTICS TIMING to be enabled.
1:eac0369: 
1:eac0369: 
1:eac0369: 	</UL>
1:eac0369: 	<P>
1:2c21843: 	The internal identifier of a cached statement matches the toString() method of a PreparedStatement object for a Derby database.
1:eac0369: 
1:eac0369: 	<P>
1:eac0369: 	This class also provides a static method to empty the statement cache, StatementCache.emptyCache()
1:eac0369: 
1:eac0369: */
1:eac0369: public final class StatementCache extends VTITemplate {
1:eac0369: 
1:eac0369: 	private int position = -1;
1:0758fb6: 	private Vector<GenericPreparedStatement> data;
1:eac0369: 	private GenericPreparedStatement currentPs;
1:eac0369: 	private boolean wasNull;
1:293a5e6: 
1:431cefd: 	public StatementCache() throws StandardException {
1:eac0369: 
1:431cefd:         DiagUtil.checkAccess();
1:eac0369:         
1:431cefd:         LanguageConnectionContext lcc = (LanguageConnectionContext)
1:a0dbbd7:             getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1:431cefd: 
1:293a5e6:         CacheManager statementCache =
1:293a5e6:             lcc.getLanguageConnectionFactory().getStatementCache();
1:eac0369: 
1:293a5e6: 		if (statementCache != null) {
1:293a5e6: 			final Collection values = statementCache.values();
1:0758fb6: 			data = new Vector<GenericPreparedStatement>(values.size());
1:f07c8c7: 			for (Iterator i = values.iterator(); i.hasNext(); ) {
1:f07c8c7: 				final CachedStatement cs = (CachedStatement) i.next();
1:f07c8c7: 				final GenericPreparedStatement ps =
1:f07c8c7: 					(GenericPreparedStatement) cs.getPreparedStatement();
1:a32eb9f: 				data.add(ps);
2:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean next() {
1:eac0369: 
1:eac0369: 		if (data == null)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		position++;
1:eac0369: 
1:eac0369: 		for (; position < data.size(); position++) {
1:a32eb9f: 			currentPs = (GenericPreparedStatement) data.get(position);
1:eac0369: 	
1:eac0369: 			if (currentPs != null)
1:eac0369: 				return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		data = null;
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void close() {
1:eac0369: 		data = null;
1:eac0369: 		currentPs = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public String getString(int colId) {
1:eac0369: 		wasNull = false;
1:eac0369: 		switch (colId) {
1:eac0369: 		case 1:
1:eac0369: 			return currentPs.getObjectName();
1:eac0369: 		case 2:
1:eac0369: 			return ((GenericStatement) currentPs.statement).getCompilationSchema();
1:eac0369: 		case 3:
1:eac0369: 			String sql = currentPs.getSource();
1:b1f84c1: 			sql = StringUtil.truncate(sql, Limits.DB2_VARCHAR_MAXWIDTH);
1:eac0369: 			return sql;
1:eac0369: 		default:
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean getBoolean(int colId) {
1:eac0369: 		wasNull = false;
1:eac0369: 		switch (colId) {
1:eac0369: 		case 4:
1:ddc6f41: 			// was/is UniCode column, but since Derby 10.0 all
1:ddc6f41: 			// statements are compiled and submitted as UniCode.
1:ddc6f41: 			return true;
1:eac0369: 		case 5:
1:eac0369: 			return currentPs.isValid();
1:eac0369: 		default:
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Timestamp getTimestamp(int colId) {
1:eac0369: 
1:eac0369: 		Timestamp ts = currentPs.getEndCompileTimestamp();
1:eac0369: 		wasNull = (ts == null);
1:eac0369: 		return ts;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean wasNull() {
1:eac0369: 		return wasNull;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Metadata
1:eac0369: 	*/
1:eac0369: 	private static final ResultColumnDescriptor[] columnInfo = {
1:eac0369: 
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("ID",		  Types.CHAR, false, 36),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("SCHEMANAME",    Types.VARCHAR, true, 128),
1:b1f84c1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",  Types.VARCHAR, false, Limits.DB2_VARCHAR_MAXWIDTH),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("UNICODE",   Types.BIT, false),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("VALID",  Types.BIT, false),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("COMPILED_AT",  Types.TIMESTAMP, true),
1:eac0369: 
1:eac0369: 	};
1:eac0369: 	
1:8514aa2:     private static final ResultSetMetaData metadata =
1:8514aa2:         new EmbedResultSetMetaData(columnInfo);
1:eac0369: 
1:eac0369: 	public ResultSetMetaData getMetaData() {
1:eac0369: 
1:eac0369: 		return metadata;
1:eac0369: 	}
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContextOrNull( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContextOrNull( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContextOrNull( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1:             getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContextOrNull( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContextOrNull( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContextOrNull( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:5570eb0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData40;
/////////////////////////////////////////////////////////////////////////
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData40(columnInfo);
commit:0758fb6
/////////////////////////////////////////////////////////////////////////
1: 	private Vector<GenericPreparedStatement> data;
/////////////////////////////////////////////////////////////////////////
1: 			data = new Vector<GenericPreparedStatement>(values.size());
commit:431cefd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextService;
/////////////////////////////////////////////////////////////////////////
1: 	public StatementCache() throws StandardException {
1:         DiagUtil.checkAccess();
1:         LanguageConnectionContext lcc = (LanguageConnectionContext)
0:             ContextService.getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8514aa2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final ResultSetMetaData metadata =
1:         new EmbedResultSetMetaData(columnInfo);
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
1: 				data.add(ps);
/////////////////////////////////////////////////////////////////////////
1: 			currentPs = (GenericPreparedStatement) data.get(position);
commit:f07c8c7
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.util.Iterator;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
0: 			(org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext)
0: 			ConnectionUtil.getCurrentLCC();
0: 			final Collection values = lcc.statementCache.values();
0: 			data = new Vector(values.size());
1: 			for (Iterator i = values.iterator(); i.hasNext(); ) {
1: 				final CachedStatement cs = (CachedStatement) i.next();
1: 				final GenericPreparedStatement ps =
1: 					(GenericPreparedStatement) cs.getPreparedStatement();
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1ed2c99
/////////////////////////////////////////////////////////////////////////
1: 	<LI> UNICODE BIT/BOOLEAN - not nullable.  Always true.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:293a5e6
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
0: import java.util.Collection;
0: import java.util.Iterator;
1: import org.apache.derby.iapi.reference.Limits;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.util.StringUtil;
1: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1: import org.apache.derby.impl.sql.GenericPreparedStatement;
1: import org.apache.derby.impl.sql.GenericStatement;
1: import org.apache.derby.impl.sql.conn.CachedStatement;
1: import org.apache.derby.vti.VTITemplate;
/////////////////////////////////////////////////////////////////////////
0: 		LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:         
1:         CacheManager statementCache =
1:             lcc.getLanguageConnectionFactory().getStatementCache();
1: 		if (statementCache != null) {
1: 			final Collection values = statementCache.values();
commit:ddc6f41
/////////////////////////////////////////////////////////////////////////
1: 			// was/is UniCode column, but since Derby 10.0 all
1: 			// statements are compiled and submitted as UniCode.
1: 			return true;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.diag.StatementCache
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.diag
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.diag;
1: 
0: import org.apache.derby.vti.VTITemplate;
1: 
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.impl.sql.GenericPreparedStatement;
0: import org.apache.derby.impl.sql.GenericStatement;
1: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.util.StringUtil;
1: 
0: import java.sql.Types;
1: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
1: import java.sql.Timestamp;
1: 
0: import org.apache.derby.impl.sql.conn.CachedStatement;
0: import org.apache.derby.impl.services.cache.CachedItem;
1: 
1: 
1: import java.util.Vector;
0: import java.util.Enumeration;
1: 
1: /**
1: 	StatementCache is a virtual table that shows the contents of the SQL statement cache.
1: 	
1: 	This virtual table can be invoked by calling it directly.
1: 	<PRE> select * from new org.apache.derby.diag.StatementCache() t</PRE>
1: 
1: 
1: 	<P>The StatementCache virtual table has the following columns:
1: 	<UL>
1: 	<LI> ID CHAR(36) - not nullable.  Internal identifier of the compiled statement.
1: 	<LI> SCHEMANAME VARCHAR(128) - nullable.  Schema the statement was compiled in.
1: 	<LI> SQL_TEXT VARCHAR(32672) - not nullable.  Text of the statement
0: 	<LI> UNICODE BIT/BOOLEAN - not nullable.  True if the statement is compiled as a pure unicode string, false if it handled unicode escapes.
1: 	<LI> VALID BIT/BOOLEAN - not nullable.  True if the statement is currently valid, false otherwise
1: 	<LI> COMPILED_AT TIMESTAMP nullable - time statement was compiled, requires STATISTICS TIMING to be enabled.
1: 
1: 
1: 	</UL>
1: 	<P>
0: 	The internal identifier of a cached statement matches the toString() method of a PreparedStatement object for a Cloudscape database.
1: 
1: 	<P>
1: 	This class also provides a static method to empty the statement cache, StatementCache.emptyCache()
1: 
1: */
1: public final class StatementCache extends VTITemplate {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 	private int position = -1;
0: 	private Vector data;
1: 	private GenericPreparedStatement currentPs;
1: 	private boolean wasNull;
1: 
1: 	/**
0: 		Empty the statement cache. Must be called from a SQL statement, e.g.
0: 		<PRE>
0: 		CALL org.apache.derby.diag.StatementCache::emptyCache()
0: 		</PRE>
1: 
1: 	*/
0: 	public static void emptyCache() throws SQLException {
1: 
0: 		org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext lcc =
0: 			(org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext) ConnectionUtil.getCurrentLCC();
1: 
0: 		lcc.emptyCache();
1: 	}
1: 
0: 	public StatementCache() throws SQLException {
1: 
0: 		org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext lcc =
0: 			(org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext) ConnectionUtil.getCurrentLCC();
1: 
0: 		if (lcc.statementCache != null) {
1: 
0: 			java.util.Hashtable stmtCache = (java.util.Hashtable) lcc.statementCache;
0: 			data = new Vector(stmtCache.size());
0: 			for (Enumeration e = stmtCache.elements(); e.hasMoreElements(); ) {
1: 
1: 
0: 				CachedItem ci = (CachedItem) e.nextElement();
0: 				CachedStatement cs = (CachedStatement) ci.getEntry();
1: 
0: 				GenericPreparedStatement ps = (GenericPreparedStatement) cs.getPreparedStatement();
1: 
0: 				data.addElement(ps);
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	public boolean next() {
1: 
1: 		if (data == null)
1: 			return false;
1: 
1: 		position++;
1: 
1: 		for (; position < data.size(); position++) {
0: 			currentPs = (GenericPreparedStatement) data.elementAt(position);
1: 	
1: 			if (currentPs != null)
1: 				return true;
1: 		}
1: 
1: 		data = null;
1: 		return false;
1: 	}
1: 
1: 	public void close() {
1: 		data = null;
1: 		currentPs = null;
1: 	}
1: 
1: 
1: 	public String getString(int colId) {
1: 		wasNull = false;
1: 		switch (colId) {
1: 		case 1:
1: 			return currentPs.getObjectName();
1: 		case 2:
1: 			return ((GenericStatement) currentPs.statement).getCompilationSchema();
1: 		case 3:
1: 			String sql = currentPs.getSource();
0: 			sql = StringUtil.truncate(sql, DB2Limit.DB2_VARCHAR_MAXWIDTH);
1: 			return sql;
1: 		default:
1: 			return null;
1: 		}
1: 	}
1: 
1: 	public boolean getBoolean(int colId) {
1: 		wasNull = false;
1: 		switch (colId) {
1: 		case 4:
0: 			return currentPs.statement.getUnicode();
1: 		case 5:
1: 			return currentPs.isValid();
1: 		default:
1: 			return false;
1: 		}
1: 	}
1: 
1: 	public Timestamp getTimestamp(int colId) {
1: 
1: 		Timestamp ts = currentPs.getEndCompileTimestamp();
1: 		wasNull = (ts == null);
1: 		return ts;
1: 	}
1: 
1: 	public boolean wasNull() {
1: 		return wasNull;
1: 	}
1: 
1: 	/*
1: 	** Metadata
1: 	*/
1: 	private static final ResultColumnDescriptor[] columnInfo = {
1: 
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("ID",		  Types.CHAR, false, 36),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SCHEMANAME",    Types.VARCHAR, true, 128),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",  Types.VARCHAR, false, DB2Limit.DB2_VARCHAR_MAXWIDTH),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("UNICODE",   Types.BIT, false),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("VALID",  Types.BIT, false),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("COMPILED_AT",  Types.TIMESTAMP, true),
1: 
1: 	};
1: 	
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData(columnInfo);
1: 
1: 	public ResultSetMetaData getMetaData() {
1: 
1: 		return metadata;
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2c21843
/////////////////////////////////////////////////////////////////////////
1: 	The internal identifier of a cached statement matches the toString() method of a PreparedStatement object for a Derby database.
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 			sql = StringUtil.truncate(sql, Limits.DB2_VARCHAR_MAXWIDTH);
/////////////////////////////////////////////////////////////////////////
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",  Types.VARCHAR, false, Limits.DB2_VARCHAR_MAXWIDTH),
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.diag
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.diag;
0: 
0: import org.apache.derby.vti.VTITemplate;
0: 
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.impl.sql.GenericPreparedStatement;
0: import org.apache.derby.impl.sql.GenericStatement;
0: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: import java.sql.Types;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.Timestamp;
0: 
0: import org.apache.derby.impl.sql.conn.CachedStatement;
0: import org.apache.derby.impl.services.cache.CachedItem;
0: 
0: 
0: import java.util.Vector;
0: import java.util.Enumeration;
0: 
0: /**
0: 	StatementCache is a virtual table that shows the contents of the SQL statement cache.
0: 	
0: 	This virtual table can be invoked by calling it directly.
0: 	<PRE> select * from new org.apache.derby.diag.StatementCache() t</PRE>
0: 
0: 
0: 	<P>The StatementCache virtual table has the following columns:
0: 	<UL>
0: 	<LI> ID CHAR(36) - not nullable.  Internal identifier of the compiled statement.
0: 	<LI> SCHEMANAME VARCHAR(128) - nullable.  Schema the statement was compiled in.
0: 	<LI> SQL_TEXT VARCHAR(32672) - not nullable.  Text of the statement
0: 	<LI> UNICODE BIT/BOOLEAN - not nullable.  True if the statement is compiled as a pure unicode string, false if it handled unicode escapes.
0: 	<LI> VALID BIT/BOOLEAN - not nullable.  True if the statement is currently valid, false otherwise
0: 	<LI> COMPILED_AT TIMESTAMP nullable - time statement was compiled, requires STATISTICS TIMING to be enabled.
0: 
0: 
0: 	</UL>
0: 	<P>
0: 	The internal identifier of a cached statement matches the toString() method of a PreparedStatement object for a Cloudscape database.
0: 
0: 	<P>
0: 	This class also provides a static method to empty the statement cache, StatementCache.emptyCache()
0: 
0: */
0: public final class StatementCache extends VTITemplate {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	private int position = -1;
0: 	private Vector data;
0: 	private GenericPreparedStatement currentPs;
0: 	private boolean wasNull;
0: 
0: 	/**
0: 		Empty the statement cache. Must be called from a SQL statement, e.g.
0: 		<PRE>
0: 		CALL org.apache.derby.diag.StatementCache::emptyCache()
0: 		</PRE>
0: 
0: 	*/
0: 	public static void emptyCache() throws SQLException {
0: 
0: 		org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext lcc =
0: 			(org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext) ConnectionUtil.getCurrentLCC();
0: 
0: 		lcc.emptyCache();
0: 	}
0: 
0: 	public StatementCache() throws SQLException {
0: 
0: 		org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext lcc =
0: 			(org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext) ConnectionUtil.getCurrentLCC();
0: 
0: 		if (lcc.statementCache != null) {
0: 
0: 			java.util.Hashtable stmtCache = (java.util.Hashtable) lcc.statementCache;
0: 			data = new Vector(stmtCache.size());
0: 			for (Enumeration e = stmtCache.elements(); e.hasMoreElements(); ) {
0: 
0: 
0: 				CachedItem ci = (CachedItem) e.nextElement();
0: 				CachedStatement cs = (CachedStatement) ci.getEntry();
0: 
0: 				GenericPreparedStatement ps = (GenericPreparedStatement) cs.getPreparedStatement();
0: 
0: 				data.addElement(ps);
0: 			}
0: 		}
0: 
0: 	}
0: 
0: 	public boolean next() {
0: 
0: 		if (data == null)
0: 			return false;
0: 
0: 		position++;
0: 
0: 		for (; position < data.size(); position++) {
0: 			currentPs = (GenericPreparedStatement) data.elementAt(position);
0: 	
0: 			if (currentPs != null)
0: 				return true;
0: 		}
0: 
0: 		data = null;
0: 		return false;
0: 	}
0: 
0: 	public void close() {
0: 		data = null;
0: 		currentPs = null;
0: 	}
0: 
0: 
0: 	public String getString(int colId) {
0: 		wasNull = false;
0: 		switch (colId) {
0: 		case 1:
0: 			return currentPs.getObjectName();
0: 		case 2:
0: 			return ((GenericStatement) currentPs.statement).getCompilationSchema();
0: 		case 3:
0: 			String sql = currentPs.getSource();
0: 			sql = StringUtil.truncate(sql, DB2Limit.DB2_VARCHAR_MAXWIDTH);
0: 			return sql;
0: 		default:
0: 			return null;
0: 		}
0: 	}
0: 
0: 	public boolean getBoolean(int colId) {
0: 		wasNull = false;
0: 		switch (colId) {
0: 		case 4:
0: 			return currentPs.statement.getUnicode();
0: 		case 5:
0: 			return currentPs.isValid();
0: 		default:
0: 			return false;
0: 		}
0: 	}
0: 
0: 	public Timestamp getTimestamp(int colId) {
0: 
0: 		Timestamp ts = currentPs.getEndCompileTimestamp();
0: 		wasNull = (ts == null);
0: 		return ts;
0: 	}
0: 
0: 	public boolean wasNull() {
0: 		return wasNull;
0: 	}
0: 
0: 	/*
0: 	** Metadata
0: 	*/
0: 	private static final ResultColumnDescriptor[] columnInfo = {
0: 
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("ID",		  Types.CHAR, false, 36),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SCHEMANAME",    Types.VARCHAR, true, 128),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",  Types.VARCHAR, false, DB2Limit.DB2_VARCHAR_MAXWIDTH),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("UNICODE",   Types.BIT, false),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("VALID",  Types.BIT, false),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("COMPILED_AT",  Types.TIMESTAMP, true),
0: 
0: 	};
0: 	
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData(columnInfo);
0: 
0: 	public ResultSetMetaData getMetaData() {
0: 
0: 		return metadata;
0: 	}
0: }
============================================================================