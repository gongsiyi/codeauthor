1:6aa0b12: /*
1:6aa0b12:  *
1:6aa0b12:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.BlobStoredProcedureTest
1:6aa0b12:  *
1:6aa0b12:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6aa0b12:  * contributor license agreements.  See the NOTICE file distributed with
1:6aa0b12:  * this work for additional information regarding copyright ownership.
1:6aa0b12:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6aa0b12:  * (the "License"); you may not use this file except in compliance with
1:6aa0b12:  * the License.  You may obtain a copy of the License at
1:6aa0b12:  *
1:6aa0b12:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6aa0b12:  *
1:6aa0b12:  * Unless required by applicable law or agreed to in writing,
1:6aa0b12:  * software distributed under the License is distributed on an
1:6aa0b12:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:6aa0b12:  * either express or implied. See the License for the specific
1:6aa0b12:  * language governing permissions and limitations under the License.
1:6aa0b12:  */
3:6aa0b12: 
1:6aa0b12: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:6aa0b12: 
1:25378cb: import java.io.UnsupportedEncodingException;
1:6aa0b12: import java.sql.CallableStatement;
1:6aa0b12: import java.sql.SQLException;
1:6aa0b12: import junit.framework.Test;
1:6aa0b12: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:497f79d: import org.apache.derbyTesting.junit.JDBC;
1:6aa0b12: import org.apache.derbyTesting.junit.TestConfiguration;
1:6aa0b12: 
1:6aa0b12: /**
1:6aa0b12:  * Tests the stored procedures introduced as part of DERBY-208. These stored procedures will
1:6aa0b12:  * used by the Blob methods on the client side.
1:6aa0b12:  */
1:6aa0b12: public class BlobStoredProcedureTest extends BaseJDBCTestCase {
1:6aa0b12: 
1:6aa0b12:     //The test string that will be used in all the test runs.
1:6aa0b12:     final String testStr = "I am a simple derby test case";
1:25378cb: 
1:6aa0b12:    
1:6aa0b12:     //The length of the test string that will be used.
1:6aa0b12:     final long testStrLength = testStr.length();
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Public constructor required for running test as standalone JUnit.
1:6aa0b12:      * @param name a string containing the name of the test.
1:6aa0b12:      */
1:6aa0b12:     public BlobStoredProcedureTest(String name) {
1:6aa0b12:         super(name);
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Create a suite of tests.
1:6aa0b12:      * @return the test suite created.
1:6aa0b12:      */
1:6aa0b12:     public static Test suite() {
1:497f79d:         if (JDBC.vmSupportsJSR169()) {
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "empty: client not supported on JSR169; procs use DriverMgr");
1:497f79d:         }
1:497f79d:         else {
1:497f79d:             return TestConfiguration.defaultSuite(
1:497f79d:                     BlobStoredProcedureTest.class);
1:497f79d:         }
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Setup the test.
1:25378cb:      * @throws UnsupportedEncodingException 
1:6aa0b12:      * @throws a SQLException.
1:6aa0b12:      */
1:25378cb:     protected void setUp() throws SQLException, UnsupportedEncodingException {
1:25378cb:     	 //Byte array obatined from the string
1:25378cb:     	byte [] strBytes = testStr.getBytes("US-ASCII");
1:25378cb: 
1:6aa0b12:         //initialize the locator to a default value.
1:6aa0b12:         int locator = -1;
1:6aa0b12:         //set auto commit to false for the connection
1:6aa0b12:         getConnection().setAutoCommit(false);
1:6aa0b12:         //call the stored procedure to return the created locator.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         cs.close();
1:6aa0b12:         //use this new locator to test the SETBYTES function
1:6aa0b12:         //by inserting the new bytes and testing whether it has
1:6aa0b12:         //been inserted properly.
1:6aa0b12: 
1:6aa0b12:         //Insert the new substring.
1:6aa0b12:         cs  = prepareCall("CALL SYSIBM.BLOBSETBYTES(?,?,?,?)");
1:6aa0b12:         cs.setInt(1, locator);
1:6aa0b12:         cs.setLong(2, 1L);
1:6aa0b12:         cs.setInt(3, (int)testStrLength);
1:6aa0b12:         cs.setBytes(4, strBytes);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Cleanup the test.
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     protected void tearDown() throws Exception {
1:6aa0b12:         commit();
1:6aa0b12:         super.tearDown();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * test the BLOBGETBYTES stored procedure which will
1:6aa0b12:      * be used in the implementation of Blob.getBytes.
1:25378cb:      * @throws UnsupportedEncodingException 
1:6aa0b12:      *
1:6aa0b12:      * @throws a SQLException.
1:6aa0b12:      */
1:25378cb:     public void testBlobGetBytesSP() throws SQLException, UnsupportedEncodingException {
1:6aa0b12:         // This string represents the substring that is got from the
1:6aa0b12:         // stored procedure
1:6aa0b12:         String testSubStr = testStr.substring(0, 10);
1:25378cb:         byte [] testSubBytes = testSubStr.getBytes("US-ASCII");
1:6aa0b12: 
1:6aa0b12:         //create a callable statement and execute it to call the stored
1:6aa0b12:         //procedure BLOBGETBYTES that will get the bytes
1:6aa0b12:         //inserted into the Blob in the setup method.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBGETBYTES(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.VARBINARY);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.setLong(3, 1);
1:6aa0b12:         //set the length of the bytes returned as 10.
1:6aa0b12:         cs.setInt(4, 10);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         byte [] retVal = cs.getBytes(1);
1:6aa0b12: 
1:6aa0b12:         for (int i=0;i<10;i++){
1:6aa0b12:             assertEquals
1:6aa0b12:                 ("The Stored procedure SYSIBM.BLOBGETBYTES " +
1:6aa0b12:                 "returns the wrong bytes"
1:6aa0b12:                 , testSubBytes[i], retVal[i]);
1:6aa0b12:         }
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the locator value returned by the stored procedure
1:6aa0b12:      * BLOBCREATELOCATOR.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      *
1:6aa0b12:      */
1:6aa0b12:     public void testBlobCreateLocatorSP() throws SQLException {
1:6aa0b12:         //initialize the locator to a default value.
1:6aa0b12:         int locator = -1;
1:6aa0b12:         //call the stored procedure to return the created locator.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         //verify if the locator rturned and expected are equal.
1:6aa0b12:         //remember in setup a locator is already created
1:6aa0b12:         //hence expected value is 2
1:6aa0b12:         assertEquals("The locator values returned by " +
1:456b8a1:             "SYSIBM.BLOBCREATELOCATOR() are incorrect", 2, locator);
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the SYSIBM.BLOBRELEASELOCATOR stored procedure.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException
1:6aa0b12:      */
1:6aa0b12:     public void testBlobReleaseLocatorSP() throws SQLException {
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("CALL SYSIBM.BLOBRELEASELOCATOR(?)");
1:6aa0b12:         cs.setInt(1, 1);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         //once the locator has been released the BLOBGETLENGTH on that
1:6aa0b12:         //locator value will throw an SQLException. This assures that
1:6aa0b12:         //the locator has been properly released.
1:6aa0b12: 
1:6aa0b12:         cs  = prepareCall("? = CALL SYSIBM.BLOBGETLENGTH(?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         try {
1:6aa0b12:             cs.executeUpdate();
1:6aa0b12:         } catch(SQLException sqle) {
1:6aa0b12:             //on expected lines. The test was successful.
1:6aa0b12:             return;
1:6aa0b12:         }
1:6aa0b12:         //The exception was not thrown. The test has failed here.
1:6aa0b12:         fail("Error the locator was not released by SYSIBM.BLOBRELEASELOCATOR");
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the SYSIBM.BLOBGETLENGTH stored procedure.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void testBlobGetLengthSP() throws SQLException {
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBGETLENGTH(?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //compare the actual length of the test string and the returned length.
1:6aa0b12:         assertEquals("Error SYSIBM.BLOBGETLENGTH returns " +
1:6aa0b12:             "the wrong value for the length of the Blob", testStrLength, cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the SYSIBM.BLOBGETPOSITIONFROMBYTES stored procedure.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void testBlobGetPositionFromBytesSP() throws Exception {
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBGETPOSITIONFROMBYTES(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         //find the position of the bytes corresponding to
1:6aa0b12:         //the String simple in the test string.
1:25378cb:         cs.setBytes(3, (new String("simple")).getBytes("US-ASCII"));
1:6aa0b12:         cs.setLong(4, 1L);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //check to see that the returned position and the expected position
1:6aa0b12:         //of the substring simple in the string are matching.
1:6aa0b12:         assertEquals("Error SYSIBM.BLOBGETPOSITIONFROMBYTES returns " +
1:6aa0b12:             "the wrong value for the position of the Blob", 8, cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the stored procedure SYSIBM.BLOBSETBYTES
1:25378cb:      * @throws UnsupportedEncodingException 
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:25378cb:     public void testBlobSetBytes() throws SQLException, UnsupportedEncodingException {
1:6aa0b12:         String newString = "123456789012345";
1:25378cb:         byte [] newBytes = newString.getBytes("US-ASCII");
1:6aa0b12:         //initialize the locator to a default value.
1:6aa0b12:         int locator = -1;
1:6aa0b12:         //call the stored procedure to return the created locator.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         //use this new locator to test the SETBYTES function
1:6aa0b12:         //by inserting the new bytes and testing whether it has
1:6aa0b12:         //been inserted properly.
1:6aa0b12: 
1:6aa0b12:         //Insert the new substring.
1:6aa0b12:         cs  = prepareCall("CALL SYSIBM.BLOBSETBYTES(?,?,?,?)");
1:6aa0b12:         cs.setInt(1, locator);
1:6aa0b12:         cs.setLong(2, 1L);
1:6aa0b12:         cs.setInt(3, newString.length());
1:6aa0b12:         cs.setBytes(4, newBytes);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         //check the new locator to see if the value has been inserted correctly.
1:6aa0b12:         cs  = prepareCall("? = CALL " +
1:6aa0b12:             "SYSIBM.BLOBGETBYTES(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.VARBINARY);
1:6aa0b12:         cs.setInt(2, locator);
1:6aa0b12:         cs.setLong(3, 1);
1:6aa0b12:         cs.setInt(4, newString.length());
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         byte [] retVal = cs.getBytes(1);
1:6aa0b12:         //compare the new bytes and the bytes returned by the stored
1:6aa0b12:         //procedure to see of they are the same.
1:6aa0b12:         for (int i=0;i<newString.length();i++){
1:6aa0b12:             assertEquals
1:6aa0b12:                 ("The Stored procedure SYSIBM.BLOBGETBYTES " +
1:6aa0b12:                 "returns the wrong bytes"
1:6aa0b12:                 , newBytes[i], retVal[i]);
1:6aa0b12:         }
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Test the stored procedure SYSIBM.BLOBGETLENGTH
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException
1:6aa0b12:      */
1:6aa0b12:     public void testBlobTruncateSP() throws SQLException {
1:6aa0b12:         CallableStatement cs = prepareCall
1:6aa0b12:             ("CALL SYSIBM.BLOBTRUNCATE(?,?)");
1:6aa0b12:         cs.setInt(1, 1);
1:6aa0b12:         cs.setLong(2, 10L);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBGETLENGTH(?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //compare the actual length of the test string and the returned length.
1:6aa0b12:         assertEquals("Error SYSIBM.BLOBGETLENGTH returns " +
1:6aa0b12:             "the wrong value for the length of the Blob", 10L
1:6aa0b12:             , cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:      }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the SYSIBM.BLOBGETPOSITIONFROMLOCATOR stored procedure.
1:25378cb:      * @throws UnsupportedEncodingException 
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:25378cb:     public void testBlobGetPositionFromLocatorSP() throws SQLException, UnsupportedEncodingException {
1:6aa0b12:         String newString = "simple";
1:25378cb:         byte [] newBytes = newString.getBytes("US-ASCII");
1:6aa0b12:         //initialize the locator to a default value.
1:6aa0b12:         int locator = -1;
1:6aa0b12:         //call the stored procedure to return the created locator.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         //use this new locator to test the SETBYTES function
1:6aa0b12:         //by inserting the new bytes and testing whether it has
1:6aa0b12:         //been inserted properly.
1:6aa0b12: 
1:6aa0b12:         //Insert the new substring.
1:6aa0b12:         cs  = prepareCall("CALL SYSIBM.BLOBSETBYTES(?,?,?,?)");
1:6aa0b12:         cs.setInt(1, locator);
1:6aa0b12:         cs.setLong(2, 1L);
1:6aa0b12:         cs.setInt(3, newString.length());
1:6aa0b12:         cs.setBytes(4, newBytes);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.BLOBGETPOSITIONFROMLOCATOR(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         //find the position of the bytes corresponding to
1:6aa0b12:         //the String simple in the test string.
1:6aa0b12:         cs.setInt(3, locator);
1:6aa0b12:         cs.setLong(4, 1L);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //check to see that the returned position and the expected position
1:6aa0b12:         //of the substring simple in the string are matching.
1:6aa0b12:         assertEquals("Error SYSIBM.BLOBGETPOSITIONFROMLOCATOR returns " +
1:6aa0b12:             "the wrong value for the position of the Blob", 8, cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
1:                 "empty: client not supported on JSR169; procs use DriverMgr");
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:25378cb
/////////////////////////////////////////////////////////////////////////
1: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
1:    
/////////////////////////////////////////////////////////////////////////
1:      * @throws UnsupportedEncodingException 
1:     protected void setUp() throws SQLException, UnsupportedEncodingException {
1:     	 //Byte array obatined from the string
1:     	byte [] strBytes = testStr.getBytes("US-ASCII");
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @throws UnsupportedEncodingException 
1:     public void testBlobGetBytesSP() throws SQLException, UnsupportedEncodingException {
1:         byte [] testSubBytes = testSubStr.getBytes("US-ASCII");
/////////////////////////////////////////////////////////////////////////
1:         cs.setBytes(3, (new String("simple")).getBytes("US-ASCII"));
/////////////////////////////////////////////////////////////////////////
1:      * @throws UnsupportedEncodingException 
1:     public void testBlobSetBytes() throws SQLException, UnsupportedEncodingException {
1:         byte [] newBytes = newString.getBytes("US-ASCII");
/////////////////////////////////////////////////////////////////////////
1:      * @throws UnsupportedEncodingException 
1:     public void testBlobGetPositionFromLocatorSP() throws SQLException, UnsupportedEncodingException {
1:         byte [] newBytes = newString.getBytes("US-ASCII");
commit:456b8a1
/////////////////////////////////////////////////////////////////////////
1:             "SYSIBM.BLOBCREATELOCATOR() are incorrect", 2, locator);
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:126b96c
/////////////////////////////////////////////////////////////////////////
0:             "SYSIBM.BLOBCREATELOCATOR() are incorrect", 4, locator);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:af9a439
/////////////////////////////////////////////////////////////////////////
0:             return new TestSuite("empty: client not supported on JSR169; procs use DriverMgr");
author:Army
-------------------------------------------------------------------------------
commit:497f79d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJSR169()) {
0:             return new TestSuite("empty: client not supported on JSR169");
1:         }
1:         else {
1:             return TestConfiguration.defaultSuite(
1:                     BlobStoredProcedureTest.class);
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6aa0b12
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.BlobStoredProcedureTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.sql.Blob;
1: import java.sql.CallableStatement;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import junit.framework.Assert;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests the stored procedures introduced as part of DERBY-208. These stored procedures will
1:  * used by the Blob methods on the client side.
1:  */
1: public class BlobStoredProcedureTest extends BaseJDBCTestCase {
1: 
1:     //The test string that will be used in all the test runs.
1:     final String testStr = "I am a simple derby test case";
1: 
0:     //Byte array obatined from the string
0:     final byte [] strBytes = testStr.getBytes();
1: 
1:     //The length of the test string that will be used.
1:     final long testStrLength = testStr.length();
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name a string containing the name of the test.
1:      */
1:     public BlobStoredProcedureTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:      * @return the test suite created.
1:      */
1:     public static Test suite() {
0:         return TestConfiguration.defaultSuite(BlobStoredProcedureTest.class);
1:     }
1: 
1:     /**
1:      * Setup the test.
1:      * @throws a SQLException.
1:      */
0:     protected void setUp() throws SQLException {
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //set auto commit to false for the connection
1:         getConnection().setAutoCommit(false);
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         cs.close();
1:         //use this new locator to test the SETBYTES function
1:         //by inserting the new bytes and testing whether it has
1:         //been inserted properly.
1: 
1:         //Insert the new substring.
1:         cs  = prepareCall("CALL SYSIBM.BLOBSETBYTES(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setLong(2, 1L);
1:         cs.setInt(3, (int)testStrLength);
1:         cs.setBytes(4, strBytes);
1:         cs.execute();
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Cleanup the test.
1:      * @throws SQLException.
1:      */
1:     protected void tearDown() throws Exception {
1:         commit();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * test the BLOBGETBYTES stored procedure which will
1:      * be used in the implementation of Blob.getBytes.
1:      *
1:      * @throws a SQLException.
1:      */
0:     public void testBlobGetBytesSP() throws SQLException {
1:         // This string represents the substring that is got from the
1:         // stored procedure
1:         String testSubStr = testStr.substring(0, 10);
0:         byte [] testSubBytes = testSubStr.getBytes();
1: 
1:         //create a callable statement and execute it to call the stored
1:         //procedure BLOBGETBYTES that will get the bytes
1:         //inserted into the Blob in the setup method.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBGETBYTES(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.VARBINARY);
1:         cs.setInt(2, 1);
1:         cs.setLong(3, 1);
1:         //set the length of the bytes returned as 10.
1:         cs.setInt(4, 10);
1:         cs.executeUpdate();
1:         byte [] retVal = cs.getBytes(1);
1: 
1:         for (int i=0;i<10;i++){
1:             assertEquals
1:                 ("The Stored procedure SYSIBM.BLOBGETBYTES " +
1:                 "returns the wrong bytes"
1:                 , testSubBytes[i], retVal[i]);
1:         }
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the locator value returned by the stored procedure
1:      * BLOBCREATELOCATOR.
1:      *
1:      * @throws SQLException.
1:      *
1:      */
1:     public void testBlobCreateLocatorSP() throws SQLException {
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         //verify if the locator rturned and expected are equal.
1:         //remember in setup a locator is already created
1:         //hence expected value is 2
1:         assertEquals("The locator values returned by " +
0:             "SYSIBM.BLOBCREATELOCATOR() are incorrect", 2, locator);
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the SYSIBM.BLOBRELEASELOCATOR stored procedure.
1:      *
1:      * @throws SQLException
1:      */
1:     public void testBlobReleaseLocatorSP() throws SQLException {
1:         CallableStatement cs  = prepareCall
1:             ("CALL SYSIBM.BLOBRELEASELOCATOR(?)");
1:         cs.setInt(1, 1);
1:         cs.execute();
1:         cs.close();
1: 
1:         //once the locator has been released the BLOBGETLENGTH on that
1:         //locator value will throw an SQLException. This assures that
1:         //the locator has been properly released.
1: 
1:         cs  = prepareCall("? = CALL SYSIBM.BLOBGETLENGTH(?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         try {
1:             cs.executeUpdate();
1:         } catch(SQLException sqle) {
1:             //on expected lines. The test was successful.
1:             return;
1:         }
1:         //The exception was not thrown. The test has failed here.
1:         fail("Error the locator was not released by SYSIBM.BLOBRELEASELOCATOR");
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the SYSIBM.BLOBGETLENGTH stored procedure.
1:      *
1:      * @throws SQLException.
1:      */
1:     public void testBlobGetLengthSP() throws SQLException {
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBGETLENGTH(?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         cs.executeUpdate();
1:         //compare the actual length of the test string and the returned length.
1:         assertEquals("Error SYSIBM.BLOBGETLENGTH returns " +
1:             "the wrong value for the length of the Blob", testStrLength, cs.getLong(1));
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the SYSIBM.BLOBGETPOSITIONFROMBYTES stored procedure.
1:      *
1:      * @throws SQLException.
1:      */
1:     public void testBlobGetPositionFromBytesSP() throws Exception {
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBGETPOSITIONFROMBYTES(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         //find the position of the bytes corresponding to
1:         //the String simple in the test string.
0:         cs.setBytes(3, (new String("simple")).getBytes());
1:         cs.setLong(4, 1L);
1:         cs.executeUpdate();
1:         //check to see that the returned position and the expected position
1:         //of the substring simple in the string are matching.
1:         assertEquals("Error SYSIBM.BLOBGETPOSITIONFROMBYTES returns " +
1:             "the wrong value for the position of the Blob", 8, cs.getLong(1));
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the stored procedure SYSIBM.BLOBSETBYTES
1:      *
1:      * @throws SQLException.
1:      */
0:     public void testBlobSetBytes() throws SQLException {
1:         String newString = "123456789012345";
0:         byte [] newBytes = newString.getBytes();
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         cs.close();
1: 
1:         //use this new locator to test the SETBYTES function
1:         //by inserting the new bytes and testing whether it has
1:         //been inserted properly.
1: 
1:         //Insert the new substring.
1:         cs  = prepareCall("CALL SYSIBM.BLOBSETBYTES(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setLong(2, 1L);
1:         cs.setInt(3, newString.length());
1:         cs.setBytes(4, newBytes);
1:         cs.execute();
1:         cs.close();
1: 
1:         //check the new locator to see if the value has been inserted correctly.
1:         cs  = prepareCall("? = CALL " +
1:             "SYSIBM.BLOBGETBYTES(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.VARBINARY);
1:         cs.setInt(2, locator);
1:         cs.setLong(3, 1);
1:         cs.setInt(4, newString.length());
1:         cs.executeUpdate();
1:         byte [] retVal = cs.getBytes(1);
1:         //compare the new bytes and the bytes returned by the stored
1:         //procedure to see of they are the same.
1:         for (int i=0;i<newString.length();i++){
1:             assertEquals
1:                 ("The Stored procedure SYSIBM.BLOBGETBYTES " +
1:                 "returns the wrong bytes"
1:                 , newBytes[i], retVal[i]);
1:         }
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Test the stored procedure SYSIBM.BLOBGETLENGTH
1:      *
1:      * @throws SQLException
1:      */
1:     public void testBlobTruncateSP() throws SQLException {
1:         CallableStatement cs = prepareCall
1:             ("CALL SYSIBM.BLOBTRUNCATE(?,?)");
1:         cs.setInt(1, 1);
1:         cs.setLong(2, 10L);
1:         cs.execute();
1:         cs.close();
1: 
1:         cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBGETLENGTH(?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         cs.executeUpdate();
1:         //compare the actual length of the test string and the returned length.
1:         assertEquals("Error SYSIBM.BLOBGETLENGTH returns " +
1:             "the wrong value for the length of the Blob", 10L
1:             , cs.getLong(1));
1:         cs.close();
1:      }
1: 
1:     /**
1:      * Tests the SYSIBM.BLOBGETPOSITIONFROMLOCATOR stored procedure.
1:      *
1:      * @throws SQLException.
1:      */
0:     public void testBlobGetPositionFromLocatorSP() throws SQLException {
1:         String newString = "simple";
0:         byte [] newBytes = newString.getBytes();
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         cs.close();
1: 
1:         //use this new locator to test the SETBYTES function
1:         //by inserting the new bytes and testing whether it has
1:         //been inserted properly.
1: 
1:         //Insert the new substring.
1:         cs  = prepareCall("CALL SYSIBM.BLOBSETBYTES(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setLong(2, 1L);
1:         cs.setInt(3, newString.length());
1:         cs.setBytes(4, newBytes);
1:         cs.execute();
1:         cs.close();
1: 
1:         cs  = prepareCall
1:             ("? = CALL SYSIBM.BLOBGETPOSITIONFROMLOCATOR(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         //find the position of the bytes corresponding to
1:         //the String simple in the test string.
1:         cs.setInt(3, locator);
1:         cs.setLong(4, 1L);
1:         cs.executeUpdate();
1:         //check to see that the returned position and the expected position
1:         //of the substring simple in the string are matching.
1:         assertEquals("Error SYSIBM.BLOBGETPOSITIONFROMLOCATOR returns " +
1:             "the wrong value for the position of the Blob", 8, cs.getLong(1));
1:         cs.close();
1:     }
1: }
============================================================================