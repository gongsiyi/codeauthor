1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.conn.CachedStatement
1:345de35: 
1:575d6a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:575d6a1:    contributor license agreements.  See the NOTICE file distributed with
1:575d6a1:    this work for additional information regarding copyright ownership.
1:575d6a1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:575d6a1:    (the "License"); you may not use this file except in compliance with
1:575d6a1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.conn;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.impl.sql.GenericPreparedStatement;
1:eac0369: import org.apache.derby.impl.sql.GenericStatement;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.PreparedStatement;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
2:eac0369: /**
1:eac0369: */
1:eac0369: public class CachedStatement implements Cacheable {
1:eac0369: 
1:eac0369: 	private GenericPreparedStatement ps;
1:eac0369: 	private Object identity;
1:eac0369: 
1:eac0369: 	public CachedStatement() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the PreparedStatement that is associated with this Cacheable
1:eac0369: 	 */
1:eac0369: 	public GenericPreparedStatement getPreparedStatement() {
1:eac0369: 		return ps;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 
1:eac0369: 	    @see Cacheable#clean
1:eac0369: 	*/
1:eac0369: 	public void clean(boolean forRemove) {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	*/
1:eac0369: 	public Cacheable setIdentity(Object key) {
1:eac0369: 
1:eac0369: 		identity = key;
1:eac0369: 		ps = new GenericPreparedStatement((GenericStatement) key);
1:eac0369: 		ps.setCacheHolder(this);
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#createIdentity */
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter) {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("Not expecting any create() calls");
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clearIdentity */
1:eac0369: 	public void clearIdentity() {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.DEBUG("StatementCacheInfo","CLEARING IDENTITY: "+ps.getSource());
1:eac0369: 		ps.setCacheHolder(null);
1:eac0369: 
1:eac0369: 		identity = null;
1:eac0369: 		ps = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#getIdentity */
1:eac0369: 	public Object getIdentity() {
1:eac0369: 		return identity;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#isDirty */
1:eac0369: 	public boolean isDirty() {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:575d6a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.conn.CachedStatement
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.conn
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.conn;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.impl.sql.GenericPreparedStatement;
1: import org.apache.derby.impl.sql.GenericStatement;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.PreparedStatement;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: /**
0: 	@author ames
1: */
1: public class CachedStatement implements Cacheable {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private GenericPreparedStatement ps;
1: 	private Object identity;
1: 
1: 	public CachedStatement() {
1: 	}
1: 
1: 	/**
1: 	 * Get the PreparedStatement that is associated with this Cacheable
1: 	 */
1: 	public GenericPreparedStatement getPreparedStatement() {
1: 		return ps;
1: 	}
1: 
1: 	/* Cacheable interface */
1: 
1: 	/**
1: 
1: 	    @see Cacheable#clean
1: 	*/
1: 	public void clean(boolean forRemove) {
1: 	}
1: 
1: 	/**
1: 	*/
1: 	public Cacheable setIdentity(Object key) {
1: 
1: 		identity = key;
1: 		ps = new GenericPreparedStatement((GenericStatement) key);
1: 		ps.setCacheHolder(this);
1: 
1: 		return this;
1: 	}
1: 
1: 	/** @see Cacheable#createIdentity */
1: 	public Cacheable createIdentity(Object key, Object createParameter) {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("Not expecting any create() calls");
1: 
1: 		return null;
1: 
1: 	}
1: 
1: 	/** @see Cacheable#clearIdentity */
1: 	public void clearIdentity() {
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.DEBUG("StatementCacheInfo","CLEARING IDENTITY: "+ps.getSource());
1: 		ps.setCacheHolder(null);
1: 
1: 		identity = null;
1: 		ps = null;
1: 	}
1: 
1: 	/** @see Cacheable#getIdentity */
1: 	public Object getIdentity() {
1: 		return identity;
1: 	}
1: 
1: 	/** @see Cacheable#isDirty */
1: 	public boolean isDirty() {
1: 		return false;
1: 	}
1: 
1: 	/* Cacheable interface */
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.conn
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.conn;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.impl.sql.GenericPreparedStatement;
0: import org.apache.derby.impl.sql.GenericStatement;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.PreparedStatement;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: /**
0: 	@author ames
0: */
0: public class CachedStatement implements Cacheable {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private GenericPreparedStatement ps;
0: 	private Object identity;
0: 
0: 	public CachedStatement() {
0: 	}
0: 
0: 	/**
0: 	 * Get the PreparedStatement that is associated with this Cacheable
0: 	 */
0: 	public GenericPreparedStatement getPreparedStatement() {
0: 		return ps;
0: 	}
0: 
0: 	/* Cacheable interface */
0: 
0: 	/**
0: 
0: 	    @see Cacheable#clean
0: 	*/
0: 	public void clean(boolean forRemove) {
0: 	}
0: 
0: 	/**
0: 	*/
0: 	public Cacheable setIdentity(Object key) {
0: 
0: 		identity = key;
0: 		ps = new GenericPreparedStatement((GenericStatement) key);
0: 		ps.setCacheHolder(this);
0: 
0: 		return this;
0: 	}
0: 
0: 	/** @see Cacheable#createIdentity */
0: 	public Cacheable createIdentity(Object key, Object createParameter) {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("Not expecting any create() calls");
0: 
0: 		return null;
0: 
0: 	}
0: 
0: 	/** @see Cacheable#clearIdentity */
0: 	public void clearIdentity() {
0: 
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.DEBUG("StatementCacheInfo","CLEARING IDENTITY: "+ps.getSource());
0: 		ps.setCacheHolder(null);
0: 
0: 		identity = null;
0: 		ps = null;
0: 	}
0: 
0: 	/** @see Cacheable#getIdentity */
0: 	public Object getIdentity() {
0: 		return identity;
0: 	}
0: 
0: 	/** @see Cacheable#isDirty */
0: 	public boolean isDirty() {
0: 		return false;
0: 	}
0: 
0: 	/* Cacheable interface */
0: }
============================================================================