1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.util.BitUtil
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.util;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: /**
1:2bc809f:  * This class provides utility methods for 
1:2bc809f:  * converting byte arrays to hexidecimal Strings and manipulating BIT/BIT VARYING values as a
1:2bc809f:  * packed vector of booleans.
1:2bc809f:  * 
1:2bc809f:  * <P> The BIT/BIT VARYING methods are modeled after
1:2bc809f:  * some methods in the <I>java.util.BitSet</I> class. 
1:2bc809f:  * An alternative to using a SQL BIT (VARYING) column
1:2bc809f:  * in conjunction with the methods provided herein to
1:2bc809f:  * provide bit manipulation would be to use a serialized 
1:2bc809f:  * <I>java.util.BitSet</I> column instead.
1:2bc809f:  * <p>
1:2bc809f:  * This class contains the following static methods: <UL>
1:2bc809f:  * <LI> void <B>set</B>(byte[] bytes, int position) to set a bit</LI>
1:2bc809f:  * <LI> void <B>clear</B>(byte[] bytes, int position) to clear a bit</LI>
1:2bc809f:  * <LI> boolean <B>get</B>(byte[] bytes, int position) to get the 
1:2bc809f:  *		bit status </LI> </UL>
1:2bc809f:  * <p>
1:2bc809f:  * Since these methods effectively allow a SQL BIT to be
1:2bc809f:  * considered as an array of booleans, all offsets (position
1:2bc809f:  * parameters) are zero based.  So if you want to set
1:2bc809f:  * the first bit of a BIT type, you would use <I> 
1:2bc809f:  * set(MyBitColumn, 0) </I>.
1:2bc809f:  * <p> 
1:2bc809f:  * Examples: <UL>
1:2bc809f:  * <LI> SELECT BitUtil::get(bitcol, 2) FROM mytab </LI>
1:2bc809f:  * <LI> UPDATE mytab SET bitcol = BitUtil::set(bitcol, 2)  </LI>
1:2bc809f:  * <LI> UPDATE mytab SET bitcol = BitUtil::clear(bitcol, 2)  </LI> </UL>
1:2bc809f:  *
1:2bc809f:  */ 
1:2bc809f: public class BitUtil
1:2bc809f: {
1:2bc809f: 	/**
1:2bc809f: 	 * Set the bit at the specified position
1:2bc809f: 	 *
1:2bc809f: 	 * @param bytes		the byte array
1:2bc809f: 	 * @param position	the bit to set, starting from zero
1:2bc809f: 	 *
1:2bc809f: 	 * @return the byte array with the set bit
1:2bc809f: 	 *
1:2bc809f: 	 * @exception IndexOutOfBoundsException on bad position
1:2bc809f: 	 */
1:2bc809f: 	public static byte[] set(byte[] bytes, int position)
1:2bc809f: 	{
1:2bc809f: 		if (position >= 0)
1:2bc809f: 		{
1:2bc809f: 			int bytepos = position >> 3;
1:2bc809f: 			if (bytepos < bytes.length)
1:2bc809f: 			{
1:2bc809f: 				int bitpos = 7 - (position % 8);
1:2bc809f: 
1:2bc809f: 				bytes[bytepos] |= (1 << bitpos);
1:2bc809f: 				return bytes;
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		throw new IndexOutOfBoundsException(Integer.toString(position));
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * Clear the bit at the specified position
1:2bc809f: 	 *
1:2bc809f: 	 * @param bytes		the byte array
1:2bc809f: 	 * @param position	the bit to clear, starting from zero
1:2bc809f: 	 *
1:2bc809f: 	 * @return the byte array with the cleared bit
1:2bc809f: 	 *
1:2bc809f: 	 * @exception IndexOutOfBoundsException on bad position
1:2bc809f: 	 */
1:2bc809f: 	public static byte[] clear(byte[] bytes, int position)
1:2bc809f: 	{
1:2bc809f: 		if (position >= 0)
1:2bc809f: 		{
1:2bc809f: 			int bytepos = position >> 3;
1:2bc809f: 			if (bytepos < bytes.length)
1:2bc809f: 			{
1:2bc809f: 				int bitpos = 7 - (position % 8);
1:2bc809f: 				bytes[bytepos] &= ~(1 << bitpos);
1:2bc809f: 				return bytes;
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		
1:2bc809f: 		throw new IndexOutOfBoundsException(Integer.toString(position));
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * Check to see if the specified bit is set
1:2bc809f: 	 *
1:2bc809f: 	 * @param bytes		the byte array
1:2bc809f: 	 * @param position	the bit to check, starting from zero
1:2bc809f: 	 *
1:2bc809f: 	 * @return true/false
1:2bc809f: 	 *
1:2bc809f: 	 * @exception IndexOutOfBoundsException on bad position
1:2bc809f: 	 */
1:2bc809f: 	public static boolean get(byte[] bytes, int position)
1:2bc809f: 	{
1:2bc809f: 		if (position >= 0)
1:2bc809f: 		{
1:2bc809f: 			int bytepos = position >> 3;
1:2bc809f: 			if (bytepos < bytes.length)
1:2bc809f: 			{
1:2bc809f: 				int bitpos = 7 - (position % 8);
1:2bc809f: 				return ((bytes[bytepos] & (1 << bitpos)) != 0);
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		throw new IndexOutOfBoundsException(Integer.toString(position));
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private static char[] hex_table = {
1:2bc809f:                 '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
1:2bc809f:                 'a', 'b', 'c', 'd', 'e', 'f'
1:2bc809f:             };
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Convert a byte array to a human-readable String for debugging purposes.
1:2bc809f: 	*/
1:2bc809f: 	public static String hexDump(byte[] data)
1:2bc809f: 	{
1:2bc809f:             byte byte_value;
1:2bc809f: 
1:2bc809f: 
1:2bc809f:             StringBuffer str = new StringBuffer(data.length * 3);
1:2bc809f: 
1:2bc809f:             str.append("Hex dump:\n");
1:2bc809f: 
1:2bc809f:             for (int i = 0; i < data.length; i += 16)
1:2bc809f:             {
1:2bc809f:                 // dump the header: 00000000: 
1:2bc809f:                 String offset = Integer.toHexString(i);
1:2bc809f: 
1:2bc809f:                 // "0" left pad offset field so it is always 8 char's long.
1:2bc809f:                 for (int offlen = offset.length(); offlen < 8; offlen++) 
1:2bc809f:                     str.append("0");
1:2bc809f:                 str.append(offset);
1:2bc809f:                 str.append(":");
1:2bc809f: 
1:2bc809f:                 // dump hex version of 16 bytes per line.
1:2bc809f:                 for (int j = 0; (j < 16) && ((i + j) < data.length); j++)
1:2bc809f:                 {
1:2bc809f:                     byte_value = data[i + j];
1:2bc809f: 
1:2bc809f:                     // add spaces between every 2 bytes.
1:2bc809f:                     if ((j % 2) == 0)
1:2bc809f:                         str.append(" ");
1:2bc809f: 
1:2bc809f:                     // dump a single byte.
1:2bc809f:                     byte high_nibble = (byte) ((byte_value & 0xf0) >>> 4); 
1:2bc809f:                     byte low_nibble  = (byte) (byte_value & 0x0f); 
1:2bc809f: 
1:2bc809f:                     str.append(hex_table[high_nibble]);
1:2bc809f:                     str.append(hex_table[low_nibble]);
1:2bc809f:                 }
1:2bc809f: 
1:2bc809f:                 // dump ascii version of 16 bytes
1:2bc809f:                 str.append("  ");
1:2bc809f: 
1:2bc809f:                 for (int j = 0; (j < 16) && ((i + j) < data.length); j++)
1:2bc809f:                 {
1:2bc809f:                     char char_value = (char) data[i + j]; 
1:2bc809f: 
1:2bc809f:                     // RESOLVE (really want isAscii() or isPrintable())
1:2bc809f:                     if (Character.isLetterOrDigit(char_value))
1:2bc809f:                         str.append(String.valueOf(char_value));
1:2bc809f:                     else
1:2bc809f:                         str.append(".");
1:2bc809f:                 }
1:2bc809f:                     
1:2bc809f:                 // new line
1:2bc809f:                 str.append("\n");
1:2bc809f:             }
1:2bc809f:             return(str.toString());
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.util.BitUtil
1: 
0:    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.util;
1: 
1: 
1: /**
1:  * This class provides utility methods for 
1:  * converting byte arrays to hexidecimal Strings and manipulating BIT/BIT VARYING values as a
1:  * packed vector of booleans.
1:  * 
1:  * <P> The BIT/BIT VARYING methods are modeled after
1:  * some methods in the <I>java.util.BitSet</I> class. 
1:  * An alternative to using a SQL BIT (VARYING) column
1:  * in conjunction with the methods provided herein to
1:  * provide bit manipulation would be to use a serialized 
1:  * <I>java.util.BitSet</I> column instead.
1:  * <p>
1:  * This class contains the following static methods: <UL>
1:  * <LI> void <B>set</B>(byte[] bytes, int position) to set a bit</LI>
1:  * <LI> void <B>clear</B>(byte[] bytes, int position) to clear a bit</LI>
1:  * <LI> boolean <B>get</B>(byte[] bytes, int position) to get the 
1:  *		bit status </LI> </UL>
1:  * <p>
1:  * Since these methods effectively allow a SQL BIT to be
1:  * considered as an array of booleans, all offsets (position
1:  * parameters) are zero based.  So if you want to set
1:  * the first bit of a BIT type, you would use <I> 
1:  * set(MyBitColumn, 0) </I>.
1:  * <p> 
1:  * Examples: <UL>
1:  * <LI> SELECT BitUtil::get(bitcol, 2) FROM mytab </LI>
1:  * <LI> UPDATE mytab SET bitcol = BitUtil::set(bitcol, 2)  </LI>
1:  * <LI> UPDATE mytab SET bitcol = BitUtil::clear(bitcol, 2)  </LI> </UL>
1:  *
1:  */ 
1: public class BitUtil
1: {
1: 	/**
1: 	 * Set the bit at the specified position
1: 	 *
1: 	 * @param bytes		the byte array
1: 	 * @param position	the bit to set, starting from zero
1: 	 *
1: 	 * @return the byte array with the set bit
1: 	 *
1: 	 * @exception IndexOutOfBoundsException on bad position
1: 	 */
1: 	public static byte[] set(byte[] bytes, int position)
1: 	{
1: 		if (position >= 0)
1: 		{
1: 			int bytepos = position >> 3;
1: 			if (bytepos < bytes.length)
1: 			{
1: 				int bitpos = 7 - (position % 8);
1: 
1: 				bytes[bytepos] |= (1 << bitpos);
1: 				return bytes;
1: 			}
1: 		}
1: 		throw new IndexOutOfBoundsException(Integer.toString(position));
1: 	}
1: 
1: 	/**
1: 	 * Clear the bit at the specified position
1: 	 *
1: 	 * @param bytes		the byte array
1: 	 * @param position	the bit to clear, starting from zero
1: 	 *
1: 	 * @return the byte array with the cleared bit
1: 	 *
1: 	 * @exception IndexOutOfBoundsException on bad position
1: 	 */
1: 	public static byte[] clear(byte[] bytes, int position)
1: 	{
1: 		if (position >= 0)
1: 		{
1: 			int bytepos = position >> 3;
1: 			if (bytepos < bytes.length)
1: 			{
1: 				int bitpos = 7 - (position % 8);
1: 				bytes[bytepos] &= ~(1 << bitpos);
1: 				return bytes;
1: 			}
1: 		}
1: 		
1: 		throw new IndexOutOfBoundsException(Integer.toString(position));
1: 	}
1: 
1: 	/**
1: 	 * Check to see if the specified bit is set
1: 	 *
1: 	 * @param bytes		the byte array
1: 	 * @param position	the bit to check, starting from zero
1: 	 *
1: 	 * @return true/false
1: 	 *
1: 	 * @exception IndexOutOfBoundsException on bad position
1: 	 */
1: 	public static boolean get(byte[] bytes, int position)
1: 	{
1: 		if (position >= 0)
1: 		{
1: 			int bytepos = position >> 3;
1: 			if (bytepos < bytes.length)
1: 			{
1: 				int bitpos = 7 - (position % 8);
1: 				return ((bytes[bytepos] & (1 << bitpos)) != 0);
1: 			}
1: 		}
1: 		throw new IndexOutOfBoundsException(Integer.toString(position));
1: 	}
1: 
1: 	private static char[] hex_table = {
1:                 '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
1:                 'a', 'b', 'c', 'd', 'e', 'f'
1:             };
1: 
1: 	/**
1: 		Convert a byte array to a human-readable String for debugging purposes.
1: 	*/
1: 	public static String hexDump(byte[] data)
1: 	{
1:             byte byte_value;
1: 
1: 
1:             StringBuffer str = new StringBuffer(data.length * 3);
1: 
1:             str.append("Hex dump:\n");
1: 
1:             for (int i = 0; i < data.length; i += 16)
1:             {
1:                 // dump the header: 00000000: 
1:                 String offset = Integer.toHexString(i);
1: 
1:                 // "0" left pad offset field so it is always 8 char's long.
1:                 for (int offlen = offset.length(); offlen < 8; offlen++) 
1:                     str.append("0");
1:                 str.append(offset);
1:                 str.append(":");
1: 
1:                 // dump hex version of 16 bytes per line.
1:                 for (int j = 0; (j < 16) && ((i + j) < data.length); j++)
1:                 {
1:                     byte_value = data[i + j];
1: 
1:                     // add spaces between every 2 bytes.
1:                     if ((j % 2) == 0)
1:                         str.append(" ");
1: 
1:                     // dump a single byte.
1:                     byte high_nibble = (byte) ((byte_value & 0xf0) >>> 4); 
1:                     byte low_nibble  = (byte) (byte_value & 0x0f); 
1: 
1:                     str.append(hex_table[high_nibble]);
1:                     str.append(hex_table[low_nibble]);
1:                 }
1: 
1:                 // dump ascii version of 16 bytes
1:                 str.append("  ");
1: 
1:                 for (int j = 0; (j < 16) && ((i + j) < data.length); j++)
1:                 {
1:                     char char_value = (char) data[i + j]; 
1: 
1:                     // RESOLVE (really want isAscii() or isPrintable())
1:                     if (Character.isLetterOrDigit(char_value))
1:                         str.append(String.valueOf(char_value));
1:                     else
1:                         str.append(".");
1:                 }
1:                     
1:                 // new line
1:                 str.append("\n");
1:             }
1:             return(str.toString());
1: 
1: 	}
1: }
============================================================================