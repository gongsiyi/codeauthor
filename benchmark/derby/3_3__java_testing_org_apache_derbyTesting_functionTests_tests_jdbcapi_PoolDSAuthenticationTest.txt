1:c774a1c: /*
7:c774a1c: 
1:c774a1c:    Derby - Class 
1:c774a1c:    org.apache.derbyTesting.functionTests.tests.jdbcapi.ConnectionPoolDataSourceAuthenticationTest
1:c774a1c: 
1:c774a1c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c774a1c:    contributor license agreements.  See the NOTICE file distributed with
1:c774a1c:    this work for additional information regarding copyright ownership.
1:c774a1c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c774a1c:    (the "License"); you may not use this file except in compliance with
1:c774a1c:    the License.  You may obtain a copy of the License at
1:c774a1c: 
1:c774a1c:       http://www.apache.org/licenses/LICENSE-2.0
1:c774a1c: 
1:c774a1c:    Unless required by applicable law or agreed to in writing, software
1:c774a1c:    distributed under the License is distributed on an "AS IS" BASIS,
1:c774a1c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c774a1c:    See the License for the specific language governing permissions and
1:c774a1c:    limitations under the License.
1:c774a1c: 
1:c774a1c:  */
1:c774a1c: 
1:c774a1c: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:c774a1c: 
1:c774a1c: import java.sql.SQLException;
1:c774a1c: import javax.sql.ConnectionPoolDataSource;
1:c774a1c: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c774a1c: import org.apache.derbyTesting.junit.J2EEDataSource;
1:c774a1c: import org.apache.derbyTesting.junit.JDBC;
1:c774a1c: import org.apache.derbyTesting.junit.JDBCDataSource;
1:c774a1c: import org.apache.derbyTesting.junit.TestConfiguration;
1:c774a1c: 
1:c774a1c: //Extends AuthenticationTest.java which only holds DataSource calls.
1:c774a1c: //This class implements the checks for ConnectionPoolDataSources
1:c774a1c: public class PoolDSAuthenticationTest extends AuthenticationTest {
1:c774a1c: 
1:c774a1c:     /** Creates a new instance of the Test */
1:c774a1c:     public PoolDSAuthenticationTest(String name) {
1:c774a1c:         super(name);
26:c774a1c:     }
1:c774a1c: 
1:c774a1c:     public static Test suite() {
1:1b46090:         // This test uses ConnectionPoolDataSource and so is not suitable for 
1:1b46090:         // JSR169
1:c774a1c:         if (JDBC.vmSupportsJSR169())
1:1ae02c9:             return new BaseTestSuite("ConnectionPoolDataSource not available" +
1:c774a1c:                 " with JSR169; empty test");
1:c774a1c:         else {
1:1ae02c9:             BaseTestSuite suite =
1:1ae02c9:                 new BaseTestSuite("PoolDSAuthenticationTest");
1:1ae02c9: 
1:c774a1c:             suite.addTest(baseSuite("PoolDSAuthenticationTest:embedded"));
1:c774a1c:             suite.addTest(TestConfiguration.clientServerDecorator(baseSuite(
1:c774a1c:                 "PoolDSAuthenticationTest:client")));
1:c774a1c:             return suite;
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:1b46090:     // baseSuite takes advantage of setting system properties as defined
1:1b46090:     // in AuthenticationTest
1:c774a1c:     public static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("PoolDSAuthenticationTest");
1:c774a1c: 
1:c774a1c:         Test test = new PoolDSAuthenticationTest(
1:c774a1c:             "testConnectShutdownAuthentication");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c:         
1:c774a1c:         test = new PoolDSAuthenticationTest("testUserFunctions");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c: 
1:c774a1c:         test = new PoolDSAuthenticationTest("testNotFullAccessUsers");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c:         
1:c774a1c:         test = new PoolDSAuthenticationTest(
1:c774a1c:             "testChangePasswordAndDatabasePropertiesOnly");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c: 
1:c774a1c:         // only part of this fixture runs with network server / client
1:c774a1c:         test = new PoolDSAuthenticationTest("testGreekCharacters");
1:1b46090:         setBaseProps(suite, test);
1:c774a1c:         
1:1b46090:         test = new PoolDSAuthenticationTest("testSystemShutdown");
1:1b46090:         setBaseProps(suite, test);
1:1b46090: 
1:c774a1c:         // The test needs to run in a new single use database as we're
1:c774a1c:         // setting a number of properties
1:c774a1c:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:c774a1c:     }
1:1b46090: 
1:c774a1c:     protected void assertConnectionOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException
15:c774a1c:     {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
6:c774a1c:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:f178a86:         pds.getPooledConnection(user, password).close();
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertConnectionWOUPOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:c774a1c:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
5:c774a1c:         JDBCDataSource.setBeanProperty(pds, "user", user);
5:c774a1c:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:f178a86:         pds.getPooledConnection().close();
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertConnectionFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:c774a1c:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
17:c774a1c:         try {
7:c774a1c:             pds.getPooledConnection(user, password);
1:c774a1c:             fail("Connection should've been refused/failed");
1:c774a1c:         }
3:c774a1c:         catch (SQLException e) {
5:c774a1c:                 assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:c774a1c:     protected void assertConnectionWOUPFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password)
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:c774a1c:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:c774a1c:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:c774a1c:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:c774a1c:         try {
9:c774a1c:             pds.getPooledConnection();
1:c774a1c:             fail("Connection should've been refused/failed");
1:c774a1c:         }
1:c774a1c:         catch (SQLException e) {
1:c774a1c:                 assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:14ed86a:     protected void assertShutdownUsingSetShutdownOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection(user, password);
1:14ed86a:             fail ("expected a failed shutdown connection");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             // expect 08006 on successful shutdown
1:14ed86a:             assertSQLState("08006", e);
1:14ed86a:         }
1:c774a1c:     }
1:14ed86a:     
1:14ed86a:     protected void assertShutdownUsingConnAttrsOK(
1:14ed86a:         String dbName, String user, String password) throws SQLException {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.setBeanProperty(
1:14ed86a:             pds, "connectionAttributes", "shutdown=true");
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection(user, password);
1:14ed86a:             fail("expected shutdown to fail");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             // expect 08006 on successful shutdown
1:14ed86a:             assertSQLState("08006", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertShutdownWOUPOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase","shutdown");
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection();
1:14ed86a:             fail ("expected a failed shutdown connection");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             // expect 08006 on successful shutdown
1:14ed86a:             assertSQLState("08006", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertShutdownFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password) 
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection(user, password);
1:14ed86a:             fail("expected failed shutdown");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c:     
1:c774a1c:     protected void assertShutdownWOUPFail(
1:c774a1c:         String expectedSqlState, String dbName, String user, String password) 
1:c774a1c:     throws SQLException
1:c774a1c:     {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection();
1:14ed86a:             fail("expected failed shutdown");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             assertSQLState(expectedSqlState, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:14ed86a:     // using an empty dbName is interpreted as system shutdown
1:c774a1c:     protected void assertSystemShutdownOK(
1:c774a1c:         String dbName, String user, String password)
1:c774a1c:     throws SQLException {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection();
1:14ed86a:             fail("expected system shutdown resulting in XJ015 error");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             // expect XJ015, system shutdown, on successful shutdown
1:14ed86a:             assertSQLState("XJ015", e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     protected void assertSystemShutdownFail(
1:c774a1c:             String expectedError, String dbName, String user, String password)
1:c774a1c:     throws SQLException {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection();
1:14ed86a:             fail("expected shutdown to fail");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             assertSQLState(expectedError, e);
1:c774a1c:         }
1:c774a1c:     }
1:c774a1c: 
1:c774a1c:     public void assertConnectionFail(String dbName) throws SQLException {
1:f178a86:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:14ed86a:         // Reset to no user/password though client requires
1:14ed86a:         // a valid name, so reset to the default
1:c774a1c:         if (usingDerbyNetClient())
1:14ed86a:             JDBCDataSource.setBeanProperty(pds, "user", "APP");
1:14ed86a:         else
1:14ed86a:             JDBCDataSource.clearStringBeanProperty(pds, "user");
1:14ed86a:         JDBCDataSource.clearStringBeanProperty(pds, "password");
1:14ed86a:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:14ed86a:         try {
1:14ed86a:             pds.getPooledConnection();
1:14ed86a:             fail("expected connection to fail");
1:14ed86a:         } catch (SQLException e) {
1:14ed86a:             assertSQLState("08004", e);
1:1ae02c9:         }
1:c774a1c:     }
1:c774a1c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("ConnectionPoolDataSource not available" +
1:             BaseTestSuite suite =
1:                 new BaseTestSuite("PoolDSAuthenticationTest");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("PoolDSAuthenticationTest");
/////////////////////////////////////////////////////////////////////////
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f178a86
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:         pds.getPooledConnection(user, password).close();
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
1:         pds.getPooledConnection().close();
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource pds = J2EEDataSource.getConnectionPoolDataSource();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:14ed86a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected void assertShutdownUsingSetShutdownOK(
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:         try {
1:             pds.getPooledConnection(user, password);
1:             fail ("expected a failed shutdown connection");
1:         } catch (SQLException e) {
1:             // expect 08006 on successful shutdown
1:             assertSQLState("08006", e);
1:     }
1:     
1:     protected void assertShutdownUsingConnAttrsOK(
1:         String dbName, String user, String password) throws SQLException {
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(
1:             pds, "connectionAttributes", "shutdown=true");
1:         try {
1:             pds.getPooledConnection(user, password);
1:             fail("expected shutdown to fail");
1:         } catch (SQLException e) {
1:             // expect 08006 on successful shutdown
1:             assertSQLState("08006", e);
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase","shutdown");
1:         try {
1:             pds.getPooledConnection();
1:             fail ("expected a failed shutdown connection");
1:         } catch (SQLException e) {
1:             // expect 08006 on successful shutdown
1:             assertSQLState("08006", e);
/////////////////////////////////////////////////////////////////////////
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         try {
1:             pds.getPooledConnection(user, password);
1:             fail("expected failed shutdown");
1:         } catch (SQLException e) {
1:             assertSQLState(expectedSqlState, e);
/////////////////////////////////////////////////////////////////////////
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         try {
1:             pds.getPooledConnection();
1:             fail("expected failed shutdown");
1:         } catch (SQLException e) {
1:             assertSQLState(expectedSqlState, e);
1:     // using an empty dbName is interpreted as system shutdown
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
1:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:         try {
1:             pds.getPooledConnection();
1:             fail("expected system shutdown resulting in XJ015 error");
1:         } catch (SQLException e) {
1:             // expect XJ015, system shutdown, on successful shutdown
1:             assertSQLState("XJ015", e);
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:         try {
1:             pds.getPooledConnection();
1:             fail("expected shutdown to fail");
1:         } catch (SQLException e) {
1:             assertSQLState(expectedError, e);
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         // Reset to no user/password though client requires
1:         // a valid name, so reset to the default
1:             JDBCDataSource.setBeanProperty(pds, "user", "APP");
1:         else
1:             JDBCDataSource.clearStringBeanProperty(pds, "user");
1:         JDBCDataSource.clearStringBeanProperty(pds, "password");
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         try {
1:             pds.getPooledConnection();
1:             fail("expected connection to fail");
1:         } catch (SQLException e) {
1:             assertSQLState("08004", e);
commit:1b46090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // This test uses ConnectionPoolDataSource and so is not suitable for 
1:         // JSR169
/////////////////////////////////////////////////////////////////////////
1:     // baseSuite takes advantage of setting system properties as defined
1:     // in AuthenticationTest
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         setBaseProps(suite, test);
1:         test = new PoolDSAuthenticationTest("testSystemShutdown");
1:         setBaseProps(suite, test);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:             JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
/////////////////////////////////////////////////////////////////////////
0:             // current client/server code interprets shutdown with an
0:             // empty databaseName string as a system shutdown
0:             // Client does not support *ds*.setShutdown(), use set Conn Attrs 
/////////////////////////////////////////////////////////////////////////
0:             JDBCDataSource.clearStringBeanProperty(pds, "databaseName");
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
/////////////////////////////////////////////////////////////////////////
0:             // current client/server code interprets shutdown with an
0:             // empty databaseName string as a system shutdown
0:             pds.setDatabaseName(dbName);
0:             // Client does not support *ds*.setShutdown(), use set Conn Attrs 
commit:c774a1c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class 
1:    org.apache.derbyTesting.functionTests.tests.jdbcapi.ConnectionPoolDataSourceAuthenticationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.SQLException;
0: import java.util.Properties;
1: 
1: import javax.sql.ConnectionPoolDataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
0: import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: //Extends AuthenticationTest.java which only holds DataSource calls.
1: //This class implements the checks for ConnectionPoolDataSources
1: public class PoolDSAuthenticationTest extends AuthenticationTest {
1: 
0:     private static ConnectionPoolDataSource pds;
1:     /** Creates a new instance of the Test */
1:     public PoolDSAuthenticationTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
0:         // This test uses driverManager and so is not suitable for JSR169
1:         if (JDBC.vmSupportsJSR169())
0:             return new TestSuite("ConnectionPoolDataSource not available" +
1:                 " with JSR169; empty test");
1:         else {
0:             TestSuite suite = new TestSuite("PoolDSAuthenticationTest");
1:             suite.addTest(baseSuite("PoolDSAuthenticationTest:embedded"));
1:             suite.addTest(TestConfiguration.clientServerDecorator(baseSuite(
1:                 "PoolDSAuthenticationTest:client")));
1:             return suite;
1:         }
1:     }
1:     
1:     public static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite("PoolDSAuthenticationTest");
1: 
0:         // set a user at system level
0:         java.lang.System.setProperty("derby.user.system", "admin");
0:         java.lang.System.setProperty("derby.user.mickey", "mouse");
1:         
0:         // Use DatabasePropertyTestSetup decorator to set the user 
0:         // properties required by this test (and shutdown the database for
0:         // the property to take effect).
0:         Properties props = new Properties();
0:         props.setProperty("derby.infolog.append", "true");
0:         props.setProperty("derby.debug.true", "AuthenticationTrace");
1: 
1:         Test test = new PoolDSAuthenticationTest(
1:             "testConnectShutdownAuthentication");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:         
0:         // DatabasePropertyTestSsetup uses SYSCS_SET_DATABASE_PROPERTY
0:         // so that is database level setting.
1:         test = new PoolDSAuthenticationTest("testUserFunctions");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1: 
1:         test = new PoolDSAuthenticationTest("testNotFullAccessUsers");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:         
1:         test = new PoolDSAuthenticationTest(
1:             "testChangePasswordAndDatabasePropertiesOnly");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1: 
1:         // only part of this fixture runs with network server / client
1:         test = new PoolDSAuthenticationTest("testGreekCharacters");
0:         test = DatabasePropertyTestSetup.builtinAuthentication(test,
0:             USERS, PASSWORD_SUFFIX);
0:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:         
1:         // The test needs to run in a new single use database as we're
1:         // setting a number of properties
1:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:     }
1:     
1:     protected void assertConnectionOK(
1:         String dbName, String user, String password)
1:     throws SQLException
1:     {
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         try {
0:             assertNotNull(pds.getPooledConnection(user, password));
1:         }
1:         catch (SQLException e) {
0:                 throw e;
1:         }
1:     }
1: 
1:     protected void assertConnectionWOUPOK(
1:         String dbName, String user, String password)
1:     throws SQLException
1:     {
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:         try {
0:             assertNotNull(pds.getPooledConnection());
1:         }
1:         catch (SQLException e) {
0:                 throw e;
1:         }
1:     }
1: 
1:     protected void assertConnectionFail(
1:         String expectedSqlState, String dbName, String user, String password)
1:     throws SQLException
1:     {
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         try {
1:             pds.getPooledConnection(user, password);
1:             fail("Connection should've been refused/failed");
1:         }
1:         catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:         }
1:     }
1:     
1:     protected void assertConnectionWOUPFail(
1:         String expectedSqlState, String dbName, String user, String password)
1:     throws SQLException
1:     {
0:         pds = J2EEDataSource.getConnectionPoolDataSource();
1:         JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:         JDBCDataSource.setBeanProperty(pds, "user", user);
1:         JDBCDataSource.setBeanProperty(pds, "password", password);
1:         try {
1:             pds.getPooledConnection();
1:             fail("Connection should've been refused/failed");
1:         }
1:         catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:         }
1:     }
1:     
0:     protected void assertShutdownOK(
1:         String dbName, String user, String password)
1:     throws SQLException {
0:         if (usingEmbedded())
1:         {
0:             pds = J2EEDataSource.getConnectionPoolDataSource();
1:             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:             try {
1:                 pds.getPooledConnection(user, password);
0:                 fail ("expected a failed shutdown connection");
0:             } catch (SQLException e) {
0:                 // expect 08006 on successful shutdown
0:                 assertSQLState("08006", e);
1:             }
1:         }
0:         else if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
0:             pds.setDatabaseName(dbName);
0:             pds.setConnectionAttributes("shutdown=true");
1:             try {
1:                 pds.getPooledConnection(user, password);
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
0:                 // expect 08006 on successful shutdown
0:                 assertSQLState("08006", e);
1:             }
1:         }
1:     }
1: 
1:     protected void assertShutdownWOUPOK(
1:         String dbName, String user, String password)
1:     throws SQLException {
0:         if (usingEmbedded())
1:         {
0:             pds = J2EEDataSource.getConnectionPoolDataSource();
1:             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:             JDBCDataSource.setBeanProperty(pds, "user", user);
1:             JDBCDataSource.setBeanProperty(pds, "password", password);
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase","shutdown");
1:             try {
1:                 pds.getPooledConnection();
0:                 fail ("expected a failed shutdown connection");
0:             } catch (SQLException e) {
0:                 // expect 08006 on successful shutdown
0:                 assertSQLState("08006", e);
1:             }
1:         }
0:         else if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
0:             pds.setDatabaseName(dbName);
0:             pds.setConnectionAttributes(
0:                 "shutdown=true;user=" + user + ";password=" + password);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
0:                 // expect 08006 on successful shutdown
0:                 assertSQLState("08006", e);
1:             }
1:         }
1:     }
1: 
1:     protected void assertShutdownFail(
1:         String expectedSqlState, String dbName, String user, String password) 
1:     throws SQLException
1:     {
0:         if (usingEmbedded()) 
1:         {
0:             pds = J2EEDataSource.getConnectionPoolDataSource();
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:             try {
1:                 pds.getPooledConnection(user, password);
0:                 fail("expected failed shutdown");
0:             } catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:             }
1:         }
0:         else if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
0:             pds.setConnectionAttributes("shutdown=true");
0:             pds.setDatabaseName(dbName);
1:             try {
1:                 pds.getPooledConnection(user, password);
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:             }
1:         }
1:     }
1:     
1:     protected void assertShutdownWOUPFail(
1:         String expectedSqlState, String dbName, String user, String password) 
1:     throws SQLException
1:     {
0:         if (usingEmbedded()) 
1:         {
0:             pds = J2EEDataSource.getConnectionPoolDataSource();
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:             JDBCDataSource.setBeanProperty(pds, "user", user);
1:             JDBCDataSource.setBeanProperty(pds, "password", password);
1:             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected failed shutdown");
0:             } catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:             }
1:         }
0:         else if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
0:             pds.setDatabaseName(dbName);
0:             pds.setConnectionAttributes(
0:                     "shutdown=true;user=" + user + ";password=" + password);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
1:                 assertSQLState(expectedSqlState, e);
1:             }
1:         }
1:     }
1: 
1:     protected void assertSystemShutdownOK(
1:         String dbName, String user, String password)
1:     throws SQLException {
0:         if (usingEmbedded())
1:         {
0:             pds = J2EEDataSource.getConnectionPoolDataSource();
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase", "shutdown");
1:             JDBCDataSource.setBeanProperty(pds, "user", user);
1:             JDBCDataSource.setBeanProperty(pds, "password", password);
1:             JDBCDataSource.setBeanProperty(pds, "databaseName", dbName);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected system shutdown resulting in XJ015 error");
0:             } catch (SQLException e) {
0:                 // expect XJ015, system shutdown, on successful shutdown
0:                 assertSQLState("XJ015", e);
1:             }
1:         }
0:         else if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
0:             pds.setDatabaseName(dbName);
0:             pds.setConnectionAttributes(
0:                     "shutdown=true;user=" + user + ";password=" + password);
1:             try {
1:                 pds.getPooledConnection(user, password);
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
0:                 // expect XJ015 on successful shutdown
0:                 assertSQLState("XJ015", e);
1:             }
1:         }
1:     }
1: 
0:     // Note, we need a separate method for fail & OK because something
0:     // the framework will add the wrong details. If we use
0:     // getDataSource(dbName), we don't get a successful XJ015, ever,
0:     // if we use getDataSource(), it appears the user/password on connect
0:     // is ignored, at least, we get XJ015 anyway.
0:     // 
1:     protected void assertSystemShutdownFail(
1:             String expectedError, String dbName, String user, String password)
1:     throws SQLException {
0:         if (usingEmbedded())
1:         {
0:             pds = J2EEDataSource.getConnectionPoolDataSource();
0:             JDBCDataSource.setBeanProperty(pds, "shutdownDatabase","shutdown");
1:             JDBCDataSource.setBeanProperty(pds, "user", user);
1:             JDBCDataSource.setBeanProperty(pds, "password", password);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
0:                 assertSQLState(expectedError, e);
1:             }
1:         }
0:         else if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
0:             pds.setConnectionAttributes(
0:                     "shutdown=true;user=" + user + ";password=" + password);
1:             try {
1:                 pds.getPooledConnection(user, password);
0:                 fail("expected shutdown to fail");
0:             } catch (SQLException e) {
0:                 assertSQLState(expectedError, e);
1:             }
1:         }
1:     }
1: 
1:     public void assertConnectionFail(String dbName) throws SQLException {
0:         // can't rely on junit framework automatic methods for they'll
0:         // default the user / password which need to remain empty
1:         if (usingDerbyNetClient())
1:         {
0:             ClientConnectionPoolDataSource pds = 
0:                 new ClientConnectionPoolDataSource();
0:             pds.setDatabaseName(dbName);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected connection to fail");
0:             } catch (SQLException e) {
0:                 assertSQLState("08004", e);
1:             }
1:         }
0:         else if (usingEmbedded()) 
1:         {
0:             EmbeddedConnectionPoolDataSource pds = 
0:                 new EmbeddedConnectionPoolDataSource();
0:             pds.setDatabaseName(dbName);
1:             try {
1:                 pds.getPooledConnection();
0:                 fail("expected connection to fail");
0:             } catch (SQLException e) {
0:                 assertSQLState("08004", e);
1:             }
1:         }
1:     }
1: }
============================================================================