1:b73b045: /**
1:b73b045:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest
1:b73b045:  *  
1:b73b045:  * Licensed to the Apache Software Foundation (ASF) under one
1:b73b045:  * or more contributor license agreements.  See the NOTICE file
1:b73b045:  * distributed with this work for additional information
1:b73b045:  * regarding copyright ownership.  The ASF licenses this file
1:b73b045:  * to you under the Apache License, Version 2.0 (the
1:b73b045:  * "License"); you may not use this file except in compliance
1:b73b045:  * with the License.  You may obtain a copy of the License at
1:b73b045:  *
1:b73b045:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b73b045:  *
1:b73b045:  * Unless required by applicable law or agreed to in writing,
1:b73b045:  * software distributed under the License is distributed on an
1:b73b045:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b73b045:  * KIND, either express or implied.  See the License for the
1:b73b045:  * specific language governing permissions and limitations
1:b73b045:  * under the License.
1:b73b045:  */
3:b73b045: 
1:b73b045: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:b73b045: 
1:b73b045: import java.io.BufferedReader;
1:b73b045: import java.io.ByteArrayOutputStream;
1:b73b045: import java.io.File;
1:b73b045: import java.io.FileInputStream;
1:b73b045: import java.io.IOException;
1:b73b045: import java.io.InputStreamReader;
1:b73b045: import java.io.PrintStream;
1:b73b045: import java.sql.DatabaseMetaData;
1:b73b045: import java.sql.ResultSet;
1:b73b045: import java.sql.SQLException;
1:b73b045: import java.util.Locale;
1:b73b045: import junit.framework.Test;
1:b73b045: import org.apache.derby.drda.NetworkServerControl;
1:b73b045: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:b73b045: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:b73b045: import org.apache.derbyTesting.junit.Derby;
1:9d44c9e: import org.apache.derbyTesting.junit.LocaleTestSetup;
1:b73b045: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:b73b045: import org.apache.derbyTesting.junit.TestConfiguration;
1:b73b045: 
1:b73b045: /**
1:b73b045:  * Test the network server derby.drda.startNetworkServer property.
1:b73b045:  * 
1:b73b045:  * Test that:
1:b73b045:  * <ul>
1:b73b045: 
1:b73b045:  * <li> 1 ) The network server is not started when the property value is false.
1:b73b045:  * <li> 2 ) The network server is started when the property value is true, and
1:b73b045:  * <li>  a) uses the default port when the port property is not specified.
1:b73b045:  * <li>  b) uses a non-default port when a port number is specified
1:b73b045:  * <li>  c) uses an invalid port number (-1)
1:b73b045:  * <li> 3 ) A message is printed to derby.log when the server is 
1:b73b045:  *          already started.
1:b73b045:  * </ul>
1:b73b045:  */
1:b73b045: 
1:b73b045: public class DerbyNetAutoStartTest extends BaseJDBCTestCase {
1:b73b045: 
1:b73b045:     private Locale oldLocale = Locale.getDefault();
1:b73b045:     
1:b73b045:     public DerbyNetAutoStartTest(String name) {
1:b73b045:         super(name);
1:b73b045: 
8:b73b045:     }
1:b73b045: 
1:b73b045:     //args to helper method. With or without port
1:b73b045:     private static boolean WITHOUTPORT  = false;
1:b73b045:     private static boolean WITHPORT  = true;
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Do some steps to prepare for the test.
1:b73b045:      */
1:b73b045:     public void setUp() {
1:b73b045:         // make sure no network server is running
1:b73b045:         TestConfiguration.getCurrent().shutdownEngine();
1:b73b045:     }
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Test case 1
1:b73b045:      * Test that if derby.drda.startNetworkServer property is false
1:b73b045:      * that server does not come up.
1:b73b045:      * 
1:b73b045:      * @throws Exception
1:b73b045:      */
1:b73b045:     public void testStartNetworkServerFalse() throws Exception {
1:b73b045:         setSystemProperty("derby.drda.startNetworkServer", "false");         
1:b73b045:         // Boot with an embedded connection
1:b73b045:         // Should not start network server
1:b73b045:         getConnection();
1:b73b045:         NetworkServerControl ns = 
1:b73b045:                 NetworkServerTestSetup.getNetworkServerControl();
1:b73b045: 
1:b73b045:         // Verify the server is not up
1:b73b045:         assertFalse(NetworkServerTestSetup.pingForServerUp(ns,null, false));
1:b73b045:     }
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Test case 2a.
1:b73b045:      * Test setting derby.drda.startNetworkServer property without
1:b73b045:      * specifying anything in the port number property.
1:b73b045:      * Should start, using the default port.
1:b73b045:      * 
1:b73b045:      * To avoid possible conflict with other tests running concurrently,
1:b73b045:      * this test may only run if baseport is not set and we are 
1:d22ef84:      * using the default 1527 port.  This is accomplished by naming the
1:d22ef84:      * test starting with "ttest" vs "test", and then code in
1:d22ef84:      * baseSuite explitly runs test if can.
1:d22ef84:      *
1:b73b045:      * 
1:b73b045:      * @throws Exception
1:b73b045:      */
1:b73b045:     public void ttestStartNetworkServerTrueNoPort() throws Exception {
1:b73b045:         startNetworkServerTrueHelper(WITHOUTPORT);
1:b73b045:     }
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Test case 2b.
1:b73b045:      * Test setting derby.drda.startNetworkServer property
1:b73b045:      * and specifying a port number
1:b73b045:      * 
1:b73b045:      * @throws Exception
1:b73b045:      */
1:b73b045:     public void testStartNetworkServerTrueWithPort() throws Exception {
1:b73b045:         startNetworkServerTrueHelper(WITHPORT);
1:b73b045:     }
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Test case 2c.
1:b73b045:      * Test setting derby.drda.startNetworkServer property
1:b73b045:      * and specifying an invalid port number
1:b73b045:      * Should fail to start network server
1:b73b045:      * 
1:b73b045:      * @throws Exception
1:b73b045:      */
1:b73b045:     public void testStartNetworkServerTrueWithInvalidPort() throws Exception {
1:b73b045:         setSystemProperty("derby.drda.startNetworkServer", "true");
1:b73b045:         // Note that internally, portNumber -1 means 'no port number provided'
1:b73b045:         setSystemProperty("derby.drda.portNumber", "-1");
1:b73b045:         // Boot with an embedded connection
1:b73b045:         // Should not start network server
1:b73b045:         // But it still appears to find an embedded connection.
1:b73b045: 
1:b73b045:         // Check by attempting something on a connection
1:b73b045:         // This will currently print an InvocationException to the console
1:b73b045:         // Is it a bug that it will not print to derby.log?
1:b73b045:         // But, for now, capture the output and throw it away
1:b73b045:         final PrintStream realSystemOut = System.out;
1:b73b045:         final PrintStream realSystemErr = System.err;
1:b73b045:         ByteArrayOutputStream serverOutputBOS = new ByteArrayOutputStream();
1:b73b045:         final PrintStream serverOutputOut = new PrintStream( serverOutputBOS);
1:c393694:         setSystemOut(new PrintStream(serverOutputOut));
1:c393694:         setSystemErr(new PrintStream(serverOutputOut));
1:b73b045: 
1:b73b045:         try {
1:b73b045:             try
1:b73b045:             {
1:b73b045:                 // Network start fails, but we get an Embedded connection
1:b73b045:                 DatabaseMetaData dbmd = getConnection().getMetaData();
1:b73b045:                 ResultSet rs = dbmd.getSchemas();
1:b73b045:                 assertNotNull(rs);
1:b73b045:                 rs.close();
1:b73b045:             }
1:b73b045:             catch( SQLException e)
1:b73b045:             {
1:b73b045:                 fail();
1:b73b045:             }
1:b73b045:         } finally {
1:b73b045:             // Restore the original out streams
1:c393694:             setSystemOut(realSystemOut);
1:c393694:             setSystemErr(realSystemErr);
1:b73b045:         }
1:b73b045: 
1:b73b045:         // Verify the server - use default port - is not up
1:b73b045:         NetworkServerControl ns = 
1:b73b045:                 NetworkServerTestSetup.getNetworkServerControl();
1:b73b045:         assertFalse(NetworkServerTestSetup.pingForServerUp(ns,null, false));
1:b73b045:     }
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Helper method that actually starts the server.
1:b73b045:      *
1:b73b045:      * @param withport
1:b73b045:      * @throws Exception
1:b73b045:      */
1:b73b045:     private void startNetworkServerTrueHelper(boolean withport) 
1:b73b045:             throws Exception  {
1:b73b045:         int theport = withport ? 
1:b73b045:                 TestConfiguration.getCurrent().getNextAvailablePort() :
1:b73b045:                     TestConfiguration.getCurrent().getBasePort();
1:b73b045:                 
1:b73b045:         setSystemProperty("derby.drda.startNetworkServer", "true");
1:b73b045:         if (withport)
1:b73b045:         {
1:b73b045:             setSystemProperty("derby.drda.portNumber",
1:b73b045:                     Integer.toString(theport));
1:b73b045:         }
1:b73b045:         // Boot with an embedded connection
1:b73b045:         // Should start network server
1:b73b045:         getConnection();
1:b73b045: 
1:b73b045:         // Check the server is up and then bring it back down
1:b73b045:         NetworkServerControl ns = NetworkServerTestSetup
1:b73b045:                 .getNetworkServerControl(theport);
1:b73b045:         NetworkServerTestSetup.waitForServerStart(ns);
1:b73b045:         ns.shutdown();
1:b73b045:         assertFalse
1:b73b045:             (NetworkServerTestSetup.pingForServerUp(ns, null, false));
1:b73b045:     }
1:b73b045: 
1:b73b045:     /**
1:b73b045:      * Test case 3
1:b73b045:      * Test that if a network server is already running on 
1:b73b045:      * a certain port, starting the server after setting 
1:b73b045:      * derby.drda.startNetworkServer reflects an error message
1:b73b045:      * indicating the server is already in use.
1:b73b045:      * 
1:b73b045:      * To avoid possible conflict with other tests running concurrently,
1:b73b045:      * this test will also set derby.drda.portNumber.
1:b73b045:      * 
1:b73b045:      * @throws Exception
1:b73b045:      */
1:b73b045:     public void testStartNetworkServerLogMessageOnDualStart()
1:b73b045:             throws Exception {
1:b73b045:         // first force English locale
1:9d44c9e:         LocaleTestSetup.setDefaultLocale(Locale.ENGLISH);
1:b73b045:         int doubleport = TestConfiguration.getCurrent().getPort();
1:b73b045:         // start a network server
1:b73b045:         NetworkServerControl ns = 
1:b73b045:                 NetworkServerTestSetup.getNetworkServerControl(doubleport);
1:b73b045:         ns.start(null);
1:b73b045:         NetworkServerTestSetup.waitForServerStart(ns);
1:b73b045:         // shutdown to ensure getConnection reads the properties
1:b73b045:         TestConfiguration.getCurrent().shutdownEngine();
1:b73b045: 
1:b73b045:         setSystemProperty("derby.drda.startNetworkServer", "true");
1:b73b045:         setSystemProperty("derby.drda.portNumber",
1:b73b045:                 Integer.toString(doubleport));
1:b73b045:         // Boot with an embedded connection
1:b73b045:         // Should attempt to start network server
1:b73b045:         getConnection();
1:b73b045: 
1:b73b045:         // Check the server is still up
1:b73b045:         assertTrue(NetworkServerTestSetup.pingForServerUp(ns, null, true));
1:b73b045: 
1:b73b045:         String logFileName = 
1:b73b045:                 getSystemProperty("derby.system.home") + 
1:b73b045:                 File.separator + "derby.log";
1:b73b045:         // Give it a little time to write the message        
1:b73b045:         // There should be a warning in the derby.log file.
1:b73b045:         // With some JVMS there will be a java.net.BindException
1:b73b045:         // But always there will be the more generic message.
1:b73b045:         // Note that by checking on the generic message, we cannot
1:b73b045:         // distinguish the expected from any other exception.
1:b73b045:         String expectedString = 
1:b73b045:                 "An exception was thrown during network server startup";
1:b73b045:         final long startTime = System.currentTimeMillis();
1:b73b045:         final long waitTime = NetworkServerTestSetup.getWaitTime();
1:b73b045:         while (true)
1:b73b045:         {
1:b73b045:             Thread.sleep(1000);
1:b73b045:             if (checkLog( logFileName, new String[] {expectedString})){
1:b73b045:                 break;
1:b73b045:             }
1:b73b045:             long elapsed = System.currentTimeMillis() - startTime;
1:b73b045:             if (elapsed > waitTime) {
1:b73b045:                 fail("did not find the expected string: " + expectedString
1:b73b045:                         + " within the maximum wait time " + waitTime);
1:b73b045:             }
1:b73b045:         }
1:b73b045: 
1:b73b045:         assertTrue(checkLog( logFileName, new String[] {expectedString}));
1:b73b045:         
1:b73b045:         ns.shutdown();
1:b73b045:     }
1:b73b045: 
1:7f53212:     static boolean checkLog( String logFileName, String[] expected)
1:b73b045:             throws IOException
1:b73b045:     {
1:b73b045:         boolean allFound = true;
1:b73b045:         boolean[] found = new boolean[ expected.length];
1:b73b045:         FileInputStream is =
1:b73b045:                 PrivilegedFileOpsForTests
1:b73b045:                 .getFileInputStream(new File(logFileName));
1:b73b045:         BufferedReader br = new BufferedReader(new InputStreamReader(is));
1:b73b045:         String logLine; 
1:b73b045:         while((logLine = br.readLine()) != null)
1:b73b045:         {
1:b73b045:             // to print out derby.log, uncomment this line:
1:b73b045:             // System.out.println(logLine);
1:b73b045:             for( int i = 0; i < expected.length; i++)
1:b73b045:             {
1:7f53212:                 if( (! found[i]) && logLine.contains( expected[i])) {
1:b73b045:                     found[i] = true;
1:7f53212:                 }
1:b73b045:             }
1:b73b045:         }
1:b73b045:         for( int i = 0; i < expected.length; i++)
1:b73b045:         {
1:b73b045:             if( ! found[i])
1:b73b045:             {
1:b73b045:                 allFound = false;
1:b73b045:             }
1:b73b045:         }
1:7f53212:         br.close();
1:b73b045:         return allFound;
1:b73b045:     } // end of checkLog
1:b73b045: 
1:b73b045:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DerbyNetAutoStartTest");
1:b73b045:         suite.addTest(baseSuite("DerbyNetAutoStartTest:embedded"));
1:b73b045:         return suite;
1:b73b045:     }
1:b73b045: 
1:b73b045:     private static Test baseSuite(String name) {
1:b73b045: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:b73b045:         // Need derbynet.jar in the classpath, and cannot run with ME/JSR169/cdc profile
1:b73b045:         if (!Derby.hasServer())
1:b73b045:             return suite;
1:b73b045:         // Adds all tests that can run with baseport set or not.
1:b73b045:         suite.addTestSuite(DerbyNetAutoStartTest.class);
1:b73b045:         if (getSystemProperty("derby.tests.basePort") != null )
1:b73b045:         {
1:b73b045:             return suite;
1:b73b045:         }
1:b73b045:         // We assume, that if baseport is set, then the intention is that
1:b73b045:         // tests are run concurrently, so we cannot use the default port
1:b73b045:         // 1527. Lists tests that rely on/test the usage of that port here:
1:b73b045:         suite.addTest
1:b73b045:             (new DerbyNetAutoStartTest("ttestStartNetworkServerTrueNoPort"));
1:b73b045:         return suite;
1:b73b045:     }
1:b73b045: 
1:b73b045:     protected void tearDown() throws Exception {
1:b73b045:         // unset the system properties
1:b73b045:         removeSystemProperty("derby.drda.startNetworkServer");
1:b73b045:         removeSystemProperty("derby.drda.portNumber");
1:b73b045:         // set the old locale back to the original
1:9d44c9e:         LocaleTestSetup.setDefaultLocale(oldLocale);
1:b73b045:         oldLocale=null;
1:b73b045:         super.tearDown();
1:d22ef84:     }
1:b73b045: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7f53212
/////////////////////////////////////////////////////////////////////////
1:     static boolean checkLog( String logFileName, String[] expected)
/////////////////////////////////////////////////////////////////////////
1:                 if( (! found[i]) && logLine.contains( expected[i])) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         br.close();
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DerbyNetAutoStartTest");
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         setSystemOut(new PrintStream(serverOutputOut));
1:         setSystemErr(new PrintStream(serverOutputOut));
/////////////////////////////////////////////////////////////////////////
1:             setSystemOut(realSystemOut);
1:             setSystemErr(realSystemErr);
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.LocaleTestSetup;
/////////////////////////////////////////////////////////////////////////
0:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
0:             public Void run() {
/////////////////////////////////////////////////////////////////////////
0:             AccessController.doPrivileged(new PrivilegedAction<Void>() {
0:                 public Void run() {
/////////////////////////////////////////////////////////////////////////
1:         LocaleTestSetup.setDefaultLocale(Locale.ENGLISH);
/////////////////////////////////////////////////////////////////////////
1:         LocaleTestSetup.setDefaultLocale(oldLocale);
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d22ef84
/////////////////////////////////////////////////////////////////////////
1:      * using the default 1527 port.  This is accomplished by naming the
1:      * test starting with "ttest" vs "test", and then code in
1:      * baseSuite explitly runs test if can.
1:      *
/////////////////////////////////////////////////////////////////////////
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:b73b045
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.BufferedReader;
1: import java.io.ByteArrayOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.io.PrintStream;
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Locale;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.Derby;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test the network server derby.drda.startNetworkServer property.
1:  * 
1:  * Test that:
1:  * <ul>
1: 
1:  * <li> 1 ) The network server is not started when the property value is false.
1:  * <li> 2 ) The network server is started when the property value is true, and
1:  * <li>  a) uses the default port when the port property is not specified.
1:  * <li>  b) uses a non-default port when a port number is specified
1:  * <li>  c) uses an invalid port number (-1)
1:  * <li> 3 ) A message is printed to derby.log when the server is 
1:  *          already started.
1:  * </ul>
1:  */
1: 
1: public class DerbyNetAutoStartTest extends BaseJDBCTestCase {
1: 
1:     private Locale oldLocale = Locale.getDefault();
1:     
1:     public DerbyNetAutoStartTest(String name) {
1:         super(name);
1: 
1:     }
1: 
1:     //args to helper method. With or without port
1:     private static boolean WITHOUTPORT  = false;
1:     private static boolean WITHPORT  = true;
1: 
1:     /**
1:      * Do some steps to prepare for the test.
1:      */
1:     public void setUp() {
1:         // make sure no network server is running
1:         TestConfiguration.getCurrent().shutdownEngine();
1:     }
1: 
1:     /**
1:      * Test case 1
1:      * Test that if derby.drda.startNetworkServer property is false
1:      * that server does not come up.
1:      * 
1:      * @throws Exception
1:      */
1:     public void testStartNetworkServerFalse() throws Exception {
1:         setSystemProperty("derby.drda.startNetworkServer", "false");         
1:         // Boot with an embedded connection
1:         // Should not start network server
1:         getConnection();
1:         NetworkServerControl ns = 
1:                 NetworkServerTestSetup.getNetworkServerControl();
1: 
1:         // Verify the server is not up
1:         assertFalse(NetworkServerTestSetup.pingForServerUp(ns,null, false));
1:     }
1: 
1:     /**
1:      * Test case 2a.
1:      * Test setting derby.drda.startNetworkServer property without
1:      * specifying anything in the port number property.
1:      * Should start, using the default port.
1:      * 
1:      * To avoid possible conflict with other tests running concurrently,
1:      * this test may only run if baseport is not set and we are 
0:      * using the default 1527 port
1:      * 
1:      * @throws Exception
1:      */
1:     public void ttestStartNetworkServerTrueNoPort() throws Exception {
1:         startNetworkServerTrueHelper(WITHOUTPORT);
1:     }
1: 
1:     /**
1:      * Test case 2b.
1:      * Test setting derby.drda.startNetworkServer property
1:      * and specifying a port number
1:      * 
1:      * @throws Exception
1:      */
1:     public void testStartNetworkServerTrueWithPort() throws Exception {
1:         startNetworkServerTrueHelper(WITHPORT);
1:     }
1: 
1:     /**
1:      * Test case 2c.
1:      * Test setting derby.drda.startNetworkServer property
1:      * and specifying an invalid port number
1:      * Should fail to start network server
1:      * 
1:      * @throws Exception
1:      */
1:     public void testStartNetworkServerTrueWithInvalidPort() throws Exception {
1:         setSystemProperty("derby.drda.startNetworkServer", "true");
1:         // Note that internally, portNumber -1 means 'no port number provided'
1:         setSystemProperty("derby.drda.portNumber", "-1");
1:         // Boot with an embedded connection
1:         // Should not start network server
1:         // But it still appears to find an embedded connection.
1: 
1:         // Check by attempting something on a connection
1:         // This will currently print an InvocationException to the console
1:         // Is it a bug that it will not print to derby.log?
1:         // But, for now, capture the output and throw it away
1:         final PrintStream realSystemOut = System.out;
1:         final PrintStream realSystemErr = System.err;
1:         ByteArrayOutputStream serverOutputBOS = new ByteArrayOutputStream();
1:         final PrintStream serverOutputOut = new PrintStream( serverOutputBOS);
0:         AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
0:                 System.setOut(new PrintStream(serverOutputOut));
0:                 System.setErr(new PrintStream(serverOutputOut));
0:                 return null;
1:             }
0:         });
1: 
1:         try {
1:             try
1:             {
1:                 // Network start fails, but we get an Embedded connection
1:                 DatabaseMetaData dbmd = getConnection().getMetaData();
1:                 ResultSet rs = dbmd.getSchemas();
1:                 assertNotNull(rs);
1:                 rs.close();
1:             }
1:             catch( SQLException e)
1:             {
1:                 fail();
1:             }
1:         } finally {
1:             // Restore the original out streams
0:             AccessController.doPrivileged(new PrivilegedAction() {
0:                 public Object run() {
0:                     System.setOut(realSystemOut);
0:                     System.setErr(realSystemErr);
0:                     return null;
1:                 }
0:             });
1:         }
1: 
1:         // Verify the server - use default port - is not up
1:         NetworkServerControl ns = 
1:                 NetworkServerTestSetup.getNetworkServerControl();
1:         assertFalse(NetworkServerTestSetup.pingForServerUp(ns,null, false));
1:     }
1: 
1:     /**
1:      * Helper method that actually starts the server.
1:      *
1:      * @param withport
1:      * @throws Exception
1:      */
1:     private void startNetworkServerTrueHelper(boolean withport) 
1:             throws Exception  {
1:         int theport = withport ? 
1:                 TestConfiguration.getCurrent().getNextAvailablePort() :
1:                     TestConfiguration.getCurrent().getBasePort();
1:                 
1:         setSystemProperty("derby.drda.startNetworkServer", "true");
1:         if (withport)
1:         {
1:             setSystemProperty("derby.drda.portNumber",
1:                     Integer.toString(theport));
1:         }
1:         // Boot with an embedded connection
1:         // Should start network server
1:         getConnection();
1: 
1:         // Check the server is up and then bring it back down
1:         NetworkServerControl ns = NetworkServerTestSetup
1:                 .getNetworkServerControl(theport);
1:         NetworkServerTestSetup.waitForServerStart(ns);
1:         ns.shutdown();
1:         assertFalse
1:             (NetworkServerTestSetup.pingForServerUp(ns, null, false));
1:     }
1: 
1:     /**
1:      * Test case 3
1:      * Test that if a network server is already running on 
1:      * a certain port, starting the server after setting 
1:      * derby.drda.startNetworkServer reflects an error message
1:      * indicating the server is already in use.
1:      * 
1:      * To avoid possible conflict with other tests running concurrently,
1:      * this test will also set derby.drda.portNumber.
1:      * 
1:      * @throws Exception
1:      */
1:     public void testStartNetworkServerLogMessageOnDualStart()
1:             throws Exception {
0:         final Locale newLocale = Locale.ENGLISH;
1:         // first force English locale
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 Locale.setDefault(newLocale);
0:                 return null;
1:             }
1:         }
0:         );
1:         int doubleport = TestConfiguration.getCurrent().getPort();
1:         // start a network server
1:         NetworkServerControl ns = 
1:                 NetworkServerTestSetup.getNetworkServerControl(doubleport);
1:         ns.start(null);
1:         NetworkServerTestSetup.waitForServerStart(ns);
1:         // shutdown to ensure getConnection reads the properties
1:         TestConfiguration.getCurrent().shutdownEngine();
1: 
1:         setSystemProperty("derby.drda.startNetworkServer", "true");
1:         setSystemProperty("derby.drda.portNumber",
1:                 Integer.toString(doubleport));
1:         // Boot with an embedded connection
1:         // Should attempt to start network server
1:         getConnection();
1: 
1:         // Check the server is still up
1:         assertTrue(NetworkServerTestSetup.pingForServerUp(ns, null, true));
1: 
1:         String logFileName = 
1:                 getSystemProperty("derby.system.home") + 
1:                 File.separator + "derby.log";
1:         // Give it a little time to write the message        
1:         // There should be a warning in the derby.log file.
1:         // With some JVMS there will be a java.net.BindException
1:         // But always there will be the more generic message.
1:         // Note that by checking on the generic message, we cannot
1:         // distinguish the expected from any other exception.
1:         String expectedString = 
1:                 "An exception was thrown during network server startup";
1:         final long startTime = System.currentTimeMillis();
1:         final long waitTime = NetworkServerTestSetup.getWaitTime();
1:         while (true)
1:         {
1:             Thread.sleep(1000);
1:             if (checkLog( logFileName, new String[] {expectedString})){
1:                 break;
1:             }
1:             long elapsed = System.currentTimeMillis() - startTime;
1:             if (elapsed > waitTime) {
1:                 fail("did not find the expected string: " + expectedString
1:                         + " within the maximum wait time " + waitTime);
1:             }
1:         }
1: 
1:         assertTrue(checkLog( logFileName, new String[] {expectedString}));
1:         
1:         ns.shutdown();
1:     }
1: 
0:     private static boolean checkLog( String logFileName, String[] expected)
1:             throws IOException
1:     {
1:         boolean allFound = true;
1:         boolean[] found = new boolean[ expected.length];
1:         FileInputStream is =
1:                 PrivilegedFileOpsForTests
1:                 .getFileInputStream(new File(logFileName));
1:         BufferedReader br = new BufferedReader(new InputStreamReader(is));
1:         String logLine; 
1:         while((logLine = br.readLine()) != null)
1:         {
1:             // to print out derby.log, uncomment this line:
1:             // System.out.println(logLine);
1:             for( int i = 0; i < expected.length; i++)
1:             {
0:                 if( (! found[i]) && logLine.indexOf( expected[i]) >= 0)
1:                     found[i] = true;
1:             }
1:         }
1:         for( int i = 0; i < expected.length; i++)
1:         {
1:             if( ! found[i])
1:             {
1:                 allFound = false;
1:             }
1:         }
1:         return allFound;
1:     } // end of checkLog
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("DerbyNetAutoStartTest");
1:         suite.addTest(baseSuite("DerbyNetAutoStartTest:embedded"));
1:         return suite;
1:     }
1: 
1:     private static Test baseSuite(String name) {
1: 
0:         TestSuite suite = new TestSuite(name);
1:         // Need derbynet.jar in the classpath, and cannot run with ME/JSR169/cdc profile
1:         if (!Derby.hasServer())
1:             return suite;
1:         // Adds all tests that can run with baseport set or not.
1:         suite.addTestSuite(DerbyNetAutoStartTest.class);
1:         if (getSystemProperty("derby.tests.basePort") != null )
1:         {
1:             return suite;
1:         }
1:         // We assume, that if baseport is set, then the intention is that
1:         // tests are run concurrently, so we cannot use the default port
1:         // 1527. Lists tests that rely on/test the usage of that port here:
1:         suite.addTest
1:             (new DerbyNetAutoStartTest("ttestStartNetworkServerTrueNoPort"));
1:         return suite;
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         // unset the system properties
1:         removeSystemProperty("derby.drda.startNetworkServer");
1:         removeSystemProperty("derby.drda.portNumber");
1:         // set the old locale back to the original
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 Locale.setDefault(oldLocale);
0:                 return null;
1:             }
1:         }
0:         );
1:         oldLocale=null;
1:         super.tearDown();
1:     }
1: }
============================================================================