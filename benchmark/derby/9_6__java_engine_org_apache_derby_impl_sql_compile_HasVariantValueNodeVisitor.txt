1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitable; 
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Find out if we have a value node with variant type less than what the
1:eac0369:  * caller desires, anywhere below us.  Stop traversal as soon as we find one.
1:eac0369:  * This is used in two places: one to check the values clause of an insert
1:eac0369:  * statement; i.e 
1:eac0369:  * <pre>
1:eac0369:  * insert into <table> values (?, 1, foobar());
1:eac0369:  * </pre>
1:eac0369:  * If all the expressions in the values clause are QUERY_INVARIANT (and an
1:eac0369:  * exception is made for parameters) then we can cache the results in the
1:eac0369:  * RowResultNode. This is useful when we have a prepared insert statement which
1:eac0369:  * is repeatedly executed.
1:eac0369:  * <p>
1:eac0369:  * The second place where this is used is to check if a subquery can be
1:eac0369:  * materialized or not. 
1:eac0369:  * @see org.apache.derby.iapi.store.access.Qualifier 
1:eac0369:  *
1:eac0369:  */
1:3bb140c: class HasVariantValueNodeVisitor implements Visitor
1:eac0369: {
1:eac0369: 	private boolean hasVariant;
1:eac0369: 	private int variantType;
1:eac0369: 	private boolean ignoreParameters;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a visitor
1:eac0369: 	 */
1:3bb140c:     HasVariantValueNodeVisitor()
1:eac0369: 	{
1:eac0369: 		this.variantType = Qualifier.VARIANT;
1:eac0369: 		this.ignoreParameters = false;
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(Qualifier.VARIANT < Qualifier.SCAN_INVARIANT, "qualifier constants not ordered as expected");
1:eac0369: 			SanityManager.ASSERT(Qualifier.SCAN_INVARIANT < Qualifier.QUERY_INVARIANT, "qualifier constants not ordered as expected");
1:eac0369: 		}		
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Construct a visitor.  Pass in the variant
1:eac0369: 	 * type.  We look for nodes that are less
1:eac0369: 	 * than or equal to this variant type.  E.g.,
1:eac0369: 	 * if the variantType is Qualifier.SCAN_VARIANT,
1:eac0369: 	 * then any node that is either VARIANT or
1:eac0369: 	 * SCAN_VARIANT will cause the visitor to 
1:eac0369: 	 * consider it variant.
1:eac0369: 	 *
1:eac0369: 	 * @param variantType the type of variance we consider
1:eac0369: 	 *		variant
1:6b50965: 	 * @param ignoreParameters should I ignore parameter nodes?
1:eac0369:  	 */
1:3bb140c:     HasVariantValueNodeVisitor(int variantType, boolean ignoreParameters)
1:eac0369: 	{
1:eac0369: 		this.variantType = variantType;
1:eac0369: 		this.ignoreParameters = ignoreParameters;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(variantType >= Qualifier.VARIANT, "bad variantType");
1:eac0369: 			// note: there is no point in (variantType == Qualifier.CONSTANT) so throw an
1:eac0369: 			// exception for that case too
1:eac0369: 			SanityManager.ASSERT(variantType <= Qualifier.QUERY_INVARIANT, "bad variantType");
1:eac0369: 		}		
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// VISITOR INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If we have found the target node, we are done.
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 *
1:eac0369: 	 * @return me
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public Visitable visit(Visitable node) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (node instanceof ValueNode)
1:eac0369: 		{
1:d5bc20f: 			if (ignoreParameters && ((ValueNode)node).requiresTypeFromContext())
1:eac0369: 				return node;
1:eac0369: 				
1:eac0369: 			if (((ValueNode)node).getOrderableVariantType() <= variantType)
1:eac0369: 			{
1:eac0369: 				hasVariant = true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return node;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean skipChildren(Visitable node)
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:dd2f5a8: 	}
1:dd2f5a8: 
1:eac0369: 	/**
1:eac0369: 	 * Stop traversal if we found the target node
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	public boolean stopTraversal()
1:eac0369: 	{
1:eac0369: 		return hasVariant;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CLASS INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Indicate whether we found the node in
1:eac0369: 	 * question
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:3bb140c:     boolean hasVariant()
1:eac0369: 	{
1:eac0369: 		return hasVariant;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1: class HasVariantValueNodeVisitor implements Visitor
/////////////////////////////////////////////////////////////////////////
1:     HasVariantValueNodeVisitor()
/////////////////////////////////////////////////////////////////////////
1:     HasVariantValueNodeVisitor(int variantType, boolean ignoreParameters)
/////////////////////////////////////////////////////////////////////////
1:     boolean hasVariant()
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param ignoreParameters should I ignore parameter nodes?
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 			if (ignoreParameters && ((ValueNode)node).requiresTypeFromContext())
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.Visitable; 
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Find out if we have a value node with variant type less than what the
1:  * caller desires, anywhere below us.  Stop traversal as soon as we find one.
1:  * This is used in two places: one to check the values clause of an insert
1:  * statement; i.e 
1:  * <pre>
1:  * insert into <table> values (?, 1, foobar());
1:  * </pre>
1:  * If all the expressions in the values clause are QUERY_INVARIANT (and an
1:  * exception is made for parameters) then we can cache the results in the
1:  * RowResultNode. This is useful when we have a prepared insert statement which
1:  * is repeatedly executed.
1:  * <p>
1:  * The second place where this is used is to check if a subquery can be
1:  * materialized or not. 
1:  * @see org.apache.derby.iapi.store.access.Qualifier 
1:  *
0:  * @author jamie
1:  */
0: public class HasVariantValueNodeVisitor implements Visitor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private boolean hasVariant;
1: 	private int variantType;
1: 	private boolean ignoreParameters;
1: 
1: 
1: 	/**
1: 	 * Construct a visitor
1: 	 */
0: 	public HasVariantValueNodeVisitor()
1: 	{
1: 		this.variantType = Qualifier.VARIANT;
1: 		this.ignoreParameters = false;
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(Qualifier.VARIANT < Qualifier.SCAN_INVARIANT, "qualifier constants not ordered as expected");
1: 			SanityManager.ASSERT(Qualifier.SCAN_INVARIANT < Qualifier.QUERY_INVARIANT, "qualifier constants not ordered as expected");
1: 		}		
1: 	}
1: 
1: 	
1: 	/**
1: 	 * Construct a visitor.  Pass in the variant
1: 	 * type.  We look for nodes that are less
1: 	 * than or equal to this variant type.  E.g.,
1: 	 * if the variantType is Qualifier.SCAN_VARIANT,
1: 	 * then any node that is either VARIANT or
1: 	 * SCAN_VARIANT will cause the visitor to 
1: 	 * consider it variant.
1: 	 *
1: 	 * @param variantType the type of variance we consider
1: 	 *		variant
0: 	 * @param skipParameter should I ignore parameter nodes?
1:  	 */
0: 	public HasVariantValueNodeVisitor(int variantType, boolean ignoreParameters)
1: 	{
1: 		this.variantType = variantType;
1: 		this.ignoreParameters = ignoreParameters;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(variantType >= Qualifier.VARIANT, "bad variantType");
1: 			// note: there is no point in (variantType == Qualifier.CONSTANT) so throw an
1: 			// exception for that case too
1: 			SanityManager.ASSERT(variantType <= Qualifier.QUERY_INVARIANT, "bad variantType");
1: 		}		
1: 	}
1: 	
1: 	////////////////////////////////////////////////
1: 	//
1: 	// VISITOR INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * If we have found the target node, we are done.
1: 	 *
1: 	 * @param node 	the node to process
1: 	 *
1: 	 * @return me
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public Visitable visit(Visitable node) throws StandardException
1: 	{
1: 		if (node instanceof ValueNode)
1: 		{
0: 			if (ignoreParameters && ((ValueNode)node).isParameterNode())
1: 				return node;
1: 				
1: 			if (((ValueNode)node).getOrderableVariantType() <= variantType)
1: 			{
1: 				hasVariant = true;
1: 			}
1: 		}
1: 		return node;
1: 	}
1: 
1: 	public boolean skipChildren(Visitable node)
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Stop traversal if we found the target node
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean stopTraversal()
1: 	{
1: 		return hasVariant;
1: 	}
1: 
1: 	////////////////////////////////////////////////
1: 	//
1: 	// CLASS INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 	/**
1: 	 * Indicate whether we found the node in
1: 	 * question
1: 	 *
1: 	 * @return true/false
1: 	 */
0: 	public boolean hasVariant()
1: 	{
1: 		return hasVariant;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.Visitable; 
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: 
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * Find out if we have a value node with variant type less than what the
0:  * caller desires, anywhere below us.  Stop traversal as soon as we find one.
0:  * This is used in two places: one to check the values clause of an insert
0:  * statement; i.e 
0:  * <pre>
0:  * insert into <table> values (?, 1, foobar());
0:  * </pre>
0:  * If all the expressions in the values clause are QUERY_INVARIANT (and an
0:  * exception is made for parameters) then we can cache the results in the
0:  * RowResultNode. This is useful when we have a prepared insert statement which
0:  * is repeatedly executed.
0:  * <p>
0:  * The second place where this is used is to check if a subquery can be
0:  * materialized or not. 
0:  * @see org.apache.derby.iapi.store.access.Qualifier 
0:  *
0:  * @author jamie
0:  */
0: public class HasVariantValueNodeVisitor implements Visitor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private boolean hasVariant;
0: 	private int variantType;
0: 	private boolean ignoreParameters;
0: 
0: 
0: 	/**
0: 	 * Construct a visitor
0: 	 */
0: 	public HasVariantValueNodeVisitor()
0: 	{
0: 		this.variantType = Qualifier.VARIANT;
0: 		this.ignoreParameters = false;
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(Qualifier.VARIANT < Qualifier.SCAN_INVARIANT, "qualifier constants not ordered as expected");
0: 			SanityManager.ASSERT(Qualifier.SCAN_INVARIANT < Qualifier.QUERY_INVARIANT, "qualifier constants not ordered as expected");
0: 		}		
0: 	}
0: 
0: 	
0: 	/**
0: 	 * Construct a visitor.  Pass in the variant
0: 	 * type.  We look for nodes that are less
0: 	 * than or equal to this variant type.  E.g.,
0: 	 * if the variantType is Qualifier.SCAN_VARIANT,
0: 	 * then any node that is either VARIANT or
0: 	 * SCAN_VARIANT will cause the visitor to 
0: 	 * consider it variant.
0: 	 *
0: 	 * @param variantType the type of variance we consider
0: 	 *		variant
0: 	 * @param skipParameter should I ignore parameter nodes?
0:  	 */
0: 	public HasVariantValueNodeVisitor(int variantType, boolean ignoreParameters)
0: 	{
0: 		this.variantType = variantType;
0: 		this.ignoreParameters = ignoreParameters;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(variantType >= Qualifier.VARIANT, "bad variantType");
0: 			// note: there is no point in (variantType == Qualifier.CONSTANT) so throw an
0: 			// exception for that case too
0: 			SanityManager.ASSERT(variantType <= Qualifier.QUERY_INVARIANT, "bad variantType");
0: 		}		
0: 	}
0: 	
0: 	////////////////////////////////////////////////
0: 	//
0: 	// VISITOR INTERFACE
0: 	//
0: 	////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * If we have found the target node, we are done.
0: 	 *
0: 	 * @param node 	the node to process
0: 	 *
0: 	 * @return me
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public Visitable visit(Visitable node) throws StandardException
0: 	{
0: 		if (node instanceof ValueNode)
0: 		{
0: 			if (ignoreParameters && ((ValueNode)node).isParameterNode())
0: 				return node;
0: 				
0: 			if (((ValueNode)node).getOrderableVariantType() <= variantType)
0: 			{
0: 				hasVariant = true;
0: 			}
0: 		}
0: 		return node;
0: 	}
0: 
0: 	public boolean skipChildren(Visitable node)
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Stop traversal if we found the target node
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean stopTraversal()
0: 	{
0: 		return hasVariant;
0: 	}
0: 
0: 	////////////////////////////////////////////////
0: 	//
0: 	// CLASS INTERFACE
0: 	//
0: 	////////////////////////////////////////////////
0: 	/**
0: 	 * Indicate whether we found the node in
0: 	 * question
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean hasVariant()
0: 	{
0: 		return hasVariant;
0: 	}
0: }
============================================================================