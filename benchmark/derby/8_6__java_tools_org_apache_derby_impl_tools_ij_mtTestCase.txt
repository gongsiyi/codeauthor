1:fe77ca5: /*
1:985fc85: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.mtTestCase
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
1:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import java.util.Hashtable;
1:fe77ca5: import java.util.Properties;
1:fe77ca5: import java.lang.Math;
1:fe77ca5: import java.io.FileNotFoundException;
1:fe77ca5: import java.io.BufferedInputStream;
1:fe77ca5: 
1:fe77ca5: import java.io.FileInputStream;
1:fe77ca5: import java.io.IOException;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.*;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  */
1:fe77ca5: public class mtTestCase
1:fe77ca5: {
1:fe77ca5: 	public String name = null;
1:fe77ca5: 	public String file = null;
1:fe77ca5: 	public String propFile = null;
1:fe77ca5: 	public float weight = (float).5;
1:fe77ca5: 	public Hashtable ignoreErrors = null;
1:fe77ca5: 	public String description = null;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	private int iterations;
1:fe77ca5: 	private int attempts;
1:fe77ca5: 
1:fe77ca5: 	public void mtTestCase()
1:fe77ca5: 	{ };
1:fe77ca5: 
1:fe77ca5: 	public void setName(String name)
1:fe77ca5: 	{
1:fe77ca5: 		this.name = name;
1:fe77ca5: 	}
1:fe77ca5: 	public String getName()
1:fe77ca5: 	{
1:fe77ca5: 		return name;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void setFile(String name)
1:fe77ca5: 	{
1:fe77ca5: 		this.file = name;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void setInputDir(String dir)
1:fe77ca5: 	{
1:fe77ca5: 		file = dir + "/" + file;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public String getFile()
1:fe77ca5: 	{
1:fe77ca5: 		return file;
1:fe77ca5: 	}
1:fe77ca5: 	
1:fe77ca5: 	public void setPropFile(String name)
1:fe77ca5: 	{
1:fe77ca5: 		this.propFile = name;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public String getPropFile()
1:fe77ca5: 	{
1:fe77ca5: 		return propFile;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void setWeight(int weight)
1:fe77ca5: 	{
1:fe77ca5: 		this.weight = (float)(weight/100.0);
1:fe77ca5: 	}
1:fe77ca5: 	
1:fe77ca5: 	public void setIgnoreErrors(Hashtable t)
1:fe77ca5: 	{
1:fe77ca5: 		this.ignoreErrors = t;
1:fe77ca5: 	}
1:fe77ca5: 	
1:fe77ca5: 	public void setDescription(String description)
1:fe77ca5: 	{
1:fe77ca5: 		this.description = description;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** Initialize the test case.  See initialize(String)
1:fe77ca5: 	*/
1:fe77ca5: 	public synchronized BufferedInputStream initialize() 
1:fe77ca5: 			throws FileNotFoundException, IOException
1:fe77ca5: 	{
1:fe77ca5: 		return initialize(null);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** Initizalize the test case.  Loads up the properties
1:fe77ca5: 	** file and sets the input stream.  Used to set up
1:fe77ca5: 	** prior to running the thread.
1:fe77ca5: 	*/
1:fe77ca5: 	public synchronized BufferedInputStream initialize(String inputDir) 
1:fe77ca5: 			throws FileNotFoundException, IOException
1:fe77ca5: 	{
1:fe77ca5: 		String filePath; 
1:fe77ca5: 		BufferedInputStream	inStream = null;
1:fe77ca5: 
1:fe77ca5: 		// load up properties
1:fe77ca5: 		if (propFile != null)
1:fe77ca5: 		{	
1:fe77ca5: 			BufferedInputStream	propStream;
1:fe77ca5: 			Properties		p;
1:fe77ca5: 			String propPath = (inputDir == null) ?
1:fe77ca5: 						propFile : 
1:fe77ca5: 				(inputDir + "/" + propFile);
1:fe77ca5: 			
1:fe77ca5: 			try 
1:fe77ca5: 			{
1:fe77ca5: 				propStream = new BufferedInputStream(new FileInputStream(propPath));
1:fe77ca5: 			} catch (FileNotFoundException e)
1:fe77ca5: 			{
1:fe77ca5: 				System.out.println(name+": unable to find properties file "+propPath);
1:fe77ca5: 				throw e;
1:fe77ca5: 			}
1:fe77ca5: 
1:fe77ca5: 			p = System.getProperties();
1:fe77ca5: 			p.load(propStream);
1:fe77ca5: 			// for network server need to alter url
1:fe77ca5: 			String framework = p.getProperty("framework");
1:fe77ca5: 			
1:0bbfdac: 			if (framework != null)
1:fe77ca5:             {
1:0bbfdac:                 String newURLPrefix = null;
1:0bbfdac:                 framework = framework.toUpperCase(java.util.Locale.ENGLISH);
1:0bbfdac:                 if (framework.equals("DB2JNET") || framework.equals("DERBYNET"))
1:0bbfdac:                     newURLPrefix= "jdbc:derby:net://localhost:1527/";
1:0bbfdac:                 else if (framework.equals("DERBYNETCLIENT"))
1:0bbfdac:                     newURLPrefix= "jdbc:derby://localhost:1527/";
1:0bbfdac:                 if (newURLPrefix != null)
1:0bbfdac:                 {
1:fe77ca5:                     updateURLProperties(p,newURLPrefix);
1:fe77ca5:                     p.setProperty("ij.user","APP");
1:fe77ca5:                     p.setProperty("ij.password","PWD");
1:fe77ca5:                 }
1:0bbfdac: 			}
1:5436674:             // this is a special case for the MultiTest.
1:5436674:             // check and alter url if there are any encryption related 
1:5436674:             // properties that need to be set on the url 
1:5436674:             if (("true").equalsIgnoreCase(p.getProperty("encryption"))) 
1:0bbfdac:             {
1:5436674:                String encryptUrl = "dataEncryption=true;bootPassword=Thursday";
1:e200256:                String dbUrl = p.getProperty("ij.database");
1:5436674:                String encryptionAlgorithm = p.getProperty("encryptionAlgorithm");
1:5436674:                if (encryptionAlgorithm != null)
4:5436674:                {
1:5436674:                    p.setProperty(
1:e200256:                        "ij.database",
1:5436674:                        dbUrl + ";" + encryptUrl + ";" + encryptionAlgorithm);
2:5436674:                }
1:5436674:                else
1:5436674:                {
1:e200256:                    p.setProperty("ij.database",dbUrl + ";"+encryptUrl);
1:5436674:                }
1:5436674:             }
1:fe77ca5:             
1:88e3d5f: 			// If the initial connection is being specified as a DataSource
1:88e3d5f: 			// on the command line using -Dij.dataSource=<dsclassname>
1:88e3d5f: 			// then remove the ij.database and ij.protocol property.
1:88e3d5f:             // This is because the ij.database and ij.protocol 
1:88e3d5f:             // will override the ij.dataSource property.
1:88e3d5f: 			if (System.getProperty("ij.dataSource") != null)
1:88e3d5f: 			{
1:88e3d5f: 				p.remove("ij.database");
1:88e3d5f: 				p.remove("ij.protocol");
1:88e3d5f: 			}
1:88e3d5f:             
1:fe77ca5: 			System.setProperties(p);
1:fe77ca5: 		}
1:fe77ca5: 		// set input stream
1:fe77ca5: 		filePath = (inputDir == null) ?
1:fe77ca5: 						file : (inputDir + "/" + file);
1:fe77ca5: 
1:fe77ca5: 		try 
1:fe77ca5: 		{
1:fe77ca5: 			inStream = new BufferedInputStream(new FileInputStream(filePath), 
1:fe77ca5: 							utilMain.BUFFEREDFILESIZE);		
1:fe77ca5: 		} catch (FileNotFoundException e)
1:fe77ca5: 		{
1:fe77ca5: 			System.out.println("unable to find properties file "+filePath);
1:fe77ca5: 			throw e;
1:fe77ca5: 		}
1:fe77ca5: 		return inStream;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** Attempt to grab this test case.  
1:fe77ca5: 	** Uses random number and the weight of this
1:fe77ca5: 	** case to determine if the grab was successful.
1:fe77ca5: 	** 
1:fe77ca5: 	** @return true/false
1:fe77ca5: 	*/
1:fe77ca5: 	public synchronized boolean grab()
1:fe77ca5: 	{
1:fe77ca5: 		attempts++;
1:fe77ca5: 		if (java.lang.Math.random() < weight)
1:fe77ca5: 		{
1:fe77ca5: 			iterations++;
1:fe77ca5: 			return true;
1:fe77ca5: 		}
1:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			return false;
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** Run the test case.  Invokes IJ to do our
1:fe77ca5: 	** dirty work.
1:fe77ca5: 	*/
1:fe77ca5: 	public void runMe(LocalizedOutput log, LocalizedOutput out, BufferedInputStream infile)
1:fe77ca5: 	{
1:fe77ca5: 		utilMain	utilInstance;
1:fe77ca5:         LocalizedInput is;
1:fe77ca5:         is = LocalizedResource.getInstance().getNewInput(infile);
1:fe77ca5: 
1:fe77ca5: 		LocalizedInput [] in = { is };
1:fe77ca5: 	
1:fe77ca5: 		out.println("--------------"+file+"-----------------");
1:fe77ca5: 		utilInstance = new utilMain(1, out, ignoreErrors);
1:351dad8: 		utilInstance.initFromEnvironment();
1:fe77ca5: 		utilInstance.setMtUse(true);
1:1b0debd: 		utilInstance.go(in, out);
1:fe77ca5: 		log.flush();
1:fe77ca5: 		out.flush();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void updateURLProperties(Properties p, String newURLPrefix)
1:fe77ca5: 	{
1:fe77ca5: 		String[] propsToUpdate = {"ij.database", "ij.protocol",
1:fe77ca5: 								  "database"};
1:fe77ca5: 		for (int i = 0; i < propsToUpdate.length; i++)
1:fe77ca5: 		{
1:fe77ca5: 			String key = propsToUpdate[i];
1:fe77ca5: 			String val = p.getProperty(key);
1:fe77ca5: 			if (val != null)
1:fe77ca5: 				p.setProperty(key,alterURL(val,newURLPrefix));
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	public String alterURL(String url, String newURLPrefix)
1:fe77ca5: 	{
1:fe77ca5: 		String urlPrefix = "jdbc:derby:";
1:fe77ca5: 	
1:fe77ca5: 		if (url.startsWith(newURLPrefix))
1:fe77ca5: 			return url;
1:fe77ca5: 
1:fe77ca5: 		// If we don't have a URL prefix for this framework
1:fe77ca5: 		// just return
1:fe77ca5: 		if (newURLPrefix == null)
1:fe77ca5: 			return url;
1:fe77ca5: 	
1:fe77ca5: 		if (url.equals(urlPrefix)) // Replace embedded
1:fe77ca5: 			return newURLPrefix;
1:fe77ca5: 
1:fe77ca5: 		if (url.startsWith(urlPrefix))
1:fe77ca5: 		{
1:fe77ca5: 			// replace jdbc:derby: with our url:
1:fe77ca5: 			url = newURLPrefix +
1:fe77ca5: 				url.substring(urlPrefix.length());
1:fe77ca5: 
1:fe77ca5: 		}
1:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			if (! (url.startsWith("jdbc:")))
1:fe77ca5: 	    {
1:fe77ca5: 			url = newURLPrefix + url;
1:fe77ca5: 	    }
1:fe77ca5: 		}
1:fe77ca5: 		//System.out.println("New url:" +url);
1:fe77ca5: 		return url;
1:fe77ca5:     }
1:fe77ca5:   
1:fe77ca5: 
1:fe77ca5: // NOTE: tried invoking ij directly, but had some problems,
1:fe77ca5: // so stick with calling utilMain().	
1:fe77ca5: //	/**
1:fe77ca5: //	** Run the test case.  Invokes IJ to do our
1:fe77ca5: //	** dirty work.
1:fe77ca5: //	*/
1:fe77ca5: //	public void runMe(AppStreamWriter log, AppStreamWriter out, BufferedInputStream infile)
1:fe77ca5: //	{
1:fe77ca5: //		ASCII_UCodeESC_CharStream charStream;
1:fe77ca5: //		ijTokenManager	ijTokMgr;
1:fe77ca5: //		ij	ijParser;
1:fe77ca5: //	
1:fe77ca5: //		
1:fe77ca5: //		out.println("--------------"+file+"-----------------");
1:fe77ca5: //		charStream = new ASCII_UCodeESC_CharStream(in, 1, 1);
1:fe77ca5: //		ijTokMgr = new ijTokenManager(charStream);
1:fe77ca5: //		ijParser = new ij(ijTokMgr, System.out, this);
1:fe77ca5: //		log.flush();
1:fe77ca5: //		out.flush();
1:fe77ca5: //	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** Name says it all
1:fe77ca5: 	*/
1:fe77ca5: 	public String toString()
1:fe77ca5: 	{
1:fe77ca5: 		return "name: "+name+
1:fe77ca5: 				"\n\tfile: "+file+
1:fe77ca5: 				"\n\tproperties: "+propFile+
1:fe77ca5: 				"\n\tweight: "+weight+
1:fe77ca5: 				"\n\tignoreErrors: "+ignoreErrors+
1:fe77ca5: 				"\n\tdescription: "+description;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	
1:fe77ca5: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:1b0debd
/////////////////////////////////////////////////////////////////////////
1: 		utilInstance.go(in, out);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:351dad8
/////////////////////////////////////////////////////////////////////////
1: 		utilInstance.initFromEnvironment();
commit:43e6994
/////////////////////////////////////////////////////////////////////////
0: 		utilInstance.initConnections();
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.mtTestCase
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import java.util.Hashtable;
1: import java.util.Properties;
1: import java.lang.Math;
1: import java.io.FileNotFoundException;
1: import java.io.BufferedInputStream;
1: 
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: 
1: import org.apache.derby.iapi.tools.i18n.*;
1: 
1: /**
1:  */
1: public class mtTestCase
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	public String name = null;
1: 	public String file = null;
1: 	public String propFile = null;
1: 	public float weight = (float).5;
1: 	public Hashtable ignoreErrors = null;
1: 	public String description = null;
1: 
1: 
1: 	private int iterations;
1: 	private int attempts;
1: 
1: 	public void mtTestCase()
1: 	{ };
1: 
1: 	public void setName(String name)
1: 	{
1: 		this.name = name;
1: 	}
1: 	public String getName()
1: 	{
1: 		return name;
1: 	}
1: 
1: 	public void setFile(String name)
1: 	{
1: 		this.file = name;
1: 	}
1: 
1: 	public void setInputDir(String dir)
1: 	{
1: 		file = dir + "/" + file;
1: 	}
1: 
1: 	public String getFile()
1: 	{
1: 		return file;
1: 	}
1: 	
1: 	public void setPropFile(String name)
1: 	{
1: 		this.propFile = name;
1: 	}
1: 
1: 	public String getPropFile()
1: 	{
1: 		return propFile;
1: 	}
1: 
1: 	public void setWeight(int weight)
1: 	{
1: 		this.weight = (float)(weight/100.0);
1: 	}
1: 	
1: 	public void setIgnoreErrors(Hashtable t)
1: 	{
1: 		this.ignoreErrors = t;
1: 	}
1: 	
1: 	public void setDescription(String description)
1: 	{
1: 		this.description = description;
1: 	}
1: 
1: 	/**
1: 	** Initialize the test case.  See initialize(String)
1: 	*/
1: 	public synchronized BufferedInputStream initialize() 
1: 			throws FileNotFoundException, IOException
1: 	{
1: 		return initialize(null);
1: 	}
1: 
1: 	/**
1: 	** Initizalize the test case.  Loads up the properties
1: 	** file and sets the input stream.  Used to set up
1: 	** prior to running the thread.
1: 	*/
1: 	public synchronized BufferedInputStream initialize(String inputDir) 
1: 			throws FileNotFoundException, IOException
1: 	{
1: 		String filePath; 
1: 		BufferedInputStream	inStream = null;
1: 
1: 		// load up properties
1: 		if (propFile != null)
1: 		{	
1: 			BufferedInputStream	propStream;
1: 			Properties		p;
1: 			String propPath = (inputDir == null) ?
1: 						propFile : 
1: 				(inputDir + "/" + propFile);
1: 			
1: 			try 
1: 			{
1: 				propStream = new BufferedInputStream(new FileInputStream(propPath));
1: 			} catch (FileNotFoundException e)
1: 			{
1: 				System.out.println(name+": unable to find properties file "+propPath);
1: 				throw e;
1: 			}
1: 
1: 			p = System.getProperties();
1: 			p.load(propStream);
1: 			// for network server need to alter url
1: 			String framework = p.getProperty("framework");
1: 			
0: 			if (framework != null && framework.equals("DB2jNet"))
1: 			{
0: 				String newURLPrefix= "jdbc:derby:net://localhost:1527/";
1: 				updateURLProperties(p,newURLPrefix);
1: 				p.setProperty("ij.user","APP");
1: 				p.setProperty("ij.password","PWD");
1: 			}
1: 			System.setProperties(p);
1: 		}
1: 		// set input stream
1: 		filePath = (inputDir == null) ?
1: 						file : (inputDir + "/" + file);
1: 
1: 		try 
1: 		{
1: 			inStream = new BufferedInputStream(new FileInputStream(filePath), 
1: 							utilMain.BUFFEREDFILESIZE);		
1: 		} catch (FileNotFoundException e)
1: 		{
1: 			System.out.println("unable to find properties file "+filePath);
1: 			throw e;
1: 		}
1: 		return inStream;
1: 	}
1: 
1: 	/**
1: 	** Attempt to grab this test case.  
1: 	** Uses random number and the weight of this
1: 	** case to determine if the grab was successful.
1: 	** 
1: 	** @return true/false
1: 	*/
1: 	public synchronized boolean grab()
1: 	{
1: 		attempts++;
1: 		if (java.lang.Math.random() < weight)
1: 		{
1: 			iterations++;
1: 			return true;
1: 		}
1: 		else
1: 		{
1: 			return false;
1: 		}
1: 	}
1: 
1: 	/**
1: 	** Run the test case.  Invokes IJ to do our
1: 	** dirty work.
1: 	*/
1: 	public void runMe(LocalizedOutput log, LocalizedOutput out, BufferedInputStream infile)
1: 	{
1: 		utilMain	utilInstance;
1:         LocalizedInput is;
1:         is = LocalizedResource.getInstance().getNewInput(infile);
1: 
1: 		LocalizedInput [] in = { is };
1: 	
1: 		out.println("--------------"+file+"-----------------");
1: 		utilInstance = new utilMain(1, out, ignoreErrors);
1: 		utilInstance.setMtUse(true);
0: 		utilInstance.go(in, out, (java.util.Properties) null);
1: 		log.flush();
1: 		out.flush();
1: 	}
1: 
1: 	public void updateURLProperties(Properties p, String newURLPrefix)
1: 	{
1: 		String[] propsToUpdate = {"ij.database", "ij.protocol",
1: 								  "database"};
1: 		for (int i = 0; i < propsToUpdate.length; i++)
1: 		{
1: 			String key = propsToUpdate[i];
1: 			String val = p.getProperty(key);
1: 			if (val != null)
1: 				p.setProperty(key,alterURL(val,newURLPrefix));
1: 		}
1: 	}
1: 
1: 
1: 	public String alterURL(String url, String newURLPrefix)
1: 	{
1: 		String urlPrefix = "jdbc:derby:";
1: 	
1: 		if (url.startsWith(newURLPrefix))
1: 			return url;
1: 
1: 		// If we don't have a URL prefix for this framework
1: 		// just return
1: 		if (newURLPrefix == null)
1: 			return url;
1: 	
1: 		if (url.equals(urlPrefix)) // Replace embedded
1: 			return newURLPrefix;
1: 
1: 		if (url.startsWith(urlPrefix))
1: 		{
1: 			// replace jdbc:derby: with our url:
1: 			url = newURLPrefix +
1: 				url.substring(urlPrefix.length());
1: 
1: 		}
1: 		else
1: 		{
1: 			if (! (url.startsWith("jdbc:")))
1: 	    {
1: 			url = newURLPrefix + url;
1: 	    }
1: 		}
1: 		//System.out.println("New url:" +url);
1: 		return url;
1:     }
1:   
1: 
1: // NOTE: tried invoking ij directly, but had some problems,
1: // so stick with calling utilMain().	
1: //	/**
1: //	** Run the test case.  Invokes IJ to do our
1: //	** dirty work.
1: //	*/
1: //	public void runMe(AppStreamWriter log, AppStreamWriter out, BufferedInputStream infile)
1: //	{
1: //		ASCII_UCodeESC_CharStream charStream;
1: //		ijTokenManager	ijTokMgr;
1: //		ij	ijParser;
1: //	
1: //		
1: //		out.println("--------------"+file+"-----------------");
1: //		charStream = new ASCII_UCodeESC_CharStream(in, 1, 1);
1: //		ijTokMgr = new ijTokenManager(charStream);
1: //		ijParser = new ij(ijTokMgr, System.out, this);
1: //		log.flush();
1: //		out.flush();
1: //	}
1: 
1: 	/**
1: 	** Name says it all
1: 	*/
1: 	public String toString()
1: 	{
1: 		return "name: "+name+
1: 				"\n\tfile: "+file+
1: 				"\n\tproperties: "+propFile+
1: 				"\n\tweight: "+weight+
1: 				"\n\tignoreErrors: "+ignoreErrors+
1: 				"\n\tdescription: "+description;
1: 	}
1: 
1: 	
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:e200256
/////////////////////////////////////////////////////////////////////////
1:                String dbUrl = p.getProperty("ij.database");
1:                        "ij.database",
1:                    p.setProperty("ij.database",dbUrl + ";"+encryptUrl);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:88e3d5f
/////////////////////////////////////////////////////////////////////////
1: 			// If the initial connection is being specified as a DataSource
1: 			// on the command line using -Dij.dataSource=<dsclassname>
1: 			// then remove the ij.database and ij.protocol property.
1:             // This is because the ij.database and ij.protocol 
1:             // will override the ij.dataSource property.
1: 			if (System.getProperty("ij.dataSource") != null)
1: 			{
1: 				p.remove("ij.database");
1: 				p.remove("ij.protocol");
1: 			}
1:             
commit:0bbfdac
/////////////////////////////////////////////////////////////////////////
1: 			if (framework != null)
1: 				{
1: 					String newURLPrefix = null;
1: 					framework = framework.toUpperCase(java.util.Locale.ENGLISH);
1: 					if (framework.equals("DB2JNET") || framework.equals("DERBYNET"))
1: 						newURLPrefix= "jdbc:derby:net://localhost:1527/";
1: 					else if (framework.equals("DERBYNETCLIENT"))
1: 						newURLPrefix= "jdbc:derby://localhost:1527/";
1: 					if (newURLPrefix != null)
1: 					{
0: 						updateURLProperties(p,newURLPrefix);
0: 						p.setProperty("ij.user","APP");
0: 						p.setProperty("ij.password","PWD");
1: 					}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:5436674
/////////////////////////////////////////////////////////////////////////
1:             {
0:                 String newURLPrefix = null;
0:                 framework = framework.toUpperCase(java.util.Locale.ENGLISH);
0:                 if (framework.equals("DB2JNET") || framework.equals("DERBYNET"))
0:                     newURLPrefix= "jdbc:derby:net://localhost:1527/";
0:                 else if (framework.equals("DERBYNETCLIENT"))
0:                     newURLPrefix= "jdbc:derby://localhost:1527/";
0:                 if (newURLPrefix != null)
1:                 {
0:                     updateURLProperties(p,newURLPrefix);
0:                     p.setProperty("ij.user","APP");
0:                     p.setProperty("ij.password","PWD");
1:                 }
1:             // this is a special case for the MultiTest.
1:             // check and alter url if there are any encryption related 
1:             // properties that need to be set on the url 
1:             if (("true").equalsIgnoreCase(p.getProperty("encryption"))) 
1:             {
1:                String encryptUrl = "dataEncryption=true;bootPassword=Thursday";
0:                String dbUrl = p.getProperty("database");
1:                String encryptionAlgorithm = p.getProperty("encryptionAlgorithm");
1:                if (encryptionAlgorithm != null)
1:                {
1:                    p.setProperty(
0:                        "database",
1:                        dbUrl + ";" + encryptUrl + ";" + encryptionAlgorithm);
1:                }
1:                else
1:                {
0:                    p.setProperty("database",dbUrl + ";"+encryptUrl);
1:                }
1:             }
0:             
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import java.util.Hashtable;
0: import java.util.Properties;
0: import java.lang.Math;
0: import java.io.FileNotFoundException;
0: import java.io.BufferedInputStream;
0: 
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: 
0: import org.apache.derby.iapi.tools.i18n.*;
0: 
0: /**
0:  */
0: public class mtTestCase
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	public String name = null;
0: 	public String file = null;
0: 	public String propFile = null;
0: 	public float weight = (float).5;
0: 	public Hashtable ignoreErrors = null;
0: 	public String description = null;
0: 
0: 
0: 	private int iterations;
0: 	private int attempts;
0: 
0: 	public void mtTestCase()
0: 	{ };
0: 
0: 	public void setName(String name)
0: 	{
0: 		this.name = name;
0: 	}
0: 	public String getName()
0: 	{
0: 		return name;
0: 	}
0: 
0: 	public void setFile(String name)
0: 	{
0: 		this.file = name;
0: 	}
0: 
0: 	public void setInputDir(String dir)
0: 	{
0: 		file = dir + "/" + file;
0: 	}
0: 
0: 	public String getFile()
0: 	{
0: 		return file;
0: 	}
0: 	
0: 	public void setPropFile(String name)
0: 	{
0: 		this.propFile = name;
0: 	}
0: 
0: 	public String getPropFile()
0: 	{
0: 		return propFile;
0: 	}
0: 
0: 	public void setWeight(int weight)
0: 	{
0: 		this.weight = (float)(weight/100.0);
0: 	}
0: 	
0: 	public void setIgnoreErrors(Hashtable t)
0: 	{
0: 		this.ignoreErrors = t;
0: 	}
0: 	
0: 	public void setDescription(String description)
0: 	{
0: 		this.description = description;
0: 	}
0: 
0: 	/**
0: 	** Initialize the test case.  See initialize(String)
0: 	*/
0: 	public synchronized BufferedInputStream initialize() 
0: 			throws FileNotFoundException, IOException
0: 	{
0: 		return initialize(null);
0: 	}
0: 
0: 	/**
0: 	** Initizalize the test case.  Loads up the properties
0: 	** file and sets the input stream.  Used to set up
0: 	** prior to running the thread.
0: 	*/
0: 	public synchronized BufferedInputStream initialize(String inputDir) 
0: 			throws FileNotFoundException, IOException
0: 	{
0: 		String filePath; 
0: 		BufferedInputStream	inStream = null;
0: 
0: 		// load up properties
0: 		if (propFile != null)
0: 		{	
0: 			BufferedInputStream	propStream;
0: 			Properties		p;
0: 			String propPath = (inputDir == null) ?
0: 						propFile : 
0: 				(inputDir + "/" + propFile);
0: 			
0: 			try 
0: 			{
0: 				propStream = new BufferedInputStream(new FileInputStream(propPath));
0: 			} catch (FileNotFoundException e)
0: 			{
0: 				System.out.println(name+": unable to find properties file "+propPath);
0: 				throw e;
0: 			}
0: 
0: 			p = System.getProperties();
0: 			p.load(propStream);
0: 			// for network server need to alter url
0: 			String framework = p.getProperty("framework");
0: 			
0: 			if (framework != null && framework.equals("DB2jNet"))
0: 			{
0: 				String newURLPrefix= "jdbc:derby:net://localhost:1527/";
0: 				updateURLProperties(p,newURLPrefix);
0: 				p.setProperty("ij.user","APP");
0: 				p.setProperty("ij.password","PWD");
0: 			}
0: 			System.setProperties(p);
0: 		}
0: 		// set input stream
0: 		filePath = (inputDir == null) ?
0: 						file : (inputDir + "/" + file);
0: 
0: 		try 
0: 		{
0: 			inStream = new BufferedInputStream(new FileInputStream(filePath), 
0: 							utilMain.BUFFEREDFILESIZE);		
0: 		} catch (FileNotFoundException e)
0: 		{
0: 			System.out.println("unable to find properties file "+filePath);
0: 			throw e;
0: 		}
0: 		return inStream;
0: 	}
0: 
0: 	/**
0: 	** Attempt to grab this test case.  
0: 	** Uses random number and the weight of this
0: 	** case to determine if the grab was successful.
0: 	** 
0: 	** @return true/false
0: 	*/
0: 	public synchronized boolean grab()
0: 	{
0: 		attempts++;
0: 		if (java.lang.Math.random() < weight)
0: 		{
0: 			iterations++;
0: 			return true;
0: 		}
0: 		else
0: 		{
0: 			return false;
0: 		}
0: 	}
0: 
0: 	/**
0: 	** Run the test case.  Invokes IJ to do our
0: 	** dirty work.
0: 	*/
0: 	public void runMe(LocalizedOutput log, LocalizedOutput out, BufferedInputStream infile)
0: 	{
0: 		utilMain	utilInstance;
0:         LocalizedInput is;
0:         is = LocalizedResource.getInstance().getNewInput(infile);
0: 
0: 		LocalizedInput [] in = { is };
0: 	
0: 		out.println("--------------"+file+"-----------------");
0: 		utilInstance = new utilMain(1, out, ignoreErrors);
0: 		utilInstance.setMtUse(true);
0: 		utilInstance.go(in, out, (java.util.Properties) null);
0: 		log.flush();
0: 		out.flush();
0: 	}
0: 
0: 	public void updateURLProperties(Properties p, String newURLPrefix)
0: 	{
0: 		String[] propsToUpdate = {"ij.database", "ij.protocol",
0: 								  "database"};
0: 		for (int i = 0; i < propsToUpdate.length; i++)
0: 		{
0: 			String key = propsToUpdate[i];
0: 			String val = p.getProperty(key);
0: 			if (val != null)
0: 				p.setProperty(key,alterURL(val,newURLPrefix));
0: 		}
0: 	}
0: 
0: 
0: 	public String alterURL(String url, String newURLPrefix)
0: 	{
0: 		String urlPrefix = "jdbc:derby:";
0: 	
0: 		if (url.startsWith(newURLPrefix))
0: 			return url;
0: 
0: 		// If we don't have a URL prefix for this framework
0: 		// just return
0: 		if (newURLPrefix == null)
0: 			return url;
0: 	
0: 		if (url.equals(urlPrefix)) // Replace embedded
0: 			return newURLPrefix;
0: 
0: 		if (url.startsWith(urlPrefix))
0: 		{
0: 			// replace jdbc:derby: with our url:
0: 			url = newURLPrefix +
0: 				url.substring(urlPrefix.length());
0: 
0: 		}
0: 		else
0: 		{
0: 			if (! (url.startsWith("jdbc:")))
0: 	    {
0: 			url = newURLPrefix + url;
0: 	    }
0: 		}
0: 		//System.out.println("New url:" +url);
0: 		return url;
0:     }
0:   
0: 
0: // NOTE: tried invoking ij directly, but had some problems,
0: // so stick with calling utilMain().	
0: //	/**
0: //	** Run the test case.  Invokes IJ to do our
0: //	** dirty work.
0: //	*/
0: //	public void runMe(AppStreamWriter log, AppStreamWriter out, BufferedInputStream infile)
0: //	{
0: //		ASCII_UCodeESC_CharStream charStream;
0: //		ijTokenManager	ijTokMgr;
0: //		ij	ijParser;
0: //	
0: //		
0: //		out.println("--------------"+file+"-----------------");
0: //		charStream = new ASCII_UCodeESC_CharStream(in, 1, 1);
0: //		ijTokMgr = new ijTokenManager(charStream);
0: //		ijParser = new ij(ijTokMgr, System.out, this);
0: //		log.flush();
0: //		out.flush();
0: //	}
0: 
0: 	/**
0: 	** Name says it all
0: 	*/
0: 	public String toString()
0: 	{
0: 		return "name: "+name+
0: 				"\n\tfile: "+file+
0: 				"\n\tproperties: "+propFile+
0: 				"\n\tweight: "+weight+
0: 				"\n\tignoreErrors: "+ignoreErrors+
0: 				"\n\tdescription: "+description;
0: 	}
0: 
0: 	
0: }
============================================================================