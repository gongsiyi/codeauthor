1:c3bf4ea: /*
2:c3bf4ea: 
1:c3bf4ea:  Derby - Class org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup
1:c3bf4ea: 
1:c3bf4ea:  Licensed to the Apache Software Foundation (ASF) under one or more
1:c3bf4ea:  contributor license agreements.  See the NOTICE file distributed with
1:c3bf4ea:  this work for additional information regarding copyright ownership.
1:c3bf4ea:  The ASF licenses this file to You under the Apache License, Version 2.0
1:c3bf4ea:  (the "License"); you may not use this file except in compliance with
1:c3bf4ea:  the License.  You may obtain a copy of the License at
1:c3bf4ea: 
1:c3bf4ea:  http://www.apache.org/licenses/LICENSE-2.0
1:c3bf4ea: 
1:c3bf4ea:  Unless required by applicable law or agreed to in writing, software
1:c3bf4ea:  distributed under the License is distributed on an "AS IS" BASIS,
1:c3bf4ea:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3bf4ea:  See the License for the specific language governing permissions and
1:c3bf4ea:  limitations under the License.
1:c3bf4ea: 
1:c3bf4ea:  */
1:c3bf4ea: package org.apache.derbyTesting.perf.basic.jdbc;
1:c3bf4ea: 
1:876391e: import java.io.IOException;
1:c3bf4ea: import java.sql.Connection;
1:c3bf4ea: import java.sql.Statement;
1:c3bf4ea: import java.sql.PreparedStatement;
1:c3bf4ea: import java.sql.SQLException;
1:c3bf4ea: import junit.framework.Test;
1:c3bf4ea: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:c3bf4ea: 
1:c3bf4ea: /**
1:c3bf4ea:  * TestSetup decorator to load the schema that is used for some of the
1:c3bf4ea:  * performance tests.
1:c3bf4ea:  * Schema includes:
1:c3bf4ea:  * Table: is  9 column table (100bytes)  - 5 columns of type int, 4 columns of char(20)")
1:c3bf4ea:  * data distribution - { column 1 has unique values,column 2 is set to 2,
1:c3bf4ea:  * column 3 has 1 % of rows with same value, column 4 is set to 2,
1:c3bf4ea:  * column 5 has unique values, column 6 is set to a constant value,
1:c3bf4ea:  *  column 7 has 1% of rows with known pattern,
1:c3bf4ea:  * column 8 has constant value,column 9 has values having the same suffix.
1:876391e:  * One of the constructors allows the data type of the last four columns to be
1:876391e:  * changed to CHAR(20) FOR BIT DATA.
1:876391e:  *
1:c3bf4ea:  * Connection props :  autocommit - false, default isolation level- Read Committed.
1:c3bf4ea:  *
1:c3bf4ea:  * If any indexes have to be created or any other schema additions need to be made, then
1:c3bf4ea:  * the decorateSQL() method needs to be overriden.
1:c3bf4ea:  */
1:c3bf4ea: public class BaseLoad100TestSetup extends CleanDatabaseTestSetup {
1:c3bf4ea: 
1:c3bf4ea:     protected int rowsToLoad=10000;
1:c3bf4ea:     protected String tableName = "BASELOAD100";
1:876391e:     private boolean binaryData;
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      *
1:c3bf4ea:      * @param test
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100TestSetup(Test test) {
1:c3bf4ea:         super(test);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @param test name of test
1:c3bf4ea:      * @param rowsToLoad number of rows to insert
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100TestSetup(Test test, int rowsToLoad)
1:c3bf4ea:     {
1:c3bf4ea:         super(test);
1:c3bf4ea:         this.rowsToLoad=rowsToLoad;
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @param test name of the test
1:c3bf4ea:      * @param tableName name of the table to insert the rows into
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100TestSetup(Test test, String tableName)
1:c3bf4ea:     {
1:c3bf4ea:         super(test);
1:c3bf4ea:         this.tableName = tableName;
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @param test name of test
1:c3bf4ea:      * @param rowsToLoad number of rows to insert
1:c3bf4ea:      * @param tableName name of the table to insert the rows into
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100TestSetup(Test test,int rowsToLoad, String tableName)
1:c3bf4ea:     {
1:876391e:         this(test, rowsToLoad, tableName, false);
1:876391e:     }
1:876391e: 
1:876391e:     /**
1:876391e:      * @param test name of test
1:876391e:      * @param rowsToLoad number of rows to insert
1:876391e:      * @param tableName name of the table to insert the rows into
1:876391e:      * @param binaryData whether or not c6, ..., c9 should contain binary data
1:876391e:      */
1:876391e:     public BaseLoad100TestSetup(
1:876391e:             Test test, int rowsToLoad, String tableName, boolean binaryData) {
1:c3bf4ea:         super(test);
1:c3bf4ea:         this.tableName = tableName;
1:c3bf4ea:         this.rowsToLoad = rowsToLoad;
1:876391e:         this.binaryData = binaryData;
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Clean the default database using the default connection
1:c3bf4ea:      * and calls the decorateSQL to allow sub-classes to
1:c3bf4ea:      * initialize their schema requirments.
1:c3bf4ea:      */
1:c3bf4ea:     protected void setUp() throws Exception {
1:c3bf4ea:         super.setUp();
1:c3bf4ea: 
1:c3bf4ea:         Connection conn = getConnection();
1:c3bf4ea:         conn.setAutoCommit(false);
1:c3bf4ea:         PreparedStatement insert = conn.prepareStatement(
1:c3bf4ea:                 "INSERT INTO "+tableName+" VALUES ( ?,?,?,?,?,?,?,?,? )");
1:c3bf4ea:         loadData(insert);
1:c3bf4ea:         insert.close();
1:c3bf4ea:         conn.close();
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Override the decorateSQL and create the necessary schema.
1:c3bf4ea:      * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:c3bf4ea:      */
1:c3bf4ea:     protected void decorateSQL(Statement s)
1:c3bf4ea:         throws SQLException
1:c3bf4ea:     {
1:876391e:         StringBuffer ddl = new StringBuffer();
1:876391e:         ddl.append("CREATE TABLE ").append(tableName);
1:876391e:         ddl.append("(i1 INT, i2 INT, i3 INT, i4 INT, i5 INT");
1:876391e:         for (int i = 6; i <= 9; i++) {
1:876391e:             ddl.append(", c").append(i).append(" CHAR(20)");
1:876391e:             if (binaryData) {
1:876391e:                 ddl.append(" FOR BIT DATA");
1:876391e:             }
1:876391e:         }
1:876391e:         ddl.append(')');
1:876391e:         s.execute(ddl.toString());
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Load the data into the table.
1:c3bf4ea:      * @param insert  prepared statement to use for inserting data.
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     private void loadData(PreparedStatement insert) throws Exception {
1:c3bf4ea: 
1:c3bf4ea:         for (int i = 0; i < rowsToLoad; i++) {
1:c3bf4ea:             insert.setInt(1, i);
1:c3bf4ea:             insert.setInt(2, 2);
1:c3bf4ea: 
1:c3bf4ea:             // 1% of rows with a known pattern for where etc.
1:c3bf4ea:             if ((i % 100) == 57)
1:c3bf4ea:                 insert.setInt(3, 436);
1:c3bf4ea:             else
1:c3bf4ea:                 insert.setInt(3, 2);
1:c3bf4ea: 
1:c3bf4ea:             insert.setInt(4, 2);
1:c3bf4ea:             insert.setInt(5, i);
1:876391e:             insert.setObject(6, convertData("01234567890123456789"));
1:c3bf4ea: 
1:c3bf4ea:             // 1% of rows with a known pattern for like etc.
1:c3bf4ea:             if ((i % 100) == 34)
1:876391e:                 insert.setObject(7, convertData("012345javaone6789"));
1:c3bf4ea:             else
1:876391e:                 insert.setObject(7, convertData("01234567890123456789"));
1:c3bf4ea: 
1:876391e:             insert.setObject(8, convertData("01234567890123456789"));
1:c3bf4ea: 
1:876391e:             insert.setObject(9, convertData((i + 1000) + "0123456789012"));
1:c3bf4ea:             insert.executeUpdate();
1:c3bf4ea:         }
1:c3bf4ea:         insert.getConnection().commit();
1:c3bf4ea:     }
1:c3bf4ea: 
1:876391e:     /**
1:876391e:      * Convert a string to a data type appropriate for the columns c6 to c9,
1:876391e:      * that is, either a {@code String} value or a {@code byte[]} value.
1:876391e:      *
1:876391e:      * @param string the string to generate the value from
1:876391e:      * @return either {@code string}, or a {@code byte[]} value representing
1:876391e:      * {@code string} if {@code binaryData} is {@code true}
1:876391e:      * @throws IOException if the string cannot be converted to a byte array
1:876391e:      */
1:876391e:     private Object convertData(String string) throws IOException {
1:876391e:         if (binaryData) {
1:876391e:             return string.getBytes("US-ASCII");
1:876391e:         } else {
1:876391e:             return string;
1:876391e:         }
1:876391e:     }
1:c3bf4ea: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:876391e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:  * One of the constructors allows the data type of the last four columns to be
1:  * changed to CHAR(20) FOR BIT DATA.
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private boolean binaryData;
/////////////////////////////////////////////////////////////////////////
1:         this(test, rowsToLoad, tableName, false);
1:     }
1: 
1:     /**
1:      * @param test name of test
1:      * @param rowsToLoad number of rows to insert
1:      * @param tableName name of the table to insert the rows into
1:      * @param binaryData whether or not c6, ..., c9 should contain binary data
1:      */
1:     public BaseLoad100TestSetup(
1:             Test test, int rowsToLoad, String tableName, boolean binaryData) {
1:         this.binaryData = binaryData;
/////////////////////////////////////////////////////////////////////////
1:         StringBuffer ddl = new StringBuffer();
1:         ddl.append("CREATE TABLE ").append(tableName);
1:         ddl.append("(i1 INT, i2 INT, i3 INT, i4 INT, i5 INT");
1:         for (int i = 6; i <= 9; i++) {
1:             ddl.append(", c").append(i).append(" CHAR(20)");
1:             if (binaryData) {
1:                 ddl.append(" FOR BIT DATA");
1:             }
1:         }
1:         ddl.append(')');
1:         s.execute(ddl.toString());
/////////////////////////////////////////////////////////////////////////
1:             insert.setObject(6, convertData("01234567890123456789"));
1:                 insert.setObject(7, convertData("012345javaone6789"));
1:                 insert.setObject(7, convertData("01234567890123456789"));
1:             insert.setObject(8, convertData("01234567890123456789"));
1:             insert.setObject(9, convertData((i + 1000) + "0123456789012"));
1:     /**
1:      * Convert a string to a data type appropriate for the columns c6 to c9,
1:      * that is, either a {@code String} value or a {@code byte[]} value.
1:      *
1:      * @param string the string to generate the value from
1:      * @return either {@code string}, or a {@code byte[]} value representing
1:      * {@code string} if {@code binaryData} is {@code true}
1:      * @throws IOException if the string cannot be converted to a byte array
1:      */
1:     private Object convertData(String string) throws IOException {
1:         if (binaryData) {
1:             return string.getBytes("US-ASCII");
1:         } else {
1:             return string;
1:         }
1:     }
commit:c3bf4ea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * TestSetup decorator to load the schema that is used for some of the
1:  * performance tests.
1:  * Schema includes:
1:  * Table: is  9 column table (100bytes)  - 5 columns of type int, 4 columns of char(20)")
1:  * data distribution - { column 1 has unique values,column 2 is set to 2,
1:  * column 3 has 1 % of rows with same value, column 4 is set to 2,
1:  * column 5 has unique values, column 6 is set to a constant value,
1:  *  column 7 has 1% of rows with known pattern,
1:  * column 8 has constant value,column 9 has values having the same suffix.
1:  * Connection props :  autocommit - false, default isolation level- Read Committed.
1:  *
1:  * If any indexes have to be created or any other schema additions need to be made, then
1:  * the decorateSQL() method needs to be overriden.
1:  */
1: public class BaseLoad100TestSetup extends CleanDatabaseTestSetup {
1: 
1:     protected int rowsToLoad=10000;
1:     protected String tableName = "BASELOAD100";
1: 
1:     /**
1:      *
1:      * @param test
1:      */
1:     public BaseLoad100TestSetup(Test test) {
1:         super(test);
1:     }
1: 
1:     /**
1:      * @param test name of test
1:      * @param rowsToLoad number of rows to insert
1:      */
1:     public BaseLoad100TestSetup(Test test, int rowsToLoad)
1:     {
1:         super(test);
1:         this.rowsToLoad=rowsToLoad;
1:     }
1: 
1:     /**
1:      * @param test name of the test
1:      * @param tableName name of the table to insert the rows into
1:      */
1:     public BaseLoad100TestSetup(Test test, String tableName)
1:     {
1:         super(test);
1:         this.tableName = tableName;
1:     }
1: 
1:     /**
1:      * @param test name of test
1:      * @param rowsToLoad number of rows to insert
1:      * @param tableName name of the table to insert the rows into
1:      */
1:     public BaseLoad100TestSetup(Test test,int rowsToLoad, String tableName)
1:     {
1:         super(test);
1:         this.tableName = tableName;
1:         this.rowsToLoad = rowsToLoad;
1:     }
1: 
1:     /**
1:      * Clean the default database using the default connection
1:      * and calls the decorateSQL to allow sub-classes to
1:      * initialize their schema requirments.
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         Connection conn = getConnection();
1:         conn.setAutoCommit(false);
1:         PreparedStatement insert = conn.prepareStatement(
1:                 "INSERT INTO "+tableName+" VALUES ( ?,?,?,?,?,?,?,?,? )");
1:         loadData(insert);
1:         insert.close();
1:         conn.close();
1:     }
1: 
1: 
1:     /**
1:      * Override the decorateSQL and create the necessary schema.
1:      * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:      */
1:     protected void decorateSQL(Statement s)
1:         throws SQLException
1:     {
0:         s.execute("CREATE TABLE " +tableName+" ("
0:                 + "i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, "
0:                 + "c6 CHAR(20), c7 CHAR(20), c8 CHAR(20), c9 CHAR(20))");
1: 
1:     }
1: 
1:     /**
1:      * Load the data into the table.
1:      * @param insert  prepared statement to use for inserting data.
1:      * @throws Exception
1:      */
1:     private void loadData(PreparedStatement insert) throws Exception {
1: 
1:         for (int i = 0; i < rowsToLoad; i++) {
1:             insert.setInt(1, i);
1:             insert.setInt(2, 2);
1: 
1:             // 1% of rows with a known pattern for where etc.
1:             if ((i % 100) == 57)
1:                 insert.setInt(3, 436);
1:             else
1:                 insert.setInt(3, 2);
1: 
1:             insert.setInt(4, 2);
1:             insert.setInt(5, i);
0:             insert.setString(6, "01234567890123456789");
1: 
1:             // 1% of rows with a known pattern for like etc.
1:             if ((i % 100) == 34)
0:                 insert.setString(7, "012345javaone6789");
1:             else
0:                 insert.setString(7, "01234567890123456789");
1: 
0:             insert.setString(8, "01234567890123456789");
1: 
0:             insert.setString(9, (i + 1000) + "0123456789012");
1:             insert.executeUpdate();
1:         }
1:         insert.getConnection().commit();
1:     }
1: 
1: }
============================================================================