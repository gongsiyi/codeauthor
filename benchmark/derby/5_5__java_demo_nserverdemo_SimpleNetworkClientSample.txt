1:df69fcc: /*
7:df69fcc: 
1:df69fcc:    Derby - Class SimpleNetworkClientSample
1:df69fcc: 
1:44e2455:    Licensed to the Apache Software Foundation (ASF) under one or more
1:44e2455:    contributor license agreements.  See the NOTICE file distributed with
1:44e2455:    this work for additional information regarding copyright ownership.
1:44e2455:    The ASF licenses this file to You under the Apache License, Version 2.0
1:44e2455:    (the "License"); you may not use this file except in compliance with
1:44e2455:    the License.  You may obtain a copy of the License at
1:df69fcc: 
1:df69fcc:       http://www.apache.org/licenses/LICENSE-2.0
1:df69fcc: 
1:df69fcc:    Unless required by applicable law or agreed to in writing, software
1:df69fcc:    distributed under the License is distributed on an "AS IS" BASIS,
1:df69fcc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df69fcc:    See the License for the specific language governing permissions and
1:df69fcc:    limitations under the License.
1:df69fcc: 
4:df69fcc:  */
1:df69fcc: 
1:5bd651f: import java.lang.reflect.InvocationTargetException;
1:5bd651f: import java.lang.reflect.Method;
1:5bd651f: import java.sql.Connection;
1:5bd651f: import java.sql.DriverManager;
1:5bd651f: import java.sql.ResultSet;
1:5bd651f: import java.sql.SQLException;
1:5bd651f: import java.sql.Statement;
1:df69fcc: import java.util.Properties;
1:df69fcc: 
1:df69fcc: import javax.sql.DataSource;
1:df69fcc: 
1:6558c14: /**
1:df69fcc:  * The primary purpose of this program is to demonstrate how to obtain
1:df69fcc:  * client connections using DriverManager or a DataSource
1:1695a5d:  * and interact with Derby Network Server.
1:df69fcc:  *
1:df69fcc:  * In particular,this sample program
1:1695a5d:  * 1)	obtains a client connection using the DriverManager
1:1695a5d:  * 2)	obtains a client connection using a DataSource
1:1695a5d:  * 3)	tests the database connections by executing a sample query
1:df69fcc:  * and then exits the program
1:df69fcc:  *
1:45f64ad:  * Before running this program, please make sure that Derby Network Server is up
1:df69fcc:  * and running.
1:df69fcc:  *  <P>
1:df69fcc:  *  Usage: java SimpleNetworkClientSample
1:df69fcc:  *
1:df69fcc:  */
1:df69fcc: public class SimpleNetworkClientSample
1:6558c14: {
1:df69fcc: 
1:df69fcc: 	/*
1:df69fcc: 	 * The database is located in the same directory where this program is being
1:df69fcc: 	 * run. Alternately one can specify the absolute path of the database location
1:df69fcc: 	 */
1:1695a5d: 	private static String DBNAME="NSSimpleDB";
1:df69fcc: 
4:df69fcc: 	/**
1:df69fcc: 	 * Derby network server port ; default is 1527
1:df69fcc: 	 */
1:df69fcc: 	private static int NETWORKSERVER_PORT=1527;
1:45f64ad: 
1:df69fcc: 
1:df69fcc: 	/**
1:6558c14: 	 * Derby Network Client Driver class names
1:6558c14: 	 */
1:6558c14: 
1:6558c14: 	private static final String DERBY_CLIENT_DS = "org.apache.derby.jdbc.ClientDataSource";
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * This URL is used to connect to Derby Network Server using the DriverManager.
1:df69fcc: 	 * Notice that the properties may be established via the URL syntax
1:df69fcc: 	 */
1:df69fcc: 	private static final String CS_NS_DBURL= "jdbc:derby:net://localhost:"+NETWORKSERVER_PORT+"/"+DBNAME+";retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;";
1:df69fcc: 
1:6558c14:         // URL for the Derby client JDBC driver.
1:5bd651f:         private static final String DERBY_CLIENT_URL= "jdbc:derby://localhost:"+ NETWORKSERVER_PORT+"/"+DBNAME+";create=true";
1:df69fcc: 
1:6558c14:         // Default to using the Derby Client JDBC Driver for database connections
1:6558c14:         String url = DERBY_CLIENT_URL;
1:6558c14:         String jdbcDataSource = DERBY_CLIENT_DS;
1:6558c14: 
1:6558c14: 	public static void main (String[] args) throws Exception
1:6558c14:         {
1:6558c14: 
1:6558c14:                    new SimpleNetworkClientSample().startSample(args);
1:6558c14: 
1:6558c14:         }
1:6558c14: 	public void startSample (String[] args) throws Exception
1:6558c14: 	{
1:df69fcc: 		DataSource clientDataSource = null;
1:df69fcc: 		Connection clientConn1 = null;
1:df69fcc: 		Connection clientConn2 = null;
1:6558c14: 
1:6558c14: 
1:df69fcc: 		try
1:6558c14: 		{
1:df69fcc: 			System.out.println("Starting Sample client program ");
1:df69fcc: 
1:df69fcc: 			// get a client connection using DriverManager
1:df69fcc: 			clientConn1 = getClientDriverManagerConnection();
1:df69fcc: 			System.out.println("Got a client connection via the DriverManager.");
1:df69fcc: 
1:df69fcc: 			// create a datasource with the necessary information
1:df69fcc: 			javax.sql.DataSource myDataSource = getClientDataSource(DBNAME, null, null);
1:df69fcc: 
1:df69fcc: 			// get a client connection using DataSource
1:df69fcc: 			clientConn2 = getClientDataSourceConn(myDataSource);
1:df69fcc: 			System.out.println("Got a client connection via a DataSource.");
1:df69fcc: 
1:df69fcc: 			// test connections by doing some work
1:df69fcc: 			System.out.println("Testing the connection obtained via DriverManager by executing a sample query ");
1:df69fcc: 			test(clientConn1);
1:df69fcc: 			System.out.println("Testing the connection obtained via a DataSource by executing a sample query ");
1:df69fcc: 			test(clientConn2);
1:df69fcc: 
1:df69fcc: 			System.out.println("Goodbye!");
1:6558c14: 		}
1:df69fcc: 		catch (SQLException sqle)
1:6558c14: 		{
1:df69fcc: 			System.out.println("Failure making connection: " + sqle);
1:df69fcc: 			sqle.printStackTrace();
1:6558c14: 		}
1:df69fcc: 		finally
1:6558c14: 		{
1:df69fcc: 
1:df69fcc: 			if(clientConn1 != null)
1:df69fcc: 				clientConn1.close();
1:df69fcc: 			if(clientConn2 != null)
1:df69fcc: 				clientConn2.close();
6:df69fcc: 		}
1:df69fcc: 	}
1:df69fcc: 
1:6558c14: 	/**
1:df69fcc: 	 * Get a database connection from DataSource
1:df69fcc: 	 * @pre Derby Network Server is started
1:df69fcc: 	 * @param	ds	data source
1:df69fcc: 	 * @return	returns database connection
1:df69fcc: 	 * @throws Exception if there is any error
1:6558c14: 	 */
1:6558c14: 	public Connection getClientDataSourceConn(javax.sql.DataSource ds)
3:df69fcc: 		throws Exception
7:df69fcc: 	{
1:df69fcc: 		Connection conn = ds.getConnection("usr2", "pass2");
1:df69fcc: 		System.out.print("connection from datasource; getDriverName = ");
1:df69fcc: 		System.out.println(conn.getMetaData().getDriverName());
1:df69fcc: 		return conn;
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Creates a client data source and sets all the necessary properties in order to
1:df69fcc: 	 * connect to Derby Network Server
1:df69fcc: 	 * The server is assumed to be running on 1527 and on the localhost
1:df69fcc: 	 * @param	database	database name; can include Derby URL attributes
1:df69fcc: 	 * @param	user		database user
1:df69fcc: 	 * @param	password
1:df69fcc: 	 * @return	returns DataSource
1:df69fcc: 	 * @throws Exception if there is any error
1:df69fcc: 	 */
1:6558c14: 	public javax.sql.DataSource getClientDataSource(String database, String user, String
1:df69fcc: 									  password) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException
1:df69fcc: 	{
1:b5b1316: 		Class<?> nsDataSource = Class.forName(jdbcDataSource);
1:4469400: 		DataSource ds = (DataSource) nsDataSource.getConstructor().newInstance();
1:df69fcc: 
1:df69fcc: 		// can also include Derby URL attributes along with the database name
1:df69fcc: 		Class[] methodParams = new Class[] {String.class};
1:df69fcc: 		Method dbname = nsDataSource.getMethod("setDatabaseName", methodParams);
1:df69fcc: 		Object[] args = new Object[] {database};
1:df69fcc: 		dbname.invoke(ds, args);
1:df69fcc: 
1:df69fcc: 		if (user != null) {
1:df69fcc: 			Method setuser = nsDataSource.getMethod("setUser", methodParams);
1:df69fcc: 			args = new Object[] {user};
1:df69fcc: 			setuser.invoke(ds, args);
1:df69fcc: 		}
1:df69fcc: 		if (password != null) {
1:df69fcc: 			Method setpw = nsDataSource.getMethod("setPassword", methodParams);
1:df69fcc: 			args = new Object[] {password};
1:df69fcc: 			setpw.invoke(ds, args);
1:df69fcc: 		}
1:df69fcc: 		// host on which network server is running
1:df69fcc: 		Method servername = nsDataSource.getMethod("setServerName", methodParams);
1:df69fcc: 		args = new Object[] {"localhost"};
1:df69fcc: 		servername.invoke(ds, args);
1:df69fcc: 
1:df69fcc: 		// port on which Network Server is listening
1:df69fcc: 		methodParams = new Class[] {int.class};
1:df69fcc: 		Method portnumber = nsDataSource.getMethod("setPortNumber", methodParams);
1:ce40a31: 		args = new Object[] {1527};
1:df69fcc: 		portnumber.invoke(ds, args);
1:df69fcc: 
1:df69fcc: 		return ds;
1:df69fcc: 
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Get a client connection using the DriverManager
1:6558c14: 	 * @pre The JDBC driver must have been loaded before calling this method
1:df69fcc: 	 * @return Connection	client database connection
1:df69fcc: 	 */
1:6558c14: 	public Connection getClientDriverManagerConnection()
1:df69fcc: 		throws Exception
1:df69fcc: 	{
1:df69fcc: 
1:df69fcc: 		// See Derby documentation for description of properties that may be set
1:df69fcc: 		//  in the context of the network server.
1:df69fcc: 		Properties properties = new java.util.Properties();
1:df69fcc: 
1:df69fcc: 		// The user and password properties are a must, required by JCC
1:45f64ad: 		properties.setProperty("user","derbyuser");
1:45f64ad: 		properties.setProperty("password","pass");
1:df69fcc: 
1:6558c14: 		// Get database connection  via DriverManager api
1:6558c14: 		Connection conn = DriverManager.getConnection(url,properties); 
1:df69fcc: 
1:df69fcc: 		return conn;
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Test a connection by executing a sample query
1:df69fcc: 	 * @param	conn 	database connection
1:df69fcc: 	 * @throws Exception if there is any error
1:df69fcc: 	 */
1:6558c14: 	public void test(Connection conn)
1:df69fcc: 		throws Exception
1:df69fcc: 	{
1:df69fcc: 
1:df69fcc: 	  Statement stmt = null;
1:df69fcc: 	  ResultSet rs = null;
1:df69fcc: 	  try
1:df69fcc: 	  {
1:df69fcc: 		// To test our connection, we will try to do a select from the system catalog tables
1:df69fcc: 		stmt = conn.createStatement();
1:df69fcc: 		rs = stmt.executeQuery("select count(*) from sys.systables");
1:df69fcc: 		while(rs.next())
1:df69fcc: 			System.out.println("number of rows in sys.systables = "+ rs.getInt(1));
1:df69fcc: 
1:df69fcc: 	  }
1:df69fcc: 	  catch(SQLException sqle)
1:df69fcc: 	  {
1:df69fcc: 		  System.out.println("SQLException when querying on the database connection; "+ sqle);
1:df69fcc: 		  throw sqle;
1:df69fcc:   	  }
1:df69fcc:   	  finally
1:df69fcc:   	  {
1:df69fcc: 		  if(rs != null)
1:df69fcc: 		  	rs.close();
1:df69fcc: 		  if(stmt != null)
1:df69fcc: 		  	stmt.close();
1:6558c14:  	  }
1:6558c14: 	}
1:6558c14: 
1:df69fcc: }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: 		DataSource ds = (DataSource) nsDataSource.getConstructor().newInstance();
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 		args = new Object[] {1527};
commit:b5b1316
/////////////////////////////////////////////////////////////////////////
1: 		Class<?> nsDataSource = Class.forName(jdbcDataSource);
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
1:  * and interact with Derby Network Server.
1:  * 1)	obtains a client connection using the DriverManager
1:  * 2)	obtains a client connection using a DataSource
1:  * 3)	tests the database connections by executing a sample query
/////////////////////////////////////////////////////////////////////////
1: 	private static String DBNAME="NSSimpleDB";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:45f64ad
/////////////////////////////////////////////////////////////////////////
0:  * 1)   loads the Derby Network Client driver
1:  * Before running this program, please make sure that Derby Network Server is up
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		properties.setProperty("user","derbyuser");
1: 		properties.setProperty("password","pass");
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:44e2455
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6558c14
/////////////////////////////////////////////////////////////////////////
0:  * 1)   loads the DB2 Universal JDBC Driver or the Derby Network Client driver
0:    (default is the derby network client driver)
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Derby Network Client Driver class names
1: 	 */
1: 
0: public static final String DERBY_CLIENT_DRIVER = "org.apache.derby.jdbc.ClientDriver";
1: 	private static final String DERBY_CLIENT_DS = "org.apache.derby.jdbc.ClientDataSource";
0: 	 * This URL is for the DB2 JDBC Universal Driver
1:         // URL for the Derby client JDBC driver.
0:         private static final String DERBY_CLIENT_URL= "jdbc:derby://localhost:"+ NETWORKSERVER_PORT+"/NSSampledb;create=true";
1:         // Default to using the Derby Client JDBC Driver for database connections
1:         String url = DERBY_CLIENT_URL;
0:         String jdbcDriver = DERBY_CLIENT_DRIVER;
1:         String jdbcDataSource = DERBY_CLIENT_DS;
1: 
1: 	public static void main (String[] args) throws Exception
1:         {
1: 
1:                    new SimpleNetworkClientSample().startSample(args);
1: 
1:         }
1: 	public void startSample (String[] args) throws Exception
/////////////////////////////////////////////////////////////////////////
0:                         // Determine which JDBC driver to use
0:                         parseArguments(args);
0: 			// load  the appropriate JDBC Driver
0: 			loadDriver();
/////////////////////////////////////////////////////////////////////////
1: 	public Connection getClientDataSourceConn(javax.sql.DataSource ds)
/////////////////////////////////////////////////////////////////////////
1: 	public javax.sql.DataSource getClientDataSource(String database, String user, String
0: 		Class nsDataSource = Class.forName(jdbcDataSource);
/////////////////////////////////////////////////////////////////////////
0:                 // The following is only applicable to the DB2 JDBC driver
0:                 if(jdbcDataSource.equals( DB2_JCC_DS))
1:                 {
0: 			// driver type must be 4 to access Derby Network Server
0: 			Method drivertype = nsDataSource.getMethod("setDriverType", methodParams);
0: 			args = new Object[] {new Integer(4)};
0: 			drivertype.invoke(ds, args);
1:                 }
/////////////////////////////////////////////////////////////////////////
0: 	 * Load the appropriate JDBC driver
0: 	public void loadDriver()
0: 		// Load the  Driver
0: 		Class.forName(jdbcDriver).newInstance();
1: 	 * @pre The JDBC driver must have been loaded before calling this method
1: 	public Connection getClientDriverManagerConnection()
/////////////////////////////////////////////////////////////////////////
1: 		// Get database connection  via DriverManager api
1: 		Connection conn = DriverManager.getConnection(url,properties); 
/////////////////////////////////////////////////////////////////////////
1: 	public void test(Connection conn)
/////////////////////////////////////////////////////////////////////////
1:    /**
0:      * Determine which jdbc driver to use by parsing the command line args.
0:      *  Accepted values:
0:      *  jccjdbclient   - The DB2 type 4 universal driver
0:      *  derbyclient    - The Derby network driver (default).
0:      *  Note: because this is just a sample, we only care about whether
0:      *  the above values are specified.  If they are not, then we default
0:      *  to the Derby network driver.
1:      */
0:     private void parseArguments(String[] args)
1:     {
0:         int length = args.length;
1: 
0:         for (int index = 0; index < length; index++)
1:         {
0:             if (args[index].equalsIgnoreCase("jccjdbcclient"))
1:             {
1: 
0:                 jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
0:                 jdbcDataSource = DB2_JCC_DS;
0:                 url = CS_NS_DBURL;
0:                 break;
0:             } else if (args[index].equalsIgnoreCase("derbyClient"))
1:             {
0:                 jdbcDriver = DERBY_CLIENT_DRIVER;
0:                 jdbcDataSource = DERBY_CLIENT_DS;
0:                 url = DERBY_CLIENT_URL;
0:                 break;
1:             }
1:         }
1:     }
1: 
commit:df69fcc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class SimpleNetworkClientSample
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: import java.sql.*;
0: import java.lang.reflect.*;
1: import javax.sql.DataSource;
1: import java.util.Properties;
0: import java.io.BufferedReader;
0: import java.io.InputStreamReader;
1: 
1: /**
1:  * The primary purpose of this program is to demonstrate how to obtain
1:  * client connections using DriverManager or a DataSource
0:  * and interact with Derby Network Server
1:  *
1:  * In particular,this sample program
0:  * 1)   loads the DB2 Universal JDBC Driver
0:  * 2)	obtains a client connection using the Driver Manager
0:  * 3)	obtains a client connection using a DataSource
0:  * 4)	tests the database connections by executing a sample query
1:  * and then exits the program
1:  *
0:  * Before running this program, please make sure that Clouscape Network Server is up
1:  * and running.
1:  *  <P>
1:  *  Usage: java SimpleNetworkClientSample
1:  *
1:  */
1: public class SimpleNetworkClientSample
1: {
1: 
1: 	/*
1: 	 * The database is located in the same directory where this program is being
1: 	 * run. Alternately one can specify the absolute path of the database location
1: 	 */
0: 	private static String DBNAME="NSSimpleDB";
1: 
1: 	/**
1: 	 * Derby network server port ; default is 1527
1: 	 */
1: 	private static int NETWORKSERVER_PORT=1527;
1: 
1: 	/**
0: 	 * DB2 JDBC UNIVERSAL DRIVER class names
1: 	 */
0: 	private static final String DB2_JDBC_UNIVERSAL_DRIVER = "com.ibm.db2.jcc.DB2Driver";
0: 	private static final String DB2_JCC_DS = "com.ibm.db2.jcc.DB2SimpleDataSource";
1: 
1: 	/**
1: 	 * This URL is used to connect to Derby Network Server using the DriverManager.
0: 	 * Also, this url describes the target database for type 4 connectivity
1: 	 * Notice that the properties may be established via the URL syntax
1: 	 */
1: 	private static final String CS_NS_DBURL= "jdbc:derby:net://localhost:"+NETWORKSERVER_PORT+"/"+DBNAME+";retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;";
1: 
1: 
0: 	public static void main (String[] args)
1: 		throws Exception
1: 	{
1: 		DataSource clientDataSource = null;
1: 		Connection clientConn1 = null;
1: 		Connection clientConn2 = null;
1: 
1: 
1: 		try
1: 		{
1: 			System.out.println("Starting Sample client program ");
1: 
0: 			// load DB2 JDBC UNIVERSAL DRIVER to enable client connections to
0: 			// Derby Network Server
0: 			loadJCCDriver();
1: 
1: 			// get a client connection using DriverManager
1: 			clientConn1 = getClientDriverManagerConnection();
1: 			System.out.println("Got a client connection via the DriverManager.");
1: 
1: 			// create a datasource with the necessary information
1: 			javax.sql.DataSource myDataSource = getClientDataSource(DBNAME, null, null);
1: 
1: 			// get a client connection using DataSource
1: 			clientConn2 = getClientDataSourceConn(myDataSource);
1: 			System.out.println("Got a client connection via a DataSource.");
1: 
1: 			// test connections by doing some work
1: 			System.out.println("Testing the connection obtained via DriverManager by executing a sample query ");
1: 			test(clientConn1);
1: 			System.out.println("Testing the connection obtained via a DataSource by executing a sample query ");
1: 			test(clientConn2);
1: 
1: 			System.out.println("Goodbye!");
1: 		}
1: 		catch (SQLException sqle)
1: 		{
1: 			System.out.println("Failure making connection: " + sqle);
1: 			sqle.printStackTrace();
1: 		}
1: 		finally
1: 		{
1: 
1: 			if(clientConn1 != null)
1: 				clientConn1.close();
1: 			if(clientConn2 != null)
1: 				clientConn2.close();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get a database connection from DataSource
1: 	 * @pre Derby Network Server is started
1: 	 * @param	ds	data source
1: 	 * @return	returns database connection
1: 	 * @throws Exception if there is any error
1: 	 */
0: 	public static Connection getClientDataSourceConn(javax.sql.DataSource ds)
1: 		throws Exception
1: 	{
1: 		Connection conn = ds.getConnection("usr2", "pass2");
1: 		System.out.print("connection from datasource; getDriverName = ");
1: 		System.out.println(conn.getMetaData().getDriverName());
1: 		return conn;
1: 	}
1: 
1: 	/**
1: 	 * Creates a client data source and sets all the necessary properties in order to
1: 	 * connect to Derby Network Server
1: 	 * The server is assumed to be running on 1527 and on the localhost
1: 	 * @param	database	database name; can include Derby URL attributes
1: 	 * @param	user		database user
1: 	 * @param	password
1: 	 * @return	returns DataSource
1: 	 * @throws Exception if there is any error
1: 	 */
0: 	public static javax.sql.DataSource getClientDataSource(String database, String user, String
1: 									  password) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException
1: 	{
0: 		Class nsDataSource = Class.forName(DB2_JCC_DS);
0: 		DataSource ds = (DataSource) nsDataSource.newInstance();
1: 
1: 		// can also include Derby URL attributes along with the database name
1: 		Class[] methodParams = new Class[] {String.class};
1: 		Method dbname = nsDataSource.getMethod("setDatabaseName", methodParams);
1: 		Object[] args = new Object[] {database};
1: 		dbname.invoke(ds, args);
1: 
1: 		if (user != null) {
1: 			Method setuser = nsDataSource.getMethod("setUser", methodParams);
1: 			args = new Object[] {user};
1: 			setuser.invoke(ds, args);
1: 		}
1: 		if (password != null) {
1: 			Method setpw = nsDataSource.getMethod("setPassword", methodParams);
1: 			args = new Object[] {password};
1: 			setpw.invoke(ds, args);
1: 		}
1: 		// host on which network server is running
1: 		Method servername = nsDataSource.getMethod("setServerName", methodParams);
1: 		args = new Object[] {"localhost"};
1: 		servername.invoke(ds, args);
1: 
1: 		// port on which Network Server is listening
1: 		methodParams = new Class[] {int.class};
1: 		Method portnumber = nsDataSource.getMethod("setPortNumber", methodParams);
0: 		args = new Object[] {new Integer(1527)};
1: 		portnumber.invoke(ds, args);
1: 
0: 		// driver type must be 4 to access Derby Network Server
0: 		Method drivertype = nsDataSource.getMethod("setDriverType", methodParams);
0: 		args = new Object[] {new Integer(4)};
0: 		drivertype.invoke(ds, args);
1: 
1: 		return ds;
1: 
1: 	}
1: 
1: 
1: 	/**
0: 	 * Load DB2 JDBC UNIVERSAL DRIVER
1: 	 */
0: 	public static void loadJCCDriver()
1: 		throws Exception
1: 	{
0: 		// Load the JCC Driver
0: 		Class.forName(DB2_JDBC_UNIVERSAL_DRIVER).newInstance();
1: 	}
1: 
1: 	/**
1: 	 * Get a client connection using the DriverManager
0: 	 * @pre DB2 JDBC Universal driver must have been loaded before calling this method
1: 	 * @return Connection	client database connection
1: 	 */
0: 	public static Connection getClientDriverManagerConnection()
1: 		throws Exception
1: 	{
1: 
1: 		// See Derby documentation for description of properties that may be set
1: 		//  in the context of the network server.
1: 		Properties properties = new java.util.Properties();
1: 
1: 		// The user and password properties are a must, required by JCC
0: 		properties.setProperty("user","cloud");
0: 		properties.setProperty("password","scape");
1: 
0: 		// Get database connection using the JCC client via DriverManager api
0: 		Connection conn = DriverManager.getConnection(CS_NS_DBURL,properties); 
1: 
1: 		return conn;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Test a connection by executing a sample query
1: 	 * @param	conn 	database connection
1: 	 * @throws Exception if there is any error
1: 	 */
0: 	public static void test(Connection conn)
1: 		throws Exception
1: 	{
1: 
1: 	  Statement stmt = null;
1: 	  ResultSet rs = null;
1: 	  try
1: 	  {
1: 		// To test our connection, we will try to do a select from the system catalog tables
1: 		stmt = conn.createStatement();
1: 		rs = stmt.executeQuery("select count(*) from sys.systables");
1: 		while(rs.next())
1: 			System.out.println("number of rows in sys.systables = "+ rs.getInt(1));
1: 
1: 	  }
1: 	  catch(SQLException sqle)
1: 	  {
1: 		  System.out.println("SQLException when querying on the database connection; "+ sqle);
1: 		  throw sqle;
1:   	  }
1:   	  finally
1:   	  {
1: 		  if(rs != null)
1: 		  	rs.close();
1: 		  if(stmt != null)
1: 		  	stmt.close();
1:  	  }
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
commit:6f35451
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class SimpleNetworkClientSample
0: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
commit:3288ee5
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.*;
/////////////////////////////////////////////////////////////////////////
0: 	 * DB2 JDBC UNIVERSAL DRIVER class names
0: 	private static final String DB2_JCC_DS = "com.ibm.db2.jcc.DB2SimpleDataSource";
/////////////////////////////////////////////////////////////////////////
0: 									  password) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException
0: 		Class nsDataSource = Class.forName(DB2_JCC_DS);
0: 		DataSource ds = (DataSource) nsDataSource.newInstance();
0: 		Class[] methodParams = new Class[] {String.class};
0: 		Method dbname = nsDataSource.getMethod("setDatabaseName", methodParams);
0: 		Object[] args = new Object[] {database};
0: 		dbname.invoke(ds, args);
0: 		if (user != null) {
0: 			Method setuser = nsDataSource.getMethod("setUser", methodParams);
0: 			args = new Object[] {user};
0: 			setuser.invoke(ds, args);
0: 		}
0: 		if (password != null) {
0: 			Method setpw = nsDataSource.getMethod("setPassword", methodParams);
0: 			args = new Object[] {password};
0: 			setpw.invoke(ds, args);
0: 		}
0: 		Method servername = nsDataSource.getMethod("setServerName", methodParams);
0: 		args = new Object[] {"localhost"};
0: 		servername.invoke(ds, args);
0: 		methodParams = new Class[] {int.class};
0: 		Method portnumber = nsDataSource.getMethod("setPortNumber", methodParams);
0: 		args = new Object[] {new Integer(1527)};
0: 		portnumber.invoke(ds, args);
0: 		Method drivertype = nsDataSource.getMethod("setDriverType", methodParams);
0: 		args = new Object[] {new Integer(4)};
0: 		drivertype.invoke(ds, args);
/////////////////////////////////////////////////////////////////////////
0: 		Connection conn = DriverManager.getConnection(CS_NS_DBURL,properties); 
commit:67614ad
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:5bd651f
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: 
0: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
0: 	private static String DBNAME="NSSampleDB";
/////////////////////////////////////////////////////////////////////////
1:         private static final String DERBY_CLIENT_URL= "jdbc:derby://localhost:"+ NETWORKSERVER_PORT+"/"+DBNAME+";create=true";
============================================================================