1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.UpdateConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:af1c18c: import org.apache.derby.iapi.error.StandardException;
1:af1c18c: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:a826375: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes compiled constants that are passed into
1:eac0369:  *	UpdateResultSets.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class UpdateConstantAction extends WriteCursorConstantAction
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. But it is NOT used
1:eac0369:  	**	across either major or minor releases.  It is only
1:eac0369: 	** 	written persistently in stored prepared statements, 
1:eac0369: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
1:eac0369: 	**	ITS read/writeExternal.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:5b2f5de: 	
1:eac0369: 	/* 
1:eac0369: 	** Integer array of columns that are being updated.
1:eac0369: 	*/
1:5b2f5de: 	int[]	changedColumnIds;
1:eac0369: 
1:5b2f5de: 	private boolean positionedUpdate;
1:eac0369: 
1:eac0369: 	int numColumns;
1:eac0369: 
1:af1c18c:     private String schemaName;
1:af1c18c:     private String tableName;
1:a826375:     private String columnNames[];
1:a826375: 
1:a826375:     String  identitySequenceUUIDString;
1:a826375: 
1:a826375:     /**
1:a826375:      * An array of row location objects (0 based), one for each
1:a826375:      * column in the table. If the column is an 
1:a826375:      * autoincrement table then the array points to
1:a826375:      * the row location of the column in SYSCOLUMNS.
1:a826375:      * if not, then it contains null.
1:a826375:      */
1:a826375:     RowLocation[] autoincRowLocation;
1:a826375:     private long[] autoincIncrement;
1:af1c18c: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	UpdateConstantAction() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for an UPDATE statement.
1:eac0369: 	 *
1:af1c18c:      *  @param targetTableDesc descriptor for the table to be updated
1:eac0369: 	 *	@param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
1:eac0369: 	 *  @param irgs			Index descriptors
1:eac0369: 	 *  @param indexCIDS	Conglomerate IDs of indices
1:eac0369: 	 *	@param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
1:eac0369: 	 *  @param indexNames	Names of indices on this table for error reporting.
1:eac0369: 	 *  @param deferred		True means process as a deferred update.
1:eac0369: 	 *	@param targetUUID	UUID of target table
1:eac0369: 	 *	@param lockMode		The lock mode to use
1:eac0369: 	 *							(row or table, see TransactionController)
1:eac0369: 	 *  @param changedColumnIds	Array of ids of changed columns	
1:eac0369: 	 *	@param fkInfo		Array of structures containing foreign key info, 
1:eac0369: 	 *						if any (may be null)
1:eac0369: 	 *	@param triggerInfo	Array of structures containing trigger info, 
1:eac0369: 	 *						if any (may be null)
1:eac0369: 	 *  @param baseRowReadList Map of columns read in.  1 based.
1:dbed020: 	 *  @param baseRowReadMap BaseRowReadMap[heapColId]-&gt;ReadRowColumnId. (0 based)
1:eac0369:      *  @param streamStorableHeapColIds Null for non rep. (0 based)
1:eac0369: 	 *  @param numColumns	Number of columns being read.
1:eac0369: 	 *  @param positionedUpdate	is this a positioned update
1:eac0369: 	 *  @param singleRowSource		Whether or not source is a single row source
1:a826375: 	 *  @param autoincRowLocation Array of rowlocations of autoincrement
1:a826375: 	 * 					    values in SYSCOLUMNS for each ai column.
1:01632c2: 	 *  @param underMerge   True if this is an action of a MERGE statement.
1:a826375: 	 *  @param identitySequenceUUIDString   For 10.11 and higher, the handle on the sequence for the identity column
1:eac0369: 	 */
1:ca6ed17:     UpdateConstantAction(
1:af1c18c:                                 TableDescriptor     targetTableDesc,
1:a826375:                                 StaticCompiledOpenConglomInfo heapSCOCI,
1:a826375:                                 IndexRowGenerator[]	irgs,
1:a826375:                                 long[]				indexCIDS,
1:a826375:                                 StaticCompiledOpenConglomInfo[] indexSCOCIs,
1:a826375:                                 String[]			indexNames,
1:a826375:                                 boolean				deferred,
1:a826375:                                 UUID				targetUUID,
1:a826375:                                 int					lockMode,
1:a826375:                                 int[]				changedColumnIds,
1:a826375:                                 FKInfo[]			fkInfo,
1:a826375:                                 TriggerInfo			triggerInfo,
1:a826375:                                 FormatableBitSet				baseRowReadList,
1:a826375:                                 int[]				baseRowReadMap,
1:a826375:                                 int[]               streamStorableHeapColIds,
1:a826375:                                 int					numColumns,
1:a826375:                                 boolean				positionedUpdate,
1:01632c2:                                 boolean				singleRowSource,
1:a826375:                                 RowLocation[]		autoincRowLocation,
1:a826375:                                 boolean             underMerge,
1:a826375:                                 String		identitySequenceUUIDString)
1:af1c18c:             throws StandardException
1:eac0369: 	{
1:eac0369: 		super(
1:af1c18c:             targetTableDesc.getHeapConglomerateId(),
1:eac0369: 			heapSCOCI,
1:eac0369: 			irgs,
1:eac0369: 			indexCIDS,
1:eac0369: 			indexSCOCIs,
1:eac0369: 			indexNames,
1:eac0369: 			deferred, 
1:eac0369: 			(Properties) null,
1:eac0369: 			targetUUID,
1:eac0369: 			lockMode,
1:eac0369: 			fkInfo,
1:eac0369: 			triggerInfo,
1:eac0369: 			baseRowReadList,
1:eac0369: 			baseRowReadMap,
1:eac0369: 			streamStorableHeapColIds,
1:01632c2: 			singleRowSource,
1:01632c2: 			underMerge
1:eac0369: 			);
1:eac0369: 
1:eac0369: 		this.changedColumnIds = changedColumnIds;
1:eac0369: 		this.positionedUpdate = positionedUpdate;
1:eac0369: 		this.numColumns = numColumns;
1:af1c18c:         this.schemaName = targetTableDesc.getSchemaName();
1:af1c18c:         this.tableName = targetTableDesc.getName();
1:a826375:         this.columnNames = targetTableDesc.getColumnNamesArray();
1:a826375:         this.autoincIncrement = targetTableDesc.getAutoincIncrementArray();
1:a826375:         this.identitySequenceUUIDString = identitySequenceUUIDString;
1:a826375:         this.autoincRowLocation = autoincRowLocation;
1:a826375: 	}
1:a826375: 
1:a826375: 	/**
1:a826375: 	 * Does the target table has autoincrement columns.
1:a826375: 	 *
1:a826375: 	 * @return 	True if the table has ai columns
1:a826375: 	 */
1:a826375: 	public boolean hasAutoincrement()
1:a826375: 	{
1:a826375: 		return (autoincRowLocation != null);
1:a826375: 	}
1:a826375: 
1:a826375: 	/**
1:a826375: 	 * gets the row location 
1:a826375: 	 */
1:a826375: 	RowLocation[] getAutoincRowLocation()
1:a826375: 	{
1:a826375: 		return autoincRowLocation;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Formatable methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see java.io.Externalizable#readExternal
1:eac0369: 	  @exception IOException thrown on error
1:eac0369: 	  @exception ClassNotFoundException	thrown on error
1:eac0369: 	  */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		changedColumnIds = ArrayUtil.readIntArray(in);
1:eac0369: 		positionedUpdate = in.readBoolean();
1:eac0369: 		numColumns = in.readInt();
1:a826375: 		autoincIncrement = ArrayUtil.readLongArray(in);
1:a826375: 		identitySequenceUUIDString = (String) in.readObject();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 
1:eac0369: 	  @see java.io.Externalizable#writeExternal
1:eac0369: 	  @exception IOException thrown on error
1:eac0369: 	  */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		ArrayUtil.writeIntArray(out,changedColumnIds);
1:eac0369: 		out.writeBoolean(positionedUpdate);
1:eac0369: 		out.writeInt(numColumns);
1:a826375: 		ArrayUtil.writeLongArray(out, autoincIncrement);
1:a826375: 		out.writeObject( identitySequenceUUIDString );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int getTypeFormatId()	{ return StoredFormatIds.UPDATE_CONSTANT_ACTION_V01_ID; }
1:eac0369: 
1:eac0369: 	// CLASS METHODS
1:af1c18c:     public String getSchemaName() {
1:af1c18c:         return schemaName;
1:af1c18c:     }
1:af1c18c: 
1:af1c18c:     public String getTableName() {
1:af1c18c:         return tableName;
1:af1c18c:     }
1:a826375: 
1:a826375:     /**
1:a826375:      * gets the name of the desired column in the taget table.
1:a826375:      * 
1:a826375:      * @param 	i	the column number
1:a826375:      */
1:a826375:     public String getColumnName(int i) { return columnNames[i]; }
1:a826375: 
1:a826375:     /**
1:a826375:      * get the array of column names in the target table.
1:a826375:      */
1:5afd169:     String[] getColumnNames() { return columnNames; }
1:a826375: 
1:a826375:     /**
1:a826375:      * gets the increment value for a column.
1:a826375:      *
1:a826375:      * @param 	i 	the column number
1:a826375:      */
1:a826375:     public long   getAutoincIncrement(int i) { return autoincIncrement[i]; }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param baseRowReadMap BaseRowReadMap[heapColId]-&gt;ReadRowColumnId. (0 based)
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param underMerge   True if this is an action of a MERGE statement.
/////////////////////////////////////////////////////////////////////////
1: 								boolean				singleRowSource,
0: 								boolean				underMerge)
/////////////////////////////////////////////////////////////////////////
1: 			singleRowSource,
1: 			underMerge
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5afd169
/////////////////////////////////////////////////////////////////////////
1:     String[] getColumnNames() { return columnNames; }
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1:     UpdateConstantAction(
commit:959fef2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a826375
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.RowLocation;
/////////////////////////////////////////////////////////////////////////
1:     private String columnNames[];
1: 
1:     String  identitySequenceUUIDString;
1: 
1:     /**
1:      * An array of row location objects (0 based), one for each
1:      * column in the table. If the column is an 
1:      * autoincrement table then the array points to
1:      * the row location of the column in SYSCOLUMNS.
1:      * if not, then it contains null.
1:      */
1:     RowLocation[] autoincRowLocation;
1:     private long[] autoincIncrement;
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param autoincRowLocation Array of rowlocations of autoincrement
1: 	 * 					    values in SYSCOLUMNS for each ai column.
1: 	 *  @param identitySequenceUUIDString   For 10.11 and higher, the handle on the sequence for the identity column
1:                                 StaticCompiledOpenConglomInfo heapSCOCI,
1:                                 IndexRowGenerator[]	irgs,
1:                                 long[]				indexCIDS,
1:                                 StaticCompiledOpenConglomInfo[] indexSCOCIs,
1:                                 String[]			indexNames,
1:                                 boolean				deferred,
1:                                 UUID				targetUUID,
1:                                 int					lockMode,
1:                                 int[]				changedColumnIds,
1:                                 FKInfo[]			fkInfo,
1:                                 TriggerInfo			triggerInfo,
1:                                 FormatableBitSet				baseRowReadList,
1:                                 int[]				baseRowReadMap,
1:                                 int[]               streamStorableHeapColIds,
1:                                 int					numColumns,
1:                                 boolean				positionedUpdate,
0:                                 boolean				singleRowSource,
1:                                 RowLocation[]		autoincRowLocation,
1:                                 boolean             underMerge,
1:                                 String		identitySequenceUUIDString)
/////////////////////////////////////////////////////////////////////////
1:         this.columnNames = targetTableDesc.getColumnNamesArray();
1:         this.autoincIncrement = targetTableDesc.getAutoincIncrementArray();
1:         this.identitySequenceUUIDString = identitySequenceUUIDString;
1:         this.autoincRowLocation = autoincRowLocation;
1: 	}
1: 
1: 	/**
1: 	 * Does the target table has autoincrement columns.
1: 	 *
1: 	 * @return 	True if the table has ai columns
1: 	 */
1: 	public boolean hasAutoincrement()
1: 	{
1: 		return (autoincRowLocation != null);
1: 	}
1: 
1: 	/**
1: 	 * gets the row location 
1: 	 */
1: 	RowLocation[] getAutoincRowLocation()
1: 	{
1: 		return autoincRowLocation;
/////////////////////////////////////////////////////////////////////////
1: 		autoincIncrement = ArrayUtil.readLongArray(in);
1: 		identitySequenceUUIDString = (String) in.readObject();
/////////////////////////////////////////////////////////////////////////
1: 		ArrayUtil.writeLongArray(out, autoincIncrement);
1: 		out.writeObject( identitySequenceUUIDString );
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * gets the name of the desired column in the taget table.
1:      * 
1:      * @param 	i	the column number
1:      */
1:     public String getColumnName(int i) { return columnNames[i]; }
1: 
1:     /**
1:      * get the array of column names in the target table.
1:      */
0:     public String[] getColumnNames() { return columnNames; }
1: 
1:     /**
1:      * gets the increment value for a column.
1:      *
1:      * @param 	i 	the column number
1:      */
1:     public long   getAutoincIncrement(int i) { return autoincIncrement[i]; }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private String schemaName;
1:     private String tableName;
1: 
/////////////////////////////////////////////////////////////////////////
1:      *  @param targetTableDesc descriptor for the table to be updated
/////////////////////////////////////////////////////////////////////////
1:                                 TableDescriptor     targetTableDesc,
/////////////////////////////////////////////////////////////////////////
0:                                 boolean             underMerge)
1:             throws StandardException
1:             targetTableDesc.getHeapConglomerateId(),
/////////////////////////////////////////////////////////////////////////
1:         this.schemaName = targetTableDesc.getSchemaName();
1:         this.tableName = targetTableDesc.getName();
/////////////////////////////////////////////////////////////////////////
1:     public String getSchemaName() {
1:         return schemaName;
1:     }
1: 
1:     public String getTableName() {
1:         return tableName;
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:5b2f5de
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	int[]	changedColumnIds;
1: 	private boolean positionedUpdate;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.UpdateConstantAction
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  *	This class  describes compiled constants that are passed into
1:  *	UpdateResultSets.
1:  *
0:  *	@author Rick Hillegas
1:  */
1: 
1: public class UpdateConstantAction extends WriteCursorConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. But it is NOT used
1:  	**	across either major or minor releases.  It is only
1: 	** 	written persistently in stored prepared statements, 
1: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
1: 	**	ITS read/writeExternal.
1: 	**
1: 	********************************************************/
1: 
0: 	public	ExecRow						emptyHeapRow;
1: 
1: 	/* 
1: 	** Integer array of columns that are being updated.
0: 	** Used by rep, hence public.
1: 	*/
0: 	public int[]	changedColumnIds;
1: 
0: 	public boolean positionedUpdate;
1: 
1: 	int numColumns;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
1:     public	UpdateConstantAction() { super(); }
1: 
1: 	/**
1: 	 *	Make the ConstantAction for an UPDATE statement.
1: 	 *
0: 	 *  @param conglomId	Conglomerate ID.
1: 	 *	@param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
1: 	 *  @param irgs			Index descriptors
1: 	 *  @param indexCIDS	Conglomerate IDs of indices
1: 	 *	@param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
1: 	 *  @param indexNames	Names of indices on this table for error reporting.
0: 	 *  @param emptyHeapRow	Template for heap row.
1: 	 *  @param deferred		True means process as a deferred update.
1: 	 *	@param targetUUID	UUID of target table
1: 	 *	@param lockMode		The lock mode to use
1: 	 *							(row or table, see TransactionController)
1: 	 *  @param changedColumnIds	Array of ids of changed columns	
1: 	 *	@param fkInfo		Array of structures containing foreign key info, 
1: 	 *						if any (may be null)
1: 	 *	@param triggerInfo	Array of structures containing trigger info, 
1: 	 *						if any (may be null)
1: 	 *  @param baseRowReadList Map of columns read in.  1 based.
0: 	 *  @param baseRowReadMap BaseRowReadMap[heapColId]->ReadRowColumnId. (0 based)
1:      *  @param streamStorableHeapColIds Null for non rep. (0 based)
1: 	 *  @param numColumns	Number of columns being read.
1: 	 *  @param positionedUpdate	is this a positioned update
1: 	 *  @param singleRowSource		Whether or not source is a single row source
1: 	 */
0: 	public	UpdateConstantAction(
0: 								long				conglomId,
0: 								StaticCompiledOpenConglomInfo heapSCOCI,
0: 								IndexRowGenerator[]	irgs,
0: 								long[]				indexCIDS,
0: 								StaticCompiledOpenConglomInfo[] indexSCOCIs,
0: 								String[]			indexNames,
0: 								ExecRow				emptyHeapRow,
0: 								boolean				deferred,
0: 								UUID				targetUUID,
0: 								int					lockMode,
0: 								int[]				changedColumnIds,
0: 								FKInfo[]			fkInfo,
0: 								TriggerInfo			triggerInfo,
0: 								FormatableBitSet				baseRowReadList,
0: 								int[]				baseRowReadMap,
0: 								int[]               streamStorableHeapColIds,
0: 								int					numColumns,
0: 								boolean				positionedUpdate,
0: 								boolean				singleRowSource)
1: 	{
1: 		super(
0: 			conglomId,
1: 			heapSCOCI,
1: 			irgs,
1: 			indexCIDS,
1: 			indexSCOCIs,
1: 			indexNames,
1: 			deferred, 
1: 			(Properties) null,
1: 			targetUUID,
1: 			lockMode,
1: 			fkInfo,
1: 			triggerInfo,
0: 			emptyHeapRow,
1: 			baseRowReadList,
1: 			baseRowReadMap,
1: 			streamStorableHeapColIds,
0: 			singleRowSource
1: 			);
1: 
1: 		this.changedColumnIds = changedColumnIds;
1: 		this.positionedUpdate = positionedUpdate;
1: 		this.numColumns = numColumns;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	// Formatable methods
1: 
1: 	/**
1: 	  @see java.io.Externalizable#readExternal
1: 	  @exception IOException thrown on error
1: 	  @exception ClassNotFoundException	thrown on error
1: 	  */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		changedColumnIds = ArrayUtil.readIntArray(in);
1: 		positionedUpdate = in.readBoolean();
1: 		numColumns = in.readInt();
1: 	}
1: 
1: 	/**
1: 
1: 	  @see java.io.Externalizable#writeExternal
1: 	  @exception IOException thrown on error
1: 	  */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		ArrayUtil.writeIntArray(out,changedColumnIds);
1: 		out.writeBoolean(positionedUpdate);
1: 		out.writeInt(numColumns);
1: 	}
1: 
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int getTypeFormatId()	{ return StoredFormatIds.UPDATE_CONSTANT_ACTION_V01_ID; }
1: 
1: 	// CLASS METHODS
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  *	This class  describes compiled constants that are passed into
0:  *	UpdateResultSets.
0:  *
0:  *	@author Rick Hillegas
0:  */
0: 
0: public class UpdateConstantAction extends WriteCursorConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. But it is NOT used
0:  	**	across either major or minor releases.  It is only
0: 	** 	written persistently in stored prepared statements, 
0: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
0: 	**	ITS read/writeExternal.
0: 	**
0: 	********************************************************/
0: 
0: 	public	ExecRow						emptyHeapRow;
0: 
0: 	/* 
0: 	** Integer array of columns that are being updated.
0: 	** Used by rep, hence public.
0: 	*/
0: 	public int[]	changedColumnIds;
0: 
0: 	public boolean positionedUpdate;
0: 
0: 	int numColumns;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	UpdateConstantAction() { super(); }
0: 
0: 	/**
0: 	 *	Make the ConstantAction for an UPDATE statement.
0: 	 *
0: 	 *  @param conglomId	Conglomerate ID.
0: 	 *	@param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
0: 	 *  @param irgs			Index descriptors
0: 	 *  @param indexCIDS	Conglomerate IDs of indices
0: 	 *	@param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
0: 	 *  @param indexNames	Names of indices on this table for error reporting.
0: 	 *  @param emptyHeapRow	Template for heap row.
0: 	 *  @param deferred		True means process as a deferred update.
0: 	 *	@param targetUUID	UUID of target table
0: 	 *	@param lockMode		The lock mode to use
0: 	 *							(row or table, see TransactionController)
0: 	 *  @param changedColumnIds	Array of ids of changed columns	
0: 	 *	@param fkInfo		Array of structures containing foreign key info, 
0: 	 *						if any (may be null)
0: 	 *	@param triggerInfo	Array of structures containing trigger info, 
0: 	 *						if any (may be null)
0: 	 *  @param baseRowReadList Map of columns read in.  1 based.
0: 	 *  @param baseRowReadMap BaseRowReadMap[heapColId]->ReadRowColumnId. (0 based)
0:      *  @param streamStorableHeapColIds Null for non rep. (0 based)
0: 	 *  @param numColumns	Number of columns being read.
0: 	 *  @param positionedUpdate	is this a positioned update
0: 	 *  @param singleRowSource		Whether or not source is a single row source
0: 	 */
0: 	public	UpdateConstantAction(
0: 								long				conglomId,
0: 								StaticCompiledOpenConglomInfo heapSCOCI,
0: 								IndexRowGenerator[]	irgs,
0: 								long[]				indexCIDS,
0: 								StaticCompiledOpenConglomInfo[] indexSCOCIs,
0: 								String[]			indexNames,
0: 								ExecRow				emptyHeapRow,
0: 								boolean				deferred,
0: 								UUID				targetUUID,
0: 								int					lockMode,
0: 								int[]				changedColumnIds,
0: 								FKInfo[]			fkInfo,
0: 								TriggerInfo			triggerInfo,
0: 								FormatableBitSet				baseRowReadList,
0: 								int[]				baseRowReadMap,
0: 								int[]               streamStorableHeapColIds,
0: 								int					numColumns,
0: 								boolean				positionedUpdate,
0: 								boolean				singleRowSource)
0: 	{
0: 		super(
0: 			conglomId,
0: 			heapSCOCI,
0: 			irgs,
0: 			indexCIDS,
0: 			indexSCOCIs,
0: 			indexNames,
0: 			deferred, 
0: 			(Properties) null,
0: 			targetUUID,
0: 			lockMode,
0: 			fkInfo,
0: 			triggerInfo,
0: 			emptyHeapRow,
0: 			baseRowReadList,
0: 			baseRowReadMap,
0: 			streamStorableHeapColIds,
0: 			singleRowSource
0: 			);
0: 
0: 		this.changedColumnIds = changedColumnIds;
0: 		this.positionedUpdate = positionedUpdate;
0: 		this.numColumns = numColumns;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	// Formatable methods
0: 
0: 	/**
0: 	  @see java.io.Externalizable#readExternal
0: 	  @exception IOException thrown on error
0: 	  @exception ClassNotFoundException	thrown on error
0: 	  */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		changedColumnIds = ArrayUtil.readIntArray(in);
0: 		positionedUpdate = in.readBoolean();
0: 		numColumns = in.readInt();
0: 	}
0: 
0: 	/**
0: 
0: 	  @see java.io.Externalizable#writeExternal
0: 	  @exception IOException thrown on error
0: 	  */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		ArrayUtil.writeIntArray(out,changedColumnIds);
0: 		out.writeBoolean(positionedUpdate);
0: 		out.writeInt(numColumns);
0: 	}
0: 
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.UPDATE_CONSTANT_ACTION_V01_ID; }
0: 
0: 	// CLASS METHODS
0: }
============================================================================