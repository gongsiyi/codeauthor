2:3568cea: /*
3:84e347a: 
1:84e347a:    Derby - Class org.apache.derby.impl.load.ImportLobFile
1:84e347a: 
1:84e347a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:84e347a:    contributor license agreements.  See the NOTICE file distributed with
1:84e347a:    this work for additional information regarding copyright ownership.
1:84e347a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:84e347a:    (the "License"); you may not use this file except in compliance with
1:84e347a:    the License.  You may obtain a copy of the License at
1:84e347a: 
1:84e347a:       http://www.apache.org/licenses/LICENSE-2.0
1:84e347a: 
1:84e347a:    Unless required by applicable law or agreed to in writing, software
1:84e347a:    distributed under the License is distributed on an "AS IS" BASIS,
1:84e347a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:84e347a:    See the License for the specific language governing permissions and
1:84e347a:    limitations under the License.
1:84e347a: 
1:84e347a:  */
1:84e347a: 
1:84e347a: package org.apache.derby.impl.load;
1:e17a43d: import java.io.File;
1:e17a43d: import java.io.RandomAccessFile;
1:e17a43d: import java.io.InputStreamReader;
1:e17a43d: import java.io.InputStream;
1:e17a43d: import java.io.IOException;
1:e17a43d: import java.io.Reader;
1:e17a43d: import java.io.FileNotFoundException;
1:84e347a: import org.apache.derby.iapi.services.io.LimitInputStream;
1:84e347a: import java.security.AccessController;
1:84e347a: import java.security.PrivilegedActionException;
1:e17a43d: import org.apache.derby.iapi.error.PublicAPI;
1:e17a43d: import org.apache.derby.iapi.reference.SQLState;
1:e17a43d: import org.apache.derby.iapi.error.StandardException;
1:84e347a: 
1:84e347a: 
1:84e347a: /**
1:84e347a:  * Helper class to read large object data at random locations 
1:84e347a:  * from a file that contains large object data. 
1:84e347a:  */
1:84e347a: 
1:84e347a: class ImportLobFile 
1:84e347a: {
1:84e347a:     private ImportFileInputStream lobInputStream = null;
1:84e347a:     private LimitInputStream  lobLimitIn;
1:84e347a:     private Reader lobReader = null;
1:84e347a:     private String dataCodeset; 
1:84e347a:     
1:84e347a: 
1:0ea0f3d:     /**
1:84e347a:      * Create a ImportLobFile object.
1:0ea0f3d:      * @param lobFile the file which has the LOB Data.
1:e17a43d:      * @param dataCodeset the code set to use char data in the file.
1:84e347a:      */
1:e17a43d:     ImportLobFile(File lobFile, String dataCodeset) throws Exception {
1:84e347a:         this.dataCodeset = dataCodeset;
1:e17a43d:         openLobFile(lobFile);
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:0ea0f3d:     /**
1:84e347a:      * Open the lob file and setup the stream required to read the data.
1:e17a43d:      * @param lobFile the file that contains lob data.
1:0ea0f3d:      * @exception Exception if an error occurs.     
1:84e347a:      */
1:e17a43d:     private void openLobFile(final File lobFile) 
1:84e347a:         throws Exception 
1:84e347a:     {
1:84e347a:         RandomAccessFile lobRaf;
1:84e347a:         try {
1:84e347a:             // open the lob file under a privelged block.
1:84e347a:             try {
1:400f6eb:                 lobRaf = AccessController.doPrivileged
1:400f6eb:                 (new java.security.PrivilegedExceptionAction<RandomAccessFile>(){
1:400f6eb:                         public RandomAccessFile run() throws IOException{
1:e17a43d:                             return new RandomAccessFile(lobFile, "r");
1:84e347a:                         }   
1:84e347a:                     }
1:84e347a:                  );    	
1:84e347a:             } catch (PrivilegedActionException pae) {
1:84e347a:                 throw pae.getException();
1:84e347a:             }
1:84e347a:         } catch (FileNotFoundException ex) {
1:e17a43d:             throw PublicAPI.wrapStandardException(
1:e17a43d:                       StandardException.newException(
1:e17a43d:                       SQLState.LOB_DATA_FILE_NOT_FOUND, 
1:e17a43d:                       lobFile.getPath()));
1:84e347a:         } 
1:84e347a:         
1:0ea0f3d:         // Set up stream to read from input file, starting from 
1:84e347a:         // any offset in the file. Users can specify columns in 
1:84e347a:         // any order or skip some during import. So it is 
1:0ea0f3d:         // required for this stream to have the ability to read
1:0ea0f3d:         // from any offset in the file. 
1:84e347a: 
1:84e347a:         lobInputStream = new ImportFileInputStream(lobRaf);
1:84e347a: 
1:84e347a:         // wrap the lobInputStream with a LimitInputStream class,
1:84e347a:         // This will help in making sure only the specific amout 
1:84e347a:         // of data is read from the file, for example to read one 
1:84e347a:         // column data from the file. 
1:84e347a:         lobLimitIn = new  LimitInputStream(lobInputStream);
1:3568cea:    
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:0ea0f3d:     /**
1:84e347a:      * Returns a stream that points to the lob data from file at the 
1:0ea0f3d:      * given <code>offset</code>.
1:0ea0f3d:      *
1:84e347a:      * @param offset  byte offset of the column data in the file. 
1:84e347a:      * @param length  length of the the data.
1:84e347a:      * @exception  IOException  if any I/O error occurs.     
1:84e347a:      */
1:84e347a:     public InputStream getBinaryStream(long offset, long length) 
1:84e347a:         throws IOException {
1:84e347a:         lobInputStream.seek(offset);
1:84e347a:         lobLimitIn.clearLimit();
2:84e347a:         lobLimitIn.setLimit((int) length);
1:84e347a:         return lobLimitIn;
1:84e347a:     }
1:3568cea: 
1:84e347a: 
1:0ea0f3d:     /**
1:0ea0f3d:      * Returns the clob data at the given location as <code>String</code>. 
1:84e347a:      * @param offset  byte offset of the column data in the file. 
1:84e347a:      * @param length  length of the the data.
1:84e347a:      * @exception  IOException  on any I/O error.     
1:84e347a:      */
1:62ab900:     public String getString(long offset, int length) throws IOException {
1:84e347a:         lobInputStream.seek(offset);
1:84e347a:         lobLimitIn.clearLimit();
1:62ab900:         lobLimitIn.setLimit(length);
1:84e347a:         
1:3568cea:         // wrap a reader on top of the stream, so that calls 
1:3568cea:         // to read the clob data from the file can read the 
1:3568cea:         // with approapriate  data code set. 
1:3568cea:         lobReader = dataCodeset == null ?
1:3568cea:     		new InputStreamReader(lobLimitIn) : 
1:3568cea:             new InputStreamReader(lobLimitIn, dataCodeset);    
1:3568cea: 
1:84e347a:         // read data from the file, and return it as string. 
1:84e347a:         StringBuffer sb = new StringBuffer();
1:84e347a:         char[] buf= new char[1024];
1:84e347a:         int noChars = lobReader.read(buf , 0 , 1024);
1:84e347a:         while (noChars != -1) {
1:84e347a:             sb.append(buf , 0 , noChars);
1:84e347a:             noChars = lobReader.read(buf , 0 , 1024);
1:84e347a:         }
1:84e347a: 		return sb.toString();
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:0ea0f3d:     /** 
1:3568cea:      * Returns a stream that points to the clob data from file at the 
1:0ea0f3d:      * given <code>offset</code>.
1:3568cea:      * @param offset  byte offset of the column data in the file. 
1:3568cea:      * @param length  length of the the data in bytes.
1:3568cea:      * @exception  IOException  on any I/O error.     
1:3568cea:      */
1:3568cea:     public java.io.Reader getCharacterStream(long offset, long length) 
1:3568cea:         throws IOException 
1:3568cea:     {
1:3568cea:         lobInputStream.seek(offset);
1:3568cea:         lobLimitIn.clearLimit();
1:3568cea:         lobLimitIn.setLimit((int) length);
1:3568cea: 
1:3568cea:         // wrap a reader on top of the stream, so that calls 
1:3568cea:         // to read the clob data from the file can read the 
1:3568cea:         // with approapriate  data code set. 
1:3568cea:         lobReader = dataCodeset == null ?
1:3568cea:     		new InputStreamReader(lobLimitIn) : 
1:3568cea:             new InputStreamReader(lobLimitIn, dataCodeset);    
1:3568cea: 
1:3568cea:         return lobReader;
1:3568cea:     }
1:3568cea: 
1:0ea0f3d:     /**
1:3568cea:      * Returns the clob data length in characters at the give location. 
1:3568cea:      * @param offset  byte offset of the column data in the file. 
1:3568cea:      * @param length  length of the the data in bytes.
1:3568cea:      * @exception  IOException  on any I/O error.     
1:3568cea:      */
1:3568cea:     public long getClobDataLength(long offset, long length) throws IOException {
1:3568cea:         lobInputStream.seek(offset);
1:3568cea:         lobLimitIn.clearLimit();
1:3568cea:         lobLimitIn.setLimit((int) length);
1:3568cea:         
1:3568cea:         // wrap a reader on top of the stream, so that calls 
1:3568cea:         // to read the clob data from the file can read the 
1:3568cea:         // with approapriate  data code set. 
1:3568cea:         lobReader = dataCodeset == null ?
1:3568cea:             new InputStreamReader(lobLimitIn) : 
1:3568cea:             new InputStreamReader(lobLimitIn, dataCodeset);   
1:84e347a: 
1:3568cea:         // find the length in characters 
1:3568cea:         char[] buf= new char[1024];
1:3568cea:         long lengthInChars = 0;
1:3568cea:         int noChars = lobReader.read(buf , 0 , 1024);
1:3568cea:         while (noChars != -1) {
1:3568cea:             lengthInChars += noChars;
1:3568cea:             noChars = lobReader.read(buf , 0 , 1024);
1:3568cea:         }
1:3568cea:         
1:3568cea:         return lengthInChars;
1:3568cea:     }
1:3568cea: 
1:0ea0f3d:     /**
1:0ea0f3d:      * Close all the resources realated to the lob file.
1:84e347a:      */
1:84e347a:     public void close() throws IOException {
1:84e347a: 
1:84e347a:         if (lobReader != null) {
1:84e347a:             lobReader.close();
1:84e347a:             // above call also will close the 
1:84e347a:             // stream under it. 
1:84e347a:         } else {
1:84e347a: 
1:84e347a:             if (lobLimitIn != null) {
1:84e347a:                 lobLimitIn.close();
1:84e347a:                 // above close call , will also 
1:84e347a:                 // close the lobInputStream
1:84e347a:             } else {
1:84e347a:                 if (lobInputStream != null)
1:84e347a:                     lobInputStream.close();
1:84e347a:             }
1:84e347a:         }
1:84e347a:     }
1:84e347a: }
1:84e347a: 
1:84e347a: 
1:84e347a: /**
1:84e347a:  * An InputStream, which can stream data from a file, starting from 
1:84e347a:  * any offset in the file. This stream operates on top of a 
1:84e347a:  * RandomAccessFile object. This class overrides InputStream methods to 
1:84e347a:  * read from the given RandomAccessFile and provides an addtional method
1:0ea0f3d:  * <code>seek(..)</code> to position the stream at offset in the file. 
1:84e347a:  */
1:84e347a: class ImportFileInputStream extends InputStream 
1:84e347a: {
1:84e347a: 
1:84e347a:     private RandomAccessFile raf = null;
1:84e347a:     private long currentPosition = 0 ;
1:84e347a:     private long fileLength = 0;
1:84e347a: 
1:84e347a:     /**
1:0ea0f3d:      * Create a <code>ImportFileInputStream</code> object for 
1:0ea0f3d:      * the given file.  
1:84e347a:      * @param raf  file the stream reads from. 
1:84e347a:      * @exception  IOException  if any I/O error occurs.
1:84e347a:      */
1:84e347a:     ImportFileInputStream(RandomAccessFile raf)  
1:84e347a:         throws IOException
1:84e347a:     {
1:84e347a:         this.raf = raf;
1:84e347a:         this.fileLength = raf.length();
1:84e347a:     }
1:84e347a: 
1:0ea0f3d:     /**
1:0ea0f3d:      * Sets the file offset at which the next read will occur. 
1:84e347a:      * @param offset byte offset in the file.
1:84e347a:      * @exception  IOException  if an I/O error occurs.     
1:84e347a:      */
1:84e347a:     void seek(long offset) throws IOException {
1:84e347a:         raf.seek(offset);
1:84e347a:         currentPosition = offset;
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:0ea0f3d:     /* Override the following InputStream-methods to
1:0ea0f3d:      * read data from the current postion of the file.
1:84e347a:      */
1:84e347a:     
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Reads a byte of data from this input stream. 
1:84e347a:      * @exception  IOException  if an I/O error occurs.
1:84e347a:      */
1:84e347a:     public int read() throws IOException {
1:84e347a:         return raf.read();
1:84e347a:     }
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Reads up to <code>length</code> bytes of data from this input stream
1:84e347a:      * into given array. This method blocks until some input is
1:84e347a:      * available.
1:84e347a:      *
1:84e347a:      * @param      buf     the buffer into which the data is read.
1:84e347a:      * @param      offset   the start offset of the data.
1:84e347a:      * @param      length   the maximum number of bytes read.
1:84e347a:      * @return     the total number of bytes read into the buffer, or
1:84e347a:      *             <code>-1</code> if there is no more data because the end of
1:84e347a:      *             the file has been reached.
1:84e347a:      * @exception  IOException  if an I/O error occurs.
1:84e347a:      */
1:84e347a:     public int read(byte buf[], int offset, int length) throws IOException {
1:84e347a:         return raf.read(buf, offset, length);
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Returns the number of bytes that can be read from this stream.
1:84e347a:      * @return     the number of bytes that can be read from this stream.
1:84e347a:      * @exception  IOException  if an I/O error occurs.
1:84e347a:      */
1:84e347a:     public int available() throws IOException
1:84e347a:     {
1:84e347a:         return (int) (fileLength - currentPosition);
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Closes this input stream and releases any associated resources
1:84e347a:      * @exception  IOException  if an I/O error occurs.
1:84e347a:      */
1:84e347a:     public void close() throws IOException {
1:84e347a:         if (raf != null)
1:84e347a:             raf.close();
1:84e347a:     }   
1:84e347a: }
1:84e347a: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:62ab900
/////////////////////////////////////////////////////////////////////////
1:     public String getString(long offset, int length) throws IOException {
1:         lobLimitIn.setLimit(length);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:400f6eb
/////////////////////////////////////////////////////////////////////////
1:                 lobRaf = AccessController.doPrivileged
1:                 (new java.security.PrivilegedExceptionAction<RandomAccessFile>(){
1:                         public RandomAccessFile run() throws IOException{
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0ea0f3d
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param lobFile the file which has the LOB Data.
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @exception Exception if an error occurs.     
/////////////////////////////////////////////////////////////////////////
1:         // Set up stream to read from input file, starting from 
1:         // required for this stream to have the ability to read
1:         // from any offset in the file. 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * given <code>offset</code>.
1:      *
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the clob data at the given location as <code>String</code>. 
/////////////////////////////////////////////////////////////////////////
1:     /** 
1:      * given <code>offset</code>.
/////////////////////////////////////////////////////////////////////////
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Close all the resources realated to the lob file.
/////////////////////////////////////////////////////////////////////////
1:  * <code>seek(..)</code> to position the stream at offset in the file. 
/////////////////////////////////////////////////////////////////////////
1:      * Create a <code>ImportFileInputStream</code> object for 
1:      * the given file.  
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the file offset at which the next read will occur. 
/////////////////////////////////////////////////////////////////////////
1:     /* Override the following InputStream-methods to
1:      * read data from the current postion of the file.
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:e17a43d
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.RandomAccessFile;
1: import java.io.InputStreamReader;
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.io.Reader;
1: import java.io.FileNotFoundException;
1: import org.apache.derby.iapi.error.PublicAPI;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0:      * @param lobFile  the file which has the LOB Data.
1:      * @param dataCodeset the code set to use char data in the file.
1:     ImportLobFile(File lobFile, String dataCodeset) throws Exception {
1:         openLobFile(lobFile);
1:      * @param lobFile the file that contains lob data.
1:     private void openLobFile(final File lobFile) 
/////////////////////////////////////////////////////////////////////////
1:                             return new RandomAccessFile(lobFile, "r");
/////////////////////////////////////////////////////////////////////////
1:             throw PublicAPI.wrapStandardException(
1:                       StandardException.newException(
1:                       SQLState.LOB_DATA_FILE_NOT_FOUND, 
1:                       lobFile.getPath()));
commit:3568cea
/////////////////////////////////////////////////////////////////////////
1:    
/////////////////////////////////////////////////////////////////////////
1:         
1:         // wrap a reader on top of the stream, so that calls 
1:         // to read the clob data from the file can read the 
1:         // with approapriate  data code set. 
1:         lobReader = dataCodeset == null ?
1:     		new InputStreamReader(lobLimitIn) : 
1:             new InputStreamReader(lobLimitIn, dataCodeset);    
/////////////////////////////////////////////////////////////////////////
1:      * Returns a stream that points to the clob data from file at the 
0:      * given <code> offset </code>.
1:      * @param offset  byte offset of the column data in the file. 
1:      * @param length  length of the the data in bytes.
1:      * @exception  IOException  on any I/O error.     
1:      */
1:     public java.io.Reader getCharacterStream(long offset, long length) 
1:         throws IOException 
1:     {
1:         lobInputStream.seek(offset);
1:         lobLimitIn.clearLimit();
1:         lobLimitIn.setLimit((int) length);
1: 
1:         // wrap a reader on top of the stream, so that calls 
1:         // to read the clob data from the file can read the 
1:         // with approapriate  data code set. 
1:         lobReader = dataCodeset == null ?
1:     		new InputStreamReader(lobLimitIn) : 
1:             new InputStreamReader(lobLimitIn, dataCodeset);    
1: 
1:         return lobReader;
1:     }
1: 
1:     /*
1:      * Returns the clob data length in characters at the give location. 
1:      * @param offset  byte offset of the column data in the file. 
1:      * @param length  length of the the data in bytes.
1:      * @exception  IOException  on any I/O error.     
1:      */
1:     public long getClobDataLength(long offset, long length) throws IOException {
1:         lobInputStream.seek(offset);
1:         lobLimitIn.clearLimit();
1:         lobLimitIn.setLimit((int) length);
1:         
1:         // wrap a reader on top of the stream, so that calls 
1:         // to read the clob data from the file can read the 
1:         // with approapriate  data code set. 
1:         lobReader = dataCodeset == null ?
1:             new InputStreamReader(lobLimitIn) : 
1:             new InputStreamReader(lobLimitIn, dataCodeset);   
1: 
1:         // find the length in characters 
1:         char[] buf= new char[1024];
1:         long lengthInChars = 0;
1:         int noChars = lobReader.read(buf , 0 , 1024);
1:         while (noChars != -1) {
1:             lengthInChars += noChars;
1:             noChars = lobReader.read(buf , 0 , 1024);
1:         }
1:         
1:         return lengthInChars;
1:     }
1: 
1:     /* 
commit:84e347a
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derby.impl.load.ImportLobFile
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
0: import java.io.*;
1: import org.apache.derby.iapi.services.io.LimitInputStream;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: 
1: 
1: /**
1:  * Helper class to read large object data at random locations 
1:  * from a file that contains large object data. 
1:  */
1: 
1: class ImportLobFile 
1: {
1:     private ImportFileInputStream lobInputStream = null;
1:     private LimitInputStream  lobLimitIn;
1:     private Reader lobReader = null;
0:     private String lobFileName;
1:     private String dataCodeset; 
1:     
1: 
0:     /*
1:      * Create a ImportLobFile object.
0:      * @param fileName  the file which gas LOB Data.
0:      * @param  dataCodeset the code set to use char data in the file.
1:      */
0:     ImportLobFile(String fileName, String dataCodeset) throws Exception {
0:         this.lobFileName = fileName;
1:         this.dataCodeset = dataCodeset;
0:         openLobFile(lobFileName);
1:     }
1: 
1: 
0:     /* 
1:      * Open the lob file and setup the stream required to read the data.
0:      * @param lobFileName name of the file that contains lob data.
0:      * @exception  Exception  if an error occurs.     
1:      */
0:     private void openLobFile(final String lobFileName) 
1:         throws Exception 
1:     {
1:         RandomAccessFile lobRaf;
1:         try {
1:             // open the lob file under a privelged block.
1:             try {
0:                 lobRaf = (RandomAccessFile)AccessController.doPrivileged
0:                 (new java.security.PrivilegedExceptionAction(){
0:                         public Object run() throws IOException{
0:                             return new RandomAccessFile(lobFileName, "r");
1:                         }   
1:                     }
1:                  );    	
1:             } catch (PrivilegedActionException pae) {
1:                 throw pae.getException();
1:             }
1:         } catch (FileNotFoundException ex) {
0:             throw LoadError.dataFileNotFound(lobFileName);
1:         } 
1:         
0:         // set up stream to read from input file, starting from 
1:         // any offset in the file. Users can specify columns in 
1:         // any order or skip some during import. So it is 
0:         // is required  for this stream have ability to read from 
0:         // any offset in the file. 
1: 
1:         lobInputStream = new ImportFileInputStream(lobRaf);
1: 
1:         // wrap the lobInputStream with a LimitInputStream class,
1:         // This will help in making sure only the specific amout 
1:         // of data is read from the file, for example to read one 
1:         // column data from the file. 
1:         lobLimitIn = new  LimitInputStream(lobInputStream);
1: 
0:         // setup a reader on top of the stream, so that calls 
0:         // to read the clob data from the file can read the 
0:         // with approapriate  data code set. 
0:         lobReader = dataCodeset == null ?
0:     		new InputStreamReader(lobLimitIn) : 
0:             new InputStreamReader(lobLimitIn, dataCodeset);    
1:     }
1: 
1: 
0:     /*
1:      * Returns a stream that points to the lob data from file at the 
0:      * given <code> offset </code>.
0:      * at the specified offset. 
1:      * @param offset  byte offset of the column data in the file. 
1:      * @param length  length of the the data.
1:      * @exception  IOException  if any I/O error occurs.     
1:      */
1:     public InputStream getBinaryStream(long offset, long length) 
1:         throws IOException {
1:         lobInputStream.seek(offset);
1:         lobLimitIn.clearLimit();
1:         lobLimitIn.setLimit((int) length);
1:         return lobLimitIn;
1:     }
1: 
1: 
0:     /* 
0:      * Returns the clob data at the given location as String. 
1:      * @param offset  byte offset of the column data in the file. 
1:      * @param length  length of the the data.
1:      * @exception  IOException  on any I/O error.     
1:      */
0:     public String getString(int offset, int length) throws IOException {
1:         lobInputStream.seek(offset);
1:         lobLimitIn.clearLimit();
1:         lobLimitIn.setLimit((int) length);
1: 
1:         // read data from the file, and return it as string. 
1:         StringBuffer sb = new StringBuffer();
1:         char[] buf= new char[1024];
1:         int noChars = lobReader.read(buf , 0 , 1024);
1:         while (noChars != -1) {
1:             sb.append(buf , 0 , noChars);
1:             noChars = lobReader.read(buf , 0 , 1024);
1:         }
1: 		return sb.toString();
1:     }
1: 
1: 
0:     /* 
0:      * close all the resources realate to the lob file.
1:      */
1:     public void close() throws IOException {
1: 
1:         if (lobReader != null) {
1:             lobReader.close();
1:             // above call also will close the 
1:             // stream under it. 
1:         } else {
1: 
1:             if (lobLimitIn != null) {
1:                 lobLimitIn.close();
1:                 // above close call , will also 
1:                 // close the lobInputStream
1:             } else {
1:                 if (lobInputStream != null)
1:                     lobInputStream.close();
1:             }
1:         }
1:     }
1: }
1: 
1: 
1: /**
1:  * An InputStream, which can stream data from a file, starting from 
1:  * any offset in the file. This stream operates on top of a 
1:  * RandomAccessFile object. This class overrides InputStream methods to 
1:  * read from the given RandomAccessFile and provides an addtional method
0:  * <code> seek(..) </code> to postion the stream at offset in the file. 
1:  */
1: 
1: class ImportFileInputStream extends InputStream 
1: {
1: 
1:     private RandomAccessFile raf = null;
1:     private long currentPosition = 0 ;
1:     private long fileLength = 0;
1: 
1:     /**
0:      * Create a <code> ImportFileInputStreamm object  </code> for 
0:      * the given  file.  
1:      * @param raf  file the stream reads from. 
1:      * @exception  IOException  if any I/O error occurs.
1:      */
1:     ImportFileInputStream(RandomAccessFile raf)  
1:         throws IOException
1:     {
1:         this.raf = raf;
1:         this.fileLength = raf.length();
1:     }
1: 
0:     /*
0:      * sets the file offset at which the next read will occur. 
1:      * @param offset byte offset in the file.
1:      * @exception  IOException  if an I/O error occurs.     
1:      */
1:     void seek(long offset) throws IOException {
1:         raf.seek(offset);
1:         currentPosition = offset;
1:     }
1: 
1: 
0:     /** overide following input stream methods to read data from the 
0:      *  from the current postion of the file. 
1:      */
1:     
1: 
1:     /**
1:      * Reads a byte of data from this input stream. 
1:      * @exception  IOException  if an I/O error occurs.
1:      */
1:     public int read() throws IOException {
1:         return raf.read();
1:     }
1: 
1:     /**
1:      * Reads up to <code>length</code> bytes of data from this input stream
1:      * into given array. This method blocks until some input is
1:      * available.
1:      *
1:      * @param      buf     the buffer into which the data is read.
1:      * @param      offset   the start offset of the data.
1:      * @param      length   the maximum number of bytes read.
1:      * @return     the total number of bytes read into the buffer, or
1:      *             <code>-1</code> if there is no more data because the end of
1:      *             the file has been reached.
1:      * @exception  IOException  if an I/O error occurs.
1:      */
1:     public int read(byte buf[], int offset, int length) throws IOException {
1:         return raf.read(buf, offset, length);
1:     }
1: 
1: 
1:     /**
1:      * Returns the number of bytes that can be read from this stream.
1:      * @return     the number of bytes that can be read from this stream.
1:      * @exception  IOException  if an I/O error occurs.
1:      */
1:     public int available() throws IOException
1:     {
1:         return (int) (fileLength - currentPosition);
1:     }
1: 
1: 
1:     /**
1:      * Closes this input stream and releases any associated resources
1:      * @exception  IOException  if an I/O error occurs.
1:      */
1:     public void close() throws IOException {
1:         if (raf != null)
1:             raf.close();
1:     }   
1: }
1: 
============================================================================