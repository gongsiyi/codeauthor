1:b8d1d8a: /*
1:b8d1d8a: 
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.init.Initializer
1:b8d1d8a: 
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a: 
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a: 
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a: 
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.init;
1:b8d1d8a: 
1:b8d1d8a: import java.sql.SQLException;
1:b8d1d8a: import java.sql.DriverManager;
1:b8d1d8a: import java.sql.Connection;
1:b8d1d8a: 
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.NsTest;
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.utils.DbUtil;
1:b8d1d8a: 
1:b8d1d8a: /**
1:b8d1d8a:  * Initializer: Main Class that populates the tables needed for the test
1:b8d1d8a:  */
1:b8d1d8a: public class Initializer {
1:b8d1d8a: 
1:b8d1d8a: 	private String thread_id;
1:b8d1d8a: 
1:b8d1d8a: 	private DbUtil dbutil;
1:b8d1d8a: 
1:b8d1d8a: 	public Initializer(String name) {
1:b8d1d8a: 		this.thread_id = name;
1:b8d1d8a: 		dbutil = new DbUtil(this.thread_id);
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	// This starts the acutal inserts
1:b8d1d8a: 	public void startInserts() {
1:b8d1d8a: 
1:b8d1d8a: 		Connection conn = null;
1:b8d1d8a: 		int insertsRemaining = NsTest.MAX_INITIAL_ROWS;
1:b8d1d8a: 
1:b8d1d8a: 		// The JDBC driver should have been loaded by nstest.java at this
1:e276048: 		// point, we just need to get a connection to the database
1:b8d1d8a: 		try {
1:b8d1d8a: 
1:c043274: 			NsTest.logger.println(thread_id
1:b8d1d8a: 					+ " is getting a connection to the database...");
1:b8d1d8a: 
1:b8d1d8a: 			if (NsTest.embeddedMode) {
1:b8d1d8a: 				conn = DriverManager.getConnection(NsTest.embedDbURL,
1:b8d1d8a: 						NsTest.prop);
1:b8d1d8a: 			} else {
1:b8d1d8a: 				if(NsTest.driver_type.equalsIgnoreCase("DerbyClient")) {
1:c043274: 					NsTest.logger.println("-->Using derby client url");
1:b8d1d8a: 					conn = DriverManager.getConnection(NsTest.clientDbURL,
1:b8d1d8a: 							NsTest.prop);
1:b8d1d8a: 				}
1:b8d1d8a: 			}
1:b8d1d8a: 		} catch (Exception e) {
1:c043274: 			NsTest.logger.println("FAIL: " + thread_id
1:b8d1d8a: 					+ " could not get the database connection");
1:b8d1d8a: 			printException("getting database connection in startInserts()", e);
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		// add one to the statistics of client side connections made per jvm
1:b8d1d8a: 		NsTest.addStats(NsTest.CONNECTIONS_MADE, 1);
1:c043274: 		NsTest.logger.println("Connection number: " + NsTest.numConnections);
1:b8d1d8a: 
1:b8d1d8a: 		// set autocommit to false to keep transaction control in your hand
1:b8d1d8a: 		if (NsTest.AUTO_COMMIT_OFF) {
1:b8d1d8a: 			try {
1:b8d1d8a: 
1:b8d1d8a: 				conn.setAutoCommit(false);
1:b8d1d8a: 			} catch (Exception e) {
1:c043274: 				NsTest.logger.println("FAIL: " + thread_id
1:b8d1d8a: 						+ "'s setAutoCommit() failed:");
1:b8d1d8a: 				printException("setAutoCommit() in Initializer", e);
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		while (insertsRemaining-- >= 0) {
1:b8d1d8a: 			try {
1:b8d1d8a: 				int numInserts = dbutil.add_one_row(conn, thread_id);
1:c043274: 				//NsTest.logger.println("Intializer.java: exited add_one_row: "
1:e276048: 				//		+ numInserts + " rows");
1:b8d1d8a: 			} catch (Exception e) {
1:c043274: 				NsTest.logger.println(" FAIL: " + thread_id
1:b8d1d8a: 						+ " unexpected exception:");
1:b8d1d8a: 				printException("add_one_row() in Initializer", e);
1:b8d1d8a: 				break;
1:b8d1d8a: 			}
1:b8d1d8a: 		}// end of while(insertsRemaning-- > 0)
1:b8d1d8a: 
1:b8d1d8a: 		// commit the huge bulk Insert!
1:b8d1d8a: 		if (NsTest.AUTO_COMMIT_OFF) {
1:b8d1d8a: 			try {
1:b8d1d8a: 				conn.commit();
1:b8d1d8a: 			} catch (Exception e) {
1:c043274: 				NsTest.logger
1:b8d1d8a: 						.println("FAIL: " + thread_id + "'s commit() failed:");
1:b8d1d8a: 				printException("commit in Initializer", e);
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 	}// end of startInserts()
1:b8d1d8a: 
1:b8d1d8a: 	// ** This method abstracts exception message printing for all exception
1:b8d1d8a: 	// messages. You may want to change
1:b8d1d8a: 	// ****it if more detailed exception messages are desired.
1:b8d1d8a: 	// ***Method is synchronized so that the output file will contain sensible
1:b8d1d8a: 	// stack traces that are not
1:b8d1d8a: 	// ****mixed but rather one exception printed at a time
1:b8d1d8a: 	public synchronized void printException(String where, Exception e) {
1:c043274:         if ( NsTest.justCountErrors() )
1:c043274:         {
1:c043274:             NsTest.addError( e );
1:c043274:             return;
1:c043274:         }
1:c043274: 
1:b8d1d8a: 		if (e instanceof SQLException) {
1:b8d1d8a: 			SQLException se = (SQLException) e;
1:b8d1d8a: 
1:b8d1d8a: 			if (se.getSQLState().equals("40001"))
1:c043274: 				NsTest.logger.println("deadlocked detected");
1:b8d1d8a: 			if (se.getSQLState().equals("40XL1"))
1:c043274: 				NsTest.logger.println(" lock timeout exception");
1:b8d1d8a: 			if (se.getSQLState().equals("23500"))
1:c043274: 				NsTest.logger.println(" duplicate key violation");
1:b8d1d8a: 			if (se.getNextException() != null) {
1:b8d1d8a: 				String m = se.getNextException().getSQLState();
1:c043274: 				NsTest.logger.println(se.getNextException().getMessage()
1:b8d1d8a: 						+ " SQLSTATE: " + m);
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:0a66fd0: 		if (e.getMessage() == null) {
1:c043274: 			e.printStackTrace( NsTest.logger );
1:b8d1d8a: 		}
1:c043274: 		NsTest.logger.println("During - " + where
1:b8d1d8a: 				+ ", the exception thrown was : " + e.getMessage());
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 			NsTest.logger.println(thread_id
/////////////////////////////////////////////////////////////////////////
1: 					NsTest.logger.println("-->Using derby client url");
1: 			NsTest.logger.println("FAIL: " + thread_id
1: 		NsTest.logger.println("Connection number: " + NsTest.numConnections);
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println("FAIL: " + thread_id
/////////////////////////////////////////////////////////////////////////
1: 				//NsTest.logger.println("Intializer.java: exited add_one_row: "
1: 				NsTest.logger.println(" FAIL: " + thread_id
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger
/////////////////////////////////////////////////////////////////////////
1:         if ( NsTest.justCountErrors() )
1:         {
1:             NsTest.addError( e );
1:             return;
1:         }
1: 
1: 				NsTest.logger.println("deadlocked detected");
1: 				NsTest.logger.println(" lock timeout exception");
1: 				NsTest.logger.println(" duplicate key violation");
1: 				NsTest.logger.println(se.getNextException().getMessage()
1: 			e.printStackTrace( NsTest.logger );
1: 		NsTest.logger.println("During - " + where
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:e276048
/////////////////////////////////////////////////////////////////////////
1: 		// point, we just need to get a connection to the database
/////////////////////////////////////////////////////////////////////////
0: 				//System.out.println("Intializer.java: exited add_one_row: "
1: 				//		+ numInserts + " rows");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0a66fd0
/////////////////////////////////////////////////////////////////////////
1: 		if (e.getMessage() == null) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.init.Initializer
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.init;
1: 
1: import java.sql.SQLException;
1: import java.sql.DriverManager;
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: import org.apache.derbyTesting.system.nstest.utils.DbUtil;
1: 
1: /**
1:  * Initializer: Main Class that populates the tables needed for the test
1:  */
1: public class Initializer {
1: 
1: 	private String thread_id;
1: 
1: 	private DbUtil dbutil;
1: 
1: 	public Initializer(String name) {
1: 		this.thread_id = name;
1: 		dbutil = new DbUtil(this.thread_id);
1: 	}
1: 
1: 	// This starts the acutal inserts
1: 	public void startInserts() {
1: 
1: 		Connection conn = null;
1: 		int insertsRemaining = NsTest.MAX_INITIAL_ROWS;
1: 
1: 		// The JDBC driver should have been loaded by nstest.java at this
0: 		// point, we just need
0: 		// to get a connection to the database
1: 		try {
1: 
0: 			System.out.println(thread_id
1: 					+ " is getting a connection to the database...");
1: 
1: 			if (NsTest.embeddedMode) {
1: 				conn = DriverManager.getConnection(NsTest.embedDbURL,
1: 						NsTest.prop);
1: 			} else {
1: 				if(NsTest.driver_type.equalsIgnoreCase("DerbyClient")) {
0: 					System.out.println("-->Using derby client url");
1: 					conn = DriverManager.getConnection(NsTest.clientDbURL,
1: 							NsTest.prop);
1: 				}
1: 			}
1: 		} catch (Exception e) {
0: 			System.out.println("FAIL: " + thread_id
1: 					+ " could not get the database connection");
1: 			printException("getting database connection in startInserts()", e);
1: 		}
1: 
1: 		// add one to the statistics of client side connections made per jvm
1: 		NsTest.addStats(NsTest.CONNECTIONS_MADE, 1);
0: 		System.out.println("Connection number: " + NsTest.numConnections);
1: 
1: 		// set autocommit to false to keep transaction control in your hand
1: 		if (NsTest.AUTO_COMMIT_OFF) {
1: 			try {
1: 
1: 				conn.setAutoCommit(false);
1: 			} catch (Exception e) {
0: 				System.out.println("FAIL: " + thread_id
1: 						+ "'s setAutoCommit() failed:");
1: 				printException("setAutoCommit() in Initializer", e);
1: 			}
1: 		}
1: 
1: 		while (insertsRemaining-- >= 0) {
1: 			try {
1: 				int numInserts = dbutil.add_one_row(conn, thread_id);
0: 				System.out.println("Intializer.java: exited add_one_row: "
0: 						+ numInserts + " rows");
1: 			} catch (Exception e) {
0: 				System.out.println(" FAIL: " + thread_id
1: 						+ " unexpected exception:");
1: 				printException("add_one_row() in Initializer", e);
1: 				break;
1: 			}
1: 		}// end of while(insertsRemaning-- > 0)
1: 
1: 		// commit the huge bulk Insert!
1: 		if (NsTest.AUTO_COMMIT_OFF) {
1: 			try {
1: 				conn.commit();
1: 			} catch (Exception e) {
0: 				System.out
1: 						.println("FAIL: " + thread_id + "'s commit() failed:");
1: 				printException("commit in Initializer", e);
1: 			}
1: 		}
1: 
1: 	}// end of startInserts()
1: 
1: 	// ** This method abstracts exception message printing for all exception
1: 	// messages. You may want to change
1: 	// ****it if more detailed exception messages are desired.
1: 	// ***Method is synchronized so that the output file will contain sensible
1: 	// stack traces that are not
1: 	// ****mixed but rather one exception printed at a time
1: 	public synchronized void printException(String where, Exception e) {
1: 		if (e instanceof SQLException) {
1: 			SQLException se = (SQLException) e;
1: 
1: 			if (se.getSQLState().equals("40001"))
0: 				System.out.println("deadlocked detected");
1: 			if (se.getSQLState().equals("40XL1"))
0: 				System.out.println(" lock timeout exception");
1: 			if (se.getSQLState().equals("23500"))
0: 				System.out.println(" duplicate key violation");
1: 			if (se.getNextException() != null) {
1: 				String m = se.getNextException().getSQLState();
0: 				System.out.println(se.getNextException().getMessage()
1: 						+ " SQLSTATE: " + m);
1: 			}
1: 		}
0: 		if (e.getMessage().equals(null)) {
0: 			e.printStackTrace(System.out);
1: 		}
0: 		System.out.println("During - " + where
1: 				+ ", the exception thrown was : " + e.getMessage());
1: 	}
1: 
1: }
============================================================================