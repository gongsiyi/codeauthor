1:d34116d: /*
1:d34116d:  * Derby - Class org.apache.derbyTesting.functionTests.util.Barrier
1:d34116d:  *
1:d34116d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d34116d:  * contributor license agreements.  See the NOTICE file distributed with
1:d34116d:  * this work for additional information regarding copyright ownership.
1:d34116d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d34116d:  * (the "License"); you may not use this file except in compliance with
1:d34116d:  * the License.  You may obtain a copy of the License at
1:d34116d:  *
1:d34116d:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d34116d:  *
1:d34116d:  * Unless required by applicable law or agreed to in writing,
1:d34116d:  * software distributed under the License is distributed on an
1:d34116d:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:d34116d:  * either express or implied. See the License for the specific
1:d34116d:  * language governing permissions and limitations under the License.
1:d34116d:  */
1:d34116d: 
1:d34116d: package org.apache.derbyTesting.functionTests.util;
1:d34116d: 
1:d34116d: import junit.framework.Assert;
1:d34116d: 
1:d34116d: /**
1:d34116d:  * In the absence of java.util.concurrent.CyclicBarrier on some of the
1:d34116d:  * platforms we test, create our own barrier class. This class allows
1:d34116d:  * threads to wait for one another on specific locations, so that they
1:d34116d:  * know they're all in the expected state.
1:d34116d:  */
1:d34116d: public class Barrier {
1:d34116d:     /** Number of threads to wait for at the barrier. */
1:d34116d:     private int numThreads;
1:d34116d: 
1:d34116d:     /** Create a barrier for the specified number of threads. */
1:d34116d:     public Barrier(int numThreads) {
1:d34116d:         this.numThreads = numThreads;
1:d34116d:     }
1:d34116d: 
1:d34116d:     /**
1:d34116d:      * Wait until {@code numThreads} have called {@code await()} on this
1:d34116d:      * barrier, then proceed.
1:d34116d:      *
1:d34116d:      * @throws InterruptedException if the thread is interrupted while
1:d34116d:      * waiting for the other threads to reach the barrier.
1:d34116d:      */
1:d34116d:     public synchronized void await() throws InterruptedException {
1:d34116d:         Assert.assertTrue(
1:d34116d:                 "Too many threads reached the barrier", numThreads > 0);
1:d34116d: 
1:d34116d:         if (--numThreads <= 0) {
1:d34116d:             // All threads have reached the barrier. Go ahead!
1:d34116d:             notifyAll();
1:d34116d:         }
1:d34116d: 
1:d34116d:         // Some threads haven't reached the barrier yet. Let's wait.
1:d34116d:         while (numThreads > 0) {
1:d34116d:             wait();
1:d34116d:         }
1:d34116d:     }
1:d34116d: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d34116d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.Barrier
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import junit.framework.Assert;
1: 
1: /**
1:  * In the absence of java.util.concurrent.CyclicBarrier on some of the
1:  * platforms we test, create our own barrier class. This class allows
1:  * threads to wait for one another on specific locations, so that they
1:  * know they're all in the expected state.
1:  */
1: public class Barrier {
1:     /** Number of threads to wait for at the barrier. */
1:     private int numThreads;
1: 
1:     /** Create a barrier for the specified number of threads. */
1:     public Barrier(int numThreads) {
1:         this.numThreads = numThreads;
1:     }
1: 
1:     /**
1:      * Wait until {@code numThreads} have called {@code await()} on this
1:      * barrier, then proceed.
1:      *
1:      * @throws InterruptedException if the thread is interrupted while
1:      * waiting for the other threads to reach the barrier.
1:      */
1:     public synchronized void await() throws InterruptedException {
1:         Assert.assertTrue(
1:                 "Too many threads reached the barrier", numThreads > 0);
1: 
1:         if (--numThreads <= 0) {
1:             // All threads have reached the barrier. Go ahead!
1:             notifyAll();
1:         }
1: 
1:         // Some threads haven't reached the barrier yet. Let's wait.
1:         while (numThreads > 0) {
1:             wait();
1:         }
1:     }
1: }
============================================================================