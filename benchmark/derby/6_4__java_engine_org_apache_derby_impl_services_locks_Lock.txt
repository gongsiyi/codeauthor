1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.locks.Lock
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.locks;
1:eac0369: 
1:3c1f634: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: import org.apache.derby.iapi.services.locks.Latch;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.util.List;
1:b3eb01a: import java.util.Map;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A Lock represents a granted or waiting lock request.
1:eac0369: 
1:eac0369: 	<BR>
1:eac0369: 	MT - Mutable - Immutable identity : Thread Aware
1:eac0369: */
1:eac0369: 
1:7b8eea6: class Lock implements Latch, Control {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Compatibility space the object is locked in.
1:eac0369: 		MT - immutable - reference only
1:eac0369: 	*/
1:3c1f634: 	private final CompatibilitySpace space;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Object being locked.
1:eac0369: 		MT - immutable - reference only
1:eac0369: 	*/
1:eac0369: 	private final Lockable	ref;
1:eac0369: 	/**
1:eac0369: 		Qualifier used in the lock request..
1:eac0369: 		MT - immutable - reference only
1:eac0369: 	*/
1:eac0369: 	private final Object	qualifier;
1:eac0369: 
1:eac0369: 	int count;
1:eac0369: 
1:3c1f634: 	protected Lock(CompatibilitySpace space, Lockable ref, Object qualifier) {
1:eac0369: 		super();
1:eac0369: 		this.space = space;
1:eac0369: 		this.ref = ref;
1:eac0369: 		this.qualifier = qualifier;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the object this lock is held on
1:eac0369: 
1:eac0369: 		MT - Thread safe
1:eac0369: 	*/
1:eac0369: 	public final Lockable getLockable() {
1:eac0369: 		return ref;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:3c1f634: 		Return the compatibility space this lock is held in.
1:eac0369: 
1:eac0369: 		MT - Thread safe
1:eac0369: 	*/
1:3c1f634: 	public final CompatibilitySpace getCompatabilitySpace() {
1:eac0369: 		return space;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the qualifier lock was obtained with.
1:eac0369: 
1:eac0369: 		MT - Thread safe
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public final Object getQualifier() {
1:eac0369: 		return qualifier;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the count of locks.
1:eac0369: 
1:eac0369: 		MT - Thread safe
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public final int getCount() {
1:eac0369: 		return count;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// make a copy of this lock with the count set to zero, copies are only
1:eac0369: 	// to be used in the LockSpace code.
1:eac0369: 	final Lock copy() {
1:eac0369: 
1:eac0369: 		return new Lock(space, ref, qualifier);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void grant() {
1:eac0369: 
1:eac0369: 		count++;
1:eac0369: 
1:eac0369: 		// Tell the object it has been locked by this type of qualifier.
1:eac0369: 		ref.lockEvent(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	int unlock(int unlockCount) {
1:eac0369: 
1:eac0369: 		if (unlockCount > count)
1:eac0369: 			unlockCount = count;
1:eac0369: 
1:eac0369: 		count -= unlockCount;
1:eac0369: 		if (count == 0) {
1:eac0369: 
1:eac0369: 			// Inform the object an unlock event occured with this qualifier
1:eac0369: 
1:eac0369: 			ref.unlockEvent(this);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return unlockCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of object
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public final int hashCode() {
1:eac0369: 
1:eac0369: 		// qualifier can be null so don't use it in hashCode
1:eac0369: 
1:eac0369: 		return ref.hashCode() ^ space.hashCode();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final boolean equals(Object other) {
1:eac0369: 
1:eac0369: 		if (other instanceof Lock) {
1:eac0369: 			Lock ol = (Lock) other;
1:eac0369: 
1:3c1f634: 			return (space == ol.space) && ref.equals(ol.ref)
1:3c1f634: 				&& (qualifier == ol.qualifier);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Control
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public LockControl getLockControl() {
1:eac0369: 		return new LockControl(this, ref);
1:eac0369: 	}
1:eac0369: 
1:3c1f634: 	public Lock getLock(CompatibilitySpace compatibilitySpace,
1:3c1f634: 						Object qualifier) {
1:3c1f634: 		if ((space == compatibilitySpace) && (this.qualifier == qualifier)) {
1:eac0369: 			return this;
1:3c1f634: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: //EXCLUDE-START-lockdiag- 
1:eac0369: 	/**
1:eac0369: 		We can return ourselves here because our identity
1:eac0369: 		is immutable and what we returned will not be accessed
1:eac0369: 		as a Lock, so the count cannot be changed.
1:eac0369: 	*/
1:eac0369: 	public Control shallowClone() {
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: //EXCLUDE-END-lockdiag- 
1:eac0369: 
1:eac0369: 	public ActiveLock firstWaiter() {
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isEmpty() {
1:eac0369: 		return count == 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean unlock(Latch lockInGroup, int unlockCount) {
1:eac0369: 
1:eac0369: 		if (unlockCount == 0)
1:eac0369: 			unlockCount = lockInGroup.getCount();
1:eac0369: 		
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (unlockCount > getCount())
1:eac0369: 				SanityManager.THROWASSERT(this + " unlockCount " + unlockCount + " is greater than lockCount " + getCount());
1:eac0369: 			if (!equals(lockInGroup))
1:eac0369: 				SanityManager.THROWASSERT(this + " mismatched locks " + lockInGroup);
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		unlock(unlockCount);
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:b3eb01a: 	public void addWaiters(Map waiters) {
1:eac0369: 	}
1:eac0369: 	public Lock getFirstGrant() {
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 	public List getGranted() {
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 	public List getWaiting() {
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:3c1f634:     public boolean isGrantable(boolean noWaitersBeforeMe,
1:3c1f634:                                CompatibilitySpace compatibilitySpace,
1:3c1f634:                                Object requestQualifier)
1:eac0369:     {
1:3c1f634: 		if ((space == compatibilitySpace) && ref.lockerAlwaysCompatible()) {
1:eac0369: 			return true;
1:3c1f634: 		}
1:eac0369: 
1:eac0369: 		return ref.requestCompatible(requestQualifier, this.qualifier);
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7b8eea6
/////////////////////////////////////////////////////////////////////////
1: class Lock implements Latch, Control {
commit:b3eb01a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 	public void addWaiters(Map waiters) {
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
/////////////////////////////////////////////////////////////////////////
1: 	private final CompatibilitySpace space;
/////////////////////////////////////////////////////////////////////////
1: 	protected Lock(CompatibilitySpace space, Lockable ref, Object qualifier) {
/////////////////////////////////////////////////////////////////////////
1: 		Return the compatibility space this lock is held in.
1: 	public final CompatibilitySpace getCompatabilitySpace() {
/////////////////////////////////////////////////////////////////////////
1: 			return (space == ol.space) && ref.equals(ol.ref)
1: 				&& (qualifier == ol.qualifier);
/////////////////////////////////////////////////////////////////////////
1: 	public Lock getLock(CompatibilitySpace compatibilitySpace,
1: 						Object qualifier) {
1: 		if ((space == compatibilitySpace) && (this.qualifier == qualifier)) {
1: 		}
/////////////////////////////////////////////////////////////////////////
1:     public boolean isGrantable(boolean noWaitersBeforeMe,
1:                                CompatibilitySpace compatibilitySpace,
1:                                Object requestQualifier)
1: 		if ((space == compatibilitySpace) && ref.lockerAlwaysCompatible()) {
1: 		}
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.locks.Lock
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: import org.apache.derby.iapi.services.locks.Latch;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.util.List;
1: 
1: /**
1: 	A Lock represents a granted or waiting lock request.
1: 
1: 	<BR>
1: 	MT - Mutable - Immutable identity : Thread Aware
1: */
1: 
0: public class Lock implements Latch, Control {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Compatibility space the object is locked in.
1: 		MT - immutable - reference only
1: 	*/
0: 	private final Object	space;
1: 
1: 	/**
1: 		Object being locked.
1: 		MT - immutable - reference only
1: 	*/
1: 	private final Lockable	ref;
1: 	/**
1: 		Qualifier used in the lock request..
1: 		MT - immutable - reference only
1: 	*/
1: 	private final Object	qualifier;
1: 
1: 	int count;
1: 
0: 	protected Lock(Object space, Lockable ref, Object qualifier) {
1: 		super();
1: 		this.space = space;
1: 		this.ref = ref;
1: 		this.qualifier = qualifier;
1: 	}
1: 
1: 	/**
1: 		Return the object this lock is held on
1: 
1: 		MT - Thread safe
1: 	*/
1: 	public final Lockable getLockable() {
1: 		return ref;
1: 	}
1: 
1: 	/**
0: 		Return the compatability space this lock is held in
1: 
1: 		MT - Thread safe
1: 	*/
0: 	public final Object getCompatabilitySpace() {
1: 		return space;
1: 	}
1: 
1: 	/**
1: 		Return the qualifier lock was obtained with.
1: 
1: 		MT - Thread safe
1: 	*/
1: 
1: 	public final Object getQualifier() {
1: 		return qualifier;
1: 	}
1: 
1: 	/**
1: 		Return the count of locks.
1: 
1: 		MT - Thread safe
1: 	*/
1: 
1: 	public final int getCount() {
1: 		return count;
1: 	}
1: 
1: 	// make a copy of this lock with the count set to zero, copies are only
1: 	// to be used in the LockSpace code.
1: 	final Lock copy() {
1: 
1: 		return new Lock(space, ref, qualifier);
1: 	}
1: 
1: 	void grant() {
1: 
1: 		count++;
1: 
1: 		// Tell the object it has been locked by this type of qualifier.
1: 		ref.lockEvent(this);
1: 	}
1: 
1: 	int unlock(int unlockCount) {
1: 
1: 		if (unlockCount > count)
1: 			unlockCount = count;
1: 
1: 		count -= unlockCount;
1: 		if (count == 0) {
1: 
1: 			// Inform the object an unlock event occured with this qualifier
1: 
1: 			ref.unlockEvent(this);
1: 		}
1: 
1: 		return unlockCount;
1: 	}
1: 
1: 	/*
1: 	** Methods of object
1: 	*/
1: 
1: 	public final int hashCode() {
1: 
1: 		// qualifier can be null so don't use it in hashCode
1: 
1: 		return ref.hashCode() ^ space.hashCode();
1: 	}
1: 
1: 	public final boolean equals(Object other) {
1: 
1: 		if (other instanceof Lock) {
1: 			Lock ol = (Lock) other;
1: 
0: 			return (space.equals(ol.space)) && ref.equals(ol.ref) && (qualifier == ol.qualifier);
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/*
1: 	** Methods of Control
1: 	*/
1: 
1: 	public LockControl getLockControl() {
1: 		return new LockControl(this, ref);
1: 	}
1: 
0: 	public Lock getLock(Object compatabilitySpace, Object qualifier) {
0: 		if (space.equals(compatabilitySpace) && (this.qualifier == qualifier))
1: 			return this;
1: 		return null;
1: 	}
1: 
1: //EXCLUDE-START-lockdiag- 
1: 	/**
1: 		We can return ourselves here because our identity
1: 		is immutable and what we returned will not be accessed
1: 		as a Lock, so the count cannot be changed.
1: 	*/
1: 	public Control shallowClone() {
1: 		return this;
1: 	}
1: //EXCLUDE-END-lockdiag- 
1: 
1: 	public ActiveLock firstWaiter() {
1: 		return null;
1: 	}
1: 
1: 	public boolean isEmpty() {
1: 		return count == 0;
1: 	}
1: 
1: 	public boolean unlock(Latch lockInGroup, int unlockCount) {
1: 
1: 		if (unlockCount == 0)
1: 			unlockCount = lockInGroup.getCount();
1: 		
1: 		if (SanityManager.DEBUG) {
1: 			if (unlockCount > getCount())
1: 				SanityManager.THROWASSERT(this + " unlockCount " + unlockCount + " is greater than lockCount " + getCount());
1: 			if (!equals(lockInGroup))
1: 				SanityManager.THROWASSERT(this + " mismatched locks " + lockInGroup);
1: 
1: 		}
1: 
1: 		unlock(unlockCount);
1: 
1: 		return false;
1: 	}
0: 	public void addWaiters(java.util.Dictionary waiters) {
1: 	}
1: 	public Lock getFirstGrant() {
1: 		return this;
1: 	}
1: 	public List getGranted() {
1: 		return null;
1: 	}
1: 	public List getWaiting() {
1: 		return null;
1: 	}
1: 
0:     public boolean isGrantable(boolean noWaitersBeforeMe, Object compatabilitySpace, Object  requestQualifier)
1:     {
0:         boolean sameSpace = space.equals(compatabilitySpace);
0: 		if (sameSpace && ref.lockerAlwaysCompatible())
1: 			return true;
1: 
1: 		return ref.requestCompatible(requestQualifier, this.qualifier);
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.locks;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.List;
0: 
0: /**
0: 	A Lock represents a granted or waiting lock request.
0: 
0: 	<BR>
0: 	MT - Mutable - Immutable identity : Thread Aware
0: */
0: 
0: public class Lock implements Latch, Control {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Compatibility space the object is locked in.
0: 		MT - immutable - reference only
0: 	*/
0: 	private final Object	space;
0: 
0: 	/**
0: 		Object being locked.
0: 		MT - immutable - reference only
0: 	*/
0: 	private final Lockable	ref;
0: 	/**
0: 		Qualifier used in the lock request..
0: 		MT - immutable - reference only
0: 	*/
0: 	private final Object	qualifier;
0: 
0: 	int count;
0: 
0: 	protected Lock(Object space, Lockable ref, Object qualifier) {
0: 		super();
0: 		this.space = space;
0: 		this.ref = ref;
0: 		this.qualifier = qualifier;
0: 	}
0: 
0: 	/**
0: 		Return the object this lock is held on
0: 
0: 		MT - Thread safe
0: 	*/
0: 	public final Lockable getLockable() {
0: 		return ref;
0: 	}
0: 
0: 	/**
0: 		Return the compatability space this lock is held in
0: 
0: 		MT - Thread safe
0: 	*/
0: 	public final Object getCompatabilitySpace() {
0: 		return space;
0: 	}
0: 
0: 	/**
0: 		Return the qualifier lock was obtained with.
0: 
0: 		MT - Thread safe
0: 	*/
0: 
0: 	public final Object getQualifier() {
0: 		return qualifier;
0: 	}
0: 
0: 	/**
0: 		Return the count of locks.
0: 
0: 		MT - Thread safe
0: 	*/
0: 
0: 	public final int getCount() {
0: 		return count;
0: 	}
0: 
0: 	// make a copy of this lock with the count set to zero, copies are only
0: 	// to be used in the LockSpace code.
0: 	final Lock copy() {
0: 
0: 		return new Lock(space, ref, qualifier);
0: 	}
0: 
0: 	void grant() {
0: 
0: 		count++;
0: 
0: 		// Tell the object it has been locked by this type of qualifier.
0: 		ref.lockEvent(this);
0: 	}
0: 
0: 	int unlock(int unlockCount) {
0: 
0: 		if (unlockCount > count)
0: 			unlockCount = count;
0: 
0: 		count -= unlockCount;
0: 		if (count == 0) {
0: 
0: 			// Inform the object an unlock event occured with this qualifier
0: 
0: 			ref.unlockEvent(this);
0: 		}
0: 
0: 		return unlockCount;
0: 	}
0: 
0: 	/*
0: 	** Methods of object
0: 	*/
0: 
0: 	public final int hashCode() {
0: 
0: 		// qualifier can be null so don't use it in hashCode
0: 
0: 		return ref.hashCode() ^ space.hashCode();
0: 	}
0: 
0: 	public final boolean equals(Object other) {
0: 
0: 		if (other instanceof Lock) {
0: 			Lock ol = (Lock) other;
0: 
0: 			return (space.equals(ol.space)) && ref.equals(ol.ref) && (qualifier == ol.qualifier);
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/*
0: 	** Methods of Control
0: 	*/
0: 
0: 	public LockControl getLockControl() {
0: 		return new LockControl(this, ref);
0: 	}
0: 
0: 	public Lock getLock(Object compatabilitySpace, Object qualifier) {
0: 		if (space.equals(compatabilitySpace) && (this.qualifier == qualifier))
0: 			return this;
0: 		return null;
0: 	}
0: 
0: //EXCLUDE-START-lockdiag- 
0: 	/**
0: 		We can return ourselves here because our identity
0: 		is immutable and what we returned will not be accessed
0: 		as a Lock, so the count cannot be changed.
0: 	*/
0: 	public Control shallowClone() {
0: 		return this;
0: 	}
0: //EXCLUDE-END-lockdiag- 
0: 
0: 	public ActiveLock firstWaiter() {
0: 		return null;
0: 	}
0: 
0: 	public boolean isEmpty() {
0: 		return count == 0;
0: 	}
0: 
0: 	public boolean unlock(Latch lockInGroup, int unlockCount) {
0: 
0: 		if (unlockCount == 0)
0: 			unlockCount = lockInGroup.getCount();
0: 		
0: 		if (SanityManager.DEBUG) {
0: 			if (unlockCount > getCount())
0: 				SanityManager.THROWASSERT(this + " unlockCount " + unlockCount + " is greater than lockCount " + getCount());
0: 			if (!equals(lockInGroup))
0: 				SanityManager.THROWASSERT(this + " mismatched locks " + lockInGroup);
0: 
0: 		}
0: 
0: 		unlock(unlockCount);
0: 
0: 		return false;
0: 	}
0: 	public void addWaiters(java.util.Dictionary waiters) {
0: 	}
0: 	public Lock getFirstGrant() {
0: 		return this;
0: 	}
0: 	public List getGranted() {
0: 		return null;
0: 	}
0: 	public List getWaiting() {
0: 		return null;
0: 	}
0: 
0:     public boolean isGrantable(boolean noWaitersBeforeMe, Object compatabilitySpace, Object  requestQualifier)
0:     {
0:         boolean sameSpace = space.equals(compatabilitySpace);
0: 		if (sameSpace && ref.lockerAlwaysCompatible())
0: 			return true;
0: 
0: 		return ref.requestCompatible(requestQualifier, this.qualifier);
0: 	}
0: }
0: 
============================================================================