1:477c183: /*
1:477c183: 
1:477c183:    Derby - Class org.apache.derbyPreBuild.PropertyPrompt
1:477c183: 
1:477c183:    Licensed to the Apache Software Foundation (ASF) under one or more
1:477c183:    contributor license agreements.  See the NOTICE file distributed with
1:477c183:    this work for additional information regarding copyright ownership.
1:477c183:    The ASF licenses this file to You under the Apache License, Version 2.0
1:477c183:    (the "License"); you may not use this file except in compliance with
1:477c183:    the License.  You may obtain a copy of the License at
1:477c183: 
1:477c183:       http://www.apache.org/licenses/LICENSE-2.0
1:477c183: 
1:477c183:    Unless required by applicable law or agreed to in writing, software
1:477c183:    distributed under the License is distributed on an "AS IS" BASIS,
1:477c183:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:477c183:    See the License for the specific language governing permissions and
1:477c183:    limitations under the License.
1:477c183: 
1:477c183:  */
1:477c183: 
1:477c183: package org.apache.derbyPreBuild;
1:477c183: 
1:477c183: import java.io.BufferedReader;
1:477c183: import java.io.InputStreamReader;
1:477c183: import java.io.IOException;
1:477c183: import java.util.Hashtable;
1:477c183: 
1:477c183: import org.apache.tools.ant.BuildException;
1:477c183: import org.apache.tools.ant.Project;
1:477c183: import org.apache.tools.ant.PropertyHelper;
1:477c183: import org.apache.tools.ant.Task;
1:477c183: import org.apache.tools.ant.taskdefs.Property;
1:477c183: 
1:477c183: /**
1:477c183:  * <p>
1:477c183:  * This is an ant Task which prompts the user for a property's value
1:477c183:  * and sets it if the property hasn't been set already.
1:477c183:  * </p>
1:477c183:  */
1:477c183: public class PropertyPrompt extends Task
1:477c183: {
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183:     //
1:477c183:     //  CONSTANTS
1:477c183:     //
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183: 
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183:     //
1:477c183:     //  STATE
1:477c183:     //
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183: 
1:477c183:     private String _propertyName;
1:477c183:     private String _prompt;
1:477c183: 
1:477c183:     private Hashtable   _propertiesSnapshot;
1:477c183: 
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183:     //
1:477c183:     //  CONSTRUCTORS
1:477c183:     //
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183: 
1:477c183:    /**
1:477c183:      * <p>
1:477c183:      * Let Ant conjure us out of thin air.
1:477c183:      * </p>
1:477c183:      */
1:477c183:     public PropertyPrompt() {}
1:477c183: 
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183:     //
1:477c183:     //  Task BEHAVIOR
1:477c183:     //
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183: 
1:477c183:         
1:477c183:     /** <p>Let Ant set the name of the property.</p>*/
1:477c183:     public void setPropertyName( String propertyName ) { _propertyName = propertyName; }
1:477c183: 
1:477c183:     /** <p>Let Ant set the prompt to be used in case the property isn't set.</p>*/
1:477c183:     public void setPrompt( String prompt ) { _prompt = prompt; }
1:477c183: 
1:477c183:    /**
1:477c183:      * <p>
1:477c183:      * Prompt for and set a property if it isn't already set.
1:477c183:      * </p>
1:477c183:      */
1:477c183:     public  void    execute()
1:477c183:         throws BuildException
1:477c183:     {
1:477c183:         _propertiesSnapshot = PropertyHelper.getPropertyHelper( getProject() ).getProperties();
1:477c183: 
1:477c183:         if ( _propertiesSnapshot.get( _propertyName ) == null  ) { promptAndSet(); }
1:477c183:     }
1:477c183:     
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183:     //
1:477c183:     //  MINIONS
1:477c183:     //
1:477c183:     /////////////////////////////////////////////////////////////////////////
1:477c183: 
1:477c183:     /**
1:477c183:      * <p>
1:477c183:      * Prompt for and set the property.
1:477c183:      * </p>
1:477c183:      */
1:477c183:     private void promptAndSet()
1:477c183:         throws BuildException
1:477c183:     {
1:477c183:         try {
1:477c183:             String value = promptForInput( _prompt );
1:477c183: 
1:477c183:             setProperty( _propertyName, value );
1:477c183:             
1:477c183:         } catch (Exception e)
1:477c183:         {
1:477c183:             throw new BuildException( "Error prompting and setting property " + _propertyName + ": " + e.getMessage() );
1:477c183:         }
1:477c183: 
1:477c183:     }
1:477c183: 
1:477c183:     /**
1:477c183:      * <p>
1:477c183:      * Prompt the user for a line of input.
1:477c183:      * </p>
1:477c183:      */
1:477c183:     private String promptForInput( String promptString )
1:477c183:         throws IOException
1:477c183:     {
1:477c183:         log( promptString, Project.MSG_WARN );
1:477c183: 
1:477c183:         BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );
1:477c183: 
1:477c183:         return br.readLine();
1:477c183:     }
1:477c183: 
1:477c183:     /**
1:477c183:      * <p>
1:477c183:      * Set an ant property.
1:477c183:      * </p>
1:477c183:      */
1:477c183:     private void    setProperty( String name, String value )
1:477c183:         throws BuildException
1:477c183:     {
1:477c183:         Property    property = new Property();
1:477c183: 
1:477c183:         property.setName( name );
1:477c183:         property.setValue( value );
1:477c183: 
1:477c183:         property.setProject( getProject() );
1:477c183:         property.execute();
1:477c183:     }
1:477c183:     
1:477c183: }
1:477c183: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:477c183
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyPreBuild.PropertyPrompt
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyPreBuild;
1: 
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
1: import java.io.IOException;
1: import java.util.Hashtable;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.PropertyHelper;
1: import org.apache.tools.ant.Task;
1: import org.apache.tools.ant.taskdefs.Property;
1: 
1: /**
1:  * <p>
1:  * This is an ant Task which prompts the user for a property's value
1:  * and sets it if the property hasn't been set already.
1:  * </p>
1:  */
1: public class PropertyPrompt extends Task
1: {
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private String _propertyName;
1:     private String _prompt;
1: 
1:     private Hashtable   _propertiesSnapshot;
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTORS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:    /**
1:      * <p>
1:      * Let Ant conjure us out of thin air.
1:      * </p>
1:      */
1:     public PropertyPrompt() {}
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  Task BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:         
1:     /** <p>Let Ant set the name of the property.</p>*/
1:     public void setPropertyName( String propertyName ) { _propertyName = propertyName; }
1: 
1:     /** <p>Let Ant set the prompt to be used in case the property isn't set.</p>*/
1:     public void setPrompt( String prompt ) { _prompt = prompt; }
1: 
1:    /**
1:      * <p>
1:      * Prompt for and set a property if it isn't already set.
1:      * </p>
1:      */
1:     public  void    execute()
1:         throws BuildException
1:     {
1:         _propertiesSnapshot = PropertyHelper.getPropertyHelper( getProject() ).getProperties();
1: 
1:         if ( _propertiesSnapshot.get( _propertyName ) == null  ) { promptAndSet(); }
1:     }
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Prompt for and set the property.
1:      * </p>
1:      */
1:     private void promptAndSet()
1:         throws BuildException
1:     {
1:         try {
1:             String value = promptForInput( _prompt );
1: 
1:             setProperty( _propertyName, value );
1:             
1:         } catch (Exception e)
1:         {
1:             throw new BuildException( "Error prompting and setting property " + _propertyName + ": " + e.getMessage() );
1:         }
1: 
1:     }
1: 
1:     /**
1:      * <p>
1:      * Prompt the user for a line of input.
1:      * </p>
1:      */
1:     private String promptForInput( String promptString )
1:         throws IOException
1:     {
1:         log( promptString, Project.MSG_WARN );
1: 
1:         BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );
1: 
1:         return br.readLine();
1:     }
1: 
1:     /**
1:      * <p>
1:      * Set an ant property.
1:      * </p>
1:      */
1:     private void    setProperty( String name, String value )
1:         throws BuildException
1:     {
1:         Property    property = new Property();
1: 
1:         property.setName( name );
1:         property.setValue( value );
1: 
1:         property.setProject( getProject() );
1:         property.execute();
1:     }
1:     
1: }
1: 
============================================================================