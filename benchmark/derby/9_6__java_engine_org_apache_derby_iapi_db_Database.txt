1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.db.Database
1:4841b0e: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:4e96df7: 
1:eac0369: package org.apache.derby.iapi.db;
6:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:4841b0e: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.jdbc.AuthenticationService;
1:eac0369: import org.apache.derby.iapi.services.i18n.LocaleFinder;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.sql.Date;
1:6799974: import java.sql.SQLException;
1:eac0369: import java.util.Hashtable;
1:eac0369: import java.util.Locale;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * The org.apache.derby.iapi.db.Database
1:eac0369:  * interface provides "internal" methods on the database which are
1:eac0369:  * not available to JBMS users (org.apache.derby.database.Database,
1:eac0369:  * which this interface extends, provides all the externally visible
1:eac0369:  * methods).
1:eac0369:  * <P>
1:4e96df7:  * At the present moment, this file defines methods which will at
1:eac0369:  * some point be moved to to the external database interface.
1:4e96df7:  *
1:eac0369:  * <B> There are a bunch of the unimplemninted interface that used to be in
1:eac0369:  * this file.  They have been moved to old_Database.java.  old_Database.java is
1:eac0369:  * checked into the codeline but is not built, it is there for reference </B>
1:4e96df7:  *
1:eac0369:  */
1:4e96df7: 
1:eac0369: public interface Database extends org.apache.derby.database.Database, LocaleFinder
1:eac0369: {
1:eac0369: 	// this interface gets used on a module, so we name it:
1:eac0369: 	// Note that doers not point to this class name, but instead to
1:eac0369: 	// the public API for this class. This ensures that the name
1:eac0369: 	// written in service.properties is not a obfuscated one.
1:4841b0e: 	
1:eac0369: 	/**
1:eac0369: 	 * Sets up a connection to the Database, owned by the given user.
1:4e96df7: 	 *
1:eac0369: 	 * The JDBC version of getConnection takes a URL. The purpose
1:eac0369: 	 * of the URL is to tell the driver where the database system is.
1:eac0369: 	 * By the time we get here, we have found the database system
1:eac0369: 	 * (that's how we're making this method call), so the URL is not
1:eac0369: 	 * necessary to establish the connection here. The driver should
1:eac0369: 	 * remember the URL that was used to establish the connection,
1:eac0369: 	 * so it can implement the DatabaseMetaData.getURL() method.
4:eac0369: 	 *
1:eac0369: 	 * @param user	The UserID of the user getting the connection
1:eac0369: 	 * @param drdaID	The drda id of the connection (from network server)
1:eac0369: 	 * @param dbname	The database name
1:eac0369: 	 *
1:eac0369: 	 * @return	A new LanguageConnectionContext
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if unable to create the connection.
1:eac0369: 	 */
1:eac0369: 	public LanguageConnectionContext setupConnection(ContextManager cm, String user, String drdaID, String dbname) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Push a DbContext onto the provided context stack. This conext will
1:eac0369: 	  shut down the database in case of a DatabaseException being
1:eac0369: 	  cleaned up.
1:eac0369: 	 */
1:eac0369: 	public void pushDbContext(ContextManager cm);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Is the database active (open).
1:eac0369: 	*/
1:eac0369: 	public boolean isActive();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  */
1:eac0369: 	public	int	getEngineType();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This method returns the authentication service handle for the
1:eac0369: 	 * database.
1:eac0369: 	 *
1:eac0369: 	 * NOTE: There is always a Authentication Service per database
1:eac0369: 	 * and at the system level.
1:eac0369: 	 *
1:eac0369: 	 * @return	The authentication service handle for the database
1:f668d94:      * @exception StandardException standard Derby exception policy
1:eac0369: 	 */
1:696377a: 	public AuthenticationService getAuthenticationService()
1:696377a: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a Resource Adapter - only used by XA system.  There is one and only
1:3fd26f3: 	 * one resource adapter per Derby database.
1:eac0369: 	 *
1:eac0369: 	 * @return the resource Adapter for the database, null if no resource
1:eac0369: 	 * adapter is available for this database. Returned as an Object
1:eac0369: 	 * so that non-XA aggressive JVMs such as Chai don't get ClassNotFound.
1:eac0369: 	 * caller must cast result to ResourceAdapter.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public Object getResourceAdapter();
1:eac0369: 
1:eac0369: 	/** Set the Locale that is returned by this LocaleFinder */
1:eac0369: 	public	void	setLocale(Locale locale);
1:4e96df7: 
1:4841b0e:     /**
1:4841b0e:      * Return the DataDictionary for this database, set up at boot time.
1:4841b0e:      */
1:4841b0e:     public DataDictionary getDataDictionary();
1:6799974: 
1:6799974:     /**
1:6799974:      * Start failover for the given database.
1:6799974:      *
1:6799974:      * @param dbname the replication database that is being failed over.
1:6799974:      *
1:5a6acbf:      * @exception StandardException 1) If the failover succeeds, an exception
1:5a6acbf:      *                                 is thrown to indicate that the master
1:5a6acbf:      *                                 database was shutdown after a successful
1:5a6acbf:      *                                 failover
1:5a6acbf:      *                              2) If a failure occurs during network
1:5a6acbf:      *                                 communication with slave.
1:6799974:      */
1:5a6acbf:     public void failover(String dbname) throws StandardException;
1:4e96df7: 
1:6799974:     /**
1:6799974:      * Used to indicated whether the database is in the replication
1:6799974:      * slave mode.
1:6799974:      *
1:6799974:      * @return true if this database is in replication slave mode,
1:6799974:      *         false otherwise.
1:6799974:      */
1:6799974:     public boolean isInSlaveMode();
1:6799974: 
1:6799974:     /**
1:6799974:      * Stop the replication slave role for the given database.
1:6799974:      *
1:6799974:      * @exception SQLException Thrown on error
1:6799974:      */
1:6799974:     public void stopReplicationSlave() throws SQLException;
1:6799974: 
1:6799974:     /**
1:6799974:      * Start the replication master role for this database
1:6799974:      * @param dbmaster The master database that is being replicated.
1:6799974:      * @param host The hostname for the slave
1:6799974:      * @param port The port the slave is listening on
1:6799974:      * @param replicationMode The type of replication contract.
1:6799974:      * Currently only asynchronous replication is supported, but
1:6799974:      * 1-safe/2-safe/very-safe modes may be added later.
1:6799974:      * @exception SQLException Thrown on error
1:6799974:      */
1:6799974:     public void startReplicationMaster(String dbmaster, String host, int port,
1:6799974:                                        String replicationMode)
1:6799974:         throws SQLException;
1:6799974: 
1:6799974:     /**
1:6799974:      * Stop the replication master role for the given database.
1:6799974:      *
1:6799974:      * @exception SQLException Thrown on error
1:6799974:      */
1:6799974:     public void stopReplicationMaster() throws SQLException;
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException standard Derby exception policy
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:5a6acbf
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException 1) If the failover succeeds, an exception
1:      *                                 is thrown to indicate that the master
1:      *                                 database was shutdown after a successful
1:      *                                 failover
1:      *                              2) If a failure occurs during network
1:      *                                 communication with slave.
1:     public void failover(String dbname) throws StandardException;
commit:6799974
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1:         
1:     /**
1:      * Start failover for the given database.
1:      * 
1:      * @param dbname the replication database that is being failed over.
1:      *
0:      * @exception SQLException   1) If the failover succeeds, an exception is
0:      *                              thrown to indicate that the master database
0:      *                              was shutdown after a successful failover
0:      *                           2) If a failure occurs during network 
0:      *                              communication with slave.
1:      */
0:     public void failover(String dbname) throws SQLException;
1:     /**
1:      * Used to indicated whether the database is in the replication
1:      * slave mode.
1:      *
1:      * @return true if this database is in replication slave mode,
1:      *         false otherwise.
1:      */
1:     public boolean isInSlaveMode();
1: 
1:     /**
1:      * Stop the replication slave role for the given database.
1:      * 
1:      * @exception SQLException Thrown on error
1:      */
1:     public void stopReplicationSlave() throws SQLException;
1:     
1:     /**
1:      * Start the replication master role for this database
1:      * @param dbmaster The master database that is being replicated.
1:      * @param host The hostname for the slave
1:      * @param port The port the slave is listening on
1:      * @param replicationMode The type of replication contract.
1:      * Currently only asynchronous replication is supported, but
1:      * 1-safe/2-safe/very-safe modes may be added later.
1:      * @exception SQLException Thrown on error
1:      */
1:     public void startReplicationMaster(String dbmaster, String host, int port, 
1:                                        String replicationMode)
1:         throws SQLException;
1:     
1:     /**
1:      * Stop the replication master role for the given database.
1:      * 
1:      * @exception SQLException Thrown on error
1:      */
1:     public void stopReplicationMaster() throws SQLException;
commit:696377a
/////////////////////////////////////////////////////////////////////////
0: 	 * @exception Standard Derby exception policy
1: 	public AuthenticationService getAuthenticationService()
1: 		throws StandardException;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4e96df7
/////////////////////////////////////////////////////////////////////////
1:  * At the present moment, this file defines methods which will at
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      *
0:      *                           2) If a failure occurs during network
/////////////////////////////////////////////////////////////////////////
1:      *
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void startReplicationMaster(String dbmaster, String host, int port,
1: 
1:      *
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 	 * one resource adapter per Derby database.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4841b0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Return the DataDictionary for this database, set up at boot time.
1:      */
1:     public DataDictionary getDataDictionary();
1: 
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.db.Database
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.db
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.db;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.jdbc.AuthenticationService;
1: import org.apache.derby.iapi.services.i18n.LocaleFinder;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.sql.Date;
1: import java.util.Hashtable;
1: import java.util.Locale;
1: 
1: /**
1:  * The org.apache.derby.iapi.db.Database
1:  * interface provides "internal" methods on the database which are
1:  * not available to JBMS users (org.apache.derby.database.Database,
1:  * which this interface extends, provides all the externally visible
1:  * methods).
1:  * <P>
0:  * At the present moment, this file defines methods which will at 
1:  * some point be moved to to the external database interface.
1:  *
1:  * <B> There are a bunch of the unimplemninted interface that used to be in
1:  * this file.  They have been moved to old_Database.java.  old_Database.java is
1:  * checked into the codeline but is not built, it is there for reference </B>
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public interface Database extends org.apache.derby.database.Database, LocaleFinder
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	// this interface gets used on a module, so we name it:
1: 	// Note that doers not point to this class name, but instead to
1: 	// the public API for this class. This ensures that the name
1: 	// written in service.properties is not a obfuscated one.
1: 	
1: 	/**
1: 	 * Sets up a connection to the Database, owned by the given user.
1: 	 *
1: 	 * The JDBC version of getConnection takes a URL. The purpose
1: 	 * of the URL is to tell the driver where the database system is.
1: 	 * By the time we get here, we have found the database system
1: 	 * (that's how we're making this method call), so the URL is not
1: 	 * necessary to establish the connection here. The driver should
1: 	 * remember the URL that was used to establish the connection,
1: 	 * so it can implement the DatabaseMetaData.getURL() method.
1: 	 *
1: 	 * @param user	The UserID of the user getting the connection
0: 	 * @param unicode	True means unicode codeset, false means ASCII codeset
1: 	 * @param drdaID	The drda id of the connection (from network server)
1: 	 * @param dbname	The database name
1: 	 *
1: 	 * @return	A new LanguageConnectionContext
1: 	 *
1: 	 * @exception StandardException thrown if unable to create the connection.
1: 	 */
1: 	public LanguageConnectionContext setupConnection(ContextManager cm, String user, String drdaID, String dbname) throws StandardException;
1: 
1: 	/**
1: 	  Push a DbContext onto the provided context stack. This conext will
1: 	  shut down the database in case of a DatabaseException being
1: 	  cleaned up.
1: 	 */
1: 	public void pushDbContext(ContextManager cm);
1: 
1: 	/**
1: 		Is the database active (open).
1: 	*/
1: 	public boolean isActive();
1: 
1: 	/**
1: 	  */
1: 	public	int	getEngineType();
1: 
1: 	/**
1: 	 * This method returns the authentication service handle for the
1: 	 * database.
1: 	 *
1: 	 * NOTE: There is always a Authentication Service per database
1: 	 * and at the system level.
1: 	 *
1: 	 * @return	The authentication service handle for the database
1: 	 */
0: 	public AuthenticationService getAuthenticationService();
1: 
1: 	/**
1: 	 * Get a Resource Adapter - only used by XA system.  There is one and only
0: 	 * one resource adapter per cloudscape database.
1: 	 *
1: 	 * @return the resource Adapter for the database, null if no resource
1: 	 * adapter is available for this database. Returned as an Object
1: 	 * so that non-XA aggressive JVMs such as Chai don't get ClassNotFound.
1: 	 * caller must cast result to ResourceAdapter.
1: 	 *
1: 	 */
1: 	public Object getResourceAdapter();
1: 
1: 	/** Set the Locale that is returned by this LocaleFinder */
1: 	public	void	setLocale(Locale locale);
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d1d5ad1
/////////////////////////////////////////////////////////////////////////
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.db
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.db;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.iapi.services.i18n.LocaleFinder;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.sql.Date;
0: import java.util.Hashtable;
0: import java.util.Locale;
0: 
0: /**
0:  * The org.apache.derby.iapi.db.Database
0:  * interface provides "internal" methods on the database which are
0:  * not available to JBMS users (org.apache.derby.database.Database,
0:  * which this interface extends, provides all the externally visible
0:  * methods).
0:  * <P>
0:  * At the present moment, this file defines methods which will at 
0:  * some point be moved to to the external database interface.
0:  *
0:  * <B> There are a bunch of the unimplemninted interface that used to be in
0:  * this file.  They have been moved to old_Database.java.  old_Database.java is
0:  * checked into the codeline but is not built, it is there for reference </B>
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public interface Database extends org.apache.derby.database.Database, LocaleFinder
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	// this interface gets used on a module, so we name it:
0: 	// Note that doers not point to this class name, but instead to
0: 	// the public API for this class. This ensures that the name
0: 	// written in service.properties is not a obfuscated one.
0: 	
0: 	/**
0: 	 * Sets up a connection to the Database, owned by the given user.
0: 	 *
0: 	 * The JDBC version of getConnection takes a URL. The purpose
0: 	 * of the URL is to tell the driver where the database system is.
0: 	 * By the time we get here, we have found the database system
0: 	 * (that's how we're making this method call), so the URL is not
0: 	 * necessary to establish the connection here. The driver should
0: 	 * remember the URL that was used to establish the connection,
0: 	 * so it can implement the DatabaseMetaData.getURL() method.
0: 	 *
0: 	 * @param user	The UserID of the user getting the connection
0: 	 * @param unicode	True means unicode codeset, false means ASCII codeset
0: 	 * @param drdaID	The drda id of the connection (from network server)
0: 	 * @param dbname	The database name
0: 	 *
0: 	 * @return	A new LanguageConnectionContext
0: 	 *
0: 	 * @exception StandardException thrown if unable to create the connection.
0: 	 */
0: 	public LanguageConnectionContext setupConnection(ContextManager cm, String user, String drdaID, String dbname) throws StandardException;
0: 
0: 	/**
0: 	  Push a DbContext onto the provided context stack. This conext will
0: 	  shut down the database in case of a DatabaseException being
0: 	  cleaned up.
0: 	 */
0: 	public void pushDbContext(ContextManager cm);
0: 
0: 	/**
0: 		Is the database active (open).
0: 	*/
0: 	public boolean isActive();
0: 
0: 	/**
0: 	  */
0: 	public	int	getEngineType();
0: 
0: 	/**
0: 	 * This method returns the authentication service handle for the
0: 	 * database.
0: 	 *
0: 	 * NOTE: There is always a Authentication Service per database
0: 	 * and at the system level.
0: 	 *
0: 	 * @return	The authentication service handle for the database
0: 	 */
0: 	public AuthenticationService getAuthenticationService();
0: 
0: 	/**
0: 	 * Get a Resource Adapter - only used by XA system.  There is one and only
0: 	 * one resource adapter per cloudscape database.
0: 	 *
0: 	 * @return the resource Adapter for the database, null if no resource
0: 	 * adapter is available for this database. Returned as an Object
0: 	 * so that non-XA aggressive JVMs such as Chai don't get ClassNotFound.
0: 	 * caller must cast result to ResourceAdapter.
0: 	 *
0: 	 */
0: 	public Object getResourceAdapter();
0: 
0: 	/** Set the Locale that is returned by this LocaleFinder */
0: 	public	void	setLocale(Locale locale);
0: }
============================================================================