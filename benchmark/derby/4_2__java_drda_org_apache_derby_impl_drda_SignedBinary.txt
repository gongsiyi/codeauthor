1:eac0369: /*
1:d7258ed: 
1:d7258ed:    Derby - Class org.apache.derby.iapi.services.cache.SignedBinary
1:d7258ed: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: package org.apache.derby.impl.drda;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Converters from signed binary bytes to Java <code>short</code>, <code>int</code>, or <code>long</code>.
1:eac0369:  */
1:7df5ffe: class SignedBinary
1:eac0369: {
1:eac0369:   // Hide the default constructor, this is a static class.
1:eac0369:   private SignedBinary () {}
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * AS/400, Unix, System/390 byte-order for signed binary representations.
1:eac0369:    */
1:eac0369:   public final static int BIG_ENDIAN = 1;
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Intel 80/86 reversed byte-order for signed binary representations.
1:eac0369:    */
1:eac0369:   public final static int LITTLE_ENDIAN = 2;
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java short from a 2-byte signed binary representation.
1:eac0369:    * <p>
1:eac0369:    * Depending on machine type, byte orders are
1:eac0369:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
1:eac0369:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
1:eac0369:    *
1:eac0369:    * @exception IllegalArgumentException if the specified byte order is not recognized.
1:eac0369:    */
1:eac0369:   public static short getShort (byte[] buffer, int offset, int byteOrder)
1:eac0369:   {
1:eac0369:     switch (byteOrder) {
1:eac0369:     case BIG_ENDIAN:
1:eac0369:       return bigEndianBytesToShort (buffer, offset);
1:eac0369:     case LITTLE_ENDIAN:
1:eac0369:       return littleEndianBytesToShort (buffer, offset);
1:eac0369:     default:
1:eac0369:       throw new java.lang.IllegalArgumentException();
1:eac0369:     }
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java int from a 4-byte signed binary representation.
1:eac0369:    * <p>
1:eac0369:    * Depending on machine type, byte orders are
1:eac0369:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
1:eac0369:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
1:eac0369:    *
1:eac0369:    * @exception IllegalArgumentException if the specified byte order is not recognized.
1:eac0369:    */
1:eac0369:   public static int getInt (byte[] buffer, int offset, int byteOrder)
1:eac0369:   {
1:eac0369:     switch (byteOrder) {
1:eac0369:     case BIG_ENDIAN:
1:eac0369:       return bigEndianBytesToInt (buffer, offset);
1:eac0369:     case LITTLE_ENDIAN:
1:eac0369:       return littleEndianBytesToInt (buffer, offset);
1:eac0369:     default:
1:eac0369:       throw new java.lang.IllegalArgumentException();
1:eac0369:     }
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java long from an 8-byte signed binary representation.
1:eac0369:    * <p>
1:eac0369:    * Depending on machine type, byte orders are
1:eac0369:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
1:eac0369:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
1:eac0369:    * <p>
1:eac0369:    *
1:eac0369:    * @exception IllegalArgumentException if the specified byte order is not recognized.
1:eac0369:    */
1:eac0369:   public static long getLong (byte[] buffer, int offset, int byteOrder)
1:eac0369:   {
1:eac0369:     switch (byteOrder) {
1:eac0369:     case BIG_ENDIAN:
1:eac0369:       return bigEndianBytesToLong (buffer, offset);
1:eac0369:     case LITTLE_ENDIAN:
1:eac0369:       return littleEndianBytesToLong (buffer, offset);
1:eac0369:     default:
1:eac0369:       throw new java.lang.IllegalArgumentException();
1:eac0369:     }
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java short from a 2-byte big endian signed binary representation.
1:eac0369:    */
1:eac0369:   public static short bigEndianBytesToShort (byte[] buffer, int offset)
1:eac0369:   {
1:eac0369:     return (short) (((buffer[offset+0] & 0xff) << 8) +
1:eac0369:                     ((buffer[offset+1] & 0xff) << 0));
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java short from a 2-byte little endian signed binary representation.
1:eac0369:    */
1:eac0369:   public static short littleEndianBytesToShort (byte[] buffer, int offset)
1:eac0369:   {
1:eac0369:     return (short) (((buffer[offset+0] & 0xff) << 0) +
1:eac0369:                     ((buffer[offset+1] & 0xff) << 8));
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java int from a 4-byte big endian signed binary representation.
1:eac0369:    */
1:eac0369:   public static int bigEndianBytesToInt (byte[] buffer, int offset)
1:eac0369:   {
1:eac0369:     return (int) (((buffer[offset+0] & 0xff) << 24) +
1:eac0369:                   ((buffer[offset+1] & 0xff) << 16) +
1:eac0369:                   ((buffer[offset+2] & 0xff) << 8) +
1:eac0369:                   ((buffer[offset+3] & 0xff) << 0));
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java int from a 4-byte little endian signed binary representation.
1:eac0369:    */
1:eac0369:   public static int littleEndianBytesToInt (byte[] buffer, int offset)
1:eac0369:   {
1:eac0369:     return (int) (((buffer[offset+0] & 0xff) << 0) +
1:eac0369:                   ((buffer[offset+1] & 0xff) << 8) +
1:eac0369:                   ((buffer[offset+2] & 0xff) << 16) +
1:eac0369:                   ((buffer[offset+3] & 0xff) << 24));
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java long from an 8-byte big endian signed binary representation.
1:eac0369:    */
1:eac0369:   public static long bigEndianBytesToLong (byte[] buffer, int offset)
1:eac0369:   {
1:eac0369:     return (long) (((buffer[offset+0] & 0xffL) << 56) +
1:eac0369:                    ((buffer[offset+1] & 0xffL) << 48) +
1:eac0369:                    ((buffer[offset+2] & 0xffL) << 40) +
1:eac0369:                    ((buffer[offset+3] & 0xffL) << 32) +
1:eac0369:                    ((buffer[offset+4] & 0xffL) << 24) +
1:eac0369:                    ((buffer[offset+5] & 0xffL) << 16) +
1:eac0369:                    ((buffer[offset+6] & 0xffL) << 8) +
1:eac0369:                    ((buffer[offset+7] & 0xffL) << 0));
1:eac0369:   }
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Build a Java long from an 8-byte little endian signed binary representation.
1:eac0369:    */
1:eac0369:   public static long littleEndianBytesToLong (byte[] buffer, int offset)
1:eac0369:   {
1:eac0369:     return (long) (((buffer[offset+0] & 0xffL) << 0) +
1:eac0369:                    ((buffer[offset+1] & 0xffL) << 8) +
1:eac0369:                    ((buffer[offset+2] & 0xffL) << 16) +
1:eac0369:                    ((buffer[offset+3] & 0xffL) << 24) +
1:eac0369:                    ((buffer[offset+4] & 0xffL) << 32) +
1:eac0369:                    ((buffer[offset+5] & 0xffL) << 40) +
1:eac0369:                    ((buffer[offset+6] & 0xffL) << 48) +
1:eac0369:                    ((buffer[offset+7] & 0xffL) << 56));
1:eac0369:   }
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
1: class SignedBinary
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.cache.SignedBinary
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.cache
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: package org.apache.derby.impl.drda;
1: 
1: /**
1:  * Converters from signed binary bytes to Java <code>short</code>, <code>int</code>, or <code>long</code>.
1:  */
0: public class SignedBinary
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1:   // Hide the default constructor, this is a static class.
1:   private SignedBinary () {}
1: 
1:   /**
1:    * AS/400, Unix, System/390 byte-order for signed binary representations.
1:    */
1:   public final static int BIG_ENDIAN = 1;
1: 
1:   /**
1:    * Intel 80/86 reversed byte-order for signed binary representations.
1:    */
1:   public final static int LITTLE_ENDIAN = 2;
1: 
1:   /**
1:    * Build a Java short from a 2-byte signed binary representation.
1:    * <p>
1:    * Depending on machine type, byte orders are
1:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
1:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
1:    *
1:    * @exception IllegalArgumentException if the specified byte order is not recognized.
1:    */
1:   public static short getShort (byte[] buffer, int offset, int byteOrder)
1:   {
1:     switch (byteOrder) {
1:     case BIG_ENDIAN:
1:       return bigEndianBytesToShort (buffer, offset);
1:     case LITTLE_ENDIAN:
1:       return littleEndianBytesToShort (buffer, offset);
1:     default:
1:       throw new java.lang.IllegalArgumentException();
1:     }
1:   }
1: 
1:   /**
1:    * Build a Java int from a 4-byte signed binary representation.
1:    * <p>
1:    * Depending on machine type, byte orders are
1:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
1:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
1:    *
1:    * @exception IllegalArgumentException if the specified byte order is not recognized.
1:    */
1:   public static int getInt (byte[] buffer, int offset, int byteOrder)
1:   {
1:     switch (byteOrder) {
1:     case BIG_ENDIAN:
1:       return bigEndianBytesToInt (buffer, offset);
1:     case LITTLE_ENDIAN:
1:       return littleEndianBytesToInt (buffer, offset);
1:     default:
1:       throw new java.lang.IllegalArgumentException();
1:     }
1:   }
1: 
1:   /**
1:    * Build a Java long from an 8-byte signed binary representation.
1:    * <p>
1:    * Depending on machine type, byte orders are
1:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
1:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
1:    * <p>
1:    *
1:    * @exception IllegalArgumentException if the specified byte order is not recognized.
1:    */
1:   public static long getLong (byte[] buffer, int offset, int byteOrder)
1:   {
1:     switch (byteOrder) {
1:     case BIG_ENDIAN:
1:       return bigEndianBytesToLong (buffer, offset);
1:     case LITTLE_ENDIAN:
1:       return littleEndianBytesToLong (buffer, offset);
1:     default:
1:       throw new java.lang.IllegalArgumentException();
1:     }
1:   }
1: 
1:   /**
1:    * Build a Java short from a 2-byte big endian signed binary representation.
1:    */
1:   public static short bigEndianBytesToShort (byte[] buffer, int offset)
1:   {
1:     return (short) (((buffer[offset+0] & 0xff) << 8) +
1:                     ((buffer[offset+1] & 0xff) << 0));
1:   }
1: 
1:   /**
1:    * Build a Java short from a 2-byte little endian signed binary representation.
1:    */
1:   public static short littleEndianBytesToShort (byte[] buffer, int offset)
1:   {
1:     return (short) (((buffer[offset+0] & 0xff) << 0) +
1:                     ((buffer[offset+1] & 0xff) << 8));
1:   }
1: 
1:   /**
1:    * Build a Java int from a 4-byte big endian signed binary representation.
1:    */
1:   public static int bigEndianBytesToInt (byte[] buffer, int offset)
1:   {
1:     return (int) (((buffer[offset+0] & 0xff) << 24) +
1:                   ((buffer[offset+1] & 0xff) << 16) +
1:                   ((buffer[offset+2] & 0xff) << 8) +
1:                   ((buffer[offset+3] & 0xff) << 0));
1:   }
1: 
1:   /**
1:    * Build a Java int from a 4-byte little endian signed binary representation.
1:    */
1:   public static int littleEndianBytesToInt (byte[] buffer, int offset)
1:   {
1:     return (int) (((buffer[offset+0] & 0xff) << 0) +
1:                   ((buffer[offset+1] & 0xff) << 8) +
1:                   ((buffer[offset+2] & 0xff) << 16) +
1:                   ((buffer[offset+3] & 0xff) << 24));
1:   }
1: 
1:   /**
1:    * Build a Java long from an 8-byte big endian signed binary representation.
1:    */
1:   public static long bigEndianBytesToLong (byte[] buffer, int offset)
1:   {
1:     return (long) (((buffer[offset+0] & 0xffL) << 56) +
1:                    ((buffer[offset+1] & 0xffL) << 48) +
1:                    ((buffer[offset+2] & 0xffL) << 40) +
1:                    ((buffer[offset+3] & 0xffL) << 32) +
1:                    ((buffer[offset+4] & 0xffL) << 24) +
1:                    ((buffer[offset+5] & 0xffL) << 16) +
1:                    ((buffer[offset+6] & 0xffL) << 8) +
1:                    ((buffer[offset+7] & 0xffL) << 0));
1:   }
1: 
1:   /**
1:    * Build a Java long from an 8-byte little endian signed binary representation.
1:    */
1:   public static long littleEndianBytesToLong (byte[] buffer, int offset)
1:   {
1:     return (long) (((buffer[offset+0] & 0xffL) << 0) +
1:                    ((buffer[offset+1] & 0xffL) << 8) +
1:                    ((buffer[offset+2] & 0xffL) << 16) +
1:                    ((buffer[offset+3] & 0xffL) << 24) +
1:                    ((buffer[offset+4] & 0xffL) << 32) +
1:                    ((buffer[offset+5] & 0xffL) << 40) +
1:                    ((buffer[offset+6] & 0xffL) << 48) +
1:                    ((buffer[offset+7] & 0xffL) << 56));
1:   }
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.cache
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: package org.apache.derby.impl.drda;
0: 
0: /**
0:  * Converters from signed binary bytes to Java <code>short</code>, <code>int</code>, or <code>long</code>.
0:  */
0: public class SignedBinary
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0:   // Hide the default constructor, this is a static class.
0:   private SignedBinary () {}
0: 
0:   /**
0:    * AS/400, Unix, System/390 byte-order for signed binary representations.
0:    */
0:   public final static int BIG_ENDIAN = 1;
0: 
0:   /**
0:    * Intel 80/86 reversed byte-order for signed binary representations.
0:    */
0:   public final static int LITTLE_ENDIAN = 2;
0: 
0:   /**
0:    * Build a Java short from a 2-byte signed binary representation.
0:    * <p>
0:    * Depending on machine type, byte orders are
0:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
0:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
0:    *
0:    * @exception IllegalArgumentException if the specified byte order is not recognized.
0:    */
0:   public static short getShort (byte[] buffer, int offset, int byteOrder)
0:   {
0:     switch (byteOrder) {
0:     case BIG_ENDIAN:
0:       return bigEndianBytesToShort (buffer, offset);
0:     case LITTLE_ENDIAN:
0:       return littleEndianBytesToShort (buffer, offset);
0:     default:
0:       throw new java.lang.IllegalArgumentException();
0:     }
0:   }
0: 
0:   /**
0:    * Build a Java int from a 4-byte signed binary representation.
0:    * <p>
0:    * Depending on machine type, byte orders are
0:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
0:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
0:    *
0:    * @exception IllegalArgumentException if the specified byte order is not recognized.
0:    */
0:   public static int getInt (byte[] buffer, int offset, int byteOrder)
0:   {
0:     switch (byteOrder) {
0:     case BIG_ENDIAN:
0:       return bigEndianBytesToInt (buffer, offset);
0:     case LITTLE_ENDIAN:
0:       return littleEndianBytesToInt (buffer, offset);
0:     default:
0:       throw new java.lang.IllegalArgumentException();
0:     }
0:   }
0: 
0:   /**
0:    * Build a Java long from an 8-byte signed binary representation.
0:    * <p>
0:    * Depending on machine type, byte orders are
0:    * {@link #BIG_ENDIAN BIG_ENDIAN} for signed binary integers, and
0:    * {@link #LITTLE_ENDIAN LITTLE_ENDIAN} for pc8087 signed binary integers.
0:    * <p>
0:    *
0:    * @exception IllegalArgumentException if the specified byte order is not recognized.
0:    */
0:   public static long getLong (byte[] buffer, int offset, int byteOrder)
0:   {
0:     switch (byteOrder) {
0:     case BIG_ENDIAN:
0:       return bigEndianBytesToLong (buffer, offset);
0:     case LITTLE_ENDIAN:
0:       return littleEndianBytesToLong (buffer, offset);
0:     default:
0:       throw new java.lang.IllegalArgumentException();
0:     }
0:   }
0: 
0:   /**
0:    * Build a Java short from a 2-byte big endian signed binary representation.
0:    */
0:   public static short bigEndianBytesToShort (byte[] buffer, int offset)
0:   {
0:     return (short) (((buffer[offset+0] & 0xff) << 8) +
0:                     ((buffer[offset+1] & 0xff) << 0));
0:   }
0: 
0:   /**
0:    * Build a Java short from a 2-byte little endian signed binary representation.
0:    */
0:   public static short littleEndianBytesToShort (byte[] buffer, int offset)
0:   {
0:     return (short) (((buffer[offset+0] & 0xff) << 0) +
0:                     ((buffer[offset+1] & 0xff) << 8));
0:   }
0: 
0:   /**
0:    * Build a Java int from a 4-byte big endian signed binary representation.
0:    */
0:   public static int bigEndianBytesToInt (byte[] buffer, int offset)
0:   {
0:     return (int) (((buffer[offset+0] & 0xff) << 24) +
0:                   ((buffer[offset+1] & 0xff) << 16) +
0:                   ((buffer[offset+2] & 0xff) << 8) +
0:                   ((buffer[offset+3] & 0xff) << 0));
0:   }
0: 
0:   /**
0:    * Build a Java int from a 4-byte little endian signed binary representation.
0:    */
0:   public static int littleEndianBytesToInt (byte[] buffer, int offset)
0:   {
0:     return (int) (((buffer[offset+0] & 0xff) << 0) +
0:                   ((buffer[offset+1] & 0xff) << 8) +
0:                   ((buffer[offset+2] & 0xff) << 16) +
0:                   ((buffer[offset+3] & 0xff) << 24));
0:   }
0: 
0:   /**
0:    * Build a Java long from an 8-byte big endian signed binary representation.
0:    */
0:   public static long bigEndianBytesToLong (byte[] buffer, int offset)
0:   {
0:     return (long) (((buffer[offset+0] & 0xffL) << 56) +
0:                    ((buffer[offset+1] & 0xffL) << 48) +
0:                    ((buffer[offset+2] & 0xffL) << 40) +
0:                    ((buffer[offset+3] & 0xffL) << 32) +
0:                    ((buffer[offset+4] & 0xffL) << 24) +
0:                    ((buffer[offset+5] & 0xffL) << 16) +
0:                    ((buffer[offset+6] & 0xffL) << 8) +
0:                    ((buffer[offset+7] & 0xffL) << 0));
0:   }
0: 
0:   /**
0:    * Build a Java long from an 8-byte little endian signed binary representation.
0:    */
0:   public static long littleEndianBytesToLong (byte[] buffer, int offset)
0:   {
0:     return (long) (((buffer[offset+0] & 0xffL) << 0) +
0:                    ((buffer[offset+1] & 0xffL) << 8) +
0:                    ((buffer[offset+2] & 0xffL) << 16) +
0:                    ((buffer[offset+3] & 0xffL) << 24) +
0:                    ((buffer[offset+4] & 0xffL) << 32) +
0:                    ((buffer[offset+5] & 0xffL) << 40) +
0:                    ((buffer[offset+6] & 0xffL) << 48) +
0:                    ((buffer[offset+7] & 0xffL) << 56));
0:   }
0: }
============================================================================