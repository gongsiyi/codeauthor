1:ebf2f36: /*
1:ebf2f36:  * Derby - Class org.apache.derbyTesting.perf.basic.jdbc.IndexScanTest
1:ebf2f36:  *
1:ebf2f36:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ebf2f36:  * contributor license agreements.  See the NOTICE file distributed with
1:ebf2f36:  * this work for additional information regarding copyright ownership.
1:ebf2f36:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ebf2f36:  * (the "License"); you may not use this file except in compliance with
1:ebf2f36:  * the License.  You may obtain a copy of the License at
1:ebf2f36:  *
1:ebf2f36:  *    http://www.apache.org/licenses/LICENSE-2.0
1:ebf2f36:  *
1:ebf2f36:  * Unless required by applicable law or agreed to in writing,
1:ebf2f36:  * software distributed under the License is distributed on an
1:ebf2f36:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:ebf2f36:  * either express or implied. See the License for the specific
1:ebf2f36:  * language governing permissions and limitations under the License.
1:ebf2f36:  */
1:ebf2f36: 
1:ebf2f36: package org.apache.derbyTesting.perf.basic.jdbc;
1:ebf2f36: 
1:ebf2f36: import java.sql.PreparedStatement;
1:ebf2f36: import java.sql.ResultSet;
1:ebf2f36: import java.sql.SQLException;
1:ebf2f36: import java.sql.Statement;
1:ebf2f36: import java.util.Random;
1:ebf2f36: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:ebf2f36: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:ebf2f36: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:ebf2f36: 
1:ebf2f36: /**
1:ebf2f36:  * Test the performance of different kinds of index scans. This test was
1:ebf2f36:  * written in order to test the performance impact of the changes made in
1:ebf2f36:  * DERBY-2991.
1:ebf2f36:  */
1:ebf2f36: public class IndexScanTest extends JDBCPerfTestCase {
1:ebf2f36: 
1:ebf2f36:     /** The prepared statement for the SQL expression that we want to test. */
1:ebf2f36:     private PreparedStatement preparedStmt;
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Create an instance of the test.
1:ebf2f36:      * @param name the name of the method to call in the test
1:ebf2f36:      * @param iterations the number of iteration in each test run
1:ebf2f36:      * @param repeats the number of times each test run is repeated
1:ebf2f36:      */
1:ebf2f36:     private IndexScanTest(String name, int iterations, int repeats) {
1:ebf2f36:         super(name, iterations, repeats);
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Get the prepared statement that we use in the test. If this is the
1:ebf2f36:      * first time the method is called on this object, prepare the statement
1:ebf2f36:      * and then return it.
1:ebf2f36:      * @param sql the SQL text to prepare if the statement isn't already
1:ebf2f36:      *            compiled
1:ebf2f36:      * @return the prepared statement to use in this test
1:ebf2f36:      */
1:ebf2f36:     private PreparedStatement getOrPrepareStatement(String sql)
1:ebf2f36:             throws SQLException {
1:ebf2f36:         if (preparedStmt == null) {
1:ebf2f36:             preparedStmt = prepareStatement(sql);
1:ebf2f36:         }
1:ebf2f36:         return preparedStmt;
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Do the necessary clean-up after running the test.
1:ebf2f36:      */
1:ebf2f36:     protected void tearDown() throws Exception {
1:ebf2f36:         super.tearDown();
1:ebf2f36:         // Null out the statement to allow it to be gc'ed. It will be closed
1:ebf2f36:         // automatically by the framework.
1:ebf2f36:         preparedStmt = null;
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Create a test suite with all the test cases in this class.
1:ebf2f36:      * @return a test suite
1:ebf2f36:      */
1:ebf2f36:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("IndexScanTest");
1:ebf2f36:         suite.addTest(new IndexScanTest("varchar10", 5000, 4));
1:ebf2f36:         suite.addTest(new IndexScanTest("varchar100", 5000, 4));
1:ebf2f36:         suite.addTest(new IndexScanTest("varchar1000", 5000, 4));
1:ebf2f36:         suite.addTest(new IndexScanTest("varcharAll", 5000, 4));
1:ebf2f36:         suite.addTest(new IndexScanTest("decimal1column", 5000, 4));
1:ebf2f36:         suite.addTest(new IndexScanTest("decimal10columns", 5000, 4));
1:ebf2f36: 
1:ebf2f36:         return new CleanDatabaseTestSetup(suite) {
1:ebf2f36:             protected void decorateSQL(Statement s) throws SQLException {
1:ebf2f36:                 // Create a table with some character data and decimal data
1:ebf2f36:                 // that we can use in our tests.
1:ebf2f36:                 s.execute("CREATE TABLE T (VC10 VARCHAR(10), " +
1:ebf2f36:                         "VC100 VARCHAR(100), " +
1:ebf2f36:                         "VC1000 VARCHAR(1000), " +
1:ebf2f36:                         "DEC1 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC2 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC3 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC4 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC5 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC6 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC7 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC8 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC9 DECIMAL(10,10), " +
1:ebf2f36:                         "DEC10 DECIMAL(10,10))");
1:ebf2f36: 
1:ebf2f36:                 // Fill the table with 1000 rows containing random data.
1:ebf2f36:                 PreparedStatement ps = s.getConnection().prepareStatement(
1:ebf2f36:                         "INSERT INTO T(VC10,VC100,VC1000,DEC1,DEC2,DEC3," +
1:ebf2f36:                         "DEC4,DEC5,DEC6,DEC7,DEC8,DEC9,DEC10) VALUES (?,?,?," +
1:ebf2f36:                         "RANDOM(),RANDOM(),RANDOM(),RANDOM(),RANDOM()," +
1:ebf2f36:                         "RANDOM(),RANDOM(),RANDOM(),RANDOM(),RANDOM())");
1:ebf2f36:                 char[] chars = new char[1000];
1:ebf2f36:                 Random r = new Random();
1:ebf2f36:                 for (int i = 0; i < 1000; i++) {
1:ebf2f36:                     fillWithRandomChars(r, chars);
1:ebf2f36:                     ps.setString(1, new String(chars, 0, 10));
1:ebf2f36:                     ps.setString(2, new String(chars, 0, 100));
1:ebf2f36:                     ps.setString(3, new String(chars, 0, 1000));
1:ebf2f36:                     ps.executeUpdate();
1:ebf2f36:                 }
1:ebf2f36:                 ps.close();
1:ebf2f36: 
1:ebf2f36:                 // Create various indexes on the table.
1:ebf2f36:                 s.execute("CREATE INDEX T_VC10 ON T(VC10)");
1:ebf2f36:                 s.execute("CREATE INDEX T_VC100 ON T(VC100)");
1:ebf2f36:                 s.execute("CREATE INDEX T_VC1000 ON T(VC1000)");
1:ebf2f36:                 s.execute("CREATE INDEX T_VC_ALL ON T(VC10,VC100,VC1000)");
1:ebf2f36:                 s.execute("CREATE INDEX T_DEC1 ON T(DEC1)");
1:ebf2f36:                 s.execute("CREATE INDEX T_DEC_ALL ON T(DEC1,DEC2,DEC3,DEC4," +
1:ebf2f36:                         "DEC5,DEC6,DEC7,DEC8,DEC9,DEC10)");
1:ebf2f36:             }
1:ebf2f36:         };
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Fill a {@code char} array with random characters.
1:ebf2f36:      * @param r a random number generator
1:ebf2f36:      * @param chars the array to fill
1:ebf2f36:      */
1:ebf2f36:     private static void fillWithRandomChars(Random r, char[] chars) {
1:ebf2f36:         String alphabet =
1:ebf2f36:             "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
1:ebf2f36:         for (int i = 0; i < chars.length; i++) {
1:ebf2f36:             chars[i] = alphabet.charAt(r.nextInt(alphabet.length()));
1:ebf2f36:         }
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Test the performance of an index scan on a VARCHAR(10) column.
1:ebf2f36:      */
1:ebf2f36:     public void varchar10() throws SQLException {
1:ebf2f36:         PreparedStatement ps = getOrPrepareStatement(
1:ebf2f36:                 "SELECT VC10 FROM T --DERBY-PROPERTIES index=T_VC10");
1:ebf2f36:         ResultSet rs = ps.executeQuery();
1:ebf2f36:         while (rs.next()) {
1:ebf2f36:             assertNotNull(rs.getString(1));
1:ebf2f36:         }
1:ebf2f36:         rs.close();
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Test the performance of an index scan on a VARCHAR(100) column.
1:ebf2f36:      */
1:ebf2f36:     public void varchar100() throws SQLException {
1:ebf2f36:         PreparedStatement ps = getOrPrepareStatement(
1:ebf2f36:                 "SELECT VC100 FROM T --DERBY-PROPERTIES index=T_VC100");
1:ebf2f36:         ResultSet rs = ps.executeQuery();
1:ebf2f36:         while (rs.next()) {
1:ebf2f36:             assertNotNull(rs.getString(1));
1:ebf2f36:         }
1:ebf2f36:         rs.close();
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Test the performance of an index scan on a VARCHAR(1000) column.
1:ebf2f36:      */
1:ebf2f36:     public void varchar1000() throws SQLException {
1:ebf2f36:         PreparedStatement ps = getOrPrepareStatement(
1:ebf2f36:                 "SELECT VC1000 FROM T --DERBY-PROPERTIES index=T_VC1000");
1:ebf2f36:         ResultSet rs = ps.executeQuery();
1:ebf2f36:         while (rs.next()) {
1:ebf2f36:             assertNotNull(rs.getString(1));
1:ebf2f36:         }
1:ebf2f36:         rs.close();
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Test the performance of an index scan with a compound index on
1:ebf2f36:      * columns with type VARCHAR(10), VARCHAR(100) and VARCHAR(1000).
1:ebf2f36:      */
1:ebf2f36:     public void varcharAll() throws SQLException {
1:ebf2f36:         PreparedStatement ps = getOrPrepareStatement(
1:ebf2f36:           "SELECT VC10,VC100,VC1000 FROM T --DERBY-PROPERTIES index=T_VC_ALL");
1:ebf2f36:         ResultSet rs = ps.executeQuery();
1:ebf2f36:         while (rs.next()) {
1:ebf2f36:             for (int col = 1; col <= 3; col++) {
1:ebf2f36:                 assertNotNull(rs.getString(col));
1:ebf2f36:             }
1:ebf2f36:         }
1:ebf2f36:         rs.close();
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Test the performance of an index scan on a DECIMAL(10,10) column.
1:ebf2f36:      */
1:ebf2f36:     public void decimal1column() throws SQLException {
1:ebf2f36:         PreparedStatement ps = getOrPrepareStatement(
1:ebf2f36:                 "SELECT DEC1 FROM T --DERBY-PROPERTIES index=T_DEC1");
1:ebf2f36:         ResultSet rs = ps.executeQuery();
1:ebf2f36:         while (rs.next()) {
1:ebf2f36:             assertNotNull(rs.getBigDecimal(1));
1:ebf2f36:         }
1:ebf2f36:         rs.close();
1:ebf2f36:     }
1:ebf2f36: 
1:ebf2f36:     /**
1:ebf2f36:      * Test the performance of an index scan on a compound index on ten
1:ebf2f36:      * DECIMAL(10,10) columns.
1:ebf2f36:      */
1:ebf2f36:     public void decimal10columns() throws SQLException {
1:ebf2f36:         PreparedStatement ps = getOrPrepareStatement(
1:ebf2f36:                 "SELECT DEC1,DEC2,DEC3,DEC4,DEC5,DEC6,DEC7,DEC8,DEC9,DEC10 " +
1:ebf2f36:                 "FROM T --DERBY-PROPERTIES index=T_DEC_ALL");
1:ebf2f36:         ResultSet rs = ps.executeQuery();
1:ebf2f36:         while (rs.next()) {
1:ebf2f36:             for (int col = 1; col <= 10; col++) {
1:ebf2f36:                 assertNotNull(rs.getBigDecimal(col));
1:ebf2f36:             }
1:ebf2f36:         }
1:ebf2f36:         rs.close();
1:ebf2f36:     }
1:ebf2f36: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("IndexScanTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ebf2f36
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.perf.basic.jdbc.IndexScanTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Random;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1: 
1: /**
1:  * Test the performance of different kinds of index scans. This test was
1:  * written in order to test the performance impact of the changes made in
1:  * DERBY-2991.
1:  */
1: public class IndexScanTest extends JDBCPerfTestCase {
1: 
1:     /** The prepared statement for the SQL expression that we want to test. */
1:     private PreparedStatement preparedStmt;
1: 
1:     /**
1:      * Create an instance of the test.
1:      * @param name the name of the method to call in the test
1:      * @param iterations the number of iteration in each test run
1:      * @param repeats the number of times each test run is repeated
1:      */
1:     private IndexScanTest(String name, int iterations, int repeats) {
1:         super(name, iterations, repeats);
1:     }
1: 
1:     /**
1:      * Get the prepared statement that we use in the test. If this is the
1:      * first time the method is called on this object, prepare the statement
1:      * and then return it.
1:      * @param sql the SQL text to prepare if the statement isn't already
1:      *            compiled
1:      * @return the prepared statement to use in this test
1:      */
1:     private PreparedStatement getOrPrepareStatement(String sql)
1:             throws SQLException {
1:         if (preparedStmt == null) {
1:             preparedStmt = prepareStatement(sql);
1:         }
1:         return preparedStmt;
1:     }
1: 
1:     /**
1:      * Do the necessary clean-up after running the test.
1:      */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         // Null out the statement to allow it to be gc'ed. It will be closed
1:         // automatically by the framework.
1:         preparedStmt = null;
1:     }
1: 
1:     /**
1:      * Create a test suite with all the test cases in this class.
1:      * @return a test suite
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("IndexScanTest");
1:         suite.addTest(new IndexScanTest("varchar10", 5000, 4));
1:         suite.addTest(new IndexScanTest("varchar100", 5000, 4));
1:         suite.addTest(new IndexScanTest("varchar1000", 5000, 4));
1:         suite.addTest(new IndexScanTest("varcharAll", 5000, 4));
1:         suite.addTest(new IndexScanTest("decimal1column", 5000, 4));
1:         suite.addTest(new IndexScanTest("decimal10columns", 5000, 4));
1: 
1:         return new CleanDatabaseTestSetup(suite) {
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 // Create a table with some character data and decimal data
1:                 // that we can use in our tests.
1:                 s.execute("CREATE TABLE T (VC10 VARCHAR(10), " +
1:                         "VC100 VARCHAR(100), " +
1:                         "VC1000 VARCHAR(1000), " +
1:                         "DEC1 DECIMAL(10,10), " +
1:                         "DEC2 DECIMAL(10,10), " +
1:                         "DEC3 DECIMAL(10,10), " +
1:                         "DEC4 DECIMAL(10,10), " +
1:                         "DEC5 DECIMAL(10,10), " +
1:                         "DEC6 DECIMAL(10,10), " +
1:                         "DEC7 DECIMAL(10,10), " +
1:                         "DEC8 DECIMAL(10,10), " +
1:                         "DEC9 DECIMAL(10,10), " +
1:                         "DEC10 DECIMAL(10,10))");
1: 
1:                 // Fill the table with 1000 rows containing random data.
1:                 PreparedStatement ps = s.getConnection().prepareStatement(
1:                         "INSERT INTO T(VC10,VC100,VC1000,DEC1,DEC2,DEC3," +
1:                         "DEC4,DEC5,DEC6,DEC7,DEC8,DEC9,DEC10) VALUES (?,?,?," +
1:                         "RANDOM(),RANDOM(),RANDOM(),RANDOM(),RANDOM()," +
1:                         "RANDOM(),RANDOM(),RANDOM(),RANDOM(),RANDOM())");
1:                 char[] chars = new char[1000];
1:                 Random r = new Random();
1:                 for (int i = 0; i < 1000; i++) {
1:                     fillWithRandomChars(r, chars);
1:                     ps.setString(1, new String(chars, 0, 10));
1:                     ps.setString(2, new String(chars, 0, 100));
1:                     ps.setString(3, new String(chars, 0, 1000));
1:                     ps.executeUpdate();
1:                 }
1:                 ps.close();
1: 
1:                 // Create various indexes on the table.
1:                 s.execute("CREATE INDEX T_VC10 ON T(VC10)");
1:                 s.execute("CREATE INDEX T_VC100 ON T(VC100)");
1:                 s.execute("CREATE INDEX T_VC1000 ON T(VC1000)");
1:                 s.execute("CREATE INDEX T_VC_ALL ON T(VC10,VC100,VC1000)");
1:                 s.execute("CREATE INDEX T_DEC1 ON T(DEC1)");
1:                 s.execute("CREATE INDEX T_DEC_ALL ON T(DEC1,DEC2,DEC3,DEC4," +
1:                         "DEC5,DEC6,DEC7,DEC8,DEC9,DEC10)");
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Fill a {@code char} array with random characters.
1:      * @param r a random number generator
1:      * @param chars the array to fill
1:      */
1:     private static void fillWithRandomChars(Random r, char[] chars) {
1:         String alphabet =
1:             "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
1:         for (int i = 0; i < chars.length; i++) {
1:             chars[i] = alphabet.charAt(r.nextInt(alphabet.length()));
1:         }
1:     }
1: 
1:     /**
1:      * Test the performance of an index scan on a VARCHAR(10) column.
1:      */
1:     public void varchar10() throws SQLException {
1:         PreparedStatement ps = getOrPrepareStatement(
1:                 "SELECT VC10 FROM T --DERBY-PROPERTIES index=T_VC10");
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             assertNotNull(rs.getString(1));
1:         }
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Test the performance of an index scan on a VARCHAR(100) column.
1:      */
1:     public void varchar100() throws SQLException {
1:         PreparedStatement ps = getOrPrepareStatement(
1:                 "SELECT VC100 FROM T --DERBY-PROPERTIES index=T_VC100");
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             assertNotNull(rs.getString(1));
1:         }
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Test the performance of an index scan on a VARCHAR(1000) column.
1:      */
1:     public void varchar1000() throws SQLException {
1:         PreparedStatement ps = getOrPrepareStatement(
1:                 "SELECT VC1000 FROM T --DERBY-PROPERTIES index=T_VC1000");
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             assertNotNull(rs.getString(1));
1:         }
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Test the performance of an index scan with a compound index on
1:      * columns with type VARCHAR(10), VARCHAR(100) and VARCHAR(1000).
1:      */
1:     public void varcharAll() throws SQLException {
1:         PreparedStatement ps = getOrPrepareStatement(
1:           "SELECT VC10,VC100,VC1000 FROM T --DERBY-PROPERTIES index=T_VC_ALL");
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             for (int col = 1; col <= 3; col++) {
1:                 assertNotNull(rs.getString(col));
1:             }
1:         }
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Test the performance of an index scan on a DECIMAL(10,10) column.
1:      */
1:     public void decimal1column() throws SQLException {
1:         PreparedStatement ps = getOrPrepareStatement(
1:                 "SELECT DEC1 FROM T --DERBY-PROPERTIES index=T_DEC1");
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             assertNotNull(rs.getBigDecimal(1));
1:         }
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Test the performance of an index scan on a compound index on ten
1:      * DECIMAL(10,10) columns.
1:      */
1:     public void decimal10columns() throws SQLException {
1:         PreparedStatement ps = getOrPrepareStatement(
1:                 "SELECT DEC1,DEC2,DEC3,DEC4,DEC5,DEC6,DEC7,DEC8,DEC9,DEC10 " +
1:                 "FROM T --DERBY-PROPERTIES index=T_DEC_ALL");
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             for (int col = 1; col <= 10; col++) {
1:                 assertNotNull(rs.getBigDecimal(col));
1:             }
1:         }
1:         rs.close();
1:     }
1: }
============================================================================