1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.stream.BasicHeaderPrintWriter
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.stream;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1:eac0369: 
1:eac0369: import java.io.PrintWriter;
1:eac0369: import java.io.Writer;
1:eac0369: import java.io.OutputStream;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Basic class to print lines with headers. 
1:eac0369:  * <p>
1:eac0369:  *
1:eac0369:  * STUB: Should include code to emit a new line before a header
1:eac0369:  *			which is not the first thing on the line.
1:eac0369:  *
1:eac0369:  */
1:eac0369: class BasicHeaderPrintWriter 
1:eac0369: 	extends PrintWriter
1:eac0369: 	implements HeaderPrintWriter
1:eac0369: {
1:eac0369: 
1:eac0369: 	private final PrintWriterGetHeader headerGetter;
1:eac0369: 	private final boolean canClose;
1:27e2c4b: 	private final String name;
1:eac0369: 
1:eac0369: 	// constructors
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * the constructor sets up the HeaderPrintWriter. 
1:eac0369: 	 * <p>
1:27e2c4b: 	 * @param writeTo       Where to write to.
1:eac0369: 	 * @param headerGetter	Object to get headers for output lines.
1:27e2c4b: 	 * @param canClose      If true, {@link #complete} will also close writeTo
1:27e2c4b: 	 * @param streamName    Name of writeTo, e.g. a file name
1:eac0369: 	 *
1:eac0369: 	 * @see	PrintWriterGetHeader
1:eac0369: 	 */
1:eac0369: 	BasicHeaderPrintWriter(OutputStream writeTo,
1:27e2c4b: 			PrintWriterGetHeader headerGetter,  boolean canClose, String streamName){
1:eac0369: 		super(writeTo, true);
1:eac0369: 		this.headerGetter = headerGetter;
1:eac0369: 		this.canClose = canClose;
1:27e2c4b: 		this.name = streamName;
1:eac0369: 	}
1:27e2c4b: 
1:27e2c4b: 	/**
1:27e2c4b: 	 * the constructor sets up the HeaderPrintWriter. 
1:27e2c4b: 	 * <p>
1:27e2c4b: 	 * @param writeTo       Where to write to.
1:27e2c4b: 	 * @param headerGetter	Object to get headers for output lines.
1:27e2c4b: 	 * @param canClose      If true, {@link #complete} will also close writeTo
1:27e2c4b: 	 * @param writerName    Name of writeTo, e.g. a file name
1:27e2c4b: 	 *
1:27e2c4b: 	 * @see	PrintWriterGetHeader
1:27e2c4b: 	 */
1:eac0369: 	BasicHeaderPrintWriter(Writer writeTo,
1:27e2c4b: 			PrintWriterGetHeader headerGetter, boolean canClose, String writerName){
1:eac0369: 		super(writeTo, true);
1:eac0369: 		this.headerGetter = headerGetter;
1:eac0369: 		this.canClose = canClose;
1:27e2c4b: 		this.name = writerName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * HeaderPrintWriter interface (partial; remaining methods
1:eac0369: 	 * come from the PrintWriter supertype).
1:eac0369: 	 */
1:eac0369: 	public synchronized void printlnWithHeader(String message)
1:eac0369: 	{ 
1:eac0369: 		print(headerGetter.getHeader());
1:eac0369: 		println(message);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public PrintWriterGetHeader getHeader()
1:eac0369: 	{
1:eac0369: 		return headerGetter;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public PrintWriter getPrintWriter(){
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:27e2c4b: 	public String getName(){
1:27e2c4b: 		return name;
1:27e2c4b: 	}
1:27e2c4b: 
1:27e2c4b: 	/**
1:27e2c4b: 	 * Flushes stream, and optionally also closes it if constructed
1:27e2c4b: 	 * with canClose equal to true.
1:27e2c4b: 	 */
1:27e2c4b: 
1:eac0369: 	void complete() {
1:eac0369: 		flush();
1:eac0369: 		if (canClose) {
1:eac0369: 			close();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:27e2c4b
/////////////////////////////////////////////////////////////////////////
1: 	private final String name;
1: 	 * @param writeTo       Where to write to.
1: 	 * @param canClose      If true, {@link #complete} will also close writeTo
1: 	 * @param streamName    Name of writeTo, e.g. a file name
1: 			PrintWriterGetHeader headerGetter,  boolean canClose, String streamName){
1: 		this.name = streamName;
1: 
1: 	/**
1: 	 * the constructor sets up the HeaderPrintWriter. 
1: 	 * <p>
1: 	 * @param writeTo       Where to write to.
1: 	 * @param headerGetter	Object to get headers for output lines.
1: 	 * @param canClose      If true, {@link #complete} will also close writeTo
1: 	 * @param writerName    Name of writeTo, e.g. a file name
1: 	 *
1: 	 * @see	PrintWriterGetHeader
1: 	 */
1: 			PrintWriterGetHeader headerGetter, boolean canClose, String writerName){
1: 		this.name = writerName;
/////////////////////////////////////////////////////////////////////////
1: 	public String getName(){
1: 		return name;
1: 	}
1: 
1: 	/**
1: 	 * Flushes stream, and optionally also closes it if constructed
1: 	 * with canClose equal to true.
1: 	 */
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.stream.BasicHeaderPrintWriter
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.stream
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.stream;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1: 
1: import java.io.PrintWriter;
1: import java.io.Writer;
1: import java.io.OutputStream;
1: 
1: /**
1:  * Basic class to print lines with headers. 
1:  * <p>
1:  *
1:  * STUB: Should include code to emit a new line before a header
1:  *			which is not the first thing on the line.
1:  *
1:  */
1: class BasicHeaderPrintWriter 
1: 	extends PrintWriter
1: 	implements HeaderPrintWriter
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private final PrintWriterGetHeader headerGetter;
1: 	private final boolean canClose;
1: 
1: 	// constructors
1: 
1: 	/**
1: 	 * the constructor sets up the HeaderPrintWriter. 
1: 	 * <p>
0: 	 * @param writeTo		Where to write to.
1: 	 * @param headerGetter	Object to get headers for output lines.
1: 	 *
1: 	 * @see	PrintWriterGetHeader
1: 	 */
1: 	BasicHeaderPrintWriter(OutputStream writeTo,
0: 			PrintWriterGetHeader headerGetter,  boolean canClose){
1: 		super(writeTo, true);
1: 		this.headerGetter = headerGetter;
1: 		this.canClose = canClose;
1: 	}
1: 	BasicHeaderPrintWriter(Writer writeTo,
0: 			PrintWriterGetHeader headerGetter, boolean canClose){
1: 		super(writeTo, true);
1: 		this.headerGetter = headerGetter;
1: 		this.canClose = canClose;
1: 	}
1: 
1: 	/*
1: 	 * HeaderPrintWriter interface (partial; remaining methods
1: 	 * come from the PrintWriter supertype).
1: 	 */
1: 	public synchronized void printlnWithHeader(String message)
1: 	{ 
1: 		print(headerGetter.getHeader());
1: 		println(message);
1: 	}
1: 
1: 	public PrintWriterGetHeader getHeader()
1: 	{
1: 		return headerGetter;
1: 	}
1: 
1: 	public PrintWriter getPrintWriter(){
1: 		return this;
1: 	}
1: 
1: 	void complete() {
1: 		flush();
1: 		if (canClose) {
1: 			close();
1: 		}
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.stream
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.stream;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
0: 
0: import java.io.PrintWriter;
0: import java.io.Writer;
0: import java.io.OutputStream;
0: 
0: /**
0:  * Basic class to print lines with headers. 
0:  * <p>
0:  *
0:  * STUB: Should include code to emit a new line before a header
0:  *			which is not the first thing on the line.
0:  *
0:  */
0: class BasicHeaderPrintWriter 
0: 	extends PrintWriter
0: 	implements HeaderPrintWriter
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final PrintWriterGetHeader headerGetter;
0: 	private final boolean canClose;
0: 
0: 	// constructors
0: 
0: 	/**
0: 	 * the constructor sets up the HeaderPrintWriter. 
0: 	 * <p>
0: 	 * @param writeTo		Where to write to.
0: 	 * @param headerGetter	Object to get headers for output lines.
0: 	 *
0: 	 * @see	PrintWriterGetHeader
0: 	 */
0: 	BasicHeaderPrintWriter(OutputStream writeTo,
0: 			PrintWriterGetHeader headerGetter,  boolean canClose){
0: 		super(writeTo, true);
0: 		this.headerGetter = headerGetter;
0: 		this.canClose = canClose;
0: 	}
0: 	BasicHeaderPrintWriter(Writer writeTo,
0: 			PrintWriterGetHeader headerGetter, boolean canClose){
0: 		super(writeTo, true);
0: 		this.headerGetter = headerGetter;
0: 		this.canClose = canClose;
0: 	}
0: 
0: 	/*
0: 	 * HeaderPrintWriter interface (partial; remaining methods
0: 	 * come from the PrintWriter supertype).
0: 	 */
0: 	public synchronized void printlnWithHeader(String message)
0: 	{ 
0: 		print(headerGetter.getHeader());
0: 		println(message);
0: 	}
0: 
0: 	public PrintWriterGetHeader getHeader()
0: 	{
0: 		return headerGetter;
0: 	}
0: 
0: 	public PrintWriter getPrintWriter(){
0: 		return this;
0: 	}
0: 
0: 	void complete() {
0: 		flush();
0: 		if (canClose) {
0: 			close();
0: 		}
0: 	}
0: }
0: 
============================================================================