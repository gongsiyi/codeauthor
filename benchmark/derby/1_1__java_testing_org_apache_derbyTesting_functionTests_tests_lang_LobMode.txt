1:f798a41: /*
1:f798a41: 
1:f798a41:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LobMode
1:f798a41: 
1:f798a41:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f798a41:    contributor license agreements.  See the NOTICE file distributed with
1:f798a41:    this work for additional information regarding copyright ownership.
1:f798a41:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f798a41:    (the "License"); you may not use this file except in compliance with
1:f798a41:    the License.  You may obtain a copy of the License at
1:f798a41: 
1:f798a41:      http://www.apache.org/licenses/LICENSE-2.0
1:f798a41: 
1:f798a41:    Unless required by applicable law or agreed to in writing, software
1:f798a41:    distributed under the License is distributed on an "AS IS" BASIS,
1:f798a41:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f798a41:    See the License for the specific language governing permissions and
1:f798a41:    limitations under the License.
1:f798a41: 
1:f798a41:  */
1:f798a41: 
1:f798a41: package org.apache.derbyTesting.functionTests.tests.lang;
1:f798a41: 
1:f798a41: import java.sql.Clob;
1:f798a41: import java.sql.Blob;
1:f798a41: import java.sql.Date;
1:f798a41: import java.sql.Time;
1:f798a41: import java.sql.Timestamp;
1:f798a41: import java.sql.SQLException;
1:f798a41: import java.util.Arrays;
1:f798a41: import java.util.Collections;
1:f798a41: import java.util.HashMap;
1:f798a41: 
1:f798a41: import org.apache.derby.agg.Aggregator;
1:f798a41: 
1:f798a41: /**
1:f798a41:  * <p>
1:f798a41:  * This is a version of GenericMode for use with types which are not Comparable.
1:f798a41:  * The class started out for use with Blob and Clob but was pressed into service
1:f798a41:  * for other types also.
1:f798a41:  * </p>
1:f798a41:  *
1:f798a41:  * <p>
1:f798a41:  * In particular, this is a mode aggregator for use with the
1:f798a41:  * JDBC date/time classes too. You can't use GenericMode with those types
1:f798a41:  * because they do not satisfy its type bounds. That is because they inherit the
1:f798a41:  * Comparable implementation of java.util.Date rather than implementing
1:f798a41:  * their own more specific version of Comparable. That is,
1:dbed020:  * java.sql.Date implements Comparable&lt;java.util.Date&gt; rather than
1:dbed020:  * Comparable&lt;java.sql.Date&gt;.
1:f798a41:  * </p>
1:f798a41:  */
1:f798a41: public  class   LobMode<V>    implements  Aggregator<V,V,LobMode<V>>
1:f798a41: {
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41:     //
1:f798a41:     // NESTED CLASSES
1:f798a41:     //
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41: 
1:f798a41:     public  static  final   class   ClobMode extends LobMode<Clob> {}
1:f798a41:     public  static  final   class   BlobMode extends LobMode<Blob> {}
1:f798a41:     public  static  final   class   BinaryMode extends LobMode<byte[]> {}
1:f798a41:     public  static  final   class   DateMode extends LobMode<Date> {}
1:f798a41:     public  static  final   class   TimeMode extends LobMode<Time> {}
1:f798a41:     public  static  final   class   TimestampMode extends LobMode<Timestamp> {}
1:f798a41: 
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41:     //
1:f798a41:     // STATE
1:f798a41:     //
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41: 
1:f798a41:     private HashMap<String,Accumulator<V>>  _accumulators;
1:f798a41: 
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41:     //
1:f798a41:     // CONSTRUCTOR
1:f798a41:     //
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41: 
1:f798a41:     public  LobMode() {}
1:f798a41:     
1:f798a41:     public  void    init()
1:f798a41:     {
1:f798a41:         _accumulators = new HashMap<String,Accumulator<V>>();
1:f798a41:     }
1:f798a41:     public  void    accumulate( V value )
1:f798a41:     {
1:f798a41:         getAccumulator( value ).add( 1 );
1:f798a41:     }
1:f798a41:     public  void    merge( LobMode<V> otherAggregator )
1:f798a41:     {
1:f798a41:         HashMap<String,Accumulator<V>>  otherAccumulators = otherAggregator._accumulators;
1:f798a41:         
1:f798a41:         for ( Accumulator<V> accumulator : otherAccumulators.values() )
1:f798a41:         {
1:f798a41:             V   value = accumulator.getValue();
1:f798a41:             getAccumulator( value ).add( accumulator.getCount() );
1:f798a41:         }
1:f798a41:     }
1:f798a41: 
1:f798a41:     public  V terminate()
1:f798a41:     {
1:f798a41:         return _accumulators.isEmpty() ? null : Collections.max( _accumulators.values() ).getValue();
1:f798a41:     }
1:f798a41: 
1:f798a41:     private Accumulator<V>   getAccumulator( V value )
1:f798a41:     {
1:f798a41:         String      key = toString( value );
1:f798a41:         
1:f798a41:         Accumulator<V>   retval = _accumulators.get( key );
1:f798a41:         if ( retval == null )
1:f798a41:         {
1:f798a41:             retval = new Accumulator<V>( value );
1:f798a41:             _accumulators.put( key, retval );
1:f798a41:         }
1:f798a41: 
1:f798a41:         return retval;
1:f798a41:     }
1:f798a41: 
1:f798a41:     static  String  toString( Object raw )
1:f798a41:     {
1:f798a41:         try {
1:f798a41:             if ( raw instanceof Clob )
1:f798a41:             {
1:f798a41:                 Clob    clob = (Clob) raw;
1:f798a41: 
1:f798a41:                 return clob.getSubString( 1L, (int) clob.length() );
1:f798a41:             }
1:f798a41:             else if ( raw instanceof Blob )
1:f798a41:             {
1:f798a41:                 Blob    blob = (Blob) raw;
1:f798a41:                 byte[]  bytes = blob.getBytes( 1L, (int) blob.length() );
1:f798a41: 
1:f798a41:                 return new String( bytes, "UTF-8" );
1:f798a41:             }
1:f798a41:             else if ( raw instanceof Date ) { return raw.toString(); }
1:f798a41:             else if ( raw instanceof Time ) { return raw.toString(); }
1:f798a41:             else if ( raw instanceof Timestamp ) { return raw.toString(); }
1:f798a41:             else if ( raw instanceof byte[] )
1:f798a41:             {
1:f798a41:                 byte[]  bytes = (byte[]) raw;
1:f798a41: 
1:f798a41:                 return new String( bytes, "UTF-8" );
1:f798a41:             }
1:f798a41:         } catch (Exception e) { throw new IllegalArgumentException( e ); }
1:f798a41: 
1:f798a41:         throw new IllegalArgumentException( "Unsupported object type: " + raw.getClass().getName() );
1:f798a41:     }
1:f798a41: 
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41:     //
1:f798a41:     // NESTED CLASSES
1:f798a41:     //
1:f798a41:     ///////////////////////////////////////////////////////////////////////////////////
1:f798a41: 
1:f798a41:     public  static  final   class   Accumulator<V> implements  Comparable<Accumulator<V>>
1:f798a41:     {
1:f798a41:         private V       _value;
1:f798a41:         private int         _count;
1:f798a41: 
1:f798a41:         public  Accumulator( V value )
1:f798a41:         {
1:f798a41:             _value = value;
1:f798a41:             _count = 0;
1:f798a41:         }
1:f798a41: 
1:f798a41:         public  void    add( int increment ) { _count += increment; }
1:f798a41: 
1:f798a41:         public  V getValue() { return _value; }
1:f798a41:         public  int     getCount() { return _count; }
1:f798a41: 
1:f798a41:         // Comparable behavior
1:f798a41:         public  int compareTo( Accumulator<V> that )
1:f798a41:         {
1:f798a41:             int retval = this._count - that._count;
1:f798a41: 
1:f798a41:             if ( retval != 0 ) { return retval; }
1:f798a41:             else { return LobMode.toString( this._value ).compareTo( LobMode.toString( that._value ) ); }
1:f798a41:         }
1:f798a41:     }
1:f798a41: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * java.sql.Date implements Comparable&lt;java.util.Date&gt; rather than
1:  * Comparable&lt;java.sql.Date&gt;.
commit:f798a41
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LobMode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Clob;
1: import java.sql.Blob;
1: import java.sql.Date;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.sql.SQLException;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashMap;
1: 
1: import org.apache.derby.agg.Aggregator;
1: 
1: /**
1:  * <p>
1:  * This is a version of GenericMode for use with types which are not Comparable.
1:  * The class started out for use with Blob and Clob but was pressed into service
1:  * for other types also.
1:  * </p>
1:  *
1:  * <p>
1:  * In particular, this is a mode aggregator for use with the
1:  * JDBC date/time classes too. You can't use GenericMode with those types
1:  * because they do not satisfy its type bounds. That is because they inherit the
1:  * Comparable implementation of java.util.Date rather than implementing
1:  * their own more specific version of Comparable. That is,
0:  * java.sql.Date implements Comparable<java.util.Date> rather than
0:  * Comparable<java.sql.Date>.
1:  * </p>
1:  */
1: public  class   LobMode<V>    implements  Aggregator<V,V,LobMode<V>>
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   class   ClobMode extends LobMode<Clob> {}
1:     public  static  final   class   BlobMode extends LobMode<Blob> {}
1:     public  static  final   class   BinaryMode extends LobMode<byte[]> {}
1:     public  static  final   class   DateMode extends LobMode<Date> {}
1:     public  static  final   class   TimeMode extends LobMode<Time> {}
1:     public  static  final   class   TimestampMode extends LobMode<Timestamp> {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private HashMap<String,Accumulator<V>>  _accumulators;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  LobMode() {}
1:     
1:     public  void    init()
1:     {
1:         _accumulators = new HashMap<String,Accumulator<V>>();
1:     }
1:     public  void    accumulate( V value )
1:     {
1:         getAccumulator( value ).add( 1 );
1:     }
1:     public  void    merge( LobMode<V> otherAggregator )
1:     {
1:         HashMap<String,Accumulator<V>>  otherAccumulators = otherAggregator._accumulators;
1:         
1:         for ( Accumulator<V> accumulator : otherAccumulators.values() )
1:         {
1:             V   value = accumulator.getValue();
1:             getAccumulator( value ).add( accumulator.getCount() );
1:         }
1:     }
1: 
1:     public  V terminate()
1:     {
1:         return _accumulators.isEmpty() ? null : Collections.max( _accumulators.values() ).getValue();
1:     }
1: 
1:     private Accumulator<V>   getAccumulator( V value )
1:     {
1:         String      key = toString( value );
1:         
1:         Accumulator<V>   retval = _accumulators.get( key );
1:         if ( retval == null )
1:         {
1:             retval = new Accumulator<V>( value );
1:             _accumulators.put( key, retval );
1:         }
1: 
1:         return retval;
1:     }
1: 
1:     static  String  toString( Object raw )
1:     {
1:         try {
1:             if ( raw instanceof Clob )
1:             {
1:                 Clob    clob = (Clob) raw;
1: 
1:                 return clob.getSubString( 1L, (int) clob.length() );
1:             }
1:             else if ( raw instanceof Blob )
1:             {
1:                 Blob    blob = (Blob) raw;
1:                 byte[]  bytes = blob.getBytes( 1L, (int) blob.length() );
1: 
1:                 return new String( bytes, "UTF-8" );
1:             }
1:             else if ( raw instanceof Date ) { return raw.toString(); }
1:             else if ( raw instanceof Time ) { return raw.toString(); }
1:             else if ( raw instanceof Timestamp ) { return raw.toString(); }
1:             else if ( raw instanceof byte[] )
1:             {
1:                 byte[]  bytes = (byte[]) raw;
1: 
1:                 return new String( bytes, "UTF-8" );
1:             }
1:         } catch (Exception e) { throw new IllegalArgumentException( e ); }
1: 
1:         throw new IllegalArgumentException( "Unsupported object type: " + raw.getClass().getName() );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   class   Accumulator<V> implements  Comparable<Accumulator<V>>
1:     {
1:         private V       _value;
1:         private int         _count;
1: 
1:         public  Accumulator( V value )
1:         {
1:             _value = value;
1:             _count = 0;
1:         }
1: 
1:         public  void    add( int increment ) { _count += increment; }
1: 
1:         public  V getValue() { return _value; }
1:         public  int     getCount() { return _count; }
1: 
1:         // Comparable behavior
1:         public  int compareTo( Accumulator<V> that )
1:         {
1:             int retval = this._count - that._count;
1: 
1:             if ( retval != 0 ) { return retval; }
1:             else { return LobMode.toString( this._value ).compareTo( LobMode.toString( that._value ) ); }
1:         }
1:     }
1: }
============================================================================