1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
9:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:8f22cfa: import java.util.ArrayList;
1:8f22cfa: import java.util.Arrays;
1:8f22cfa: import java.util.List;
1:d29ca2a: import java.util.Map;
1:8f22cfa: import java.util.SortedSet;
1:8f22cfa: import java.util.TreeSet;
1:d29ca2a: 
1:f33e219: import javax.jms.JMSException;
1:f33e219: import javax.jms.Queue;
1:f33e219: import javax.jms.TemporaryQueue;
1:f33e219: import javax.jms.TemporaryTopic;
1:f33e219: import javax.jms.Topic;
1:f33e219: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: 
1:d29ca2a: public class ActiveMQDestinationTest extends DataStructureTestSupport {
1:d29ca2a: 
1:d29ca2a:     public ActiveMQDestination destination;
1:f812e34: 
1:b1d46e4:     public void initCombosForTestDestinationMarshaling() {
1:f812e34:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
1:f812e34:                                                           new ActiveMQTopic("TEST"),
1:f812e34:                                                           new ActiveMQTempQueue("TEST:1"),
1:f812e34:                                                           new ActiveMQTempTopic("TEST:1"),
1:f812e34:                                                           new ActiveMQTempQueue("TEST"),
1:f812e34:                                                           new ActiveMQTempTopic("TEST"),
1:f812e34:                                                           new ActiveMQQueue("TEST?option=value"),
1:f812e34:                                                           new ActiveMQTopic("TEST?option=value"),
1:f812e34:                                                           new ActiveMQTempQueue("TEST:1?option=value"),
1:f812e34:                                                           new ActiveMQTempTopic("TEST:1?option=value")});
1:d29ca2a:     }
1:f812e34: 
1:b1d46e4:     public void testDestinationMarshaling() throws IOException {
1:d29ca2a:         assertBeanMarshalls(destination);
1:d29ca2a:     }
1:f812e34: 
1:b1d46e4:     public void initCombosForTestDestinationOptions() {
1:f812e34:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST?k1=v1&k2=v2"),
1:f812e34:                                                           new ActiveMQTopic("TEST?k1=v1&k2=v2"),
1:f812e34:                                                           new ActiveMQTempQueue("TEST:1?k1=v1&k2=v2"),
1:933eb2f:                                                           new ActiveMQTempTopic("TEST:1?k1=v1&k2=v2")});
1:d29ca2a:     }
1:f812e34: 
1:b1d46e4:     public void testDestinationOptions() throws IOException {
1:d29ca2a:         Map options = destination.getOptions();
1:d29ca2a:         assertNotNull(options);
1:d29ca2a:         assertEquals("v1", options.get("k1"));
1:d29ca2a:         assertEquals("v2", options.get("k2"));
1:d29ca2a:     }
1:f812e34: 
1:8f22cfa:     public void testSorting() throws Exception {
1:933eb2f:         SortedSet<ActiveMQDestination> set = new TreeSet<ActiveMQDestination>();
1:f812e34:         ActiveMQDestination[] destinations = {new ActiveMQQueue("A"), new ActiveMQQueue("B"),
1:f812e34:                                               new ActiveMQTopic("A"), new ActiveMQTopic("B")};
1:933eb2f:         List<ActiveMQDestination> expected = Arrays.asList(destinations);
1:8f22cfa:         set.addAll(expected);
1:933eb2f:         List<ActiveMQDestination> actual = new ArrayList<ActiveMQDestination>(set);
1:8f22cfa:         assertEquals("Sorted order", expected, actual);
1:d29ca2a:     }
1:f812e34: 
1:f33e219:     // https://issues.apache.org/activemq/browse/AMQ-2630
1:f33e219:     class CombyDest implements Queue, Topic, TemporaryQueue, TemporaryTopic {
1:f33e219: 
1:f33e219:         private final String qName;
1:f33e219:         private final String topicName;
1:f33e219: 
1:f33e219:         public CombyDest(String qName, String topicName) {
1:f33e219:             this.qName = qName;
1:f33e219:             this.topicName = topicName;
1:f33e219:         }
1:f33e219:         
1:f33e219:         public void delete() throws JMSException {
1:f33e219:         }
1:f33e219: 
1:f33e219:         public String getTopicName() throws JMSException {
1:f33e219:             return topicName;
1:f33e219:         }
1:f33e219: 
1:f33e219:         public String getQueueName() throws JMSException {
1:f33e219:             return qName;
1:f33e219:         }    
1:f33e219:     }
1:f33e219:     
1:f33e219:     public void testTransformPollymorphic() throws Exception {
1:f33e219:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:f33e219:         assertEquals(ActiveMQDestination.transform(queue), queue);
1:f33e219:         assertTrue("is a q", ActiveMQDestination.transform(new CombyDest(null, "Topic")) instanceof ActiveMQTopic);
1:f33e219:         assertTrue("is a q", ActiveMQDestination.transform(new CombyDest("Q", null)) instanceof ActiveMQQueue);
1:f33e219:         try {
1:f33e219:             ActiveMQDestination.transform(new CombyDest(null, null));
1:f33e219:             fail("expect ex as cannot disambiguate");
1:f33e219:         } catch (JMSException expected) { 
1:f33e219:         } 
1:f33e219:         try {
1:f33e219:             ActiveMQDestination.transform(new CombyDest("Q", "T"));
1:f33e219:             fail("expect ex as cannot disambiguate");
1:f33e219:         } catch (JMSException expected) { 
1:f33e219:         }
1:f33e219:     }
1:f33e219:     
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(ActiveMQDestinationTest.class);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:f812e34: 
1:b1d46e4:     public void testEmptyQueueName() {
1:b1d46e4:         try {
1:b1d46e4:             new ActiveMQQueue("");
1:b1d46e4:             fail("Should have thrown IllegalArgumentException");
1:b1d46e4:         } catch (IllegalArgumentException e) {
1:b1d46e4: 
1:b1d46e4:         }
1:b1d46e4:     }
1:b1d46e4: 
1:b1d46e4:     public void testEmptyTopicName() {
1:b1d46e4:         try {
1:b1d46e4:             new ActiveMQTopic("");
1:b1d46e4:             fail("Should have thrown IllegalArgumentException");
1:b1d46e4:         } catch (IllegalArgumentException e) {
1:b1d46e4: 
1:b1d46e4:         }
1:b1d46e4:     }
1:8f22cfa: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b1d46e4
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestDestinationMarshaling() {
/////////////////////////////////////////////////////////////////////////
1:     public void testDestinationMarshaling() throws IOException {
1:     public void initCombosForTestDestinationOptions() {
1:     public void testDestinationOptions() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void testEmptyQueueName() {
1:         try {
1:             new ActiveMQQueue("");
1:             fail("Should have thrown IllegalArgumentException");
1:         } catch (IllegalArgumentException e) {
1: 
1:         }
1:     }
1: 
1:     public void testEmptyTopicName() {
1:         try {
1:             new ActiveMQTopic("");
1:             fail("Should have thrown IllegalArgumentException");
1:         } catch (IllegalArgumentException e) {
1: 
1:         }
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:f33e219
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import javax.jms.Topic;
1: 
/////////////////////////////////////////////////////////////////////////
1:     // https://issues.apache.org/activemq/browse/AMQ-2630
1:     class CombyDest implements Queue, Topic, TemporaryQueue, TemporaryTopic {
1: 
1:         private final String qName;
1:         private final String topicName;
1: 
1:         public CombyDest(String qName, String topicName) {
1:             this.qName = qName;
1:             this.topicName = topicName;
1:         }
1:         
1:         public void delete() throws JMSException {
1:         }
1: 
1:         public String getTopicName() throws JMSException {
1:             return topicName;
1:         }
1: 
1:         public String getQueueName() throws JMSException {
1:             return qName;
1:         }    
1:     }
1:     
1:     public void testTransformPollymorphic() throws Exception {
1:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:         assertEquals(ActiveMQDestination.transform(queue), queue);
1:         assertTrue("is a q", ActiveMQDestination.transform(new CombyDest(null, "Topic")) instanceof ActiveMQTopic);
1:         assertTrue("is a q", ActiveMQDestination.transform(new CombyDest("Q", null)) instanceof ActiveMQQueue);
1:         try {
1:             ActiveMQDestination.transform(new CombyDest(null, null));
1:             fail("expect ex as cannot disambiguate");
1:         } catch (JMSException expected) { 
1:         } 
1:         try {
1:             ActiveMQDestination.transform(new CombyDest("Q", "T"));
1:             fail("expect ex as cannot disambiguate");
1:         } catch (JMSException expected) { 
1:         }
1:     }
1:     
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:                                                           new ActiveMQTempTopic("TEST:1?k1=v1&k2=v2")});
/////////////////////////////////////////////////////////////////////////
1:         SortedSet<ActiveMQDestination> set = new TreeSet<ActiveMQDestination>();
1:         List<ActiveMQDestination> expected = Arrays.asList(destinations);
1:         List<ActiveMQDestination> actual = new ArrayList<ActiveMQDestination>(set);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
1:                                                           new ActiveMQTopic("TEST"),
1:                                                           new ActiveMQTempQueue("TEST:1"),
1:                                                           new ActiveMQTempTopic("TEST:1"),
1:                                                           new ActiveMQTempQueue("TEST"),
1:                                                           new ActiveMQTempTopic("TEST"),
1:                                                           new ActiveMQQueue("TEST?option=value"),
1:                                                           new ActiveMQTopic("TEST?option=value"),
1:                                                           new ActiveMQTempQueue("TEST:1?option=value"),
1:                                                           new ActiveMQTempTopic("TEST:1?option=value")});
1: 
1: 
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST?k1=v1&k2=v2"),
1:                                                           new ActiveMQTopic("TEST?k1=v1&k2=v2"),
1:                                                           new ActiveMQTempQueue("TEST:1?k1=v1&k2=v2"),
0:                                                           new ActiveMQTempTopic("TEST:1?k1=v1&k2=v2"),});
1: 
1: 
1:         ActiveMQDestination[] destinations = {new ActiveMQQueue("A"), new ActiveMQQueue("B"),
1:                                               new ActiveMQTopic("A"), new ActiveMQTopic("B")};
1: 
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: import java.util.Map;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTempQueue;
0: import org.apache.activemq.command.ActiveMQTempTopic;
0: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: import junit.framework.Test;
1: 
1: public class ActiveMQDestinationTest extends DataStructureTestSupport {
1: 
1:     public ActiveMQDestination destination;
1:     
0:     public void initCombosForTestDesintaionMarshaling() {
0:         addCombinationValues("destination", new Object[]{
0:                 new ActiveMQQueue("TEST"),
0:                 new ActiveMQTopic("TEST"),
0:                 new ActiveMQTempQueue("TEST:1"),
0:                 new ActiveMQTempTopic("TEST:1"),
0:                 new ActiveMQQueue("TEST?option=value"),
0:                 new ActiveMQTopic("TEST?option=value"),
0:                 new ActiveMQTempQueue("TEST:1?option=value"),
0:                 new ActiveMQTempTopic("TEST:1?option=value"),
0:         });
1:     }
1:     
0:     public void testDesintaionMarshaling() throws IOException {
1:         assertBeanMarshalls(destination);
1:     }
1:     
0:     public void initCombosForTestDesintaionOptions() {
0:         addCombinationValues("destination", new Object[]{
0:                 new ActiveMQQueue("TEST?k1=v1&k2=v2"),
0:                 new ActiveMQTopic("TEST?k1=v1&k2=v2"),
0:                 new ActiveMQTempQueue("TEST:1?k1=v1&k2=v2"),
0:                 new ActiveMQTempTopic("TEST:1?k1=v1&k2=v2"),
0:         });
1:     }
1:     
0:     public void testDesintaionOptions() throws IOException {
1:         Map options = destination.getOptions();
1:         assertNotNull(options);
1:         assertEquals("v1", options.get("k1"));
1:         assertEquals("v2", options.get("k2"));
1:     }
1: 
1:     public static Test suite() {
1:         return suite(ActiveMQDestinationTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1:     
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:4cd0a27
/////////////////////////////////////////////////////////////////////////
0:                 new ActiveMQTempQueue("TEST"),
0:                 new ActiveMQTempTopic("TEST"),
/////////////////////////////////////////////////////////////////////////
0:     
0:    
author:James Strachan
-------------------------------------------------------------------------------
commit:8f22cfa
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.SortedSet;
0: import java.util.TreeMap;
1: import java.util.TreeSet;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testSorting() throws Exception {
0:         SortedSet set = new TreeSet();
0:         ActiveMQDestination[] destinations = { new ActiveMQQueue("A"), new ActiveMQQueue("B"), new ActiveMQTopic("A"), new ActiveMQTopic("B") };
0:         List expected = Arrays.asList(destinations);
1:         set.addAll(expected);
0:         List actual = new ArrayList(set);
1:         assertEquals("Sorted order", expected, actual);
1:     }
============================================================================