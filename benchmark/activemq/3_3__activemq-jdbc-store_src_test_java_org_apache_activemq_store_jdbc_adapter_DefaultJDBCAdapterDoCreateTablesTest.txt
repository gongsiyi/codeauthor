1:4b2760e: /**
1:4b2760e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b2760e:  * contributor license agreements.  See the NOTICE file distributed with
1:4b2760e:  * this work for additional information regarding copyright ownership.
1:4b2760e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b2760e:  * (the "License"); you may not use this file except in compliance with
1:4b2760e:  * the License.  You may obtain a copy of the License at
1:4b2760e:  *
1:4b2760e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b2760e:  *
1:4b2760e:  * Unless required by applicable law or agreed to in writing, software
1:4b2760e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b2760e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b2760e:  * See the License for the specific language governing permissions and
1:4b2760e:  * limitations under the License.
1:4b2760e:  */
1:03a211e: package org.apache.activemq.store.jdbc.adapter;
3:03a211e: 
1:03a211e: import static org.apache.log4j.Level.DEBUG;
1:03a211e: import static org.apache.log4j.Level.WARN;
1:03a211e: import static org.junit.Assert.assertEquals;
1:03a211e: import static org.mockito.Answers.RETURNS_DEEP_STUBS;
1:03a211e: import static org.mockito.Mockito.inOrder;
1:03a211e: import static org.mockito.Mockito.when;
1:03a211e: 
1:03a211e: import java.io.IOException;
1:03a211e: import java.sql.Connection;
1:03a211e: import java.sql.ResultSet;
1:03a211e: import java.sql.SQLException;
1:03a211e: import java.sql.Statement;
1:03a211e: import java.util.ArrayList;
1:03a211e: import java.util.List;
1:03a211e: 
1:03a211e: import org.apache.activemq.store.jdbc.Statements;
1:03a211e: import org.apache.activemq.store.jdbc.TransactionContext;
1:03a211e: import org.apache.activemq.util.DefaultTestAppender;
1:03a211e: import org.apache.log4j.Level;
1:03a211e: import org.apache.log4j.Logger;
1:03a211e: import org.apache.log4j.spi.LoggingEvent;
1:03a211e: import org.junit.After;
1:03a211e: import org.junit.Before;
1:03a211e: import org.junit.Test;
1:03a211e: import org.junit.runner.RunWith;
1:03a211e: import org.mockito.InOrder;
1:03a211e: import org.mockito.Mock;
1:03a211e: import org.mockito.runners.MockitoJUnitRunner;
1:03a211e: 
1:03a211e: @RunWith(MockitoJUnitRunner.class)
1:03a211e: public class DefaultJDBCAdapterDoCreateTablesTest {
1:03a211e: 
1:03a211e: 	private static final String CREATE_STATEMENT1 = "createStatement1";
1:03a211e: 	private static final String CREATE_STATEMENT2 = "createStatement2";
1:03a211e: 	private static final String[] CREATE_STATEMENTS = new String[] { CREATE_STATEMENT1, CREATE_STATEMENT2 };
1:03a211e: 	private static final int VENDOR_CODE = 1;
1:03a211e: 	private static final String SQL_STATE = "SqlState";
1:03a211e: 	private static final String MY_REASON = "MyReason";
1:03a211e: 
1:03a211e: 	private DefaultJDBCAdapter defaultJDBCAdapter;
1:03a211e: 
1:03a211e: 	private List<LoggingEvent> loggingEvents = new ArrayList<>();
1:03a211e: 
3:03a211e: 	@Mock
1:03a211e: 	private TransactionContext transactionContext;
1:03a211e: 
1:03a211e: 	@Mock(answer = RETURNS_DEEP_STUBS)
1:03a211e: 	private Connection connection;
1:03a211e: 
1:03a211e: 	@Mock
1:03a211e: 	private Statements statements;
1:03a211e: 
1:03a211e: 	@Mock
1:03a211e: 	private ResultSet resultSet;
1:03a211e: 
1:03a211e: 	@Mock
1:03a211e: 	private Statement statement1, statement2;
1:03a211e: 
1:03a211e: 	@Before
1:03a211e: 	public void setUp() throws IOException, SQLException {
1:03a211e: 		DefaultTestAppender appender = new DefaultTestAppender() {
1:03a211e: 			@Override
1:03a211e: 			public void doAppend(LoggingEvent event) {
1:03a211e: 				loggingEvents.add(event);
1:03a211e: 			}
1:03a211e: 		};
1:03a211e: 		Logger rootLogger = Logger.getRootLogger();
1:03a211e: 		rootLogger.setLevel(Level.DEBUG);
1:03a211e: 		rootLogger.addAppender(appender);
1:03a211e: 
1:03a211e: 
1:03a211e: 		defaultJDBCAdapter = new DefaultJDBCAdapter();
1:03a211e: 		defaultJDBCAdapter.statements = statements;
1:03a211e: 
1:03a211e: 		when(statements.getCreateSchemaStatements()).thenReturn(CREATE_STATEMENTS);
1:03a211e: 		when(transactionContext.getConnection()).thenReturn(connection);
1:03a211e: 		when(connection.getMetaData().getTables(null, null, this.statements.getFullMessageTableName(),new String[] { "TABLE" })).thenReturn(resultSet);
1:03a211e: 		when(connection.createStatement()).thenReturn(statement1, statement2);
1:03a211e: 		when(connection.getAutoCommit()).thenReturn(true);
1:03a211e: 	}
1:03a211e: 
1:03a211e: 	@After
1:03a211e: 	public void tearDown() {
1:03a211e: 		loggingEvents = new ArrayList<>();
1:03a211e: 	}
1:03a211e: 
1:03a211e: 	@Test
1:03a211e: 	public void createsTheTablesWhenNoMessageTableExistsAndLogsSqlExceptionsInWarnLevel() throws IOException, SQLException {
1:03a211e: 		when(resultSet.next()).thenReturn(false);
1:03a211e: 		when(statement2.execute(CREATE_STATEMENT2)).thenThrow(new SQLException(MY_REASON, SQL_STATE, VENDOR_CODE));
1:03a211e: 
1:03a211e: 		defaultJDBCAdapter.doCreateTables(transactionContext);
1:03a211e: 
1:2a815c2: 		InOrder inOrder = inOrder(resultSet, connection, statement1, statement2);
1:03a211e: 		inOrder.verify(resultSet).next();
1:03a211e: 		inOrder.verify(resultSet).close();
1:03a211e: 		inOrder.verify(connection).createStatement();
1:03a211e: 		inOrder.verify(statement1).execute(CREATE_STATEMENT1);
1:03a211e: 		inOrder.verify(statement1).close();
1:03a211e: 		inOrder.verify(connection).createStatement();
1:03a211e: 		inOrder.verify(statement2).execute(CREATE_STATEMENT2);
1:03a211e: 		inOrder.verify(statement2).close();
1:03a211e: 
1:03a211e: 		assertEquals(4, loggingEvents.size());
1:03a211e: 		assertLog(0, DEBUG, "Executing SQL: " + CREATE_STATEMENT1);
1:03a211e: 		assertLog(1, DEBUG, "Executing SQL: " + CREATE_STATEMENT2);
1:03a211e: 		assertLog(2, WARN, "Could not create JDBC tables; they could already exist. Failure was: " + CREATE_STATEMENT2 + " Message: " + MY_REASON + " SQLState: " + SQL_STATE + " Vendor code: " + VENDOR_CODE);
1:03a211e: 		assertLog(3, WARN, "Failure details: " + MY_REASON);
1:03a211e: 	}
1:03a211e: 
1:03a211e: 	@Test
1:03a211e: 	public void triesTocreateTheTablesWhenMessageTableExistsAndLogsSqlExceptionsInDebugLevel() throws SQLException, IOException {
1:03a211e: 		when(resultSet.next()).thenReturn(true);
1:03a211e: 		when(statement1.execute(CREATE_STATEMENT1)).thenThrow(new SQLException(MY_REASON, SQL_STATE, VENDOR_CODE));
1:03a211e: 
1:03a211e: 		defaultJDBCAdapter.doCreateTables(transactionContext);
1:03a211e: 
1:2a815c2: 		InOrder inOrder = inOrder(resultSet, connection, statement1, statement2);
1:03a211e: 		inOrder.verify(resultSet).next();
1:03a211e: 		inOrder.verify(resultSet).close();
1:03a211e: 		inOrder.verify(connection).createStatement();
1:03a211e: 		inOrder.verify(statement1).execute(CREATE_STATEMENT1);
1:03a211e: 		inOrder.verify(statement1).close();
1:03a211e: 		inOrder.verify(connection).createStatement();
1:03a211e: 		inOrder.verify(statement2).execute(CREATE_STATEMENT2);
1:03a211e: 		inOrder.verify(statement2).close();
1:03a211e: 
1:03a211e: 		assertEquals(3, loggingEvents.size());
1:03a211e: 		assertLog(0, DEBUG, "Executing SQL: " + CREATE_STATEMENT1);
1:03a211e: 		assertLog(1, DEBUG, "Could not create JDBC tables; The message table already existed. Failure was: " + CREATE_STATEMENT1 + " Message: " + MY_REASON + " SQLState: " + SQL_STATE	+ " Vendor code: " + VENDOR_CODE);
1:03a211e: 		assertLog(2, DEBUG, "Executing SQL: " + CREATE_STATEMENT2);
1:03a211e: 	}
1:03a211e: 
1:03a211e: 	@Test
1:03a211e: 	public void commitsTheTransactionWhenAutoCommitIsDisabled() throws SQLException, IOException {
1:03a211e: 		when(connection.getAutoCommit()).thenReturn(false);
1:03a211e: 		when(resultSet.next()).thenReturn(false);
1:03a211e: 
1:03a211e: 		defaultJDBCAdapter.doCreateTables(transactionContext);
1:03a211e: 
1:2a815c2: 		InOrder inOrder = inOrder(resultSet, connection, statement1, statement2);
1:03a211e: 		inOrder.verify(resultSet).next();
1:03a211e: 		inOrder.verify(resultSet).close();
1:03a211e: 		inOrder.verify(connection).createStatement();
1:03a211e: 		inOrder.verify(statement1).execute(CREATE_STATEMENT1);
1:03a211e: 		inOrder.verify(connection).commit();
1:03a211e: 		inOrder.verify(statement1).close();
1:03a211e: 		inOrder.verify(connection).createStatement();
1:03a211e: 		inOrder.verify(statement2).execute(CREATE_STATEMENT2);
1:03a211e: 		inOrder.verify(connection).commit();
1:03a211e: 		inOrder.verify(statement2).close();
1:03a211e: 
1:03a211e: 		assertEquals(2, loggingEvents.size());
1:03a211e: 		assertLog(0, DEBUG, "Executing SQL: " + CREATE_STATEMENT1);
1:03a211e: 		assertLog(1, DEBUG, "Executing SQL: " + CREATE_STATEMENT2);
1:03a211e: 	}
1:03a211e: 
1:03a211e: 	private void assertLog(int messageNumber, Level level, String message) {
1:03a211e: 		LoggingEvent loggingEvent = loggingEvents.get(messageNumber);
1:03a211e: 		assertEquals(level, loggingEvent.getLevel());
1:03a211e: 		assertEquals(message, loggingEvent.getMessage());
1:03a211e: 	}
1:03a211e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2a815c2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		InOrder inOrder = inOrder(resultSet, connection, statement1, statement2);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		InOrder inOrder = inOrder(resultSet, connection, statement1, statement2);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		InOrder inOrder = inOrder(resultSet, connection, statement1, statement2);
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4b2760e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Jeroen Bastijns
-------------------------------------------------------------------------------
commit:03a211e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import static org.apache.log4j.Level.DEBUG;
1: import static org.apache.log4j.Level.WARN;
1: import static org.junit.Assert.assertEquals;
1: import static org.mockito.Answers.RETURNS_DEEP_STUBS;
1: import static org.mockito.Mockito.inOrder;
1: import static org.mockito.Mockito.when;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: import java.util.List;
0: import java.util.concurrent.locks.Lock;
0: import java.util.concurrent.locks.ReadWriteLock;
1: 
1: import org.apache.activemq.store.jdbc.Statements;
1: import org.apache.activemq.store.jdbc.TransactionContext;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.InOrder;
1: import org.mockito.Mock;
1: import org.mockito.runners.MockitoJUnitRunner;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class DefaultJDBCAdapterDoCreateTablesTest {
1: 
1: 	private static final String CREATE_STATEMENT1 = "createStatement1";
1: 	private static final String CREATE_STATEMENT2 = "createStatement2";
1: 	private static final String[] CREATE_STATEMENTS = new String[] { CREATE_STATEMENT1, CREATE_STATEMENT2 };
1: 	private static final int VENDOR_CODE = 1;
1: 	private static final String SQL_STATE = "SqlState";
1: 	private static final String MY_REASON = "MyReason";
1: 
1: 	private DefaultJDBCAdapter defaultJDBCAdapter;
1: 
1: 	private List<LoggingEvent> loggingEvents = new ArrayList<>();
1: 
1: 	@Mock
0: 	private ReadWriteLock readWriteLock;
1: 
1: 	@Mock
0: 	private Lock lock;
1: 
1: 	@Mock
1: 	private TransactionContext transactionContext;
1: 
1: 	@Mock(answer = RETURNS_DEEP_STUBS)
1: 	private Connection connection;
1: 
1: 	@Mock
1: 	private Statements statements;
1: 
1: 	@Mock
1: 	private ResultSet resultSet;
1: 
1: 	@Mock
1: 	private Statement statement1, statement2;
1: 
1: 	@Before
1: 	public void setUp() throws IOException, SQLException {
1: 		DefaultTestAppender appender = new DefaultTestAppender() {
1: 			@Override
1: 			public void doAppend(LoggingEvent event) {
1: 				loggingEvents.add(event);
1: 			}
1: 		};
1: 		Logger rootLogger = Logger.getRootLogger();
1: 		rootLogger.setLevel(Level.DEBUG);
1: 		rootLogger.addAppender(appender);
1: 
1: 
1: 		defaultJDBCAdapter = new DefaultJDBCAdapter();
0: 		defaultJDBCAdapter.cleanupExclusiveLock = readWriteLock;
1: 		defaultJDBCAdapter.statements = statements;
1: 
1: 		when(statements.getCreateSchemaStatements()).thenReturn(CREATE_STATEMENTS);
1: 		when(transactionContext.getConnection()).thenReturn(connection);
1: 		when(connection.getMetaData().getTables(null, null, this.statements.getFullMessageTableName(),new String[] { "TABLE" })).thenReturn(resultSet);
1: 		when(connection.createStatement()).thenReturn(statement1, statement2);
1: 		when(connection.getAutoCommit()).thenReturn(true);
0: 		when(readWriteLock.writeLock()).thenReturn(lock);
1: 	}
1: 
1: 	@After
1: 	public void tearDown() {
1: 		loggingEvents = new ArrayList<>();
1: 	}
1: 
1: 	@Test
1: 	public void createsTheTablesWhenNoMessageTableExistsAndLogsSqlExceptionsInWarnLevel() throws IOException, SQLException {
1: 		when(resultSet.next()).thenReturn(false);
1: 		when(statement2.execute(CREATE_STATEMENT2)).thenThrow(new SQLException(MY_REASON, SQL_STATE, VENDOR_CODE));
1: 
1: 		defaultJDBCAdapter.doCreateTables(transactionContext);
1: 
0: 		InOrder inOrder = inOrder(lock, resultSet, connection, statement1, statement2);
0: 		inOrder.verify(lock).lock();
1: 		inOrder.verify(resultSet).next();
1: 		inOrder.verify(resultSet).close();
1: 		inOrder.verify(connection).createStatement();
1: 		inOrder.verify(statement1).execute(CREATE_STATEMENT1);
1: 		inOrder.verify(statement1).close();
1: 		inOrder.verify(connection).createStatement();
1: 		inOrder.verify(statement2).execute(CREATE_STATEMENT2);
1: 		inOrder.verify(statement2).close();
0: 		inOrder.verify(lock).unlock();
1: 
1: 		assertEquals(4, loggingEvents.size());
1: 		assertLog(0, DEBUG, "Executing SQL: " + CREATE_STATEMENT1);
1: 		assertLog(1, DEBUG, "Executing SQL: " + CREATE_STATEMENT2);
1: 		assertLog(2, WARN, "Could not create JDBC tables; they could already exist. Failure was: " + CREATE_STATEMENT2 + " Message: " + MY_REASON + " SQLState: " + SQL_STATE + " Vendor code: " + VENDOR_CODE);
1: 		assertLog(3, WARN, "Failure details: " + MY_REASON);
1: 	}
1: 
1: 	@Test
1: 	public void triesTocreateTheTablesWhenMessageTableExistsAndLogsSqlExceptionsInDebugLevel() throws SQLException, IOException {
1: 		when(resultSet.next()).thenReturn(true);
1: 		when(statement1.execute(CREATE_STATEMENT1)).thenThrow(new SQLException(MY_REASON, SQL_STATE, VENDOR_CODE));
1: 
1: 		defaultJDBCAdapter.doCreateTables(transactionContext);
1: 
0: 		InOrder inOrder = inOrder(lock, resultSet, connection, statement1, statement2);
0: 		inOrder.verify(lock).lock();
1: 		inOrder.verify(resultSet).next();
1: 		inOrder.verify(resultSet).close();
1: 		inOrder.verify(connection).createStatement();
1: 		inOrder.verify(statement1).execute(CREATE_STATEMENT1);
1: 		inOrder.verify(statement1).close();
1: 		inOrder.verify(connection).createStatement();
1: 		inOrder.verify(statement2).execute(CREATE_STATEMENT2);
1: 		inOrder.verify(statement2).close();
0: 		inOrder.verify(lock).unlock();
1: 
1: 		assertEquals(3, loggingEvents.size());
1: 		assertLog(0, DEBUG, "Executing SQL: " + CREATE_STATEMENT1);
1: 		assertLog(1, DEBUG, "Could not create JDBC tables; The message table already existed. Failure was: " + CREATE_STATEMENT1 + " Message: " + MY_REASON + " SQLState: " + SQL_STATE	+ " Vendor code: " + VENDOR_CODE);
1: 		assertLog(2, DEBUG, "Executing SQL: " + CREATE_STATEMENT2);
1: 	}
1: 
1: 	@Test
1: 	public void commitsTheTransactionWhenAutoCommitIsDisabled() throws SQLException, IOException {
1: 		when(connection.getAutoCommit()).thenReturn(false);
1: 		when(resultSet.next()).thenReturn(false);
1: 
1: 		defaultJDBCAdapter.doCreateTables(transactionContext);
1: 
0: 		InOrder inOrder = inOrder(lock, resultSet, connection, statement1, statement2);
0: 		inOrder.verify(lock).lock();
1: 		inOrder.verify(resultSet).next();
1: 		inOrder.verify(resultSet).close();
1: 		inOrder.verify(connection).createStatement();
1: 		inOrder.verify(statement1).execute(CREATE_STATEMENT1);
1: 		inOrder.verify(connection).commit();
1: 		inOrder.verify(statement1).close();
1: 		inOrder.verify(connection).createStatement();
1: 		inOrder.verify(statement2).execute(CREATE_STATEMENT2);
1: 		inOrder.verify(connection).commit();
1: 		inOrder.verify(statement2).close();
0: 		inOrder.verify(lock).unlock();
1: 
1: 		assertEquals(2, loggingEvents.size());
1: 		assertLog(0, DEBUG, "Executing SQL: " + CREATE_STATEMENT1);
1: 		assertLog(1, DEBUG, "Executing SQL: " + CREATE_STATEMENT2);
1: 	}
1: 
1: 	private void assertLog(int messageNumber, Level level, String message) {
1: 		LoggingEvent loggingEvent = loggingEvents.get(messageNumber);
1: 		assertEquals(level, loggingEvent.getLevel());
1: 		assertEquals(message, loggingEvent.getMessage());
1: 	}
1: }
============================================================================