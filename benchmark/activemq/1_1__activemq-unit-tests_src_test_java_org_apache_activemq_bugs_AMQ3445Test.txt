1:c062020: /**
1:c062020:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c062020:  * contributor license agreements.  See the NOTICE file distributed with
1:c062020:  * this work for additional information regarding copyright ownership.
1:c062020:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c062020:  * (the "License"); you may not use this file except in compliance with
1:c062020:  * the License.  You may obtain a copy of the License at
1:c062020:  *
1:c062020:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c062020:  *
1:c062020:  * Unless required by applicable law or agreed to in writing, software
1:c062020:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c062020:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c062020:  * See the License for the specific language governing permissions and
1:c062020:  * limitations under the License.
1:c062020:  */
1:c062020: package org.apache.activemq.bugs;
1:c062020: 
1:9829435: import static org.junit.Assert.assertEquals;
1:9829435: import static org.junit.Assert.assertTrue;
1:c062020: 
1:c062020: import javax.jms.Connection;
1:c062020: import javax.jms.ConnectionFactory;
1:c062020: import javax.jms.DeliveryMode;
1:c062020: import javax.jms.MessageProducer;
1:c062020: import javax.jms.Session;
1:c062020: import javax.management.ObjectName;
1:c062020: 
1:c062020: import org.apache.activemq.ActiveMQConnectionFactory;
1:c062020: import org.apache.activemq.broker.BrokerService;
1:c062020: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:c062020: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:c062020: import org.junit.After;
1:c062020: import org.junit.Before;
1:c062020: import org.junit.Test;
1:c062020: 
1:c062020: public class AMQ3445Test {
1:c062020: 
1:c062020:     private ConnectionFactory connectionFactory;
1:c062020:     private BrokerService broker;
1:c062020:     private String connectionUri;
1:c062020: 
1:c062020:     private final String queueName = "Consumer.MyApp.VirtualTopic.FOO";
1:c062020:     private final String topicName = "VirtualTopic.FOO";
1:c062020: 
1:c062020:     @Before
1:c062020:     public void startBroker() throws Exception {
1:c062020:         createBroker(true);
1:c062020:     }
1:c062020: 
1:c062020:     private void createBroker(boolean deleteMessages) throws Exception {
1:c062020:         broker = new BrokerService();
1:c062020:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:c062020:         broker.setPersistenceAdapter(new JDBCPersistenceAdapter());
1:c062020:         broker.setAdvisorySupport(false);
1:c062020:         broker.addConnector("tcp://0.0.0.0:0");
1:c062020:         broker.start();
1:c062020:         broker.waitUntilStarted();
1:c062020:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:c062020:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:c062020:     }
1:c062020: 
1:c062020:     private void restartBroker() throws Exception {
1:c062020:         if (broker != null) {
1:c062020:             broker.stop();
1:c062020:             broker.waitUntilStopped();
1:c062020:         }
1:c062020: 
1:c062020:         createBroker(false);
1:c062020:     }
1:c062020: 
1:c062020:     @After
1:c062020:     public void tearDown() throws Exception {
1:c062020:         if (broker != null) {
1:c062020:             broker.stop();
1:c062020:             broker.waitUntilStopped();
1:c062020:         }
1:c062020:     }
1:c062020: 
1:c062020:     @Test
1:c062020:     public void testJDBCRetiansDestinationAfterRestart() throws Exception {
1:c062020: 
1:c062020:         broker.getAdminView().addQueue(queueName);
1:c062020:         broker.getAdminView().addTopic(topicName);
1:c062020: 
1:c062020:         assertTrue(findDestination(queueName, false));
1:c062020:         assertTrue(findDestination(topicName, true));
1:c062020: 
1:c062020:         QueueViewMBean queue = getProxyToQueueViewMBean();
1:c062020:         assertEquals(0, queue.getQueueSize());
1:c062020: 
1:c062020:         restartBroker();
1:c062020: 
1:c062020:         assertTrue(findDestination(queueName, false));
1:c062020:         queue = getProxyToQueueViewMBean();
1:c062020:         assertEquals(0, queue.getQueueSize());
1:c062020: 
1:c062020:         sendMessage();
1:c062020:         restartBroker();
1:c062020:         assertTrue(findDestination(queueName, false));
1:c062020: 
1:c062020:         queue = getProxyToQueueViewMBean();
1:c062020:         assertEquals(1, queue.getQueueSize());
1:c062020:         sendMessage();
1:c062020:         assertEquals(2, queue.getQueueSize());
1:c062020: 
1:c062020:         restartBroker();
1:c062020:         assertTrue(findDestination(queueName, false));
1:c062020:         queue = getProxyToQueueViewMBean();
1:c062020:         assertEquals(2, queue.getQueueSize());
1:c062020:     }
1:c062020: 
1:c062020:     private void sendMessage() throws Exception {
1:c062020:         Connection connection = connectionFactory.createConnection();
1:c062020:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c062020:         MessageProducer producer = session.createProducer(session.createTopic(topicName));
1:c062020:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:c062020:         producer.send(session.createTextMessage("Testing"));
1:c062020:         producer.close();
1:c062020:         connection.close();
1:c062020:     }
1:c062020: 
1:c062020:     private QueueViewMBean getProxyToQueueViewMBean() throws Exception {
1:c062020:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
1:9829435:                 + ":destinationType=Queue,destinationName=" + queueName
1:9829435:                 + ",type=Broker,brokerName=localhost");
1:c062020:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:c062020:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:c062020:         return proxy;
1:c062020:     }
1:c062020: 
1:c062020:     private boolean findDestination(String name, boolean topic) throws Exception {
1:c062020: 
1:c062020:         ObjectName[] destinations;
1:c062020: 
1:c062020:         if (topic) {
1:c062020:             destinations = broker.getAdminView().getTopics();
1:c062020:         } else {
1:c062020:             destinations = broker.getAdminView().getQueues();
1:c062020:         }
1:c062020: 
1:c062020:         for (ObjectName destination : destinations) {
1:c062020:             if (destination.toString().contains(name)) {
1:c062020:                 return true;
1:c062020:             }
1:c062020:         }
1:c062020: 
1:c062020:         return false;
1:c062020:     }
1:c062020: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9829435
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:                 + ":destinationType=Queue,destinationName=" + queueName
1:                 + ",type=Broker,brokerName=localhost");
commit:c062020
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import static org.junit.Assert.*;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ3445Test {
1: 
1:     private ConnectionFactory connectionFactory;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     private final String queueName = "Consumer.MyApp.VirtualTopic.FOO";
1:     private final String topicName = "VirtualTopic.FOO";
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void createBroker(boolean deleteMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:         broker.setPersistenceAdapter(new JDBCPersistenceAdapter());
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1:         createBroker(false);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testJDBCRetiansDestinationAfterRestart() throws Exception {
1: 
1:         broker.getAdminView().addQueue(queueName);
1:         broker.getAdminView().addTopic(topicName);
1: 
1:         assertTrue(findDestination(queueName, false));
1:         assertTrue(findDestination(topicName, true));
1: 
1:         QueueViewMBean queue = getProxyToQueueViewMBean();
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         restartBroker();
1: 
1:         assertTrue(findDestination(queueName, false));
1:         queue = getProxyToQueueViewMBean();
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         sendMessage();
1:         restartBroker();
1:         assertTrue(findDestination(queueName, false));
1: 
1:         queue = getProxyToQueueViewMBean();
1:         assertEquals(1, queue.getQueueSize());
1:         sendMessage();
1:         assertEquals(2, queue.getQueueSize());
1: 
1:         restartBroker();
1:         assertTrue(findDestination(queueName, false));
1:         queue = getProxyToQueueViewMBean();
1:         assertEquals(2, queue.getQueueSize());
1:     }
1: 
1:     private void sendMessage() throws Exception {
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session.createTopic(topicName));
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(session.createTextMessage("Testing"));
1:         producer.close();
1:         connection.close();
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean() throws Exception {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=" + queueName
0:                 + ",BrokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     private boolean findDestination(String name, boolean topic) throws Exception {
1: 
1:         ObjectName[] destinations;
1: 
1:         if (topic) {
1:             destinations = broker.getAdminView().getTopics();
1:         } else {
1:             destinations = broker.getAdminView().getQueues();
1:         }
1: 
1:         for (ObjectName destination : destinations) {
1:             if (destination.toString().contains(name)) {
1:                 return true;
1:             }
1:         }
1: 
1:         return false;
1:     }
1: }
============================================================================