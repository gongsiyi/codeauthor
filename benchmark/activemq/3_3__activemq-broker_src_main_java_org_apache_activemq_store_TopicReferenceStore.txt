1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
3:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.store;
4:885c379: 
1:885c379: import java.io.IOException;
1:885c379: 
1:885c379: import javax.jms.JMSException;
1:885c379: 
1:885c379: import org.apache.activemq.broker.ConnectionContext;
1:885c379: import org.apache.activemq.command.MessageId;
1:885c379: import org.apache.activemq.command.SubscriptionInfo;
1:885c379: 
1:885c379: /**
1:885c379:  * A MessageStore for durable topic subscriptions
1:885c379:  */
1:885c379: public interface TopicReferenceStore extends ReferenceStore, TopicMessageStore {
1:5e05df1:     
1:885c379:     /**
1:1722001:      * Removes the last acknowledged messgeID for the given subscription so that
1:f812e34:      * we can recover and commence dispatching messages from the last checkpoint
1:1722001:      * N.B. - all messages previous to this one for a given subscriber
1:1722001:      * should also be acknowledged
1:5e05df1:      *
1:885c379:      * @param context
3:885c379:      * @param clientId
3:885c379:      * @param subscriptionName
1:885c379:      * @param messageId
1:5e05df1:      * 
1:1722001:      * @return true if there are no more references to the message - or the message is null
1:5e05df1:      * 
1:885c379:      * @throws IOException
1:885c379:      */
1:1722001:     boolean acknowledgeReference(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
1:885c379: 
1:885c379:     /**
1:885c379:      * @param clientId
1:885c379:      * @param subscriptionName
1:5e05df1:      * 
1:885c379:      * @throws IOException
1:885c379:      * @throws JMSException
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     void deleteSubscription(String clientId, String subscriptionName) throws IOException;
1:885c379: 
1:885c379:     /**
1:f812e34:      * For the new subscription find the last acknowledged message ID and then
1:f812e34:      * find any new messages since then and dispatch them to the subscription.
1:f812e34:      * <p/> e.g. if we dispatched some messages to a new durable topic
1:f812e34:      * subscriber, then went down before acknowledging any messages, we need to
1:f812e34:      * know the correct point from which to recover from.
1:5e05df1:      *
1:885c379:      * @param clientId
1:885c379:      * @param subscriptionName
1:885c379:      * @param listener
1:5e05df1:      *
1:885c379:      * @throws Exception
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception;
1:885c379: 
1:885c379:     /**
1:f812e34:      * For an active subscription - retrieve messages from the store for the
1:f812e34:      * subscriber after the lastMessageId messageId <p/>
1:5e05df1:      *
1:885c379:      * @param clientId
1:885c379:      * @param subscriptionName
1:885c379:      * @param maxReturned
1:885c379:      * @param listener
1:5e05df1:      * 
1:885c379:      * @throws Exception
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     void recoverNextMessages(String clientId, String subscriptionName, int maxReturned, MessageRecoveryListener listener) throws Exception;
1:885c379: 
1:885c379:     /**
1:885c379:      * A hint to the Store to reset any batching state for a durable subsriber
1:5e05df1:      *
1:f812e34:      * @param clientId
1:f812e34:      * @param subscriptionName
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     void resetBatching(String clientId, String subscriptionName);
1:f812e34: 
1:885c379:     /**
1:f812e34:      * Get the number of messages ready to deliver from the store to a durable
1:f812e34:      * subscriber
1:5e05df1:      *
1:885c379:      * @param clientId
1:885c379:      * @param subscriberName
1:5e05df1:      * 
1:885c379:      * @return the outstanding message count
1:5e05df1:      * 
1:885c379:      * @throws IOException
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     int getMessageCount(String clientId, String subscriberName) throws IOException;
1:f812e34: 
1:885c379:     /**
1:885c379:      * Finds the subscriber entry for the given consumer info
1:5e05df1:      *
1:885c379:      * @param clientId
1:885c379:      * @param subscriptionName
1:5e05df1:      * 
1:885c379:      * @return the SubscriptionInfo
1:5e05df1:      * 
1:885c379:      * @throws IOException
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
1:885c379: 
1:885c379:     /**
1:5e05df1:      * Lists all the durable subscriptions for a given destination.
1:5e05df1:      *
1:885c379:      * @return an array SubscriptionInfos
1:5e05df1:      * 
1:885c379:      * @throws IOException
1:885c379:      */
1:5e05df1:     @Override
1:fc00993:     SubscriptionInfo[] getAllSubscriptions() throws IOException;
1:885c379: 
1:885c379:     /**
1:f812e34:      * Inserts the subscriber info due to a subscription change <p/> If this is
1:f812e34:      * a new subscription and the retroactive is false, then the last message
1:f812e34:      * sent to the topic should be set as the last message acknowledged by they
1:f812e34:      * new subscription. Otherwise, if retroactive is true, then create the
1:f812e34:      * subscription without it having an acknowledged message so that on
1:f812e34:      * recovery, all message recorded for the topic get replayed.
1:5e05df1:      *
1:5e05df1:      * @param subscriptionInfo
1:885c379:      * @param retroactive
1:5e05df1:      *
1:885c379:      * @throws IOException
1:885c379:      */
1:fc00993:     void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
1:885c379: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:     
1:      *
1:      * 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:     @Override
1:      *
1:      * 
1:     @Override
1:      *
1:     @Override
1:      *
1:      * 
1:      * 
1:     @Override
1:      *
1:      * 
1:      * 
1:     @Override
1:      * Lists all the durable subscriptions for a given destination.
1:      *
1:      * 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param subscriptionInfo
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void deleteSubscription(String clientId, String subscriptionName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void recoverNextMessages(String clientId, String subscriptionName, int maxReturned, MessageRecoveryListener listener) throws Exception;
1:     void resetBatching(String clientId, String subscriptionName);
/////////////////////////////////////////////////////////////////////////
1:     int getMessageCount(String clientId, String subscriberName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     SubscriptionInfo[] getAllSubscriptions() throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:      * Stores the last acknowledged messgeID for the given subscription so that
1:      * we can recover and commence dispatching messages from the last checkpoint
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
0:                             MessageId messageId) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException;
1:      * For the new subscription find the last acknowledged message ID and then
1:      * find any new messages since then and dispatch them to the subscription.
1:      * <p/> e.g. if we dispatched some messages to a new durable topic
1:      * subscriber, then went down before acknowledging any messages, we need to
1:      * know the correct point from which to recover from.
/////////////////////////////////////////////////////////////////////////
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener)
0:         throws Exception;
1:      * For an active subscription - retrieve messages from the store for the
1:      * subscriber after the lastMessageId messageId <p/>
/////////////////////////////////////////////////////////////////////////
0:     public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned,
0:                                     MessageRecoveryListener listener) throws Exception;
1:      * 
1:      * @param clientId
1:      * @param subscriptionName
1:      * 
0:     public void resetBatching(String clientId, String subscriptionName);
1: 
1:      * Get the number of messages ready to deliver from the store to a durable
1:      * subscriber
1:      * 
0:     public int getMessageCount(String clientId, String subscriberName) throws IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:      * Inserts the subscriber info due to a subscription change <p/> If this is
1:      * a new subscription and the retroactive is false, then the last message
1:      * sent to the topic should be set as the last message acknowledged by they
1:      * new subscription. Otherwise, if retroactive is true, then create the
1:      * subscription without it having an acknowledged message so that on
1:      * recovery, all message recorded for the topic get replayed.
/////////////////////////////////////////////////////////////////////////
0:     public void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
0:     public void addSubsciption(SubscriptionInfo subscriptionInfo,boolean retroactive)
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.SubscriptionInfo;
1: 
1: /**
1:  * A MessageStore for durable topic subscriptions
0:  * 
0:  * @version $Revision: 1.4 $
1:  */
1: public interface TopicReferenceStore extends ReferenceStore, TopicMessageStore {
1:     /**
0:      * Stores the last acknowledged messgeID for the given subscription so that we can recover and commence dispatching
0:      * messages from the last checkpoint
0:      * 
1:      * @param context
1:      * @param clientId
1:      * @param subscriptionName
1:      * @param messageId
0:      * @param subscriptionPersistentId
1:      * @throws IOException
1:      */
0:     public void acknowledge(ConnectionContext context,String clientId,String subscriptionName,MessageId messageId)
0:                     throws IOException;
1: 
1:     /**
1:      * @param clientId
1:      * @param subscriptionName
0:      * @param sub
1:      * @throws IOException
1:      * @throws JMSException
1:      */
0:     public void deleteSubscription(String clientId,String subscriptionName) throws IOException;
1: 
1:     /**
0:      * For the new subscription find the last acknowledged message ID and then find any new messages since then and
0:      * dispatch them to the subscription. <p/> e.g. if we dispatched some messages to a new durable topic subscriber,
0:      * then went down before acknowledging any messages, we need to know the correct point from which to recover from.
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
1:      * @param listener
0:      * @param subscription
0:      * 
1:      * @throws Exception
1:      */
0:     public void recoverSubscription(String clientId,String subscriptionName,MessageRecoveryListener listener)
0:                     throws Exception;
1: 
1:     /**
0:      * For an active subscription - retrieve messages from the store for the subscriber after the lastMessageId
0:      * messageId <p/>
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
1:      * @param maxReturned
1:      * @param listener
0:      * 
1:      * @throws Exception
1:      */
0:     public void recoverNextMessages(String clientId,String subscriptionName,int maxReturned,
0:                     MessageRecoveryListener listener) throws Exception;
1: 
1:     /**
1:      * A hint to the Store to reset any batching state for a durable subsriber
1:      * @param clientId 
1:      * @param subscriptionName 
0:      *
1:      */
0:     public void resetBatching(String clientId,String subscriptionName);
1:     
1:     
1:     /**
0:      * Get the number of messages ready to deliver from the store to a durable subscriber
1:      * @param clientId
1:      * @param subscriberName
1:      * @return the outstanding message count
1:      * @throws IOException
1:      */
0:     public int getMessageCount(String clientId,String subscriberName) throws IOException;
1:     
1:     /**
1:      * Finds the subscriber entry for the given consumer info
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
1:      * @return the SubscriptionInfo
1:      * @throws IOException
1:      */
0:     public SubscriptionInfo lookupSubscription(String clientId,String subscriptionName) throws IOException;
1: 
1:     /**
0:      * Lists all the durable subscirptions for a given destination.
0:      * 
1:      * @return an array SubscriptionInfos
1:      * @throws IOException
1:      */
0:     public SubscriptionInfo[] getAllSubscriptions() throws IOException;
1: 
1:     /**
0:      * Inserts the subscriber info due to a subscription change <p/> If this is a new subscription and the retroactive
0:      * is false, then the last message sent to the topic should be set as the last message acknowledged by they new
0:      * subscription. Otherwise, if retroactive is true, then create the subscription without it having an acknowledged
0:      * message so that on recovery, all message recorded for the topic get replayed.
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
0:      * @param selector
1:      * @param retroactive
1:      * @throws IOException
0:      * 
1:      */
0:     public void addSubsciption(String clientId,String subscriptionName,String selector,boolean retroactive)
0:                     throws IOException;	
1: }
commit:481fc1e
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.store;
0: 
0: import java.io.IOException;
0: 
0: import javax.jms.JMSException;
0: 
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.SubscriptionInfo;
0: 
0: /**
0:  * A MessageStore for durable topic subscriptions
0:  * 
0:  * @version $Revision: 1.4 $
0:  */
0: public interface TopicReferenceStore extends ReferenceStore, TopicMessageStore {
0:     /**
0:      * Stores the last acknowledged messgeID for the given subscription so that we can recover and commence dispatching
0:      * messages from the last checkpoint
0:      * 
0:      * @param context
0:      * @param clientId
0:      * @param subscriptionName
0:      * @param messageId
0:      * @param subscriptionPersistentId
0:      * @throws IOException
0:      */
0:     public void acknowledge(ConnectionContext context,String clientId,String subscriptionName,MessageId messageId)
0:                     throws IOException;
0: 
0:     /**
0:      * @param clientId
0:      * @param subscriptionName
0:      * @param sub
0:      * @throws IOException
0:      * @throws JMSException
0:      */
0:     public void deleteSubscription(String clientId,String subscriptionName) throws IOException;
0: 
0:     /**
0:      * For the new subscription find the last acknowledged message ID and then find any new messages since then and
0:      * dispatch them to the subscription. <p/> e.g. if we dispatched some messages to a new durable topic subscriber,
0:      * then went down before acknowledging any messages, we need to know the correct point from which to recover from.
0:      * 
0:      * @param clientId
0:      * @param subscriptionName
0:      * @param listener
0:      * @param subscription
0:      * 
0:      * @throws Exception
0:      */
0:     public void recoverSubscription(String clientId,String subscriptionName,MessageRecoveryListener listener)
0:                     throws Exception;
0: 
0:     /**
0:      * For an active subscription - retrieve messages from the store for the subscriber after the lastMessageId
0:      * messageId <p/>
0:      * 
0:      * @param clientId
0:      * @param subscriptionName
0:      * @param maxReturned
0:      * @param listener
0:      * 
0:      * @throws Exception
0:      */
0:     public void recoverNextMessages(String clientId,String subscriptionName,int maxReturned,
0:                     MessageRecoveryListener listener) throws Exception;
0: 
0:     /**
0:      * A hint to the Store to reset any batching state for a durable subsriber
0:      * @param clientId 
0:      * @param subscriptionName 
0:      *
0:      */
0:     public void resetBatching(String clientId,String subscriptionName);
0:     
0:     
0:     /**
0:      * Get the number of messages ready to deliver from the store to a durable subscriber
0:      * @param clientId
0:      * @param subscriberName
0:      * @return the outstanding message count
0:      * @throws IOException
0:      */
0:     public int getMessageCount(String clientId,String subscriberName) throws IOException;
0:     
0:     /**
0:      * Finds the subscriber entry for the given consumer info
0:      * 
0:      * @param clientId
0:      * @param subscriptionName
0:      * @return the SubscriptionInfo
0:      * @throws IOException
0:      */
0:     public SubscriptionInfo lookupSubscription(String clientId,String subscriptionName) throws IOException;
0: 
0:     /**
0:      * Lists all the durable subscirptions for a given destination.
0:      * 
0:      * @return an array SubscriptionInfos
0:      * @throws IOException
0:      */
0:     public SubscriptionInfo[] getAllSubscriptions() throws IOException;
0: 
0:     /**
0:      * Inserts the subscriber info due to a subscription change <p/> If this is a new subscription and the retroactive
0:      * is false, then the last message sent to the topic should be set as the last message acknowledged by they new
0:      * subscription. Otherwise, if retroactive is true, then create the subscription without it having an acknowledged
0:      * message so that on recovery, all message recorded for the topic get replayed.
0:      * 
0:      * @param clientId
0:      * @param subscriptionName
0:      * @param selector
0:      * @param retroactive
0:      * @throws IOException
0:      * 
0:      */
0:     public void addSubsciption(String clientId,String subscriptionName,String selector,boolean retroactive)
0:                     throws IOException;	
0: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1722001
/////////////////////////////////////////////////////////////////////////
1:      * Removes the last acknowledged messgeID for the given subscription so that
1:      * N.B. - all messages previous to this one for a given subscriber
1:      * should also be acknowledged
1:      * @return true if there are no more references to the message - or the message is null
1:     boolean acknowledgeReference(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
============================================================================