1:3bf0245: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:3bf0245:  */
1:3bf0245: package org.apache.activemq.broker.region.cursors;
4:3bf0245: 
1:3bf0245: import javax.jms.Connection;
1:3bf0245: import javax.jms.ConnectionFactory;
1:3bf0245: import javax.jms.Destination;
1:3bf0245: import javax.jms.JMSException;
1:3bf0245: import javax.jms.MessageConsumer;
1:3bf0245: import javax.jms.Session;
1:74a7a8b: 
1:3c32abd: import junit.framework.Test;
1:3c32abd: 
1:3bf0245: import org.apache.activemq.broker.BrokerService;
1:3bf0245: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3bf0245: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3bf0245: import org.apache.activemq.broker.region.policy.StorePendingQueueMessageStoragePolicy;
1:3bf0245: 
1:3bf0245: /**
1:b0c2a40:  * 
1:3bf0245:  */
1:230a86c: public class CursorQueueStoreTest extends CursorSupport {
1:3bf0245: 
1:230a86c:     protected Destination getDestination(Session session) throws JMSException {
1:230a86c:         String queueName = "QUEUE" + getClass().getName();
1:3bf0245:         return session.createQueue(queueName);
1:3bf0245:     }
1:3bf0245: 
1:230a86c:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException {
1:230a86c:         Connection connection = fac.createConnection();
1:3bf0245:         connection.setClientID("testConsumer");
1:3bf0245:         connection.start();
1:3bf0245:         return connection;
1:3bf0245:     }
1:3bf0245: 
1:230a86c:     protected MessageConsumer getConsumer(Connection connection) throws Exception {
1:230a86c:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3bf0245:         Destination dest = getDestination(consumerSession);
1:230a86c:         MessageConsumer consumer = consumerSession.createConsumer(dest);
1:3bf0245:         return consumer;
1:3bf0245:     }
1:230a86c: 
1:230a86c:     protected void configureBroker(BrokerService answer) throws Exception {
1:3bf0245:         PolicyEntry policy = new PolicyEntry();
1:0c0be94:         policy.setPendingQueuePolicy(new StorePendingQueueMessageStoragePolicy());
1:3bf0245:         PolicyMap pMap = new PolicyMap();
1:3bf0245:         pMap.setDefaultEntry(policy);
1:3bf0245:         answer.setDestinationPolicy(pMap);
1:3bf0245:         answer.setDeleteAllMessagesOnStartup(true);
1:3bf0245:         answer.addConnector(bindAddress);
1:3bf0245:         answer.setDeleteAllMessagesOnStartup(true);
1:3bf0245:     }
1:3c32abd:     
1:3c32abd:     public static Test suite() {
1:3c32abd:         return suite(CursorQueueStoreTest.class);
1:3c32abd:     }
1:3c32abd: 
1:3c32abd:     public static void main(String[] args) {
1:3c32abd:         junit.textui.TestRunner.run(suite());
1:3c32abd:     }
1:3bf0245: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class CursorQueueStoreTest extends CursorSupport {
1:     protected Destination getDestination(Session session) throws JMSException {
1:         String queueName = "QUEUE" + getClass().getName();
1:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException {
1:         Connection connection = fac.createConnection();
1:     protected MessageConsumer getConsumer(Connection connection) throws Exception {
1:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(dest);
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
author:Gary Tully
-------------------------------------------------------------------------------
commit:3c32abd
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static Test suite() {
1:         return suite(CursorQueueStoreTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
1:         policy.setPendingQueuePolicy(new StorePendingQueueMessageStoragePolicy());
commit:3bf0245
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.StorePendingQueueMessageStoragePolicy;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public  class CursorQueueStoreTest extends CursorSupport{
1: 
0:     protected Destination getDestination(Session session) throws JMSException{
0:         String queueName="QUEUE" + getClass().getName();
1:         return session.createQueue(queueName);
1:     }
1: 
0:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException{
0:         Connection connection=fac.createConnection();
1:         connection.setClientID("testConsumer");
1:         connection.start();
1:         return connection;
1:     }
1: 
0:     protected MessageConsumer getConsumer(Connection connection) throws Exception{
0:         Session consumerSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:         Destination dest = getDestination(consumerSession);
0:         MessageConsumer consumer=consumerSession.createConsumer(dest);
1:         return consumer;
1:     }
1:     
1:     
0:     protected void configureBroker(BrokerService answer) throws Exception{
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setPendingQueueMessageStoragePolicy(new StorePendingQueueMessageStoragePolicy());
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         answer.setDestinationPolicy(pMap);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: }
============================================================================