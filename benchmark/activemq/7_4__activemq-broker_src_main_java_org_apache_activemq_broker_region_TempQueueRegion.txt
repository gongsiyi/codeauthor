1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
10:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:f9d5449: import org.apache.activemq.command.MessageDispatchNotification;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:230a86c: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:cd24f80: public class TempQueueRegion extends AbstractTempRegion {
1:230a86c: 
1:1005fc5:     public TempQueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
1:230a86c:                            DestinationFactory destinationFactory) {
1:230a86c:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
1:230a86c:     }
1:230a86c: 
1:044c07d:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException {
1:230a86c:         if (info.isBrowser()) {
1:16f2d75:             return new QueueBrowserSubscription(broker,usageManager,context, info);
1:d29ca2a:         } else {
1:16f2d75:             return new QueueSubscription(broker,usageManager,context, info);
2:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public String toString() {
1:9dd11cb:         return "TempQueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + usageManager.getMemoryUsage().getPercentUsage() + "%";
1:d29ca2a:     }
1:230a86c: 
1:bd7d59c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:230a86c: 
1:230a86c:         // Force a timeout value so that we don't get an error that
1:230a86c:         // there is still an active sub. Temp destination may be removed
1:230a86c:         // while a network sub is still active which is valid.
1:ecf89a6:         if (timeout == 0) {
1:230a86c:             timeout = 1;
1:ecf89a6:         }
1:230a86c: 
1:230a86c:         super.removeDestination(context, destination, timeout);
1:d29ca2a:     }
1:230a86c:     
1:f9d5449:     /*
1:f9d5449:      * For a Queue, dispatch order is imperative to match acks, so the dispatch is deferred till 
1:f9d5449:      * the notification to ensure that the subscription chosen by the master is used.
1:d29ca2a:      * 
1:f9d5449:      * (non-Javadoc)
1:f9d5449:      * @see org.apache.activemq.broker.region.AbstractRegion#processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)
1:f9d5449:      */
1:f9d5449:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:f9d5449:         processDispatchNotificationViaDestination(messageDispatchNotification);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:13829ef
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0:     private final BrokerService brokerService;
0:     public TempQueueRegion(RegionBroker broker, BrokerService brokerService, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
0:         this.brokerService = brokerService;
0:         return new Queue(brokerService, destination, null, destinationStatistics, taskRunnerFactory) {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (timeout == 0) {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     public TempQueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
1:                            DestinationFactory destinationFactory) {
1:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
0:         // We should allow the following to be configurable via a Destination
0:         // Policy
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         final ActiveMQTempDestination tempDest = (ActiveMQTempDestination)destination;
0:         return new Queue(broker.getRoot(), destination, memoryManager, null, destinationStatistics, taskRunnerFactory, null) {
1: 
0:             public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1: 
0:                 // Only consumers on the same connection can consume from
0:                 if (!context.isNetworkConnection() && !tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId())) {
0:                     throw new JMSException("Cannot subscribe to remote temporary destination: " + tempDest);
1: 
1:     }
1:         if (info.isBrowser()) {
0:             return new QueueBrowserSubscription(broker, context, info);
0:             return new QueueSubscription(broker, context, info);
1: 
0:         return "TempQueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + memoryManager.getPercentUsage() + "%";
1: 
1: 
1:         // Force a timeout value so that we don't get an error that
1:         // there is still an active sub. Temp destination may be removed
1:         // while a network sub is still active which is valid.
0:         if (timeout == 0)
1:             timeout = 1;
1: 
1:         super.removeDestination(context, destination, timeout);
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:             public void addSubscription(ConnectionContext context,Subscription sub) throws Exception {
commit:0f502fa
/////////////////////////////////////////////////////////////////////////
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
0: import javax.jms.InvalidSelectorException;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQTempDestination;
1: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.7 $
1:  */
0: public class TempQueueRegion extends AbstractRegion {
1: 
0:     public TempQueueRegion(DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory) {
0:         super(destinationStatistics, memoryManager, taskRunnerFactory, null);
0:         setAutoCreateDestinations(false);
1:     }
1: 
0:     protected Destination createDestination(ActiveMQDestination destination) throws Throwable {
0:         final ActiveMQTempDestination tempDest = (ActiveMQTempDestination) destination;
0:         return new Queue(destination, memoryManager, null, destinationStatistics, taskRunnerFactory) {
1:             
0:             public void addSubscription(ConnectionContext context,Subscription sub) throws Throwable {
0:                 // Only consumers on the same connection can consume from 
0:                 // the temporary destination
0:                 if( !tempDest.getConnectionId().equals( sub.getConsumerInfo().getConsumerId().getConnectionId() ) ) {
0:                     throw new JMSException("Cannot subscribe to remote temporary destination: "+tempDest);
1:                 }
0:                 super.addSubscription(context, sub);
0:             };
1:             
0:         };
1:     }
1: 
0:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         if( info.isBrowser() ) {
0:             return new QueueBrowserSubscription(context, info);
1:         } else {
0:             return new QueueSubscription(context, info);
1:         }
1:     }
1:     
1:     public String toString() {
0:         return "TempQueueRegion: destinations="+destinations.size()+", subscriptions="+subscriptions.size()+", memory="+memoryManager.getPercentUsage()+"%";
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:1005fc5
/////////////////////////////////////////////////////////////////////////
0: 
1:     public TempQueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
/////////////////////////////////////////////////////////////////////////
commit:f9d5449
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /*
1:      * For a Queue, dispatch order is imperative to match acks, so the dispatch is deferred till 
1:      * the notification to ensure that the subscription chosen by the master is used.
0:      * 
1:      * (non-Javadoc)
1:      * @see org.apache.activemq.broker.region.AbstractRegion#processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)
1:      */
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:         processDispatchNotificationViaDestination(messageDispatchNotification);
0:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static final Logger LOG = LoggerFactory.getLogger(TempQueueRegion.class);
commit:789789f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
/////////////////////////////////////////////////////////////////////////
0:         brokerService.getDestinationPolicy();
0:         configureQueue(result, destination);
/////////////////////////////////////////////////////////////////////////
0:     protected void configureQueue(Queue queue, ActiveMQDestination destination) {
0:         if (broker == null) {
0:             throw new IllegalStateException("broker property is not set");
0:         }
0:         if (broker.getDestinationPolicy() != null) {
0:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
0:             if (entry != null) {
0:                 entry.configure(broker,queue);
0:             }
0:         }
0:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
1:             return new QueueBrowserSubscription(broker,usageManager,context, info);
1:             return new QueueSubscription(broker,usageManager,context, info);
commit:044c07d
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException {
0:         Destination dest=null;
0:         try {
0:             dest = lookup(context, info.getDestination());
0:         } catch (Exception e) {
0:             JMSException jmsEx = new JMSException("Failed to retrieve destination from region "+ e);
0:             jmsEx.setLinkedException(e);
0:             throw jmsEx;
0:         }
0:             return new QueueBrowserSubscription(broker,dest,usageManager,context, info);
0:             return new QueueSubscription(broker,dest, usageManager,context, info);
commit:cd54a16
/////////////////////////////////////////////////////////////////////////
0:     protected Destination doCreateDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {  
0:         TempQueue result = new TempQueue(brokerService, destination, null, destinationStatistics, taskRunnerFactory);
0:         result.initialize();
0:         return result;
commit:cd24f80
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Connection;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public class TempQueueRegion extends AbstractTempRegion {
0:     private static final Log LOG = LogFactory.getLog(TempQueueRegion.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:     protected Destination doCreateDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:                 // However, we could have failed over - and we do this
0:                 // check client side anyways ....
0:                 if (!context.isFaultTolerant()
0:                         && (!context.isNetworkConnection() && !tempDest
0:                                 .getConnectionId().equals(
0:                                         sub.getConsumerInfo().getConsumerId()
0:                                                 .getConnectionId()))) {
0: 
0:                     tempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());
0:                     LOG.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
/////////////////////////////////////////////////////////////////////////
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
0:         return new Queue(broker.getRoot(), destination, usageManager, null, destinationStatistics, taskRunnerFactory) {
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
0:         return new Queue(broker.getRoot(), destination, usageManager, null, destinationStatistics, taskRunnerFactory, null) {
/////////////////////////////////////////////////////////////////////////
0:             return new QueueBrowserSubscription(broker,usageManager,context, info);
0:             return new QueueSubscription(broker, usageManager,context, info);
1:         return "TempQueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + usageManager.getMemoryUsage().getPercentUsage() + "%";
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
0:     public TempQueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
/////////////////////////////////////////////////////////////////////////
0:         return "TempQueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + memoryManager.getMemoryUsage().getPercentUsage() + "%";
commit:a414c20
/////////////////////////////////////////////////////////////////////////
0:         return new Queue(broker.getRoot(),destination, memoryManager, null, destinationStatistics, taskRunnerFactory, null) {
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public TempQueueRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) {
0:         super(broker,destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
commit:6cb66e4
/////////////////////////////////////////////////////////////////////////
0:     public TempQueueRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory) {
commit:4098942
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
0:     public TempQueueRegion(Broker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory) {
0:         super(broker,destinationStatistics, memoryManager, taskRunnerFactory, null);
/////////////////////////////////////////////////////////////////////////
0:             return new QueueBrowserSubscription(broker,context, info);
0:             return new QueueSubscription(broker,context, info);
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:bd7d59c
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQTempDestination;
/////////////////////////////////////////////////////////////////////////
0:         // We should allow the following to be configurable via a Destination Policy 
0:         // setAutoCreateDestinations(false);
0:     
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         final ActiveMQTempDestination tempDest = (ActiveMQTempDestination) destination;
0:         return new Queue(destination, memoryManager, null, destinationStatistics, taskRunnerFactory, null) {
0:             
0:             public void addSubscription(ConnectionContext context,Subscription sub) throws Exception {
0: 
0:                 // Only consumers on the same connection can consume from 
0:                 // the temporary destination
0:                 if( !context.isNetworkConnection() && !tempDest.getConnectionId().equals( sub.getConsumerInfo().getConsumerId().getConnectionId() ) ) {
0:                     throw new JMSException("Cannot subscribe to remote temporary destination: "+tempDest);
0:                 }
0:                 super.addSubscription(context, sub);
0:             };
0:             
0:         };
0:     }    
/////////////////////////////////////////////////////////////////////////
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0:     	
0:     	// Force a timeout value so that we don't get an error that 
0:     	// there is still an active sub.  Temp destination may be removed   
0:     	// while a network sub is still active which is valid.
0:     	if( timeout == 0 ) 
0:     		timeout = 1;
0:     	
0:     	super.removeDestination(context, destination, timeout);
0:     }
0:     
============================================================================